
RTCADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bd8  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f8  08003d88  08003d88  00013d88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004180  08004180  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004180  08004180  00014180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004188  08004188  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004188  08004188  00014188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800418c  0800418c  0001418c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004190  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000b0  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000bc  200000bc  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a9d8  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019e5  00000000  00000000  0002aa14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008b0  00000000  00000000  0002c400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000808  00000000  00000000  0002ccb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023a84  00000000  00000000  0002d4b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000af7e  00000000  00000000  00050f3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9695  00000000  00000000  0005beba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013554f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002560  00000000  00000000  001355a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000000c 	.word	0x2000000c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003d70 	.word	0x08003d70

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000010 	.word	0x20000010
 80001ec:	08003d70 	.word	0x08003d70

080001f0 <__aeabi_dmul>:
 80001f0:	b570      	push	{r4, r5, r6, lr}
 80001f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001fe:	bf1d      	ittte	ne
 8000200:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000204:	ea94 0f0c 	teqne	r4, ip
 8000208:	ea95 0f0c 	teqne	r5, ip
 800020c:	f000 f8de 	bleq	80003cc <__aeabi_dmul+0x1dc>
 8000210:	442c      	add	r4, r5
 8000212:	ea81 0603 	eor.w	r6, r1, r3
 8000216:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800021a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800021e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000222:	bf18      	it	ne
 8000224:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000228:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800022c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000230:	d038      	beq.n	80002a4 <__aeabi_dmul+0xb4>
 8000232:	fba0 ce02 	umull	ip, lr, r0, r2
 8000236:	f04f 0500 	mov.w	r5, #0
 800023a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800023e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000242:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000246:	f04f 0600 	mov.w	r6, #0
 800024a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800024e:	f09c 0f00 	teq	ip, #0
 8000252:	bf18      	it	ne
 8000254:	f04e 0e01 	orrne.w	lr, lr, #1
 8000258:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800025c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000260:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000264:	d204      	bcs.n	8000270 <__aeabi_dmul+0x80>
 8000266:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800026a:	416d      	adcs	r5, r5
 800026c:	eb46 0606 	adc.w	r6, r6, r6
 8000270:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000274:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000278:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800027c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000280:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000284:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000288:	bf88      	it	hi
 800028a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800028e:	d81e      	bhi.n	80002ce <__aeabi_dmul+0xde>
 8000290:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000294:	bf08      	it	eq
 8000296:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800029a:	f150 0000 	adcs.w	r0, r0, #0
 800029e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002a2:	bd70      	pop	{r4, r5, r6, pc}
 80002a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002a8:	ea46 0101 	orr.w	r1, r6, r1
 80002ac:	ea40 0002 	orr.w	r0, r0, r2
 80002b0:	ea81 0103 	eor.w	r1, r1, r3
 80002b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002b8:	bfc2      	ittt	gt
 80002ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002c2:	bd70      	popgt	{r4, r5, r6, pc}
 80002c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002c8:	f04f 0e00 	mov.w	lr, #0
 80002cc:	3c01      	subs	r4, #1
 80002ce:	f300 80ab 	bgt.w	8000428 <__aeabi_dmul+0x238>
 80002d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002d6:	bfde      	ittt	le
 80002d8:	2000      	movle	r0, #0
 80002da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002de:	bd70      	pople	{r4, r5, r6, pc}
 80002e0:	f1c4 0400 	rsb	r4, r4, #0
 80002e4:	3c20      	subs	r4, #32
 80002e6:	da35      	bge.n	8000354 <__aeabi_dmul+0x164>
 80002e8:	340c      	adds	r4, #12
 80002ea:	dc1b      	bgt.n	8000324 <__aeabi_dmul+0x134>
 80002ec:	f104 0414 	add.w	r4, r4, #20
 80002f0:	f1c4 0520 	rsb	r5, r4, #32
 80002f4:	fa00 f305 	lsl.w	r3, r0, r5
 80002f8:	fa20 f004 	lsr.w	r0, r0, r4
 80002fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000300:	ea40 0002 	orr.w	r0, r0, r2
 8000304:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000308:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800030c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000310:	fa21 f604 	lsr.w	r6, r1, r4
 8000314:	eb42 0106 	adc.w	r1, r2, r6
 8000318:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800031c:	bf08      	it	eq
 800031e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f1c4 040c 	rsb	r4, r4, #12
 8000328:	f1c4 0520 	rsb	r5, r4, #32
 800032c:	fa00 f304 	lsl.w	r3, r0, r4
 8000330:	fa20 f005 	lsr.w	r0, r0, r5
 8000334:	fa01 f204 	lsl.w	r2, r1, r4
 8000338:	ea40 0002 	orr.w	r0, r0, r2
 800033c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000340:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000344:	f141 0100 	adc.w	r1, r1, #0
 8000348:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800034c:	bf08      	it	eq
 800034e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000352:	bd70      	pop	{r4, r5, r6, pc}
 8000354:	f1c4 0520 	rsb	r5, r4, #32
 8000358:	fa00 f205 	lsl.w	r2, r0, r5
 800035c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000360:	fa20 f304 	lsr.w	r3, r0, r4
 8000364:	fa01 f205 	lsl.w	r2, r1, r5
 8000368:	ea43 0302 	orr.w	r3, r3, r2
 800036c:	fa21 f004 	lsr.w	r0, r1, r4
 8000370:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000374:	fa21 f204 	lsr.w	r2, r1, r4
 8000378:	ea20 0002 	bic.w	r0, r0, r2
 800037c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000380:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000384:	bf08      	it	eq
 8000386:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800038a:	bd70      	pop	{r4, r5, r6, pc}
 800038c:	f094 0f00 	teq	r4, #0
 8000390:	d10f      	bne.n	80003b2 <__aeabi_dmul+0x1c2>
 8000392:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000396:	0040      	lsls	r0, r0, #1
 8000398:	eb41 0101 	adc.w	r1, r1, r1
 800039c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003a0:	bf08      	it	eq
 80003a2:	3c01      	subeq	r4, #1
 80003a4:	d0f7      	beq.n	8000396 <__aeabi_dmul+0x1a6>
 80003a6:	ea41 0106 	orr.w	r1, r1, r6
 80003aa:	f095 0f00 	teq	r5, #0
 80003ae:	bf18      	it	ne
 80003b0:	4770      	bxne	lr
 80003b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003b6:	0052      	lsls	r2, r2, #1
 80003b8:	eb43 0303 	adc.w	r3, r3, r3
 80003bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003c0:	bf08      	it	eq
 80003c2:	3d01      	subeq	r5, #1
 80003c4:	d0f7      	beq.n	80003b6 <__aeabi_dmul+0x1c6>
 80003c6:	ea43 0306 	orr.w	r3, r3, r6
 80003ca:	4770      	bx	lr
 80003cc:	ea94 0f0c 	teq	r4, ip
 80003d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003d4:	bf18      	it	ne
 80003d6:	ea95 0f0c 	teqne	r5, ip
 80003da:	d00c      	beq.n	80003f6 <__aeabi_dmul+0x206>
 80003dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e0:	bf18      	it	ne
 80003e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003e6:	d1d1      	bne.n	800038c <__aeabi_dmul+0x19c>
 80003e8:	ea81 0103 	eor.w	r1, r1, r3
 80003ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f0:	f04f 0000 	mov.w	r0, #0
 80003f4:	bd70      	pop	{r4, r5, r6, pc}
 80003f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003fa:	bf06      	itte	eq
 80003fc:	4610      	moveq	r0, r2
 80003fe:	4619      	moveq	r1, r3
 8000400:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000404:	d019      	beq.n	800043a <__aeabi_dmul+0x24a>
 8000406:	ea94 0f0c 	teq	r4, ip
 800040a:	d102      	bne.n	8000412 <__aeabi_dmul+0x222>
 800040c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000410:	d113      	bne.n	800043a <__aeabi_dmul+0x24a>
 8000412:	ea95 0f0c 	teq	r5, ip
 8000416:	d105      	bne.n	8000424 <__aeabi_dmul+0x234>
 8000418:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800041c:	bf1c      	itt	ne
 800041e:	4610      	movne	r0, r2
 8000420:	4619      	movne	r1, r3
 8000422:	d10a      	bne.n	800043a <__aeabi_dmul+0x24a>
 8000424:	ea81 0103 	eor.w	r1, r1, r3
 8000428:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800042c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd70      	pop	{r4, r5, r6, pc}
 800043a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800043e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000442:	bd70      	pop	{r4, r5, r6, pc}

08000444 <__aeabi_drsub>:
 8000444:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000448:	e002      	b.n	8000450 <__adddf3>
 800044a:	bf00      	nop

0800044c <__aeabi_dsub>:
 800044c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000450 <__adddf3>:
 8000450:	b530      	push	{r4, r5, lr}
 8000452:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000456:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800045a:	ea94 0f05 	teq	r4, r5
 800045e:	bf08      	it	eq
 8000460:	ea90 0f02 	teqeq	r0, r2
 8000464:	bf1f      	itttt	ne
 8000466:	ea54 0c00 	orrsne.w	ip, r4, r0
 800046a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800046e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000472:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000476:	f000 80e2 	beq.w	800063e <__adddf3+0x1ee>
 800047a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800047e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000482:	bfb8      	it	lt
 8000484:	426d      	neglt	r5, r5
 8000486:	dd0c      	ble.n	80004a2 <__adddf3+0x52>
 8000488:	442c      	add	r4, r5
 800048a:	ea80 0202 	eor.w	r2, r0, r2
 800048e:	ea81 0303 	eor.w	r3, r1, r3
 8000492:	ea82 0000 	eor.w	r0, r2, r0
 8000496:	ea83 0101 	eor.w	r1, r3, r1
 800049a:	ea80 0202 	eor.w	r2, r0, r2
 800049e:	ea81 0303 	eor.w	r3, r1, r3
 80004a2:	2d36      	cmp	r5, #54	; 0x36
 80004a4:	bf88      	it	hi
 80004a6:	bd30      	pophi	{r4, r5, pc}
 80004a8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004b0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004b4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004b8:	d002      	beq.n	80004c0 <__adddf3+0x70>
 80004ba:	4240      	negs	r0, r0
 80004bc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004c4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004c8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004cc:	d002      	beq.n	80004d4 <__adddf3+0x84>
 80004ce:	4252      	negs	r2, r2
 80004d0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004d4:	ea94 0f05 	teq	r4, r5
 80004d8:	f000 80a7 	beq.w	800062a <__adddf3+0x1da>
 80004dc:	f1a4 0401 	sub.w	r4, r4, #1
 80004e0:	f1d5 0e20 	rsbs	lr, r5, #32
 80004e4:	db0d      	blt.n	8000502 <__adddf3+0xb2>
 80004e6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004ea:	fa22 f205 	lsr.w	r2, r2, r5
 80004ee:	1880      	adds	r0, r0, r2
 80004f0:	f141 0100 	adc.w	r1, r1, #0
 80004f4:	fa03 f20e 	lsl.w	r2, r3, lr
 80004f8:	1880      	adds	r0, r0, r2
 80004fa:	fa43 f305 	asr.w	r3, r3, r5
 80004fe:	4159      	adcs	r1, r3
 8000500:	e00e      	b.n	8000520 <__adddf3+0xd0>
 8000502:	f1a5 0520 	sub.w	r5, r5, #32
 8000506:	f10e 0e20 	add.w	lr, lr, #32
 800050a:	2a01      	cmp	r2, #1
 800050c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000510:	bf28      	it	cs
 8000512:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000516:	fa43 f305 	asr.w	r3, r3, r5
 800051a:	18c0      	adds	r0, r0, r3
 800051c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	d507      	bpl.n	8000536 <__adddf3+0xe6>
 8000526:	f04f 0e00 	mov.w	lr, #0
 800052a:	f1dc 0c00 	rsbs	ip, ip, #0
 800052e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000532:	eb6e 0101 	sbc.w	r1, lr, r1
 8000536:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800053a:	d31b      	bcc.n	8000574 <__adddf3+0x124>
 800053c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000540:	d30c      	bcc.n	800055c <__adddf3+0x10c>
 8000542:	0849      	lsrs	r1, r1, #1
 8000544:	ea5f 0030 	movs.w	r0, r0, rrx
 8000548:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800054c:	f104 0401 	add.w	r4, r4, #1
 8000550:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000554:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000558:	f080 809a 	bcs.w	8000690 <__adddf3+0x240>
 800055c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000560:	bf08      	it	eq
 8000562:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000566:	f150 0000 	adcs.w	r0, r0, #0
 800056a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800056e:	ea41 0105 	orr.w	r1, r1, r5
 8000572:	bd30      	pop	{r4, r5, pc}
 8000574:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000578:	4140      	adcs	r0, r0
 800057a:	eb41 0101 	adc.w	r1, r1, r1
 800057e:	3c01      	subs	r4, #1
 8000580:	bf28      	it	cs
 8000582:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000586:	d2e9      	bcs.n	800055c <__adddf3+0x10c>
 8000588:	f091 0f00 	teq	r1, #0
 800058c:	bf04      	itt	eq
 800058e:	4601      	moveq	r1, r0
 8000590:	2000      	moveq	r0, #0
 8000592:	fab1 f381 	clz	r3, r1
 8000596:	bf08      	it	eq
 8000598:	3320      	addeq	r3, #32
 800059a:	f1a3 030b 	sub.w	r3, r3, #11
 800059e:	f1b3 0220 	subs.w	r2, r3, #32
 80005a2:	da0c      	bge.n	80005be <__adddf3+0x16e>
 80005a4:	320c      	adds	r2, #12
 80005a6:	dd08      	ble.n	80005ba <__adddf3+0x16a>
 80005a8:	f102 0c14 	add.w	ip, r2, #20
 80005ac:	f1c2 020c 	rsb	r2, r2, #12
 80005b0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005b4:	fa21 f102 	lsr.w	r1, r1, r2
 80005b8:	e00c      	b.n	80005d4 <__adddf3+0x184>
 80005ba:	f102 0214 	add.w	r2, r2, #20
 80005be:	bfd8      	it	le
 80005c0:	f1c2 0c20 	rsble	ip, r2, #32
 80005c4:	fa01 f102 	lsl.w	r1, r1, r2
 80005c8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005cc:	bfdc      	itt	le
 80005ce:	ea41 010c 	orrle.w	r1, r1, ip
 80005d2:	4090      	lslle	r0, r2
 80005d4:	1ae4      	subs	r4, r4, r3
 80005d6:	bfa2      	ittt	ge
 80005d8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005dc:	4329      	orrge	r1, r5
 80005de:	bd30      	popge	{r4, r5, pc}
 80005e0:	ea6f 0404 	mvn.w	r4, r4
 80005e4:	3c1f      	subs	r4, #31
 80005e6:	da1c      	bge.n	8000622 <__adddf3+0x1d2>
 80005e8:	340c      	adds	r4, #12
 80005ea:	dc0e      	bgt.n	800060a <__adddf3+0x1ba>
 80005ec:	f104 0414 	add.w	r4, r4, #20
 80005f0:	f1c4 0220 	rsb	r2, r4, #32
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f302 	lsl.w	r3, r1, r2
 80005fc:	ea40 0003 	orr.w	r0, r0, r3
 8000600:	fa21 f304 	lsr.w	r3, r1, r4
 8000604:	ea45 0103 	orr.w	r1, r5, r3
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	f1c4 040c 	rsb	r4, r4, #12
 800060e:	f1c4 0220 	rsb	r2, r4, #32
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 f304 	lsl.w	r3, r1, r4
 800061a:	ea40 0003 	orr.w	r0, r0, r3
 800061e:	4629      	mov	r1, r5
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	fa21 f004 	lsr.w	r0, r1, r4
 8000626:	4629      	mov	r1, r5
 8000628:	bd30      	pop	{r4, r5, pc}
 800062a:	f094 0f00 	teq	r4, #0
 800062e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000632:	bf06      	itte	eq
 8000634:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000638:	3401      	addeq	r4, #1
 800063a:	3d01      	subne	r5, #1
 800063c:	e74e      	b.n	80004dc <__adddf3+0x8c>
 800063e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000642:	bf18      	it	ne
 8000644:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000648:	d029      	beq.n	800069e <__adddf3+0x24e>
 800064a:	ea94 0f05 	teq	r4, r5
 800064e:	bf08      	it	eq
 8000650:	ea90 0f02 	teqeq	r0, r2
 8000654:	d005      	beq.n	8000662 <__adddf3+0x212>
 8000656:	ea54 0c00 	orrs.w	ip, r4, r0
 800065a:	bf04      	itt	eq
 800065c:	4619      	moveq	r1, r3
 800065e:	4610      	moveq	r0, r2
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	ea91 0f03 	teq	r1, r3
 8000666:	bf1e      	ittt	ne
 8000668:	2100      	movne	r1, #0
 800066a:	2000      	movne	r0, #0
 800066c:	bd30      	popne	{r4, r5, pc}
 800066e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000672:	d105      	bne.n	8000680 <__adddf3+0x230>
 8000674:	0040      	lsls	r0, r0, #1
 8000676:	4149      	adcs	r1, r1
 8000678:	bf28      	it	cs
 800067a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd30      	pop	{r4, r5, pc}
 8000680:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000684:	bf3c      	itt	cc
 8000686:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800068a:	bd30      	popcc	{r4, r5, pc}
 800068c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000690:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000694:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000698:	f04f 0000 	mov.w	r0, #0
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006a2:	bf1a      	itte	ne
 80006a4:	4619      	movne	r1, r3
 80006a6:	4610      	movne	r0, r2
 80006a8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006ac:	bf1c      	itt	ne
 80006ae:	460b      	movne	r3, r1
 80006b0:	4602      	movne	r2, r0
 80006b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006b6:	bf06      	itte	eq
 80006b8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006bc:	ea91 0f03 	teqeq	r1, r3
 80006c0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	bf00      	nop

080006c8 <__aeabi_ui2d>:
 80006c8:	f090 0f00 	teq	r0, #0
 80006cc:	bf04      	itt	eq
 80006ce:	2100      	moveq	r1, #0
 80006d0:	4770      	bxeq	lr
 80006d2:	b530      	push	{r4, r5, lr}
 80006d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006dc:	f04f 0500 	mov.w	r5, #0
 80006e0:	f04f 0100 	mov.w	r1, #0
 80006e4:	e750      	b.n	8000588 <__adddf3+0x138>
 80006e6:	bf00      	nop

080006e8 <__aeabi_i2d>:
 80006e8:	f090 0f00 	teq	r0, #0
 80006ec:	bf04      	itt	eq
 80006ee:	2100      	moveq	r1, #0
 80006f0:	4770      	bxeq	lr
 80006f2:	b530      	push	{r4, r5, lr}
 80006f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006fc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000700:	bf48      	it	mi
 8000702:	4240      	negmi	r0, r0
 8000704:	f04f 0100 	mov.w	r1, #0
 8000708:	e73e      	b.n	8000588 <__adddf3+0x138>
 800070a:	bf00      	nop

0800070c <__aeabi_f2d>:
 800070c:	0042      	lsls	r2, r0, #1
 800070e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000712:	ea4f 0131 	mov.w	r1, r1, rrx
 8000716:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800071a:	bf1f      	itttt	ne
 800071c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000720:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000724:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000728:	4770      	bxne	lr
 800072a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800072e:	bf08      	it	eq
 8000730:	4770      	bxeq	lr
 8000732:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000736:	bf04      	itt	eq
 8000738:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800073c:	4770      	bxeq	lr
 800073e:	b530      	push	{r4, r5, lr}
 8000740:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000744:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800074c:	e71c      	b.n	8000588 <__adddf3+0x138>
 800074e:	bf00      	nop

08000750 <__aeabi_ul2d>:
 8000750:	ea50 0201 	orrs.w	r2, r0, r1
 8000754:	bf08      	it	eq
 8000756:	4770      	bxeq	lr
 8000758:	b530      	push	{r4, r5, lr}
 800075a:	f04f 0500 	mov.w	r5, #0
 800075e:	e00a      	b.n	8000776 <__aeabi_l2d+0x16>

08000760 <__aeabi_l2d>:
 8000760:	ea50 0201 	orrs.w	r2, r0, r1
 8000764:	bf08      	it	eq
 8000766:	4770      	bxeq	lr
 8000768:	b530      	push	{r4, r5, lr}
 800076a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800076e:	d502      	bpl.n	8000776 <__aeabi_l2d+0x16>
 8000770:	4240      	negs	r0, r0
 8000772:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000776:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800077a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000782:	f43f aed8 	beq.w	8000536 <__adddf3+0xe6>
 8000786:	f04f 0203 	mov.w	r2, #3
 800078a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800078e:	bf18      	it	ne
 8000790:	3203      	addne	r2, #3
 8000792:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000796:	bf18      	it	ne
 8000798:	3203      	addne	r2, #3
 800079a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800079e:	f1c2 0320 	rsb	r3, r2, #32
 80007a2:	fa00 fc03 	lsl.w	ip, r0, r3
 80007a6:	fa20 f002 	lsr.w	r0, r0, r2
 80007aa:	fa01 fe03 	lsl.w	lr, r1, r3
 80007ae:	ea40 000e 	orr.w	r0, r0, lr
 80007b2:	fa21 f102 	lsr.w	r1, r1, r2
 80007b6:	4414      	add	r4, r2
 80007b8:	e6bd      	b.n	8000536 <__adddf3+0xe6>
 80007ba:	bf00      	nop

080007bc <__aeabi_d2uiz>:
 80007bc:	004a      	lsls	r2, r1, #1
 80007be:	d211      	bcs.n	80007e4 <__aeabi_d2uiz+0x28>
 80007c0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007c4:	d211      	bcs.n	80007ea <__aeabi_d2uiz+0x2e>
 80007c6:	d50d      	bpl.n	80007e4 <__aeabi_d2uiz+0x28>
 80007c8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007cc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007d0:	d40e      	bmi.n	80007f0 <__aeabi_d2uiz+0x34>
 80007d2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007da:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007de:	fa23 f002 	lsr.w	r0, r3, r2
 80007e2:	4770      	bx	lr
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	4770      	bx	lr
 80007ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007ee:	d102      	bne.n	80007f6 <__aeabi_d2uiz+0x3a>
 80007f0:	f04f 30ff 	mov.w	r0, #4294967295
 80007f4:	4770      	bx	lr
 80007f6:	f04f 0000 	mov.w	r0, #0
 80007fa:	4770      	bx	lr

080007fc <__aeabi_d2f>:
 80007fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000800:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000804:	bf24      	itt	cs
 8000806:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800080a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800080e:	d90d      	bls.n	800082c <__aeabi_d2f+0x30>
 8000810:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000814:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000818:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800081c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000820:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000824:	bf08      	it	eq
 8000826:	f020 0001 	biceq.w	r0, r0, #1
 800082a:	4770      	bx	lr
 800082c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000830:	d121      	bne.n	8000876 <__aeabi_d2f+0x7a>
 8000832:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000836:	bfbc      	itt	lt
 8000838:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800083c:	4770      	bxlt	lr
 800083e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000842:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000846:	f1c2 0218 	rsb	r2, r2, #24
 800084a:	f1c2 0c20 	rsb	ip, r2, #32
 800084e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000852:	fa20 f002 	lsr.w	r0, r0, r2
 8000856:	bf18      	it	ne
 8000858:	f040 0001 	orrne.w	r0, r0, #1
 800085c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000860:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000864:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000868:	ea40 000c 	orr.w	r0, r0, ip
 800086c:	fa23 f302 	lsr.w	r3, r3, r2
 8000870:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000874:	e7cc      	b.n	8000810 <__aeabi_d2f+0x14>
 8000876:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800087a:	d107      	bne.n	800088c <__aeabi_d2f+0x90>
 800087c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000880:	bf1e      	ittt	ne
 8000882:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000886:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800088a:	4770      	bxne	lr
 800088c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000890:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000894:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop

0800089c <__aeabi_uldivmod>:
 800089c:	b953      	cbnz	r3, 80008b4 <__aeabi_uldivmod+0x18>
 800089e:	b94a      	cbnz	r2, 80008b4 <__aeabi_uldivmod+0x18>
 80008a0:	2900      	cmp	r1, #0
 80008a2:	bf08      	it	eq
 80008a4:	2800      	cmpeq	r0, #0
 80008a6:	bf1c      	itt	ne
 80008a8:	f04f 31ff 	movne.w	r1, #4294967295
 80008ac:	f04f 30ff 	movne.w	r0, #4294967295
 80008b0:	f000 b974 	b.w	8000b9c <__aeabi_idiv0>
 80008b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008bc:	f000 f806 	bl	80008cc <__udivmoddi4>
 80008c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008c8:	b004      	add	sp, #16
 80008ca:	4770      	bx	lr

080008cc <__udivmoddi4>:
 80008cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008d0:	9d08      	ldr	r5, [sp, #32]
 80008d2:	4604      	mov	r4, r0
 80008d4:	468e      	mov	lr, r1
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d14d      	bne.n	8000976 <__udivmoddi4+0xaa>
 80008da:	428a      	cmp	r2, r1
 80008dc:	4694      	mov	ip, r2
 80008de:	d969      	bls.n	80009b4 <__udivmoddi4+0xe8>
 80008e0:	fab2 f282 	clz	r2, r2
 80008e4:	b152      	cbz	r2, 80008fc <__udivmoddi4+0x30>
 80008e6:	fa01 f302 	lsl.w	r3, r1, r2
 80008ea:	f1c2 0120 	rsb	r1, r2, #32
 80008ee:	fa20 f101 	lsr.w	r1, r0, r1
 80008f2:	fa0c fc02 	lsl.w	ip, ip, r2
 80008f6:	ea41 0e03 	orr.w	lr, r1, r3
 80008fa:	4094      	lsls	r4, r2
 80008fc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000900:	0c21      	lsrs	r1, r4, #16
 8000902:	fbbe f6f8 	udiv	r6, lr, r8
 8000906:	fa1f f78c 	uxth.w	r7, ip
 800090a:	fb08 e316 	mls	r3, r8, r6, lr
 800090e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000912:	fb06 f107 	mul.w	r1, r6, r7
 8000916:	4299      	cmp	r1, r3
 8000918:	d90a      	bls.n	8000930 <__udivmoddi4+0x64>
 800091a:	eb1c 0303 	adds.w	r3, ip, r3
 800091e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000922:	f080 811f 	bcs.w	8000b64 <__udivmoddi4+0x298>
 8000926:	4299      	cmp	r1, r3
 8000928:	f240 811c 	bls.w	8000b64 <__udivmoddi4+0x298>
 800092c:	3e02      	subs	r6, #2
 800092e:	4463      	add	r3, ip
 8000930:	1a5b      	subs	r3, r3, r1
 8000932:	b2a4      	uxth	r4, r4
 8000934:	fbb3 f0f8 	udiv	r0, r3, r8
 8000938:	fb08 3310 	mls	r3, r8, r0, r3
 800093c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000940:	fb00 f707 	mul.w	r7, r0, r7
 8000944:	42a7      	cmp	r7, r4
 8000946:	d90a      	bls.n	800095e <__udivmoddi4+0x92>
 8000948:	eb1c 0404 	adds.w	r4, ip, r4
 800094c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000950:	f080 810a 	bcs.w	8000b68 <__udivmoddi4+0x29c>
 8000954:	42a7      	cmp	r7, r4
 8000956:	f240 8107 	bls.w	8000b68 <__udivmoddi4+0x29c>
 800095a:	4464      	add	r4, ip
 800095c:	3802      	subs	r0, #2
 800095e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000962:	1be4      	subs	r4, r4, r7
 8000964:	2600      	movs	r6, #0
 8000966:	b11d      	cbz	r5, 8000970 <__udivmoddi4+0xa4>
 8000968:	40d4      	lsrs	r4, r2
 800096a:	2300      	movs	r3, #0
 800096c:	e9c5 4300 	strd	r4, r3, [r5]
 8000970:	4631      	mov	r1, r6
 8000972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000976:	428b      	cmp	r3, r1
 8000978:	d909      	bls.n	800098e <__udivmoddi4+0xc2>
 800097a:	2d00      	cmp	r5, #0
 800097c:	f000 80ef 	beq.w	8000b5e <__udivmoddi4+0x292>
 8000980:	2600      	movs	r6, #0
 8000982:	e9c5 0100 	strd	r0, r1, [r5]
 8000986:	4630      	mov	r0, r6
 8000988:	4631      	mov	r1, r6
 800098a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800098e:	fab3 f683 	clz	r6, r3
 8000992:	2e00      	cmp	r6, #0
 8000994:	d14a      	bne.n	8000a2c <__udivmoddi4+0x160>
 8000996:	428b      	cmp	r3, r1
 8000998:	d302      	bcc.n	80009a0 <__udivmoddi4+0xd4>
 800099a:	4282      	cmp	r2, r0
 800099c:	f200 80f9 	bhi.w	8000b92 <__udivmoddi4+0x2c6>
 80009a0:	1a84      	subs	r4, r0, r2
 80009a2:	eb61 0303 	sbc.w	r3, r1, r3
 80009a6:	2001      	movs	r0, #1
 80009a8:	469e      	mov	lr, r3
 80009aa:	2d00      	cmp	r5, #0
 80009ac:	d0e0      	beq.n	8000970 <__udivmoddi4+0xa4>
 80009ae:	e9c5 4e00 	strd	r4, lr, [r5]
 80009b2:	e7dd      	b.n	8000970 <__udivmoddi4+0xa4>
 80009b4:	b902      	cbnz	r2, 80009b8 <__udivmoddi4+0xec>
 80009b6:	deff      	udf	#255	; 0xff
 80009b8:	fab2 f282 	clz	r2, r2
 80009bc:	2a00      	cmp	r2, #0
 80009be:	f040 8092 	bne.w	8000ae6 <__udivmoddi4+0x21a>
 80009c2:	eba1 010c 	sub.w	r1, r1, ip
 80009c6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009ca:	fa1f fe8c 	uxth.w	lr, ip
 80009ce:	2601      	movs	r6, #1
 80009d0:	0c20      	lsrs	r0, r4, #16
 80009d2:	fbb1 f3f7 	udiv	r3, r1, r7
 80009d6:	fb07 1113 	mls	r1, r7, r3, r1
 80009da:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009de:	fb0e f003 	mul.w	r0, lr, r3
 80009e2:	4288      	cmp	r0, r1
 80009e4:	d908      	bls.n	80009f8 <__udivmoddi4+0x12c>
 80009e6:	eb1c 0101 	adds.w	r1, ip, r1
 80009ea:	f103 38ff 	add.w	r8, r3, #4294967295
 80009ee:	d202      	bcs.n	80009f6 <__udivmoddi4+0x12a>
 80009f0:	4288      	cmp	r0, r1
 80009f2:	f200 80cb 	bhi.w	8000b8c <__udivmoddi4+0x2c0>
 80009f6:	4643      	mov	r3, r8
 80009f8:	1a09      	subs	r1, r1, r0
 80009fa:	b2a4      	uxth	r4, r4
 80009fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a00:	fb07 1110 	mls	r1, r7, r0, r1
 8000a04:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a08:	fb0e fe00 	mul.w	lr, lr, r0
 8000a0c:	45a6      	cmp	lr, r4
 8000a0e:	d908      	bls.n	8000a22 <__udivmoddi4+0x156>
 8000a10:	eb1c 0404 	adds.w	r4, ip, r4
 8000a14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a18:	d202      	bcs.n	8000a20 <__udivmoddi4+0x154>
 8000a1a:	45a6      	cmp	lr, r4
 8000a1c:	f200 80bb 	bhi.w	8000b96 <__udivmoddi4+0x2ca>
 8000a20:	4608      	mov	r0, r1
 8000a22:	eba4 040e 	sub.w	r4, r4, lr
 8000a26:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a2a:	e79c      	b.n	8000966 <__udivmoddi4+0x9a>
 8000a2c:	f1c6 0720 	rsb	r7, r6, #32
 8000a30:	40b3      	lsls	r3, r6
 8000a32:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a36:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a3a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a3e:	fa01 f306 	lsl.w	r3, r1, r6
 8000a42:	431c      	orrs	r4, r3
 8000a44:	40f9      	lsrs	r1, r7
 8000a46:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a4a:	fa00 f306 	lsl.w	r3, r0, r6
 8000a4e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a52:	0c20      	lsrs	r0, r4, #16
 8000a54:	fa1f fe8c 	uxth.w	lr, ip
 8000a58:	fb09 1118 	mls	r1, r9, r8, r1
 8000a5c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a60:	fb08 f00e 	mul.w	r0, r8, lr
 8000a64:	4288      	cmp	r0, r1
 8000a66:	fa02 f206 	lsl.w	r2, r2, r6
 8000a6a:	d90b      	bls.n	8000a84 <__udivmoddi4+0x1b8>
 8000a6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a70:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a74:	f080 8088 	bcs.w	8000b88 <__udivmoddi4+0x2bc>
 8000a78:	4288      	cmp	r0, r1
 8000a7a:	f240 8085 	bls.w	8000b88 <__udivmoddi4+0x2bc>
 8000a7e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a82:	4461      	add	r1, ip
 8000a84:	1a09      	subs	r1, r1, r0
 8000a86:	b2a4      	uxth	r4, r4
 8000a88:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a8c:	fb09 1110 	mls	r1, r9, r0, r1
 8000a90:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a98:	458e      	cmp	lr, r1
 8000a9a:	d908      	bls.n	8000aae <__udivmoddi4+0x1e2>
 8000a9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000aa0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000aa4:	d26c      	bcs.n	8000b80 <__udivmoddi4+0x2b4>
 8000aa6:	458e      	cmp	lr, r1
 8000aa8:	d96a      	bls.n	8000b80 <__udivmoddi4+0x2b4>
 8000aaa:	3802      	subs	r0, #2
 8000aac:	4461      	add	r1, ip
 8000aae:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ab2:	fba0 9402 	umull	r9, r4, r0, r2
 8000ab6:	eba1 010e 	sub.w	r1, r1, lr
 8000aba:	42a1      	cmp	r1, r4
 8000abc:	46c8      	mov	r8, r9
 8000abe:	46a6      	mov	lr, r4
 8000ac0:	d356      	bcc.n	8000b70 <__udivmoddi4+0x2a4>
 8000ac2:	d053      	beq.n	8000b6c <__udivmoddi4+0x2a0>
 8000ac4:	b15d      	cbz	r5, 8000ade <__udivmoddi4+0x212>
 8000ac6:	ebb3 0208 	subs.w	r2, r3, r8
 8000aca:	eb61 010e 	sbc.w	r1, r1, lr
 8000ace:	fa01 f707 	lsl.w	r7, r1, r7
 8000ad2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ad6:	40f1      	lsrs	r1, r6
 8000ad8:	431f      	orrs	r7, r3
 8000ada:	e9c5 7100 	strd	r7, r1, [r5]
 8000ade:	2600      	movs	r6, #0
 8000ae0:	4631      	mov	r1, r6
 8000ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae6:	f1c2 0320 	rsb	r3, r2, #32
 8000aea:	40d8      	lsrs	r0, r3
 8000aec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000af0:	fa21 f303 	lsr.w	r3, r1, r3
 8000af4:	4091      	lsls	r1, r2
 8000af6:	4301      	orrs	r1, r0
 8000af8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000afc:	fa1f fe8c 	uxth.w	lr, ip
 8000b00:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b04:	fb07 3610 	mls	r6, r7, r0, r3
 8000b08:	0c0b      	lsrs	r3, r1, #16
 8000b0a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b0e:	fb00 f60e 	mul.w	r6, r0, lr
 8000b12:	429e      	cmp	r6, r3
 8000b14:	fa04 f402 	lsl.w	r4, r4, r2
 8000b18:	d908      	bls.n	8000b2c <__udivmoddi4+0x260>
 8000b1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b22:	d22f      	bcs.n	8000b84 <__udivmoddi4+0x2b8>
 8000b24:	429e      	cmp	r6, r3
 8000b26:	d92d      	bls.n	8000b84 <__udivmoddi4+0x2b8>
 8000b28:	3802      	subs	r0, #2
 8000b2a:	4463      	add	r3, ip
 8000b2c:	1b9b      	subs	r3, r3, r6
 8000b2e:	b289      	uxth	r1, r1
 8000b30:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b34:	fb07 3316 	mls	r3, r7, r6, r3
 8000b38:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b3c:	fb06 f30e 	mul.w	r3, r6, lr
 8000b40:	428b      	cmp	r3, r1
 8000b42:	d908      	bls.n	8000b56 <__udivmoddi4+0x28a>
 8000b44:	eb1c 0101 	adds.w	r1, ip, r1
 8000b48:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b4c:	d216      	bcs.n	8000b7c <__udivmoddi4+0x2b0>
 8000b4e:	428b      	cmp	r3, r1
 8000b50:	d914      	bls.n	8000b7c <__udivmoddi4+0x2b0>
 8000b52:	3e02      	subs	r6, #2
 8000b54:	4461      	add	r1, ip
 8000b56:	1ac9      	subs	r1, r1, r3
 8000b58:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b5c:	e738      	b.n	80009d0 <__udivmoddi4+0x104>
 8000b5e:	462e      	mov	r6, r5
 8000b60:	4628      	mov	r0, r5
 8000b62:	e705      	b.n	8000970 <__udivmoddi4+0xa4>
 8000b64:	4606      	mov	r6, r0
 8000b66:	e6e3      	b.n	8000930 <__udivmoddi4+0x64>
 8000b68:	4618      	mov	r0, r3
 8000b6a:	e6f8      	b.n	800095e <__udivmoddi4+0x92>
 8000b6c:	454b      	cmp	r3, r9
 8000b6e:	d2a9      	bcs.n	8000ac4 <__udivmoddi4+0x1f8>
 8000b70:	ebb9 0802 	subs.w	r8, r9, r2
 8000b74:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b78:	3801      	subs	r0, #1
 8000b7a:	e7a3      	b.n	8000ac4 <__udivmoddi4+0x1f8>
 8000b7c:	4646      	mov	r6, r8
 8000b7e:	e7ea      	b.n	8000b56 <__udivmoddi4+0x28a>
 8000b80:	4620      	mov	r0, r4
 8000b82:	e794      	b.n	8000aae <__udivmoddi4+0x1e2>
 8000b84:	4640      	mov	r0, r8
 8000b86:	e7d1      	b.n	8000b2c <__udivmoddi4+0x260>
 8000b88:	46d0      	mov	r8, sl
 8000b8a:	e77b      	b.n	8000a84 <__udivmoddi4+0x1b8>
 8000b8c:	3b02      	subs	r3, #2
 8000b8e:	4461      	add	r1, ip
 8000b90:	e732      	b.n	80009f8 <__udivmoddi4+0x12c>
 8000b92:	4630      	mov	r0, r6
 8000b94:	e709      	b.n	80009aa <__udivmoddi4+0xde>
 8000b96:	4464      	add	r4, ip
 8000b98:	3802      	subs	r0, #2
 8000b9a:	e742      	b.n	8000a22 <__udivmoddi4+0x156>

08000b9c <__aeabi_idiv0>:
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b0e8      	sub	sp, #416	; 0x1a0
 8000ba4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	uint16_t array[COUNT];

	for(int i=0;i<COUNT;i++)
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000bac:	e04f      	b.n	8000c4e <main+0xae>
	{
		uint16_t value=(uint16_t)rint((sinf(((2*PI)/COUNT)*i)+1)*2048);
 8000bae:	f8d7 019c 	ldr.w	r0, [r7, #412]	; 0x19c
 8000bb2:	f7ff fd99 	bl	80006e8 <__aeabi_i2d>
 8000bb6:	a342      	add	r3, pc, #264	; (adr r3, 8000cc0 <main+0x120>)
 8000bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bbc:	f7ff fb18 	bl	80001f0 <__aeabi_dmul>
 8000bc0:	4602      	mov	r2, r0
 8000bc2:	460b      	mov	r3, r1
 8000bc4:	4610      	mov	r0, r2
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	f7ff fe18 	bl	80007fc <__aeabi_d2f>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	ee00 3a10 	vmov	s0, r3
 8000bd2:	f002 fb71 	bl	80032b8 <sinf>
 8000bd6:	eef0 7a40 	vmov.f32	s15, s0
 8000bda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000bde:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000be2:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8000cb8 <main+0x118>
 8000be6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bea:	ee17 0a90 	vmov	r0, s15
 8000bee:	f7ff fd8d 	bl	800070c <__aeabi_f2d>
 8000bf2:	4602      	mov	r2, r0
 8000bf4:	460b      	mov	r3, r1
 8000bf6:	ec43 2b10 	vmov	d0, r2, r3
 8000bfa:	f002 facf 	bl	800319c <rint>
 8000bfe:	ec53 2b10 	vmov	r2, r3, d0
 8000c02:	4610      	mov	r0, r2
 8000c04:	4619      	mov	r1, r3
 8000c06:	f7ff fdd9 	bl	80007bc <__aeabi_d2uiz>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	f8a7 3196 	strh.w	r3, [r7, #406]	; 0x196
		array[i]=value;
 8000c10:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000c14:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8000c18:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000c1c:	f8b7 1196 	ldrh.w	r1, [r7, #406]	; 0x196
 8000c20:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		array[i]=value<4096?value:4095;
 8000c24:	f8b7 3196 	ldrh.w	r3, [r7, #406]	; 0x196
 8000c28:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	bf28      	it	cs
 8000c30:	4613      	movcs	r3, r2
 8000c32:	b299      	uxth	r1, r3
 8000c34:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000c38:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8000c3c:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000c40:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(int i=0;i<COUNT;i++)
 8000c44:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8000c48:	3301      	adds	r3, #1
 8000c4a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000c4e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8000c52:	2bc7      	cmp	r3, #199	; 0xc7
 8000c54:	ddab      	ble.n	8000bae <main+0xe>
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000c56:	f000 fac7 	bl	80011e8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000c5a:	f000 f835 	bl	8000cc8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000c5e:	f000 f951 	bl	8000f04 <MX_GPIO_Init>
	MX_DAC_Init();
 8000c62:	f000 f8a3 	bl	8000dac <MX_DAC_Init>
	MX_RTC_Init();
 8000c66:	f000 f8cb 	bl	8000e00 <MX_RTC_Init>
	MX_USART1_UART_Init();
 8000c6a:	f000 f921 	bl	8000eb0 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_DAC_Start(&hdac,DAC_CHANNEL_1);
 8000c6e:	2100      	movs	r1, #0
 8000c70:	4812      	ldr	r0, [pc, #72]	; (8000cbc <main+0x11c>)
 8000c72:	f000 fc56 	bl	8001522 <HAL_DAC_Start>
*/

		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		for(int i=0;i<COUNT;i++){
 8000c76:	2300      	movs	r3, #0
 8000c78:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8000c7c:	e014      	b.n	8000ca8 <main+0x108>
		HAL_DAC_SetValue(&hdac,DAC_CHANNEL_1,DAC_ALIGN_12B_R,array[i]);
 8000c7e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000c82:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8000c86:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000c8a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2100      	movs	r1, #0
 8000c92:	480a      	ldr	r0, [pc, #40]	; (8000cbc <main+0x11c>)
 8000c94:	f000 fc97 	bl	80015c6 <HAL_DAC_SetValue>
		HAL_Delay(1);
 8000c98:	2001      	movs	r0, #1
 8000c9a:	f000 fb17 	bl	80012cc <HAL_Delay>
		for(int i=0;i<COUNT;i++){
 8000c9e:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8000ca8:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8000cac:	2bc7      	cmp	r3, #199	; 0xc7
 8000cae:	dde6      	ble.n	8000c7e <main+0xde>
 8000cb0:	e7e1      	b.n	8000c76 <main+0xd6>
 8000cb2:	bf00      	nop
 8000cb4:	f3af 8000 	nop.w
 8000cb8:	45000000 	.word	0x45000000
 8000cbc:	20000028 	.word	0x20000028
 8000cc0:	59f28faa 	.word	0x59f28faa
 8000cc4:	3fa015bf 	.word	0x3fa015bf

08000cc8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b094      	sub	sp, #80	; 0x50
 8000ccc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000cce:	f107 0320 	add.w	r3, r7, #32
 8000cd2:	2230      	movs	r2, #48	; 0x30
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f002 fa58 	bl	800318c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000cdc:	f107 030c 	add.w	r3, r7, #12
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	60da      	str	r2, [r3, #12]
 8000cea:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000cec:	2300      	movs	r3, #0
 8000cee:	60bb      	str	r3, [r7, #8]
 8000cf0:	4b2c      	ldr	r3, [pc, #176]	; (8000da4 <SystemClock_Config+0xdc>)
 8000cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf4:	4a2b      	ldr	r2, [pc, #172]	; (8000da4 <SystemClock_Config+0xdc>)
 8000cf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cfa:	6413      	str	r3, [r2, #64]	; 0x40
 8000cfc:	4b29      	ldr	r3, [pc, #164]	; (8000da4 <SystemClock_Config+0xdc>)
 8000cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d04:	60bb      	str	r3, [r7, #8]
 8000d06:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d08:	2300      	movs	r3, #0
 8000d0a:	607b      	str	r3, [r7, #4]
 8000d0c:	4b26      	ldr	r3, [pc, #152]	; (8000da8 <SystemClock_Config+0xe0>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a25      	ldr	r2, [pc, #148]	; (8000da8 <SystemClock_Config+0xe0>)
 8000d12:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d16:	6013      	str	r3, [r2, #0]
 8000d18:	4b23      	ldr	r3, [pc, #140]	; (8000da8 <SystemClock_Config+0xe0>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d20:	607b      	str	r3, [r7, #4]
 8000d22:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI
 8000d24:	2309      	movs	r3, #9
 8000d26:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d2c:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d32:	2302      	movs	r3, #2
 8000d34:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d36:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000d3c:	2304      	movs	r3, #4
 8000d3e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 180;
 8000d40:	23b4      	movs	r3, #180	; 0xb4
 8000d42:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d44:	2302      	movs	r3, #2
 8000d46:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d48:	2304      	movs	r3, #4
 8000d4a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000d4c:	f107 0320 	add.w	r3, r7, #32
 8000d50:	4618      	mov	r0, r3
 8000d52:	f000 fea9 	bl	8001aa8 <HAL_RCC_OscConfig>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <SystemClock_Config+0x98>
		Error_Handler();
 8000d5c:	f000 f8fa 	bl	8000f54 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8000d60:	f000 fe52 	bl	8001a08 <HAL_PWREx_EnableOverDrive>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <SystemClock_Config+0xa6>
		Error_Handler();
 8000d6a:	f000 f8f3 	bl	8000f54 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000d6e:	230f      	movs	r3, #15
 8000d70:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d72:	2302      	movs	r3, #2
 8000d74:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d76:	2300      	movs	r3, #0
 8000d78:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d7a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d7e:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d84:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8000d86:	f107 030c 	add.w	r3, r7, #12
 8000d8a:	2105      	movs	r1, #5
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f001 f903 	bl	8001f98 <HAL_RCC_ClockConfig>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <SystemClock_Config+0xd4>
		Error_Handler();
 8000d98:	f000 f8dc 	bl	8000f54 <Error_Handler>
	}
}
 8000d9c:	bf00      	nop
 8000d9e:	3750      	adds	r7, #80	; 0x50
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	40023800 	.word	0x40023800
 8000da8:	40007000 	.word	0x40007000

08000dac <MX_DAC_Init>:
/**
 * @brief DAC Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC_Init(void) {
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC_Init 0 */

	/* USER CODE END DAC_Init 0 */

	DAC_ChannelConfTypeDef sConfig = { 0 };
 8000db2:	463b      	mov	r3, r7
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]

	/* USER CODE END DAC_Init 1 */

	/** DAC Initialization
	 */
	hdac.Instance = DAC;
 8000dba:	4b0f      	ldr	r3, [pc, #60]	; (8000df8 <MX_DAC_Init+0x4c>)
 8000dbc:	4a0f      	ldr	r2, [pc, #60]	; (8000dfc <MX_DAC_Init+0x50>)
 8000dbe:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac) != HAL_OK) {
 8000dc0:	480d      	ldr	r0, [pc, #52]	; (8000df8 <MX_DAC_Init+0x4c>)
 8000dc2:	f000 fb8c 	bl	80014de <HAL_DAC_Init>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_DAC_Init+0x24>
		Error_Handler();
 8000dcc:	f000 f8c2 	bl	8000f54 <Error_Handler>
	}

	/** DAC channel OUT1 config
	 */
	sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	603b      	str	r3, [r7, #0]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	607b      	str	r3, [r7, #4]
	if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 8000dd8:	463b      	mov	r3, r7
 8000dda:	2200      	movs	r2, #0
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4806      	ldr	r0, [pc, #24]	; (8000df8 <MX_DAC_Init+0x4c>)
 8000de0:	f000 fc16 	bl	8001610 <HAL_DAC_ConfigChannel>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_DAC_Init+0x42>
		Error_Handler();
 8000dea:	f000 f8b3 	bl	8000f54 <Error_Handler>
	}
	/* USER CODE BEGIN DAC_Init 2 */

	/* USER CODE END DAC_Init 2 */

}
 8000dee:	bf00      	nop
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	20000028 	.word	0x20000028
 8000dfc:	40007400 	.word	0x40007400

08000e00 <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8000e04:	4b26      	ldr	r3, [pc, #152]	; (8000ea0 <MX_RTC_Init+0xa0>)
 8000e06:	4a27      	ldr	r2, [pc, #156]	; (8000ea4 <MX_RTC_Init+0xa4>)
 8000e08:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000e0a:	4b25      	ldr	r3, [pc, #148]	; (8000ea0 <MX_RTC_Init+0xa0>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 8000e10:	4b23      	ldr	r3, [pc, #140]	; (8000ea0 <MX_RTC_Init+0xa0>)
 8000e12:	227f      	movs	r2, #127	; 0x7f
 8000e14:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 8000e16:	4b22      	ldr	r3, [pc, #136]	; (8000ea0 <MX_RTC_Init+0xa0>)
 8000e18:	22ff      	movs	r2, #255	; 0xff
 8000e1a:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000e1c:	4b20      	ldr	r3, [pc, #128]	; (8000ea0 <MX_RTC_Init+0xa0>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000e22:	4b1f      	ldr	r3, [pc, #124]	; (8000ea0 <MX_RTC_Init+0xa0>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000e28:	4b1d      	ldr	r3, [pc, #116]	; (8000ea0 <MX_RTC_Init+0xa0>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8000e2e:	481c      	ldr	r0, [pc, #112]	; (8000ea0 <MX_RTC_Init+0xa0>)
 8000e30:	f001 fc92 	bl	8002758 <HAL_RTC_Init>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_RTC_Init+0x3e>
		Error_Handler();
 8000e3a:	f000 f88b 	bl	8000f54 <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 5;
 8000e3e:	4b1a      	ldr	r3, [pc, #104]	; (8000ea8 <MX_RTC_Init+0xa8>)
 8000e40:	2205      	movs	r2, #5
 8000e42:	701a      	strb	r2, [r3, #0]
	sTime.Minutes = 54;
 8000e44:	4b18      	ldr	r3, [pc, #96]	; (8000ea8 <MX_RTC_Init+0xa8>)
 8000e46:	2236      	movs	r2, #54	; 0x36
 8000e48:	705a      	strb	r2, [r3, #1]
	sTime.Seconds = 0;
 8000e4a:	4b17      	ldr	r3, [pc, #92]	; (8000ea8 <MX_RTC_Init+0xa8>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	709a      	strb	r2, [r3, #2]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000e50:	4b15      	ldr	r3, [pc, #84]	; (8000ea8 <MX_RTC_Init+0xa8>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	60da      	str	r2, [r3, #12]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000e56:	4b14      	ldr	r3, [pc, #80]	; (8000ea8 <MX_RTC_Init+0xa8>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	611a      	str	r2, [r3, #16]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) {
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	4912      	ldr	r1, [pc, #72]	; (8000ea8 <MX_RTC_Init+0xa8>)
 8000e60:	480f      	ldr	r0, [pc, #60]	; (8000ea0 <MX_RTC_Init+0xa0>)
 8000e62:	f001 fcef 	bl	8002844 <HAL_RTC_SetTime>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_RTC_Init+0x70>
		Error_Handler();
 8000e6c:	f000 f872 	bl	8000f54 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 8000e70:	4b0e      	ldr	r3, [pc, #56]	; (8000eac <MX_RTC_Init+0xac>)
 8000e72:	2204      	movs	r2, #4
 8000e74:	701a      	strb	r2, [r3, #0]
	sDate.Month = RTC_MONTH_FEBRUARY;
 8000e76:	4b0d      	ldr	r3, [pc, #52]	; (8000eac <MX_RTC_Init+0xac>)
 8000e78:	2202      	movs	r2, #2
 8000e7a:	705a      	strb	r2, [r3, #1]
	sDate.Date = 9;
 8000e7c:	4b0b      	ldr	r3, [pc, #44]	; (8000eac <MX_RTC_Init+0xac>)
 8000e7e:	2209      	movs	r2, #9
 8000e80:	709a      	strb	r2, [r3, #2]
	sDate.Year = 23;
 8000e82:	4b0a      	ldr	r3, [pc, #40]	; (8000eac <MX_RTC_Init+0xac>)
 8000e84:	2217      	movs	r2, #23
 8000e86:	70da      	strb	r2, [r3, #3]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) {
 8000e88:	2200      	movs	r2, #0
 8000e8a:	4908      	ldr	r1, [pc, #32]	; (8000eac <MX_RTC_Init+0xac>)
 8000e8c:	4804      	ldr	r0, [pc, #16]	; (8000ea0 <MX_RTC_Init+0xa0>)
 8000e8e:	f001 fd73 	bl	8002978 <HAL_RTC_SetDate>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_RTC_Init+0x9c>
		Error_Handler();
 8000e98:	f000 f85c 	bl	8000f54 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8000e9c:	bf00      	nop
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	2000003c 	.word	0x2000003c
 8000ea4:	40002800 	.word	0x40002800
 8000ea8:	200000a0 	.word	0x200000a0
 8000eac:	200000b4 	.word	0x200000b4

08000eb0 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000eb4:	4b11      	ldr	r3, [pc, #68]	; (8000efc <MX_USART1_UART_Init+0x4c>)
 8000eb6:	4a12      	ldr	r2, [pc, #72]	; (8000f00 <MX_USART1_UART_Init+0x50>)
 8000eb8:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000eba:	4b10      	ldr	r3, [pc, #64]	; (8000efc <MX_USART1_UART_Init+0x4c>)
 8000ebc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ec0:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ec2:	4b0e      	ldr	r3, [pc, #56]	; (8000efc <MX_USART1_UART_Init+0x4c>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000ec8:	4b0c      	ldr	r3, [pc, #48]	; (8000efc <MX_USART1_UART_Init+0x4c>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000ece:	4b0b      	ldr	r3, [pc, #44]	; (8000efc <MX_USART1_UART_Init+0x4c>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000ed4:	4b09      	ldr	r3, [pc, #36]	; (8000efc <MX_USART1_UART_Init+0x4c>)
 8000ed6:	220c      	movs	r2, #12
 8000ed8:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eda:	4b08      	ldr	r3, [pc, #32]	; (8000efc <MX_USART1_UART_Init+0x4c>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ee0:	4b06      	ldr	r3, [pc, #24]	; (8000efc <MX_USART1_UART_Init+0x4c>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000ee6:	4805      	ldr	r0, [pc, #20]	; (8000efc <MX_USART1_UART_Init+0x4c>)
 8000ee8:	f001 fe6b 	bl	8002bc2 <HAL_UART_Init>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8000ef2:	f000 f82f 	bl	8000f54 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	2000005c 	.word	0x2000005c
 8000f00:	40011000 	.word	0x40011000

08000f04 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	607b      	str	r3, [r7, #4]
 8000f0e:	4b10      	ldr	r3, [pc, #64]	; (8000f50 <MX_GPIO_Init+0x4c>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	4a0f      	ldr	r2, [pc, #60]	; (8000f50 <MX_GPIO_Init+0x4c>)
 8000f14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f18:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1a:	4b0d      	ldr	r3, [pc, #52]	; (8000f50 <MX_GPIO_Init+0x4c>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f22:	607b      	str	r3, [r7, #4]
 8000f24:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	603b      	str	r3, [r7, #0]
 8000f2a:	4b09      	ldr	r3, [pc, #36]	; (8000f50 <MX_GPIO_Init+0x4c>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	4a08      	ldr	r2, [pc, #32]	; (8000f50 <MX_GPIO_Init+0x4c>)
 8000f30:	f043 0301 	orr.w	r3, r3, #1
 8000f34:	6313      	str	r3, [r2, #48]	; 0x30
 8000f36:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <MX_GPIO_Init+0x4c>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	f003 0301 	and.w	r3, r3, #1
 8000f3e:	603b      	str	r3, [r7, #0]
 8000f40:	683b      	ldr	r3, [r7, #0]

}
 8000f42:	bf00      	nop
 8000f44:	370c      	adds	r7, #12
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	40023800 	.word	0x40023800

08000f54 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f58:	b672      	cpsid	i
}
 8000f5a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000f5c:	e7fe      	b.n	8000f5c <Error_Handler+0x8>
	...

08000f60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	607b      	str	r3, [r7, #4]
 8000f6a:	4b10      	ldr	r3, [pc, #64]	; (8000fac <HAL_MspInit+0x4c>)
 8000f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6e:	4a0f      	ldr	r2, [pc, #60]	; (8000fac <HAL_MspInit+0x4c>)
 8000f70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f74:	6453      	str	r3, [r2, #68]	; 0x44
 8000f76:	4b0d      	ldr	r3, [pc, #52]	; (8000fac <HAL_MspInit+0x4c>)
 8000f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f7e:	607b      	str	r3, [r7, #4]
 8000f80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	603b      	str	r3, [r7, #0]
 8000f86:	4b09      	ldr	r3, [pc, #36]	; (8000fac <HAL_MspInit+0x4c>)
 8000f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8a:	4a08      	ldr	r2, [pc, #32]	; (8000fac <HAL_MspInit+0x4c>)
 8000f8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f90:	6413      	str	r3, [r2, #64]	; 0x40
 8000f92:	4b06      	ldr	r3, [pc, #24]	; (8000fac <HAL_MspInit+0x4c>)
 8000f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f9a:	603b      	str	r3, [r7, #0]
 8000f9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	40023800 	.word	0x40023800

08000fb0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08a      	sub	sp, #40	; 0x28
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	f107 0314 	add.w	r3, r7, #20
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a17      	ldr	r2, [pc, #92]	; (800102c <HAL_DAC_MspInit+0x7c>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d127      	bne.n	8001022 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	613b      	str	r3, [r7, #16]
 8000fd6:	4b16      	ldr	r3, [pc, #88]	; (8001030 <HAL_DAC_MspInit+0x80>)
 8000fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fda:	4a15      	ldr	r2, [pc, #84]	; (8001030 <HAL_DAC_MspInit+0x80>)
 8000fdc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000fe0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fe2:	4b13      	ldr	r3, [pc, #76]	; (8001030 <HAL_DAC_MspInit+0x80>)
 8000fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000fea:	613b      	str	r3, [r7, #16]
 8000fec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	4b0f      	ldr	r3, [pc, #60]	; (8001030 <HAL_DAC_MspInit+0x80>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	4a0e      	ldr	r2, [pc, #56]	; (8001030 <HAL_DAC_MspInit+0x80>)
 8000ff8:	f043 0301 	orr.w	r3, r3, #1
 8000ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffe:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <HAL_DAC_MspInit+0x80>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800100a:	2310      	movs	r3, #16
 800100c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800100e:	2303      	movs	r3, #3
 8001010:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001016:	f107 0314 	add.w	r3, r7, #20
 800101a:	4619      	mov	r1, r3
 800101c:	4805      	ldr	r0, [pc, #20]	; (8001034 <HAL_DAC_MspInit+0x84>)
 800101e:	f000 fb47 	bl	80016b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001022:	bf00      	nop
 8001024:	3728      	adds	r7, #40	; 0x28
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40007400 	.word	0x40007400
 8001030:	40023800 	.word	0x40023800
 8001034:	40020000 	.word	0x40020000

08001038 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b08e      	sub	sp, #56	; 0x38
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001040:	f107 0308 	add.w	r3, r7, #8
 8001044:	2230      	movs	r2, #48	; 0x30
 8001046:	2100      	movs	r1, #0
 8001048:	4618      	mov	r0, r3
 800104a:	f002 f89f 	bl	800318c <memset>
  if(hrtc->Instance==RTC)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a0c      	ldr	r2, [pc, #48]	; (8001084 <HAL_RTC_MspInit+0x4c>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d111      	bne.n	800107c <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001058:	2320      	movs	r3, #32
 800105a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800105c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001060:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001062:	f107 0308 	add.w	r3, r7, #8
 8001066:	4618      	mov	r0, r3
 8001068:	f001 f9b6 	bl	80023d8 <HAL_RCCEx_PeriphCLKConfig>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001072:	f7ff ff6f 	bl	8000f54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001076:	4b04      	ldr	r3, [pc, #16]	; (8001088 <HAL_RTC_MspInit+0x50>)
 8001078:	2201      	movs	r2, #1
 800107a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800107c:	bf00      	nop
 800107e:	3738      	adds	r7, #56	; 0x38
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	40002800 	.word	0x40002800
 8001088:	42470e3c 	.word	0x42470e3c

0800108c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b08a      	sub	sp, #40	; 0x28
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001094:	f107 0314 	add.w	r3, r7, #20
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a19      	ldr	r2, [pc, #100]	; (8001110 <HAL_UART_MspInit+0x84>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d12c      	bne.n	8001108 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	613b      	str	r3, [r7, #16]
 80010b2:	4b18      	ldr	r3, [pc, #96]	; (8001114 <HAL_UART_MspInit+0x88>)
 80010b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b6:	4a17      	ldr	r2, [pc, #92]	; (8001114 <HAL_UART_MspInit+0x88>)
 80010b8:	f043 0310 	orr.w	r3, r3, #16
 80010bc:	6453      	str	r3, [r2, #68]	; 0x44
 80010be:	4b15      	ldr	r3, [pc, #84]	; (8001114 <HAL_UART_MspInit+0x88>)
 80010c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c2:	f003 0310 	and.w	r3, r3, #16
 80010c6:	613b      	str	r3, [r7, #16]
 80010c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	60fb      	str	r3, [r7, #12]
 80010ce:	4b11      	ldr	r3, [pc, #68]	; (8001114 <HAL_UART_MspInit+0x88>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	4a10      	ldr	r2, [pc, #64]	; (8001114 <HAL_UART_MspInit+0x88>)
 80010d4:	f043 0301 	orr.w	r3, r3, #1
 80010d8:	6313      	str	r3, [r2, #48]	; 0x30
 80010da:	4b0e      	ldr	r3, [pc, #56]	; (8001114 <HAL_UART_MspInit+0x88>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	f003 0301 	and.w	r3, r3, #1
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80010e6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80010ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ec:	2302      	movs	r3, #2
 80010ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f4:	2303      	movs	r3, #3
 80010f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010f8:	2307      	movs	r3, #7
 80010fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fc:	f107 0314 	add.w	r3, r7, #20
 8001100:	4619      	mov	r1, r3
 8001102:	4805      	ldr	r0, [pc, #20]	; (8001118 <HAL_UART_MspInit+0x8c>)
 8001104:	f000 fad4 	bl	80016b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001108:	bf00      	nop
 800110a:	3728      	adds	r7, #40	; 0x28
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40011000 	.word	0x40011000
 8001114:	40023800 	.word	0x40023800
 8001118:	40020000 	.word	0x40020000

0800111c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001120:	e7fe      	b.n	8001120 <NMI_Handler+0x4>

08001122 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001122:	b480      	push	{r7}
 8001124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001126:	e7fe      	b.n	8001126 <HardFault_Handler+0x4>

08001128 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800112c:	e7fe      	b.n	800112c <MemManage_Handler+0x4>

0800112e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800112e:	b480      	push	{r7}
 8001130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001132:	e7fe      	b.n	8001132 <BusFault_Handler+0x4>

08001134 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001138:	e7fe      	b.n	8001138 <UsageFault_Handler+0x4>

0800113a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800113a:	b480      	push	{r7}
 800113c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800113e:	bf00      	nop
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr

08001156 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001156:	b480      	push	{r7}
 8001158:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800115a:	bf00      	nop
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001168:	f000 f890 	bl	800128c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800116c:	bf00      	nop
 800116e:	bd80      	pop	{r7, pc}

08001170 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001170:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011a8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001174:	480d      	ldr	r0, [pc, #52]	; (80011ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001176:	490e      	ldr	r1, [pc, #56]	; (80011b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001178:	4a0e      	ldr	r2, [pc, #56]	; (80011b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800117a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800117c:	e002      	b.n	8001184 <LoopCopyDataInit>

0800117e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800117e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001180:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001182:	3304      	adds	r3, #4

08001184 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001184:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001186:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001188:	d3f9      	bcc.n	800117e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800118a:	4a0b      	ldr	r2, [pc, #44]	; (80011b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800118c:	4c0b      	ldr	r4, [pc, #44]	; (80011bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800118e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001190:	e001      	b.n	8001196 <LoopFillZerobss>

08001192 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001192:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001194:	3204      	adds	r2, #4

08001196 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001196:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001198:	d3fb      	bcc.n	8001192 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800119a:	f000 f813 	bl	80011c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800119e:	f001 ffd1 	bl	8003144 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011a2:	f7ff fcfd 	bl	8000ba0 <main>
  bx  lr    
 80011a6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80011a8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80011ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011b0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80011b4:	08004190 	.word	0x08004190
  ldr r2, =_sbss
 80011b8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80011bc:	200000bc 	.word	0x200000bc

080011c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011c0:	e7fe      	b.n	80011c0 <ADC_IRQHandler>
	...

080011c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011c8:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <SystemInit+0x20>)
 80011ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011ce:	4a05      	ldr	r2, [pc, #20]	; (80011e4 <SystemInit+0x20>)
 80011d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011ec:	4b0e      	ldr	r3, [pc, #56]	; (8001228 <HAL_Init+0x40>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a0d      	ldr	r2, [pc, #52]	; (8001228 <HAL_Init+0x40>)
 80011f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011f8:	4b0b      	ldr	r3, [pc, #44]	; (8001228 <HAL_Init+0x40>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a0a      	ldr	r2, [pc, #40]	; (8001228 <HAL_Init+0x40>)
 80011fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001202:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001204:	4b08      	ldr	r3, [pc, #32]	; (8001228 <HAL_Init+0x40>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a07      	ldr	r2, [pc, #28]	; (8001228 <HAL_Init+0x40>)
 800120a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800120e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001210:	2003      	movs	r0, #3
 8001212:	f000 f931 	bl	8001478 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001216:	200f      	movs	r0, #15
 8001218:	f000 f808 	bl	800122c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800121c:	f7ff fea0 	bl	8000f60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40023c00 	.word	0x40023c00

0800122c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001234:	4b12      	ldr	r3, [pc, #72]	; (8001280 <HAL_InitTick+0x54>)
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	4b12      	ldr	r3, [pc, #72]	; (8001284 <HAL_InitTick+0x58>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	4619      	mov	r1, r3
 800123e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001242:	fbb3 f3f1 	udiv	r3, r3, r1
 8001246:	fbb2 f3f3 	udiv	r3, r2, r3
 800124a:	4618      	mov	r0, r3
 800124c:	f000 f93b 	bl	80014c6 <HAL_SYSTICK_Config>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e00e      	b.n	8001278 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2b0f      	cmp	r3, #15
 800125e:	d80a      	bhi.n	8001276 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001260:	2200      	movs	r2, #0
 8001262:	6879      	ldr	r1, [r7, #4]
 8001264:	f04f 30ff 	mov.w	r0, #4294967295
 8001268:	f000 f911 	bl	800148e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800126c:	4a06      	ldr	r2, [pc, #24]	; (8001288 <HAL_InitTick+0x5c>)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001272:	2300      	movs	r3, #0
 8001274:	e000      	b.n	8001278 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
}
 8001278:	4618      	mov	r0, r3
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20000000 	.word	0x20000000
 8001284:	20000008 	.word	0x20000008
 8001288:	20000004 	.word	0x20000004

0800128c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001290:	4b06      	ldr	r3, [pc, #24]	; (80012ac <HAL_IncTick+0x20>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	461a      	mov	r2, r3
 8001296:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <HAL_IncTick+0x24>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4413      	add	r3, r2
 800129c:	4a04      	ldr	r2, [pc, #16]	; (80012b0 <HAL_IncTick+0x24>)
 800129e:	6013      	str	r3, [r2, #0]
}
 80012a0:	bf00      	nop
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	20000008 	.word	0x20000008
 80012b0:	200000b8 	.word	0x200000b8

080012b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  return uwTick;
 80012b8:	4b03      	ldr	r3, [pc, #12]	; (80012c8 <HAL_GetTick+0x14>)
 80012ba:	681b      	ldr	r3, [r3, #0]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	200000b8 	.word	0x200000b8

080012cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012d4:	f7ff ffee 	bl	80012b4 <HAL_GetTick>
 80012d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012e4:	d005      	beq.n	80012f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012e6:	4b0a      	ldr	r3, [pc, #40]	; (8001310 <HAL_Delay+0x44>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	461a      	mov	r2, r3
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	4413      	add	r3, r2
 80012f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012f2:	bf00      	nop
 80012f4:	f7ff ffde 	bl	80012b4 <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	68fa      	ldr	r2, [r7, #12]
 8001300:	429a      	cmp	r2, r3
 8001302:	d8f7      	bhi.n	80012f4 <HAL_Delay+0x28>
  {
  }
}
 8001304:	bf00      	nop
 8001306:	bf00      	nop
 8001308:	3710      	adds	r7, #16
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	20000008 	.word	0x20000008

08001314 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f003 0307 	and.w	r3, r3, #7
 8001322:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001324:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <__NVIC_SetPriorityGrouping+0x44>)
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800132a:	68ba      	ldr	r2, [r7, #8]
 800132c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001330:	4013      	ands	r3, r2
 8001332:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800133c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001340:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001344:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001346:	4a04      	ldr	r2, [pc, #16]	; (8001358 <__NVIC_SetPriorityGrouping+0x44>)
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	60d3      	str	r3, [r2, #12]
}
 800134c:	bf00      	nop
 800134e:	3714      	adds	r7, #20
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	e000ed00 	.word	0xe000ed00

0800135c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001360:	4b04      	ldr	r3, [pc, #16]	; (8001374 <__NVIC_GetPriorityGrouping+0x18>)
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	0a1b      	lsrs	r3, r3, #8
 8001366:	f003 0307 	and.w	r3, r3, #7
}
 800136a:	4618      	mov	r0, r3
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	e000ed00 	.word	0xe000ed00

08001378 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	6039      	str	r1, [r7, #0]
 8001382:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001384:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001388:	2b00      	cmp	r3, #0
 800138a:	db0a      	blt.n	80013a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	b2da      	uxtb	r2, r3
 8001390:	490c      	ldr	r1, [pc, #48]	; (80013c4 <__NVIC_SetPriority+0x4c>)
 8001392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001396:	0112      	lsls	r2, r2, #4
 8001398:	b2d2      	uxtb	r2, r2
 800139a:	440b      	add	r3, r1
 800139c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013a0:	e00a      	b.n	80013b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	b2da      	uxtb	r2, r3
 80013a6:	4908      	ldr	r1, [pc, #32]	; (80013c8 <__NVIC_SetPriority+0x50>)
 80013a8:	79fb      	ldrb	r3, [r7, #7]
 80013aa:	f003 030f 	and.w	r3, r3, #15
 80013ae:	3b04      	subs	r3, #4
 80013b0:	0112      	lsls	r2, r2, #4
 80013b2:	b2d2      	uxtb	r2, r2
 80013b4:	440b      	add	r3, r1
 80013b6:	761a      	strb	r2, [r3, #24]
}
 80013b8:	bf00      	nop
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	e000e100 	.word	0xe000e100
 80013c8:	e000ed00 	.word	0xe000ed00

080013cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b089      	sub	sp, #36	; 0x24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	f003 0307 	and.w	r3, r3, #7
 80013de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	f1c3 0307 	rsb	r3, r3, #7
 80013e6:	2b04      	cmp	r3, #4
 80013e8:	bf28      	it	cs
 80013ea:	2304      	movcs	r3, #4
 80013ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	3304      	adds	r3, #4
 80013f2:	2b06      	cmp	r3, #6
 80013f4:	d902      	bls.n	80013fc <NVIC_EncodePriority+0x30>
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	3b03      	subs	r3, #3
 80013fa:	e000      	b.n	80013fe <NVIC_EncodePriority+0x32>
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001400:	f04f 32ff 	mov.w	r2, #4294967295
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	fa02 f303 	lsl.w	r3, r2, r3
 800140a:	43da      	mvns	r2, r3
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	401a      	ands	r2, r3
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001414:	f04f 31ff 	mov.w	r1, #4294967295
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	fa01 f303 	lsl.w	r3, r1, r3
 800141e:	43d9      	mvns	r1, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001424:	4313      	orrs	r3, r2
         );
}
 8001426:	4618      	mov	r0, r3
 8001428:	3724      	adds	r7, #36	; 0x24
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
	...

08001434 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	3b01      	subs	r3, #1
 8001440:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001444:	d301      	bcc.n	800144a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001446:	2301      	movs	r3, #1
 8001448:	e00f      	b.n	800146a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800144a:	4a0a      	ldr	r2, [pc, #40]	; (8001474 <SysTick_Config+0x40>)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	3b01      	subs	r3, #1
 8001450:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001452:	210f      	movs	r1, #15
 8001454:	f04f 30ff 	mov.w	r0, #4294967295
 8001458:	f7ff ff8e 	bl	8001378 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800145c:	4b05      	ldr	r3, [pc, #20]	; (8001474 <SysTick_Config+0x40>)
 800145e:	2200      	movs	r2, #0
 8001460:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001462:	4b04      	ldr	r3, [pc, #16]	; (8001474 <SysTick_Config+0x40>)
 8001464:	2207      	movs	r2, #7
 8001466:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001468:	2300      	movs	r3, #0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	e000e010 	.word	0xe000e010

08001478 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f7ff ff47 	bl	8001314 <__NVIC_SetPriorityGrouping>
}
 8001486:	bf00      	nop
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800148e:	b580      	push	{r7, lr}
 8001490:	b086      	sub	sp, #24
 8001492:	af00      	add	r7, sp, #0
 8001494:	4603      	mov	r3, r0
 8001496:	60b9      	str	r1, [r7, #8]
 8001498:	607a      	str	r2, [r7, #4]
 800149a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800149c:	2300      	movs	r3, #0
 800149e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014a0:	f7ff ff5c 	bl	800135c <__NVIC_GetPriorityGrouping>
 80014a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	68b9      	ldr	r1, [r7, #8]
 80014aa:	6978      	ldr	r0, [r7, #20]
 80014ac:	f7ff ff8e 	bl	80013cc <NVIC_EncodePriority>
 80014b0:	4602      	mov	r2, r0
 80014b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014b6:	4611      	mov	r1, r2
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff ff5d 	bl	8001378 <__NVIC_SetPriority>
}
 80014be:	bf00      	nop
 80014c0:	3718      	adds	r7, #24
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b082      	sub	sp, #8
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f7ff ffb0 	bl	8001434 <SysTick_Config>
 80014d4:	4603      	mov	r3, r0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	b082      	sub	sp, #8
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d101      	bne.n	80014f0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e014      	b.n	800151a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	791b      	ldrb	r3, [r3, #4]
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d105      	bne.n	8001506 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2200      	movs	r2, #0
 80014fe:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f7ff fd55 	bl	8000fb0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2202      	movs	r2, #2
 800150a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2200      	movs	r2, #0
 8001510:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2201      	movs	r2, #1
 8001516:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001518:	2300      	movs	r3, #0
}
 800151a:	4618      	mov	r0, r3
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001522:	b480      	push	{r7}
 8001524:	b083      	sub	sp, #12
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
 800152a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	795b      	ldrb	r3, [r3, #5]
 8001530:	2b01      	cmp	r3, #1
 8001532:	d101      	bne.n	8001538 <HAL_DAC_Start+0x16>
 8001534:	2302      	movs	r3, #2
 8001536:	e040      	b.n	80015ba <HAL_DAC_Start+0x98>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2201      	movs	r2, #1
 800153c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2202      	movs	r2, #2
 8001542:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	6819      	ldr	r1, [r3, #0]
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	f003 0310 	and.w	r3, r3, #16
 8001550:	2201      	movs	r2, #1
 8001552:	409a      	lsls	r2, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	430a      	orrs	r2, r1
 800155a:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d10f      	bne.n	8001582 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800156c:	2b3c      	cmp	r3, #60	; 0x3c
 800156e:	d11d      	bne.n	80015ac <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	685a      	ldr	r2, [r3, #4]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f042 0201 	orr.w	r2, r2, #1
 800157e:	605a      	str	r2, [r3, #4]
 8001580:	e014      	b.n	80015ac <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	f003 0310 	and.w	r3, r3, #16
 8001592:	213c      	movs	r1, #60	; 0x3c
 8001594:	fa01 f303 	lsl.w	r3, r1, r3
 8001598:	429a      	cmp	r2, r3
 800159a:	d107      	bne.n	80015ac <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	685a      	ldr	r2, [r3, #4]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f042 0202 	orr.w	r2, r2, #2
 80015aa:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2201      	movs	r2, #1
 80015b0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2200      	movs	r2, #0
 80015b6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr

080015c6 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80015c6:	b480      	push	{r7}
 80015c8:	b087      	sub	sp, #28
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	60f8      	str	r0, [r7, #12]
 80015ce:	60b9      	str	r1, [r7, #8]
 80015d0:	607a      	str	r2, [r7, #4]
 80015d2:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d105      	bne.n	80015f0 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80015e4:	697a      	ldr	r2, [r7, #20]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4413      	add	r3, r2
 80015ea:	3308      	adds	r3, #8
 80015ec:	617b      	str	r3, [r7, #20]
 80015ee:	e004      	b.n	80015fa <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80015f0:	697a      	ldr	r2, [r7, #20]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4413      	add	r3, r2
 80015f6:	3314      	adds	r3, #20
 80015f8:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	461a      	mov	r2, r3
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001602:	2300      	movs	r3, #0
}
 8001604:	4618      	mov	r0, r3
 8001606:	371c      	adds	r7, #28
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001610:	b480      	push	{r7}
 8001612:	b087      	sub	sp, #28
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	795b      	ldrb	r3, [r3, #5]
 8001620:	2b01      	cmp	r3, #1
 8001622:	d101      	bne.n	8001628 <HAL_DAC_ConfigChannel+0x18>
 8001624:	2302      	movs	r3, #2
 8001626:	e03c      	b.n	80016a2 <HAL_DAC_ConfigChannel+0x92>
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2201      	movs	r2, #1
 800162c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	2202      	movs	r2, #2
 8001632:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f003 0310 	and.w	r3, r3, #16
 8001642:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001646:	fa02 f303 	lsl.w	r3, r2, r3
 800164a:	43db      	mvns	r3, r3
 800164c:	697a      	ldr	r2, [r7, #20]
 800164e:	4013      	ands	r3, r2
 8001650:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	4313      	orrs	r3, r2
 800165c:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f003 0310 	and.w	r3, r3, #16
 8001664:	693a      	ldr	r2, [r7, #16]
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	697a      	ldr	r2, [r7, #20]
 800166c:	4313      	orrs	r3, r2
 800166e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	697a      	ldr	r2, [r7, #20]
 8001676:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	6819      	ldr	r1, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f003 0310 	and.w	r3, r3, #16
 8001684:	22c0      	movs	r2, #192	; 0xc0
 8001686:	fa02 f303 	lsl.w	r3, r2, r3
 800168a:	43da      	mvns	r2, r3
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	400a      	ands	r2, r1
 8001692:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	2201      	movs	r2, #1
 8001698:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	2200      	movs	r2, #0
 800169e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	371c      	adds	r7, #28
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
	...

080016b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b089      	sub	sp, #36	; 0x24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016ba:	2300      	movs	r3, #0
 80016bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016be:	2300      	movs	r3, #0
 80016c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016c2:	2300      	movs	r3, #0
 80016c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016c6:	2300      	movs	r3, #0
 80016c8:	61fb      	str	r3, [r7, #28]
 80016ca:	e177      	b.n	80019bc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016cc:	2201      	movs	r2, #1
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	697a      	ldr	r2, [r7, #20]
 80016dc:	4013      	ands	r3, r2
 80016de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	f040 8166 	bne.w	80019b6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f003 0303 	and.w	r3, r3, #3
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d005      	beq.n	8001702 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d130      	bne.n	8001764 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	2203      	movs	r2, #3
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	43db      	mvns	r3, r3
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	4013      	ands	r3, r2
 8001718:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	68da      	ldr	r2, [r3, #12]
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	fa02 f303 	lsl.w	r3, r2, r3
 8001726:	69ba      	ldr	r2, [r7, #24]
 8001728:	4313      	orrs	r3, r2
 800172a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	69ba      	ldr	r2, [r7, #24]
 8001730:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001738:	2201      	movs	r2, #1
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	43db      	mvns	r3, r3
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	4013      	ands	r3, r2
 8001746:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	091b      	lsrs	r3, r3, #4
 800174e:	f003 0201 	and.w	r2, r3, #1
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	4313      	orrs	r3, r2
 800175c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f003 0303 	and.w	r3, r3, #3
 800176c:	2b03      	cmp	r3, #3
 800176e:	d017      	beq.n	80017a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	2203      	movs	r2, #3
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	43db      	mvns	r3, r3
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	4013      	ands	r3, r2
 8001786:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	689a      	ldr	r2, [r3, #8]
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	4313      	orrs	r3, r2
 8001798:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	69ba      	ldr	r2, [r7, #24]
 800179e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f003 0303 	and.w	r3, r3, #3
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d123      	bne.n	80017f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	08da      	lsrs	r2, r3, #3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	3208      	adds	r2, #8
 80017b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	f003 0307 	and.w	r3, r3, #7
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	220f      	movs	r2, #15
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	43db      	mvns	r3, r3
 80017ca:	69ba      	ldr	r2, [r7, #24]
 80017cc:	4013      	ands	r3, r2
 80017ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	691a      	ldr	r2, [r3, #16]
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	f003 0307 	and.w	r3, r3, #7
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	08da      	lsrs	r2, r3, #3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	3208      	adds	r2, #8
 80017ee:	69b9      	ldr	r1, [r7, #24]
 80017f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	2203      	movs	r2, #3
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	43db      	mvns	r3, r3
 8001806:	69ba      	ldr	r2, [r7, #24]
 8001808:	4013      	ands	r3, r2
 800180a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f003 0203 	and.w	r2, r3, #3
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	4313      	orrs	r3, r2
 8001820:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001830:	2b00      	cmp	r3, #0
 8001832:	f000 80c0 	beq.w	80019b6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001836:	2300      	movs	r3, #0
 8001838:	60fb      	str	r3, [r7, #12]
 800183a:	4b66      	ldr	r3, [pc, #408]	; (80019d4 <HAL_GPIO_Init+0x324>)
 800183c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183e:	4a65      	ldr	r2, [pc, #404]	; (80019d4 <HAL_GPIO_Init+0x324>)
 8001840:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001844:	6453      	str	r3, [r2, #68]	; 0x44
 8001846:	4b63      	ldr	r3, [pc, #396]	; (80019d4 <HAL_GPIO_Init+0x324>)
 8001848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001852:	4a61      	ldr	r2, [pc, #388]	; (80019d8 <HAL_GPIO_Init+0x328>)
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	089b      	lsrs	r3, r3, #2
 8001858:	3302      	adds	r3, #2
 800185a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800185e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	f003 0303 	and.w	r3, r3, #3
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	220f      	movs	r2, #15
 800186a:	fa02 f303 	lsl.w	r3, r2, r3
 800186e:	43db      	mvns	r3, r3
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	4013      	ands	r3, r2
 8001874:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a58      	ldr	r2, [pc, #352]	; (80019dc <HAL_GPIO_Init+0x32c>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d037      	beq.n	80018ee <HAL_GPIO_Init+0x23e>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a57      	ldr	r2, [pc, #348]	; (80019e0 <HAL_GPIO_Init+0x330>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d031      	beq.n	80018ea <HAL_GPIO_Init+0x23a>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a56      	ldr	r2, [pc, #344]	; (80019e4 <HAL_GPIO_Init+0x334>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d02b      	beq.n	80018e6 <HAL_GPIO_Init+0x236>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4a55      	ldr	r2, [pc, #340]	; (80019e8 <HAL_GPIO_Init+0x338>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d025      	beq.n	80018e2 <HAL_GPIO_Init+0x232>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a54      	ldr	r2, [pc, #336]	; (80019ec <HAL_GPIO_Init+0x33c>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d01f      	beq.n	80018de <HAL_GPIO_Init+0x22e>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a53      	ldr	r2, [pc, #332]	; (80019f0 <HAL_GPIO_Init+0x340>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d019      	beq.n	80018da <HAL_GPIO_Init+0x22a>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a52      	ldr	r2, [pc, #328]	; (80019f4 <HAL_GPIO_Init+0x344>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d013      	beq.n	80018d6 <HAL_GPIO_Init+0x226>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4a51      	ldr	r2, [pc, #324]	; (80019f8 <HAL_GPIO_Init+0x348>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d00d      	beq.n	80018d2 <HAL_GPIO_Init+0x222>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4a50      	ldr	r2, [pc, #320]	; (80019fc <HAL_GPIO_Init+0x34c>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d007      	beq.n	80018ce <HAL_GPIO_Init+0x21e>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a4f      	ldr	r2, [pc, #316]	; (8001a00 <HAL_GPIO_Init+0x350>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d101      	bne.n	80018ca <HAL_GPIO_Init+0x21a>
 80018c6:	2309      	movs	r3, #9
 80018c8:	e012      	b.n	80018f0 <HAL_GPIO_Init+0x240>
 80018ca:	230a      	movs	r3, #10
 80018cc:	e010      	b.n	80018f0 <HAL_GPIO_Init+0x240>
 80018ce:	2308      	movs	r3, #8
 80018d0:	e00e      	b.n	80018f0 <HAL_GPIO_Init+0x240>
 80018d2:	2307      	movs	r3, #7
 80018d4:	e00c      	b.n	80018f0 <HAL_GPIO_Init+0x240>
 80018d6:	2306      	movs	r3, #6
 80018d8:	e00a      	b.n	80018f0 <HAL_GPIO_Init+0x240>
 80018da:	2305      	movs	r3, #5
 80018dc:	e008      	b.n	80018f0 <HAL_GPIO_Init+0x240>
 80018de:	2304      	movs	r3, #4
 80018e0:	e006      	b.n	80018f0 <HAL_GPIO_Init+0x240>
 80018e2:	2303      	movs	r3, #3
 80018e4:	e004      	b.n	80018f0 <HAL_GPIO_Init+0x240>
 80018e6:	2302      	movs	r3, #2
 80018e8:	e002      	b.n	80018f0 <HAL_GPIO_Init+0x240>
 80018ea:	2301      	movs	r3, #1
 80018ec:	e000      	b.n	80018f0 <HAL_GPIO_Init+0x240>
 80018ee:	2300      	movs	r3, #0
 80018f0:	69fa      	ldr	r2, [r7, #28]
 80018f2:	f002 0203 	and.w	r2, r2, #3
 80018f6:	0092      	lsls	r2, r2, #2
 80018f8:	4093      	lsls	r3, r2
 80018fa:	69ba      	ldr	r2, [r7, #24]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001900:	4935      	ldr	r1, [pc, #212]	; (80019d8 <HAL_GPIO_Init+0x328>)
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	089b      	lsrs	r3, r3, #2
 8001906:	3302      	adds	r3, #2
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800190e:	4b3d      	ldr	r3, [pc, #244]	; (8001a04 <HAL_GPIO_Init+0x354>)
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	43db      	mvns	r3, r3
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	4013      	ands	r3, r2
 800191c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d003      	beq.n	8001932 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	4313      	orrs	r3, r2
 8001930:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001932:	4a34      	ldr	r2, [pc, #208]	; (8001a04 <HAL_GPIO_Init+0x354>)
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001938:	4b32      	ldr	r3, [pc, #200]	; (8001a04 <HAL_GPIO_Init+0x354>)
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	43db      	mvns	r3, r3
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	4013      	ands	r3, r2
 8001946:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d003      	beq.n	800195c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	4313      	orrs	r3, r2
 800195a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800195c:	4a29      	ldr	r2, [pc, #164]	; (8001a04 <HAL_GPIO_Init+0x354>)
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001962:	4b28      	ldr	r3, [pc, #160]	; (8001a04 <HAL_GPIO_Init+0x354>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	43db      	mvns	r3, r3
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	4013      	ands	r3, r2
 8001970:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d003      	beq.n	8001986 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800197e:	69ba      	ldr	r2, [r7, #24]
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	4313      	orrs	r3, r2
 8001984:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001986:	4a1f      	ldr	r2, [pc, #124]	; (8001a04 <HAL_GPIO_Init+0x354>)
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800198c:	4b1d      	ldr	r3, [pc, #116]	; (8001a04 <HAL_GPIO_Init+0x354>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	43db      	mvns	r3, r3
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	4013      	ands	r3, r2
 800199a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d003      	beq.n	80019b0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019b0:	4a14      	ldr	r2, [pc, #80]	; (8001a04 <HAL_GPIO_Init+0x354>)
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	3301      	adds	r3, #1
 80019ba:	61fb      	str	r3, [r7, #28]
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	2b0f      	cmp	r3, #15
 80019c0:	f67f ae84 	bls.w	80016cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019c4:	bf00      	nop
 80019c6:	bf00      	nop
 80019c8:	3724      	adds	r7, #36	; 0x24
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	40023800 	.word	0x40023800
 80019d8:	40013800 	.word	0x40013800
 80019dc:	40020000 	.word	0x40020000
 80019e0:	40020400 	.word	0x40020400
 80019e4:	40020800 	.word	0x40020800
 80019e8:	40020c00 	.word	0x40020c00
 80019ec:	40021000 	.word	0x40021000
 80019f0:	40021400 	.word	0x40021400
 80019f4:	40021800 	.word	0x40021800
 80019f8:	40021c00 	.word	0x40021c00
 80019fc:	40022000 	.word	0x40022000
 8001a00:	40022400 	.word	0x40022400
 8001a04:	40013c00 	.word	0x40013c00

08001a08 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001a12:	2300      	movs	r3, #0
 8001a14:	603b      	str	r3, [r7, #0]
 8001a16:	4b20      	ldr	r3, [pc, #128]	; (8001a98 <HAL_PWREx_EnableOverDrive+0x90>)
 8001a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1a:	4a1f      	ldr	r2, [pc, #124]	; (8001a98 <HAL_PWREx_EnableOverDrive+0x90>)
 8001a1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a20:	6413      	str	r3, [r2, #64]	; 0x40
 8001a22:	4b1d      	ldr	r3, [pc, #116]	; (8001a98 <HAL_PWREx_EnableOverDrive+0x90>)
 8001a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a2a:	603b      	str	r3, [r7, #0]
 8001a2c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001a2e:	4b1b      	ldr	r3, [pc, #108]	; (8001a9c <HAL_PWREx_EnableOverDrive+0x94>)
 8001a30:	2201      	movs	r2, #1
 8001a32:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a34:	f7ff fc3e 	bl	80012b4 <HAL_GetTick>
 8001a38:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001a3a:	e009      	b.n	8001a50 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001a3c:	f7ff fc3a 	bl	80012b4 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a4a:	d901      	bls.n	8001a50 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e01f      	b.n	8001a90 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001a50:	4b13      	ldr	r3, [pc, #76]	; (8001aa0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a5c:	d1ee      	bne.n	8001a3c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001a5e:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a60:	2201      	movs	r2, #1
 8001a62:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a64:	f7ff fc26 	bl	80012b4 <HAL_GetTick>
 8001a68:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001a6a:	e009      	b.n	8001a80 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001a6c:	f7ff fc22 	bl	80012b4 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a7a:	d901      	bls.n	8001a80 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e007      	b.n	8001a90 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001a80:	4b07      	ldr	r3, [pc, #28]	; (8001aa0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001a8c:	d1ee      	bne.n	8001a6c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001a8e:	2300      	movs	r3, #0
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3708      	adds	r7, #8
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	40023800 	.word	0x40023800
 8001a9c:	420e0040 	.word	0x420e0040
 8001aa0:	40007000 	.word	0x40007000
 8001aa4:	420e0044 	.word	0x420e0044

08001aa8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d101      	bne.n	8001aba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e267      	b.n	8001f8a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d075      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ac6:	4b88      	ldr	r3, [pc, #544]	; (8001ce8 <HAL_RCC_OscConfig+0x240>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f003 030c 	and.w	r3, r3, #12
 8001ace:	2b04      	cmp	r3, #4
 8001ad0:	d00c      	beq.n	8001aec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ad2:	4b85      	ldr	r3, [pc, #532]	; (8001ce8 <HAL_RCC_OscConfig+0x240>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ada:	2b08      	cmp	r3, #8
 8001adc:	d112      	bne.n	8001b04 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ade:	4b82      	ldr	r3, [pc, #520]	; (8001ce8 <HAL_RCC_OscConfig+0x240>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ae6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001aea:	d10b      	bne.n	8001b04 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aec:	4b7e      	ldr	r3, [pc, #504]	; (8001ce8 <HAL_RCC_OscConfig+0x240>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d05b      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x108>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d157      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e242      	b.n	8001f8a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b0c:	d106      	bne.n	8001b1c <HAL_RCC_OscConfig+0x74>
 8001b0e:	4b76      	ldr	r3, [pc, #472]	; (8001ce8 <HAL_RCC_OscConfig+0x240>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a75      	ldr	r2, [pc, #468]	; (8001ce8 <HAL_RCC_OscConfig+0x240>)
 8001b14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b18:	6013      	str	r3, [r2, #0]
 8001b1a:	e01d      	b.n	8001b58 <HAL_RCC_OscConfig+0xb0>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b24:	d10c      	bne.n	8001b40 <HAL_RCC_OscConfig+0x98>
 8001b26:	4b70      	ldr	r3, [pc, #448]	; (8001ce8 <HAL_RCC_OscConfig+0x240>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a6f      	ldr	r2, [pc, #444]	; (8001ce8 <HAL_RCC_OscConfig+0x240>)
 8001b2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b30:	6013      	str	r3, [r2, #0]
 8001b32:	4b6d      	ldr	r3, [pc, #436]	; (8001ce8 <HAL_RCC_OscConfig+0x240>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a6c      	ldr	r2, [pc, #432]	; (8001ce8 <HAL_RCC_OscConfig+0x240>)
 8001b38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b3c:	6013      	str	r3, [r2, #0]
 8001b3e:	e00b      	b.n	8001b58 <HAL_RCC_OscConfig+0xb0>
 8001b40:	4b69      	ldr	r3, [pc, #420]	; (8001ce8 <HAL_RCC_OscConfig+0x240>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a68      	ldr	r2, [pc, #416]	; (8001ce8 <HAL_RCC_OscConfig+0x240>)
 8001b46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b4a:	6013      	str	r3, [r2, #0]
 8001b4c:	4b66      	ldr	r3, [pc, #408]	; (8001ce8 <HAL_RCC_OscConfig+0x240>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a65      	ldr	r2, [pc, #404]	; (8001ce8 <HAL_RCC_OscConfig+0x240>)
 8001b52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d013      	beq.n	8001b88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b60:	f7ff fba8 	bl	80012b4 <HAL_GetTick>
 8001b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b66:	e008      	b.n	8001b7a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b68:	f7ff fba4 	bl	80012b4 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b64      	cmp	r3, #100	; 0x64
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e207      	b.n	8001f8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b7a:	4b5b      	ldr	r3, [pc, #364]	; (8001ce8 <HAL_RCC_OscConfig+0x240>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d0f0      	beq.n	8001b68 <HAL_RCC_OscConfig+0xc0>
 8001b86:	e014      	b.n	8001bb2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b88:	f7ff fb94 	bl	80012b4 <HAL_GetTick>
 8001b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b8e:	e008      	b.n	8001ba2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b90:	f7ff fb90 	bl	80012b4 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b64      	cmp	r3, #100	; 0x64
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e1f3      	b.n	8001f8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ba2:	4b51      	ldr	r3, [pc, #324]	; (8001ce8 <HAL_RCC_OscConfig+0x240>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d1f0      	bne.n	8001b90 <HAL_RCC_OscConfig+0xe8>
 8001bae:	e000      	b.n	8001bb2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d063      	beq.n	8001c86 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001bbe:	4b4a      	ldr	r3, [pc, #296]	; (8001ce8 <HAL_RCC_OscConfig+0x240>)
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	f003 030c 	and.w	r3, r3, #12
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d00b      	beq.n	8001be2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bca:	4b47      	ldr	r3, [pc, #284]	; (8001ce8 <HAL_RCC_OscConfig+0x240>)
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001bd2:	2b08      	cmp	r3, #8
 8001bd4:	d11c      	bne.n	8001c10 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bd6:	4b44      	ldr	r3, [pc, #272]	; (8001ce8 <HAL_RCC_OscConfig+0x240>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d116      	bne.n	8001c10 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001be2:	4b41      	ldr	r3, [pc, #260]	; (8001ce8 <HAL_RCC_OscConfig+0x240>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d005      	beq.n	8001bfa <HAL_RCC_OscConfig+0x152>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d001      	beq.n	8001bfa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e1c7      	b.n	8001f8a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bfa:	4b3b      	ldr	r3, [pc, #236]	; (8001ce8 <HAL_RCC_OscConfig+0x240>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	00db      	lsls	r3, r3, #3
 8001c08:	4937      	ldr	r1, [pc, #220]	; (8001ce8 <HAL_RCC_OscConfig+0x240>)
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c0e:	e03a      	b.n	8001c86 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d020      	beq.n	8001c5a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c18:	4b34      	ldr	r3, [pc, #208]	; (8001cec <HAL_RCC_OscConfig+0x244>)
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c1e:	f7ff fb49 	bl	80012b4 <HAL_GetTick>
 8001c22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c24:	e008      	b.n	8001c38 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c26:	f7ff fb45 	bl	80012b4 <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d901      	bls.n	8001c38 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c34:	2303      	movs	r3, #3
 8001c36:	e1a8      	b.n	8001f8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c38:	4b2b      	ldr	r3, [pc, #172]	; (8001ce8 <HAL_RCC_OscConfig+0x240>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0302 	and.w	r3, r3, #2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d0f0      	beq.n	8001c26 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c44:	4b28      	ldr	r3, [pc, #160]	; (8001ce8 <HAL_RCC_OscConfig+0x240>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	691b      	ldr	r3, [r3, #16]
 8001c50:	00db      	lsls	r3, r3, #3
 8001c52:	4925      	ldr	r1, [pc, #148]	; (8001ce8 <HAL_RCC_OscConfig+0x240>)
 8001c54:	4313      	orrs	r3, r2
 8001c56:	600b      	str	r3, [r1, #0]
 8001c58:	e015      	b.n	8001c86 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c5a:	4b24      	ldr	r3, [pc, #144]	; (8001cec <HAL_RCC_OscConfig+0x244>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c60:	f7ff fb28 	bl	80012b4 <HAL_GetTick>
 8001c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c66:	e008      	b.n	8001c7a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c68:	f7ff fb24 	bl	80012b4 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d901      	bls.n	8001c7a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e187      	b.n	8001f8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c7a:	4b1b      	ldr	r3, [pc, #108]	; (8001ce8 <HAL_RCC_OscConfig+0x240>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d1f0      	bne.n	8001c68 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0308 	and.w	r3, r3, #8
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d036      	beq.n	8001d00 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	695b      	ldr	r3, [r3, #20]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d016      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c9a:	4b15      	ldr	r3, [pc, #84]	; (8001cf0 <HAL_RCC_OscConfig+0x248>)
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ca0:	f7ff fb08 	bl	80012b4 <HAL_GetTick>
 8001ca4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ca6:	e008      	b.n	8001cba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ca8:	f7ff fb04 	bl	80012b4 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e167      	b.n	8001f8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cba:	4b0b      	ldr	r3, [pc, #44]	; (8001ce8 <HAL_RCC_OscConfig+0x240>)
 8001cbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d0f0      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x200>
 8001cc6:	e01b      	b.n	8001d00 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cc8:	4b09      	ldr	r3, [pc, #36]	; (8001cf0 <HAL_RCC_OscConfig+0x248>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cce:	f7ff faf1 	bl	80012b4 <HAL_GetTick>
 8001cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cd4:	e00e      	b.n	8001cf4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cd6:	f7ff faed 	bl	80012b4 <HAL_GetTick>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d907      	bls.n	8001cf4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e150      	b.n	8001f8a <HAL_RCC_OscConfig+0x4e2>
 8001ce8:	40023800 	.word	0x40023800
 8001cec:	42470000 	.word	0x42470000
 8001cf0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cf4:	4b88      	ldr	r3, [pc, #544]	; (8001f18 <HAL_RCC_OscConfig+0x470>)
 8001cf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cf8:	f003 0302 	and.w	r3, r3, #2
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d1ea      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0304 	and.w	r3, r3, #4
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	f000 8097 	beq.w	8001e3c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d12:	4b81      	ldr	r3, [pc, #516]	; (8001f18 <HAL_RCC_OscConfig+0x470>)
 8001d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d10f      	bne.n	8001d3e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d1e:	2300      	movs	r3, #0
 8001d20:	60bb      	str	r3, [r7, #8]
 8001d22:	4b7d      	ldr	r3, [pc, #500]	; (8001f18 <HAL_RCC_OscConfig+0x470>)
 8001d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d26:	4a7c      	ldr	r2, [pc, #496]	; (8001f18 <HAL_RCC_OscConfig+0x470>)
 8001d28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d2e:	4b7a      	ldr	r3, [pc, #488]	; (8001f18 <HAL_RCC_OscConfig+0x470>)
 8001d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d36:	60bb      	str	r3, [r7, #8]
 8001d38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d3e:	4b77      	ldr	r3, [pc, #476]	; (8001f1c <HAL_RCC_OscConfig+0x474>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d118      	bne.n	8001d7c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d4a:	4b74      	ldr	r3, [pc, #464]	; (8001f1c <HAL_RCC_OscConfig+0x474>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a73      	ldr	r2, [pc, #460]	; (8001f1c <HAL_RCC_OscConfig+0x474>)
 8001d50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d56:	f7ff faad 	bl	80012b4 <HAL_GetTick>
 8001d5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d5c:	e008      	b.n	8001d70 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d5e:	f7ff faa9 	bl	80012b4 <HAL_GetTick>
 8001d62:	4602      	mov	r2, r0
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d901      	bls.n	8001d70 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e10c      	b.n	8001f8a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d70:	4b6a      	ldr	r3, [pc, #424]	; (8001f1c <HAL_RCC_OscConfig+0x474>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d0f0      	beq.n	8001d5e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d106      	bne.n	8001d92 <HAL_RCC_OscConfig+0x2ea>
 8001d84:	4b64      	ldr	r3, [pc, #400]	; (8001f18 <HAL_RCC_OscConfig+0x470>)
 8001d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d88:	4a63      	ldr	r2, [pc, #396]	; (8001f18 <HAL_RCC_OscConfig+0x470>)
 8001d8a:	f043 0301 	orr.w	r3, r3, #1
 8001d8e:	6713      	str	r3, [r2, #112]	; 0x70
 8001d90:	e01c      	b.n	8001dcc <HAL_RCC_OscConfig+0x324>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	2b05      	cmp	r3, #5
 8001d98:	d10c      	bne.n	8001db4 <HAL_RCC_OscConfig+0x30c>
 8001d9a:	4b5f      	ldr	r3, [pc, #380]	; (8001f18 <HAL_RCC_OscConfig+0x470>)
 8001d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d9e:	4a5e      	ldr	r2, [pc, #376]	; (8001f18 <HAL_RCC_OscConfig+0x470>)
 8001da0:	f043 0304 	orr.w	r3, r3, #4
 8001da4:	6713      	str	r3, [r2, #112]	; 0x70
 8001da6:	4b5c      	ldr	r3, [pc, #368]	; (8001f18 <HAL_RCC_OscConfig+0x470>)
 8001da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001daa:	4a5b      	ldr	r2, [pc, #364]	; (8001f18 <HAL_RCC_OscConfig+0x470>)
 8001dac:	f043 0301 	orr.w	r3, r3, #1
 8001db0:	6713      	str	r3, [r2, #112]	; 0x70
 8001db2:	e00b      	b.n	8001dcc <HAL_RCC_OscConfig+0x324>
 8001db4:	4b58      	ldr	r3, [pc, #352]	; (8001f18 <HAL_RCC_OscConfig+0x470>)
 8001db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001db8:	4a57      	ldr	r2, [pc, #348]	; (8001f18 <HAL_RCC_OscConfig+0x470>)
 8001dba:	f023 0301 	bic.w	r3, r3, #1
 8001dbe:	6713      	str	r3, [r2, #112]	; 0x70
 8001dc0:	4b55      	ldr	r3, [pc, #340]	; (8001f18 <HAL_RCC_OscConfig+0x470>)
 8001dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dc4:	4a54      	ldr	r2, [pc, #336]	; (8001f18 <HAL_RCC_OscConfig+0x470>)
 8001dc6:	f023 0304 	bic.w	r3, r3, #4
 8001dca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d015      	beq.n	8001e00 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dd4:	f7ff fa6e 	bl	80012b4 <HAL_GetTick>
 8001dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dda:	e00a      	b.n	8001df2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ddc:	f7ff fa6a 	bl	80012b4 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e0cb      	b.n	8001f8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001df2:	4b49      	ldr	r3, [pc, #292]	; (8001f18 <HAL_RCC_OscConfig+0x470>)
 8001df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d0ee      	beq.n	8001ddc <HAL_RCC_OscConfig+0x334>
 8001dfe:	e014      	b.n	8001e2a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e00:	f7ff fa58 	bl	80012b4 <HAL_GetTick>
 8001e04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e06:	e00a      	b.n	8001e1e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e08:	f7ff fa54 	bl	80012b4 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e0b5      	b.n	8001f8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e1e:	4b3e      	ldr	r3, [pc, #248]	; (8001f18 <HAL_RCC_OscConfig+0x470>)
 8001e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d1ee      	bne.n	8001e08 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e2a:	7dfb      	ldrb	r3, [r7, #23]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d105      	bne.n	8001e3c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e30:	4b39      	ldr	r3, [pc, #228]	; (8001f18 <HAL_RCC_OscConfig+0x470>)
 8001e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e34:	4a38      	ldr	r2, [pc, #224]	; (8001f18 <HAL_RCC_OscConfig+0x470>)
 8001e36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e3a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	699b      	ldr	r3, [r3, #24]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	f000 80a1 	beq.w	8001f88 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e46:	4b34      	ldr	r3, [pc, #208]	; (8001f18 <HAL_RCC_OscConfig+0x470>)
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f003 030c 	and.w	r3, r3, #12
 8001e4e:	2b08      	cmp	r3, #8
 8001e50:	d05c      	beq.n	8001f0c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	699b      	ldr	r3, [r3, #24]
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d141      	bne.n	8001ede <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e5a:	4b31      	ldr	r3, [pc, #196]	; (8001f20 <HAL_RCC_OscConfig+0x478>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e60:	f7ff fa28 	bl	80012b4 <HAL_GetTick>
 8001e64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e66:	e008      	b.n	8001e7a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e68:	f7ff fa24 	bl	80012b4 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e087      	b.n	8001f8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e7a:	4b27      	ldr	r3, [pc, #156]	; (8001f18 <HAL_RCC_OscConfig+0x470>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d1f0      	bne.n	8001e68 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	69da      	ldr	r2, [r3, #28]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a1b      	ldr	r3, [r3, #32]
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e94:	019b      	lsls	r3, r3, #6
 8001e96:	431a      	orrs	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e9c:	085b      	lsrs	r3, r3, #1
 8001e9e:	3b01      	subs	r3, #1
 8001ea0:	041b      	lsls	r3, r3, #16
 8001ea2:	431a      	orrs	r2, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea8:	061b      	lsls	r3, r3, #24
 8001eaa:	491b      	ldr	r1, [pc, #108]	; (8001f18 <HAL_RCC_OscConfig+0x470>)
 8001eac:	4313      	orrs	r3, r2
 8001eae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001eb0:	4b1b      	ldr	r3, [pc, #108]	; (8001f20 <HAL_RCC_OscConfig+0x478>)
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb6:	f7ff f9fd 	bl	80012b4 <HAL_GetTick>
 8001eba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ebc:	e008      	b.n	8001ed0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ebe:	f7ff f9f9 	bl	80012b4 <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d901      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e05c      	b.n	8001f8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ed0:	4b11      	ldr	r3, [pc, #68]	; (8001f18 <HAL_RCC_OscConfig+0x470>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d0f0      	beq.n	8001ebe <HAL_RCC_OscConfig+0x416>
 8001edc:	e054      	b.n	8001f88 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ede:	4b10      	ldr	r3, [pc, #64]	; (8001f20 <HAL_RCC_OscConfig+0x478>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee4:	f7ff f9e6 	bl	80012b4 <HAL_GetTick>
 8001ee8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eea:	e008      	b.n	8001efe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eec:	f7ff f9e2 	bl	80012b4 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e045      	b.n	8001f8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001efe:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <HAL_RCC_OscConfig+0x470>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d1f0      	bne.n	8001eec <HAL_RCC_OscConfig+0x444>
 8001f0a:	e03d      	b.n	8001f88 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d107      	bne.n	8001f24 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e038      	b.n	8001f8a <HAL_RCC_OscConfig+0x4e2>
 8001f18:	40023800 	.word	0x40023800
 8001f1c:	40007000 	.word	0x40007000
 8001f20:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f24:	4b1b      	ldr	r3, [pc, #108]	; (8001f94 <HAL_RCC_OscConfig+0x4ec>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	699b      	ldr	r3, [r3, #24]
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d028      	beq.n	8001f84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d121      	bne.n	8001f84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d11a      	bne.n	8001f84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f4e:	68fa      	ldr	r2, [r7, #12]
 8001f50:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f54:	4013      	ands	r3, r2
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f5a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d111      	bne.n	8001f84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f6a:	085b      	lsrs	r3, r3, #1
 8001f6c:	3b01      	subs	r3, #1
 8001f6e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d107      	bne.n	8001f84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f7e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d001      	beq.n	8001f88 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e000      	b.n	8001f8a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3718      	adds	r7, #24
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	40023800 	.word	0x40023800

08001f98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d101      	bne.n	8001fac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e0cc      	b.n	8002146 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fac:	4b68      	ldr	r3, [pc, #416]	; (8002150 <HAL_RCC_ClockConfig+0x1b8>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 030f 	and.w	r3, r3, #15
 8001fb4:	683a      	ldr	r2, [r7, #0]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d90c      	bls.n	8001fd4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fba:	4b65      	ldr	r3, [pc, #404]	; (8002150 <HAL_RCC_ClockConfig+0x1b8>)
 8001fbc:	683a      	ldr	r2, [r7, #0]
 8001fbe:	b2d2      	uxtb	r2, r2
 8001fc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fc2:	4b63      	ldr	r3, [pc, #396]	; (8002150 <HAL_RCC_ClockConfig+0x1b8>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 030f 	and.w	r3, r3, #15
 8001fca:	683a      	ldr	r2, [r7, #0]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d001      	beq.n	8001fd4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e0b8      	b.n	8002146 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0302 	and.w	r3, r3, #2
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d020      	beq.n	8002022 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0304 	and.w	r3, r3, #4
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d005      	beq.n	8001ff8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fec:	4b59      	ldr	r3, [pc, #356]	; (8002154 <HAL_RCC_ClockConfig+0x1bc>)
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	4a58      	ldr	r2, [pc, #352]	; (8002154 <HAL_RCC_ClockConfig+0x1bc>)
 8001ff2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ff6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0308 	and.w	r3, r3, #8
 8002000:	2b00      	cmp	r3, #0
 8002002:	d005      	beq.n	8002010 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002004:	4b53      	ldr	r3, [pc, #332]	; (8002154 <HAL_RCC_ClockConfig+0x1bc>)
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	4a52      	ldr	r2, [pc, #328]	; (8002154 <HAL_RCC_ClockConfig+0x1bc>)
 800200a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800200e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002010:	4b50      	ldr	r3, [pc, #320]	; (8002154 <HAL_RCC_ClockConfig+0x1bc>)
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	494d      	ldr	r1, [pc, #308]	; (8002154 <HAL_RCC_ClockConfig+0x1bc>)
 800201e:	4313      	orrs	r3, r2
 8002020:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	2b00      	cmp	r3, #0
 800202c:	d044      	beq.n	80020b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	2b01      	cmp	r3, #1
 8002034:	d107      	bne.n	8002046 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002036:	4b47      	ldr	r3, [pc, #284]	; (8002154 <HAL_RCC_ClockConfig+0x1bc>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d119      	bne.n	8002076 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e07f      	b.n	8002146 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	2b02      	cmp	r3, #2
 800204c:	d003      	beq.n	8002056 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002052:	2b03      	cmp	r3, #3
 8002054:	d107      	bne.n	8002066 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002056:	4b3f      	ldr	r3, [pc, #252]	; (8002154 <HAL_RCC_ClockConfig+0x1bc>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d109      	bne.n	8002076 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e06f      	b.n	8002146 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002066:	4b3b      	ldr	r3, [pc, #236]	; (8002154 <HAL_RCC_ClockConfig+0x1bc>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d101      	bne.n	8002076 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e067      	b.n	8002146 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002076:	4b37      	ldr	r3, [pc, #220]	; (8002154 <HAL_RCC_ClockConfig+0x1bc>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f023 0203 	bic.w	r2, r3, #3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	4934      	ldr	r1, [pc, #208]	; (8002154 <HAL_RCC_ClockConfig+0x1bc>)
 8002084:	4313      	orrs	r3, r2
 8002086:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002088:	f7ff f914 	bl	80012b4 <HAL_GetTick>
 800208c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800208e:	e00a      	b.n	80020a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002090:	f7ff f910 	bl	80012b4 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	f241 3288 	movw	r2, #5000	; 0x1388
 800209e:	4293      	cmp	r3, r2
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e04f      	b.n	8002146 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020a6:	4b2b      	ldr	r3, [pc, #172]	; (8002154 <HAL_RCC_ClockConfig+0x1bc>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f003 020c 	and.w	r2, r3, #12
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d1eb      	bne.n	8002090 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020b8:	4b25      	ldr	r3, [pc, #148]	; (8002150 <HAL_RCC_ClockConfig+0x1b8>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 030f 	and.w	r3, r3, #15
 80020c0:	683a      	ldr	r2, [r7, #0]
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d20c      	bcs.n	80020e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020c6:	4b22      	ldr	r3, [pc, #136]	; (8002150 <HAL_RCC_ClockConfig+0x1b8>)
 80020c8:	683a      	ldr	r2, [r7, #0]
 80020ca:	b2d2      	uxtb	r2, r2
 80020cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ce:	4b20      	ldr	r3, [pc, #128]	; (8002150 <HAL_RCC_ClockConfig+0x1b8>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 030f 	and.w	r3, r3, #15
 80020d6:	683a      	ldr	r2, [r7, #0]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d001      	beq.n	80020e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e032      	b.n	8002146 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0304 	and.w	r3, r3, #4
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d008      	beq.n	80020fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020ec:	4b19      	ldr	r3, [pc, #100]	; (8002154 <HAL_RCC_ClockConfig+0x1bc>)
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	4916      	ldr	r1, [pc, #88]	; (8002154 <HAL_RCC_ClockConfig+0x1bc>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0308 	and.w	r3, r3, #8
 8002106:	2b00      	cmp	r3, #0
 8002108:	d009      	beq.n	800211e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800210a:	4b12      	ldr	r3, [pc, #72]	; (8002154 <HAL_RCC_ClockConfig+0x1bc>)
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	490e      	ldr	r1, [pc, #56]	; (8002154 <HAL_RCC_ClockConfig+0x1bc>)
 800211a:	4313      	orrs	r3, r2
 800211c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800211e:	f000 f821 	bl	8002164 <HAL_RCC_GetSysClockFreq>
 8002122:	4602      	mov	r2, r0
 8002124:	4b0b      	ldr	r3, [pc, #44]	; (8002154 <HAL_RCC_ClockConfig+0x1bc>)
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	091b      	lsrs	r3, r3, #4
 800212a:	f003 030f 	and.w	r3, r3, #15
 800212e:	490a      	ldr	r1, [pc, #40]	; (8002158 <HAL_RCC_ClockConfig+0x1c0>)
 8002130:	5ccb      	ldrb	r3, [r1, r3]
 8002132:	fa22 f303 	lsr.w	r3, r2, r3
 8002136:	4a09      	ldr	r2, [pc, #36]	; (800215c <HAL_RCC_ClockConfig+0x1c4>)
 8002138:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800213a:	4b09      	ldr	r3, [pc, #36]	; (8002160 <HAL_RCC_ClockConfig+0x1c8>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4618      	mov	r0, r3
 8002140:	f7ff f874 	bl	800122c <HAL_InitTick>

  return HAL_OK;
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3710      	adds	r7, #16
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	40023c00 	.word	0x40023c00
 8002154:	40023800 	.word	0x40023800
 8002158:	08003d88 	.word	0x08003d88
 800215c:	20000000 	.word	0x20000000
 8002160:	20000004 	.word	0x20000004

08002164 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002164:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002168:	b094      	sub	sp, #80	; 0x50
 800216a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800216c:	2300      	movs	r3, #0
 800216e:	647b      	str	r3, [r7, #68]	; 0x44
 8002170:	2300      	movs	r3, #0
 8002172:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002174:	2300      	movs	r3, #0
 8002176:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002178:	2300      	movs	r3, #0
 800217a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800217c:	4b79      	ldr	r3, [pc, #484]	; (8002364 <HAL_RCC_GetSysClockFreq+0x200>)
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f003 030c 	and.w	r3, r3, #12
 8002184:	2b08      	cmp	r3, #8
 8002186:	d00d      	beq.n	80021a4 <HAL_RCC_GetSysClockFreq+0x40>
 8002188:	2b08      	cmp	r3, #8
 800218a:	f200 80e1 	bhi.w	8002350 <HAL_RCC_GetSysClockFreq+0x1ec>
 800218e:	2b00      	cmp	r3, #0
 8002190:	d002      	beq.n	8002198 <HAL_RCC_GetSysClockFreq+0x34>
 8002192:	2b04      	cmp	r3, #4
 8002194:	d003      	beq.n	800219e <HAL_RCC_GetSysClockFreq+0x3a>
 8002196:	e0db      	b.n	8002350 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002198:	4b73      	ldr	r3, [pc, #460]	; (8002368 <HAL_RCC_GetSysClockFreq+0x204>)
 800219a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800219c:	e0db      	b.n	8002356 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800219e:	4b73      	ldr	r3, [pc, #460]	; (800236c <HAL_RCC_GetSysClockFreq+0x208>)
 80021a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80021a2:	e0d8      	b.n	8002356 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021a4:	4b6f      	ldr	r3, [pc, #444]	; (8002364 <HAL_RCC_GetSysClockFreq+0x200>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021ac:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021ae:	4b6d      	ldr	r3, [pc, #436]	; (8002364 <HAL_RCC_GetSysClockFreq+0x200>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d063      	beq.n	8002282 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021ba:	4b6a      	ldr	r3, [pc, #424]	; (8002364 <HAL_RCC_GetSysClockFreq+0x200>)
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	099b      	lsrs	r3, r3, #6
 80021c0:	2200      	movs	r2, #0
 80021c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80021c4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80021c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021cc:	633b      	str	r3, [r7, #48]	; 0x30
 80021ce:	2300      	movs	r3, #0
 80021d0:	637b      	str	r3, [r7, #52]	; 0x34
 80021d2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80021d6:	4622      	mov	r2, r4
 80021d8:	462b      	mov	r3, r5
 80021da:	f04f 0000 	mov.w	r0, #0
 80021de:	f04f 0100 	mov.w	r1, #0
 80021e2:	0159      	lsls	r1, r3, #5
 80021e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021e8:	0150      	lsls	r0, r2, #5
 80021ea:	4602      	mov	r2, r0
 80021ec:	460b      	mov	r3, r1
 80021ee:	4621      	mov	r1, r4
 80021f0:	1a51      	subs	r1, r2, r1
 80021f2:	6139      	str	r1, [r7, #16]
 80021f4:	4629      	mov	r1, r5
 80021f6:	eb63 0301 	sbc.w	r3, r3, r1
 80021fa:	617b      	str	r3, [r7, #20]
 80021fc:	f04f 0200 	mov.w	r2, #0
 8002200:	f04f 0300 	mov.w	r3, #0
 8002204:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002208:	4659      	mov	r1, fp
 800220a:	018b      	lsls	r3, r1, #6
 800220c:	4651      	mov	r1, sl
 800220e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002212:	4651      	mov	r1, sl
 8002214:	018a      	lsls	r2, r1, #6
 8002216:	4651      	mov	r1, sl
 8002218:	ebb2 0801 	subs.w	r8, r2, r1
 800221c:	4659      	mov	r1, fp
 800221e:	eb63 0901 	sbc.w	r9, r3, r1
 8002222:	f04f 0200 	mov.w	r2, #0
 8002226:	f04f 0300 	mov.w	r3, #0
 800222a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800222e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002232:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002236:	4690      	mov	r8, r2
 8002238:	4699      	mov	r9, r3
 800223a:	4623      	mov	r3, r4
 800223c:	eb18 0303 	adds.w	r3, r8, r3
 8002240:	60bb      	str	r3, [r7, #8]
 8002242:	462b      	mov	r3, r5
 8002244:	eb49 0303 	adc.w	r3, r9, r3
 8002248:	60fb      	str	r3, [r7, #12]
 800224a:	f04f 0200 	mov.w	r2, #0
 800224e:	f04f 0300 	mov.w	r3, #0
 8002252:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002256:	4629      	mov	r1, r5
 8002258:	024b      	lsls	r3, r1, #9
 800225a:	4621      	mov	r1, r4
 800225c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002260:	4621      	mov	r1, r4
 8002262:	024a      	lsls	r2, r1, #9
 8002264:	4610      	mov	r0, r2
 8002266:	4619      	mov	r1, r3
 8002268:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800226a:	2200      	movs	r2, #0
 800226c:	62bb      	str	r3, [r7, #40]	; 0x28
 800226e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002270:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002274:	f7fe fb12 	bl	800089c <__aeabi_uldivmod>
 8002278:	4602      	mov	r2, r0
 800227a:	460b      	mov	r3, r1
 800227c:	4613      	mov	r3, r2
 800227e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002280:	e058      	b.n	8002334 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002282:	4b38      	ldr	r3, [pc, #224]	; (8002364 <HAL_RCC_GetSysClockFreq+0x200>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	099b      	lsrs	r3, r3, #6
 8002288:	2200      	movs	r2, #0
 800228a:	4618      	mov	r0, r3
 800228c:	4611      	mov	r1, r2
 800228e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002292:	623b      	str	r3, [r7, #32]
 8002294:	2300      	movs	r3, #0
 8002296:	627b      	str	r3, [r7, #36]	; 0x24
 8002298:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800229c:	4642      	mov	r2, r8
 800229e:	464b      	mov	r3, r9
 80022a0:	f04f 0000 	mov.w	r0, #0
 80022a4:	f04f 0100 	mov.w	r1, #0
 80022a8:	0159      	lsls	r1, r3, #5
 80022aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022ae:	0150      	lsls	r0, r2, #5
 80022b0:	4602      	mov	r2, r0
 80022b2:	460b      	mov	r3, r1
 80022b4:	4641      	mov	r1, r8
 80022b6:	ebb2 0a01 	subs.w	sl, r2, r1
 80022ba:	4649      	mov	r1, r9
 80022bc:	eb63 0b01 	sbc.w	fp, r3, r1
 80022c0:	f04f 0200 	mov.w	r2, #0
 80022c4:	f04f 0300 	mov.w	r3, #0
 80022c8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80022cc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80022d0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80022d4:	ebb2 040a 	subs.w	r4, r2, sl
 80022d8:	eb63 050b 	sbc.w	r5, r3, fp
 80022dc:	f04f 0200 	mov.w	r2, #0
 80022e0:	f04f 0300 	mov.w	r3, #0
 80022e4:	00eb      	lsls	r3, r5, #3
 80022e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022ea:	00e2      	lsls	r2, r4, #3
 80022ec:	4614      	mov	r4, r2
 80022ee:	461d      	mov	r5, r3
 80022f0:	4643      	mov	r3, r8
 80022f2:	18e3      	adds	r3, r4, r3
 80022f4:	603b      	str	r3, [r7, #0]
 80022f6:	464b      	mov	r3, r9
 80022f8:	eb45 0303 	adc.w	r3, r5, r3
 80022fc:	607b      	str	r3, [r7, #4]
 80022fe:	f04f 0200 	mov.w	r2, #0
 8002302:	f04f 0300 	mov.w	r3, #0
 8002306:	e9d7 4500 	ldrd	r4, r5, [r7]
 800230a:	4629      	mov	r1, r5
 800230c:	028b      	lsls	r3, r1, #10
 800230e:	4621      	mov	r1, r4
 8002310:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002314:	4621      	mov	r1, r4
 8002316:	028a      	lsls	r2, r1, #10
 8002318:	4610      	mov	r0, r2
 800231a:	4619      	mov	r1, r3
 800231c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800231e:	2200      	movs	r2, #0
 8002320:	61bb      	str	r3, [r7, #24]
 8002322:	61fa      	str	r2, [r7, #28]
 8002324:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002328:	f7fe fab8 	bl	800089c <__aeabi_uldivmod>
 800232c:	4602      	mov	r2, r0
 800232e:	460b      	mov	r3, r1
 8002330:	4613      	mov	r3, r2
 8002332:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002334:	4b0b      	ldr	r3, [pc, #44]	; (8002364 <HAL_RCC_GetSysClockFreq+0x200>)
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	0c1b      	lsrs	r3, r3, #16
 800233a:	f003 0303 	and.w	r3, r3, #3
 800233e:	3301      	adds	r3, #1
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002344:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002346:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002348:	fbb2 f3f3 	udiv	r3, r2, r3
 800234c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800234e:	e002      	b.n	8002356 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002350:	4b05      	ldr	r3, [pc, #20]	; (8002368 <HAL_RCC_GetSysClockFreq+0x204>)
 8002352:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002354:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002356:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002358:	4618      	mov	r0, r3
 800235a:	3750      	adds	r7, #80	; 0x50
 800235c:	46bd      	mov	sp, r7
 800235e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002362:	bf00      	nop
 8002364:	40023800 	.word	0x40023800
 8002368:	00f42400 	.word	0x00f42400
 800236c:	007a1200 	.word	0x007a1200

08002370 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002374:	4b03      	ldr	r3, [pc, #12]	; (8002384 <HAL_RCC_GetHCLKFreq+0x14>)
 8002376:	681b      	ldr	r3, [r3, #0]
}
 8002378:	4618      	mov	r0, r3
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	20000000 	.word	0x20000000

08002388 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800238c:	f7ff fff0 	bl	8002370 <HAL_RCC_GetHCLKFreq>
 8002390:	4602      	mov	r2, r0
 8002392:	4b05      	ldr	r3, [pc, #20]	; (80023a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	0a9b      	lsrs	r3, r3, #10
 8002398:	f003 0307 	and.w	r3, r3, #7
 800239c:	4903      	ldr	r1, [pc, #12]	; (80023ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800239e:	5ccb      	ldrb	r3, [r1, r3]
 80023a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	40023800 	.word	0x40023800
 80023ac:	08003d98 	.word	0x08003d98

080023b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80023b4:	f7ff ffdc 	bl	8002370 <HAL_RCC_GetHCLKFreq>
 80023b8:	4602      	mov	r2, r0
 80023ba:	4b05      	ldr	r3, [pc, #20]	; (80023d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	0b5b      	lsrs	r3, r3, #13
 80023c0:	f003 0307 	and.w	r3, r3, #7
 80023c4:	4903      	ldr	r1, [pc, #12]	; (80023d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023c6:	5ccb      	ldrb	r3, [r1, r3]
 80023c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	40023800 	.word	0x40023800
 80023d4:	08003d98 	.word	0x08003d98

080023d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b086      	sub	sp, #24
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023e0:	2300      	movs	r3, #0
 80023e2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80023e4:	2300      	movs	r3, #0
 80023e6:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0301 	and.w	r3, r3, #1
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d10b      	bne.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d105      	bne.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8002408:	2b00      	cmp	r3, #0
 800240a:	d075      	beq.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800240c:	4b91      	ldr	r3, [pc, #580]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800240e:	2200      	movs	r2, #0
 8002410:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002412:	f7fe ff4f 	bl	80012b4 <HAL_GetTick>
 8002416:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002418:	e008      	b.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800241a:	f7fe ff4b 	bl	80012b4 <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	2b02      	cmp	r3, #2
 8002426:	d901      	bls.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	e189      	b.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800242c:	4b8a      	ldr	r3, [pc, #552]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d1f0      	bne.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0301 	and.w	r3, r3, #1
 8002440:	2b00      	cmp	r3, #0
 8002442:	d009      	beq.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	019a      	lsls	r2, r3, #6
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	071b      	lsls	r3, r3, #28
 8002450:	4981      	ldr	r1, [pc, #516]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002452:	4313      	orrs	r3, r2
 8002454:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0302 	and.w	r3, r3, #2
 8002460:	2b00      	cmp	r3, #0
 8002462:	d01f      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002464:	4b7c      	ldr	r3, [pc, #496]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002466:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800246a:	0f1b      	lsrs	r3, r3, #28
 800246c:	f003 0307 	and.w	r3, r3, #7
 8002470:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	019a      	lsls	r2, r3, #6
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	061b      	lsls	r3, r3, #24
 800247e:	431a      	orrs	r2, r3
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	071b      	lsls	r3, r3, #28
 8002484:	4974      	ldr	r1, [pc, #464]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002486:	4313      	orrs	r3, r2
 8002488:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800248c:	4b72      	ldr	r3, [pc, #456]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800248e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002492:	f023 021f 	bic.w	r2, r3, #31
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	69db      	ldr	r3, [r3, #28]
 800249a:	3b01      	subs	r3, #1
 800249c:	496e      	ldr	r1, [pc, #440]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800249e:	4313      	orrs	r3, r2
 80024a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d00d      	beq.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	019a      	lsls	r2, r3, #6
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	061b      	lsls	r3, r3, #24
 80024bc:	431a      	orrs	r2, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	071b      	lsls	r3, r3, #28
 80024c4:	4964      	ldr	r1, [pc, #400]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80024cc:	4b61      	ldr	r3, [pc, #388]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80024ce:	2201      	movs	r2, #1
 80024d0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80024d2:	f7fe feef 	bl	80012b4 <HAL_GetTick>
 80024d6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80024d8:	e008      	b.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80024da:	f7fe feeb 	bl	80012b4 <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d901      	bls.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e129      	b.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80024ec:	4b5a      	ldr	r3, [pc, #360]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d0f0      	beq.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0304 	and.w	r3, r3, #4
 8002500:	2b00      	cmp	r3, #0
 8002502:	d105      	bne.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800250c:	2b00      	cmp	r3, #0
 800250e:	d079      	beq.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002510:	4b52      	ldr	r3, [pc, #328]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002512:	2200      	movs	r2, #0
 8002514:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002516:	f7fe fecd 	bl	80012b4 <HAL_GetTick>
 800251a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800251c:	e008      	b.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800251e:	f7fe fec9 	bl	80012b4 <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	2b02      	cmp	r3, #2
 800252a:	d901      	bls.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e107      	b.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002530:	4b49      	ldr	r3, [pc, #292]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002538:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800253c:	d0ef      	beq.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0304 	and.w	r3, r3, #4
 8002546:	2b00      	cmp	r3, #0
 8002548:	d020      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800254a:	4b43      	ldr	r3, [pc, #268]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800254c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002550:	0f1b      	lsrs	r3, r3, #28
 8002552:	f003 0307 	and.w	r3, r3, #7
 8002556:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	691b      	ldr	r3, [r3, #16]
 800255c:	019a      	lsls	r2, r3, #6
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	061b      	lsls	r3, r3, #24
 8002564:	431a      	orrs	r2, r3
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	071b      	lsls	r3, r3, #28
 800256a:	493b      	ldr	r1, [pc, #236]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800256c:	4313      	orrs	r3, r2
 800256e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002572:	4b39      	ldr	r3, [pc, #228]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002574:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002578:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a1b      	ldr	r3, [r3, #32]
 8002580:	3b01      	subs	r3, #1
 8002582:	021b      	lsls	r3, r3, #8
 8002584:	4934      	ldr	r1, [pc, #208]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002586:	4313      	orrs	r3, r2
 8002588:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0308 	and.w	r3, r3, #8
 8002594:	2b00      	cmp	r3, #0
 8002596:	d01e      	beq.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002598:	4b2f      	ldr	r3, [pc, #188]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800259a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800259e:	0e1b      	lsrs	r3, r3, #24
 80025a0:	f003 030f 	and.w	r3, r3, #15
 80025a4:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	019a      	lsls	r2, r3, #6
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	061b      	lsls	r3, r3, #24
 80025b0:	431a      	orrs	r2, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	699b      	ldr	r3, [r3, #24]
 80025b6:	071b      	lsls	r3, r3, #28
 80025b8:	4927      	ldr	r1, [pc, #156]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80025c0:	4b25      	ldr	r3, [pc, #148]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80025c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025c6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ce:	4922      	ldr	r1, [pc, #136]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80025d6:	4b21      	ldr	r3, [pc, #132]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80025d8:	2201      	movs	r2, #1
 80025da:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80025dc:	f7fe fe6a 	bl	80012b4 <HAL_GetTick>
 80025e0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80025e2:	e008      	b.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80025e4:	f7fe fe66 	bl	80012b4 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d901      	bls.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e0a4      	b.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80025f6:	4b18      	ldr	r3, [pc, #96]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002602:	d1ef      	bne.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0320 	and.w	r3, r3, #32
 800260c:	2b00      	cmp	r3, #0
 800260e:	f000 808b 	beq.w	8002728 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002612:	2300      	movs	r3, #0
 8002614:	60fb      	str	r3, [r7, #12]
 8002616:	4b10      	ldr	r3, [pc, #64]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261a:	4a0f      	ldr	r2, [pc, #60]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800261c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002620:	6413      	str	r3, [r2, #64]	; 0x40
 8002622:	4b0d      	ldr	r3, [pc, #52]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800262a:	60fb      	str	r3, [r7, #12]
 800262c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800262e:	4b0c      	ldr	r3, [pc, #48]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a0b      	ldr	r2, [pc, #44]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8002634:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002638:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800263a:	f7fe fe3b 	bl	80012b4 <HAL_GetTick>
 800263e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002640:	e010      	b.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002642:	f7fe fe37 	bl	80012b4 <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	2b02      	cmp	r3, #2
 800264e:	d909      	bls.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	e075      	b.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8002654:	42470068 	.word	0x42470068
 8002658:	40023800 	.word	0x40023800
 800265c:	42470070 	.word	0x42470070
 8002660:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002664:	4b38      	ldr	r3, [pc, #224]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800266c:	2b00      	cmp	r3, #0
 800266e:	d0e8      	beq.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002670:	4b36      	ldr	r3, [pc, #216]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002674:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002678:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d02f      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002684:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002688:	693a      	ldr	r2, [r7, #16]
 800268a:	429a      	cmp	r2, r3
 800268c:	d028      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800268e:	4b2f      	ldr	r3, [pc, #188]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002692:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002696:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002698:	4b2d      	ldr	r3, [pc, #180]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800269a:	2201      	movs	r2, #1
 800269c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800269e:	4b2c      	ldr	r3, [pc, #176]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80026a4:	4a29      	ldr	r2, [pc, #164]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80026aa:	4b28      	ldr	r3, [pc, #160]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80026ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d114      	bne.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80026b6:	f7fe fdfd 	bl	80012b4 <HAL_GetTick>
 80026ba:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026bc:	e00a      	b.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026be:	f7fe fdf9 	bl	80012b4 <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d901      	bls.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e035      	b.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026d4:	4b1d      	ldr	r3, [pc, #116]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80026d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d8:	f003 0302 	and.w	r3, r3, #2
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d0ee      	beq.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80026ec:	d10d      	bne.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x332>
 80026ee:	4b17      	ldr	r3, [pc, #92]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026fa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80026fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002702:	4912      	ldr	r1, [pc, #72]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002704:	4313      	orrs	r3, r2
 8002706:	608b      	str	r3, [r1, #8]
 8002708:	e005      	b.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800270a:	4b10      	ldr	r3, [pc, #64]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	4a0f      	ldr	r2, [pc, #60]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002710:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002714:	6093      	str	r3, [r2, #8]
 8002716:	4b0d      	ldr	r3, [pc, #52]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002718:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800271e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002722:	490a      	ldr	r1, [pc, #40]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002724:	4313      	orrs	r3, r2
 8002726:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0310 	and.w	r3, r3, #16
 8002730:	2b00      	cmp	r3, #0
 8002732:	d004      	beq.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800273a:	4b06      	ldr	r3, [pc, #24]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800273c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800273e:	2300      	movs	r3, #0
}
 8002740:	4618      	mov	r0, r3
 8002742:	3718      	adds	r7, #24
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	40007000 	.word	0x40007000
 800274c:	40023800 	.word	0x40023800
 8002750:	42470e40 	.word	0x42470e40
 8002754:	424711e0 	.word	0x424711e0

08002758 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d101      	bne.n	800276e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e066      	b.n	800283c <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	7f5b      	ldrb	r3, [r3, #29]
 8002772:	b2db      	uxtb	r3, r3
 8002774:	2b00      	cmp	r3, #0
 8002776:	d105      	bne.n	8002784 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f7fe fc5a 	bl	8001038 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2202      	movs	r2, #2
 8002788:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	22ca      	movs	r2, #202	; 0xca
 8002790:	625a      	str	r2, [r3, #36]	; 0x24
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2253      	movs	r2, #83	; 0x53
 8002798:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f000 f998 	bl	8002ad0 <RTC_EnterInitMode>
 80027a0:	4603      	mov	r3, r0
 80027a2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80027a4:	7bfb      	ldrb	r3, [r7, #15]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d12c      	bne.n	8002804 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	6812      	ldr	r2, [r2, #0]
 80027b4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80027b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80027bc:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	6899      	ldr	r1, [r3, #8]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685a      	ldr	r2, [r3, #4]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	691b      	ldr	r3, [r3, #16]
 80027cc:	431a      	orrs	r2, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	695b      	ldr	r3, [r3, #20]
 80027d2:	431a      	orrs	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	430a      	orrs	r2, r1
 80027da:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	68d2      	ldr	r2, [r2, #12]
 80027e4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	6919      	ldr	r1, [r3, #16]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	041a      	lsls	r2, r3, #16
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	430a      	orrs	r2, r1
 80027f8:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 f99f 	bl	8002b3e <RTC_ExitInitMode>
 8002800:	4603      	mov	r3, r0
 8002802:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002804:	7bfb      	ldrb	r3, [r7, #15]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d113      	bne.n	8002832 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002818:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	699a      	ldr	r2, [r3, #24]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	430a      	orrs	r2, r1
 800282a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	22ff      	movs	r2, #255	; 0xff
 8002838:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800283a:	7bfb      	ldrb	r3, [r7, #15]
}
 800283c:	4618      	mov	r0, r3
 800283e:	3710      	adds	r7, #16
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}

08002844 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002844:	b590      	push	{r4, r7, lr}
 8002846:	b087      	sub	sp, #28
 8002848:	af00      	add	r7, sp, #0
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	60b9      	str	r1, [r7, #8]
 800284e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002850:	2300      	movs	r3, #0
 8002852:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	7f1b      	ldrb	r3, [r3, #28]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d101      	bne.n	8002860 <HAL_RTC_SetTime+0x1c>
 800285c:	2302      	movs	r3, #2
 800285e:	e087      	b.n	8002970 <HAL_RTC_SetTime+0x12c>
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2201      	movs	r2, #1
 8002864:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2202      	movs	r2, #2
 800286a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d126      	bne.n	80028c0 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800287c:	2b00      	cmp	r3, #0
 800287e:	d102      	bne.n	8002886 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	2200      	movs	r2, #0
 8002884:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	4618      	mov	r0, r3
 800288c:	f000 f97c 	bl	8002b88 <RTC_ByteToBcd2>
 8002890:	4603      	mov	r3, r0
 8002892:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	785b      	ldrb	r3, [r3, #1]
 8002898:	4618      	mov	r0, r3
 800289a:	f000 f975 	bl	8002b88 <RTC_ByteToBcd2>
 800289e:	4603      	mov	r3, r0
 80028a0:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80028a2:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	789b      	ldrb	r3, [r3, #2]
 80028a8:	4618      	mov	r0, r3
 80028aa:	f000 f96d 	bl	8002b88 <RTC_ByteToBcd2>
 80028ae:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80028b0:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	78db      	ldrb	r3, [r3, #3]
 80028b8:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80028ba:	4313      	orrs	r3, r2
 80028bc:	617b      	str	r3, [r7, #20]
 80028be:	e018      	b.n	80028f2 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d102      	bne.n	80028d4 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	2200      	movs	r2, #0
 80028d2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	785b      	ldrb	r3, [r3, #1]
 80028de:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80028e0:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80028e2:	68ba      	ldr	r2, [r7, #8]
 80028e4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80028e6:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	78db      	ldrb	r3, [r3, #3]
 80028ec:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80028ee:	4313      	orrs	r3, r2
 80028f0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	22ca      	movs	r2, #202	; 0xca
 80028f8:	625a      	str	r2, [r3, #36]	; 0x24
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2253      	movs	r2, #83	; 0x53
 8002900:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002902:	68f8      	ldr	r0, [r7, #12]
 8002904:	f000 f8e4 	bl	8002ad0 <RTC_EnterInitMode>
 8002908:	4603      	mov	r3, r0
 800290a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800290c:	7cfb      	ldrb	r3, [r7, #19]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d120      	bne.n	8002954 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800291c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002920:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	689a      	ldr	r2, [r3, #8]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002930:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	6899      	ldr	r1, [r3, #8]
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	68da      	ldr	r2, [r3, #12]
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	691b      	ldr	r3, [r3, #16]
 8002940:	431a      	orrs	r2, r3
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	430a      	orrs	r2, r1
 8002948:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800294a:	68f8      	ldr	r0, [r7, #12]
 800294c:	f000 f8f7 	bl	8002b3e <RTC_ExitInitMode>
 8002950:	4603      	mov	r3, r0
 8002952:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8002954:	7cfb      	ldrb	r3, [r7, #19]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d102      	bne.n	8002960 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2201      	movs	r2, #1
 800295e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	22ff      	movs	r2, #255	; 0xff
 8002966:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2200      	movs	r2, #0
 800296c:	771a      	strb	r2, [r3, #28]

  return status;
 800296e:	7cfb      	ldrb	r3, [r7, #19]
}
 8002970:	4618      	mov	r0, r3
 8002972:	371c      	adds	r7, #28
 8002974:	46bd      	mov	sp, r7
 8002976:	bd90      	pop	{r4, r7, pc}

08002978 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002978:	b590      	push	{r4, r7, lr}
 800297a:	b087      	sub	sp, #28
 800297c:	af00      	add	r7, sp, #0
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002984:	2300      	movs	r3, #0
 8002986:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	7f1b      	ldrb	r3, [r3, #28]
 800298c:	2b01      	cmp	r3, #1
 800298e:	d101      	bne.n	8002994 <HAL_RTC_SetDate+0x1c>
 8002990:	2302      	movs	r3, #2
 8002992:	e071      	b.n	8002a78 <HAL_RTC_SetDate+0x100>
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2201      	movs	r2, #1
 8002998:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2202      	movs	r2, #2
 800299e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d10e      	bne.n	80029c4 <HAL_RTC_SetDate+0x4c>
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	785b      	ldrb	r3, [r3, #1]
 80029aa:	f003 0310 	and.w	r3, r3, #16
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d008      	beq.n	80029c4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	785b      	ldrb	r3, [r3, #1]
 80029b6:	f023 0310 	bic.w	r3, r3, #16
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	330a      	adds	r3, #10
 80029be:	b2da      	uxtb	r2, r3
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d11c      	bne.n	8002a04 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	78db      	ldrb	r3, [r3, #3]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f000 f8da 	bl	8002b88 <RTC_ByteToBcd2>
 80029d4:	4603      	mov	r3, r0
 80029d6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	785b      	ldrb	r3, [r3, #1]
 80029dc:	4618      	mov	r0, r3
 80029de:	f000 f8d3 	bl	8002b88 <RTC_ByteToBcd2>
 80029e2:	4603      	mov	r3, r0
 80029e4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80029e6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	789b      	ldrb	r3, [r3, #2]
 80029ec:	4618      	mov	r0, r3
 80029ee:	f000 f8cb 	bl	8002b88 <RTC_ByteToBcd2>
 80029f2:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80029f4:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80029fe:	4313      	orrs	r3, r2
 8002a00:	617b      	str	r3, [r7, #20]
 8002a02:	e00e      	b.n	8002a22 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	78db      	ldrb	r3, [r3, #3]
 8002a08:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	785b      	ldrb	r3, [r3, #1]
 8002a0e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002a10:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8002a12:	68ba      	ldr	r2, [r7, #8]
 8002a14:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002a16:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	22ca      	movs	r2, #202	; 0xca
 8002a28:	625a      	str	r2, [r3, #36]	; 0x24
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2253      	movs	r2, #83	; 0x53
 8002a30:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002a32:	68f8      	ldr	r0, [r7, #12]
 8002a34:	f000 f84c 	bl	8002ad0 <RTC_EnterInitMode>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002a3c:	7cfb      	ldrb	r3, [r7, #19]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d10c      	bne.n	8002a5c <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002a4c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002a50:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002a52:	68f8      	ldr	r0, [r7, #12]
 8002a54:	f000 f873 	bl	8002b3e <RTC_ExitInitMode>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8002a5c:	7cfb      	ldrb	r3, [r7, #19]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d102      	bne.n	8002a68 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2201      	movs	r2, #1
 8002a66:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	22ff      	movs	r2, #255	; 0xff
 8002a6e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2200      	movs	r2, #0
 8002a74:	771a      	strb	r2, [r3, #28]

  return status;
 8002a76:	7cfb      	ldrb	r3, [r7, #19]
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	371c      	adds	r7, #28
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd90      	pop	{r4, r7, pc}

08002a80 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	68da      	ldr	r2, [r3, #12]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002a9a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a9c:	f7fe fc0a 	bl	80012b4 <HAL_GetTick>
 8002aa0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002aa2:	e009      	b.n	8002ab8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002aa4:	f7fe fc06 	bl	80012b4 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ab2:	d901      	bls.n	8002ab8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e007      	b.n	8002ac8 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	f003 0320 	and.w	r3, r3, #32
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d0ee      	beq.n	8002aa4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8002ac6:	2300      	movs	r3, #0
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3710      	adds	r7, #16
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002adc:	2300      	movs	r3, #0
 8002ade:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d122      	bne.n	8002b34 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68da      	ldr	r2, [r3, #12]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002afc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002afe:	f7fe fbd9 	bl	80012b4 <HAL_GetTick>
 8002b02:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002b04:	e00c      	b.n	8002b20 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002b06:	f7fe fbd5 	bl	80012b4 <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b14:	d904      	bls.n	8002b20 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2204      	movs	r2, #4
 8002b1a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d102      	bne.n	8002b34 <RTC_EnterInitMode+0x64>
 8002b2e:	7bfb      	ldrb	r3, [r7, #15]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d1e8      	bne.n	8002b06 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3710      	adds	r7, #16
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	b084      	sub	sp, #16
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b46:	2300      	movs	r3, #0
 8002b48:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68da      	ldr	r2, [r3, #12]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b58:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f003 0320 	and.w	r3, r3, #32
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d10a      	bne.n	8002b7e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f7ff ff89 	bl	8002a80 <HAL_RTC_WaitForSynchro>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d004      	beq.n	8002b7e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2204      	movs	r2, #4
 8002b78:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3710      	adds	r7, #16
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b085      	sub	sp, #20
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	4603      	mov	r3, r0
 8002b90:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8002b92:	2300      	movs	r3, #0
 8002b94:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8002b96:	e005      	b.n	8002ba4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002b98:	7bfb      	ldrb	r3, [r7, #15]
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8002b9e:	79fb      	ldrb	r3, [r7, #7]
 8002ba0:	3b0a      	subs	r3, #10
 8002ba2:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8002ba4:	79fb      	ldrb	r3, [r7, #7]
 8002ba6:	2b09      	cmp	r3, #9
 8002ba8:	d8f6      	bhi.n	8002b98 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8002baa:	7bfb      	ldrb	r3, [r7, #15]
 8002bac:	011b      	lsls	r3, r3, #4
 8002bae:	b2da      	uxtb	r2, r3
 8002bb0:	79fb      	ldrb	r3, [r7, #7]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	b2db      	uxtb	r3, r3
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3714      	adds	r7, #20
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr

08002bc2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b082      	sub	sp, #8
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d101      	bne.n	8002bd4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e03f      	b.n	8002c54 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d106      	bne.n	8002bee <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f7fe fa4f 	bl	800108c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2224      	movs	r2, #36	; 0x24
 8002bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	68da      	ldr	r2, [r3, #12]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c04:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f000 f828 	bl	8002c5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	691a      	ldr	r2, [r3, #16]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c1a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	695a      	ldr	r2, [r3, #20]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c2a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68da      	ldr	r2, [r3, #12]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c3a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2220      	movs	r2, #32
 8002c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2220      	movs	r2, #32
 8002c4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c52:	2300      	movs	r3, #0
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3708      	adds	r7, #8
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c60:	b0c0      	sub	sp, #256	; 0x100
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	691b      	ldr	r3, [r3, #16]
 8002c70:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c78:	68d9      	ldr	r1, [r3, #12]
 8002c7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	ea40 0301 	orr.w	r3, r0, r1
 8002c84:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c8a:	689a      	ldr	r2, [r3, #8]
 8002c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	431a      	orrs	r2, r3
 8002c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c98:	695b      	ldr	r3, [r3, #20]
 8002c9a:	431a      	orrs	r2, r3
 8002c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ca0:	69db      	ldr	r3, [r3, #28]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002cb4:	f021 010c 	bic.w	r1, r1, #12
 8002cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002cc2:	430b      	orrs	r3, r1
 8002cc4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002cc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	695b      	ldr	r3, [r3, #20]
 8002cce:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002cd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cd6:	6999      	ldr	r1, [r3, #24]
 8002cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	ea40 0301 	orr.w	r3, r0, r1
 8002ce2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	4b8f      	ldr	r3, [pc, #572]	; (8002f28 <UART_SetConfig+0x2cc>)
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d005      	beq.n	8002cfc <UART_SetConfig+0xa0>
 8002cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	4b8d      	ldr	r3, [pc, #564]	; (8002f2c <UART_SetConfig+0x2d0>)
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d104      	bne.n	8002d06 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002cfc:	f7ff fb58 	bl	80023b0 <HAL_RCC_GetPCLK2Freq>
 8002d00:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002d04:	e003      	b.n	8002d0e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002d06:	f7ff fb3f 	bl	8002388 <HAL_RCC_GetPCLK1Freq>
 8002d0a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d12:	69db      	ldr	r3, [r3, #28]
 8002d14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d18:	f040 810c 	bne.w	8002f34 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002d1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d20:	2200      	movs	r2, #0
 8002d22:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002d26:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002d2a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002d2e:	4622      	mov	r2, r4
 8002d30:	462b      	mov	r3, r5
 8002d32:	1891      	adds	r1, r2, r2
 8002d34:	65b9      	str	r1, [r7, #88]	; 0x58
 8002d36:	415b      	adcs	r3, r3
 8002d38:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d3a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002d3e:	4621      	mov	r1, r4
 8002d40:	eb12 0801 	adds.w	r8, r2, r1
 8002d44:	4629      	mov	r1, r5
 8002d46:	eb43 0901 	adc.w	r9, r3, r1
 8002d4a:	f04f 0200 	mov.w	r2, #0
 8002d4e:	f04f 0300 	mov.w	r3, #0
 8002d52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d5e:	4690      	mov	r8, r2
 8002d60:	4699      	mov	r9, r3
 8002d62:	4623      	mov	r3, r4
 8002d64:	eb18 0303 	adds.w	r3, r8, r3
 8002d68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002d6c:	462b      	mov	r3, r5
 8002d6e:	eb49 0303 	adc.w	r3, r9, r3
 8002d72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002d76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002d82:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002d86:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	18db      	adds	r3, r3, r3
 8002d8e:	653b      	str	r3, [r7, #80]	; 0x50
 8002d90:	4613      	mov	r3, r2
 8002d92:	eb42 0303 	adc.w	r3, r2, r3
 8002d96:	657b      	str	r3, [r7, #84]	; 0x54
 8002d98:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002d9c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002da0:	f7fd fd7c 	bl	800089c <__aeabi_uldivmod>
 8002da4:	4602      	mov	r2, r0
 8002da6:	460b      	mov	r3, r1
 8002da8:	4b61      	ldr	r3, [pc, #388]	; (8002f30 <UART_SetConfig+0x2d4>)
 8002daa:	fba3 2302 	umull	r2, r3, r3, r2
 8002dae:	095b      	lsrs	r3, r3, #5
 8002db0:	011c      	lsls	r4, r3, #4
 8002db2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002db6:	2200      	movs	r2, #0
 8002db8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002dbc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002dc0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002dc4:	4642      	mov	r2, r8
 8002dc6:	464b      	mov	r3, r9
 8002dc8:	1891      	adds	r1, r2, r2
 8002dca:	64b9      	str	r1, [r7, #72]	; 0x48
 8002dcc:	415b      	adcs	r3, r3
 8002dce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002dd0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002dd4:	4641      	mov	r1, r8
 8002dd6:	eb12 0a01 	adds.w	sl, r2, r1
 8002dda:	4649      	mov	r1, r9
 8002ddc:	eb43 0b01 	adc.w	fp, r3, r1
 8002de0:	f04f 0200 	mov.w	r2, #0
 8002de4:	f04f 0300 	mov.w	r3, #0
 8002de8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002dec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002df0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002df4:	4692      	mov	sl, r2
 8002df6:	469b      	mov	fp, r3
 8002df8:	4643      	mov	r3, r8
 8002dfa:	eb1a 0303 	adds.w	r3, sl, r3
 8002dfe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002e02:	464b      	mov	r3, r9
 8002e04:	eb4b 0303 	adc.w	r3, fp, r3
 8002e08:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002e18:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002e1c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002e20:	460b      	mov	r3, r1
 8002e22:	18db      	adds	r3, r3, r3
 8002e24:	643b      	str	r3, [r7, #64]	; 0x40
 8002e26:	4613      	mov	r3, r2
 8002e28:	eb42 0303 	adc.w	r3, r2, r3
 8002e2c:	647b      	str	r3, [r7, #68]	; 0x44
 8002e2e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002e32:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002e36:	f7fd fd31 	bl	800089c <__aeabi_uldivmod>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	4611      	mov	r1, r2
 8002e40:	4b3b      	ldr	r3, [pc, #236]	; (8002f30 <UART_SetConfig+0x2d4>)
 8002e42:	fba3 2301 	umull	r2, r3, r3, r1
 8002e46:	095b      	lsrs	r3, r3, #5
 8002e48:	2264      	movs	r2, #100	; 0x64
 8002e4a:	fb02 f303 	mul.w	r3, r2, r3
 8002e4e:	1acb      	subs	r3, r1, r3
 8002e50:	00db      	lsls	r3, r3, #3
 8002e52:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002e56:	4b36      	ldr	r3, [pc, #216]	; (8002f30 <UART_SetConfig+0x2d4>)
 8002e58:	fba3 2302 	umull	r2, r3, r3, r2
 8002e5c:	095b      	lsrs	r3, r3, #5
 8002e5e:	005b      	lsls	r3, r3, #1
 8002e60:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002e64:	441c      	add	r4, r3
 8002e66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002e70:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002e74:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002e78:	4642      	mov	r2, r8
 8002e7a:	464b      	mov	r3, r9
 8002e7c:	1891      	adds	r1, r2, r2
 8002e7e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002e80:	415b      	adcs	r3, r3
 8002e82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e84:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002e88:	4641      	mov	r1, r8
 8002e8a:	1851      	adds	r1, r2, r1
 8002e8c:	6339      	str	r1, [r7, #48]	; 0x30
 8002e8e:	4649      	mov	r1, r9
 8002e90:	414b      	adcs	r3, r1
 8002e92:	637b      	str	r3, [r7, #52]	; 0x34
 8002e94:	f04f 0200 	mov.w	r2, #0
 8002e98:	f04f 0300 	mov.w	r3, #0
 8002e9c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002ea0:	4659      	mov	r1, fp
 8002ea2:	00cb      	lsls	r3, r1, #3
 8002ea4:	4651      	mov	r1, sl
 8002ea6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002eaa:	4651      	mov	r1, sl
 8002eac:	00ca      	lsls	r2, r1, #3
 8002eae:	4610      	mov	r0, r2
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	4642      	mov	r2, r8
 8002eb6:	189b      	adds	r3, r3, r2
 8002eb8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002ebc:	464b      	mov	r3, r9
 8002ebe:	460a      	mov	r2, r1
 8002ec0:	eb42 0303 	adc.w	r3, r2, r3
 8002ec4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002ed4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002ed8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002edc:	460b      	mov	r3, r1
 8002ede:	18db      	adds	r3, r3, r3
 8002ee0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	eb42 0303 	adc.w	r3, r2, r3
 8002ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002eea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002eee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002ef2:	f7fd fcd3 	bl	800089c <__aeabi_uldivmod>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	460b      	mov	r3, r1
 8002efa:	4b0d      	ldr	r3, [pc, #52]	; (8002f30 <UART_SetConfig+0x2d4>)
 8002efc:	fba3 1302 	umull	r1, r3, r3, r2
 8002f00:	095b      	lsrs	r3, r3, #5
 8002f02:	2164      	movs	r1, #100	; 0x64
 8002f04:	fb01 f303 	mul.w	r3, r1, r3
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	00db      	lsls	r3, r3, #3
 8002f0c:	3332      	adds	r3, #50	; 0x32
 8002f0e:	4a08      	ldr	r2, [pc, #32]	; (8002f30 <UART_SetConfig+0x2d4>)
 8002f10:	fba2 2303 	umull	r2, r3, r2, r3
 8002f14:	095b      	lsrs	r3, r3, #5
 8002f16:	f003 0207 	and.w	r2, r3, #7
 8002f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4422      	add	r2, r4
 8002f22:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002f24:	e105      	b.n	8003132 <UART_SetConfig+0x4d6>
 8002f26:	bf00      	nop
 8002f28:	40011000 	.word	0x40011000
 8002f2c:	40011400 	.word	0x40011400
 8002f30:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002f3e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002f42:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002f46:	4642      	mov	r2, r8
 8002f48:	464b      	mov	r3, r9
 8002f4a:	1891      	adds	r1, r2, r2
 8002f4c:	6239      	str	r1, [r7, #32]
 8002f4e:	415b      	adcs	r3, r3
 8002f50:	627b      	str	r3, [r7, #36]	; 0x24
 8002f52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002f56:	4641      	mov	r1, r8
 8002f58:	1854      	adds	r4, r2, r1
 8002f5a:	4649      	mov	r1, r9
 8002f5c:	eb43 0501 	adc.w	r5, r3, r1
 8002f60:	f04f 0200 	mov.w	r2, #0
 8002f64:	f04f 0300 	mov.w	r3, #0
 8002f68:	00eb      	lsls	r3, r5, #3
 8002f6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f6e:	00e2      	lsls	r2, r4, #3
 8002f70:	4614      	mov	r4, r2
 8002f72:	461d      	mov	r5, r3
 8002f74:	4643      	mov	r3, r8
 8002f76:	18e3      	adds	r3, r4, r3
 8002f78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002f7c:	464b      	mov	r3, r9
 8002f7e:	eb45 0303 	adc.w	r3, r5, r3
 8002f82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002f86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002f92:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002f96:	f04f 0200 	mov.w	r2, #0
 8002f9a:	f04f 0300 	mov.w	r3, #0
 8002f9e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002fa2:	4629      	mov	r1, r5
 8002fa4:	008b      	lsls	r3, r1, #2
 8002fa6:	4621      	mov	r1, r4
 8002fa8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002fac:	4621      	mov	r1, r4
 8002fae:	008a      	lsls	r2, r1, #2
 8002fb0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002fb4:	f7fd fc72 	bl	800089c <__aeabi_uldivmod>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	460b      	mov	r3, r1
 8002fbc:	4b60      	ldr	r3, [pc, #384]	; (8003140 <UART_SetConfig+0x4e4>)
 8002fbe:	fba3 2302 	umull	r2, r3, r3, r2
 8002fc2:	095b      	lsrs	r3, r3, #5
 8002fc4:	011c      	lsls	r4, r3, #4
 8002fc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002fd0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002fd4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002fd8:	4642      	mov	r2, r8
 8002fda:	464b      	mov	r3, r9
 8002fdc:	1891      	adds	r1, r2, r2
 8002fde:	61b9      	str	r1, [r7, #24]
 8002fe0:	415b      	adcs	r3, r3
 8002fe2:	61fb      	str	r3, [r7, #28]
 8002fe4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fe8:	4641      	mov	r1, r8
 8002fea:	1851      	adds	r1, r2, r1
 8002fec:	6139      	str	r1, [r7, #16]
 8002fee:	4649      	mov	r1, r9
 8002ff0:	414b      	adcs	r3, r1
 8002ff2:	617b      	str	r3, [r7, #20]
 8002ff4:	f04f 0200 	mov.w	r2, #0
 8002ff8:	f04f 0300 	mov.w	r3, #0
 8002ffc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003000:	4659      	mov	r1, fp
 8003002:	00cb      	lsls	r3, r1, #3
 8003004:	4651      	mov	r1, sl
 8003006:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800300a:	4651      	mov	r1, sl
 800300c:	00ca      	lsls	r2, r1, #3
 800300e:	4610      	mov	r0, r2
 8003010:	4619      	mov	r1, r3
 8003012:	4603      	mov	r3, r0
 8003014:	4642      	mov	r2, r8
 8003016:	189b      	adds	r3, r3, r2
 8003018:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800301c:	464b      	mov	r3, r9
 800301e:	460a      	mov	r2, r1
 8003020:	eb42 0303 	adc.w	r3, r2, r3
 8003024:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	67bb      	str	r3, [r7, #120]	; 0x78
 8003032:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003034:	f04f 0200 	mov.w	r2, #0
 8003038:	f04f 0300 	mov.w	r3, #0
 800303c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003040:	4649      	mov	r1, r9
 8003042:	008b      	lsls	r3, r1, #2
 8003044:	4641      	mov	r1, r8
 8003046:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800304a:	4641      	mov	r1, r8
 800304c:	008a      	lsls	r2, r1, #2
 800304e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003052:	f7fd fc23 	bl	800089c <__aeabi_uldivmod>
 8003056:	4602      	mov	r2, r0
 8003058:	460b      	mov	r3, r1
 800305a:	4b39      	ldr	r3, [pc, #228]	; (8003140 <UART_SetConfig+0x4e4>)
 800305c:	fba3 1302 	umull	r1, r3, r3, r2
 8003060:	095b      	lsrs	r3, r3, #5
 8003062:	2164      	movs	r1, #100	; 0x64
 8003064:	fb01 f303 	mul.w	r3, r1, r3
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	011b      	lsls	r3, r3, #4
 800306c:	3332      	adds	r3, #50	; 0x32
 800306e:	4a34      	ldr	r2, [pc, #208]	; (8003140 <UART_SetConfig+0x4e4>)
 8003070:	fba2 2303 	umull	r2, r3, r2, r3
 8003074:	095b      	lsrs	r3, r3, #5
 8003076:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800307a:	441c      	add	r4, r3
 800307c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003080:	2200      	movs	r2, #0
 8003082:	673b      	str	r3, [r7, #112]	; 0x70
 8003084:	677a      	str	r2, [r7, #116]	; 0x74
 8003086:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800308a:	4642      	mov	r2, r8
 800308c:	464b      	mov	r3, r9
 800308e:	1891      	adds	r1, r2, r2
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	415b      	adcs	r3, r3
 8003094:	60fb      	str	r3, [r7, #12]
 8003096:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800309a:	4641      	mov	r1, r8
 800309c:	1851      	adds	r1, r2, r1
 800309e:	6039      	str	r1, [r7, #0]
 80030a0:	4649      	mov	r1, r9
 80030a2:	414b      	adcs	r3, r1
 80030a4:	607b      	str	r3, [r7, #4]
 80030a6:	f04f 0200 	mov.w	r2, #0
 80030aa:	f04f 0300 	mov.w	r3, #0
 80030ae:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80030b2:	4659      	mov	r1, fp
 80030b4:	00cb      	lsls	r3, r1, #3
 80030b6:	4651      	mov	r1, sl
 80030b8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030bc:	4651      	mov	r1, sl
 80030be:	00ca      	lsls	r2, r1, #3
 80030c0:	4610      	mov	r0, r2
 80030c2:	4619      	mov	r1, r3
 80030c4:	4603      	mov	r3, r0
 80030c6:	4642      	mov	r2, r8
 80030c8:	189b      	adds	r3, r3, r2
 80030ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80030cc:	464b      	mov	r3, r9
 80030ce:	460a      	mov	r2, r1
 80030d0:	eb42 0303 	adc.w	r3, r2, r3
 80030d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80030d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	663b      	str	r3, [r7, #96]	; 0x60
 80030e0:	667a      	str	r2, [r7, #100]	; 0x64
 80030e2:	f04f 0200 	mov.w	r2, #0
 80030e6:	f04f 0300 	mov.w	r3, #0
 80030ea:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80030ee:	4649      	mov	r1, r9
 80030f0:	008b      	lsls	r3, r1, #2
 80030f2:	4641      	mov	r1, r8
 80030f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030f8:	4641      	mov	r1, r8
 80030fa:	008a      	lsls	r2, r1, #2
 80030fc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003100:	f7fd fbcc 	bl	800089c <__aeabi_uldivmod>
 8003104:	4602      	mov	r2, r0
 8003106:	460b      	mov	r3, r1
 8003108:	4b0d      	ldr	r3, [pc, #52]	; (8003140 <UART_SetConfig+0x4e4>)
 800310a:	fba3 1302 	umull	r1, r3, r3, r2
 800310e:	095b      	lsrs	r3, r3, #5
 8003110:	2164      	movs	r1, #100	; 0x64
 8003112:	fb01 f303 	mul.w	r3, r1, r3
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	011b      	lsls	r3, r3, #4
 800311a:	3332      	adds	r3, #50	; 0x32
 800311c:	4a08      	ldr	r2, [pc, #32]	; (8003140 <UART_SetConfig+0x4e4>)
 800311e:	fba2 2303 	umull	r2, r3, r2, r3
 8003122:	095b      	lsrs	r3, r3, #5
 8003124:	f003 020f 	and.w	r2, r3, #15
 8003128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4422      	add	r2, r4
 8003130:	609a      	str	r2, [r3, #8]
}
 8003132:	bf00      	nop
 8003134:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003138:	46bd      	mov	sp, r7
 800313a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800313e:	bf00      	nop
 8003140:	51eb851f 	.word	0x51eb851f

08003144 <__libc_init_array>:
 8003144:	b570      	push	{r4, r5, r6, lr}
 8003146:	4d0d      	ldr	r5, [pc, #52]	; (800317c <__libc_init_array+0x38>)
 8003148:	4c0d      	ldr	r4, [pc, #52]	; (8003180 <__libc_init_array+0x3c>)
 800314a:	1b64      	subs	r4, r4, r5
 800314c:	10a4      	asrs	r4, r4, #2
 800314e:	2600      	movs	r6, #0
 8003150:	42a6      	cmp	r6, r4
 8003152:	d109      	bne.n	8003168 <__libc_init_array+0x24>
 8003154:	4d0b      	ldr	r5, [pc, #44]	; (8003184 <__libc_init_array+0x40>)
 8003156:	4c0c      	ldr	r4, [pc, #48]	; (8003188 <__libc_init_array+0x44>)
 8003158:	f000 fe0a 	bl	8003d70 <_init>
 800315c:	1b64      	subs	r4, r4, r5
 800315e:	10a4      	asrs	r4, r4, #2
 8003160:	2600      	movs	r6, #0
 8003162:	42a6      	cmp	r6, r4
 8003164:	d105      	bne.n	8003172 <__libc_init_array+0x2e>
 8003166:	bd70      	pop	{r4, r5, r6, pc}
 8003168:	f855 3b04 	ldr.w	r3, [r5], #4
 800316c:	4798      	blx	r3
 800316e:	3601      	adds	r6, #1
 8003170:	e7ee      	b.n	8003150 <__libc_init_array+0xc>
 8003172:	f855 3b04 	ldr.w	r3, [r5], #4
 8003176:	4798      	blx	r3
 8003178:	3601      	adds	r6, #1
 800317a:	e7f2      	b.n	8003162 <__libc_init_array+0x1e>
 800317c:	08004188 	.word	0x08004188
 8003180:	08004188 	.word	0x08004188
 8003184:	08004188 	.word	0x08004188
 8003188:	0800418c 	.word	0x0800418c

0800318c <memset>:
 800318c:	4402      	add	r2, r0
 800318e:	4603      	mov	r3, r0
 8003190:	4293      	cmp	r3, r2
 8003192:	d100      	bne.n	8003196 <memset+0xa>
 8003194:	4770      	bx	lr
 8003196:	f803 1b01 	strb.w	r1, [r3], #1
 800319a:	e7f9      	b.n	8003190 <memset+0x4>

0800319c <rint>:
 800319c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800319e:	ec51 0b10 	vmov	r0, r1, d0
 80031a2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80031a6:	f2a2 35ff 	subw	r5, r2, #1023	; 0x3ff
 80031aa:	2d13      	cmp	r5, #19
 80031ac:	ee10 3a10 	vmov	r3, s0
 80031b0:	460c      	mov	r4, r1
 80031b2:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 80031b6:	dc5b      	bgt.n	8003270 <rint+0xd4>
 80031b8:	2d00      	cmp	r5, #0
 80031ba:	da2d      	bge.n	8003218 <rint+0x7c>
 80031bc:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80031c0:	4302      	orrs	r2, r0
 80031c2:	d025      	beq.n	8003210 <rint+0x74>
 80031c4:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80031c8:	4302      	orrs	r2, r0
 80031ca:	4253      	negs	r3, r2
 80031cc:	4313      	orrs	r3, r2
 80031ce:	0b1b      	lsrs	r3, r3, #12
 80031d0:	0c4a      	lsrs	r2, r1, #17
 80031d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031d6:	0452      	lsls	r2, r2, #17
 80031d8:	ea43 0102 	orr.w	r1, r3, r2
 80031dc:	460b      	mov	r3, r1
 80031de:	4934      	ldr	r1, [pc, #208]	; (80032b0 <rint+0x114>)
 80031e0:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 80031e4:	e9d6 6700 	ldrd	r6, r7, [r6]
 80031e8:	4602      	mov	r2, r0
 80031ea:	4639      	mov	r1, r7
 80031ec:	4630      	mov	r0, r6
 80031ee:	f7fd f92f 	bl	8000450 <__adddf3>
 80031f2:	e9cd 0100 	strd	r0, r1, [sp]
 80031f6:	463b      	mov	r3, r7
 80031f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80031fc:	4632      	mov	r2, r6
 80031fe:	f7fd f925 	bl	800044c <__aeabi_dsub>
 8003202:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
 8003206:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800320a:	ea43 0704 	orr.w	r7, r3, r4
 800320e:	4639      	mov	r1, r7
 8003210:	ec41 0b10 	vmov	d0, r0, r1
 8003214:	b003      	add	sp, #12
 8003216:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003218:	4a26      	ldr	r2, [pc, #152]	; (80032b4 <rint+0x118>)
 800321a:	412a      	asrs	r2, r5
 800321c:	ea01 0702 	and.w	r7, r1, r2
 8003220:	4307      	orrs	r7, r0
 8003222:	d0f5      	beq.n	8003210 <rint+0x74>
 8003224:	0851      	lsrs	r1, r2, #1
 8003226:	ea04 0252 	and.w	r2, r4, r2, lsr #1
 800322a:	4313      	orrs	r3, r2
 800322c:	d00c      	beq.n	8003248 <rint+0xac>
 800322e:	ea24 0201 	bic.w	r2, r4, r1
 8003232:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 8003236:	2d13      	cmp	r5, #19
 8003238:	fa44 f505 	asr.w	r5, r4, r5
 800323c:	bf0c      	ite	eq
 800323e:	f04f 4300 	moveq.w	r3, #2147483648	; 0x80000000
 8003242:	2300      	movne	r3, #0
 8003244:	ea42 0405 	orr.w	r4, r2, r5
 8003248:	4919      	ldr	r1, [pc, #100]	; (80032b0 <rint+0x114>)
 800324a:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 800324e:	461a      	mov	r2, r3
 8003250:	4623      	mov	r3, r4
 8003252:	e9d6 4500 	ldrd	r4, r5, [r6]
 8003256:	4620      	mov	r0, r4
 8003258:	4629      	mov	r1, r5
 800325a:	f7fd f8f9 	bl	8000450 <__adddf3>
 800325e:	e9cd 0100 	strd	r0, r1, [sp]
 8003262:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003266:	4622      	mov	r2, r4
 8003268:	462b      	mov	r3, r5
 800326a:	f7fd f8ef 	bl	800044c <__aeabi_dsub>
 800326e:	e7cf      	b.n	8003210 <rint+0x74>
 8003270:	2d33      	cmp	r5, #51	; 0x33
 8003272:	dd08      	ble.n	8003286 <rint+0xea>
 8003274:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8003278:	d1ca      	bne.n	8003210 <rint+0x74>
 800327a:	ee10 2a10 	vmov	r2, s0
 800327e:	460b      	mov	r3, r1
 8003280:	f7fd f8e6 	bl	8000450 <__adddf3>
 8003284:	e7c4      	b.n	8003210 <rint+0x74>
 8003286:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800328a:	f04f 35ff 	mov.w	r5, #4294967295
 800328e:	40d5      	lsrs	r5, r2
 8003290:	4228      	tst	r0, r5
 8003292:	d0bd      	beq.n	8003210 <rint+0x74>
 8003294:	ea13 0055 	ands.w	r0, r3, r5, lsr #1
 8003298:	ea4f 0155 	mov.w	r1, r5, lsr #1
 800329c:	bf1f      	itttt	ne
 800329e:	ea23 0101 	bicne.w	r1, r3, r1
 80032a2:	f04f 4380 	movne.w	r3, #1073741824	; 0x40000000
 80032a6:	fa43 f202 	asrne.w	r2, r3, r2
 80032aa:	ea41 0302 	orrne.w	r3, r1, r2
 80032ae:	e7cb      	b.n	8003248 <rint+0xac>
 80032b0:	08003da0 	.word	0x08003da0
 80032b4:	000fffff 	.word	0x000fffff

080032b8 <sinf>:
 80032b8:	ee10 3a10 	vmov	r3, s0
 80032bc:	b507      	push	{r0, r1, r2, lr}
 80032be:	4a1f      	ldr	r2, [pc, #124]	; (800333c <sinf+0x84>)
 80032c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80032c4:	4293      	cmp	r3, r2
 80032c6:	dc07      	bgt.n	80032d8 <sinf+0x20>
 80032c8:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8003340 <sinf+0x88>
 80032cc:	2000      	movs	r0, #0
 80032ce:	b003      	add	sp, #12
 80032d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80032d4:	f000 bc48 	b.w	8003b68 <__kernel_sinf>
 80032d8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80032dc:	db04      	blt.n	80032e8 <sinf+0x30>
 80032de:	ee30 0a40 	vsub.f32	s0, s0, s0
 80032e2:	b003      	add	sp, #12
 80032e4:	f85d fb04 	ldr.w	pc, [sp], #4
 80032e8:	4668      	mov	r0, sp
 80032ea:	f000 f82b 	bl	8003344 <__ieee754_rem_pio2f>
 80032ee:	f000 0003 	and.w	r0, r0, #3
 80032f2:	2801      	cmp	r0, #1
 80032f4:	d00a      	beq.n	800330c <sinf+0x54>
 80032f6:	2802      	cmp	r0, #2
 80032f8:	d00f      	beq.n	800331a <sinf+0x62>
 80032fa:	b9c0      	cbnz	r0, 800332e <sinf+0x76>
 80032fc:	eddd 0a01 	vldr	s1, [sp, #4]
 8003300:	ed9d 0a00 	vldr	s0, [sp]
 8003304:	2001      	movs	r0, #1
 8003306:	f000 fc2f 	bl	8003b68 <__kernel_sinf>
 800330a:	e7ea      	b.n	80032e2 <sinf+0x2a>
 800330c:	eddd 0a01 	vldr	s1, [sp, #4]
 8003310:	ed9d 0a00 	vldr	s0, [sp]
 8003314:	f000 f952 	bl	80035bc <__kernel_cosf>
 8003318:	e7e3      	b.n	80032e2 <sinf+0x2a>
 800331a:	eddd 0a01 	vldr	s1, [sp, #4]
 800331e:	ed9d 0a00 	vldr	s0, [sp]
 8003322:	2001      	movs	r0, #1
 8003324:	f000 fc20 	bl	8003b68 <__kernel_sinf>
 8003328:	eeb1 0a40 	vneg.f32	s0, s0
 800332c:	e7d9      	b.n	80032e2 <sinf+0x2a>
 800332e:	eddd 0a01 	vldr	s1, [sp, #4]
 8003332:	ed9d 0a00 	vldr	s0, [sp]
 8003336:	f000 f941 	bl	80035bc <__kernel_cosf>
 800333a:	e7f5      	b.n	8003328 <sinf+0x70>
 800333c:	3f490fd8 	.word	0x3f490fd8
 8003340:	00000000 	.word	0x00000000

08003344 <__ieee754_rem_pio2f>:
 8003344:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003346:	ee10 6a10 	vmov	r6, s0
 800334a:	4b8e      	ldr	r3, [pc, #568]	; (8003584 <__ieee754_rem_pio2f+0x240>)
 800334c:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8003350:	429d      	cmp	r5, r3
 8003352:	b087      	sub	sp, #28
 8003354:	eef0 7a40 	vmov.f32	s15, s0
 8003358:	4604      	mov	r4, r0
 800335a:	dc05      	bgt.n	8003368 <__ieee754_rem_pio2f+0x24>
 800335c:	2300      	movs	r3, #0
 800335e:	ed80 0a00 	vstr	s0, [r0]
 8003362:	6043      	str	r3, [r0, #4]
 8003364:	2000      	movs	r0, #0
 8003366:	e01a      	b.n	800339e <__ieee754_rem_pio2f+0x5a>
 8003368:	4b87      	ldr	r3, [pc, #540]	; (8003588 <__ieee754_rem_pio2f+0x244>)
 800336a:	429d      	cmp	r5, r3
 800336c:	dc46      	bgt.n	80033fc <__ieee754_rem_pio2f+0xb8>
 800336e:	2e00      	cmp	r6, #0
 8003370:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800358c <__ieee754_rem_pio2f+0x248>
 8003374:	4b86      	ldr	r3, [pc, #536]	; (8003590 <__ieee754_rem_pio2f+0x24c>)
 8003376:	f025 050f 	bic.w	r5, r5, #15
 800337a:	dd1f      	ble.n	80033bc <__ieee754_rem_pio2f+0x78>
 800337c:	429d      	cmp	r5, r3
 800337e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8003382:	d00e      	beq.n	80033a2 <__ieee754_rem_pio2f+0x5e>
 8003384:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8003594 <__ieee754_rem_pio2f+0x250>
 8003388:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800338c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8003390:	ed80 0a00 	vstr	s0, [r0]
 8003394:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003398:	2001      	movs	r0, #1
 800339a:	edc4 7a01 	vstr	s15, [r4, #4]
 800339e:	b007      	add	sp, #28
 80033a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033a2:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8003598 <__ieee754_rem_pio2f+0x254>
 80033a6:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800359c <__ieee754_rem_pio2f+0x258>
 80033aa:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80033ae:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80033b2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80033b6:	edc0 6a00 	vstr	s13, [r0]
 80033ba:	e7eb      	b.n	8003394 <__ieee754_rem_pio2f+0x50>
 80033bc:	429d      	cmp	r5, r3
 80033be:	ee77 7a80 	vadd.f32	s15, s15, s0
 80033c2:	d00e      	beq.n	80033e2 <__ieee754_rem_pio2f+0x9e>
 80033c4:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8003594 <__ieee754_rem_pio2f+0x250>
 80033c8:	ee37 0a87 	vadd.f32	s0, s15, s14
 80033cc:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80033d0:	ed80 0a00 	vstr	s0, [r0]
 80033d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80033d8:	f04f 30ff 	mov.w	r0, #4294967295
 80033dc:	edc4 7a01 	vstr	s15, [r4, #4]
 80033e0:	e7dd      	b.n	800339e <__ieee754_rem_pio2f+0x5a>
 80033e2:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8003598 <__ieee754_rem_pio2f+0x254>
 80033e6:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800359c <__ieee754_rem_pio2f+0x258>
 80033ea:	ee77 7a80 	vadd.f32	s15, s15, s0
 80033ee:	ee77 6a87 	vadd.f32	s13, s15, s14
 80033f2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80033f6:	edc0 6a00 	vstr	s13, [r0]
 80033fa:	e7eb      	b.n	80033d4 <__ieee754_rem_pio2f+0x90>
 80033fc:	4b68      	ldr	r3, [pc, #416]	; (80035a0 <__ieee754_rem_pio2f+0x25c>)
 80033fe:	429d      	cmp	r5, r3
 8003400:	dc72      	bgt.n	80034e8 <__ieee754_rem_pio2f+0x1a4>
 8003402:	f000 fbf9 	bl	8003bf8 <fabsf>
 8003406:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80035a4 <__ieee754_rem_pio2f+0x260>
 800340a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800340e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8003412:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003416:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800341a:	ee17 0a90 	vmov	r0, s15
 800341e:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800358c <__ieee754_rem_pio2f+0x248>
 8003422:	eea7 0a67 	vfms.f32	s0, s14, s15
 8003426:	281f      	cmp	r0, #31
 8003428:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8003594 <__ieee754_rem_pio2f+0x250>
 800342c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003430:	eeb1 6a47 	vneg.f32	s12, s14
 8003434:	ee70 6a67 	vsub.f32	s13, s0, s15
 8003438:	ee16 2a90 	vmov	r2, s13
 800343c:	dc1c      	bgt.n	8003478 <__ieee754_rem_pio2f+0x134>
 800343e:	495a      	ldr	r1, [pc, #360]	; (80035a8 <__ieee754_rem_pio2f+0x264>)
 8003440:	1e47      	subs	r7, r0, #1
 8003442:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8003446:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800344a:	428b      	cmp	r3, r1
 800344c:	d014      	beq.n	8003478 <__ieee754_rem_pio2f+0x134>
 800344e:	6022      	str	r2, [r4, #0]
 8003450:	ed94 7a00 	vldr	s14, [r4]
 8003454:	ee30 0a47 	vsub.f32	s0, s0, s14
 8003458:	2e00      	cmp	r6, #0
 800345a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800345e:	ed84 0a01 	vstr	s0, [r4, #4]
 8003462:	da9c      	bge.n	800339e <__ieee754_rem_pio2f+0x5a>
 8003464:	eeb1 7a47 	vneg.f32	s14, s14
 8003468:	eeb1 0a40 	vneg.f32	s0, s0
 800346c:	ed84 7a00 	vstr	s14, [r4]
 8003470:	ed84 0a01 	vstr	s0, [r4, #4]
 8003474:	4240      	negs	r0, r0
 8003476:	e792      	b.n	800339e <__ieee754_rem_pio2f+0x5a>
 8003478:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800347c:	15eb      	asrs	r3, r5, #23
 800347e:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 8003482:	2d08      	cmp	r5, #8
 8003484:	dde3      	ble.n	800344e <__ieee754_rem_pio2f+0x10a>
 8003486:	eddf 7a44 	vldr	s15, [pc, #272]	; 8003598 <__ieee754_rem_pio2f+0x254>
 800348a:	eddf 5a44 	vldr	s11, [pc, #272]	; 800359c <__ieee754_rem_pio2f+0x258>
 800348e:	eef0 6a40 	vmov.f32	s13, s0
 8003492:	eee6 6a27 	vfma.f32	s13, s12, s15
 8003496:	ee30 0a66 	vsub.f32	s0, s0, s13
 800349a:	eea6 0a27 	vfma.f32	s0, s12, s15
 800349e:	eef0 7a40 	vmov.f32	s15, s0
 80034a2:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80034a6:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80034aa:	ee15 2a90 	vmov	r2, s11
 80034ae:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80034b2:	1a5b      	subs	r3, r3, r1
 80034b4:	2b19      	cmp	r3, #25
 80034b6:	dc04      	bgt.n	80034c2 <__ieee754_rem_pio2f+0x17e>
 80034b8:	edc4 5a00 	vstr	s11, [r4]
 80034bc:	eeb0 0a66 	vmov.f32	s0, s13
 80034c0:	e7c6      	b.n	8003450 <__ieee754_rem_pio2f+0x10c>
 80034c2:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80035ac <__ieee754_rem_pio2f+0x268>
 80034c6:	eeb0 0a66 	vmov.f32	s0, s13
 80034ca:	eea6 0a25 	vfma.f32	s0, s12, s11
 80034ce:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80034d2:	eddf 6a37 	vldr	s13, [pc, #220]	; 80035b0 <__ieee754_rem_pio2f+0x26c>
 80034d6:	eee6 7a25 	vfma.f32	s15, s12, s11
 80034da:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80034de:	ee30 7a67 	vsub.f32	s14, s0, s15
 80034e2:	ed84 7a00 	vstr	s14, [r4]
 80034e6:	e7b3      	b.n	8003450 <__ieee754_rem_pio2f+0x10c>
 80034e8:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80034ec:	db06      	blt.n	80034fc <__ieee754_rem_pio2f+0x1b8>
 80034ee:	ee70 7a40 	vsub.f32	s15, s0, s0
 80034f2:	edc0 7a01 	vstr	s15, [r0, #4]
 80034f6:	edc0 7a00 	vstr	s15, [r0]
 80034fa:	e733      	b.n	8003364 <__ieee754_rem_pio2f+0x20>
 80034fc:	15ea      	asrs	r2, r5, #23
 80034fe:	3a86      	subs	r2, #134	; 0x86
 8003500:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8003504:	ee07 3a90 	vmov	s15, r3
 8003508:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800350c:	eddf 6a29 	vldr	s13, [pc, #164]	; 80035b4 <__ieee754_rem_pio2f+0x270>
 8003510:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003514:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003518:	ed8d 7a03 	vstr	s14, [sp, #12]
 800351c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003520:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8003524:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003528:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800352c:	ed8d 7a04 	vstr	s14, [sp, #16]
 8003530:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003534:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800353c:	edcd 7a05 	vstr	s15, [sp, #20]
 8003540:	d11e      	bne.n	8003580 <__ieee754_rem_pio2f+0x23c>
 8003542:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8003546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800354a:	bf14      	ite	ne
 800354c:	2302      	movne	r3, #2
 800354e:	2301      	moveq	r3, #1
 8003550:	4919      	ldr	r1, [pc, #100]	; (80035b8 <__ieee754_rem_pio2f+0x274>)
 8003552:	9101      	str	r1, [sp, #4]
 8003554:	2102      	movs	r1, #2
 8003556:	9100      	str	r1, [sp, #0]
 8003558:	a803      	add	r0, sp, #12
 800355a:	4621      	mov	r1, r4
 800355c:	f000 f88e 	bl	800367c <__kernel_rem_pio2f>
 8003560:	2e00      	cmp	r6, #0
 8003562:	f6bf af1c 	bge.w	800339e <__ieee754_rem_pio2f+0x5a>
 8003566:	edd4 7a00 	vldr	s15, [r4]
 800356a:	eef1 7a67 	vneg.f32	s15, s15
 800356e:	edc4 7a00 	vstr	s15, [r4]
 8003572:	edd4 7a01 	vldr	s15, [r4, #4]
 8003576:	eef1 7a67 	vneg.f32	s15, s15
 800357a:	edc4 7a01 	vstr	s15, [r4, #4]
 800357e:	e779      	b.n	8003474 <__ieee754_rem_pio2f+0x130>
 8003580:	2303      	movs	r3, #3
 8003582:	e7e5      	b.n	8003550 <__ieee754_rem_pio2f+0x20c>
 8003584:	3f490fd8 	.word	0x3f490fd8
 8003588:	4016cbe3 	.word	0x4016cbe3
 800358c:	3fc90f80 	.word	0x3fc90f80
 8003590:	3fc90fd0 	.word	0x3fc90fd0
 8003594:	37354443 	.word	0x37354443
 8003598:	37354400 	.word	0x37354400
 800359c:	2e85a308 	.word	0x2e85a308
 80035a0:	43490f80 	.word	0x43490f80
 80035a4:	3f22f984 	.word	0x3f22f984
 80035a8:	08003db0 	.word	0x08003db0
 80035ac:	2e85a300 	.word	0x2e85a300
 80035b0:	248d3132 	.word	0x248d3132
 80035b4:	43800000 	.word	0x43800000
 80035b8:	08003e30 	.word	0x08003e30

080035bc <__kernel_cosf>:
 80035bc:	ee10 3a10 	vmov	r3, s0
 80035c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80035c4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80035c8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80035cc:	da05      	bge.n	80035da <__kernel_cosf+0x1e>
 80035ce:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80035d2:	ee17 2a90 	vmov	r2, s15
 80035d6:	2a00      	cmp	r2, #0
 80035d8:	d03d      	beq.n	8003656 <__kernel_cosf+0x9a>
 80035da:	ee60 5a00 	vmul.f32	s11, s0, s0
 80035de:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800365c <__kernel_cosf+0xa0>
 80035e2:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8003660 <__kernel_cosf+0xa4>
 80035e6:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8003664 <__kernel_cosf+0xa8>
 80035ea:	4a1f      	ldr	r2, [pc, #124]	; (8003668 <__kernel_cosf+0xac>)
 80035ec:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80035f0:	4293      	cmp	r3, r2
 80035f2:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800366c <__kernel_cosf+0xb0>
 80035f6:	eee7 7a25 	vfma.f32	s15, s14, s11
 80035fa:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003670 <__kernel_cosf+0xb4>
 80035fe:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8003602:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8003674 <__kernel_cosf+0xb8>
 8003606:	eee7 7a25 	vfma.f32	s15, s14, s11
 800360a:	eeb0 7a66 	vmov.f32	s14, s13
 800360e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8003612:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8003616:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800361a:	ee67 6a25 	vmul.f32	s13, s14, s11
 800361e:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8003622:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8003626:	dc04      	bgt.n	8003632 <__kernel_cosf+0x76>
 8003628:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800362c:	ee36 0a47 	vsub.f32	s0, s12, s14
 8003630:	4770      	bx	lr
 8003632:	4a11      	ldr	r2, [pc, #68]	; (8003678 <__kernel_cosf+0xbc>)
 8003634:	4293      	cmp	r3, r2
 8003636:	bfda      	itte	le
 8003638:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800363c:	ee06 3a90 	vmovle	s13, r3
 8003640:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8003644:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003648:	ee36 0a66 	vsub.f32	s0, s12, s13
 800364c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003650:	ee30 0a67 	vsub.f32	s0, s0, s15
 8003654:	4770      	bx	lr
 8003656:	eeb0 0a46 	vmov.f32	s0, s12
 800365a:	4770      	bx	lr
 800365c:	ad47d74e 	.word	0xad47d74e
 8003660:	310f74f6 	.word	0x310f74f6
 8003664:	3d2aaaab 	.word	0x3d2aaaab
 8003668:	3e999999 	.word	0x3e999999
 800366c:	b493f27c 	.word	0xb493f27c
 8003670:	37d00d01 	.word	0x37d00d01
 8003674:	bab60b61 	.word	0xbab60b61
 8003678:	3f480000 	.word	0x3f480000

0800367c <__kernel_rem_pio2f>:
 800367c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003680:	ed2d 8b04 	vpush	{d8-d9}
 8003684:	b0d9      	sub	sp, #356	; 0x164
 8003686:	4688      	mov	r8, r1
 8003688:	9002      	str	r0, [sp, #8]
 800368a:	49bb      	ldr	r1, [pc, #748]	; (8003978 <__kernel_rem_pio2f+0x2fc>)
 800368c:	9866      	ldr	r0, [sp, #408]	; 0x198
 800368e:	9301      	str	r3, [sp, #4]
 8003690:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8003694:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 8003698:	1e59      	subs	r1, r3, #1
 800369a:	1d13      	adds	r3, r2, #4
 800369c:	db27      	blt.n	80036ee <__kernel_rem_pio2f+0x72>
 800369e:	f1b2 0b03 	subs.w	fp, r2, #3
 80036a2:	bf48      	it	mi
 80036a4:	f102 0b04 	addmi.w	fp, r2, #4
 80036a8:	ea4f 00eb 	mov.w	r0, fp, asr #3
 80036ac:	1c45      	adds	r5, r0, #1
 80036ae:	00ec      	lsls	r4, r5, #3
 80036b0:	1a47      	subs	r7, r0, r1
 80036b2:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8003988 <__kernel_rem_pio2f+0x30c>
 80036b6:	9403      	str	r4, [sp, #12]
 80036b8:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 80036bc:	eb0a 0c01 	add.w	ip, sl, r1
 80036c0:	ae1c      	add	r6, sp, #112	; 0x70
 80036c2:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 80036c6:	2400      	movs	r4, #0
 80036c8:	4564      	cmp	r4, ip
 80036ca:	dd12      	ble.n	80036f2 <__kernel_rem_pio2f+0x76>
 80036cc:	9b01      	ldr	r3, [sp, #4]
 80036ce:	ac1c      	add	r4, sp, #112	; 0x70
 80036d0:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80036d4:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 80036d8:	f04f 0c00 	mov.w	ip, #0
 80036dc:	45d4      	cmp	ip, sl
 80036de:	dc27      	bgt.n	8003730 <__kernel_rem_pio2f+0xb4>
 80036e0:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80036e4:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8003988 <__kernel_rem_pio2f+0x30c>
 80036e8:	4627      	mov	r7, r4
 80036ea:	2600      	movs	r6, #0
 80036ec:	e016      	b.n	800371c <__kernel_rem_pio2f+0xa0>
 80036ee:	2000      	movs	r0, #0
 80036f0:	e7dc      	b.n	80036ac <__kernel_rem_pio2f+0x30>
 80036f2:	42e7      	cmn	r7, r4
 80036f4:	bf5d      	ittte	pl
 80036f6:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 80036fa:	ee07 3a90 	vmovpl	s15, r3
 80036fe:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8003702:	eef0 7a47 	vmovmi.f32	s15, s14
 8003706:	ece6 7a01 	vstmia	r6!, {s15}
 800370a:	3401      	adds	r4, #1
 800370c:	e7dc      	b.n	80036c8 <__kernel_rem_pio2f+0x4c>
 800370e:	ecf9 6a01 	vldmia	r9!, {s13}
 8003712:	ed97 7a00 	vldr	s14, [r7]
 8003716:	eee6 7a87 	vfma.f32	s15, s13, s14
 800371a:	3601      	adds	r6, #1
 800371c:	428e      	cmp	r6, r1
 800371e:	f1a7 0704 	sub.w	r7, r7, #4
 8003722:	ddf4      	ble.n	800370e <__kernel_rem_pio2f+0x92>
 8003724:	eceb 7a01 	vstmia	fp!, {s15}
 8003728:	f10c 0c01 	add.w	ip, ip, #1
 800372c:	3404      	adds	r4, #4
 800372e:	e7d5      	b.n	80036dc <__kernel_rem_pio2f+0x60>
 8003730:	ab08      	add	r3, sp, #32
 8003732:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8003736:	eddf 8a93 	vldr	s17, [pc, #588]	; 8003984 <__kernel_rem_pio2f+0x308>
 800373a:	ed9f 9a91 	vldr	s18, [pc, #580]	; 8003980 <__kernel_rem_pio2f+0x304>
 800373e:	9304      	str	r3, [sp, #16]
 8003740:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 8003744:	4656      	mov	r6, sl
 8003746:	00b3      	lsls	r3, r6, #2
 8003748:	9305      	str	r3, [sp, #20]
 800374a:	ab58      	add	r3, sp, #352	; 0x160
 800374c:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8003750:	ac08      	add	r4, sp, #32
 8003752:	ab44      	add	r3, sp, #272	; 0x110
 8003754:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8003758:	46a4      	mov	ip, r4
 800375a:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800375e:	4637      	mov	r7, r6
 8003760:	2f00      	cmp	r7, #0
 8003762:	f1a0 0004 	sub.w	r0, r0, #4
 8003766:	dc4f      	bgt.n	8003808 <__kernel_rem_pio2f+0x18c>
 8003768:	4628      	mov	r0, r5
 800376a:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800376e:	f000 fa8d 	bl	8003c8c <scalbnf>
 8003772:	eeb0 8a40 	vmov.f32	s16, s0
 8003776:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800377a:	ee28 0a00 	vmul.f32	s0, s16, s0
 800377e:	f000 fa43 	bl	8003c08 <floorf>
 8003782:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8003786:	eea0 8a67 	vfms.f32	s16, s0, s15
 800378a:	2d00      	cmp	r5, #0
 800378c:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8003790:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8003794:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8003798:	ee17 9a90 	vmov	r9, s15
 800379c:	ee38 8a40 	vsub.f32	s16, s16, s0
 80037a0:	dd44      	ble.n	800382c <__kernel_rem_pio2f+0x1b0>
 80037a2:	f106 3cff 	add.w	ip, r6, #4294967295
 80037a6:	ab08      	add	r3, sp, #32
 80037a8:	f1c5 0e08 	rsb	lr, r5, #8
 80037ac:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 80037b0:	fa47 f00e 	asr.w	r0, r7, lr
 80037b4:	4481      	add	r9, r0
 80037b6:	fa00 f00e 	lsl.w	r0, r0, lr
 80037ba:	1a3f      	subs	r7, r7, r0
 80037bc:	f1c5 0007 	rsb	r0, r5, #7
 80037c0:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 80037c4:	4107      	asrs	r7, r0
 80037c6:	2f00      	cmp	r7, #0
 80037c8:	dd3f      	ble.n	800384a <__kernel_rem_pio2f+0x1ce>
 80037ca:	f04f 0e00 	mov.w	lr, #0
 80037ce:	f109 0901 	add.w	r9, r9, #1
 80037d2:	4673      	mov	r3, lr
 80037d4:	4576      	cmp	r6, lr
 80037d6:	dc6b      	bgt.n	80038b0 <__kernel_rem_pio2f+0x234>
 80037d8:	2d00      	cmp	r5, #0
 80037da:	dd04      	ble.n	80037e6 <__kernel_rem_pio2f+0x16a>
 80037dc:	2d01      	cmp	r5, #1
 80037de:	d078      	beq.n	80038d2 <__kernel_rem_pio2f+0x256>
 80037e0:	2d02      	cmp	r5, #2
 80037e2:	f000 8081 	beq.w	80038e8 <__kernel_rem_pio2f+0x26c>
 80037e6:	2f02      	cmp	r7, #2
 80037e8:	d12f      	bne.n	800384a <__kernel_rem_pio2f+0x1ce>
 80037ea:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80037ee:	ee30 8a48 	vsub.f32	s16, s0, s16
 80037f2:	b353      	cbz	r3, 800384a <__kernel_rem_pio2f+0x1ce>
 80037f4:	4628      	mov	r0, r5
 80037f6:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80037fa:	f000 fa47 	bl	8003c8c <scalbnf>
 80037fe:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8003802:	ee38 8a40 	vsub.f32	s16, s16, s0
 8003806:	e020      	b.n	800384a <__kernel_rem_pio2f+0x1ce>
 8003808:	ee60 7a28 	vmul.f32	s15, s0, s17
 800380c:	3f01      	subs	r7, #1
 800380e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003812:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003816:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800381a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800381e:	ecac 0a01 	vstmia	ip!, {s0}
 8003822:	ed90 0a00 	vldr	s0, [r0]
 8003826:	ee37 0a80 	vadd.f32	s0, s15, s0
 800382a:	e799      	b.n	8003760 <__kernel_rem_pio2f+0xe4>
 800382c:	d105      	bne.n	800383a <__kernel_rem_pio2f+0x1be>
 800382e:	1e70      	subs	r0, r6, #1
 8003830:	ab08      	add	r3, sp, #32
 8003832:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8003836:	11ff      	asrs	r7, r7, #7
 8003838:	e7c5      	b.n	80037c6 <__kernel_rem_pio2f+0x14a>
 800383a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800383e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8003842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003846:	da31      	bge.n	80038ac <__kernel_rem_pio2f+0x230>
 8003848:	2700      	movs	r7, #0
 800384a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800384e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003852:	f040 809b 	bne.w	800398c <__kernel_rem_pio2f+0x310>
 8003856:	1e74      	subs	r4, r6, #1
 8003858:	46a4      	mov	ip, r4
 800385a:	2000      	movs	r0, #0
 800385c:	45d4      	cmp	ip, sl
 800385e:	da4a      	bge.n	80038f6 <__kernel_rem_pio2f+0x27a>
 8003860:	2800      	cmp	r0, #0
 8003862:	d07a      	beq.n	800395a <__kernel_rem_pio2f+0x2de>
 8003864:	ab08      	add	r3, sp, #32
 8003866:	3d08      	subs	r5, #8
 8003868:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800386c:	2b00      	cmp	r3, #0
 800386e:	f000 8081 	beq.w	8003974 <__kernel_rem_pio2f+0x2f8>
 8003872:	4628      	mov	r0, r5
 8003874:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003878:	00a5      	lsls	r5, r4, #2
 800387a:	f000 fa07 	bl	8003c8c <scalbnf>
 800387e:	aa44      	add	r2, sp, #272	; 0x110
 8003880:	1d2b      	adds	r3, r5, #4
 8003882:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8003984 <__kernel_rem_pio2f+0x308>
 8003886:	18d1      	adds	r1, r2, r3
 8003888:	4622      	mov	r2, r4
 800388a:	2a00      	cmp	r2, #0
 800388c:	f280 80ae 	bge.w	80039ec <__kernel_rem_pio2f+0x370>
 8003890:	4622      	mov	r2, r4
 8003892:	2a00      	cmp	r2, #0
 8003894:	f2c0 80cc 	blt.w	8003a30 <__kernel_rem_pio2f+0x3b4>
 8003898:	a944      	add	r1, sp, #272	; 0x110
 800389a:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 800389e:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800397c <__kernel_rem_pio2f+0x300>
 80038a2:	eddf 7a39 	vldr	s15, [pc, #228]	; 8003988 <__kernel_rem_pio2f+0x30c>
 80038a6:	2000      	movs	r0, #0
 80038a8:	1aa1      	subs	r1, r4, r2
 80038aa:	e0b6      	b.n	8003a1a <__kernel_rem_pio2f+0x39e>
 80038ac:	2702      	movs	r7, #2
 80038ae:	e78c      	b.n	80037ca <__kernel_rem_pio2f+0x14e>
 80038b0:	6820      	ldr	r0, [r4, #0]
 80038b2:	b94b      	cbnz	r3, 80038c8 <__kernel_rem_pio2f+0x24c>
 80038b4:	b118      	cbz	r0, 80038be <__kernel_rem_pio2f+0x242>
 80038b6:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 80038ba:	6020      	str	r0, [r4, #0]
 80038bc:	2001      	movs	r0, #1
 80038be:	f10e 0e01 	add.w	lr, lr, #1
 80038c2:	3404      	adds	r4, #4
 80038c4:	4603      	mov	r3, r0
 80038c6:	e785      	b.n	80037d4 <__kernel_rem_pio2f+0x158>
 80038c8:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 80038cc:	6020      	str	r0, [r4, #0]
 80038ce:	4618      	mov	r0, r3
 80038d0:	e7f5      	b.n	80038be <__kernel_rem_pio2f+0x242>
 80038d2:	1e74      	subs	r4, r6, #1
 80038d4:	a808      	add	r0, sp, #32
 80038d6:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80038da:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80038de:	f10d 0c20 	add.w	ip, sp, #32
 80038e2:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 80038e6:	e77e      	b.n	80037e6 <__kernel_rem_pio2f+0x16a>
 80038e8:	1e74      	subs	r4, r6, #1
 80038ea:	a808      	add	r0, sp, #32
 80038ec:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80038f0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 80038f4:	e7f3      	b.n	80038de <__kernel_rem_pio2f+0x262>
 80038f6:	ab08      	add	r3, sp, #32
 80038f8:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80038fc:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003900:	4318      	orrs	r0, r3
 8003902:	e7ab      	b.n	800385c <__kernel_rem_pio2f+0x1e0>
 8003904:	f10c 0c01 	add.w	ip, ip, #1
 8003908:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 800390c:	2c00      	cmp	r4, #0
 800390e:	d0f9      	beq.n	8003904 <__kernel_rem_pio2f+0x288>
 8003910:	9b05      	ldr	r3, [sp, #20]
 8003912:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8003916:	eb0d 0003 	add.w	r0, sp, r3
 800391a:	9b01      	ldr	r3, [sp, #4]
 800391c:	18f4      	adds	r4, r6, r3
 800391e:	ab1c      	add	r3, sp, #112	; 0x70
 8003920:	1c77      	adds	r7, r6, #1
 8003922:	384c      	subs	r0, #76	; 0x4c
 8003924:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8003928:	4466      	add	r6, ip
 800392a:	42be      	cmp	r6, r7
 800392c:	f6ff af0b 	blt.w	8003746 <__kernel_rem_pio2f+0xca>
 8003930:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8003934:	f8dd e008 	ldr.w	lr, [sp, #8]
 8003938:	ee07 3a90 	vmov	s15, r3
 800393c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003940:	f04f 0c00 	mov.w	ip, #0
 8003944:	ece4 7a01 	vstmia	r4!, {s15}
 8003948:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8003988 <__kernel_rem_pio2f+0x30c>
 800394c:	46a1      	mov	r9, r4
 800394e:	458c      	cmp	ip, r1
 8003950:	dd07      	ble.n	8003962 <__kernel_rem_pio2f+0x2e6>
 8003952:	ece0 7a01 	vstmia	r0!, {s15}
 8003956:	3701      	adds	r7, #1
 8003958:	e7e7      	b.n	800392a <__kernel_rem_pio2f+0x2ae>
 800395a:	9804      	ldr	r0, [sp, #16]
 800395c:	f04f 0c01 	mov.w	ip, #1
 8003960:	e7d2      	b.n	8003908 <__kernel_rem_pio2f+0x28c>
 8003962:	ecfe 6a01 	vldmia	lr!, {s13}
 8003966:	ed39 7a01 	vldmdb	r9!, {s14}
 800396a:	f10c 0c01 	add.w	ip, ip, #1
 800396e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8003972:	e7ec      	b.n	800394e <__kernel_rem_pio2f+0x2d2>
 8003974:	3c01      	subs	r4, #1
 8003976:	e775      	b.n	8003864 <__kernel_rem_pio2f+0x1e8>
 8003978:	08004174 	.word	0x08004174
 800397c:	08004148 	.word	0x08004148
 8003980:	43800000 	.word	0x43800000
 8003984:	3b800000 	.word	0x3b800000
 8003988:	00000000 	.word	0x00000000
 800398c:	9b03      	ldr	r3, [sp, #12]
 800398e:	eeb0 0a48 	vmov.f32	s0, s16
 8003992:	1a98      	subs	r0, r3, r2
 8003994:	f000 f97a 	bl	8003c8c <scalbnf>
 8003998:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8003980 <__kernel_rem_pio2f+0x304>
 800399c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80039a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039a4:	db19      	blt.n	80039da <__kernel_rem_pio2f+0x35e>
 80039a6:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8003984 <__kernel_rem_pio2f+0x308>
 80039aa:	ee60 7a27 	vmul.f32	s15, s0, s15
 80039ae:	aa08      	add	r2, sp, #32
 80039b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80039b4:	1c74      	adds	r4, r6, #1
 80039b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039ba:	3508      	adds	r5, #8
 80039bc:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80039c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80039c4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80039c8:	ee10 3a10 	vmov	r3, s0
 80039cc:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80039d0:	ee17 3a90 	vmov	r3, s15
 80039d4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80039d8:	e74b      	b.n	8003872 <__kernel_rem_pio2f+0x1f6>
 80039da:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80039de:	aa08      	add	r2, sp, #32
 80039e0:	ee10 3a10 	vmov	r3, s0
 80039e4:	4634      	mov	r4, r6
 80039e6:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80039ea:	e742      	b.n	8003872 <__kernel_rem_pio2f+0x1f6>
 80039ec:	a808      	add	r0, sp, #32
 80039ee:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 80039f2:	9001      	str	r0, [sp, #4]
 80039f4:	ee07 0a90 	vmov	s15, r0
 80039f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039fc:	3a01      	subs	r2, #1
 80039fe:	ee67 7a80 	vmul.f32	s15, s15, s0
 8003a02:	ee20 0a07 	vmul.f32	s0, s0, s14
 8003a06:	ed61 7a01 	vstmdb	r1!, {s15}
 8003a0a:	e73e      	b.n	800388a <__kernel_rem_pio2f+0x20e>
 8003a0c:	ecfc 6a01 	vldmia	ip!, {s13}
 8003a10:	ecb6 7a01 	vldmia	r6!, {s14}
 8003a14:	eee6 7a87 	vfma.f32	s15, s13, s14
 8003a18:	3001      	adds	r0, #1
 8003a1a:	4550      	cmp	r0, sl
 8003a1c:	dc01      	bgt.n	8003a22 <__kernel_rem_pio2f+0x3a6>
 8003a1e:	4288      	cmp	r0, r1
 8003a20:	ddf4      	ble.n	8003a0c <__kernel_rem_pio2f+0x390>
 8003a22:	a858      	add	r0, sp, #352	; 0x160
 8003a24:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8003a28:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8003a2c:	3a01      	subs	r2, #1
 8003a2e:	e730      	b.n	8003892 <__kernel_rem_pio2f+0x216>
 8003a30:	9a66      	ldr	r2, [sp, #408]	; 0x198
 8003a32:	2a02      	cmp	r2, #2
 8003a34:	dc09      	bgt.n	8003a4a <__kernel_rem_pio2f+0x3ce>
 8003a36:	2a00      	cmp	r2, #0
 8003a38:	dc2a      	bgt.n	8003a90 <__kernel_rem_pio2f+0x414>
 8003a3a:	d043      	beq.n	8003ac4 <__kernel_rem_pio2f+0x448>
 8003a3c:	f009 0007 	and.w	r0, r9, #7
 8003a40:	b059      	add	sp, #356	; 0x164
 8003a42:	ecbd 8b04 	vpop	{d8-d9}
 8003a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a4a:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8003a4c:	2b03      	cmp	r3, #3
 8003a4e:	d1f5      	bne.n	8003a3c <__kernel_rem_pio2f+0x3c0>
 8003a50:	ab30      	add	r3, sp, #192	; 0xc0
 8003a52:	442b      	add	r3, r5
 8003a54:	461a      	mov	r2, r3
 8003a56:	4619      	mov	r1, r3
 8003a58:	4620      	mov	r0, r4
 8003a5a:	2800      	cmp	r0, #0
 8003a5c:	f1a1 0104 	sub.w	r1, r1, #4
 8003a60:	dc51      	bgt.n	8003b06 <__kernel_rem_pio2f+0x48a>
 8003a62:	4621      	mov	r1, r4
 8003a64:	2901      	cmp	r1, #1
 8003a66:	f1a2 0204 	sub.w	r2, r2, #4
 8003a6a:	dc5c      	bgt.n	8003b26 <__kernel_rem_pio2f+0x4aa>
 8003a6c:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8003988 <__kernel_rem_pio2f+0x30c>
 8003a70:	3304      	adds	r3, #4
 8003a72:	2c01      	cmp	r4, #1
 8003a74:	dc67      	bgt.n	8003b46 <__kernel_rem_pio2f+0x4ca>
 8003a76:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8003a7a:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8003a7e:	2f00      	cmp	r7, #0
 8003a80:	d167      	bne.n	8003b52 <__kernel_rem_pio2f+0x4d6>
 8003a82:	edc8 6a00 	vstr	s13, [r8]
 8003a86:	ed88 7a01 	vstr	s14, [r8, #4]
 8003a8a:	edc8 7a02 	vstr	s15, [r8, #8]
 8003a8e:	e7d5      	b.n	8003a3c <__kernel_rem_pio2f+0x3c0>
 8003a90:	aa30      	add	r2, sp, #192	; 0xc0
 8003a92:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 8003988 <__kernel_rem_pio2f+0x30c>
 8003a96:	4413      	add	r3, r2
 8003a98:	4622      	mov	r2, r4
 8003a9a:	2a00      	cmp	r2, #0
 8003a9c:	da24      	bge.n	8003ae8 <__kernel_rem_pio2f+0x46c>
 8003a9e:	b34f      	cbz	r7, 8003af4 <__kernel_rem_pio2f+0x478>
 8003aa0:	eef1 7a47 	vneg.f32	s15, s14
 8003aa4:	edc8 7a00 	vstr	s15, [r8]
 8003aa8:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8003aac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003ab0:	aa31      	add	r2, sp, #196	; 0xc4
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	429c      	cmp	r4, r3
 8003ab6:	da20      	bge.n	8003afa <__kernel_rem_pio2f+0x47e>
 8003ab8:	b10f      	cbz	r7, 8003abe <__kernel_rem_pio2f+0x442>
 8003aba:	eef1 7a67 	vneg.f32	s15, s15
 8003abe:	edc8 7a01 	vstr	s15, [r8, #4]
 8003ac2:	e7bb      	b.n	8003a3c <__kernel_rem_pio2f+0x3c0>
 8003ac4:	aa30      	add	r2, sp, #192	; 0xc0
 8003ac6:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 8003988 <__kernel_rem_pio2f+0x30c>
 8003aca:	4413      	add	r3, r2
 8003acc:	2c00      	cmp	r4, #0
 8003ace:	da05      	bge.n	8003adc <__kernel_rem_pio2f+0x460>
 8003ad0:	b10f      	cbz	r7, 8003ad6 <__kernel_rem_pio2f+0x45a>
 8003ad2:	eef1 7a67 	vneg.f32	s15, s15
 8003ad6:	edc8 7a00 	vstr	s15, [r8]
 8003ada:	e7af      	b.n	8003a3c <__kernel_rem_pio2f+0x3c0>
 8003adc:	ed33 7a01 	vldmdb	r3!, {s14}
 8003ae0:	3c01      	subs	r4, #1
 8003ae2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003ae6:	e7f1      	b.n	8003acc <__kernel_rem_pio2f+0x450>
 8003ae8:	ed73 7a01 	vldmdb	r3!, {s15}
 8003aec:	3a01      	subs	r2, #1
 8003aee:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003af2:	e7d2      	b.n	8003a9a <__kernel_rem_pio2f+0x41e>
 8003af4:	eef0 7a47 	vmov.f32	s15, s14
 8003af8:	e7d4      	b.n	8003aa4 <__kernel_rem_pio2f+0x428>
 8003afa:	ecb2 7a01 	vldmia	r2!, {s14}
 8003afe:	3301      	adds	r3, #1
 8003b00:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003b04:	e7d6      	b.n	8003ab4 <__kernel_rem_pio2f+0x438>
 8003b06:	edd1 7a00 	vldr	s15, [r1]
 8003b0a:	edd1 6a01 	vldr	s13, [r1, #4]
 8003b0e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8003b12:	3801      	subs	r0, #1
 8003b14:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003b18:	ed81 7a00 	vstr	s14, [r1]
 8003b1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b20:	edc1 7a01 	vstr	s15, [r1, #4]
 8003b24:	e799      	b.n	8003a5a <__kernel_rem_pio2f+0x3de>
 8003b26:	edd2 7a00 	vldr	s15, [r2]
 8003b2a:	edd2 6a01 	vldr	s13, [r2, #4]
 8003b2e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8003b32:	3901      	subs	r1, #1
 8003b34:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003b38:	ed82 7a00 	vstr	s14, [r2]
 8003b3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b40:	edc2 7a01 	vstr	s15, [r2, #4]
 8003b44:	e78e      	b.n	8003a64 <__kernel_rem_pio2f+0x3e8>
 8003b46:	ed33 7a01 	vldmdb	r3!, {s14}
 8003b4a:	3c01      	subs	r4, #1
 8003b4c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003b50:	e78f      	b.n	8003a72 <__kernel_rem_pio2f+0x3f6>
 8003b52:	eef1 6a66 	vneg.f32	s13, s13
 8003b56:	eeb1 7a47 	vneg.f32	s14, s14
 8003b5a:	edc8 6a00 	vstr	s13, [r8]
 8003b5e:	ed88 7a01 	vstr	s14, [r8, #4]
 8003b62:	eef1 7a67 	vneg.f32	s15, s15
 8003b66:	e790      	b.n	8003a8a <__kernel_rem_pio2f+0x40e>

08003b68 <__kernel_sinf>:
 8003b68:	ee10 3a10 	vmov	r3, s0
 8003b6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003b70:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8003b74:	da04      	bge.n	8003b80 <__kernel_sinf+0x18>
 8003b76:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8003b7a:	ee17 3a90 	vmov	r3, s15
 8003b7e:	b35b      	cbz	r3, 8003bd8 <__kernel_sinf+0x70>
 8003b80:	ee20 7a00 	vmul.f32	s14, s0, s0
 8003b84:	eddf 7a15 	vldr	s15, [pc, #84]	; 8003bdc <__kernel_sinf+0x74>
 8003b88:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8003be0 <__kernel_sinf+0x78>
 8003b8c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8003b90:	eddf 7a14 	vldr	s15, [pc, #80]	; 8003be4 <__kernel_sinf+0x7c>
 8003b94:	eee6 7a07 	vfma.f32	s15, s12, s14
 8003b98:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8003be8 <__kernel_sinf+0x80>
 8003b9c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8003ba0:	eddf 7a12 	vldr	s15, [pc, #72]	; 8003bec <__kernel_sinf+0x84>
 8003ba4:	ee60 6a07 	vmul.f32	s13, s0, s14
 8003ba8:	eee6 7a07 	vfma.f32	s15, s12, s14
 8003bac:	b930      	cbnz	r0, 8003bbc <__kernel_sinf+0x54>
 8003bae:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8003bf0 <__kernel_sinf+0x88>
 8003bb2:	eea7 6a27 	vfma.f32	s12, s14, s15
 8003bb6:	eea6 0a26 	vfma.f32	s0, s12, s13
 8003bba:	4770      	bx	lr
 8003bbc:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8003bc0:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8003bc4:	eee0 7a86 	vfma.f32	s15, s1, s12
 8003bc8:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8003bcc:	eddf 7a09 	vldr	s15, [pc, #36]	; 8003bf4 <__kernel_sinf+0x8c>
 8003bd0:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8003bd4:	ee30 0a60 	vsub.f32	s0, s0, s1
 8003bd8:	4770      	bx	lr
 8003bda:	bf00      	nop
 8003bdc:	2f2ec9d3 	.word	0x2f2ec9d3
 8003be0:	b2d72f34 	.word	0xb2d72f34
 8003be4:	3638ef1b 	.word	0x3638ef1b
 8003be8:	b9500d01 	.word	0xb9500d01
 8003bec:	3c088889 	.word	0x3c088889
 8003bf0:	be2aaaab 	.word	0xbe2aaaab
 8003bf4:	3e2aaaab 	.word	0x3e2aaaab

08003bf8 <fabsf>:
 8003bf8:	ee10 3a10 	vmov	r3, s0
 8003bfc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003c00:	ee00 3a10 	vmov	s0, r3
 8003c04:	4770      	bx	lr
	...

08003c08 <floorf>:
 8003c08:	ee10 3a10 	vmov	r3, s0
 8003c0c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8003c10:	3a7f      	subs	r2, #127	; 0x7f
 8003c12:	2a16      	cmp	r2, #22
 8003c14:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003c18:	dc2a      	bgt.n	8003c70 <floorf+0x68>
 8003c1a:	2a00      	cmp	r2, #0
 8003c1c:	da11      	bge.n	8003c42 <floorf+0x3a>
 8003c1e:	eddf 7a18 	vldr	s15, [pc, #96]	; 8003c80 <floorf+0x78>
 8003c22:	ee30 0a27 	vadd.f32	s0, s0, s15
 8003c26:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c2e:	dd05      	ble.n	8003c3c <floorf+0x34>
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	da23      	bge.n	8003c7c <floorf+0x74>
 8003c34:	4a13      	ldr	r2, [pc, #76]	; (8003c84 <floorf+0x7c>)
 8003c36:	2900      	cmp	r1, #0
 8003c38:	bf18      	it	ne
 8003c3a:	4613      	movne	r3, r2
 8003c3c:	ee00 3a10 	vmov	s0, r3
 8003c40:	4770      	bx	lr
 8003c42:	4911      	ldr	r1, [pc, #68]	; (8003c88 <floorf+0x80>)
 8003c44:	4111      	asrs	r1, r2
 8003c46:	420b      	tst	r3, r1
 8003c48:	d0fa      	beq.n	8003c40 <floorf+0x38>
 8003c4a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8003c80 <floorf+0x78>
 8003c4e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8003c52:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c5a:	ddef      	ble.n	8003c3c <floorf+0x34>
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	bfbe      	ittt	lt
 8003c60:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8003c64:	fa40 f202 	asrlt.w	r2, r0, r2
 8003c68:	189b      	addlt	r3, r3, r2
 8003c6a:	ea23 0301 	bic.w	r3, r3, r1
 8003c6e:	e7e5      	b.n	8003c3c <floorf+0x34>
 8003c70:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8003c74:	d3e4      	bcc.n	8003c40 <floorf+0x38>
 8003c76:	ee30 0a00 	vadd.f32	s0, s0, s0
 8003c7a:	4770      	bx	lr
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	e7dd      	b.n	8003c3c <floorf+0x34>
 8003c80:	7149f2ca 	.word	0x7149f2ca
 8003c84:	bf800000 	.word	0xbf800000
 8003c88:	007fffff 	.word	0x007fffff

08003c8c <scalbnf>:
 8003c8c:	ee10 3a10 	vmov	r3, s0
 8003c90:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8003c94:	d025      	beq.n	8003ce2 <scalbnf+0x56>
 8003c96:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8003c9a:	d302      	bcc.n	8003ca2 <scalbnf+0x16>
 8003c9c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8003ca0:	4770      	bx	lr
 8003ca2:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8003ca6:	d122      	bne.n	8003cee <scalbnf+0x62>
 8003ca8:	4b2a      	ldr	r3, [pc, #168]	; (8003d54 <scalbnf+0xc8>)
 8003caa:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8003d58 <scalbnf+0xcc>
 8003cae:	4298      	cmp	r0, r3
 8003cb0:	ee20 0a27 	vmul.f32	s0, s0, s15
 8003cb4:	db16      	blt.n	8003ce4 <scalbnf+0x58>
 8003cb6:	ee10 3a10 	vmov	r3, s0
 8003cba:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8003cbe:	3a19      	subs	r2, #25
 8003cc0:	4402      	add	r2, r0
 8003cc2:	2afe      	cmp	r2, #254	; 0xfe
 8003cc4:	dd15      	ble.n	8003cf2 <scalbnf+0x66>
 8003cc6:	ee10 3a10 	vmov	r3, s0
 8003cca:	eddf 7a24 	vldr	s15, [pc, #144]	; 8003d5c <scalbnf+0xd0>
 8003cce:	eddf 6a24 	vldr	s13, [pc, #144]	; 8003d60 <scalbnf+0xd4>
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	eeb0 7a67 	vmov.f32	s14, s15
 8003cd8:	bfb8      	it	lt
 8003cda:	eef0 7a66 	vmovlt.f32	s15, s13
 8003cde:	ee27 0a27 	vmul.f32	s0, s14, s15
 8003ce2:	4770      	bx	lr
 8003ce4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8003d64 <scalbnf+0xd8>
 8003ce8:	ee20 0a27 	vmul.f32	s0, s0, s15
 8003cec:	4770      	bx	lr
 8003cee:	0dd2      	lsrs	r2, r2, #23
 8003cf0:	e7e6      	b.n	8003cc0 <scalbnf+0x34>
 8003cf2:	2a00      	cmp	r2, #0
 8003cf4:	dd06      	ble.n	8003d04 <scalbnf+0x78>
 8003cf6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003cfa:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8003cfe:	ee00 3a10 	vmov	s0, r3
 8003d02:	4770      	bx	lr
 8003d04:	f112 0f16 	cmn.w	r2, #22
 8003d08:	da1a      	bge.n	8003d40 <scalbnf+0xb4>
 8003d0a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8003d0e:	4298      	cmp	r0, r3
 8003d10:	ee10 3a10 	vmov	r3, s0
 8003d14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d18:	dd0a      	ble.n	8003d30 <scalbnf+0xa4>
 8003d1a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8003d5c <scalbnf+0xd0>
 8003d1e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003d60 <scalbnf+0xd4>
 8003d22:	eef0 7a40 	vmov.f32	s15, s0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	bf18      	it	ne
 8003d2a:	eeb0 0a47 	vmovne.f32	s0, s14
 8003d2e:	e7db      	b.n	8003ce8 <scalbnf+0x5c>
 8003d30:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8003d64 <scalbnf+0xd8>
 8003d34:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8003d68 <scalbnf+0xdc>
 8003d38:	eef0 7a40 	vmov.f32	s15, s0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	e7f3      	b.n	8003d28 <scalbnf+0x9c>
 8003d40:	3219      	adds	r2, #25
 8003d42:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003d46:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8003d4a:	eddf 7a08 	vldr	s15, [pc, #32]	; 8003d6c <scalbnf+0xe0>
 8003d4e:	ee07 3a10 	vmov	s14, r3
 8003d52:	e7c4      	b.n	8003cde <scalbnf+0x52>
 8003d54:	ffff3cb0 	.word	0xffff3cb0
 8003d58:	4c000000 	.word	0x4c000000
 8003d5c:	7149f2ca 	.word	0x7149f2ca
 8003d60:	f149f2ca 	.word	0xf149f2ca
 8003d64:	0da24260 	.word	0x0da24260
 8003d68:	8da24260 	.word	0x8da24260
 8003d6c:	33000000 	.word	0x33000000

08003d70 <_init>:
 8003d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d72:	bf00      	nop
 8003d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d76:	bc08      	pop	{r3}
 8003d78:	469e      	mov	lr, r3
 8003d7a:	4770      	bx	lr

08003d7c <_fini>:
 8003d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d7e:	bf00      	nop
 8003d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d82:	bc08      	pop	{r3}
 8003d84:	469e      	mov	lr, r3
 8003d86:	4770      	bx	lr
