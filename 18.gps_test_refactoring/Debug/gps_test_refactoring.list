
gps_test_refactoring.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b954  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d38  0800ba68  0800ba68  0001ba68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c7a0  0800c7a0  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800c7a0  0800c7a0  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c7a0  0800c7a0  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c7a0  0800c7a0  0001c7a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c7a4  0800c7a4  0001c7a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800c7a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009cc  200001e0  0800c988  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000bac  0800c988  00020bac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004bcf6  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000369d  00000000  00000000  0006beff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003150  00000000  00000000  0006f5a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002fa8  00000000  00000000  000726f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a239  00000000  00000000  00075698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001abee  00000000  00000000  0008f8d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e14c  00000000  00000000  000aa4bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014860b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000f154  00000000  00000000  0014865c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ba4c 	.word	0x0800ba4c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	0800ba4c 	.word	0x0800ba4c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmpun>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001118:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800111c:	d102      	bne.n	8001124 <__aeabi_fcmpun+0x14>
 800111e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001122:	d108      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001124:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001128:	d102      	bne.n	8001130 <__aeabi_fcmpun+0x20>
 800112a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800112e:	d102      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001130:	f04f 0000 	mov.w	r0, #0
 8001134:	4770      	bx	lr
 8001136:	f04f 0001 	mov.w	r0, #1
 800113a:	4770      	bx	lr

0800113c <__aeabi_d2lz>:
 800113c:	b538      	push	{r3, r4, r5, lr}
 800113e:	4605      	mov	r5, r0
 8001140:	460c      	mov	r4, r1
 8001142:	2200      	movs	r2, #0
 8001144:	2300      	movs	r3, #0
 8001146:	4628      	mov	r0, r5
 8001148:	4621      	mov	r1, r4
 800114a:	f7ff fc37 	bl	80009bc <__aeabi_dcmplt>
 800114e:	b928      	cbnz	r0, 800115c <__aeabi_d2lz+0x20>
 8001150:	4628      	mov	r0, r5
 8001152:	4621      	mov	r1, r4
 8001154:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001158:	f000 b80a 	b.w	8001170 <__aeabi_d2ulz>
 800115c:	4628      	mov	r0, r5
 800115e:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001162:	f000 f805 	bl	8001170 <__aeabi_d2ulz>
 8001166:	4240      	negs	r0, r0
 8001168:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800116c:	bd38      	pop	{r3, r4, r5, pc}
 800116e:	bf00      	nop

08001170 <__aeabi_d2ulz>:
 8001170:	b5d0      	push	{r4, r6, r7, lr}
 8001172:	2200      	movs	r2, #0
 8001174:	4b0b      	ldr	r3, [pc, #44]	; (80011a4 <__aeabi_d2ulz+0x34>)
 8001176:	4606      	mov	r6, r0
 8001178:	460f      	mov	r7, r1
 800117a:	f7ff f9ad 	bl	80004d8 <__aeabi_dmul>
 800117e:	f7ff fc83 	bl	8000a88 <__aeabi_d2uiz>
 8001182:	4604      	mov	r4, r0
 8001184:	f7ff f92e 	bl	80003e4 <__aeabi_ui2d>
 8001188:	2200      	movs	r2, #0
 800118a:	4b07      	ldr	r3, [pc, #28]	; (80011a8 <__aeabi_d2ulz+0x38>)
 800118c:	f7ff f9a4 	bl	80004d8 <__aeabi_dmul>
 8001190:	4602      	mov	r2, r0
 8001192:	460b      	mov	r3, r1
 8001194:	4630      	mov	r0, r6
 8001196:	4639      	mov	r1, r7
 8001198:	f7fe ffe6 	bl	8000168 <__aeabi_dsub>
 800119c:	f7ff fc74 	bl	8000a88 <__aeabi_d2uiz>
 80011a0:	4621      	mov	r1, r4
 80011a2:	bdd0      	pop	{r4, r6, r7, pc}
 80011a4:	3df00000 	.word	0x3df00000
 80011a8:	41f00000 	.word	0x41f00000

080011ac <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch) {
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
	(void) HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, 100);
 80011b4:	1d39      	adds	r1, r7, #4
 80011b6:	2364      	movs	r3, #100	; 0x64
 80011b8:	2201      	movs	r2, #1
 80011ba:	4804      	ldr	r0, [pc, #16]	; (80011cc <__io_putchar+0x20>)
 80011bc:	f002 fdca 	bl	8003d54 <HAL_UART_Transmit>
	return ch;
 80011c0:	687b      	ldr	r3, [r7, #4]
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000254 	.word	0x20000254

080011d0 <deg2rad>:

double deg2rad(double deg) {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	e9c7 0100 	strd	r0, r1, [r7]
	return (deg * pi / 180);
 80011da:	a30b      	add	r3, pc, #44	; (adr r3, 8001208 <deg2rad+0x38>)
 80011dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80011e4:	f7ff f978 	bl	80004d8 <__aeabi_dmul>
 80011e8:	4602      	mov	r2, r0
 80011ea:	460b      	mov	r3, r1
 80011ec:	4610      	mov	r0, r2
 80011ee:	4619      	mov	r1, r3
 80011f0:	f04f 0200 	mov.w	r2, #0
 80011f4:	4b06      	ldr	r3, [pc, #24]	; (8001210 <deg2rad+0x40>)
 80011f6:	f7ff fa99 	bl	800072c <__aeabi_ddiv>
 80011fa:	4602      	mov	r2, r0
 80011fc:	460b      	mov	r3, r1
}
 80011fe:	4610      	mov	r0, r2
 8001200:	4619      	mov	r1, r3
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	54442d18 	.word	0x54442d18
 800120c:	400921fb 	.word	0x400921fb
 8001210:	40668000 	.word	0x40668000
 8001214:	00000000 	.word	0x00000000

08001218 <calc_distance>:

double rad2deg(double rad) {
	return (rad * 180 / pi);
}

double calc_distance(double lat1, double lon1, double lat2, double lon2) {
 8001218:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800121c:	b090      	sub	sp, #64	; 0x40
 800121e:	af00      	add	r7, sp, #0
 8001220:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001224:	e9c7 2300 	strd	r2, r3, [r7]

	double radius = 6371.0;
 8001228:	a373      	add	r3, pc, #460	; (adr r3, 80013f8 <calc_distance+0x1e0>)
 800122a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

	if ((lat1 == lat2) && (lon1 == lon2)) {
 8001232:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001236:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800123a:	f7ff fbb5 	bl	80009a8 <__aeabi_dcmpeq>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d00d      	beq.n	8001260 <calc_distance+0x48>
 8001244:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001248:	e9d7 0100 	ldrd	r0, r1, [r7]
 800124c:	f7ff fbac 	bl	80009a8 <__aeabi_dcmpeq>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d004      	beq.n	8001260 <calc_distance+0x48>
		return 0;
 8001256:	f04f 0200 	mov.w	r2, #0
 800125a:	f04f 0300 	mov.w	r3, #0
 800125e:	e0c4      	b.n	80013ea <calc_distance+0x1d2>
	} else {

		double dLat = deg2rad((lat2 - lat1)) / 2.0;
 8001260:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001264:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001268:	f7fe ff7e 	bl	8000168 <__aeabi_dsub>
 800126c:	4602      	mov	r2, r0
 800126e:	460b      	mov	r3, r1
 8001270:	4610      	mov	r0, r2
 8001272:	4619      	mov	r1, r3
 8001274:	f7ff ffac 	bl	80011d0 <deg2rad>
 8001278:	f04f 0200 	mov.w	r2, #0
 800127c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001280:	f7ff fa54 	bl	800072c <__aeabi_ddiv>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		double dLon = deg2rad((lon2 - lon1)) / 2.0;
 800128c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001290:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001294:	f7fe ff68 	bl	8000168 <__aeabi_dsub>
 8001298:	4602      	mov	r2, r0
 800129a:	460b      	mov	r3, r1
 800129c:	4610      	mov	r0, r2
 800129e:	4619      	mov	r1, r3
 80012a0:	f7ff ff96 	bl	80011d0 <deg2rad>
 80012a4:	f04f 0200 	mov.w	r2, #0
 80012a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012ac:	f7ff fa3e 	bl	800072c <__aeabi_ddiv>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

		lat1 = deg2rad(lat1);
 80012b8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80012bc:	f7ff ff88 	bl	80011d0 <deg2rad>
 80012c0:	e9c7 0102 	strd	r0, r1, [r7, #8]
		lat2 = deg2rad(lat2);
 80012c4:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80012c8:	f7ff ff82 	bl	80011d0 <deg2rad>
 80012cc:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58

		double a = sin(dLat) * sin(dLat)
 80012d0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80012d4:	f009 f9bc 	bl	800a650 <sin>
 80012d8:	4604      	mov	r4, r0
 80012da:	460d      	mov	r5, r1
 80012dc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80012e0:	f009 f9b6 	bl	800a650 <sin>
 80012e4:	4602      	mov	r2, r0
 80012e6:	460b      	mov	r3, r1
 80012e8:	4620      	mov	r0, r4
 80012ea:	4629      	mov	r1, r5
 80012ec:	f7ff f8f4 	bl	80004d8 <__aeabi_dmul>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	4690      	mov	r8, r2
 80012f6:	4699      	mov	r9, r3
				+ sin(dLon) * sin(dLon) * cos(lat1) * cos(lat2);
 80012f8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80012fc:	f009 f9a8 	bl	800a650 <sin>
 8001300:	4604      	mov	r4, r0
 8001302:	460d      	mov	r5, r1
 8001304:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001308:	f009 f9a2 	bl	800a650 <sin>
 800130c:	4602      	mov	r2, r0
 800130e:	460b      	mov	r3, r1
 8001310:	4620      	mov	r0, r4
 8001312:	4629      	mov	r1, r5
 8001314:	f7ff f8e0 	bl	80004d8 <__aeabi_dmul>
 8001318:	4602      	mov	r2, r0
 800131a:	460b      	mov	r3, r1
 800131c:	4614      	mov	r4, r2
 800131e:	461d      	mov	r5, r3
 8001320:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001324:	f009 f94e 	bl	800a5c4 <cos>
 8001328:	4602      	mov	r2, r0
 800132a:	460b      	mov	r3, r1
 800132c:	4620      	mov	r0, r4
 800132e:	4629      	mov	r1, r5
 8001330:	f7ff f8d2 	bl	80004d8 <__aeabi_dmul>
 8001334:	4602      	mov	r2, r0
 8001336:	460b      	mov	r3, r1
 8001338:	4614      	mov	r4, r2
 800133a:	461d      	mov	r5, r3
 800133c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001340:	f009 f940 	bl	800a5c4 <cos>
 8001344:	4602      	mov	r2, r0
 8001346:	460b      	mov	r3, r1
 8001348:	4620      	mov	r0, r4
 800134a:	4629      	mov	r1, r5
 800134c:	f7ff f8c4 	bl	80004d8 <__aeabi_dmul>
 8001350:	4602      	mov	r2, r0
 8001352:	460b      	mov	r3, r1
		double a = sin(dLat) * sin(dLat)
 8001354:	4640      	mov	r0, r8
 8001356:	4649      	mov	r1, r9
 8001358:	f7fe ff08 	bl	800016c <__adddf3>
 800135c:	4602      	mov	r2, r0
 800135e:	460b      	mov	r3, r1
 8001360:	e9c7 2308 	strd	r2, r3, [r7, #32]
		double c = 2 * atan2f(sqrtf(a), sqrtf(1 - a));
 8001364:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001368:	f7ff fbae 	bl	8000ac8 <__aeabi_d2f>
 800136c:	4603      	mov	r3, r0
 800136e:	4618      	mov	r0, r3
 8001370:	f009 f9b6 	bl	800a6e0 <sqrtf>
 8001374:	4604      	mov	r4, r0
 8001376:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800137a:	f04f 0000 	mov.w	r0, #0
 800137e:	4920      	ldr	r1, [pc, #128]	; (8001400 <calc_distance+0x1e8>)
 8001380:	f7fe fef2 	bl	8000168 <__aeabi_dsub>
 8001384:	4602      	mov	r2, r0
 8001386:	460b      	mov	r3, r1
 8001388:	4610      	mov	r0, r2
 800138a:	4619      	mov	r1, r3
 800138c:	f7ff fb9c 	bl	8000ac8 <__aeabi_d2f>
 8001390:	4603      	mov	r3, r0
 8001392:	4618      	mov	r0, r3
 8001394:	f009 f9a4 	bl	800a6e0 <sqrtf>
 8001398:	4603      	mov	r3, r0
 800139a:	4619      	mov	r1, r3
 800139c:	4620      	mov	r0, r4
 800139e:	f009 f99d 	bl	800a6dc <atan2f>
 80013a2:	4603      	mov	r3, r0
 80013a4:	4619      	mov	r1, r3
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff fbe4 	bl	8000b74 <__addsf3>
 80013ac:	4603      	mov	r3, r0
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff f83a 	bl	8000428 <__aeabi_f2d>
 80013b4:	4602      	mov	r2, r0
 80013b6:	460b      	mov	r3, r1
 80013b8:	e9c7 2306 	strd	r2, r3, [r7, #24]
		double dDistance = radius * c;
 80013bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80013c0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80013c4:	f7ff f888 	bl	80004d8 <__aeabi_dmul>
 80013c8:	4602      	mov	r2, r0
 80013ca:	460b      	mov	r3, r1
 80013cc:	e9c7 2304 	strd	r2, r3, [r7, #16]

		dDistance *= 1000.0;
 80013d0:	f04f 0200 	mov.w	r2, #0
 80013d4:	4b0b      	ldr	r3, [pc, #44]	; (8001404 <calc_distance+0x1ec>)
 80013d6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80013da:	f7ff f87d 	bl	80004d8 <__aeabi_dmul>
 80013de:	4602      	mov	r2, r0
 80013e0:	460b      	mov	r3, r1
 80013e2:	e9c7 2304 	strd	r2, r3, [r7, #16]

		return dDistance;
 80013e6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
	 dist = dist * 1.609344;
	 return (dist);
	 }
	 */

}
 80013ea:	4610      	mov	r0, r2
 80013ec:	4619      	mov	r1, r3
 80013ee:	3740      	adds	r7, #64	; 0x40
 80013f0:	46bd      	mov	sp, r7
 80013f2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80013f6:	bf00      	nop
 80013f8:	00000000 	.word	0x00000000
 80013fc:	40b8e300 	.word	0x40b8e300
 8001400:	3ff00000 	.word	0x3ff00000
 8001404:	408f4000 	.word	0x408f4000

08001408 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001408:	b5b0      	push	{r4, r5, r7, lr}
 800140a:	f5ad 6dbc 	sub.w	sp, sp, #1504	; 0x5e0
 800140e:	af04      	add	r7, sp, #16
	/* USER CODE BEGIN 1 */
	static double f_latitude1 = 0.0;
	static double f_longitude1 = 0.0;
	double f_latitude2 = 0.0;
 8001410:	f04f 0200 	mov.w	r2, #0
 8001414:	f04f 0300 	mov.w	r3, #0
 8001418:	f507 61b9 	add.w	r1, r7, #1480	; 0x5c8
 800141c:	e9c1 2300 	strd	r2, r3, [r1]
	double f_longitude2 = 0.0;
 8001420:	f04f 0200 	mov.w	r2, #0
 8001424:	f04f 0300 	mov.w	r3, #0
 8001428:	f507 61b8 	add.w	r1, r7, #1472	; 0x5c0
 800142c:	e9c1 2300 	strd	r2, r3, [r1]

	double distance = 0.0;
 8001430:	f04f 0200 	mov.w	r2, #0
 8001434:	f04f 0300 	mov.w	r3, #0
 8001438:	f507 61b7 	add.w	r1, r7, #1464	; 0x5b8
 800143c:	e9c1 2300 	strd	r2, r3, [r1]
	static double pre_time = 0.0;
	double f_seconds = 0.0;
 8001440:	f04f 0200 	mov.w	r2, #0
 8001444:	f04f 0300 	mov.w	r3, #0
 8001448:	f507 61a9 	add.w	r1, r7, #1352	; 0x548
 800144c:	e9c1 2300 	strd	r2, r3, [r1]
	double time_interval = 0.0;
 8001450:	f04f 0200 	mov.w	r2, #0
 8001454:	f04f 0300 	mov.w	r3, #0
 8001458:	f507 61b6 	add.w	r1, r7, #1456	; 0x5b0
 800145c:	e9c1 2300 	strd	r2, r3, [r1]
	double speed = 0.0;
 8001460:	f04f 0200 	mov.w	r2, #0
 8001464:	f04f 0300 	mov.w	r3, #0
 8001468:	f507 61b5 	add.w	r1, r7, #1448	; 0x5a8
 800146c:	e9c1 2300 	strd	r2, r3, [r1]
	double ground_speed = 0.0;
 8001470:	f04f 0200 	mov.w	r2, #0
 8001474:	f04f 0300 	mov.w	r3, #0
 8001478:	f507 61b4 	add.w	r1, r7, #1440	; 0x5a0
 800147c:	e9c1 2300 	strd	r2, r3, [r1]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001480:	f001 fa48 	bl	8002914 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001484:	f000 fd54 	bl	8001f30 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001488:	f000 fe36 	bl	80020f8 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 800148c:	f000 fde0 	bl	8002050 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8001490:	f000 fe08 	bl	80020a4 <MX_USART2_UART_Init>
	MX_SPI1_Init();
 8001494:	f000 fda6 	bl	8001fe4 <MX_SPI1_Init>

	/* Initialize interrupts */
	MX_NVIC_Init();
 8001498:	f000 fd8f 	bl	8001fba <MX_NVIC_Init>
	/* USER CODE BEGIN 2 */
	u8g2_Setup_ssd1306_128x64_noname_f(&u8g2, U8G2_R0, u8x8_byte_stm32_hw_spi,
 800149c:	4bb6      	ldr	r3, [pc, #728]	; (8001778 <main+0x370>)
 800149e:	4ab7      	ldr	r2, [pc, #732]	; (800177c <main+0x374>)
 80014a0:	49b7      	ldr	r1, [pc, #732]	; (8001780 <main+0x378>)
 80014a2:	48b8      	ldr	r0, [pc, #736]	; (8001784 <main+0x37c>)
 80014a4:	f002 feb4 	bl	8004210 <u8g2_Setup_ssd1306_128x64_noname_f>
			u8x8_stm32_gpio_and_delay);

	u8g2_InitDisplay(&u8g2);
 80014a8:	48b6      	ldr	r0, [pc, #728]	; (8001784 <main+0x37c>)
 80014aa:	f004 fb0c 	bl	8005ac6 <u8x8_InitDisplay>
	u8g2_SetPowerSave(&u8g2, 0);
 80014ae:	2100      	movs	r1, #0
 80014b0:	48b4      	ldr	r0, [pc, #720]	; (8001784 <main+0x37c>)
 80014b2:	f004 fb17 	bl	8005ae4 <u8x8_SetPowerSave>

	//u8g2_SetFont(&u8g2, u8g2_font_5x7_tr);
	u8g2_SetFont(&u8g2, u8g2_font_6x13_mr);
 80014b6:	49b4      	ldr	r1, [pc, #720]	; (8001788 <main+0x380>)
 80014b8:	48b2      	ldr	r0, [pc, #712]	; (8001784 <main+0x37c>)
 80014ba:	f003 fc53 	bl	8004d64 <u8g2_SetFont>

	u8g2_SetDisplayRotation(&u8g2, U8G2_R2);
 80014be:	49b3      	ldr	r1, [pc, #716]	; (800178c <main+0x384>)
 80014c0:	48b0      	ldr	r0, [pc, #704]	; (8001784 <main+0x37c>)
 80014c2:	f003 fec1 	bl	8005248 <u8g2_SetDisplayRotation>

	/* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
	__HAL_UART_ENABLE_IT(&huart2, UART_IT_ERR);
 80014c6:	4bb2      	ldr	r3, [pc, #712]	; (8001790 <main+0x388>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	695a      	ldr	r2, [r3, #20]
 80014cc:	4bb0      	ldr	r3, [pc, #704]	; (8001790 <main+0x388>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f042 0201 	orr.w	r2, r2, #1
 80014d4:	615a      	str	r2, [r3, #20]
	/* Enable the UART Data Register not empty Interrupt */
	__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 80014d6:	4bae      	ldr	r3, [pc, #696]	; (8001790 <main+0x388>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	68da      	ldr	r2, [r3, #12]
 80014dc:	4bac      	ldr	r3, [pc, #688]	; (8001790 <main+0x388>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f042 0220 	orr.w	r2, r2, #32
 80014e4:	60da      	str	r2, [r3, #12]
	rxBufferInit(&uart_rx);
 80014e6:	48ab      	ldr	r0, [pc, #684]	; (8001794 <main+0x38c>)
 80014e8:	f001 f948 	bl	800277c <rxBufferInit>

	printf("this is MAIN code, not WHILE\r\n");
 80014ec:	48aa      	ldr	r0, [pc, #680]	; (8001798 <main+0x390>)
 80014ee:	f005 faa5 	bl	8006a3c <puts>

	sprintf(str_buff, "Hello :)");
 80014f2:	f207 43dc 	addw	r3, r7, #1244	; 0x4dc
 80014f6:	49a9      	ldr	r1, [pc, #676]	; (800179c <main+0x394>)
 80014f8:	4618      	mov	r0, r3
 80014fa:	f005 faab 	bl	8006a54 <siprintf>
	sprintf(str_buff2, "Push the button,");
 80014fe:	f207 43bc 	addw	r3, r7, #1212	; 0x4bc
 8001502:	49a7      	ldr	r1, [pc, #668]	; (80017a0 <main+0x398>)
 8001504:	4618      	mov	r0, r3
 8001506:	f005 faa5 	bl	8006a54 <siprintf>
	sprintf(str_buff3, "See your speed.");
 800150a:	f207 439c 	addw	r3, r7, #1180	; 0x49c
 800150e:	49a5      	ldr	r1, [pc, #660]	; (80017a4 <main+0x39c>)
 8001510:	4618      	mov	r0, r3
 8001512:	f005 fa9f 	bl	8006a54 <siprintf>
	u8g2_FirstPage(&u8g2);
 8001516:	489b      	ldr	r0, [pc, #620]	; (8001784 <main+0x37c>)
 8001518:	f002 fe27 	bl	800416a <u8g2_FirstPage>
	do {

		u8g2_DrawStr(&u8g2, 2, 15, str_buff);
 800151c:	f207 43dc 	addw	r3, r7, #1244	; 0x4dc
 8001520:	220f      	movs	r2, #15
 8001522:	2102      	movs	r1, #2
 8001524:	4897      	ldr	r0, [pc, #604]	; (8001784 <main+0x37c>)
 8001526:	f003 fb7f 	bl	8004c28 <u8g2_DrawStr>
		u8g2_DrawStr(&u8g2, 2, 30, str_buff2);
 800152a:	f207 43bc 	addw	r3, r7, #1212	; 0x4bc
 800152e:	221e      	movs	r2, #30
 8001530:	2102      	movs	r1, #2
 8001532:	4894      	ldr	r0, [pc, #592]	; (8001784 <main+0x37c>)
 8001534:	f003 fb78 	bl	8004c28 <u8g2_DrawStr>
		u8g2_DrawStr(&u8g2, 2, 45, str_buff3);
 8001538:	f207 439c 	addw	r3, r7, #1180	; 0x49c
 800153c:	222d      	movs	r2, #45	; 0x2d
 800153e:	2102      	movs	r1, #2
 8001540:	4890      	ldr	r0, [pc, #576]	; (8001784 <main+0x37c>)
 8001542:	f003 fb71 	bl	8004c28 <u8g2_DrawStr>

	} while (u8g2_NextPage(&u8g2));
 8001546:	488f      	ldr	r0, [pc, #572]	; (8001784 <main+0x37c>)
 8001548:	f002 fe23 	bl	8004192 <u8g2_NextPage>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d1e4      	bne.n	800151c <main+0x114>

	memset(str_buff, 0, sizeof(str_buff));
 8001552:	f207 43dc 	addw	r3, r7, #1244	; 0x4dc
 8001556:	2220      	movs	r2, #32
 8001558:	2100      	movs	r1, #0
 800155a:	4618      	mov	r0, r3
 800155c:	f004 fb8a 	bl	8005c74 <memset>
	memset(str_buff, 0, sizeof(str_buff2));
 8001560:	f207 43dc 	addw	r3, r7, #1244	; 0x4dc
 8001564:	2220      	movs	r2, #32
 8001566:	2100      	movs	r1, #0
 8001568:	4618      	mov	r0, r3
 800156a:	f004 fb83 	bl	8005c74 <memset>
	memset(str_buff, 0, sizeof(str_buff3));
 800156e:	f207 43dc 	addw	r3, r7, #1244	; 0x4dc
 8001572:	2220      	movs	r2, #32
 8001574:	2100      	movs	r1, #0
 8001576:	4618      	mov	r0, r3
 8001578:	f004 fb7c 	bl	8005c74 <memset>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	while (1) {

		sprintf(str_buff, "Speed: %.3f km/h", speed);
 800157c:	f207 40dc 	addw	r0, r7, #1244	; 0x4dc
 8001580:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 8001584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001588:	4987      	ldr	r1, [pc, #540]	; (80017a8 <main+0x3a0>)
 800158a:	f005 fa63 	bl	8006a54 <siprintf>
		sprintf(str_buff2, "Distance: %.3f m", distance);
 800158e:	f207 40bc 	addw	r0, r7, #1212	; 0x4bc
 8001592:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8001596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800159a:	4984      	ldr	r1, [pc, #528]	; (80017ac <main+0x3a4>)
 800159c:	f005 fa5a 	bl	8006a54 <siprintf>
		sprintf(str_buff3, "Time interval: %.2f s", time_interval);
 80015a0:	f207 409c 	addw	r0, r7, #1180	; 0x49c
 80015a4:	f507 63b6 	add.w	r3, r7, #1456	; 0x5b0
 80015a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ac:	4980      	ldr	r1, [pc, #512]	; (80017b0 <main+0x3a8>)
 80015ae:	f005 fa51 	bl	8006a54 <siprintf>
		sprintf(str_buff4, "Gnd Speed: %.3f km/h", ground_speed);
 80015b2:	f207 407c 	addw	r0, r7, #1148	; 0x47c
 80015b6:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
 80015ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015be:	497d      	ldr	r1, [pc, #500]	; (80017b4 <main+0x3ac>)
 80015c0:	f005 fa48 	bl	8006a54 <siprintf>
	//	sprintf(str_buff, "Latitude: %.6f", f_latitude2);
	//	sprintf(str_buff3, "Longitude: %.6f", f_longitude2);


		u8g2_FirstPage(&u8g2);
 80015c4:	486f      	ldr	r0, [pc, #444]	; (8001784 <main+0x37c>)
 80015c6:	f002 fdd0 	bl	800416a <u8g2_FirstPage>
		do {

			u8g2_DrawStr(&u8g2, 2, 15, str_buff);
 80015ca:	f207 43dc 	addw	r3, r7, #1244	; 0x4dc
 80015ce:	220f      	movs	r2, #15
 80015d0:	2102      	movs	r1, #2
 80015d2:	486c      	ldr	r0, [pc, #432]	; (8001784 <main+0x37c>)
 80015d4:	f003 fb28 	bl	8004c28 <u8g2_DrawStr>
			u8g2_DrawStr(&u8g2, 2, 30, str_buff2);
 80015d8:	f207 43bc 	addw	r3, r7, #1212	; 0x4bc
 80015dc:	221e      	movs	r2, #30
 80015de:	2102      	movs	r1, #2
 80015e0:	4868      	ldr	r0, [pc, #416]	; (8001784 <main+0x37c>)
 80015e2:	f003 fb21 	bl	8004c28 <u8g2_DrawStr>
			u8g2_DrawStr(&u8g2, 2, 45, str_buff3);
 80015e6:	f207 439c 	addw	r3, r7, #1180	; 0x49c
 80015ea:	222d      	movs	r2, #45	; 0x2d
 80015ec:	2102      	movs	r1, #2
 80015ee:	4865      	ldr	r0, [pc, #404]	; (8001784 <main+0x37c>)
 80015f0:	f003 fb1a 	bl	8004c28 <u8g2_DrawStr>
			u8g2_DrawStr(&u8g2, 2, 60, str_buff4);
 80015f4:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 80015f8:	223c      	movs	r2, #60	; 0x3c
 80015fa:	2102      	movs	r1, #2
 80015fc:	4861      	ldr	r0, [pc, #388]	; (8001784 <main+0x37c>)
 80015fe:	f003 fb13 	bl	8004c28 <u8g2_DrawStr>

		} while (u8g2_NextPage(&u8g2));
 8001602:	4860      	ldr	r0, [pc, #384]	; (8001784 <main+0x37c>)
 8001604:	f002 fdc5 	bl	8004192 <u8g2_NextPage>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d1dd      	bne.n	80015ca <main+0x1c2>

		memset(str_buff, 0, sizeof(str_buff));
 800160e:	f207 43dc 	addw	r3, r7, #1244	; 0x4dc
 8001612:	2220      	movs	r2, #32
 8001614:	2100      	movs	r1, #0
 8001616:	4618      	mov	r0, r3
 8001618:	f004 fb2c 	bl	8005c74 <memset>
		memset(str_buff, 0, sizeof(str_buff2));
 800161c:	f207 43dc 	addw	r3, r7, #1244	; 0x4dc
 8001620:	2220      	movs	r2, #32
 8001622:	2100      	movs	r1, #0
 8001624:	4618      	mov	r0, r3
 8001626:	f004 fb25 	bl	8005c74 <memset>
		memset(str_buff, 0, sizeof(str_buff3));
 800162a:	f207 43dc 	addw	r3, r7, #1244	; 0x4dc
 800162e:	2220      	movs	r2, #32
 8001630:	2100      	movs	r1, #0
 8001632:	4618      	mov	r0, r3
 8001634:	f004 fb1e 	bl	8005c74 <memset>
		memset(str_buff, 0, sizeof(str_buff4));
 8001638:	f207 43dc 	addw	r3, r7, #1244	; 0x4dc
 800163c:	2220      	movs	r2, #32
 800163e:	2100      	movs	r1, #0
 8001640:	4618      	mov	r0, r3
 8001642:	f004 fb17 	bl	8005c74 <memset>

		int i = 0;
 8001646:	2300      	movs	r3, #0
 8001648:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
		uint32_t tick = HAL_GetTick();
 800164c:	f001 f9ba 	bl	80029c4 <HAL_GetTick>
 8001650:	f8c7 0544 	str.w	r0, [r7, #1348]	; 0x544
		while ((HAL_GetTick() - tick) < 1000) {
 8001654:	e01d      	b.n	8001692 <main+0x28a>
			if (uart_available(&uart_rx)) {
 8001656:	484f      	ldr	r0, [pc, #316]	; (8001794 <main+0x38c>)
 8001658:	f001 f8f7 	bl	800284a <uart_available>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d017      	beq.n	8001692 <main+0x28a>
				int ch = pop(&uart_rx);
 8001662:	484c      	ldr	r0, [pc, #304]	; (8001794 <main+0x38c>)
 8001664:	f001 f8c7 	bl	80027f6 <pop>
 8001668:	4603      	mov	r3, r0
 800166a:	f8c7 34fc 	str.w	r3, [r7, #1276]	; 0x4fc
				if (ch != -1) {
 800166e:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	; 0x4fc
 8001672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001676:	d00c      	beq.n	8001692 <main+0x28a>
					buff[i++] = ch;
 8001678:	f8d7 359c 	ldr.w	r3, [r7, #1436]	; 0x59c
 800167c:	1c5a      	adds	r2, r3, #1
 800167e:	f8c7 259c 	str.w	r2, [r7, #1436]	; 0x59c
 8001682:	f8d7 24fc 	ldr.w	r2, [r7, #1276]	; 0x4fc
 8001686:	b2d1      	uxtb	r1, r2
 8001688:	f507 62ba 	add.w	r2, r7, #1488	; 0x5d0
 800168c:	f2a2 5254 	subw	r2, r2, #1364	; 0x554
 8001690:	54d1      	strb	r1, [r2, r3]
		while ((HAL_GetTick() - tick) < 1000) {
 8001692:	f001 f997 	bl	80029c4 <HAL_GetTick>
 8001696:	4602      	mov	r2, r0
 8001698:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016a2:	d3d8      	bcc.n	8001656 <main+0x24e>
		}
#ifndef OLED
	HAL_UART_Transmit(&huart1, (uint8_t*) buff, strlen(buff), 500);
#endif

		int k = 0;
 80016a4:	2300      	movs	r3, #0
 80016a6:	f8c7 3598 	str.w	r3, [r7, #1432]	; 0x598
		char *ptr;
		ptr = buff;
 80016aa:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80016ae:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594

		while (((*ptr) != 'R') && (k < strlen(buff))) {
 80016b2:	e009      	b.n	80016c8 <main+0x2c0>
			k++;
 80016b4:	f8d7 3598 	ldr.w	r3, [r7, #1432]	; 0x598
 80016b8:	3301      	adds	r3, #1
 80016ba:	f8c7 3598 	str.w	r3, [r7, #1432]	; 0x598
			ptr++;
 80016be:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 80016c2:	3301      	adds	r3, #1
 80016c4:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
		while (((*ptr) != 'R') && (k < strlen(buff))) {
 80016c8:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	2b52      	cmp	r3, #82	; 0x52
 80016d0:	d009      	beq.n	80016e6 <main+0x2de>
 80016d2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7fe fd3a 	bl	8000150 <strlen>
 80016dc:	4602      	mov	r2, r0
 80016de:	f8d7 3598 	ldr.w	r3, [r7, #1432]	; 0x598
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d8e6      	bhi.n	80016b4 <main+0x2ac>
		}

		if ((*ptr) == 'R') {
 80016e6:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	2b52      	cmp	r3, #82	; 0x52
 80016ee:	f47f af45 	bne.w	800157c <main+0x174>

			if ((*(ptr + 1)) == 'M' && (*(ptr + 2)) == 'C') {
 80016f2:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 80016f6:	3301      	adds	r3, #1
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	2b4d      	cmp	r3, #77	; 0x4d
 80016fc:	f040 83d2 	bne.w	8001ea4 <main+0xa9c>
 8001700:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 8001704:	3302      	adds	r3, #2
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	2b43      	cmp	r3, #67	; 0x43
 800170a:	f040 83cb 	bne.w	8001ea4 <main+0xa9c>

				char *ptr2 = type;
 800170e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001712:	f8c7 3590 	str.w	r3, [r7, #1424]	; 0x590
				int n2 = 0;
 8001716:	2300      	movs	r3, #0
 8001718:	f8c7 358c 	str.w	r3, [r7, #1420]	; 0x58c
				while ((*ptr) != ',') {
 800171c:	e014      	b.n	8001748 <main+0x340>
 800171e:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 8001722:	781a      	ldrb	r2, [r3, #0]
					memcpy(ptr2, ptr, 1);
 8001724:	f8d7 3590 	ldr.w	r3, [r7, #1424]	; 0x590
 8001728:	701a      	strb	r2, [r3, #0]
					ptr2++;
 800172a:	f8d7 3590 	ldr.w	r3, [r7, #1424]	; 0x590
 800172e:	3301      	adds	r3, #1
 8001730:	f8c7 3590 	str.w	r3, [r7, #1424]	; 0x590
					ptr++;
 8001734:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 8001738:	3301      	adds	r3, #1
 800173a:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
					n2++;
 800173e:	f8d7 358c 	ldr.w	r3, [r7, #1420]	; 0x58c
 8001742:	3301      	adds	r3, #1
 8001744:	f8c7 358c 	str.w	r3, [r7, #1420]	; 0x58c
				while ((*ptr) != ',') {
 8001748:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	2b2c      	cmp	r3, #44	; 0x2c
 8001750:	d1e5      	bne.n	800171e <main+0x316>
				}

				memcpy(ptr2, "\0", 1);
 8001752:	2201      	movs	r2, #1
 8001754:	4918      	ldr	r1, [pc, #96]	; (80017b8 <main+0x3b0>)
 8001756:	f8d7 0590 	ldr.w	r0, [r7, #1424]	; 0x590
 800175a:	f004 fa7d 	bl	8005c58 <memcpy>
			HAL_UART_Transmit(&huart1, (uint8_t*) type, n2 + 1, 500);

			HAL_UART_Transmit(&huart1, (uint8_t*) "\r", 1, 500);
			HAL_UART_Transmit(&huart1, (uint8_t*) "\n", 1, 500);
#endif
				ptr++;
 800175e:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 8001762:	3301      	adds	r3, #1
 8001764:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594

				char *ptr3 = time;
 8001768:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800176c:	f8c7 3588 	str.w	r3, [r7, #1416]	; 0x588

				int n3 = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
				while ((*ptr) != ',') {
 8001776:	e036      	b.n	80017e6 <main+0x3de>
 8001778:	080025c1 	.word	0x080025c1
 800177c:	080026b9 	.word	0x080026b9
 8001780:	0800c058 	.word	0x0800c058
 8001784:	200002e4 	.word	0x200002e4
 8001788:	0800bb40 	.word	0x0800bb40
 800178c:	0800c064 	.word	0x0800c064
 8001790:	2000029c 	.word	0x2000029c
 8001794:	20000394 	.word	0x20000394
 8001798:	0800ba68 	.word	0x0800ba68
 800179c:	0800ba88 	.word	0x0800ba88
 80017a0:	0800ba94 	.word	0x0800ba94
 80017a4:	0800baa8 	.word	0x0800baa8
 80017a8:	0800bab8 	.word	0x0800bab8
 80017ac:	0800bacc 	.word	0x0800bacc
 80017b0:	0800bae0 	.word	0x0800bae0
 80017b4:	0800baf8 	.word	0x0800baf8
 80017b8:	0800bb10 	.word	0x0800bb10
 80017bc:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 80017c0:	781a      	ldrb	r2, [r3, #0]
					memcpy(ptr3, ptr, 1);
 80017c2:	f8d7 3588 	ldr.w	r3, [r7, #1416]	; 0x588
 80017c6:	701a      	strb	r2, [r3, #0]

					ptr3++;
 80017c8:	f8d7 3588 	ldr.w	r3, [r7, #1416]	; 0x588
 80017cc:	3301      	adds	r3, #1
 80017ce:	f8c7 3588 	str.w	r3, [r7, #1416]	; 0x588
					ptr++;
 80017d2:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 80017d6:	3301      	adds	r3, #1
 80017d8:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
					n3++;
 80017dc:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 80017e0:	3301      	adds	r3, #1
 80017e2:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
				while ((*ptr) != ',') {
 80017e6:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	2b2c      	cmp	r3, #44	; 0x2c
 80017ee:	d1e5      	bne.n	80017bc <main+0x3b4>
				}

				memcpy(ptr3, "\0", 1);
 80017f0:	2201      	movs	r2, #1
 80017f2:	49c0      	ldr	r1, [pc, #768]	; (8001af4 <main+0x6ec>)
 80017f4:	f8d7 0588 	ldr.w	r0, [r7, #1416]	; 0x588
 80017f8:	f004 fa2e 	bl	8005c58 <memcpy>

				if (n3 == 9) {
 80017fc:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 8001800:	2b09      	cmp	r3, #9
 8001802:	f040 80ae 	bne.w	8001962 <main+0x55a>
					char hour[5] = { 0, };
 8001806:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 800180a:	f5a3 63b7 	sub.w	r3, r3, #1464	; 0x5b8
 800180e:	2200      	movs	r2, #0
 8001810:	601a      	str	r2, [r3, #0]
 8001812:	2200      	movs	r2, #0
 8001814:	711a      	strb	r2, [r3, #4]
					char minute[5] = { 0, };
 8001816:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 800181a:	f5a3 63b8 	sub.w	r3, r3, #1472	; 0x5c0
 800181e:	2200      	movs	r2, #0
 8001820:	601a      	str	r2, [r3, #0]
 8001822:	2200      	movs	r2, #0
 8001824:	711a      	strb	r2, [r3, #4]
					char second[10] = { 0, };
 8001826:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 800182a:	f2a3 53cc 	subw	r3, r3, #1484	; 0x5cc
 800182e:	2200      	movs	r2, #0
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	3304      	adds	r3, #4
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	809a      	strh	r2, [r3, #4]
 800183a:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 800183e:	f2a3 5374 	subw	r3, r3, #1396	; 0x574
 8001842:	881a      	ldrh	r2, [r3, #0]

					memcpy(hour, time, 2);
 8001844:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8001848:	f5a3 63b7 	sub.w	r3, r3, #1464	; 0x5b8
 800184c:	801a      	strh	r2, [r3, #0]
					memcpy(&hour[2], "\0", 1);
 800184e:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8001852:	f5a3 63b7 	sub.w	r3, r3, #1464	; 0x5b8
 8001856:	2200      	movs	r2, #0
 8001858:	709a      	strb	r2, [r3, #2]
 800185a:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 800185e:	f2a3 5374 	subw	r3, r3, #1396	; 0x574
 8001862:	885a      	ldrh	r2, [r3, #2]

					memcpy(minute, &time[2], 2);
 8001864:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8001868:	f5a3 63b8 	sub.w	r3, r3, #1472	; 0x5c0
 800186c:	801a      	strh	r2, [r3, #0]
					memcpy(&minute[2], "\0", 1);
 800186e:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8001872:	f5a3 63b8 	sub.w	r3, r3, #1472	; 0x5c0
 8001876:	2200      	movs	r2, #0
 8001878:	709a      	strb	r2, [r3, #2]

					memcpy(second, &time[4], 5);
 800187a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800187e:	1d19      	adds	r1, r3, #4
 8001880:	1d3b      	adds	r3, r7, #4
 8001882:	2205      	movs	r2, #5
 8001884:	4618      	mov	r0, r3
 8001886:	f004 f9e7 	bl	8005c58 <memcpy>
					memcpy(&second[5], "\0", 1);
 800188a:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 800188e:	f2a3 53cc 	subw	r3, r3, #1484	; 0x5cc
 8001892:	2200      	movs	r2, #0
 8001894:	715a      	strb	r2, [r3, #5]

					f_seconds = (atof(hour) * 60.0 * 60.0)
 8001896:	f107 0318 	add.w	r3, r7, #24
 800189a:	4618      	mov	r0, r3
 800189c:	f004 f9af 	bl	8005bfe <atof>
 80018a0:	f04f 0200 	mov.w	r2, #0
 80018a4:	4b94      	ldr	r3, [pc, #592]	; (8001af8 <main+0x6f0>)
 80018a6:	f7fe fe17 	bl	80004d8 <__aeabi_dmul>
 80018aa:	4602      	mov	r2, r0
 80018ac:	460b      	mov	r3, r1
 80018ae:	4610      	mov	r0, r2
 80018b0:	4619      	mov	r1, r3
 80018b2:	f04f 0200 	mov.w	r2, #0
 80018b6:	4b90      	ldr	r3, [pc, #576]	; (8001af8 <main+0x6f0>)
 80018b8:	f7fe fe0e 	bl	80004d8 <__aeabi_dmul>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	4614      	mov	r4, r2
 80018c2:	461d      	mov	r5, r3
							+ (atof(minute) * 60.0) + (atof(second));
 80018c4:	f107 0310 	add.w	r3, r7, #16
 80018c8:	4618      	mov	r0, r3
 80018ca:	f004 f998 	bl	8005bfe <atof>
 80018ce:	f04f 0200 	mov.w	r2, #0
 80018d2:	4b89      	ldr	r3, [pc, #548]	; (8001af8 <main+0x6f0>)
 80018d4:	f7fe fe00 	bl	80004d8 <__aeabi_dmul>
 80018d8:	4602      	mov	r2, r0
 80018da:	460b      	mov	r3, r1
 80018dc:	4620      	mov	r0, r4
 80018de:	4629      	mov	r1, r5
 80018e0:	f7fe fc44 	bl	800016c <__adddf3>
 80018e4:	4602      	mov	r2, r0
 80018e6:	460b      	mov	r3, r1
 80018e8:	4614      	mov	r4, r2
 80018ea:	461d      	mov	r5, r3
 80018ec:	1d3b      	adds	r3, r7, #4
 80018ee:	4618      	mov	r0, r3
 80018f0:	f004 f985 	bl	8005bfe <atof>
 80018f4:	4602      	mov	r2, r0
 80018f6:	460b      	mov	r3, r1
					f_seconds = (atof(hour) * 60.0 * 60.0)
 80018f8:	4620      	mov	r0, r4
 80018fa:	4629      	mov	r1, r5
 80018fc:	f7fe fc36 	bl	800016c <__adddf3>
 8001900:	4602      	mov	r2, r0
 8001902:	460b      	mov	r3, r1
 8001904:	f507 61a9 	add.w	r1, r7, #1352	; 0x548
 8001908:	e9c1 2300 	strd	r2, r3, [r1]
				printf("pre_time : %.2f\r\n", pre_time);

				printf("f_seconds : %.2f\r\n", f_seconds);
#endif

					if (pre_time == 0) {
 800190c:	4b7b      	ldr	r3, [pc, #492]	; (8001afc <main+0x6f4>)
 800190e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001912:	f04f 0200 	mov.w	r2, #0
 8001916:	f04f 0300 	mov.w	r3, #0
 800191a:	f7ff f845 	bl	80009a8 <__aeabi_dcmpeq>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d008      	beq.n	8001936 <main+0x52e>
						time_interval = 0.0;
 8001924:	f04f 0200 	mov.w	r2, #0
 8001928:	f04f 0300 	mov.w	r3, #0
 800192c:	f507 61b6 	add.w	r1, r7, #1456	; 0x5b0
 8001930:	e9c1 2300 	strd	r2, r3, [r1]
 8001934:	e00e      	b.n	8001954 <main+0x54c>
					} else {
						time_interval = f_seconds - pre_time;
 8001936:	4b71      	ldr	r3, [pc, #452]	; (8001afc <main+0x6f4>)
 8001938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800193c:	f507 61a9 	add.w	r1, r7, #1352	; 0x548
 8001940:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001944:	f7fe fc10 	bl	8000168 <__aeabi_dsub>
 8001948:	4602      	mov	r2, r0
 800194a:	460b      	mov	r3, r1
 800194c:	f507 61b6 	add.w	r1, r7, #1456	; 0x5b0
 8001950:	e9c1 2300 	strd	r2, r3, [r1]

#ifndef OLED
				printf("time_interval : %.2f\r\n", time_interval);
#endif

					pre_time = f_seconds;
 8001954:	4969      	ldr	r1, [pc, #420]	; (8001afc <main+0x6f4>)
 8001956:	f507 63a9 	add.w	r3, r7, #1352	; 0x548
 800195a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800195e:	e9c1 2300 	strd	r2, r3, [r1]

			HAL_UART_Transmit(&huart1, (uint8_t*) "\r", 1, 500);
			HAL_UART_Transmit(&huart1, (uint8_t*) "\n", 1, 500);
#endif

				ptr++;
 8001962:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 8001966:	3301      	adds	r3, #1
 8001968:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594

				char *ptr4 = valid;
 800196c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001970:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580

				int n4 = 0;
 8001974:	2300      	movs	r3, #0
 8001976:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
				while ((*ptr) != ',') {
 800197a:	e014      	b.n	80019a6 <main+0x59e>
 800197c:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 8001980:	781a      	ldrb	r2, [r3, #0]
					memcpy(ptr4, ptr, 1);
 8001982:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 8001986:	701a      	strb	r2, [r3, #0]
					ptr4++;
 8001988:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 800198c:	3301      	adds	r3, #1
 800198e:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
					ptr++;
 8001992:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 8001996:	3301      	adds	r3, #1
 8001998:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
					n4++;
 800199c:	f8d7 357c 	ldr.w	r3, [r7, #1404]	; 0x57c
 80019a0:	3301      	adds	r3, #1
 80019a2:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
				while ((*ptr) != ',') {
 80019a6:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	2b2c      	cmp	r3, #44	; 0x2c
 80019ae:	d1e5      	bne.n	800197c <main+0x574>
				}

				memcpy(ptr4, "\0", 1);
 80019b0:	2201      	movs	r2, #1
 80019b2:	4950      	ldr	r1, [pc, #320]	; (8001af4 <main+0x6ec>)
 80019b4:	f8d7 0580 	ldr.w	r0, [r7, #1408]	; 0x580
 80019b8:	f004 f94e 	bl	8005c58 <memcpy>
			HAL_UART_Transmit(&huart1, (uint8_t*) valid, n4 + 1, 500);

			printf("\r\n");
#endif

				ptr++;
 80019bc:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 80019c0:	3301      	adds	r3, #1
 80019c2:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594

				char *ptr5 = latitude;
 80019c6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80019ca:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578

				int n5 = 0;
 80019ce:	2300      	movs	r3, #0
 80019d0:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
				while ((*ptr) != ',') {
 80019d4:	e014      	b.n	8001a00 <main+0x5f8>
 80019d6:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 80019da:	781a      	ldrb	r2, [r3, #0]
					memcpy(ptr5, ptr, 1);
 80019dc:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 80019e0:	701a      	strb	r2, [r3, #0]

					ptr5++;
 80019e2:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 80019e6:	3301      	adds	r3, #1
 80019e8:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
					ptr++;
 80019ec:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 80019f0:	3301      	adds	r3, #1
 80019f2:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
					n5++;
 80019f6:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 80019fa:	3301      	adds	r3, #1
 80019fc:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
				while ((*ptr) != ',') {
 8001a00:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	2b2c      	cmp	r3, #44	; 0x2c
 8001a08:	d1e5      	bne.n	80019d6 <main+0x5ce>
				}

				memcpy(ptr5, "\0", 1);
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	4939      	ldr	r1, [pc, #228]	; (8001af4 <main+0x6ec>)
 8001a0e:	f8d7 0578 	ldr.w	r0, [r7, #1400]	; 0x578
 8001a12:	f004 f921 	bl	8005c58 <memcpy>

				if (n5 == 10) {
 8001a16:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8001a1a:	2b0a      	cmp	r3, #10
 8001a1c:	d15c      	bne.n	8001ad8 <main+0x6d0>
					double f_latitude = atof(latitude);
 8001a1e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a22:	4618      	mov	r0, r3
 8001a24:	f004 f8eb 	bl	8005bfe <atof>
 8001a28:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8001a2c:	e9c3 0100 	strd	r0, r1, [r3]
					if (f_latitude > 0) {
 8001a30:	f04f 0200 	mov.w	r2, #0
 8001a34:	f04f 0300 	mov.w	r3, #0
 8001a38:	f507 61a7 	add.w	r1, r7, #1336	; 0x538
 8001a3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a40:	f7fe ffda 	bl	80009f8 <__aeabi_dcmpgt>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d046      	beq.n	8001ad8 <main+0x6d0>
						int degree_latitude = ((int)f_latitude / 100);
 8001a4a:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8001a4e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a52:	f7fe fff1 	bl	8000a38 <__aeabi_d2iz>
 8001a56:	4603      	mov	r3, r0
 8001a58:	4a29      	ldr	r2, [pc, #164]	; (8001b00 <main+0x6f8>)
 8001a5a:	fb82 1203 	smull	r1, r2, r2, r3
 8001a5e:	1152      	asrs	r2, r2, #5
 8001a60:	17db      	asrs	r3, r3, #31
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534

						double minute_latitude = f_latitude
								- ((double)(degree_latitude) * 100.0);
 8001a68:	f8d7 0534 	ldr.w	r0, [r7, #1332]	; 0x534
 8001a6c:	f7fe fcca 	bl	8000404 <__aeabi_i2d>
 8001a70:	f04f 0200 	mov.w	r2, #0
 8001a74:	4b23      	ldr	r3, [pc, #140]	; (8001b04 <main+0x6fc>)
 8001a76:	f7fe fd2f 	bl	80004d8 <__aeabi_dmul>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	460b      	mov	r3, r1
						double minute_latitude = f_latitude
 8001a7e:	f507 61a7 	add.w	r1, r7, #1336	; 0x538
 8001a82:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a86:	f7fe fb6f 	bl	8000168 <__aeabi_dsub>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	f507 61a5 	add.w	r1, r7, #1320	; 0x528
 8001a92:	e9c1 2300 	strd	r2, r3, [r1]
						double minute2degree_latitude = minute_latitude
 8001a96:	f04f 0200 	mov.w	r2, #0
 8001a9a:	4b17      	ldr	r3, [pc, #92]	; (8001af8 <main+0x6f0>)
 8001a9c:	f507 61a5 	add.w	r1, r7, #1320	; 0x528
 8001aa0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001aa4:	f7fe fe42 	bl	800072c <__aeabi_ddiv>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	460b      	mov	r3, r1
 8001aac:	f507 61a4 	add.w	r1, r7, #1312	; 0x520
 8001ab0:	e9c1 2300 	strd	r2, r3, [r1]
								/ 60.000;
						f_latitude2 = degree_latitude + minute2degree_latitude;
 8001ab4:	f8d7 0534 	ldr.w	r0, [r7, #1332]	; 0x534
 8001ab8:	f7fe fca4 	bl	8000404 <__aeabi_i2d>
 8001abc:	4602      	mov	r2, r0
 8001abe:	460b      	mov	r3, r1
 8001ac0:	f507 61a4 	add.w	r1, r7, #1312	; 0x520
 8001ac4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001ac8:	f7fe fb50 	bl	800016c <__adddf3>
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	f507 61b9 	add.w	r1, r7, #1480	; 0x5c8
 8001ad4:	e9c1 2300 	strd	r2, r3, [r1]
					}
				}

				//HAL_UART_Transmit(&huart1, (uint8_t*)latitude, n5+1, 500);

				ptr++;
 8001ad8:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 8001adc:	3301      	adds	r3, #1
 8001ade:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594

				char *ptr6 = NS;
 8001ae2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001ae6:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570

				int n6 = 0;
 8001aea:	2300      	movs	r3, #0
 8001aec:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
				while ((*ptr) != ',') {
 8001af0:	e01f      	b.n	8001b32 <main+0x72a>
 8001af2:	bf00      	nop
 8001af4:	0800bb10 	.word	0x0800bb10
 8001af8:	404e0000 	.word	0x404e0000
 8001afc:	20000378 	.word	0x20000378
 8001b00:	51eb851f 	.word	0x51eb851f
 8001b04:	40590000 	.word	0x40590000
 8001b08:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 8001b0c:	781a      	ldrb	r2, [r3, #0]
					memcpy(ptr6, ptr, 1);
 8001b0e:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8001b12:	701a      	strb	r2, [r3, #0]
					ptr6++;
 8001b14:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8001b18:	3301      	adds	r3, #1
 8001b1a:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
					ptr++;
 8001b1e:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 8001b22:	3301      	adds	r3, #1
 8001b24:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
					n6++;
 8001b28:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
				while ((*ptr) != ',') {
 8001b32:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	2b2c      	cmp	r3, #44	; 0x2c
 8001b3a:	d1e5      	bne.n	8001b08 <main+0x700>
				}

				memcpy(ptr6, "\0", 1);
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	49c2      	ldr	r1, [pc, #776]	; (8001e48 <main+0xa40>)
 8001b40:	f8d7 0570 	ldr.w	r0, [r7, #1392]	; 0x570
 8001b44:	f004 f888 	bl	8005c58 <memcpy>
			HAL_UART_Transmit(&huart1, (uint8_t*) NS, n6 + 1, 500);

			printf("\r\n");
#endif

				ptr++;
 8001b48:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594

				char *ptr7 = longitude;
 8001b52:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b56:	f8c7 3568 	str.w	r3, [r7, #1384]	; 0x568

				int n7 = 0;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
				while ((*ptr) != ',') {
 8001b60:	e014      	b.n	8001b8c <main+0x784>
 8001b62:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 8001b66:	781a      	ldrb	r2, [r3, #0]
					memcpy(ptr7, ptr, 1);
 8001b68:	f8d7 3568 	ldr.w	r3, [r7, #1384]	; 0x568
 8001b6c:	701a      	strb	r2, [r3, #0]
					ptr7++;
 8001b6e:	f8d7 3568 	ldr.w	r3, [r7, #1384]	; 0x568
 8001b72:	3301      	adds	r3, #1
 8001b74:	f8c7 3568 	str.w	r3, [r7, #1384]	; 0x568
					ptr++;
 8001b78:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
					n7++;
 8001b82:	f8d7 3564 	ldr.w	r3, [r7, #1380]	; 0x564
 8001b86:	3301      	adds	r3, #1
 8001b88:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
				while ((*ptr) != ',') {
 8001b8c:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	2b2c      	cmp	r3, #44	; 0x2c
 8001b94:	d1e5      	bne.n	8001b62 <main+0x75a>
				}

				memcpy(ptr7, "\0", 1);
 8001b96:	2201      	movs	r2, #1
 8001b98:	49ab      	ldr	r1, [pc, #684]	; (8001e48 <main+0xa40>)
 8001b9a:	f8d7 0568 	ldr.w	r0, [r7, #1384]	; 0x568
 8001b9e:	f004 f85b 	bl	8005c58 <memcpy>

				if (n7 == 11) {
 8001ba2:	f8d7 3564 	ldr.w	r3, [r7, #1380]	; 0x564
 8001ba6:	2b0b      	cmp	r3, #11
 8001ba8:	d15c      	bne.n	8001c64 <main+0x85c>
					double f_longitude = atof(longitude);
 8001baa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f004 f825 	bl	8005bfe <atof>
 8001bb4:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 8001bb8:	e9c3 0100 	strd	r0, r1, [r3]
					if (f_longitude > 0) {
 8001bbc:	f04f 0200 	mov.w	r2, #0
 8001bc0:	f04f 0300 	mov.w	r3, #0
 8001bc4:	f507 61a3 	add.w	r1, r7, #1304	; 0x518
 8001bc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001bcc:	f7fe ff14 	bl	80009f8 <__aeabi_dcmpgt>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d046      	beq.n	8001c64 <main+0x85c>
						int degree_longitude = ((int)f_longitude / 100);
 8001bd6:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 8001bda:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bde:	f7fe ff2b 	bl	8000a38 <__aeabi_d2iz>
 8001be2:	4603      	mov	r3, r0
 8001be4:	4a99      	ldr	r2, [pc, #612]	; (8001e4c <main+0xa44>)
 8001be6:	fb82 1203 	smull	r1, r2, r2, r3
 8001bea:	1152      	asrs	r2, r2, #5
 8001bec:	17db      	asrs	r3, r3, #31
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
						double minute_longitude = f_longitude
								- ((double)(degree_longitude) * 100.0);
 8001bf4:	f8d7 0514 	ldr.w	r0, [r7, #1300]	; 0x514
 8001bf8:	f7fe fc04 	bl	8000404 <__aeabi_i2d>
 8001bfc:	f04f 0200 	mov.w	r2, #0
 8001c00:	4b93      	ldr	r3, [pc, #588]	; (8001e50 <main+0xa48>)
 8001c02:	f7fe fc69 	bl	80004d8 <__aeabi_dmul>
 8001c06:	4602      	mov	r2, r0
 8001c08:	460b      	mov	r3, r1
						double minute_longitude = f_longitude
 8001c0a:	f507 61a3 	add.w	r1, r7, #1304	; 0x518
 8001c0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001c12:	f7fe faa9 	bl	8000168 <__aeabi_dsub>
 8001c16:	4602      	mov	r2, r0
 8001c18:	460b      	mov	r3, r1
 8001c1a:	f507 61a1 	add.w	r1, r7, #1288	; 0x508
 8001c1e:	e9c1 2300 	strd	r2, r3, [r1]
						double minute2degree_longitude = minute_longitude
 8001c22:	f04f 0200 	mov.w	r2, #0
 8001c26:	4b8b      	ldr	r3, [pc, #556]	; (8001e54 <main+0xa4c>)
 8001c28:	f507 61a1 	add.w	r1, r7, #1288	; 0x508
 8001c2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001c30:	f7fe fd7c 	bl	800072c <__aeabi_ddiv>
 8001c34:	4602      	mov	r2, r0
 8001c36:	460b      	mov	r3, r1
 8001c38:	f507 61a0 	add.w	r1, r7, #1280	; 0x500
 8001c3c:	e9c1 2300 	strd	r2, r3, [r1]
								/ 60.0;
						f_longitude2 = degree_longitude
								+ minute2degree_longitude;
 8001c40:	f8d7 0514 	ldr.w	r0, [r7, #1300]	; 0x514
 8001c44:	f7fe fbde 	bl	8000404 <__aeabi_i2d>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	460b      	mov	r3, r1
						f_longitude2 = degree_longitude
 8001c4c:	f507 61a0 	add.w	r1, r7, #1280	; 0x500
 8001c50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001c54:	f7fe fa8a 	bl	800016c <__adddf3>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	f507 61b8 	add.w	r1, r7, #1472	; 0x5c0
 8001c60:	e9c1 2300 	strd	r2, r3, [r1]
					}
				}

				//HAL_UART_Transmit(&huart1, (uint8_t*)longitude, n7+1, 500);

				ptr++;
 8001c64:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 8001c68:	3301      	adds	r3, #1
 8001c6a:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594

				char *ptr8 = EW;
 8001c6e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c72:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560

				int n8 = 0;
 8001c76:	2300      	movs	r3, #0
 8001c78:	f8c7 355c 	str.w	r3, [r7, #1372]	; 0x55c
				while ((*ptr) != ',') {
 8001c7c:	e014      	b.n	8001ca8 <main+0x8a0>
 8001c7e:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 8001c82:	781a      	ldrb	r2, [r3, #0]
					memcpy(ptr8, ptr, 1);
 8001c84:	f8d7 3560 	ldr.w	r3, [r7, #1376]	; 0x560
 8001c88:	701a      	strb	r2, [r3, #0]
					ptr8++;
 8001c8a:	f8d7 3560 	ldr.w	r3, [r7, #1376]	; 0x560
 8001c8e:	3301      	adds	r3, #1
 8001c90:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
					ptr++;
 8001c94:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 8001c98:	3301      	adds	r3, #1
 8001c9a:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
					n8++;
 8001c9e:	f8d7 355c 	ldr.w	r3, [r7, #1372]	; 0x55c
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	f8c7 355c 	str.w	r3, [r7, #1372]	; 0x55c
				while ((*ptr) != ',') {
 8001ca8:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	2b2c      	cmp	r3, #44	; 0x2c
 8001cb0:	d1e5      	bne.n	8001c7e <main+0x876>
				}

				memcpy(ptr8, "\0", 1);
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	4964      	ldr	r1, [pc, #400]	; (8001e48 <main+0xa40>)
 8001cb6:	f8d7 0560 	ldr.w	r0, [r7, #1376]	; 0x560
 8001cba:	f003 ffcd 	bl	8005c58 <memcpy>
			HAL_UART_Transmit(&huart1, (uint8_t*) EW, n8 + 1, 500);

			printf("\r\n");
#endif

				ptr++;
 8001cbe:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594

				char *ptr9 = groundSpeed;
 8001cc8:	f107 0320 	add.w	r3, r7, #32
 8001ccc:	f8c7 3558 	str.w	r3, [r7, #1368]	; 0x558

				int n9 = 0;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
				while ((*ptr) != ',') {
 8001cd6:	e014      	b.n	8001d02 <main+0x8fa>
 8001cd8:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 8001cdc:	781a      	ldrb	r2, [r3, #0]
					memcpy(ptr9, ptr, 1);
 8001cde:	f8d7 3558 	ldr.w	r3, [r7, #1368]	; 0x558
 8001ce2:	701a      	strb	r2, [r3, #0]

					ptr9++;
 8001ce4:	f8d7 3558 	ldr.w	r3, [r7, #1368]	; 0x558
 8001ce8:	3301      	adds	r3, #1
 8001cea:	f8c7 3558 	str.w	r3, [r7, #1368]	; 0x558
					ptr++;
 8001cee:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
					n9++;
 8001cf8:	f8d7 3554 	ldr.w	r3, [r7, #1364]	; 0x554
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
				while ((*ptr) != ',') {
 8001d02:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	2b2c      	cmp	r3, #44	; 0x2c
 8001d0a:	d1e5      	bne.n	8001cd8 <main+0x8d0>
				}

				memcpy(ptr9, "\0", 1);
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	494e      	ldr	r1, [pc, #312]	; (8001e48 <main+0xa40>)
 8001d10:	f8d7 0558 	ldr.w	r0, [r7, #1368]	; 0x558
 8001d14:	f003 ffa0 	bl	8005c58 <memcpy>

				if (n9 == 5) {
 8001d18:	f8d7 3554 	ldr.w	r3, [r7, #1364]	; 0x554
 8001d1c:	2b05      	cmp	r3, #5
 8001d1e:	d10f      	bne.n	8001d40 <main+0x938>
					ground_speed = (atof(groundSpeed)) * 1.852;
 8001d20:	f107 0320 	add.w	r3, r7, #32
 8001d24:	4618      	mov	r0, r3
 8001d26:	f003 ff6a 	bl	8005bfe <atof>
 8001d2a:	a345      	add	r3, pc, #276	; (adr r3, 8001e40 <main+0xa38>)
 8001d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d30:	f7fe fbd2 	bl	80004d8 <__aeabi_dmul>
 8001d34:	4602      	mov	r2, r0
 8001d36:	460b      	mov	r3, r1
 8001d38:	f507 61b4 	add.w	r1, r7, #1440	; 0x5a0
 8001d3c:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_UART_Transmit(&huart1, (uint8_t*) groundSpeed, n9 + 1, 500);

			printf("\r\n");
#endif

				if ((f_latitude1 == 0) && (f_longitude1 == 0)) {
 8001d40:	4b45      	ldr	r3, [pc, #276]	; (8001e58 <main+0xa50>)
 8001d42:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d46:	f04f 0200 	mov.w	r2, #0
 8001d4a:	f04f 0300 	mov.w	r3, #0
 8001d4e:	f7fe fe2b 	bl	80009a8 <__aeabi_dcmpeq>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d019      	beq.n	8001d8c <main+0x984>
 8001d58:	4b40      	ldr	r3, [pc, #256]	; (8001e5c <main+0xa54>)
 8001d5a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d5e:	f04f 0200 	mov.w	r2, #0
 8001d62:	f04f 0300 	mov.w	r3, #0
 8001d66:	f7fe fe1f 	bl	80009a8 <__aeabi_dcmpeq>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d00d      	beq.n	8001d8c <main+0x984>
					f_latitude1 = f_latitude2;
 8001d70:	4939      	ldr	r1, [pc, #228]	; (8001e58 <main+0xa50>)
 8001d72:	f507 63b9 	add.w	r3, r7, #1480	; 0x5c8
 8001d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d7a:	e9c1 2300 	strd	r2, r3, [r1]
					f_longitude1 = f_longitude2;
 8001d7e:	4937      	ldr	r1, [pc, #220]	; (8001e5c <main+0xa54>)
 8001d80:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 8001d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d88:	e9c1 2300 	strd	r2, r3, [r1]
				}

				if (time_interval >= 0.000 && f_latitude1 > 0) {
 8001d8c:	f04f 0200 	mov.w	r2, #0
 8001d90:	f04f 0300 	mov.w	r3, #0
 8001d94:	f507 61b6 	add.w	r1, r7, #1456	; 0x5b0
 8001d98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001d9c:	f7fe fe22 	bl	80009e4 <__aeabi_dcmpge>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d07e      	beq.n	8001ea4 <main+0xa9c>
 8001da6:	4b2c      	ldr	r3, [pc, #176]	; (8001e58 <main+0xa50>)
 8001da8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001dac:	f04f 0200 	mov.w	r2, #0
 8001db0:	f04f 0300 	mov.w	r3, #0
 8001db4:	f7fe fe20 	bl	80009f8 <__aeabi_dcmpgt>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d072      	beq.n	8001ea4 <main+0xa9c>

					distance = calc_distance(f_latitude1, f_longitude1,
 8001dbe:	4b26      	ldr	r3, [pc, #152]	; (8001e58 <main+0xa50>)
 8001dc0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001dc4:	4b25      	ldr	r3, [pc, #148]	; (8001e5c <main+0xa54>)
 8001dc6:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001dca:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 8001dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001dd6:	f507 63b9 	add.w	r3, r7, #1480	; 0x5c8
 8001dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dde:	e9cd 2300 	strd	r2, r3, [sp]
 8001de2:	4622      	mov	r2, r4
 8001de4:	462b      	mov	r3, r5
 8001de6:	f7ff fa17 	bl	8001218 <calc_distance>
 8001dea:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8001dee:	e9c3 0100 	strd	r0, r1, [r3]

#ifndef OLED
				printf("distance : %.7f\r\n", distance);
#endif

					f_latitude1 = f_latitude2;
 8001df2:	4919      	ldr	r1, [pc, #100]	; (8001e58 <main+0xa50>)
 8001df4:	f507 63b9 	add.w	r3, r7, #1480	; 0x5c8
 8001df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dfc:	e9c1 2300 	strd	r2, r3, [r1]
					f_longitude1 = f_longitude2;
 8001e00:	4916      	ldr	r1, [pc, #88]	; (8001e5c <main+0xa54>)
 8001e02:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 8001e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e0a:	e9c1 2300 	strd	r2, r3, [r1]
					if (distance == 0) {
 8001e0e:	f04f 0200 	mov.w	r2, #0
 8001e12:	f04f 0300 	mov.w	r3, #0
 8001e16:	f507 61b7 	add.w	r1, r7, #1464	; 0x5b8
 8001e1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001e1e:	f7fe fdc3 	bl	80009a8 <__aeabi_dcmpeq>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d01b      	beq.n	8001e60 <main+0xa58>
						speed = 0.0;
 8001e28:	f04f 0200 	mov.w	r2, #0
 8001e2c:	f04f 0300 	mov.w	r3, #0
 8001e30:	f507 61b5 	add.w	r1, r7, #1448	; 0x5a8
 8001e34:	e9c1 2300 	strd	r2, r3, [r1]
 8001e38:	e034      	b.n	8001ea4 <main+0xa9c>
 8001e3a:	bf00      	nop
 8001e3c:	f3af 8000 	nop.w
 8001e40:	c083126f 	.word	0xc083126f
 8001e44:	3ffda1ca 	.word	0x3ffda1ca
 8001e48:	0800bb10 	.word	0x0800bb10
 8001e4c:	51eb851f 	.word	0x51eb851f
 8001e50:	40590000 	.word	0x40590000
 8001e54:	404e0000 	.word	0x404e0000
 8001e58:	20000380 	.word	0x20000380
 8001e5c:	20000388 	.word	0x20000388
					} else {
						speed = (distance * 0.001 * 3600.0) / time_interval;
 8001e60:	a32f      	add	r3, pc, #188	; (adr r3, 8001f20 <main+0xb18>)
 8001e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e66:	f507 61b7 	add.w	r1, r7, #1464	; 0x5b8
 8001e6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001e6e:	f7fe fb33 	bl	80004d8 <__aeabi_dmul>
 8001e72:	4602      	mov	r2, r0
 8001e74:	460b      	mov	r3, r1
 8001e76:	4610      	mov	r0, r2
 8001e78:	4619      	mov	r1, r3
 8001e7a:	a32b      	add	r3, pc, #172	; (adr r3, 8001f28 <main+0xb20>)
 8001e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e80:	f7fe fb2a 	bl	80004d8 <__aeabi_dmul>
 8001e84:	4602      	mov	r2, r0
 8001e86:	460b      	mov	r3, r1
 8001e88:	4610      	mov	r0, r2
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	f507 63b6 	add.w	r3, r7, #1456	; 0x5b0
 8001e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e94:	f7fe fc4a 	bl	800072c <__aeabi_ddiv>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	f507 61b5 	add.w	r1, r7, #1448	; 0x5a8
 8001ea0:	e9c1 2300 	strd	r2, r3, [r1]
			printf("ground_speed : %.7f\r\n", ground_speed);
#endif

			}

			memset(type, 0, sizeof(type));
 8001ea4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001ea8:	2210      	movs	r2, #16
 8001eaa:	2100      	movs	r1, #0
 8001eac:	4618      	mov	r0, r3
 8001eae:	f003 fee1 	bl	8005c74 <memset>
			memset(time, 0, sizeof(time));
 8001eb2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001eb6:	2210      	movs	r2, #16
 8001eb8:	2100      	movs	r1, #0
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f003 feda 	bl	8005c74 <memset>
			memset(latitude, 0, sizeof(latitude));
 8001ec0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001ec4:	2210      	movs	r2, #16
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f003 fed3 	bl	8005c74 <memset>
			memset(NS, 0, sizeof(NS));
 8001ece:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001ed2:	2204      	movs	r2, #4
 8001ed4:	2100      	movs	r1, #0
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f003 fecc 	bl	8005c74 <memset>
			memset(longitude, 0, sizeof(longitude));
 8001edc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ee0:	2210      	movs	r2, #16
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f003 fec5 	bl	8005c74 <memset>
			memset(EW, 0, sizeof(EW));
 8001eea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001eee:	2204      	movs	r2, #4
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f003 febe 	bl	8005c74 <memset>
			memset(groundSpeed, 0, sizeof(groundSpeed));
 8001ef8:	f107 0320 	add.w	r3, r7, #32
 8001efc:	2210      	movs	r2, #16
 8001efe:	2100      	movs	r1, #0
 8001f00:	4618      	mov	r0, r3
 8001f02:	f003 feb7 	bl	8005c74 <memset>

			memset(buff, 0, sizeof(buff));
 8001f06:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001f0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f0e:	2100      	movs	r1, #0
 8001f10:	4618      	mov	r0, r3
 8001f12:	f003 feaf 	bl	8005c74 <memset>
	while (1) {
 8001f16:	f7ff bb31 	b.w	800157c <main+0x174>
 8001f1a:	bf00      	nop
 8001f1c:	f3af 8000 	nop.w
 8001f20:	d2f1a9fc 	.word	0xd2f1a9fc
 8001f24:	3f50624d 	.word	0x3f50624d
 8001f28:	00000000 	.word	0x00000000
 8001f2c:	40ac2000 	.word	0x40ac2000

08001f30 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b090      	sub	sp, #64	; 0x40
 8001f34:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001f36:	f107 0318 	add.w	r3, r7, #24
 8001f3a:	2228      	movs	r2, #40	; 0x28
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f003 fe98 	bl	8005c74 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001f44:	1d3b      	adds	r3, r7, #4
 8001f46:	2200      	movs	r2, #0
 8001f48:	601a      	str	r2, [r3, #0]
 8001f4a:	605a      	str	r2, [r3, #4]
 8001f4c:	609a      	str	r2, [r3, #8]
 8001f4e:	60da      	str	r2, [r3, #12]
 8001f50:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f52:	2301      	movs	r3, #1
 8001f54:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f5a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f60:	2301      	movs	r3, #1
 8001f62:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f64:	2302      	movs	r3, #2
 8001f66:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f6c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001f6e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001f72:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001f74:	f107 0318 	add.w	r3, r7, #24
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f001 f81d 	bl	8002fb8 <HAL_RCC_OscConfig>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <SystemClock_Config+0x58>
		Error_Handler();
 8001f84:	f000 f924 	bl	80021d0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001f88:	230f      	movs	r3, #15
 8001f8a:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f90:	2300      	movs	r3, #0
 8001f92:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f98:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001f9e:	1d3b      	adds	r3, r7, #4
 8001fa0:	2102      	movs	r1, #2
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f001 fa8a 	bl	80034bc <HAL_RCC_ClockConfig>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <SystemClock_Config+0x82>
		Error_Handler();
 8001fae:	f000 f90f 	bl	80021d0 <Error_Handler>
	}
}
 8001fb2:	bf00      	nop
 8001fb4:	3740      	adds	r7, #64	; 0x40
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <MX_NVIC_Init>:

/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void) {
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	af00      	add	r7, sp, #0
	/* USART2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	2100      	movs	r1, #0
 8001fc2:	2026      	movs	r0, #38	; 0x26
 8001fc4:	f000 fe03 	bl	8002bce <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001fc8:	2026      	movs	r0, #38	; 0x26
 8001fca:	f000 fe1c 	bl	8002c06 <HAL_NVIC_EnableIRQ>
	/* EXTI0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001fce:	2200      	movs	r2, #0
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	2006      	movs	r0, #6
 8001fd4:	f000 fdfb 	bl	8002bce <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001fd8:	2006      	movs	r0, #6
 8001fda:	f000 fe14 	bl	8002c06 <HAL_NVIC_EnableIRQ>
}
 8001fde:	bf00      	nop
 8001fe0:	bd80      	pop	{r7, pc}
	...

08001fe4 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001fe8:	4b17      	ldr	r3, [pc, #92]	; (8002048 <MX_SPI1_Init+0x64>)
 8001fea:	4a18      	ldr	r2, [pc, #96]	; (800204c <MX_SPI1_Init+0x68>)
 8001fec:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001fee:	4b16      	ldr	r3, [pc, #88]	; (8002048 <MX_SPI1_Init+0x64>)
 8001ff0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ff4:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001ff6:	4b14      	ldr	r3, [pc, #80]	; (8002048 <MX_SPI1_Init+0x64>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ffc:	4b12      	ldr	r3, [pc, #72]	; (8002048 <MX_SPI1_Init+0x64>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002002:	4b11      	ldr	r3, [pc, #68]	; (8002048 <MX_SPI1_Init+0x64>)
 8002004:	2200      	movs	r2, #0
 8002006:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002008:	4b0f      	ldr	r3, [pc, #60]	; (8002048 <MX_SPI1_Init+0x64>)
 800200a:	2200      	movs	r2, #0
 800200c:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800200e:	4b0e      	ldr	r3, [pc, #56]	; (8002048 <MX_SPI1_Init+0x64>)
 8002010:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002014:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002016:	4b0c      	ldr	r3, [pc, #48]	; (8002048 <MX_SPI1_Init+0x64>)
 8002018:	2208      	movs	r2, #8
 800201a:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800201c:	4b0a      	ldr	r3, [pc, #40]	; (8002048 <MX_SPI1_Init+0x64>)
 800201e:	2200      	movs	r2, #0
 8002020:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002022:	4b09      	ldr	r3, [pc, #36]	; (8002048 <MX_SPI1_Init+0x64>)
 8002024:	2200      	movs	r2, #0
 8002026:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002028:	4b07      	ldr	r3, [pc, #28]	; (8002048 <MX_SPI1_Init+0x64>)
 800202a:	2200      	movs	r2, #0
 800202c:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 800202e:	4b06      	ldr	r3, [pc, #24]	; (8002048 <MX_SPI1_Init+0x64>)
 8002030:	220a      	movs	r2, #10
 8002032:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8002034:	4804      	ldr	r0, [pc, #16]	; (8002048 <MX_SPI1_Init+0x64>)
 8002036:	f001 fbcf 	bl	80037d8 <HAL_SPI_Init>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <MX_SPI1_Init+0x60>
		Error_Handler();
 8002040:	f000 f8c6 	bl	80021d0 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8002044:	bf00      	nop
 8002046:	bd80      	pop	{r7, pc}
 8002048:	200001fc 	.word	0x200001fc
 800204c:	40013000 	.word	0x40013000

08002050 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8002054:	4b11      	ldr	r3, [pc, #68]	; (800209c <MX_USART1_UART_Init+0x4c>)
 8002056:	4a12      	ldr	r2, [pc, #72]	; (80020a0 <MX_USART1_UART_Init+0x50>)
 8002058:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 800205a:	4b10      	ldr	r3, [pc, #64]	; (800209c <MX_USART1_UART_Init+0x4c>)
 800205c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002060:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002062:	4b0e      	ldr	r3, [pc, #56]	; (800209c <MX_USART1_UART_Init+0x4c>)
 8002064:	2200      	movs	r2, #0
 8002066:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8002068:	4b0c      	ldr	r3, [pc, #48]	; (800209c <MX_USART1_UART_Init+0x4c>)
 800206a:	2200      	movs	r2, #0
 800206c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800206e:	4b0b      	ldr	r3, [pc, #44]	; (800209c <MX_USART1_UART_Init+0x4c>)
 8002070:	2200      	movs	r2, #0
 8002072:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8002074:	4b09      	ldr	r3, [pc, #36]	; (800209c <MX_USART1_UART_Init+0x4c>)
 8002076:	220c      	movs	r2, #12
 8002078:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800207a:	4b08      	ldr	r3, [pc, #32]	; (800209c <MX_USART1_UART_Init+0x4c>)
 800207c:	2200      	movs	r2, #0
 800207e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002080:	4b06      	ldr	r3, [pc, #24]	; (800209c <MX_USART1_UART_Init+0x4c>)
 8002082:	2200      	movs	r2, #0
 8002084:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8002086:	4805      	ldr	r0, [pc, #20]	; (800209c <MX_USART1_UART_Init+0x4c>)
 8002088:	f001 fe14 	bl	8003cb4 <HAL_UART_Init>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8002092:	f000 f89d 	bl	80021d0 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8002096:	bf00      	nop
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	20000254 	.word	0x20000254
 80020a0:	40013800 	.word	0x40013800

080020a4 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80020a8:	4b11      	ldr	r3, [pc, #68]	; (80020f0 <MX_USART2_UART_Init+0x4c>)
 80020aa:	4a12      	ldr	r2, [pc, #72]	; (80020f4 <MX_USART2_UART_Init+0x50>)
 80020ac:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 80020ae:	4b10      	ldr	r3, [pc, #64]	; (80020f0 <MX_USART2_UART_Init+0x4c>)
 80020b0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80020b4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80020b6:	4b0e      	ldr	r3, [pc, #56]	; (80020f0 <MX_USART2_UART_Init+0x4c>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80020bc:	4b0c      	ldr	r3, [pc, #48]	; (80020f0 <MX_USART2_UART_Init+0x4c>)
 80020be:	2200      	movs	r2, #0
 80020c0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80020c2:	4b0b      	ldr	r3, [pc, #44]	; (80020f0 <MX_USART2_UART_Init+0x4c>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80020c8:	4b09      	ldr	r3, [pc, #36]	; (80020f0 <MX_USART2_UART_Init+0x4c>)
 80020ca:	220c      	movs	r2, #12
 80020cc:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020ce:	4b08      	ldr	r3, [pc, #32]	; (80020f0 <MX_USART2_UART_Init+0x4c>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020d4:	4b06      	ldr	r3, [pc, #24]	; (80020f0 <MX_USART2_UART_Init+0x4c>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80020da:	4805      	ldr	r0, [pc, #20]	; (80020f0 <MX_USART2_UART_Init+0x4c>)
 80020dc:	f001 fdea 	bl	8003cb4 <HAL_UART_Init>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80020e6:	f000 f873 	bl	80021d0 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80020ea:	bf00      	nop
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	2000029c 	.word	0x2000029c
 80020f4:	40004400 	.word	0x40004400

080020f8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b088      	sub	sp, #32
 80020fc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80020fe:	f107 0310 	add.w	r3, r7, #16
 8002102:	2200      	movs	r2, #0
 8002104:	601a      	str	r2, [r3, #0]
 8002106:	605a      	str	r2, [r3, #4]
 8002108:	609a      	str	r2, [r3, #8]
 800210a:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800210c:	4b2c      	ldr	r3, [pc, #176]	; (80021c0 <MX_GPIO_Init+0xc8>)
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	4a2b      	ldr	r2, [pc, #172]	; (80021c0 <MX_GPIO_Init+0xc8>)
 8002112:	f043 0320 	orr.w	r3, r3, #32
 8002116:	6193      	str	r3, [r2, #24]
 8002118:	4b29      	ldr	r3, [pc, #164]	; (80021c0 <MX_GPIO_Init+0xc8>)
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	f003 0320 	and.w	r3, r3, #32
 8002120:	60fb      	str	r3, [r7, #12]
 8002122:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002124:	4b26      	ldr	r3, [pc, #152]	; (80021c0 <MX_GPIO_Init+0xc8>)
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	4a25      	ldr	r2, [pc, #148]	; (80021c0 <MX_GPIO_Init+0xc8>)
 800212a:	f043 0304 	orr.w	r3, r3, #4
 800212e:	6193      	str	r3, [r2, #24]
 8002130:	4b23      	ldr	r3, [pc, #140]	; (80021c0 <MX_GPIO_Init+0xc8>)
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	f003 0304 	and.w	r3, r3, #4
 8002138:	60bb      	str	r3, [r7, #8]
 800213a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800213c:	4b20      	ldr	r3, [pc, #128]	; (80021c0 <MX_GPIO_Init+0xc8>)
 800213e:	699b      	ldr	r3, [r3, #24]
 8002140:	4a1f      	ldr	r2, [pc, #124]	; (80021c0 <MX_GPIO_Init+0xc8>)
 8002142:	f043 0308 	orr.w	r3, r3, #8
 8002146:	6193      	str	r3, [r2, #24]
 8002148:	4b1d      	ldr	r3, [pc, #116]	; (80021c0 <MX_GPIO_Init+0xc8>)
 800214a:	699b      	ldr	r3, [r3, #24]
 800214c:	f003 0308 	and.w	r3, r3, #8
 8002150:	607b      	str	r3, [r7, #4]
 8002152:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, OLED_RST_Pin | OLED_DC_Pin, GPIO_PIN_SET);
 8002154:	2201      	movs	r2, #1
 8002156:	2150      	movs	r1, #80	; 0x50
 8002158:	481a      	ldr	r0, [pc, #104]	; (80021c4 <MX_GPIO_Init+0xcc>)
 800215a:	f000 fef3 	bl	8002f44 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_SET);
 800215e:	2201      	movs	r2, #1
 8002160:	2101      	movs	r1, #1
 8002162:	4819      	ldr	r0, [pc, #100]	; (80021c8 <MX_GPIO_Init+0xd0>)
 8002164:	f000 feee 	bl	8002f44 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : btn0_Pin */
	GPIO_InitStruct.Pin = btn0_Pin;
 8002168:	2301      	movs	r3, #1
 800216a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800216c:	4b17      	ldr	r3, [pc, #92]	; (80021cc <MX_GPIO_Init+0xd4>)
 800216e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002170:	2301      	movs	r3, #1
 8002172:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(btn0_GPIO_Port, &GPIO_InitStruct);
 8002174:	f107 0310 	add.w	r3, r7, #16
 8002178:	4619      	mov	r1, r3
 800217a:	4812      	ldr	r0, [pc, #72]	; (80021c4 <MX_GPIO_Init+0xcc>)
 800217c:	f000 fd5e 	bl	8002c3c <HAL_GPIO_Init>

	/*Configure GPIO pins : OLED_RST_Pin OLED_DC_Pin */
	GPIO_InitStruct.Pin = OLED_RST_Pin | OLED_DC_Pin;
 8002180:	2350      	movs	r3, #80	; 0x50
 8002182:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002184:	2301      	movs	r3, #1
 8002186:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002188:	2301      	movs	r3, #1
 800218a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800218c:	2303      	movs	r3, #3
 800218e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002190:	f107 0310 	add.w	r3, r7, #16
 8002194:	4619      	mov	r1, r3
 8002196:	480b      	ldr	r0, [pc, #44]	; (80021c4 <MX_GPIO_Init+0xcc>)
 8002198:	f000 fd50 	bl	8002c3c <HAL_GPIO_Init>

	/*Configure GPIO pin : OLED_CS_Pin */
	GPIO_InitStruct.Pin = OLED_CS_Pin;
 800219c:	2301      	movs	r3, #1
 800219e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021a0:	2301      	movs	r3, #1
 80021a2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021a4:	2301      	movs	r3, #1
 80021a6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021a8:	2303      	movs	r3, #3
 80021aa:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(OLED_CS_GPIO_Port, &GPIO_InitStruct);
 80021ac:	f107 0310 	add.w	r3, r7, #16
 80021b0:	4619      	mov	r1, r3
 80021b2:	4805      	ldr	r0, [pc, #20]	; (80021c8 <MX_GPIO_Init+0xd0>)
 80021b4:	f000 fd42 	bl	8002c3c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80021b8:	bf00      	nop
 80021ba:	3720      	adds	r7, #32
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	40021000 	.word	0x40021000
 80021c4:	40010800 	.word	0x40010800
 80021c8:	40010c00 	.word	0x40010c00
 80021cc:	10110000 	.word	0x10110000

080021d0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021d4:	b672      	cpsid	i
}
 80021d6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80021d8:	e7fe      	b.n	80021d8 <Error_Handler+0x8>
	...

080021dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80021e2:	4b15      	ldr	r3, [pc, #84]	; (8002238 <HAL_MspInit+0x5c>)
 80021e4:	699b      	ldr	r3, [r3, #24]
 80021e6:	4a14      	ldr	r2, [pc, #80]	; (8002238 <HAL_MspInit+0x5c>)
 80021e8:	f043 0301 	orr.w	r3, r3, #1
 80021ec:	6193      	str	r3, [r2, #24]
 80021ee:	4b12      	ldr	r3, [pc, #72]	; (8002238 <HAL_MspInit+0x5c>)
 80021f0:	699b      	ldr	r3, [r3, #24]
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	60bb      	str	r3, [r7, #8]
 80021f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021fa:	4b0f      	ldr	r3, [pc, #60]	; (8002238 <HAL_MspInit+0x5c>)
 80021fc:	69db      	ldr	r3, [r3, #28]
 80021fe:	4a0e      	ldr	r2, [pc, #56]	; (8002238 <HAL_MspInit+0x5c>)
 8002200:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002204:	61d3      	str	r3, [r2, #28]
 8002206:	4b0c      	ldr	r3, [pc, #48]	; (8002238 <HAL_MspInit+0x5c>)
 8002208:	69db      	ldr	r3, [r3, #28]
 800220a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800220e:	607b      	str	r3, [r7, #4]
 8002210:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002212:	4b0a      	ldr	r3, [pc, #40]	; (800223c <HAL_MspInit+0x60>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	60fb      	str	r3, [r7, #12]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800221e:	60fb      	str	r3, [r7, #12]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002226:	60fb      	str	r3, [r7, #12]
 8002228:	4a04      	ldr	r2, [pc, #16]	; (800223c <HAL_MspInit+0x60>)
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800222e:	bf00      	nop
 8002230:	3714      	adds	r7, #20
 8002232:	46bd      	mov	sp, r7
 8002234:	bc80      	pop	{r7}
 8002236:	4770      	bx	lr
 8002238:	40021000 	.word	0x40021000
 800223c:	40010000 	.word	0x40010000

08002240 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b088      	sub	sp, #32
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002248:	f107 0310 	add.w	r3, r7, #16
 800224c:	2200      	movs	r2, #0
 800224e:	601a      	str	r2, [r3, #0]
 8002250:	605a      	str	r2, [r3, #4]
 8002252:	609a      	str	r2, [r3, #8]
 8002254:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a15      	ldr	r2, [pc, #84]	; (80022b0 <HAL_SPI_MspInit+0x70>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d123      	bne.n	80022a8 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002260:	4b14      	ldr	r3, [pc, #80]	; (80022b4 <HAL_SPI_MspInit+0x74>)
 8002262:	699b      	ldr	r3, [r3, #24]
 8002264:	4a13      	ldr	r2, [pc, #76]	; (80022b4 <HAL_SPI_MspInit+0x74>)
 8002266:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800226a:	6193      	str	r3, [r2, #24]
 800226c:	4b11      	ldr	r3, [pc, #68]	; (80022b4 <HAL_SPI_MspInit+0x74>)
 800226e:	699b      	ldr	r3, [r3, #24]
 8002270:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002274:	60fb      	str	r3, [r7, #12]
 8002276:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002278:	4b0e      	ldr	r3, [pc, #56]	; (80022b4 <HAL_SPI_MspInit+0x74>)
 800227a:	699b      	ldr	r3, [r3, #24]
 800227c:	4a0d      	ldr	r2, [pc, #52]	; (80022b4 <HAL_SPI_MspInit+0x74>)
 800227e:	f043 0304 	orr.w	r3, r3, #4
 8002282:	6193      	str	r3, [r2, #24]
 8002284:	4b0b      	ldr	r3, [pc, #44]	; (80022b4 <HAL_SPI_MspInit+0x74>)
 8002286:	699b      	ldr	r3, [r3, #24]
 8002288:	f003 0304 	and.w	r3, r3, #4
 800228c:	60bb      	str	r3, [r7, #8]
 800228e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002290:	23a0      	movs	r3, #160	; 0xa0
 8002292:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002294:	2302      	movs	r3, #2
 8002296:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002298:	2303      	movs	r3, #3
 800229a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800229c:	f107 0310 	add.w	r3, r7, #16
 80022a0:	4619      	mov	r1, r3
 80022a2:	4805      	ldr	r0, [pc, #20]	; (80022b8 <HAL_SPI_MspInit+0x78>)
 80022a4:	f000 fcca 	bl	8002c3c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80022a8:	bf00      	nop
 80022aa:	3720      	adds	r7, #32
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	40013000 	.word	0x40013000
 80022b4:	40021000 	.word	0x40021000
 80022b8:	40010800 	.word	0x40010800

080022bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b08a      	sub	sp, #40	; 0x28
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c4:	f107 0318 	add.w	r3, r7, #24
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]
 80022cc:	605a      	str	r2, [r3, #4]
 80022ce:	609a      	str	r2, [r3, #8]
 80022d0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a37      	ldr	r2, [pc, #220]	; (80023b4 <HAL_UART_MspInit+0xf8>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d132      	bne.n	8002342 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80022dc:	4b36      	ldr	r3, [pc, #216]	; (80023b8 <HAL_UART_MspInit+0xfc>)
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	4a35      	ldr	r2, [pc, #212]	; (80023b8 <HAL_UART_MspInit+0xfc>)
 80022e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022e6:	6193      	str	r3, [r2, #24]
 80022e8:	4b33      	ldr	r3, [pc, #204]	; (80023b8 <HAL_UART_MspInit+0xfc>)
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022f0:	617b      	str	r3, [r7, #20]
 80022f2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022f4:	4b30      	ldr	r3, [pc, #192]	; (80023b8 <HAL_UART_MspInit+0xfc>)
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	4a2f      	ldr	r2, [pc, #188]	; (80023b8 <HAL_UART_MspInit+0xfc>)
 80022fa:	f043 0304 	orr.w	r3, r3, #4
 80022fe:	6193      	str	r3, [r2, #24]
 8002300:	4b2d      	ldr	r3, [pc, #180]	; (80023b8 <HAL_UART_MspInit+0xfc>)
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	f003 0304 	and.w	r3, r3, #4
 8002308:	613b      	str	r3, [r7, #16]
 800230a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800230c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002310:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002312:	2302      	movs	r3, #2
 8002314:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002316:	2303      	movs	r3, #3
 8002318:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800231a:	f107 0318 	add.w	r3, r7, #24
 800231e:	4619      	mov	r1, r3
 8002320:	4826      	ldr	r0, [pc, #152]	; (80023bc <HAL_UART_MspInit+0x100>)
 8002322:	f000 fc8b 	bl	8002c3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002326:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800232a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800232c:	2300      	movs	r3, #0
 800232e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002330:	2300      	movs	r3, #0
 8002332:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002334:	f107 0318 	add.w	r3, r7, #24
 8002338:	4619      	mov	r1, r3
 800233a:	4820      	ldr	r0, [pc, #128]	; (80023bc <HAL_UART_MspInit+0x100>)
 800233c:	f000 fc7e 	bl	8002c3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002340:	e034      	b.n	80023ac <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a1e      	ldr	r2, [pc, #120]	; (80023c0 <HAL_UART_MspInit+0x104>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d12f      	bne.n	80023ac <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800234c:	4b1a      	ldr	r3, [pc, #104]	; (80023b8 <HAL_UART_MspInit+0xfc>)
 800234e:	69db      	ldr	r3, [r3, #28]
 8002350:	4a19      	ldr	r2, [pc, #100]	; (80023b8 <HAL_UART_MspInit+0xfc>)
 8002352:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002356:	61d3      	str	r3, [r2, #28]
 8002358:	4b17      	ldr	r3, [pc, #92]	; (80023b8 <HAL_UART_MspInit+0xfc>)
 800235a:	69db      	ldr	r3, [r3, #28]
 800235c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002360:	60fb      	str	r3, [r7, #12]
 8002362:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002364:	4b14      	ldr	r3, [pc, #80]	; (80023b8 <HAL_UART_MspInit+0xfc>)
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	4a13      	ldr	r2, [pc, #76]	; (80023b8 <HAL_UART_MspInit+0xfc>)
 800236a:	f043 0304 	orr.w	r3, r3, #4
 800236e:	6193      	str	r3, [r2, #24]
 8002370:	4b11      	ldr	r3, [pc, #68]	; (80023b8 <HAL_UART_MspInit+0xfc>)
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	f003 0304 	and.w	r3, r3, #4
 8002378:	60bb      	str	r3, [r7, #8]
 800237a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800237c:	2304      	movs	r3, #4
 800237e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002380:	2302      	movs	r3, #2
 8002382:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002384:	2303      	movs	r3, #3
 8002386:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002388:	f107 0318 	add.w	r3, r7, #24
 800238c:	4619      	mov	r1, r3
 800238e:	480b      	ldr	r0, [pc, #44]	; (80023bc <HAL_UART_MspInit+0x100>)
 8002390:	f000 fc54 	bl	8002c3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002394:	2308      	movs	r3, #8
 8002396:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002398:	2300      	movs	r3, #0
 800239a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239c:	2300      	movs	r3, #0
 800239e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023a0:	f107 0318 	add.w	r3, r7, #24
 80023a4:	4619      	mov	r1, r3
 80023a6:	4805      	ldr	r0, [pc, #20]	; (80023bc <HAL_UART_MspInit+0x100>)
 80023a8:	f000 fc48 	bl	8002c3c <HAL_GPIO_Init>
}
 80023ac:	bf00      	nop
 80023ae:	3728      	adds	r7, #40	; 0x28
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	40013800 	.word	0x40013800
 80023b8:	40021000 	.word	0x40021000
 80023bc:	40010800 	.word	0x40010800
 80023c0:	40004400 	.word	0x40004400

080023c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023c8:	e7fe      	b.n	80023c8 <NMI_Handler+0x4>

080023ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023ca:	b480      	push	{r7}
 80023cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023ce:	e7fe      	b.n	80023ce <HardFault_Handler+0x4>

080023d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023d4:	e7fe      	b.n	80023d4 <MemManage_Handler+0x4>

080023d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023d6:	b480      	push	{r7}
 80023d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023da:	e7fe      	b.n	80023da <BusFault_Handler+0x4>

080023dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023e0:	e7fe      	b.n	80023e0 <UsageFault_Handler+0x4>

080023e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023e2:	b480      	push	{r7}
 80023e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023e6:	bf00      	nop
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bc80      	pop	{r7}
 80023ec:	4770      	bx	lr

080023ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023ee:	b480      	push	{r7}
 80023f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023f2:	bf00      	nop
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bc80      	pop	{r7}
 80023f8:	4770      	bx	lr

080023fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023fa:	b480      	push	{r7}
 80023fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023fe:	bf00      	nop
 8002400:	46bd      	mov	sp, r7
 8002402:	bc80      	pop	{r7}
 8002404:	4770      	bx	lr

08002406 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002406:	b580      	push	{r7, lr}
 8002408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800240a:	f000 fac9 	bl	80029a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800240e:	bf00      	nop
 8002410:	bd80      	pop	{r7, pc}

08002412 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(btn0_Pin);
 8002416:	2001      	movs	r0, #1
 8002418:	f000 fdac 	bl	8002f74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800241c:	bf00      	nop
 800241e:	bd80      	pop	{r7, pc}

08002420 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	Uart_isr(&huart2);
 8002424:	4802      	ldr	r0, [pc, #8]	; (8002430 <USART2_IRQHandler+0x10>)
 8002426:	f000 fa27 	bl	8002878 <Uart_isr>
  /* USER CODE END USART2_IRQn 0 */
 // HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800242a:	bf00      	nop
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	2000029c 	.word	0x2000029c

08002434 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  return 1;
 8002438:	2301      	movs	r3, #1
}
 800243a:	4618      	mov	r0, r3
 800243c:	46bd      	mov	sp, r7
 800243e:	bc80      	pop	{r7}
 8002440:	4770      	bx	lr

08002442 <_kill>:

int _kill(int pid, int sig)
{
 8002442:	b580      	push	{r7, lr}
 8002444:	b082      	sub	sp, #8
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
 800244a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800244c:	f003 fbda 	bl	8005c04 <__errno>
 8002450:	4603      	mov	r3, r0
 8002452:	2216      	movs	r2, #22
 8002454:	601a      	str	r2, [r3, #0]
  return -1;
 8002456:	f04f 33ff 	mov.w	r3, #4294967295
}
 800245a:	4618      	mov	r0, r3
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <_exit>:

void _exit (int status)
{
 8002462:	b580      	push	{r7, lr}
 8002464:	b082      	sub	sp, #8
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800246a:	f04f 31ff 	mov.w	r1, #4294967295
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f7ff ffe7 	bl	8002442 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002474:	e7fe      	b.n	8002474 <_exit+0x12>

08002476 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b086      	sub	sp, #24
 800247a:	af00      	add	r7, sp, #0
 800247c:	60f8      	str	r0, [r7, #12]
 800247e:	60b9      	str	r1, [r7, #8]
 8002480:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002482:	2300      	movs	r3, #0
 8002484:	617b      	str	r3, [r7, #20]
 8002486:	e00a      	b.n	800249e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002488:	f3af 8000 	nop.w
 800248c:	4601      	mov	r1, r0
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	1c5a      	adds	r2, r3, #1
 8002492:	60ba      	str	r2, [r7, #8]
 8002494:	b2ca      	uxtb	r2, r1
 8002496:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	3301      	adds	r3, #1
 800249c:	617b      	str	r3, [r7, #20]
 800249e:	697a      	ldr	r2, [r7, #20]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	dbf0      	blt.n	8002488 <_read+0x12>
  }

  return len;
 80024a6:	687b      	ldr	r3, [r7, #4]
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3718      	adds	r7, #24
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b086      	sub	sp, #24
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024bc:	2300      	movs	r3, #0
 80024be:	617b      	str	r3, [r7, #20]
 80024c0:	e009      	b.n	80024d6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	1c5a      	adds	r2, r3, #1
 80024c6:	60ba      	str	r2, [r7, #8]
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7fe fe6e 	bl	80011ac <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	3301      	adds	r3, #1
 80024d4:	617b      	str	r3, [r7, #20]
 80024d6:	697a      	ldr	r2, [r7, #20]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	429a      	cmp	r2, r3
 80024dc:	dbf1      	blt.n	80024c2 <_write+0x12>
  }
  return len;
 80024de:	687b      	ldr	r3, [r7, #4]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3718      	adds	r7, #24
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <_close>:

int _close(int file)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80024f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bc80      	pop	{r7}
 80024fc:	4770      	bx	lr

080024fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024fe:	b480      	push	{r7}
 8002500:	b083      	sub	sp, #12
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
 8002506:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800250e:	605a      	str	r2, [r3, #4]
  return 0;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	bc80      	pop	{r7}
 800251a:	4770      	bx	lr

0800251c <_isatty>:

int _isatty(int file)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002524:	2301      	movs	r3, #1
}
 8002526:	4618      	mov	r0, r3
 8002528:	370c      	adds	r7, #12
 800252a:	46bd      	mov	sp, r7
 800252c:	bc80      	pop	{r7}
 800252e:	4770      	bx	lr

08002530 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3714      	adds	r7, #20
 8002542:	46bd      	mov	sp, r7
 8002544:	bc80      	pop	{r7}
 8002546:	4770      	bx	lr

08002548 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002550:	4a14      	ldr	r2, [pc, #80]	; (80025a4 <_sbrk+0x5c>)
 8002552:	4b15      	ldr	r3, [pc, #84]	; (80025a8 <_sbrk+0x60>)
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800255c:	4b13      	ldr	r3, [pc, #76]	; (80025ac <_sbrk+0x64>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d102      	bne.n	800256a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002564:	4b11      	ldr	r3, [pc, #68]	; (80025ac <_sbrk+0x64>)
 8002566:	4a12      	ldr	r2, [pc, #72]	; (80025b0 <_sbrk+0x68>)
 8002568:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800256a:	4b10      	ldr	r3, [pc, #64]	; (80025ac <_sbrk+0x64>)
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4413      	add	r3, r2
 8002572:	693a      	ldr	r2, [r7, #16]
 8002574:	429a      	cmp	r2, r3
 8002576:	d207      	bcs.n	8002588 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002578:	f003 fb44 	bl	8005c04 <__errno>
 800257c:	4603      	mov	r3, r0
 800257e:	220c      	movs	r2, #12
 8002580:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002582:	f04f 33ff 	mov.w	r3, #4294967295
 8002586:	e009      	b.n	800259c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002588:	4b08      	ldr	r3, [pc, #32]	; (80025ac <_sbrk+0x64>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800258e:	4b07      	ldr	r3, [pc, #28]	; (80025ac <_sbrk+0x64>)
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4413      	add	r3, r2
 8002596:	4a05      	ldr	r2, [pc, #20]	; (80025ac <_sbrk+0x64>)
 8002598:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800259a:	68fb      	ldr	r3, [r7, #12]
}
 800259c:	4618      	mov	r0, r3
 800259e:	3718      	adds	r7, #24
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	20005000 	.word	0x20005000
 80025a8:	00000400 	.word	0x00000400
 80025ac:	20000390 	.word	0x20000390
 80025b0:	20000bb0 	.word	0x20000bb0

080025b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025b8:	bf00      	nop
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bc80      	pop	{r7}
 80025be:	4770      	bx	lr

080025c0 <u8x8_stm32_gpio_and_delay>:
#define TX_TIMEOUT		100

extern SPI_HandleTypeDef hspi1;

uint8_t u8x8_stm32_gpio_and_delay(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	607b      	str	r3, [r7, #4]
 80025ca:	460b      	mov	r3, r1
 80025cc:	72fb      	strb	r3, [r7, #11]
 80025ce:	4613      	mov	r3, r2
 80025d0:	72bb      	strb	r3, [r7, #10]
	/* STM32 supports HW SPI, Remove unused cases like U8X8_MSG_DELAY_XXX & U8X8_MSG_GPIO_XXX */
	switch(msg)
 80025d2:	7afb      	ldrb	r3, [r7, #11]
 80025d4:	3b28      	subs	r3, #40	; 0x28
 80025d6:	2b23      	cmp	r3, #35	; 0x23
 80025d8:	d864      	bhi.n	80026a4 <u8x8_stm32_gpio_and_delay+0xe4>
 80025da:	a201      	add	r2, pc, #4	; (adr r2, 80025e0 <u8x8_stm32_gpio_and_delay+0x20>)
 80025dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025e0:	080026a5 	.word	0x080026a5
 80025e4:	08002671 	.word	0x08002671
 80025e8:	080026a5 	.word	0x080026a5
 80025ec:	080026a5 	.word	0x080026a5
 80025f0:	080026a5 	.word	0x080026a5
 80025f4:	080026a5 	.word	0x080026a5
 80025f8:	080026a5 	.word	0x080026a5
 80025fc:	080026a5 	.word	0x080026a5
 8002600:	080026a5 	.word	0x080026a5
 8002604:	080026a5 	.word	0x080026a5
 8002608:	080026a5 	.word	0x080026a5
 800260c:	080026a5 	.word	0x080026a5
 8002610:	080026a5 	.word	0x080026a5
 8002614:	080026a5 	.word	0x080026a5
 8002618:	080026a5 	.word	0x080026a5
 800261c:	080026a5 	.word	0x080026a5
 8002620:	080026a5 	.word	0x080026a5
 8002624:	080026a5 	.word	0x080026a5
 8002628:	080026a5 	.word	0x080026a5
 800262c:	080026a5 	.word	0x080026a5
 8002630:	080026a5 	.word	0x080026a5
 8002634:	080026a5 	.word	0x080026a5
 8002638:	080026a5 	.word	0x080026a5
 800263c:	080026a5 	.word	0x080026a5
 8002640:	080026a5 	.word	0x080026a5
 8002644:	080026a5 	.word	0x080026a5
 8002648:	080026a5 	.word	0x080026a5
 800264c:	080026a5 	.word	0x080026a5
 8002650:	080026a5 	.word	0x080026a5
 8002654:	080026a5 	.word	0x080026a5
 8002658:	080026a5 	.word	0x080026a5
 800265c:	080026a5 	.word	0x080026a5
 8002660:	080026a5 	.word	0x080026a5
 8002664:	0800267b 	.word	0x0800267b
 8002668:	08002689 	.word	0x08002689
 800266c:	08002697 	.word	0x08002697
	case U8X8_MSG_GPIO_AND_DELAY_INIT:
		/* Insert codes for initialization */
		break;
	case U8X8_MSG_DELAY_MILLI:
		/* ms Delay */
		HAL_Delay(arg_int);
 8002670:	7abb      	ldrb	r3, [r7, #10]
 8002672:	4618      	mov	r0, r3
 8002674:	f000 f9b0 	bl	80029d8 <HAL_Delay>
		break;
 8002678:	e014      	b.n	80026a4 <u8x8_stm32_gpio_and_delay+0xe4>
	case U8X8_MSG_GPIO_CS:
		/* Insert codes for SS pin control */
		HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, arg_int);
 800267a:	7abb      	ldrb	r3, [r7, #10]
 800267c:	461a      	mov	r2, r3
 800267e:	2101      	movs	r1, #1
 8002680:	480b      	ldr	r0, [pc, #44]	; (80026b0 <u8x8_stm32_gpio_and_delay+0xf0>)
 8002682:	f000 fc5f 	bl	8002f44 <HAL_GPIO_WritePin>
		break;
 8002686:	e00d      	b.n	80026a4 <u8x8_stm32_gpio_and_delay+0xe4>
	case U8X8_MSG_GPIO_DC:
		/* Insert codes for DC pin control */
		HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, arg_int);
 8002688:	7abb      	ldrb	r3, [r7, #10]
 800268a:	461a      	mov	r2, r3
 800268c:	2140      	movs	r1, #64	; 0x40
 800268e:	4809      	ldr	r0, [pc, #36]	; (80026b4 <u8x8_stm32_gpio_and_delay+0xf4>)
 8002690:	f000 fc58 	bl	8002f44 <HAL_GPIO_WritePin>
		break;
 8002694:	e006      	b.n	80026a4 <u8x8_stm32_gpio_and_delay+0xe4>
	case U8X8_MSG_GPIO_RESET:
		/* Insert codes for RST pin control */
		HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, arg_int);
 8002696:	7abb      	ldrb	r3, [r7, #10]
 8002698:	461a      	mov	r2, r3
 800269a:	2110      	movs	r1, #16
 800269c:	4805      	ldr	r0, [pc, #20]	; (80026b4 <u8x8_stm32_gpio_and_delay+0xf4>)
 800269e:	f000 fc51 	bl	8002f44 <HAL_GPIO_WritePin>
		break;
 80026a2:	bf00      	nop
	}
	return 1;
 80026a4:	2301      	movs	r3, #1
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3710      	adds	r7, #16
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	40010c00 	.word	0x40010c00
 80026b4:	40010800 	.word	0x40010800

080026b8 <u8x8_byte_stm32_hw_spi>:

uint8_t u8x8_byte_stm32_hw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	607b      	str	r3, [r7, #4]
 80026c2:	460b      	mov	r3, r1
 80026c4:	72fb      	strb	r3, [r7, #11]
 80026c6:	4613      	mov	r3, r2
 80026c8:	72bb      	strb	r3, [r7, #10]
	switch(msg) {
 80026ca:	7afb      	ldrb	r3, [r7, #11]
 80026cc:	3b14      	subs	r3, #20
 80026ce:	2b0c      	cmp	r3, #12
 80026d0:	d847      	bhi.n	8002762 <u8x8_byte_stm32_hw_spi+0xaa>
 80026d2:	a201      	add	r2, pc, #4	; (adr r2, 80026d8 <u8x8_byte_stm32_hw_spi+0x20>)
 80026d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026d8:	08002767 	.word	0x08002767
 80026dc:	08002763 	.word	0x08002763
 80026e0:	08002763 	.word	0x08002763
 80026e4:	0800270d 	.word	0x0800270d
 80026e8:	08002733 	.word	0x08002733
 80026ec:	0800274b 	.word	0x0800274b
 80026f0:	08002763 	.word	0x08002763
 80026f4:	08002763 	.word	0x08002763
 80026f8:	08002763 	.word	0x08002763
 80026fc:	08002763 	.word	0x08002763
 8002700:	08002763 	.word	0x08002763
 8002704:	08002763 	.word	0x08002763
 8002708:	08002725 	.word	0x08002725
	case U8X8_MSG_BYTE_SEND:
		/* Insert codes to transmit data */
		if(HAL_SPI_Transmit(&hspi1, arg_ptr, arg_int, TX_TIMEOUT) != HAL_OK) return 0;
 800270c:	7abb      	ldrb	r3, [r7, #10]
 800270e:	b29a      	uxth	r2, r3
 8002710:	2364      	movs	r3, #100	; 0x64
 8002712:	6879      	ldr	r1, [r7, #4]
 8002714:	4818      	ldr	r0, [pc, #96]	; (8002778 <u8x8_byte_stm32_hw_spi+0xc0>)
 8002716:	f001 f8e3 	bl	80038e0 <HAL_SPI_Transmit>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d024      	beq.n	800276a <u8x8_byte_stm32_hw_spi+0xb2>
 8002720:	2300      	movs	r3, #0
 8002722:	e024      	b.n	800276e <u8x8_byte_stm32_hw_spi+0xb6>
	case U8X8_MSG_BYTE_INIT:
		/* Insert codes to begin SPI transmission */
		break;
	case U8X8_MSG_BYTE_SET_DC:
		/* Control DC pin, U8X8_MSG_GPIO_DC will be called */
		u8x8_gpio_SetDC(u8x8, arg_int);
 8002724:	7abb      	ldrb	r3, [r7, #10]
 8002726:	461a      	mov	r2, r3
 8002728:	214a      	movs	r1, #74	; 0x4a
 800272a:	68f8      	ldr	r0, [r7, #12]
 800272c:	f003 f9fa 	bl	8005b24 <u8x8_gpio_call>
		break;
 8002730:	e01c      	b.n	800276c <u8x8_byte_stm32_hw_spi+0xb4>
	case U8X8_MSG_BYTE_START_TRANSFER:
		/* Select slave, U8X8_MSG_GPIO_CS will be called */
		u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_enable_level);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	461a      	mov	r2, r3
 800273a:	2149      	movs	r1, #73	; 0x49
 800273c:	68f8      	ldr	r0, [r7, #12]
 800273e:	f003 f9f1 	bl	8005b24 <u8x8_gpio_call>
		HAL_Delay(1);
 8002742:	2001      	movs	r0, #1
 8002744:	f000 f948 	bl	80029d8 <HAL_Delay>
		break;
 8002748:	e010      	b.n	800276c <u8x8_byte_stm32_hw_spi+0xb4>
	case U8X8_MSG_BYTE_END_TRANSFER:
		HAL_Delay(1);
 800274a:	2001      	movs	r0, #1
 800274c:	f000 f944 	bl	80029d8 <HAL_Delay>
		/* Insert codes to end SPI transmission */
		u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	785b      	ldrb	r3, [r3, #1]
 8002756:	461a      	mov	r2, r3
 8002758:	2149      	movs	r1, #73	; 0x49
 800275a:	68f8      	ldr	r0, [r7, #12]
 800275c:	f003 f9e2 	bl	8005b24 <u8x8_gpio_call>
		break;
 8002760:	e004      	b.n	800276c <u8x8_byte_stm32_hw_spi+0xb4>
	default:
		return 0;
 8002762:	2300      	movs	r3, #0
 8002764:	e003      	b.n	800276e <u8x8_byte_stm32_hw_spi+0xb6>
		break;
 8002766:	bf00      	nop
 8002768:	e000      	b.n	800276c <u8x8_byte_stm32_hw_spi+0xb4>
		break;
 800276a:	bf00      	nop
	}
	return 1;
 800276c:	2301      	movs	r3, #1
}
 800276e:	4618      	mov	r0, r3
 8002770:	3710      	adds	r7, #16
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	200001fc 	.word	0x200001fc

0800277c <rxBufferInit>:
#include "uart.h"

ring_buffer_t uart_rx={{0},0,0};
//extern UART_HandleTypeDef huart2;

void rxBufferInit(ring_buffer_t *uart) {
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
	uart->head = 0;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
	uart->tail = 0;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
	memset(uart->buffer, 0, sizeof(RX_BUFFER_SIZE));
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2204      	movs	r2, #4
 8002798:	2100      	movs	r1, #0
 800279a:	4618      	mov	r0, r3
 800279c:	f003 fa6a 	bl	8005c74 <memset>
}
 80027a0:	bf00      	nop
 80027a2:	3708      	adds	r7, #8
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <push>:

void push(ring_buffer_t *uart, uint8_t ch) {
 80027a8:	b480      	push	{r7}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	460b      	mov	r3, r1
 80027b2:	70fb      	strb	r3, [r7, #3]
	uint16_t i = (unsigned int) (uart->head + 1) % RX_BUFFER_SIZE;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	3301      	adds	r3, #1
 80027be:	b29b      	uxth	r3, r3
 80027c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027c4:	81fb      	strh	r3, [r7, #14]
	if (i != uart->tail) {
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	89fa      	ldrh	r2, [r7, #14]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d00b      	beq.n	80027ec <push+0x44>
		uart->buffer[uart->head] = ch;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 80027da:	b29b      	uxth	r3, r3
 80027dc:	4619      	mov	r1, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	78fa      	ldrb	r2, [r7, #3]
 80027e2:	545a      	strb	r2, [r3, r1]
		uart->head = i;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	89fa      	ldrh	r2, [r7, #14]
 80027e8:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
	}
}
 80027ec:	bf00      	nop
 80027ee:	3714      	adds	r7, #20
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bc80      	pop	{r7}
 80027f4:	4770      	bx	lr

080027f6 <pop>:

uint8_t pop(ring_buffer_t *uart) {
 80027f6:	b480      	push	{r7}
 80027f8:	b085      	sub	sp, #20
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]

	if (uart->head == uart->tail) {
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8002804:	b29a      	uxth	r2, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 800280c:	b29b      	uxth	r3, r3
 800280e:	429a      	cmp	r2, r3
 8002810:	d101      	bne.n	8002816 <pop+0x20>
		return -1;
 8002812:	23ff      	movs	r3, #255	; 0xff
 8002814:	e014      	b.n	8002840 <pop+0x4a>
	} else {

		unsigned char cpop = uart->buffer[uart->tail];
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 800281c:	b29b      	uxth	r3, r3
 800281e:	461a      	mov	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	5c9b      	ldrb	r3, [r3, r2]
 8002824:	73fb      	strb	r3, [r7, #15]
		uart->tail = (uint16_t) (uart->tail + 1) % RX_BUFFER_SIZE;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 800282c:	b29b      	uxth	r3, r3
 800282e:	3301      	adds	r3, #1
 8002830:	b29b      	uxth	r3, r3
 8002832:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002836:	b29a      	uxth	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402

		return cpop;
 800283e:	7bfb      	ldrb	r3, [r7, #15]

	}
}
 8002840:	4618      	mov	r0, r3
 8002842:	3714      	adds	r7, #20
 8002844:	46bd      	mov	sp, r7
 8002846:	bc80      	pop	{r7}
 8002848:	4770      	bx	lr

0800284a <uart_available>:

int8_t uart_available(ring_buffer_t *uart) {
 800284a:	b480      	push	{r7}
 800284c:	b085      	sub	sp, #20
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]

	uint8_t n = (unsigned int) (RX_BUFFER_SIZE + (uart->head) - (uart->tail))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8002858:	b29b      	uxth	r3, r3
 800285a:	b2da      	uxtb	r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8002862:	b29b      	uxth	r3, r3
 8002864:	b2db      	uxtb	r3, r3
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	73fb      	strb	r3, [r7, #15]
			% RX_BUFFER_SIZE;
	return n;
 800286a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800286e:	4618      	mov	r0, r3
 8002870:	3714      	adds	r7, #20
 8002872:	46bd      	mov	sp, r7
 8002874:	bc80      	pop	{r7}
 8002876:	4770      	bx	lr

08002878 <Uart_isr>:

void Uart_isr(UART_HandleTypeDef *huart) {
 8002878:	b580      	push	{r7, lr}
 800287a:	b086      	sub	sp, #24
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
	uint32_t isrflags = READ_REG(huart->Instance->SR);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	617b      	str	r3, [r7, #20]
	uint32_t cr1its = READ_REG(huart->Instance->CR1);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	613b      	str	r3, [r7, #16]

	/* if DR is not empty and the Rx Int is enabled */
	if (((isrflags & USART_SR_RXNE) != RESET)
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	f003 0320 	and.w	r3, r3, #32
 8002896:	2b00      	cmp	r3, #0
 8002898:	d011      	beq.n	80028be <Uart_isr+0x46>
			&& ((cr1its & USART_CR1_RXNEIE) != RESET)) {
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	f003 0320 	and.w	r3, r3, #32
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d00c      	beq.n	80028be <Uart_isr+0x46>
		 * @note   RXNE flag can be also cleared by a read to the USART_DR register.
		 * @note   TC flag can be also cleared by software sequence: a read operation to
		 *          USART_SR register followed by a write operation to USART_DR register.
		 * @note   TXE flag is cleared only by a write to the USART_DR register.
		 *********************/
		huart->Instance->SR; /* Read status register */
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
		unsigned char c = huart->Instance->DR; /* Read data register */
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	73fb      	strb	r3, [r7, #15]
		push(&uart_rx, c);  // store data in buffer
 80028b2:	7bfb      	ldrb	r3, [r7, #15]
 80028b4:	4619      	mov	r1, r3
 80028b6:	4803      	ldr	r0, [pc, #12]	; (80028c4 <Uart_isr+0x4c>)
 80028b8:	f7ff ff76 	bl	80027a8 <push>
		return;
 80028bc:	bf00      	nop
	}
}
 80028be:	3718      	adds	r7, #24
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	20000394 	.word	0x20000394

080028c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80028c8:	f7ff fe74 	bl	80025b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028cc:	480b      	ldr	r0, [pc, #44]	; (80028fc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80028ce:	490c      	ldr	r1, [pc, #48]	; (8002900 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80028d0:	4a0c      	ldr	r2, [pc, #48]	; (8002904 <LoopFillZerobss+0x16>)
  movs r3, #0
 80028d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028d4:	e002      	b.n	80028dc <LoopCopyDataInit>

080028d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028da:	3304      	adds	r3, #4

080028dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028e0:	d3f9      	bcc.n	80028d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028e2:	4a09      	ldr	r2, [pc, #36]	; (8002908 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80028e4:	4c09      	ldr	r4, [pc, #36]	; (800290c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80028e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028e8:	e001      	b.n	80028ee <LoopFillZerobss>

080028ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028ec:	3204      	adds	r2, #4

080028ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028f0:	d3fb      	bcc.n	80028ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80028f2:	f003 f98d 	bl	8005c10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80028f6:	f7fe fd87 	bl	8001408 <main>
  bx lr
 80028fa:	4770      	bx	lr
  ldr r0, =_sdata
 80028fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002900:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002904:	0800c7a8 	.word	0x0800c7a8
  ldr r2, =_sbss
 8002908:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800290c:	20000bac 	.word	0x20000bac

08002910 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002910:	e7fe      	b.n	8002910 <ADC1_2_IRQHandler>
	...

08002914 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002918:	4b08      	ldr	r3, [pc, #32]	; (800293c <HAL_Init+0x28>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a07      	ldr	r2, [pc, #28]	; (800293c <HAL_Init+0x28>)
 800291e:	f043 0310 	orr.w	r3, r3, #16
 8002922:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002924:	2003      	movs	r0, #3
 8002926:	f000 f947 	bl	8002bb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800292a:	200f      	movs	r0, #15
 800292c:	f000 f808 	bl	8002940 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002930:	f7ff fc54 	bl	80021dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	40022000 	.word	0x40022000

08002940 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002948:	4b12      	ldr	r3, [pc, #72]	; (8002994 <HAL_InitTick+0x54>)
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	4b12      	ldr	r3, [pc, #72]	; (8002998 <HAL_InitTick+0x58>)
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	4619      	mov	r1, r3
 8002952:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002956:	fbb3 f3f1 	udiv	r3, r3, r1
 800295a:	fbb2 f3f3 	udiv	r3, r2, r3
 800295e:	4618      	mov	r0, r3
 8002960:	f000 f95f 	bl	8002c22 <HAL_SYSTICK_Config>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e00e      	b.n	800298c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2b0f      	cmp	r3, #15
 8002972:	d80a      	bhi.n	800298a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002974:	2200      	movs	r2, #0
 8002976:	6879      	ldr	r1, [r7, #4]
 8002978:	f04f 30ff 	mov.w	r0, #4294967295
 800297c:	f000 f927 	bl	8002bce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002980:	4a06      	ldr	r2, [pc, #24]	; (800299c <HAL_InitTick+0x5c>)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002986:	2300      	movs	r3, #0
 8002988:	e000      	b.n	800298c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
}
 800298c:	4618      	mov	r0, r3
 800298e:	3708      	adds	r7, #8
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	20000000 	.word	0x20000000
 8002998:	20000008 	.word	0x20000008
 800299c:	20000004 	.word	0x20000004

080029a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029a0:	b480      	push	{r7}
 80029a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029a4:	4b05      	ldr	r3, [pc, #20]	; (80029bc <HAL_IncTick+0x1c>)
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	461a      	mov	r2, r3
 80029aa:	4b05      	ldr	r3, [pc, #20]	; (80029c0 <HAL_IncTick+0x20>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4413      	add	r3, r2
 80029b0:	4a03      	ldr	r2, [pc, #12]	; (80029c0 <HAL_IncTick+0x20>)
 80029b2:	6013      	str	r3, [r2, #0]
}
 80029b4:	bf00      	nop
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bc80      	pop	{r7}
 80029ba:	4770      	bx	lr
 80029bc:	20000008 	.word	0x20000008
 80029c0:	20000798 	.word	0x20000798

080029c4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
  return uwTick;
 80029c8:	4b02      	ldr	r3, [pc, #8]	; (80029d4 <HAL_GetTick+0x10>)
 80029ca:	681b      	ldr	r3, [r3, #0]
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bc80      	pop	{r7}
 80029d2:	4770      	bx	lr
 80029d4:	20000798 	.word	0x20000798

080029d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029e0:	f7ff fff0 	bl	80029c4 <HAL_GetTick>
 80029e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029f0:	d005      	beq.n	80029fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029f2:	4b0a      	ldr	r3, [pc, #40]	; (8002a1c <HAL_Delay+0x44>)
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	461a      	mov	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	4413      	add	r3, r2
 80029fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80029fe:	bf00      	nop
 8002a00:	f7ff ffe0 	bl	80029c4 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d8f7      	bhi.n	8002a00 <HAL_Delay+0x28>
  {
  }
}
 8002a10:	bf00      	nop
 8002a12:	bf00      	nop
 8002a14:	3710      	adds	r7, #16
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	20000008 	.word	0x20000008

08002a20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b085      	sub	sp, #20
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f003 0307 	and.w	r3, r3, #7
 8002a2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a30:	4b0c      	ldr	r3, [pc, #48]	; (8002a64 <__NVIC_SetPriorityGrouping+0x44>)
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a36:	68ba      	ldr	r2, [r7, #8]
 8002a38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a52:	4a04      	ldr	r2, [pc, #16]	; (8002a64 <__NVIC_SetPriorityGrouping+0x44>)
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	60d3      	str	r3, [r2, #12]
}
 8002a58:	bf00      	nop
 8002a5a:	3714      	adds	r7, #20
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bc80      	pop	{r7}
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	e000ed00 	.word	0xe000ed00

08002a68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a6c:	4b04      	ldr	r3, [pc, #16]	; (8002a80 <__NVIC_GetPriorityGrouping+0x18>)
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	0a1b      	lsrs	r3, r3, #8
 8002a72:	f003 0307 	and.w	r3, r3, #7
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bc80      	pop	{r7}
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	e000ed00 	.word	0xe000ed00

08002a84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	db0b      	blt.n	8002aae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a96:	79fb      	ldrb	r3, [r7, #7]
 8002a98:	f003 021f 	and.w	r2, r3, #31
 8002a9c:	4906      	ldr	r1, [pc, #24]	; (8002ab8 <__NVIC_EnableIRQ+0x34>)
 8002a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa2:	095b      	lsrs	r3, r3, #5
 8002aa4:	2001      	movs	r0, #1
 8002aa6:	fa00 f202 	lsl.w	r2, r0, r2
 8002aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002aae:	bf00      	nop
 8002ab0:	370c      	adds	r7, #12
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bc80      	pop	{r7}
 8002ab6:	4770      	bx	lr
 8002ab8:	e000e100 	.word	0xe000e100

08002abc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	6039      	str	r1, [r7, #0]
 8002ac6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ac8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	db0a      	blt.n	8002ae6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	b2da      	uxtb	r2, r3
 8002ad4:	490c      	ldr	r1, [pc, #48]	; (8002b08 <__NVIC_SetPriority+0x4c>)
 8002ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ada:	0112      	lsls	r2, r2, #4
 8002adc:	b2d2      	uxtb	r2, r2
 8002ade:	440b      	add	r3, r1
 8002ae0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ae4:	e00a      	b.n	8002afc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	b2da      	uxtb	r2, r3
 8002aea:	4908      	ldr	r1, [pc, #32]	; (8002b0c <__NVIC_SetPriority+0x50>)
 8002aec:	79fb      	ldrb	r3, [r7, #7]
 8002aee:	f003 030f 	and.w	r3, r3, #15
 8002af2:	3b04      	subs	r3, #4
 8002af4:	0112      	lsls	r2, r2, #4
 8002af6:	b2d2      	uxtb	r2, r2
 8002af8:	440b      	add	r3, r1
 8002afa:	761a      	strb	r2, [r3, #24]
}
 8002afc:	bf00      	nop
 8002afe:	370c      	adds	r7, #12
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bc80      	pop	{r7}
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	e000e100 	.word	0xe000e100
 8002b0c:	e000ed00 	.word	0xe000ed00

08002b10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b089      	sub	sp, #36	; 0x24
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f003 0307 	and.w	r3, r3, #7
 8002b22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	f1c3 0307 	rsb	r3, r3, #7
 8002b2a:	2b04      	cmp	r3, #4
 8002b2c:	bf28      	it	cs
 8002b2e:	2304      	movcs	r3, #4
 8002b30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	3304      	adds	r3, #4
 8002b36:	2b06      	cmp	r3, #6
 8002b38:	d902      	bls.n	8002b40 <NVIC_EncodePriority+0x30>
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	3b03      	subs	r3, #3
 8002b3e:	e000      	b.n	8002b42 <NVIC_EncodePriority+0x32>
 8002b40:	2300      	movs	r3, #0
 8002b42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b44:	f04f 32ff 	mov.w	r2, #4294967295
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4e:	43da      	mvns	r2, r3
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	401a      	ands	r2, r3
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b58:	f04f 31ff 	mov.w	r1, #4294967295
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b62:	43d9      	mvns	r1, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b68:	4313      	orrs	r3, r2
         );
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3724      	adds	r7, #36	; 0x24
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bc80      	pop	{r7}
 8002b72:	4770      	bx	lr

08002b74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b84:	d301      	bcc.n	8002b8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b86:	2301      	movs	r3, #1
 8002b88:	e00f      	b.n	8002baa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b8a:	4a0a      	ldr	r2, [pc, #40]	; (8002bb4 <SysTick_Config+0x40>)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	3b01      	subs	r3, #1
 8002b90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b92:	210f      	movs	r1, #15
 8002b94:	f04f 30ff 	mov.w	r0, #4294967295
 8002b98:	f7ff ff90 	bl	8002abc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b9c:	4b05      	ldr	r3, [pc, #20]	; (8002bb4 <SysTick_Config+0x40>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ba2:	4b04      	ldr	r3, [pc, #16]	; (8002bb4 <SysTick_Config+0x40>)
 8002ba4:	2207      	movs	r2, #7
 8002ba6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3708      	adds	r7, #8
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	e000e010 	.word	0xe000e010

08002bb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f7ff ff2d 	bl	8002a20 <__NVIC_SetPriorityGrouping>
}
 8002bc6:	bf00      	nop
 8002bc8:	3708      	adds	r7, #8
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b086      	sub	sp, #24
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	60b9      	str	r1, [r7, #8]
 8002bd8:	607a      	str	r2, [r7, #4]
 8002bda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002be0:	f7ff ff42 	bl	8002a68 <__NVIC_GetPriorityGrouping>
 8002be4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	68b9      	ldr	r1, [r7, #8]
 8002bea:	6978      	ldr	r0, [r7, #20]
 8002bec:	f7ff ff90 	bl	8002b10 <NVIC_EncodePriority>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bf6:	4611      	mov	r1, r2
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7ff ff5f 	bl	8002abc <__NVIC_SetPriority>
}
 8002bfe:	bf00      	nop
 8002c00:	3718      	adds	r7, #24
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}

08002c06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c06:	b580      	push	{r7, lr}
 8002c08:	b082      	sub	sp, #8
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7ff ff35 	bl	8002a84 <__NVIC_EnableIRQ>
}
 8002c1a:	bf00      	nop
 8002c1c:	3708      	adds	r7, #8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c22:	b580      	push	{r7, lr}
 8002c24:	b082      	sub	sp, #8
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f7ff ffa2 	bl	8002b74 <SysTick_Config>
 8002c30:	4603      	mov	r3, r0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3708      	adds	r7, #8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
	...

08002c3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b08b      	sub	sp, #44	; 0x2c
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c46:	2300      	movs	r3, #0
 8002c48:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c4e:	e169      	b.n	8002f24 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002c50:	2201      	movs	r2, #1
 8002c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c54:	fa02 f303 	lsl.w	r3, r2, r3
 8002c58:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	69fa      	ldr	r2, [r7, #28]
 8002c60:	4013      	ands	r3, r2
 8002c62:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	f040 8158 	bne.w	8002f1e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	4a9a      	ldr	r2, [pc, #616]	; (8002edc <HAL_GPIO_Init+0x2a0>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d05e      	beq.n	8002d36 <HAL_GPIO_Init+0xfa>
 8002c78:	4a98      	ldr	r2, [pc, #608]	; (8002edc <HAL_GPIO_Init+0x2a0>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d875      	bhi.n	8002d6a <HAL_GPIO_Init+0x12e>
 8002c7e:	4a98      	ldr	r2, [pc, #608]	; (8002ee0 <HAL_GPIO_Init+0x2a4>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d058      	beq.n	8002d36 <HAL_GPIO_Init+0xfa>
 8002c84:	4a96      	ldr	r2, [pc, #600]	; (8002ee0 <HAL_GPIO_Init+0x2a4>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d86f      	bhi.n	8002d6a <HAL_GPIO_Init+0x12e>
 8002c8a:	4a96      	ldr	r2, [pc, #600]	; (8002ee4 <HAL_GPIO_Init+0x2a8>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d052      	beq.n	8002d36 <HAL_GPIO_Init+0xfa>
 8002c90:	4a94      	ldr	r2, [pc, #592]	; (8002ee4 <HAL_GPIO_Init+0x2a8>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d869      	bhi.n	8002d6a <HAL_GPIO_Init+0x12e>
 8002c96:	4a94      	ldr	r2, [pc, #592]	; (8002ee8 <HAL_GPIO_Init+0x2ac>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d04c      	beq.n	8002d36 <HAL_GPIO_Init+0xfa>
 8002c9c:	4a92      	ldr	r2, [pc, #584]	; (8002ee8 <HAL_GPIO_Init+0x2ac>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d863      	bhi.n	8002d6a <HAL_GPIO_Init+0x12e>
 8002ca2:	4a92      	ldr	r2, [pc, #584]	; (8002eec <HAL_GPIO_Init+0x2b0>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d046      	beq.n	8002d36 <HAL_GPIO_Init+0xfa>
 8002ca8:	4a90      	ldr	r2, [pc, #576]	; (8002eec <HAL_GPIO_Init+0x2b0>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d85d      	bhi.n	8002d6a <HAL_GPIO_Init+0x12e>
 8002cae:	2b12      	cmp	r3, #18
 8002cb0:	d82a      	bhi.n	8002d08 <HAL_GPIO_Init+0xcc>
 8002cb2:	2b12      	cmp	r3, #18
 8002cb4:	d859      	bhi.n	8002d6a <HAL_GPIO_Init+0x12e>
 8002cb6:	a201      	add	r2, pc, #4	; (adr r2, 8002cbc <HAL_GPIO_Init+0x80>)
 8002cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cbc:	08002d37 	.word	0x08002d37
 8002cc0:	08002d11 	.word	0x08002d11
 8002cc4:	08002d23 	.word	0x08002d23
 8002cc8:	08002d65 	.word	0x08002d65
 8002ccc:	08002d6b 	.word	0x08002d6b
 8002cd0:	08002d6b 	.word	0x08002d6b
 8002cd4:	08002d6b 	.word	0x08002d6b
 8002cd8:	08002d6b 	.word	0x08002d6b
 8002cdc:	08002d6b 	.word	0x08002d6b
 8002ce0:	08002d6b 	.word	0x08002d6b
 8002ce4:	08002d6b 	.word	0x08002d6b
 8002ce8:	08002d6b 	.word	0x08002d6b
 8002cec:	08002d6b 	.word	0x08002d6b
 8002cf0:	08002d6b 	.word	0x08002d6b
 8002cf4:	08002d6b 	.word	0x08002d6b
 8002cf8:	08002d6b 	.word	0x08002d6b
 8002cfc:	08002d6b 	.word	0x08002d6b
 8002d00:	08002d19 	.word	0x08002d19
 8002d04:	08002d2d 	.word	0x08002d2d
 8002d08:	4a79      	ldr	r2, [pc, #484]	; (8002ef0 <HAL_GPIO_Init+0x2b4>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d013      	beq.n	8002d36 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002d0e:	e02c      	b.n	8002d6a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	623b      	str	r3, [r7, #32]
          break;
 8002d16:	e029      	b.n	8002d6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	3304      	adds	r3, #4
 8002d1e:	623b      	str	r3, [r7, #32]
          break;
 8002d20:	e024      	b.n	8002d6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	3308      	adds	r3, #8
 8002d28:	623b      	str	r3, [r7, #32]
          break;
 8002d2a:	e01f      	b.n	8002d6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	330c      	adds	r3, #12
 8002d32:	623b      	str	r3, [r7, #32]
          break;
 8002d34:	e01a      	b.n	8002d6c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d102      	bne.n	8002d44 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002d3e:	2304      	movs	r3, #4
 8002d40:	623b      	str	r3, [r7, #32]
          break;
 8002d42:	e013      	b.n	8002d6c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d105      	bne.n	8002d58 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d4c:	2308      	movs	r3, #8
 8002d4e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	69fa      	ldr	r2, [r7, #28]
 8002d54:	611a      	str	r2, [r3, #16]
          break;
 8002d56:	e009      	b.n	8002d6c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d58:	2308      	movs	r3, #8
 8002d5a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	69fa      	ldr	r2, [r7, #28]
 8002d60:	615a      	str	r2, [r3, #20]
          break;
 8002d62:	e003      	b.n	8002d6c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002d64:	2300      	movs	r3, #0
 8002d66:	623b      	str	r3, [r7, #32]
          break;
 8002d68:	e000      	b.n	8002d6c <HAL_GPIO_Init+0x130>
          break;
 8002d6a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	2bff      	cmp	r3, #255	; 0xff
 8002d70:	d801      	bhi.n	8002d76 <HAL_GPIO_Init+0x13a>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	e001      	b.n	8002d7a <HAL_GPIO_Init+0x13e>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	3304      	adds	r3, #4
 8002d7a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	2bff      	cmp	r3, #255	; 0xff
 8002d80:	d802      	bhi.n	8002d88 <HAL_GPIO_Init+0x14c>
 8002d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	e002      	b.n	8002d8e <HAL_GPIO_Init+0x152>
 8002d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8a:	3b08      	subs	r3, #8
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	210f      	movs	r1, #15
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	fa01 f303 	lsl.w	r3, r1, r3
 8002d9c:	43db      	mvns	r3, r3
 8002d9e:	401a      	ands	r2, r3
 8002da0:	6a39      	ldr	r1, [r7, #32]
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	fa01 f303 	lsl.w	r3, r1, r3
 8002da8:	431a      	orrs	r2, r3
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	f000 80b1 	beq.w	8002f1e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002dbc:	4b4d      	ldr	r3, [pc, #308]	; (8002ef4 <HAL_GPIO_Init+0x2b8>)
 8002dbe:	699b      	ldr	r3, [r3, #24]
 8002dc0:	4a4c      	ldr	r2, [pc, #304]	; (8002ef4 <HAL_GPIO_Init+0x2b8>)
 8002dc2:	f043 0301 	orr.w	r3, r3, #1
 8002dc6:	6193      	str	r3, [r2, #24]
 8002dc8:	4b4a      	ldr	r3, [pc, #296]	; (8002ef4 <HAL_GPIO_Init+0x2b8>)
 8002dca:	699b      	ldr	r3, [r3, #24]
 8002dcc:	f003 0301 	and.w	r3, r3, #1
 8002dd0:	60bb      	str	r3, [r7, #8]
 8002dd2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002dd4:	4a48      	ldr	r2, [pc, #288]	; (8002ef8 <HAL_GPIO_Init+0x2bc>)
 8002dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd8:	089b      	lsrs	r3, r3, #2
 8002dda:	3302      	adds	r3, #2
 8002ddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002de0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de4:	f003 0303 	and.w	r3, r3, #3
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	220f      	movs	r2, #15
 8002dec:	fa02 f303 	lsl.w	r3, r2, r3
 8002df0:	43db      	mvns	r3, r3
 8002df2:	68fa      	ldr	r2, [r7, #12]
 8002df4:	4013      	ands	r3, r2
 8002df6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4a40      	ldr	r2, [pc, #256]	; (8002efc <HAL_GPIO_Init+0x2c0>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d013      	beq.n	8002e28 <HAL_GPIO_Init+0x1ec>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4a3f      	ldr	r2, [pc, #252]	; (8002f00 <HAL_GPIO_Init+0x2c4>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d00d      	beq.n	8002e24 <HAL_GPIO_Init+0x1e8>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4a3e      	ldr	r2, [pc, #248]	; (8002f04 <HAL_GPIO_Init+0x2c8>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d007      	beq.n	8002e20 <HAL_GPIO_Init+0x1e4>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4a3d      	ldr	r2, [pc, #244]	; (8002f08 <HAL_GPIO_Init+0x2cc>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d101      	bne.n	8002e1c <HAL_GPIO_Init+0x1e0>
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e006      	b.n	8002e2a <HAL_GPIO_Init+0x1ee>
 8002e1c:	2304      	movs	r3, #4
 8002e1e:	e004      	b.n	8002e2a <HAL_GPIO_Init+0x1ee>
 8002e20:	2302      	movs	r3, #2
 8002e22:	e002      	b.n	8002e2a <HAL_GPIO_Init+0x1ee>
 8002e24:	2301      	movs	r3, #1
 8002e26:	e000      	b.n	8002e2a <HAL_GPIO_Init+0x1ee>
 8002e28:	2300      	movs	r3, #0
 8002e2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e2c:	f002 0203 	and.w	r2, r2, #3
 8002e30:	0092      	lsls	r2, r2, #2
 8002e32:	4093      	lsls	r3, r2
 8002e34:	68fa      	ldr	r2, [r7, #12]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002e3a:	492f      	ldr	r1, [pc, #188]	; (8002ef8 <HAL_GPIO_Init+0x2bc>)
 8002e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3e:	089b      	lsrs	r3, r3, #2
 8002e40:	3302      	adds	r3, #2
 8002e42:	68fa      	ldr	r2, [r7, #12]
 8002e44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d006      	beq.n	8002e62 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002e54:	4b2d      	ldr	r3, [pc, #180]	; (8002f0c <HAL_GPIO_Init+0x2d0>)
 8002e56:	689a      	ldr	r2, [r3, #8]
 8002e58:	492c      	ldr	r1, [pc, #176]	; (8002f0c <HAL_GPIO_Init+0x2d0>)
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	608b      	str	r3, [r1, #8]
 8002e60:	e006      	b.n	8002e70 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002e62:	4b2a      	ldr	r3, [pc, #168]	; (8002f0c <HAL_GPIO_Init+0x2d0>)
 8002e64:	689a      	ldr	r2, [r3, #8]
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	43db      	mvns	r3, r3
 8002e6a:	4928      	ldr	r1, [pc, #160]	; (8002f0c <HAL_GPIO_Init+0x2d0>)
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d006      	beq.n	8002e8a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002e7c:	4b23      	ldr	r3, [pc, #140]	; (8002f0c <HAL_GPIO_Init+0x2d0>)
 8002e7e:	68da      	ldr	r2, [r3, #12]
 8002e80:	4922      	ldr	r1, [pc, #136]	; (8002f0c <HAL_GPIO_Init+0x2d0>)
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	60cb      	str	r3, [r1, #12]
 8002e88:	e006      	b.n	8002e98 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002e8a:	4b20      	ldr	r3, [pc, #128]	; (8002f0c <HAL_GPIO_Init+0x2d0>)
 8002e8c:	68da      	ldr	r2, [r3, #12]
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	43db      	mvns	r3, r3
 8002e92:	491e      	ldr	r1, [pc, #120]	; (8002f0c <HAL_GPIO_Init+0x2d0>)
 8002e94:	4013      	ands	r3, r2
 8002e96:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d006      	beq.n	8002eb2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ea4:	4b19      	ldr	r3, [pc, #100]	; (8002f0c <HAL_GPIO_Init+0x2d0>)
 8002ea6:	685a      	ldr	r2, [r3, #4]
 8002ea8:	4918      	ldr	r1, [pc, #96]	; (8002f0c <HAL_GPIO_Init+0x2d0>)
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	604b      	str	r3, [r1, #4]
 8002eb0:	e006      	b.n	8002ec0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002eb2:	4b16      	ldr	r3, [pc, #88]	; (8002f0c <HAL_GPIO_Init+0x2d0>)
 8002eb4:	685a      	ldr	r2, [r3, #4]
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	43db      	mvns	r3, r3
 8002eba:	4914      	ldr	r1, [pc, #80]	; (8002f0c <HAL_GPIO_Init+0x2d0>)
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d021      	beq.n	8002f10 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ecc:	4b0f      	ldr	r3, [pc, #60]	; (8002f0c <HAL_GPIO_Init+0x2d0>)
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	490e      	ldr	r1, [pc, #56]	; (8002f0c <HAL_GPIO_Init+0x2d0>)
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	600b      	str	r3, [r1, #0]
 8002ed8:	e021      	b.n	8002f1e <HAL_GPIO_Init+0x2e2>
 8002eda:	bf00      	nop
 8002edc:	10320000 	.word	0x10320000
 8002ee0:	10310000 	.word	0x10310000
 8002ee4:	10220000 	.word	0x10220000
 8002ee8:	10210000 	.word	0x10210000
 8002eec:	10120000 	.word	0x10120000
 8002ef0:	10110000 	.word	0x10110000
 8002ef4:	40021000 	.word	0x40021000
 8002ef8:	40010000 	.word	0x40010000
 8002efc:	40010800 	.word	0x40010800
 8002f00:	40010c00 	.word	0x40010c00
 8002f04:	40011000 	.word	0x40011000
 8002f08:	40011400 	.word	0x40011400
 8002f0c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002f10:	4b0b      	ldr	r3, [pc, #44]	; (8002f40 <HAL_GPIO_Init+0x304>)
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	43db      	mvns	r3, r3
 8002f18:	4909      	ldr	r1, [pc, #36]	; (8002f40 <HAL_GPIO_Init+0x304>)
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f20:	3301      	adds	r3, #1
 8002f22:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	f47f ae8e 	bne.w	8002c50 <HAL_GPIO_Init+0x14>
  }
}
 8002f34:	bf00      	nop
 8002f36:	bf00      	nop
 8002f38:	372c      	adds	r7, #44	; 0x2c
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bc80      	pop	{r7}
 8002f3e:	4770      	bx	lr
 8002f40:	40010400 	.word	0x40010400

08002f44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	807b      	strh	r3, [r7, #2]
 8002f50:	4613      	mov	r3, r2
 8002f52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f54:	787b      	ldrb	r3, [r7, #1]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d003      	beq.n	8002f62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f5a:	887a      	ldrh	r2, [r7, #2]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002f60:	e003      	b.n	8002f6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002f62:	887b      	ldrh	r3, [r7, #2]
 8002f64:	041a      	lsls	r2, r3, #16
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	611a      	str	r2, [r3, #16]
}
 8002f6a:	bf00      	nop
 8002f6c:	370c      	adds	r7, #12
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bc80      	pop	{r7}
 8002f72:	4770      	bx	lr

08002f74 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002f7e:	4b08      	ldr	r3, [pc, #32]	; (8002fa0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f80:	695a      	ldr	r2, [r3, #20]
 8002f82:	88fb      	ldrh	r3, [r7, #6]
 8002f84:	4013      	ands	r3, r2
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d006      	beq.n	8002f98 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f8a:	4a05      	ldr	r2, [pc, #20]	; (8002fa0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f8c:	88fb      	ldrh	r3, [r7, #6]
 8002f8e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f90:	88fb      	ldrh	r3, [r7, #6]
 8002f92:	4618      	mov	r0, r3
 8002f94:	f000 f806 	bl	8002fa4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002f98:	bf00      	nop
 8002f9a:	3708      	adds	r7, #8
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	40010400 	.word	0x40010400

08002fa4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	4603      	mov	r3, r0
 8002fac:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002fae:	bf00      	nop
 8002fb0:	370c      	adds	r7, #12
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bc80      	pop	{r7}
 8002fb6:	4770      	bx	lr

08002fb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b086      	sub	sp, #24
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d101      	bne.n	8002fca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e272      	b.n	80034b0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0301 	and.w	r3, r3, #1
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	f000 8087 	beq.w	80030e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fd8:	4b92      	ldr	r3, [pc, #584]	; (8003224 <HAL_RCC_OscConfig+0x26c>)
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f003 030c 	and.w	r3, r3, #12
 8002fe0:	2b04      	cmp	r3, #4
 8002fe2:	d00c      	beq.n	8002ffe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002fe4:	4b8f      	ldr	r3, [pc, #572]	; (8003224 <HAL_RCC_OscConfig+0x26c>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f003 030c 	and.w	r3, r3, #12
 8002fec:	2b08      	cmp	r3, #8
 8002fee:	d112      	bne.n	8003016 <HAL_RCC_OscConfig+0x5e>
 8002ff0:	4b8c      	ldr	r3, [pc, #560]	; (8003224 <HAL_RCC_OscConfig+0x26c>)
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ff8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ffc:	d10b      	bne.n	8003016 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ffe:	4b89      	ldr	r3, [pc, #548]	; (8003224 <HAL_RCC_OscConfig+0x26c>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d06c      	beq.n	80030e4 <HAL_RCC_OscConfig+0x12c>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d168      	bne.n	80030e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e24c      	b.n	80034b0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800301e:	d106      	bne.n	800302e <HAL_RCC_OscConfig+0x76>
 8003020:	4b80      	ldr	r3, [pc, #512]	; (8003224 <HAL_RCC_OscConfig+0x26c>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a7f      	ldr	r2, [pc, #508]	; (8003224 <HAL_RCC_OscConfig+0x26c>)
 8003026:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800302a:	6013      	str	r3, [r2, #0]
 800302c:	e02e      	b.n	800308c <HAL_RCC_OscConfig+0xd4>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d10c      	bne.n	8003050 <HAL_RCC_OscConfig+0x98>
 8003036:	4b7b      	ldr	r3, [pc, #492]	; (8003224 <HAL_RCC_OscConfig+0x26c>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a7a      	ldr	r2, [pc, #488]	; (8003224 <HAL_RCC_OscConfig+0x26c>)
 800303c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003040:	6013      	str	r3, [r2, #0]
 8003042:	4b78      	ldr	r3, [pc, #480]	; (8003224 <HAL_RCC_OscConfig+0x26c>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a77      	ldr	r2, [pc, #476]	; (8003224 <HAL_RCC_OscConfig+0x26c>)
 8003048:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800304c:	6013      	str	r3, [r2, #0]
 800304e:	e01d      	b.n	800308c <HAL_RCC_OscConfig+0xd4>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003058:	d10c      	bne.n	8003074 <HAL_RCC_OscConfig+0xbc>
 800305a:	4b72      	ldr	r3, [pc, #456]	; (8003224 <HAL_RCC_OscConfig+0x26c>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a71      	ldr	r2, [pc, #452]	; (8003224 <HAL_RCC_OscConfig+0x26c>)
 8003060:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003064:	6013      	str	r3, [r2, #0]
 8003066:	4b6f      	ldr	r3, [pc, #444]	; (8003224 <HAL_RCC_OscConfig+0x26c>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a6e      	ldr	r2, [pc, #440]	; (8003224 <HAL_RCC_OscConfig+0x26c>)
 800306c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003070:	6013      	str	r3, [r2, #0]
 8003072:	e00b      	b.n	800308c <HAL_RCC_OscConfig+0xd4>
 8003074:	4b6b      	ldr	r3, [pc, #428]	; (8003224 <HAL_RCC_OscConfig+0x26c>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a6a      	ldr	r2, [pc, #424]	; (8003224 <HAL_RCC_OscConfig+0x26c>)
 800307a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800307e:	6013      	str	r3, [r2, #0]
 8003080:	4b68      	ldr	r3, [pc, #416]	; (8003224 <HAL_RCC_OscConfig+0x26c>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a67      	ldr	r2, [pc, #412]	; (8003224 <HAL_RCC_OscConfig+0x26c>)
 8003086:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800308a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d013      	beq.n	80030bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003094:	f7ff fc96 	bl	80029c4 <HAL_GetTick>
 8003098:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800309a:	e008      	b.n	80030ae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800309c:	f7ff fc92 	bl	80029c4 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	2b64      	cmp	r3, #100	; 0x64
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e200      	b.n	80034b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ae:	4b5d      	ldr	r3, [pc, #372]	; (8003224 <HAL_RCC_OscConfig+0x26c>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d0f0      	beq.n	800309c <HAL_RCC_OscConfig+0xe4>
 80030ba:	e014      	b.n	80030e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030bc:	f7ff fc82 	bl	80029c4 <HAL_GetTick>
 80030c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030c2:	e008      	b.n	80030d6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030c4:	f7ff fc7e 	bl	80029c4 <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	2b64      	cmp	r3, #100	; 0x64
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e1ec      	b.n	80034b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030d6:	4b53      	ldr	r3, [pc, #332]	; (8003224 <HAL_RCC_OscConfig+0x26c>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1f0      	bne.n	80030c4 <HAL_RCC_OscConfig+0x10c>
 80030e2:	e000      	b.n	80030e6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d063      	beq.n	80031ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80030f2:	4b4c      	ldr	r3, [pc, #304]	; (8003224 <HAL_RCC_OscConfig+0x26c>)
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f003 030c 	and.w	r3, r3, #12
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00b      	beq.n	8003116 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80030fe:	4b49      	ldr	r3, [pc, #292]	; (8003224 <HAL_RCC_OscConfig+0x26c>)
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f003 030c 	and.w	r3, r3, #12
 8003106:	2b08      	cmp	r3, #8
 8003108:	d11c      	bne.n	8003144 <HAL_RCC_OscConfig+0x18c>
 800310a:	4b46      	ldr	r3, [pc, #280]	; (8003224 <HAL_RCC_OscConfig+0x26c>)
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d116      	bne.n	8003144 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003116:	4b43      	ldr	r3, [pc, #268]	; (8003224 <HAL_RCC_OscConfig+0x26c>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d005      	beq.n	800312e <HAL_RCC_OscConfig+0x176>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	2b01      	cmp	r3, #1
 8003128:	d001      	beq.n	800312e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e1c0      	b.n	80034b0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800312e:	4b3d      	ldr	r3, [pc, #244]	; (8003224 <HAL_RCC_OscConfig+0x26c>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	695b      	ldr	r3, [r3, #20]
 800313a:	00db      	lsls	r3, r3, #3
 800313c:	4939      	ldr	r1, [pc, #228]	; (8003224 <HAL_RCC_OscConfig+0x26c>)
 800313e:	4313      	orrs	r3, r2
 8003140:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003142:	e03a      	b.n	80031ba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	691b      	ldr	r3, [r3, #16]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d020      	beq.n	800318e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800314c:	4b36      	ldr	r3, [pc, #216]	; (8003228 <HAL_RCC_OscConfig+0x270>)
 800314e:	2201      	movs	r2, #1
 8003150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003152:	f7ff fc37 	bl	80029c4 <HAL_GetTick>
 8003156:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003158:	e008      	b.n	800316c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800315a:	f7ff fc33 	bl	80029c4 <HAL_GetTick>
 800315e:	4602      	mov	r2, r0
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	2b02      	cmp	r3, #2
 8003166:	d901      	bls.n	800316c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003168:	2303      	movs	r3, #3
 800316a:	e1a1      	b.n	80034b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800316c:	4b2d      	ldr	r3, [pc, #180]	; (8003224 <HAL_RCC_OscConfig+0x26c>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0302 	and.w	r3, r3, #2
 8003174:	2b00      	cmp	r3, #0
 8003176:	d0f0      	beq.n	800315a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003178:	4b2a      	ldr	r3, [pc, #168]	; (8003224 <HAL_RCC_OscConfig+0x26c>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	695b      	ldr	r3, [r3, #20]
 8003184:	00db      	lsls	r3, r3, #3
 8003186:	4927      	ldr	r1, [pc, #156]	; (8003224 <HAL_RCC_OscConfig+0x26c>)
 8003188:	4313      	orrs	r3, r2
 800318a:	600b      	str	r3, [r1, #0]
 800318c:	e015      	b.n	80031ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800318e:	4b26      	ldr	r3, [pc, #152]	; (8003228 <HAL_RCC_OscConfig+0x270>)
 8003190:	2200      	movs	r2, #0
 8003192:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003194:	f7ff fc16 	bl	80029c4 <HAL_GetTick>
 8003198:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800319a:	e008      	b.n	80031ae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800319c:	f7ff fc12 	bl	80029c4 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e180      	b.n	80034b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ae:	4b1d      	ldr	r3, [pc, #116]	; (8003224 <HAL_RCC_OscConfig+0x26c>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0302 	and.w	r3, r3, #2
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d1f0      	bne.n	800319c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0308 	and.w	r3, r3, #8
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d03a      	beq.n	800323c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d019      	beq.n	8003202 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031ce:	4b17      	ldr	r3, [pc, #92]	; (800322c <HAL_RCC_OscConfig+0x274>)
 80031d0:	2201      	movs	r2, #1
 80031d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031d4:	f7ff fbf6 	bl	80029c4 <HAL_GetTick>
 80031d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031da:	e008      	b.n	80031ee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031dc:	f7ff fbf2 	bl	80029c4 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e160      	b.n	80034b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031ee:	4b0d      	ldr	r3, [pc, #52]	; (8003224 <HAL_RCC_OscConfig+0x26c>)
 80031f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f2:	f003 0302 	and.w	r3, r3, #2
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d0f0      	beq.n	80031dc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80031fa:	2001      	movs	r0, #1
 80031fc:	f000 face 	bl	800379c <RCC_Delay>
 8003200:	e01c      	b.n	800323c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003202:	4b0a      	ldr	r3, [pc, #40]	; (800322c <HAL_RCC_OscConfig+0x274>)
 8003204:	2200      	movs	r2, #0
 8003206:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003208:	f7ff fbdc 	bl	80029c4 <HAL_GetTick>
 800320c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800320e:	e00f      	b.n	8003230 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003210:	f7ff fbd8 	bl	80029c4 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b02      	cmp	r3, #2
 800321c:	d908      	bls.n	8003230 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e146      	b.n	80034b0 <HAL_RCC_OscConfig+0x4f8>
 8003222:	bf00      	nop
 8003224:	40021000 	.word	0x40021000
 8003228:	42420000 	.word	0x42420000
 800322c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003230:	4b92      	ldr	r3, [pc, #584]	; (800347c <HAL_RCC_OscConfig+0x4c4>)
 8003232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003234:	f003 0302 	and.w	r3, r3, #2
 8003238:	2b00      	cmp	r3, #0
 800323a:	d1e9      	bne.n	8003210 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0304 	and.w	r3, r3, #4
 8003244:	2b00      	cmp	r3, #0
 8003246:	f000 80a6 	beq.w	8003396 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800324a:	2300      	movs	r3, #0
 800324c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800324e:	4b8b      	ldr	r3, [pc, #556]	; (800347c <HAL_RCC_OscConfig+0x4c4>)
 8003250:	69db      	ldr	r3, [r3, #28]
 8003252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d10d      	bne.n	8003276 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800325a:	4b88      	ldr	r3, [pc, #544]	; (800347c <HAL_RCC_OscConfig+0x4c4>)
 800325c:	69db      	ldr	r3, [r3, #28]
 800325e:	4a87      	ldr	r2, [pc, #540]	; (800347c <HAL_RCC_OscConfig+0x4c4>)
 8003260:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003264:	61d3      	str	r3, [r2, #28]
 8003266:	4b85      	ldr	r3, [pc, #532]	; (800347c <HAL_RCC_OscConfig+0x4c4>)
 8003268:	69db      	ldr	r3, [r3, #28]
 800326a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800326e:	60bb      	str	r3, [r7, #8]
 8003270:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003272:	2301      	movs	r3, #1
 8003274:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003276:	4b82      	ldr	r3, [pc, #520]	; (8003480 <HAL_RCC_OscConfig+0x4c8>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800327e:	2b00      	cmp	r3, #0
 8003280:	d118      	bne.n	80032b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003282:	4b7f      	ldr	r3, [pc, #508]	; (8003480 <HAL_RCC_OscConfig+0x4c8>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a7e      	ldr	r2, [pc, #504]	; (8003480 <HAL_RCC_OscConfig+0x4c8>)
 8003288:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800328c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800328e:	f7ff fb99 	bl	80029c4 <HAL_GetTick>
 8003292:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003294:	e008      	b.n	80032a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003296:	f7ff fb95 	bl	80029c4 <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	2b64      	cmp	r3, #100	; 0x64
 80032a2:	d901      	bls.n	80032a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e103      	b.n	80034b0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032a8:	4b75      	ldr	r3, [pc, #468]	; (8003480 <HAL_RCC_OscConfig+0x4c8>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d0f0      	beq.n	8003296 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d106      	bne.n	80032ca <HAL_RCC_OscConfig+0x312>
 80032bc:	4b6f      	ldr	r3, [pc, #444]	; (800347c <HAL_RCC_OscConfig+0x4c4>)
 80032be:	6a1b      	ldr	r3, [r3, #32]
 80032c0:	4a6e      	ldr	r2, [pc, #440]	; (800347c <HAL_RCC_OscConfig+0x4c4>)
 80032c2:	f043 0301 	orr.w	r3, r3, #1
 80032c6:	6213      	str	r3, [r2, #32]
 80032c8:	e02d      	b.n	8003326 <HAL_RCC_OscConfig+0x36e>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d10c      	bne.n	80032ec <HAL_RCC_OscConfig+0x334>
 80032d2:	4b6a      	ldr	r3, [pc, #424]	; (800347c <HAL_RCC_OscConfig+0x4c4>)
 80032d4:	6a1b      	ldr	r3, [r3, #32]
 80032d6:	4a69      	ldr	r2, [pc, #420]	; (800347c <HAL_RCC_OscConfig+0x4c4>)
 80032d8:	f023 0301 	bic.w	r3, r3, #1
 80032dc:	6213      	str	r3, [r2, #32]
 80032de:	4b67      	ldr	r3, [pc, #412]	; (800347c <HAL_RCC_OscConfig+0x4c4>)
 80032e0:	6a1b      	ldr	r3, [r3, #32]
 80032e2:	4a66      	ldr	r2, [pc, #408]	; (800347c <HAL_RCC_OscConfig+0x4c4>)
 80032e4:	f023 0304 	bic.w	r3, r3, #4
 80032e8:	6213      	str	r3, [r2, #32]
 80032ea:	e01c      	b.n	8003326 <HAL_RCC_OscConfig+0x36e>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	2b05      	cmp	r3, #5
 80032f2:	d10c      	bne.n	800330e <HAL_RCC_OscConfig+0x356>
 80032f4:	4b61      	ldr	r3, [pc, #388]	; (800347c <HAL_RCC_OscConfig+0x4c4>)
 80032f6:	6a1b      	ldr	r3, [r3, #32]
 80032f8:	4a60      	ldr	r2, [pc, #384]	; (800347c <HAL_RCC_OscConfig+0x4c4>)
 80032fa:	f043 0304 	orr.w	r3, r3, #4
 80032fe:	6213      	str	r3, [r2, #32]
 8003300:	4b5e      	ldr	r3, [pc, #376]	; (800347c <HAL_RCC_OscConfig+0x4c4>)
 8003302:	6a1b      	ldr	r3, [r3, #32]
 8003304:	4a5d      	ldr	r2, [pc, #372]	; (800347c <HAL_RCC_OscConfig+0x4c4>)
 8003306:	f043 0301 	orr.w	r3, r3, #1
 800330a:	6213      	str	r3, [r2, #32]
 800330c:	e00b      	b.n	8003326 <HAL_RCC_OscConfig+0x36e>
 800330e:	4b5b      	ldr	r3, [pc, #364]	; (800347c <HAL_RCC_OscConfig+0x4c4>)
 8003310:	6a1b      	ldr	r3, [r3, #32]
 8003312:	4a5a      	ldr	r2, [pc, #360]	; (800347c <HAL_RCC_OscConfig+0x4c4>)
 8003314:	f023 0301 	bic.w	r3, r3, #1
 8003318:	6213      	str	r3, [r2, #32]
 800331a:	4b58      	ldr	r3, [pc, #352]	; (800347c <HAL_RCC_OscConfig+0x4c4>)
 800331c:	6a1b      	ldr	r3, [r3, #32]
 800331e:	4a57      	ldr	r2, [pc, #348]	; (800347c <HAL_RCC_OscConfig+0x4c4>)
 8003320:	f023 0304 	bic.w	r3, r3, #4
 8003324:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d015      	beq.n	800335a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800332e:	f7ff fb49 	bl	80029c4 <HAL_GetTick>
 8003332:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003334:	e00a      	b.n	800334c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003336:	f7ff fb45 	bl	80029c4 <HAL_GetTick>
 800333a:	4602      	mov	r2, r0
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	f241 3288 	movw	r2, #5000	; 0x1388
 8003344:	4293      	cmp	r3, r2
 8003346:	d901      	bls.n	800334c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	e0b1      	b.n	80034b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800334c:	4b4b      	ldr	r3, [pc, #300]	; (800347c <HAL_RCC_OscConfig+0x4c4>)
 800334e:	6a1b      	ldr	r3, [r3, #32]
 8003350:	f003 0302 	and.w	r3, r3, #2
 8003354:	2b00      	cmp	r3, #0
 8003356:	d0ee      	beq.n	8003336 <HAL_RCC_OscConfig+0x37e>
 8003358:	e014      	b.n	8003384 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800335a:	f7ff fb33 	bl	80029c4 <HAL_GetTick>
 800335e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003360:	e00a      	b.n	8003378 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003362:	f7ff fb2f 	bl	80029c4 <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003370:	4293      	cmp	r3, r2
 8003372:	d901      	bls.n	8003378 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e09b      	b.n	80034b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003378:	4b40      	ldr	r3, [pc, #256]	; (800347c <HAL_RCC_OscConfig+0x4c4>)
 800337a:	6a1b      	ldr	r3, [r3, #32]
 800337c:	f003 0302 	and.w	r3, r3, #2
 8003380:	2b00      	cmp	r3, #0
 8003382:	d1ee      	bne.n	8003362 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003384:	7dfb      	ldrb	r3, [r7, #23]
 8003386:	2b01      	cmp	r3, #1
 8003388:	d105      	bne.n	8003396 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800338a:	4b3c      	ldr	r3, [pc, #240]	; (800347c <HAL_RCC_OscConfig+0x4c4>)
 800338c:	69db      	ldr	r3, [r3, #28]
 800338e:	4a3b      	ldr	r2, [pc, #236]	; (800347c <HAL_RCC_OscConfig+0x4c4>)
 8003390:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003394:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	69db      	ldr	r3, [r3, #28]
 800339a:	2b00      	cmp	r3, #0
 800339c:	f000 8087 	beq.w	80034ae <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033a0:	4b36      	ldr	r3, [pc, #216]	; (800347c <HAL_RCC_OscConfig+0x4c4>)
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f003 030c 	and.w	r3, r3, #12
 80033a8:	2b08      	cmp	r3, #8
 80033aa:	d061      	beq.n	8003470 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	69db      	ldr	r3, [r3, #28]
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d146      	bne.n	8003442 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033b4:	4b33      	ldr	r3, [pc, #204]	; (8003484 <HAL_RCC_OscConfig+0x4cc>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ba:	f7ff fb03 	bl	80029c4 <HAL_GetTick>
 80033be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033c0:	e008      	b.n	80033d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033c2:	f7ff faff 	bl	80029c4 <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d901      	bls.n	80033d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e06d      	b.n	80034b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033d4:	4b29      	ldr	r3, [pc, #164]	; (800347c <HAL_RCC_OscConfig+0x4c4>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d1f0      	bne.n	80033c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a1b      	ldr	r3, [r3, #32]
 80033e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033e8:	d108      	bne.n	80033fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80033ea:	4b24      	ldr	r3, [pc, #144]	; (800347c <HAL_RCC_OscConfig+0x4c4>)
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	4921      	ldr	r1, [pc, #132]	; (800347c <HAL_RCC_OscConfig+0x4c4>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033fc:	4b1f      	ldr	r3, [pc, #124]	; (800347c <HAL_RCC_OscConfig+0x4c4>)
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6a19      	ldr	r1, [r3, #32]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340c:	430b      	orrs	r3, r1
 800340e:	491b      	ldr	r1, [pc, #108]	; (800347c <HAL_RCC_OscConfig+0x4c4>)
 8003410:	4313      	orrs	r3, r2
 8003412:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003414:	4b1b      	ldr	r3, [pc, #108]	; (8003484 <HAL_RCC_OscConfig+0x4cc>)
 8003416:	2201      	movs	r2, #1
 8003418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800341a:	f7ff fad3 	bl	80029c4 <HAL_GetTick>
 800341e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003420:	e008      	b.n	8003434 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003422:	f7ff facf 	bl	80029c4 <HAL_GetTick>
 8003426:	4602      	mov	r2, r0
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	2b02      	cmp	r3, #2
 800342e:	d901      	bls.n	8003434 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003430:	2303      	movs	r3, #3
 8003432:	e03d      	b.n	80034b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003434:	4b11      	ldr	r3, [pc, #68]	; (800347c <HAL_RCC_OscConfig+0x4c4>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d0f0      	beq.n	8003422 <HAL_RCC_OscConfig+0x46a>
 8003440:	e035      	b.n	80034ae <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003442:	4b10      	ldr	r3, [pc, #64]	; (8003484 <HAL_RCC_OscConfig+0x4cc>)
 8003444:	2200      	movs	r2, #0
 8003446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003448:	f7ff fabc 	bl	80029c4 <HAL_GetTick>
 800344c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800344e:	e008      	b.n	8003462 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003450:	f7ff fab8 	bl	80029c4 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b02      	cmp	r3, #2
 800345c:	d901      	bls.n	8003462 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e026      	b.n	80034b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003462:	4b06      	ldr	r3, [pc, #24]	; (800347c <HAL_RCC_OscConfig+0x4c4>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1f0      	bne.n	8003450 <HAL_RCC_OscConfig+0x498>
 800346e:	e01e      	b.n	80034ae <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	69db      	ldr	r3, [r3, #28]
 8003474:	2b01      	cmp	r3, #1
 8003476:	d107      	bne.n	8003488 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e019      	b.n	80034b0 <HAL_RCC_OscConfig+0x4f8>
 800347c:	40021000 	.word	0x40021000
 8003480:	40007000 	.word	0x40007000
 8003484:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003488:	4b0b      	ldr	r3, [pc, #44]	; (80034b8 <HAL_RCC_OscConfig+0x500>)
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a1b      	ldr	r3, [r3, #32]
 8003498:	429a      	cmp	r2, r3
 800349a:	d106      	bne.n	80034aa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d001      	beq.n	80034ae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e000      	b.n	80034b0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80034ae:	2300      	movs	r3, #0
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3718      	adds	r7, #24
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	40021000 	.word	0x40021000

080034bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d101      	bne.n	80034d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e0d0      	b.n	8003672 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034d0:	4b6a      	ldr	r3, [pc, #424]	; (800367c <HAL_RCC_ClockConfig+0x1c0>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0307 	and.w	r3, r3, #7
 80034d8:	683a      	ldr	r2, [r7, #0]
 80034da:	429a      	cmp	r2, r3
 80034dc:	d910      	bls.n	8003500 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034de:	4b67      	ldr	r3, [pc, #412]	; (800367c <HAL_RCC_ClockConfig+0x1c0>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f023 0207 	bic.w	r2, r3, #7
 80034e6:	4965      	ldr	r1, [pc, #404]	; (800367c <HAL_RCC_ClockConfig+0x1c0>)
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ee:	4b63      	ldr	r3, [pc, #396]	; (800367c <HAL_RCC_ClockConfig+0x1c0>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0307 	and.w	r3, r3, #7
 80034f6:	683a      	ldr	r2, [r7, #0]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d001      	beq.n	8003500 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e0b8      	b.n	8003672 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0302 	and.w	r3, r3, #2
 8003508:	2b00      	cmp	r3, #0
 800350a:	d020      	beq.n	800354e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0304 	and.w	r3, r3, #4
 8003514:	2b00      	cmp	r3, #0
 8003516:	d005      	beq.n	8003524 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003518:	4b59      	ldr	r3, [pc, #356]	; (8003680 <HAL_RCC_ClockConfig+0x1c4>)
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	4a58      	ldr	r2, [pc, #352]	; (8003680 <HAL_RCC_ClockConfig+0x1c4>)
 800351e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003522:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0308 	and.w	r3, r3, #8
 800352c:	2b00      	cmp	r3, #0
 800352e:	d005      	beq.n	800353c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003530:	4b53      	ldr	r3, [pc, #332]	; (8003680 <HAL_RCC_ClockConfig+0x1c4>)
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	4a52      	ldr	r2, [pc, #328]	; (8003680 <HAL_RCC_ClockConfig+0x1c4>)
 8003536:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800353a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800353c:	4b50      	ldr	r3, [pc, #320]	; (8003680 <HAL_RCC_ClockConfig+0x1c4>)
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	494d      	ldr	r1, [pc, #308]	; (8003680 <HAL_RCC_ClockConfig+0x1c4>)
 800354a:	4313      	orrs	r3, r2
 800354c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0301 	and.w	r3, r3, #1
 8003556:	2b00      	cmp	r3, #0
 8003558:	d040      	beq.n	80035dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	2b01      	cmp	r3, #1
 8003560:	d107      	bne.n	8003572 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003562:	4b47      	ldr	r3, [pc, #284]	; (8003680 <HAL_RCC_ClockConfig+0x1c4>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d115      	bne.n	800359a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e07f      	b.n	8003672 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	2b02      	cmp	r3, #2
 8003578:	d107      	bne.n	800358a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800357a:	4b41      	ldr	r3, [pc, #260]	; (8003680 <HAL_RCC_ClockConfig+0x1c4>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d109      	bne.n	800359a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e073      	b.n	8003672 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800358a:	4b3d      	ldr	r3, [pc, #244]	; (8003680 <HAL_RCC_ClockConfig+0x1c4>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	2b00      	cmp	r3, #0
 8003594:	d101      	bne.n	800359a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e06b      	b.n	8003672 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800359a:	4b39      	ldr	r3, [pc, #228]	; (8003680 <HAL_RCC_ClockConfig+0x1c4>)
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f023 0203 	bic.w	r2, r3, #3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	4936      	ldr	r1, [pc, #216]	; (8003680 <HAL_RCC_ClockConfig+0x1c4>)
 80035a8:	4313      	orrs	r3, r2
 80035aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035ac:	f7ff fa0a 	bl	80029c4 <HAL_GetTick>
 80035b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035b2:	e00a      	b.n	80035ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035b4:	f7ff fa06 	bl	80029c4 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	f241 3288 	movw	r2, #5000	; 0x1388
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d901      	bls.n	80035ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e053      	b.n	8003672 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ca:	4b2d      	ldr	r3, [pc, #180]	; (8003680 <HAL_RCC_ClockConfig+0x1c4>)
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f003 020c 	and.w	r2, r3, #12
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	429a      	cmp	r2, r3
 80035da:	d1eb      	bne.n	80035b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035dc:	4b27      	ldr	r3, [pc, #156]	; (800367c <HAL_RCC_ClockConfig+0x1c0>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0307 	and.w	r3, r3, #7
 80035e4:	683a      	ldr	r2, [r7, #0]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d210      	bcs.n	800360c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ea:	4b24      	ldr	r3, [pc, #144]	; (800367c <HAL_RCC_ClockConfig+0x1c0>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f023 0207 	bic.w	r2, r3, #7
 80035f2:	4922      	ldr	r1, [pc, #136]	; (800367c <HAL_RCC_ClockConfig+0x1c0>)
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035fa:	4b20      	ldr	r3, [pc, #128]	; (800367c <HAL_RCC_ClockConfig+0x1c0>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0307 	and.w	r3, r3, #7
 8003602:	683a      	ldr	r2, [r7, #0]
 8003604:	429a      	cmp	r2, r3
 8003606:	d001      	beq.n	800360c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e032      	b.n	8003672 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0304 	and.w	r3, r3, #4
 8003614:	2b00      	cmp	r3, #0
 8003616:	d008      	beq.n	800362a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003618:	4b19      	ldr	r3, [pc, #100]	; (8003680 <HAL_RCC_ClockConfig+0x1c4>)
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	4916      	ldr	r1, [pc, #88]	; (8003680 <HAL_RCC_ClockConfig+0x1c4>)
 8003626:	4313      	orrs	r3, r2
 8003628:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0308 	and.w	r3, r3, #8
 8003632:	2b00      	cmp	r3, #0
 8003634:	d009      	beq.n	800364a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003636:	4b12      	ldr	r3, [pc, #72]	; (8003680 <HAL_RCC_ClockConfig+0x1c4>)
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	00db      	lsls	r3, r3, #3
 8003644:	490e      	ldr	r1, [pc, #56]	; (8003680 <HAL_RCC_ClockConfig+0x1c4>)
 8003646:	4313      	orrs	r3, r2
 8003648:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800364a:	f000 f821 	bl	8003690 <HAL_RCC_GetSysClockFreq>
 800364e:	4602      	mov	r2, r0
 8003650:	4b0b      	ldr	r3, [pc, #44]	; (8003680 <HAL_RCC_ClockConfig+0x1c4>)
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	091b      	lsrs	r3, r3, #4
 8003656:	f003 030f 	and.w	r3, r3, #15
 800365a:	490a      	ldr	r1, [pc, #40]	; (8003684 <HAL_RCC_ClockConfig+0x1c8>)
 800365c:	5ccb      	ldrb	r3, [r1, r3]
 800365e:	fa22 f303 	lsr.w	r3, r2, r3
 8003662:	4a09      	ldr	r2, [pc, #36]	; (8003688 <HAL_RCC_ClockConfig+0x1cc>)
 8003664:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003666:	4b09      	ldr	r3, [pc, #36]	; (800368c <HAL_RCC_ClockConfig+0x1d0>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4618      	mov	r0, r3
 800366c:	f7ff f968 	bl	8002940 <HAL_InitTick>

  return HAL_OK;
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3710      	adds	r7, #16
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	40022000 	.word	0x40022000
 8003680:	40021000 	.word	0x40021000
 8003684:	0800bb14 	.word	0x0800bb14
 8003688:	20000000 	.word	0x20000000
 800368c:	20000004 	.word	0x20000004

08003690 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003690:	b480      	push	{r7}
 8003692:	b087      	sub	sp, #28
 8003694:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003696:	2300      	movs	r3, #0
 8003698:	60fb      	str	r3, [r7, #12]
 800369a:	2300      	movs	r3, #0
 800369c:	60bb      	str	r3, [r7, #8]
 800369e:	2300      	movs	r3, #0
 80036a0:	617b      	str	r3, [r7, #20]
 80036a2:	2300      	movs	r3, #0
 80036a4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80036a6:	2300      	movs	r3, #0
 80036a8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80036aa:	4b1e      	ldr	r3, [pc, #120]	; (8003724 <HAL_RCC_GetSysClockFreq+0x94>)
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f003 030c 	and.w	r3, r3, #12
 80036b6:	2b04      	cmp	r3, #4
 80036b8:	d002      	beq.n	80036c0 <HAL_RCC_GetSysClockFreq+0x30>
 80036ba:	2b08      	cmp	r3, #8
 80036bc:	d003      	beq.n	80036c6 <HAL_RCC_GetSysClockFreq+0x36>
 80036be:	e027      	b.n	8003710 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80036c0:	4b19      	ldr	r3, [pc, #100]	; (8003728 <HAL_RCC_GetSysClockFreq+0x98>)
 80036c2:	613b      	str	r3, [r7, #16]
      break;
 80036c4:	e027      	b.n	8003716 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	0c9b      	lsrs	r3, r3, #18
 80036ca:	f003 030f 	and.w	r3, r3, #15
 80036ce:	4a17      	ldr	r2, [pc, #92]	; (800372c <HAL_RCC_GetSysClockFreq+0x9c>)
 80036d0:	5cd3      	ldrb	r3, [r2, r3]
 80036d2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d010      	beq.n	8003700 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80036de:	4b11      	ldr	r3, [pc, #68]	; (8003724 <HAL_RCC_GetSysClockFreq+0x94>)
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	0c5b      	lsrs	r3, r3, #17
 80036e4:	f003 0301 	and.w	r3, r3, #1
 80036e8:	4a11      	ldr	r2, [pc, #68]	; (8003730 <HAL_RCC_GetSysClockFreq+0xa0>)
 80036ea:	5cd3      	ldrb	r3, [r2, r3]
 80036ec:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a0d      	ldr	r2, [pc, #52]	; (8003728 <HAL_RCC_GetSysClockFreq+0x98>)
 80036f2:	fb03 f202 	mul.w	r2, r3, r2
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036fc:	617b      	str	r3, [r7, #20]
 80036fe:	e004      	b.n	800370a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	4a0c      	ldr	r2, [pc, #48]	; (8003734 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003704:	fb02 f303 	mul.w	r3, r2, r3
 8003708:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	613b      	str	r3, [r7, #16]
      break;
 800370e:	e002      	b.n	8003716 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003710:	4b05      	ldr	r3, [pc, #20]	; (8003728 <HAL_RCC_GetSysClockFreq+0x98>)
 8003712:	613b      	str	r3, [r7, #16]
      break;
 8003714:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003716:	693b      	ldr	r3, [r7, #16]
}
 8003718:	4618      	mov	r0, r3
 800371a:	371c      	adds	r7, #28
 800371c:	46bd      	mov	sp, r7
 800371e:	bc80      	pop	{r7}
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
 8003724:	40021000 	.word	0x40021000
 8003728:	007a1200 	.word	0x007a1200
 800372c:	0800bb2c 	.word	0x0800bb2c
 8003730:	0800bb3c 	.word	0x0800bb3c
 8003734:	003d0900 	.word	0x003d0900

08003738 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003738:	b480      	push	{r7}
 800373a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800373c:	4b02      	ldr	r3, [pc, #8]	; (8003748 <HAL_RCC_GetHCLKFreq+0x10>)
 800373e:	681b      	ldr	r3, [r3, #0]
}
 8003740:	4618      	mov	r0, r3
 8003742:	46bd      	mov	sp, r7
 8003744:	bc80      	pop	{r7}
 8003746:	4770      	bx	lr
 8003748:	20000000 	.word	0x20000000

0800374c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003750:	f7ff fff2 	bl	8003738 <HAL_RCC_GetHCLKFreq>
 8003754:	4602      	mov	r2, r0
 8003756:	4b05      	ldr	r3, [pc, #20]	; (800376c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	0a1b      	lsrs	r3, r3, #8
 800375c:	f003 0307 	and.w	r3, r3, #7
 8003760:	4903      	ldr	r1, [pc, #12]	; (8003770 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003762:	5ccb      	ldrb	r3, [r1, r3]
 8003764:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003768:	4618      	mov	r0, r3
 800376a:	bd80      	pop	{r7, pc}
 800376c:	40021000 	.word	0x40021000
 8003770:	0800bb24 	.word	0x0800bb24

08003774 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003778:	f7ff ffde 	bl	8003738 <HAL_RCC_GetHCLKFreq>
 800377c:	4602      	mov	r2, r0
 800377e:	4b05      	ldr	r3, [pc, #20]	; (8003794 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	0adb      	lsrs	r3, r3, #11
 8003784:	f003 0307 	and.w	r3, r3, #7
 8003788:	4903      	ldr	r1, [pc, #12]	; (8003798 <HAL_RCC_GetPCLK2Freq+0x24>)
 800378a:	5ccb      	ldrb	r3, [r1, r3]
 800378c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003790:	4618      	mov	r0, r3
 8003792:	bd80      	pop	{r7, pc}
 8003794:	40021000 	.word	0x40021000
 8003798:	0800bb24 	.word	0x0800bb24

0800379c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800379c:	b480      	push	{r7}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80037a4:	4b0a      	ldr	r3, [pc, #40]	; (80037d0 <RCC_Delay+0x34>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a0a      	ldr	r2, [pc, #40]	; (80037d4 <RCC_Delay+0x38>)
 80037aa:	fba2 2303 	umull	r2, r3, r2, r3
 80037ae:	0a5b      	lsrs	r3, r3, #9
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	fb02 f303 	mul.w	r3, r2, r3
 80037b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80037b8:	bf00      	nop
  }
  while (Delay --);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	1e5a      	subs	r2, r3, #1
 80037be:	60fa      	str	r2, [r7, #12]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d1f9      	bne.n	80037b8 <RCC_Delay+0x1c>
}
 80037c4:	bf00      	nop
 80037c6:	bf00      	nop
 80037c8:	3714      	adds	r7, #20
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bc80      	pop	{r7}
 80037ce:	4770      	bx	lr
 80037d0:	20000000 	.word	0x20000000
 80037d4:	10624dd3 	.word	0x10624dd3

080037d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d101      	bne.n	80037ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e076      	b.n	80038d8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d108      	bne.n	8003804 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037fa:	d009      	beq.n	8003810 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	61da      	str	r2, [r3, #28]
 8003802:	e005      	b.n	8003810 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b00      	cmp	r3, #0
 8003820:	d106      	bne.n	8003830 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f7fe fd08 	bl	8002240 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2202      	movs	r2, #2
 8003834:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003846:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003858:	431a      	orrs	r2, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003862:	431a      	orrs	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	691b      	ldr	r3, [r3, #16]
 8003868:	f003 0302 	and.w	r3, r3, #2
 800386c:	431a      	orrs	r2, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	695b      	ldr	r3, [r3, #20]
 8003872:	f003 0301 	and.w	r3, r3, #1
 8003876:	431a      	orrs	r2, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	699b      	ldr	r3, [r3, #24]
 800387c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003880:	431a      	orrs	r2, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	69db      	ldr	r3, [r3, #28]
 8003886:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800388a:	431a      	orrs	r2, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a1b      	ldr	r3, [r3, #32]
 8003890:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003894:	ea42 0103 	orr.w	r1, r2, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800389c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	430a      	orrs	r2, r1
 80038a6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	699b      	ldr	r3, [r3, #24]
 80038ac:	0c1a      	lsrs	r2, r3, #16
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f002 0204 	and.w	r2, r2, #4
 80038b6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	69da      	ldr	r2, [r3, #28]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038c6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2201      	movs	r2, #1
 80038d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80038d6:	2300      	movs	r3, #0
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3708      	adds	r7, #8
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b088      	sub	sp, #32
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	603b      	str	r3, [r7, #0]
 80038ec:	4613      	mov	r3, r2
 80038ee:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80038f0:	2300      	movs	r3, #0
 80038f2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d101      	bne.n	8003902 <HAL_SPI_Transmit+0x22>
 80038fe:	2302      	movs	r3, #2
 8003900:	e12d      	b.n	8003b5e <HAL_SPI_Transmit+0x27e>
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2201      	movs	r2, #1
 8003906:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800390a:	f7ff f85b 	bl	80029c4 <HAL_GetTick>
 800390e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003910:	88fb      	ldrh	r3, [r7, #6]
 8003912:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800391a:	b2db      	uxtb	r3, r3
 800391c:	2b01      	cmp	r3, #1
 800391e:	d002      	beq.n	8003926 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003920:	2302      	movs	r3, #2
 8003922:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003924:	e116      	b.n	8003b54 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d002      	beq.n	8003932 <HAL_SPI_Transmit+0x52>
 800392c:	88fb      	ldrh	r3, [r7, #6]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d102      	bne.n	8003938 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003936:	e10d      	b.n	8003b54 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2203      	movs	r2, #3
 800393c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2200      	movs	r2, #0
 8003944:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	68ba      	ldr	r2, [r7, #8]
 800394a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	88fa      	ldrh	r2, [r7, #6]
 8003950:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	88fa      	ldrh	r2, [r7, #6]
 8003956:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2200      	movs	r2, #0
 800395c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2200      	movs	r2, #0
 8003968:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2200      	movs	r2, #0
 800396e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2200      	movs	r2, #0
 8003974:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800397e:	d10f      	bne.n	80039a0 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800398e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800399e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039aa:	2b40      	cmp	r3, #64	; 0x40
 80039ac:	d007      	beq.n	80039be <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039bc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039c6:	d14f      	bne.n	8003a68 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d002      	beq.n	80039d6 <HAL_SPI_Transmit+0xf6>
 80039d0:	8afb      	ldrh	r3, [r7, #22]
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d142      	bne.n	8003a5c <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039da:	881a      	ldrh	r2, [r3, #0]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e6:	1c9a      	adds	r2, r3, #2
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	3b01      	subs	r3, #1
 80039f4:	b29a      	uxth	r2, r3
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80039fa:	e02f      	b.n	8003a5c <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	f003 0302 	and.w	r3, r3, #2
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d112      	bne.n	8003a30 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0e:	881a      	ldrh	r2, [r3, #0]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a1a:	1c9a      	adds	r2, r3, #2
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	3b01      	subs	r3, #1
 8003a28:	b29a      	uxth	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	86da      	strh	r2, [r3, #54]	; 0x36
 8003a2e:	e015      	b.n	8003a5c <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a30:	f7fe ffc8 	bl	80029c4 <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	683a      	ldr	r2, [r7, #0]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d803      	bhi.n	8003a48 <HAL_SPI_Transmit+0x168>
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a46:	d102      	bne.n	8003a4e <HAL_SPI_Transmit+0x16e>
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d106      	bne.n	8003a5c <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2201      	movs	r2, #1
 8003a56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003a5a:	e07b      	b.n	8003b54 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d1ca      	bne.n	80039fc <HAL_SPI_Transmit+0x11c>
 8003a66:	e050      	b.n	8003b0a <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d002      	beq.n	8003a76 <HAL_SPI_Transmit+0x196>
 8003a70:	8afb      	ldrh	r3, [r7, #22]
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d144      	bne.n	8003b00 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	330c      	adds	r3, #12
 8003a80:	7812      	ldrb	r2, [r2, #0]
 8003a82:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a88:	1c5a      	adds	r2, r3, #1
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	3b01      	subs	r3, #1
 8003a96:	b29a      	uxth	r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003a9c:	e030      	b.n	8003b00 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f003 0302 	and.w	r3, r3, #2
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d113      	bne.n	8003ad4 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	330c      	adds	r3, #12
 8003ab6:	7812      	ldrb	r2, [r2, #0]
 8003ab8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003abe:	1c5a      	adds	r2, r3, #1
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	3b01      	subs	r3, #1
 8003acc:	b29a      	uxth	r2, r3
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	86da      	strh	r2, [r3, #54]	; 0x36
 8003ad2:	e015      	b.n	8003b00 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ad4:	f7fe ff76 	bl	80029c4 <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	683a      	ldr	r2, [r7, #0]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d803      	bhi.n	8003aec <HAL_SPI_Transmit+0x20c>
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aea:	d102      	bne.n	8003af2 <HAL_SPI_Transmit+0x212>
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d106      	bne.n	8003b00 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2201      	movs	r2, #1
 8003afa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003afe:	e029      	b.n	8003b54 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d1c9      	bne.n	8003a9e <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b0a:	69ba      	ldr	r2, [r7, #24]
 8003b0c:	6839      	ldr	r1, [r7, #0]
 8003b0e:	68f8      	ldr	r0, [r7, #12]
 8003b10:	f000 f8b2 	bl	8003c78 <SPI_EndRxTxTransaction>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d002      	beq.n	8003b20 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2220      	movs	r2, #32
 8003b1e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d10a      	bne.n	8003b3e <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b28:	2300      	movs	r3, #0
 8003b2a:	613b      	str	r3, [r7, #16]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	613b      	str	r3, [r7, #16]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	613b      	str	r3, [r7, #16]
 8003b3c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d002      	beq.n	8003b4c <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	77fb      	strb	r3, [r7, #31]
 8003b4a:	e003      	b.n	8003b54 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003b5c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3720      	adds	r7, #32
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
	...

08003b68 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b088      	sub	sp, #32
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	603b      	str	r3, [r7, #0]
 8003b74:	4613      	mov	r3, r2
 8003b76:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003b78:	f7fe ff24 	bl	80029c4 <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b80:	1a9b      	subs	r3, r3, r2
 8003b82:	683a      	ldr	r2, [r7, #0]
 8003b84:	4413      	add	r3, r2
 8003b86:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003b88:	f7fe ff1c 	bl	80029c4 <HAL_GetTick>
 8003b8c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003b8e:	4b39      	ldr	r3, [pc, #228]	; (8003c74 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	015b      	lsls	r3, r3, #5
 8003b94:	0d1b      	lsrs	r3, r3, #20
 8003b96:	69fa      	ldr	r2, [r7, #28]
 8003b98:	fb02 f303 	mul.w	r3, r2, r3
 8003b9c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b9e:	e054      	b.n	8003c4a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ba6:	d050      	beq.n	8003c4a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ba8:	f7fe ff0c 	bl	80029c4 <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	69fa      	ldr	r2, [r7, #28]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d902      	bls.n	8003bbe <SPI_WaitFlagStateUntilTimeout+0x56>
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d13d      	bne.n	8003c3a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	685a      	ldr	r2, [r3, #4]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003bcc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bd6:	d111      	bne.n	8003bfc <SPI_WaitFlagStateUntilTimeout+0x94>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003be0:	d004      	beq.n	8003bec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bea:	d107      	bne.n	8003bfc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bfa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c04:	d10f      	bne.n	8003c26 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c14:	601a      	str	r2, [r3, #0]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c24:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e017      	b.n	8003c6a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d101      	bne.n	8003c44 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003c40:	2300      	movs	r3, #0
 8003c42:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	3b01      	subs	r3, #1
 8003c48:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	689a      	ldr	r2, [r3, #8]
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	4013      	ands	r3, r2
 8003c54:	68ba      	ldr	r2, [r7, #8]
 8003c56:	429a      	cmp	r2, r3
 8003c58:	bf0c      	ite	eq
 8003c5a:	2301      	moveq	r3, #1
 8003c5c:	2300      	movne	r3, #0
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	461a      	mov	r2, r3
 8003c62:	79fb      	ldrb	r3, [r7, #7]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d19b      	bne.n	8003ba0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3720      	adds	r7, #32
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	20000000 	.word	0x20000000

08003c78 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b086      	sub	sp, #24
 8003c7c:	af02      	add	r7, sp, #8
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	9300      	str	r3, [sp, #0]
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	2180      	movs	r1, #128	; 0x80
 8003c8e:	68f8      	ldr	r0, [r7, #12]
 8003c90:	f7ff ff6a 	bl	8003b68 <SPI_WaitFlagStateUntilTimeout>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d007      	beq.n	8003caa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c9e:	f043 0220 	orr.w	r2, r3, #32
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e000      	b.n	8003cac <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3710      	adds	r7, #16
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d101      	bne.n	8003cc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e042      	b.n	8003d4c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d106      	bne.n	8003ce0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f7fe faee 	bl	80022bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2224      	movs	r2, #36	; 0x24
 8003ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	68da      	ldr	r2, [r3, #12]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cf6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f000 f91d 	bl	8003f38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	691a      	ldr	r2, [r3, #16]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	695a      	ldr	r2, [r3, #20]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68da      	ldr	r2, [r3, #12]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2220      	movs	r2, #32
 8003d38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2220      	movs	r2, #32
 8003d40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003d4a:	2300      	movs	r3, #0
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3708      	adds	r7, #8
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b08a      	sub	sp, #40	; 0x28
 8003d58:	af02      	add	r7, sp, #8
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	60b9      	str	r1, [r7, #8]
 8003d5e:	603b      	str	r3, [r7, #0]
 8003d60:	4613      	mov	r3, r2
 8003d62:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d64:	2300      	movs	r3, #0
 8003d66:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	2b20      	cmp	r3, #32
 8003d72:	d16d      	bne.n	8003e50 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d002      	beq.n	8003d80 <HAL_UART_Transmit+0x2c>
 8003d7a:	88fb      	ldrh	r3, [r7, #6]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d101      	bne.n	8003d84 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e066      	b.n	8003e52 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2200      	movs	r2, #0
 8003d88:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2221      	movs	r2, #33	; 0x21
 8003d8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d92:	f7fe fe17 	bl	80029c4 <HAL_GetTick>
 8003d96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	88fa      	ldrh	r2, [r7, #6]
 8003d9c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	88fa      	ldrh	r2, [r7, #6]
 8003da2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dac:	d108      	bne.n	8003dc0 <HAL_UART_Transmit+0x6c>
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d104      	bne.n	8003dc0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003db6:	2300      	movs	r3, #0
 8003db8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	61bb      	str	r3, [r7, #24]
 8003dbe:	e003      	b.n	8003dc8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003dc8:	e02a      	b.n	8003e20 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	9300      	str	r3, [sp, #0]
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	2180      	movs	r1, #128	; 0x80
 8003dd4:	68f8      	ldr	r0, [r7, #12]
 8003dd6:	f000 f840 	bl	8003e5a <UART_WaitOnFlagUntilTimeout>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d001      	beq.n	8003de4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e036      	b.n	8003e52 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003de4:	69fb      	ldr	r3, [r7, #28]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d10b      	bne.n	8003e02 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	881b      	ldrh	r3, [r3, #0]
 8003dee:	461a      	mov	r2, r3
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003df8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	3302      	adds	r3, #2
 8003dfe:	61bb      	str	r3, [r7, #24]
 8003e00:	e007      	b.n	8003e12 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	781a      	ldrb	r2, [r3, #0]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	3301      	adds	r3, #1
 8003e10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	3b01      	subs	r3, #1
 8003e1a:	b29a      	uxth	r2, r3
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1cf      	bne.n	8003dca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	9300      	str	r3, [sp, #0]
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	2200      	movs	r2, #0
 8003e32:	2140      	movs	r1, #64	; 0x40
 8003e34:	68f8      	ldr	r0, [r7, #12]
 8003e36:	f000 f810 	bl	8003e5a <UART_WaitOnFlagUntilTimeout>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d001      	beq.n	8003e44 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003e40:	2303      	movs	r3, #3
 8003e42:	e006      	b.n	8003e52 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2220      	movs	r2, #32
 8003e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	e000      	b.n	8003e52 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003e50:	2302      	movs	r3, #2
  }
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3720      	adds	r7, #32
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}

08003e5a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003e5a:	b580      	push	{r7, lr}
 8003e5c:	b090      	sub	sp, #64	; 0x40
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	60f8      	str	r0, [r7, #12]
 8003e62:	60b9      	str	r1, [r7, #8]
 8003e64:	603b      	str	r3, [r7, #0]
 8003e66:	4613      	mov	r3, r2
 8003e68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e6a:	e050      	b.n	8003f0e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e72:	d04c      	beq.n	8003f0e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003e74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d007      	beq.n	8003e8a <UART_WaitOnFlagUntilTimeout+0x30>
 8003e7a:	f7fe fda3 	bl	80029c4 <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d241      	bcs.n	8003f0e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	330c      	adds	r3, #12
 8003e90:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e94:	e853 3f00 	ldrex	r3, [r3]
 8003e98:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	330c      	adds	r3, #12
 8003ea8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003eaa:	637a      	str	r2, [r7, #52]	; 0x34
 8003eac:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003eb0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003eb2:	e841 2300 	strex	r3, r2, [r1]
 8003eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d1e5      	bne.n	8003e8a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	3314      	adds	r3, #20
 8003ec4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	e853 3f00 	ldrex	r3, [r3]
 8003ecc:	613b      	str	r3, [r7, #16]
   return(result);
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	f023 0301 	bic.w	r3, r3, #1
 8003ed4:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	3314      	adds	r3, #20
 8003edc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ede:	623a      	str	r2, [r7, #32]
 8003ee0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee2:	69f9      	ldr	r1, [r7, #28]
 8003ee4:	6a3a      	ldr	r2, [r7, #32]
 8003ee6:	e841 2300 	strex	r3, r2, [r1]
 8003eea:	61bb      	str	r3, [r7, #24]
   return(result);
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d1e5      	bne.n	8003ebe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2220      	movs	r2, #32
 8003ef6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2220      	movs	r2, #32
 8003efe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e00f      	b.n	8003f2e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	4013      	ands	r3, r2
 8003f18:	68ba      	ldr	r2, [r7, #8]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	bf0c      	ite	eq
 8003f1e:	2301      	moveq	r3, #1
 8003f20:	2300      	movne	r3, #0
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	461a      	mov	r2, r3
 8003f26:	79fb      	ldrb	r3, [r7, #7]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d09f      	beq.n	8003e6c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3740      	adds	r7, #64	; 0x40
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
	...

08003f38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	68da      	ldr	r2, [r3, #12]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	430a      	orrs	r2, r1
 8003f54:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	689a      	ldr	r2, [r3, #8]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	431a      	orrs	r2, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	695b      	ldr	r3, [r3, #20]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003f72:	f023 030c 	bic.w	r3, r3, #12
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	6812      	ldr	r2, [r2, #0]
 8003f7a:	68b9      	ldr	r1, [r7, #8]
 8003f7c:	430b      	orrs	r3, r1
 8003f7e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	695b      	ldr	r3, [r3, #20]
 8003f86:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	699a      	ldr	r2, [r3, #24]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	430a      	orrs	r2, r1
 8003f94:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a2c      	ldr	r2, [pc, #176]	; (800404c <UART_SetConfig+0x114>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d103      	bne.n	8003fa8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003fa0:	f7ff fbe8 	bl	8003774 <HAL_RCC_GetPCLK2Freq>
 8003fa4:	60f8      	str	r0, [r7, #12]
 8003fa6:	e002      	b.n	8003fae <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003fa8:	f7ff fbd0 	bl	800374c <HAL_RCC_GetPCLK1Freq>
 8003fac:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003fae:	68fa      	ldr	r2, [r7, #12]
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	4413      	add	r3, r2
 8003fb6:	009a      	lsls	r2, r3, #2
 8003fb8:	441a      	add	r2, r3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fc4:	4a22      	ldr	r2, [pc, #136]	; (8004050 <UART_SetConfig+0x118>)
 8003fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003fca:	095b      	lsrs	r3, r3, #5
 8003fcc:	0119      	lsls	r1, r3, #4
 8003fce:	68fa      	ldr	r2, [r7, #12]
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	4413      	add	r3, r2
 8003fd6:	009a      	lsls	r2, r3, #2
 8003fd8:	441a      	add	r2, r3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fe4:	4b1a      	ldr	r3, [pc, #104]	; (8004050 <UART_SetConfig+0x118>)
 8003fe6:	fba3 0302 	umull	r0, r3, r3, r2
 8003fea:	095b      	lsrs	r3, r3, #5
 8003fec:	2064      	movs	r0, #100	; 0x64
 8003fee:	fb00 f303 	mul.w	r3, r0, r3
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	011b      	lsls	r3, r3, #4
 8003ff6:	3332      	adds	r3, #50	; 0x32
 8003ff8:	4a15      	ldr	r2, [pc, #84]	; (8004050 <UART_SetConfig+0x118>)
 8003ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8003ffe:	095b      	lsrs	r3, r3, #5
 8004000:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004004:	4419      	add	r1, r3
 8004006:	68fa      	ldr	r2, [r7, #12]
 8004008:	4613      	mov	r3, r2
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	4413      	add	r3, r2
 800400e:	009a      	lsls	r2, r3, #2
 8004010:	441a      	add	r2, r3
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	fbb2 f2f3 	udiv	r2, r2, r3
 800401c:	4b0c      	ldr	r3, [pc, #48]	; (8004050 <UART_SetConfig+0x118>)
 800401e:	fba3 0302 	umull	r0, r3, r3, r2
 8004022:	095b      	lsrs	r3, r3, #5
 8004024:	2064      	movs	r0, #100	; 0x64
 8004026:	fb00 f303 	mul.w	r3, r0, r3
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	011b      	lsls	r3, r3, #4
 800402e:	3332      	adds	r3, #50	; 0x32
 8004030:	4a07      	ldr	r2, [pc, #28]	; (8004050 <UART_SetConfig+0x118>)
 8004032:	fba2 2303 	umull	r2, r3, r2, r3
 8004036:	095b      	lsrs	r3, r3, #5
 8004038:	f003 020f 	and.w	r2, r3, #15
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	440a      	add	r2, r1
 8004042:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004044:	bf00      	nop
 8004046:	3710      	adds	r7, #16
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	40013800 	.word	0x40013800
 8004050:	51eb851f 	.word	0x51eb851f

08004054 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	7c1b      	ldrb	r3, [r3, #16]
 8004062:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800406a:	461a      	mov	r2, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	fb02 f303 	mul.w	r3, r2, r3
 8004072:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	00db      	lsls	r3, r3, #3
 8004078:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	2100      	movs	r1, #0
 8004082:	4618      	mov	r0, r3
 8004084:	f001 fdf6 	bl	8005c74 <memset>
}
 8004088:	bf00      	nop
 800408a:	3710      	adds	r7, #16
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b086      	sub	sp, #24
 8004094:	af02      	add	r7, sp, #8
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	460b      	mov	r3, r1
 800409a:	70fb      	strb	r3, [r7, #3]
 800409c:	4613      	mov	r3, r2
 800409e:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	7c1b      	ldrb	r3, [r3, #16]
 80040a6:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 80040a8:	78fb      	ldrb	r3, [r7, #3]
 80040aa:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040b0:	60bb      	str	r3, [r7, #8]
  offset *= w;
 80040b2:	7bfb      	ldrb	r3, [r7, #15]
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	89ba      	ldrh	r2, [r7, #12]
 80040b8:	fb02 f303 	mul.w	r3, r2, r3
 80040bc:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 80040be:	89bb      	ldrh	r3, [r7, #12]
 80040c0:	00db      	lsls	r3, r3, #3
 80040c2:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 80040c4:	89bb      	ldrh	r3, [r7, #12]
 80040c6:	68ba      	ldr	r2, [r7, #8]
 80040c8:	4413      	add	r3, r2
 80040ca:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 80040cc:	7bf9      	ldrb	r1, [r7, #15]
 80040ce:	78ba      	ldrb	r2, [r7, #2]
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	9300      	str	r3, [sp, #0]
 80040d4:	460b      	mov	r3, r1
 80040d6:	2100      	movs	r1, #0
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f001 fcc3 	bl	8005a64 <u8x8_DrawTile>
}
 80040de:	bf00      	nop
 80040e0:	3710      	adds	r7, #16
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}

080040e6 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 80040e6:	b580      	push	{r7, lr}
 80040e8:	b084      	sub	sp, #16
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 80040ee:	2300      	movs	r3, #0
 80040f0:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80040f8:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004100:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	7c5b      	ldrb	r3, [r3, #17]
 8004108:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 800410a:	7bba      	ldrb	r2, [r7, #14]
 800410c:	7bfb      	ldrb	r3, [r7, #15]
 800410e:	4619      	mov	r1, r3
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f7ff ffbd 	bl	8004090 <u8g2_send_tile_row>
    src_row++;
 8004116:	7bfb      	ldrb	r3, [r7, #15]
 8004118:	3301      	adds	r3, #1
 800411a:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 800411c:	7bbb      	ldrb	r3, [r7, #14]
 800411e:	3301      	adds	r3, #1
 8004120:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8004122:	7bfa      	ldrb	r2, [r7, #15]
 8004124:	7b7b      	ldrb	r3, [r7, #13]
 8004126:	429a      	cmp	r2, r3
 8004128:	d203      	bcs.n	8004132 <u8g2_send_buffer+0x4c>
 800412a:	7bba      	ldrb	r2, [r7, #14]
 800412c:	7b3b      	ldrb	r3, [r7, #12]
 800412e:	429a      	cmp	r2, r3
 8004130:	d3eb      	bcc.n	800410a <u8g2_send_buffer+0x24>
}
 8004132:	bf00      	nop
 8004134:	3710      	adds	r7, #16
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}

0800413a <u8g2_SetBufferCurrTileRow>:
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
}

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 800413a:	b580      	push	{r7, lr}
 800413c:	b082      	sub	sp, #8
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]
 8004142:	460b      	mov	r3, r1
 8004144:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	78fa      	ldrb	r2, [r7, #3]
 800414a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  u8g2->cb->update_dimension(u8g2);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	4798      	blx	r3
}
 8004162:	bf00      	nop
 8004164:	3708      	adds	r7, #8
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}

0800416a <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 800416a:	b580      	push	{r7, lr}
 800416c:	b082      	sub	sp, #8
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8004178:	2b00      	cmp	r3, #0
 800417a:	d002      	beq.n	8004182 <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f7ff ff69 	bl	8004054 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 8004182:	2100      	movs	r1, #0
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f7ff ffd8 	bl	800413a <u8g2_SetBufferCurrTileRow>
}
 800418a:	bf00      	nop
 800418c:	3708      	adds	r7, #8
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}

08004192 <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 8004192:	b580      	push	{r7, lr}
 8004194:	b084      	sub	sp, #16
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f7ff ffa3 	bl	80040e6 <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80041a6:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 80041ae:	7bfb      	ldrb	r3, [r7, #15]
 80041b0:	4413      	add	r3, r2
 80041b2:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	7c5b      	ldrb	r3, [r3, #17]
 80041ba:	7bfa      	ldrb	r2, [r7, #15]
 80041bc:	429a      	cmp	r2, r3
 80041be:	d304      	bcc.n	80041ca <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f001 fca0 	bl	8005b06 <u8x8_RefreshDisplay>
    return 0;
 80041c6:	2300      	movs	r3, #0
 80041c8:	e00d      	b.n	80041e6 <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d002      	beq.n	80041da <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f7ff ff3d 	bl	8004054 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 80041da:	7bfb      	ldrb	r3, [r7, #15]
 80041dc:	4619      	mov	r1, r3
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f7ff ffab 	bl	800413a <u8g2_SetBufferCurrTileRow>
  return 1;
 80041e4:	2301      	movs	r3, #1
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3710      	adds	r7, #16
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
	...

080041f0 <u8g2_m_16_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2208      	movs	r2, #8
 80041fc:	701a      	strb	r2, [r3, #0]
  return buf;
 80041fe:	4b03      	ldr	r3, [pc, #12]	; (800420c <u8g2_m_16_8_f+0x1c>)
  #endif
}
 8004200:	4618      	mov	r0, r3
 8004202:	370c      	adds	r7, #12
 8004204:	46bd      	mov	sp, r7
 8004206:	bc80      	pop	{r7}
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	2000079c 	.word	0x2000079c

08004210 <u8g2_Setup_ssd1306_128x64_noname_f>:
  buf = u8g2_m_16_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 f */
void u8g2_Setup_ssd1306_128x64_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b088      	sub	sp, #32
 8004214:	af02      	add	r7, sp, #8
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	607a      	str	r2, [r7, #4]
 800421c:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	9300      	str	r3, [sp, #0]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a0b      	ldr	r2, [pc, #44]	; (8004254 <u8g2_Setup_ssd1306_128x64_noname_f+0x44>)
 8004226:	490c      	ldr	r1, [pc, #48]	; (8004258 <u8g2_Setup_ssd1306_128x64_noname_f+0x48>)
 8004228:	68f8      	ldr	r0, [r7, #12]
 800422a:	f001 fccb 	bl	8005bc4 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 800422e:	f107 0313 	add.w	r3, r7, #19
 8004232:	4618      	mov	r0, r3
 8004234:	f7ff ffdc 	bl	80041f0 <u8g2_m_16_8_f>
 8004238:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 800423a:	7cfa      	ldrb	r2, [r7, #19]
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	9300      	str	r3, [sp, #0]
 8004240:	4b06      	ldr	r3, [pc, #24]	; (800425c <u8g2_Setup_ssd1306_128x64_noname_f+0x4c>)
 8004242:	6979      	ldr	r1, [r7, #20]
 8004244:	68f8      	ldr	r0, [r7, #12]
 8004246:	f000 ffbc 	bl	80051c2 <u8g2_SetupBuffer>
}
 800424a:	bf00      	nop
 800424c:	3718      	adds	r7, #24
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	08005789 	.word	0x08005789
 8004258:	08005961 	.word	0x08005961
 800425c:	08005047 	.word	0x08005047

08004260 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 8004260:	b480      	push	{r7}
 8004262:	b083      	sub	sp, #12
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	460b      	mov	r3, r1
 800426a:	70fb      	strb	r3, [r7, #3]
  font += offset;
 800426c:	78fb      	ldrb	r3, [r7, #3]
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	4413      	add	r3, r2
 8004272:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	781b      	ldrb	r3, [r3, #0]
}
 8004278:	4618      	mov	r0, r3
 800427a:	370c      	adds	r7, #12
 800427c:	46bd      	mov	sp, r7
 800427e:	bc80      	pop	{r7}
 8004280:	4770      	bx	lr

08004282 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 8004282:	b480      	push	{r7}
 8004284:	b085      	sub	sp, #20
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
 800428a:	460b      	mov	r3, r1
 800428c:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 800428e:	78fb      	ldrb	r3, [r7, #3]
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	4413      	add	r3, r2
 8004294:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	781b      	ldrb	r3, [r3, #0]
 800429a:	81fb      	strh	r3, [r7, #14]
    font++;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	3301      	adds	r3, #1
 80042a0:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 80042a2:	89fb      	ldrh	r3, [r7, #14]
 80042a4:	021b      	lsls	r3, r3, #8
 80042a6:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	b29a      	uxth	r2, r3
 80042ae:	89fb      	ldrh	r3, [r7, #14]
 80042b0:	4413      	add	r3, r2
 80042b2:	81fb      	strh	r3, [r7, #14]
    return pos;
 80042b4:	89fb      	ldrh	r3, [r7, #14]
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3714      	adds	r7, #20
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bc80      	pop	{r7}
 80042be:	4770      	bx	lr

080042c0 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b082      	sub	sp, #8
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 80042ca:	2100      	movs	r1, #0
 80042cc:	6838      	ldr	r0, [r7, #0]
 80042ce:	f7ff ffc7 	bl	8004260 <u8g2_font_get_byte>
 80042d2:	4603      	mov	r3, r0
 80042d4:	461a      	mov	r2, r3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 80042da:	2101      	movs	r1, #1
 80042dc:	6838      	ldr	r0, [r7, #0]
 80042de:	f7ff ffbf 	bl	8004260 <u8g2_font_get_byte>
 80042e2:	4603      	mov	r3, r0
 80042e4:	461a      	mov	r2, r3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 80042ea:	2102      	movs	r1, #2
 80042ec:	6838      	ldr	r0, [r7, #0]
 80042ee:	f7ff ffb7 	bl	8004260 <u8g2_font_get_byte>
 80042f2:	4603      	mov	r3, r0
 80042f4:	461a      	mov	r2, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 80042fa:	2103      	movs	r1, #3
 80042fc:	6838      	ldr	r0, [r7, #0]
 80042fe:	f7ff ffaf 	bl	8004260 <u8g2_font_get_byte>
 8004302:	4603      	mov	r3, r0
 8004304:	461a      	mov	r2, r3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 800430a:	2104      	movs	r1, #4
 800430c:	6838      	ldr	r0, [r7, #0]
 800430e:	f7ff ffa7 	bl	8004260 <u8g2_font_get_byte>
 8004312:	4603      	mov	r3, r0
 8004314:	461a      	mov	r2, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 800431a:	2105      	movs	r1, #5
 800431c:	6838      	ldr	r0, [r7, #0]
 800431e:	f7ff ff9f 	bl	8004260 <u8g2_font_get_byte>
 8004322:	4603      	mov	r3, r0
 8004324:	461a      	mov	r2, r3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 800432a:	2106      	movs	r1, #6
 800432c:	6838      	ldr	r0, [r7, #0]
 800432e:	f7ff ff97 	bl	8004260 <u8g2_font_get_byte>
 8004332:	4603      	mov	r3, r0
 8004334:	461a      	mov	r2, r3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 800433a:	2107      	movs	r1, #7
 800433c:	6838      	ldr	r0, [r7, #0]
 800433e:	f7ff ff8f 	bl	8004260 <u8g2_font_get_byte>
 8004342:	4603      	mov	r3, r0
 8004344:	461a      	mov	r2, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 800434a:	2108      	movs	r1, #8
 800434c:	6838      	ldr	r0, [r7, #0]
 800434e:	f7ff ff87 	bl	8004260 <u8g2_font_get_byte>
 8004352:	4603      	mov	r3, r0
 8004354:	461a      	mov	r2, r3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 800435a:	2109      	movs	r1, #9
 800435c:	6838      	ldr	r0, [r7, #0]
 800435e:	f7ff ff7f 	bl	8004260 <u8g2_font_get_byte>
 8004362:	4603      	mov	r3, r0
 8004364:	b25a      	sxtb	r2, r3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 800436a:	210a      	movs	r1, #10
 800436c:	6838      	ldr	r0, [r7, #0]
 800436e:	f7ff ff77 	bl	8004260 <u8g2_font_get_byte>
 8004372:	4603      	mov	r3, r0
 8004374:	b25a      	sxtb	r2, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 800437a:	210b      	movs	r1, #11
 800437c:	6838      	ldr	r0, [r7, #0]
 800437e:	f7ff ff6f 	bl	8004260 <u8g2_font_get_byte>
 8004382:	4603      	mov	r3, r0
 8004384:	b25a      	sxtb	r2, r3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 800438a:	210c      	movs	r1, #12
 800438c:	6838      	ldr	r0, [r7, #0]
 800438e:	f7ff ff67 	bl	8004260 <u8g2_font_get_byte>
 8004392:	4603      	mov	r3, r0
 8004394:	b25a      	sxtb	r2, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 800439a:	210d      	movs	r1, #13
 800439c:	6838      	ldr	r0, [r7, #0]
 800439e:	f7ff ff5f 	bl	8004260 <u8g2_font_get_byte>
 80043a2:	4603      	mov	r3, r0
 80043a4:	b25a      	sxtb	r2, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 80043aa:	210e      	movs	r1, #14
 80043ac:	6838      	ldr	r0, [r7, #0]
 80043ae:	f7ff ff57 	bl	8004260 <u8g2_font_get_byte>
 80043b2:	4603      	mov	r3, r0
 80043b4:	b25a      	sxtb	r2, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 80043ba:	210f      	movs	r1, #15
 80043bc:	6838      	ldr	r0, [r7, #0]
 80043be:	f7ff ff4f 	bl	8004260 <u8g2_font_get_byte>
 80043c2:	4603      	mov	r3, r0
 80043c4:	b25a      	sxtb	r2, r3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 80043ca:	2110      	movs	r1, #16
 80043cc:	6838      	ldr	r0, [r7, #0]
 80043ce:	f7ff ff47 	bl	8004260 <u8g2_font_get_byte>
 80043d2:	4603      	mov	r3, r0
 80043d4:	b25a      	sxtb	r2, r3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 80043da:	2111      	movs	r1, #17
 80043dc:	6838      	ldr	r0, [r7, #0]
 80043de:	f7ff ff50 	bl	8004282 <u8g2_font_get_word>
 80043e2:	4603      	mov	r3, r0
 80043e4:	461a      	mov	r2, r3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 80043ea:	2113      	movs	r1, #19
 80043ec:	6838      	ldr	r0, [r7, #0]
 80043ee:	f7ff ff48 	bl	8004282 <u8g2_font_get_word>
 80043f2:	4603      	mov	r3, r0
 80043f4:	461a      	mov	r2, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 80043fa:	2115      	movs	r1, #21
 80043fc:	6838      	ldr	r0, [r7, #0]
 80043fe:	f7ff ff40 	bl	8004282 <u8g2_font_get_word>
 8004402:	4603      	mov	r3, r0
 8004404:	461a      	mov	r2, r3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	82da      	strh	r2, [r3, #22]
#endif
}
 800440a:	bf00      	nop
 800440c:	3708      	adds	r7, #8
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}

08004412 <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 8004412:	b480      	push	{r7}
 8004414:	b085      	sub	sp, #20
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
 800441a:	460b      	mov	r3, r1
 800441c:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	7b1b      	ldrb	r3, [r3, #12]
 8004422:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 800442c:	7bfa      	ldrb	r2, [r7, #15]
 800442e:	7b7b      	ldrb	r3, [r7, #13]
 8004430:	fa42 f303 	asr.w	r3, r2, r3
 8004434:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 8004436:	7b7b      	ldrb	r3, [r7, #13]
 8004438:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 800443a:	7bba      	ldrb	r2, [r7, #14]
 800443c:	78fb      	ldrb	r3, [r7, #3]
 800443e:	4413      	add	r3, r2
 8004440:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 8004442:	7bbb      	ldrb	r3, [r7, #14]
 8004444:	2b07      	cmp	r3, #7
 8004446:	d91a      	bls.n	800447e <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8004448:	2308      	movs	r3, #8
 800444a:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 800444c:	7b3a      	ldrb	r2, [r7, #12]
 800444e:	7b7b      	ldrb	r3, [r7, #13]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	1c5a      	adds	r2, r3, #1
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	461a      	mov	r2, r3
 8004466:	7b3b      	ldrb	r3, [r7, #12]
 8004468:	fa02 f303 	lsl.w	r3, r2, r3
 800446c:	b25a      	sxtb	r2, r3
 800446e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004472:	4313      	orrs	r3, r2
 8004474:	b25b      	sxtb	r3, r3
 8004476:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8004478:	7bbb      	ldrb	r3, [r7, #14]
 800447a:	3b08      	subs	r3, #8
 800447c:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 800447e:	78fb      	ldrb	r3, [r7, #3]
 8004480:	f04f 32ff 	mov.w	r2, #4294967295
 8004484:	fa02 f303 	lsl.w	r3, r2, r3
 8004488:	b2db      	uxtb	r3, r3
 800448a:	43db      	mvns	r3, r3
 800448c:	b2da      	uxtb	r2, r3
 800448e:	7bfb      	ldrb	r3, [r7, #15]
 8004490:	4013      	ands	r3, r2
 8004492:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	7bba      	ldrb	r2, [r7, #14]
 8004498:	731a      	strb	r2, [r3, #12]
  return val;
 800449a:	7bfb      	ldrb	r3, [r7, #15]
}
 800449c:	4618      	mov	r0, r3
 800449e:	3714      	adds	r7, #20
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bc80      	pop	{r7}
 80044a4:	4770      	bx	lr

080044a6 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 80044a6:	b580      	push	{r7, lr}
 80044a8:	b084      	sub	sp, #16
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	6078      	str	r0, [r7, #4]
 80044ae:	460b      	mov	r3, r1
 80044b0:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 80044b2:	78fb      	ldrb	r3, [r7, #3]
 80044b4:	4619      	mov	r1, r3
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f7ff ffab 	bl	8004412 <u8g2_font_decode_get_unsigned_bits>
 80044bc:	4603      	mov	r3, r0
 80044be:	73fb      	strb	r3, [r7, #15]
  d = 1;
 80044c0:	2301      	movs	r3, #1
 80044c2:	73bb      	strb	r3, [r7, #14]
  cnt--;
 80044c4:	78fb      	ldrb	r3, [r7, #3]
 80044c6:	3b01      	subs	r3, #1
 80044c8:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 80044ca:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80044ce:	78fb      	ldrb	r3, [r7, #3]
 80044d0:	fa02 f303 	lsl.w	r3, r2, r3
 80044d4:	73bb      	strb	r3, [r7, #14]
  v -= d;
 80044d6:	7bfa      	ldrb	r2, [r7, #15]
 80044d8:	7bbb      	ldrb	r3, [r7, #14]
 80044da:	1ad3      	subs	r3, r2, r3
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	73fb      	strb	r3, [r7, #15]
  return v;
 80044e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3710      	adds	r7, #16
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}

080044ec <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 80044ec:	b490      	push	{r4, r7}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	4604      	mov	r4, r0
 80044f4:	4608      	mov	r0, r1
 80044f6:	4611      	mov	r1, r2
 80044f8:	461a      	mov	r2, r3
 80044fa:	4623      	mov	r3, r4
 80044fc:	80fb      	strh	r3, [r7, #6]
 80044fe:	4603      	mov	r3, r0
 8004500:	717b      	strb	r3, [r7, #5]
 8004502:	460b      	mov	r3, r1
 8004504:	713b      	strb	r3, [r7, #4]
 8004506:	4613      	mov	r3, r2
 8004508:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 800450a:	78fb      	ldrb	r3, [r7, #3]
 800450c:	2b02      	cmp	r3, #2
 800450e:	d014      	beq.n	800453a <u8g2_add_vector_y+0x4e>
 8004510:	2b02      	cmp	r3, #2
 8004512:	dc19      	bgt.n	8004548 <u8g2_add_vector_y+0x5c>
 8004514:	2b00      	cmp	r3, #0
 8004516:	d002      	beq.n	800451e <u8g2_add_vector_y+0x32>
 8004518:	2b01      	cmp	r3, #1
 800451a:	d007      	beq.n	800452c <u8g2_add_vector_y+0x40>
 800451c:	e014      	b.n	8004548 <u8g2_add_vector_y+0x5c>
  {
    case 0:
      dy += y;
 800451e:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8004522:	b29a      	uxth	r2, r3
 8004524:	88fb      	ldrh	r3, [r7, #6]
 8004526:	4413      	add	r3, r2
 8004528:	80fb      	strh	r3, [r7, #6]
      break;
 800452a:	e014      	b.n	8004556 <u8g2_add_vector_y+0x6a>
    case 1:
      dy += x;
 800452c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8004530:	b29a      	uxth	r2, r3
 8004532:	88fb      	ldrh	r3, [r7, #6]
 8004534:	4413      	add	r3, r2
 8004536:	80fb      	strh	r3, [r7, #6]
      break;
 8004538:	e00d      	b.n	8004556 <u8g2_add_vector_y+0x6a>
    case 2:
      dy -= y;
 800453a:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800453e:	b29b      	uxth	r3, r3
 8004540:	88fa      	ldrh	r2, [r7, #6]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	80fb      	strh	r3, [r7, #6]
      break;
 8004546:	e006      	b.n	8004556 <u8g2_add_vector_y+0x6a>
    default:
      dy -= x;
 8004548:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800454c:	b29b      	uxth	r3, r3
 800454e:	88fa      	ldrh	r2, [r7, #6]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	80fb      	strh	r3, [r7, #6]
      break;      
 8004554:	bf00      	nop
  }
  return dy;
 8004556:	88fb      	ldrh	r3, [r7, #6]
}
 8004558:	4618      	mov	r0, r3
 800455a:	3708      	adds	r7, #8
 800455c:	46bd      	mov	sp, r7
 800455e:	bc90      	pop	{r4, r7}
 8004560:	4770      	bx	lr

08004562 <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 8004562:	b490      	push	{r4, r7}
 8004564:	b082      	sub	sp, #8
 8004566:	af00      	add	r7, sp, #0
 8004568:	4604      	mov	r4, r0
 800456a:	4608      	mov	r0, r1
 800456c:	4611      	mov	r1, r2
 800456e:	461a      	mov	r2, r3
 8004570:	4623      	mov	r3, r4
 8004572:	80fb      	strh	r3, [r7, #6]
 8004574:	4603      	mov	r3, r0
 8004576:	717b      	strb	r3, [r7, #5]
 8004578:	460b      	mov	r3, r1
 800457a:	713b      	strb	r3, [r7, #4]
 800457c:	4613      	mov	r3, r2
 800457e:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 8004580:	78fb      	ldrb	r3, [r7, #3]
 8004582:	2b02      	cmp	r3, #2
 8004584:	d014      	beq.n	80045b0 <u8g2_add_vector_x+0x4e>
 8004586:	2b02      	cmp	r3, #2
 8004588:	dc19      	bgt.n	80045be <u8g2_add_vector_x+0x5c>
 800458a:	2b00      	cmp	r3, #0
 800458c:	d002      	beq.n	8004594 <u8g2_add_vector_x+0x32>
 800458e:	2b01      	cmp	r3, #1
 8004590:	d007      	beq.n	80045a2 <u8g2_add_vector_x+0x40>
 8004592:	e014      	b.n	80045be <u8g2_add_vector_x+0x5c>
  {
    case 0:
      dx += x;
 8004594:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8004598:	b29a      	uxth	r2, r3
 800459a:	88fb      	ldrh	r3, [r7, #6]
 800459c:	4413      	add	r3, r2
 800459e:	80fb      	strh	r3, [r7, #6]
      break;
 80045a0:	e014      	b.n	80045cc <u8g2_add_vector_x+0x6a>
    case 1:
      dx -= y;
 80045a2:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	88fa      	ldrh	r2, [r7, #6]
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	80fb      	strh	r3, [r7, #6]
      break;
 80045ae:	e00d      	b.n	80045cc <u8g2_add_vector_x+0x6a>
    case 2:
      dx -= x;
 80045b0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	88fa      	ldrh	r2, [r7, #6]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	80fb      	strh	r3, [r7, #6]
      break;
 80045bc:	e006      	b.n	80045cc <u8g2_add_vector_x+0x6a>
    default:
      dx += y;
 80045be:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80045c2:	b29a      	uxth	r2, r3
 80045c4:	88fb      	ldrh	r3, [r7, #6]
 80045c6:	4413      	add	r3, r2
 80045c8:	80fb      	strh	r3, [r7, #6]
      break;      
 80045ca:	bf00      	nop
  }
  return dx;
 80045cc:	88fb      	ldrh	r3, [r7, #6]
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3708      	adds	r7, #8
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bc90      	pop	{r4, r7}
 80045d6:	4770      	bx	lr

080045d8 <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b088      	sub	sp, #32
 80045dc:	af02      	add	r7, sp, #8
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	460b      	mov	r3, r1
 80045e2:	70fb      	strb	r3, [r7, #3]
 80045e4:	4613      	mov	r3, r2
 80045e6:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	3360      	adds	r3, #96	; 0x60
 80045ec:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 80045ee:	78fb      	ldrb	r3, [r7, #3]
 80045f0:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80045f8:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8004600:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8004608:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 800460a:	7bfa      	ldrb	r2, [r7, #15]
 800460c:	7d7b      	ldrb	r3, [r7, #21]
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8004612:	7bfb      	ldrb	r3, [r7, #15]
 8004614:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 8004616:	7dfa      	ldrb	r2, [r7, #23]
 8004618:	7bfb      	ldrb	r3, [r7, #15]
 800461a:	429a      	cmp	r2, r3
 800461c:	d201      	bcs.n	8004622 <u8g2_font_decode_len+0x4a>
      current = cnt;
 800461e:	7dfb      	ldrb	r3, [r7, #23]
 8004620:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	889b      	ldrh	r3, [r3, #4]
 8004626:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	88db      	ldrh	r3, [r3, #6]
 800462c:	817b      	strh	r3, [r7, #10]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 800462e:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8004632:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	7c1b      	ldrb	r3, [r3, #16]
 800463a:	89b8      	ldrh	r0, [r7, #12]
 800463c:	f7ff ff91 	bl	8004562 <u8g2_add_vector_x>
 8004640:	4603      	mov	r3, r0
 8004642:	81bb      	strh	r3, [r7, #12]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8004644:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8004648:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	7c1b      	ldrb	r3, [r3, #16]
 8004650:	8978      	ldrh	r0, [r7, #10]
 8004652:	f7ff ff4b 	bl	80044ec <u8g2_add_vector_y>
 8004656:	4603      	mov	r3, r0
 8004658:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 800465a:	78bb      	ldrb	r3, [r7, #2]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d010      	beq.n	8004682 <u8g2_font_decode_len+0xaa>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	7b9a      	ldrb	r2, [r3, #14]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 800466a:	7dbb      	ldrb	r3, [r7, #22]
 800466c:	b298      	uxth	r0, r3
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	7c1b      	ldrb	r3, [r3, #16]
 8004672:	897a      	ldrh	r2, [r7, #10]
 8004674:	89b9      	ldrh	r1, [r7, #12]
 8004676:	9300      	str	r3, [sp, #0]
 8004678:	4603      	mov	r3, r0
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 fbfa 	bl	8004e74 <u8g2_DrawHVLine>
 8004680:	e013      	b.n	80046aa <u8g2_font_decode_len+0xd2>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	7b5b      	ldrb	r3, [r3, #13]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d10f      	bne.n	80046aa <u8g2_font_decode_len+0xd2>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	7bda      	ldrb	r2, [r3, #15]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 8004694:	7dbb      	ldrb	r3, [r7, #22]
 8004696:	b298      	uxth	r0, r3
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	7c1b      	ldrb	r3, [r3, #16]
 800469c:	897a      	ldrh	r2, [r7, #10]
 800469e:	89b9      	ldrh	r1, [r7, #12]
 80046a0:	9300      	str	r3, [sp, #0]
 80046a2:	4603      	mov	r3, r0
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f000 fbe5 	bl	8004e74 <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 80046aa:	7dfa      	ldrb	r2, [r7, #23]
 80046ac:	7bfb      	ldrb	r3, [r7, #15]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d309      	bcc.n	80046c6 <u8g2_font_decode_len+0xee>
      break;
    cnt -= rem;
 80046b2:	7dfa      	ldrb	r2, [r7, #23]
 80046b4:	7bfb      	ldrb	r3, [r7, #15]
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 80046ba:	2300      	movs	r3, #0
 80046bc:	757b      	strb	r3, [r7, #21]
    ly++;
 80046be:	7d3b      	ldrb	r3, [r7, #20]
 80046c0:	3301      	adds	r3, #1
 80046c2:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 80046c4:	e79d      	b.n	8004602 <u8g2_font_decode_len+0x2a>
      break;
 80046c6:	bf00      	nop
  }
  lx += cnt;
 80046c8:	7d7a      	ldrb	r2, [r7, #21]
 80046ca:	7dfb      	ldrb	r3, [r7, #23]
 80046cc:	4413      	add	r3, r2
 80046ce:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 80046d0:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	721a      	strb	r2, [r3, #8]
  decode->y = ly;  
 80046d8:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	725a      	strb	r2, [r3, #9]
}
 80046e0:	bf00      	nop
 80046e2:	3718      	adds	r7, #24
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <u8g2_font_setup_decode>:
  
}


static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b084      	sub	sp, #16
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	3360      	adds	r3, #96	; 0x60
 80046f6:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	683a      	ldr	r2, [r7, #0]
 80046fc:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2200      	movs	r2, #0
 8004702:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800470a:	4619      	mov	r1, r3
 800470c:	68f8      	ldr	r0, [r7, #12]
 800470e:	f7ff fe80 	bl	8004412 <u8g2_font_decode_get_unsigned_bits>
 8004712:	4603      	mov	r3, r0
 8004714:	b25a      	sxtb	r2, r3
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8004720:	4619      	mov	r1, r3
 8004722:	68f8      	ldr	r0, [r7, #12]
 8004724:	f7ff fe75 	bl	8004412 <u8g2_font_decode_get_unsigned_bits>
 8004728:	4603      	mov	r3, r0
 800472a:	b25a      	sxtb	r2, r3
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	7b9b      	ldrb	r3, [r3, #14]
 800473e:	2b00      	cmp	r3, #0
 8004740:	bf0c      	ite	eq
 8004742:	2301      	moveq	r3, #1
 8004744:	2300      	movne	r3, #0
 8004746:	b2db      	uxtb	r3, r3
 8004748:	461a      	mov	r2, r3
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	73da      	strb	r2, [r3, #15]
}
 800474e:	bf00      	nop
 8004750:	3710      	adds	r7, #16
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
	...

08004758 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b08a      	sub	sp, #40	; 0x28
 800475c:	af02      	add	r7, sp, #8
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	3360      	adds	r3, #96	; 0x60
 8004766:	617b      	str	r3, [r7, #20]
    
  u8g2_font_setup_decode(u8g2, glyph_data);     /* set values in u8g2->font_decode data structure */
 8004768:	6839      	ldr	r1, [r7, #0]
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f7ff ffbc 	bl	80046e8 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8004776:	74fb      	strb	r3, [r7, #19]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800477e:	4619      	mov	r1, r3
 8004780:	6978      	ldr	r0, [r7, #20]
 8004782:	f7ff fe90 	bl	80044a6 <u8g2_font_decode_get_signed_bits>
 8004786:	4603      	mov	r3, r0
 8004788:	74bb      	strb	r3, [r7, #18]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8004790:	4619      	mov	r1, r3
 8004792:	6978      	ldr	r0, [r7, #20]
 8004794:	f7ff fe87 	bl	80044a6 <u8g2_font_decode_get_signed_bits>
 8004798:	4603      	mov	r3, r0
 800479a:	747b      	strb	r3, [r7, #17]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80047a2:	4619      	mov	r1, r3
 80047a4:	6978      	ldr	r0, [r7, #20]
 80047a6:	f7ff fe7e 	bl	80044a6 <u8g2_font_decode_get_signed_bits>
 80047aa:	4603      	mov	r3, r0
 80047ac:	743b      	strb	r3, [r7, #16]
  
  if ( decode->glyph_width > 0 )
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	f340 80d7 	ble.w	8004968 <u8g2_font_decode_glyph+0x210>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	8898      	ldrh	r0, [r3, #4]
 80047be:	7cfa      	ldrb	r2, [r7, #19]
 80047c0:	7c7b      	ldrb	r3, [r7, #17]
 80047c2:	4413      	add	r3, r2
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	425b      	negs	r3, r3
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	b25a      	sxtb	r2, r3
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	7c1b      	ldrb	r3, [r3, #16]
 80047d0:	f997 1012 	ldrsb.w	r1, [r7, #18]
 80047d4:	f7ff fec5 	bl	8004562 <u8g2_add_vector_x>
 80047d8:	4603      	mov	r3, r0
 80047da:	461a      	mov	r2, r3
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	809a      	strh	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	88d8      	ldrh	r0, [r3, #6]
 80047e4:	7cfa      	ldrb	r2, [r7, #19]
 80047e6:	7c7b      	ldrb	r3, [r7, #17]
 80047e8:	4413      	add	r3, r2
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	425b      	negs	r3, r3
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	b25a      	sxtb	r2, r3
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	7c1b      	ldrb	r3, [r3, #16]
 80047f6:	f997 1012 	ldrsb.w	r1, [r7, #18]
 80047fa:	f7ff fe77 	bl	80044ec <u8g2_add_vector_y>
 80047fe:	4603      	mov	r3, r0
 8004800:	461a      	mov	r2, r3
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	80da      	strh	r2, [r3, #6]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	889b      	ldrh	r3, [r3, #4]
 800480a:	83fb      	strh	r3, [r7, #30]
      y0 = decode->target_y;
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	88db      	ldrh	r3, [r3, #6]
 8004810:	837b      	strh	r3, [r7, #26]
      x1 = x0;
 8004812:	8bfb      	ldrh	r3, [r7, #30]
 8004814:	83bb      	strh	r3, [r7, #28]
      y1 = y0;
 8004816:	8b7b      	ldrh	r3, [r7, #26]
 8004818:	833b      	strh	r3, [r7, #24]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	7c1b      	ldrb	r3, [r3, #16]
 800481e:	2b03      	cmp	r3, #3
 8004820:	d85a      	bhi.n	80048d8 <u8g2_font_decode_glyph+0x180>
 8004822:	a201      	add	r2, pc, #4	; (adr r2, 8004828 <u8g2_font_decode_glyph+0xd0>)
 8004824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004828:	08004839 	.word	0x08004839
 800482c:	08004855 	.word	0x08004855
 8004830:	0800487d 	.word	0x0800487d
 8004834:	080048b1 	.word	0x080048b1
      {
	case 0:
	    x1 += decode->glyph_width;
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800483e:	b29a      	uxth	r2, r3
 8004840:	8bbb      	ldrh	r3, [r7, #28]
 8004842:	4413      	add	r3, r2
 8004844:	83bb      	strh	r3, [r7, #28]
	    y1 += h;
 8004846:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800484a:	b29a      	uxth	r2, r3
 800484c:	8b3b      	ldrh	r3, [r7, #24]
 800484e:	4413      	add	r3, r2
 8004850:	833b      	strh	r3, [r7, #24]
	    break;
 8004852:	e041      	b.n	80048d8 <u8g2_font_decode_glyph+0x180>
	case 1:
	    x0 -= h;
 8004854:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004858:	b29b      	uxth	r3, r3
 800485a:	8bfa      	ldrh	r2, [r7, #30]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8004860:	8bfb      	ldrh	r3, [r7, #30]
 8004862:	3301      	adds	r3, #1
 8004864:	83fb      	strh	r3, [r7, #30]
	    x1++;
 8004866:	8bbb      	ldrh	r3, [r7, #28]
 8004868:	3301      	adds	r3, #1
 800486a:	83bb      	strh	r3, [r7, #28]
	    y1 += decode->glyph_width;
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8004872:	b29a      	uxth	r2, r3
 8004874:	8b3b      	ldrh	r3, [r7, #24]
 8004876:	4413      	add	r3, r2
 8004878:	833b      	strh	r3, [r7, #24]
	    break;
 800487a:	e02d      	b.n	80048d8 <u8g2_font_decode_glyph+0x180>
	case 2:
	    x0 -= decode->glyph_width;
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8004882:	b29b      	uxth	r3, r3
 8004884:	8bfa      	ldrh	r2, [r7, #30]
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800488a:	8bfb      	ldrh	r3, [r7, #30]
 800488c:	3301      	adds	r3, #1
 800488e:	83fb      	strh	r3, [r7, #30]
	    x1++;
 8004890:	8bbb      	ldrh	r3, [r7, #28]
 8004892:	3301      	adds	r3, #1
 8004894:	83bb      	strh	r3, [r7, #28]
	    y0 -= h;
 8004896:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800489a:	b29b      	uxth	r3, r3
 800489c:	8b7a      	ldrh	r2, [r7, #26]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80048a2:	8b7b      	ldrh	r3, [r7, #26]
 80048a4:	3301      	adds	r3, #1
 80048a6:	837b      	strh	r3, [r7, #26]
	    y1++;
 80048a8:	8b3b      	ldrh	r3, [r7, #24]
 80048aa:	3301      	adds	r3, #1
 80048ac:	833b      	strh	r3, [r7, #24]
	    break;	  
 80048ae:	e013      	b.n	80048d8 <u8g2_font_decode_glyph+0x180>
	case 3:
	    x1 += h;
 80048b0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80048b4:	b29a      	uxth	r2, r3
 80048b6:	8bbb      	ldrh	r3, [r7, #28]
 80048b8:	4413      	add	r3, r2
 80048ba:	83bb      	strh	r3, [r7, #28]
	    y0 -= decode->glyph_width;
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	8b7a      	ldrh	r2, [r7, #26]
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80048ca:	8b7b      	ldrh	r3, [r7, #26]
 80048cc:	3301      	adds	r3, #1
 80048ce:	837b      	strh	r3, [r7, #26]
	    y1++;
 80048d0:	8b3b      	ldrh	r3, [r7, #24]
 80048d2:	3301      	adds	r3, #1
 80048d4:	833b      	strh	r3, [r7, #24]
	    break;	  
 80048d6:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 80048d8:	8bb8      	ldrh	r0, [r7, #28]
 80048da:	8b7a      	ldrh	r2, [r7, #26]
 80048dc:	8bf9      	ldrh	r1, [r7, #30]
 80048de:	8b3b      	ldrh	r3, [r7, #24]
 80048e0:	9300      	str	r3, [sp, #0]
 80048e2:	4603      	mov	r3, r0
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f000 fb83 	bl	8004ff0 <u8g2_IsIntersection>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d102      	bne.n	80048f6 <u8g2_font_decode_glyph+0x19e>
	return d;
 80048f0:	f997 3010 	ldrsb.w	r3, [r7, #16]
 80048f4:	e03a      	b.n	800496c <u8g2_font_decode_glyph+0x214>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	2200      	movs	r2, #0
 80048fa:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	2200      	movs	r2, #0
 8004900:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8004908:	4619      	mov	r1, r3
 800490a:	6978      	ldr	r0, [r7, #20]
 800490c:	f7ff fd81 	bl	8004412 <u8g2_font_decode_get_unsigned_bits>
 8004910:	4603      	mov	r3, r0
 8004912:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 800491a:	4619      	mov	r1, r3
 800491c:	6978      	ldr	r0, [r7, #20]
 800491e:	f7ff fd78 	bl	8004412 <u8g2_font_decode_get_unsigned_bits>
 8004922:	4603      	mov	r3, r0
 8004924:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 8004926:	7bfb      	ldrb	r3, [r7, #15]
 8004928:	2200      	movs	r2, #0
 800492a:	4619      	mov	r1, r3
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f7ff fe53 	bl	80045d8 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8004932:	7bbb      	ldrb	r3, [r7, #14]
 8004934:	2201      	movs	r2, #1
 8004936:	4619      	mov	r1, r3
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f7ff fe4d 	bl	80045d8 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 800493e:	2101      	movs	r1, #1
 8004940:	6978      	ldr	r0, [r7, #20]
 8004942:	f7ff fd66 	bl	8004412 <u8g2_font_decode_get_unsigned_bits>
 8004946:	4603      	mov	r3, r0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d1ec      	bne.n	8004926 <u8g2_font_decode_glyph+0x1ce>

      if ( decode->y >= h )
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8004952:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8004956:	429a      	cmp	r2, r3
 8004958:	dd00      	ble.n	800495c <u8g2_font_decode_glyph+0x204>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 800495a:	e7d2      	b.n	8004902 <u8g2_font_decode_glyph+0x1aa>
	break;
 800495c:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	7b9a      	ldrb	r2, [r3, #14]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  }
  return d;
 8004968:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 800496c:	4618      	mov	r0, r3
 800496e:	3720      	adds	r7, #32
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b086      	sub	sp, #24
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	460b      	mov	r3, r1
 800497e:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004984:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	3317      	adds	r3, #23
 800498a:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 800498c:	887b      	ldrh	r3, [r7, #2]
 800498e:	2bff      	cmp	r3, #255	; 0xff
 8004990:	d82a      	bhi.n	80049e8 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 8004992:	887b      	ldrh	r3, [r7, #2]
 8004994:	2b60      	cmp	r3, #96	; 0x60
 8004996:	d907      	bls.n	80049a8 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800499e:	461a      	mov	r2, r3
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	4413      	add	r3, r2
 80049a4:	617b      	str	r3, [r7, #20]
 80049a6:	e009      	b.n	80049bc <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 80049a8:	887b      	ldrh	r3, [r7, #2]
 80049aa:	2b40      	cmp	r3, #64	; 0x40
 80049ac:	d906      	bls.n	80049bc <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 80049b4:	461a      	mov	r2, r3
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	4413      	add	r3, r2
 80049ba:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	3301      	adds	r3, #1
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d04e      	beq.n	8004a64 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	887a      	ldrh	r2, [r7, #2]
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d102      	bne.n	80049d8 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	3302      	adds	r3, #2
 80049d6:	e049      	b.n	8004a6c <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	3301      	adds	r3, #1
 80049dc:	781b      	ldrb	r3, [r3, #0]
 80049de:	461a      	mov	r2, r3
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	4413      	add	r3, r2
 80049e4:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 80049e6:	e7e9      	b.n	80049bc <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 80049ee:	461a      	mov	r2, r3
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	4413      	add	r3, r2
 80049f4:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 80049fa:	2100      	movs	r1, #0
 80049fc:	6938      	ldr	r0, [r7, #16]
 80049fe:	f7ff fc40 	bl	8004282 <u8g2_font_get_word>
 8004a02:	4603      	mov	r3, r0
 8004a04:	461a      	mov	r2, r3
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	4413      	add	r3, r2
 8004a0a:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8004a0c:	2102      	movs	r1, #2
 8004a0e:	6938      	ldr	r0, [r7, #16]
 8004a10:	f7ff fc37 	bl	8004282 <u8g2_font_get_word>
 8004a14:	4603      	mov	r3, r0
 8004a16:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	3304      	adds	r3, #4
 8004a1c:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 8004a1e:	89fa      	ldrh	r2, [r7, #14]
 8004a20:	887b      	ldrh	r3, [r7, #2]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d3e9      	bcc.n	80049fa <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 8004a2c:	89fb      	ldrh	r3, [r7, #14]
 8004a2e:	021b      	lsls	r3, r3, #8
 8004a30:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	3301      	adds	r3, #1
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	b29a      	uxth	r2, r3
 8004a3a:	89fb      	ldrh	r3, [r7, #14]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 8004a40:	89fb      	ldrh	r3, [r7, #14]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d010      	beq.n	8004a68 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 8004a46:	89fa      	ldrh	r2, [r7, #14]
 8004a48:	887b      	ldrh	r3, [r7, #2]
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d102      	bne.n	8004a54 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	3303      	adds	r3, #3
 8004a52:	e00b      	b.n	8004a6c <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	3302      	adds	r3, #2
 8004a58:	781b      	ldrb	r3, [r3, #0]
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	4413      	add	r3, r2
 8004a60:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 8004a62:	e7e0      	b.n	8004a26 <u8g2_font_get_glyph_data+0xb2>
	break;
 8004a64:	bf00      	nop
 8004a66:	e000      	b.n	8004a6a <u8g2_font_get_glyph_data+0xf6>
	break;
 8004a68:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 8004a6a:	2300      	movs	r3, #0
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3718      	adds	r7, #24
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}

08004a74 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b086      	sub	sp, #24
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	60f8      	str	r0, [r7, #12]
 8004a7c:	4608      	mov	r0, r1
 8004a7e:	4611      	mov	r1, r2
 8004a80:	461a      	mov	r2, r3
 8004a82:	4603      	mov	r3, r0
 8004a84:	817b      	strh	r3, [r7, #10]
 8004a86:	460b      	mov	r3, r1
 8004a88:	813b      	strh	r3, [r7, #8]
 8004a8a:	4613      	mov	r3, r2
 8004a8c:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t dx = 0;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	82fb      	strh	r3, [r7, #22]
  u8g2->font_decode.target_x = x;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	897a      	ldrh	r2, [r7, #10]
 8004a96:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  u8g2->font_decode.target_y = y;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	893a      	ldrh	r2, [r7, #8]
 8004a9e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8004aa2:	88fb      	ldrh	r3, [r7, #6]
 8004aa4:	4619      	mov	r1, r3
 8004aa6:	68f8      	ldr	r0, [r7, #12]
 8004aa8:	f7ff ff64 	bl	8004974 <u8g2_font_get_glyph_data>
 8004aac:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d005      	beq.n	8004ac0 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8004ab4:	6939      	ldr	r1, [r7, #16]
 8004ab6:	68f8      	ldr	r0, [r7, #12]
 8004ab8:	f7ff fe4e 	bl	8004758 <u8g2_font_decode_glyph>
 8004abc:	4603      	mov	r3, r0
 8004abe:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 8004ac0:	8afb      	ldrh	r3, [r7, #22]
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3718      	adds	r7, #24
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
	...

08004acc <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	4608      	mov	r0, r1
 8004ad6:	4611      	mov	r1, r2
 8004ad8:	461a      	mov	r2, r3
 8004ada:	4603      	mov	r3, r0
 8004adc:	817b      	strh	r3, [r7, #10]
 8004ade:	460b      	mov	r3, r1
 8004ae0:	813b      	strh	r3, [r7, #8]
 8004ae2:	4613      	mov	r3, r2
 8004ae4:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004aec:	2b03      	cmp	r3, #3
 8004aee:	d833      	bhi.n	8004b58 <u8g2_DrawGlyph+0x8c>
 8004af0:	a201      	add	r2, pc, #4	; (adr r2, 8004af8 <u8g2_DrawGlyph+0x2c>)
 8004af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004af6:	bf00      	nop
 8004af8:	08004b09 	.word	0x08004b09
 8004afc:	08004b1d 	.word	0x08004b1d
 8004b00:	08004b31 	.word	0x08004b31
 8004b04:	08004b45 	.word	0x08004b45
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b0c:	68f8      	ldr	r0, [r7, #12]
 8004b0e:	4798      	blx	r3
 8004b10:	4603      	mov	r3, r0
 8004b12:	461a      	mov	r2, r3
 8004b14:	893b      	ldrh	r3, [r7, #8]
 8004b16:	4413      	add	r3, r2
 8004b18:	813b      	strh	r3, [r7, #8]
      break;
 8004b1a:	e01d      	b.n	8004b58 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b20:	68f8      	ldr	r0, [r7, #12]
 8004b22:	4798      	blx	r3
 8004b24:	4603      	mov	r3, r0
 8004b26:	461a      	mov	r2, r3
 8004b28:	897b      	ldrh	r3, [r7, #10]
 8004b2a:	1a9b      	subs	r3, r3, r2
 8004b2c:	817b      	strh	r3, [r7, #10]
      break;
 8004b2e:	e013      	b.n	8004b58 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b34:	68f8      	ldr	r0, [r7, #12]
 8004b36:	4798      	blx	r3
 8004b38:	4603      	mov	r3, r0
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	893b      	ldrh	r3, [r7, #8]
 8004b3e:	1a9b      	subs	r3, r3, r2
 8004b40:	813b      	strh	r3, [r7, #8]
      break;
 8004b42:	e009      	b.n	8004b58 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b48:	68f8      	ldr	r0, [r7, #12]
 8004b4a:	4798      	blx	r3
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	461a      	mov	r2, r3
 8004b50:	897b      	ldrh	r3, [r7, #10]
 8004b52:	4413      	add	r3, r2
 8004b54:	817b      	strh	r3, [r7, #10]
      break;
 8004b56:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8004b58:	88fb      	ldrh	r3, [r7, #6]
 8004b5a:	893a      	ldrh	r2, [r7, #8]
 8004b5c:	8979      	ldrh	r1, [r7, #10]
 8004b5e:	68f8      	ldr	r0, [r7, #12]
 8004b60:	f7ff ff88 	bl	8004a74 <u8g2_font_draw_glyph>
 8004b64:	4603      	mov	r3, r0
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3710      	adds	r7, #16
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop

08004b70 <u8g2_draw_string>:
  return u8g2_font_2x_draw_glyph(u8g2, x, y, encoding);
}

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b086      	sub	sp, #24
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	607b      	str	r3, [r7, #4]
 8004b7a:	460b      	mov	r3, r1
 8004b7c:	817b      	strh	r3, [r7, #10]
 8004b7e:	4613      	mov	r3, r2
 8004b80:	813b      	strh	r3, [r7, #8]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8004b82:	68f8      	ldr	r0, [r7, #12]
 8004b84:	f000 fcfd 	bl	8005582 <u8x8_utf8_init>
  sum = 0;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	82fb      	strh	r3, [r7, #22]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	7812      	ldrb	r2, [r2, #0]
 8004b94:	4611      	mov	r1, r2
 8004b96:	68f8      	ldr	r0, [r7, #12]
 8004b98:	4798      	blx	r3
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 8004b9e:	8abb      	ldrh	r3, [r7, #20]
 8004ba0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d038      	beq.n	8004c1a <u8g2_draw_string+0xaa>
      break;
    str++;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	3301      	adds	r3, #1
 8004bac:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 8004bae:	8abb      	ldrh	r3, [r7, #20]
 8004bb0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d0e9      	beq.n	8004b8c <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8004bb8:	8abb      	ldrh	r3, [r7, #20]
 8004bba:	893a      	ldrh	r2, [r7, #8]
 8004bbc:	8979      	ldrh	r1, [r7, #10]
 8004bbe:	68f8      	ldr	r0, [r7, #12]
 8004bc0:	f7ff ff84 	bl	8004acc <u8g2_DrawGlyph>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	827b      	strh	r3, [r7, #18]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004bce:	2b03      	cmp	r3, #3
 8004bd0:	d81e      	bhi.n	8004c10 <u8g2_draw_string+0xa0>
 8004bd2:	a201      	add	r2, pc, #4	; (adr r2, 8004bd8 <u8g2_draw_string+0x68>)
 8004bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bd8:	08004be9 	.word	0x08004be9
 8004bdc:	08004bf3 	.word	0x08004bf3
 8004be0:	08004bfd 	.word	0x08004bfd
 8004be4:	08004c07 	.word	0x08004c07
      {
	case 0:
	  x += delta;
 8004be8:	897a      	ldrh	r2, [r7, #10]
 8004bea:	8a7b      	ldrh	r3, [r7, #18]
 8004bec:	4413      	add	r3, r2
 8004bee:	817b      	strh	r3, [r7, #10]
	  break;
 8004bf0:	e00e      	b.n	8004c10 <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 8004bf2:	893a      	ldrh	r2, [r7, #8]
 8004bf4:	8a7b      	ldrh	r3, [r7, #18]
 8004bf6:	4413      	add	r3, r2
 8004bf8:	813b      	strh	r3, [r7, #8]
	  break;
 8004bfa:	e009      	b.n	8004c10 <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8004bfc:	897a      	ldrh	r2, [r7, #10]
 8004bfe:	8a7b      	ldrh	r3, [r7, #18]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	817b      	strh	r3, [r7, #10]
	  break;
 8004c04:	e004      	b.n	8004c10 <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 8004c06:	893a      	ldrh	r2, [r7, #8]
 8004c08:	8a7b      	ldrh	r3, [r7, #18]
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	813b      	strh	r3, [r7, #8]
	  break;
 8004c0e:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 8004c10:	8afa      	ldrh	r2, [r7, #22]
 8004c12:	8a7b      	ldrh	r3, [r7, #18]
 8004c14:	4413      	add	r3, r2
 8004c16:	82fb      	strh	r3, [r7, #22]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8004c18:	e7b8      	b.n	8004b8c <u8g2_draw_string+0x1c>
      break;
 8004c1a:	bf00      	nop
    }
  }
  return sum;
 8004c1c:	8afb      	ldrh	r3, [r7, #22]
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3718      	adds	r7, #24
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	bf00      	nop

08004c28 <u8g2_DrawStr>:
  }
  return sum;
}

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	607b      	str	r3, [r7, #4]
 8004c32:	460b      	mov	r3, r1
 8004c34:	817b      	strh	r3, [r7, #10]
 8004c36:	4613      	mov	r3, r2
 8004c38:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	4a06      	ldr	r2, [pc, #24]	; (8004c58 <u8g2_DrawStr+0x30>)
 8004c3e:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8004c40:	893a      	ldrh	r2, [r7, #8]
 8004c42:	8979      	ldrh	r1, [r7, #10]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	68f8      	ldr	r0, [r7, #12]
 8004c48:	f7ff ff92 	bl	8004b70 <u8g2_draw_string>
 8004c4c:	4603      	mov	r3, r0
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3710      	adds	r7, #16
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	0800559d 	.word	0x0800559d

08004c5c <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b083      	sub	sp, #12
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d05d      	beq.n	8004d28 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f993 2081 	ldrsb.w	r2, [r3, #129]	; 0x81
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f993 2082 	ldrsb.w	r2, [r3, #130]	; 0x82
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d04d      	beq.n	8004d2a <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d11c      	bne.n	8004cd2 <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f993 208e 	ldrsb.w	r2, [r3, #142]	; 0x8e
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f993 3083 	ldrsb.w	r3, [r3, #131]	; 0x83
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	da05      	bge.n	8004cb4 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f993 3084 	ldrsb.w	r3, [r3, #132]	; 0x84
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	dd32      	ble.n	8004d2a <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f993 2084 	ldrsb.w	r2, [r3, #132]	; 0x84
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8004cd0:	e02b      	b.n	8004d2a <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 8004cd8:	461a      	mov	r2, r3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8004ce0:	4619      	mov	r1, r3
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8004ce8:	440b      	add	r3, r1
 8004cea:	429a      	cmp	r2, r3
 8004cec:	da0d      	bge.n	8004d0a <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8004cf4:	b2da      	uxtb	r2, r3
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	4413      	add	r3, r2
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	b25a      	sxtb	r2, r3
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8004d16:	429a      	cmp	r2, r3
 8004d18:	dd07      	ble.n	8004d2a <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f993 2080 	ldrsb.w	r2, [r3, #128]	; 0x80
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8004d26:	e000      	b.n	8004d2a <u8g2_UpdateRefHeight+0xce>
    return;
 8004d28:	bf00      	nop
  }  
}
 8004d2a:	370c      	adds	r7, #12
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bc80      	pop	{r7}
 8004d30:	4770      	bx	lr

08004d32 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8004d32:	b480      	push	{r7}
 8004d34:	b083      	sub	sp, #12
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	6078      	str	r0, [r7, #4]
  return 0;
 8004d3a:	2300      	movs	r3, #0
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	370c      	adds	r7, #12
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bc80      	pop	{r7}
 8004d44:	4770      	bx	lr
	...

08004d48 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	4a03      	ldr	r2, [pc, #12]	; (8004d60 <u8g2_SetFontPosBaseline+0x18>)
 8004d54:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004d56:	bf00      	nop
 8004d58:	370c      	adds	r7, #12
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bc80      	pop	{r7}
 8004d5e:	4770      	bx	lr
 8004d60:	08004d33 	.word	0x08004d33

08004d64 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b082      	sub	sp, #8
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d72:	683a      	ldr	r2, [r7, #0]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d00b      	beq.n	8004d90 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	683a      	ldr	r2, [r7, #0]
 8004d7c:	659a      	str	r2, [r3, #88]	; 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	3374      	adds	r3, #116	; 0x74
 8004d82:	6839      	ldr	r1, [r7, #0]
 8004d84:	4618      	mov	r0, r3
 8004d86:	f7ff fa9b 	bl	80042c0 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f7ff ff66 	bl	8004c5c <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8004d90:	bf00      	nop
 8004d92:	3708      	adds	r7, #8
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}

08004d98 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b087      	sub	sp, #28
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	60f8      	str	r0, [r7, #12]
 8004da0:	60b9      	str	r1, [r7, #8]
 8004da2:	4611      	mov	r1, r2
 8004da4:	461a      	mov	r2, r3
 8004da6:	460b      	mov	r3, r1
 8004da8:	80fb      	strh	r3, [r7, #6]
 8004daa:	4613      	mov	r3, r2
 8004dac:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	881b      	ldrh	r3, [r3, #0]
 8004db2:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 8004db4:	8afb      	ldrh	r3, [r7, #22]
 8004db6:	82bb      	strh	r3, [r7, #20]
  b += *len;
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	881a      	ldrh	r2, [r3, #0]
 8004dbc:	8abb      	ldrh	r3, [r7, #20]
 8004dbe:	4413      	add	r3, r2
 8004dc0:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8004dc2:	8afa      	ldrh	r2, [r7, #22]
 8004dc4:	8abb      	ldrh	r3, [r7, #20]
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d90b      	bls.n	8004de2 <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 8004dca:	8afa      	ldrh	r2, [r7, #22]
 8004dcc:	88bb      	ldrh	r3, [r7, #4]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d205      	bcs.n	8004dde <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8004dd2:	88bb      	ldrh	r3, [r7, #4]
 8004dd4:	82bb      	strh	r3, [r7, #20]
      b--;
 8004dd6:	8abb      	ldrh	r3, [r7, #20]
 8004dd8:	3b01      	subs	r3, #1
 8004dda:	82bb      	strh	r3, [r7, #20]
 8004ddc:	e001      	b.n	8004de2 <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 8004dde:	88fb      	ldrh	r3, [r7, #6]
 8004de0:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8004de2:	8afa      	ldrh	r2, [r7, #22]
 8004de4:	88bb      	ldrh	r3, [r7, #4]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d301      	bcc.n	8004dee <u8g2_clip_intersection2+0x56>
    return 0;
 8004dea:	2300      	movs	r3, #0
 8004dec:	e01c      	b.n	8004e28 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 8004dee:	8aba      	ldrh	r2, [r7, #20]
 8004df0:	88fb      	ldrh	r3, [r7, #6]
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d801      	bhi.n	8004dfa <u8g2_clip_intersection2+0x62>
    return 0;
 8004df6:	2300      	movs	r3, #0
 8004df8:	e016      	b.n	8004e28 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 8004dfa:	8afa      	ldrh	r2, [r7, #22]
 8004dfc:	88fb      	ldrh	r3, [r7, #6]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d201      	bcs.n	8004e06 <u8g2_clip_intersection2+0x6e>
    a = c;
 8004e02:	88fb      	ldrh	r3, [r7, #6]
 8004e04:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 8004e06:	8aba      	ldrh	r2, [r7, #20]
 8004e08:	88bb      	ldrh	r3, [r7, #4]
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d901      	bls.n	8004e12 <u8g2_clip_intersection2+0x7a>
    b = d;
 8004e0e:	88bb      	ldrh	r3, [r7, #4]
 8004e10:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	8afa      	ldrh	r2, [r7, #22]
 8004e16:	801a      	strh	r2, [r3, #0]
  b -= a;
 8004e18:	8aba      	ldrh	r2, [r7, #20]
 8004e1a:	8afb      	ldrh	r3, [r7, #22]
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	82bb      	strh	r3, [r7, #20]
  *len = b;
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	8aba      	ldrh	r2, [r7, #20]
 8004e24:	801a      	strh	r2, [r3, #0]
  return 1;
 8004e26:	2301      	movs	r3, #1
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	371c      	adds	r7, #28
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bc80      	pop	{r7}
 8004e30:	4770      	bx	lr

08004e32 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8004e32:	b590      	push	{r4, r7, lr}
 8004e34:	b087      	sub	sp, #28
 8004e36:	af02      	add	r7, sp, #8
 8004e38:	60f8      	str	r0, [r7, #12]
 8004e3a:	4608      	mov	r0, r1
 8004e3c:	4611      	mov	r1, r2
 8004e3e:	461a      	mov	r2, r3
 8004e40:	4603      	mov	r3, r0
 8004e42:	817b      	strh	r3, [r7, #10]
 8004e44:	460b      	mov	r3, r1
 8004e46:	813b      	strh	r3, [r7, #8]
 8004e48:	4613      	mov	r3, r2
 8004e4a:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e50:	893a      	ldrh	r2, [r7, #8]
 8004e52:	1ad3      	subs	r3, r2, r3
 8004e54:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8004e5a:	88f8      	ldrh	r0, [r7, #6]
 8004e5c:	893a      	ldrh	r2, [r7, #8]
 8004e5e:	8979      	ldrh	r1, [r7, #10]
 8004e60:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004e64:	9300      	str	r3, [sp, #0]
 8004e66:	4603      	mov	r3, r0
 8004e68:	68f8      	ldr	r0, [r7, #12]
 8004e6a:	47a0      	blx	r4
}
 8004e6c:	bf00      	nop
 8004e6e:	3714      	adds	r7, #20
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd90      	pop	{r4, r7, pc}

08004e74 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8004e74:	b590      	push	{r4, r7, lr}
 8004e76:	b087      	sub	sp, #28
 8004e78:	af02      	add	r7, sp, #8
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	4608      	mov	r0, r1
 8004e7e:	4611      	mov	r1, r2
 8004e80:	461a      	mov	r2, r3
 8004e82:	4603      	mov	r3, r0
 8004e84:	817b      	strh	r3, [r7, #10]
 8004e86:	460b      	mov	r3, r1
 8004e88:	813b      	strh	r3, [r7, #8]
 8004e8a:	4613      	mov	r3, r2
 8004e8c:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d075      	beq.n	8004f84 <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8004e98:	88fb      	ldrh	r3, [r7, #6]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d072      	beq.n	8004f84 <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8004e9e:	88fb      	ldrh	r3, [r7, #6]
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d91a      	bls.n	8004eda <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 8004ea4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004ea8:	2b02      	cmp	r3, #2
 8004eaa:	d109      	bne.n	8004ec0 <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 8004eac:	897a      	ldrh	r2, [r7, #10]
 8004eae:	88fb      	ldrh	r3, [r7, #6]
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	817b      	strh	r3, [r7, #10]
	  x++;
 8004eb6:	897b      	ldrh	r3, [r7, #10]
 8004eb8:	3301      	adds	r3, #1
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	817b      	strh	r3, [r7, #10]
 8004ebe:	e00c      	b.n	8004eda <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 8004ec0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004ec4:	2b03      	cmp	r3, #3
 8004ec6:	d108      	bne.n	8004eda <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 8004ec8:	893a      	ldrh	r2, [r7, #8]
 8004eca:	88fb      	ldrh	r3, [r7, #6]
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	813b      	strh	r3, [r7, #8]
	  y++;
 8004ed2:	893b      	ldrh	r3, [r7, #8]
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 8004eda:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004ede:	f003 0301 	and.w	r3, r3, #1
 8004ee2:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 8004ee6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d11a      	bne.n	8004f24 <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8004ef4:	893b      	ldrh	r3, [r7, #8]
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d83b      	bhi.n	8004f72 <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8004f00:	893b      	ldrh	r3, [r7, #8]
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d937      	bls.n	8004f76 <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8004f12:	1db9      	adds	r1, r7, #6
 8004f14:	f107 000a 	add.w	r0, r7, #10
 8004f18:	f7ff ff3e 	bl	8004d98 <u8g2_clip_intersection2>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d11a      	bne.n	8004f58 <u8g2_DrawHVLine+0xe4>
	  return;
 8004f22:	e02f      	b.n	8004f84 <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8004f2a:	897b      	ldrh	r3, [r7, #10]
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d824      	bhi.n	8004f7a <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8004f36:	897b      	ldrh	r3, [r7, #10]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d920      	bls.n	8004f7e <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8004f48:	1db9      	adds	r1, r7, #6
 8004f4a:	f107 0008 	add.w	r0, r7, #8
 8004f4e:	f7ff ff23 	bl	8004d98 <u8g2_clip_intersection2>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d014      	beq.n	8004f82 <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f5c:	689c      	ldr	r4, [r3, #8]
 8004f5e:	8979      	ldrh	r1, [r7, #10]
 8004f60:	893a      	ldrh	r2, [r7, #8]
 8004f62:	88f8      	ldrh	r0, [r7, #6]
 8004f64:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004f68:	9300      	str	r3, [sp, #0]
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	68f8      	ldr	r0, [r7, #12]
 8004f6e:	47a0      	blx	r4
 8004f70:	e008      	b.n	8004f84 <u8g2_DrawHVLine+0x110>
	  return;
 8004f72:	bf00      	nop
 8004f74:	e006      	b.n	8004f84 <u8g2_DrawHVLine+0x110>
	  return;
 8004f76:	bf00      	nop
 8004f78:	e004      	b.n	8004f84 <u8g2_DrawHVLine+0x110>
	  return;
 8004f7a:	bf00      	nop
 8004f7c:	e002      	b.n	8004f84 <u8g2_DrawHVLine+0x110>
	  return;
 8004f7e:	bf00      	nop
 8004f80:	e000      	b.n	8004f84 <u8g2_DrawHVLine+0x110>
	  return;
 8004f82:	bf00      	nop
    }
}
 8004f84:	3714      	adds	r7, #20
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd90      	pop	{r4, r7, pc}

08004f8a <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8004f8a:	b490      	push	{r4, r7}
 8004f8c:	b082      	sub	sp, #8
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	4604      	mov	r4, r0
 8004f92:	4608      	mov	r0, r1
 8004f94:	4611      	mov	r1, r2
 8004f96:	461a      	mov	r2, r3
 8004f98:	4623      	mov	r3, r4
 8004f9a:	80fb      	strh	r3, [r7, #6]
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	80bb      	strh	r3, [r7, #4]
 8004fa0:	460b      	mov	r3, r1
 8004fa2:	807b      	strh	r3, [r7, #2]
 8004fa4:	4613      	mov	r3, r2
 8004fa6:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 8004fa8:	887a      	ldrh	r2, [r7, #2]
 8004faa:	88bb      	ldrh	r3, [r7, #4]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d20d      	bcs.n	8004fcc <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8004fb0:	883a      	ldrh	r2, [r7, #0]
 8004fb2:	88fb      	ldrh	r3, [r7, #6]
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d901      	bls.n	8004fbc <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e014      	b.n	8004fe6 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8004fbc:	887a      	ldrh	r2, [r7, #2]
 8004fbe:	883b      	ldrh	r3, [r7, #0]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d901      	bls.n	8004fc8 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e00e      	b.n	8004fe6 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	e00c      	b.n	8004fe6 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8004fcc:	883a      	ldrh	r2, [r7, #0]
 8004fce:	88fb      	ldrh	r3, [r7, #6]
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d907      	bls.n	8004fe4 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8004fd4:	887a      	ldrh	r2, [r7, #2]
 8004fd6:	883b      	ldrh	r3, [r7, #0]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d901      	bls.n	8004fe0 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e002      	b.n	8004fe6 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	e000      	b.n	8004fe6 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8004fe4:	2300      	movs	r3, #0
    }
  }
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3708      	adds	r7, #8
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bc90      	pop	{r4, r7}
 8004fee:	4770      	bx	lr

08004ff0 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	4608      	mov	r0, r1
 8004ffa:	4611      	mov	r1, r2
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	4603      	mov	r3, r0
 8005000:	817b      	strh	r3, [r7, #10]
 8005002:	460b      	mov	r3, r1
 8005004:	813b      	strh	r3, [r7, #8]
 8005006:	4613      	mov	r3, r2
 8005008:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f8b3 104e 	ldrh.w	r1, [r3, #78]	; 0x4e
 8005016:	8b3b      	ldrh	r3, [r7, #24]
 8005018:	893a      	ldrh	r2, [r7, #8]
 800501a:	f7ff ffb6 	bl	8004f8a <u8g2_is_intersection_decision_tree>
 800501e:	4603      	mov	r3, r0
 8005020:	2b00      	cmp	r3, #0
 8005022:	d101      	bne.n	8005028 <u8g2_IsIntersection+0x38>
    return 0; 
 8005024:	2300      	movs	r3, #0
 8005026:	e00a      	b.n	800503e <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
 8005034:	88fb      	ldrh	r3, [r7, #6]
 8005036:	897a      	ldrh	r2, [r7, #10]
 8005038:	f7ff ffa7 	bl	8004f8a <u8g2_is_intersection_decision_tree>
 800503c:	4603      	mov	r3, r0
}
 800503e:	4618      	mov	r0, r3
 8005040:	3710      	adds	r7, #16
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}

08005046 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8005046:	b480      	push	{r7}
 8005048:	b089      	sub	sp, #36	; 0x24
 800504a:	af00      	add	r7, sp, #0
 800504c:	60f8      	str	r0, [r7, #12]
 800504e:	4608      	mov	r0, r1
 8005050:	4611      	mov	r1, r2
 8005052:	461a      	mov	r2, r3
 8005054:	4603      	mov	r3, r0
 8005056:	817b      	strh	r3, [r7, #10]
 8005058:	460b      	mov	r3, r1
 800505a:	813b      	strh	r3, [r7, #8]
 800505c:	4613      	mov	r3, r2
 800505e:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8005060:	893b      	ldrh	r3, [r7, #8]
 8005062:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8005064:	7efb      	ldrb	r3, [r7, #27]
 8005066:	f003 0307 	and.w	r3, r3, #7
 800506a:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 800506c:	2301      	movs	r3, #1
 800506e:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 8005070:	7e3a      	ldrb	r2, [r7, #24]
 8005072:	7efb      	ldrb	r3, [r7, #27]
 8005074:	fa02 f303 	lsl.w	r3, r2, r3
 8005078:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 800507a:	2300      	movs	r3, #0
 800507c:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 800507e:	2300      	movs	r3, #0
 8005080:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8005088:	2b01      	cmp	r3, #1
 800508a:	d801      	bhi.n	8005090 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 800508c:	7e3b      	ldrb	r3, [r7, #24]
 800508e:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8005096:	2b01      	cmp	r3, #1
 8005098:	d001      	beq.n	800509e <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 800509a:	7e3b      	ldrb	r3, [r7, #24]
 800509c:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 800509e:	893b      	ldrh	r3, [r7, #8]
 80050a0:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 80050a2:	8afb      	ldrh	r3, [r7, #22]
 80050a4:	f023 0307 	bic.w	r3, r3, #7
 80050a8:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	7c1b      	ldrb	r3, [r3, #16]
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	8afa      	ldrh	r2, [r7, #22]
 80050b4:	fb02 f303 	mul.w	r3, r2, r3
 80050b8:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050be:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 80050c0:	8afb      	ldrh	r3, [r7, #22]
 80050c2:	69fa      	ldr	r2, [r7, #28]
 80050c4:	4413      	add	r3, r2
 80050c6:	61fb      	str	r3, [r7, #28]
  ptr += x;
 80050c8:	897b      	ldrh	r3, [r7, #10]
 80050ca:	69fa      	ldr	r2, [r7, #28]
 80050cc:	4413      	add	r3, r2
 80050ce:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 80050d0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d117      	bne.n	8005108 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	781a      	ldrb	r2, [r3, #0]
 80050dc:	7ebb      	ldrb	r3, [r7, #26]
 80050de:	4313      	orrs	r3, r2
 80050e0:	b2da      	uxtb	r2, r3
 80050e2:	69fb      	ldr	r3, [r7, #28]
 80050e4:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	781a      	ldrb	r2, [r3, #0]
 80050ea:	7e7b      	ldrb	r3, [r7, #25]
 80050ec:	4053      	eors	r3, r2
 80050ee:	b2da      	uxtb	r2, r3
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	701a      	strb	r2, [r3, #0]
	ptr++;
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	3301      	adds	r3, #1
 80050f8:	61fb      	str	r3, [r7, #28]
	len--;
 80050fa:	88fb      	ldrh	r3, [r7, #6]
 80050fc:	3b01      	subs	r3, #1
 80050fe:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 8005100:	88fb      	ldrh	r3, [r7, #6]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d1e8      	bne.n	80050d8 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8005106:	e038      	b.n	800517a <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	781a      	ldrb	r2, [r3, #0]
 800510c:	7ebb      	ldrb	r3, [r7, #26]
 800510e:	4313      	orrs	r3, r2
 8005110:	b2da      	uxtb	r2, r3
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	781a      	ldrb	r2, [r3, #0]
 800511a:	7e7b      	ldrb	r3, [r7, #25]
 800511c:	4053      	eors	r3, r2
 800511e:	b2da      	uxtb	r2, r3
 8005120:	69fb      	ldr	r3, [r7, #28]
 8005122:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8005124:	7efb      	ldrb	r3, [r7, #27]
 8005126:	3301      	adds	r3, #1
 8005128:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 800512a:	7efb      	ldrb	r3, [r7, #27]
 800512c:	f003 0307 	and.w	r3, r3, #7
 8005130:	76fb      	strb	r3, [r7, #27]
      len--;
 8005132:	88fb      	ldrh	r3, [r7, #6]
 8005134:	3b01      	subs	r3, #1
 8005136:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 8005138:	7efb      	ldrb	r3, [r7, #27]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d114      	bne.n	8005168 <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8005142:	461a      	mov	r2, r3
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	4413      	add	r3, r2
 8005148:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8005150:	2b01      	cmp	r3, #1
 8005152:	d801      	bhi.n	8005158 <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 8005154:	2301      	movs	r3, #1
 8005156:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 800515e:	2b01      	cmp	r3, #1
 8005160:	d008      	beq.n	8005174 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 8005162:	2301      	movs	r3, #1
 8005164:	767b      	strb	r3, [r7, #25]
 8005166:	e005      	b.n	8005174 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 8005168:	7ebb      	ldrb	r3, [r7, #26]
 800516a:	005b      	lsls	r3, r3, #1
 800516c:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 800516e:	7e7b      	ldrb	r3, [r7, #25]
 8005170:	005b      	lsls	r3, r3, #1
 8005172:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 8005174:	88fb      	ldrh	r3, [r7, #6]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d1c6      	bne.n	8005108 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 800517a:	bf00      	nop
 800517c:	3724      	adds	r7, #36	; 0x24
 800517e:	46bd      	mov	sp, r7
 8005180:	bc80      	pop	{r7}
 8005182:	4770      	bx	lr

08005184 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b082      	sub	sp, #8
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  u8g2->clip_y0 = 0;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80051a2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80051ac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  
  u8g2->cb->update_page_win(u8g2);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	4798      	blx	r3
}
 80051ba:	bf00      	nop
 80051bc:	3708      	adds	r7, #8
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}

080051c2 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 80051c2:	b580      	push	{r7, lr}
 80051c4:	b084      	sub	sp, #16
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	60f8      	str	r0, [r7, #12]
 80051ca:	60b9      	str	r1, [r7, #8]
 80051cc:	603b      	str	r3, [r7, #0]
 80051ce:	4613      	mov	r3, r2
 80051d0:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2200      	movs	r2, #0
 80051d6:	659a      	str	r2, [r3, #88]	; 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	683a      	ldr	r2, [r7, #0]
 80051dc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	68ba      	ldr	r2, [r7, #8]
 80051e2:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	79fa      	ldrb	r2, [r7, #7]
 80051e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2200      	movs	r2, #0
 80051f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  u8g2->bitmap_transparency = 0;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2200      	movs	r2, #0
 8005200:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  
  u8g2->font_height_mode = 0; /* issue 2046 */
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2200      	movs	r2, #0
 8005208:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
  u8g2->draw_color = 1;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  u8g2->is_auto_page_clear = 1;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
  
  u8g2->cb = u8g2_cb;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	69ba      	ldr	r2, [r7, #24]
 8005220:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	68f8      	ldr	r0, [r7, #12]
 800522a:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 800522c:	68f8      	ldr	r0, [r7, #12]
 800522e:	f7ff ffa9 	bl	8005184 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8005232:	68f8      	ldr	r0, [r7, #12]
 8005234:	f7ff fd88 	bl	8004d48 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2200      	movs	r2, #0
 800523c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
#endif
}
 8005240:	bf00      	nop
 8005242:	3710      	adds	r7, #16
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}

08005248 <u8g2_SetDisplayRotation>:
/*
  Usually the display rotation is set initially, but it could be done later also
  u8g2_cb can be U8G2_R0..U8G2_R3
*/
void u8g2_SetDisplayRotation(u8g2_t *u8g2, const u8g2_cb_t *u8g2_cb)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b082      	sub	sp, #8
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]
  u8g2->cb = u8g2_cb;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	683a      	ldr	r2, [r7, #0]
 8005256:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	4798      	blx	r3
}
 800526c:	bf00      	nop
 800526e:	3708      	adds	r7, #8
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}

08005274 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8005274:	b480      	push	{r7}
 8005276:	b085      	sub	sp, #20
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005288:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 800528a:	89fb      	ldrh	r3, [r7, #14]
 800528c:	00db      	lsls	r3, r3, #3
 800528e:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	89fa      	ldrh	r2, [r7, #14]
 8005294:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  t = display_info->tile_width;
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	7c1b      	ldrb	r3, [r3, #16]
 800529a:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 800529c:	89fb      	ldrh	r3, [r7, #14]
 800529e:	00db      	lsls	r3, r3, #3
 80052a0:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	89fa      	ldrh	r2, [r7, #14]
 80052a6:	875a      	strh	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80052ae:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 80052b0:	89fb      	ldrh	r3, [r7, #14]
 80052b2:	00db      	lsls	r3, r3, #3
 80052b4:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	89fa      	ldrh	r2, [r7, #14]
 80052ba:	87da      	strh	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_buf_height;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80052c2:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 80052c4:	89fb      	ldrh	r3, [r7, #14]
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 80052cc:	4413      	add	r3, r2
 80052ce:	68ba      	ldr	r2, [r7, #8]
 80052d0:	7c52      	ldrb	r2, [r2, #17]
 80052d2:	4293      	cmp	r3, r2
 80052d4:	dd08      	ble.n	80052e8 <u8g2_update_dimension_common+0x74>
    t = display_info->tile_height - u8g2->tile_curr_row;
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	7c5b      	ldrb	r3, [r3, #17]
 80052da:	b29a      	uxth	r2, r3
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	1ad3      	subs	r3, r2, r3
 80052e6:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 80052e8:	89fb      	ldrh	r3, [r7, #14]
 80052ea:	00db      	lsls	r3, r3, #3
 80052ec:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 800530a:	89fb      	ldrh	r3, [r7, #14]
 800530c:	4413      	add	r3, r2
 800530e:	b29a      	uxth	r2, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	8a9a      	ldrh	r2, [r3, #20]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  u8g2->height = display_info->pixel_height;
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	8ada      	ldrh	r2, [r3, #22]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 800532a:	bf00      	nop
 800532c:	3714      	adds	r7, #20
 800532e:	46bd      	mov	sp, r7
 8005330:	bc80      	pop	{r7}
 8005332:	4770      	bx	lr

08005334 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b084      	sub	sp, #16
 8005338:	af02      	add	r7, sp, #8
 800533a:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f8b3 0052 	ldrh.w	r0, [r3, #82]	; 0x52
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005354:	9300      	str	r3, [sp, #0]
 8005356:	4603      	mov	r3, r0
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f7ff fe49 	bl	8004ff0 <u8g2_IsIntersection>
 800535e:	4603      	mov	r3, r0
 8005360:	2b00      	cmp	r3, #0
 8005362:	d104      	bne.n	800536e <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 800536c:	e03b      	b.n	80053e6 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2201      	movs	r2, #1
 8005372:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005382:	429a      	cmp	r2, r3
 8005384:	d205      	bcs.n	8005392 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800539e:	429a      	cmp	r2, r3
 80053a0:	d905      	bls.n	80053ae <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d205      	bcs.n	80053ca <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d905      	bls.n	80053e6 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 80053e6:	bf00      	nop
 80053e8:	3708      	adds	r7, #8
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}

080053ee <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 80053ee:	b580      	push	{r7, lr}
 80053f0:	b082      	sub	sp, #8
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f7ff ff3c 	bl	8005274 <u8g2_update_dimension_common>
}
 80053fc:	bf00      	nop
 80053fe:	3708      	adds	r7, #8
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}

08005404 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b082      	sub	sp, #8
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  
  u8g2->user_y0 = u8g2->buf_y0;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  u8g2->user_y1 = u8g2->buf_y1;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f7ff ff7b 	bl	8005334 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 800543e:	bf00      	nop
 8005440:	3708      	adds	r7, #8
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}

08005446 <u8g2_update_dimension_r2>:
  u8g2_apply_clip_window(u8g2);
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}

void u8g2_update_dimension_r2(u8g2_t *u8g2)
{
 8005446:	b580      	push	{r7, lr}
 8005448:	b082      	sub	sp, #8
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f7ff ff10 	bl	8005274 <u8g2_update_dimension_common>
}
 8005454:	bf00      	nop
 8005456:	3708      	adds	r7, #8
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}

0800545c <u8g2_update_page_win_r2>:

void u8g2_update_page_win_r2(u8g2_t *u8g2)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b082      	sub	sp, #8
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  u8g2->user_x1 = u8g2->width;	/* pixel_buf_width replaced with width */
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  
  /* there are ases where the height is not a multiple of 8. */
  /* in such a case u8g2->buf_y1 might be heigher than u8g2->height */
  u8g2->user_y0 = 0;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2200      	movs	r2, #0
 800547c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  if ( u8g2->height >= u8g2->buf_y1 )
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f8b3 2046 	ldrh.w	r2, [r3, #70]	; 0x46
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 800548c:	429a      	cmp	r2, r3
 800548e:	d30a      	bcc.n	80054a6 <u8g2_update_page_win_r2+0x4a>
    u8g2->user_y0 = u8g2->height - u8g2->buf_y1;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f8b3 2046 	ldrh.w	r2, [r3, #70]	; 0x46
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 800549c:	1ad3      	subs	r3, r2, r3
 800549e:	b29a      	uxth	r2, r3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  u8g2->user_y1 = u8g2->height - u8g2->buf_y0;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f8b3 2046 	ldrh.w	r2, [r3, #70]	; 0x46
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80054b2:	1ad3      	subs	r3, r2, r3
 80054b4:	b29a      	uxth	r2, r3
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f7ff ff39 	bl	8005334 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 80054c2:	bf00      	nop
 80054c4:	3708      	adds	r7, #8
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}

080054ca <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80054ca:	b580      	push	{r7, lr}
 80054cc:	b086      	sub	sp, #24
 80054ce:	af02      	add	r7, sp, #8
 80054d0:	60f8      	str	r0, [r7, #12]
 80054d2:	4608      	mov	r0, r1
 80054d4:	4611      	mov	r1, r2
 80054d6:	461a      	mov	r2, r3
 80054d8:	4603      	mov	r3, r0
 80054da:	817b      	strh	r3, [r7, #10]
 80054dc:	460b      	mov	r3, r1
 80054de:	813b      	strh	r3, [r7, #8]
 80054e0:	4613      	mov	r3, r2
 80054e2:	80fb      	strh	r3, [r7, #6]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 80054e4:	88f8      	ldrh	r0, [r7, #6]
 80054e6:	893a      	ldrh	r2, [r7, #8]
 80054e8:	8979      	ldrh	r1, [r7, #10]
 80054ea:	7e3b      	ldrb	r3, [r7, #24]
 80054ec:	9300      	str	r3, [sp, #0]
 80054ee:	4603      	mov	r3, r0
 80054f0:	68f8      	ldr	r0, [r7, #12]
 80054f2:	f7ff fc9e 	bl	8004e32 <u8g2_draw_hv_line_2dir>
}
 80054f6:	bf00      	nop
 80054f8:	3710      	adds	r7, #16
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}

080054fe <u8g2_draw_l90_r2>:
  
  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
}

void u8g2_draw_l90_r2(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80054fe:	b580      	push	{r7, lr}
 8005500:	b088      	sub	sp, #32
 8005502:	af02      	add	r7, sp, #8
 8005504:	60f8      	str	r0, [r7, #12]
 8005506:	4608      	mov	r0, r1
 8005508:	4611      	mov	r1, r2
 800550a:	461a      	mov	r2, r3
 800550c:	4603      	mov	r3, r0
 800550e:	817b      	strh	r3, [r7, #10]
 8005510:	460b      	mov	r3, r1
 8005512:	813b      	strh	r3, [r7, #8]
 8005514:	4613      	mov	r3, r2
 8005516:	80fb      	strh	r3, [r7, #6]
    yy -= len;
    yy++;
  }
  */

  yy = u8g2->height;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800551e:	82bb      	strh	r3, [r7, #20]
  yy -= y;
 8005520:	8aba      	ldrh	r2, [r7, #20]
 8005522:	893b      	ldrh	r3, [r7, #8]
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	82bb      	strh	r3, [r7, #20]
  
  xx = u8g2->width;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800552e:	82fb      	strh	r3, [r7, #22]
  xx -= x;
 8005530:	8afa      	ldrh	r2, [r7, #22]
 8005532:	897b      	ldrh	r3, [r7, #10]
 8005534:	1ad3      	subs	r3, r2, r3
 8005536:	82fb      	strh	r3, [r7, #22]
  
  if ( dir == 0 )
 8005538:	f897 3020 	ldrb.w	r3, [r7, #32]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d107      	bne.n	8005550 <u8g2_draw_l90_r2+0x52>
  {
    yy--;
 8005540:	8abb      	ldrh	r3, [r7, #20]
 8005542:	3b01      	subs	r3, #1
 8005544:	82bb      	strh	r3, [r7, #20]
    xx -= len;
 8005546:	8afa      	ldrh	r2, [r7, #22]
 8005548:	88fb      	ldrh	r3, [r7, #6]
 800554a:	1ad3      	subs	r3, r2, r3
 800554c:	82fb      	strh	r3, [r7, #22]
 800554e:	e00a      	b.n	8005566 <u8g2_draw_l90_r2+0x68>
  }
  else if ( dir == 1 )
 8005550:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005554:	2b01      	cmp	r3, #1
 8005556:	d106      	bne.n	8005566 <u8g2_draw_l90_r2+0x68>
  {
    xx--;
 8005558:	8afb      	ldrh	r3, [r7, #22]
 800555a:	3b01      	subs	r3, #1
 800555c:	82fb      	strh	r3, [r7, #22]
    yy -= len;
 800555e:	8aba      	ldrh	r2, [r7, #20]
 8005560:	88fb      	ldrh	r3, [r7, #6]
 8005562:	1ad3      	subs	r3, r2, r3
 8005564:	82bb      	strh	r3, [r7, #20]
  }

  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 8005566:	88f8      	ldrh	r0, [r7, #6]
 8005568:	8aba      	ldrh	r2, [r7, #20]
 800556a:	8af9      	ldrh	r1, [r7, #22]
 800556c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005570:	9300      	str	r3, [sp, #0]
 8005572:	4603      	mov	r3, r0
 8005574:	68f8      	ldr	r0, [r7, #12]
 8005576:	f7ff fc5c 	bl	8004e32 <u8g2_draw_hv_line_2dir>
}
 800557a:	bf00      	nop
 800557c:	3718      	adds	r7, #24
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}

08005582 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8005582:	b480      	push	{r7}
 8005584:	b083      	sub	sp, #12
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8005592:	bf00      	nop
 8005594:	370c      	adds	r7, #12
 8005596:	46bd      	mov	sp, r7
 8005598:	bc80      	pop	{r7}
 800559a:	4770      	bx	lr

0800559c <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	460b      	mov	r3, r1
 80055a6:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 80055a8:	78fb      	ldrb	r3, [r7, #3]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d002      	beq.n	80055b4 <u8x8_ascii_next+0x18>
 80055ae:	78fb      	ldrb	r3, [r7, #3]
 80055b0:	2b0a      	cmp	r3, #10
 80055b2:	d102      	bne.n	80055ba <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 80055b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80055b8:	e001      	b.n	80055be <u8x8_ascii_next+0x22>
  return b;
 80055ba:	78fb      	ldrb	r3, [r7, #3]
 80055bc:	b29b      	uxth	r3, r3
}
 80055be:	4618      	mov	r0, r3
 80055c0:	370c      	adds	r7, #12
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bc80      	pop	{r7}
 80055c6:	4770      	bx	lr

080055c8 <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 80055c8:	b590      	push	{r4, r7, lr}
 80055ca:	b083      	sub	sp, #12
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	460b      	mov	r3, r1
 80055d2:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	691c      	ldr	r4, [r3, #16]
 80055d8:	78fa      	ldrb	r2, [r7, #3]
 80055da:	2300      	movs	r3, #0
 80055dc:	2120      	movs	r1, #32
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	47a0      	blx	r4
 80055e2:	4603      	mov	r3, r0
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	370c      	adds	r7, #12
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd90      	pop	{r4, r7, pc}

080055ec <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 80055ec:	b590      	push	{r4, r7, lr}
 80055ee:	b085      	sub	sp, #20
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	460b      	mov	r3, r1
 80055f6:	607a      	str	r2, [r7, #4]
 80055f8:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	691c      	ldr	r4, [r3, #16]
 80055fe:	7afa      	ldrb	r2, [r7, #11]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2117      	movs	r1, #23
 8005604:	68f8      	ldr	r0, [r7, #12]
 8005606:	47a0      	blx	r4
 8005608:	4603      	mov	r3, r0
}
 800560a:	4618      	mov	r0, r3
 800560c:	3714      	adds	r7, #20
 800560e:	46bd      	mov	sp, r7
 8005610:	bd90      	pop	{r4, r7, pc}

08005612 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8005612:	b580      	push	{r7, lr}
 8005614:	b082      	sub	sp, #8
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]
 800561a:	460b      	mov	r3, r1
 800561c:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 800561e:	1cfb      	adds	r3, r7, #3
 8005620:	461a      	mov	r2, r3
 8005622:	2101      	movs	r1, #1
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f7ff ffe1 	bl	80055ec <u8x8_byte_SendBytes>
 800562a:	4603      	mov	r3, r0
}
 800562c:	4618      	mov	r0, r3
 800562e:	3708      	adds	r7, #8
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}

08005634 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8005634:	b590      	push	{r4, r7, lr}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	460b      	mov	r3, r1
 800563e:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	68dc      	ldr	r4, [r3, #12]
 8005644:	78fa      	ldrb	r2, [r7, #3]
 8005646:	2300      	movs	r3, #0
 8005648:	2115      	movs	r1, #21
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	47a0      	blx	r4
 800564e:	4603      	mov	r3, r0
}
 8005650:	4618      	mov	r0, r3
 8005652:	370c      	adds	r7, #12
 8005654:	46bd      	mov	sp, r7
 8005656:	bd90      	pop	{r4, r7, pc}

08005658 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8005658:	b590      	push	{r4, r7, lr}
 800565a:	b083      	sub	sp, #12
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	460b      	mov	r3, r1
 8005662:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	68dc      	ldr	r4, [r3, #12]
 8005668:	78fa      	ldrb	r2, [r7, #3]
 800566a:	2300      	movs	r3, #0
 800566c:	2116      	movs	r1, #22
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	47a0      	blx	r4
 8005672:	4603      	mov	r3, r0
}
 8005674:	4618      	mov	r0, r3
 8005676:	370c      	adds	r7, #12
 8005678:	46bd      	mov	sp, r7
 800567a:	bd90      	pop	{r4, r7, pc}

0800567c <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 800567c:	b590      	push	{r4, r7, lr}
 800567e:	b085      	sub	sp, #20
 8005680:	af00      	add	r7, sp, #0
 8005682:	60f8      	str	r0, [r7, #12]
 8005684:	460b      	mov	r3, r1
 8005686:	607a      	str	r2, [r7, #4]
 8005688:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	68dc      	ldr	r4, [r3, #12]
 800568e:	7afa      	ldrb	r2, [r7, #11]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2117      	movs	r1, #23
 8005694:	68f8      	ldr	r0, [r7, #12]
 8005696:	47a0      	blx	r4
 8005698:	4603      	mov	r3, r0
}
 800569a:	4618      	mov	r0, r3
 800569c:	3714      	adds	r7, #20
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd90      	pop	{r4, r7, pc}

080056a2 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 80056a2:	b590      	push	{r4, r7, lr}
 80056a4:	b083      	sub	sp, #12
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	68dc      	ldr	r4, [r3, #12]
 80056ae:	2300      	movs	r3, #0
 80056b0:	2200      	movs	r2, #0
 80056b2:	2118      	movs	r1, #24
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	47a0      	blx	r4
 80056b8:	4603      	mov	r3, r0
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	370c      	adds	r7, #12
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd90      	pop	{r4, r7, pc}

080056c2 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 80056c2:	b590      	push	{r4, r7, lr}
 80056c4:	b083      	sub	sp, #12
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	68dc      	ldr	r4, [r3, #12]
 80056ce:	2300      	movs	r3, #0
 80056d0:	2200      	movs	r2, #0
 80056d2:	2119      	movs	r1, #25
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	47a0      	blx	r4
 80056d8:	4603      	mov	r3, r0
}
 80056da:	4618      	mov	r0, r3
 80056dc:	370c      	adds	r7, #12
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd90      	pop	{r4, r7, pc}

080056e2 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 80056e2:	b590      	push	{r4, r7, lr}
 80056e4:	b085      	sub	sp, #20
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	6078      	str	r0, [r7, #4]
 80056ea:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	781b      	ldrb	r3, [r3, #0]
 80056f0:	73fb      	strb	r3, [r7, #15]
    data++;
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	3301      	adds	r3, #1
 80056f6:	603b      	str	r3, [r7, #0]
    switch( cmd )
 80056f8:	7bfb      	ldrb	r3, [r7, #15]
 80056fa:	2bfe      	cmp	r3, #254	; 0xfe
 80056fc:	d031      	beq.n	8005762 <u8x8_cad_SendSequence+0x80>
 80056fe:	2bfe      	cmp	r3, #254	; 0xfe
 8005700:	dc3d      	bgt.n	800577e <u8x8_cad_SendSequence+0x9c>
 8005702:	2b19      	cmp	r3, #25
 8005704:	dc3b      	bgt.n	800577e <u8x8_cad_SendSequence+0x9c>
 8005706:	2b18      	cmp	r3, #24
 8005708:	da23      	bge.n	8005752 <u8x8_cad_SendSequence+0x70>
 800570a:	2b16      	cmp	r3, #22
 800570c:	dc02      	bgt.n	8005714 <u8x8_cad_SendSequence+0x32>
 800570e:	2b15      	cmp	r3, #21
 8005710:	da03      	bge.n	800571a <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8005712:	e034      	b.n	800577e <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 8005714:	2b17      	cmp	r3, #23
 8005716:	d00e      	beq.n	8005736 <u8x8_cad_SendSequence+0x54>
	return;
 8005718:	e031      	b.n	800577e <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	68dc      	ldr	r4, [r3, #12]
 8005724:	7bba      	ldrb	r2, [r7, #14]
 8005726:	7bf9      	ldrb	r1, [r7, #15]
 8005728:	2300      	movs	r3, #0
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	47a0      	blx	r4
	  data++;
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	3301      	adds	r3, #1
 8005732:	603b      	str	r3, [r7, #0]
	  break;
 8005734:	e022      	b.n	800577c <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 800573c:	f107 030e 	add.w	r3, r7, #14
 8005740:	461a      	mov	r2, r3
 8005742:	2101      	movs	r1, #1
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f7ff ff99 	bl	800567c <u8x8_cad_SendData>
	  data++;
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	3301      	adds	r3, #1
 800574e:	603b      	str	r3, [r7, #0]
	  break;
 8005750:	e014      	b.n	800577c <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	68dc      	ldr	r4, [r3, #12]
 8005756:	7bf9      	ldrb	r1, [r7, #15]
 8005758:	2300      	movs	r3, #0
 800575a:	2200      	movs	r2, #0
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	47a0      	blx	r4
	  break;
 8005760:	e00c      	b.n	800577c <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8005768:	7bbb      	ldrb	r3, [r7, #14]
 800576a:	461a      	mov	r2, r3
 800576c:	2129      	movs	r1, #41	; 0x29
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f000 f9d8 	bl	8005b24 <u8x8_gpio_call>
	  data++;
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	3301      	adds	r3, #1
 8005778:	603b      	str	r3, [r7, #0]
	  break;
 800577a:	bf00      	nop
    cmd = *data;
 800577c:	e7b6      	b.n	80056ec <u8x8_cad_SendSequence+0xa>
	return;
 800577e:	bf00      	nop
    }
  }
}
 8005780:	3714      	adds	r7, #20
 8005782:	46bd      	mov	sp, r7
 8005784:	bd90      	pop	{r4, r7, pc}
	...

08005788 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8005788:	b590      	push	{r4, r7, lr}
 800578a:	b085      	sub	sp, #20
 800578c:	af00      	add	r7, sp, #0
 800578e:	60f8      	str	r0, [r7, #12]
 8005790:	607b      	str	r3, [r7, #4]
 8005792:	460b      	mov	r3, r1
 8005794:	72fb      	strb	r3, [r7, #11]
 8005796:	4613      	mov	r3, r2
 8005798:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 800579a:	7afb      	ldrb	r3, [r7, #11]
 800579c:	3b14      	subs	r3, #20
 800579e:	2b05      	cmp	r3, #5
 80057a0:	d82f      	bhi.n	8005802 <u8x8_cad_001+0x7a>
 80057a2:	a201      	add	r2, pc, #4	; (adr r2, 80057a8 <u8x8_cad_001+0x20>)
 80057a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057a8:	080057f1 	.word	0x080057f1
 80057ac:	080057c1 	.word	0x080057c1
 80057b0:	080057d5 	.word	0x080057d5
 80057b4:	080057e9 	.word	0x080057e9
 80057b8:	080057f1 	.word	0x080057f1
 80057bc:	080057f1 	.word	0x080057f1
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 80057c0:	2100      	movs	r1, #0
 80057c2:	68f8      	ldr	r0, [r7, #12]
 80057c4:	f7ff ff00 	bl	80055c8 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 80057c8:	7abb      	ldrb	r3, [r7, #10]
 80057ca:	4619      	mov	r1, r3
 80057cc:	68f8      	ldr	r0, [r7, #12]
 80057ce:	f7ff ff20 	bl	8005612 <u8x8_byte_SendByte>
      break;
 80057d2:	e018      	b.n	8005806 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 80057d4:	2100      	movs	r1, #0
 80057d6:	68f8      	ldr	r0, [r7, #12]
 80057d8:	f7ff fef6 	bl	80055c8 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 80057dc:	7abb      	ldrb	r3, [r7, #10]
 80057de:	4619      	mov	r1, r3
 80057e0:	68f8      	ldr	r0, [r7, #12]
 80057e2:	f7ff ff16 	bl	8005612 <u8x8_byte_SendByte>
      break;
 80057e6:	e00e      	b.n	8005806 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 80057e8:	2101      	movs	r1, #1
 80057ea:	68f8      	ldr	r0, [r7, #12]
 80057ec:	f7ff feec 	bl	80055c8 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	691c      	ldr	r4, [r3, #16]
 80057f4:	7aba      	ldrb	r2, [r7, #10]
 80057f6:	7af9      	ldrb	r1, [r7, #11]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	68f8      	ldr	r0, [r7, #12]
 80057fc:	47a0      	blx	r4
 80057fe:	4603      	mov	r3, r0
 8005800:	e002      	b.n	8005808 <u8x8_cad_001+0x80>
    default:
      return 0;
 8005802:	2300      	movs	r3, #0
 8005804:	e000      	b.n	8005808 <u8x8_cad_001+0x80>
  }
  return 1;
 8005806:	2301      	movs	r3, #1
}
 8005808:	4618      	mov	r0, r3
 800580a:	3714      	adds	r7, #20
 800580c:	46bd      	mov	sp, r7
 800580e:	bd90      	pop	{r4, r7, pc}

08005810 <u8x8_d_ssd1306_sh1106_generic>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b086      	sub	sp, #24
 8005814:	af00      	add	r7, sp, #0
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	607b      	str	r3, [r7, #4]
 800581a:	460b      	mov	r3, r1
 800581c:	72fb      	strb	r3, [r7, #11]
 800581e:	4613      	mov	r3, r2
 8005820:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 8005822:	7afb      	ldrb	r3, [r7, #11]
 8005824:	3b0b      	subs	r3, #11
 8005826:	2b04      	cmp	r3, #4
 8005828:	f200 808a 	bhi.w	8005940 <u8x8_d_ssd1306_sh1106_generic+0x130>
 800582c:	a201      	add	r2, pc, #4	; (adr r2, 8005834 <u8x8_d_ssd1306_sh1106_generic+0x24>)
 800582e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005832:	bf00      	nop
 8005834:	08005849 	.word	0x08005849
 8005838:	08005941 	.word	0x08005941
 800583c:	08005863 	.word	0x08005863
 8005840:	08005895 	.word	0x08005895
 8005844:	080058b5 	.word	0x080058b5
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8005848:	7abb      	ldrb	r3, [r7, #10]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d104      	bne.n	8005858 <u8x8_d_ssd1306_sh1106_generic+0x48>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
 800584e:	4940      	ldr	r1, [pc, #256]	; (8005950 <u8x8_d_ssd1306_sh1106_generic+0x140>)
 8005850:	68f8      	ldr	r0, [r7, #12]
 8005852:	f7ff ff46 	bl	80056e2 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
      break;
 8005856:	e075      	b.n	8005944 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
 8005858:	493e      	ldr	r1, [pc, #248]	; (8005954 <u8x8_d_ssd1306_sh1106_generic+0x144>)
 800585a:	68f8      	ldr	r0, [r7, #12]
 800585c:	f7ff ff41 	bl	80056e2 <u8x8_cad_SendSequence>
      break;
 8005860:	e070      	b.n	8005944 <u8x8_d_ssd1306_sh1106_generic+0x134>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 8005862:	7abb      	ldrb	r3, [r7, #10]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d10a      	bne.n	800587e <u8x8_d_ssd1306_sh1106_generic+0x6e>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
 8005868:	493b      	ldr	r1, [pc, #236]	; (8005958 <u8x8_d_ssd1306_sh1106_generic+0x148>)
 800586a:	68f8      	ldr	r0, [r7, #12]
 800586c:	f7ff ff39 	bl	80056e2 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	7c9a      	ldrb	r2, [r3, #18]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 800587c:	e062      	b.n	8005944 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
 800587e:	4937      	ldr	r1, [pc, #220]	; (800595c <u8x8_d_ssd1306_sh1106_generic+0x14c>)
 8005880:	68f8      	ldr	r0, [r7, #12]
 8005882:	f7ff ff2e 	bl	80056e2 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	7cda      	ldrb	r2, [r3, #19]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 8005892:	e057      	b.n	8005944 <u8x8_d_ssd1306_sh1106_generic+0x134>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8005894:	68f8      	ldr	r0, [r7, #12]
 8005896:	f7ff ff04 	bl	80056a2 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 800589a:	2181      	movs	r1, #129	; 0x81
 800589c:	68f8      	ldr	r0, [r7, #12]
 800589e:	f7ff fec9 	bl	8005634 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
 80058a2:	7abb      	ldrb	r3, [r7, #10]
 80058a4:	4619      	mov	r1, r3
 80058a6:	68f8      	ldr	r0, [r7, #12]
 80058a8:	f7ff fed6 	bl	8005658 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 80058ac:	68f8      	ldr	r0, [r7, #12]
 80058ae:	f7ff ff08 	bl	80056c2 <u8x8_cad_EndTransfer>
      break;
 80058b2:	e047      	b.n	8005944 <u8x8_d_ssd1306_sh1106_generic+0x134>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 80058b4:	68f8      	ldr	r0, [r7, #12]
 80058b6:	f7ff fef4 	bl	80056a2 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	795b      	ldrb	r3, [r3, #5]
 80058be:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 80058c0:	7dfb      	ldrb	r3, [r7, #23]
 80058c2:	00db      	lsls	r3, r3, #3
 80058c4:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80058cc:	7dfb      	ldrb	r3, [r7, #23]
 80058ce:	4413      	add	r3, r2
 80058d0:	75fb      	strb	r3, [r7, #23]
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 80058d2:	2140      	movs	r1, #64	; 0x40
 80058d4:	68f8      	ldr	r0, [r7, #12]
 80058d6:	f7ff fead 	bl	8005634 <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 80058da:	7dfb      	ldrb	r3, [r7, #23]
 80058dc:	091b      	lsrs	r3, r3, #4
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	f043 0310 	orr.w	r3, r3, #16
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	4619      	mov	r1, r3
 80058e8:	68f8      	ldr	r0, [r7, #12]
 80058ea:	f7ff fea3 	bl	8005634 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
 80058ee:	7dfb      	ldrb	r3, [r7, #23]
 80058f0:	f003 030f 	and.w	r3, r3, #15
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	4619      	mov	r1, r3
 80058f8:	68f8      	ldr	r0, [r7, #12]
 80058fa:	f7ff fead 	bl	8005658 <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	799b      	ldrb	r3, [r3, #6]
 8005902:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8005906:	b2db      	uxtb	r3, r3
 8005908:	4619      	mov	r1, r3
 800590a:	68f8      	ldr	r0, [r7, #12]
 800590c:	f7ff fea4 	bl	8005658 <u8x8_cad_SendArg>

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	791b      	ldrb	r3, [r3, #4]
 8005914:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 800591c:	7dbb      	ldrb	r3, [r7, #22]
 800591e:	00db      	lsls	r3, r3, #3
 8005920:	b2db      	uxtb	r3, r3
 8005922:	693a      	ldr	r2, [r7, #16]
 8005924:	4619      	mov	r1, r3
 8005926:	68f8      	ldr	r0, [r7, #12]
 8005928:	f7ff fea8 	bl	800567c <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 800592c:	7abb      	ldrb	r3, [r7, #10]
 800592e:	3b01      	subs	r3, #1
 8005930:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8005932:	7abb      	ldrb	r3, [r7, #10]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d1eb      	bne.n	8005910 <u8x8_d_ssd1306_sh1106_generic+0x100>
      
      u8x8_cad_EndTransfer(u8x8);
 8005938:	68f8      	ldr	r0, [r7, #12]
 800593a:	f7ff fec2 	bl	80056c2 <u8x8_cad_EndTransfer>
      break;
 800593e:	e001      	b.n	8005944 <u8x8_d_ssd1306_sh1106_generic+0x134>
    default:
      return 0;
 8005940:	2300      	movs	r3, #0
 8005942:	e000      	b.n	8005946 <u8x8_d_ssd1306_sh1106_generic+0x136>
  }
  return 1;
 8005944:	2301      	movs	r3, #1
}
 8005946:	4618      	mov	r0, r3
 8005948:	3718      	adds	r7, #24
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}
 800594e:	bf00      	nop
 8005950:	0800c0a8 	.word	0x0800c0a8
 8005954:	0800c0b0 	.word	0x0800c0b0
 8005958:	0800c0b8 	.word	0x0800c0b8
 800595c:	0800c0c0 	.word	0x0800c0c0

08005960 <u8x8_d_ssd1306_128x64_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b084      	sub	sp, #16
 8005964:	af00      	add	r7, sp, #0
 8005966:	60f8      	str	r0, [r7, #12]
 8005968:	607b      	str	r3, [r7, #4]
 800596a:	460b      	mov	r3, r1
 800596c:	72fb      	strb	r3, [r7, #11]
 800596e:	4613      	mov	r3, r2
 8005970:	72bb      	strb	r3, [r7, #10]
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 8005972:	7aba      	ldrb	r2, [r7, #10]
 8005974:	7af9      	ldrb	r1, [r7, #11]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	68f8      	ldr	r0, [r7, #12]
 800597a:	f7ff ff49 	bl	8005810 <u8x8_d_ssd1306_sh1106_generic>
 800597e:	4603      	mov	r3, r0
 8005980:	2b00      	cmp	r3, #0
 8005982:	d001      	beq.n	8005988 <u8x8_d_ssd1306_128x64_noname+0x28>
    return 1;
 8005984:	2301      	movs	r3, #1
 8005986:	e014      	b.n	80059b2 <u8x8_d_ssd1306_128x64_noname+0x52>
  
  switch(msg)
 8005988:	7afb      	ldrb	r3, [r7, #11]
 800598a:	2b09      	cmp	r3, #9
 800598c:	d009      	beq.n	80059a2 <u8x8_d_ssd1306_128x64_noname+0x42>
 800598e:	2b0a      	cmp	r3, #10
 8005990:	d10c      	bne.n	80059ac <u8x8_d_ssd1306_128x64_noname+0x4c>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 8005992:	68f8      	ldr	r0, [r7, #12]
 8005994:	f000 f829 	bl	80059ea <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
 8005998:	4908      	ldr	r1, [pc, #32]	; (80059bc <u8x8_d_ssd1306_128x64_noname+0x5c>)
 800599a:	68f8      	ldr	r0, [r7, #12]
 800599c:	f7ff fea1 	bl	80056e2 <u8x8_cad_SendSequence>
      break;
 80059a0:	e006      	b.n	80059b0 <u8x8_d_ssd1306_128x64_noname+0x50>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
 80059a2:	4907      	ldr	r1, [pc, #28]	; (80059c0 <u8x8_d_ssd1306_128x64_noname+0x60>)
 80059a4:	68f8      	ldr	r0, [r7, #12]
 80059a6:	f000 f80d 	bl	80059c4 <u8x8_d_helper_display_setup_memory>
      break;
 80059aa:	e001      	b.n	80059b0 <u8x8_d_ssd1306_128x64_noname+0x50>
    default:
      return 0;
 80059ac:	2300      	movs	r3, #0
 80059ae:	e000      	b.n	80059b2 <u8x8_d_ssd1306_128x64_noname+0x52>
  }
  return 1;
 80059b0:	2301      	movs	r3, #1
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3710      	adds	r7, #16
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	bf00      	nop
 80059bc:	0800c070 	.word	0x0800c070
 80059c0:	0800c0c8 	.word	0x0800c0c8

080059c4 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	683a      	ldr	r2, [r7, #0]
 80059d2:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	7c9a      	ldrb	r2, [r3, #18]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 80059e0:	bf00      	nop
 80059e2:	370c      	adds	r7, #12
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bc80      	pop	{r7}
 80059e8:	4770      	bx	lr

080059ea <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 80059ea:	b590      	push	{r4, r7, lr}
 80059ec:	b083      	sub	sp, #12
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	695c      	ldr	r4, [r3, #20]
 80059f6:	2300      	movs	r3, #0
 80059f8:	2200      	movs	r2, #0
 80059fa:	2128      	movs	r1, #40	; 0x28
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	68dc      	ldr	r4, [r3, #12]
 8005a04:	2300      	movs	r3, #0
 8005a06:	2200      	movs	r2, #0
 8005a08:	2114      	movs	r1, #20
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8005a0e:	2201      	movs	r2, #1
 8005a10:	214b      	movs	r1, #75	; 0x4b
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 f886 	bl	8005b24 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	791b      	ldrb	r3, [r3, #4]
 8005a1e:	461a      	mov	r2, r3
 8005a20:	2129      	movs	r1, #41	; 0x29
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 f87e 	bl	8005b24 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8005a28:	2200      	movs	r2, #0
 8005a2a:	214b      	movs	r1, #75	; 0x4b
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f000 f879 	bl	8005b24 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	791b      	ldrb	r3, [r3, #4]
 8005a38:	461a      	mov	r2, r3
 8005a3a:	2129      	movs	r1, #41	; 0x29
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f000 f871 	bl	8005b24 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8005a42:	2201      	movs	r2, #1
 8005a44:	214b      	movs	r1, #75	; 0x4b
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f000 f86c 	bl	8005b24 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	795b      	ldrb	r3, [r3, #5]
 8005a52:	461a      	mov	r2, r3
 8005a54:	2129      	movs	r1, #41	; 0x29
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 f864 	bl	8005b24 <u8x8_gpio_call>
}    
 8005a5c:	bf00      	nop
 8005a5e:	370c      	adds	r7, #12
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd90      	pop	{r4, r7, pc}

08005a64 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8005a64:	b590      	push	{r4, r7, lr}
 8005a66:	b085      	sub	sp, #20
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	4608      	mov	r0, r1
 8005a6e:	4611      	mov	r1, r2
 8005a70:	461a      	mov	r2, r3
 8005a72:	4603      	mov	r3, r0
 8005a74:	70fb      	strb	r3, [r7, #3]
 8005a76:	460b      	mov	r3, r1
 8005a78:	70bb      	strb	r3, [r7, #2]
 8005a7a:	4613      	mov	r3, r2
 8005a7c:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 8005a7e:	78fb      	ldrb	r3, [r7, #3]
 8005a80:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8005a82:	78bb      	ldrb	r3, [r7, #2]
 8005a84:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8005a86:	787b      	ldrb	r3, [r7, #1]
 8005a88:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8005a8a:	6a3b      	ldr	r3, [r7, #32]
 8005a8c:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	689c      	ldr	r4, [r3, #8]
 8005a92:	f107 0308 	add.w	r3, r7, #8
 8005a96:	2201      	movs	r2, #1
 8005a98:	210f      	movs	r1, #15
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	47a0      	blx	r4
 8005a9e:	4603      	mov	r3, r0
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3714      	adds	r7, #20
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd90      	pop	{r4, r7, pc}

08005aa8 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8005aa8:	b590      	push	{r4, r7, lr}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	689c      	ldr	r4, [r3, #8]
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	2109      	movs	r1, #9
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	47a0      	blx	r4
}
 8005abe:	bf00      	nop
 8005ac0:	370c      	adds	r7, #12
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd90      	pop	{r4, r7, pc}

08005ac6 <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8005ac6:	b590      	push	{r4, r7, lr}
 8005ac8:	b083      	sub	sp, #12
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	689c      	ldr	r4, [r3, #8]
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	210a      	movs	r1, #10
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	47a0      	blx	r4
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}
 8005adc:	bf00      	nop
 8005ade:	370c      	adds	r7, #12
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd90      	pop	{r4, r7, pc}

08005ae4 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8005ae4:	b590      	push	{r4, r7, lr}
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	460b      	mov	r3, r1
 8005aee:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	689c      	ldr	r4, [r3, #8]
 8005af4:	78fa      	ldrb	r2, [r7, #3]
 8005af6:	2300      	movs	r3, #0
 8005af8:	210b      	movs	r1, #11
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	47a0      	blx	r4
}
 8005afe:	bf00      	nop
 8005b00:	370c      	adds	r7, #12
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd90      	pop	{r4, r7, pc}

08005b06 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8005b06:	b590      	push	{r4, r7, lr}
 8005b08:	b083      	sub	sp, #12
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	689c      	ldr	r4, [r3, #8]
 8005b12:	2300      	movs	r3, #0
 8005b14:	2200      	movs	r2, #0
 8005b16:	2110      	movs	r1, #16
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	47a0      	blx	r4
}
 8005b1c:	bf00      	nop
 8005b1e:	370c      	adds	r7, #12
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd90      	pop	{r4, r7, pc}

08005b24 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8005b24:	b590      	push	{r4, r7, lr}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	460b      	mov	r3, r1
 8005b2e:	70fb      	strb	r3, [r7, #3]
 8005b30:	4613      	mov	r3, r2
 8005b32:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	695c      	ldr	r4, [r3, #20]
 8005b38:	78ba      	ldrb	r2, [r7, #2]
 8005b3a:	78f9      	ldrb	r1, [r7, #3]
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	47a0      	blx	r4
}
 8005b42:	bf00      	nop
 8005b44:	370c      	adds	r7, #12
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd90      	pop	{r4, r7, pc}

08005b4a <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8005b4a:	b480      	push	{r7}
 8005b4c:	b085      	sub	sp, #20
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	60f8      	str	r0, [r7, #12]
 8005b52:	607b      	str	r3, [r7, #4]
 8005b54:	460b      	mov	r3, r1
 8005b56:	72fb      	strb	r3, [r7, #11]
 8005b58:	4613      	mov	r3, r2
 8005b5a:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 8005b5c:	2300      	movs	r3, #0
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3714      	adds	r7, #20
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bc80      	pop	{r7}
 8005b66:	4770      	bx	lr

08005b68 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b083      	sub	sp, #12
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4a11      	ldr	r2, [pc, #68]	; (8005bc0 <u8x8_SetupDefaults+0x58>)
 8005b7a:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	4a10      	ldr	r2, [pc, #64]	; (8005bc0 <u8x8_SetupDefaults+0x58>)
 8005b80:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4a0e      	ldr	r2, [pc, #56]	; (8005bc0 <u8x8_SetupDefaults+0x58>)
 8005b86:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	4a0d      	ldr	r2, [pc, #52]	; (8005bc0 <u8x8_SetupDefaults+0x58>)
 8005b8c:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	22ff      	movs	r2, #255	; 0xff
 8005ba8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	22ff      	movs	r2, #255	; 0xff
 8005bb0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8005bb4:	bf00      	nop
 8005bb6:	370c      	adds	r7, #12
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bc80      	pop	{r7}
 8005bbc:	4770      	bx	lr
 8005bbe:	bf00      	nop
 8005bc0:	08005b4b 	.word	0x08005b4b

08005bc4 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b084      	sub	sp, #16
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	60f8      	str	r0, [r7, #12]
 8005bcc:	60b9      	str	r1, [r7, #8]
 8005bce:	607a      	str	r2, [r7, #4]
 8005bd0:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8005bd2:	68f8      	ldr	r0, [r7, #12]
 8005bd4:	f7ff ffc8 	bl	8005b68 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	68ba      	ldr	r2, [r7, #8]
 8005bdc:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	683a      	ldr	r2, [r7, #0]
 8005be8:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	69ba      	ldr	r2, [r7, #24]
 8005bee:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8005bf0:	68f8      	ldr	r0, [r7, #12]
 8005bf2:	f7ff ff59 	bl	8005aa8 <u8x8_SetupMemory>
}
 8005bf6:	bf00      	nop
 8005bf8:	3710      	adds	r7, #16
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}

08005bfe <atof>:
 8005bfe:	2100      	movs	r1, #0
 8005c00:	f001 bd58 	b.w	80076b4 <strtod>

08005c04 <__errno>:
 8005c04:	4b01      	ldr	r3, [pc, #4]	; (8005c0c <__errno+0x8>)
 8005c06:	6818      	ldr	r0, [r3, #0]
 8005c08:	4770      	bx	lr
 8005c0a:	bf00      	nop
 8005c0c:	2000000c 	.word	0x2000000c

08005c10 <__libc_init_array>:
 8005c10:	b570      	push	{r4, r5, r6, lr}
 8005c12:	2600      	movs	r6, #0
 8005c14:	4d0c      	ldr	r5, [pc, #48]	; (8005c48 <__libc_init_array+0x38>)
 8005c16:	4c0d      	ldr	r4, [pc, #52]	; (8005c4c <__libc_init_array+0x3c>)
 8005c18:	1b64      	subs	r4, r4, r5
 8005c1a:	10a4      	asrs	r4, r4, #2
 8005c1c:	42a6      	cmp	r6, r4
 8005c1e:	d109      	bne.n	8005c34 <__libc_init_array+0x24>
 8005c20:	f005 ff14 	bl	800ba4c <_init>
 8005c24:	2600      	movs	r6, #0
 8005c26:	4d0a      	ldr	r5, [pc, #40]	; (8005c50 <__libc_init_array+0x40>)
 8005c28:	4c0a      	ldr	r4, [pc, #40]	; (8005c54 <__libc_init_array+0x44>)
 8005c2a:	1b64      	subs	r4, r4, r5
 8005c2c:	10a4      	asrs	r4, r4, #2
 8005c2e:	42a6      	cmp	r6, r4
 8005c30:	d105      	bne.n	8005c3e <__libc_init_array+0x2e>
 8005c32:	bd70      	pop	{r4, r5, r6, pc}
 8005c34:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c38:	4798      	blx	r3
 8005c3a:	3601      	adds	r6, #1
 8005c3c:	e7ee      	b.n	8005c1c <__libc_init_array+0xc>
 8005c3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c42:	4798      	blx	r3
 8005c44:	3601      	adds	r6, #1
 8005c46:	e7f2      	b.n	8005c2e <__libc_init_array+0x1e>
 8005c48:	0800c7a0 	.word	0x0800c7a0
 8005c4c:	0800c7a0 	.word	0x0800c7a0
 8005c50:	0800c7a0 	.word	0x0800c7a0
 8005c54:	0800c7a4 	.word	0x0800c7a4

08005c58 <memcpy>:
 8005c58:	440a      	add	r2, r1
 8005c5a:	4291      	cmp	r1, r2
 8005c5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005c60:	d100      	bne.n	8005c64 <memcpy+0xc>
 8005c62:	4770      	bx	lr
 8005c64:	b510      	push	{r4, lr}
 8005c66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c6a:	4291      	cmp	r1, r2
 8005c6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c70:	d1f9      	bne.n	8005c66 <memcpy+0xe>
 8005c72:	bd10      	pop	{r4, pc}

08005c74 <memset>:
 8005c74:	4603      	mov	r3, r0
 8005c76:	4402      	add	r2, r0
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d100      	bne.n	8005c7e <memset+0xa>
 8005c7c:	4770      	bx	lr
 8005c7e:	f803 1b01 	strb.w	r1, [r3], #1
 8005c82:	e7f9      	b.n	8005c78 <memset+0x4>

08005c84 <__cvt>:
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c8a:	461f      	mov	r7, r3
 8005c8c:	bfbb      	ittet	lt
 8005c8e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005c92:	461f      	movlt	r7, r3
 8005c94:	2300      	movge	r3, #0
 8005c96:	232d      	movlt	r3, #45	; 0x2d
 8005c98:	b088      	sub	sp, #32
 8005c9a:	4614      	mov	r4, r2
 8005c9c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005c9e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005ca0:	7013      	strb	r3, [r2, #0]
 8005ca2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005ca4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005ca8:	f023 0820 	bic.w	r8, r3, #32
 8005cac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005cb0:	d005      	beq.n	8005cbe <__cvt+0x3a>
 8005cb2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005cb6:	d100      	bne.n	8005cba <__cvt+0x36>
 8005cb8:	3501      	adds	r5, #1
 8005cba:	2302      	movs	r3, #2
 8005cbc:	e000      	b.n	8005cc0 <__cvt+0x3c>
 8005cbe:	2303      	movs	r3, #3
 8005cc0:	aa07      	add	r2, sp, #28
 8005cc2:	9204      	str	r2, [sp, #16]
 8005cc4:	aa06      	add	r2, sp, #24
 8005cc6:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005cca:	e9cd 3500 	strd	r3, r5, [sp]
 8005cce:	4622      	mov	r2, r4
 8005cd0:	463b      	mov	r3, r7
 8005cd2:	f001 fec5 	bl	8007a60 <_dtoa_r>
 8005cd6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005cda:	4606      	mov	r6, r0
 8005cdc:	d102      	bne.n	8005ce4 <__cvt+0x60>
 8005cde:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005ce0:	07db      	lsls	r3, r3, #31
 8005ce2:	d522      	bpl.n	8005d2a <__cvt+0xa6>
 8005ce4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005ce8:	eb06 0905 	add.w	r9, r6, r5
 8005cec:	d110      	bne.n	8005d10 <__cvt+0x8c>
 8005cee:	7833      	ldrb	r3, [r6, #0]
 8005cf0:	2b30      	cmp	r3, #48	; 0x30
 8005cf2:	d10a      	bne.n	8005d0a <__cvt+0x86>
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	4620      	mov	r0, r4
 8005cfa:	4639      	mov	r1, r7
 8005cfc:	f7fa fe54 	bl	80009a8 <__aeabi_dcmpeq>
 8005d00:	b918      	cbnz	r0, 8005d0a <__cvt+0x86>
 8005d02:	f1c5 0501 	rsb	r5, r5, #1
 8005d06:	f8ca 5000 	str.w	r5, [sl]
 8005d0a:	f8da 3000 	ldr.w	r3, [sl]
 8005d0e:	4499      	add	r9, r3
 8005d10:	2200      	movs	r2, #0
 8005d12:	2300      	movs	r3, #0
 8005d14:	4620      	mov	r0, r4
 8005d16:	4639      	mov	r1, r7
 8005d18:	f7fa fe46 	bl	80009a8 <__aeabi_dcmpeq>
 8005d1c:	b108      	cbz	r0, 8005d22 <__cvt+0x9e>
 8005d1e:	f8cd 901c 	str.w	r9, [sp, #28]
 8005d22:	2230      	movs	r2, #48	; 0x30
 8005d24:	9b07      	ldr	r3, [sp, #28]
 8005d26:	454b      	cmp	r3, r9
 8005d28:	d307      	bcc.n	8005d3a <__cvt+0xb6>
 8005d2a:	4630      	mov	r0, r6
 8005d2c:	9b07      	ldr	r3, [sp, #28]
 8005d2e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005d30:	1b9b      	subs	r3, r3, r6
 8005d32:	6013      	str	r3, [r2, #0]
 8005d34:	b008      	add	sp, #32
 8005d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d3a:	1c59      	adds	r1, r3, #1
 8005d3c:	9107      	str	r1, [sp, #28]
 8005d3e:	701a      	strb	r2, [r3, #0]
 8005d40:	e7f0      	b.n	8005d24 <__cvt+0xa0>

08005d42 <__exponent>:
 8005d42:	4603      	mov	r3, r0
 8005d44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d46:	2900      	cmp	r1, #0
 8005d48:	f803 2b02 	strb.w	r2, [r3], #2
 8005d4c:	bfb6      	itet	lt
 8005d4e:	222d      	movlt	r2, #45	; 0x2d
 8005d50:	222b      	movge	r2, #43	; 0x2b
 8005d52:	4249      	neglt	r1, r1
 8005d54:	2909      	cmp	r1, #9
 8005d56:	7042      	strb	r2, [r0, #1]
 8005d58:	dd2b      	ble.n	8005db2 <__exponent+0x70>
 8005d5a:	f10d 0407 	add.w	r4, sp, #7
 8005d5e:	46a4      	mov	ip, r4
 8005d60:	270a      	movs	r7, #10
 8005d62:	fb91 f6f7 	sdiv	r6, r1, r7
 8005d66:	460a      	mov	r2, r1
 8005d68:	46a6      	mov	lr, r4
 8005d6a:	fb07 1516 	mls	r5, r7, r6, r1
 8005d6e:	2a63      	cmp	r2, #99	; 0x63
 8005d70:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8005d74:	4631      	mov	r1, r6
 8005d76:	f104 34ff 	add.w	r4, r4, #4294967295
 8005d7a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005d7e:	dcf0      	bgt.n	8005d62 <__exponent+0x20>
 8005d80:	3130      	adds	r1, #48	; 0x30
 8005d82:	f1ae 0502 	sub.w	r5, lr, #2
 8005d86:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005d8a:	4629      	mov	r1, r5
 8005d8c:	1c44      	adds	r4, r0, #1
 8005d8e:	4561      	cmp	r1, ip
 8005d90:	d30a      	bcc.n	8005da8 <__exponent+0x66>
 8005d92:	f10d 0209 	add.w	r2, sp, #9
 8005d96:	eba2 020e 	sub.w	r2, r2, lr
 8005d9a:	4565      	cmp	r5, ip
 8005d9c:	bf88      	it	hi
 8005d9e:	2200      	movhi	r2, #0
 8005da0:	4413      	add	r3, r2
 8005da2:	1a18      	subs	r0, r3, r0
 8005da4:	b003      	add	sp, #12
 8005da6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005da8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005dac:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005db0:	e7ed      	b.n	8005d8e <__exponent+0x4c>
 8005db2:	2330      	movs	r3, #48	; 0x30
 8005db4:	3130      	adds	r1, #48	; 0x30
 8005db6:	7083      	strb	r3, [r0, #2]
 8005db8:	70c1      	strb	r1, [r0, #3]
 8005dba:	1d03      	adds	r3, r0, #4
 8005dbc:	e7f1      	b.n	8005da2 <__exponent+0x60>
	...

08005dc0 <_printf_float>:
 8005dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dc4:	b091      	sub	sp, #68	; 0x44
 8005dc6:	460c      	mov	r4, r1
 8005dc8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005dcc:	4616      	mov	r6, r2
 8005dce:	461f      	mov	r7, r3
 8005dd0:	4605      	mov	r5, r0
 8005dd2:	f003 f94d 	bl	8009070 <_localeconv_r>
 8005dd6:	6803      	ldr	r3, [r0, #0]
 8005dd8:	4618      	mov	r0, r3
 8005dda:	9309      	str	r3, [sp, #36]	; 0x24
 8005ddc:	f7fa f9b8 	bl	8000150 <strlen>
 8005de0:	2300      	movs	r3, #0
 8005de2:	930e      	str	r3, [sp, #56]	; 0x38
 8005de4:	f8d8 3000 	ldr.w	r3, [r8]
 8005de8:	900a      	str	r0, [sp, #40]	; 0x28
 8005dea:	3307      	adds	r3, #7
 8005dec:	f023 0307 	bic.w	r3, r3, #7
 8005df0:	f103 0208 	add.w	r2, r3, #8
 8005df4:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005df8:	f8d4 b000 	ldr.w	fp, [r4]
 8005dfc:	f8c8 2000 	str.w	r2, [r8]
 8005e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e04:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005e08:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8005e0c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005e10:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e12:	f04f 32ff 	mov.w	r2, #4294967295
 8005e16:	4640      	mov	r0, r8
 8005e18:	4b9c      	ldr	r3, [pc, #624]	; (800608c <_printf_float+0x2cc>)
 8005e1a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005e1c:	f7fa fdf6 	bl	8000a0c <__aeabi_dcmpun>
 8005e20:	bb70      	cbnz	r0, 8005e80 <_printf_float+0xc0>
 8005e22:	f04f 32ff 	mov.w	r2, #4294967295
 8005e26:	4640      	mov	r0, r8
 8005e28:	4b98      	ldr	r3, [pc, #608]	; (800608c <_printf_float+0x2cc>)
 8005e2a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005e2c:	f7fa fdd0 	bl	80009d0 <__aeabi_dcmple>
 8005e30:	bb30      	cbnz	r0, 8005e80 <_printf_float+0xc0>
 8005e32:	2200      	movs	r2, #0
 8005e34:	2300      	movs	r3, #0
 8005e36:	4640      	mov	r0, r8
 8005e38:	4651      	mov	r1, sl
 8005e3a:	f7fa fdbf 	bl	80009bc <__aeabi_dcmplt>
 8005e3e:	b110      	cbz	r0, 8005e46 <_printf_float+0x86>
 8005e40:	232d      	movs	r3, #45	; 0x2d
 8005e42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e46:	4b92      	ldr	r3, [pc, #584]	; (8006090 <_printf_float+0x2d0>)
 8005e48:	4892      	ldr	r0, [pc, #584]	; (8006094 <_printf_float+0x2d4>)
 8005e4a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005e4e:	bf94      	ite	ls
 8005e50:	4698      	movls	r8, r3
 8005e52:	4680      	movhi	r8, r0
 8005e54:	2303      	movs	r3, #3
 8005e56:	f04f 0a00 	mov.w	sl, #0
 8005e5a:	6123      	str	r3, [r4, #16]
 8005e5c:	f02b 0304 	bic.w	r3, fp, #4
 8005e60:	6023      	str	r3, [r4, #0]
 8005e62:	4633      	mov	r3, r6
 8005e64:	4621      	mov	r1, r4
 8005e66:	4628      	mov	r0, r5
 8005e68:	9700      	str	r7, [sp, #0]
 8005e6a:	aa0f      	add	r2, sp, #60	; 0x3c
 8005e6c:	f000 f9d4 	bl	8006218 <_printf_common>
 8005e70:	3001      	adds	r0, #1
 8005e72:	f040 8090 	bne.w	8005f96 <_printf_float+0x1d6>
 8005e76:	f04f 30ff 	mov.w	r0, #4294967295
 8005e7a:	b011      	add	sp, #68	; 0x44
 8005e7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e80:	4642      	mov	r2, r8
 8005e82:	4653      	mov	r3, sl
 8005e84:	4640      	mov	r0, r8
 8005e86:	4651      	mov	r1, sl
 8005e88:	f7fa fdc0 	bl	8000a0c <__aeabi_dcmpun>
 8005e8c:	b148      	cbz	r0, 8005ea2 <_printf_float+0xe2>
 8005e8e:	f1ba 0f00 	cmp.w	sl, #0
 8005e92:	bfb8      	it	lt
 8005e94:	232d      	movlt	r3, #45	; 0x2d
 8005e96:	4880      	ldr	r0, [pc, #512]	; (8006098 <_printf_float+0x2d8>)
 8005e98:	bfb8      	it	lt
 8005e9a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005e9e:	4b7f      	ldr	r3, [pc, #508]	; (800609c <_printf_float+0x2dc>)
 8005ea0:	e7d3      	b.n	8005e4a <_printf_float+0x8a>
 8005ea2:	6863      	ldr	r3, [r4, #4]
 8005ea4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005ea8:	1c5a      	adds	r2, r3, #1
 8005eaa:	d142      	bne.n	8005f32 <_printf_float+0x172>
 8005eac:	2306      	movs	r3, #6
 8005eae:	6063      	str	r3, [r4, #4]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	9206      	str	r2, [sp, #24]
 8005eb4:	aa0e      	add	r2, sp, #56	; 0x38
 8005eb6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005eba:	aa0d      	add	r2, sp, #52	; 0x34
 8005ebc:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005ec0:	9203      	str	r2, [sp, #12]
 8005ec2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005ec6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005eca:	6023      	str	r3, [r4, #0]
 8005ecc:	6863      	ldr	r3, [r4, #4]
 8005ece:	4642      	mov	r2, r8
 8005ed0:	9300      	str	r3, [sp, #0]
 8005ed2:	4628      	mov	r0, r5
 8005ed4:	4653      	mov	r3, sl
 8005ed6:	910b      	str	r1, [sp, #44]	; 0x2c
 8005ed8:	f7ff fed4 	bl	8005c84 <__cvt>
 8005edc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005ede:	4680      	mov	r8, r0
 8005ee0:	2947      	cmp	r1, #71	; 0x47
 8005ee2:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005ee4:	d108      	bne.n	8005ef8 <_printf_float+0x138>
 8005ee6:	1cc8      	adds	r0, r1, #3
 8005ee8:	db02      	blt.n	8005ef0 <_printf_float+0x130>
 8005eea:	6863      	ldr	r3, [r4, #4]
 8005eec:	4299      	cmp	r1, r3
 8005eee:	dd40      	ble.n	8005f72 <_printf_float+0x1b2>
 8005ef0:	f1a9 0902 	sub.w	r9, r9, #2
 8005ef4:	fa5f f989 	uxtb.w	r9, r9
 8005ef8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005efc:	d81f      	bhi.n	8005f3e <_printf_float+0x17e>
 8005efe:	464a      	mov	r2, r9
 8005f00:	3901      	subs	r1, #1
 8005f02:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005f06:	910d      	str	r1, [sp, #52]	; 0x34
 8005f08:	f7ff ff1b 	bl	8005d42 <__exponent>
 8005f0c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005f0e:	4682      	mov	sl, r0
 8005f10:	1813      	adds	r3, r2, r0
 8005f12:	2a01      	cmp	r2, #1
 8005f14:	6123      	str	r3, [r4, #16]
 8005f16:	dc02      	bgt.n	8005f1e <_printf_float+0x15e>
 8005f18:	6822      	ldr	r2, [r4, #0]
 8005f1a:	07d2      	lsls	r2, r2, #31
 8005f1c:	d501      	bpl.n	8005f22 <_printf_float+0x162>
 8005f1e:	3301      	adds	r3, #1
 8005f20:	6123      	str	r3, [r4, #16]
 8005f22:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d09b      	beq.n	8005e62 <_printf_float+0xa2>
 8005f2a:	232d      	movs	r3, #45	; 0x2d
 8005f2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f30:	e797      	b.n	8005e62 <_printf_float+0xa2>
 8005f32:	2947      	cmp	r1, #71	; 0x47
 8005f34:	d1bc      	bne.n	8005eb0 <_printf_float+0xf0>
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d1ba      	bne.n	8005eb0 <_printf_float+0xf0>
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e7b7      	b.n	8005eae <_printf_float+0xee>
 8005f3e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005f42:	d118      	bne.n	8005f76 <_printf_float+0x1b6>
 8005f44:	2900      	cmp	r1, #0
 8005f46:	6863      	ldr	r3, [r4, #4]
 8005f48:	dd0b      	ble.n	8005f62 <_printf_float+0x1a2>
 8005f4a:	6121      	str	r1, [r4, #16]
 8005f4c:	b913      	cbnz	r3, 8005f54 <_printf_float+0x194>
 8005f4e:	6822      	ldr	r2, [r4, #0]
 8005f50:	07d0      	lsls	r0, r2, #31
 8005f52:	d502      	bpl.n	8005f5a <_printf_float+0x19a>
 8005f54:	3301      	adds	r3, #1
 8005f56:	440b      	add	r3, r1
 8005f58:	6123      	str	r3, [r4, #16]
 8005f5a:	f04f 0a00 	mov.w	sl, #0
 8005f5e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005f60:	e7df      	b.n	8005f22 <_printf_float+0x162>
 8005f62:	b913      	cbnz	r3, 8005f6a <_printf_float+0x1aa>
 8005f64:	6822      	ldr	r2, [r4, #0]
 8005f66:	07d2      	lsls	r2, r2, #31
 8005f68:	d501      	bpl.n	8005f6e <_printf_float+0x1ae>
 8005f6a:	3302      	adds	r3, #2
 8005f6c:	e7f4      	b.n	8005f58 <_printf_float+0x198>
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e7f2      	b.n	8005f58 <_printf_float+0x198>
 8005f72:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005f76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f78:	4299      	cmp	r1, r3
 8005f7a:	db05      	blt.n	8005f88 <_printf_float+0x1c8>
 8005f7c:	6823      	ldr	r3, [r4, #0]
 8005f7e:	6121      	str	r1, [r4, #16]
 8005f80:	07d8      	lsls	r0, r3, #31
 8005f82:	d5ea      	bpl.n	8005f5a <_printf_float+0x19a>
 8005f84:	1c4b      	adds	r3, r1, #1
 8005f86:	e7e7      	b.n	8005f58 <_printf_float+0x198>
 8005f88:	2900      	cmp	r1, #0
 8005f8a:	bfcc      	ite	gt
 8005f8c:	2201      	movgt	r2, #1
 8005f8e:	f1c1 0202 	rsble	r2, r1, #2
 8005f92:	4413      	add	r3, r2
 8005f94:	e7e0      	b.n	8005f58 <_printf_float+0x198>
 8005f96:	6823      	ldr	r3, [r4, #0]
 8005f98:	055a      	lsls	r2, r3, #21
 8005f9a:	d407      	bmi.n	8005fac <_printf_float+0x1ec>
 8005f9c:	6923      	ldr	r3, [r4, #16]
 8005f9e:	4642      	mov	r2, r8
 8005fa0:	4631      	mov	r1, r6
 8005fa2:	4628      	mov	r0, r5
 8005fa4:	47b8      	blx	r7
 8005fa6:	3001      	adds	r0, #1
 8005fa8:	d12b      	bne.n	8006002 <_printf_float+0x242>
 8005faa:	e764      	b.n	8005e76 <_printf_float+0xb6>
 8005fac:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005fb0:	f240 80dd 	bls.w	800616e <_printf_float+0x3ae>
 8005fb4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005fb8:	2200      	movs	r2, #0
 8005fba:	2300      	movs	r3, #0
 8005fbc:	f7fa fcf4 	bl	80009a8 <__aeabi_dcmpeq>
 8005fc0:	2800      	cmp	r0, #0
 8005fc2:	d033      	beq.n	800602c <_printf_float+0x26c>
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	4631      	mov	r1, r6
 8005fc8:	4628      	mov	r0, r5
 8005fca:	4a35      	ldr	r2, [pc, #212]	; (80060a0 <_printf_float+0x2e0>)
 8005fcc:	47b8      	blx	r7
 8005fce:	3001      	adds	r0, #1
 8005fd0:	f43f af51 	beq.w	8005e76 <_printf_float+0xb6>
 8005fd4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	db02      	blt.n	8005fe2 <_printf_float+0x222>
 8005fdc:	6823      	ldr	r3, [r4, #0]
 8005fde:	07d8      	lsls	r0, r3, #31
 8005fe0:	d50f      	bpl.n	8006002 <_printf_float+0x242>
 8005fe2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005fe6:	4631      	mov	r1, r6
 8005fe8:	4628      	mov	r0, r5
 8005fea:	47b8      	blx	r7
 8005fec:	3001      	adds	r0, #1
 8005fee:	f43f af42 	beq.w	8005e76 <_printf_float+0xb6>
 8005ff2:	f04f 0800 	mov.w	r8, #0
 8005ff6:	f104 091a 	add.w	r9, r4, #26
 8005ffa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ffc:	3b01      	subs	r3, #1
 8005ffe:	4543      	cmp	r3, r8
 8006000:	dc09      	bgt.n	8006016 <_printf_float+0x256>
 8006002:	6823      	ldr	r3, [r4, #0]
 8006004:	079b      	lsls	r3, r3, #30
 8006006:	f100 8102 	bmi.w	800620e <_printf_float+0x44e>
 800600a:	68e0      	ldr	r0, [r4, #12]
 800600c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800600e:	4298      	cmp	r0, r3
 8006010:	bfb8      	it	lt
 8006012:	4618      	movlt	r0, r3
 8006014:	e731      	b.n	8005e7a <_printf_float+0xba>
 8006016:	2301      	movs	r3, #1
 8006018:	464a      	mov	r2, r9
 800601a:	4631      	mov	r1, r6
 800601c:	4628      	mov	r0, r5
 800601e:	47b8      	blx	r7
 8006020:	3001      	adds	r0, #1
 8006022:	f43f af28 	beq.w	8005e76 <_printf_float+0xb6>
 8006026:	f108 0801 	add.w	r8, r8, #1
 800602a:	e7e6      	b.n	8005ffa <_printf_float+0x23a>
 800602c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800602e:	2b00      	cmp	r3, #0
 8006030:	dc38      	bgt.n	80060a4 <_printf_float+0x2e4>
 8006032:	2301      	movs	r3, #1
 8006034:	4631      	mov	r1, r6
 8006036:	4628      	mov	r0, r5
 8006038:	4a19      	ldr	r2, [pc, #100]	; (80060a0 <_printf_float+0x2e0>)
 800603a:	47b8      	blx	r7
 800603c:	3001      	adds	r0, #1
 800603e:	f43f af1a 	beq.w	8005e76 <_printf_float+0xb6>
 8006042:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006046:	4313      	orrs	r3, r2
 8006048:	d102      	bne.n	8006050 <_printf_float+0x290>
 800604a:	6823      	ldr	r3, [r4, #0]
 800604c:	07d9      	lsls	r1, r3, #31
 800604e:	d5d8      	bpl.n	8006002 <_printf_float+0x242>
 8006050:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006054:	4631      	mov	r1, r6
 8006056:	4628      	mov	r0, r5
 8006058:	47b8      	blx	r7
 800605a:	3001      	adds	r0, #1
 800605c:	f43f af0b 	beq.w	8005e76 <_printf_float+0xb6>
 8006060:	f04f 0900 	mov.w	r9, #0
 8006064:	f104 0a1a 	add.w	sl, r4, #26
 8006068:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800606a:	425b      	negs	r3, r3
 800606c:	454b      	cmp	r3, r9
 800606e:	dc01      	bgt.n	8006074 <_printf_float+0x2b4>
 8006070:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006072:	e794      	b.n	8005f9e <_printf_float+0x1de>
 8006074:	2301      	movs	r3, #1
 8006076:	4652      	mov	r2, sl
 8006078:	4631      	mov	r1, r6
 800607a:	4628      	mov	r0, r5
 800607c:	47b8      	blx	r7
 800607e:	3001      	adds	r0, #1
 8006080:	f43f aef9 	beq.w	8005e76 <_printf_float+0xb6>
 8006084:	f109 0901 	add.w	r9, r9, #1
 8006088:	e7ee      	b.n	8006068 <_printf_float+0x2a8>
 800608a:	bf00      	nop
 800608c:	7fefffff 	.word	0x7fefffff
 8006090:	0800c0e4 	.word	0x0800c0e4
 8006094:	0800c0e8 	.word	0x0800c0e8
 8006098:	0800c0f0 	.word	0x0800c0f0
 800609c:	0800c0ec 	.word	0x0800c0ec
 80060a0:	0800c0f4 	.word	0x0800c0f4
 80060a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80060a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80060a8:	429a      	cmp	r2, r3
 80060aa:	bfa8      	it	ge
 80060ac:	461a      	movge	r2, r3
 80060ae:	2a00      	cmp	r2, #0
 80060b0:	4691      	mov	r9, r2
 80060b2:	dc37      	bgt.n	8006124 <_printf_float+0x364>
 80060b4:	f04f 0b00 	mov.w	fp, #0
 80060b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80060bc:	f104 021a 	add.w	r2, r4, #26
 80060c0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80060c4:	ebaa 0309 	sub.w	r3, sl, r9
 80060c8:	455b      	cmp	r3, fp
 80060ca:	dc33      	bgt.n	8006134 <_printf_float+0x374>
 80060cc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80060d0:	429a      	cmp	r2, r3
 80060d2:	db3b      	blt.n	800614c <_printf_float+0x38c>
 80060d4:	6823      	ldr	r3, [r4, #0]
 80060d6:	07da      	lsls	r2, r3, #31
 80060d8:	d438      	bmi.n	800614c <_printf_float+0x38c>
 80060da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80060dc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80060de:	eba3 020a 	sub.w	r2, r3, sl
 80060e2:	eba3 0901 	sub.w	r9, r3, r1
 80060e6:	4591      	cmp	r9, r2
 80060e8:	bfa8      	it	ge
 80060ea:	4691      	movge	r9, r2
 80060ec:	f1b9 0f00 	cmp.w	r9, #0
 80060f0:	dc34      	bgt.n	800615c <_printf_float+0x39c>
 80060f2:	f04f 0800 	mov.w	r8, #0
 80060f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80060fa:	f104 0a1a 	add.w	sl, r4, #26
 80060fe:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006102:	1a9b      	subs	r3, r3, r2
 8006104:	eba3 0309 	sub.w	r3, r3, r9
 8006108:	4543      	cmp	r3, r8
 800610a:	f77f af7a 	ble.w	8006002 <_printf_float+0x242>
 800610e:	2301      	movs	r3, #1
 8006110:	4652      	mov	r2, sl
 8006112:	4631      	mov	r1, r6
 8006114:	4628      	mov	r0, r5
 8006116:	47b8      	blx	r7
 8006118:	3001      	adds	r0, #1
 800611a:	f43f aeac 	beq.w	8005e76 <_printf_float+0xb6>
 800611e:	f108 0801 	add.w	r8, r8, #1
 8006122:	e7ec      	b.n	80060fe <_printf_float+0x33e>
 8006124:	4613      	mov	r3, r2
 8006126:	4631      	mov	r1, r6
 8006128:	4642      	mov	r2, r8
 800612a:	4628      	mov	r0, r5
 800612c:	47b8      	blx	r7
 800612e:	3001      	adds	r0, #1
 8006130:	d1c0      	bne.n	80060b4 <_printf_float+0x2f4>
 8006132:	e6a0      	b.n	8005e76 <_printf_float+0xb6>
 8006134:	2301      	movs	r3, #1
 8006136:	4631      	mov	r1, r6
 8006138:	4628      	mov	r0, r5
 800613a:	920b      	str	r2, [sp, #44]	; 0x2c
 800613c:	47b8      	blx	r7
 800613e:	3001      	adds	r0, #1
 8006140:	f43f ae99 	beq.w	8005e76 <_printf_float+0xb6>
 8006144:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006146:	f10b 0b01 	add.w	fp, fp, #1
 800614a:	e7b9      	b.n	80060c0 <_printf_float+0x300>
 800614c:	4631      	mov	r1, r6
 800614e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006152:	4628      	mov	r0, r5
 8006154:	47b8      	blx	r7
 8006156:	3001      	adds	r0, #1
 8006158:	d1bf      	bne.n	80060da <_printf_float+0x31a>
 800615a:	e68c      	b.n	8005e76 <_printf_float+0xb6>
 800615c:	464b      	mov	r3, r9
 800615e:	4631      	mov	r1, r6
 8006160:	4628      	mov	r0, r5
 8006162:	eb08 020a 	add.w	r2, r8, sl
 8006166:	47b8      	blx	r7
 8006168:	3001      	adds	r0, #1
 800616a:	d1c2      	bne.n	80060f2 <_printf_float+0x332>
 800616c:	e683      	b.n	8005e76 <_printf_float+0xb6>
 800616e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006170:	2a01      	cmp	r2, #1
 8006172:	dc01      	bgt.n	8006178 <_printf_float+0x3b8>
 8006174:	07db      	lsls	r3, r3, #31
 8006176:	d537      	bpl.n	80061e8 <_printf_float+0x428>
 8006178:	2301      	movs	r3, #1
 800617a:	4642      	mov	r2, r8
 800617c:	4631      	mov	r1, r6
 800617e:	4628      	mov	r0, r5
 8006180:	47b8      	blx	r7
 8006182:	3001      	adds	r0, #1
 8006184:	f43f ae77 	beq.w	8005e76 <_printf_float+0xb6>
 8006188:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800618c:	4631      	mov	r1, r6
 800618e:	4628      	mov	r0, r5
 8006190:	47b8      	blx	r7
 8006192:	3001      	adds	r0, #1
 8006194:	f43f ae6f 	beq.w	8005e76 <_printf_float+0xb6>
 8006198:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800619c:	2200      	movs	r2, #0
 800619e:	2300      	movs	r3, #0
 80061a0:	f7fa fc02 	bl	80009a8 <__aeabi_dcmpeq>
 80061a4:	b9d8      	cbnz	r0, 80061de <_printf_float+0x41e>
 80061a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80061a8:	f108 0201 	add.w	r2, r8, #1
 80061ac:	3b01      	subs	r3, #1
 80061ae:	4631      	mov	r1, r6
 80061b0:	4628      	mov	r0, r5
 80061b2:	47b8      	blx	r7
 80061b4:	3001      	adds	r0, #1
 80061b6:	d10e      	bne.n	80061d6 <_printf_float+0x416>
 80061b8:	e65d      	b.n	8005e76 <_printf_float+0xb6>
 80061ba:	2301      	movs	r3, #1
 80061bc:	464a      	mov	r2, r9
 80061be:	4631      	mov	r1, r6
 80061c0:	4628      	mov	r0, r5
 80061c2:	47b8      	blx	r7
 80061c4:	3001      	adds	r0, #1
 80061c6:	f43f ae56 	beq.w	8005e76 <_printf_float+0xb6>
 80061ca:	f108 0801 	add.w	r8, r8, #1
 80061ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80061d0:	3b01      	subs	r3, #1
 80061d2:	4543      	cmp	r3, r8
 80061d4:	dcf1      	bgt.n	80061ba <_printf_float+0x3fa>
 80061d6:	4653      	mov	r3, sl
 80061d8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80061dc:	e6e0      	b.n	8005fa0 <_printf_float+0x1e0>
 80061de:	f04f 0800 	mov.w	r8, #0
 80061e2:	f104 091a 	add.w	r9, r4, #26
 80061e6:	e7f2      	b.n	80061ce <_printf_float+0x40e>
 80061e8:	2301      	movs	r3, #1
 80061ea:	4642      	mov	r2, r8
 80061ec:	e7df      	b.n	80061ae <_printf_float+0x3ee>
 80061ee:	2301      	movs	r3, #1
 80061f0:	464a      	mov	r2, r9
 80061f2:	4631      	mov	r1, r6
 80061f4:	4628      	mov	r0, r5
 80061f6:	47b8      	blx	r7
 80061f8:	3001      	adds	r0, #1
 80061fa:	f43f ae3c 	beq.w	8005e76 <_printf_float+0xb6>
 80061fe:	f108 0801 	add.w	r8, r8, #1
 8006202:	68e3      	ldr	r3, [r4, #12]
 8006204:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006206:	1a5b      	subs	r3, r3, r1
 8006208:	4543      	cmp	r3, r8
 800620a:	dcf0      	bgt.n	80061ee <_printf_float+0x42e>
 800620c:	e6fd      	b.n	800600a <_printf_float+0x24a>
 800620e:	f04f 0800 	mov.w	r8, #0
 8006212:	f104 0919 	add.w	r9, r4, #25
 8006216:	e7f4      	b.n	8006202 <_printf_float+0x442>

08006218 <_printf_common>:
 8006218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800621c:	4616      	mov	r6, r2
 800621e:	4699      	mov	r9, r3
 8006220:	688a      	ldr	r2, [r1, #8]
 8006222:	690b      	ldr	r3, [r1, #16]
 8006224:	4607      	mov	r7, r0
 8006226:	4293      	cmp	r3, r2
 8006228:	bfb8      	it	lt
 800622a:	4613      	movlt	r3, r2
 800622c:	6033      	str	r3, [r6, #0]
 800622e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006232:	460c      	mov	r4, r1
 8006234:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006238:	b10a      	cbz	r2, 800623e <_printf_common+0x26>
 800623a:	3301      	adds	r3, #1
 800623c:	6033      	str	r3, [r6, #0]
 800623e:	6823      	ldr	r3, [r4, #0]
 8006240:	0699      	lsls	r1, r3, #26
 8006242:	bf42      	ittt	mi
 8006244:	6833      	ldrmi	r3, [r6, #0]
 8006246:	3302      	addmi	r3, #2
 8006248:	6033      	strmi	r3, [r6, #0]
 800624a:	6825      	ldr	r5, [r4, #0]
 800624c:	f015 0506 	ands.w	r5, r5, #6
 8006250:	d106      	bne.n	8006260 <_printf_common+0x48>
 8006252:	f104 0a19 	add.w	sl, r4, #25
 8006256:	68e3      	ldr	r3, [r4, #12]
 8006258:	6832      	ldr	r2, [r6, #0]
 800625a:	1a9b      	subs	r3, r3, r2
 800625c:	42ab      	cmp	r3, r5
 800625e:	dc28      	bgt.n	80062b2 <_printf_common+0x9a>
 8006260:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006264:	1e13      	subs	r3, r2, #0
 8006266:	6822      	ldr	r2, [r4, #0]
 8006268:	bf18      	it	ne
 800626a:	2301      	movne	r3, #1
 800626c:	0692      	lsls	r2, r2, #26
 800626e:	d42d      	bmi.n	80062cc <_printf_common+0xb4>
 8006270:	4649      	mov	r1, r9
 8006272:	4638      	mov	r0, r7
 8006274:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006278:	47c0      	blx	r8
 800627a:	3001      	adds	r0, #1
 800627c:	d020      	beq.n	80062c0 <_printf_common+0xa8>
 800627e:	6823      	ldr	r3, [r4, #0]
 8006280:	68e5      	ldr	r5, [r4, #12]
 8006282:	f003 0306 	and.w	r3, r3, #6
 8006286:	2b04      	cmp	r3, #4
 8006288:	bf18      	it	ne
 800628a:	2500      	movne	r5, #0
 800628c:	6832      	ldr	r2, [r6, #0]
 800628e:	f04f 0600 	mov.w	r6, #0
 8006292:	68a3      	ldr	r3, [r4, #8]
 8006294:	bf08      	it	eq
 8006296:	1aad      	subeq	r5, r5, r2
 8006298:	6922      	ldr	r2, [r4, #16]
 800629a:	bf08      	it	eq
 800629c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80062a0:	4293      	cmp	r3, r2
 80062a2:	bfc4      	itt	gt
 80062a4:	1a9b      	subgt	r3, r3, r2
 80062a6:	18ed      	addgt	r5, r5, r3
 80062a8:	341a      	adds	r4, #26
 80062aa:	42b5      	cmp	r5, r6
 80062ac:	d11a      	bne.n	80062e4 <_printf_common+0xcc>
 80062ae:	2000      	movs	r0, #0
 80062b0:	e008      	b.n	80062c4 <_printf_common+0xac>
 80062b2:	2301      	movs	r3, #1
 80062b4:	4652      	mov	r2, sl
 80062b6:	4649      	mov	r1, r9
 80062b8:	4638      	mov	r0, r7
 80062ba:	47c0      	blx	r8
 80062bc:	3001      	adds	r0, #1
 80062be:	d103      	bne.n	80062c8 <_printf_common+0xb0>
 80062c0:	f04f 30ff 	mov.w	r0, #4294967295
 80062c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062c8:	3501      	adds	r5, #1
 80062ca:	e7c4      	b.n	8006256 <_printf_common+0x3e>
 80062cc:	2030      	movs	r0, #48	; 0x30
 80062ce:	18e1      	adds	r1, r4, r3
 80062d0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80062d4:	1c5a      	adds	r2, r3, #1
 80062d6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80062da:	4422      	add	r2, r4
 80062dc:	3302      	adds	r3, #2
 80062de:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80062e2:	e7c5      	b.n	8006270 <_printf_common+0x58>
 80062e4:	2301      	movs	r3, #1
 80062e6:	4622      	mov	r2, r4
 80062e8:	4649      	mov	r1, r9
 80062ea:	4638      	mov	r0, r7
 80062ec:	47c0      	blx	r8
 80062ee:	3001      	adds	r0, #1
 80062f0:	d0e6      	beq.n	80062c0 <_printf_common+0xa8>
 80062f2:	3601      	adds	r6, #1
 80062f4:	e7d9      	b.n	80062aa <_printf_common+0x92>
	...

080062f8 <_printf_i>:
 80062f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062fc:	7e0f      	ldrb	r7, [r1, #24]
 80062fe:	4691      	mov	r9, r2
 8006300:	2f78      	cmp	r7, #120	; 0x78
 8006302:	4680      	mov	r8, r0
 8006304:	460c      	mov	r4, r1
 8006306:	469a      	mov	sl, r3
 8006308:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800630a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800630e:	d807      	bhi.n	8006320 <_printf_i+0x28>
 8006310:	2f62      	cmp	r7, #98	; 0x62
 8006312:	d80a      	bhi.n	800632a <_printf_i+0x32>
 8006314:	2f00      	cmp	r7, #0
 8006316:	f000 80d9 	beq.w	80064cc <_printf_i+0x1d4>
 800631a:	2f58      	cmp	r7, #88	; 0x58
 800631c:	f000 80a4 	beq.w	8006468 <_printf_i+0x170>
 8006320:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006324:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006328:	e03a      	b.n	80063a0 <_printf_i+0xa8>
 800632a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800632e:	2b15      	cmp	r3, #21
 8006330:	d8f6      	bhi.n	8006320 <_printf_i+0x28>
 8006332:	a101      	add	r1, pc, #4	; (adr r1, 8006338 <_printf_i+0x40>)
 8006334:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006338:	08006391 	.word	0x08006391
 800633c:	080063a5 	.word	0x080063a5
 8006340:	08006321 	.word	0x08006321
 8006344:	08006321 	.word	0x08006321
 8006348:	08006321 	.word	0x08006321
 800634c:	08006321 	.word	0x08006321
 8006350:	080063a5 	.word	0x080063a5
 8006354:	08006321 	.word	0x08006321
 8006358:	08006321 	.word	0x08006321
 800635c:	08006321 	.word	0x08006321
 8006360:	08006321 	.word	0x08006321
 8006364:	080064b3 	.word	0x080064b3
 8006368:	080063d5 	.word	0x080063d5
 800636c:	08006495 	.word	0x08006495
 8006370:	08006321 	.word	0x08006321
 8006374:	08006321 	.word	0x08006321
 8006378:	080064d5 	.word	0x080064d5
 800637c:	08006321 	.word	0x08006321
 8006380:	080063d5 	.word	0x080063d5
 8006384:	08006321 	.word	0x08006321
 8006388:	08006321 	.word	0x08006321
 800638c:	0800649d 	.word	0x0800649d
 8006390:	682b      	ldr	r3, [r5, #0]
 8006392:	1d1a      	adds	r2, r3, #4
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	602a      	str	r2, [r5, #0]
 8006398:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800639c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80063a0:	2301      	movs	r3, #1
 80063a2:	e0a4      	b.n	80064ee <_printf_i+0x1f6>
 80063a4:	6820      	ldr	r0, [r4, #0]
 80063a6:	6829      	ldr	r1, [r5, #0]
 80063a8:	0606      	lsls	r6, r0, #24
 80063aa:	f101 0304 	add.w	r3, r1, #4
 80063ae:	d50a      	bpl.n	80063c6 <_printf_i+0xce>
 80063b0:	680e      	ldr	r6, [r1, #0]
 80063b2:	602b      	str	r3, [r5, #0]
 80063b4:	2e00      	cmp	r6, #0
 80063b6:	da03      	bge.n	80063c0 <_printf_i+0xc8>
 80063b8:	232d      	movs	r3, #45	; 0x2d
 80063ba:	4276      	negs	r6, r6
 80063bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063c0:	230a      	movs	r3, #10
 80063c2:	485e      	ldr	r0, [pc, #376]	; (800653c <_printf_i+0x244>)
 80063c4:	e019      	b.n	80063fa <_printf_i+0x102>
 80063c6:	680e      	ldr	r6, [r1, #0]
 80063c8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80063cc:	602b      	str	r3, [r5, #0]
 80063ce:	bf18      	it	ne
 80063d0:	b236      	sxthne	r6, r6
 80063d2:	e7ef      	b.n	80063b4 <_printf_i+0xbc>
 80063d4:	682b      	ldr	r3, [r5, #0]
 80063d6:	6820      	ldr	r0, [r4, #0]
 80063d8:	1d19      	adds	r1, r3, #4
 80063da:	6029      	str	r1, [r5, #0]
 80063dc:	0601      	lsls	r1, r0, #24
 80063de:	d501      	bpl.n	80063e4 <_printf_i+0xec>
 80063e0:	681e      	ldr	r6, [r3, #0]
 80063e2:	e002      	b.n	80063ea <_printf_i+0xf2>
 80063e4:	0646      	lsls	r6, r0, #25
 80063e6:	d5fb      	bpl.n	80063e0 <_printf_i+0xe8>
 80063e8:	881e      	ldrh	r6, [r3, #0]
 80063ea:	2f6f      	cmp	r7, #111	; 0x6f
 80063ec:	bf0c      	ite	eq
 80063ee:	2308      	moveq	r3, #8
 80063f0:	230a      	movne	r3, #10
 80063f2:	4852      	ldr	r0, [pc, #328]	; (800653c <_printf_i+0x244>)
 80063f4:	2100      	movs	r1, #0
 80063f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80063fa:	6865      	ldr	r5, [r4, #4]
 80063fc:	2d00      	cmp	r5, #0
 80063fe:	bfa8      	it	ge
 8006400:	6821      	ldrge	r1, [r4, #0]
 8006402:	60a5      	str	r5, [r4, #8]
 8006404:	bfa4      	itt	ge
 8006406:	f021 0104 	bicge.w	r1, r1, #4
 800640a:	6021      	strge	r1, [r4, #0]
 800640c:	b90e      	cbnz	r6, 8006412 <_printf_i+0x11a>
 800640e:	2d00      	cmp	r5, #0
 8006410:	d04d      	beq.n	80064ae <_printf_i+0x1b6>
 8006412:	4615      	mov	r5, r2
 8006414:	fbb6 f1f3 	udiv	r1, r6, r3
 8006418:	fb03 6711 	mls	r7, r3, r1, r6
 800641c:	5dc7      	ldrb	r7, [r0, r7]
 800641e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006422:	4637      	mov	r7, r6
 8006424:	42bb      	cmp	r3, r7
 8006426:	460e      	mov	r6, r1
 8006428:	d9f4      	bls.n	8006414 <_printf_i+0x11c>
 800642a:	2b08      	cmp	r3, #8
 800642c:	d10b      	bne.n	8006446 <_printf_i+0x14e>
 800642e:	6823      	ldr	r3, [r4, #0]
 8006430:	07de      	lsls	r6, r3, #31
 8006432:	d508      	bpl.n	8006446 <_printf_i+0x14e>
 8006434:	6923      	ldr	r3, [r4, #16]
 8006436:	6861      	ldr	r1, [r4, #4]
 8006438:	4299      	cmp	r1, r3
 800643a:	bfde      	ittt	le
 800643c:	2330      	movle	r3, #48	; 0x30
 800643e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006442:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006446:	1b52      	subs	r2, r2, r5
 8006448:	6122      	str	r2, [r4, #16]
 800644a:	464b      	mov	r3, r9
 800644c:	4621      	mov	r1, r4
 800644e:	4640      	mov	r0, r8
 8006450:	f8cd a000 	str.w	sl, [sp]
 8006454:	aa03      	add	r2, sp, #12
 8006456:	f7ff fedf 	bl	8006218 <_printf_common>
 800645a:	3001      	adds	r0, #1
 800645c:	d14c      	bne.n	80064f8 <_printf_i+0x200>
 800645e:	f04f 30ff 	mov.w	r0, #4294967295
 8006462:	b004      	add	sp, #16
 8006464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006468:	4834      	ldr	r0, [pc, #208]	; (800653c <_printf_i+0x244>)
 800646a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800646e:	6829      	ldr	r1, [r5, #0]
 8006470:	6823      	ldr	r3, [r4, #0]
 8006472:	f851 6b04 	ldr.w	r6, [r1], #4
 8006476:	6029      	str	r1, [r5, #0]
 8006478:	061d      	lsls	r5, r3, #24
 800647a:	d514      	bpl.n	80064a6 <_printf_i+0x1ae>
 800647c:	07df      	lsls	r7, r3, #31
 800647e:	bf44      	itt	mi
 8006480:	f043 0320 	orrmi.w	r3, r3, #32
 8006484:	6023      	strmi	r3, [r4, #0]
 8006486:	b91e      	cbnz	r6, 8006490 <_printf_i+0x198>
 8006488:	6823      	ldr	r3, [r4, #0]
 800648a:	f023 0320 	bic.w	r3, r3, #32
 800648e:	6023      	str	r3, [r4, #0]
 8006490:	2310      	movs	r3, #16
 8006492:	e7af      	b.n	80063f4 <_printf_i+0xfc>
 8006494:	6823      	ldr	r3, [r4, #0]
 8006496:	f043 0320 	orr.w	r3, r3, #32
 800649a:	6023      	str	r3, [r4, #0]
 800649c:	2378      	movs	r3, #120	; 0x78
 800649e:	4828      	ldr	r0, [pc, #160]	; (8006540 <_printf_i+0x248>)
 80064a0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80064a4:	e7e3      	b.n	800646e <_printf_i+0x176>
 80064a6:	0659      	lsls	r1, r3, #25
 80064a8:	bf48      	it	mi
 80064aa:	b2b6      	uxthmi	r6, r6
 80064ac:	e7e6      	b.n	800647c <_printf_i+0x184>
 80064ae:	4615      	mov	r5, r2
 80064b0:	e7bb      	b.n	800642a <_printf_i+0x132>
 80064b2:	682b      	ldr	r3, [r5, #0]
 80064b4:	6826      	ldr	r6, [r4, #0]
 80064b6:	1d18      	adds	r0, r3, #4
 80064b8:	6961      	ldr	r1, [r4, #20]
 80064ba:	6028      	str	r0, [r5, #0]
 80064bc:	0635      	lsls	r5, r6, #24
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	d501      	bpl.n	80064c6 <_printf_i+0x1ce>
 80064c2:	6019      	str	r1, [r3, #0]
 80064c4:	e002      	b.n	80064cc <_printf_i+0x1d4>
 80064c6:	0670      	lsls	r0, r6, #25
 80064c8:	d5fb      	bpl.n	80064c2 <_printf_i+0x1ca>
 80064ca:	8019      	strh	r1, [r3, #0]
 80064cc:	2300      	movs	r3, #0
 80064ce:	4615      	mov	r5, r2
 80064d0:	6123      	str	r3, [r4, #16]
 80064d2:	e7ba      	b.n	800644a <_printf_i+0x152>
 80064d4:	682b      	ldr	r3, [r5, #0]
 80064d6:	2100      	movs	r1, #0
 80064d8:	1d1a      	adds	r2, r3, #4
 80064da:	602a      	str	r2, [r5, #0]
 80064dc:	681d      	ldr	r5, [r3, #0]
 80064de:	6862      	ldr	r2, [r4, #4]
 80064e0:	4628      	mov	r0, r5
 80064e2:	f002 fe4b 	bl	800917c <memchr>
 80064e6:	b108      	cbz	r0, 80064ec <_printf_i+0x1f4>
 80064e8:	1b40      	subs	r0, r0, r5
 80064ea:	6060      	str	r0, [r4, #4]
 80064ec:	6863      	ldr	r3, [r4, #4]
 80064ee:	6123      	str	r3, [r4, #16]
 80064f0:	2300      	movs	r3, #0
 80064f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064f6:	e7a8      	b.n	800644a <_printf_i+0x152>
 80064f8:	462a      	mov	r2, r5
 80064fa:	4649      	mov	r1, r9
 80064fc:	4640      	mov	r0, r8
 80064fe:	6923      	ldr	r3, [r4, #16]
 8006500:	47d0      	blx	sl
 8006502:	3001      	adds	r0, #1
 8006504:	d0ab      	beq.n	800645e <_printf_i+0x166>
 8006506:	6823      	ldr	r3, [r4, #0]
 8006508:	079b      	lsls	r3, r3, #30
 800650a:	d413      	bmi.n	8006534 <_printf_i+0x23c>
 800650c:	68e0      	ldr	r0, [r4, #12]
 800650e:	9b03      	ldr	r3, [sp, #12]
 8006510:	4298      	cmp	r0, r3
 8006512:	bfb8      	it	lt
 8006514:	4618      	movlt	r0, r3
 8006516:	e7a4      	b.n	8006462 <_printf_i+0x16a>
 8006518:	2301      	movs	r3, #1
 800651a:	4632      	mov	r2, r6
 800651c:	4649      	mov	r1, r9
 800651e:	4640      	mov	r0, r8
 8006520:	47d0      	blx	sl
 8006522:	3001      	adds	r0, #1
 8006524:	d09b      	beq.n	800645e <_printf_i+0x166>
 8006526:	3501      	adds	r5, #1
 8006528:	68e3      	ldr	r3, [r4, #12]
 800652a:	9903      	ldr	r1, [sp, #12]
 800652c:	1a5b      	subs	r3, r3, r1
 800652e:	42ab      	cmp	r3, r5
 8006530:	dcf2      	bgt.n	8006518 <_printf_i+0x220>
 8006532:	e7eb      	b.n	800650c <_printf_i+0x214>
 8006534:	2500      	movs	r5, #0
 8006536:	f104 0619 	add.w	r6, r4, #25
 800653a:	e7f5      	b.n	8006528 <_printf_i+0x230>
 800653c:	0800c0f6 	.word	0x0800c0f6
 8006540:	0800c107 	.word	0x0800c107

08006544 <_scanf_float>:
 8006544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006548:	b087      	sub	sp, #28
 800654a:	9303      	str	r3, [sp, #12]
 800654c:	688b      	ldr	r3, [r1, #8]
 800654e:	4617      	mov	r7, r2
 8006550:	1e5a      	subs	r2, r3, #1
 8006552:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006556:	bf85      	ittet	hi
 8006558:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800655c:	195b      	addhi	r3, r3, r5
 800655e:	2300      	movls	r3, #0
 8006560:	9302      	strhi	r3, [sp, #8]
 8006562:	bf88      	it	hi
 8006564:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006568:	468b      	mov	fp, r1
 800656a:	f04f 0500 	mov.w	r5, #0
 800656e:	bf8c      	ite	hi
 8006570:	608b      	strhi	r3, [r1, #8]
 8006572:	9302      	strls	r3, [sp, #8]
 8006574:	680b      	ldr	r3, [r1, #0]
 8006576:	4680      	mov	r8, r0
 8006578:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800657c:	f84b 3b1c 	str.w	r3, [fp], #28
 8006580:	460c      	mov	r4, r1
 8006582:	465e      	mov	r6, fp
 8006584:	46aa      	mov	sl, r5
 8006586:	46a9      	mov	r9, r5
 8006588:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800658c:	9501      	str	r5, [sp, #4]
 800658e:	68a2      	ldr	r2, [r4, #8]
 8006590:	b152      	cbz	r2, 80065a8 <_scanf_float+0x64>
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	781b      	ldrb	r3, [r3, #0]
 8006596:	2b4e      	cmp	r3, #78	; 0x4e
 8006598:	d864      	bhi.n	8006664 <_scanf_float+0x120>
 800659a:	2b40      	cmp	r3, #64	; 0x40
 800659c:	d83c      	bhi.n	8006618 <_scanf_float+0xd4>
 800659e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80065a2:	b2c8      	uxtb	r0, r1
 80065a4:	280e      	cmp	r0, #14
 80065a6:	d93a      	bls.n	800661e <_scanf_float+0xda>
 80065a8:	f1b9 0f00 	cmp.w	r9, #0
 80065ac:	d003      	beq.n	80065b6 <_scanf_float+0x72>
 80065ae:	6823      	ldr	r3, [r4, #0]
 80065b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065b4:	6023      	str	r3, [r4, #0]
 80065b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80065ba:	f1ba 0f01 	cmp.w	sl, #1
 80065be:	f200 8113 	bhi.w	80067e8 <_scanf_float+0x2a4>
 80065c2:	455e      	cmp	r6, fp
 80065c4:	f200 8105 	bhi.w	80067d2 <_scanf_float+0x28e>
 80065c8:	2501      	movs	r5, #1
 80065ca:	4628      	mov	r0, r5
 80065cc:	b007      	add	sp, #28
 80065ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065d2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80065d6:	2a0d      	cmp	r2, #13
 80065d8:	d8e6      	bhi.n	80065a8 <_scanf_float+0x64>
 80065da:	a101      	add	r1, pc, #4	; (adr r1, 80065e0 <_scanf_float+0x9c>)
 80065dc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80065e0:	0800671f 	.word	0x0800671f
 80065e4:	080065a9 	.word	0x080065a9
 80065e8:	080065a9 	.word	0x080065a9
 80065ec:	080065a9 	.word	0x080065a9
 80065f0:	0800677f 	.word	0x0800677f
 80065f4:	08006757 	.word	0x08006757
 80065f8:	080065a9 	.word	0x080065a9
 80065fc:	080065a9 	.word	0x080065a9
 8006600:	0800672d 	.word	0x0800672d
 8006604:	080065a9 	.word	0x080065a9
 8006608:	080065a9 	.word	0x080065a9
 800660c:	080065a9 	.word	0x080065a9
 8006610:	080065a9 	.word	0x080065a9
 8006614:	080066e5 	.word	0x080066e5
 8006618:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800661c:	e7db      	b.n	80065d6 <_scanf_float+0x92>
 800661e:	290e      	cmp	r1, #14
 8006620:	d8c2      	bhi.n	80065a8 <_scanf_float+0x64>
 8006622:	a001      	add	r0, pc, #4	; (adr r0, 8006628 <_scanf_float+0xe4>)
 8006624:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006628:	080066d7 	.word	0x080066d7
 800662c:	080065a9 	.word	0x080065a9
 8006630:	080066d7 	.word	0x080066d7
 8006634:	0800676b 	.word	0x0800676b
 8006638:	080065a9 	.word	0x080065a9
 800663c:	08006685 	.word	0x08006685
 8006640:	080066c1 	.word	0x080066c1
 8006644:	080066c1 	.word	0x080066c1
 8006648:	080066c1 	.word	0x080066c1
 800664c:	080066c1 	.word	0x080066c1
 8006650:	080066c1 	.word	0x080066c1
 8006654:	080066c1 	.word	0x080066c1
 8006658:	080066c1 	.word	0x080066c1
 800665c:	080066c1 	.word	0x080066c1
 8006660:	080066c1 	.word	0x080066c1
 8006664:	2b6e      	cmp	r3, #110	; 0x6e
 8006666:	d809      	bhi.n	800667c <_scanf_float+0x138>
 8006668:	2b60      	cmp	r3, #96	; 0x60
 800666a:	d8b2      	bhi.n	80065d2 <_scanf_float+0x8e>
 800666c:	2b54      	cmp	r3, #84	; 0x54
 800666e:	d077      	beq.n	8006760 <_scanf_float+0x21c>
 8006670:	2b59      	cmp	r3, #89	; 0x59
 8006672:	d199      	bne.n	80065a8 <_scanf_float+0x64>
 8006674:	2d07      	cmp	r5, #7
 8006676:	d197      	bne.n	80065a8 <_scanf_float+0x64>
 8006678:	2508      	movs	r5, #8
 800667a:	e029      	b.n	80066d0 <_scanf_float+0x18c>
 800667c:	2b74      	cmp	r3, #116	; 0x74
 800667e:	d06f      	beq.n	8006760 <_scanf_float+0x21c>
 8006680:	2b79      	cmp	r3, #121	; 0x79
 8006682:	e7f6      	b.n	8006672 <_scanf_float+0x12e>
 8006684:	6821      	ldr	r1, [r4, #0]
 8006686:	05c8      	lsls	r0, r1, #23
 8006688:	d51a      	bpl.n	80066c0 <_scanf_float+0x17c>
 800668a:	9b02      	ldr	r3, [sp, #8]
 800668c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006690:	6021      	str	r1, [r4, #0]
 8006692:	f109 0901 	add.w	r9, r9, #1
 8006696:	b11b      	cbz	r3, 80066a0 <_scanf_float+0x15c>
 8006698:	3b01      	subs	r3, #1
 800669a:	3201      	adds	r2, #1
 800669c:	9302      	str	r3, [sp, #8]
 800669e:	60a2      	str	r2, [r4, #8]
 80066a0:	68a3      	ldr	r3, [r4, #8]
 80066a2:	3b01      	subs	r3, #1
 80066a4:	60a3      	str	r3, [r4, #8]
 80066a6:	6923      	ldr	r3, [r4, #16]
 80066a8:	3301      	adds	r3, #1
 80066aa:	6123      	str	r3, [r4, #16]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	3b01      	subs	r3, #1
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	607b      	str	r3, [r7, #4]
 80066b4:	f340 8084 	ble.w	80067c0 <_scanf_float+0x27c>
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	3301      	adds	r3, #1
 80066bc:	603b      	str	r3, [r7, #0]
 80066be:	e766      	b.n	800658e <_scanf_float+0x4a>
 80066c0:	eb1a 0f05 	cmn.w	sl, r5
 80066c4:	f47f af70 	bne.w	80065a8 <_scanf_float+0x64>
 80066c8:	6822      	ldr	r2, [r4, #0]
 80066ca:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80066ce:	6022      	str	r2, [r4, #0]
 80066d0:	f806 3b01 	strb.w	r3, [r6], #1
 80066d4:	e7e4      	b.n	80066a0 <_scanf_float+0x15c>
 80066d6:	6822      	ldr	r2, [r4, #0]
 80066d8:	0610      	lsls	r0, r2, #24
 80066da:	f57f af65 	bpl.w	80065a8 <_scanf_float+0x64>
 80066de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80066e2:	e7f4      	b.n	80066ce <_scanf_float+0x18a>
 80066e4:	f1ba 0f00 	cmp.w	sl, #0
 80066e8:	d10e      	bne.n	8006708 <_scanf_float+0x1c4>
 80066ea:	f1b9 0f00 	cmp.w	r9, #0
 80066ee:	d10e      	bne.n	800670e <_scanf_float+0x1ca>
 80066f0:	6822      	ldr	r2, [r4, #0]
 80066f2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80066f6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80066fa:	d108      	bne.n	800670e <_scanf_float+0x1ca>
 80066fc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006700:	f04f 0a01 	mov.w	sl, #1
 8006704:	6022      	str	r2, [r4, #0]
 8006706:	e7e3      	b.n	80066d0 <_scanf_float+0x18c>
 8006708:	f1ba 0f02 	cmp.w	sl, #2
 800670c:	d055      	beq.n	80067ba <_scanf_float+0x276>
 800670e:	2d01      	cmp	r5, #1
 8006710:	d002      	beq.n	8006718 <_scanf_float+0x1d4>
 8006712:	2d04      	cmp	r5, #4
 8006714:	f47f af48 	bne.w	80065a8 <_scanf_float+0x64>
 8006718:	3501      	adds	r5, #1
 800671a:	b2ed      	uxtb	r5, r5
 800671c:	e7d8      	b.n	80066d0 <_scanf_float+0x18c>
 800671e:	f1ba 0f01 	cmp.w	sl, #1
 8006722:	f47f af41 	bne.w	80065a8 <_scanf_float+0x64>
 8006726:	f04f 0a02 	mov.w	sl, #2
 800672a:	e7d1      	b.n	80066d0 <_scanf_float+0x18c>
 800672c:	b97d      	cbnz	r5, 800674e <_scanf_float+0x20a>
 800672e:	f1b9 0f00 	cmp.w	r9, #0
 8006732:	f47f af3c 	bne.w	80065ae <_scanf_float+0x6a>
 8006736:	6822      	ldr	r2, [r4, #0]
 8006738:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800673c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006740:	f47f af39 	bne.w	80065b6 <_scanf_float+0x72>
 8006744:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006748:	2501      	movs	r5, #1
 800674a:	6022      	str	r2, [r4, #0]
 800674c:	e7c0      	b.n	80066d0 <_scanf_float+0x18c>
 800674e:	2d03      	cmp	r5, #3
 8006750:	d0e2      	beq.n	8006718 <_scanf_float+0x1d4>
 8006752:	2d05      	cmp	r5, #5
 8006754:	e7de      	b.n	8006714 <_scanf_float+0x1d0>
 8006756:	2d02      	cmp	r5, #2
 8006758:	f47f af26 	bne.w	80065a8 <_scanf_float+0x64>
 800675c:	2503      	movs	r5, #3
 800675e:	e7b7      	b.n	80066d0 <_scanf_float+0x18c>
 8006760:	2d06      	cmp	r5, #6
 8006762:	f47f af21 	bne.w	80065a8 <_scanf_float+0x64>
 8006766:	2507      	movs	r5, #7
 8006768:	e7b2      	b.n	80066d0 <_scanf_float+0x18c>
 800676a:	6822      	ldr	r2, [r4, #0]
 800676c:	0591      	lsls	r1, r2, #22
 800676e:	f57f af1b 	bpl.w	80065a8 <_scanf_float+0x64>
 8006772:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006776:	6022      	str	r2, [r4, #0]
 8006778:	f8cd 9004 	str.w	r9, [sp, #4]
 800677c:	e7a8      	b.n	80066d0 <_scanf_float+0x18c>
 800677e:	6822      	ldr	r2, [r4, #0]
 8006780:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006784:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006788:	d006      	beq.n	8006798 <_scanf_float+0x254>
 800678a:	0550      	lsls	r0, r2, #21
 800678c:	f57f af0c 	bpl.w	80065a8 <_scanf_float+0x64>
 8006790:	f1b9 0f00 	cmp.w	r9, #0
 8006794:	f43f af0f 	beq.w	80065b6 <_scanf_float+0x72>
 8006798:	0591      	lsls	r1, r2, #22
 800679a:	bf58      	it	pl
 800679c:	9901      	ldrpl	r1, [sp, #4]
 800679e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80067a2:	bf58      	it	pl
 80067a4:	eba9 0101 	subpl.w	r1, r9, r1
 80067a8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80067ac:	f04f 0900 	mov.w	r9, #0
 80067b0:	bf58      	it	pl
 80067b2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80067b6:	6022      	str	r2, [r4, #0]
 80067b8:	e78a      	b.n	80066d0 <_scanf_float+0x18c>
 80067ba:	f04f 0a03 	mov.w	sl, #3
 80067be:	e787      	b.n	80066d0 <_scanf_float+0x18c>
 80067c0:	4639      	mov	r1, r7
 80067c2:	4640      	mov	r0, r8
 80067c4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80067c8:	4798      	blx	r3
 80067ca:	2800      	cmp	r0, #0
 80067cc:	f43f aedf 	beq.w	800658e <_scanf_float+0x4a>
 80067d0:	e6ea      	b.n	80065a8 <_scanf_float+0x64>
 80067d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80067d6:	463a      	mov	r2, r7
 80067d8:	4640      	mov	r0, r8
 80067da:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80067de:	4798      	blx	r3
 80067e0:	6923      	ldr	r3, [r4, #16]
 80067e2:	3b01      	subs	r3, #1
 80067e4:	6123      	str	r3, [r4, #16]
 80067e6:	e6ec      	b.n	80065c2 <_scanf_float+0x7e>
 80067e8:	1e6b      	subs	r3, r5, #1
 80067ea:	2b06      	cmp	r3, #6
 80067ec:	d825      	bhi.n	800683a <_scanf_float+0x2f6>
 80067ee:	2d02      	cmp	r5, #2
 80067f0:	d836      	bhi.n	8006860 <_scanf_float+0x31c>
 80067f2:	455e      	cmp	r6, fp
 80067f4:	f67f aee8 	bls.w	80065c8 <_scanf_float+0x84>
 80067f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80067fc:	463a      	mov	r2, r7
 80067fe:	4640      	mov	r0, r8
 8006800:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006804:	4798      	blx	r3
 8006806:	6923      	ldr	r3, [r4, #16]
 8006808:	3b01      	subs	r3, #1
 800680a:	6123      	str	r3, [r4, #16]
 800680c:	e7f1      	b.n	80067f2 <_scanf_float+0x2ae>
 800680e:	9802      	ldr	r0, [sp, #8]
 8006810:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006814:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006818:	463a      	mov	r2, r7
 800681a:	9002      	str	r0, [sp, #8]
 800681c:	4640      	mov	r0, r8
 800681e:	4798      	blx	r3
 8006820:	6923      	ldr	r3, [r4, #16]
 8006822:	3b01      	subs	r3, #1
 8006824:	6123      	str	r3, [r4, #16]
 8006826:	f10a 3aff 	add.w	sl, sl, #4294967295
 800682a:	fa5f fa8a 	uxtb.w	sl, sl
 800682e:	f1ba 0f02 	cmp.w	sl, #2
 8006832:	d1ec      	bne.n	800680e <_scanf_float+0x2ca>
 8006834:	3d03      	subs	r5, #3
 8006836:	b2ed      	uxtb	r5, r5
 8006838:	1b76      	subs	r6, r6, r5
 800683a:	6823      	ldr	r3, [r4, #0]
 800683c:	05da      	lsls	r2, r3, #23
 800683e:	d52f      	bpl.n	80068a0 <_scanf_float+0x35c>
 8006840:	055b      	lsls	r3, r3, #21
 8006842:	d510      	bpl.n	8006866 <_scanf_float+0x322>
 8006844:	455e      	cmp	r6, fp
 8006846:	f67f aebf 	bls.w	80065c8 <_scanf_float+0x84>
 800684a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800684e:	463a      	mov	r2, r7
 8006850:	4640      	mov	r0, r8
 8006852:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006856:	4798      	blx	r3
 8006858:	6923      	ldr	r3, [r4, #16]
 800685a:	3b01      	subs	r3, #1
 800685c:	6123      	str	r3, [r4, #16]
 800685e:	e7f1      	b.n	8006844 <_scanf_float+0x300>
 8006860:	46aa      	mov	sl, r5
 8006862:	9602      	str	r6, [sp, #8]
 8006864:	e7df      	b.n	8006826 <_scanf_float+0x2e2>
 8006866:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800686a:	6923      	ldr	r3, [r4, #16]
 800686c:	2965      	cmp	r1, #101	; 0x65
 800686e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006872:	f106 35ff 	add.w	r5, r6, #4294967295
 8006876:	6123      	str	r3, [r4, #16]
 8006878:	d00c      	beq.n	8006894 <_scanf_float+0x350>
 800687a:	2945      	cmp	r1, #69	; 0x45
 800687c:	d00a      	beq.n	8006894 <_scanf_float+0x350>
 800687e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006882:	463a      	mov	r2, r7
 8006884:	4640      	mov	r0, r8
 8006886:	4798      	blx	r3
 8006888:	6923      	ldr	r3, [r4, #16]
 800688a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800688e:	3b01      	subs	r3, #1
 8006890:	1eb5      	subs	r5, r6, #2
 8006892:	6123      	str	r3, [r4, #16]
 8006894:	463a      	mov	r2, r7
 8006896:	4640      	mov	r0, r8
 8006898:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800689c:	4798      	blx	r3
 800689e:	462e      	mov	r6, r5
 80068a0:	6825      	ldr	r5, [r4, #0]
 80068a2:	f015 0510 	ands.w	r5, r5, #16
 80068a6:	d155      	bne.n	8006954 <_scanf_float+0x410>
 80068a8:	7035      	strb	r5, [r6, #0]
 80068aa:	6823      	ldr	r3, [r4, #0]
 80068ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80068b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068b4:	d11b      	bne.n	80068ee <_scanf_float+0x3aa>
 80068b6:	9b01      	ldr	r3, [sp, #4]
 80068b8:	454b      	cmp	r3, r9
 80068ba:	eba3 0209 	sub.w	r2, r3, r9
 80068be:	d123      	bne.n	8006908 <_scanf_float+0x3c4>
 80068c0:	2200      	movs	r2, #0
 80068c2:	4659      	mov	r1, fp
 80068c4:	4640      	mov	r0, r8
 80068c6:	f000 feef 	bl	80076a8 <_strtod_r>
 80068ca:	6822      	ldr	r2, [r4, #0]
 80068cc:	9b03      	ldr	r3, [sp, #12]
 80068ce:	f012 0f02 	tst.w	r2, #2
 80068d2:	4606      	mov	r6, r0
 80068d4:	460f      	mov	r7, r1
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	d021      	beq.n	800691e <_scanf_float+0x3da>
 80068da:	1d1a      	adds	r2, r3, #4
 80068dc:	9903      	ldr	r1, [sp, #12]
 80068de:	600a      	str	r2, [r1, #0]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	e9c3 6700 	strd	r6, r7, [r3]
 80068e6:	68e3      	ldr	r3, [r4, #12]
 80068e8:	3301      	adds	r3, #1
 80068ea:	60e3      	str	r3, [r4, #12]
 80068ec:	e66d      	b.n	80065ca <_scanf_float+0x86>
 80068ee:	9b04      	ldr	r3, [sp, #16]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d0e5      	beq.n	80068c0 <_scanf_float+0x37c>
 80068f4:	9905      	ldr	r1, [sp, #20]
 80068f6:	230a      	movs	r3, #10
 80068f8:	462a      	mov	r2, r5
 80068fa:	4640      	mov	r0, r8
 80068fc:	3101      	adds	r1, #1
 80068fe:	f000 ff61 	bl	80077c4 <_strtol_r>
 8006902:	9b04      	ldr	r3, [sp, #16]
 8006904:	9e05      	ldr	r6, [sp, #20]
 8006906:	1ac2      	subs	r2, r0, r3
 8006908:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800690c:	429e      	cmp	r6, r3
 800690e:	bf28      	it	cs
 8006910:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006914:	4630      	mov	r0, r6
 8006916:	4910      	ldr	r1, [pc, #64]	; (8006958 <_scanf_float+0x414>)
 8006918:	f000 f89c 	bl	8006a54 <siprintf>
 800691c:	e7d0      	b.n	80068c0 <_scanf_float+0x37c>
 800691e:	f012 0f04 	tst.w	r2, #4
 8006922:	f103 0204 	add.w	r2, r3, #4
 8006926:	d1d9      	bne.n	80068dc <_scanf_float+0x398>
 8006928:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800692c:	f8cc 2000 	str.w	r2, [ip]
 8006930:	f8d3 8000 	ldr.w	r8, [r3]
 8006934:	4602      	mov	r2, r0
 8006936:	460b      	mov	r3, r1
 8006938:	f7fa f868 	bl	8000a0c <__aeabi_dcmpun>
 800693c:	b128      	cbz	r0, 800694a <_scanf_float+0x406>
 800693e:	4807      	ldr	r0, [pc, #28]	; (800695c <_scanf_float+0x418>)
 8006940:	f000 f884 	bl	8006a4c <nanf>
 8006944:	f8c8 0000 	str.w	r0, [r8]
 8006948:	e7cd      	b.n	80068e6 <_scanf_float+0x3a2>
 800694a:	4630      	mov	r0, r6
 800694c:	4639      	mov	r1, r7
 800694e:	f7fa f8bb 	bl	8000ac8 <__aeabi_d2f>
 8006952:	e7f7      	b.n	8006944 <_scanf_float+0x400>
 8006954:	2500      	movs	r5, #0
 8006956:	e638      	b.n	80065ca <_scanf_float+0x86>
 8006958:	0800c118 	.word	0x0800c118
 800695c:	0800c588 	.word	0x0800c588

08006960 <_puts_r>:
 8006960:	b570      	push	{r4, r5, r6, lr}
 8006962:	460e      	mov	r6, r1
 8006964:	4605      	mov	r5, r0
 8006966:	b118      	cbz	r0, 8006970 <_puts_r+0x10>
 8006968:	6983      	ldr	r3, [r0, #24]
 800696a:	b90b      	cbnz	r3, 8006970 <_puts_r+0x10>
 800696c:	f001 ff7c 	bl	8008868 <__sinit>
 8006970:	69ab      	ldr	r3, [r5, #24]
 8006972:	68ac      	ldr	r4, [r5, #8]
 8006974:	b913      	cbnz	r3, 800697c <_puts_r+0x1c>
 8006976:	4628      	mov	r0, r5
 8006978:	f001 ff76 	bl	8008868 <__sinit>
 800697c:	4b2c      	ldr	r3, [pc, #176]	; (8006a30 <_puts_r+0xd0>)
 800697e:	429c      	cmp	r4, r3
 8006980:	d120      	bne.n	80069c4 <_puts_r+0x64>
 8006982:	686c      	ldr	r4, [r5, #4]
 8006984:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006986:	07db      	lsls	r3, r3, #31
 8006988:	d405      	bmi.n	8006996 <_puts_r+0x36>
 800698a:	89a3      	ldrh	r3, [r4, #12]
 800698c:	0598      	lsls	r0, r3, #22
 800698e:	d402      	bmi.n	8006996 <_puts_r+0x36>
 8006990:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006992:	f002 fb72 	bl	800907a <__retarget_lock_acquire_recursive>
 8006996:	89a3      	ldrh	r3, [r4, #12]
 8006998:	0719      	lsls	r1, r3, #28
 800699a:	d51d      	bpl.n	80069d8 <_puts_r+0x78>
 800699c:	6923      	ldr	r3, [r4, #16]
 800699e:	b1db      	cbz	r3, 80069d8 <_puts_r+0x78>
 80069a0:	3e01      	subs	r6, #1
 80069a2:	68a3      	ldr	r3, [r4, #8]
 80069a4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80069a8:	3b01      	subs	r3, #1
 80069aa:	60a3      	str	r3, [r4, #8]
 80069ac:	bb39      	cbnz	r1, 80069fe <_puts_r+0x9e>
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	da38      	bge.n	8006a24 <_puts_r+0xc4>
 80069b2:	4622      	mov	r2, r4
 80069b4:	210a      	movs	r1, #10
 80069b6:	4628      	mov	r0, r5
 80069b8:	f000 ff06 	bl	80077c8 <__swbuf_r>
 80069bc:	3001      	adds	r0, #1
 80069be:	d011      	beq.n	80069e4 <_puts_r+0x84>
 80069c0:	250a      	movs	r5, #10
 80069c2:	e011      	b.n	80069e8 <_puts_r+0x88>
 80069c4:	4b1b      	ldr	r3, [pc, #108]	; (8006a34 <_puts_r+0xd4>)
 80069c6:	429c      	cmp	r4, r3
 80069c8:	d101      	bne.n	80069ce <_puts_r+0x6e>
 80069ca:	68ac      	ldr	r4, [r5, #8]
 80069cc:	e7da      	b.n	8006984 <_puts_r+0x24>
 80069ce:	4b1a      	ldr	r3, [pc, #104]	; (8006a38 <_puts_r+0xd8>)
 80069d0:	429c      	cmp	r4, r3
 80069d2:	bf08      	it	eq
 80069d4:	68ec      	ldreq	r4, [r5, #12]
 80069d6:	e7d5      	b.n	8006984 <_puts_r+0x24>
 80069d8:	4621      	mov	r1, r4
 80069da:	4628      	mov	r0, r5
 80069dc:	f000 ff46 	bl	800786c <__swsetup_r>
 80069e0:	2800      	cmp	r0, #0
 80069e2:	d0dd      	beq.n	80069a0 <_puts_r+0x40>
 80069e4:	f04f 35ff 	mov.w	r5, #4294967295
 80069e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80069ea:	07da      	lsls	r2, r3, #31
 80069ec:	d405      	bmi.n	80069fa <_puts_r+0x9a>
 80069ee:	89a3      	ldrh	r3, [r4, #12]
 80069f0:	059b      	lsls	r3, r3, #22
 80069f2:	d402      	bmi.n	80069fa <_puts_r+0x9a>
 80069f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80069f6:	f002 fb41 	bl	800907c <__retarget_lock_release_recursive>
 80069fa:	4628      	mov	r0, r5
 80069fc:	bd70      	pop	{r4, r5, r6, pc}
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	da04      	bge.n	8006a0c <_puts_r+0xac>
 8006a02:	69a2      	ldr	r2, [r4, #24]
 8006a04:	429a      	cmp	r2, r3
 8006a06:	dc06      	bgt.n	8006a16 <_puts_r+0xb6>
 8006a08:	290a      	cmp	r1, #10
 8006a0a:	d004      	beq.n	8006a16 <_puts_r+0xb6>
 8006a0c:	6823      	ldr	r3, [r4, #0]
 8006a0e:	1c5a      	adds	r2, r3, #1
 8006a10:	6022      	str	r2, [r4, #0]
 8006a12:	7019      	strb	r1, [r3, #0]
 8006a14:	e7c5      	b.n	80069a2 <_puts_r+0x42>
 8006a16:	4622      	mov	r2, r4
 8006a18:	4628      	mov	r0, r5
 8006a1a:	f000 fed5 	bl	80077c8 <__swbuf_r>
 8006a1e:	3001      	adds	r0, #1
 8006a20:	d1bf      	bne.n	80069a2 <_puts_r+0x42>
 8006a22:	e7df      	b.n	80069e4 <_puts_r+0x84>
 8006a24:	250a      	movs	r5, #10
 8006a26:	6823      	ldr	r3, [r4, #0]
 8006a28:	1c5a      	adds	r2, r3, #1
 8006a2a:	6022      	str	r2, [r4, #0]
 8006a2c:	701d      	strb	r5, [r3, #0]
 8006a2e:	e7db      	b.n	80069e8 <_puts_r+0x88>
 8006a30:	0800c324 	.word	0x0800c324
 8006a34:	0800c344 	.word	0x0800c344
 8006a38:	0800c304 	.word	0x0800c304

08006a3c <puts>:
 8006a3c:	4b02      	ldr	r3, [pc, #8]	; (8006a48 <puts+0xc>)
 8006a3e:	4601      	mov	r1, r0
 8006a40:	6818      	ldr	r0, [r3, #0]
 8006a42:	f7ff bf8d 	b.w	8006960 <_puts_r>
 8006a46:	bf00      	nop
 8006a48:	2000000c 	.word	0x2000000c

08006a4c <nanf>:
 8006a4c:	4800      	ldr	r0, [pc, #0]	; (8006a50 <nanf+0x4>)
 8006a4e:	4770      	bx	lr
 8006a50:	7fc00000 	.word	0x7fc00000

08006a54 <siprintf>:
 8006a54:	b40e      	push	{r1, r2, r3}
 8006a56:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006a5a:	b500      	push	{lr}
 8006a5c:	b09c      	sub	sp, #112	; 0x70
 8006a5e:	ab1d      	add	r3, sp, #116	; 0x74
 8006a60:	9002      	str	r0, [sp, #8]
 8006a62:	9006      	str	r0, [sp, #24]
 8006a64:	9107      	str	r1, [sp, #28]
 8006a66:	9104      	str	r1, [sp, #16]
 8006a68:	4808      	ldr	r0, [pc, #32]	; (8006a8c <siprintf+0x38>)
 8006a6a:	4909      	ldr	r1, [pc, #36]	; (8006a90 <siprintf+0x3c>)
 8006a6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a70:	9105      	str	r1, [sp, #20]
 8006a72:	6800      	ldr	r0, [r0, #0]
 8006a74:	a902      	add	r1, sp, #8
 8006a76:	9301      	str	r3, [sp, #4]
 8006a78:	f003 f992 	bl	8009da0 <_svfiprintf_r>
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	9b02      	ldr	r3, [sp, #8]
 8006a80:	701a      	strb	r2, [r3, #0]
 8006a82:	b01c      	add	sp, #112	; 0x70
 8006a84:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a88:	b003      	add	sp, #12
 8006a8a:	4770      	bx	lr
 8006a8c:	2000000c 	.word	0x2000000c
 8006a90:	ffff0208 	.word	0xffff0208

08006a94 <sulp>:
 8006a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a98:	460f      	mov	r7, r1
 8006a9a:	4690      	mov	r8, r2
 8006a9c:	f002 feec 	bl	8009878 <__ulp>
 8006aa0:	4604      	mov	r4, r0
 8006aa2:	460d      	mov	r5, r1
 8006aa4:	f1b8 0f00 	cmp.w	r8, #0
 8006aa8:	d011      	beq.n	8006ace <sulp+0x3a>
 8006aaa:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8006aae:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	dd0b      	ble.n	8006ace <sulp+0x3a>
 8006ab6:	2400      	movs	r4, #0
 8006ab8:	051b      	lsls	r3, r3, #20
 8006aba:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006abe:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006ac2:	4622      	mov	r2, r4
 8006ac4:	462b      	mov	r3, r5
 8006ac6:	f7f9 fd07 	bl	80004d8 <__aeabi_dmul>
 8006aca:	4604      	mov	r4, r0
 8006acc:	460d      	mov	r5, r1
 8006ace:	4620      	mov	r0, r4
 8006ad0:	4629      	mov	r1, r5
 8006ad2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08006ad8 <_strtod_l>:
 8006ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006adc:	469b      	mov	fp, r3
 8006ade:	2300      	movs	r3, #0
 8006ae0:	b09f      	sub	sp, #124	; 0x7c
 8006ae2:	931a      	str	r3, [sp, #104]	; 0x68
 8006ae4:	4b9e      	ldr	r3, [pc, #632]	; (8006d60 <_strtod_l+0x288>)
 8006ae6:	4682      	mov	sl, r0
 8006ae8:	681f      	ldr	r7, [r3, #0]
 8006aea:	460e      	mov	r6, r1
 8006aec:	4638      	mov	r0, r7
 8006aee:	9215      	str	r2, [sp, #84]	; 0x54
 8006af0:	f7f9 fb2e 	bl	8000150 <strlen>
 8006af4:	f04f 0800 	mov.w	r8, #0
 8006af8:	4604      	mov	r4, r0
 8006afa:	f04f 0900 	mov.w	r9, #0
 8006afe:	9619      	str	r6, [sp, #100]	; 0x64
 8006b00:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006b02:	781a      	ldrb	r2, [r3, #0]
 8006b04:	2a2b      	cmp	r2, #43	; 0x2b
 8006b06:	d04c      	beq.n	8006ba2 <_strtod_l+0xca>
 8006b08:	d83a      	bhi.n	8006b80 <_strtod_l+0xa8>
 8006b0a:	2a0d      	cmp	r2, #13
 8006b0c:	d833      	bhi.n	8006b76 <_strtod_l+0x9e>
 8006b0e:	2a08      	cmp	r2, #8
 8006b10:	d833      	bhi.n	8006b7a <_strtod_l+0xa2>
 8006b12:	2a00      	cmp	r2, #0
 8006b14:	d03d      	beq.n	8006b92 <_strtod_l+0xba>
 8006b16:	2300      	movs	r3, #0
 8006b18:	930a      	str	r3, [sp, #40]	; 0x28
 8006b1a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8006b1c:	782b      	ldrb	r3, [r5, #0]
 8006b1e:	2b30      	cmp	r3, #48	; 0x30
 8006b20:	f040 80aa 	bne.w	8006c78 <_strtod_l+0x1a0>
 8006b24:	786b      	ldrb	r3, [r5, #1]
 8006b26:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006b2a:	2b58      	cmp	r3, #88	; 0x58
 8006b2c:	d166      	bne.n	8006bfc <_strtod_l+0x124>
 8006b2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b30:	4650      	mov	r0, sl
 8006b32:	9301      	str	r3, [sp, #4]
 8006b34:	ab1a      	add	r3, sp, #104	; 0x68
 8006b36:	9300      	str	r3, [sp, #0]
 8006b38:	4a8a      	ldr	r2, [pc, #552]	; (8006d64 <_strtod_l+0x28c>)
 8006b3a:	f8cd b008 	str.w	fp, [sp, #8]
 8006b3e:	ab1b      	add	r3, sp, #108	; 0x6c
 8006b40:	a919      	add	r1, sp, #100	; 0x64
 8006b42:	f001 ff97 	bl	8008a74 <__gethex>
 8006b46:	f010 0607 	ands.w	r6, r0, #7
 8006b4a:	4604      	mov	r4, r0
 8006b4c:	d005      	beq.n	8006b5a <_strtod_l+0x82>
 8006b4e:	2e06      	cmp	r6, #6
 8006b50:	d129      	bne.n	8006ba6 <_strtod_l+0xce>
 8006b52:	2300      	movs	r3, #0
 8006b54:	3501      	adds	r5, #1
 8006b56:	9519      	str	r5, [sp, #100]	; 0x64
 8006b58:	930a      	str	r3, [sp, #40]	; 0x28
 8006b5a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	f040 858a 	bne.w	8007676 <_strtod_l+0xb9e>
 8006b62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b64:	b1d3      	cbz	r3, 8006b9c <_strtod_l+0xc4>
 8006b66:	4642      	mov	r2, r8
 8006b68:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006b6c:	4610      	mov	r0, r2
 8006b6e:	4619      	mov	r1, r3
 8006b70:	b01f      	add	sp, #124	; 0x7c
 8006b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b76:	2a20      	cmp	r2, #32
 8006b78:	d1cd      	bne.n	8006b16 <_strtod_l+0x3e>
 8006b7a:	3301      	adds	r3, #1
 8006b7c:	9319      	str	r3, [sp, #100]	; 0x64
 8006b7e:	e7bf      	b.n	8006b00 <_strtod_l+0x28>
 8006b80:	2a2d      	cmp	r2, #45	; 0x2d
 8006b82:	d1c8      	bne.n	8006b16 <_strtod_l+0x3e>
 8006b84:	2201      	movs	r2, #1
 8006b86:	920a      	str	r2, [sp, #40]	; 0x28
 8006b88:	1c5a      	adds	r2, r3, #1
 8006b8a:	9219      	str	r2, [sp, #100]	; 0x64
 8006b8c:	785b      	ldrb	r3, [r3, #1]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d1c3      	bne.n	8006b1a <_strtod_l+0x42>
 8006b92:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006b94:	9619      	str	r6, [sp, #100]	; 0x64
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	f040 856b 	bne.w	8007672 <_strtod_l+0xb9a>
 8006b9c:	4642      	mov	r2, r8
 8006b9e:	464b      	mov	r3, r9
 8006ba0:	e7e4      	b.n	8006b6c <_strtod_l+0x94>
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	e7ef      	b.n	8006b86 <_strtod_l+0xae>
 8006ba6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006ba8:	b13a      	cbz	r2, 8006bba <_strtod_l+0xe2>
 8006baa:	2135      	movs	r1, #53	; 0x35
 8006bac:	a81c      	add	r0, sp, #112	; 0x70
 8006bae:	f002 ff67 	bl	8009a80 <__copybits>
 8006bb2:	4650      	mov	r0, sl
 8006bb4:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006bb6:	f002 fb2f 	bl	8009218 <_Bfree>
 8006bba:	3e01      	subs	r6, #1
 8006bbc:	2e04      	cmp	r6, #4
 8006bbe:	d806      	bhi.n	8006bce <_strtod_l+0xf6>
 8006bc0:	e8df f006 	tbb	[pc, r6]
 8006bc4:	1714030a 	.word	0x1714030a
 8006bc8:	0a          	.byte	0x0a
 8006bc9:	00          	.byte	0x00
 8006bca:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8006bce:	0721      	lsls	r1, r4, #28
 8006bd0:	d5c3      	bpl.n	8006b5a <_strtod_l+0x82>
 8006bd2:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8006bd6:	e7c0      	b.n	8006b5a <_strtod_l+0x82>
 8006bd8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006bda:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8006bde:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006be2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006be6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8006bea:	e7f0      	b.n	8006bce <_strtod_l+0xf6>
 8006bec:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8006d68 <_strtod_l+0x290>
 8006bf0:	e7ed      	b.n	8006bce <_strtod_l+0xf6>
 8006bf2:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8006bf6:	f04f 38ff 	mov.w	r8, #4294967295
 8006bfa:	e7e8      	b.n	8006bce <_strtod_l+0xf6>
 8006bfc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006bfe:	1c5a      	adds	r2, r3, #1
 8006c00:	9219      	str	r2, [sp, #100]	; 0x64
 8006c02:	785b      	ldrb	r3, [r3, #1]
 8006c04:	2b30      	cmp	r3, #48	; 0x30
 8006c06:	d0f9      	beq.n	8006bfc <_strtod_l+0x124>
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d0a6      	beq.n	8006b5a <_strtod_l+0x82>
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	9307      	str	r3, [sp, #28]
 8006c10:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006c12:	220a      	movs	r2, #10
 8006c14:	9308      	str	r3, [sp, #32]
 8006c16:	2300      	movs	r3, #0
 8006c18:	469b      	mov	fp, r3
 8006c1a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8006c1e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8006c20:	7805      	ldrb	r5, [r0, #0]
 8006c22:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8006c26:	b2d9      	uxtb	r1, r3
 8006c28:	2909      	cmp	r1, #9
 8006c2a:	d927      	bls.n	8006c7c <_strtod_l+0x1a4>
 8006c2c:	4622      	mov	r2, r4
 8006c2e:	4639      	mov	r1, r7
 8006c30:	f003 fa0f 	bl	800a052 <strncmp>
 8006c34:	2800      	cmp	r0, #0
 8006c36:	d033      	beq.n	8006ca0 <_strtod_l+0x1c8>
 8006c38:	2000      	movs	r0, #0
 8006c3a:	462a      	mov	r2, r5
 8006c3c:	465c      	mov	r4, fp
 8006c3e:	4603      	mov	r3, r0
 8006c40:	9004      	str	r0, [sp, #16]
 8006c42:	2a65      	cmp	r2, #101	; 0x65
 8006c44:	d001      	beq.n	8006c4a <_strtod_l+0x172>
 8006c46:	2a45      	cmp	r2, #69	; 0x45
 8006c48:	d114      	bne.n	8006c74 <_strtod_l+0x19c>
 8006c4a:	b91c      	cbnz	r4, 8006c54 <_strtod_l+0x17c>
 8006c4c:	9a07      	ldr	r2, [sp, #28]
 8006c4e:	4302      	orrs	r2, r0
 8006c50:	d09f      	beq.n	8006b92 <_strtod_l+0xba>
 8006c52:	2400      	movs	r4, #0
 8006c54:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8006c56:	1c72      	adds	r2, r6, #1
 8006c58:	9219      	str	r2, [sp, #100]	; 0x64
 8006c5a:	7872      	ldrb	r2, [r6, #1]
 8006c5c:	2a2b      	cmp	r2, #43	; 0x2b
 8006c5e:	d079      	beq.n	8006d54 <_strtod_l+0x27c>
 8006c60:	2a2d      	cmp	r2, #45	; 0x2d
 8006c62:	f000 8083 	beq.w	8006d6c <_strtod_l+0x294>
 8006c66:	2700      	movs	r7, #0
 8006c68:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006c6c:	2909      	cmp	r1, #9
 8006c6e:	f240 8083 	bls.w	8006d78 <_strtod_l+0x2a0>
 8006c72:	9619      	str	r6, [sp, #100]	; 0x64
 8006c74:	2500      	movs	r5, #0
 8006c76:	e09f      	b.n	8006db8 <_strtod_l+0x2e0>
 8006c78:	2300      	movs	r3, #0
 8006c7a:	e7c8      	b.n	8006c0e <_strtod_l+0x136>
 8006c7c:	f1bb 0f08 	cmp.w	fp, #8
 8006c80:	bfd5      	itete	le
 8006c82:	9906      	ldrle	r1, [sp, #24]
 8006c84:	9905      	ldrgt	r1, [sp, #20]
 8006c86:	fb02 3301 	mlale	r3, r2, r1, r3
 8006c8a:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006c8e:	f100 0001 	add.w	r0, r0, #1
 8006c92:	bfd4      	ite	le
 8006c94:	9306      	strle	r3, [sp, #24]
 8006c96:	9305      	strgt	r3, [sp, #20]
 8006c98:	f10b 0b01 	add.w	fp, fp, #1
 8006c9c:	9019      	str	r0, [sp, #100]	; 0x64
 8006c9e:	e7be      	b.n	8006c1e <_strtod_l+0x146>
 8006ca0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006ca2:	191a      	adds	r2, r3, r4
 8006ca4:	9219      	str	r2, [sp, #100]	; 0x64
 8006ca6:	5d1a      	ldrb	r2, [r3, r4]
 8006ca8:	f1bb 0f00 	cmp.w	fp, #0
 8006cac:	d036      	beq.n	8006d1c <_strtod_l+0x244>
 8006cae:	465c      	mov	r4, fp
 8006cb0:	9004      	str	r0, [sp, #16]
 8006cb2:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006cb6:	2b09      	cmp	r3, #9
 8006cb8:	d912      	bls.n	8006ce0 <_strtod_l+0x208>
 8006cba:	2301      	movs	r3, #1
 8006cbc:	e7c1      	b.n	8006c42 <_strtod_l+0x16a>
 8006cbe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006cc0:	3001      	adds	r0, #1
 8006cc2:	1c5a      	adds	r2, r3, #1
 8006cc4:	9219      	str	r2, [sp, #100]	; 0x64
 8006cc6:	785a      	ldrb	r2, [r3, #1]
 8006cc8:	2a30      	cmp	r2, #48	; 0x30
 8006cca:	d0f8      	beq.n	8006cbe <_strtod_l+0x1e6>
 8006ccc:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006cd0:	2b08      	cmp	r3, #8
 8006cd2:	f200 84d5 	bhi.w	8007680 <_strtod_l+0xba8>
 8006cd6:	9004      	str	r0, [sp, #16]
 8006cd8:	2000      	movs	r0, #0
 8006cda:	4604      	mov	r4, r0
 8006cdc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006cde:	9308      	str	r3, [sp, #32]
 8006ce0:	3a30      	subs	r2, #48	; 0x30
 8006ce2:	f100 0301 	add.w	r3, r0, #1
 8006ce6:	d013      	beq.n	8006d10 <_strtod_l+0x238>
 8006ce8:	9904      	ldr	r1, [sp, #16]
 8006cea:	1905      	adds	r5, r0, r4
 8006cec:	4419      	add	r1, r3
 8006cee:	9104      	str	r1, [sp, #16]
 8006cf0:	4623      	mov	r3, r4
 8006cf2:	210a      	movs	r1, #10
 8006cf4:	42ab      	cmp	r3, r5
 8006cf6:	d113      	bne.n	8006d20 <_strtod_l+0x248>
 8006cf8:	1823      	adds	r3, r4, r0
 8006cfa:	2b08      	cmp	r3, #8
 8006cfc:	f104 0401 	add.w	r4, r4, #1
 8006d00:	4404      	add	r4, r0
 8006d02:	dc1b      	bgt.n	8006d3c <_strtod_l+0x264>
 8006d04:	230a      	movs	r3, #10
 8006d06:	9906      	ldr	r1, [sp, #24]
 8006d08:	fb03 2301 	mla	r3, r3, r1, r2
 8006d0c:	9306      	str	r3, [sp, #24]
 8006d0e:	2300      	movs	r3, #0
 8006d10:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006d12:	4618      	mov	r0, r3
 8006d14:	1c51      	adds	r1, r2, #1
 8006d16:	9119      	str	r1, [sp, #100]	; 0x64
 8006d18:	7852      	ldrb	r2, [r2, #1]
 8006d1a:	e7ca      	b.n	8006cb2 <_strtod_l+0x1da>
 8006d1c:	4658      	mov	r0, fp
 8006d1e:	e7d3      	b.n	8006cc8 <_strtod_l+0x1f0>
 8006d20:	2b08      	cmp	r3, #8
 8006d22:	dc04      	bgt.n	8006d2e <_strtod_l+0x256>
 8006d24:	9f06      	ldr	r7, [sp, #24]
 8006d26:	434f      	muls	r7, r1
 8006d28:	9706      	str	r7, [sp, #24]
 8006d2a:	3301      	adds	r3, #1
 8006d2c:	e7e2      	b.n	8006cf4 <_strtod_l+0x21c>
 8006d2e:	1c5f      	adds	r7, r3, #1
 8006d30:	2f10      	cmp	r7, #16
 8006d32:	bfde      	ittt	le
 8006d34:	9f05      	ldrle	r7, [sp, #20]
 8006d36:	434f      	mulle	r7, r1
 8006d38:	9705      	strle	r7, [sp, #20]
 8006d3a:	e7f6      	b.n	8006d2a <_strtod_l+0x252>
 8006d3c:	2c10      	cmp	r4, #16
 8006d3e:	bfdf      	itttt	le
 8006d40:	230a      	movle	r3, #10
 8006d42:	9905      	ldrle	r1, [sp, #20]
 8006d44:	fb03 2301 	mlale	r3, r3, r1, r2
 8006d48:	9305      	strle	r3, [sp, #20]
 8006d4a:	e7e0      	b.n	8006d0e <_strtod_l+0x236>
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	9304      	str	r3, [sp, #16]
 8006d50:	2301      	movs	r3, #1
 8006d52:	e77b      	b.n	8006c4c <_strtod_l+0x174>
 8006d54:	2700      	movs	r7, #0
 8006d56:	1cb2      	adds	r2, r6, #2
 8006d58:	9219      	str	r2, [sp, #100]	; 0x64
 8006d5a:	78b2      	ldrb	r2, [r6, #2]
 8006d5c:	e784      	b.n	8006c68 <_strtod_l+0x190>
 8006d5e:	bf00      	nop
 8006d60:	0800c3cc 	.word	0x0800c3cc
 8006d64:	0800c120 	.word	0x0800c120
 8006d68:	7ff00000 	.word	0x7ff00000
 8006d6c:	2701      	movs	r7, #1
 8006d6e:	e7f2      	b.n	8006d56 <_strtod_l+0x27e>
 8006d70:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006d72:	1c51      	adds	r1, r2, #1
 8006d74:	9119      	str	r1, [sp, #100]	; 0x64
 8006d76:	7852      	ldrb	r2, [r2, #1]
 8006d78:	2a30      	cmp	r2, #48	; 0x30
 8006d7a:	d0f9      	beq.n	8006d70 <_strtod_l+0x298>
 8006d7c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006d80:	2908      	cmp	r1, #8
 8006d82:	f63f af77 	bhi.w	8006c74 <_strtod_l+0x19c>
 8006d86:	f04f 0e0a 	mov.w	lr, #10
 8006d8a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8006d8e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006d90:	9209      	str	r2, [sp, #36]	; 0x24
 8006d92:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006d94:	1c51      	adds	r1, r2, #1
 8006d96:	9119      	str	r1, [sp, #100]	; 0x64
 8006d98:	7852      	ldrb	r2, [r2, #1]
 8006d9a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8006d9e:	2d09      	cmp	r5, #9
 8006da0:	d935      	bls.n	8006e0e <_strtod_l+0x336>
 8006da2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006da4:	1b49      	subs	r1, r1, r5
 8006da6:	2908      	cmp	r1, #8
 8006da8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8006dac:	dc02      	bgt.n	8006db4 <_strtod_l+0x2dc>
 8006dae:	4565      	cmp	r5, ip
 8006db0:	bfa8      	it	ge
 8006db2:	4665      	movge	r5, ip
 8006db4:	b107      	cbz	r7, 8006db8 <_strtod_l+0x2e0>
 8006db6:	426d      	negs	r5, r5
 8006db8:	2c00      	cmp	r4, #0
 8006dba:	d14c      	bne.n	8006e56 <_strtod_l+0x37e>
 8006dbc:	9907      	ldr	r1, [sp, #28]
 8006dbe:	4301      	orrs	r1, r0
 8006dc0:	f47f aecb 	bne.w	8006b5a <_strtod_l+0x82>
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	f47f aee4 	bne.w	8006b92 <_strtod_l+0xba>
 8006dca:	2a69      	cmp	r2, #105	; 0x69
 8006dcc:	d026      	beq.n	8006e1c <_strtod_l+0x344>
 8006dce:	dc23      	bgt.n	8006e18 <_strtod_l+0x340>
 8006dd0:	2a49      	cmp	r2, #73	; 0x49
 8006dd2:	d023      	beq.n	8006e1c <_strtod_l+0x344>
 8006dd4:	2a4e      	cmp	r2, #78	; 0x4e
 8006dd6:	f47f aedc 	bne.w	8006b92 <_strtod_l+0xba>
 8006dda:	499d      	ldr	r1, [pc, #628]	; (8007050 <_strtod_l+0x578>)
 8006ddc:	a819      	add	r0, sp, #100	; 0x64
 8006dde:	f002 f897 	bl	8008f10 <__match>
 8006de2:	2800      	cmp	r0, #0
 8006de4:	f43f aed5 	beq.w	8006b92 <_strtod_l+0xba>
 8006de8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006dea:	781b      	ldrb	r3, [r3, #0]
 8006dec:	2b28      	cmp	r3, #40	; 0x28
 8006dee:	d12c      	bne.n	8006e4a <_strtod_l+0x372>
 8006df0:	4998      	ldr	r1, [pc, #608]	; (8007054 <_strtod_l+0x57c>)
 8006df2:	aa1c      	add	r2, sp, #112	; 0x70
 8006df4:	a819      	add	r0, sp, #100	; 0x64
 8006df6:	f002 f89f 	bl	8008f38 <__hexnan>
 8006dfa:	2805      	cmp	r0, #5
 8006dfc:	d125      	bne.n	8006e4a <_strtod_l+0x372>
 8006dfe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006e00:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8006e04:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8006e08:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8006e0c:	e6a5      	b.n	8006b5a <_strtod_l+0x82>
 8006e0e:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8006e12:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8006e16:	e7bc      	b.n	8006d92 <_strtod_l+0x2ba>
 8006e18:	2a6e      	cmp	r2, #110	; 0x6e
 8006e1a:	e7dc      	b.n	8006dd6 <_strtod_l+0x2fe>
 8006e1c:	498e      	ldr	r1, [pc, #568]	; (8007058 <_strtod_l+0x580>)
 8006e1e:	a819      	add	r0, sp, #100	; 0x64
 8006e20:	f002 f876 	bl	8008f10 <__match>
 8006e24:	2800      	cmp	r0, #0
 8006e26:	f43f aeb4 	beq.w	8006b92 <_strtod_l+0xba>
 8006e2a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006e2c:	498b      	ldr	r1, [pc, #556]	; (800705c <_strtod_l+0x584>)
 8006e2e:	3b01      	subs	r3, #1
 8006e30:	a819      	add	r0, sp, #100	; 0x64
 8006e32:	9319      	str	r3, [sp, #100]	; 0x64
 8006e34:	f002 f86c 	bl	8008f10 <__match>
 8006e38:	b910      	cbnz	r0, 8006e40 <_strtod_l+0x368>
 8006e3a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006e3c:	3301      	adds	r3, #1
 8006e3e:	9319      	str	r3, [sp, #100]	; 0x64
 8006e40:	f04f 0800 	mov.w	r8, #0
 8006e44:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8007060 <_strtod_l+0x588>
 8006e48:	e687      	b.n	8006b5a <_strtod_l+0x82>
 8006e4a:	4886      	ldr	r0, [pc, #536]	; (8007064 <_strtod_l+0x58c>)
 8006e4c:	f003 f8a8 	bl	8009fa0 <nan>
 8006e50:	4680      	mov	r8, r0
 8006e52:	4689      	mov	r9, r1
 8006e54:	e681      	b.n	8006b5a <_strtod_l+0x82>
 8006e56:	9b04      	ldr	r3, [sp, #16]
 8006e58:	f1bb 0f00 	cmp.w	fp, #0
 8006e5c:	bf08      	it	eq
 8006e5e:	46a3      	moveq	fp, r4
 8006e60:	1aeb      	subs	r3, r5, r3
 8006e62:	2c10      	cmp	r4, #16
 8006e64:	9806      	ldr	r0, [sp, #24]
 8006e66:	4626      	mov	r6, r4
 8006e68:	9307      	str	r3, [sp, #28]
 8006e6a:	bfa8      	it	ge
 8006e6c:	2610      	movge	r6, #16
 8006e6e:	f7f9 fab9 	bl	80003e4 <__aeabi_ui2d>
 8006e72:	2c09      	cmp	r4, #9
 8006e74:	4680      	mov	r8, r0
 8006e76:	4689      	mov	r9, r1
 8006e78:	dd13      	ble.n	8006ea2 <_strtod_l+0x3ca>
 8006e7a:	4b7b      	ldr	r3, [pc, #492]	; (8007068 <_strtod_l+0x590>)
 8006e7c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006e80:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006e84:	f7f9 fb28 	bl	80004d8 <__aeabi_dmul>
 8006e88:	4680      	mov	r8, r0
 8006e8a:	9805      	ldr	r0, [sp, #20]
 8006e8c:	4689      	mov	r9, r1
 8006e8e:	f7f9 faa9 	bl	80003e4 <__aeabi_ui2d>
 8006e92:	4602      	mov	r2, r0
 8006e94:	460b      	mov	r3, r1
 8006e96:	4640      	mov	r0, r8
 8006e98:	4649      	mov	r1, r9
 8006e9a:	f7f9 f967 	bl	800016c <__adddf3>
 8006e9e:	4680      	mov	r8, r0
 8006ea0:	4689      	mov	r9, r1
 8006ea2:	2c0f      	cmp	r4, #15
 8006ea4:	dc36      	bgt.n	8006f14 <_strtod_l+0x43c>
 8006ea6:	9b07      	ldr	r3, [sp, #28]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	f43f ae56 	beq.w	8006b5a <_strtod_l+0x82>
 8006eae:	dd22      	ble.n	8006ef6 <_strtod_l+0x41e>
 8006eb0:	2b16      	cmp	r3, #22
 8006eb2:	dc09      	bgt.n	8006ec8 <_strtod_l+0x3f0>
 8006eb4:	496c      	ldr	r1, [pc, #432]	; (8007068 <_strtod_l+0x590>)
 8006eb6:	4642      	mov	r2, r8
 8006eb8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006ebc:	464b      	mov	r3, r9
 8006ebe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ec2:	f7f9 fb09 	bl	80004d8 <__aeabi_dmul>
 8006ec6:	e7c3      	b.n	8006e50 <_strtod_l+0x378>
 8006ec8:	9a07      	ldr	r2, [sp, #28]
 8006eca:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	db20      	blt.n	8006f14 <_strtod_l+0x43c>
 8006ed2:	4d65      	ldr	r5, [pc, #404]	; (8007068 <_strtod_l+0x590>)
 8006ed4:	f1c4 040f 	rsb	r4, r4, #15
 8006ed8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8006edc:	4642      	mov	r2, r8
 8006ede:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ee2:	464b      	mov	r3, r9
 8006ee4:	f7f9 faf8 	bl	80004d8 <__aeabi_dmul>
 8006ee8:	9b07      	ldr	r3, [sp, #28]
 8006eea:	1b1c      	subs	r4, r3, r4
 8006eec:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8006ef0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006ef4:	e7e5      	b.n	8006ec2 <_strtod_l+0x3ea>
 8006ef6:	9b07      	ldr	r3, [sp, #28]
 8006ef8:	3316      	adds	r3, #22
 8006efa:	db0b      	blt.n	8006f14 <_strtod_l+0x43c>
 8006efc:	9b04      	ldr	r3, [sp, #16]
 8006efe:	4640      	mov	r0, r8
 8006f00:	1b5d      	subs	r5, r3, r5
 8006f02:	4b59      	ldr	r3, [pc, #356]	; (8007068 <_strtod_l+0x590>)
 8006f04:	4649      	mov	r1, r9
 8006f06:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006f0a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006f0e:	f7f9 fc0d 	bl	800072c <__aeabi_ddiv>
 8006f12:	e79d      	b.n	8006e50 <_strtod_l+0x378>
 8006f14:	9b07      	ldr	r3, [sp, #28]
 8006f16:	1ba6      	subs	r6, r4, r6
 8006f18:	441e      	add	r6, r3
 8006f1a:	2e00      	cmp	r6, #0
 8006f1c:	dd74      	ble.n	8007008 <_strtod_l+0x530>
 8006f1e:	f016 030f 	ands.w	r3, r6, #15
 8006f22:	d00a      	beq.n	8006f3a <_strtod_l+0x462>
 8006f24:	4950      	ldr	r1, [pc, #320]	; (8007068 <_strtod_l+0x590>)
 8006f26:	4642      	mov	r2, r8
 8006f28:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006f2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f30:	464b      	mov	r3, r9
 8006f32:	f7f9 fad1 	bl	80004d8 <__aeabi_dmul>
 8006f36:	4680      	mov	r8, r0
 8006f38:	4689      	mov	r9, r1
 8006f3a:	f036 060f 	bics.w	r6, r6, #15
 8006f3e:	d052      	beq.n	8006fe6 <_strtod_l+0x50e>
 8006f40:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8006f44:	dd27      	ble.n	8006f96 <_strtod_l+0x4be>
 8006f46:	f04f 0b00 	mov.w	fp, #0
 8006f4a:	f8cd b010 	str.w	fp, [sp, #16]
 8006f4e:	f8cd b020 	str.w	fp, [sp, #32]
 8006f52:	f8cd b018 	str.w	fp, [sp, #24]
 8006f56:	2322      	movs	r3, #34	; 0x22
 8006f58:	f04f 0800 	mov.w	r8, #0
 8006f5c:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8007060 <_strtod_l+0x588>
 8006f60:	f8ca 3000 	str.w	r3, [sl]
 8006f64:	9b08      	ldr	r3, [sp, #32]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	f43f adf7 	beq.w	8006b5a <_strtod_l+0x82>
 8006f6c:	4650      	mov	r0, sl
 8006f6e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006f70:	f002 f952 	bl	8009218 <_Bfree>
 8006f74:	4650      	mov	r0, sl
 8006f76:	9906      	ldr	r1, [sp, #24]
 8006f78:	f002 f94e 	bl	8009218 <_Bfree>
 8006f7c:	4650      	mov	r0, sl
 8006f7e:	9904      	ldr	r1, [sp, #16]
 8006f80:	f002 f94a 	bl	8009218 <_Bfree>
 8006f84:	4650      	mov	r0, sl
 8006f86:	9908      	ldr	r1, [sp, #32]
 8006f88:	f002 f946 	bl	8009218 <_Bfree>
 8006f8c:	4659      	mov	r1, fp
 8006f8e:	4650      	mov	r0, sl
 8006f90:	f002 f942 	bl	8009218 <_Bfree>
 8006f94:	e5e1      	b.n	8006b5a <_strtod_l+0x82>
 8006f96:	4b35      	ldr	r3, [pc, #212]	; (800706c <_strtod_l+0x594>)
 8006f98:	4640      	mov	r0, r8
 8006f9a:	9305      	str	r3, [sp, #20]
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	4649      	mov	r1, r9
 8006fa0:	461f      	mov	r7, r3
 8006fa2:	1136      	asrs	r6, r6, #4
 8006fa4:	2e01      	cmp	r6, #1
 8006fa6:	dc21      	bgt.n	8006fec <_strtod_l+0x514>
 8006fa8:	b10b      	cbz	r3, 8006fae <_strtod_l+0x4d6>
 8006faa:	4680      	mov	r8, r0
 8006fac:	4689      	mov	r9, r1
 8006fae:	4b2f      	ldr	r3, [pc, #188]	; (800706c <_strtod_l+0x594>)
 8006fb0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8006fb4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006fb8:	4642      	mov	r2, r8
 8006fba:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006fbe:	464b      	mov	r3, r9
 8006fc0:	f7f9 fa8a 	bl	80004d8 <__aeabi_dmul>
 8006fc4:	4b26      	ldr	r3, [pc, #152]	; (8007060 <_strtod_l+0x588>)
 8006fc6:	460a      	mov	r2, r1
 8006fc8:	400b      	ands	r3, r1
 8006fca:	4929      	ldr	r1, [pc, #164]	; (8007070 <_strtod_l+0x598>)
 8006fcc:	4680      	mov	r8, r0
 8006fce:	428b      	cmp	r3, r1
 8006fd0:	d8b9      	bhi.n	8006f46 <_strtod_l+0x46e>
 8006fd2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006fd6:	428b      	cmp	r3, r1
 8006fd8:	bf86      	itte	hi
 8006fda:	f04f 38ff 	movhi.w	r8, #4294967295
 8006fde:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8007074 <_strtod_l+0x59c>
 8006fe2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	9305      	str	r3, [sp, #20]
 8006fea:	e07f      	b.n	80070ec <_strtod_l+0x614>
 8006fec:	07f2      	lsls	r2, r6, #31
 8006fee:	d505      	bpl.n	8006ffc <_strtod_l+0x524>
 8006ff0:	9b05      	ldr	r3, [sp, #20]
 8006ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ff6:	f7f9 fa6f 	bl	80004d8 <__aeabi_dmul>
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	9a05      	ldr	r2, [sp, #20]
 8006ffe:	3701      	adds	r7, #1
 8007000:	3208      	adds	r2, #8
 8007002:	1076      	asrs	r6, r6, #1
 8007004:	9205      	str	r2, [sp, #20]
 8007006:	e7cd      	b.n	8006fa4 <_strtod_l+0x4cc>
 8007008:	d0ed      	beq.n	8006fe6 <_strtod_l+0x50e>
 800700a:	4276      	negs	r6, r6
 800700c:	f016 020f 	ands.w	r2, r6, #15
 8007010:	d00a      	beq.n	8007028 <_strtod_l+0x550>
 8007012:	4b15      	ldr	r3, [pc, #84]	; (8007068 <_strtod_l+0x590>)
 8007014:	4640      	mov	r0, r8
 8007016:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800701a:	4649      	mov	r1, r9
 800701c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007020:	f7f9 fb84 	bl	800072c <__aeabi_ddiv>
 8007024:	4680      	mov	r8, r0
 8007026:	4689      	mov	r9, r1
 8007028:	1136      	asrs	r6, r6, #4
 800702a:	d0dc      	beq.n	8006fe6 <_strtod_l+0x50e>
 800702c:	2e1f      	cmp	r6, #31
 800702e:	dd23      	ble.n	8007078 <_strtod_l+0x5a0>
 8007030:	f04f 0b00 	mov.w	fp, #0
 8007034:	f8cd b010 	str.w	fp, [sp, #16]
 8007038:	f8cd b020 	str.w	fp, [sp, #32]
 800703c:	f8cd b018 	str.w	fp, [sp, #24]
 8007040:	2322      	movs	r3, #34	; 0x22
 8007042:	f04f 0800 	mov.w	r8, #0
 8007046:	f04f 0900 	mov.w	r9, #0
 800704a:	f8ca 3000 	str.w	r3, [sl]
 800704e:	e789      	b.n	8006f64 <_strtod_l+0x48c>
 8007050:	0800c0f1 	.word	0x0800c0f1
 8007054:	0800c134 	.word	0x0800c134
 8007058:	0800c0e9 	.word	0x0800c0e9
 800705c:	0800c274 	.word	0x0800c274
 8007060:	7ff00000 	.word	0x7ff00000
 8007064:	0800c588 	.word	0x0800c588
 8007068:	0800c468 	.word	0x0800c468
 800706c:	0800c440 	.word	0x0800c440
 8007070:	7ca00000 	.word	0x7ca00000
 8007074:	7fefffff 	.word	0x7fefffff
 8007078:	f016 0310 	ands.w	r3, r6, #16
 800707c:	bf18      	it	ne
 800707e:	236a      	movne	r3, #106	; 0x6a
 8007080:	4640      	mov	r0, r8
 8007082:	9305      	str	r3, [sp, #20]
 8007084:	4649      	mov	r1, r9
 8007086:	2300      	movs	r3, #0
 8007088:	4fb0      	ldr	r7, [pc, #704]	; (800734c <_strtod_l+0x874>)
 800708a:	07f2      	lsls	r2, r6, #31
 800708c:	d504      	bpl.n	8007098 <_strtod_l+0x5c0>
 800708e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007092:	f7f9 fa21 	bl	80004d8 <__aeabi_dmul>
 8007096:	2301      	movs	r3, #1
 8007098:	1076      	asrs	r6, r6, #1
 800709a:	f107 0708 	add.w	r7, r7, #8
 800709e:	d1f4      	bne.n	800708a <_strtod_l+0x5b2>
 80070a0:	b10b      	cbz	r3, 80070a6 <_strtod_l+0x5ce>
 80070a2:	4680      	mov	r8, r0
 80070a4:	4689      	mov	r9, r1
 80070a6:	9b05      	ldr	r3, [sp, #20]
 80070a8:	b1c3      	cbz	r3, 80070dc <_strtod_l+0x604>
 80070aa:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80070ae:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	4649      	mov	r1, r9
 80070b6:	dd11      	ble.n	80070dc <_strtod_l+0x604>
 80070b8:	2b1f      	cmp	r3, #31
 80070ba:	f340 8127 	ble.w	800730c <_strtod_l+0x834>
 80070be:	2b34      	cmp	r3, #52	; 0x34
 80070c0:	bfd8      	it	le
 80070c2:	f04f 33ff 	movle.w	r3, #4294967295
 80070c6:	f04f 0800 	mov.w	r8, #0
 80070ca:	bfcf      	iteee	gt
 80070cc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80070d0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80070d4:	fa03 f202 	lslle.w	r2, r3, r2
 80070d8:	ea02 0901 	andle.w	r9, r2, r1
 80070dc:	2200      	movs	r2, #0
 80070de:	2300      	movs	r3, #0
 80070e0:	4640      	mov	r0, r8
 80070e2:	4649      	mov	r1, r9
 80070e4:	f7f9 fc60 	bl	80009a8 <__aeabi_dcmpeq>
 80070e8:	2800      	cmp	r0, #0
 80070ea:	d1a1      	bne.n	8007030 <_strtod_l+0x558>
 80070ec:	9b06      	ldr	r3, [sp, #24]
 80070ee:	465a      	mov	r2, fp
 80070f0:	9300      	str	r3, [sp, #0]
 80070f2:	4650      	mov	r0, sl
 80070f4:	4623      	mov	r3, r4
 80070f6:	9908      	ldr	r1, [sp, #32]
 80070f8:	f002 f8f6 	bl	80092e8 <__s2b>
 80070fc:	9008      	str	r0, [sp, #32]
 80070fe:	2800      	cmp	r0, #0
 8007100:	f43f af21 	beq.w	8006f46 <_strtod_l+0x46e>
 8007104:	9b04      	ldr	r3, [sp, #16]
 8007106:	f04f 0b00 	mov.w	fp, #0
 800710a:	1b5d      	subs	r5, r3, r5
 800710c:	9b07      	ldr	r3, [sp, #28]
 800710e:	f8cd b010 	str.w	fp, [sp, #16]
 8007112:	2b00      	cmp	r3, #0
 8007114:	bfb4      	ite	lt
 8007116:	462b      	movlt	r3, r5
 8007118:	2300      	movge	r3, #0
 800711a:	930e      	str	r3, [sp, #56]	; 0x38
 800711c:	9b07      	ldr	r3, [sp, #28]
 800711e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007122:	9314      	str	r3, [sp, #80]	; 0x50
 8007124:	9b08      	ldr	r3, [sp, #32]
 8007126:	4650      	mov	r0, sl
 8007128:	6859      	ldr	r1, [r3, #4]
 800712a:	f002 f835 	bl	8009198 <_Balloc>
 800712e:	9006      	str	r0, [sp, #24]
 8007130:	2800      	cmp	r0, #0
 8007132:	f43f af10 	beq.w	8006f56 <_strtod_l+0x47e>
 8007136:	9b08      	ldr	r3, [sp, #32]
 8007138:	300c      	adds	r0, #12
 800713a:	691a      	ldr	r2, [r3, #16]
 800713c:	f103 010c 	add.w	r1, r3, #12
 8007140:	3202      	adds	r2, #2
 8007142:	0092      	lsls	r2, r2, #2
 8007144:	f7fe fd88 	bl	8005c58 <memcpy>
 8007148:	ab1c      	add	r3, sp, #112	; 0x70
 800714a:	9301      	str	r3, [sp, #4]
 800714c:	ab1b      	add	r3, sp, #108	; 0x6c
 800714e:	9300      	str	r3, [sp, #0]
 8007150:	4642      	mov	r2, r8
 8007152:	464b      	mov	r3, r9
 8007154:	4650      	mov	r0, sl
 8007156:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800715a:	f002 fc07 	bl	800996c <__d2b>
 800715e:	901a      	str	r0, [sp, #104]	; 0x68
 8007160:	2800      	cmp	r0, #0
 8007162:	f43f aef8 	beq.w	8006f56 <_strtod_l+0x47e>
 8007166:	2101      	movs	r1, #1
 8007168:	4650      	mov	r0, sl
 800716a:	f002 f955 	bl	8009418 <__i2b>
 800716e:	4603      	mov	r3, r0
 8007170:	9004      	str	r0, [sp, #16]
 8007172:	2800      	cmp	r0, #0
 8007174:	f43f aeef 	beq.w	8006f56 <_strtod_l+0x47e>
 8007178:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800717a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800717c:	2d00      	cmp	r5, #0
 800717e:	bfab      	itete	ge
 8007180:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8007182:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8007184:	18ee      	addge	r6, r5, r3
 8007186:	1b5c      	sublt	r4, r3, r5
 8007188:	9b05      	ldr	r3, [sp, #20]
 800718a:	bfa8      	it	ge
 800718c:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 800718e:	eba5 0503 	sub.w	r5, r5, r3
 8007192:	4415      	add	r5, r2
 8007194:	4b6e      	ldr	r3, [pc, #440]	; (8007350 <_strtod_l+0x878>)
 8007196:	f105 35ff 	add.w	r5, r5, #4294967295
 800719a:	bfb8      	it	lt
 800719c:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800719e:	429d      	cmp	r5, r3
 80071a0:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80071a4:	f280 80c4 	bge.w	8007330 <_strtod_l+0x858>
 80071a8:	1b5b      	subs	r3, r3, r5
 80071aa:	2b1f      	cmp	r3, #31
 80071ac:	f04f 0701 	mov.w	r7, #1
 80071b0:	eba2 0203 	sub.w	r2, r2, r3
 80071b4:	f300 80b1 	bgt.w	800731a <_strtod_l+0x842>
 80071b8:	2500      	movs	r5, #0
 80071ba:	fa07 f303 	lsl.w	r3, r7, r3
 80071be:	930f      	str	r3, [sp, #60]	; 0x3c
 80071c0:	18b7      	adds	r7, r6, r2
 80071c2:	9b05      	ldr	r3, [sp, #20]
 80071c4:	42be      	cmp	r6, r7
 80071c6:	4414      	add	r4, r2
 80071c8:	441c      	add	r4, r3
 80071ca:	4633      	mov	r3, r6
 80071cc:	bfa8      	it	ge
 80071ce:	463b      	movge	r3, r7
 80071d0:	42a3      	cmp	r3, r4
 80071d2:	bfa8      	it	ge
 80071d4:	4623      	movge	r3, r4
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	bfc2      	ittt	gt
 80071da:	1aff      	subgt	r7, r7, r3
 80071dc:	1ae4      	subgt	r4, r4, r3
 80071de:	1af6      	subgt	r6, r6, r3
 80071e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	dd17      	ble.n	8007216 <_strtod_l+0x73e>
 80071e6:	461a      	mov	r2, r3
 80071e8:	4650      	mov	r0, sl
 80071ea:	9904      	ldr	r1, [sp, #16]
 80071ec:	f002 f9d2 	bl	8009594 <__pow5mult>
 80071f0:	9004      	str	r0, [sp, #16]
 80071f2:	2800      	cmp	r0, #0
 80071f4:	f43f aeaf 	beq.w	8006f56 <_strtod_l+0x47e>
 80071f8:	4601      	mov	r1, r0
 80071fa:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80071fc:	4650      	mov	r0, sl
 80071fe:	f002 f921 	bl	8009444 <__multiply>
 8007202:	9009      	str	r0, [sp, #36]	; 0x24
 8007204:	2800      	cmp	r0, #0
 8007206:	f43f aea6 	beq.w	8006f56 <_strtod_l+0x47e>
 800720a:	4650      	mov	r0, sl
 800720c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800720e:	f002 f803 	bl	8009218 <_Bfree>
 8007212:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007214:	931a      	str	r3, [sp, #104]	; 0x68
 8007216:	2f00      	cmp	r7, #0
 8007218:	f300 808e 	bgt.w	8007338 <_strtod_l+0x860>
 800721c:	9b07      	ldr	r3, [sp, #28]
 800721e:	2b00      	cmp	r3, #0
 8007220:	dd08      	ble.n	8007234 <_strtod_l+0x75c>
 8007222:	4650      	mov	r0, sl
 8007224:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007226:	9906      	ldr	r1, [sp, #24]
 8007228:	f002 f9b4 	bl	8009594 <__pow5mult>
 800722c:	9006      	str	r0, [sp, #24]
 800722e:	2800      	cmp	r0, #0
 8007230:	f43f ae91 	beq.w	8006f56 <_strtod_l+0x47e>
 8007234:	2c00      	cmp	r4, #0
 8007236:	dd08      	ble.n	800724a <_strtod_l+0x772>
 8007238:	4622      	mov	r2, r4
 800723a:	4650      	mov	r0, sl
 800723c:	9906      	ldr	r1, [sp, #24]
 800723e:	f002 fa03 	bl	8009648 <__lshift>
 8007242:	9006      	str	r0, [sp, #24]
 8007244:	2800      	cmp	r0, #0
 8007246:	f43f ae86 	beq.w	8006f56 <_strtod_l+0x47e>
 800724a:	2e00      	cmp	r6, #0
 800724c:	dd08      	ble.n	8007260 <_strtod_l+0x788>
 800724e:	4632      	mov	r2, r6
 8007250:	4650      	mov	r0, sl
 8007252:	9904      	ldr	r1, [sp, #16]
 8007254:	f002 f9f8 	bl	8009648 <__lshift>
 8007258:	9004      	str	r0, [sp, #16]
 800725a:	2800      	cmp	r0, #0
 800725c:	f43f ae7b 	beq.w	8006f56 <_strtod_l+0x47e>
 8007260:	4650      	mov	r0, sl
 8007262:	9a06      	ldr	r2, [sp, #24]
 8007264:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007266:	f002 fa7b 	bl	8009760 <__mdiff>
 800726a:	4683      	mov	fp, r0
 800726c:	2800      	cmp	r0, #0
 800726e:	f43f ae72 	beq.w	8006f56 <_strtod_l+0x47e>
 8007272:	2400      	movs	r4, #0
 8007274:	68c3      	ldr	r3, [r0, #12]
 8007276:	9904      	ldr	r1, [sp, #16]
 8007278:	60c4      	str	r4, [r0, #12]
 800727a:	930b      	str	r3, [sp, #44]	; 0x2c
 800727c:	f002 fa54 	bl	8009728 <__mcmp>
 8007280:	42a0      	cmp	r0, r4
 8007282:	da6b      	bge.n	800735c <_strtod_l+0x884>
 8007284:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007286:	ea53 0308 	orrs.w	r3, r3, r8
 800728a:	f040 8091 	bne.w	80073b0 <_strtod_l+0x8d8>
 800728e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007292:	2b00      	cmp	r3, #0
 8007294:	f040 808c 	bne.w	80073b0 <_strtod_l+0x8d8>
 8007298:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800729c:	0d1b      	lsrs	r3, r3, #20
 800729e:	051b      	lsls	r3, r3, #20
 80072a0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80072a4:	f240 8084 	bls.w	80073b0 <_strtod_l+0x8d8>
 80072a8:	f8db 3014 	ldr.w	r3, [fp, #20]
 80072ac:	b91b      	cbnz	r3, 80072b6 <_strtod_l+0x7de>
 80072ae:	f8db 3010 	ldr.w	r3, [fp, #16]
 80072b2:	2b01      	cmp	r3, #1
 80072b4:	dd7c      	ble.n	80073b0 <_strtod_l+0x8d8>
 80072b6:	4659      	mov	r1, fp
 80072b8:	2201      	movs	r2, #1
 80072ba:	4650      	mov	r0, sl
 80072bc:	f002 f9c4 	bl	8009648 <__lshift>
 80072c0:	9904      	ldr	r1, [sp, #16]
 80072c2:	4683      	mov	fp, r0
 80072c4:	f002 fa30 	bl	8009728 <__mcmp>
 80072c8:	2800      	cmp	r0, #0
 80072ca:	dd71      	ble.n	80073b0 <_strtod_l+0x8d8>
 80072cc:	9905      	ldr	r1, [sp, #20]
 80072ce:	464b      	mov	r3, r9
 80072d0:	4a20      	ldr	r2, [pc, #128]	; (8007354 <_strtod_l+0x87c>)
 80072d2:	2900      	cmp	r1, #0
 80072d4:	f000 808c 	beq.w	80073f0 <_strtod_l+0x918>
 80072d8:	ea02 0109 	and.w	r1, r2, r9
 80072dc:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80072e0:	f300 8086 	bgt.w	80073f0 <_strtod_l+0x918>
 80072e4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80072e8:	f77f aeaa 	ble.w	8007040 <_strtod_l+0x568>
 80072ec:	4640      	mov	r0, r8
 80072ee:	4649      	mov	r1, r9
 80072f0:	4b19      	ldr	r3, [pc, #100]	; (8007358 <_strtod_l+0x880>)
 80072f2:	2200      	movs	r2, #0
 80072f4:	f7f9 f8f0 	bl	80004d8 <__aeabi_dmul>
 80072f8:	460b      	mov	r3, r1
 80072fa:	4303      	orrs	r3, r0
 80072fc:	bf08      	it	eq
 80072fe:	2322      	moveq	r3, #34	; 0x22
 8007300:	4680      	mov	r8, r0
 8007302:	4689      	mov	r9, r1
 8007304:	bf08      	it	eq
 8007306:	f8ca 3000 	streq.w	r3, [sl]
 800730a:	e62f      	b.n	8006f6c <_strtod_l+0x494>
 800730c:	f04f 32ff 	mov.w	r2, #4294967295
 8007310:	fa02 f303 	lsl.w	r3, r2, r3
 8007314:	ea03 0808 	and.w	r8, r3, r8
 8007318:	e6e0      	b.n	80070dc <_strtod_l+0x604>
 800731a:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800731e:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8007322:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8007326:	35e2      	adds	r5, #226	; 0xe2
 8007328:	fa07 f505 	lsl.w	r5, r7, r5
 800732c:	970f      	str	r7, [sp, #60]	; 0x3c
 800732e:	e747      	b.n	80071c0 <_strtod_l+0x6e8>
 8007330:	2301      	movs	r3, #1
 8007332:	2500      	movs	r5, #0
 8007334:	930f      	str	r3, [sp, #60]	; 0x3c
 8007336:	e743      	b.n	80071c0 <_strtod_l+0x6e8>
 8007338:	463a      	mov	r2, r7
 800733a:	4650      	mov	r0, sl
 800733c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800733e:	f002 f983 	bl	8009648 <__lshift>
 8007342:	901a      	str	r0, [sp, #104]	; 0x68
 8007344:	2800      	cmp	r0, #0
 8007346:	f47f af69 	bne.w	800721c <_strtod_l+0x744>
 800734a:	e604      	b.n	8006f56 <_strtod_l+0x47e>
 800734c:	0800c148 	.word	0x0800c148
 8007350:	fffffc02 	.word	0xfffffc02
 8007354:	7ff00000 	.word	0x7ff00000
 8007358:	39500000 	.word	0x39500000
 800735c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007360:	d165      	bne.n	800742e <_strtod_l+0x956>
 8007362:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007364:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007368:	b35a      	cbz	r2, 80073c2 <_strtod_l+0x8ea>
 800736a:	4a99      	ldr	r2, [pc, #612]	; (80075d0 <_strtod_l+0xaf8>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d12b      	bne.n	80073c8 <_strtod_l+0x8f0>
 8007370:	9b05      	ldr	r3, [sp, #20]
 8007372:	4641      	mov	r1, r8
 8007374:	b303      	cbz	r3, 80073b8 <_strtod_l+0x8e0>
 8007376:	464a      	mov	r2, r9
 8007378:	4b96      	ldr	r3, [pc, #600]	; (80075d4 <_strtod_l+0xafc>)
 800737a:	4013      	ands	r3, r2
 800737c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007380:	f04f 32ff 	mov.w	r2, #4294967295
 8007384:	d81b      	bhi.n	80073be <_strtod_l+0x8e6>
 8007386:	0d1b      	lsrs	r3, r3, #20
 8007388:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800738c:	fa02 f303 	lsl.w	r3, r2, r3
 8007390:	4299      	cmp	r1, r3
 8007392:	d119      	bne.n	80073c8 <_strtod_l+0x8f0>
 8007394:	4b90      	ldr	r3, [pc, #576]	; (80075d8 <_strtod_l+0xb00>)
 8007396:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007398:	429a      	cmp	r2, r3
 800739a:	d102      	bne.n	80073a2 <_strtod_l+0x8ca>
 800739c:	3101      	adds	r1, #1
 800739e:	f43f adda 	beq.w	8006f56 <_strtod_l+0x47e>
 80073a2:	f04f 0800 	mov.w	r8, #0
 80073a6:	4b8b      	ldr	r3, [pc, #556]	; (80075d4 <_strtod_l+0xafc>)
 80073a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80073aa:	401a      	ands	r2, r3
 80073ac:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 80073b0:	9b05      	ldr	r3, [sp, #20]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d19a      	bne.n	80072ec <_strtod_l+0x814>
 80073b6:	e5d9      	b.n	8006f6c <_strtod_l+0x494>
 80073b8:	f04f 33ff 	mov.w	r3, #4294967295
 80073bc:	e7e8      	b.n	8007390 <_strtod_l+0x8b8>
 80073be:	4613      	mov	r3, r2
 80073c0:	e7e6      	b.n	8007390 <_strtod_l+0x8b8>
 80073c2:	ea53 0308 	orrs.w	r3, r3, r8
 80073c6:	d081      	beq.n	80072cc <_strtod_l+0x7f4>
 80073c8:	b1e5      	cbz	r5, 8007404 <_strtod_l+0x92c>
 80073ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073cc:	421d      	tst	r5, r3
 80073ce:	d0ef      	beq.n	80073b0 <_strtod_l+0x8d8>
 80073d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073d2:	4640      	mov	r0, r8
 80073d4:	4649      	mov	r1, r9
 80073d6:	9a05      	ldr	r2, [sp, #20]
 80073d8:	b1c3      	cbz	r3, 800740c <_strtod_l+0x934>
 80073da:	f7ff fb5b 	bl	8006a94 <sulp>
 80073de:	4602      	mov	r2, r0
 80073e0:	460b      	mov	r3, r1
 80073e2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80073e6:	f7f8 fec1 	bl	800016c <__adddf3>
 80073ea:	4680      	mov	r8, r0
 80073ec:	4689      	mov	r9, r1
 80073ee:	e7df      	b.n	80073b0 <_strtod_l+0x8d8>
 80073f0:	4013      	ands	r3, r2
 80073f2:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80073f6:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80073fa:	f04f 38ff 	mov.w	r8, #4294967295
 80073fe:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007402:	e7d5      	b.n	80073b0 <_strtod_l+0x8d8>
 8007404:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007406:	ea13 0f08 	tst.w	r3, r8
 800740a:	e7e0      	b.n	80073ce <_strtod_l+0x8f6>
 800740c:	f7ff fb42 	bl	8006a94 <sulp>
 8007410:	4602      	mov	r2, r0
 8007412:	460b      	mov	r3, r1
 8007414:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007418:	f7f8 fea6 	bl	8000168 <__aeabi_dsub>
 800741c:	2200      	movs	r2, #0
 800741e:	2300      	movs	r3, #0
 8007420:	4680      	mov	r8, r0
 8007422:	4689      	mov	r9, r1
 8007424:	f7f9 fac0 	bl	80009a8 <__aeabi_dcmpeq>
 8007428:	2800      	cmp	r0, #0
 800742a:	d0c1      	beq.n	80073b0 <_strtod_l+0x8d8>
 800742c:	e608      	b.n	8007040 <_strtod_l+0x568>
 800742e:	4658      	mov	r0, fp
 8007430:	9904      	ldr	r1, [sp, #16]
 8007432:	f002 faf7 	bl	8009a24 <__ratio>
 8007436:	2200      	movs	r2, #0
 8007438:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800743c:	4606      	mov	r6, r0
 800743e:	460f      	mov	r7, r1
 8007440:	f7f9 fac6 	bl	80009d0 <__aeabi_dcmple>
 8007444:	2800      	cmp	r0, #0
 8007446:	d070      	beq.n	800752a <_strtod_l+0xa52>
 8007448:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800744a:	2b00      	cmp	r3, #0
 800744c:	d042      	beq.n	80074d4 <_strtod_l+0x9fc>
 800744e:	2600      	movs	r6, #0
 8007450:	4f62      	ldr	r7, [pc, #392]	; (80075dc <_strtod_l+0xb04>)
 8007452:	4d62      	ldr	r5, [pc, #392]	; (80075dc <_strtod_l+0xb04>)
 8007454:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007456:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800745a:	0d1b      	lsrs	r3, r3, #20
 800745c:	051b      	lsls	r3, r3, #20
 800745e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007460:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007462:	4b5f      	ldr	r3, [pc, #380]	; (80075e0 <_strtod_l+0xb08>)
 8007464:	429a      	cmp	r2, r3
 8007466:	f040 80c3 	bne.w	80075f0 <_strtod_l+0xb18>
 800746a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800746c:	4640      	mov	r0, r8
 800746e:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8007472:	4649      	mov	r1, r9
 8007474:	f002 fa00 	bl	8009878 <__ulp>
 8007478:	4602      	mov	r2, r0
 800747a:	460b      	mov	r3, r1
 800747c:	4630      	mov	r0, r6
 800747e:	4639      	mov	r1, r7
 8007480:	f7f9 f82a 	bl	80004d8 <__aeabi_dmul>
 8007484:	4642      	mov	r2, r8
 8007486:	464b      	mov	r3, r9
 8007488:	f7f8 fe70 	bl	800016c <__adddf3>
 800748c:	460b      	mov	r3, r1
 800748e:	4951      	ldr	r1, [pc, #324]	; (80075d4 <_strtod_l+0xafc>)
 8007490:	4a54      	ldr	r2, [pc, #336]	; (80075e4 <_strtod_l+0xb0c>)
 8007492:	4019      	ands	r1, r3
 8007494:	4291      	cmp	r1, r2
 8007496:	4680      	mov	r8, r0
 8007498:	d95d      	bls.n	8007556 <_strtod_l+0xa7e>
 800749a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800749c:	4b4e      	ldr	r3, [pc, #312]	; (80075d8 <_strtod_l+0xb00>)
 800749e:	429a      	cmp	r2, r3
 80074a0:	d103      	bne.n	80074aa <_strtod_l+0x9d2>
 80074a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80074a4:	3301      	adds	r3, #1
 80074a6:	f43f ad56 	beq.w	8006f56 <_strtod_l+0x47e>
 80074aa:	f04f 38ff 	mov.w	r8, #4294967295
 80074ae:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80075d8 <_strtod_l+0xb00>
 80074b2:	4650      	mov	r0, sl
 80074b4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80074b6:	f001 feaf 	bl	8009218 <_Bfree>
 80074ba:	4650      	mov	r0, sl
 80074bc:	9906      	ldr	r1, [sp, #24]
 80074be:	f001 feab 	bl	8009218 <_Bfree>
 80074c2:	4650      	mov	r0, sl
 80074c4:	9904      	ldr	r1, [sp, #16]
 80074c6:	f001 fea7 	bl	8009218 <_Bfree>
 80074ca:	4659      	mov	r1, fp
 80074cc:	4650      	mov	r0, sl
 80074ce:	f001 fea3 	bl	8009218 <_Bfree>
 80074d2:	e627      	b.n	8007124 <_strtod_l+0x64c>
 80074d4:	f1b8 0f00 	cmp.w	r8, #0
 80074d8:	d119      	bne.n	800750e <_strtod_l+0xa36>
 80074da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80074e0:	b9e3      	cbnz	r3, 800751c <_strtod_l+0xa44>
 80074e2:	2200      	movs	r2, #0
 80074e4:	4630      	mov	r0, r6
 80074e6:	4639      	mov	r1, r7
 80074e8:	4b3c      	ldr	r3, [pc, #240]	; (80075dc <_strtod_l+0xb04>)
 80074ea:	f7f9 fa67 	bl	80009bc <__aeabi_dcmplt>
 80074ee:	b9c8      	cbnz	r0, 8007524 <_strtod_l+0xa4c>
 80074f0:	2200      	movs	r2, #0
 80074f2:	4630      	mov	r0, r6
 80074f4:	4639      	mov	r1, r7
 80074f6:	4b3c      	ldr	r3, [pc, #240]	; (80075e8 <_strtod_l+0xb10>)
 80074f8:	f7f8 ffee 	bl	80004d8 <__aeabi_dmul>
 80074fc:	4604      	mov	r4, r0
 80074fe:	460d      	mov	r5, r1
 8007500:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8007504:	9416      	str	r4, [sp, #88]	; 0x58
 8007506:	9317      	str	r3, [sp, #92]	; 0x5c
 8007508:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800750c:	e7a2      	b.n	8007454 <_strtod_l+0x97c>
 800750e:	f1b8 0f01 	cmp.w	r8, #1
 8007512:	d103      	bne.n	800751c <_strtod_l+0xa44>
 8007514:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007516:	2b00      	cmp	r3, #0
 8007518:	f43f ad92 	beq.w	8007040 <_strtod_l+0x568>
 800751c:	2600      	movs	r6, #0
 800751e:	2400      	movs	r4, #0
 8007520:	4f32      	ldr	r7, [pc, #200]	; (80075ec <_strtod_l+0xb14>)
 8007522:	e796      	b.n	8007452 <_strtod_l+0x97a>
 8007524:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8007526:	4d30      	ldr	r5, [pc, #192]	; (80075e8 <_strtod_l+0xb10>)
 8007528:	e7ea      	b.n	8007500 <_strtod_l+0xa28>
 800752a:	4b2f      	ldr	r3, [pc, #188]	; (80075e8 <_strtod_l+0xb10>)
 800752c:	2200      	movs	r2, #0
 800752e:	4630      	mov	r0, r6
 8007530:	4639      	mov	r1, r7
 8007532:	f7f8 ffd1 	bl	80004d8 <__aeabi_dmul>
 8007536:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007538:	4604      	mov	r4, r0
 800753a:	460d      	mov	r5, r1
 800753c:	b933      	cbnz	r3, 800754c <_strtod_l+0xa74>
 800753e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007542:	9010      	str	r0, [sp, #64]	; 0x40
 8007544:	9311      	str	r3, [sp, #68]	; 0x44
 8007546:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800754a:	e783      	b.n	8007454 <_strtod_l+0x97c>
 800754c:	4602      	mov	r2, r0
 800754e:	460b      	mov	r3, r1
 8007550:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007554:	e7f7      	b.n	8007546 <_strtod_l+0xa6e>
 8007556:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800755a:	9b05      	ldr	r3, [sp, #20]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d1a8      	bne.n	80074b2 <_strtod_l+0x9da>
 8007560:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007564:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007566:	0d1b      	lsrs	r3, r3, #20
 8007568:	051b      	lsls	r3, r3, #20
 800756a:	429a      	cmp	r2, r3
 800756c:	d1a1      	bne.n	80074b2 <_strtod_l+0x9da>
 800756e:	4620      	mov	r0, r4
 8007570:	4629      	mov	r1, r5
 8007572:	f7f9 fde3 	bl	800113c <__aeabi_d2lz>
 8007576:	f7f8 ff81 	bl	800047c <__aeabi_l2d>
 800757a:	4602      	mov	r2, r0
 800757c:	460b      	mov	r3, r1
 800757e:	4620      	mov	r0, r4
 8007580:	4629      	mov	r1, r5
 8007582:	f7f8 fdf1 	bl	8000168 <__aeabi_dsub>
 8007586:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007588:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800758c:	ea43 0308 	orr.w	r3, r3, r8
 8007590:	4313      	orrs	r3, r2
 8007592:	4604      	mov	r4, r0
 8007594:	460d      	mov	r5, r1
 8007596:	d066      	beq.n	8007666 <_strtod_l+0xb8e>
 8007598:	a309      	add	r3, pc, #36	; (adr r3, 80075c0 <_strtod_l+0xae8>)
 800759a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800759e:	f7f9 fa0d 	bl	80009bc <__aeabi_dcmplt>
 80075a2:	2800      	cmp	r0, #0
 80075a4:	f47f ace2 	bne.w	8006f6c <_strtod_l+0x494>
 80075a8:	a307      	add	r3, pc, #28	; (adr r3, 80075c8 <_strtod_l+0xaf0>)
 80075aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ae:	4620      	mov	r0, r4
 80075b0:	4629      	mov	r1, r5
 80075b2:	f7f9 fa21 	bl	80009f8 <__aeabi_dcmpgt>
 80075b6:	2800      	cmp	r0, #0
 80075b8:	f43f af7b 	beq.w	80074b2 <_strtod_l+0x9da>
 80075bc:	e4d6      	b.n	8006f6c <_strtod_l+0x494>
 80075be:	bf00      	nop
 80075c0:	94a03595 	.word	0x94a03595
 80075c4:	3fdfffff 	.word	0x3fdfffff
 80075c8:	35afe535 	.word	0x35afe535
 80075cc:	3fe00000 	.word	0x3fe00000
 80075d0:	000fffff 	.word	0x000fffff
 80075d4:	7ff00000 	.word	0x7ff00000
 80075d8:	7fefffff 	.word	0x7fefffff
 80075dc:	3ff00000 	.word	0x3ff00000
 80075e0:	7fe00000 	.word	0x7fe00000
 80075e4:	7c9fffff 	.word	0x7c9fffff
 80075e8:	3fe00000 	.word	0x3fe00000
 80075ec:	bff00000 	.word	0xbff00000
 80075f0:	9b05      	ldr	r3, [sp, #20]
 80075f2:	b313      	cbz	r3, 800763a <_strtod_l+0xb62>
 80075f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80075f6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80075fa:	d81e      	bhi.n	800763a <_strtod_l+0xb62>
 80075fc:	a326      	add	r3, pc, #152	; (adr r3, 8007698 <_strtod_l+0xbc0>)
 80075fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007602:	4620      	mov	r0, r4
 8007604:	4629      	mov	r1, r5
 8007606:	f7f9 f9e3 	bl	80009d0 <__aeabi_dcmple>
 800760a:	b190      	cbz	r0, 8007632 <_strtod_l+0xb5a>
 800760c:	4629      	mov	r1, r5
 800760e:	4620      	mov	r0, r4
 8007610:	f7f9 fa3a 	bl	8000a88 <__aeabi_d2uiz>
 8007614:	2801      	cmp	r0, #1
 8007616:	bf38      	it	cc
 8007618:	2001      	movcc	r0, #1
 800761a:	f7f8 fee3 	bl	80003e4 <__aeabi_ui2d>
 800761e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007620:	4604      	mov	r4, r0
 8007622:	460d      	mov	r5, r1
 8007624:	b9d3      	cbnz	r3, 800765c <_strtod_l+0xb84>
 8007626:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800762a:	9012      	str	r0, [sp, #72]	; 0x48
 800762c:	9313      	str	r3, [sp, #76]	; 0x4c
 800762e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8007632:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007634:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8007638:	1a9f      	subs	r7, r3, r2
 800763a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800763e:	f002 f91b 	bl	8009878 <__ulp>
 8007642:	4602      	mov	r2, r0
 8007644:	460b      	mov	r3, r1
 8007646:	4630      	mov	r0, r6
 8007648:	4639      	mov	r1, r7
 800764a:	f7f8 ff45 	bl	80004d8 <__aeabi_dmul>
 800764e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007652:	f7f8 fd8b 	bl	800016c <__adddf3>
 8007656:	4680      	mov	r8, r0
 8007658:	4689      	mov	r9, r1
 800765a:	e77e      	b.n	800755a <_strtod_l+0xa82>
 800765c:	4602      	mov	r2, r0
 800765e:	460b      	mov	r3, r1
 8007660:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8007664:	e7e3      	b.n	800762e <_strtod_l+0xb56>
 8007666:	a30e      	add	r3, pc, #56	; (adr r3, 80076a0 <_strtod_l+0xbc8>)
 8007668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800766c:	f7f9 f9a6 	bl	80009bc <__aeabi_dcmplt>
 8007670:	e7a1      	b.n	80075b6 <_strtod_l+0xade>
 8007672:	2300      	movs	r3, #0
 8007674:	930a      	str	r3, [sp, #40]	; 0x28
 8007676:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007678:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800767a:	6013      	str	r3, [r2, #0]
 800767c:	f7ff ba71 	b.w	8006b62 <_strtod_l+0x8a>
 8007680:	2a65      	cmp	r2, #101	; 0x65
 8007682:	f43f ab63 	beq.w	8006d4c <_strtod_l+0x274>
 8007686:	2a45      	cmp	r2, #69	; 0x45
 8007688:	f43f ab60 	beq.w	8006d4c <_strtod_l+0x274>
 800768c:	2301      	movs	r3, #1
 800768e:	f7ff bb95 	b.w	8006dbc <_strtod_l+0x2e4>
 8007692:	bf00      	nop
 8007694:	f3af 8000 	nop.w
 8007698:	ffc00000 	.word	0xffc00000
 800769c:	41dfffff 	.word	0x41dfffff
 80076a0:	94a03595 	.word	0x94a03595
 80076a4:	3fcfffff 	.word	0x3fcfffff

080076a8 <_strtod_r>:
 80076a8:	4b01      	ldr	r3, [pc, #4]	; (80076b0 <_strtod_r+0x8>)
 80076aa:	f7ff ba15 	b.w	8006ad8 <_strtod_l>
 80076ae:	bf00      	nop
 80076b0:	20000074 	.word	0x20000074

080076b4 <strtod>:
 80076b4:	460a      	mov	r2, r1
 80076b6:	4601      	mov	r1, r0
 80076b8:	4802      	ldr	r0, [pc, #8]	; (80076c4 <strtod+0x10>)
 80076ba:	4b03      	ldr	r3, [pc, #12]	; (80076c8 <strtod+0x14>)
 80076bc:	6800      	ldr	r0, [r0, #0]
 80076be:	f7ff ba0b 	b.w	8006ad8 <_strtod_l>
 80076c2:	bf00      	nop
 80076c4:	2000000c 	.word	0x2000000c
 80076c8:	20000074 	.word	0x20000074

080076cc <_strtol_l.constprop.0>:
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076d2:	4680      	mov	r8, r0
 80076d4:	d001      	beq.n	80076da <_strtol_l.constprop.0+0xe>
 80076d6:	2b24      	cmp	r3, #36	; 0x24
 80076d8:	d906      	bls.n	80076e8 <_strtol_l.constprop.0+0x1c>
 80076da:	f7fe fa93 	bl	8005c04 <__errno>
 80076de:	2316      	movs	r3, #22
 80076e0:	6003      	str	r3, [r0, #0]
 80076e2:	2000      	movs	r0, #0
 80076e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076e8:	460d      	mov	r5, r1
 80076ea:	4f35      	ldr	r7, [pc, #212]	; (80077c0 <_strtol_l.constprop.0+0xf4>)
 80076ec:	4628      	mov	r0, r5
 80076ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 80076f2:	5de6      	ldrb	r6, [r4, r7]
 80076f4:	f016 0608 	ands.w	r6, r6, #8
 80076f8:	d1f8      	bne.n	80076ec <_strtol_l.constprop.0+0x20>
 80076fa:	2c2d      	cmp	r4, #45	; 0x2d
 80076fc:	d12f      	bne.n	800775e <_strtol_l.constprop.0+0x92>
 80076fe:	2601      	movs	r6, #1
 8007700:	782c      	ldrb	r4, [r5, #0]
 8007702:	1c85      	adds	r5, r0, #2
 8007704:	2b00      	cmp	r3, #0
 8007706:	d057      	beq.n	80077b8 <_strtol_l.constprop.0+0xec>
 8007708:	2b10      	cmp	r3, #16
 800770a:	d109      	bne.n	8007720 <_strtol_l.constprop.0+0x54>
 800770c:	2c30      	cmp	r4, #48	; 0x30
 800770e:	d107      	bne.n	8007720 <_strtol_l.constprop.0+0x54>
 8007710:	7828      	ldrb	r0, [r5, #0]
 8007712:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8007716:	2858      	cmp	r0, #88	; 0x58
 8007718:	d149      	bne.n	80077ae <_strtol_l.constprop.0+0xe2>
 800771a:	2310      	movs	r3, #16
 800771c:	786c      	ldrb	r4, [r5, #1]
 800771e:	3502      	adds	r5, #2
 8007720:	2700      	movs	r7, #0
 8007722:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8007726:	f10e 3eff 	add.w	lr, lr, #4294967295
 800772a:	fbbe f9f3 	udiv	r9, lr, r3
 800772e:	4638      	mov	r0, r7
 8007730:	fb03 ea19 	mls	sl, r3, r9, lr
 8007734:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007738:	f1bc 0f09 	cmp.w	ip, #9
 800773c:	d814      	bhi.n	8007768 <_strtol_l.constprop.0+0x9c>
 800773e:	4664      	mov	r4, ip
 8007740:	42a3      	cmp	r3, r4
 8007742:	dd22      	ble.n	800778a <_strtol_l.constprop.0+0xbe>
 8007744:	2f00      	cmp	r7, #0
 8007746:	db1d      	blt.n	8007784 <_strtol_l.constprop.0+0xb8>
 8007748:	4581      	cmp	r9, r0
 800774a:	d31b      	bcc.n	8007784 <_strtol_l.constprop.0+0xb8>
 800774c:	d101      	bne.n	8007752 <_strtol_l.constprop.0+0x86>
 800774e:	45a2      	cmp	sl, r4
 8007750:	db18      	blt.n	8007784 <_strtol_l.constprop.0+0xb8>
 8007752:	2701      	movs	r7, #1
 8007754:	fb00 4003 	mla	r0, r0, r3, r4
 8007758:	f815 4b01 	ldrb.w	r4, [r5], #1
 800775c:	e7ea      	b.n	8007734 <_strtol_l.constprop.0+0x68>
 800775e:	2c2b      	cmp	r4, #43	; 0x2b
 8007760:	bf04      	itt	eq
 8007762:	782c      	ldrbeq	r4, [r5, #0]
 8007764:	1c85      	addeq	r5, r0, #2
 8007766:	e7cd      	b.n	8007704 <_strtol_l.constprop.0+0x38>
 8007768:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800776c:	f1bc 0f19 	cmp.w	ip, #25
 8007770:	d801      	bhi.n	8007776 <_strtol_l.constprop.0+0xaa>
 8007772:	3c37      	subs	r4, #55	; 0x37
 8007774:	e7e4      	b.n	8007740 <_strtol_l.constprop.0+0x74>
 8007776:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800777a:	f1bc 0f19 	cmp.w	ip, #25
 800777e:	d804      	bhi.n	800778a <_strtol_l.constprop.0+0xbe>
 8007780:	3c57      	subs	r4, #87	; 0x57
 8007782:	e7dd      	b.n	8007740 <_strtol_l.constprop.0+0x74>
 8007784:	f04f 37ff 	mov.w	r7, #4294967295
 8007788:	e7e6      	b.n	8007758 <_strtol_l.constprop.0+0x8c>
 800778a:	2f00      	cmp	r7, #0
 800778c:	da07      	bge.n	800779e <_strtol_l.constprop.0+0xd2>
 800778e:	2322      	movs	r3, #34	; 0x22
 8007790:	4670      	mov	r0, lr
 8007792:	f8c8 3000 	str.w	r3, [r8]
 8007796:	2a00      	cmp	r2, #0
 8007798:	d0a4      	beq.n	80076e4 <_strtol_l.constprop.0+0x18>
 800779a:	1e69      	subs	r1, r5, #1
 800779c:	e005      	b.n	80077aa <_strtol_l.constprop.0+0xde>
 800779e:	b106      	cbz	r6, 80077a2 <_strtol_l.constprop.0+0xd6>
 80077a0:	4240      	negs	r0, r0
 80077a2:	2a00      	cmp	r2, #0
 80077a4:	d09e      	beq.n	80076e4 <_strtol_l.constprop.0+0x18>
 80077a6:	2f00      	cmp	r7, #0
 80077a8:	d1f7      	bne.n	800779a <_strtol_l.constprop.0+0xce>
 80077aa:	6011      	str	r1, [r2, #0]
 80077ac:	e79a      	b.n	80076e4 <_strtol_l.constprop.0+0x18>
 80077ae:	2430      	movs	r4, #48	; 0x30
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d1b5      	bne.n	8007720 <_strtol_l.constprop.0+0x54>
 80077b4:	2308      	movs	r3, #8
 80077b6:	e7b3      	b.n	8007720 <_strtol_l.constprop.0+0x54>
 80077b8:	2c30      	cmp	r4, #48	; 0x30
 80077ba:	d0a9      	beq.n	8007710 <_strtol_l.constprop.0+0x44>
 80077bc:	230a      	movs	r3, #10
 80077be:	e7af      	b.n	8007720 <_strtol_l.constprop.0+0x54>
 80077c0:	0800c171 	.word	0x0800c171

080077c4 <_strtol_r>:
 80077c4:	f7ff bf82 	b.w	80076cc <_strtol_l.constprop.0>

080077c8 <__swbuf_r>:
 80077c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077ca:	460e      	mov	r6, r1
 80077cc:	4614      	mov	r4, r2
 80077ce:	4605      	mov	r5, r0
 80077d0:	b118      	cbz	r0, 80077da <__swbuf_r+0x12>
 80077d2:	6983      	ldr	r3, [r0, #24]
 80077d4:	b90b      	cbnz	r3, 80077da <__swbuf_r+0x12>
 80077d6:	f001 f847 	bl	8008868 <__sinit>
 80077da:	4b21      	ldr	r3, [pc, #132]	; (8007860 <__swbuf_r+0x98>)
 80077dc:	429c      	cmp	r4, r3
 80077de:	d12b      	bne.n	8007838 <__swbuf_r+0x70>
 80077e0:	686c      	ldr	r4, [r5, #4]
 80077e2:	69a3      	ldr	r3, [r4, #24]
 80077e4:	60a3      	str	r3, [r4, #8]
 80077e6:	89a3      	ldrh	r3, [r4, #12]
 80077e8:	071a      	lsls	r2, r3, #28
 80077ea:	d52f      	bpl.n	800784c <__swbuf_r+0x84>
 80077ec:	6923      	ldr	r3, [r4, #16]
 80077ee:	b36b      	cbz	r3, 800784c <__swbuf_r+0x84>
 80077f0:	6923      	ldr	r3, [r4, #16]
 80077f2:	6820      	ldr	r0, [r4, #0]
 80077f4:	b2f6      	uxtb	r6, r6
 80077f6:	1ac0      	subs	r0, r0, r3
 80077f8:	6963      	ldr	r3, [r4, #20]
 80077fa:	4637      	mov	r7, r6
 80077fc:	4283      	cmp	r3, r0
 80077fe:	dc04      	bgt.n	800780a <__swbuf_r+0x42>
 8007800:	4621      	mov	r1, r4
 8007802:	4628      	mov	r0, r5
 8007804:	f000 ff9c 	bl	8008740 <_fflush_r>
 8007808:	bb30      	cbnz	r0, 8007858 <__swbuf_r+0x90>
 800780a:	68a3      	ldr	r3, [r4, #8]
 800780c:	3001      	adds	r0, #1
 800780e:	3b01      	subs	r3, #1
 8007810:	60a3      	str	r3, [r4, #8]
 8007812:	6823      	ldr	r3, [r4, #0]
 8007814:	1c5a      	adds	r2, r3, #1
 8007816:	6022      	str	r2, [r4, #0]
 8007818:	701e      	strb	r6, [r3, #0]
 800781a:	6963      	ldr	r3, [r4, #20]
 800781c:	4283      	cmp	r3, r0
 800781e:	d004      	beq.n	800782a <__swbuf_r+0x62>
 8007820:	89a3      	ldrh	r3, [r4, #12]
 8007822:	07db      	lsls	r3, r3, #31
 8007824:	d506      	bpl.n	8007834 <__swbuf_r+0x6c>
 8007826:	2e0a      	cmp	r6, #10
 8007828:	d104      	bne.n	8007834 <__swbuf_r+0x6c>
 800782a:	4621      	mov	r1, r4
 800782c:	4628      	mov	r0, r5
 800782e:	f000 ff87 	bl	8008740 <_fflush_r>
 8007832:	b988      	cbnz	r0, 8007858 <__swbuf_r+0x90>
 8007834:	4638      	mov	r0, r7
 8007836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007838:	4b0a      	ldr	r3, [pc, #40]	; (8007864 <__swbuf_r+0x9c>)
 800783a:	429c      	cmp	r4, r3
 800783c:	d101      	bne.n	8007842 <__swbuf_r+0x7a>
 800783e:	68ac      	ldr	r4, [r5, #8]
 8007840:	e7cf      	b.n	80077e2 <__swbuf_r+0x1a>
 8007842:	4b09      	ldr	r3, [pc, #36]	; (8007868 <__swbuf_r+0xa0>)
 8007844:	429c      	cmp	r4, r3
 8007846:	bf08      	it	eq
 8007848:	68ec      	ldreq	r4, [r5, #12]
 800784a:	e7ca      	b.n	80077e2 <__swbuf_r+0x1a>
 800784c:	4621      	mov	r1, r4
 800784e:	4628      	mov	r0, r5
 8007850:	f000 f80c 	bl	800786c <__swsetup_r>
 8007854:	2800      	cmp	r0, #0
 8007856:	d0cb      	beq.n	80077f0 <__swbuf_r+0x28>
 8007858:	f04f 37ff 	mov.w	r7, #4294967295
 800785c:	e7ea      	b.n	8007834 <__swbuf_r+0x6c>
 800785e:	bf00      	nop
 8007860:	0800c324 	.word	0x0800c324
 8007864:	0800c344 	.word	0x0800c344
 8007868:	0800c304 	.word	0x0800c304

0800786c <__swsetup_r>:
 800786c:	4b32      	ldr	r3, [pc, #200]	; (8007938 <__swsetup_r+0xcc>)
 800786e:	b570      	push	{r4, r5, r6, lr}
 8007870:	681d      	ldr	r5, [r3, #0]
 8007872:	4606      	mov	r6, r0
 8007874:	460c      	mov	r4, r1
 8007876:	b125      	cbz	r5, 8007882 <__swsetup_r+0x16>
 8007878:	69ab      	ldr	r3, [r5, #24]
 800787a:	b913      	cbnz	r3, 8007882 <__swsetup_r+0x16>
 800787c:	4628      	mov	r0, r5
 800787e:	f000 fff3 	bl	8008868 <__sinit>
 8007882:	4b2e      	ldr	r3, [pc, #184]	; (800793c <__swsetup_r+0xd0>)
 8007884:	429c      	cmp	r4, r3
 8007886:	d10f      	bne.n	80078a8 <__swsetup_r+0x3c>
 8007888:	686c      	ldr	r4, [r5, #4]
 800788a:	89a3      	ldrh	r3, [r4, #12]
 800788c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007890:	0719      	lsls	r1, r3, #28
 8007892:	d42c      	bmi.n	80078ee <__swsetup_r+0x82>
 8007894:	06dd      	lsls	r5, r3, #27
 8007896:	d411      	bmi.n	80078bc <__swsetup_r+0x50>
 8007898:	2309      	movs	r3, #9
 800789a:	6033      	str	r3, [r6, #0]
 800789c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80078a0:	f04f 30ff 	mov.w	r0, #4294967295
 80078a4:	81a3      	strh	r3, [r4, #12]
 80078a6:	e03e      	b.n	8007926 <__swsetup_r+0xba>
 80078a8:	4b25      	ldr	r3, [pc, #148]	; (8007940 <__swsetup_r+0xd4>)
 80078aa:	429c      	cmp	r4, r3
 80078ac:	d101      	bne.n	80078b2 <__swsetup_r+0x46>
 80078ae:	68ac      	ldr	r4, [r5, #8]
 80078b0:	e7eb      	b.n	800788a <__swsetup_r+0x1e>
 80078b2:	4b24      	ldr	r3, [pc, #144]	; (8007944 <__swsetup_r+0xd8>)
 80078b4:	429c      	cmp	r4, r3
 80078b6:	bf08      	it	eq
 80078b8:	68ec      	ldreq	r4, [r5, #12]
 80078ba:	e7e6      	b.n	800788a <__swsetup_r+0x1e>
 80078bc:	0758      	lsls	r0, r3, #29
 80078be:	d512      	bpl.n	80078e6 <__swsetup_r+0x7a>
 80078c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80078c2:	b141      	cbz	r1, 80078d6 <__swsetup_r+0x6a>
 80078c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80078c8:	4299      	cmp	r1, r3
 80078ca:	d002      	beq.n	80078d2 <__swsetup_r+0x66>
 80078cc:	4630      	mov	r0, r6
 80078ce:	f002 f92f 	bl	8009b30 <_free_r>
 80078d2:	2300      	movs	r3, #0
 80078d4:	6363      	str	r3, [r4, #52]	; 0x34
 80078d6:	89a3      	ldrh	r3, [r4, #12]
 80078d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80078dc:	81a3      	strh	r3, [r4, #12]
 80078de:	2300      	movs	r3, #0
 80078e0:	6063      	str	r3, [r4, #4]
 80078e2:	6923      	ldr	r3, [r4, #16]
 80078e4:	6023      	str	r3, [r4, #0]
 80078e6:	89a3      	ldrh	r3, [r4, #12]
 80078e8:	f043 0308 	orr.w	r3, r3, #8
 80078ec:	81a3      	strh	r3, [r4, #12]
 80078ee:	6923      	ldr	r3, [r4, #16]
 80078f0:	b94b      	cbnz	r3, 8007906 <__swsetup_r+0x9a>
 80078f2:	89a3      	ldrh	r3, [r4, #12]
 80078f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80078f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078fc:	d003      	beq.n	8007906 <__swsetup_r+0x9a>
 80078fe:	4621      	mov	r1, r4
 8007900:	4630      	mov	r0, r6
 8007902:	f001 fbe1 	bl	80090c8 <__smakebuf_r>
 8007906:	89a0      	ldrh	r0, [r4, #12]
 8007908:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800790c:	f010 0301 	ands.w	r3, r0, #1
 8007910:	d00a      	beq.n	8007928 <__swsetup_r+0xbc>
 8007912:	2300      	movs	r3, #0
 8007914:	60a3      	str	r3, [r4, #8]
 8007916:	6963      	ldr	r3, [r4, #20]
 8007918:	425b      	negs	r3, r3
 800791a:	61a3      	str	r3, [r4, #24]
 800791c:	6923      	ldr	r3, [r4, #16]
 800791e:	b943      	cbnz	r3, 8007932 <__swsetup_r+0xc6>
 8007920:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007924:	d1ba      	bne.n	800789c <__swsetup_r+0x30>
 8007926:	bd70      	pop	{r4, r5, r6, pc}
 8007928:	0781      	lsls	r1, r0, #30
 800792a:	bf58      	it	pl
 800792c:	6963      	ldrpl	r3, [r4, #20]
 800792e:	60a3      	str	r3, [r4, #8]
 8007930:	e7f4      	b.n	800791c <__swsetup_r+0xb0>
 8007932:	2000      	movs	r0, #0
 8007934:	e7f7      	b.n	8007926 <__swsetup_r+0xba>
 8007936:	bf00      	nop
 8007938:	2000000c 	.word	0x2000000c
 800793c:	0800c324 	.word	0x0800c324
 8007940:	0800c344 	.word	0x0800c344
 8007944:	0800c304 	.word	0x0800c304

08007948 <quorem>:
 8007948:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800794c:	6903      	ldr	r3, [r0, #16]
 800794e:	690c      	ldr	r4, [r1, #16]
 8007950:	4607      	mov	r7, r0
 8007952:	42a3      	cmp	r3, r4
 8007954:	f2c0 8082 	blt.w	8007a5c <quorem+0x114>
 8007958:	3c01      	subs	r4, #1
 800795a:	f100 0514 	add.w	r5, r0, #20
 800795e:	f101 0814 	add.w	r8, r1, #20
 8007962:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007966:	9301      	str	r3, [sp, #4]
 8007968:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800796c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007970:	3301      	adds	r3, #1
 8007972:	429a      	cmp	r2, r3
 8007974:	fbb2 f6f3 	udiv	r6, r2, r3
 8007978:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800797c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007980:	d331      	bcc.n	80079e6 <quorem+0x9e>
 8007982:	f04f 0e00 	mov.w	lr, #0
 8007986:	4640      	mov	r0, r8
 8007988:	46ac      	mov	ip, r5
 800798a:	46f2      	mov	sl, lr
 800798c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007990:	b293      	uxth	r3, r2
 8007992:	fb06 e303 	mla	r3, r6, r3, lr
 8007996:	0c12      	lsrs	r2, r2, #16
 8007998:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800799c:	b29b      	uxth	r3, r3
 800799e:	fb06 e202 	mla	r2, r6, r2, lr
 80079a2:	ebaa 0303 	sub.w	r3, sl, r3
 80079a6:	f8dc a000 	ldr.w	sl, [ip]
 80079aa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80079ae:	fa1f fa8a 	uxth.w	sl, sl
 80079b2:	4453      	add	r3, sl
 80079b4:	f8dc a000 	ldr.w	sl, [ip]
 80079b8:	b292      	uxth	r2, r2
 80079ba:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80079be:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80079c2:	b29b      	uxth	r3, r3
 80079c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80079c8:	4581      	cmp	r9, r0
 80079ca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80079ce:	f84c 3b04 	str.w	r3, [ip], #4
 80079d2:	d2db      	bcs.n	800798c <quorem+0x44>
 80079d4:	f855 300b 	ldr.w	r3, [r5, fp]
 80079d8:	b92b      	cbnz	r3, 80079e6 <quorem+0x9e>
 80079da:	9b01      	ldr	r3, [sp, #4]
 80079dc:	3b04      	subs	r3, #4
 80079de:	429d      	cmp	r5, r3
 80079e0:	461a      	mov	r2, r3
 80079e2:	d32f      	bcc.n	8007a44 <quorem+0xfc>
 80079e4:	613c      	str	r4, [r7, #16]
 80079e6:	4638      	mov	r0, r7
 80079e8:	f001 fe9e 	bl	8009728 <__mcmp>
 80079ec:	2800      	cmp	r0, #0
 80079ee:	db25      	blt.n	8007a3c <quorem+0xf4>
 80079f0:	4628      	mov	r0, r5
 80079f2:	f04f 0c00 	mov.w	ip, #0
 80079f6:	3601      	adds	r6, #1
 80079f8:	f858 1b04 	ldr.w	r1, [r8], #4
 80079fc:	f8d0 e000 	ldr.w	lr, [r0]
 8007a00:	b28b      	uxth	r3, r1
 8007a02:	ebac 0303 	sub.w	r3, ip, r3
 8007a06:	fa1f f28e 	uxth.w	r2, lr
 8007a0a:	4413      	add	r3, r2
 8007a0c:	0c0a      	lsrs	r2, r1, #16
 8007a0e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007a12:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007a16:	b29b      	uxth	r3, r3
 8007a18:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a1c:	45c1      	cmp	r9, r8
 8007a1e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007a22:	f840 3b04 	str.w	r3, [r0], #4
 8007a26:	d2e7      	bcs.n	80079f8 <quorem+0xb0>
 8007a28:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a2c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a30:	b922      	cbnz	r2, 8007a3c <quorem+0xf4>
 8007a32:	3b04      	subs	r3, #4
 8007a34:	429d      	cmp	r5, r3
 8007a36:	461a      	mov	r2, r3
 8007a38:	d30a      	bcc.n	8007a50 <quorem+0x108>
 8007a3a:	613c      	str	r4, [r7, #16]
 8007a3c:	4630      	mov	r0, r6
 8007a3e:	b003      	add	sp, #12
 8007a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a44:	6812      	ldr	r2, [r2, #0]
 8007a46:	3b04      	subs	r3, #4
 8007a48:	2a00      	cmp	r2, #0
 8007a4a:	d1cb      	bne.n	80079e4 <quorem+0x9c>
 8007a4c:	3c01      	subs	r4, #1
 8007a4e:	e7c6      	b.n	80079de <quorem+0x96>
 8007a50:	6812      	ldr	r2, [r2, #0]
 8007a52:	3b04      	subs	r3, #4
 8007a54:	2a00      	cmp	r2, #0
 8007a56:	d1f0      	bne.n	8007a3a <quorem+0xf2>
 8007a58:	3c01      	subs	r4, #1
 8007a5a:	e7eb      	b.n	8007a34 <quorem+0xec>
 8007a5c:	2000      	movs	r0, #0
 8007a5e:	e7ee      	b.n	8007a3e <quorem+0xf6>

08007a60 <_dtoa_r>:
 8007a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a64:	4616      	mov	r6, r2
 8007a66:	461f      	mov	r7, r3
 8007a68:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007a6a:	b099      	sub	sp, #100	; 0x64
 8007a6c:	4605      	mov	r5, r0
 8007a6e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007a72:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8007a76:	b974      	cbnz	r4, 8007a96 <_dtoa_r+0x36>
 8007a78:	2010      	movs	r0, #16
 8007a7a:	f001 fb65 	bl	8009148 <malloc>
 8007a7e:	4602      	mov	r2, r0
 8007a80:	6268      	str	r0, [r5, #36]	; 0x24
 8007a82:	b920      	cbnz	r0, 8007a8e <_dtoa_r+0x2e>
 8007a84:	21ea      	movs	r1, #234	; 0xea
 8007a86:	4ba8      	ldr	r3, [pc, #672]	; (8007d28 <_dtoa_r+0x2c8>)
 8007a88:	48a8      	ldr	r0, [pc, #672]	; (8007d2c <_dtoa_r+0x2cc>)
 8007a8a:	f002 fb15 	bl	800a0b8 <__assert_func>
 8007a8e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007a92:	6004      	str	r4, [r0, #0]
 8007a94:	60c4      	str	r4, [r0, #12]
 8007a96:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007a98:	6819      	ldr	r1, [r3, #0]
 8007a9a:	b151      	cbz	r1, 8007ab2 <_dtoa_r+0x52>
 8007a9c:	685a      	ldr	r2, [r3, #4]
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	4093      	lsls	r3, r2
 8007aa2:	604a      	str	r2, [r1, #4]
 8007aa4:	608b      	str	r3, [r1, #8]
 8007aa6:	4628      	mov	r0, r5
 8007aa8:	f001 fbb6 	bl	8009218 <_Bfree>
 8007aac:	2200      	movs	r2, #0
 8007aae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007ab0:	601a      	str	r2, [r3, #0]
 8007ab2:	1e3b      	subs	r3, r7, #0
 8007ab4:	bfaf      	iteee	ge
 8007ab6:	2300      	movge	r3, #0
 8007ab8:	2201      	movlt	r2, #1
 8007aba:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007abe:	9305      	strlt	r3, [sp, #20]
 8007ac0:	bfa8      	it	ge
 8007ac2:	f8c8 3000 	strge.w	r3, [r8]
 8007ac6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007aca:	4b99      	ldr	r3, [pc, #612]	; (8007d30 <_dtoa_r+0x2d0>)
 8007acc:	bfb8      	it	lt
 8007ace:	f8c8 2000 	strlt.w	r2, [r8]
 8007ad2:	ea33 0309 	bics.w	r3, r3, r9
 8007ad6:	d119      	bne.n	8007b0c <_dtoa_r+0xac>
 8007ad8:	f242 730f 	movw	r3, #9999	; 0x270f
 8007adc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007ade:	6013      	str	r3, [r2, #0]
 8007ae0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007ae4:	4333      	orrs	r3, r6
 8007ae6:	f000 857f 	beq.w	80085e8 <_dtoa_r+0xb88>
 8007aea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007aec:	b953      	cbnz	r3, 8007b04 <_dtoa_r+0xa4>
 8007aee:	4b91      	ldr	r3, [pc, #580]	; (8007d34 <_dtoa_r+0x2d4>)
 8007af0:	e022      	b.n	8007b38 <_dtoa_r+0xd8>
 8007af2:	4b91      	ldr	r3, [pc, #580]	; (8007d38 <_dtoa_r+0x2d8>)
 8007af4:	9303      	str	r3, [sp, #12]
 8007af6:	3308      	adds	r3, #8
 8007af8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007afa:	6013      	str	r3, [r2, #0]
 8007afc:	9803      	ldr	r0, [sp, #12]
 8007afe:	b019      	add	sp, #100	; 0x64
 8007b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b04:	4b8b      	ldr	r3, [pc, #556]	; (8007d34 <_dtoa_r+0x2d4>)
 8007b06:	9303      	str	r3, [sp, #12]
 8007b08:	3303      	adds	r3, #3
 8007b0a:	e7f5      	b.n	8007af8 <_dtoa_r+0x98>
 8007b0c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007b10:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8007b14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007b18:	2200      	movs	r2, #0
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	f7f8 ff44 	bl	80009a8 <__aeabi_dcmpeq>
 8007b20:	4680      	mov	r8, r0
 8007b22:	b158      	cbz	r0, 8007b3c <_dtoa_r+0xdc>
 8007b24:	2301      	movs	r3, #1
 8007b26:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007b28:	6013      	str	r3, [r2, #0]
 8007b2a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	f000 8558 	beq.w	80085e2 <_dtoa_r+0xb82>
 8007b32:	4882      	ldr	r0, [pc, #520]	; (8007d3c <_dtoa_r+0x2dc>)
 8007b34:	6018      	str	r0, [r3, #0]
 8007b36:	1e43      	subs	r3, r0, #1
 8007b38:	9303      	str	r3, [sp, #12]
 8007b3a:	e7df      	b.n	8007afc <_dtoa_r+0x9c>
 8007b3c:	ab16      	add	r3, sp, #88	; 0x58
 8007b3e:	9301      	str	r3, [sp, #4]
 8007b40:	ab17      	add	r3, sp, #92	; 0x5c
 8007b42:	9300      	str	r3, [sp, #0]
 8007b44:	4628      	mov	r0, r5
 8007b46:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007b4a:	f001 ff0f 	bl	800996c <__d2b>
 8007b4e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007b52:	4683      	mov	fp, r0
 8007b54:	2c00      	cmp	r4, #0
 8007b56:	d07f      	beq.n	8007c58 <_dtoa_r+0x1f8>
 8007b58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007b5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b5e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007b62:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b66:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8007b6a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007b6e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8007b72:	2200      	movs	r2, #0
 8007b74:	4b72      	ldr	r3, [pc, #456]	; (8007d40 <_dtoa_r+0x2e0>)
 8007b76:	f7f8 faf7 	bl	8000168 <__aeabi_dsub>
 8007b7a:	a365      	add	r3, pc, #404	; (adr r3, 8007d10 <_dtoa_r+0x2b0>)
 8007b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b80:	f7f8 fcaa 	bl	80004d8 <__aeabi_dmul>
 8007b84:	a364      	add	r3, pc, #400	; (adr r3, 8007d18 <_dtoa_r+0x2b8>)
 8007b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b8a:	f7f8 faef 	bl	800016c <__adddf3>
 8007b8e:	4606      	mov	r6, r0
 8007b90:	4620      	mov	r0, r4
 8007b92:	460f      	mov	r7, r1
 8007b94:	f7f8 fc36 	bl	8000404 <__aeabi_i2d>
 8007b98:	a361      	add	r3, pc, #388	; (adr r3, 8007d20 <_dtoa_r+0x2c0>)
 8007b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b9e:	f7f8 fc9b 	bl	80004d8 <__aeabi_dmul>
 8007ba2:	4602      	mov	r2, r0
 8007ba4:	460b      	mov	r3, r1
 8007ba6:	4630      	mov	r0, r6
 8007ba8:	4639      	mov	r1, r7
 8007baa:	f7f8 fadf 	bl	800016c <__adddf3>
 8007bae:	4606      	mov	r6, r0
 8007bb0:	460f      	mov	r7, r1
 8007bb2:	f7f8 ff41 	bl	8000a38 <__aeabi_d2iz>
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	4682      	mov	sl, r0
 8007bba:	2300      	movs	r3, #0
 8007bbc:	4630      	mov	r0, r6
 8007bbe:	4639      	mov	r1, r7
 8007bc0:	f7f8 fefc 	bl	80009bc <__aeabi_dcmplt>
 8007bc4:	b148      	cbz	r0, 8007bda <_dtoa_r+0x17a>
 8007bc6:	4650      	mov	r0, sl
 8007bc8:	f7f8 fc1c 	bl	8000404 <__aeabi_i2d>
 8007bcc:	4632      	mov	r2, r6
 8007bce:	463b      	mov	r3, r7
 8007bd0:	f7f8 feea 	bl	80009a8 <__aeabi_dcmpeq>
 8007bd4:	b908      	cbnz	r0, 8007bda <_dtoa_r+0x17a>
 8007bd6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007bda:	f1ba 0f16 	cmp.w	sl, #22
 8007bde:	d858      	bhi.n	8007c92 <_dtoa_r+0x232>
 8007be0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007be4:	4b57      	ldr	r3, [pc, #348]	; (8007d44 <_dtoa_r+0x2e4>)
 8007be6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bee:	f7f8 fee5 	bl	80009bc <__aeabi_dcmplt>
 8007bf2:	2800      	cmp	r0, #0
 8007bf4:	d04f      	beq.n	8007c96 <_dtoa_r+0x236>
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007bfc:	930f      	str	r3, [sp, #60]	; 0x3c
 8007bfe:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007c00:	1b1c      	subs	r4, r3, r4
 8007c02:	1e63      	subs	r3, r4, #1
 8007c04:	9309      	str	r3, [sp, #36]	; 0x24
 8007c06:	bf49      	itett	mi
 8007c08:	f1c4 0301 	rsbmi	r3, r4, #1
 8007c0c:	2300      	movpl	r3, #0
 8007c0e:	9306      	strmi	r3, [sp, #24]
 8007c10:	2300      	movmi	r3, #0
 8007c12:	bf54      	ite	pl
 8007c14:	9306      	strpl	r3, [sp, #24]
 8007c16:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007c18:	f1ba 0f00 	cmp.w	sl, #0
 8007c1c:	db3d      	blt.n	8007c9a <_dtoa_r+0x23a>
 8007c1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c20:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007c24:	4453      	add	r3, sl
 8007c26:	9309      	str	r3, [sp, #36]	; 0x24
 8007c28:	2300      	movs	r3, #0
 8007c2a:	930a      	str	r3, [sp, #40]	; 0x28
 8007c2c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007c2e:	2b09      	cmp	r3, #9
 8007c30:	f200 808c 	bhi.w	8007d4c <_dtoa_r+0x2ec>
 8007c34:	2b05      	cmp	r3, #5
 8007c36:	bfc4      	itt	gt
 8007c38:	3b04      	subgt	r3, #4
 8007c3a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8007c3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007c3e:	bfc8      	it	gt
 8007c40:	2400      	movgt	r4, #0
 8007c42:	f1a3 0302 	sub.w	r3, r3, #2
 8007c46:	bfd8      	it	le
 8007c48:	2401      	movle	r4, #1
 8007c4a:	2b03      	cmp	r3, #3
 8007c4c:	f200 808a 	bhi.w	8007d64 <_dtoa_r+0x304>
 8007c50:	e8df f003 	tbb	[pc, r3]
 8007c54:	5b4d4f2d 	.word	0x5b4d4f2d
 8007c58:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8007c5c:	441c      	add	r4, r3
 8007c5e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007c62:	2b20      	cmp	r3, #32
 8007c64:	bfc3      	ittte	gt
 8007c66:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007c6a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8007c6e:	fa09 f303 	lslgt.w	r3, r9, r3
 8007c72:	f1c3 0320 	rsble	r3, r3, #32
 8007c76:	bfc6      	itte	gt
 8007c78:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007c7c:	4318      	orrgt	r0, r3
 8007c7e:	fa06 f003 	lslle.w	r0, r6, r3
 8007c82:	f7f8 fbaf 	bl	80003e4 <__aeabi_ui2d>
 8007c86:	2301      	movs	r3, #1
 8007c88:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007c8c:	3c01      	subs	r4, #1
 8007c8e:	9313      	str	r3, [sp, #76]	; 0x4c
 8007c90:	e76f      	b.n	8007b72 <_dtoa_r+0x112>
 8007c92:	2301      	movs	r3, #1
 8007c94:	e7b2      	b.n	8007bfc <_dtoa_r+0x19c>
 8007c96:	900f      	str	r0, [sp, #60]	; 0x3c
 8007c98:	e7b1      	b.n	8007bfe <_dtoa_r+0x19e>
 8007c9a:	9b06      	ldr	r3, [sp, #24]
 8007c9c:	eba3 030a 	sub.w	r3, r3, sl
 8007ca0:	9306      	str	r3, [sp, #24]
 8007ca2:	f1ca 0300 	rsb	r3, sl, #0
 8007ca6:	930a      	str	r3, [sp, #40]	; 0x28
 8007ca8:	2300      	movs	r3, #0
 8007caa:	930e      	str	r3, [sp, #56]	; 0x38
 8007cac:	e7be      	b.n	8007c2c <_dtoa_r+0x1cc>
 8007cae:	2300      	movs	r3, #0
 8007cb0:	930b      	str	r3, [sp, #44]	; 0x2c
 8007cb2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	dc58      	bgt.n	8007d6a <_dtoa_r+0x30a>
 8007cb8:	f04f 0901 	mov.w	r9, #1
 8007cbc:	464b      	mov	r3, r9
 8007cbe:	f8cd 9020 	str.w	r9, [sp, #32]
 8007cc2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8007cca:	6042      	str	r2, [r0, #4]
 8007ccc:	2204      	movs	r2, #4
 8007cce:	f102 0614 	add.w	r6, r2, #20
 8007cd2:	429e      	cmp	r6, r3
 8007cd4:	6841      	ldr	r1, [r0, #4]
 8007cd6:	d94e      	bls.n	8007d76 <_dtoa_r+0x316>
 8007cd8:	4628      	mov	r0, r5
 8007cda:	f001 fa5d 	bl	8009198 <_Balloc>
 8007cde:	9003      	str	r0, [sp, #12]
 8007ce0:	2800      	cmp	r0, #0
 8007ce2:	d14c      	bne.n	8007d7e <_dtoa_r+0x31e>
 8007ce4:	4602      	mov	r2, r0
 8007ce6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007cea:	4b17      	ldr	r3, [pc, #92]	; (8007d48 <_dtoa_r+0x2e8>)
 8007cec:	e6cc      	b.n	8007a88 <_dtoa_r+0x28>
 8007cee:	2301      	movs	r3, #1
 8007cf0:	e7de      	b.n	8007cb0 <_dtoa_r+0x250>
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	930b      	str	r3, [sp, #44]	; 0x2c
 8007cf6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007cf8:	eb0a 0903 	add.w	r9, sl, r3
 8007cfc:	f109 0301 	add.w	r3, r9, #1
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	9308      	str	r3, [sp, #32]
 8007d04:	bfb8      	it	lt
 8007d06:	2301      	movlt	r3, #1
 8007d08:	e7dd      	b.n	8007cc6 <_dtoa_r+0x266>
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	e7f2      	b.n	8007cf4 <_dtoa_r+0x294>
 8007d0e:	bf00      	nop
 8007d10:	636f4361 	.word	0x636f4361
 8007d14:	3fd287a7 	.word	0x3fd287a7
 8007d18:	8b60c8b3 	.word	0x8b60c8b3
 8007d1c:	3fc68a28 	.word	0x3fc68a28
 8007d20:	509f79fb 	.word	0x509f79fb
 8007d24:	3fd34413 	.word	0x3fd34413
 8007d28:	0800c27e 	.word	0x0800c27e
 8007d2c:	0800c295 	.word	0x0800c295
 8007d30:	7ff00000 	.word	0x7ff00000
 8007d34:	0800c27a 	.word	0x0800c27a
 8007d38:	0800c271 	.word	0x0800c271
 8007d3c:	0800c0f5 	.word	0x0800c0f5
 8007d40:	3ff80000 	.word	0x3ff80000
 8007d44:	0800c468 	.word	0x0800c468
 8007d48:	0800c2f0 	.word	0x0800c2f0
 8007d4c:	2401      	movs	r4, #1
 8007d4e:	2300      	movs	r3, #0
 8007d50:	940b      	str	r4, [sp, #44]	; 0x2c
 8007d52:	9322      	str	r3, [sp, #136]	; 0x88
 8007d54:	f04f 39ff 	mov.w	r9, #4294967295
 8007d58:	2200      	movs	r2, #0
 8007d5a:	2312      	movs	r3, #18
 8007d5c:	f8cd 9020 	str.w	r9, [sp, #32]
 8007d60:	9223      	str	r2, [sp, #140]	; 0x8c
 8007d62:	e7b0      	b.n	8007cc6 <_dtoa_r+0x266>
 8007d64:	2301      	movs	r3, #1
 8007d66:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d68:	e7f4      	b.n	8007d54 <_dtoa_r+0x2f4>
 8007d6a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8007d6e:	464b      	mov	r3, r9
 8007d70:	f8cd 9020 	str.w	r9, [sp, #32]
 8007d74:	e7a7      	b.n	8007cc6 <_dtoa_r+0x266>
 8007d76:	3101      	adds	r1, #1
 8007d78:	6041      	str	r1, [r0, #4]
 8007d7a:	0052      	lsls	r2, r2, #1
 8007d7c:	e7a7      	b.n	8007cce <_dtoa_r+0x26e>
 8007d7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007d80:	9a03      	ldr	r2, [sp, #12]
 8007d82:	601a      	str	r2, [r3, #0]
 8007d84:	9b08      	ldr	r3, [sp, #32]
 8007d86:	2b0e      	cmp	r3, #14
 8007d88:	f200 80a8 	bhi.w	8007edc <_dtoa_r+0x47c>
 8007d8c:	2c00      	cmp	r4, #0
 8007d8e:	f000 80a5 	beq.w	8007edc <_dtoa_r+0x47c>
 8007d92:	f1ba 0f00 	cmp.w	sl, #0
 8007d96:	dd34      	ble.n	8007e02 <_dtoa_r+0x3a2>
 8007d98:	4a9a      	ldr	r2, [pc, #616]	; (8008004 <_dtoa_r+0x5a4>)
 8007d9a:	f00a 030f 	and.w	r3, sl, #15
 8007d9e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007da2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007da6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007daa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007dae:	ea4f 142a 	mov.w	r4, sl, asr #4
 8007db2:	d016      	beq.n	8007de2 <_dtoa_r+0x382>
 8007db4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007db8:	4b93      	ldr	r3, [pc, #588]	; (8008008 <_dtoa_r+0x5a8>)
 8007dba:	2703      	movs	r7, #3
 8007dbc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007dc0:	f7f8 fcb4 	bl	800072c <__aeabi_ddiv>
 8007dc4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007dc8:	f004 040f 	and.w	r4, r4, #15
 8007dcc:	4e8e      	ldr	r6, [pc, #568]	; (8008008 <_dtoa_r+0x5a8>)
 8007dce:	b954      	cbnz	r4, 8007de6 <_dtoa_r+0x386>
 8007dd0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007dd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007dd8:	f7f8 fca8 	bl	800072c <__aeabi_ddiv>
 8007ddc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007de0:	e029      	b.n	8007e36 <_dtoa_r+0x3d6>
 8007de2:	2702      	movs	r7, #2
 8007de4:	e7f2      	b.n	8007dcc <_dtoa_r+0x36c>
 8007de6:	07e1      	lsls	r1, r4, #31
 8007de8:	d508      	bpl.n	8007dfc <_dtoa_r+0x39c>
 8007dea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007dee:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007df2:	f7f8 fb71 	bl	80004d8 <__aeabi_dmul>
 8007df6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007dfa:	3701      	adds	r7, #1
 8007dfc:	1064      	asrs	r4, r4, #1
 8007dfe:	3608      	adds	r6, #8
 8007e00:	e7e5      	b.n	8007dce <_dtoa_r+0x36e>
 8007e02:	f000 80a5 	beq.w	8007f50 <_dtoa_r+0x4f0>
 8007e06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007e0a:	f1ca 0400 	rsb	r4, sl, #0
 8007e0e:	4b7d      	ldr	r3, [pc, #500]	; (8008004 <_dtoa_r+0x5a4>)
 8007e10:	f004 020f 	and.w	r2, r4, #15
 8007e14:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e1c:	f7f8 fb5c 	bl	80004d8 <__aeabi_dmul>
 8007e20:	2702      	movs	r7, #2
 8007e22:	2300      	movs	r3, #0
 8007e24:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007e28:	4e77      	ldr	r6, [pc, #476]	; (8008008 <_dtoa_r+0x5a8>)
 8007e2a:	1124      	asrs	r4, r4, #4
 8007e2c:	2c00      	cmp	r4, #0
 8007e2e:	f040 8084 	bne.w	8007f3a <_dtoa_r+0x4da>
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d1d2      	bne.n	8007ddc <_dtoa_r+0x37c>
 8007e36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	f000 808b 	beq.w	8007f54 <_dtoa_r+0x4f4>
 8007e3e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007e42:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007e46:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	4b6f      	ldr	r3, [pc, #444]	; (800800c <_dtoa_r+0x5ac>)
 8007e4e:	f7f8 fdb5 	bl	80009bc <__aeabi_dcmplt>
 8007e52:	2800      	cmp	r0, #0
 8007e54:	d07e      	beq.n	8007f54 <_dtoa_r+0x4f4>
 8007e56:	9b08      	ldr	r3, [sp, #32]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d07b      	beq.n	8007f54 <_dtoa_r+0x4f4>
 8007e5c:	f1b9 0f00 	cmp.w	r9, #0
 8007e60:	dd38      	ble.n	8007ed4 <_dtoa_r+0x474>
 8007e62:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007e66:	2200      	movs	r2, #0
 8007e68:	4b69      	ldr	r3, [pc, #420]	; (8008010 <_dtoa_r+0x5b0>)
 8007e6a:	f7f8 fb35 	bl	80004d8 <__aeabi_dmul>
 8007e6e:	464c      	mov	r4, r9
 8007e70:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007e74:	f10a 38ff 	add.w	r8, sl, #4294967295
 8007e78:	3701      	adds	r7, #1
 8007e7a:	4638      	mov	r0, r7
 8007e7c:	f7f8 fac2 	bl	8000404 <__aeabi_i2d>
 8007e80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e84:	f7f8 fb28 	bl	80004d8 <__aeabi_dmul>
 8007e88:	2200      	movs	r2, #0
 8007e8a:	4b62      	ldr	r3, [pc, #392]	; (8008014 <_dtoa_r+0x5b4>)
 8007e8c:	f7f8 f96e 	bl	800016c <__adddf3>
 8007e90:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007e94:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007e98:	9611      	str	r6, [sp, #68]	; 0x44
 8007e9a:	2c00      	cmp	r4, #0
 8007e9c:	d15d      	bne.n	8007f5a <_dtoa_r+0x4fa>
 8007e9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	4b5c      	ldr	r3, [pc, #368]	; (8008018 <_dtoa_r+0x5b8>)
 8007ea6:	f7f8 f95f 	bl	8000168 <__aeabi_dsub>
 8007eaa:	4602      	mov	r2, r0
 8007eac:	460b      	mov	r3, r1
 8007eae:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007eb2:	4633      	mov	r3, r6
 8007eb4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007eb6:	f7f8 fd9f 	bl	80009f8 <__aeabi_dcmpgt>
 8007eba:	2800      	cmp	r0, #0
 8007ebc:	f040 829c 	bne.w	80083f8 <_dtoa_r+0x998>
 8007ec0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ec4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007ec6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007eca:	f7f8 fd77 	bl	80009bc <__aeabi_dcmplt>
 8007ece:	2800      	cmp	r0, #0
 8007ed0:	f040 8290 	bne.w	80083f4 <_dtoa_r+0x994>
 8007ed4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007ed8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007edc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	f2c0 8152 	blt.w	8008188 <_dtoa_r+0x728>
 8007ee4:	f1ba 0f0e 	cmp.w	sl, #14
 8007ee8:	f300 814e 	bgt.w	8008188 <_dtoa_r+0x728>
 8007eec:	4b45      	ldr	r3, [pc, #276]	; (8008004 <_dtoa_r+0x5a4>)
 8007eee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007ef2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007ef6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007efa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	f280 80db 	bge.w	80080b8 <_dtoa_r+0x658>
 8007f02:	9b08      	ldr	r3, [sp, #32]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	f300 80d7 	bgt.w	80080b8 <_dtoa_r+0x658>
 8007f0a:	f040 8272 	bne.w	80083f2 <_dtoa_r+0x992>
 8007f0e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f12:	2200      	movs	r2, #0
 8007f14:	4b40      	ldr	r3, [pc, #256]	; (8008018 <_dtoa_r+0x5b8>)
 8007f16:	f7f8 fadf 	bl	80004d8 <__aeabi_dmul>
 8007f1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f1e:	f7f8 fd61 	bl	80009e4 <__aeabi_dcmpge>
 8007f22:	9c08      	ldr	r4, [sp, #32]
 8007f24:	4626      	mov	r6, r4
 8007f26:	2800      	cmp	r0, #0
 8007f28:	f040 8248 	bne.w	80083bc <_dtoa_r+0x95c>
 8007f2c:	2331      	movs	r3, #49	; 0x31
 8007f2e:	9f03      	ldr	r7, [sp, #12]
 8007f30:	f10a 0a01 	add.w	sl, sl, #1
 8007f34:	f807 3b01 	strb.w	r3, [r7], #1
 8007f38:	e244      	b.n	80083c4 <_dtoa_r+0x964>
 8007f3a:	07e2      	lsls	r2, r4, #31
 8007f3c:	d505      	bpl.n	8007f4a <_dtoa_r+0x4ea>
 8007f3e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007f42:	f7f8 fac9 	bl	80004d8 <__aeabi_dmul>
 8007f46:	2301      	movs	r3, #1
 8007f48:	3701      	adds	r7, #1
 8007f4a:	1064      	asrs	r4, r4, #1
 8007f4c:	3608      	adds	r6, #8
 8007f4e:	e76d      	b.n	8007e2c <_dtoa_r+0x3cc>
 8007f50:	2702      	movs	r7, #2
 8007f52:	e770      	b.n	8007e36 <_dtoa_r+0x3d6>
 8007f54:	46d0      	mov	r8, sl
 8007f56:	9c08      	ldr	r4, [sp, #32]
 8007f58:	e78f      	b.n	8007e7a <_dtoa_r+0x41a>
 8007f5a:	9903      	ldr	r1, [sp, #12]
 8007f5c:	4b29      	ldr	r3, [pc, #164]	; (8008004 <_dtoa_r+0x5a4>)
 8007f5e:	4421      	add	r1, r4
 8007f60:	9112      	str	r1, [sp, #72]	; 0x48
 8007f62:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007f64:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007f68:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007f6c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007f70:	2900      	cmp	r1, #0
 8007f72:	d055      	beq.n	8008020 <_dtoa_r+0x5c0>
 8007f74:	2000      	movs	r0, #0
 8007f76:	4929      	ldr	r1, [pc, #164]	; (800801c <_dtoa_r+0x5bc>)
 8007f78:	f7f8 fbd8 	bl	800072c <__aeabi_ddiv>
 8007f7c:	463b      	mov	r3, r7
 8007f7e:	4632      	mov	r2, r6
 8007f80:	f7f8 f8f2 	bl	8000168 <__aeabi_dsub>
 8007f84:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007f88:	9f03      	ldr	r7, [sp, #12]
 8007f8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f8e:	f7f8 fd53 	bl	8000a38 <__aeabi_d2iz>
 8007f92:	4604      	mov	r4, r0
 8007f94:	f7f8 fa36 	bl	8000404 <__aeabi_i2d>
 8007f98:	4602      	mov	r2, r0
 8007f9a:	460b      	mov	r3, r1
 8007f9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007fa0:	f7f8 f8e2 	bl	8000168 <__aeabi_dsub>
 8007fa4:	4602      	mov	r2, r0
 8007fa6:	460b      	mov	r3, r1
 8007fa8:	3430      	adds	r4, #48	; 0x30
 8007faa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007fae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007fb2:	f807 4b01 	strb.w	r4, [r7], #1
 8007fb6:	f7f8 fd01 	bl	80009bc <__aeabi_dcmplt>
 8007fba:	2800      	cmp	r0, #0
 8007fbc:	d174      	bne.n	80080a8 <_dtoa_r+0x648>
 8007fbe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007fc2:	2000      	movs	r0, #0
 8007fc4:	4911      	ldr	r1, [pc, #68]	; (800800c <_dtoa_r+0x5ac>)
 8007fc6:	f7f8 f8cf 	bl	8000168 <__aeabi_dsub>
 8007fca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007fce:	f7f8 fcf5 	bl	80009bc <__aeabi_dcmplt>
 8007fd2:	2800      	cmp	r0, #0
 8007fd4:	f040 80b7 	bne.w	8008146 <_dtoa_r+0x6e6>
 8007fd8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007fda:	429f      	cmp	r7, r3
 8007fdc:	f43f af7a 	beq.w	8007ed4 <_dtoa_r+0x474>
 8007fe0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	4b0a      	ldr	r3, [pc, #40]	; (8008010 <_dtoa_r+0x5b0>)
 8007fe8:	f7f8 fa76 	bl	80004d8 <__aeabi_dmul>
 8007fec:	2200      	movs	r2, #0
 8007fee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007ff2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ff6:	4b06      	ldr	r3, [pc, #24]	; (8008010 <_dtoa_r+0x5b0>)
 8007ff8:	f7f8 fa6e 	bl	80004d8 <__aeabi_dmul>
 8007ffc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008000:	e7c3      	b.n	8007f8a <_dtoa_r+0x52a>
 8008002:	bf00      	nop
 8008004:	0800c468 	.word	0x0800c468
 8008008:	0800c440 	.word	0x0800c440
 800800c:	3ff00000 	.word	0x3ff00000
 8008010:	40240000 	.word	0x40240000
 8008014:	401c0000 	.word	0x401c0000
 8008018:	40140000 	.word	0x40140000
 800801c:	3fe00000 	.word	0x3fe00000
 8008020:	4630      	mov	r0, r6
 8008022:	4639      	mov	r1, r7
 8008024:	f7f8 fa58 	bl	80004d8 <__aeabi_dmul>
 8008028:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800802a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800802e:	9c03      	ldr	r4, [sp, #12]
 8008030:	9314      	str	r3, [sp, #80]	; 0x50
 8008032:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008036:	f7f8 fcff 	bl	8000a38 <__aeabi_d2iz>
 800803a:	9015      	str	r0, [sp, #84]	; 0x54
 800803c:	f7f8 f9e2 	bl	8000404 <__aeabi_i2d>
 8008040:	4602      	mov	r2, r0
 8008042:	460b      	mov	r3, r1
 8008044:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008048:	f7f8 f88e 	bl	8000168 <__aeabi_dsub>
 800804c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800804e:	4606      	mov	r6, r0
 8008050:	3330      	adds	r3, #48	; 0x30
 8008052:	f804 3b01 	strb.w	r3, [r4], #1
 8008056:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008058:	460f      	mov	r7, r1
 800805a:	429c      	cmp	r4, r3
 800805c:	f04f 0200 	mov.w	r2, #0
 8008060:	d124      	bne.n	80080ac <_dtoa_r+0x64c>
 8008062:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008066:	4bb0      	ldr	r3, [pc, #704]	; (8008328 <_dtoa_r+0x8c8>)
 8008068:	f7f8 f880 	bl	800016c <__adddf3>
 800806c:	4602      	mov	r2, r0
 800806e:	460b      	mov	r3, r1
 8008070:	4630      	mov	r0, r6
 8008072:	4639      	mov	r1, r7
 8008074:	f7f8 fcc0 	bl	80009f8 <__aeabi_dcmpgt>
 8008078:	2800      	cmp	r0, #0
 800807a:	d163      	bne.n	8008144 <_dtoa_r+0x6e4>
 800807c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008080:	2000      	movs	r0, #0
 8008082:	49a9      	ldr	r1, [pc, #676]	; (8008328 <_dtoa_r+0x8c8>)
 8008084:	f7f8 f870 	bl	8000168 <__aeabi_dsub>
 8008088:	4602      	mov	r2, r0
 800808a:	460b      	mov	r3, r1
 800808c:	4630      	mov	r0, r6
 800808e:	4639      	mov	r1, r7
 8008090:	f7f8 fc94 	bl	80009bc <__aeabi_dcmplt>
 8008094:	2800      	cmp	r0, #0
 8008096:	f43f af1d 	beq.w	8007ed4 <_dtoa_r+0x474>
 800809a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800809c:	1e7b      	subs	r3, r7, #1
 800809e:	9314      	str	r3, [sp, #80]	; 0x50
 80080a0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80080a4:	2b30      	cmp	r3, #48	; 0x30
 80080a6:	d0f8      	beq.n	800809a <_dtoa_r+0x63a>
 80080a8:	46c2      	mov	sl, r8
 80080aa:	e03b      	b.n	8008124 <_dtoa_r+0x6c4>
 80080ac:	4b9f      	ldr	r3, [pc, #636]	; (800832c <_dtoa_r+0x8cc>)
 80080ae:	f7f8 fa13 	bl	80004d8 <__aeabi_dmul>
 80080b2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80080b6:	e7bc      	b.n	8008032 <_dtoa_r+0x5d2>
 80080b8:	9f03      	ldr	r7, [sp, #12]
 80080ba:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80080be:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80080c2:	4640      	mov	r0, r8
 80080c4:	4649      	mov	r1, r9
 80080c6:	f7f8 fb31 	bl	800072c <__aeabi_ddiv>
 80080ca:	f7f8 fcb5 	bl	8000a38 <__aeabi_d2iz>
 80080ce:	4604      	mov	r4, r0
 80080d0:	f7f8 f998 	bl	8000404 <__aeabi_i2d>
 80080d4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80080d8:	f7f8 f9fe 	bl	80004d8 <__aeabi_dmul>
 80080dc:	4602      	mov	r2, r0
 80080de:	460b      	mov	r3, r1
 80080e0:	4640      	mov	r0, r8
 80080e2:	4649      	mov	r1, r9
 80080e4:	f7f8 f840 	bl	8000168 <__aeabi_dsub>
 80080e8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80080ec:	f807 6b01 	strb.w	r6, [r7], #1
 80080f0:	9e03      	ldr	r6, [sp, #12]
 80080f2:	f8dd c020 	ldr.w	ip, [sp, #32]
 80080f6:	1bbe      	subs	r6, r7, r6
 80080f8:	45b4      	cmp	ip, r6
 80080fa:	4602      	mov	r2, r0
 80080fc:	460b      	mov	r3, r1
 80080fe:	d136      	bne.n	800816e <_dtoa_r+0x70e>
 8008100:	f7f8 f834 	bl	800016c <__adddf3>
 8008104:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008108:	4680      	mov	r8, r0
 800810a:	4689      	mov	r9, r1
 800810c:	f7f8 fc74 	bl	80009f8 <__aeabi_dcmpgt>
 8008110:	bb58      	cbnz	r0, 800816a <_dtoa_r+0x70a>
 8008112:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008116:	4640      	mov	r0, r8
 8008118:	4649      	mov	r1, r9
 800811a:	f7f8 fc45 	bl	80009a8 <__aeabi_dcmpeq>
 800811e:	b108      	cbz	r0, 8008124 <_dtoa_r+0x6c4>
 8008120:	07e1      	lsls	r1, r4, #31
 8008122:	d422      	bmi.n	800816a <_dtoa_r+0x70a>
 8008124:	4628      	mov	r0, r5
 8008126:	4659      	mov	r1, fp
 8008128:	f001 f876 	bl	8009218 <_Bfree>
 800812c:	2300      	movs	r3, #0
 800812e:	703b      	strb	r3, [r7, #0]
 8008130:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008132:	f10a 0001 	add.w	r0, sl, #1
 8008136:	6018      	str	r0, [r3, #0]
 8008138:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800813a:	2b00      	cmp	r3, #0
 800813c:	f43f acde 	beq.w	8007afc <_dtoa_r+0x9c>
 8008140:	601f      	str	r7, [r3, #0]
 8008142:	e4db      	b.n	8007afc <_dtoa_r+0x9c>
 8008144:	4627      	mov	r7, r4
 8008146:	463b      	mov	r3, r7
 8008148:	461f      	mov	r7, r3
 800814a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800814e:	2a39      	cmp	r2, #57	; 0x39
 8008150:	d107      	bne.n	8008162 <_dtoa_r+0x702>
 8008152:	9a03      	ldr	r2, [sp, #12]
 8008154:	429a      	cmp	r2, r3
 8008156:	d1f7      	bne.n	8008148 <_dtoa_r+0x6e8>
 8008158:	2230      	movs	r2, #48	; 0x30
 800815a:	9903      	ldr	r1, [sp, #12]
 800815c:	f108 0801 	add.w	r8, r8, #1
 8008160:	700a      	strb	r2, [r1, #0]
 8008162:	781a      	ldrb	r2, [r3, #0]
 8008164:	3201      	adds	r2, #1
 8008166:	701a      	strb	r2, [r3, #0]
 8008168:	e79e      	b.n	80080a8 <_dtoa_r+0x648>
 800816a:	46d0      	mov	r8, sl
 800816c:	e7eb      	b.n	8008146 <_dtoa_r+0x6e6>
 800816e:	2200      	movs	r2, #0
 8008170:	4b6e      	ldr	r3, [pc, #440]	; (800832c <_dtoa_r+0x8cc>)
 8008172:	f7f8 f9b1 	bl	80004d8 <__aeabi_dmul>
 8008176:	2200      	movs	r2, #0
 8008178:	2300      	movs	r3, #0
 800817a:	4680      	mov	r8, r0
 800817c:	4689      	mov	r9, r1
 800817e:	f7f8 fc13 	bl	80009a8 <__aeabi_dcmpeq>
 8008182:	2800      	cmp	r0, #0
 8008184:	d09b      	beq.n	80080be <_dtoa_r+0x65e>
 8008186:	e7cd      	b.n	8008124 <_dtoa_r+0x6c4>
 8008188:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800818a:	2a00      	cmp	r2, #0
 800818c:	f000 80d0 	beq.w	8008330 <_dtoa_r+0x8d0>
 8008190:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008192:	2a01      	cmp	r2, #1
 8008194:	f300 80ae 	bgt.w	80082f4 <_dtoa_r+0x894>
 8008198:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800819a:	2a00      	cmp	r2, #0
 800819c:	f000 80a6 	beq.w	80082ec <_dtoa_r+0x88c>
 80081a0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80081a4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80081a6:	9f06      	ldr	r7, [sp, #24]
 80081a8:	9a06      	ldr	r2, [sp, #24]
 80081aa:	2101      	movs	r1, #1
 80081ac:	441a      	add	r2, r3
 80081ae:	9206      	str	r2, [sp, #24]
 80081b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081b2:	4628      	mov	r0, r5
 80081b4:	441a      	add	r2, r3
 80081b6:	9209      	str	r2, [sp, #36]	; 0x24
 80081b8:	f001 f92e 	bl	8009418 <__i2b>
 80081bc:	4606      	mov	r6, r0
 80081be:	2f00      	cmp	r7, #0
 80081c0:	dd0c      	ble.n	80081dc <_dtoa_r+0x77c>
 80081c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	dd09      	ble.n	80081dc <_dtoa_r+0x77c>
 80081c8:	42bb      	cmp	r3, r7
 80081ca:	bfa8      	it	ge
 80081cc:	463b      	movge	r3, r7
 80081ce:	9a06      	ldr	r2, [sp, #24]
 80081d0:	1aff      	subs	r7, r7, r3
 80081d2:	1ad2      	subs	r2, r2, r3
 80081d4:	9206      	str	r2, [sp, #24]
 80081d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081d8:	1ad3      	subs	r3, r2, r3
 80081da:	9309      	str	r3, [sp, #36]	; 0x24
 80081dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081de:	b1f3      	cbz	r3, 800821e <_dtoa_r+0x7be>
 80081e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	f000 80a8 	beq.w	8008338 <_dtoa_r+0x8d8>
 80081e8:	2c00      	cmp	r4, #0
 80081ea:	dd10      	ble.n	800820e <_dtoa_r+0x7ae>
 80081ec:	4631      	mov	r1, r6
 80081ee:	4622      	mov	r2, r4
 80081f0:	4628      	mov	r0, r5
 80081f2:	f001 f9cf 	bl	8009594 <__pow5mult>
 80081f6:	465a      	mov	r2, fp
 80081f8:	4601      	mov	r1, r0
 80081fa:	4606      	mov	r6, r0
 80081fc:	4628      	mov	r0, r5
 80081fe:	f001 f921 	bl	8009444 <__multiply>
 8008202:	4680      	mov	r8, r0
 8008204:	4659      	mov	r1, fp
 8008206:	4628      	mov	r0, r5
 8008208:	f001 f806 	bl	8009218 <_Bfree>
 800820c:	46c3      	mov	fp, r8
 800820e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008210:	1b1a      	subs	r2, r3, r4
 8008212:	d004      	beq.n	800821e <_dtoa_r+0x7be>
 8008214:	4659      	mov	r1, fp
 8008216:	4628      	mov	r0, r5
 8008218:	f001 f9bc 	bl	8009594 <__pow5mult>
 800821c:	4683      	mov	fp, r0
 800821e:	2101      	movs	r1, #1
 8008220:	4628      	mov	r0, r5
 8008222:	f001 f8f9 	bl	8009418 <__i2b>
 8008226:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008228:	4604      	mov	r4, r0
 800822a:	2b00      	cmp	r3, #0
 800822c:	f340 8086 	ble.w	800833c <_dtoa_r+0x8dc>
 8008230:	461a      	mov	r2, r3
 8008232:	4601      	mov	r1, r0
 8008234:	4628      	mov	r0, r5
 8008236:	f001 f9ad 	bl	8009594 <__pow5mult>
 800823a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800823c:	4604      	mov	r4, r0
 800823e:	2b01      	cmp	r3, #1
 8008240:	dd7f      	ble.n	8008342 <_dtoa_r+0x8e2>
 8008242:	f04f 0800 	mov.w	r8, #0
 8008246:	6923      	ldr	r3, [r4, #16]
 8008248:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800824c:	6918      	ldr	r0, [r3, #16]
 800824e:	f001 f895 	bl	800937c <__hi0bits>
 8008252:	f1c0 0020 	rsb	r0, r0, #32
 8008256:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008258:	4418      	add	r0, r3
 800825a:	f010 001f 	ands.w	r0, r0, #31
 800825e:	f000 8092 	beq.w	8008386 <_dtoa_r+0x926>
 8008262:	f1c0 0320 	rsb	r3, r0, #32
 8008266:	2b04      	cmp	r3, #4
 8008268:	f340 808a 	ble.w	8008380 <_dtoa_r+0x920>
 800826c:	f1c0 001c 	rsb	r0, r0, #28
 8008270:	9b06      	ldr	r3, [sp, #24]
 8008272:	4407      	add	r7, r0
 8008274:	4403      	add	r3, r0
 8008276:	9306      	str	r3, [sp, #24]
 8008278:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800827a:	4403      	add	r3, r0
 800827c:	9309      	str	r3, [sp, #36]	; 0x24
 800827e:	9b06      	ldr	r3, [sp, #24]
 8008280:	2b00      	cmp	r3, #0
 8008282:	dd05      	ble.n	8008290 <_dtoa_r+0x830>
 8008284:	4659      	mov	r1, fp
 8008286:	461a      	mov	r2, r3
 8008288:	4628      	mov	r0, r5
 800828a:	f001 f9dd 	bl	8009648 <__lshift>
 800828e:	4683      	mov	fp, r0
 8008290:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008292:	2b00      	cmp	r3, #0
 8008294:	dd05      	ble.n	80082a2 <_dtoa_r+0x842>
 8008296:	4621      	mov	r1, r4
 8008298:	461a      	mov	r2, r3
 800829a:	4628      	mov	r0, r5
 800829c:	f001 f9d4 	bl	8009648 <__lshift>
 80082a0:	4604      	mov	r4, r0
 80082a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d070      	beq.n	800838a <_dtoa_r+0x92a>
 80082a8:	4621      	mov	r1, r4
 80082aa:	4658      	mov	r0, fp
 80082ac:	f001 fa3c 	bl	8009728 <__mcmp>
 80082b0:	2800      	cmp	r0, #0
 80082b2:	da6a      	bge.n	800838a <_dtoa_r+0x92a>
 80082b4:	2300      	movs	r3, #0
 80082b6:	4659      	mov	r1, fp
 80082b8:	220a      	movs	r2, #10
 80082ba:	4628      	mov	r0, r5
 80082bc:	f000 ffce 	bl	800925c <__multadd>
 80082c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082c2:	4683      	mov	fp, r0
 80082c4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	f000 8194 	beq.w	80085f6 <_dtoa_r+0xb96>
 80082ce:	4631      	mov	r1, r6
 80082d0:	2300      	movs	r3, #0
 80082d2:	220a      	movs	r2, #10
 80082d4:	4628      	mov	r0, r5
 80082d6:	f000 ffc1 	bl	800925c <__multadd>
 80082da:	f1b9 0f00 	cmp.w	r9, #0
 80082de:	4606      	mov	r6, r0
 80082e0:	f300 8093 	bgt.w	800840a <_dtoa_r+0x9aa>
 80082e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80082e6:	2b02      	cmp	r3, #2
 80082e8:	dc57      	bgt.n	800839a <_dtoa_r+0x93a>
 80082ea:	e08e      	b.n	800840a <_dtoa_r+0x9aa>
 80082ec:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80082ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80082f2:	e757      	b.n	80081a4 <_dtoa_r+0x744>
 80082f4:	9b08      	ldr	r3, [sp, #32]
 80082f6:	1e5c      	subs	r4, r3, #1
 80082f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082fa:	42a3      	cmp	r3, r4
 80082fc:	bfb7      	itett	lt
 80082fe:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008300:	1b1c      	subge	r4, r3, r4
 8008302:	1ae2      	sublt	r2, r4, r3
 8008304:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008306:	bfbe      	ittt	lt
 8008308:	940a      	strlt	r4, [sp, #40]	; 0x28
 800830a:	189b      	addlt	r3, r3, r2
 800830c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800830e:	9b08      	ldr	r3, [sp, #32]
 8008310:	bfb8      	it	lt
 8008312:	2400      	movlt	r4, #0
 8008314:	2b00      	cmp	r3, #0
 8008316:	bfbb      	ittet	lt
 8008318:	9b06      	ldrlt	r3, [sp, #24]
 800831a:	9a08      	ldrlt	r2, [sp, #32]
 800831c:	9f06      	ldrge	r7, [sp, #24]
 800831e:	1a9f      	sublt	r7, r3, r2
 8008320:	bfac      	ite	ge
 8008322:	9b08      	ldrge	r3, [sp, #32]
 8008324:	2300      	movlt	r3, #0
 8008326:	e73f      	b.n	80081a8 <_dtoa_r+0x748>
 8008328:	3fe00000 	.word	0x3fe00000
 800832c:	40240000 	.word	0x40240000
 8008330:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008332:	9f06      	ldr	r7, [sp, #24]
 8008334:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8008336:	e742      	b.n	80081be <_dtoa_r+0x75e>
 8008338:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800833a:	e76b      	b.n	8008214 <_dtoa_r+0x7b4>
 800833c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800833e:	2b01      	cmp	r3, #1
 8008340:	dc19      	bgt.n	8008376 <_dtoa_r+0x916>
 8008342:	9b04      	ldr	r3, [sp, #16]
 8008344:	b9bb      	cbnz	r3, 8008376 <_dtoa_r+0x916>
 8008346:	9b05      	ldr	r3, [sp, #20]
 8008348:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800834c:	b99b      	cbnz	r3, 8008376 <_dtoa_r+0x916>
 800834e:	9b05      	ldr	r3, [sp, #20]
 8008350:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008354:	0d1b      	lsrs	r3, r3, #20
 8008356:	051b      	lsls	r3, r3, #20
 8008358:	b183      	cbz	r3, 800837c <_dtoa_r+0x91c>
 800835a:	f04f 0801 	mov.w	r8, #1
 800835e:	9b06      	ldr	r3, [sp, #24]
 8008360:	3301      	adds	r3, #1
 8008362:	9306      	str	r3, [sp, #24]
 8008364:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008366:	3301      	adds	r3, #1
 8008368:	9309      	str	r3, [sp, #36]	; 0x24
 800836a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800836c:	2b00      	cmp	r3, #0
 800836e:	f47f af6a 	bne.w	8008246 <_dtoa_r+0x7e6>
 8008372:	2001      	movs	r0, #1
 8008374:	e76f      	b.n	8008256 <_dtoa_r+0x7f6>
 8008376:	f04f 0800 	mov.w	r8, #0
 800837a:	e7f6      	b.n	800836a <_dtoa_r+0x90a>
 800837c:	4698      	mov	r8, r3
 800837e:	e7f4      	b.n	800836a <_dtoa_r+0x90a>
 8008380:	f43f af7d 	beq.w	800827e <_dtoa_r+0x81e>
 8008384:	4618      	mov	r0, r3
 8008386:	301c      	adds	r0, #28
 8008388:	e772      	b.n	8008270 <_dtoa_r+0x810>
 800838a:	9b08      	ldr	r3, [sp, #32]
 800838c:	2b00      	cmp	r3, #0
 800838e:	dc36      	bgt.n	80083fe <_dtoa_r+0x99e>
 8008390:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008392:	2b02      	cmp	r3, #2
 8008394:	dd33      	ble.n	80083fe <_dtoa_r+0x99e>
 8008396:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800839a:	f1b9 0f00 	cmp.w	r9, #0
 800839e:	d10d      	bne.n	80083bc <_dtoa_r+0x95c>
 80083a0:	4621      	mov	r1, r4
 80083a2:	464b      	mov	r3, r9
 80083a4:	2205      	movs	r2, #5
 80083a6:	4628      	mov	r0, r5
 80083a8:	f000 ff58 	bl	800925c <__multadd>
 80083ac:	4601      	mov	r1, r0
 80083ae:	4604      	mov	r4, r0
 80083b0:	4658      	mov	r0, fp
 80083b2:	f001 f9b9 	bl	8009728 <__mcmp>
 80083b6:	2800      	cmp	r0, #0
 80083b8:	f73f adb8 	bgt.w	8007f2c <_dtoa_r+0x4cc>
 80083bc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80083be:	9f03      	ldr	r7, [sp, #12]
 80083c0:	ea6f 0a03 	mvn.w	sl, r3
 80083c4:	f04f 0800 	mov.w	r8, #0
 80083c8:	4621      	mov	r1, r4
 80083ca:	4628      	mov	r0, r5
 80083cc:	f000 ff24 	bl	8009218 <_Bfree>
 80083d0:	2e00      	cmp	r6, #0
 80083d2:	f43f aea7 	beq.w	8008124 <_dtoa_r+0x6c4>
 80083d6:	f1b8 0f00 	cmp.w	r8, #0
 80083da:	d005      	beq.n	80083e8 <_dtoa_r+0x988>
 80083dc:	45b0      	cmp	r8, r6
 80083de:	d003      	beq.n	80083e8 <_dtoa_r+0x988>
 80083e0:	4641      	mov	r1, r8
 80083e2:	4628      	mov	r0, r5
 80083e4:	f000 ff18 	bl	8009218 <_Bfree>
 80083e8:	4631      	mov	r1, r6
 80083ea:	4628      	mov	r0, r5
 80083ec:	f000 ff14 	bl	8009218 <_Bfree>
 80083f0:	e698      	b.n	8008124 <_dtoa_r+0x6c4>
 80083f2:	2400      	movs	r4, #0
 80083f4:	4626      	mov	r6, r4
 80083f6:	e7e1      	b.n	80083bc <_dtoa_r+0x95c>
 80083f8:	46c2      	mov	sl, r8
 80083fa:	4626      	mov	r6, r4
 80083fc:	e596      	b.n	8007f2c <_dtoa_r+0x4cc>
 80083fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008400:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008404:	2b00      	cmp	r3, #0
 8008406:	f000 80fd 	beq.w	8008604 <_dtoa_r+0xba4>
 800840a:	2f00      	cmp	r7, #0
 800840c:	dd05      	ble.n	800841a <_dtoa_r+0x9ba>
 800840e:	4631      	mov	r1, r6
 8008410:	463a      	mov	r2, r7
 8008412:	4628      	mov	r0, r5
 8008414:	f001 f918 	bl	8009648 <__lshift>
 8008418:	4606      	mov	r6, r0
 800841a:	f1b8 0f00 	cmp.w	r8, #0
 800841e:	d05c      	beq.n	80084da <_dtoa_r+0xa7a>
 8008420:	4628      	mov	r0, r5
 8008422:	6871      	ldr	r1, [r6, #4]
 8008424:	f000 feb8 	bl	8009198 <_Balloc>
 8008428:	4607      	mov	r7, r0
 800842a:	b928      	cbnz	r0, 8008438 <_dtoa_r+0x9d8>
 800842c:	4602      	mov	r2, r0
 800842e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008432:	4b7f      	ldr	r3, [pc, #508]	; (8008630 <_dtoa_r+0xbd0>)
 8008434:	f7ff bb28 	b.w	8007a88 <_dtoa_r+0x28>
 8008438:	6932      	ldr	r2, [r6, #16]
 800843a:	f106 010c 	add.w	r1, r6, #12
 800843e:	3202      	adds	r2, #2
 8008440:	0092      	lsls	r2, r2, #2
 8008442:	300c      	adds	r0, #12
 8008444:	f7fd fc08 	bl	8005c58 <memcpy>
 8008448:	2201      	movs	r2, #1
 800844a:	4639      	mov	r1, r7
 800844c:	4628      	mov	r0, r5
 800844e:	f001 f8fb 	bl	8009648 <__lshift>
 8008452:	46b0      	mov	r8, r6
 8008454:	4606      	mov	r6, r0
 8008456:	9b03      	ldr	r3, [sp, #12]
 8008458:	3301      	adds	r3, #1
 800845a:	9308      	str	r3, [sp, #32]
 800845c:	9b03      	ldr	r3, [sp, #12]
 800845e:	444b      	add	r3, r9
 8008460:	930a      	str	r3, [sp, #40]	; 0x28
 8008462:	9b04      	ldr	r3, [sp, #16]
 8008464:	f003 0301 	and.w	r3, r3, #1
 8008468:	9309      	str	r3, [sp, #36]	; 0x24
 800846a:	9b08      	ldr	r3, [sp, #32]
 800846c:	4621      	mov	r1, r4
 800846e:	3b01      	subs	r3, #1
 8008470:	4658      	mov	r0, fp
 8008472:	9304      	str	r3, [sp, #16]
 8008474:	f7ff fa68 	bl	8007948 <quorem>
 8008478:	4603      	mov	r3, r0
 800847a:	4641      	mov	r1, r8
 800847c:	3330      	adds	r3, #48	; 0x30
 800847e:	9006      	str	r0, [sp, #24]
 8008480:	4658      	mov	r0, fp
 8008482:	930b      	str	r3, [sp, #44]	; 0x2c
 8008484:	f001 f950 	bl	8009728 <__mcmp>
 8008488:	4632      	mov	r2, r6
 800848a:	4681      	mov	r9, r0
 800848c:	4621      	mov	r1, r4
 800848e:	4628      	mov	r0, r5
 8008490:	f001 f966 	bl	8009760 <__mdiff>
 8008494:	68c2      	ldr	r2, [r0, #12]
 8008496:	4607      	mov	r7, r0
 8008498:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800849a:	bb02      	cbnz	r2, 80084de <_dtoa_r+0xa7e>
 800849c:	4601      	mov	r1, r0
 800849e:	4658      	mov	r0, fp
 80084a0:	f001 f942 	bl	8009728 <__mcmp>
 80084a4:	4602      	mov	r2, r0
 80084a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084a8:	4639      	mov	r1, r7
 80084aa:	4628      	mov	r0, r5
 80084ac:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80084b0:	f000 feb2 	bl	8009218 <_Bfree>
 80084b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80084b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80084b8:	9f08      	ldr	r7, [sp, #32]
 80084ba:	ea43 0102 	orr.w	r1, r3, r2
 80084be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084c0:	430b      	orrs	r3, r1
 80084c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084c4:	d10d      	bne.n	80084e2 <_dtoa_r+0xa82>
 80084c6:	2b39      	cmp	r3, #57	; 0x39
 80084c8:	d029      	beq.n	800851e <_dtoa_r+0xabe>
 80084ca:	f1b9 0f00 	cmp.w	r9, #0
 80084ce:	dd01      	ble.n	80084d4 <_dtoa_r+0xa74>
 80084d0:	9b06      	ldr	r3, [sp, #24]
 80084d2:	3331      	adds	r3, #49	; 0x31
 80084d4:	9a04      	ldr	r2, [sp, #16]
 80084d6:	7013      	strb	r3, [r2, #0]
 80084d8:	e776      	b.n	80083c8 <_dtoa_r+0x968>
 80084da:	4630      	mov	r0, r6
 80084dc:	e7b9      	b.n	8008452 <_dtoa_r+0x9f2>
 80084de:	2201      	movs	r2, #1
 80084e0:	e7e2      	b.n	80084a8 <_dtoa_r+0xa48>
 80084e2:	f1b9 0f00 	cmp.w	r9, #0
 80084e6:	db06      	blt.n	80084f6 <_dtoa_r+0xa96>
 80084e8:	9922      	ldr	r1, [sp, #136]	; 0x88
 80084ea:	ea41 0909 	orr.w	r9, r1, r9
 80084ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 80084f0:	ea59 0101 	orrs.w	r1, r9, r1
 80084f4:	d120      	bne.n	8008538 <_dtoa_r+0xad8>
 80084f6:	2a00      	cmp	r2, #0
 80084f8:	ddec      	ble.n	80084d4 <_dtoa_r+0xa74>
 80084fa:	4659      	mov	r1, fp
 80084fc:	2201      	movs	r2, #1
 80084fe:	4628      	mov	r0, r5
 8008500:	9308      	str	r3, [sp, #32]
 8008502:	f001 f8a1 	bl	8009648 <__lshift>
 8008506:	4621      	mov	r1, r4
 8008508:	4683      	mov	fp, r0
 800850a:	f001 f90d 	bl	8009728 <__mcmp>
 800850e:	2800      	cmp	r0, #0
 8008510:	9b08      	ldr	r3, [sp, #32]
 8008512:	dc02      	bgt.n	800851a <_dtoa_r+0xaba>
 8008514:	d1de      	bne.n	80084d4 <_dtoa_r+0xa74>
 8008516:	07da      	lsls	r2, r3, #31
 8008518:	d5dc      	bpl.n	80084d4 <_dtoa_r+0xa74>
 800851a:	2b39      	cmp	r3, #57	; 0x39
 800851c:	d1d8      	bne.n	80084d0 <_dtoa_r+0xa70>
 800851e:	2339      	movs	r3, #57	; 0x39
 8008520:	9a04      	ldr	r2, [sp, #16]
 8008522:	7013      	strb	r3, [r2, #0]
 8008524:	463b      	mov	r3, r7
 8008526:	461f      	mov	r7, r3
 8008528:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800852c:	3b01      	subs	r3, #1
 800852e:	2a39      	cmp	r2, #57	; 0x39
 8008530:	d050      	beq.n	80085d4 <_dtoa_r+0xb74>
 8008532:	3201      	adds	r2, #1
 8008534:	701a      	strb	r2, [r3, #0]
 8008536:	e747      	b.n	80083c8 <_dtoa_r+0x968>
 8008538:	2a00      	cmp	r2, #0
 800853a:	dd03      	ble.n	8008544 <_dtoa_r+0xae4>
 800853c:	2b39      	cmp	r3, #57	; 0x39
 800853e:	d0ee      	beq.n	800851e <_dtoa_r+0xabe>
 8008540:	3301      	adds	r3, #1
 8008542:	e7c7      	b.n	80084d4 <_dtoa_r+0xa74>
 8008544:	9a08      	ldr	r2, [sp, #32]
 8008546:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008548:	f802 3c01 	strb.w	r3, [r2, #-1]
 800854c:	428a      	cmp	r2, r1
 800854e:	d02a      	beq.n	80085a6 <_dtoa_r+0xb46>
 8008550:	4659      	mov	r1, fp
 8008552:	2300      	movs	r3, #0
 8008554:	220a      	movs	r2, #10
 8008556:	4628      	mov	r0, r5
 8008558:	f000 fe80 	bl	800925c <__multadd>
 800855c:	45b0      	cmp	r8, r6
 800855e:	4683      	mov	fp, r0
 8008560:	f04f 0300 	mov.w	r3, #0
 8008564:	f04f 020a 	mov.w	r2, #10
 8008568:	4641      	mov	r1, r8
 800856a:	4628      	mov	r0, r5
 800856c:	d107      	bne.n	800857e <_dtoa_r+0xb1e>
 800856e:	f000 fe75 	bl	800925c <__multadd>
 8008572:	4680      	mov	r8, r0
 8008574:	4606      	mov	r6, r0
 8008576:	9b08      	ldr	r3, [sp, #32]
 8008578:	3301      	adds	r3, #1
 800857a:	9308      	str	r3, [sp, #32]
 800857c:	e775      	b.n	800846a <_dtoa_r+0xa0a>
 800857e:	f000 fe6d 	bl	800925c <__multadd>
 8008582:	4631      	mov	r1, r6
 8008584:	4680      	mov	r8, r0
 8008586:	2300      	movs	r3, #0
 8008588:	220a      	movs	r2, #10
 800858a:	4628      	mov	r0, r5
 800858c:	f000 fe66 	bl	800925c <__multadd>
 8008590:	4606      	mov	r6, r0
 8008592:	e7f0      	b.n	8008576 <_dtoa_r+0xb16>
 8008594:	f1b9 0f00 	cmp.w	r9, #0
 8008598:	bfcc      	ite	gt
 800859a:	464f      	movgt	r7, r9
 800859c:	2701      	movle	r7, #1
 800859e:	f04f 0800 	mov.w	r8, #0
 80085a2:	9a03      	ldr	r2, [sp, #12]
 80085a4:	4417      	add	r7, r2
 80085a6:	4659      	mov	r1, fp
 80085a8:	2201      	movs	r2, #1
 80085aa:	4628      	mov	r0, r5
 80085ac:	9308      	str	r3, [sp, #32]
 80085ae:	f001 f84b 	bl	8009648 <__lshift>
 80085b2:	4621      	mov	r1, r4
 80085b4:	4683      	mov	fp, r0
 80085b6:	f001 f8b7 	bl	8009728 <__mcmp>
 80085ba:	2800      	cmp	r0, #0
 80085bc:	dcb2      	bgt.n	8008524 <_dtoa_r+0xac4>
 80085be:	d102      	bne.n	80085c6 <_dtoa_r+0xb66>
 80085c0:	9b08      	ldr	r3, [sp, #32]
 80085c2:	07db      	lsls	r3, r3, #31
 80085c4:	d4ae      	bmi.n	8008524 <_dtoa_r+0xac4>
 80085c6:	463b      	mov	r3, r7
 80085c8:	461f      	mov	r7, r3
 80085ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80085ce:	2a30      	cmp	r2, #48	; 0x30
 80085d0:	d0fa      	beq.n	80085c8 <_dtoa_r+0xb68>
 80085d2:	e6f9      	b.n	80083c8 <_dtoa_r+0x968>
 80085d4:	9a03      	ldr	r2, [sp, #12]
 80085d6:	429a      	cmp	r2, r3
 80085d8:	d1a5      	bne.n	8008526 <_dtoa_r+0xac6>
 80085da:	2331      	movs	r3, #49	; 0x31
 80085dc:	f10a 0a01 	add.w	sl, sl, #1
 80085e0:	e779      	b.n	80084d6 <_dtoa_r+0xa76>
 80085e2:	4b14      	ldr	r3, [pc, #80]	; (8008634 <_dtoa_r+0xbd4>)
 80085e4:	f7ff baa8 	b.w	8007b38 <_dtoa_r+0xd8>
 80085e8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	f47f aa81 	bne.w	8007af2 <_dtoa_r+0x92>
 80085f0:	4b11      	ldr	r3, [pc, #68]	; (8008638 <_dtoa_r+0xbd8>)
 80085f2:	f7ff baa1 	b.w	8007b38 <_dtoa_r+0xd8>
 80085f6:	f1b9 0f00 	cmp.w	r9, #0
 80085fa:	dc03      	bgt.n	8008604 <_dtoa_r+0xba4>
 80085fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80085fe:	2b02      	cmp	r3, #2
 8008600:	f73f aecb 	bgt.w	800839a <_dtoa_r+0x93a>
 8008604:	9f03      	ldr	r7, [sp, #12]
 8008606:	4621      	mov	r1, r4
 8008608:	4658      	mov	r0, fp
 800860a:	f7ff f99d 	bl	8007948 <quorem>
 800860e:	9a03      	ldr	r2, [sp, #12]
 8008610:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008614:	f807 3b01 	strb.w	r3, [r7], #1
 8008618:	1aba      	subs	r2, r7, r2
 800861a:	4591      	cmp	r9, r2
 800861c:	ddba      	ble.n	8008594 <_dtoa_r+0xb34>
 800861e:	4659      	mov	r1, fp
 8008620:	2300      	movs	r3, #0
 8008622:	220a      	movs	r2, #10
 8008624:	4628      	mov	r0, r5
 8008626:	f000 fe19 	bl	800925c <__multadd>
 800862a:	4683      	mov	fp, r0
 800862c:	e7eb      	b.n	8008606 <_dtoa_r+0xba6>
 800862e:	bf00      	nop
 8008630:	0800c2f0 	.word	0x0800c2f0
 8008634:	0800c0f4 	.word	0x0800c0f4
 8008638:	0800c271 	.word	0x0800c271

0800863c <__sflush_r>:
 800863c:	898a      	ldrh	r2, [r1, #12]
 800863e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008640:	4605      	mov	r5, r0
 8008642:	0710      	lsls	r0, r2, #28
 8008644:	460c      	mov	r4, r1
 8008646:	d457      	bmi.n	80086f8 <__sflush_r+0xbc>
 8008648:	684b      	ldr	r3, [r1, #4]
 800864a:	2b00      	cmp	r3, #0
 800864c:	dc04      	bgt.n	8008658 <__sflush_r+0x1c>
 800864e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008650:	2b00      	cmp	r3, #0
 8008652:	dc01      	bgt.n	8008658 <__sflush_r+0x1c>
 8008654:	2000      	movs	r0, #0
 8008656:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008658:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800865a:	2e00      	cmp	r6, #0
 800865c:	d0fa      	beq.n	8008654 <__sflush_r+0x18>
 800865e:	2300      	movs	r3, #0
 8008660:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008664:	682f      	ldr	r7, [r5, #0]
 8008666:	602b      	str	r3, [r5, #0]
 8008668:	d032      	beq.n	80086d0 <__sflush_r+0x94>
 800866a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800866c:	89a3      	ldrh	r3, [r4, #12]
 800866e:	075a      	lsls	r2, r3, #29
 8008670:	d505      	bpl.n	800867e <__sflush_r+0x42>
 8008672:	6863      	ldr	r3, [r4, #4]
 8008674:	1ac0      	subs	r0, r0, r3
 8008676:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008678:	b10b      	cbz	r3, 800867e <__sflush_r+0x42>
 800867a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800867c:	1ac0      	subs	r0, r0, r3
 800867e:	2300      	movs	r3, #0
 8008680:	4602      	mov	r2, r0
 8008682:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008684:	4628      	mov	r0, r5
 8008686:	6a21      	ldr	r1, [r4, #32]
 8008688:	47b0      	blx	r6
 800868a:	1c43      	adds	r3, r0, #1
 800868c:	89a3      	ldrh	r3, [r4, #12]
 800868e:	d106      	bne.n	800869e <__sflush_r+0x62>
 8008690:	6829      	ldr	r1, [r5, #0]
 8008692:	291d      	cmp	r1, #29
 8008694:	d82c      	bhi.n	80086f0 <__sflush_r+0xb4>
 8008696:	4a29      	ldr	r2, [pc, #164]	; (800873c <__sflush_r+0x100>)
 8008698:	40ca      	lsrs	r2, r1
 800869a:	07d6      	lsls	r6, r2, #31
 800869c:	d528      	bpl.n	80086f0 <__sflush_r+0xb4>
 800869e:	2200      	movs	r2, #0
 80086a0:	6062      	str	r2, [r4, #4]
 80086a2:	6922      	ldr	r2, [r4, #16]
 80086a4:	04d9      	lsls	r1, r3, #19
 80086a6:	6022      	str	r2, [r4, #0]
 80086a8:	d504      	bpl.n	80086b4 <__sflush_r+0x78>
 80086aa:	1c42      	adds	r2, r0, #1
 80086ac:	d101      	bne.n	80086b2 <__sflush_r+0x76>
 80086ae:	682b      	ldr	r3, [r5, #0]
 80086b0:	b903      	cbnz	r3, 80086b4 <__sflush_r+0x78>
 80086b2:	6560      	str	r0, [r4, #84]	; 0x54
 80086b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80086b6:	602f      	str	r7, [r5, #0]
 80086b8:	2900      	cmp	r1, #0
 80086ba:	d0cb      	beq.n	8008654 <__sflush_r+0x18>
 80086bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80086c0:	4299      	cmp	r1, r3
 80086c2:	d002      	beq.n	80086ca <__sflush_r+0x8e>
 80086c4:	4628      	mov	r0, r5
 80086c6:	f001 fa33 	bl	8009b30 <_free_r>
 80086ca:	2000      	movs	r0, #0
 80086cc:	6360      	str	r0, [r4, #52]	; 0x34
 80086ce:	e7c2      	b.n	8008656 <__sflush_r+0x1a>
 80086d0:	6a21      	ldr	r1, [r4, #32]
 80086d2:	2301      	movs	r3, #1
 80086d4:	4628      	mov	r0, r5
 80086d6:	47b0      	blx	r6
 80086d8:	1c41      	adds	r1, r0, #1
 80086da:	d1c7      	bne.n	800866c <__sflush_r+0x30>
 80086dc:	682b      	ldr	r3, [r5, #0]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d0c4      	beq.n	800866c <__sflush_r+0x30>
 80086e2:	2b1d      	cmp	r3, #29
 80086e4:	d001      	beq.n	80086ea <__sflush_r+0xae>
 80086e6:	2b16      	cmp	r3, #22
 80086e8:	d101      	bne.n	80086ee <__sflush_r+0xb2>
 80086ea:	602f      	str	r7, [r5, #0]
 80086ec:	e7b2      	b.n	8008654 <__sflush_r+0x18>
 80086ee:	89a3      	ldrh	r3, [r4, #12]
 80086f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086f4:	81a3      	strh	r3, [r4, #12]
 80086f6:	e7ae      	b.n	8008656 <__sflush_r+0x1a>
 80086f8:	690f      	ldr	r7, [r1, #16]
 80086fa:	2f00      	cmp	r7, #0
 80086fc:	d0aa      	beq.n	8008654 <__sflush_r+0x18>
 80086fe:	0793      	lsls	r3, r2, #30
 8008700:	bf18      	it	ne
 8008702:	2300      	movne	r3, #0
 8008704:	680e      	ldr	r6, [r1, #0]
 8008706:	bf08      	it	eq
 8008708:	694b      	ldreq	r3, [r1, #20]
 800870a:	1bf6      	subs	r6, r6, r7
 800870c:	600f      	str	r7, [r1, #0]
 800870e:	608b      	str	r3, [r1, #8]
 8008710:	2e00      	cmp	r6, #0
 8008712:	dd9f      	ble.n	8008654 <__sflush_r+0x18>
 8008714:	4633      	mov	r3, r6
 8008716:	463a      	mov	r2, r7
 8008718:	4628      	mov	r0, r5
 800871a:	6a21      	ldr	r1, [r4, #32]
 800871c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008720:	47e0      	blx	ip
 8008722:	2800      	cmp	r0, #0
 8008724:	dc06      	bgt.n	8008734 <__sflush_r+0xf8>
 8008726:	89a3      	ldrh	r3, [r4, #12]
 8008728:	f04f 30ff 	mov.w	r0, #4294967295
 800872c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008730:	81a3      	strh	r3, [r4, #12]
 8008732:	e790      	b.n	8008656 <__sflush_r+0x1a>
 8008734:	4407      	add	r7, r0
 8008736:	1a36      	subs	r6, r6, r0
 8008738:	e7ea      	b.n	8008710 <__sflush_r+0xd4>
 800873a:	bf00      	nop
 800873c:	20400001 	.word	0x20400001

08008740 <_fflush_r>:
 8008740:	b538      	push	{r3, r4, r5, lr}
 8008742:	690b      	ldr	r3, [r1, #16]
 8008744:	4605      	mov	r5, r0
 8008746:	460c      	mov	r4, r1
 8008748:	b913      	cbnz	r3, 8008750 <_fflush_r+0x10>
 800874a:	2500      	movs	r5, #0
 800874c:	4628      	mov	r0, r5
 800874e:	bd38      	pop	{r3, r4, r5, pc}
 8008750:	b118      	cbz	r0, 800875a <_fflush_r+0x1a>
 8008752:	6983      	ldr	r3, [r0, #24]
 8008754:	b90b      	cbnz	r3, 800875a <_fflush_r+0x1a>
 8008756:	f000 f887 	bl	8008868 <__sinit>
 800875a:	4b14      	ldr	r3, [pc, #80]	; (80087ac <_fflush_r+0x6c>)
 800875c:	429c      	cmp	r4, r3
 800875e:	d11b      	bne.n	8008798 <_fflush_r+0x58>
 8008760:	686c      	ldr	r4, [r5, #4]
 8008762:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d0ef      	beq.n	800874a <_fflush_r+0xa>
 800876a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800876c:	07d0      	lsls	r0, r2, #31
 800876e:	d404      	bmi.n	800877a <_fflush_r+0x3a>
 8008770:	0599      	lsls	r1, r3, #22
 8008772:	d402      	bmi.n	800877a <_fflush_r+0x3a>
 8008774:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008776:	f000 fc80 	bl	800907a <__retarget_lock_acquire_recursive>
 800877a:	4628      	mov	r0, r5
 800877c:	4621      	mov	r1, r4
 800877e:	f7ff ff5d 	bl	800863c <__sflush_r>
 8008782:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008784:	4605      	mov	r5, r0
 8008786:	07da      	lsls	r2, r3, #31
 8008788:	d4e0      	bmi.n	800874c <_fflush_r+0xc>
 800878a:	89a3      	ldrh	r3, [r4, #12]
 800878c:	059b      	lsls	r3, r3, #22
 800878e:	d4dd      	bmi.n	800874c <_fflush_r+0xc>
 8008790:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008792:	f000 fc73 	bl	800907c <__retarget_lock_release_recursive>
 8008796:	e7d9      	b.n	800874c <_fflush_r+0xc>
 8008798:	4b05      	ldr	r3, [pc, #20]	; (80087b0 <_fflush_r+0x70>)
 800879a:	429c      	cmp	r4, r3
 800879c:	d101      	bne.n	80087a2 <_fflush_r+0x62>
 800879e:	68ac      	ldr	r4, [r5, #8]
 80087a0:	e7df      	b.n	8008762 <_fflush_r+0x22>
 80087a2:	4b04      	ldr	r3, [pc, #16]	; (80087b4 <_fflush_r+0x74>)
 80087a4:	429c      	cmp	r4, r3
 80087a6:	bf08      	it	eq
 80087a8:	68ec      	ldreq	r4, [r5, #12]
 80087aa:	e7da      	b.n	8008762 <_fflush_r+0x22>
 80087ac:	0800c324 	.word	0x0800c324
 80087b0:	0800c344 	.word	0x0800c344
 80087b4:	0800c304 	.word	0x0800c304

080087b8 <std>:
 80087b8:	2300      	movs	r3, #0
 80087ba:	b510      	push	{r4, lr}
 80087bc:	4604      	mov	r4, r0
 80087be:	e9c0 3300 	strd	r3, r3, [r0]
 80087c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80087c6:	6083      	str	r3, [r0, #8]
 80087c8:	8181      	strh	r1, [r0, #12]
 80087ca:	6643      	str	r3, [r0, #100]	; 0x64
 80087cc:	81c2      	strh	r2, [r0, #14]
 80087ce:	6183      	str	r3, [r0, #24]
 80087d0:	4619      	mov	r1, r3
 80087d2:	2208      	movs	r2, #8
 80087d4:	305c      	adds	r0, #92	; 0x5c
 80087d6:	f7fd fa4d 	bl	8005c74 <memset>
 80087da:	4b05      	ldr	r3, [pc, #20]	; (80087f0 <std+0x38>)
 80087dc:	6224      	str	r4, [r4, #32]
 80087de:	6263      	str	r3, [r4, #36]	; 0x24
 80087e0:	4b04      	ldr	r3, [pc, #16]	; (80087f4 <std+0x3c>)
 80087e2:	62a3      	str	r3, [r4, #40]	; 0x28
 80087e4:	4b04      	ldr	r3, [pc, #16]	; (80087f8 <std+0x40>)
 80087e6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80087e8:	4b04      	ldr	r3, [pc, #16]	; (80087fc <std+0x44>)
 80087ea:	6323      	str	r3, [r4, #48]	; 0x30
 80087ec:	bd10      	pop	{r4, pc}
 80087ee:	bf00      	nop
 80087f0:	08009fcd 	.word	0x08009fcd
 80087f4:	08009fef 	.word	0x08009fef
 80087f8:	0800a027 	.word	0x0800a027
 80087fc:	0800a04b 	.word	0x0800a04b

08008800 <_cleanup_r>:
 8008800:	4901      	ldr	r1, [pc, #4]	; (8008808 <_cleanup_r+0x8>)
 8008802:	f000 b8af 	b.w	8008964 <_fwalk_reent>
 8008806:	bf00      	nop
 8008808:	08008741 	.word	0x08008741

0800880c <__sfmoreglue>:
 800880c:	2268      	movs	r2, #104	; 0x68
 800880e:	b570      	push	{r4, r5, r6, lr}
 8008810:	1e4d      	subs	r5, r1, #1
 8008812:	4355      	muls	r5, r2
 8008814:	460e      	mov	r6, r1
 8008816:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800881a:	f001 f9f1 	bl	8009c00 <_malloc_r>
 800881e:	4604      	mov	r4, r0
 8008820:	b140      	cbz	r0, 8008834 <__sfmoreglue+0x28>
 8008822:	2100      	movs	r1, #0
 8008824:	e9c0 1600 	strd	r1, r6, [r0]
 8008828:	300c      	adds	r0, #12
 800882a:	60a0      	str	r0, [r4, #8]
 800882c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008830:	f7fd fa20 	bl	8005c74 <memset>
 8008834:	4620      	mov	r0, r4
 8008836:	bd70      	pop	{r4, r5, r6, pc}

08008838 <__sfp_lock_acquire>:
 8008838:	4801      	ldr	r0, [pc, #4]	; (8008840 <__sfp_lock_acquire+0x8>)
 800883a:	f000 bc1e 	b.w	800907a <__retarget_lock_acquire_recursive>
 800883e:	bf00      	nop
 8008840:	20000b9d 	.word	0x20000b9d

08008844 <__sfp_lock_release>:
 8008844:	4801      	ldr	r0, [pc, #4]	; (800884c <__sfp_lock_release+0x8>)
 8008846:	f000 bc19 	b.w	800907c <__retarget_lock_release_recursive>
 800884a:	bf00      	nop
 800884c:	20000b9d 	.word	0x20000b9d

08008850 <__sinit_lock_acquire>:
 8008850:	4801      	ldr	r0, [pc, #4]	; (8008858 <__sinit_lock_acquire+0x8>)
 8008852:	f000 bc12 	b.w	800907a <__retarget_lock_acquire_recursive>
 8008856:	bf00      	nop
 8008858:	20000b9e 	.word	0x20000b9e

0800885c <__sinit_lock_release>:
 800885c:	4801      	ldr	r0, [pc, #4]	; (8008864 <__sinit_lock_release+0x8>)
 800885e:	f000 bc0d 	b.w	800907c <__retarget_lock_release_recursive>
 8008862:	bf00      	nop
 8008864:	20000b9e 	.word	0x20000b9e

08008868 <__sinit>:
 8008868:	b510      	push	{r4, lr}
 800886a:	4604      	mov	r4, r0
 800886c:	f7ff fff0 	bl	8008850 <__sinit_lock_acquire>
 8008870:	69a3      	ldr	r3, [r4, #24]
 8008872:	b11b      	cbz	r3, 800887c <__sinit+0x14>
 8008874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008878:	f7ff bff0 	b.w	800885c <__sinit_lock_release>
 800887c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008880:	6523      	str	r3, [r4, #80]	; 0x50
 8008882:	4b13      	ldr	r3, [pc, #76]	; (80088d0 <__sinit+0x68>)
 8008884:	4a13      	ldr	r2, [pc, #76]	; (80088d4 <__sinit+0x6c>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	62a2      	str	r2, [r4, #40]	; 0x28
 800888a:	42a3      	cmp	r3, r4
 800888c:	bf08      	it	eq
 800888e:	2301      	moveq	r3, #1
 8008890:	4620      	mov	r0, r4
 8008892:	bf08      	it	eq
 8008894:	61a3      	streq	r3, [r4, #24]
 8008896:	f000 f81f 	bl	80088d8 <__sfp>
 800889a:	6060      	str	r0, [r4, #4]
 800889c:	4620      	mov	r0, r4
 800889e:	f000 f81b 	bl	80088d8 <__sfp>
 80088a2:	60a0      	str	r0, [r4, #8]
 80088a4:	4620      	mov	r0, r4
 80088a6:	f000 f817 	bl	80088d8 <__sfp>
 80088aa:	2200      	movs	r2, #0
 80088ac:	2104      	movs	r1, #4
 80088ae:	60e0      	str	r0, [r4, #12]
 80088b0:	6860      	ldr	r0, [r4, #4]
 80088b2:	f7ff ff81 	bl	80087b8 <std>
 80088b6:	2201      	movs	r2, #1
 80088b8:	2109      	movs	r1, #9
 80088ba:	68a0      	ldr	r0, [r4, #8]
 80088bc:	f7ff ff7c 	bl	80087b8 <std>
 80088c0:	2202      	movs	r2, #2
 80088c2:	2112      	movs	r1, #18
 80088c4:	68e0      	ldr	r0, [r4, #12]
 80088c6:	f7ff ff77 	bl	80087b8 <std>
 80088ca:	2301      	movs	r3, #1
 80088cc:	61a3      	str	r3, [r4, #24]
 80088ce:	e7d1      	b.n	8008874 <__sinit+0xc>
 80088d0:	0800c0e0 	.word	0x0800c0e0
 80088d4:	08008801 	.word	0x08008801

080088d8 <__sfp>:
 80088d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088da:	4607      	mov	r7, r0
 80088dc:	f7ff ffac 	bl	8008838 <__sfp_lock_acquire>
 80088e0:	4b1e      	ldr	r3, [pc, #120]	; (800895c <__sfp+0x84>)
 80088e2:	681e      	ldr	r6, [r3, #0]
 80088e4:	69b3      	ldr	r3, [r6, #24]
 80088e6:	b913      	cbnz	r3, 80088ee <__sfp+0x16>
 80088e8:	4630      	mov	r0, r6
 80088ea:	f7ff ffbd 	bl	8008868 <__sinit>
 80088ee:	3648      	adds	r6, #72	; 0x48
 80088f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80088f4:	3b01      	subs	r3, #1
 80088f6:	d503      	bpl.n	8008900 <__sfp+0x28>
 80088f8:	6833      	ldr	r3, [r6, #0]
 80088fa:	b30b      	cbz	r3, 8008940 <__sfp+0x68>
 80088fc:	6836      	ldr	r6, [r6, #0]
 80088fe:	e7f7      	b.n	80088f0 <__sfp+0x18>
 8008900:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008904:	b9d5      	cbnz	r5, 800893c <__sfp+0x64>
 8008906:	4b16      	ldr	r3, [pc, #88]	; (8008960 <__sfp+0x88>)
 8008908:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800890c:	60e3      	str	r3, [r4, #12]
 800890e:	6665      	str	r5, [r4, #100]	; 0x64
 8008910:	f000 fbb2 	bl	8009078 <__retarget_lock_init_recursive>
 8008914:	f7ff ff96 	bl	8008844 <__sfp_lock_release>
 8008918:	2208      	movs	r2, #8
 800891a:	4629      	mov	r1, r5
 800891c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008920:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008924:	6025      	str	r5, [r4, #0]
 8008926:	61a5      	str	r5, [r4, #24]
 8008928:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800892c:	f7fd f9a2 	bl	8005c74 <memset>
 8008930:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008934:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008938:	4620      	mov	r0, r4
 800893a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800893c:	3468      	adds	r4, #104	; 0x68
 800893e:	e7d9      	b.n	80088f4 <__sfp+0x1c>
 8008940:	2104      	movs	r1, #4
 8008942:	4638      	mov	r0, r7
 8008944:	f7ff ff62 	bl	800880c <__sfmoreglue>
 8008948:	4604      	mov	r4, r0
 800894a:	6030      	str	r0, [r6, #0]
 800894c:	2800      	cmp	r0, #0
 800894e:	d1d5      	bne.n	80088fc <__sfp+0x24>
 8008950:	f7ff ff78 	bl	8008844 <__sfp_lock_release>
 8008954:	230c      	movs	r3, #12
 8008956:	603b      	str	r3, [r7, #0]
 8008958:	e7ee      	b.n	8008938 <__sfp+0x60>
 800895a:	bf00      	nop
 800895c:	0800c0e0 	.word	0x0800c0e0
 8008960:	ffff0001 	.word	0xffff0001

08008964 <_fwalk_reent>:
 8008964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008968:	4606      	mov	r6, r0
 800896a:	4688      	mov	r8, r1
 800896c:	2700      	movs	r7, #0
 800896e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008972:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008976:	f1b9 0901 	subs.w	r9, r9, #1
 800897a:	d505      	bpl.n	8008988 <_fwalk_reent+0x24>
 800897c:	6824      	ldr	r4, [r4, #0]
 800897e:	2c00      	cmp	r4, #0
 8008980:	d1f7      	bne.n	8008972 <_fwalk_reent+0xe>
 8008982:	4638      	mov	r0, r7
 8008984:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008988:	89ab      	ldrh	r3, [r5, #12]
 800898a:	2b01      	cmp	r3, #1
 800898c:	d907      	bls.n	800899e <_fwalk_reent+0x3a>
 800898e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008992:	3301      	adds	r3, #1
 8008994:	d003      	beq.n	800899e <_fwalk_reent+0x3a>
 8008996:	4629      	mov	r1, r5
 8008998:	4630      	mov	r0, r6
 800899a:	47c0      	blx	r8
 800899c:	4307      	orrs	r7, r0
 800899e:	3568      	adds	r5, #104	; 0x68
 80089a0:	e7e9      	b.n	8008976 <_fwalk_reent+0x12>

080089a2 <rshift>:
 80089a2:	6903      	ldr	r3, [r0, #16]
 80089a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80089a8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80089ac:	f100 0414 	add.w	r4, r0, #20
 80089b0:	ea4f 1261 	mov.w	r2, r1, asr #5
 80089b4:	dd46      	ble.n	8008a44 <rshift+0xa2>
 80089b6:	f011 011f 	ands.w	r1, r1, #31
 80089ba:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80089be:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80089c2:	d10c      	bne.n	80089de <rshift+0x3c>
 80089c4:	4629      	mov	r1, r5
 80089c6:	f100 0710 	add.w	r7, r0, #16
 80089ca:	42b1      	cmp	r1, r6
 80089cc:	d335      	bcc.n	8008a3a <rshift+0x98>
 80089ce:	1a9b      	subs	r3, r3, r2
 80089d0:	009b      	lsls	r3, r3, #2
 80089d2:	1eea      	subs	r2, r5, #3
 80089d4:	4296      	cmp	r6, r2
 80089d6:	bf38      	it	cc
 80089d8:	2300      	movcc	r3, #0
 80089da:	4423      	add	r3, r4
 80089dc:	e015      	b.n	8008a0a <rshift+0x68>
 80089de:	46a1      	mov	r9, r4
 80089e0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80089e4:	f1c1 0820 	rsb	r8, r1, #32
 80089e8:	40cf      	lsrs	r7, r1
 80089ea:	f105 0e04 	add.w	lr, r5, #4
 80089ee:	4576      	cmp	r6, lr
 80089f0:	46f4      	mov	ip, lr
 80089f2:	d816      	bhi.n	8008a22 <rshift+0x80>
 80089f4:	1a9a      	subs	r2, r3, r2
 80089f6:	0092      	lsls	r2, r2, #2
 80089f8:	3a04      	subs	r2, #4
 80089fa:	3501      	adds	r5, #1
 80089fc:	42ae      	cmp	r6, r5
 80089fe:	bf38      	it	cc
 8008a00:	2200      	movcc	r2, #0
 8008a02:	18a3      	adds	r3, r4, r2
 8008a04:	50a7      	str	r7, [r4, r2]
 8008a06:	b107      	cbz	r7, 8008a0a <rshift+0x68>
 8008a08:	3304      	adds	r3, #4
 8008a0a:	42a3      	cmp	r3, r4
 8008a0c:	eba3 0204 	sub.w	r2, r3, r4
 8008a10:	bf08      	it	eq
 8008a12:	2300      	moveq	r3, #0
 8008a14:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008a18:	6102      	str	r2, [r0, #16]
 8008a1a:	bf08      	it	eq
 8008a1c:	6143      	streq	r3, [r0, #20]
 8008a1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008a22:	f8dc c000 	ldr.w	ip, [ip]
 8008a26:	fa0c fc08 	lsl.w	ip, ip, r8
 8008a2a:	ea4c 0707 	orr.w	r7, ip, r7
 8008a2e:	f849 7b04 	str.w	r7, [r9], #4
 8008a32:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008a36:	40cf      	lsrs	r7, r1
 8008a38:	e7d9      	b.n	80089ee <rshift+0x4c>
 8008a3a:	f851 cb04 	ldr.w	ip, [r1], #4
 8008a3e:	f847 cf04 	str.w	ip, [r7, #4]!
 8008a42:	e7c2      	b.n	80089ca <rshift+0x28>
 8008a44:	4623      	mov	r3, r4
 8008a46:	e7e0      	b.n	8008a0a <rshift+0x68>

08008a48 <__hexdig_fun>:
 8008a48:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008a4c:	2b09      	cmp	r3, #9
 8008a4e:	d802      	bhi.n	8008a56 <__hexdig_fun+0xe>
 8008a50:	3820      	subs	r0, #32
 8008a52:	b2c0      	uxtb	r0, r0
 8008a54:	4770      	bx	lr
 8008a56:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008a5a:	2b05      	cmp	r3, #5
 8008a5c:	d801      	bhi.n	8008a62 <__hexdig_fun+0x1a>
 8008a5e:	3847      	subs	r0, #71	; 0x47
 8008a60:	e7f7      	b.n	8008a52 <__hexdig_fun+0xa>
 8008a62:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008a66:	2b05      	cmp	r3, #5
 8008a68:	d801      	bhi.n	8008a6e <__hexdig_fun+0x26>
 8008a6a:	3827      	subs	r0, #39	; 0x27
 8008a6c:	e7f1      	b.n	8008a52 <__hexdig_fun+0xa>
 8008a6e:	2000      	movs	r0, #0
 8008a70:	4770      	bx	lr
	...

08008a74 <__gethex>:
 8008a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a78:	b08b      	sub	sp, #44	; 0x2c
 8008a7a:	9305      	str	r3, [sp, #20]
 8008a7c:	4bb2      	ldr	r3, [pc, #712]	; (8008d48 <__gethex+0x2d4>)
 8008a7e:	9002      	str	r0, [sp, #8]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	468b      	mov	fp, r1
 8008a84:	4618      	mov	r0, r3
 8008a86:	4690      	mov	r8, r2
 8008a88:	9303      	str	r3, [sp, #12]
 8008a8a:	f7f7 fb61 	bl	8000150 <strlen>
 8008a8e:	4682      	mov	sl, r0
 8008a90:	9b03      	ldr	r3, [sp, #12]
 8008a92:	f8db 2000 	ldr.w	r2, [fp]
 8008a96:	4403      	add	r3, r0
 8008a98:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008a9c:	9306      	str	r3, [sp, #24]
 8008a9e:	1c93      	adds	r3, r2, #2
 8008aa0:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008aa4:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008aa8:	32fe      	adds	r2, #254	; 0xfe
 8008aaa:	18d1      	adds	r1, r2, r3
 8008aac:	461f      	mov	r7, r3
 8008aae:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008ab2:	9101      	str	r1, [sp, #4]
 8008ab4:	2830      	cmp	r0, #48	; 0x30
 8008ab6:	d0f8      	beq.n	8008aaa <__gethex+0x36>
 8008ab8:	f7ff ffc6 	bl	8008a48 <__hexdig_fun>
 8008abc:	4604      	mov	r4, r0
 8008abe:	2800      	cmp	r0, #0
 8008ac0:	d13a      	bne.n	8008b38 <__gethex+0xc4>
 8008ac2:	4652      	mov	r2, sl
 8008ac4:	4638      	mov	r0, r7
 8008ac6:	9903      	ldr	r1, [sp, #12]
 8008ac8:	f001 fac3 	bl	800a052 <strncmp>
 8008acc:	4605      	mov	r5, r0
 8008ace:	2800      	cmp	r0, #0
 8008ad0:	d166      	bne.n	8008ba0 <__gethex+0x12c>
 8008ad2:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008ad6:	eb07 060a 	add.w	r6, r7, sl
 8008ada:	f7ff ffb5 	bl	8008a48 <__hexdig_fun>
 8008ade:	2800      	cmp	r0, #0
 8008ae0:	d060      	beq.n	8008ba4 <__gethex+0x130>
 8008ae2:	4633      	mov	r3, r6
 8008ae4:	7818      	ldrb	r0, [r3, #0]
 8008ae6:	461f      	mov	r7, r3
 8008ae8:	2830      	cmp	r0, #48	; 0x30
 8008aea:	f103 0301 	add.w	r3, r3, #1
 8008aee:	d0f9      	beq.n	8008ae4 <__gethex+0x70>
 8008af0:	f7ff ffaa 	bl	8008a48 <__hexdig_fun>
 8008af4:	2301      	movs	r3, #1
 8008af6:	fab0 f480 	clz	r4, r0
 8008afa:	4635      	mov	r5, r6
 8008afc:	0964      	lsrs	r4, r4, #5
 8008afe:	9301      	str	r3, [sp, #4]
 8008b00:	463a      	mov	r2, r7
 8008b02:	4616      	mov	r6, r2
 8008b04:	7830      	ldrb	r0, [r6, #0]
 8008b06:	3201      	adds	r2, #1
 8008b08:	f7ff ff9e 	bl	8008a48 <__hexdig_fun>
 8008b0c:	2800      	cmp	r0, #0
 8008b0e:	d1f8      	bne.n	8008b02 <__gethex+0x8e>
 8008b10:	4652      	mov	r2, sl
 8008b12:	4630      	mov	r0, r6
 8008b14:	9903      	ldr	r1, [sp, #12]
 8008b16:	f001 fa9c 	bl	800a052 <strncmp>
 8008b1a:	b980      	cbnz	r0, 8008b3e <__gethex+0xca>
 8008b1c:	b94d      	cbnz	r5, 8008b32 <__gethex+0xbe>
 8008b1e:	eb06 050a 	add.w	r5, r6, sl
 8008b22:	462a      	mov	r2, r5
 8008b24:	4616      	mov	r6, r2
 8008b26:	7830      	ldrb	r0, [r6, #0]
 8008b28:	3201      	adds	r2, #1
 8008b2a:	f7ff ff8d 	bl	8008a48 <__hexdig_fun>
 8008b2e:	2800      	cmp	r0, #0
 8008b30:	d1f8      	bne.n	8008b24 <__gethex+0xb0>
 8008b32:	1bad      	subs	r5, r5, r6
 8008b34:	00ad      	lsls	r5, r5, #2
 8008b36:	e004      	b.n	8008b42 <__gethex+0xce>
 8008b38:	2400      	movs	r4, #0
 8008b3a:	4625      	mov	r5, r4
 8008b3c:	e7e0      	b.n	8008b00 <__gethex+0x8c>
 8008b3e:	2d00      	cmp	r5, #0
 8008b40:	d1f7      	bne.n	8008b32 <__gethex+0xbe>
 8008b42:	7833      	ldrb	r3, [r6, #0]
 8008b44:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008b48:	2b50      	cmp	r3, #80	; 0x50
 8008b4a:	d139      	bne.n	8008bc0 <__gethex+0x14c>
 8008b4c:	7873      	ldrb	r3, [r6, #1]
 8008b4e:	2b2b      	cmp	r3, #43	; 0x2b
 8008b50:	d02a      	beq.n	8008ba8 <__gethex+0x134>
 8008b52:	2b2d      	cmp	r3, #45	; 0x2d
 8008b54:	d02c      	beq.n	8008bb0 <__gethex+0x13c>
 8008b56:	f04f 0900 	mov.w	r9, #0
 8008b5a:	1c71      	adds	r1, r6, #1
 8008b5c:	7808      	ldrb	r0, [r1, #0]
 8008b5e:	f7ff ff73 	bl	8008a48 <__hexdig_fun>
 8008b62:	1e43      	subs	r3, r0, #1
 8008b64:	b2db      	uxtb	r3, r3
 8008b66:	2b18      	cmp	r3, #24
 8008b68:	d82a      	bhi.n	8008bc0 <__gethex+0x14c>
 8008b6a:	f1a0 0210 	sub.w	r2, r0, #16
 8008b6e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008b72:	f7ff ff69 	bl	8008a48 <__hexdig_fun>
 8008b76:	1e43      	subs	r3, r0, #1
 8008b78:	b2db      	uxtb	r3, r3
 8008b7a:	2b18      	cmp	r3, #24
 8008b7c:	d91b      	bls.n	8008bb6 <__gethex+0x142>
 8008b7e:	f1b9 0f00 	cmp.w	r9, #0
 8008b82:	d000      	beq.n	8008b86 <__gethex+0x112>
 8008b84:	4252      	negs	r2, r2
 8008b86:	4415      	add	r5, r2
 8008b88:	f8cb 1000 	str.w	r1, [fp]
 8008b8c:	b1d4      	cbz	r4, 8008bc4 <__gethex+0x150>
 8008b8e:	9b01      	ldr	r3, [sp, #4]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	bf14      	ite	ne
 8008b94:	2700      	movne	r7, #0
 8008b96:	2706      	moveq	r7, #6
 8008b98:	4638      	mov	r0, r7
 8008b9a:	b00b      	add	sp, #44	; 0x2c
 8008b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ba0:	463e      	mov	r6, r7
 8008ba2:	4625      	mov	r5, r4
 8008ba4:	2401      	movs	r4, #1
 8008ba6:	e7cc      	b.n	8008b42 <__gethex+0xce>
 8008ba8:	f04f 0900 	mov.w	r9, #0
 8008bac:	1cb1      	adds	r1, r6, #2
 8008bae:	e7d5      	b.n	8008b5c <__gethex+0xe8>
 8008bb0:	f04f 0901 	mov.w	r9, #1
 8008bb4:	e7fa      	b.n	8008bac <__gethex+0x138>
 8008bb6:	230a      	movs	r3, #10
 8008bb8:	fb03 0202 	mla	r2, r3, r2, r0
 8008bbc:	3a10      	subs	r2, #16
 8008bbe:	e7d6      	b.n	8008b6e <__gethex+0xfa>
 8008bc0:	4631      	mov	r1, r6
 8008bc2:	e7e1      	b.n	8008b88 <__gethex+0x114>
 8008bc4:	4621      	mov	r1, r4
 8008bc6:	1bf3      	subs	r3, r6, r7
 8008bc8:	3b01      	subs	r3, #1
 8008bca:	2b07      	cmp	r3, #7
 8008bcc:	dc0a      	bgt.n	8008be4 <__gethex+0x170>
 8008bce:	9802      	ldr	r0, [sp, #8]
 8008bd0:	f000 fae2 	bl	8009198 <_Balloc>
 8008bd4:	4604      	mov	r4, r0
 8008bd6:	b940      	cbnz	r0, 8008bea <__gethex+0x176>
 8008bd8:	4602      	mov	r2, r0
 8008bda:	21de      	movs	r1, #222	; 0xde
 8008bdc:	4b5b      	ldr	r3, [pc, #364]	; (8008d4c <__gethex+0x2d8>)
 8008bde:	485c      	ldr	r0, [pc, #368]	; (8008d50 <__gethex+0x2dc>)
 8008be0:	f001 fa6a 	bl	800a0b8 <__assert_func>
 8008be4:	3101      	adds	r1, #1
 8008be6:	105b      	asrs	r3, r3, #1
 8008be8:	e7ef      	b.n	8008bca <__gethex+0x156>
 8008bea:	f04f 0b00 	mov.w	fp, #0
 8008bee:	f100 0914 	add.w	r9, r0, #20
 8008bf2:	f1ca 0301 	rsb	r3, sl, #1
 8008bf6:	f8cd 9010 	str.w	r9, [sp, #16]
 8008bfa:	f8cd b004 	str.w	fp, [sp, #4]
 8008bfe:	9308      	str	r3, [sp, #32]
 8008c00:	42b7      	cmp	r7, r6
 8008c02:	d33f      	bcc.n	8008c84 <__gethex+0x210>
 8008c04:	9f04      	ldr	r7, [sp, #16]
 8008c06:	9b01      	ldr	r3, [sp, #4]
 8008c08:	f847 3b04 	str.w	r3, [r7], #4
 8008c0c:	eba7 0709 	sub.w	r7, r7, r9
 8008c10:	10bf      	asrs	r7, r7, #2
 8008c12:	6127      	str	r7, [r4, #16]
 8008c14:	4618      	mov	r0, r3
 8008c16:	f000 fbb1 	bl	800937c <__hi0bits>
 8008c1a:	017f      	lsls	r7, r7, #5
 8008c1c:	f8d8 6000 	ldr.w	r6, [r8]
 8008c20:	1a3f      	subs	r7, r7, r0
 8008c22:	42b7      	cmp	r7, r6
 8008c24:	dd62      	ble.n	8008cec <__gethex+0x278>
 8008c26:	1bbf      	subs	r7, r7, r6
 8008c28:	4639      	mov	r1, r7
 8008c2a:	4620      	mov	r0, r4
 8008c2c:	f000 ff4b 	bl	8009ac6 <__any_on>
 8008c30:	4682      	mov	sl, r0
 8008c32:	b1a8      	cbz	r0, 8008c60 <__gethex+0x1ec>
 8008c34:	f04f 0a01 	mov.w	sl, #1
 8008c38:	1e7b      	subs	r3, r7, #1
 8008c3a:	1159      	asrs	r1, r3, #5
 8008c3c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008c40:	f003 021f 	and.w	r2, r3, #31
 8008c44:	fa0a f202 	lsl.w	r2, sl, r2
 8008c48:	420a      	tst	r2, r1
 8008c4a:	d009      	beq.n	8008c60 <__gethex+0x1ec>
 8008c4c:	4553      	cmp	r3, sl
 8008c4e:	dd05      	ble.n	8008c5c <__gethex+0x1e8>
 8008c50:	4620      	mov	r0, r4
 8008c52:	1eb9      	subs	r1, r7, #2
 8008c54:	f000 ff37 	bl	8009ac6 <__any_on>
 8008c58:	2800      	cmp	r0, #0
 8008c5a:	d144      	bne.n	8008ce6 <__gethex+0x272>
 8008c5c:	f04f 0a02 	mov.w	sl, #2
 8008c60:	4639      	mov	r1, r7
 8008c62:	4620      	mov	r0, r4
 8008c64:	f7ff fe9d 	bl	80089a2 <rshift>
 8008c68:	443d      	add	r5, r7
 8008c6a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008c6e:	42ab      	cmp	r3, r5
 8008c70:	da4a      	bge.n	8008d08 <__gethex+0x294>
 8008c72:	4621      	mov	r1, r4
 8008c74:	9802      	ldr	r0, [sp, #8]
 8008c76:	f000 facf 	bl	8009218 <_Bfree>
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008c7e:	27a3      	movs	r7, #163	; 0xa3
 8008c80:	6013      	str	r3, [r2, #0]
 8008c82:	e789      	b.n	8008b98 <__gethex+0x124>
 8008c84:	1e73      	subs	r3, r6, #1
 8008c86:	9a06      	ldr	r2, [sp, #24]
 8008c88:	9307      	str	r3, [sp, #28]
 8008c8a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d019      	beq.n	8008cc6 <__gethex+0x252>
 8008c92:	f1bb 0f20 	cmp.w	fp, #32
 8008c96:	d107      	bne.n	8008ca8 <__gethex+0x234>
 8008c98:	9b04      	ldr	r3, [sp, #16]
 8008c9a:	9a01      	ldr	r2, [sp, #4]
 8008c9c:	f843 2b04 	str.w	r2, [r3], #4
 8008ca0:	9304      	str	r3, [sp, #16]
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	469b      	mov	fp, r3
 8008ca6:	9301      	str	r3, [sp, #4]
 8008ca8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008cac:	f7ff fecc 	bl	8008a48 <__hexdig_fun>
 8008cb0:	9b01      	ldr	r3, [sp, #4]
 8008cb2:	f000 000f 	and.w	r0, r0, #15
 8008cb6:	fa00 f00b 	lsl.w	r0, r0, fp
 8008cba:	4303      	orrs	r3, r0
 8008cbc:	9301      	str	r3, [sp, #4]
 8008cbe:	f10b 0b04 	add.w	fp, fp, #4
 8008cc2:	9b07      	ldr	r3, [sp, #28]
 8008cc4:	e00d      	b.n	8008ce2 <__gethex+0x26e>
 8008cc6:	9a08      	ldr	r2, [sp, #32]
 8008cc8:	1e73      	subs	r3, r6, #1
 8008cca:	4413      	add	r3, r2
 8008ccc:	42bb      	cmp	r3, r7
 8008cce:	d3e0      	bcc.n	8008c92 <__gethex+0x21e>
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	4652      	mov	r2, sl
 8008cd4:	9903      	ldr	r1, [sp, #12]
 8008cd6:	9309      	str	r3, [sp, #36]	; 0x24
 8008cd8:	f001 f9bb 	bl	800a052 <strncmp>
 8008cdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cde:	2800      	cmp	r0, #0
 8008ce0:	d1d7      	bne.n	8008c92 <__gethex+0x21e>
 8008ce2:	461e      	mov	r6, r3
 8008ce4:	e78c      	b.n	8008c00 <__gethex+0x18c>
 8008ce6:	f04f 0a03 	mov.w	sl, #3
 8008cea:	e7b9      	b.n	8008c60 <__gethex+0x1ec>
 8008cec:	da09      	bge.n	8008d02 <__gethex+0x28e>
 8008cee:	1bf7      	subs	r7, r6, r7
 8008cf0:	4621      	mov	r1, r4
 8008cf2:	463a      	mov	r2, r7
 8008cf4:	9802      	ldr	r0, [sp, #8]
 8008cf6:	f000 fca7 	bl	8009648 <__lshift>
 8008cfa:	4604      	mov	r4, r0
 8008cfc:	1bed      	subs	r5, r5, r7
 8008cfe:	f100 0914 	add.w	r9, r0, #20
 8008d02:	f04f 0a00 	mov.w	sl, #0
 8008d06:	e7b0      	b.n	8008c6a <__gethex+0x1f6>
 8008d08:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008d0c:	42a8      	cmp	r0, r5
 8008d0e:	dd72      	ble.n	8008df6 <__gethex+0x382>
 8008d10:	1b45      	subs	r5, r0, r5
 8008d12:	42ae      	cmp	r6, r5
 8008d14:	dc35      	bgt.n	8008d82 <__gethex+0x30e>
 8008d16:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008d1a:	2b02      	cmp	r3, #2
 8008d1c:	d029      	beq.n	8008d72 <__gethex+0x2fe>
 8008d1e:	2b03      	cmp	r3, #3
 8008d20:	d02b      	beq.n	8008d7a <__gethex+0x306>
 8008d22:	2b01      	cmp	r3, #1
 8008d24:	d11c      	bne.n	8008d60 <__gethex+0x2ec>
 8008d26:	42ae      	cmp	r6, r5
 8008d28:	d11a      	bne.n	8008d60 <__gethex+0x2ec>
 8008d2a:	2e01      	cmp	r6, #1
 8008d2c:	d112      	bne.n	8008d54 <__gethex+0x2e0>
 8008d2e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008d32:	9a05      	ldr	r2, [sp, #20]
 8008d34:	2762      	movs	r7, #98	; 0x62
 8008d36:	6013      	str	r3, [r2, #0]
 8008d38:	2301      	movs	r3, #1
 8008d3a:	6123      	str	r3, [r4, #16]
 8008d3c:	f8c9 3000 	str.w	r3, [r9]
 8008d40:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008d42:	601c      	str	r4, [r3, #0]
 8008d44:	e728      	b.n	8008b98 <__gethex+0x124>
 8008d46:	bf00      	nop
 8008d48:	0800c3cc 	.word	0x0800c3cc
 8008d4c:	0800c2f0 	.word	0x0800c2f0
 8008d50:	0800c364 	.word	0x0800c364
 8008d54:	4620      	mov	r0, r4
 8008d56:	1e71      	subs	r1, r6, #1
 8008d58:	f000 feb5 	bl	8009ac6 <__any_on>
 8008d5c:	2800      	cmp	r0, #0
 8008d5e:	d1e6      	bne.n	8008d2e <__gethex+0x2ba>
 8008d60:	4621      	mov	r1, r4
 8008d62:	9802      	ldr	r0, [sp, #8]
 8008d64:	f000 fa58 	bl	8009218 <_Bfree>
 8008d68:	2300      	movs	r3, #0
 8008d6a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008d6c:	2750      	movs	r7, #80	; 0x50
 8008d6e:	6013      	str	r3, [r2, #0]
 8008d70:	e712      	b.n	8008b98 <__gethex+0x124>
 8008d72:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d1f3      	bne.n	8008d60 <__gethex+0x2ec>
 8008d78:	e7d9      	b.n	8008d2e <__gethex+0x2ba>
 8008d7a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d1d6      	bne.n	8008d2e <__gethex+0x2ba>
 8008d80:	e7ee      	b.n	8008d60 <__gethex+0x2ec>
 8008d82:	1e6f      	subs	r7, r5, #1
 8008d84:	f1ba 0f00 	cmp.w	sl, #0
 8008d88:	d132      	bne.n	8008df0 <__gethex+0x37c>
 8008d8a:	b127      	cbz	r7, 8008d96 <__gethex+0x322>
 8008d8c:	4639      	mov	r1, r7
 8008d8e:	4620      	mov	r0, r4
 8008d90:	f000 fe99 	bl	8009ac6 <__any_on>
 8008d94:	4682      	mov	sl, r0
 8008d96:	2101      	movs	r1, #1
 8008d98:	117b      	asrs	r3, r7, #5
 8008d9a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008d9e:	f007 071f 	and.w	r7, r7, #31
 8008da2:	fa01 f707 	lsl.w	r7, r1, r7
 8008da6:	421f      	tst	r7, r3
 8008da8:	f04f 0702 	mov.w	r7, #2
 8008dac:	4629      	mov	r1, r5
 8008dae:	4620      	mov	r0, r4
 8008db0:	bf18      	it	ne
 8008db2:	f04a 0a02 	orrne.w	sl, sl, #2
 8008db6:	1b76      	subs	r6, r6, r5
 8008db8:	f7ff fdf3 	bl	80089a2 <rshift>
 8008dbc:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008dc0:	f1ba 0f00 	cmp.w	sl, #0
 8008dc4:	d048      	beq.n	8008e58 <__gethex+0x3e4>
 8008dc6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008dca:	2b02      	cmp	r3, #2
 8008dcc:	d015      	beq.n	8008dfa <__gethex+0x386>
 8008dce:	2b03      	cmp	r3, #3
 8008dd0:	d017      	beq.n	8008e02 <__gethex+0x38e>
 8008dd2:	2b01      	cmp	r3, #1
 8008dd4:	d109      	bne.n	8008dea <__gethex+0x376>
 8008dd6:	f01a 0f02 	tst.w	sl, #2
 8008dda:	d006      	beq.n	8008dea <__gethex+0x376>
 8008ddc:	f8d9 0000 	ldr.w	r0, [r9]
 8008de0:	ea4a 0a00 	orr.w	sl, sl, r0
 8008de4:	f01a 0f01 	tst.w	sl, #1
 8008de8:	d10e      	bne.n	8008e08 <__gethex+0x394>
 8008dea:	f047 0710 	orr.w	r7, r7, #16
 8008dee:	e033      	b.n	8008e58 <__gethex+0x3e4>
 8008df0:	f04f 0a01 	mov.w	sl, #1
 8008df4:	e7cf      	b.n	8008d96 <__gethex+0x322>
 8008df6:	2701      	movs	r7, #1
 8008df8:	e7e2      	b.n	8008dc0 <__gethex+0x34c>
 8008dfa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008dfc:	f1c3 0301 	rsb	r3, r3, #1
 8008e00:	9315      	str	r3, [sp, #84]	; 0x54
 8008e02:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d0f0      	beq.n	8008dea <__gethex+0x376>
 8008e08:	f04f 0c00 	mov.w	ip, #0
 8008e0c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008e10:	f104 0314 	add.w	r3, r4, #20
 8008e14:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008e18:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e22:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008e26:	d01c      	beq.n	8008e62 <__gethex+0x3ee>
 8008e28:	3201      	adds	r2, #1
 8008e2a:	6002      	str	r2, [r0, #0]
 8008e2c:	2f02      	cmp	r7, #2
 8008e2e:	f104 0314 	add.w	r3, r4, #20
 8008e32:	d13d      	bne.n	8008eb0 <__gethex+0x43c>
 8008e34:	f8d8 2000 	ldr.w	r2, [r8]
 8008e38:	3a01      	subs	r2, #1
 8008e3a:	42b2      	cmp	r2, r6
 8008e3c:	d10a      	bne.n	8008e54 <__gethex+0x3e0>
 8008e3e:	2201      	movs	r2, #1
 8008e40:	1171      	asrs	r1, r6, #5
 8008e42:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008e46:	f006 061f 	and.w	r6, r6, #31
 8008e4a:	fa02 f606 	lsl.w	r6, r2, r6
 8008e4e:	421e      	tst	r6, r3
 8008e50:	bf18      	it	ne
 8008e52:	4617      	movne	r7, r2
 8008e54:	f047 0720 	orr.w	r7, r7, #32
 8008e58:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008e5a:	601c      	str	r4, [r3, #0]
 8008e5c:	9b05      	ldr	r3, [sp, #20]
 8008e5e:	601d      	str	r5, [r3, #0]
 8008e60:	e69a      	b.n	8008b98 <__gethex+0x124>
 8008e62:	4299      	cmp	r1, r3
 8008e64:	f843 cc04 	str.w	ip, [r3, #-4]
 8008e68:	d8d8      	bhi.n	8008e1c <__gethex+0x3a8>
 8008e6a:	68a3      	ldr	r3, [r4, #8]
 8008e6c:	459b      	cmp	fp, r3
 8008e6e:	db17      	blt.n	8008ea0 <__gethex+0x42c>
 8008e70:	6861      	ldr	r1, [r4, #4]
 8008e72:	9802      	ldr	r0, [sp, #8]
 8008e74:	3101      	adds	r1, #1
 8008e76:	f000 f98f 	bl	8009198 <_Balloc>
 8008e7a:	4681      	mov	r9, r0
 8008e7c:	b918      	cbnz	r0, 8008e86 <__gethex+0x412>
 8008e7e:	4602      	mov	r2, r0
 8008e80:	2184      	movs	r1, #132	; 0x84
 8008e82:	4b19      	ldr	r3, [pc, #100]	; (8008ee8 <__gethex+0x474>)
 8008e84:	e6ab      	b.n	8008bde <__gethex+0x16a>
 8008e86:	6922      	ldr	r2, [r4, #16]
 8008e88:	f104 010c 	add.w	r1, r4, #12
 8008e8c:	3202      	adds	r2, #2
 8008e8e:	0092      	lsls	r2, r2, #2
 8008e90:	300c      	adds	r0, #12
 8008e92:	f7fc fee1 	bl	8005c58 <memcpy>
 8008e96:	4621      	mov	r1, r4
 8008e98:	9802      	ldr	r0, [sp, #8]
 8008e9a:	f000 f9bd 	bl	8009218 <_Bfree>
 8008e9e:	464c      	mov	r4, r9
 8008ea0:	6923      	ldr	r3, [r4, #16]
 8008ea2:	1c5a      	adds	r2, r3, #1
 8008ea4:	6122      	str	r2, [r4, #16]
 8008ea6:	2201      	movs	r2, #1
 8008ea8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008eac:	615a      	str	r2, [r3, #20]
 8008eae:	e7bd      	b.n	8008e2c <__gethex+0x3b8>
 8008eb0:	6922      	ldr	r2, [r4, #16]
 8008eb2:	455a      	cmp	r2, fp
 8008eb4:	dd0b      	ble.n	8008ece <__gethex+0x45a>
 8008eb6:	2101      	movs	r1, #1
 8008eb8:	4620      	mov	r0, r4
 8008eba:	f7ff fd72 	bl	80089a2 <rshift>
 8008ebe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008ec2:	3501      	adds	r5, #1
 8008ec4:	42ab      	cmp	r3, r5
 8008ec6:	f6ff aed4 	blt.w	8008c72 <__gethex+0x1fe>
 8008eca:	2701      	movs	r7, #1
 8008ecc:	e7c2      	b.n	8008e54 <__gethex+0x3e0>
 8008ece:	f016 061f 	ands.w	r6, r6, #31
 8008ed2:	d0fa      	beq.n	8008eca <__gethex+0x456>
 8008ed4:	4453      	add	r3, sl
 8008ed6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008eda:	f000 fa4f 	bl	800937c <__hi0bits>
 8008ede:	f1c6 0620 	rsb	r6, r6, #32
 8008ee2:	42b0      	cmp	r0, r6
 8008ee4:	dbe7      	blt.n	8008eb6 <__gethex+0x442>
 8008ee6:	e7f0      	b.n	8008eca <__gethex+0x456>
 8008ee8:	0800c2f0 	.word	0x0800c2f0

08008eec <L_shift>:
 8008eec:	f1c2 0208 	rsb	r2, r2, #8
 8008ef0:	0092      	lsls	r2, r2, #2
 8008ef2:	b570      	push	{r4, r5, r6, lr}
 8008ef4:	f1c2 0620 	rsb	r6, r2, #32
 8008ef8:	6843      	ldr	r3, [r0, #4]
 8008efa:	6804      	ldr	r4, [r0, #0]
 8008efc:	fa03 f506 	lsl.w	r5, r3, r6
 8008f00:	432c      	orrs	r4, r5
 8008f02:	40d3      	lsrs	r3, r2
 8008f04:	6004      	str	r4, [r0, #0]
 8008f06:	f840 3f04 	str.w	r3, [r0, #4]!
 8008f0a:	4288      	cmp	r0, r1
 8008f0c:	d3f4      	bcc.n	8008ef8 <L_shift+0xc>
 8008f0e:	bd70      	pop	{r4, r5, r6, pc}

08008f10 <__match>:
 8008f10:	b530      	push	{r4, r5, lr}
 8008f12:	6803      	ldr	r3, [r0, #0]
 8008f14:	3301      	adds	r3, #1
 8008f16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f1a:	b914      	cbnz	r4, 8008f22 <__match+0x12>
 8008f1c:	6003      	str	r3, [r0, #0]
 8008f1e:	2001      	movs	r0, #1
 8008f20:	bd30      	pop	{r4, r5, pc}
 8008f22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f26:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008f2a:	2d19      	cmp	r5, #25
 8008f2c:	bf98      	it	ls
 8008f2e:	3220      	addls	r2, #32
 8008f30:	42a2      	cmp	r2, r4
 8008f32:	d0f0      	beq.n	8008f16 <__match+0x6>
 8008f34:	2000      	movs	r0, #0
 8008f36:	e7f3      	b.n	8008f20 <__match+0x10>

08008f38 <__hexnan>:
 8008f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f3c:	2500      	movs	r5, #0
 8008f3e:	680b      	ldr	r3, [r1, #0]
 8008f40:	4682      	mov	sl, r0
 8008f42:	115e      	asrs	r6, r3, #5
 8008f44:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008f48:	f013 031f 	ands.w	r3, r3, #31
 8008f4c:	bf18      	it	ne
 8008f4e:	3604      	addne	r6, #4
 8008f50:	1f37      	subs	r7, r6, #4
 8008f52:	46b9      	mov	r9, r7
 8008f54:	463c      	mov	r4, r7
 8008f56:	46ab      	mov	fp, r5
 8008f58:	b087      	sub	sp, #28
 8008f5a:	4690      	mov	r8, r2
 8008f5c:	6802      	ldr	r2, [r0, #0]
 8008f5e:	9301      	str	r3, [sp, #4]
 8008f60:	f846 5c04 	str.w	r5, [r6, #-4]
 8008f64:	9502      	str	r5, [sp, #8]
 8008f66:	7851      	ldrb	r1, [r2, #1]
 8008f68:	1c53      	adds	r3, r2, #1
 8008f6a:	9303      	str	r3, [sp, #12]
 8008f6c:	b341      	cbz	r1, 8008fc0 <__hexnan+0x88>
 8008f6e:	4608      	mov	r0, r1
 8008f70:	9205      	str	r2, [sp, #20]
 8008f72:	9104      	str	r1, [sp, #16]
 8008f74:	f7ff fd68 	bl	8008a48 <__hexdig_fun>
 8008f78:	2800      	cmp	r0, #0
 8008f7a:	d14f      	bne.n	800901c <__hexnan+0xe4>
 8008f7c:	9904      	ldr	r1, [sp, #16]
 8008f7e:	9a05      	ldr	r2, [sp, #20]
 8008f80:	2920      	cmp	r1, #32
 8008f82:	d818      	bhi.n	8008fb6 <__hexnan+0x7e>
 8008f84:	9b02      	ldr	r3, [sp, #8]
 8008f86:	459b      	cmp	fp, r3
 8008f88:	dd13      	ble.n	8008fb2 <__hexnan+0x7a>
 8008f8a:	454c      	cmp	r4, r9
 8008f8c:	d206      	bcs.n	8008f9c <__hexnan+0x64>
 8008f8e:	2d07      	cmp	r5, #7
 8008f90:	dc04      	bgt.n	8008f9c <__hexnan+0x64>
 8008f92:	462a      	mov	r2, r5
 8008f94:	4649      	mov	r1, r9
 8008f96:	4620      	mov	r0, r4
 8008f98:	f7ff ffa8 	bl	8008eec <L_shift>
 8008f9c:	4544      	cmp	r4, r8
 8008f9e:	d950      	bls.n	8009042 <__hexnan+0x10a>
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	f1a4 0904 	sub.w	r9, r4, #4
 8008fa6:	f844 3c04 	str.w	r3, [r4, #-4]
 8008faa:	461d      	mov	r5, r3
 8008fac:	464c      	mov	r4, r9
 8008fae:	f8cd b008 	str.w	fp, [sp, #8]
 8008fb2:	9a03      	ldr	r2, [sp, #12]
 8008fb4:	e7d7      	b.n	8008f66 <__hexnan+0x2e>
 8008fb6:	2929      	cmp	r1, #41	; 0x29
 8008fb8:	d156      	bne.n	8009068 <__hexnan+0x130>
 8008fba:	3202      	adds	r2, #2
 8008fbc:	f8ca 2000 	str.w	r2, [sl]
 8008fc0:	f1bb 0f00 	cmp.w	fp, #0
 8008fc4:	d050      	beq.n	8009068 <__hexnan+0x130>
 8008fc6:	454c      	cmp	r4, r9
 8008fc8:	d206      	bcs.n	8008fd8 <__hexnan+0xa0>
 8008fca:	2d07      	cmp	r5, #7
 8008fcc:	dc04      	bgt.n	8008fd8 <__hexnan+0xa0>
 8008fce:	462a      	mov	r2, r5
 8008fd0:	4649      	mov	r1, r9
 8008fd2:	4620      	mov	r0, r4
 8008fd4:	f7ff ff8a 	bl	8008eec <L_shift>
 8008fd8:	4544      	cmp	r4, r8
 8008fda:	d934      	bls.n	8009046 <__hexnan+0x10e>
 8008fdc:	4623      	mov	r3, r4
 8008fde:	f1a8 0204 	sub.w	r2, r8, #4
 8008fe2:	f853 1b04 	ldr.w	r1, [r3], #4
 8008fe6:	429f      	cmp	r7, r3
 8008fe8:	f842 1f04 	str.w	r1, [r2, #4]!
 8008fec:	d2f9      	bcs.n	8008fe2 <__hexnan+0xaa>
 8008fee:	1b3b      	subs	r3, r7, r4
 8008ff0:	f023 0303 	bic.w	r3, r3, #3
 8008ff4:	3304      	adds	r3, #4
 8008ff6:	3401      	adds	r4, #1
 8008ff8:	3e03      	subs	r6, #3
 8008ffa:	42b4      	cmp	r4, r6
 8008ffc:	bf88      	it	hi
 8008ffe:	2304      	movhi	r3, #4
 8009000:	2200      	movs	r2, #0
 8009002:	4443      	add	r3, r8
 8009004:	f843 2b04 	str.w	r2, [r3], #4
 8009008:	429f      	cmp	r7, r3
 800900a:	d2fb      	bcs.n	8009004 <__hexnan+0xcc>
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	b91b      	cbnz	r3, 8009018 <__hexnan+0xe0>
 8009010:	4547      	cmp	r7, r8
 8009012:	d127      	bne.n	8009064 <__hexnan+0x12c>
 8009014:	2301      	movs	r3, #1
 8009016:	603b      	str	r3, [r7, #0]
 8009018:	2005      	movs	r0, #5
 800901a:	e026      	b.n	800906a <__hexnan+0x132>
 800901c:	3501      	adds	r5, #1
 800901e:	2d08      	cmp	r5, #8
 8009020:	f10b 0b01 	add.w	fp, fp, #1
 8009024:	dd06      	ble.n	8009034 <__hexnan+0xfc>
 8009026:	4544      	cmp	r4, r8
 8009028:	d9c3      	bls.n	8008fb2 <__hexnan+0x7a>
 800902a:	2300      	movs	r3, #0
 800902c:	2501      	movs	r5, #1
 800902e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009032:	3c04      	subs	r4, #4
 8009034:	6822      	ldr	r2, [r4, #0]
 8009036:	f000 000f 	and.w	r0, r0, #15
 800903a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800903e:	6022      	str	r2, [r4, #0]
 8009040:	e7b7      	b.n	8008fb2 <__hexnan+0x7a>
 8009042:	2508      	movs	r5, #8
 8009044:	e7b5      	b.n	8008fb2 <__hexnan+0x7a>
 8009046:	9b01      	ldr	r3, [sp, #4]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d0df      	beq.n	800900c <__hexnan+0xd4>
 800904c:	f04f 32ff 	mov.w	r2, #4294967295
 8009050:	f1c3 0320 	rsb	r3, r3, #32
 8009054:	fa22 f303 	lsr.w	r3, r2, r3
 8009058:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800905c:	401a      	ands	r2, r3
 800905e:	f846 2c04 	str.w	r2, [r6, #-4]
 8009062:	e7d3      	b.n	800900c <__hexnan+0xd4>
 8009064:	3f04      	subs	r7, #4
 8009066:	e7d1      	b.n	800900c <__hexnan+0xd4>
 8009068:	2004      	movs	r0, #4
 800906a:	b007      	add	sp, #28
 800906c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009070 <_localeconv_r>:
 8009070:	4800      	ldr	r0, [pc, #0]	; (8009074 <_localeconv_r+0x4>)
 8009072:	4770      	bx	lr
 8009074:	20000164 	.word	0x20000164

08009078 <__retarget_lock_init_recursive>:
 8009078:	4770      	bx	lr

0800907a <__retarget_lock_acquire_recursive>:
 800907a:	4770      	bx	lr

0800907c <__retarget_lock_release_recursive>:
 800907c:	4770      	bx	lr

0800907e <__swhatbuf_r>:
 800907e:	b570      	push	{r4, r5, r6, lr}
 8009080:	460e      	mov	r6, r1
 8009082:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009086:	4614      	mov	r4, r2
 8009088:	2900      	cmp	r1, #0
 800908a:	461d      	mov	r5, r3
 800908c:	b096      	sub	sp, #88	; 0x58
 800908e:	da08      	bge.n	80090a2 <__swhatbuf_r+0x24>
 8009090:	2200      	movs	r2, #0
 8009092:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009096:	602a      	str	r2, [r5, #0]
 8009098:	061a      	lsls	r2, r3, #24
 800909a:	d410      	bmi.n	80090be <__swhatbuf_r+0x40>
 800909c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090a0:	e00e      	b.n	80090c0 <__swhatbuf_r+0x42>
 80090a2:	466a      	mov	r2, sp
 80090a4:	f001 f848 	bl	800a138 <_fstat_r>
 80090a8:	2800      	cmp	r0, #0
 80090aa:	dbf1      	blt.n	8009090 <__swhatbuf_r+0x12>
 80090ac:	9a01      	ldr	r2, [sp, #4]
 80090ae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80090b2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80090b6:	425a      	negs	r2, r3
 80090b8:	415a      	adcs	r2, r3
 80090ba:	602a      	str	r2, [r5, #0]
 80090bc:	e7ee      	b.n	800909c <__swhatbuf_r+0x1e>
 80090be:	2340      	movs	r3, #64	; 0x40
 80090c0:	2000      	movs	r0, #0
 80090c2:	6023      	str	r3, [r4, #0]
 80090c4:	b016      	add	sp, #88	; 0x58
 80090c6:	bd70      	pop	{r4, r5, r6, pc}

080090c8 <__smakebuf_r>:
 80090c8:	898b      	ldrh	r3, [r1, #12]
 80090ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80090cc:	079d      	lsls	r5, r3, #30
 80090ce:	4606      	mov	r6, r0
 80090d0:	460c      	mov	r4, r1
 80090d2:	d507      	bpl.n	80090e4 <__smakebuf_r+0x1c>
 80090d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80090d8:	6023      	str	r3, [r4, #0]
 80090da:	6123      	str	r3, [r4, #16]
 80090dc:	2301      	movs	r3, #1
 80090de:	6163      	str	r3, [r4, #20]
 80090e0:	b002      	add	sp, #8
 80090e2:	bd70      	pop	{r4, r5, r6, pc}
 80090e4:	466a      	mov	r2, sp
 80090e6:	ab01      	add	r3, sp, #4
 80090e8:	f7ff ffc9 	bl	800907e <__swhatbuf_r>
 80090ec:	9900      	ldr	r1, [sp, #0]
 80090ee:	4605      	mov	r5, r0
 80090f0:	4630      	mov	r0, r6
 80090f2:	f000 fd85 	bl	8009c00 <_malloc_r>
 80090f6:	b948      	cbnz	r0, 800910c <__smakebuf_r+0x44>
 80090f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090fc:	059a      	lsls	r2, r3, #22
 80090fe:	d4ef      	bmi.n	80090e0 <__smakebuf_r+0x18>
 8009100:	f023 0303 	bic.w	r3, r3, #3
 8009104:	f043 0302 	orr.w	r3, r3, #2
 8009108:	81a3      	strh	r3, [r4, #12]
 800910a:	e7e3      	b.n	80090d4 <__smakebuf_r+0xc>
 800910c:	4b0d      	ldr	r3, [pc, #52]	; (8009144 <__smakebuf_r+0x7c>)
 800910e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009110:	89a3      	ldrh	r3, [r4, #12]
 8009112:	6020      	str	r0, [r4, #0]
 8009114:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009118:	81a3      	strh	r3, [r4, #12]
 800911a:	9b00      	ldr	r3, [sp, #0]
 800911c:	6120      	str	r0, [r4, #16]
 800911e:	6163      	str	r3, [r4, #20]
 8009120:	9b01      	ldr	r3, [sp, #4]
 8009122:	b15b      	cbz	r3, 800913c <__smakebuf_r+0x74>
 8009124:	4630      	mov	r0, r6
 8009126:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800912a:	f001 f817 	bl	800a15c <_isatty_r>
 800912e:	b128      	cbz	r0, 800913c <__smakebuf_r+0x74>
 8009130:	89a3      	ldrh	r3, [r4, #12]
 8009132:	f023 0303 	bic.w	r3, r3, #3
 8009136:	f043 0301 	orr.w	r3, r3, #1
 800913a:	81a3      	strh	r3, [r4, #12]
 800913c:	89a0      	ldrh	r0, [r4, #12]
 800913e:	4305      	orrs	r5, r0
 8009140:	81a5      	strh	r5, [r4, #12]
 8009142:	e7cd      	b.n	80090e0 <__smakebuf_r+0x18>
 8009144:	08008801 	.word	0x08008801

08009148 <malloc>:
 8009148:	4b02      	ldr	r3, [pc, #8]	; (8009154 <malloc+0xc>)
 800914a:	4601      	mov	r1, r0
 800914c:	6818      	ldr	r0, [r3, #0]
 800914e:	f000 bd57 	b.w	8009c00 <_malloc_r>
 8009152:	bf00      	nop
 8009154:	2000000c 	.word	0x2000000c

08009158 <__ascii_mbtowc>:
 8009158:	b082      	sub	sp, #8
 800915a:	b901      	cbnz	r1, 800915e <__ascii_mbtowc+0x6>
 800915c:	a901      	add	r1, sp, #4
 800915e:	b142      	cbz	r2, 8009172 <__ascii_mbtowc+0x1a>
 8009160:	b14b      	cbz	r3, 8009176 <__ascii_mbtowc+0x1e>
 8009162:	7813      	ldrb	r3, [r2, #0]
 8009164:	600b      	str	r3, [r1, #0]
 8009166:	7812      	ldrb	r2, [r2, #0]
 8009168:	1e10      	subs	r0, r2, #0
 800916a:	bf18      	it	ne
 800916c:	2001      	movne	r0, #1
 800916e:	b002      	add	sp, #8
 8009170:	4770      	bx	lr
 8009172:	4610      	mov	r0, r2
 8009174:	e7fb      	b.n	800916e <__ascii_mbtowc+0x16>
 8009176:	f06f 0001 	mvn.w	r0, #1
 800917a:	e7f8      	b.n	800916e <__ascii_mbtowc+0x16>

0800917c <memchr>:
 800917c:	4603      	mov	r3, r0
 800917e:	b510      	push	{r4, lr}
 8009180:	b2c9      	uxtb	r1, r1
 8009182:	4402      	add	r2, r0
 8009184:	4293      	cmp	r3, r2
 8009186:	4618      	mov	r0, r3
 8009188:	d101      	bne.n	800918e <memchr+0x12>
 800918a:	2000      	movs	r0, #0
 800918c:	e003      	b.n	8009196 <memchr+0x1a>
 800918e:	7804      	ldrb	r4, [r0, #0]
 8009190:	3301      	adds	r3, #1
 8009192:	428c      	cmp	r4, r1
 8009194:	d1f6      	bne.n	8009184 <memchr+0x8>
 8009196:	bd10      	pop	{r4, pc}

08009198 <_Balloc>:
 8009198:	b570      	push	{r4, r5, r6, lr}
 800919a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800919c:	4604      	mov	r4, r0
 800919e:	460d      	mov	r5, r1
 80091a0:	b976      	cbnz	r6, 80091c0 <_Balloc+0x28>
 80091a2:	2010      	movs	r0, #16
 80091a4:	f7ff ffd0 	bl	8009148 <malloc>
 80091a8:	4602      	mov	r2, r0
 80091aa:	6260      	str	r0, [r4, #36]	; 0x24
 80091ac:	b920      	cbnz	r0, 80091b8 <_Balloc+0x20>
 80091ae:	2166      	movs	r1, #102	; 0x66
 80091b0:	4b17      	ldr	r3, [pc, #92]	; (8009210 <_Balloc+0x78>)
 80091b2:	4818      	ldr	r0, [pc, #96]	; (8009214 <_Balloc+0x7c>)
 80091b4:	f000 ff80 	bl	800a0b8 <__assert_func>
 80091b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80091bc:	6006      	str	r6, [r0, #0]
 80091be:	60c6      	str	r6, [r0, #12]
 80091c0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80091c2:	68f3      	ldr	r3, [r6, #12]
 80091c4:	b183      	cbz	r3, 80091e8 <_Balloc+0x50>
 80091c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80091c8:	68db      	ldr	r3, [r3, #12]
 80091ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80091ce:	b9b8      	cbnz	r0, 8009200 <_Balloc+0x68>
 80091d0:	2101      	movs	r1, #1
 80091d2:	fa01 f605 	lsl.w	r6, r1, r5
 80091d6:	1d72      	adds	r2, r6, #5
 80091d8:	4620      	mov	r0, r4
 80091da:	0092      	lsls	r2, r2, #2
 80091dc:	f000 fc94 	bl	8009b08 <_calloc_r>
 80091e0:	b160      	cbz	r0, 80091fc <_Balloc+0x64>
 80091e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80091e6:	e00e      	b.n	8009206 <_Balloc+0x6e>
 80091e8:	2221      	movs	r2, #33	; 0x21
 80091ea:	2104      	movs	r1, #4
 80091ec:	4620      	mov	r0, r4
 80091ee:	f000 fc8b 	bl	8009b08 <_calloc_r>
 80091f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80091f4:	60f0      	str	r0, [r6, #12]
 80091f6:	68db      	ldr	r3, [r3, #12]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d1e4      	bne.n	80091c6 <_Balloc+0x2e>
 80091fc:	2000      	movs	r0, #0
 80091fe:	bd70      	pop	{r4, r5, r6, pc}
 8009200:	6802      	ldr	r2, [r0, #0]
 8009202:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009206:	2300      	movs	r3, #0
 8009208:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800920c:	e7f7      	b.n	80091fe <_Balloc+0x66>
 800920e:	bf00      	nop
 8009210:	0800c27e 	.word	0x0800c27e
 8009214:	0800c3e0 	.word	0x0800c3e0

08009218 <_Bfree>:
 8009218:	b570      	push	{r4, r5, r6, lr}
 800921a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800921c:	4605      	mov	r5, r0
 800921e:	460c      	mov	r4, r1
 8009220:	b976      	cbnz	r6, 8009240 <_Bfree+0x28>
 8009222:	2010      	movs	r0, #16
 8009224:	f7ff ff90 	bl	8009148 <malloc>
 8009228:	4602      	mov	r2, r0
 800922a:	6268      	str	r0, [r5, #36]	; 0x24
 800922c:	b920      	cbnz	r0, 8009238 <_Bfree+0x20>
 800922e:	218a      	movs	r1, #138	; 0x8a
 8009230:	4b08      	ldr	r3, [pc, #32]	; (8009254 <_Bfree+0x3c>)
 8009232:	4809      	ldr	r0, [pc, #36]	; (8009258 <_Bfree+0x40>)
 8009234:	f000 ff40 	bl	800a0b8 <__assert_func>
 8009238:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800923c:	6006      	str	r6, [r0, #0]
 800923e:	60c6      	str	r6, [r0, #12]
 8009240:	b13c      	cbz	r4, 8009252 <_Bfree+0x3a>
 8009242:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009244:	6862      	ldr	r2, [r4, #4]
 8009246:	68db      	ldr	r3, [r3, #12]
 8009248:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800924c:	6021      	str	r1, [r4, #0]
 800924e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009252:	bd70      	pop	{r4, r5, r6, pc}
 8009254:	0800c27e 	.word	0x0800c27e
 8009258:	0800c3e0 	.word	0x0800c3e0

0800925c <__multadd>:
 800925c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009260:	4607      	mov	r7, r0
 8009262:	460c      	mov	r4, r1
 8009264:	461e      	mov	r6, r3
 8009266:	2000      	movs	r0, #0
 8009268:	690d      	ldr	r5, [r1, #16]
 800926a:	f101 0c14 	add.w	ip, r1, #20
 800926e:	f8dc 3000 	ldr.w	r3, [ip]
 8009272:	3001      	adds	r0, #1
 8009274:	b299      	uxth	r1, r3
 8009276:	fb02 6101 	mla	r1, r2, r1, r6
 800927a:	0c1e      	lsrs	r6, r3, #16
 800927c:	0c0b      	lsrs	r3, r1, #16
 800927e:	fb02 3306 	mla	r3, r2, r6, r3
 8009282:	b289      	uxth	r1, r1
 8009284:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009288:	4285      	cmp	r5, r0
 800928a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800928e:	f84c 1b04 	str.w	r1, [ip], #4
 8009292:	dcec      	bgt.n	800926e <__multadd+0x12>
 8009294:	b30e      	cbz	r6, 80092da <__multadd+0x7e>
 8009296:	68a3      	ldr	r3, [r4, #8]
 8009298:	42ab      	cmp	r3, r5
 800929a:	dc19      	bgt.n	80092d0 <__multadd+0x74>
 800929c:	6861      	ldr	r1, [r4, #4]
 800929e:	4638      	mov	r0, r7
 80092a0:	3101      	adds	r1, #1
 80092a2:	f7ff ff79 	bl	8009198 <_Balloc>
 80092a6:	4680      	mov	r8, r0
 80092a8:	b928      	cbnz	r0, 80092b6 <__multadd+0x5a>
 80092aa:	4602      	mov	r2, r0
 80092ac:	21b5      	movs	r1, #181	; 0xb5
 80092ae:	4b0c      	ldr	r3, [pc, #48]	; (80092e0 <__multadd+0x84>)
 80092b0:	480c      	ldr	r0, [pc, #48]	; (80092e4 <__multadd+0x88>)
 80092b2:	f000 ff01 	bl	800a0b8 <__assert_func>
 80092b6:	6922      	ldr	r2, [r4, #16]
 80092b8:	f104 010c 	add.w	r1, r4, #12
 80092bc:	3202      	adds	r2, #2
 80092be:	0092      	lsls	r2, r2, #2
 80092c0:	300c      	adds	r0, #12
 80092c2:	f7fc fcc9 	bl	8005c58 <memcpy>
 80092c6:	4621      	mov	r1, r4
 80092c8:	4638      	mov	r0, r7
 80092ca:	f7ff ffa5 	bl	8009218 <_Bfree>
 80092ce:	4644      	mov	r4, r8
 80092d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80092d4:	3501      	adds	r5, #1
 80092d6:	615e      	str	r6, [r3, #20]
 80092d8:	6125      	str	r5, [r4, #16]
 80092da:	4620      	mov	r0, r4
 80092dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092e0:	0800c2f0 	.word	0x0800c2f0
 80092e4:	0800c3e0 	.word	0x0800c3e0

080092e8 <__s2b>:
 80092e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092ec:	4615      	mov	r5, r2
 80092ee:	2209      	movs	r2, #9
 80092f0:	461f      	mov	r7, r3
 80092f2:	3308      	adds	r3, #8
 80092f4:	460c      	mov	r4, r1
 80092f6:	fb93 f3f2 	sdiv	r3, r3, r2
 80092fa:	4606      	mov	r6, r0
 80092fc:	2201      	movs	r2, #1
 80092fe:	2100      	movs	r1, #0
 8009300:	429a      	cmp	r2, r3
 8009302:	db09      	blt.n	8009318 <__s2b+0x30>
 8009304:	4630      	mov	r0, r6
 8009306:	f7ff ff47 	bl	8009198 <_Balloc>
 800930a:	b940      	cbnz	r0, 800931e <__s2b+0x36>
 800930c:	4602      	mov	r2, r0
 800930e:	21ce      	movs	r1, #206	; 0xce
 8009310:	4b18      	ldr	r3, [pc, #96]	; (8009374 <__s2b+0x8c>)
 8009312:	4819      	ldr	r0, [pc, #100]	; (8009378 <__s2b+0x90>)
 8009314:	f000 fed0 	bl	800a0b8 <__assert_func>
 8009318:	0052      	lsls	r2, r2, #1
 800931a:	3101      	adds	r1, #1
 800931c:	e7f0      	b.n	8009300 <__s2b+0x18>
 800931e:	9b08      	ldr	r3, [sp, #32]
 8009320:	2d09      	cmp	r5, #9
 8009322:	6143      	str	r3, [r0, #20]
 8009324:	f04f 0301 	mov.w	r3, #1
 8009328:	6103      	str	r3, [r0, #16]
 800932a:	dd16      	ble.n	800935a <__s2b+0x72>
 800932c:	f104 0909 	add.w	r9, r4, #9
 8009330:	46c8      	mov	r8, r9
 8009332:	442c      	add	r4, r5
 8009334:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009338:	4601      	mov	r1, r0
 800933a:	220a      	movs	r2, #10
 800933c:	4630      	mov	r0, r6
 800933e:	3b30      	subs	r3, #48	; 0x30
 8009340:	f7ff ff8c 	bl	800925c <__multadd>
 8009344:	45a0      	cmp	r8, r4
 8009346:	d1f5      	bne.n	8009334 <__s2b+0x4c>
 8009348:	f1a5 0408 	sub.w	r4, r5, #8
 800934c:	444c      	add	r4, r9
 800934e:	1b2d      	subs	r5, r5, r4
 8009350:	1963      	adds	r3, r4, r5
 8009352:	42bb      	cmp	r3, r7
 8009354:	db04      	blt.n	8009360 <__s2b+0x78>
 8009356:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800935a:	2509      	movs	r5, #9
 800935c:	340a      	adds	r4, #10
 800935e:	e7f6      	b.n	800934e <__s2b+0x66>
 8009360:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009364:	4601      	mov	r1, r0
 8009366:	220a      	movs	r2, #10
 8009368:	4630      	mov	r0, r6
 800936a:	3b30      	subs	r3, #48	; 0x30
 800936c:	f7ff ff76 	bl	800925c <__multadd>
 8009370:	e7ee      	b.n	8009350 <__s2b+0x68>
 8009372:	bf00      	nop
 8009374:	0800c2f0 	.word	0x0800c2f0
 8009378:	0800c3e0 	.word	0x0800c3e0

0800937c <__hi0bits>:
 800937c:	0c02      	lsrs	r2, r0, #16
 800937e:	0412      	lsls	r2, r2, #16
 8009380:	4603      	mov	r3, r0
 8009382:	b9ca      	cbnz	r2, 80093b8 <__hi0bits+0x3c>
 8009384:	0403      	lsls	r3, r0, #16
 8009386:	2010      	movs	r0, #16
 8009388:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800938c:	bf04      	itt	eq
 800938e:	021b      	lsleq	r3, r3, #8
 8009390:	3008      	addeq	r0, #8
 8009392:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009396:	bf04      	itt	eq
 8009398:	011b      	lsleq	r3, r3, #4
 800939a:	3004      	addeq	r0, #4
 800939c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80093a0:	bf04      	itt	eq
 80093a2:	009b      	lsleq	r3, r3, #2
 80093a4:	3002      	addeq	r0, #2
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	db05      	blt.n	80093b6 <__hi0bits+0x3a>
 80093aa:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80093ae:	f100 0001 	add.w	r0, r0, #1
 80093b2:	bf08      	it	eq
 80093b4:	2020      	moveq	r0, #32
 80093b6:	4770      	bx	lr
 80093b8:	2000      	movs	r0, #0
 80093ba:	e7e5      	b.n	8009388 <__hi0bits+0xc>

080093bc <__lo0bits>:
 80093bc:	6803      	ldr	r3, [r0, #0]
 80093be:	4602      	mov	r2, r0
 80093c0:	f013 0007 	ands.w	r0, r3, #7
 80093c4:	d00b      	beq.n	80093de <__lo0bits+0x22>
 80093c6:	07d9      	lsls	r1, r3, #31
 80093c8:	d421      	bmi.n	800940e <__lo0bits+0x52>
 80093ca:	0798      	lsls	r0, r3, #30
 80093cc:	bf49      	itett	mi
 80093ce:	085b      	lsrmi	r3, r3, #1
 80093d0:	089b      	lsrpl	r3, r3, #2
 80093d2:	2001      	movmi	r0, #1
 80093d4:	6013      	strmi	r3, [r2, #0]
 80093d6:	bf5c      	itt	pl
 80093d8:	2002      	movpl	r0, #2
 80093da:	6013      	strpl	r3, [r2, #0]
 80093dc:	4770      	bx	lr
 80093de:	b299      	uxth	r1, r3
 80093e0:	b909      	cbnz	r1, 80093e6 <__lo0bits+0x2a>
 80093e2:	2010      	movs	r0, #16
 80093e4:	0c1b      	lsrs	r3, r3, #16
 80093e6:	b2d9      	uxtb	r1, r3
 80093e8:	b909      	cbnz	r1, 80093ee <__lo0bits+0x32>
 80093ea:	3008      	adds	r0, #8
 80093ec:	0a1b      	lsrs	r3, r3, #8
 80093ee:	0719      	lsls	r1, r3, #28
 80093f0:	bf04      	itt	eq
 80093f2:	091b      	lsreq	r3, r3, #4
 80093f4:	3004      	addeq	r0, #4
 80093f6:	0799      	lsls	r1, r3, #30
 80093f8:	bf04      	itt	eq
 80093fa:	089b      	lsreq	r3, r3, #2
 80093fc:	3002      	addeq	r0, #2
 80093fe:	07d9      	lsls	r1, r3, #31
 8009400:	d403      	bmi.n	800940a <__lo0bits+0x4e>
 8009402:	085b      	lsrs	r3, r3, #1
 8009404:	f100 0001 	add.w	r0, r0, #1
 8009408:	d003      	beq.n	8009412 <__lo0bits+0x56>
 800940a:	6013      	str	r3, [r2, #0]
 800940c:	4770      	bx	lr
 800940e:	2000      	movs	r0, #0
 8009410:	4770      	bx	lr
 8009412:	2020      	movs	r0, #32
 8009414:	4770      	bx	lr
	...

08009418 <__i2b>:
 8009418:	b510      	push	{r4, lr}
 800941a:	460c      	mov	r4, r1
 800941c:	2101      	movs	r1, #1
 800941e:	f7ff febb 	bl	8009198 <_Balloc>
 8009422:	4602      	mov	r2, r0
 8009424:	b928      	cbnz	r0, 8009432 <__i2b+0x1a>
 8009426:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800942a:	4b04      	ldr	r3, [pc, #16]	; (800943c <__i2b+0x24>)
 800942c:	4804      	ldr	r0, [pc, #16]	; (8009440 <__i2b+0x28>)
 800942e:	f000 fe43 	bl	800a0b8 <__assert_func>
 8009432:	2301      	movs	r3, #1
 8009434:	6144      	str	r4, [r0, #20]
 8009436:	6103      	str	r3, [r0, #16]
 8009438:	bd10      	pop	{r4, pc}
 800943a:	bf00      	nop
 800943c:	0800c2f0 	.word	0x0800c2f0
 8009440:	0800c3e0 	.word	0x0800c3e0

08009444 <__multiply>:
 8009444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009448:	4691      	mov	r9, r2
 800944a:	690a      	ldr	r2, [r1, #16]
 800944c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009450:	460c      	mov	r4, r1
 8009452:	429a      	cmp	r2, r3
 8009454:	bfbe      	ittt	lt
 8009456:	460b      	movlt	r3, r1
 8009458:	464c      	movlt	r4, r9
 800945a:	4699      	movlt	r9, r3
 800945c:	6927      	ldr	r7, [r4, #16]
 800945e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009462:	68a3      	ldr	r3, [r4, #8]
 8009464:	6861      	ldr	r1, [r4, #4]
 8009466:	eb07 060a 	add.w	r6, r7, sl
 800946a:	42b3      	cmp	r3, r6
 800946c:	b085      	sub	sp, #20
 800946e:	bfb8      	it	lt
 8009470:	3101      	addlt	r1, #1
 8009472:	f7ff fe91 	bl	8009198 <_Balloc>
 8009476:	b930      	cbnz	r0, 8009486 <__multiply+0x42>
 8009478:	4602      	mov	r2, r0
 800947a:	f240 115d 	movw	r1, #349	; 0x15d
 800947e:	4b43      	ldr	r3, [pc, #268]	; (800958c <__multiply+0x148>)
 8009480:	4843      	ldr	r0, [pc, #268]	; (8009590 <__multiply+0x14c>)
 8009482:	f000 fe19 	bl	800a0b8 <__assert_func>
 8009486:	f100 0514 	add.w	r5, r0, #20
 800948a:	462b      	mov	r3, r5
 800948c:	2200      	movs	r2, #0
 800948e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009492:	4543      	cmp	r3, r8
 8009494:	d321      	bcc.n	80094da <__multiply+0x96>
 8009496:	f104 0314 	add.w	r3, r4, #20
 800949a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800949e:	f109 0314 	add.w	r3, r9, #20
 80094a2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80094a6:	9202      	str	r2, [sp, #8]
 80094a8:	1b3a      	subs	r2, r7, r4
 80094aa:	3a15      	subs	r2, #21
 80094ac:	f022 0203 	bic.w	r2, r2, #3
 80094b0:	3204      	adds	r2, #4
 80094b2:	f104 0115 	add.w	r1, r4, #21
 80094b6:	428f      	cmp	r7, r1
 80094b8:	bf38      	it	cc
 80094ba:	2204      	movcc	r2, #4
 80094bc:	9201      	str	r2, [sp, #4]
 80094be:	9a02      	ldr	r2, [sp, #8]
 80094c0:	9303      	str	r3, [sp, #12]
 80094c2:	429a      	cmp	r2, r3
 80094c4:	d80c      	bhi.n	80094e0 <__multiply+0x9c>
 80094c6:	2e00      	cmp	r6, #0
 80094c8:	dd03      	ble.n	80094d2 <__multiply+0x8e>
 80094ca:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d059      	beq.n	8009586 <__multiply+0x142>
 80094d2:	6106      	str	r6, [r0, #16]
 80094d4:	b005      	add	sp, #20
 80094d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094da:	f843 2b04 	str.w	r2, [r3], #4
 80094de:	e7d8      	b.n	8009492 <__multiply+0x4e>
 80094e0:	f8b3 a000 	ldrh.w	sl, [r3]
 80094e4:	f1ba 0f00 	cmp.w	sl, #0
 80094e8:	d023      	beq.n	8009532 <__multiply+0xee>
 80094ea:	46a9      	mov	r9, r5
 80094ec:	f04f 0c00 	mov.w	ip, #0
 80094f0:	f104 0e14 	add.w	lr, r4, #20
 80094f4:	f85e 2b04 	ldr.w	r2, [lr], #4
 80094f8:	f8d9 1000 	ldr.w	r1, [r9]
 80094fc:	fa1f fb82 	uxth.w	fp, r2
 8009500:	b289      	uxth	r1, r1
 8009502:	fb0a 110b 	mla	r1, sl, fp, r1
 8009506:	4461      	add	r1, ip
 8009508:	f8d9 c000 	ldr.w	ip, [r9]
 800950c:	0c12      	lsrs	r2, r2, #16
 800950e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8009512:	fb0a c202 	mla	r2, sl, r2, ip
 8009516:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800951a:	b289      	uxth	r1, r1
 800951c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009520:	4577      	cmp	r7, lr
 8009522:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009526:	f849 1b04 	str.w	r1, [r9], #4
 800952a:	d8e3      	bhi.n	80094f4 <__multiply+0xb0>
 800952c:	9a01      	ldr	r2, [sp, #4]
 800952e:	f845 c002 	str.w	ip, [r5, r2]
 8009532:	9a03      	ldr	r2, [sp, #12]
 8009534:	3304      	adds	r3, #4
 8009536:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800953a:	f1b9 0f00 	cmp.w	r9, #0
 800953e:	d020      	beq.n	8009582 <__multiply+0x13e>
 8009540:	46ae      	mov	lr, r5
 8009542:	f04f 0a00 	mov.w	sl, #0
 8009546:	6829      	ldr	r1, [r5, #0]
 8009548:	f104 0c14 	add.w	ip, r4, #20
 800954c:	f8bc b000 	ldrh.w	fp, [ip]
 8009550:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009554:	b289      	uxth	r1, r1
 8009556:	fb09 220b 	mla	r2, r9, fp, r2
 800955a:	4492      	add	sl, r2
 800955c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009560:	f84e 1b04 	str.w	r1, [lr], #4
 8009564:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009568:	f8be 1000 	ldrh.w	r1, [lr]
 800956c:	0c12      	lsrs	r2, r2, #16
 800956e:	fb09 1102 	mla	r1, r9, r2, r1
 8009572:	4567      	cmp	r7, ip
 8009574:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009578:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800957c:	d8e6      	bhi.n	800954c <__multiply+0x108>
 800957e:	9a01      	ldr	r2, [sp, #4]
 8009580:	50a9      	str	r1, [r5, r2]
 8009582:	3504      	adds	r5, #4
 8009584:	e79b      	b.n	80094be <__multiply+0x7a>
 8009586:	3e01      	subs	r6, #1
 8009588:	e79d      	b.n	80094c6 <__multiply+0x82>
 800958a:	bf00      	nop
 800958c:	0800c2f0 	.word	0x0800c2f0
 8009590:	0800c3e0 	.word	0x0800c3e0

08009594 <__pow5mult>:
 8009594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009598:	4615      	mov	r5, r2
 800959a:	f012 0203 	ands.w	r2, r2, #3
 800959e:	4606      	mov	r6, r0
 80095a0:	460f      	mov	r7, r1
 80095a2:	d007      	beq.n	80095b4 <__pow5mult+0x20>
 80095a4:	4c25      	ldr	r4, [pc, #148]	; (800963c <__pow5mult+0xa8>)
 80095a6:	3a01      	subs	r2, #1
 80095a8:	2300      	movs	r3, #0
 80095aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80095ae:	f7ff fe55 	bl	800925c <__multadd>
 80095b2:	4607      	mov	r7, r0
 80095b4:	10ad      	asrs	r5, r5, #2
 80095b6:	d03d      	beq.n	8009634 <__pow5mult+0xa0>
 80095b8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80095ba:	b97c      	cbnz	r4, 80095dc <__pow5mult+0x48>
 80095bc:	2010      	movs	r0, #16
 80095be:	f7ff fdc3 	bl	8009148 <malloc>
 80095c2:	4602      	mov	r2, r0
 80095c4:	6270      	str	r0, [r6, #36]	; 0x24
 80095c6:	b928      	cbnz	r0, 80095d4 <__pow5mult+0x40>
 80095c8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80095cc:	4b1c      	ldr	r3, [pc, #112]	; (8009640 <__pow5mult+0xac>)
 80095ce:	481d      	ldr	r0, [pc, #116]	; (8009644 <__pow5mult+0xb0>)
 80095d0:	f000 fd72 	bl	800a0b8 <__assert_func>
 80095d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80095d8:	6004      	str	r4, [r0, #0]
 80095da:	60c4      	str	r4, [r0, #12]
 80095dc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80095e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80095e4:	b94c      	cbnz	r4, 80095fa <__pow5mult+0x66>
 80095e6:	f240 2171 	movw	r1, #625	; 0x271
 80095ea:	4630      	mov	r0, r6
 80095ec:	f7ff ff14 	bl	8009418 <__i2b>
 80095f0:	2300      	movs	r3, #0
 80095f2:	4604      	mov	r4, r0
 80095f4:	f8c8 0008 	str.w	r0, [r8, #8]
 80095f8:	6003      	str	r3, [r0, #0]
 80095fa:	f04f 0900 	mov.w	r9, #0
 80095fe:	07eb      	lsls	r3, r5, #31
 8009600:	d50a      	bpl.n	8009618 <__pow5mult+0x84>
 8009602:	4639      	mov	r1, r7
 8009604:	4622      	mov	r2, r4
 8009606:	4630      	mov	r0, r6
 8009608:	f7ff ff1c 	bl	8009444 <__multiply>
 800960c:	4680      	mov	r8, r0
 800960e:	4639      	mov	r1, r7
 8009610:	4630      	mov	r0, r6
 8009612:	f7ff fe01 	bl	8009218 <_Bfree>
 8009616:	4647      	mov	r7, r8
 8009618:	106d      	asrs	r5, r5, #1
 800961a:	d00b      	beq.n	8009634 <__pow5mult+0xa0>
 800961c:	6820      	ldr	r0, [r4, #0]
 800961e:	b938      	cbnz	r0, 8009630 <__pow5mult+0x9c>
 8009620:	4622      	mov	r2, r4
 8009622:	4621      	mov	r1, r4
 8009624:	4630      	mov	r0, r6
 8009626:	f7ff ff0d 	bl	8009444 <__multiply>
 800962a:	6020      	str	r0, [r4, #0]
 800962c:	f8c0 9000 	str.w	r9, [r0]
 8009630:	4604      	mov	r4, r0
 8009632:	e7e4      	b.n	80095fe <__pow5mult+0x6a>
 8009634:	4638      	mov	r0, r7
 8009636:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800963a:	bf00      	nop
 800963c:	0800c530 	.word	0x0800c530
 8009640:	0800c27e 	.word	0x0800c27e
 8009644:	0800c3e0 	.word	0x0800c3e0

08009648 <__lshift>:
 8009648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800964c:	460c      	mov	r4, r1
 800964e:	4607      	mov	r7, r0
 8009650:	4691      	mov	r9, r2
 8009652:	6923      	ldr	r3, [r4, #16]
 8009654:	6849      	ldr	r1, [r1, #4]
 8009656:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800965a:	68a3      	ldr	r3, [r4, #8]
 800965c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009660:	f108 0601 	add.w	r6, r8, #1
 8009664:	42b3      	cmp	r3, r6
 8009666:	db0b      	blt.n	8009680 <__lshift+0x38>
 8009668:	4638      	mov	r0, r7
 800966a:	f7ff fd95 	bl	8009198 <_Balloc>
 800966e:	4605      	mov	r5, r0
 8009670:	b948      	cbnz	r0, 8009686 <__lshift+0x3e>
 8009672:	4602      	mov	r2, r0
 8009674:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009678:	4b29      	ldr	r3, [pc, #164]	; (8009720 <__lshift+0xd8>)
 800967a:	482a      	ldr	r0, [pc, #168]	; (8009724 <__lshift+0xdc>)
 800967c:	f000 fd1c 	bl	800a0b8 <__assert_func>
 8009680:	3101      	adds	r1, #1
 8009682:	005b      	lsls	r3, r3, #1
 8009684:	e7ee      	b.n	8009664 <__lshift+0x1c>
 8009686:	2300      	movs	r3, #0
 8009688:	f100 0114 	add.w	r1, r0, #20
 800968c:	f100 0210 	add.w	r2, r0, #16
 8009690:	4618      	mov	r0, r3
 8009692:	4553      	cmp	r3, sl
 8009694:	db37      	blt.n	8009706 <__lshift+0xbe>
 8009696:	6920      	ldr	r0, [r4, #16]
 8009698:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800969c:	f104 0314 	add.w	r3, r4, #20
 80096a0:	f019 091f 	ands.w	r9, r9, #31
 80096a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80096a8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80096ac:	d02f      	beq.n	800970e <__lshift+0xc6>
 80096ae:	468a      	mov	sl, r1
 80096b0:	f04f 0c00 	mov.w	ip, #0
 80096b4:	f1c9 0e20 	rsb	lr, r9, #32
 80096b8:	681a      	ldr	r2, [r3, #0]
 80096ba:	fa02 f209 	lsl.w	r2, r2, r9
 80096be:	ea42 020c 	orr.w	r2, r2, ip
 80096c2:	f84a 2b04 	str.w	r2, [sl], #4
 80096c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80096ca:	4298      	cmp	r0, r3
 80096cc:	fa22 fc0e 	lsr.w	ip, r2, lr
 80096d0:	d8f2      	bhi.n	80096b8 <__lshift+0x70>
 80096d2:	1b03      	subs	r3, r0, r4
 80096d4:	3b15      	subs	r3, #21
 80096d6:	f023 0303 	bic.w	r3, r3, #3
 80096da:	3304      	adds	r3, #4
 80096dc:	f104 0215 	add.w	r2, r4, #21
 80096e0:	4290      	cmp	r0, r2
 80096e2:	bf38      	it	cc
 80096e4:	2304      	movcc	r3, #4
 80096e6:	f841 c003 	str.w	ip, [r1, r3]
 80096ea:	f1bc 0f00 	cmp.w	ip, #0
 80096ee:	d001      	beq.n	80096f4 <__lshift+0xac>
 80096f0:	f108 0602 	add.w	r6, r8, #2
 80096f4:	3e01      	subs	r6, #1
 80096f6:	4638      	mov	r0, r7
 80096f8:	4621      	mov	r1, r4
 80096fa:	612e      	str	r6, [r5, #16]
 80096fc:	f7ff fd8c 	bl	8009218 <_Bfree>
 8009700:	4628      	mov	r0, r5
 8009702:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009706:	f842 0f04 	str.w	r0, [r2, #4]!
 800970a:	3301      	adds	r3, #1
 800970c:	e7c1      	b.n	8009692 <__lshift+0x4a>
 800970e:	3904      	subs	r1, #4
 8009710:	f853 2b04 	ldr.w	r2, [r3], #4
 8009714:	4298      	cmp	r0, r3
 8009716:	f841 2f04 	str.w	r2, [r1, #4]!
 800971a:	d8f9      	bhi.n	8009710 <__lshift+0xc8>
 800971c:	e7ea      	b.n	80096f4 <__lshift+0xac>
 800971e:	bf00      	nop
 8009720:	0800c2f0 	.word	0x0800c2f0
 8009724:	0800c3e0 	.word	0x0800c3e0

08009728 <__mcmp>:
 8009728:	4603      	mov	r3, r0
 800972a:	690a      	ldr	r2, [r1, #16]
 800972c:	6900      	ldr	r0, [r0, #16]
 800972e:	b530      	push	{r4, r5, lr}
 8009730:	1a80      	subs	r0, r0, r2
 8009732:	d10d      	bne.n	8009750 <__mcmp+0x28>
 8009734:	3314      	adds	r3, #20
 8009736:	3114      	adds	r1, #20
 8009738:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800973c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009740:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009744:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009748:	4295      	cmp	r5, r2
 800974a:	d002      	beq.n	8009752 <__mcmp+0x2a>
 800974c:	d304      	bcc.n	8009758 <__mcmp+0x30>
 800974e:	2001      	movs	r0, #1
 8009750:	bd30      	pop	{r4, r5, pc}
 8009752:	42a3      	cmp	r3, r4
 8009754:	d3f4      	bcc.n	8009740 <__mcmp+0x18>
 8009756:	e7fb      	b.n	8009750 <__mcmp+0x28>
 8009758:	f04f 30ff 	mov.w	r0, #4294967295
 800975c:	e7f8      	b.n	8009750 <__mcmp+0x28>
	...

08009760 <__mdiff>:
 8009760:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009764:	460d      	mov	r5, r1
 8009766:	4607      	mov	r7, r0
 8009768:	4611      	mov	r1, r2
 800976a:	4628      	mov	r0, r5
 800976c:	4614      	mov	r4, r2
 800976e:	f7ff ffdb 	bl	8009728 <__mcmp>
 8009772:	1e06      	subs	r6, r0, #0
 8009774:	d111      	bne.n	800979a <__mdiff+0x3a>
 8009776:	4631      	mov	r1, r6
 8009778:	4638      	mov	r0, r7
 800977a:	f7ff fd0d 	bl	8009198 <_Balloc>
 800977e:	4602      	mov	r2, r0
 8009780:	b928      	cbnz	r0, 800978e <__mdiff+0x2e>
 8009782:	f240 2132 	movw	r1, #562	; 0x232
 8009786:	4b3a      	ldr	r3, [pc, #232]	; (8009870 <__mdiff+0x110>)
 8009788:	483a      	ldr	r0, [pc, #232]	; (8009874 <__mdiff+0x114>)
 800978a:	f000 fc95 	bl	800a0b8 <__assert_func>
 800978e:	2301      	movs	r3, #1
 8009790:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009794:	4610      	mov	r0, r2
 8009796:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800979a:	bfa4      	itt	ge
 800979c:	4623      	movge	r3, r4
 800979e:	462c      	movge	r4, r5
 80097a0:	4638      	mov	r0, r7
 80097a2:	6861      	ldr	r1, [r4, #4]
 80097a4:	bfa6      	itte	ge
 80097a6:	461d      	movge	r5, r3
 80097a8:	2600      	movge	r6, #0
 80097aa:	2601      	movlt	r6, #1
 80097ac:	f7ff fcf4 	bl	8009198 <_Balloc>
 80097b0:	4602      	mov	r2, r0
 80097b2:	b918      	cbnz	r0, 80097bc <__mdiff+0x5c>
 80097b4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80097b8:	4b2d      	ldr	r3, [pc, #180]	; (8009870 <__mdiff+0x110>)
 80097ba:	e7e5      	b.n	8009788 <__mdiff+0x28>
 80097bc:	f102 0814 	add.w	r8, r2, #20
 80097c0:	46c2      	mov	sl, r8
 80097c2:	f04f 0c00 	mov.w	ip, #0
 80097c6:	6927      	ldr	r7, [r4, #16]
 80097c8:	60c6      	str	r6, [r0, #12]
 80097ca:	692e      	ldr	r6, [r5, #16]
 80097cc:	f104 0014 	add.w	r0, r4, #20
 80097d0:	f105 0914 	add.w	r9, r5, #20
 80097d4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80097d8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80097dc:	3410      	adds	r4, #16
 80097de:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80097e2:	f859 3b04 	ldr.w	r3, [r9], #4
 80097e6:	fa1f f18b 	uxth.w	r1, fp
 80097ea:	448c      	add	ip, r1
 80097ec:	b299      	uxth	r1, r3
 80097ee:	0c1b      	lsrs	r3, r3, #16
 80097f0:	ebac 0101 	sub.w	r1, ip, r1
 80097f4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80097f8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80097fc:	b289      	uxth	r1, r1
 80097fe:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8009802:	454e      	cmp	r6, r9
 8009804:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009808:	f84a 3b04 	str.w	r3, [sl], #4
 800980c:	d8e7      	bhi.n	80097de <__mdiff+0x7e>
 800980e:	1b73      	subs	r3, r6, r5
 8009810:	3b15      	subs	r3, #21
 8009812:	f023 0303 	bic.w	r3, r3, #3
 8009816:	3515      	adds	r5, #21
 8009818:	3304      	adds	r3, #4
 800981a:	42ae      	cmp	r6, r5
 800981c:	bf38      	it	cc
 800981e:	2304      	movcc	r3, #4
 8009820:	4418      	add	r0, r3
 8009822:	4443      	add	r3, r8
 8009824:	461e      	mov	r6, r3
 8009826:	4605      	mov	r5, r0
 8009828:	4575      	cmp	r5, lr
 800982a:	d30e      	bcc.n	800984a <__mdiff+0xea>
 800982c:	f10e 0103 	add.w	r1, lr, #3
 8009830:	1a09      	subs	r1, r1, r0
 8009832:	f021 0103 	bic.w	r1, r1, #3
 8009836:	3803      	subs	r0, #3
 8009838:	4586      	cmp	lr, r0
 800983a:	bf38      	it	cc
 800983c:	2100      	movcc	r1, #0
 800983e:	4419      	add	r1, r3
 8009840:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009844:	b18b      	cbz	r3, 800986a <__mdiff+0x10a>
 8009846:	6117      	str	r7, [r2, #16]
 8009848:	e7a4      	b.n	8009794 <__mdiff+0x34>
 800984a:	f855 8b04 	ldr.w	r8, [r5], #4
 800984e:	fa1f f188 	uxth.w	r1, r8
 8009852:	4461      	add	r1, ip
 8009854:	140c      	asrs	r4, r1, #16
 8009856:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800985a:	b289      	uxth	r1, r1
 800985c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009860:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8009864:	f846 1b04 	str.w	r1, [r6], #4
 8009868:	e7de      	b.n	8009828 <__mdiff+0xc8>
 800986a:	3f01      	subs	r7, #1
 800986c:	e7e8      	b.n	8009840 <__mdiff+0xe0>
 800986e:	bf00      	nop
 8009870:	0800c2f0 	.word	0x0800c2f0
 8009874:	0800c3e0 	.word	0x0800c3e0

08009878 <__ulp>:
 8009878:	4b11      	ldr	r3, [pc, #68]	; (80098c0 <__ulp+0x48>)
 800987a:	400b      	ands	r3, r1
 800987c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8009880:	2b00      	cmp	r3, #0
 8009882:	dd02      	ble.n	800988a <__ulp+0x12>
 8009884:	2000      	movs	r0, #0
 8009886:	4619      	mov	r1, r3
 8009888:	4770      	bx	lr
 800988a:	425b      	negs	r3, r3
 800988c:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8009890:	f04f 0000 	mov.w	r0, #0
 8009894:	f04f 0100 	mov.w	r1, #0
 8009898:	ea4f 5223 	mov.w	r2, r3, asr #20
 800989c:	da04      	bge.n	80098a8 <__ulp+0x30>
 800989e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80098a2:	fa43 f102 	asr.w	r1, r3, r2
 80098a6:	4770      	bx	lr
 80098a8:	f1a2 0314 	sub.w	r3, r2, #20
 80098ac:	2b1e      	cmp	r3, #30
 80098ae:	bfd6      	itet	le
 80098b0:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80098b4:	2301      	movgt	r3, #1
 80098b6:	fa22 f303 	lsrle.w	r3, r2, r3
 80098ba:	4618      	mov	r0, r3
 80098bc:	4770      	bx	lr
 80098be:	bf00      	nop
 80098c0:	7ff00000 	.word	0x7ff00000

080098c4 <__b2d>:
 80098c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098c8:	6907      	ldr	r7, [r0, #16]
 80098ca:	f100 0914 	add.w	r9, r0, #20
 80098ce:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80098d2:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80098d6:	f1a7 0804 	sub.w	r8, r7, #4
 80098da:	4630      	mov	r0, r6
 80098dc:	f7ff fd4e 	bl	800937c <__hi0bits>
 80098e0:	f1c0 0320 	rsb	r3, r0, #32
 80098e4:	280a      	cmp	r0, #10
 80098e6:	600b      	str	r3, [r1, #0]
 80098e8:	491f      	ldr	r1, [pc, #124]	; (8009968 <__b2d+0xa4>)
 80098ea:	dc17      	bgt.n	800991c <__b2d+0x58>
 80098ec:	45c1      	cmp	r9, r8
 80098ee:	bf28      	it	cs
 80098f0:	2200      	movcs	r2, #0
 80098f2:	f1c0 0c0b 	rsb	ip, r0, #11
 80098f6:	fa26 f30c 	lsr.w	r3, r6, ip
 80098fa:	bf38      	it	cc
 80098fc:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009900:	ea43 0501 	orr.w	r5, r3, r1
 8009904:	f100 0315 	add.w	r3, r0, #21
 8009908:	fa06 f303 	lsl.w	r3, r6, r3
 800990c:	fa22 f20c 	lsr.w	r2, r2, ip
 8009910:	ea43 0402 	orr.w	r4, r3, r2
 8009914:	4620      	mov	r0, r4
 8009916:	4629      	mov	r1, r5
 8009918:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800991c:	45c1      	cmp	r9, r8
 800991e:	bf2e      	itee	cs
 8009920:	2200      	movcs	r2, #0
 8009922:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009926:	f1a7 0808 	subcc.w	r8, r7, #8
 800992a:	f1b0 030b 	subs.w	r3, r0, #11
 800992e:	d016      	beq.n	800995e <__b2d+0x9a>
 8009930:	f1c3 0720 	rsb	r7, r3, #32
 8009934:	fa22 f107 	lsr.w	r1, r2, r7
 8009938:	45c8      	cmp	r8, r9
 800993a:	fa06 f603 	lsl.w	r6, r6, r3
 800993e:	ea46 0601 	orr.w	r6, r6, r1
 8009942:	bf94      	ite	ls
 8009944:	2100      	movls	r1, #0
 8009946:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800994a:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800994e:	fa02 f003 	lsl.w	r0, r2, r3
 8009952:	40f9      	lsrs	r1, r7
 8009954:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009958:	ea40 0401 	orr.w	r4, r0, r1
 800995c:	e7da      	b.n	8009914 <__b2d+0x50>
 800995e:	4614      	mov	r4, r2
 8009960:	ea46 0501 	orr.w	r5, r6, r1
 8009964:	e7d6      	b.n	8009914 <__b2d+0x50>
 8009966:	bf00      	nop
 8009968:	3ff00000 	.word	0x3ff00000

0800996c <__d2b>:
 800996c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009970:	2101      	movs	r1, #1
 8009972:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8009976:	4690      	mov	r8, r2
 8009978:	461d      	mov	r5, r3
 800997a:	f7ff fc0d 	bl	8009198 <_Balloc>
 800997e:	4604      	mov	r4, r0
 8009980:	b930      	cbnz	r0, 8009990 <__d2b+0x24>
 8009982:	4602      	mov	r2, r0
 8009984:	f240 310a 	movw	r1, #778	; 0x30a
 8009988:	4b24      	ldr	r3, [pc, #144]	; (8009a1c <__d2b+0xb0>)
 800998a:	4825      	ldr	r0, [pc, #148]	; (8009a20 <__d2b+0xb4>)
 800998c:	f000 fb94 	bl	800a0b8 <__assert_func>
 8009990:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8009994:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8009998:	bb2d      	cbnz	r5, 80099e6 <__d2b+0x7a>
 800999a:	9301      	str	r3, [sp, #4]
 800999c:	f1b8 0300 	subs.w	r3, r8, #0
 80099a0:	d026      	beq.n	80099f0 <__d2b+0x84>
 80099a2:	4668      	mov	r0, sp
 80099a4:	9300      	str	r3, [sp, #0]
 80099a6:	f7ff fd09 	bl	80093bc <__lo0bits>
 80099aa:	9900      	ldr	r1, [sp, #0]
 80099ac:	b1f0      	cbz	r0, 80099ec <__d2b+0x80>
 80099ae:	9a01      	ldr	r2, [sp, #4]
 80099b0:	f1c0 0320 	rsb	r3, r0, #32
 80099b4:	fa02 f303 	lsl.w	r3, r2, r3
 80099b8:	430b      	orrs	r3, r1
 80099ba:	40c2      	lsrs	r2, r0
 80099bc:	6163      	str	r3, [r4, #20]
 80099be:	9201      	str	r2, [sp, #4]
 80099c0:	9b01      	ldr	r3, [sp, #4]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	bf14      	ite	ne
 80099c6:	2102      	movne	r1, #2
 80099c8:	2101      	moveq	r1, #1
 80099ca:	61a3      	str	r3, [r4, #24]
 80099cc:	6121      	str	r1, [r4, #16]
 80099ce:	b1c5      	cbz	r5, 8009a02 <__d2b+0x96>
 80099d0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80099d4:	4405      	add	r5, r0
 80099d6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80099da:	603d      	str	r5, [r7, #0]
 80099dc:	6030      	str	r0, [r6, #0]
 80099de:	4620      	mov	r0, r4
 80099e0:	b002      	add	sp, #8
 80099e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80099ea:	e7d6      	b.n	800999a <__d2b+0x2e>
 80099ec:	6161      	str	r1, [r4, #20]
 80099ee:	e7e7      	b.n	80099c0 <__d2b+0x54>
 80099f0:	a801      	add	r0, sp, #4
 80099f2:	f7ff fce3 	bl	80093bc <__lo0bits>
 80099f6:	2101      	movs	r1, #1
 80099f8:	9b01      	ldr	r3, [sp, #4]
 80099fa:	6121      	str	r1, [r4, #16]
 80099fc:	6163      	str	r3, [r4, #20]
 80099fe:	3020      	adds	r0, #32
 8009a00:	e7e5      	b.n	80099ce <__d2b+0x62>
 8009a02:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8009a06:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009a0a:	6038      	str	r0, [r7, #0]
 8009a0c:	6918      	ldr	r0, [r3, #16]
 8009a0e:	f7ff fcb5 	bl	800937c <__hi0bits>
 8009a12:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8009a16:	6031      	str	r1, [r6, #0]
 8009a18:	e7e1      	b.n	80099de <__d2b+0x72>
 8009a1a:	bf00      	nop
 8009a1c:	0800c2f0 	.word	0x0800c2f0
 8009a20:	0800c3e0 	.word	0x0800c3e0

08009a24 <__ratio>:
 8009a24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a28:	4688      	mov	r8, r1
 8009a2a:	4669      	mov	r1, sp
 8009a2c:	4681      	mov	r9, r0
 8009a2e:	f7ff ff49 	bl	80098c4 <__b2d>
 8009a32:	460f      	mov	r7, r1
 8009a34:	4604      	mov	r4, r0
 8009a36:	460d      	mov	r5, r1
 8009a38:	4640      	mov	r0, r8
 8009a3a:	a901      	add	r1, sp, #4
 8009a3c:	f7ff ff42 	bl	80098c4 <__b2d>
 8009a40:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009a44:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009a48:	468b      	mov	fp, r1
 8009a4a:	eba3 0c02 	sub.w	ip, r3, r2
 8009a4e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009a52:	1a9b      	subs	r3, r3, r2
 8009a54:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	bfd5      	itete	le
 8009a5c:	460a      	movle	r2, r1
 8009a5e:	462a      	movgt	r2, r5
 8009a60:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009a64:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009a68:	bfd8      	it	le
 8009a6a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009a6e:	465b      	mov	r3, fp
 8009a70:	4602      	mov	r2, r0
 8009a72:	4639      	mov	r1, r7
 8009a74:	4620      	mov	r0, r4
 8009a76:	f7f6 fe59 	bl	800072c <__aeabi_ddiv>
 8009a7a:	b003      	add	sp, #12
 8009a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009a80 <__copybits>:
 8009a80:	3901      	subs	r1, #1
 8009a82:	b570      	push	{r4, r5, r6, lr}
 8009a84:	1149      	asrs	r1, r1, #5
 8009a86:	6914      	ldr	r4, [r2, #16]
 8009a88:	3101      	adds	r1, #1
 8009a8a:	f102 0314 	add.w	r3, r2, #20
 8009a8e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009a92:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009a96:	1f05      	subs	r5, r0, #4
 8009a98:	42a3      	cmp	r3, r4
 8009a9a:	d30c      	bcc.n	8009ab6 <__copybits+0x36>
 8009a9c:	1aa3      	subs	r3, r4, r2
 8009a9e:	3b11      	subs	r3, #17
 8009aa0:	f023 0303 	bic.w	r3, r3, #3
 8009aa4:	3211      	adds	r2, #17
 8009aa6:	42a2      	cmp	r2, r4
 8009aa8:	bf88      	it	hi
 8009aaa:	2300      	movhi	r3, #0
 8009aac:	4418      	add	r0, r3
 8009aae:	2300      	movs	r3, #0
 8009ab0:	4288      	cmp	r0, r1
 8009ab2:	d305      	bcc.n	8009ac0 <__copybits+0x40>
 8009ab4:	bd70      	pop	{r4, r5, r6, pc}
 8009ab6:	f853 6b04 	ldr.w	r6, [r3], #4
 8009aba:	f845 6f04 	str.w	r6, [r5, #4]!
 8009abe:	e7eb      	b.n	8009a98 <__copybits+0x18>
 8009ac0:	f840 3b04 	str.w	r3, [r0], #4
 8009ac4:	e7f4      	b.n	8009ab0 <__copybits+0x30>

08009ac6 <__any_on>:
 8009ac6:	f100 0214 	add.w	r2, r0, #20
 8009aca:	6900      	ldr	r0, [r0, #16]
 8009acc:	114b      	asrs	r3, r1, #5
 8009ace:	4298      	cmp	r0, r3
 8009ad0:	b510      	push	{r4, lr}
 8009ad2:	db11      	blt.n	8009af8 <__any_on+0x32>
 8009ad4:	dd0a      	ble.n	8009aec <__any_on+0x26>
 8009ad6:	f011 011f 	ands.w	r1, r1, #31
 8009ada:	d007      	beq.n	8009aec <__any_on+0x26>
 8009adc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009ae0:	fa24 f001 	lsr.w	r0, r4, r1
 8009ae4:	fa00 f101 	lsl.w	r1, r0, r1
 8009ae8:	428c      	cmp	r4, r1
 8009aea:	d10b      	bne.n	8009b04 <__any_on+0x3e>
 8009aec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009af0:	4293      	cmp	r3, r2
 8009af2:	d803      	bhi.n	8009afc <__any_on+0x36>
 8009af4:	2000      	movs	r0, #0
 8009af6:	bd10      	pop	{r4, pc}
 8009af8:	4603      	mov	r3, r0
 8009afa:	e7f7      	b.n	8009aec <__any_on+0x26>
 8009afc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009b00:	2900      	cmp	r1, #0
 8009b02:	d0f5      	beq.n	8009af0 <__any_on+0x2a>
 8009b04:	2001      	movs	r0, #1
 8009b06:	e7f6      	b.n	8009af6 <__any_on+0x30>

08009b08 <_calloc_r>:
 8009b08:	b570      	push	{r4, r5, r6, lr}
 8009b0a:	fba1 5402 	umull	r5, r4, r1, r2
 8009b0e:	b934      	cbnz	r4, 8009b1e <_calloc_r+0x16>
 8009b10:	4629      	mov	r1, r5
 8009b12:	f000 f875 	bl	8009c00 <_malloc_r>
 8009b16:	4606      	mov	r6, r0
 8009b18:	b928      	cbnz	r0, 8009b26 <_calloc_r+0x1e>
 8009b1a:	4630      	mov	r0, r6
 8009b1c:	bd70      	pop	{r4, r5, r6, pc}
 8009b1e:	220c      	movs	r2, #12
 8009b20:	2600      	movs	r6, #0
 8009b22:	6002      	str	r2, [r0, #0]
 8009b24:	e7f9      	b.n	8009b1a <_calloc_r+0x12>
 8009b26:	462a      	mov	r2, r5
 8009b28:	4621      	mov	r1, r4
 8009b2a:	f7fc f8a3 	bl	8005c74 <memset>
 8009b2e:	e7f4      	b.n	8009b1a <_calloc_r+0x12>

08009b30 <_free_r>:
 8009b30:	b538      	push	{r3, r4, r5, lr}
 8009b32:	4605      	mov	r5, r0
 8009b34:	2900      	cmp	r1, #0
 8009b36:	d040      	beq.n	8009bba <_free_r+0x8a>
 8009b38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b3c:	1f0c      	subs	r4, r1, #4
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	bfb8      	it	lt
 8009b42:	18e4      	addlt	r4, r4, r3
 8009b44:	f000 fb46 	bl	800a1d4 <__malloc_lock>
 8009b48:	4a1c      	ldr	r2, [pc, #112]	; (8009bbc <_free_r+0x8c>)
 8009b4a:	6813      	ldr	r3, [r2, #0]
 8009b4c:	b933      	cbnz	r3, 8009b5c <_free_r+0x2c>
 8009b4e:	6063      	str	r3, [r4, #4]
 8009b50:	6014      	str	r4, [r2, #0]
 8009b52:	4628      	mov	r0, r5
 8009b54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b58:	f000 bb42 	b.w	800a1e0 <__malloc_unlock>
 8009b5c:	42a3      	cmp	r3, r4
 8009b5e:	d908      	bls.n	8009b72 <_free_r+0x42>
 8009b60:	6820      	ldr	r0, [r4, #0]
 8009b62:	1821      	adds	r1, r4, r0
 8009b64:	428b      	cmp	r3, r1
 8009b66:	bf01      	itttt	eq
 8009b68:	6819      	ldreq	r1, [r3, #0]
 8009b6a:	685b      	ldreq	r3, [r3, #4]
 8009b6c:	1809      	addeq	r1, r1, r0
 8009b6e:	6021      	streq	r1, [r4, #0]
 8009b70:	e7ed      	b.n	8009b4e <_free_r+0x1e>
 8009b72:	461a      	mov	r2, r3
 8009b74:	685b      	ldr	r3, [r3, #4]
 8009b76:	b10b      	cbz	r3, 8009b7c <_free_r+0x4c>
 8009b78:	42a3      	cmp	r3, r4
 8009b7a:	d9fa      	bls.n	8009b72 <_free_r+0x42>
 8009b7c:	6811      	ldr	r1, [r2, #0]
 8009b7e:	1850      	adds	r0, r2, r1
 8009b80:	42a0      	cmp	r0, r4
 8009b82:	d10b      	bne.n	8009b9c <_free_r+0x6c>
 8009b84:	6820      	ldr	r0, [r4, #0]
 8009b86:	4401      	add	r1, r0
 8009b88:	1850      	adds	r0, r2, r1
 8009b8a:	4283      	cmp	r3, r0
 8009b8c:	6011      	str	r1, [r2, #0]
 8009b8e:	d1e0      	bne.n	8009b52 <_free_r+0x22>
 8009b90:	6818      	ldr	r0, [r3, #0]
 8009b92:	685b      	ldr	r3, [r3, #4]
 8009b94:	4401      	add	r1, r0
 8009b96:	6011      	str	r1, [r2, #0]
 8009b98:	6053      	str	r3, [r2, #4]
 8009b9a:	e7da      	b.n	8009b52 <_free_r+0x22>
 8009b9c:	d902      	bls.n	8009ba4 <_free_r+0x74>
 8009b9e:	230c      	movs	r3, #12
 8009ba0:	602b      	str	r3, [r5, #0]
 8009ba2:	e7d6      	b.n	8009b52 <_free_r+0x22>
 8009ba4:	6820      	ldr	r0, [r4, #0]
 8009ba6:	1821      	adds	r1, r4, r0
 8009ba8:	428b      	cmp	r3, r1
 8009baa:	bf01      	itttt	eq
 8009bac:	6819      	ldreq	r1, [r3, #0]
 8009bae:	685b      	ldreq	r3, [r3, #4]
 8009bb0:	1809      	addeq	r1, r1, r0
 8009bb2:	6021      	streq	r1, [r4, #0]
 8009bb4:	6063      	str	r3, [r4, #4]
 8009bb6:	6054      	str	r4, [r2, #4]
 8009bb8:	e7cb      	b.n	8009b52 <_free_r+0x22>
 8009bba:	bd38      	pop	{r3, r4, r5, pc}
 8009bbc:	20000ba0 	.word	0x20000ba0

08009bc0 <sbrk_aligned>:
 8009bc0:	b570      	push	{r4, r5, r6, lr}
 8009bc2:	4e0e      	ldr	r6, [pc, #56]	; (8009bfc <sbrk_aligned+0x3c>)
 8009bc4:	460c      	mov	r4, r1
 8009bc6:	6831      	ldr	r1, [r6, #0]
 8009bc8:	4605      	mov	r5, r0
 8009bca:	b911      	cbnz	r1, 8009bd2 <sbrk_aligned+0x12>
 8009bcc:	f000 f9ee 	bl	8009fac <_sbrk_r>
 8009bd0:	6030      	str	r0, [r6, #0]
 8009bd2:	4621      	mov	r1, r4
 8009bd4:	4628      	mov	r0, r5
 8009bd6:	f000 f9e9 	bl	8009fac <_sbrk_r>
 8009bda:	1c43      	adds	r3, r0, #1
 8009bdc:	d00a      	beq.n	8009bf4 <sbrk_aligned+0x34>
 8009bde:	1cc4      	adds	r4, r0, #3
 8009be0:	f024 0403 	bic.w	r4, r4, #3
 8009be4:	42a0      	cmp	r0, r4
 8009be6:	d007      	beq.n	8009bf8 <sbrk_aligned+0x38>
 8009be8:	1a21      	subs	r1, r4, r0
 8009bea:	4628      	mov	r0, r5
 8009bec:	f000 f9de 	bl	8009fac <_sbrk_r>
 8009bf0:	3001      	adds	r0, #1
 8009bf2:	d101      	bne.n	8009bf8 <sbrk_aligned+0x38>
 8009bf4:	f04f 34ff 	mov.w	r4, #4294967295
 8009bf8:	4620      	mov	r0, r4
 8009bfa:	bd70      	pop	{r4, r5, r6, pc}
 8009bfc:	20000ba4 	.word	0x20000ba4

08009c00 <_malloc_r>:
 8009c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c04:	1ccd      	adds	r5, r1, #3
 8009c06:	f025 0503 	bic.w	r5, r5, #3
 8009c0a:	3508      	adds	r5, #8
 8009c0c:	2d0c      	cmp	r5, #12
 8009c0e:	bf38      	it	cc
 8009c10:	250c      	movcc	r5, #12
 8009c12:	2d00      	cmp	r5, #0
 8009c14:	4607      	mov	r7, r0
 8009c16:	db01      	blt.n	8009c1c <_malloc_r+0x1c>
 8009c18:	42a9      	cmp	r1, r5
 8009c1a:	d905      	bls.n	8009c28 <_malloc_r+0x28>
 8009c1c:	230c      	movs	r3, #12
 8009c1e:	2600      	movs	r6, #0
 8009c20:	603b      	str	r3, [r7, #0]
 8009c22:	4630      	mov	r0, r6
 8009c24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c28:	4e2e      	ldr	r6, [pc, #184]	; (8009ce4 <_malloc_r+0xe4>)
 8009c2a:	f000 fad3 	bl	800a1d4 <__malloc_lock>
 8009c2e:	6833      	ldr	r3, [r6, #0]
 8009c30:	461c      	mov	r4, r3
 8009c32:	bb34      	cbnz	r4, 8009c82 <_malloc_r+0x82>
 8009c34:	4629      	mov	r1, r5
 8009c36:	4638      	mov	r0, r7
 8009c38:	f7ff ffc2 	bl	8009bc0 <sbrk_aligned>
 8009c3c:	1c43      	adds	r3, r0, #1
 8009c3e:	4604      	mov	r4, r0
 8009c40:	d14d      	bne.n	8009cde <_malloc_r+0xde>
 8009c42:	6834      	ldr	r4, [r6, #0]
 8009c44:	4626      	mov	r6, r4
 8009c46:	2e00      	cmp	r6, #0
 8009c48:	d140      	bne.n	8009ccc <_malloc_r+0xcc>
 8009c4a:	6823      	ldr	r3, [r4, #0]
 8009c4c:	4631      	mov	r1, r6
 8009c4e:	4638      	mov	r0, r7
 8009c50:	eb04 0803 	add.w	r8, r4, r3
 8009c54:	f000 f9aa 	bl	8009fac <_sbrk_r>
 8009c58:	4580      	cmp	r8, r0
 8009c5a:	d13a      	bne.n	8009cd2 <_malloc_r+0xd2>
 8009c5c:	6821      	ldr	r1, [r4, #0]
 8009c5e:	3503      	adds	r5, #3
 8009c60:	1a6d      	subs	r5, r5, r1
 8009c62:	f025 0503 	bic.w	r5, r5, #3
 8009c66:	3508      	adds	r5, #8
 8009c68:	2d0c      	cmp	r5, #12
 8009c6a:	bf38      	it	cc
 8009c6c:	250c      	movcc	r5, #12
 8009c6e:	4638      	mov	r0, r7
 8009c70:	4629      	mov	r1, r5
 8009c72:	f7ff ffa5 	bl	8009bc0 <sbrk_aligned>
 8009c76:	3001      	adds	r0, #1
 8009c78:	d02b      	beq.n	8009cd2 <_malloc_r+0xd2>
 8009c7a:	6823      	ldr	r3, [r4, #0]
 8009c7c:	442b      	add	r3, r5
 8009c7e:	6023      	str	r3, [r4, #0]
 8009c80:	e00e      	b.n	8009ca0 <_malloc_r+0xa0>
 8009c82:	6822      	ldr	r2, [r4, #0]
 8009c84:	1b52      	subs	r2, r2, r5
 8009c86:	d41e      	bmi.n	8009cc6 <_malloc_r+0xc6>
 8009c88:	2a0b      	cmp	r2, #11
 8009c8a:	d916      	bls.n	8009cba <_malloc_r+0xba>
 8009c8c:	1961      	adds	r1, r4, r5
 8009c8e:	42a3      	cmp	r3, r4
 8009c90:	6025      	str	r5, [r4, #0]
 8009c92:	bf18      	it	ne
 8009c94:	6059      	strne	r1, [r3, #4]
 8009c96:	6863      	ldr	r3, [r4, #4]
 8009c98:	bf08      	it	eq
 8009c9a:	6031      	streq	r1, [r6, #0]
 8009c9c:	5162      	str	r2, [r4, r5]
 8009c9e:	604b      	str	r3, [r1, #4]
 8009ca0:	4638      	mov	r0, r7
 8009ca2:	f104 060b 	add.w	r6, r4, #11
 8009ca6:	f000 fa9b 	bl	800a1e0 <__malloc_unlock>
 8009caa:	f026 0607 	bic.w	r6, r6, #7
 8009cae:	1d23      	adds	r3, r4, #4
 8009cb0:	1af2      	subs	r2, r6, r3
 8009cb2:	d0b6      	beq.n	8009c22 <_malloc_r+0x22>
 8009cb4:	1b9b      	subs	r3, r3, r6
 8009cb6:	50a3      	str	r3, [r4, r2]
 8009cb8:	e7b3      	b.n	8009c22 <_malloc_r+0x22>
 8009cba:	6862      	ldr	r2, [r4, #4]
 8009cbc:	42a3      	cmp	r3, r4
 8009cbe:	bf0c      	ite	eq
 8009cc0:	6032      	streq	r2, [r6, #0]
 8009cc2:	605a      	strne	r2, [r3, #4]
 8009cc4:	e7ec      	b.n	8009ca0 <_malloc_r+0xa0>
 8009cc6:	4623      	mov	r3, r4
 8009cc8:	6864      	ldr	r4, [r4, #4]
 8009cca:	e7b2      	b.n	8009c32 <_malloc_r+0x32>
 8009ccc:	4634      	mov	r4, r6
 8009cce:	6876      	ldr	r6, [r6, #4]
 8009cd0:	e7b9      	b.n	8009c46 <_malloc_r+0x46>
 8009cd2:	230c      	movs	r3, #12
 8009cd4:	4638      	mov	r0, r7
 8009cd6:	603b      	str	r3, [r7, #0]
 8009cd8:	f000 fa82 	bl	800a1e0 <__malloc_unlock>
 8009cdc:	e7a1      	b.n	8009c22 <_malloc_r+0x22>
 8009cde:	6025      	str	r5, [r4, #0]
 8009ce0:	e7de      	b.n	8009ca0 <_malloc_r+0xa0>
 8009ce2:	bf00      	nop
 8009ce4:	20000ba0 	.word	0x20000ba0

08009ce8 <__ssputs_r>:
 8009ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cec:	688e      	ldr	r6, [r1, #8]
 8009cee:	4682      	mov	sl, r0
 8009cf0:	429e      	cmp	r6, r3
 8009cf2:	460c      	mov	r4, r1
 8009cf4:	4690      	mov	r8, r2
 8009cf6:	461f      	mov	r7, r3
 8009cf8:	d838      	bhi.n	8009d6c <__ssputs_r+0x84>
 8009cfa:	898a      	ldrh	r2, [r1, #12]
 8009cfc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009d00:	d032      	beq.n	8009d68 <__ssputs_r+0x80>
 8009d02:	6825      	ldr	r5, [r4, #0]
 8009d04:	6909      	ldr	r1, [r1, #16]
 8009d06:	3301      	adds	r3, #1
 8009d08:	eba5 0901 	sub.w	r9, r5, r1
 8009d0c:	6965      	ldr	r5, [r4, #20]
 8009d0e:	444b      	add	r3, r9
 8009d10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009d14:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009d18:	106d      	asrs	r5, r5, #1
 8009d1a:	429d      	cmp	r5, r3
 8009d1c:	bf38      	it	cc
 8009d1e:	461d      	movcc	r5, r3
 8009d20:	0553      	lsls	r3, r2, #21
 8009d22:	d531      	bpl.n	8009d88 <__ssputs_r+0xa0>
 8009d24:	4629      	mov	r1, r5
 8009d26:	f7ff ff6b 	bl	8009c00 <_malloc_r>
 8009d2a:	4606      	mov	r6, r0
 8009d2c:	b950      	cbnz	r0, 8009d44 <__ssputs_r+0x5c>
 8009d2e:	230c      	movs	r3, #12
 8009d30:	f04f 30ff 	mov.w	r0, #4294967295
 8009d34:	f8ca 3000 	str.w	r3, [sl]
 8009d38:	89a3      	ldrh	r3, [r4, #12]
 8009d3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d3e:	81a3      	strh	r3, [r4, #12]
 8009d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d44:	464a      	mov	r2, r9
 8009d46:	6921      	ldr	r1, [r4, #16]
 8009d48:	f7fb ff86 	bl	8005c58 <memcpy>
 8009d4c:	89a3      	ldrh	r3, [r4, #12]
 8009d4e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009d52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d56:	81a3      	strh	r3, [r4, #12]
 8009d58:	6126      	str	r6, [r4, #16]
 8009d5a:	444e      	add	r6, r9
 8009d5c:	6026      	str	r6, [r4, #0]
 8009d5e:	463e      	mov	r6, r7
 8009d60:	6165      	str	r5, [r4, #20]
 8009d62:	eba5 0509 	sub.w	r5, r5, r9
 8009d66:	60a5      	str	r5, [r4, #8]
 8009d68:	42be      	cmp	r6, r7
 8009d6a:	d900      	bls.n	8009d6e <__ssputs_r+0x86>
 8009d6c:	463e      	mov	r6, r7
 8009d6e:	4632      	mov	r2, r6
 8009d70:	4641      	mov	r1, r8
 8009d72:	6820      	ldr	r0, [r4, #0]
 8009d74:	f000 fa14 	bl	800a1a0 <memmove>
 8009d78:	68a3      	ldr	r3, [r4, #8]
 8009d7a:	2000      	movs	r0, #0
 8009d7c:	1b9b      	subs	r3, r3, r6
 8009d7e:	60a3      	str	r3, [r4, #8]
 8009d80:	6823      	ldr	r3, [r4, #0]
 8009d82:	4433      	add	r3, r6
 8009d84:	6023      	str	r3, [r4, #0]
 8009d86:	e7db      	b.n	8009d40 <__ssputs_r+0x58>
 8009d88:	462a      	mov	r2, r5
 8009d8a:	f000 fa2f 	bl	800a1ec <_realloc_r>
 8009d8e:	4606      	mov	r6, r0
 8009d90:	2800      	cmp	r0, #0
 8009d92:	d1e1      	bne.n	8009d58 <__ssputs_r+0x70>
 8009d94:	4650      	mov	r0, sl
 8009d96:	6921      	ldr	r1, [r4, #16]
 8009d98:	f7ff feca 	bl	8009b30 <_free_r>
 8009d9c:	e7c7      	b.n	8009d2e <__ssputs_r+0x46>
	...

08009da0 <_svfiprintf_r>:
 8009da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009da4:	4698      	mov	r8, r3
 8009da6:	898b      	ldrh	r3, [r1, #12]
 8009da8:	4607      	mov	r7, r0
 8009daa:	061b      	lsls	r3, r3, #24
 8009dac:	460d      	mov	r5, r1
 8009dae:	4614      	mov	r4, r2
 8009db0:	b09d      	sub	sp, #116	; 0x74
 8009db2:	d50e      	bpl.n	8009dd2 <_svfiprintf_r+0x32>
 8009db4:	690b      	ldr	r3, [r1, #16]
 8009db6:	b963      	cbnz	r3, 8009dd2 <_svfiprintf_r+0x32>
 8009db8:	2140      	movs	r1, #64	; 0x40
 8009dba:	f7ff ff21 	bl	8009c00 <_malloc_r>
 8009dbe:	6028      	str	r0, [r5, #0]
 8009dc0:	6128      	str	r0, [r5, #16]
 8009dc2:	b920      	cbnz	r0, 8009dce <_svfiprintf_r+0x2e>
 8009dc4:	230c      	movs	r3, #12
 8009dc6:	603b      	str	r3, [r7, #0]
 8009dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8009dcc:	e0d1      	b.n	8009f72 <_svfiprintf_r+0x1d2>
 8009dce:	2340      	movs	r3, #64	; 0x40
 8009dd0:	616b      	str	r3, [r5, #20]
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	9309      	str	r3, [sp, #36]	; 0x24
 8009dd6:	2320      	movs	r3, #32
 8009dd8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009ddc:	2330      	movs	r3, #48	; 0x30
 8009dde:	f04f 0901 	mov.w	r9, #1
 8009de2:	f8cd 800c 	str.w	r8, [sp, #12]
 8009de6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009f8c <_svfiprintf_r+0x1ec>
 8009dea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009dee:	4623      	mov	r3, r4
 8009df0:	469a      	mov	sl, r3
 8009df2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009df6:	b10a      	cbz	r2, 8009dfc <_svfiprintf_r+0x5c>
 8009df8:	2a25      	cmp	r2, #37	; 0x25
 8009dfa:	d1f9      	bne.n	8009df0 <_svfiprintf_r+0x50>
 8009dfc:	ebba 0b04 	subs.w	fp, sl, r4
 8009e00:	d00b      	beq.n	8009e1a <_svfiprintf_r+0x7a>
 8009e02:	465b      	mov	r3, fp
 8009e04:	4622      	mov	r2, r4
 8009e06:	4629      	mov	r1, r5
 8009e08:	4638      	mov	r0, r7
 8009e0a:	f7ff ff6d 	bl	8009ce8 <__ssputs_r>
 8009e0e:	3001      	adds	r0, #1
 8009e10:	f000 80aa 	beq.w	8009f68 <_svfiprintf_r+0x1c8>
 8009e14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e16:	445a      	add	r2, fp
 8009e18:	9209      	str	r2, [sp, #36]	; 0x24
 8009e1a:	f89a 3000 	ldrb.w	r3, [sl]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	f000 80a2 	beq.w	8009f68 <_svfiprintf_r+0x1c8>
 8009e24:	2300      	movs	r3, #0
 8009e26:	f04f 32ff 	mov.w	r2, #4294967295
 8009e2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e2e:	f10a 0a01 	add.w	sl, sl, #1
 8009e32:	9304      	str	r3, [sp, #16]
 8009e34:	9307      	str	r3, [sp, #28]
 8009e36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e3a:	931a      	str	r3, [sp, #104]	; 0x68
 8009e3c:	4654      	mov	r4, sl
 8009e3e:	2205      	movs	r2, #5
 8009e40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e44:	4851      	ldr	r0, [pc, #324]	; (8009f8c <_svfiprintf_r+0x1ec>)
 8009e46:	f7ff f999 	bl	800917c <memchr>
 8009e4a:	9a04      	ldr	r2, [sp, #16]
 8009e4c:	b9d8      	cbnz	r0, 8009e86 <_svfiprintf_r+0xe6>
 8009e4e:	06d0      	lsls	r0, r2, #27
 8009e50:	bf44      	itt	mi
 8009e52:	2320      	movmi	r3, #32
 8009e54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e58:	0711      	lsls	r1, r2, #28
 8009e5a:	bf44      	itt	mi
 8009e5c:	232b      	movmi	r3, #43	; 0x2b
 8009e5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e62:	f89a 3000 	ldrb.w	r3, [sl]
 8009e66:	2b2a      	cmp	r3, #42	; 0x2a
 8009e68:	d015      	beq.n	8009e96 <_svfiprintf_r+0xf6>
 8009e6a:	4654      	mov	r4, sl
 8009e6c:	2000      	movs	r0, #0
 8009e6e:	f04f 0c0a 	mov.w	ip, #10
 8009e72:	9a07      	ldr	r2, [sp, #28]
 8009e74:	4621      	mov	r1, r4
 8009e76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e7a:	3b30      	subs	r3, #48	; 0x30
 8009e7c:	2b09      	cmp	r3, #9
 8009e7e:	d94e      	bls.n	8009f1e <_svfiprintf_r+0x17e>
 8009e80:	b1b0      	cbz	r0, 8009eb0 <_svfiprintf_r+0x110>
 8009e82:	9207      	str	r2, [sp, #28]
 8009e84:	e014      	b.n	8009eb0 <_svfiprintf_r+0x110>
 8009e86:	eba0 0308 	sub.w	r3, r0, r8
 8009e8a:	fa09 f303 	lsl.w	r3, r9, r3
 8009e8e:	4313      	orrs	r3, r2
 8009e90:	46a2      	mov	sl, r4
 8009e92:	9304      	str	r3, [sp, #16]
 8009e94:	e7d2      	b.n	8009e3c <_svfiprintf_r+0x9c>
 8009e96:	9b03      	ldr	r3, [sp, #12]
 8009e98:	1d19      	adds	r1, r3, #4
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	9103      	str	r1, [sp, #12]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	bfbb      	ittet	lt
 8009ea2:	425b      	neglt	r3, r3
 8009ea4:	f042 0202 	orrlt.w	r2, r2, #2
 8009ea8:	9307      	strge	r3, [sp, #28]
 8009eaa:	9307      	strlt	r3, [sp, #28]
 8009eac:	bfb8      	it	lt
 8009eae:	9204      	strlt	r2, [sp, #16]
 8009eb0:	7823      	ldrb	r3, [r4, #0]
 8009eb2:	2b2e      	cmp	r3, #46	; 0x2e
 8009eb4:	d10c      	bne.n	8009ed0 <_svfiprintf_r+0x130>
 8009eb6:	7863      	ldrb	r3, [r4, #1]
 8009eb8:	2b2a      	cmp	r3, #42	; 0x2a
 8009eba:	d135      	bne.n	8009f28 <_svfiprintf_r+0x188>
 8009ebc:	9b03      	ldr	r3, [sp, #12]
 8009ebe:	3402      	adds	r4, #2
 8009ec0:	1d1a      	adds	r2, r3, #4
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	9203      	str	r2, [sp, #12]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	bfb8      	it	lt
 8009eca:	f04f 33ff 	movlt.w	r3, #4294967295
 8009ece:	9305      	str	r3, [sp, #20]
 8009ed0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8009f90 <_svfiprintf_r+0x1f0>
 8009ed4:	2203      	movs	r2, #3
 8009ed6:	4650      	mov	r0, sl
 8009ed8:	7821      	ldrb	r1, [r4, #0]
 8009eda:	f7ff f94f 	bl	800917c <memchr>
 8009ede:	b140      	cbz	r0, 8009ef2 <_svfiprintf_r+0x152>
 8009ee0:	2340      	movs	r3, #64	; 0x40
 8009ee2:	eba0 000a 	sub.w	r0, r0, sl
 8009ee6:	fa03 f000 	lsl.w	r0, r3, r0
 8009eea:	9b04      	ldr	r3, [sp, #16]
 8009eec:	3401      	adds	r4, #1
 8009eee:	4303      	orrs	r3, r0
 8009ef0:	9304      	str	r3, [sp, #16]
 8009ef2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ef6:	2206      	movs	r2, #6
 8009ef8:	4826      	ldr	r0, [pc, #152]	; (8009f94 <_svfiprintf_r+0x1f4>)
 8009efa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009efe:	f7ff f93d 	bl	800917c <memchr>
 8009f02:	2800      	cmp	r0, #0
 8009f04:	d038      	beq.n	8009f78 <_svfiprintf_r+0x1d8>
 8009f06:	4b24      	ldr	r3, [pc, #144]	; (8009f98 <_svfiprintf_r+0x1f8>)
 8009f08:	bb1b      	cbnz	r3, 8009f52 <_svfiprintf_r+0x1b2>
 8009f0a:	9b03      	ldr	r3, [sp, #12]
 8009f0c:	3307      	adds	r3, #7
 8009f0e:	f023 0307 	bic.w	r3, r3, #7
 8009f12:	3308      	adds	r3, #8
 8009f14:	9303      	str	r3, [sp, #12]
 8009f16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f18:	4433      	add	r3, r6
 8009f1a:	9309      	str	r3, [sp, #36]	; 0x24
 8009f1c:	e767      	b.n	8009dee <_svfiprintf_r+0x4e>
 8009f1e:	460c      	mov	r4, r1
 8009f20:	2001      	movs	r0, #1
 8009f22:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f26:	e7a5      	b.n	8009e74 <_svfiprintf_r+0xd4>
 8009f28:	2300      	movs	r3, #0
 8009f2a:	f04f 0c0a 	mov.w	ip, #10
 8009f2e:	4619      	mov	r1, r3
 8009f30:	3401      	adds	r4, #1
 8009f32:	9305      	str	r3, [sp, #20]
 8009f34:	4620      	mov	r0, r4
 8009f36:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f3a:	3a30      	subs	r2, #48	; 0x30
 8009f3c:	2a09      	cmp	r2, #9
 8009f3e:	d903      	bls.n	8009f48 <_svfiprintf_r+0x1a8>
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d0c5      	beq.n	8009ed0 <_svfiprintf_r+0x130>
 8009f44:	9105      	str	r1, [sp, #20]
 8009f46:	e7c3      	b.n	8009ed0 <_svfiprintf_r+0x130>
 8009f48:	4604      	mov	r4, r0
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f50:	e7f0      	b.n	8009f34 <_svfiprintf_r+0x194>
 8009f52:	ab03      	add	r3, sp, #12
 8009f54:	9300      	str	r3, [sp, #0]
 8009f56:	462a      	mov	r2, r5
 8009f58:	4638      	mov	r0, r7
 8009f5a:	4b10      	ldr	r3, [pc, #64]	; (8009f9c <_svfiprintf_r+0x1fc>)
 8009f5c:	a904      	add	r1, sp, #16
 8009f5e:	f7fb ff2f 	bl	8005dc0 <_printf_float>
 8009f62:	1c42      	adds	r2, r0, #1
 8009f64:	4606      	mov	r6, r0
 8009f66:	d1d6      	bne.n	8009f16 <_svfiprintf_r+0x176>
 8009f68:	89ab      	ldrh	r3, [r5, #12]
 8009f6a:	065b      	lsls	r3, r3, #25
 8009f6c:	f53f af2c 	bmi.w	8009dc8 <_svfiprintf_r+0x28>
 8009f70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f72:	b01d      	add	sp, #116	; 0x74
 8009f74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f78:	ab03      	add	r3, sp, #12
 8009f7a:	9300      	str	r3, [sp, #0]
 8009f7c:	462a      	mov	r2, r5
 8009f7e:	4638      	mov	r0, r7
 8009f80:	4b06      	ldr	r3, [pc, #24]	; (8009f9c <_svfiprintf_r+0x1fc>)
 8009f82:	a904      	add	r1, sp, #16
 8009f84:	f7fc f9b8 	bl	80062f8 <_printf_i>
 8009f88:	e7eb      	b.n	8009f62 <_svfiprintf_r+0x1c2>
 8009f8a:	bf00      	nop
 8009f8c:	0800c53c 	.word	0x0800c53c
 8009f90:	0800c542 	.word	0x0800c542
 8009f94:	0800c546 	.word	0x0800c546
 8009f98:	08005dc1 	.word	0x08005dc1
 8009f9c:	08009ce9 	.word	0x08009ce9

08009fa0 <nan>:
 8009fa0:	2000      	movs	r0, #0
 8009fa2:	4901      	ldr	r1, [pc, #4]	; (8009fa8 <nan+0x8>)
 8009fa4:	4770      	bx	lr
 8009fa6:	bf00      	nop
 8009fa8:	7ff80000 	.word	0x7ff80000

08009fac <_sbrk_r>:
 8009fac:	b538      	push	{r3, r4, r5, lr}
 8009fae:	2300      	movs	r3, #0
 8009fb0:	4d05      	ldr	r5, [pc, #20]	; (8009fc8 <_sbrk_r+0x1c>)
 8009fb2:	4604      	mov	r4, r0
 8009fb4:	4608      	mov	r0, r1
 8009fb6:	602b      	str	r3, [r5, #0]
 8009fb8:	f7f8 fac6 	bl	8002548 <_sbrk>
 8009fbc:	1c43      	adds	r3, r0, #1
 8009fbe:	d102      	bne.n	8009fc6 <_sbrk_r+0x1a>
 8009fc0:	682b      	ldr	r3, [r5, #0]
 8009fc2:	b103      	cbz	r3, 8009fc6 <_sbrk_r+0x1a>
 8009fc4:	6023      	str	r3, [r4, #0]
 8009fc6:	bd38      	pop	{r3, r4, r5, pc}
 8009fc8:	20000ba8 	.word	0x20000ba8

08009fcc <__sread>:
 8009fcc:	b510      	push	{r4, lr}
 8009fce:	460c      	mov	r4, r1
 8009fd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fd4:	f000 fa90 	bl	800a4f8 <_read_r>
 8009fd8:	2800      	cmp	r0, #0
 8009fda:	bfab      	itete	ge
 8009fdc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009fde:	89a3      	ldrhlt	r3, [r4, #12]
 8009fe0:	181b      	addge	r3, r3, r0
 8009fe2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009fe6:	bfac      	ite	ge
 8009fe8:	6563      	strge	r3, [r4, #84]	; 0x54
 8009fea:	81a3      	strhlt	r3, [r4, #12]
 8009fec:	bd10      	pop	{r4, pc}

08009fee <__swrite>:
 8009fee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ff2:	461f      	mov	r7, r3
 8009ff4:	898b      	ldrh	r3, [r1, #12]
 8009ff6:	4605      	mov	r5, r0
 8009ff8:	05db      	lsls	r3, r3, #23
 8009ffa:	460c      	mov	r4, r1
 8009ffc:	4616      	mov	r6, r2
 8009ffe:	d505      	bpl.n	800a00c <__swrite+0x1e>
 800a000:	2302      	movs	r3, #2
 800a002:	2200      	movs	r2, #0
 800a004:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a008:	f000 f8b8 	bl	800a17c <_lseek_r>
 800a00c:	89a3      	ldrh	r3, [r4, #12]
 800a00e:	4632      	mov	r2, r6
 800a010:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a014:	81a3      	strh	r3, [r4, #12]
 800a016:	4628      	mov	r0, r5
 800a018:	463b      	mov	r3, r7
 800a01a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a01e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a022:	f000 b837 	b.w	800a094 <_write_r>

0800a026 <__sseek>:
 800a026:	b510      	push	{r4, lr}
 800a028:	460c      	mov	r4, r1
 800a02a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a02e:	f000 f8a5 	bl	800a17c <_lseek_r>
 800a032:	1c43      	adds	r3, r0, #1
 800a034:	89a3      	ldrh	r3, [r4, #12]
 800a036:	bf15      	itete	ne
 800a038:	6560      	strne	r0, [r4, #84]	; 0x54
 800a03a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a03e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a042:	81a3      	strheq	r3, [r4, #12]
 800a044:	bf18      	it	ne
 800a046:	81a3      	strhne	r3, [r4, #12]
 800a048:	bd10      	pop	{r4, pc}

0800a04a <__sclose>:
 800a04a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a04e:	f000 b851 	b.w	800a0f4 <_close_r>

0800a052 <strncmp>:
 800a052:	4603      	mov	r3, r0
 800a054:	b510      	push	{r4, lr}
 800a056:	b172      	cbz	r2, 800a076 <strncmp+0x24>
 800a058:	3901      	subs	r1, #1
 800a05a:	1884      	adds	r4, r0, r2
 800a05c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a060:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a064:	4290      	cmp	r0, r2
 800a066:	d101      	bne.n	800a06c <strncmp+0x1a>
 800a068:	42a3      	cmp	r3, r4
 800a06a:	d101      	bne.n	800a070 <strncmp+0x1e>
 800a06c:	1a80      	subs	r0, r0, r2
 800a06e:	bd10      	pop	{r4, pc}
 800a070:	2800      	cmp	r0, #0
 800a072:	d1f3      	bne.n	800a05c <strncmp+0xa>
 800a074:	e7fa      	b.n	800a06c <strncmp+0x1a>
 800a076:	4610      	mov	r0, r2
 800a078:	e7f9      	b.n	800a06e <strncmp+0x1c>

0800a07a <__ascii_wctomb>:
 800a07a:	4603      	mov	r3, r0
 800a07c:	4608      	mov	r0, r1
 800a07e:	b141      	cbz	r1, 800a092 <__ascii_wctomb+0x18>
 800a080:	2aff      	cmp	r2, #255	; 0xff
 800a082:	d904      	bls.n	800a08e <__ascii_wctomb+0x14>
 800a084:	228a      	movs	r2, #138	; 0x8a
 800a086:	f04f 30ff 	mov.w	r0, #4294967295
 800a08a:	601a      	str	r2, [r3, #0]
 800a08c:	4770      	bx	lr
 800a08e:	2001      	movs	r0, #1
 800a090:	700a      	strb	r2, [r1, #0]
 800a092:	4770      	bx	lr

0800a094 <_write_r>:
 800a094:	b538      	push	{r3, r4, r5, lr}
 800a096:	4604      	mov	r4, r0
 800a098:	4608      	mov	r0, r1
 800a09a:	4611      	mov	r1, r2
 800a09c:	2200      	movs	r2, #0
 800a09e:	4d05      	ldr	r5, [pc, #20]	; (800a0b4 <_write_r+0x20>)
 800a0a0:	602a      	str	r2, [r5, #0]
 800a0a2:	461a      	mov	r2, r3
 800a0a4:	f7f8 fa04 	bl	80024b0 <_write>
 800a0a8:	1c43      	adds	r3, r0, #1
 800a0aa:	d102      	bne.n	800a0b2 <_write_r+0x1e>
 800a0ac:	682b      	ldr	r3, [r5, #0]
 800a0ae:	b103      	cbz	r3, 800a0b2 <_write_r+0x1e>
 800a0b0:	6023      	str	r3, [r4, #0]
 800a0b2:	bd38      	pop	{r3, r4, r5, pc}
 800a0b4:	20000ba8 	.word	0x20000ba8

0800a0b8 <__assert_func>:
 800a0b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a0ba:	4614      	mov	r4, r2
 800a0bc:	461a      	mov	r2, r3
 800a0be:	4b09      	ldr	r3, [pc, #36]	; (800a0e4 <__assert_func+0x2c>)
 800a0c0:	4605      	mov	r5, r0
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	68d8      	ldr	r0, [r3, #12]
 800a0c6:	b14c      	cbz	r4, 800a0dc <__assert_func+0x24>
 800a0c8:	4b07      	ldr	r3, [pc, #28]	; (800a0e8 <__assert_func+0x30>)
 800a0ca:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a0ce:	9100      	str	r1, [sp, #0]
 800a0d0:	462b      	mov	r3, r5
 800a0d2:	4906      	ldr	r1, [pc, #24]	; (800a0ec <__assert_func+0x34>)
 800a0d4:	f000 f81e 	bl	800a114 <fiprintf>
 800a0d8:	f000 fa20 	bl	800a51c <abort>
 800a0dc:	4b04      	ldr	r3, [pc, #16]	; (800a0f0 <__assert_func+0x38>)
 800a0de:	461c      	mov	r4, r3
 800a0e0:	e7f3      	b.n	800a0ca <__assert_func+0x12>
 800a0e2:	bf00      	nop
 800a0e4:	2000000c 	.word	0x2000000c
 800a0e8:	0800c54d 	.word	0x0800c54d
 800a0ec:	0800c55a 	.word	0x0800c55a
 800a0f0:	0800c588 	.word	0x0800c588

0800a0f4 <_close_r>:
 800a0f4:	b538      	push	{r3, r4, r5, lr}
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	4d05      	ldr	r5, [pc, #20]	; (800a110 <_close_r+0x1c>)
 800a0fa:	4604      	mov	r4, r0
 800a0fc:	4608      	mov	r0, r1
 800a0fe:	602b      	str	r3, [r5, #0]
 800a100:	f7f8 f9f2 	bl	80024e8 <_close>
 800a104:	1c43      	adds	r3, r0, #1
 800a106:	d102      	bne.n	800a10e <_close_r+0x1a>
 800a108:	682b      	ldr	r3, [r5, #0]
 800a10a:	b103      	cbz	r3, 800a10e <_close_r+0x1a>
 800a10c:	6023      	str	r3, [r4, #0]
 800a10e:	bd38      	pop	{r3, r4, r5, pc}
 800a110:	20000ba8 	.word	0x20000ba8

0800a114 <fiprintf>:
 800a114:	b40e      	push	{r1, r2, r3}
 800a116:	b503      	push	{r0, r1, lr}
 800a118:	4601      	mov	r1, r0
 800a11a:	ab03      	add	r3, sp, #12
 800a11c:	4805      	ldr	r0, [pc, #20]	; (800a134 <fiprintf+0x20>)
 800a11e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a122:	6800      	ldr	r0, [r0, #0]
 800a124:	9301      	str	r3, [sp, #4]
 800a126:	f000 f8b7 	bl	800a298 <_vfiprintf_r>
 800a12a:	b002      	add	sp, #8
 800a12c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a130:	b003      	add	sp, #12
 800a132:	4770      	bx	lr
 800a134:	2000000c 	.word	0x2000000c

0800a138 <_fstat_r>:
 800a138:	b538      	push	{r3, r4, r5, lr}
 800a13a:	2300      	movs	r3, #0
 800a13c:	4d06      	ldr	r5, [pc, #24]	; (800a158 <_fstat_r+0x20>)
 800a13e:	4604      	mov	r4, r0
 800a140:	4608      	mov	r0, r1
 800a142:	4611      	mov	r1, r2
 800a144:	602b      	str	r3, [r5, #0]
 800a146:	f7f8 f9da 	bl	80024fe <_fstat>
 800a14a:	1c43      	adds	r3, r0, #1
 800a14c:	d102      	bne.n	800a154 <_fstat_r+0x1c>
 800a14e:	682b      	ldr	r3, [r5, #0]
 800a150:	b103      	cbz	r3, 800a154 <_fstat_r+0x1c>
 800a152:	6023      	str	r3, [r4, #0]
 800a154:	bd38      	pop	{r3, r4, r5, pc}
 800a156:	bf00      	nop
 800a158:	20000ba8 	.word	0x20000ba8

0800a15c <_isatty_r>:
 800a15c:	b538      	push	{r3, r4, r5, lr}
 800a15e:	2300      	movs	r3, #0
 800a160:	4d05      	ldr	r5, [pc, #20]	; (800a178 <_isatty_r+0x1c>)
 800a162:	4604      	mov	r4, r0
 800a164:	4608      	mov	r0, r1
 800a166:	602b      	str	r3, [r5, #0]
 800a168:	f7f8 f9d8 	bl	800251c <_isatty>
 800a16c:	1c43      	adds	r3, r0, #1
 800a16e:	d102      	bne.n	800a176 <_isatty_r+0x1a>
 800a170:	682b      	ldr	r3, [r5, #0]
 800a172:	b103      	cbz	r3, 800a176 <_isatty_r+0x1a>
 800a174:	6023      	str	r3, [r4, #0]
 800a176:	bd38      	pop	{r3, r4, r5, pc}
 800a178:	20000ba8 	.word	0x20000ba8

0800a17c <_lseek_r>:
 800a17c:	b538      	push	{r3, r4, r5, lr}
 800a17e:	4604      	mov	r4, r0
 800a180:	4608      	mov	r0, r1
 800a182:	4611      	mov	r1, r2
 800a184:	2200      	movs	r2, #0
 800a186:	4d05      	ldr	r5, [pc, #20]	; (800a19c <_lseek_r+0x20>)
 800a188:	602a      	str	r2, [r5, #0]
 800a18a:	461a      	mov	r2, r3
 800a18c:	f7f8 f9d0 	bl	8002530 <_lseek>
 800a190:	1c43      	adds	r3, r0, #1
 800a192:	d102      	bne.n	800a19a <_lseek_r+0x1e>
 800a194:	682b      	ldr	r3, [r5, #0]
 800a196:	b103      	cbz	r3, 800a19a <_lseek_r+0x1e>
 800a198:	6023      	str	r3, [r4, #0]
 800a19a:	bd38      	pop	{r3, r4, r5, pc}
 800a19c:	20000ba8 	.word	0x20000ba8

0800a1a0 <memmove>:
 800a1a0:	4288      	cmp	r0, r1
 800a1a2:	b510      	push	{r4, lr}
 800a1a4:	eb01 0402 	add.w	r4, r1, r2
 800a1a8:	d902      	bls.n	800a1b0 <memmove+0x10>
 800a1aa:	4284      	cmp	r4, r0
 800a1ac:	4623      	mov	r3, r4
 800a1ae:	d807      	bhi.n	800a1c0 <memmove+0x20>
 800a1b0:	1e43      	subs	r3, r0, #1
 800a1b2:	42a1      	cmp	r1, r4
 800a1b4:	d008      	beq.n	800a1c8 <memmove+0x28>
 800a1b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a1ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a1be:	e7f8      	b.n	800a1b2 <memmove+0x12>
 800a1c0:	4601      	mov	r1, r0
 800a1c2:	4402      	add	r2, r0
 800a1c4:	428a      	cmp	r2, r1
 800a1c6:	d100      	bne.n	800a1ca <memmove+0x2a>
 800a1c8:	bd10      	pop	{r4, pc}
 800a1ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a1ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a1d2:	e7f7      	b.n	800a1c4 <memmove+0x24>

0800a1d4 <__malloc_lock>:
 800a1d4:	4801      	ldr	r0, [pc, #4]	; (800a1dc <__malloc_lock+0x8>)
 800a1d6:	f7fe bf50 	b.w	800907a <__retarget_lock_acquire_recursive>
 800a1da:	bf00      	nop
 800a1dc:	20000b9c 	.word	0x20000b9c

0800a1e0 <__malloc_unlock>:
 800a1e0:	4801      	ldr	r0, [pc, #4]	; (800a1e8 <__malloc_unlock+0x8>)
 800a1e2:	f7fe bf4b 	b.w	800907c <__retarget_lock_release_recursive>
 800a1e6:	bf00      	nop
 800a1e8:	20000b9c 	.word	0x20000b9c

0800a1ec <_realloc_r>:
 800a1ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1f0:	4680      	mov	r8, r0
 800a1f2:	4614      	mov	r4, r2
 800a1f4:	460e      	mov	r6, r1
 800a1f6:	b921      	cbnz	r1, 800a202 <_realloc_r+0x16>
 800a1f8:	4611      	mov	r1, r2
 800a1fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a1fe:	f7ff bcff 	b.w	8009c00 <_malloc_r>
 800a202:	b92a      	cbnz	r2, 800a210 <_realloc_r+0x24>
 800a204:	f7ff fc94 	bl	8009b30 <_free_r>
 800a208:	4625      	mov	r5, r4
 800a20a:	4628      	mov	r0, r5
 800a20c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a210:	f000 f98b 	bl	800a52a <_malloc_usable_size_r>
 800a214:	4284      	cmp	r4, r0
 800a216:	4607      	mov	r7, r0
 800a218:	d802      	bhi.n	800a220 <_realloc_r+0x34>
 800a21a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a21e:	d812      	bhi.n	800a246 <_realloc_r+0x5a>
 800a220:	4621      	mov	r1, r4
 800a222:	4640      	mov	r0, r8
 800a224:	f7ff fcec 	bl	8009c00 <_malloc_r>
 800a228:	4605      	mov	r5, r0
 800a22a:	2800      	cmp	r0, #0
 800a22c:	d0ed      	beq.n	800a20a <_realloc_r+0x1e>
 800a22e:	42bc      	cmp	r4, r7
 800a230:	4622      	mov	r2, r4
 800a232:	4631      	mov	r1, r6
 800a234:	bf28      	it	cs
 800a236:	463a      	movcs	r2, r7
 800a238:	f7fb fd0e 	bl	8005c58 <memcpy>
 800a23c:	4631      	mov	r1, r6
 800a23e:	4640      	mov	r0, r8
 800a240:	f7ff fc76 	bl	8009b30 <_free_r>
 800a244:	e7e1      	b.n	800a20a <_realloc_r+0x1e>
 800a246:	4635      	mov	r5, r6
 800a248:	e7df      	b.n	800a20a <_realloc_r+0x1e>

0800a24a <__sfputc_r>:
 800a24a:	6893      	ldr	r3, [r2, #8]
 800a24c:	b410      	push	{r4}
 800a24e:	3b01      	subs	r3, #1
 800a250:	2b00      	cmp	r3, #0
 800a252:	6093      	str	r3, [r2, #8]
 800a254:	da07      	bge.n	800a266 <__sfputc_r+0x1c>
 800a256:	6994      	ldr	r4, [r2, #24]
 800a258:	42a3      	cmp	r3, r4
 800a25a:	db01      	blt.n	800a260 <__sfputc_r+0x16>
 800a25c:	290a      	cmp	r1, #10
 800a25e:	d102      	bne.n	800a266 <__sfputc_r+0x1c>
 800a260:	bc10      	pop	{r4}
 800a262:	f7fd bab1 	b.w	80077c8 <__swbuf_r>
 800a266:	6813      	ldr	r3, [r2, #0]
 800a268:	1c58      	adds	r0, r3, #1
 800a26a:	6010      	str	r0, [r2, #0]
 800a26c:	7019      	strb	r1, [r3, #0]
 800a26e:	4608      	mov	r0, r1
 800a270:	bc10      	pop	{r4}
 800a272:	4770      	bx	lr

0800a274 <__sfputs_r>:
 800a274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a276:	4606      	mov	r6, r0
 800a278:	460f      	mov	r7, r1
 800a27a:	4614      	mov	r4, r2
 800a27c:	18d5      	adds	r5, r2, r3
 800a27e:	42ac      	cmp	r4, r5
 800a280:	d101      	bne.n	800a286 <__sfputs_r+0x12>
 800a282:	2000      	movs	r0, #0
 800a284:	e007      	b.n	800a296 <__sfputs_r+0x22>
 800a286:	463a      	mov	r2, r7
 800a288:	4630      	mov	r0, r6
 800a28a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a28e:	f7ff ffdc 	bl	800a24a <__sfputc_r>
 800a292:	1c43      	adds	r3, r0, #1
 800a294:	d1f3      	bne.n	800a27e <__sfputs_r+0xa>
 800a296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a298 <_vfiprintf_r>:
 800a298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a29c:	460d      	mov	r5, r1
 800a29e:	4614      	mov	r4, r2
 800a2a0:	4698      	mov	r8, r3
 800a2a2:	4606      	mov	r6, r0
 800a2a4:	b09d      	sub	sp, #116	; 0x74
 800a2a6:	b118      	cbz	r0, 800a2b0 <_vfiprintf_r+0x18>
 800a2a8:	6983      	ldr	r3, [r0, #24]
 800a2aa:	b90b      	cbnz	r3, 800a2b0 <_vfiprintf_r+0x18>
 800a2ac:	f7fe fadc 	bl	8008868 <__sinit>
 800a2b0:	4b89      	ldr	r3, [pc, #548]	; (800a4d8 <_vfiprintf_r+0x240>)
 800a2b2:	429d      	cmp	r5, r3
 800a2b4:	d11b      	bne.n	800a2ee <_vfiprintf_r+0x56>
 800a2b6:	6875      	ldr	r5, [r6, #4]
 800a2b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a2ba:	07d9      	lsls	r1, r3, #31
 800a2bc:	d405      	bmi.n	800a2ca <_vfiprintf_r+0x32>
 800a2be:	89ab      	ldrh	r3, [r5, #12]
 800a2c0:	059a      	lsls	r2, r3, #22
 800a2c2:	d402      	bmi.n	800a2ca <_vfiprintf_r+0x32>
 800a2c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a2c6:	f7fe fed8 	bl	800907a <__retarget_lock_acquire_recursive>
 800a2ca:	89ab      	ldrh	r3, [r5, #12]
 800a2cc:	071b      	lsls	r3, r3, #28
 800a2ce:	d501      	bpl.n	800a2d4 <_vfiprintf_r+0x3c>
 800a2d0:	692b      	ldr	r3, [r5, #16]
 800a2d2:	b9eb      	cbnz	r3, 800a310 <_vfiprintf_r+0x78>
 800a2d4:	4629      	mov	r1, r5
 800a2d6:	4630      	mov	r0, r6
 800a2d8:	f7fd fac8 	bl	800786c <__swsetup_r>
 800a2dc:	b1c0      	cbz	r0, 800a310 <_vfiprintf_r+0x78>
 800a2de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a2e0:	07dc      	lsls	r4, r3, #31
 800a2e2:	d50e      	bpl.n	800a302 <_vfiprintf_r+0x6a>
 800a2e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a2e8:	b01d      	add	sp, #116	; 0x74
 800a2ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2ee:	4b7b      	ldr	r3, [pc, #492]	; (800a4dc <_vfiprintf_r+0x244>)
 800a2f0:	429d      	cmp	r5, r3
 800a2f2:	d101      	bne.n	800a2f8 <_vfiprintf_r+0x60>
 800a2f4:	68b5      	ldr	r5, [r6, #8]
 800a2f6:	e7df      	b.n	800a2b8 <_vfiprintf_r+0x20>
 800a2f8:	4b79      	ldr	r3, [pc, #484]	; (800a4e0 <_vfiprintf_r+0x248>)
 800a2fa:	429d      	cmp	r5, r3
 800a2fc:	bf08      	it	eq
 800a2fe:	68f5      	ldreq	r5, [r6, #12]
 800a300:	e7da      	b.n	800a2b8 <_vfiprintf_r+0x20>
 800a302:	89ab      	ldrh	r3, [r5, #12]
 800a304:	0598      	lsls	r0, r3, #22
 800a306:	d4ed      	bmi.n	800a2e4 <_vfiprintf_r+0x4c>
 800a308:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a30a:	f7fe feb7 	bl	800907c <__retarget_lock_release_recursive>
 800a30e:	e7e9      	b.n	800a2e4 <_vfiprintf_r+0x4c>
 800a310:	2300      	movs	r3, #0
 800a312:	9309      	str	r3, [sp, #36]	; 0x24
 800a314:	2320      	movs	r3, #32
 800a316:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a31a:	2330      	movs	r3, #48	; 0x30
 800a31c:	f04f 0901 	mov.w	r9, #1
 800a320:	f8cd 800c 	str.w	r8, [sp, #12]
 800a324:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a4e4 <_vfiprintf_r+0x24c>
 800a328:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a32c:	4623      	mov	r3, r4
 800a32e:	469a      	mov	sl, r3
 800a330:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a334:	b10a      	cbz	r2, 800a33a <_vfiprintf_r+0xa2>
 800a336:	2a25      	cmp	r2, #37	; 0x25
 800a338:	d1f9      	bne.n	800a32e <_vfiprintf_r+0x96>
 800a33a:	ebba 0b04 	subs.w	fp, sl, r4
 800a33e:	d00b      	beq.n	800a358 <_vfiprintf_r+0xc0>
 800a340:	465b      	mov	r3, fp
 800a342:	4622      	mov	r2, r4
 800a344:	4629      	mov	r1, r5
 800a346:	4630      	mov	r0, r6
 800a348:	f7ff ff94 	bl	800a274 <__sfputs_r>
 800a34c:	3001      	adds	r0, #1
 800a34e:	f000 80aa 	beq.w	800a4a6 <_vfiprintf_r+0x20e>
 800a352:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a354:	445a      	add	r2, fp
 800a356:	9209      	str	r2, [sp, #36]	; 0x24
 800a358:	f89a 3000 	ldrb.w	r3, [sl]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	f000 80a2 	beq.w	800a4a6 <_vfiprintf_r+0x20e>
 800a362:	2300      	movs	r3, #0
 800a364:	f04f 32ff 	mov.w	r2, #4294967295
 800a368:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a36c:	f10a 0a01 	add.w	sl, sl, #1
 800a370:	9304      	str	r3, [sp, #16]
 800a372:	9307      	str	r3, [sp, #28]
 800a374:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a378:	931a      	str	r3, [sp, #104]	; 0x68
 800a37a:	4654      	mov	r4, sl
 800a37c:	2205      	movs	r2, #5
 800a37e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a382:	4858      	ldr	r0, [pc, #352]	; (800a4e4 <_vfiprintf_r+0x24c>)
 800a384:	f7fe fefa 	bl	800917c <memchr>
 800a388:	9a04      	ldr	r2, [sp, #16]
 800a38a:	b9d8      	cbnz	r0, 800a3c4 <_vfiprintf_r+0x12c>
 800a38c:	06d1      	lsls	r1, r2, #27
 800a38e:	bf44      	itt	mi
 800a390:	2320      	movmi	r3, #32
 800a392:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a396:	0713      	lsls	r3, r2, #28
 800a398:	bf44      	itt	mi
 800a39a:	232b      	movmi	r3, #43	; 0x2b
 800a39c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a3a0:	f89a 3000 	ldrb.w	r3, [sl]
 800a3a4:	2b2a      	cmp	r3, #42	; 0x2a
 800a3a6:	d015      	beq.n	800a3d4 <_vfiprintf_r+0x13c>
 800a3a8:	4654      	mov	r4, sl
 800a3aa:	2000      	movs	r0, #0
 800a3ac:	f04f 0c0a 	mov.w	ip, #10
 800a3b0:	9a07      	ldr	r2, [sp, #28]
 800a3b2:	4621      	mov	r1, r4
 800a3b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a3b8:	3b30      	subs	r3, #48	; 0x30
 800a3ba:	2b09      	cmp	r3, #9
 800a3bc:	d94e      	bls.n	800a45c <_vfiprintf_r+0x1c4>
 800a3be:	b1b0      	cbz	r0, 800a3ee <_vfiprintf_r+0x156>
 800a3c0:	9207      	str	r2, [sp, #28]
 800a3c2:	e014      	b.n	800a3ee <_vfiprintf_r+0x156>
 800a3c4:	eba0 0308 	sub.w	r3, r0, r8
 800a3c8:	fa09 f303 	lsl.w	r3, r9, r3
 800a3cc:	4313      	orrs	r3, r2
 800a3ce:	46a2      	mov	sl, r4
 800a3d0:	9304      	str	r3, [sp, #16]
 800a3d2:	e7d2      	b.n	800a37a <_vfiprintf_r+0xe2>
 800a3d4:	9b03      	ldr	r3, [sp, #12]
 800a3d6:	1d19      	adds	r1, r3, #4
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	9103      	str	r1, [sp, #12]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	bfbb      	ittet	lt
 800a3e0:	425b      	neglt	r3, r3
 800a3e2:	f042 0202 	orrlt.w	r2, r2, #2
 800a3e6:	9307      	strge	r3, [sp, #28]
 800a3e8:	9307      	strlt	r3, [sp, #28]
 800a3ea:	bfb8      	it	lt
 800a3ec:	9204      	strlt	r2, [sp, #16]
 800a3ee:	7823      	ldrb	r3, [r4, #0]
 800a3f0:	2b2e      	cmp	r3, #46	; 0x2e
 800a3f2:	d10c      	bne.n	800a40e <_vfiprintf_r+0x176>
 800a3f4:	7863      	ldrb	r3, [r4, #1]
 800a3f6:	2b2a      	cmp	r3, #42	; 0x2a
 800a3f8:	d135      	bne.n	800a466 <_vfiprintf_r+0x1ce>
 800a3fa:	9b03      	ldr	r3, [sp, #12]
 800a3fc:	3402      	adds	r4, #2
 800a3fe:	1d1a      	adds	r2, r3, #4
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	9203      	str	r2, [sp, #12]
 800a404:	2b00      	cmp	r3, #0
 800a406:	bfb8      	it	lt
 800a408:	f04f 33ff 	movlt.w	r3, #4294967295
 800a40c:	9305      	str	r3, [sp, #20]
 800a40e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800a4e8 <_vfiprintf_r+0x250>
 800a412:	2203      	movs	r2, #3
 800a414:	4650      	mov	r0, sl
 800a416:	7821      	ldrb	r1, [r4, #0]
 800a418:	f7fe feb0 	bl	800917c <memchr>
 800a41c:	b140      	cbz	r0, 800a430 <_vfiprintf_r+0x198>
 800a41e:	2340      	movs	r3, #64	; 0x40
 800a420:	eba0 000a 	sub.w	r0, r0, sl
 800a424:	fa03 f000 	lsl.w	r0, r3, r0
 800a428:	9b04      	ldr	r3, [sp, #16]
 800a42a:	3401      	adds	r4, #1
 800a42c:	4303      	orrs	r3, r0
 800a42e:	9304      	str	r3, [sp, #16]
 800a430:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a434:	2206      	movs	r2, #6
 800a436:	482d      	ldr	r0, [pc, #180]	; (800a4ec <_vfiprintf_r+0x254>)
 800a438:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a43c:	f7fe fe9e 	bl	800917c <memchr>
 800a440:	2800      	cmp	r0, #0
 800a442:	d03f      	beq.n	800a4c4 <_vfiprintf_r+0x22c>
 800a444:	4b2a      	ldr	r3, [pc, #168]	; (800a4f0 <_vfiprintf_r+0x258>)
 800a446:	bb1b      	cbnz	r3, 800a490 <_vfiprintf_r+0x1f8>
 800a448:	9b03      	ldr	r3, [sp, #12]
 800a44a:	3307      	adds	r3, #7
 800a44c:	f023 0307 	bic.w	r3, r3, #7
 800a450:	3308      	adds	r3, #8
 800a452:	9303      	str	r3, [sp, #12]
 800a454:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a456:	443b      	add	r3, r7
 800a458:	9309      	str	r3, [sp, #36]	; 0x24
 800a45a:	e767      	b.n	800a32c <_vfiprintf_r+0x94>
 800a45c:	460c      	mov	r4, r1
 800a45e:	2001      	movs	r0, #1
 800a460:	fb0c 3202 	mla	r2, ip, r2, r3
 800a464:	e7a5      	b.n	800a3b2 <_vfiprintf_r+0x11a>
 800a466:	2300      	movs	r3, #0
 800a468:	f04f 0c0a 	mov.w	ip, #10
 800a46c:	4619      	mov	r1, r3
 800a46e:	3401      	adds	r4, #1
 800a470:	9305      	str	r3, [sp, #20]
 800a472:	4620      	mov	r0, r4
 800a474:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a478:	3a30      	subs	r2, #48	; 0x30
 800a47a:	2a09      	cmp	r2, #9
 800a47c:	d903      	bls.n	800a486 <_vfiprintf_r+0x1ee>
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d0c5      	beq.n	800a40e <_vfiprintf_r+0x176>
 800a482:	9105      	str	r1, [sp, #20]
 800a484:	e7c3      	b.n	800a40e <_vfiprintf_r+0x176>
 800a486:	4604      	mov	r4, r0
 800a488:	2301      	movs	r3, #1
 800a48a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a48e:	e7f0      	b.n	800a472 <_vfiprintf_r+0x1da>
 800a490:	ab03      	add	r3, sp, #12
 800a492:	9300      	str	r3, [sp, #0]
 800a494:	462a      	mov	r2, r5
 800a496:	4630      	mov	r0, r6
 800a498:	4b16      	ldr	r3, [pc, #88]	; (800a4f4 <_vfiprintf_r+0x25c>)
 800a49a:	a904      	add	r1, sp, #16
 800a49c:	f7fb fc90 	bl	8005dc0 <_printf_float>
 800a4a0:	4607      	mov	r7, r0
 800a4a2:	1c78      	adds	r0, r7, #1
 800a4a4:	d1d6      	bne.n	800a454 <_vfiprintf_r+0x1bc>
 800a4a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a4a8:	07d9      	lsls	r1, r3, #31
 800a4aa:	d405      	bmi.n	800a4b8 <_vfiprintf_r+0x220>
 800a4ac:	89ab      	ldrh	r3, [r5, #12]
 800a4ae:	059a      	lsls	r2, r3, #22
 800a4b0:	d402      	bmi.n	800a4b8 <_vfiprintf_r+0x220>
 800a4b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a4b4:	f7fe fde2 	bl	800907c <__retarget_lock_release_recursive>
 800a4b8:	89ab      	ldrh	r3, [r5, #12]
 800a4ba:	065b      	lsls	r3, r3, #25
 800a4bc:	f53f af12 	bmi.w	800a2e4 <_vfiprintf_r+0x4c>
 800a4c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a4c2:	e711      	b.n	800a2e8 <_vfiprintf_r+0x50>
 800a4c4:	ab03      	add	r3, sp, #12
 800a4c6:	9300      	str	r3, [sp, #0]
 800a4c8:	462a      	mov	r2, r5
 800a4ca:	4630      	mov	r0, r6
 800a4cc:	4b09      	ldr	r3, [pc, #36]	; (800a4f4 <_vfiprintf_r+0x25c>)
 800a4ce:	a904      	add	r1, sp, #16
 800a4d0:	f7fb ff12 	bl	80062f8 <_printf_i>
 800a4d4:	e7e4      	b.n	800a4a0 <_vfiprintf_r+0x208>
 800a4d6:	bf00      	nop
 800a4d8:	0800c324 	.word	0x0800c324
 800a4dc:	0800c344 	.word	0x0800c344
 800a4e0:	0800c304 	.word	0x0800c304
 800a4e4:	0800c53c 	.word	0x0800c53c
 800a4e8:	0800c542 	.word	0x0800c542
 800a4ec:	0800c546 	.word	0x0800c546
 800a4f0:	08005dc1 	.word	0x08005dc1
 800a4f4:	0800a275 	.word	0x0800a275

0800a4f8 <_read_r>:
 800a4f8:	b538      	push	{r3, r4, r5, lr}
 800a4fa:	4604      	mov	r4, r0
 800a4fc:	4608      	mov	r0, r1
 800a4fe:	4611      	mov	r1, r2
 800a500:	2200      	movs	r2, #0
 800a502:	4d05      	ldr	r5, [pc, #20]	; (800a518 <_read_r+0x20>)
 800a504:	602a      	str	r2, [r5, #0]
 800a506:	461a      	mov	r2, r3
 800a508:	f7f7 ffb5 	bl	8002476 <_read>
 800a50c:	1c43      	adds	r3, r0, #1
 800a50e:	d102      	bne.n	800a516 <_read_r+0x1e>
 800a510:	682b      	ldr	r3, [r5, #0]
 800a512:	b103      	cbz	r3, 800a516 <_read_r+0x1e>
 800a514:	6023      	str	r3, [r4, #0]
 800a516:	bd38      	pop	{r3, r4, r5, pc}
 800a518:	20000ba8 	.word	0x20000ba8

0800a51c <abort>:
 800a51c:	2006      	movs	r0, #6
 800a51e:	b508      	push	{r3, lr}
 800a520:	f000 f834 	bl	800a58c <raise>
 800a524:	2001      	movs	r0, #1
 800a526:	f7f7 ff9c 	bl	8002462 <_exit>

0800a52a <_malloc_usable_size_r>:
 800a52a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a52e:	1f18      	subs	r0, r3, #4
 800a530:	2b00      	cmp	r3, #0
 800a532:	bfbc      	itt	lt
 800a534:	580b      	ldrlt	r3, [r1, r0]
 800a536:	18c0      	addlt	r0, r0, r3
 800a538:	4770      	bx	lr

0800a53a <_raise_r>:
 800a53a:	291f      	cmp	r1, #31
 800a53c:	b538      	push	{r3, r4, r5, lr}
 800a53e:	4604      	mov	r4, r0
 800a540:	460d      	mov	r5, r1
 800a542:	d904      	bls.n	800a54e <_raise_r+0x14>
 800a544:	2316      	movs	r3, #22
 800a546:	6003      	str	r3, [r0, #0]
 800a548:	f04f 30ff 	mov.w	r0, #4294967295
 800a54c:	bd38      	pop	{r3, r4, r5, pc}
 800a54e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a550:	b112      	cbz	r2, 800a558 <_raise_r+0x1e>
 800a552:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a556:	b94b      	cbnz	r3, 800a56c <_raise_r+0x32>
 800a558:	4620      	mov	r0, r4
 800a55a:	f000 f831 	bl	800a5c0 <_getpid_r>
 800a55e:	462a      	mov	r2, r5
 800a560:	4601      	mov	r1, r0
 800a562:	4620      	mov	r0, r4
 800a564:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a568:	f000 b818 	b.w	800a59c <_kill_r>
 800a56c:	2b01      	cmp	r3, #1
 800a56e:	d00a      	beq.n	800a586 <_raise_r+0x4c>
 800a570:	1c59      	adds	r1, r3, #1
 800a572:	d103      	bne.n	800a57c <_raise_r+0x42>
 800a574:	2316      	movs	r3, #22
 800a576:	6003      	str	r3, [r0, #0]
 800a578:	2001      	movs	r0, #1
 800a57a:	e7e7      	b.n	800a54c <_raise_r+0x12>
 800a57c:	2400      	movs	r4, #0
 800a57e:	4628      	mov	r0, r5
 800a580:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a584:	4798      	blx	r3
 800a586:	2000      	movs	r0, #0
 800a588:	e7e0      	b.n	800a54c <_raise_r+0x12>
	...

0800a58c <raise>:
 800a58c:	4b02      	ldr	r3, [pc, #8]	; (800a598 <raise+0xc>)
 800a58e:	4601      	mov	r1, r0
 800a590:	6818      	ldr	r0, [r3, #0]
 800a592:	f7ff bfd2 	b.w	800a53a <_raise_r>
 800a596:	bf00      	nop
 800a598:	2000000c 	.word	0x2000000c

0800a59c <_kill_r>:
 800a59c:	b538      	push	{r3, r4, r5, lr}
 800a59e:	2300      	movs	r3, #0
 800a5a0:	4d06      	ldr	r5, [pc, #24]	; (800a5bc <_kill_r+0x20>)
 800a5a2:	4604      	mov	r4, r0
 800a5a4:	4608      	mov	r0, r1
 800a5a6:	4611      	mov	r1, r2
 800a5a8:	602b      	str	r3, [r5, #0]
 800a5aa:	f7f7 ff4a 	bl	8002442 <_kill>
 800a5ae:	1c43      	adds	r3, r0, #1
 800a5b0:	d102      	bne.n	800a5b8 <_kill_r+0x1c>
 800a5b2:	682b      	ldr	r3, [r5, #0]
 800a5b4:	b103      	cbz	r3, 800a5b8 <_kill_r+0x1c>
 800a5b6:	6023      	str	r3, [r4, #0]
 800a5b8:	bd38      	pop	{r3, r4, r5, pc}
 800a5ba:	bf00      	nop
 800a5bc:	20000ba8 	.word	0x20000ba8

0800a5c0 <_getpid_r>:
 800a5c0:	f7f7 bf38 	b.w	8002434 <_getpid>

0800a5c4 <cos>:
 800a5c4:	b530      	push	{r4, r5, lr}
 800a5c6:	4a20      	ldr	r2, [pc, #128]	; (800a648 <cos+0x84>)
 800a5c8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a5cc:	4293      	cmp	r3, r2
 800a5ce:	b087      	sub	sp, #28
 800a5d0:	dc06      	bgt.n	800a5e0 <cos+0x1c>
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	b007      	add	sp, #28
 800a5d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a5dc:	f000 bb6c 	b.w	800acb8 <__kernel_cos>
 800a5e0:	4a1a      	ldr	r2, [pc, #104]	; (800a64c <cos+0x88>)
 800a5e2:	4293      	cmp	r3, r2
 800a5e4:	dd05      	ble.n	800a5f2 <cos+0x2e>
 800a5e6:	4602      	mov	r2, r0
 800a5e8:	460b      	mov	r3, r1
 800a5ea:	f7f5 fdbd 	bl	8000168 <__aeabi_dsub>
 800a5ee:	b007      	add	sp, #28
 800a5f0:	bd30      	pop	{r4, r5, pc}
 800a5f2:	aa02      	add	r2, sp, #8
 800a5f4:	f000 f890 	bl	800a718 <__ieee754_rem_pio2>
 800a5f8:	f000 0003 	and.w	r0, r0, #3
 800a5fc:	2801      	cmp	r0, #1
 800a5fe:	d009      	beq.n	800a614 <cos+0x50>
 800a600:	2802      	cmp	r0, #2
 800a602:	d011      	beq.n	800a628 <cos+0x64>
 800a604:	b9b8      	cbnz	r0, 800a636 <cos+0x72>
 800a606:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a60a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a60e:	f000 fb53 	bl	800acb8 <__kernel_cos>
 800a612:	e7ec      	b.n	800a5ee <cos+0x2a>
 800a614:	9000      	str	r0, [sp, #0]
 800a616:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a61a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a61e:	f000 ff4b 	bl	800b4b8 <__kernel_sin>
 800a622:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800a626:	e7e2      	b.n	800a5ee <cos+0x2a>
 800a628:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a62c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a630:	f000 fb42 	bl	800acb8 <__kernel_cos>
 800a634:	e7f5      	b.n	800a622 <cos+0x5e>
 800a636:	2301      	movs	r3, #1
 800a638:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a63c:	9300      	str	r3, [sp, #0]
 800a63e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a642:	f000 ff39 	bl	800b4b8 <__kernel_sin>
 800a646:	e7d2      	b.n	800a5ee <cos+0x2a>
 800a648:	3fe921fb 	.word	0x3fe921fb
 800a64c:	7fefffff 	.word	0x7fefffff

0800a650 <sin>:
 800a650:	b530      	push	{r4, r5, lr}
 800a652:	4a20      	ldr	r2, [pc, #128]	; (800a6d4 <sin+0x84>)
 800a654:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a658:	4293      	cmp	r3, r2
 800a65a:	b087      	sub	sp, #28
 800a65c:	dc06      	bgt.n	800a66c <sin+0x1c>
 800a65e:	2300      	movs	r3, #0
 800a660:	2200      	movs	r2, #0
 800a662:	9300      	str	r3, [sp, #0]
 800a664:	2300      	movs	r3, #0
 800a666:	f000 ff27 	bl	800b4b8 <__kernel_sin>
 800a66a:	e006      	b.n	800a67a <sin+0x2a>
 800a66c:	4a1a      	ldr	r2, [pc, #104]	; (800a6d8 <sin+0x88>)
 800a66e:	4293      	cmp	r3, r2
 800a670:	dd05      	ble.n	800a67e <sin+0x2e>
 800a672:	4602      	mov	r2, r0
 800a674:	460b      	mov	r3, r1
 800a676:	f7f5 fd77 	bl	8000168 <__aeabi_dsub>
 800a67a:	b007      	add	sp, #28
 800a67c:	bd30      	pop	{r4, r5, pc}
 800a67e:	aa02      	add	r2, sp, #8
 800a680:	f000 f84a 	bl	800a718 <__ieee754_rem_pio2>
 800a684:	f000 0003 	and.w	r0, r0, #3
 800a688:	2801      	cmp	r0, #1
 800a68a:	d009      	beq.n	800a6a0 <sin+0x50>
 800a68c:	2802      	cmp	r0, #2
 800a68e:	d00e      	beq.n	800a6ae <sin+0x5e>
 800a690:	b9c0      	cbnz	r0, 800a6c4 <sin+0x74>
 800a692:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a696:	2301      	movs	r3, #1
 800a698:	9300      	str	r3, [sp, #0]
 800a69a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a69e:	e7e2      	b.n	800a666 <sin+0x16>
 800a6a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a6a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a6a8:	f000 fb06 	bl	800acb8 <__kernel_cos>
 800a6ac:	e7e5      	b.n	800a67a <sin+0x2a>
 800a6ae:	2301      	movs	r3, #1
 800a6b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a6b4:	9300      	str	r3, [sp, #0]
 800a6b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a6ba:	f000 fefd 	bl	800b4b8 <__kernel_sin>
 800a6be:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800a6c2:	e7da      	b.n	800a67a <sin+0x2a>
 800a6c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a6c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a6cc:	f000 faf4 	bl	800acb8 <__kernel_cos>
 800a6d0:	e7f5      	b.n	800a6be <sin+0x6e>
 800a6d2:	bf00      	nop
 800a6d4:	3fe921fb 	.word	0x3fe921fb
 800a6d8:	7fefffff 	.word	0x7fefffff

0800a6dc <atan2f>:
 800a6dc:	f000 ba14 	b.w	800ab08 <__ieee754_atan2f>

0800a6e0 <sqrtf>:
 800a6e0:	b538      	push	{r3, r4, r5, lr}
 800a6e2:	4605      	mov	r5, r0
 800a6e4:	f000 fa96 	bl	800ac14 <__ieee754_sqrtf>
 800a6e8:	4629      	mov	r1, r5
 800a6ea:	4604      	mov	r4, r0
 800a6ec:	4628      	mov	r0, r5
 800a6ee:	f7f6 fd0f 	bl	8001110 <__aeabi_fcmpun>
 800a6f2:	b968      	cbnz	r0, 800a710 <sqrtf+0x30>
 800a6f4:	2100      	movs	r1, #0
 800a6f6:	4628      	mov	r0, r5
 800a6f8:	f7f6 fce2 	bl	80010c0 <__aeabi_fcmplt>
 800a6fc:	b140      	cbz	r0, 800a710 <sqrtf+0x30>
 800a6fe:	f7fb fa81 	bl	8005c04 <__errno>
 800a702:	2321      	movs	r3, #33	; 0x21
 800a704:	2100      	movs	r1, #0
 800a706:	6003      	str	r3, [r0, #0]
 800a708:	4608      	mov	r0, r1
 800a70a:	f7f6 fbef 	bl	8000eec <__aeabi_fdiv>
 800a70e:	4604      	mov	r4, r0
 800a710:	4620      	mov	r0, r4
 800a712:	bd38      	pop	{r3, r4, r5, pc}
 800a714:	0000      	movs	r0, r0
	...

0800a718 <__ieee754_rem_pio2>:
 800a718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a71c:	4614      	mov	r4, r2
 800a71e:	4ac4      	ldr	r2, [pc, #784]	; (800aa30 <__ieee754_rem_pio2+0x318>)
 800a720:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800a724:	b08d      	sub	sp, #52	; 0x34
 800a726:	4592      	cmp	sl, r2
 800a728:	9104      	str	r1, [sp, #16]
 800a72a:	dc07      	bgt.n	800a73c <__ieee754_rem_pio2+0x24>
 800a72c:	2200      	movs	r2, #0
 800a72e:	2300      	movs	r3, #0
 800a730:	e9c4 0100 	strd	r0, r1, [r4]
 800a734:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800a738:	2500      	movs	r5, #0
 800a73a:	e024      	b.n	800a786 <__ieee754_rem_pio2+0x6e>
 800a73c:	4abd      	ldr	r2, [pc, #756]	; (800aa34 <__ieee754_rem_pio2+0x31c>)
 800a73e:	4592      	cmp	sl, r2
 800a740:	dc72      	bgt.n	800a828 <__ieee754_rem_pio2+0x110>
 800a742:	9b04      	ldr	r3, [sp, #16]
 800a744:	4dbc      	ldr	r5, [pc, #752]	; (800aa38 <__ieee754_rem_pio2+0x320>)
 800a746:	2b00      	cmp	r3, #0
 800a748:	a3ab      	add	r3, pc, #684	; (adr r3, 800a9f8 <__ieee754_rem_pio2+0x2e0>)
 800a74a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a74e:	dd36      	ble.n	800a7be <__ieee754_rem_pio2+0xa6>
 800a750:	f7f5 fd0a 	bl	8000168 <__aeabi_dsub>
 800a754:	45aa      	cmp	sl, r5
 800a756:	4606      	mov	r6, r0
 800a758:	460f      	mov	r7, r1
 800a75a:	d018      	beq.n	800a78e <__ieee754_rem_pio2+0x76>
 800a75c:	a3a8      	add	r3, pc, #672	; (adr r3, 800aa00 <__ieee754_rem_pio2+0x2e8>)
 800a75e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a762:	f7f5 fd01 	bl	8000168 <__aeabi_dsub>
 800a766:	4602      	mov	r2, r0
 800a768:	460b      	mov	r3, r1
 800a76a:	4630      	mov	r0, r6
 800a76c:	e9c4 2300 	strd	r2, r3, [r4]
 800a770:	4639      	mov	r1, r7
 800a772:	f7f5 fcf9 	bl	8000168 <__aeabi_dsub>
 800a776:	a3a2      	add	r3, pc, #648	; (adr r3, 800aa00 <__ieee754_rem_pio2+0x2e8>)
 800a778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a77c:	f7f5 fcf4 	bl	8000168 <__aeabi_dsub>
 800a780:	2501      	movs	r5, #1
 800a782:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a786:	4628      	mov	r0, r5
 800a788:	b00d      	add	sp, #52	; 0x34
 800a78a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a78e:	a39e      	add	r3, pc, #632	; (adr r3, 800aa08 <__ieee754_rem_pio2+0x2f0>)
 800a790:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a794:	f7f5 fce8 	bl	8000168 <__aeabi_dsub>
 800a798:	a39d      	add	r3, pc, #628	; (adr r3, 800aa10 <__ieee754_rem_pio2+0x2f8>)
 800a79a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a79e:	4606      	mov	r6, r0
 800a7a0:	460f      	mov	r7, r1
 800a7a2:	f7f5 fce1 	bl	8000168 <__aeabi_dsub>
 800a7a6:	4602      	mov	r2, r0
 800a7a8:	460b      	mov	r3, r1
 800a7aa:	4630      	mov	r0, r6
 800a7ac:	e9c4 2300 	strd	r2, r3, [r4]
 800a7b0:	4639      	mov	r1, r7
 800a7b2:	f7f5 fcd9 	bl	8000168 <__aeabi_dsub>
 800a7b6:	a396      	add	r3, pc, #600	; (adr r3, 800aa10 <__ieee754_rem_pio2+0x2f8>)
 800a7b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7bc:	e7de      	b.n	800a77c <__ieee754_rem_pio2+0x64>
 800a7be:	f7f5 fcd5 	bl	800016c <__adddf3>
 800a7c2:	45aa      	cmp	sl, r5
 800a7c4:	4606      	mov	r6, r0
 800a7c6:	460f      	mov	r7, r1
 800a7c8:	d016      	beq.n	800a7f8 <__ieee754_rem_pio2+0xe0>
 800a7ca:	a38d      	add	r3, pc, #564	; (adr r3, 800aa00 <__ieee754_rem_pio2+0x2e8>)
 800a7cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7d0:	f7f5 fccc 	bl	800016c <__adddf3>
 800a7d4:	4602      	mov	r2, r0
 800a7d6:	460b      	mov	r3, r1
 800a7d8:	4630      	mov	r0, r6
 800a7da:	e9c4 2300 	strd	r2, r3, [r4]
 800a7de:	4639      	mov	r1, r7
 800a7e0:	f7f5 fcc2 	bl	8000168 <__aeabi_dsub>
 800a7e4:	a386      	add	r3, pc, #536	; (adr r3, 800aa00 <__ieee754_rem_pio2+0x2e8>)
 800a7e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ea:	f7f5 fcbf 	bl	800016c <__adddf3>
 800a7ee:	f04f 35ff 	mov.w	r5, #4294967295
 800a7f2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a7f6:	e7c6      	b.n	800a786 <__ieee754_rem_pio2+0x6e>
 800a7f8:	a383      	add	r3, pc, #524	; (adr r3, 800aa08 <__ieee754_rem_pio2+0x2f0>)
 800a7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7fe:	f7f5 fcb5 	bl	800016c <__adddf3>
 800a802:	a383      	add	r3, pc, #524	; (adr r3, 800aa10 <__ieee754_rem_pio2+0x2f8>)
 800a804:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a808:	4606      	mov	r6, r0
 800a80a:	460f      	mov	r7, r1
 800a80c:	f7f5 fcae 	bl	800016c <__adddf3>
 800a810:	4602      	mov	r2, r0
 800a812:	460b      	mov	r3, r1
 800a814:	4630      	mov	r0, r6
 800a816:	e9c4 2300 	strd	r2, r3, [r4]
 800a81a:	4639      	mov	r1, r7
 800a81c:	f7f5 fca4 	bl	8000168 <__aeabi_dsub>
 800a820:	a37b      	add	r3, pc, #492	; (adr r3, 800aa10 <__ieee754_rem_pio2+0x2f8>)
 800a822:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a826:	e7e0      	b.n	800a7ea <__ieee754_rem_pio2+0xd2>
 800a828:	4a84      	ldr	r2, [pc, #528]	; (800aa3c <__ieee754_rem_pio2+0x324>)
 800a82a:	4592      	cmp	sl, r2
 800a82c:	f300 80d5 	bgt.w	800a9da <__ieee754_rem_pio2+0x2c2>
 800a830:	f000 fef8 	bl	800b624 <fabs>
 800a834:	a378      	add	r3, pc, #480	; (adr r3, 800aa18 <__ieee754_rem_pio2+0x300>)
 800a836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a83a:	4606      	mov	r6, r0
 800a83c:	460f      	mov	r7, r1
 800a83e:	f7f5 fe4b 	bl	80004d8 <__aeabi_dmul>
 800a842:	2200      	movs	r2, #0
 800a844:	4b7e      	ldr	r3, [pc, #504]	; (800aa40 <__ieee754_rem_pio2+0x328>)
 800a846:	f7f5 fc91 	bl	800016c <__adddf3>
 800a84a:	f7f6 f8f5 	bl	8000a38 <__aeabi_d2iz>
 800a84e:	4605      	mov	r5, r0
 800a850:	f7f5 fdd8 	bl	8000404 <__aeabi_i2d>
 800a854:	4602      	mov	r2, r0
 800a856:	460b      	mov	r3, r1
 800a858:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a85c:	a366      	add	r3, pc, #408	; (adr r3, 800a9f8 <__ieee754_rem_pio2+0x2e0>)
 800a85e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a862:	f7f5 fe39 	bl	80004d8 <__aeabi_dmul>
 800a866:	4602      	mov	r2, r0
 800a868:	460b      	mov	r3, r1
 800a86a:	4630      	mov	r0, r6
 800a86c:	4639      	mov	r1, r7
 800a86e:	f7f5 fc7b 	bl	8000168 <__aeabi_dsub>
 800a872:	a363      	add	r3, pc, #396	; (adr r3, 800aa00 <__ieee754_rem_pio2+0x2e8>)
 800a874:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a878:	4680      	mov	r8, r0
 800a87a:	4689      	mov	r9, r1
 800a87c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a880:	f7f5 fe2a 	bl	80004d8 <__aeabi_dmul>
 800a884:	2d1f      	cmp	r5, #31
 800a886:	4606      	mov	r6, r0
 800a888:	460f      	mov	r7, r1
 800a88a:	dc0e      	bgt.n	800a8aa <__ieee754_rem_pio2+0x192>
 800a88c:	4b6d      	ldr	r3, [pc, #436]	; (800aa44 <__ieee754_rem_pio2+0x32c>)
 800a88e:	1e6a      	subs	r2, r5, #1
 800a890:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a894:	4553      	cmp	r3, sl
 800a896:	d008      	beq.n	800a8aa <__ieee754_rem_pio2+0x192>
 800a898:	4632      	mov	r2, r6
 800a89a:	463b      	mov	r3, r7
 800a89c:	4640      	mov	r0, r8
 800a89e:	4649      	mov	r1, r9
 800a8a0:	f7f5 fc62 	bl	8000168 <__aeabi_dsub>
 800a8a4:	e9c4 0100 	strd	r0, r1, [r4]
 800a8a8:	e013      	b.n	800a8d2 <__ieee754_rem_pio2+0x1ba>
 800a8aa:	463b      	mov	r3, r7
 800a8ac:	4632      	mov	r2, r6
 800a8ae:	4640      	mov	r0, r8
 800a8b0:	4649      	mov	r1, r9
 800a8b2:	f7f5 fc59 	bl	8000168 <__aeabi_dsub>
 800a8b6:	ea4f 532a 	mov.w	r3, sl, asr #20
 800a8ba:	9305      	str	r3, [sp, #20]
 800a8bc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a8c0:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 800a8c4:	f1ba 0f10 	cmp.w	sl, #16
 800a8c8:	dc1f      	bgt.n	800a90a <__ieee754_rem_pio2+0x1f2>
 800a8ca:	4602      	mov	r2, r0
 800a8cc:	460b      	mov	r3, r1
 800a8ce:	e9c4 2300 	strd	r2, r3, [r4]
 800a8d2:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800a8d6:	4640      	mov	r0, r8
 800a8d8:	4653      	mov	r3, sl
 800a8da:	4649      	mov	r1, r9
 800a8dc:	f7f5 fc44 	bl	8000168 <__aeabi_dsub>
 800a8e0:	4632      	mov	r2, r6
 800a8e2:	463b      	mov	r3, r7
 800a8e4:	f7f5 fc40 	bl	8000168 <__aeabi_dsub>
 800a8e8:	460b      	mov	r3, r1
 800a8ea:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a8ee:	9904      	ldr	r1, [sp, #16]
 800a8f0:	4602      	mov	r2, r0
 800a8f2:	2900      	cmp	r1, #0
 800a8f4:	f6bf af47 	bge.w	800a786 <__ieee754_rem_pio2+0x6e>
 800a8f8:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 800a8fc:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800a900:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a904:	60e3      	str	r3, [r4, #12]
 800a906:	426d      	negs	r5, r5
 800a908:	e73d      	b.n	800a786 <__ieee754_rem_pio2+0x6e>
 800a90a:	a33f      	add	r3, pc, #252	; (adr r3, 800aa08 <__ieee754_rem_pio2+0x2f0>)
 800a90c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a910:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a914:	f7f5 fde0 	bl	80004d8 <__aeabi_dmul>
 800a918:	4606      	mov	r6, r0
 800a91a:	460f      	mov	r7, r1
 800a91c:	4602      	mov	r2, r0
 800a91e:	460b      	mov	r3, r1
 800a920:	4640      	mov	r0, r8
 800a922:	4649      	mov	r1, r9
 800a924:	f7f5 fc20 	bl	8000168 <__aeabi_dsub>
 800a928:	4602      	mov	r2, r0
 800a92a:	460b      	mov	r3, r1
 800a92c:	4682      	mov	sl, r0
 800a92e:	468b      	mov	fp, r1
 800a930:	4640      	mov	r0, r8
 800a932:	4649      	mov	r1, r9
 800a934:	f7f5 fc18 	bl	8000168 <__aeabi_dsub>
 800a938:	4632      	mov	r2, r6
 800a93a:	463b      	mov	r3, r7
 800a93c:	f7f5 fc14 	bl	8000168 <__aeabi_dsub>
 800a940:	a333      	add	r3, pc, #204	; (adr r3, 800aa10 <__ieee754_rem_pio2+0x2f8>)
 800a942:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a946:	4606      	mov	r6, r0
 800a948:	460f      	mov	r7, r1
 800a94a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a94e:	f7f5 fdc3 	bl	80004d8 <__aeabi_dmul>
 800a952:	4632      	mov	r2, r6
 800a954:	463b      	mov	r3, r7
 800a956:	f7f5 fc07 	bl	8000168 <__aeabi_dsub>
 800a95a:	4602      	mov	r2, r0
 800a95c:	460b      	mov	r3, r1
 800a95e:	4606      	mov	r6, r0
 800a960:	460f      	mov	r7, r1
 800a962:	4650      	mov	r0, sl
 800a964:	4659      	mov	r1, fp
 800a966:	f7f5 fbff 	bl	8000168 <__aeabi_dsub>
 800a96a:	9a05      	ldr	r2, [sp, #20]
 800a96c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a970:	1ad3      	subs	r3, r2, r3
 800a972:	2b31      	cmp	r3, #49	; 0x31
 800a974:	dc06      	bgt.n	800a984 <__ieee754_rem_pio2+0x26c>
 800a976:	4602      	mov	r2, r0
 800a978:	460b      	mov	r3, r1
 800a97a:	46d0      	mov	r8, sl
 800a97c:	46d9      	mov	r9, fp
 800a97e:	e9c4 2300 	strd	r2, r3, [r4]
 800a982:	e7a6      	b.n	800a8d2 <__ieee754_rem_pio2+0x1ba>
 800a984:	a326      	add	r3, pc, #152	; (adr r3, 800aa20 <__ieee754_rem_pio2+0x308>)
 800a986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a98a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a98e:	f7f5 fda3 	bl	80004d8 <__aeabi_dmul>
 800a992:	4606      	mov	r6, r0
 800a994:	460f      	mov	r7, r1
 800a996:	4602      	mov	r2, r0
 800a998:	460b      	mov	r3, r1
 800a99a:	4650      	mov	r0, sl
 800a99c:	4659      	mov	r1, fp
 800a99e:	f7f5 fbe3 	bl	8000168 <__aeabi_dsub>
 800a9a2:	4602      	mov	r2, r0
 800a9a4:	460b      	mov	r3, r1
 800a9a6:	4680      	mov	r8, r0
 800a9a8:	4689      	mov	r9, r1
 800a9aa:	4650      	mov	r0, sl
 800a9ac:	4659      	mov	r1, fp
 800a9ae:	f7f5 fbdb 	bl	8000168 <__aeabi_dsub>
 800a9b2:	4632      	mov	r2, r6
 800a9b4:	463b      	mov	r3, r7
 800a9b6:	f7f5 fbd7 	bl	8000168 <__aeabi_dsub>
 800a9ba:	a31b      	add	r3, pc, #108	; (adr r3, 800aa28 <__ieee754_rem_pio2+0x310>)
 800a9bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9c0:	4606      	mov	r6, r0
 800a9c2:	460f      	mov	r7, r1
 800a9c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a9c8:	f7f5 fd86 	bl	80004d8 <__aeabi_dmul>
 800a9cc:	4632      	mov	r2, r6
 800a9ce:	463b      	mov	r3, r7
 800a9d0:	f7f5 fbca 	bl	8000168 <__aeabi_dsub>
 800a9d4:	4606      	mov	r6, r0
 800a9d6:	460f      	mov	r7, r1
 800a9d8:	e75e      	b.n	800a898 <__ieee754_rem_pio2+0x180>
 800a9da:	4a1b      	ldr	r2, [pc, #108]	; (800aa48 <__ieee754_rem_pio2+0x330>)
 800a9dc:	4592      	cmp	sl, r2
 800a9de:	dd35      	ble.n	800aa4c <__ieee754_rem_pio2+0x334>
 800a9e0:	4602      	mov	r2, r0
 800a9e2:	460b      	mov	r3, r1
 800a9e4:	f7f5 fbc0 	bl	8000168 <__aeabi_dsub>
 800a9e8:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a9ec:	e9c4 0100 	strd	r0, r1, [r4]
 800a9f0:	e6a2      	b.n	800a738 <__ieee754_rem_pio2+0x20>
 800a9f2:	bf00      	nop
 800a9f4:	f3af 8000 	nop.w
 800a9f8:	54400000 	.word	0x54400000
 800a9fc:	3ff921fb 	.word	0x3ff921fb
 800aa00:	1a626331 	.word	0x1a626331
 800aa04:	3dd0b461 	.word	0x3dd0b461
 800aa08:	1a600000 	.word	0x1a600000
 800aa0c:	3dd0b461 	.word	0x3dd0b461
 800aa10:	2e037073 	.word	0x2e037073
 800aa14:	3ba3198a 	.word	0x3ba3198a
 800aa18:	6dc9c883 	.word	0x6dc9c883
 800aa1c:	3fe45f30 	.word	0x3fe45f30
 800aa20:	2e000000 	.word	0x2e000000
 800aa24:	3ba3198a 	.word	0x3ba3198a
 800aa28:	252049c1 	.word	0x252049c1
 800aa2c:	397b839a 	.word	0x397b839a
 800aa30:	3fe921fb 	.word	0x3fe921fb
 800aa34:	4002d97b 	.word	0x4002d97b
 800aa38:	3ff921fb 	.word	0x3ff921fb
 800aa3c:	413921fb 	.word	0x413921fb
 800aa40:	3fe00000 	.word	0x3fe00000
 800aa44:	0800c58c 	.word	0x0800c58c
 800aa48:	7fefffff 	.word	0x7fefffff
 800aa4c:	ea4f 552a 	mov.w	r5, sl, asr #20
 800aa50:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800aa54:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800aa58:	460f      	mov	r7, r1
 800aa5a:	4606      	mov	r6, r0
 800aa5c:	f7f5 ffec 	bl	8000a38 <__aeabi_d2iz>
 800aa60:	f7f5 fcd0 	bl	8000404 <__aeabi_i2d>
 800aa64:	4602      	mov	r2, r0
 800aa66:	460b      	mov	r3, r1
 800aa68:	4630      	mov	r0, r6
 800aa6a:	4639      	mov	r1, r7
 800aa6c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800aa70:	f7f5 fb7a 	bl	8000168 <__aeabi_dsub>
 800aa74:	2200      	movs	r2, #0
 800aa76:	4b22      	ldr	r3, [pc, #136]	; (800ab00 <__ieee754_rem_pio2+0x3e8>)
 800aa78:	f7f5 fd2e 	bl	80004d8 <__aeabi_dmul>
 800aa7c:	460f      	mov	r7, r1
 800aa7e:	4606      	mov	r6, r0
 800aa80:	f7f5 ffda 	bl	8000a38 <__aeabi_d2iz>
 800aa84:	f7f5 fcbe 	bl	8000404 <__aeabi_i2d>
 800aa88:	4602      	mov	r2, r0
 800aa8a:	460b      	mov	r3, r1
 800aa8c:	4630      	mov	r0, r6
 800aa8e:	4639      	mov	r1, r7
 800aa90:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800aa94:	f7f5 fb68 	bl	8000168 <__aeabi_dsub>
 800aa98:	2200      	movs	r2, #0
 800aa9a:	4b19      	ldr	r3, [pc, #100]	; (800ab00 <__ieee754_rem_pio2+0x3e8>)
 800aa9c:	f7f5 fd1c 	bl	80004d8 <__aeabi_dmul>
 800aaa0:	f04f 0803 	mov.w	r8, #3
 800aaa4:	2600      	movs	r6, #0
 800aaa6:	2700      	movs	r7, #0
 800aaa8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800aaac:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 800aab0:	4632      	mov	r2, r6
 800aab2:	e879 0102 	ldrd	r0, r1, [r9], #-8
 800aab6:	463b      	mov	r3, r7
 800aab8:	46c2      	mov	sl, r8
 800aaba:	f108 38ff 	add.w	r8, r8, #4294967295
 800aabe:	f7f5 ff73 	bl	80009a8 <__aeabi_dcmpeq>
 800aac2:	2800      	cmp	r0, #0
 800aac4:	d1f4      	bne.n	800aab0 <__ieee754_rem_pio2+0x398>
 800aac6:	4b0f      	ldr	r3, [pc, #60]	; (800ab04 <__ieee754_rem_pio2+0x3ec>)
 800aac8:	462a      	mov	r2, r5
 800aaca:	9301      	str	r3, [sp, #4]
 800aacc:	2302      	movs	r3, #2
 800aace:	4621      	mov	r1, r4
 800aad0:	9300      	str	r3, [sp, #0]
 800aad2:	a806      	add	r0, sp, #24
 800aad4:	4653      	mov	r3, sl
 800aad6:	f000 f9ad 	bl	800ae34 <__kernel_rem_pio2>
 800aada:	9b04      	ldr	r3, [sp, #16]
 800aadc:	4605      	mov	r5, r0
 800aade:	2b00      	cmp	r3, #0
 800aae0:	f6bf ae51 	bge.w	800a786 <__ieee754_rem_pio2+0x6e>
 800aae4:	e9d4 2100 	ldrd	r2, r1, [r4]
 800aae8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aaec:	e9c4 2300 	strd	r2, r3, [r4]
 800aaf0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800aaf4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aaf8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800aafc:	e703      	b.n	800a906 <__ieee754_rem_pio2+0x1ee>
 800aafe:	bf00      	nop
 800ab00:	41700000 	.word	0x41700000
 800ab04:	0800c60c 	.word	0x0800c60c

0800ab08 <__ieee754_atan2f>:
 800ab08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab0a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800ab0e:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800ab12:	4603      	mov	r3, r0
 800ab14:	dc05      	bgt.n	800ab22 <__ieee754_atan2f+0x1a>
 800ab16:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800ab1a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800ab1e:	4607      	mov	r7, r0
 800ab20:	dd04      	ble.n	800ab2c <__ieee754_atan2f+0x24>
 800ab22:	4618      	mov	r0, r3
 800ab24:	f7f6 f826 	bl	8000b74 <__addsf3>
 800ab28:	4603      	mov	r3, r0
 800ab2a:	e011      	b.n	800ab50 <__ieee754_atan2f+0x48>
 800ab2c:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800ab30:	d103      	bne.n	800ab3a <__ieee754_atan2f+0x32>
 800ab32:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ab36:	f000 be79 	b.w	800b82c <atanf>
 800ab3a:	178c      	asrs	r4, r1, #30
 800ab3c:	f004 0402 	and.w	r4, r4, #2
 800ab40:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800ab44:	b932      	cbnz	r2, 800ab54 <__ieee754_atan2f+0x4c>
 800ab46:	2c02      	cmp	r4, #2
 800ab48:	d04c      	beq.n	800abe4 <__ieee754_atan2f+0xdc>
 800ab4a:	2c03      	cmp	r4, #3
 800ab4c:	d100      	bne.n	800ab50 <__ieee754_atan2f+0x48>
 800ab4e:	4b29      	ldr	r3, [pc, #164]	; (800abf4 <__ieee754_atan2f+0xec>)
 800ab50:	4618      	mov	r0, r3
 800ab52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab54:	b91e      	cbnz	r6, 800ab5e <__ieee754_atan2f+0x56>
 800ab56:	2f00      	cmp	r7, #0
 800ab58:	da4a      	bge.n	800abf0 <__ieee754_atan2f+0xe8>
 800ab5a:	4b27      	ldr	r3, [pc, #156]	; (800abf8 <__ieee754_atan2f+0xf0>)
 800ab5c:	e7f8      	b.n	800ab50 <__ieee754_atan2f+0x48>
 800ab5e:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800ab62:	d10e      	bne.n	800ab82 <__ieee754_atan2f+0x7a>
 800ab64:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800ab68:	f104 34ff 	add.w	r4, r4, #4294967295
 800ab6c:	d105      	bne.n	800ab7a <__ieee754_atan2f+0x72>
 800ab6e:	2c02      	cmp	r4, #2
 800ab70:	d83a      	bhi.n	800abe8 <__ieee754_atan2f+0xe0>
 800ab72:	4b22      	ldr	r3, [pc, #136]	; (800abfc <__ieee754_atan2f+0xf4>)
 800ab74:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800ab78:	e7ea      	b.n	800ab50 <__ieee754_atan2f+0x48>
 800ab7a:	2c02      	cmp	r4, #2
 800ab7c:	d836      	bhi.n	800abec <__ieee754_atan2f+0xe4>
 800ab7e:	4b20      	ldr	r3, [pc, #128]	; (800ac00 <__ieee754_atan2f+0xf8>)
 800ab80:	e7f8      	b.n	800ab74 <__ieee754_atan2f+0x6c>
 800ab82:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800ab86:	d0e6      	beq.n	800ab56 <__ieee754_atan2f+0x4e>
 800ab88:	1b92      	subs	r2, r2, r6
 800ab8a:	f1b2 5ff4 	cmp.w	r2, #511705088	; 0x1e800000
 800ab8e:	ea4f 50e2 	mov.w	r0, r2, asr #23
 800ab92:	da17      	bge.n	800abc4 <__ieee754_atan2f+0xbc>
 800ab94:	2900      	cmp	r1, #0
 800ab96:	da01      	bge.n	800ab9c <__ieee754_atan2f+0x94>
 800ab98:	303c      	adds	r0, #60	; 0x3c
 800ab9a:	db15      	blt.n	800abc8 <__ieee754_atan2f+0xc0>
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	f7f6 f9a5 	bl	8000eec <__aeabi_fdiv>
 800aba2:	f000 ff4f 	bl	800ba44 <fabsf>
 800aba6:	f000 fe41 	bl	800b82c <atanf>
 800abaa:	4603      	mov	r3, r0
 800abac:	2c01      	cmp	r4, #1
 800abae:	d00d      	beq.n	800abcc <__ieee754_atan2f+0xc4>
 800abb0:	2c02      	cmp	r4, #2
 800abb2:	d00e      	beq.n	800abd2 <__ieee754_atan2f+0xca>
 800abb4:	2c00      	cmp	r4, #0
 800abb6:	d0cb      	beq.n	800ab50 <__ieee754_atan2f+0x48>
 800abb8:	4912      	ldr	r1, [pc, #72]	; (800ac04 <__ieee754_atan2f+0xfc>)
 800abba:	4618      	mov	r0, r3
 800abbc:	f7f5 ffda 	bl	8000b74 <__addsf3>
 800abc0:	4911      	ldr	r1, [pc, #68]	; (800ac08 <__ieee754_atan2f+0x100>)
 800abc2:	e00c      	b.n	800abde <__ieee754_atan2f+0xd6>
 800abc4:	4b11      	ldr	r3, [pc, #68]	; (800ac0c <__ieee754_atan2f+0x104>)
 800abc6:	e7f1      	b.n	800abac <__ieee754_atan2f+0xa4>
 800abc8:	2300      	movs	r3, #0
 800abca:	e7ef      	b.n	800abac <__ieee754_atan2f+0xa4>
 800abcc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800abd0:	e7be      	b.n	800ab50 <__ieee754_atan2f+0x48>
 800abd2:	490c      	ldr	r1, [pc, #48]	; (800ac04 <__ieee754_atan2f+0xfc>)
 800abd4:	4618      	mov	r0, r3
 800abd6:	f7f5 ffcd 	bl	8000b74 <__addsf3>
 800abda:	4601      	mov	r1, r0
 800abdc:	480a      	ldr	r0, [pc, #40]	; (800ac08 <__ieee754_atan2f+0x100>)
 800abde:	f7f5 ffc7 	bl	8000b70 <__aeabi_fsub>
 800abe2:	e7a1      	b.n	800ab28 <__ieee754_atan2f+0x20>
 800abe4:	4b08      	ldr	r3, [pc, #32]	; (800ac08 <__ieee754_atan2f+0x100>)
 800abe6:	e7b3      	b.n	800ab50 <__ieee754_atan2f+0x48>
 800abe8:	4b09      	ldr	r3, [pc, #36]	; (800ac10 <__ieee754_atan2f+0x108>)
 800abea:	e7b1      	b.n	800ab50 <__ieee754_atan2f+0x48>
 800abec:	2300      	movs	r3, #0
 800abee:	e7af      	b.n	800ab50 <__ieee754_atan2f+0x48>
 800abf0:	4b06      	ldr	r3, [pc, #24]	; (800ac0c <__ieee754_atan2f+0x104>)
 800abf2:	e7ad      	b.n	800ab50 <__ieee754_atan2f+0x48>
 800abf4:	c0490fdb 	.word	0xc0490fdb
 800abf8:	bfc90fdb 	.word	0xbfc90fdb
 800abfc:	0800c714 	.word	0x0800c714
 800ac00:	0800c720 	.word	0x0800c720
 800ac04:	33bbbd2e 	.word	0x33bbbd2e
 800ac08:	40490fdb 	.word	0x40490fdb
 800ac0c:	3fc90fdb 	.word	0x3fc90fdb
 800ac10:	3f490fdb 	.word	0x3f490fdb

0800ac14 <__ieee754_sqrtf>:
 800ac14:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800ac18:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800ac1c:	b570      	push	{r4, r5, r6, lr}
 800ac1e:	4603      	mov	r3, r0
 800ac20:	4604      	mov	r4, r0
 800ac22:	d309      	bcc.n	800ac38 <__ieee754_sqrtf+0x24>
 800ac24:	4601      	mov	r1, r0
 800ac26:	f7f6 f8ad 	bl	8000d84 <__aeabi_fmul>
 800ac2a:	4601      	mov	r1, r0
 800ac2c:	4620      	mov	r0, r4
 800ac2e:	f7f5 ffa1 	bl	8000b74 <__addsf3>
 800ac32:	4604      	mov	r4, r0
 800ac34:	4620      	mov	r0, r4
 800ac36:	bd70      	pop	{r4, r5, r6, pc}
 800ac38:	2a00      	cmp	r2, #0
 800ac3a:	d0fb      	beq.n	800ac34 <__ieee754_sqrtf+0x20>
 800ac3c:	2800      	cmp	r0, #0
 800ac3e:	da06      	bge.n	800ac4e <__ieee754_sqrtf+0x3a>
 800ac40:	4601      	mov	r1, r0
 800ac42:	f7f5 ff95 	bl	8000b70 <__aeabi_fsub>
 800ac46:	4601      	mov	r1, r0
 800ac48:	f7f6 f950 	bl	8000eec <__aeabi_fdiv>
 800ac4c:	e7f1      	b.n	800ac32 <__ieee754_sqrtf+0x1e>
 800ac4e:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 800ac52:	ea4f 51e0 	mov.w	r1, r0, asr #23
 800ac56:	d029      	beq.n	800acac <__ieee754_sqrtf+0x98>
 800ac58:	f3c3 0216 	ubfx	r2, r3, #0, #23
 800ac5c:	07cb      	lsls	r3, r1, #31
 800ac5e:	f04f 0300 	mov.w	r3, #0
 800ac62:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 800ac66:	f04f 0419 	mov.w	r4, #25
 800ac6a:	461e      	mov	r6, r3
 800ac6c:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800ac70:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800ac74:	bf58      	it	pl
 800ac76:	0052      	lslpl	r2, r2, #1
 800ac78:	1040      	asrs	r0, r0, #1
 800ac7a:	0052      	lsls	r2, r2, #1
 800ac7c:	1875      	adds	r5, r6, r1
 800ac7e:	4295      	cmp	r5, r2
 800ac80:	bfde      	ittt	le
 800ac82:	186e      	addle	r6, r5, r1
 800ac84:	1b52      	suble	r2, r2, r5
 800ac86:	185b      	addle	r3, r3, r1
 800ac88:	3c01      	subs	r4, #1
 800ac8a:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800ac8e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800ac92:	d1f3      	bne.n	800ac7c <__ieee754_sqrtf+0x68>
 800ac94:	b112      	cbz	r2, 800ac9c <__ieee754_sqrtf+0x88>
 800ac96:	3301      	adds	r3, #1
 800ac98:	f023 0301 	bic.w	r3, r3, #1
 800ac9c:	105c      	asrs	r4, r3, #1
 800ac9e:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 800aca2:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 800aca6:	e7c5      	b.n	800ac34 <__ieee754_sqrtf+0x20>
 800aca8:	005b      	lsls	r3, r3, #1
 800acaa:	3201      	adds	r2, #1
 800acac:	0218      	lsls	r0, r3, #8
 800acae:	d5fb      	bpl.n	800aca8 <__ieee754_sqrtf+0x94>
 800acb0:	3a01      	subs	r2, #1
 800acb2:	1a89      	subs	r1, r1, r2
 800acb4:	e7d0      	b.n	800ac58 <__ieee754_sqrtf+0x44>
	...

0800acb8 <__kernel_cos>:
 800acb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acbc:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800acc0:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800acc4:	4680      	mov	r8, r0
 800acc6:	460f      	mov	r7, r1
 800acc8:	e9cd 2300 	strd	r2, r3, [sp]
 800accc:	da04      	bge.n	800acd8 <__kernel_cos+0x20>
 800acce:	f7f5 feb3 	bl	8000a38 <__aeabi_d2iz>
 800acd2:	2800      	cmp	r0, #0
 800acd4:	f000 8086 	beq.w	800ade4 <__kernel_cos+0x12c>
 800acd8:	4642      	mov	r2, r8
 800acda:	463b      	mov	r3, r7
 800acdc:	4640      	mov	r0, r8
 800acde:	4639      	mov	r1, r7
 800ace0:	f7f5 fbfa 	bl	80004d8 <__aeabi_dmul>
 800ace4:	2200      	movs	r2, #0
 800ace6:	4b4e      	ldr	r3, [pc, #312]	; (800ae20 <__kernel_cos+0x168>)
 800ace8:	4604      	mov	r4, r0
 800acea:	460d      	mov	r5, r1
 800acec:	f7f5 fbf4 	bl	80004d8 <__aeabi_dmul>
 800acf0:	a33f      	add	r3, pc, #252	; (adr r3, 800adf0 <__kernel_cos+0x138>)
 800acf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acf6:	4682      	mov	sl, r0
 800acf8:	468b      	mov	fp, r1
 800acfa:	4620      	mov	r0, r4
 800acfc:	4629      	mov	r1, r5
 800acfe:	f7f5 fbeb 	bl	80004d8 <__aeabi_dmul>
 800ad02:	a33d      	add	r3, pc, #244	; (adr r3, 800adf8 <__kernel_cos+0x140>)
 800ad04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad08:	f7f5 fa30 	bl	800016c <__adddf3>
 800ad0c:	4622      	mov	r2, r4
 800ad0e:	462b      	mov	r3, r5
 800ad10:	f7f5 fbe2 	bl	80004d8 <__aeabi_dmul>
 800ad14:	a33a      	add	r3, pc, #232	; (adr r3, 800ae00 <__kernel_cos+0x148>)
 800ad16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad1a:	f7f5 fa25 	bl	8000168 <__aeabi_dsub>
 800ad1e:	4622      	mov	r2, r4
 800ad20:	462b      	mov	r3, r5
 800ad22:	f7f5 fbd9 	bl	80004d8 <__aeabi_dmul>
 800ad26:	a338      	add	r3, pc, #224	; (adr r3, 800ae08 <__kernel_cos+0x150>)
 800ad28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad2c:	f7f5 fa1e 	bl	800016c <__adddf3>
 800ad30:	4622      	mov	r2, r4
 800ad32:	462b      	mov	r3, r5
 800ad34:	f7f5 fbd0 	bl	80004d8 <__aeabi_dmul>
 800ad38:	a335      	add	r3, pc, #212	; (adr r3, 800ae10 <__kernel_cos+0x158>)
 800ad3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad3e:	f7f5 fa13 	bl	8000168 <__aeabi_dsub>
 800ad42:	4622      	mov	r2, r4
 800ad44:	462b      	mov	r3, r5
 800ad46:	f7f5 fbc7 	bl	80004d8 <__aeabi_dmul>
 800ad4a:	a333      	add	r3, pc, #204	; (adr r3, 800ae18 <__kernel_cos+0x160>)
 800ad4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad50:	f7f5 fa0c 	bl	800016c <__adddf3>
 800ad54:	4622      	mov	r2, r4
 800ad56:	462b      	mov	r3, r5
 800ad58:	f7f5 fbbe 	bl	80004d8 <__aeabi_dmul>
 800ad5c:	4622      	mov	r2, r4
 800ad5e:	462b      	mov	r3, r5
 800ad60:	f7f5 fbba 	bl	80004d8 <__aeabi_dmul>
 800ad64:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ad68:	4604      	mov	r4, r0
 800ad6a:	460d      	mov	r5, r1
 800ad6c:	4640      	mov	r0, r8
 800ad6e:	4639      	mov	r1, r7
 800ad70:	f7f5 fbb2 	bl	80004d8 <__aeabi_dmul>
 800ad74:	460b      	mov	r3, r1
 800ad76:	4602      	mov	r2, r0
 800ad78:	4629      	mov	r1, r5
 800ad7a:	4620      	mov	r0, r4
 800ad7c:	f7f5 f9f4 	bl	8000168 <__aeabi_dsub>
 800ad80:	4b28      	ldr	r3, [pc, #160]	; (800ae24 <__kernel_cos+0x16c>)
 800ad82:	4680      	mov	r8, r0
 800ad84:	429e      	cmp	r6, r3
 800ad86:	4689      	mov	r9, r1
 800ad88:	dc0e      	bgt.n	800ada8 <__kernel_cos+0xf0>
 800ad8a:	4602      	mov	r2, r0
 800ad8c:	460b      	mov	r3, r1
 800ad8e:	4650      	mov	r0, sl
 800ad90:	4659      	mov	r1, fp
 800ad92:	f7f5 f9e9 	bl	8000168 <__aeabi_dsub>
 800ad96:	4602      	mov	r2, r0
 800ad98:	2000      	movs	r0, #0
 800ad9a:	460b      	mov	r3, r1
 800ad9c:	4922      	ldr	r1, [pc, #136]	; (800ae28 <__kernel_cos+0x170>)
 800ad9e:	f7f5 f9e3 	bl	8000168 <__aeabi_dsub>
 800ada2:	b003      	add	sp, #12
 800ada4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ada8:	2400      	movs	r4, #0
 800adaa:	4b20      	ldr	r3, [pc, #128]	; (800ae2c <__kernel_cos+0x174>)
 800adac:	4622      	mov	r2, r4
 800adae:	429e      	cmp	r6, r3
 800adb0:	bfcc      	ite	gt
 800adb2:	4d1f      	ldrgt	r5, [pc, #124]	; (800ae30 <__kernel_cos+0x178>)
 800adb4:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800adb8:	462b      	mov	r3, r5
 800adba:	2000      	movs	r0, #0
 800adbc:	491a      	ldr	r1, [pc, #104]	; (800ae28 <__kernel_cos+0x170>)
 800adbe:	f7f5 f9d3 	bl	8000168 <__aeabi_dsub>
 800adc2:	4622      	mov	r2, r4
 800adc4:	4606      	mov	r6, r0
 800adc6:	460f      	mov	r7, r1
 800adc8:	462b      	mov	r3, r5
 800adca:	4650      	mov	r0, sl
 800adcc:	4659      	mov	r1, fp
 800adce:	f7f5 f9cb 	bl	8000168 <__aeabi_dsub>
 800add2:	4642      	mov	r2, r8
 800add4:	464b      	mov	r3, r9
 800add6:	f7f5 f9c7 	bl	8000168 <__aeabi_dsub>
 800adda:	4602      	mov	r2, r0
 800addc:	460b      	mov	r3, r1
 800adde:	4630      	mov	r0, r6
 800ade0:	4639      	mov	r1, r7
 800ade2:	e7dc      	b.n	800ad9e <__kernel_cos+0xe6>
 800ade4:	2000      	movs	r0, #0
 800ade6:	4910      	ldr	r1, [pc, #64]	; (800ae28 <__kernel_cos+0x170>)
 800ade8:	e7db      	b.n	800ada2 <__kernel_cos+0xea>
 800adea:	bf00      	nop
 800adec:	f3af 8000 	nop.w
 800adf0:	be8838d4 	.word	0xbe8838d4
 800adf4:	bda8fae9 	.word	0xbda8fae9
 800adf8:	bdb4b1c4 	.word	0xbdb4b1c4
 800adfc:	3e21ee9e 	.word	0x3e21ee9e
 800ae00:	809c52ad 	.word	0x809c52ad
 800ae04:	3e927e4f 	.word	0x3e927e4f
 800ae08:	19cb1590 	.word	0x19cb1590
 800ae0c:	3efa01a0 	.word	0x3efa01a0
 800ae10:	16c15177 	.word	0x16c15177
 800ae14:	3f56c16c 	.word	0x3f56c16c
 800ae18:	5555554c 	.word	0x5555554c
 800ae1c:	3fa55555 	.word	0x3fa55555
 800ae20:	3fe00000 	.word	0x3fe00000
 800ae24:	3fd33332 	.word	0x3fd33332
 800ae28:	3ff00000 	.word	0x3ff00000
 800ae2c:	3fe90000 	.word	0x3fe90000
 800ae30:	3fd20000 	.word	0x3fd20000

0800ae34 <__kernel_rem_pio2>:
 800ae34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae38:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800ae3c:	9308      	str	r3, [sp, #32]
 800ae3e:	9106      	str	r1, [sp, #24]
 800ae40:	4bb6      	ldr	r3, [pc, #728]	; (800b11c <__kernel_rem_pio2+0x2e8>)
 800ae42:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800ae44:	f112 0f14 	cmn.w	r2, #20
 800ae48:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ae4c:	bfa8      	it	ge
 800ae4e:	1ed4      	subge	r4, r2, #3
 800ae50:	9302      	str	r3, [sp, #8]
 800ae52:	9b08      	ldr	r3, [sp, #32]
 800ae54:	bfb8      	it	lt
 800ae56:	2400      	movlt	r4, #0
 800ae58:	f103 33ff 	add.w	r3, r3, #4294967295
 800ae5c:	9307      	str	r3, [sp, #28]
 800ae5e:	bfa4      	itt	ge
 800ae60:	2318      	movge	r3, #24
 800ae62:	fb94 f4f3 	sdivge	r4, r4, r3
 800ae66:	f06f 0317 	mvn.w	r3, #23
 800ae6a:	fb04 3303 	mla	r3, r4, r3, r3
 800ae6e:	eb03 0b02 	add.w	fp, r3, r2
 800ae72:	9a07      	ldr	r2, [sp, #28]
 800ae74:	9b02      	ldr	r3, [sp, #8]
 800ae76:	1aa7      	subs	r7, r4, r2
 800ae78:	eb03 0802 	add.w	r8, r3, r2
 800ae7c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800ae7e:	2500      	movs	r5, #0
 800ae80:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800ae84:	2200      	movs	r2, #0
 800ae86:	2300      	movs	r3, #0
 800ae88:	9009      	str	r0, [sp, #36]	; 0x24
 800ae8a:	ae20      	add	r6, sp, #128	; 0x80
 800ae8c:	4545      	cmp	r5, r8
 800ae8e:	dd14      	ble.n	800aeba <__kernel_rem_pio2+0x86>
 800ae90:	f04f 0800 	mov.w	r8, #0
 800ae94:	9a08      	ldr	r2, [sp, #32]
 800ae96:	ab20      	add	r3, sp, #128	; 0x80
 800ae98:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 800ae9c:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 800aea0:	9b02      	ldr	r3, [sp, #8]
 800aea2:	4598      	cmp	r8, r3
 800aea4:	dc35      	bgt.n	800af12 <__kernel_rem_pio2+0xde>
 800aea6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aea8:	2200      	movs	r2, #0
 800aeaa:	f1a3 0908 	sub.w	r9, r3, #8
 800aeae:	2300      	movs	r3, #0
 800aeb0:	462f      	mov	r7, r5
 800aeb2:	2600      	movs	r6, #0
 800aeb4:	e9cd 2300 	strd	r2, r3, [sp]
 800aeb8:	e01f      	b.n	800aefa <__kernel_rem_pio2+0xc6>
 800aeba:	42ef      	cmn	r7, r5
 800aebc:	d40b      	bmi.n	800aed6 <__kernel_rem_pio2+0xa2>
 800aebe:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800aec2:	e9cd 2300 	strd	r2, r3, [sp]
 800aec6:	f7f5 fa9d 	bl	8000404 <__aeabi_i2d>
 800aeca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aece:	e8e6 0102 	strd	r0, r1, [r6], #8
 800aed2:	3501      	adds	r5, #1
 800aed4:	e7da      	b.n	800ae8c <__kernel_rem_pio2+0x58>
 800aed6:	4610      	mov	r0, r2
 800aed8:	4619      	mov	r1, r3
 800aeda:	e7f8      	b.n	800aece <__kernel_rem_pio2+0x9a>
 800aedc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aee0:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800aee4:	f7f5 faf8 	bl	80004d8 <__aeabi_dmul>
 800aee8:	4602      	mov	r2, r0
 800aeea:	460b      	mov	r3, r1
 800aeec:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aef0:	f7f5 f93c 	bl	800016c <__adddf3>
 800aef4:	e9cd 0100 	strd	r0, r1, [sp]
 800aef8:	3601      	adds	r6, #1
 800aefa:	9b07      	ldr	r3, [sp, #28]
 800aefc:	3f08      	subs	r7, #8
 800aefe:	429e      	cmp	r6, r3
 800af00:	ddec      	ble.n	800aedc <__kernel_rem_pio2+0xa8>
 800af02:	e9dd 2300 	ldrd	r2, r3, [sp]
 800af06:	f108 0801 	add.w	r8, r8, #1
 800af0a:	e8ea 2302 	strd	r2, r3, [sl], #8
 800af0e:	3508      	adds	r5, #8
 800af10:	e7c6      	b.n	800aea0 <__kernel_rem_pio2+0x6c>
 800af12:	9b02      	ldr	r3, [sp, #8]
 800af14:	aa0c      	add	r2, sp, #48	; 0x30
 800af16:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800af1a:	930b      	str	r3, [sp, #44]	; 0x2c
 800af1c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800af1e:	9e02      	ldr	r6, [sp, #8]
 800af20:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800af24:	930a      	str	r3, [sp, #40]	; 0x28
 800af26:	ab98      	add	r3, sp, #608	; 0x260
 800af28:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800af2c:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 800af30:	ab70      	add	r3, sp, #448	; 0x1c0
 800af32:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 800af36:	46d0      	mov	r8, sl
 800af38:	46b1      	mov	r9, r6
 800af3a:	af0c      	add	r7, sp, #48	; 0x30
 800af3c:	9700      	str	r7, [sp, #0]
 800af3e:	f1b9 0f00 	cmp.w	r9, #0
 800af42:	f1a8 0808 	sub.w	r8, r8, #8
 800af46:	dc71      	bgt.n	800b02c <__kernel_rem_pio2+0x1f8>
 800af48:	465a      	mov	r2, fp
 800af4a:	4620      	mov	r0, r4
 800af4c:	4629      	mov	r1, r5
 800af4e:	f000 fbef 	bl	800b730 <scalbn>
 800af52:	2200      	movs	r2, #0
 800af54:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800af58:	4604      	mov	r4, r0
 800af5a:	460d      	mov	r5, r1
 800af5c:	f7f5 fabc 	bl	80004d8 <__aeabi_dmul>
 800af60:	f000 fb66 	bl	800b630 <floor>
 800af64:	2200      	movs	r2, #0
 800af66:	4b6e      	ldr	r3, [pc, #440]	; (800b120 <__kernel_rem_pio2+0x2ec>)
 800af68:	f7f5 fab6 	bl	80004d8 <__aeabi_dmul>
 800af6c:	4602      	mov	r2, r0
 800af6e:	460b      	mov	r3, r1
 800af70:	4620      	mov	r0, r4
 800af72:	4629      	mov	r1, r5
 800af74:	f7f5 f8f8 	bl	8000168 <__aeabi_dsub>
 800af78:	460d      	mov	r5, r1
 800af7a:	4604      	mov	r4, r0
 800af7c:	f7f5 fd5c 	bl	8000a38 <__aeabi_d2iz>
 800af80:	9004      	str	r0, [sp, #16]
 800af82:	f7f5 fa3f 	bl	8000404 <__aeabi_i2d>
 800af86:	4602      	mov	r2, r0
 800af88:	460b      	mov	r3, r1
 800af8a:	4620      	mov	r0, r4
 800af8c:	4629      	mov	r1, r5
 800af8e:	f7f5 f8eb 	bl	8000168 <__aeabi_dsub>
 800af92:	f1bb 0f00 	cmp.w	fp, #0
 800af96:	4680      	mov	r8, r0
 800af98:	4689      	mov	r9, r1
 800af9a:	dd70      	ble.n	800b07e <__kernel_rem_pio2+0x24a>
 800af9c:	1e72      	subs	r2, r6, #1
 800af9e:	ab0c      	add	r3, sp, #48	; 0x30
 800afa0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800afa4:	9c04      	ldr	r4, [sp, #16]
 800afa6:	f1cb 0118 	rsb	r1, fp, #24
 800afaa:	fa40 f301 	asr.w	r3, r0, r1
 800afae:	441c      	add	r4, r3
 800afb0:	408b      	lsls	r3, r1
 800afb2:	1ac0      	subs	r0, r0, r3
 800afb4:	ab0c      	add	r3, sp, #48	; 0x30
 800afb6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800afba:	f1cb 0317 	rsb	r3, fp, #23
 800afbe:	9404      	str	r4, [sp, #16]
 800afc0:	fa40 f303 	asr.w	r3, r0, r3
 800afc4:	9300      	str	r3, [sp, #0]
 800afc6:	9b00      	ldr	r3, [sp, #0]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	dd66      	ble.n	800b09a <__kernel_rem_pio2+0x266>
 800afcc:	2200      	movs	r2, #0
 800afce:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800afd2:	4614      	mov	r4, r2
 800afd4:	9b04      	ldr	r3, [sp, #16]
 800afd6:	3301      	adds	r3, #1
 800afd8:	9304      	str	r3, [sp, #16]
 800afda:	4296      	cmp	r6, r2
 800afdc:	f300 80ac 	bgt.w	800b138 <__kernel_rem_pio2+0x304>
 800afe0:	f1bb 0f00 	cmp.w	fp, #0
 800afe4:	dd07      	ble.n	800aff6 <__kernel_rem_pio2+0x1c2>
 800afe6:	f1bb 0f01 	cmp.w	fp, #1
 800afea:	f000 80b4 	beq.w	800b156 <__kernel_rem_pio2+0x322>
 800afee:	f1bb 0f02 	cmp.w	fp, #2
 800aff2:	f000 80ba 	beq.w	800b16a <__kernel_rem_pio2+0x336>
 800aff6:	9b00      	ldr	r3, [sp, #0]
 800aff8:	2b02      	cmp	r3, #2
 800affa:	d14e      	bne.n	800b09a <__kernel_rem_pio2+0x266>
 800affc:	4642      	mov	r2, r8
 800affe:	464b      	mov	r3, r9
 800b000:	2000      	movs	r0, #0
 800b002:	4948      	ldr	r1, [pc, #288]	; (800b124 <__kernel_rem_pio2+0x2f0>)
 800b004:	f7f5 f8b0 	bl	8000168 <__aeabi_dsub>
 800b008:	4680      	mov	r8, r0
 800b00a:	4689      	mov	r9, r1
 800b00c:	2c00      	cmp	r4, #0
 800b00e:	d044      	beq.n	800b09a <__kernel_rem_pio2+0x266>
 800b010:	465a      	mov	r2, fp
 800b012:	2000      	movs	r0, #0
 800b014:	4943      	ldr	r1, [pc, #268]	; (800b124 <__kernel_rem_pio2+0x2f0>)
 800b016:	f000 fb8b 	bl	800b730 <scalbn>
 800b01a:	4602      	mov	r2, r0
 800b01c:	460b      	mov	r3, r1
 800b01e:	4640      	mov	r0, r8
 800b020:	4649      	mov	r1, r9
 800b022:	f7f5 f8a1 	bl	8000168 <__aeabi_dsub>
 800b026:	4680      	mov	r8, r0
 800b028:	4689      	mov	r9, r1
 800b02a:	e036      	b.n	800b09a <__kernel_rem_pio2+0x266>
 800b02c:	2200      	movs	r2, #0
 800b02e:	4b3e      	ldr	r3, [pc, #248]	; (800b128 <__kernel_rem_pio2+0x2f4>)
 800b030:	4620      	mov	r0, r4
 800b032:	4629      	mov	r1, r5
 800b034:	f7f5 fa50 	bl	80004d8 <__aeabi_dmul>
 800b038:	f7f5 fcfe 	bl	8000a38 <__aeabi_d2iz>
 800b03c:	f7f5 f9e2 	bl	8000404 <__aeabi_i2d>
 800b040:	4602      	mov	r2, r0
 800b042:	460b      	mov	r3, r1
 800b044:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b048:	2200      	movs	r2, #0
 800b04a:	4b38      	ldr	r3, [pc, #224]	; (800b12c <__kernel_rem_pio2+0x2f8>)
 800b04c:	f7f5 fa44 	bl	80004d8 <__aeabi_dmul>
 800b050:	4602      	mov	r2, r0
 800b052:	460b      	mov	r3, r1
 800b054:	4620      	mov	r0, r4
 800b056:	4629      	mov	r1, r5
 800b058:	f7f5 f886 	bl	8000168 <__aeabi_dsub>
 800b05c:	f7f5 fcec 	bl	8000a38 <__aeabi_d2iz>
 800b060:	9b00      	ldr	r3, [sp, #0]
 800b062:	f109 39ff 	add.w	r9, r9, #4294967295
 800b066:	f843 0b04 	str.w	r0, [r3], #4
 800b06a:	9300      	str	r3, [sp, #0]
 800b06c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b070:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b074:	f7f5 f87a 	bl	800016c <__adddf3>
 800b078:	4604      	mov	r4, r0
 800b07a:	460d      	mov	r5, r1
 800b07c:	e75f      	b.n	800af3e <__kernel_rem_pio2+0x10a>
 800b07e:	d105      	bne.n	800b08c <__kernel_rem_pio2+0x258>
 800b080:	1e73      	subs	r3, r6, #1
 800b082:	aa0c      	add	r2, sp, #48	; 0x30
 800b084:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800b088:	15c3      	asrs	r3, r0, #23
 800b08a:	e79b      	b.n	800afc4 <__kernel_rem_pio2+0x190>
 800b08c:	2200      	movs	r2, #0
 800b08e:	4b28      	ldr	r3, [pc, #160]	; (800b130 <__kernel_rem_pio2+0x2fc>)
 800b090:	f7f5 fca8 	bl	80009e4 <__aeabi_dcmpge>
 800b094:	2800      	cmp	r0, #0
 800b096:	d13e      	bne.n	800b116 <__kernel_rem_pio2+0x2e2>
 800b098:	9000      	str	r0, [sp, #0]
 800b09a:	2200      	movs	r2, #0
 800b09c:	2300      	movs	r3, #0
 800b09e:	4640      	mov	r0, r8
 800b0a0:	4649      	mov	r1, r9
 800b0a2:	f7f5 fc81 	bl	80009a8 <__aeabi_dcmpeq>
 800b0a6:	2800      	cmp	r0, #0
 800b0a8:	f000 80b1 	beq.w	800b20e <__kernel_rem_pio2+0x3da>
 800b0ac:	1e74      	subs	r4, r6, #1
 800b0ae:	4623      	mov	r3, r4
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	9902      	ldr	r1, [sp, #8]
 800b0b4:	428b      	cmp	r3, r1
 800b0b6:	da5f      	bge.n	800b178 <__kernel_rem_pio2+0x344>
 800b0b8:	2a00      	cmp	r2, #0
 800b0ba:	d074      	beq.n	800b1a6 <__kernel_rem_pio2+0x372>
 800b0bc:	ab0c      	add	r3, sp, #48	; 0x30
 800b0be:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800b0c2:	f1ab 0b18 	sub.w	fp, fp, #24
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	f000 809f 	beq.w	800b20a <__kernel_rem_pio2+0x3d6>
 800b0cc:	465a      	mov	r2, fp
 800b0ce:	2000      	movs	r0, #0
 800b0d0:	4914      	ldr	r1, [pc, #80]	; (800b124 <__kernel_rem_pio2+0x2f0>)
 800b0d2:	f000 fb2d 	bl	800b730 <scalbn>
 800b0d6:	46a2      	mov	sl, r4
 800b0d8:	4606      	mov	r6, r0
 800b0da:	460f      	mov	r7, r1
 800b0dc:	f04f 0800 	mov.w	r8, #0
 800b0e0:	ab70      	add	r3, sp, #448	; 0x1c0
 800b0e2:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800b128 <__kernel_rem_pio2+0x2f4>
 800b0e6:	00e5      	lsls	r5, r4, #3
 800b0e8:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 800b0ec:	f1ba 0f00 	cmp.w	sl, #0
 800b0f0:	f280 80c3 	bge.w	800b27a <__kernel_rem_pio2+0x446>
 800b0f4:	4626      	mov	r6, r4
 800b0f6:	2e00      	cmp	r6, #0
 800b0f8:	f2c0 80f5 	blt.w	800b2e6 <__kernel_rem_pio2+0x4b2>
 800b0fc:	4b0d      	ldr	r3, [pc, #52]	; (800b134 <__kernel_rem_pio2+0x300>)
 800b0fe:	f04f 0a00 	mov.w	sl, #0
 800b102:	9307      	str	r3, [sp, #28]
 800b104:	ab70      	add	r3, sp, #448	; 0x1c0
 800b106:	f04f 0b00 	mov.w	fp, #0
 800b10a:	f04f 0800 	mov.w	r8, #0
 800b10e:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800b112:	1ba7      	subs	r7, r4, r6
 800b114:	e0db      	b.n	800b2ce <__kernel_rem_pio2+0x49a>
 800b116:	2302      	movs	r3, #2
 800b118:	9300      	str	r3, [sp, #0]
 800b11a:	e757      	b.n	800afcc <__kernel_rem_pio2+0x198>
 800b11c:	0800c770 	.word	0x0800c770
 800b120:	40200000 	.word	0x40200000
 800b124:	3ff00000 	.word	0x3ff00000
 800b128:	3e700000 	.word	0x3e700000
 800b12c:	41700000 	.word	0x41700000
 800b130:	3fe00000 	.word	0x3fe00000
 800b134:	0800c730 	.word	0x0800c730
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	b944      	cbnz	r4, 800b14e <__kernel_rem_pio2+0x31a>
 800b13c:	b11b      	cbz	r3, 800b146 <__kernel_rem_pio2+0x312>
 800b13e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800b142:	603b      	str	r3, [r7, #0]
 800b144:	2301      	movs	r3, #1
 800b146:	461c      	mov	r4, r3
 800b148:	3201      	adds	r2, #1
 800b14a:	3704      	adds	r7, #4
 800b14c:	e745      	b.n	800afda <__kernel_rem_pio2+0x1a6>
 800b14e:	1acb      	subs	r3, r1, r3
 800b150:	603b      	str	r3, [r7, #0]
 800b152:	4623      	mov	r3, r4
 800b154:	e7f7      	b.n	800b146 <__kernel_rem_pio2+0x312>
 800b156:	1e72      	subs	r2, r6, #1
 800b158:	ab0c      	add	r3, sp, #48	; 0x30
 800b15a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b15e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b162:	a90c      	add	r1, sp, #48	; 0x30
 800b164:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b168:	e745      	b.n	800aff6 <__kernel_rem_pio2+0x1c2>
 800b16a:	1e72      	subs	r2, r6, #1
 800b16c:	ab0c      	add	r3, sp, #48	; 0x30
 800b16e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b172:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b176:	e7f4      	b.n	800b162 <__kernel_rem_pio2+0x32e>
 800b178:	a90c      	add	r1, sp, #48	; 0x30
 800b17a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b17e:	3b01      	subs	r3, #1
 800b180:	430a      	orrs	r2, r1
 800b182:	e796      	b.n	800b0b2 <__kernel_rem_pio2+0x27e>
 800b184:	3401      	adds	r4, #1
 800b186:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b18a:	2a00      	cmp	r2, #0
 800b18c:	d0fa      	beq.n	800b184 <__kernel_rem_pio2+0x350>
 800b18e:	9b08      	ldr	r3, [sp, #32]
 800b190:	f106 0801 	add.w	r8, r6, #1
 800b194:	18f5      	adds	r5, r6, r3
 800b196:	ab20      	add	r3, sp, #128	; 0x80
 800b198:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800b19c:	4434      	add	r4, r6
 800b19e:	4544      	cmp	r4, r8
 800b1a0:	da04      	bge.n	800b1ac <__kernel_rem_pio2+0x378>
 800b1a2:	4626      	mov	r6, r4
 800b1a4:	e6bf      	b.n	800af26 <__kernel_rem_pio2+0xf2>
 800b1a6:	2401      	movs	r4, #1
 800b1a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1aa:	e7ec      	b.n	800b186 <__kernel_rem_pio2+0x352>
 800b1ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1ae:	f04f 0900 	mov.w	r9, #0
 800b1b2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800b1b6:	f7f5 f925 	bl	8000404 <__aeabi_i2d>
 800b1ba:	2600      	movs	r6, #0
 800b1bc:	2700      	movs	r7, #0
 800b1be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1c0:	e9c5 0100 	strd	r0, r1, [r5]
 800b1c4:	3b08      	subs	r3, #8
 800b1c6:	9300      	str	r3, [sp, #0]
 800b1c8:	9504      	str	r5, [sp, #16]
 800b1ca:	9b07      	ldr	r3, [sp, #28]
 800b1cc:	4599      	cmp	r9, r3
 800b1ce:	dd05      	ble.n	800b1dc <__kernel_rem_pio2+0x3a8>
 800b1d0:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 800b1d4:	f108 0801 	add.w	r8, r8, #1
 800b1d8:	3508      	adds	r5, #8
 800b1da:	e7e0      	b.n	800b19e <__kernel_rem_pio2+0x36a>
 800b1dc:	f8dd c010 	ldr.w	ip, [sp, #16]
 800b1e0:	9900      	ldr	r1, [sp, #0]
 800b1e2:	f109 0901 	add.w	r9, r9, #1
 800b1e6:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800b1ea:	9100      	str	r1, [sp, #0]
 800b1ec:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 800b1f0:	f8cd c010 	str.w	ip, [sp, #16]
 800b1f4:	f7f5 f970 	bl	80004d8 <__aeabi_dmul>
 800b1f8:	4602      	mov	r2, r0
 800b1fa:	460b      	mov	r3, r1
 800b1fc:	4630      	mov	r0, r6
 800b1fe:	4639      	mov	r1, r7
 800b200:	f7f4 ffb4 	bl	800016c <__adddf3>
 800b204:	4606      	mov	r6, r0
 800b206:	460f      	mov	r7, r1
 800b208:	e7df      	b.n	800b1ca <__kernel_rem_pio2+0x396>
 800b20a:	3c01      	subs	r4, #1
 800b20c:	e756      	b.n	800b0bc <__kernel_rem_pio2+0x288>
 800b20e:	f1cb 0200 	rsb	r2, fp, #0
 800b212:	4640      	mov	r0, r8
 800b214:	4649      	mov	r1, r9
 800b216:	f000 fa8b 	bl	800b730 <scalbn>
 800b21a:	2200      	movs	r2, #0
 800b21c:	4ba4      	ldr	r3, [pc, #656]	; (800b4b0 <__kernel_rem_pio2+0x67c>)
 800b21e:	4604      	mov	r4, r0
 800b220:	460d      	mov	r5, r1
 800b222:	f7f5 fbdf 	bl	80009e4 <__aeabi_dcmpge>
 800b226:	b1f8      	cbz	r0, 800b268 <__kernel_rem_pio2+0x434>
 800b228:	2200      	movs	r2, #0
 800b22a:	4ba2      	ldr	r3, [pc, #648]	; (800b4b4 <__kernel_rem_pio2+0x680>)
 800b22c:	4620      	mov	r0, r4
 800b22e:	4629      	mov	r1, r5
 800b230:	f7f5 f952 	bl	80004d8 <__aeabi_dmul>
 800b234:	f7f5 fc00 	bl	8000a38 <__aeabi_d2iz>
 800b238:	4607      	mov	r7, r0
 800b23a:	f7f5 f8e3 	bl	8000404 <__aeabi_i2d>
 800b23e:	2200      	movs	r2, #0
 800b240:	4b9b      	ldr	r3, [pc, #620]	; (800b4b0 <__kernel_rem_pio2+0x67c>)
 800b242:	f7f5 f949 	bl	80004d8 <__aeabi_dmul>
 800b246:	460b      	mov	r3, r1
 800b248:	4602      	mov	r2, r0
 800b24a:	4629      	mov	r1, r5
 800b24c:	4620      	mov	r0, r4
 800b24e:	f7f4 ff8b 	bl	8000168 <__aeabi_dsub>
 800b252:	f7f5 fbf1 	bl	8000a38 <__aeabi_d2iz>
 800b256:	1c74      	adds	r4, r6, #1
 800b258:	ab0c      	add	r3, sp, #48	; 0x30
 800b25a:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800b25e:	f10b 0b18 	add.w	fp, fp, #24
 800b262:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 800b266:	e731      	b.n	800b0cc <__kernel_rem_pio2+0x298>
 800b268:	4620      	mov	r0, r4
 800b26a:	4629      	mov	r1, r5
 800b26c:	f7f5 fbe4 	bl	8000a38 <__aeabi_d2iz>
 800b270:	ab0c      	add	r3, sp, #48	; 0x30
 800b272:	4634      	mov	r4, r6
 800b274:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800b278:	e728      	b.n	800b0cc <__kernel_rem_pio2+0x298>
 800b27a:	ab0c      	add	r3, sp, #48	; 0x30
 800b27c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800b280:	f7f5 f8c0 	bl	8000404 <__aeabi_i2d>
 800b284:	4632      	mov	r2, r6
 800b286:	463b      	mov	r3, r7
 800b288:	f7f5 f926 	bl	80004d8 <__aeabi_dmul>
 800b28c:	4642      	mov	r2, r8
 800b28e:	e86b 0102 	strd	r0, r1, [fp], #-8
 800b292:	464b      	mov	r3, r9
 800b294:	4630      	mov	r0, r6
 800b296:	4639      	mov	r1, r7
 800b298:	f7f5 f91e 	bl	80004d8 <__aeabi_dmul>
 800b29c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b2a0:	4606      	mov	r6, r0
 800b2a2:	460f      	mov	r7, r1
 800b2a4:	e722      	b.n	800b0ec <__kernel_rem_pio2+0x2b8>
 800b2a6:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800b2aa:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800b2ae:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 800b2b2:	f8cd c01c 	str.w	ip, [sp, #28]
 800b2b6:	f7f5 f90f 	bl	80004d8 <__aeabi_dmul>
 800b2ba:	4602      	mov	r2, r0
 800b2bc:	460b      	mov	r3, r1
 800b2be:	4650      	mov	r0, sl
 800b2c0:	4659      	mov	r1, fp
 800b2c2:	f7f4 ff53 	bl	800016c <__adddf3>
 800b2c6:	4682      	mov	sl, r0
 800b2c8:	468b      	mov	fp, r1
 800b2ca:	f108 0801 	add.w	r8, r8, #1
 800b2ce:	9b02      	ldr	r3, [sp, #8]
 800b2d0:	4598      	cmp	r8, r3
 800b2d2:	dc01      	bgt.n	800b2d8 <__kernel_rem_pio2+0x4a4>
 800b2d4:	45b8      	cmp	r8, r7
 800b2d6:	dde6      	ble.n	800b2a6 <__kernel_rem_pio2+0x472>
 800b2d8:	ab48      	add	r3, sp, #288	; 0x120
 800b2da:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800b2de:	e9c7 ab00 	strd	sl, fp, [r7]
 800b2e2:	3e01      	subs	r6, #1
 800b2e4:	e707      	b.n	800b0f6 <__kernel_rem_pio2+0x2c2>
 800b2e6:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800b2e8:	2b02      	cmp	r3, #2
 800b2ea:	dc09      	bgt.n	800b300 <__kernel_rem_pio2+0x4cc>
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	dc32      	bgt.n	800b356 <__kernel_rem_pio2+0x522>
 800b2f0:	d05a      	beq.n	800b3a8 <__kernel_rem_pio2+0x574>
 800b2f2:	9b04      	ldr	r3, [sp, #16]
 800b2f4:	f003 0007 	and.w	r0, r3, #7
 800b2f8:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800b2fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b300:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800b302:	2b03      	cmp	r3, #3
 800b304:	d1f5      	bne.n	800b2f2 <__kernel_rem_pio2+0x4be>
 800b306:	ab48      	add	r3, sp, #288	; 0x120
 800b308:	441d      	add	r5, r3
 800b30a:	46aa      	mov	sl, r5
 800b30c:	46a3      	mov	fp, r4
 800b30e:	f1bb 0f00 	cmp.w	fp, #0
 800b312:	dc76      	bgt.n	800b402 <__kernel_rem_pio2+0x5ce>
 800b314:	46aa      	mov	sl, r5
 800b316:	46a3      	mov	fp, r4
 800b318:	f1bb 0f01 	cmp.w	fp, #1
 800b31c:	f300 8090 	bgt.w	800b440 <__kernel_rem_pio2+0x60c>
 800b320:	2700      	movs	r7, #0
 800b322:	463e      	mov	r6, r7
 800b324:	2c01      	cmp	r4, #1
 800b326:	f300 80aa 	bgt.w	800b47e <__kernel_rem_pio2+0x64a>
 800b32a:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 800b32e:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 800b332:	9b00      	ldr	r3, [sp, #0]
 800b334:	2b00      	cmp	r3, #0
 800b336:	f040 80ac 	bne.w	800b492 <__kernel_rem_pio2+0x65e>
 800b33a:	4603      	mov	r3, r0
 800b33c:	462a      	mov	r2, r5
 800b33e:	9806      	ldr	r0, [sp, #24]
 800b340:	e9c0 2300 	strd	r2, r3, [r0]
 800b344:	4622      	mov	r2, r4
 800b346:	460b      	mov	r3, r1
 800b348:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b34c:	463a      	mov	r2, r7
 800b34e:	4633      	mov	r3, r6
 800b350:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800b354:	e7cd      	b.n	800b2f2 <__kernel_rem_pio2+0x4be>
 800b356:	2000      	movs	r0, #0
 800b358:	46a0      	mov	r8, r4
 800b35a:	4601      	mov	r1, r0
 800b35c:	ab48      	add	r3, sp, #288	; 0x120
 800b35e:	441d      	add	r5, r3
 800b360:	f1b8 0f00 	cmp.w	r8, #0
 800b364:	da3a      	bge.n	800b3dc <__kernel_rem_pio2+0x5a8>
 800b366:	9b00      	ldr	r3, [sp, #0]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d03e      	beq.n	800b3ea <__kernel_rem_pio2+0x5b6>
 800b36c:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 800b370:	4602      	mov	r2, r0
 800b372:	462b      	mov	r3, r5
 800b374:	9d06      	ldr	r5, [sp, #24]
 800b376:	2601      	movs	r6, #1
 800b378:	e9c5 2300 	strd	r2, r3, [r5]
 800b37c:	460b      	mov	r3, r1
 800b37e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800b382:	f7f4 fef1 	bl	8000168 <__aeabi_dsub>
 800b386:	4684      	mov	ip, r0
 800b388:	460f      	mov	r7, r1
 800b38a:	ad48      	add	r5, sp, #288	; 0x120
 800b38c:	42b4      	cmp	r4, r6
 800b38e:	f105 0508 	add.w	r5, r5, #8
 800b392:	da2c      	bge.n	800b3ee <__kernel_rem_pio2+0x5ba>
 800b394:	9b00      	ldr	r3, [sp, #0]
 800b396:	b10b      	cbz	r3, 800b39c <__kernel_rem_pio2+0x568>
 800b398:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800b39c:	4662      	mov	r2, ip
 800b39e:	463b      	mov	r3, r7
 800b3a0:	9906      	ldr	r1, [sp, #24]
 800b3a2:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800b3a6:	e7a4      	b.n	800b2f2 <__kernel_rem_pio2+0x4be>
 800b3a8:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 800b3aa:	ab48      	add	r3, sp, #288	; 0x120
 800b3ac:	4637      	mov	r7, r6
 800b3ae:	441d      	add	r5, r3
 800b3b0:	2c00      	cmp	r4, #0
 800b3b2:	da09      	bge.n	800b3c8 <__kernel_rem_pio2+0x594>
 800b3b4:	9b00      	ldr	r3, [sp, #0]
 800b3b6:	b10b      	cbz	r3, 800b3bc <__kernel_rem_pio2+0x588>
 800b3b8:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800b3bc:	4632      	mov	r2, r6
 800b3be:	463b      	mov	r3, r7
 800b3c0:	9906      	ldr	r1, [sp, #24]
 800b3c2:	e9c1 2300 	strd	r2, r3, [r1]
 800b3c6:	e794      	b.n	800b2f2 <__kernel_rem_pio2+0x4be>
 800b3c8:	4630      	mov	r0, r6
 800b3ca:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800b3ce:	4639      	mov	r1, r7
 800b3d0:	f7f4 fecc 	bl	800016c <__adddf3>
 800b3d4:	3c01      	subs	r4, #1
 800b3d6:	4606      	mov	r6, r0
 800b3d8:	460f      	mov	r7, r1
 800b3da:	e7e9      	b.n	800b3b0 <__kernel_rem_pio2+0x57c>
 800b3dc:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800b3e0:	f7f4 fec4 	bl	800016c <__adddf3>
 800b3e4:	f108 38ff 	add.w	r8, r8, #4294967295
 800b3e8:	e7ba      	b.n	800b360 <__kernel_rem_pio2+0x52c>
 800b3ea:	460d      	mov	r5, r1
 800b3ec:	e7c0      	b.n	800b370 <__kernel_rem_pio2+0x53c>
 800b3ee:	4660      	mov	r0, ip
 800b3f0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b3f4:	4639      	mov	r1, r7
 800b3f6:	f7f4 feb9 	bl	800016c <__adddf3>
 800b3fa:	3601      	adds	r6, #1
 800b3fc:	4684      	mov	ip, r0
 800b3fe:	460f      	mov	r7, r1
 800b400:	e7c4      	b.n	800b38c <__kernel_rem_pio2+0x558>
 800b402:	e9da 6700 	ldrd	r6, r7, [sl]
 800b406:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 800b40a:	4632      	mov	r2, r6
 800b40c:	463b      	mov	r3, r7
 800b40e:	4640      	mov	r0, r8
 800b410:	4649      	mov	r1, r9
 800b412:	f7f4 feab 	bl	800016c <__adddf3>
 800b416:	4602      	mov	r2, r0
 800b418:	460b      	mov	r3, r1
 800b41a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b41e:	4640      	mov	r0, r8
 800b420:	4649      	mov	r1, r9
 800b422:	f7f4 fea1 	bl	8000168 <__aeabi_dsub>
 800b426:	4632      	mov	r2, r6
 800b428:	463b      	mov	r3, r7
 800b42a:	f7f4 fe9f 	bl	800016c <__adddf3>
 800b42e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b432:	e86a 0102 	strd	r0, r1, [sl], #-8
 800b436:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b43a:	e9ca 2300 	strd	r2, r3, [sl]
 800b43e:	e766      	b.n	800b30e <__kernel_rem_pio2+0x4da>
 800b440:	e9da 8900 	ldrd	r8, r9, [sl]
 800b444:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 800b448:	4642      	mov	r2, r8
 800b44a:	464b      	mov	r3, r9
 800b44c:	4630      	mov	r0, r6
 800b44e:	4639      	mov	r1, r7
 800b450:	f7f4 fe8c 	bl	800016c <__adddf3>
 800b454:	4602      	mov	r2, r0
 800b456:	460b      	mov	r3, r1
 800b458:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b45c:	4630      	mov	r0, r6
 800b45e:	4639      	mov	r1, r7
 800b460:	f7f4 fe82 	bl	8000168 <__aeabi_dsub>
 800b464:	4642      	mov	r2, r8
 800b466:	464b      	mov	r3, r9
 800b468:	f7f4 fe80 	bl	800016c <__adddf3>
 800b46c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b470:	e86a 0102 	strd	r0, r1, [sl], #-8
 800b474:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b478:	e9ca 2300 	strd	r2, r3, [sl]
 800b47c:	e74c      	b.n	800b318 <__kernel_rem_pio2+0x4e4>
 800b47e:	4638      	mov	r0, r7
 800b480:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800b484:	4631      	mov	r1, r6
 800b486:	f7f4 fe71 	bl	800016c <__adddf3>
 800b48a:	3c01      	subs	r4, #1
 800b48c:	4607      	mov	r7, r0
 800b48e:	460e      	mov	r6, r1
 800b490:	e748      	b.n	800b324 <__kernel_rem_pio2+0x4f0>
 800b492:	9b06      	ldr	r3, [sp, #24]
 800b494:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800b498:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800b49c:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800b4a0:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800b4a4:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800b4a8:	601d      	str	r5, [r3, #0]
 800b4aa:	615e      	str	r6, [r3, #20]
 800b4ac:	e721      	b.n	800b2f2 <__kernel_rem_pio2+0x4be>
 800b4ae:	bf00      	nop
 800b4b0:	41700000 	.word	0x41700000
 800b4b4:	3e700000 	.word	0x3e700000

0800b4b8 <__kernel_sin>:
 800b4b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4bc:	b086      	sub	sp, #24
 800b4be:	e9cd 2300 	strd	r2, r3, [sp]
 800b4c2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b4c6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800b4ca:	4682      	mov	sl, r0
 800b4cc:	460c      	mov	r4, r1
 800b4ce:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800b4d0:	da03      	bge.n	800b4da <__kernel_sin+0x22>
 800b4d2:	f7f5 fab1 	bl	8000a38 <__aeabi_d2iz>
 800b4d6:	2800      	cmp	r0, #0
 800b4d8:	d050      	beq.n	800b57c <__kernel_sin+0xc4>
 800b4da:	4652      	mov	r2, sl
 800b4dc:	4623      	mov	r3, r4
 800b4de:	4650      	mov	r0, sl
 800b4e0:	4621      	mov	r1, r4
 800b4e2:	f7f4 fff9 	bl	80004d8 <__aeabi_dmul>
 800b4e6:	4606      	mov	r6, r0
 800b4e8:	460f      	mov	r7, r1
 800b4ea:	4602      	mov	r2, r0
 800b4ec:	460b      	mov	r3, r1
 800b4ee:	4650      	mov	r0, sl
 800b4f0:	4621      	mov	r1, r4
 800b4f2:	f7f4 fff1 	bl	80004d8 <__aeabi_dmul>
 800b4f6:	a33e      	add	r3, pc, #248	; (adr r3, 800b5f0 <__kernel_sin+0x138>)
 800b4f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4fc:	4680      	mov	r8, r0
 800b4fe:	4689      	mov	r9, r1
 800b500:	4630      	mov	r0, r6
 800b502:	4639      	mov	r1, r7
 800b504:	f7f4 ffe8 	bl	80004d8 <__aeabi_dmul>
 800b508:	a33b      	add	r3, pc, #236	; (adr r3, 800b5f8 <__kernel_sin+0x140>)
 800b50a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b50e:	f7f4 fe2b 	bl	8000168 <__aeabi_dsub>
 800b512:	4632      	mov	r2, r6
 800b514:	463b      	mov	r3, r7
 800b516:	f7f4 ffdf 	bl	80004d8 <__aeabi_dmul>
 800b51a:	a339      	add	r3, pc, #228	; (adr r3, 800b600 <__kernel_sin+0x148>)
 800b51c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b520:	f7f4 fe24 	bl	800016c <__adddf3>
 800b524:	4632      	mov	r2, r6
 800b526:	463b      	mov	r3, r7
 800b528:	f7f4 ffd6 	bl	80004d8 <__aeabi_dmul>
 800b52c:	a336      	add	r3, pc, #216	; (adr r3, 800b608 <__kernel_sin+0x150>)
 800b52e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b532:	f7f4 fe19 	bl	8000168 <__aeabi_dsub>
 800b536:	4632      	mov	r2, r6
 800b538:	463b      	mov	r3, r7
 800b53a:	f7f4 ffcd 	bl	80004d8 <__aeabi_dmul>
 800b53e:	a334      	add	r3, pc, #208	; (adr r3, 800b610 <__kernel_sin+0x158>)
 800b540:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b544:	f7f4 fe12 	bl	800016c <__adddf3>
 800b548:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b54c:	b9dd      	cbnz	r5, 800b586 <__kernel_sin+0xce>
 800b54e:	4602      	mov	r2, r0
 800b550:	460b      	mov	r3, r1
 800b552:	4630      	mov	r0, r6
 800b554:	4639      	mov	r1, r7
 800b556:	f7f4 ffbf 	bl	80004d8 <__aeabi_dmul>
 800b55a:	a32f      	add	r3, pc, #188	; (adr r3, 800b618 <__kernel_sin+0x160>)
 800b55c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b560:	f7f4 fe02 	bl	8000168 <__aeabi_dsub>
 800b564:	4642      	mov	r2, r8
 800b566:	464b      	mov	r3, r9
 800b568:	f7f4 ffb6 	bl	80004d8 <__aeabi_dmul>
 800b56c:	4602      	mov	r2, r0
 800b56e:	460b      	mov	r3, r1
 800b570:	4650      	mov	r0, sl
 800b572:	4621      	mov	r1, r4
 800b574:	f7f4 fdfa 	bl	800016c <__adddf3>
 800b578:	4682      	mov	sl, r0
 800b57a:	460c      	mov	r4, r1
 800b57c:	4650      	mov	r0, sl
 800b57e:	4621      	mov	r1, r4
 800b580:	b006      	add	sp, #24
 800b582:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b586:	2200      	movs	r2, #0
 800b588:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b58c:	4b24      	ldr	r3, [pc, #144]	; (800b620 <__kernel_sin+0x168>)
 800b58e:	f7f4 ffa3 	bl	80004d8 <__aeabi_dmul>
 800b592:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b596:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b59a:	4640      	mov	r0, r8
 800b59c:	4649      	mov	r1, r9
 800b59e:	f7f4 ff9b 	bl	80004d8 <__aeabi_dmul>
 800b5a2:	4602      	mov	r2, r0
 800b5a4:	460b      	mov	r3, r1
 800b5a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b5aa:	f7f4 fddd 	bl	8000168 <__aeabi_dsub>
 800b5ae:	4632      	mov	r2, r6
 800b5b0:	463b      	mov	r3, r7
 800b5b2:	f7f4 ff91 	bl	80004d8 <__aeabi_dmul>
 800b5b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b5ba:	f7f4 fdd5 	bl	8000168 <__aeabi_dsub>
 800b5be:	a316      	add	r3, pc, #88	; (adr r3, 800b618 <__kernel_sin+0x160>)
 800b5c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5c4:	4606      	mov	r6, r0
 800b5c6:	460f      	mov	r7, r1
 800b5c8:	4640      	mov	r0, r8
 800b5ca:	4649      	mov	r1, r9
 800b5cc:	f7f4 ff84 	bl	80004d8 <__aeabi_dmul>
 800b5d0:	4602      	mov	r2, r0
 800b5d2:	460b      	mov	r3, r1
 800b5d4:	4630      	mov	r0, r6
 800b5d6:	4639      	mov	r1, r7
 800b5d8:	f7f4 fdc8 	bl	800016c <__adddf3>
 800b5dc:	4602      	mov	r2, r0
 800b5de:	460b      	mov	r3, r1
 800b5e0:	4650      	mov	r0, sl
 800b5e2:	4621      	mov	r1, r4
 800b5e4:	f7f4 fdc0 	bl	8000168 <__aeabi_dsub>
 800b5e8:	e7c6      	b.n	800b578 <__kernel_sin+0xc0>
 800b5ea:	bf00      	nop
 800b5ec:	f3af 8000 	nop.w
 800b5f0:	5acfd57c 	.word	0x5acfd57c
 800b5f4:	3de5d93a 	.word	0x3de5d93a
 800b5f8:	8a2b9ceb 	.word	0x8a2b9ceb
 800b5fc:	3e5ae5e6 	.word	0x3e5ae5e6
 800b600:	57b1fe7d 	.word	0x57b1fe7d
 800b604:	3ec71de3 	.word	0x3ec71de3
 800b608:	19c161d5 	.word	0x19c161d5
 800b60c:	3f2a01a0 	.word	0x3f2a01a0
 800b610:	1110f8a6 	.word	0x1110f8a6
 800b614:	3f811111 	.word	0x3f811111
 800b618:	55555549 	.word	0x55555549
 800b61c:	3fc55555 	.word	0x3fc55555
 800b620:	3fe00000 	.word	0x3fe00000

0800b624 <fabs>:
 800b624:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800b628:	4770      	bx	lr
 800b62a:	0000      	movs	r0, r0
 800b62c:	0000      	movs	r0, r0
	...

0800b630 <floor>:
 800b630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b634:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800b638:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800b63c:	2e13      	cmp	r6, #19
 800b63e:	4602      	mov	r2, r0
 800b640:	460b      	mov	r3, r1
 800b642:	4607      	mov	r7, r0
 800b644:	460c      	mov	r4, r1
 800b646:	4605      	mov	r5, r0
 800b648:	dc33      	bgt.n	800b6b2 <floor+0x82>
 800b64a:	2e00      	cmp	r6, #0
 800b64c:	da14      	bge.n	800b678 <floor+0x48>
 800b64e:	a334      	add	r3, pc, #208	; (adr r3, 800b720 <floor+0xf0>)
 800b650:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b654:	f7f4 fd8a 	bl	800016c <__adddf3>
 800b658:	2200      	movs	r2, #0
 800b65a:	2300      	movs	r3, #0
 800b65c:	f7f5 f9cc 	bl	80009f8 <__aeabi_dcmpgt>
 800b660:	b138      	cbz	r0, 800b672 <floor+0x42>
 800b662:	2c00      	cmp	r4, #0
 800b664:	da58      	bge.n	800b718 <floor+0xe8>
 800b666:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800b66a:	431d      	orrs	r5, r3
 800b66c:	d001      	beq.n	800b672 <floor+0x42>
 800b66e:	2500      	movs	r5, #0
 800b670:	4c2d      	ldr	r4, [pc, #180]	; (800b728 <floor+0xf8>)
 800b672:	4623      	mov	r3, r4
 800b674:	462f      	mov	r7, r5
 800b676:	e025      	b.n	800b6c4 <floor+0x94>
 800b678:	4a2c      	ldr	r2, [pc, #176]	; (800b72c <floor+0xfc>)
 800b67a:	fa42 f806 	asr.w	r8, r2, r6
 800b67e:	ea01 0208 	and.w	r2, r1, r8
 800b682:	4302      	orrs	r2, r0
 800b684:	d01e      	beq.n	800b6c4 <floor+0x94>
 800b686:	a326      	add	r3, pc, #152	; (adr r3, 800b720 <floor+0xf0>)
 800b688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b68c:	f7f4 fd6e 	bl	800016c <__adddf3>
 800b690:	2200      	movs	r2, #0
 800b692:	2300      	movs	r3, #0
 800b694:	f7f5 f9b0 	bl	80009f8 <__aeabi_dcmpgt>
 800b698:	2800      	cmp	r0, #0
 800b69a:	d0ea      	beq.n	800b672 <floor+0x42>
 800b69c:	2c00      	cmp	r4, #0
 800b69e:	bfbe      	ittt	lt
 800b6a0:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800b6a4:	fa43 f606 	asrlt.w	r6, r3, r6
 800b6a8:	19a4      	addlt	r4, r4, r6
 800b6aa:	2500      	movs	r5, #0
 800b6ac:	ea24 0408 	bic.w	r4, r4, r8
 800b6b0:	e7df      	b.n	800b672 <floor+0x42>
 800b6b2:	2e33      	cmp	r6, #51	; 0x33
 800b6b4:	dd0a      	ble.n	800b6cc <floor+0x9c>
 800b6b6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b6ba:	d103      	bne.n	800b6c4 <floor+0x94>
 800b6bc:	f7f4 fd56 	bl	800016c <__adddf3>
 800b6c0:	4607      	mov	r7, r0
 800b6c2:	460b      	mov	r3, r1
 800b6c4:	4638      	mov	r0, r7
 800b6c6:	4619      	mov	r1, r3
 800b6c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6cc:	f04f 32ff 	mov.w	r2, #4294967295
 800b6d0:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800b6d4:	fa22 f808 	lsr.w	r8, r2, r8
 800b6d8:	ea18 0f00 	tst.w	r8, r0
 800b6dc:	d0f2      	beq.n	800b6c4 <floor+0x94>
 800b6de:	a310      	add	r3, pc, #64	; (adr r3, 800b720 <floor+0xf0>)
 800b6e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6e4:	f7f4 fd42 	bl	800016c <__adddf3>
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	f7f5 f984 	bl	80009f8 <__aeabi_dcmpgt>
 800b6f0:	2800      	cmp	r0, #0
 800b6f2:	d0be      	beq.n	800b672 <floor+0x42>
 800b6f4:	2c00      	cmp	r4, #0
 800b6f6:	da02      	bge.n	800b6fe <floor+0xce>
 800b6f8:	2e14      	cmp	r6, #20
 800b6fa:	d103      	bne.n	800b704 <floor+0xd4>
 800b6fc:	3401      	adds	r4, #1
 800b6fe:	ea25 0508 	bic.w	r5, r5, r8
 800b702:	e7b6      	b.n	800b672 <floor+0x42>
 800b704:	2301      	movs	r3, #1
 800b706:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800b70a:	fa03 f606 	lsl.w	r6, r3, r6
 800b70e:	4435      	add	r5, r6
 800b710:	42bd      	cmp	r5, r7
 800b712:	bf38      	it	cc
 800b714:	18e4      	addcc	r4, r4, r3
 800b716:	e7f2      	b.n	800b6fe <floor+0xce>
 800b718:	2500      	movs	r5, #0
 800b71a:	462c      	mov	r4, r5
 800b71c:	e7a9      	b.n	800b672 <floor+0x42>
 800b71e:	bf00      	nop
 800b720:	8800759c 	.word	0x8800759c
 800b724:	7e37e43c 	.word	0x7e37e43c
 800b728:	bff00000 	.word	0xbff00000
 800b72c:	000fffff 	.word	0x000fffff

0800b730 <scalbn>:
 800b730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b732:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800b736:	4604      	mov	r4, r0
 800b738:	460d      	mov	r5, r1
 800b73a:	4617      	mov	r7, r2
 800b73c:	460b      	mov	r3, r1
 800b73e:	b996      	cbnz	r6, 800b766 <scalbn+0x36>
 800b740:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b744:	4303      	orrs	r3, r0
 800b746:	d039      	beq.n	800b7bc <scalbn+0x8c>
 800b748:	4b33      	ldr	r3, [pc, #204]	; (800b818 <scalbn+0xe8>)
 800b74a:	2200      	movs	r2, #0
 800b74c:	f7f4 fec4 	bl	80004d8 <__aeabi_dmul>
 800b750:	4b32      	ldr	r3, [pc, #200]	; (800b81c <scalbn+0xec>)
 800b752:	4604      	mov	r4, r0
 800b754:	429f      	cmp	r7, r3
 800b756:	460d      	mov	r5, r1
 800b758:	da0f      	bge.n	800b77a <scalbn+0x4a>
 800b75a:	a32b      	add	r3, pc, #172	; (adr r3, 800b808 <scalbn+0xd8>)
 800b75c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b760:	f7f4 feba 	bl	80004d8 <__aeabi_dmul>
 800b764:	e006      	b.n	800b774 <scalbn+0x44>
 800b766:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800b76a:	4296      	cmp	r6, r2
 800b76c:	d10a      	bne.n	800b784 <scalbn+0x54>
 800b76e:	4602      	mov	r2, r0
 800b770:	f7f4 fcfc 	bl	800016c <__adddf3>
 800b774:	4604      	mov	r4, r0
 800b776:	460d      	mov	r5, r1
 800b778:	e020      	b.n	800b7bc <scalbn+0x8c>
 800b77a:	460b      	mov	r3, r1
 800b77c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800b780:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800b784:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800b788:	19b9      	adds	r1, r7, r6
 800b78a:	4291      	cmp	r1, r2
 800b78c:	dd0e      	ble.n	800b7ac <scalbn+0x7c>
 800b78e:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800b792:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800b796:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800b79a:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800b79e:	4820      	ldr	r0, [pc, #128]	; (800b820 <scalbn+0xf0>)
 800b7a0:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800b7a4:	a31a      	add	r3, pc, #104	; (adr r3, 800b810 <scalbn+0xe0>)
 800b7a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7aa:	e7d9      	b.n	800b760 <scalbn+0x30>
 800b7ac:	2900      	cmp	r1, #0
 800b7ae:	dd08      	ble.n	800b7c2 <scalbn+0x92>
 800b7b0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b7b4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b7b8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800b7bc:	4620      	mov	r0, r4
 800b7be:	4629      	mov	r1, r5
 800b7c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7c2:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800b7c6:	da12      	bge.n	800b7ee <scalbn+0xbe>
 800b7c8:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b7cc:	429f      	cmp	r7, r3
 800b7ce:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800b7d2:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 800b7d6:	dcdc      	bgt.n	800b792 <scalbn+0x62>
 800b7d8:	a30b      	add	r3, pc, #44	; (adr r3, 800b808 <scalbn+0xd8>)
 800b7da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7de:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800b7e2:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800b7e6:	480f      	ldr	r0, [pc, #60]	; (800b824 <scalbn+0xf4>)
 800b7e8:	f041 011f 	orr.w	r1, r1, #31
 800b7ec:	e7b8      	b.n	800b760 <scalbn+0x30>
 800b7ee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b7f2:	3136      	adds	r1, #54	; 0x36
 800b7f4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b7f8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800b7fc:	4620      	mov	r0, r4
 800b7fe:	4629      	mov	r1, r5
 800b800:	2200      	movs	r2, #0
 800b802:	4b09      	ldr	r3, [pc, #36]	; (800b828 <scalbn+0xf8>)
 800b804:	e7ac      	b.n	800b760 <scalbn+0x30>
 800b806:	bf00      	nop
 800b808:	c2f8f359 	.word	0xc2f8f359
 800b80c:	01a56e1f 	.word	0x01a56e1f
 800b810:	8800759c 	.word	0x8800759c
 800b814:	7e37e43c 	.word	0x7e37e43c
 800b818:	43500000 	.word	0x43500000
 800b81c:	ffff3cb0 	.word	0xffff3cb0
 800b820:	8800759c 	.word	0x8800759c
 800b824:	c2f8f359 	.word	0xc2f8f359
 800b828:	3c900000 	.word	0x3c900000

0800b82c <atanf>:
 800b82c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b830:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800b834:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 800b838:	4604      	mov	r4, r0
 800b83a:	4680      	mov	r8, r0
 800b83c:	db0e      	blt.n	800b85c <atanf+0x30>
 800b83e:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800b842:	dd04      	ble.n	800b84e <atanf+0x22>
 800b844:	4601      	mov	r1, r0
 800b846:	f7f5 f995 	bl	8000b74 <__addsf3>
 800b84a:	4604      	mov	r4, r0
 800b84c:	e003      	b.n	800b856 <atanf+0x2a>
 800b84e:	2800      	cmp	r0, #0
 800b850:	f300 80ce 	bgt.w	800b9f0 <atanf+0x1c4>
 800b854:	4c67      	ldr	r4, [pc, #412]	; (800b9f4 <atanf+0x1c8>)
 800b856:	4620      	mov	r0, r4
 800b858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b85c:	4b66      	ldr	r3, [pc, #408]	; (800b9f8 <atanf+0x1cc>)
 800b85e:	429d      	cmp	r5, r3
 800b860:	dc0e      	bgt.n	800b880 <atanf+0x54>
 800b862:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 800b866:	da08      	bge.n	800b87a <atanf+0x4e>
 800b868:	4964      	ldr	r1, [pc, #400]	; (800b9fc <atanf+0x1d0>)
 800b86a:	f7f5 f983 	bl	8000b74 <__addsf3>
 800b86e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b872:	f7f5 fc43 	bl	80010fc <__aeabi_fcmpgt>
 800b876:	2800      	cmp	r0, #0
 800b878:	d1ed      	bne.n	800b856 <atanf+0x2a>
 800b87a:	f04f 36ff 	mov.w	r6, #4294967295
 800b87e:	e01c      	b.n	800b8ba <atanf+0x8e>
 800b880:	f000 f8e0 	bl	800ba44 <fabsf>
 800b884:	4b5e      	ldr	r3, [pc, #376]	; (800ba00 <atanf+0x1d4>)
 800b886:	4604      	mov	r4, r0
 800b888:	429d      	cmp	r5, r3
 800b88a:	dc7c      	bgt.n	800b986 <atanf+0x15a>
 800b88c:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800b890:	429d      	cmp	r5, r3
 800b892:	dc67      	bgt.n	800b964 <atanf+0x138>
 800b894:	4601      	mov	r1, r0
 800b896:	f7f5 f96d 	bl	8000b74 <__addsf3>
 800b89a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b89e:	f7f5 f967 	bl	8000b70 <__aeabi_fsub>
 800b8a2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800b8a6:	4605      	mov	r5, r0
 800b8a8:	4620      	mov	r0, r4
 800b8aa:	f7f5 f963 	bl	8000b74 <__addsf3>
 800b8ae:	4601      	mov	r1, r0
 800b8b0:	4628      	mov	r0, r5
 800b8b2:	f7f5 fb1b 	bl	8000eec <__aeabi_fdiv>
 800b8b6:	2600      	movs	r6, #0
 800b8b8:	4604      	mov	r4, r0
 800b8ba:	4621      	mov	r1, r4
 800b8bc:	4620      	mov	r0, r4
 800b8be:	f7f5 fa61 	bl	8000d84 <__aeabi_fmul>
 800b8c2:	4601      	mov	r1, r0
 800b8c4:	4607      	mov	r7, r0
 800b8c6:	f7f5 fa5d 	bl	8000d84 <__aeabi_fmul>
 800b8ca:	4605      	mov	r5, r0
 800b8cc:	494d      	ldr	r1, [pc, #308]	; (800ba04 <atanf+0x1d8>)
 800b8ce:	f7f5 fa59 	bl	8000d84 <__aeabi_fmul>
 800b8d2:	494d      	ldr	r1, [pc, #308]	; (800ba08 <atanf+0x1dc>)
 800b8d4:	f7f5 f94e 	bl	8000b74 <__addsf3>
 800b8d8:	4629      	mov	r1, r5
 800b8da:	f7f5 fa53 	bl	8000d84 <__aeabi_fmul>
 800b8de:	494b      	ldr	r1, [pc, #300]	; (800ba0c <atanf+0x1e0>)
 800b8e0:	f7f5 f948 	bl	8000b74 <__addsf3>
 800b8e4:	4629      	mov	r1, r5
 800b8e6:	f7f5 fa4d 	bl	8000d84 <__aeabi_fmul>
 800b8ea:	4949      	ldr	r1, [pc, #292]	; (800ba10 <atanf+0x1e4>)
 800b8ec:	f7f5 f942 	bl	8000b74 <__addsf3>
 800b8f0:	4629      	mov	r1, r5
 800b8f2:	f7f5 fa47 	bl	8000d84 <__aeabi_fmul>
 800b8f6:	4947      	ldr	r1, [pc, #284]	; (800ba14 <atanf+0x1e8>)
 800b8f8:	f7f5 f93c 	bl	8000b74 <__addsf3>
 800b8fc:	4629      	mov	r1, r5
 800b8fe:	f7f5 fa41 	bl	8000d84 <__aeabi_fmul>
 800b902:	4945      	ldr	r1, [pc, #276]	; (800ba18 <atanf+0x1ec>)
 800b904:	f7f5 f936 	bl	8000b74 <__addsf3>
 800b908:	4639      	mov	r1, r7
 800b90a:	f7f5 fa3b 	bl	8000d84 <__aeabi_fmul>
 800b90e:	4943      	ldr	r1, [pc, #268]	; (800ba1c <atanf+0x1f0>)
 800b910:	4607      	mov	r7, r0
 800b912:	4628      	mov	r0, r5
 800b914:	f7f5 fa36 	bl	8000d84 <__aeabi_fmul>
 800b918:	4941      	ldr	r1, [pc, #260]	; (800ba20 <atanf+0x1f4>)
 800b91a:	f7f5 f929 	bl	8000b70 <__aeabi_fsub>
 800b91e:	4629      	mov	r1, r5
 800b920:	f7f5 fa30 	bl	8000d84 <__aeabi_fmul>
 800b924:	493f      	ldr	r1, [pc, #252]	; (800ba24 <atanf+0x1f8>)
 800b926:	f7f5 f923 	bl	8000b70 <__aeabi_fsub>
 800b92a:	4629      	mov	r1, r5
 800b92c:	f7f5 fa2a 	bl	8000d84 <__aeabi_fmul>
 800b930:	493d      	ldr	r1, [pc, #244]	; (800ba28 <atanf+0x1fc>)
 800b932:	f7f5 f91d 	bl	8000b70 <__aeabi_fsub>
 800b936:	4629      	mov	r1, r5
 800b938:	f7f5 fa24 	bl	8000d84 <__aeabi_fmul>
 800b93c:	493b      	ldr	r1, [pc, #236]	; (800ba2c <atanf+0x200>)
 800b93e:	f7f5 f917 	bl	8000b70 <__aeabi_fsub>
 800b942:	4629      	mov	r1, r5
 800b944:	f7f5 fa1e 	bl	8000d84 <__aeabi_fmul>
 800b948:	4601      	mov	r1, r0
 800b94a:	4638      	mov	r0, r7
 800b94c:	f7f5 f912 	bl	8000b74 <__addsf3>
 800b950:	4621      	mov	r1, r4
 800b952:	f7f5 fa17 	bl	8000d84 <__aeabi_fmul>
 800b956:	1c73      	adds	r3, r6, #1
 800b958:	4601      	mov	r1, r0
 800b95a:	d133      	bne.n	800b9c4 <atanf+0x198>
 800b95c:	4620      	mov	r0, r4
 800b95e:	f7f5 f907 	bl	8000b70 <__aeabi_fsub>
 800b962:	e772      	b.n	800b84a <atanf+0x1e>
 800b964:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b968:	f7f5 f902 	bl	8000b70 <__aeabi_fsub>
 800b96c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b970:	4605      	mov	r5, r0
 800b972:	4620      	mov	r0, r4
 800b974:	f7f5 f8fe 	bl	8000b74 <__addsf3>
 800b978:	4601      	mov	r1, r0
 800b97a:	4628      	mov	r0, r5
 800b97c:	f7f5 fab6 	bl	8000eec <__aeabi_fdiv>
 800b980:	2601      	movs	r6, #1
 800b982:	4604      	mov	r4, r0
 800b984:	e799      	b.n	800b8ba <atanf+0x8e>
 800b986:	4b2a      	ldr	r3, [pc, #168]	; (800ba30 <atanf+0x204>)
 800b988:	429d      	cmp	r5, r3
 800b98a:	dc14      	bgt.n	800b9b6 <atanf+0x18a>
 800b98c:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800b990:	f7f5 f8ee 	bl	8000b70 <__aeabi_fsub>
 800b994:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800b998:	4605      	mov	r5, r0
 800b99a:	4620      	mov	r0, r4
 800b99c:	f7f5 f9f2 	bl	8000d84 <__aeabi_fmul>
 800b9a0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b9a4:	f7f5 f8e6 	bl	8000b74 <__addsf3>
 800b9a8:	4601      	mov	r1, r0
 800b9aa:	4628      	mov	r0, r5
 800b9ac:	f7f5 fa9e 	bl	8000eec <__aeabi_fdiv>
 800b9b0:	2602      	movs	r6, #2
 800b9b2:	4604      	mov	r4, r0
 800b9b4:	e781      	b.n	800b8ba <atanf+0x8e>
 800b9b6:	4601      	mov	r1, r0
 800b9b8:	481e      	ldr	r0, [pc, #120]	; (800ba34 <atanf+0x208>)
 800b9ba:	f7f5 fa97 	bl	8000eec <__aeabi_fdiv>
 800b9be:	2603      	movs	r6, #3
 800b9c0:	4604      	mov	r4, r0
 800b9c2:	e77a      	b.n	800b8ba <atanf+0x8e>
 800b9c4:	4b1c      	ldr	r3, [pc, #112]	; (800ba38 <atanf+0x20c>)
 800b9c6:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800b9ca:	f7f5 f8d1 	bl	8000b70 <__aeabi_fsub>
 800b9ce:	4621      	mov	r1, r4
 800b9d0:	f7f5 f8ce 	bl	8000b70 <__aeabi_fsub>
 800b9d4:	4b19      	ldr	r3, [pc, #100]	; (800ba3c <atanf+0x210>)
 800b9d6:	4601      	mov	r1, r0
 800b9d8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b9dc:	f7f5 f8c8 	bl	8000b70 <__aeabi_fsub>
 800b9e0:	f1b8 0f00 	cmp.w	r8, #0
 800b9e4:	4604      	mov	r4, r0
 800b9e6:	f6bf af36 	bge.w	800b856 <atanf+0x2a>
 800b9ea:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800b9ee:	e72c      	b.n	800b84a <atanf+0x1e>
 800b9f0:	4c13      	ldr	r4, [pc, #76]	; (800ba40 <atanf+0x214>)
 800b9f2:	e730      	b.n	800b856 <atanf+0x2a>
 800b9f4:	bfc90fdb 	.word	0xbfc90fdb
 800b9f8:	3edfffff 	.word	0x3edfffff
 800b9fc:	7149f2ca 	.word	0x7149f2ca
 800ba00:	3f97ffff 	.word	0x3f97ffff
 800ba04:	3c8569d7 	.word	0x3c8569d7
 800ba08:	3d4bda59 	.word	0x3d4bda59
 800ba0c:	3d886b35 	.word	0x3d886b35
 800ba10:	3dba2e6e 	.word	0x3dba2e6e
 800ba14:	3e124925 	.word	0x3e124925
 800ba18:	3eaaaaab 	.word	0x3eaaaaab
 800ba1c:	bd15a221 	.word	0xbd15a221
 800ba20:	3d6ef16b 	.word	0x3d6ef16b
 800ba24:	3d9d8795 	.word	0x3d9d8795
 800ba28:	3de38e38 	.word	0x3de38e38
 800ba2c:	3e4ccccd 	.word	0x3e4ccccd
 800ba30:	401bffff 	.word	0x401bffff
 800ba34:	bf800000 	.word	0xbf800000
 800ba38:	0800c790 	.word	0x0800c790
 800ba3c:	0800c780 	.word	0x0800c780
 800ba40:	3fc90fdb 	.word	0x3fc90fdb

0800ba44 <fabsf>:
 800ba44:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800ba48:	4770      	bx	lr
	...

0800ba4c <_init>:
 800ba4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba4e:	bf00      	nop
 800ba50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba52:	bc08      	pop	{r3}
 800ba54:	469e      	mov	lr, r3
 800ba56:	4770      	bx	lr

0800ba58 <_fini>:
 800ba58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba5a:	bf00      	nop
 800ba5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba5e:	bc08      	pop	{r3}
 800ba60:	469e      	mov	lr, r3
 800ba62:	4770      	bx	lr
