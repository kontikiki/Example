
gps_test_refactoring.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d234  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011a8  0800d348  0800d348  0001d348  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e4f0  0800e4f0  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800e4f0  0800e4f0  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e4f0  0800e4f0  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e4f0  0800e4f0  0001e4f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e4f4  0800e4f4  0001e4f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800e4f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a1c  200001e0  0800e6d8  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000bfc  0800e6d8  00020bfc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00051338  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e25  00000000  00000000  00071541  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003728  00000000  00000000  00075368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003550  00000000  00000000  00078a90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b11e  00000000  00000000  0007bfe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020926  00000000  00000000  000970fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a666f  00000000  00000000  000b7a24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015e093  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00010c58  00000000  00000000  0015e0e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d32c 	.word	0x0800d32c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	0800d32c 	.word	0x0800d32c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmpun>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001118:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800111c:	d102      	bne.n	8001124 <__aeabi_fcmpun+0x14>
 800111e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001122:	d108      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001124:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001128:	d102      	bne.n	8001130 <__aeabi_fcmpun+0x20>
 800112a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800112e:	d102      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001130:	f04f 0000 	mov.w	r0, #0
 8001134:	4770      	bx	lr
 8001136:	f04f 0001 	mov.w	r0, #1
 800113a:	4770      	bx	lr

0800113c <__aeabi_d2lz>:
 800113c:	b538      	push	{r3, r4, r5, lr}
 800113e:	4605      	mov	r5, r0
 8001140:	460c      	mov	r4, r1
 8001142:	2200      	movs	r2, #0
 8001144:	2300      	movs	r3, #0
 8001146:	4628      	mov	r0, r5
 8001148:	4621      	mov	r1, r4
 800114a:	f7ff fc37 	bl	80009bc <__aeabi_dcmplt>
 800114e:	b928      	cbnz	r0, 800115c <__aeabi_d2lz+0x20>
 8001150:	4628      	mov	r0, r5
 8001152:	4621      	mov	r1, r4
 8001154:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001158:	f000 b80a 	b.w	8001170 <__aeabi_d2ulz>
 800115c:	4628      	mov	r0, r5
 800115e:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001162:	f000 f805 	bl	8001170 <__aeabi_d2ulz>
 8001166:	4240      	negs	r0, r0
 8001168:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800116c:	bd38      	pop	{r3, r4, r5, pc}
 800116e:	bf00      	nop

08001170 <__aeabi_d2ulz>:
 8001170:	b5d0      	push	{r4, r6, r7, lr}
 8001172:	2200      	movs	r2, #0
 8001174:	4b0b      	ldr	r3, [pc, #44]	; (80011a4 <__aeabi_d2ulz+0x34>)
 8001176:	4606      	mov	r6, r0
 8001178:	460f      	mov	r7, r1
 800117a:	f7ff f9ad 	bl	80004d8 <__aeabi_dmul>
 800117e:	f7ff fc83 	bl	8000a88 <__aeabi_d2uiz>
 8001182:	4604      	mov	r4, r0
 8001184:	f7ff f92e 	bl	80003e4 <__aeabi_ui2d>
 8001188:	2200      	movs	r2, #0
 800118a:	4b07      	ldr	r3, [pc, #28]	; (80011a8 <__aeabi_d2ulz+0x38>)
 800118c:	f7ff f9a4 	bl	80004d8 <__aeabi_dmul>
 8001190:	4602      	mov	r2, r0
 8001192:	460b      	mov	r3, r1
 8001194:	4630      	mov	r0, r6
 8001196:	4639      	mov	r1, r7
 8001198:	f7fe ffe6 	bl	8000168 <__aeabi_dsub>
 800119c:	f7ff fc74 	bl	8000a88 <__aeabi_d2uiz>
 80011a0:	4621      	mov	r1, r4
 80011a2:	bdd0      	pop	{r4, r6, r7, pc}
 80011a4:	3df00000 	.word	0x3df00000
 80011a8:	41f00000 	.word	0x41f00000

080011ac <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch) {
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
	(void) HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, 100);
 80011b4:	1d39      	adds	r1, r7, #4
 80011b6:	2364      	movs	r3, #100	; 0x64
 80011b8:	2201      	movs	r2, #1
 80011ba:	4804      	ldr	r0, [pc, #16]	; (80011cc <__io_putchar+0x20>)
 80011bc:	f003 fdcf 	bl	8004d5e <HAL_UART_Transmit>
	return ch;
 80011c0:	687b      	ldr	r3, [r7, #4]
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	2000029c 	.word	0x2000029c

080011d0 <deg2rad>:

double deg2rad(double deg) {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	e9c7 0100 	strd	r0, r1, [r7]
	return (deg * pi / 180);
 80011da:	a30b      	add	r3, pc, #44	; (adr r3, 8001208 <deg2rad+0x38>)
 80011dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80011e4:	f7ff f978 	bl	80004d8 <__aeabi_dmul>
 80011e8:	4602      	mov	r2, r0
 80011ea:	460b      	mov	r3, r1
 80011ec:	4610      	mov	r0, r2
 80011ee:	4619      	mov	r1, r3
 80011f0:	f04f 0200 	mov.w	r2, #0
 80011f4:	4b06      	ldr	r3, [pc, #24]	; (8001210 <deg2rad+0x40>)
 80011f6:	f7ff fa99 	bl	800072c <__aeabi_ddiv>
 80011fa:	4602      	mov	r2, r0
 80011fc:	460b      	mov	r3, r1
}
 80011fe:	4610      	mov	r0, r2
 8001200:	4619      	mov	r1, r3
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	54442d18 	.word	0x54442d18
 800120c:	400921fb 	.word	0x400921fb
 8001210:	40668000 	.word	0x40668000
 8001214:	00000000 	.word	0x00000000

08001218 <calc_distance>:

double rad2deg(double rad) {
	return (rad * 180 / pi);
}

double calc_distance(double lat1, double lon1, double lat2, double lon2) {
 8001218:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800121c:	b090      	sub	sp, #64	; 0x40
 800121e:	af00      	add	r7, sp, #0
 8001220:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001224:	e9c7 2300 	strd	r2, r3, [r7]

	double radius = 6371.0;
 8001228:	a373      	add	r3, pc, #460	; (adr r3, 80013f8 <calc_distance+0x1e0>)
 800122a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

	if ((lat1 == lat2) && (lon1 == lon2)) {
 8001232:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001236:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800123a:	f7ff fbb5 	bl	80009a8 <__aeabi_dcmpeq>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d00d      	beq.n	8001260 <calc_distance+0x48>
 8001244:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001248:	e9d7 0100 	ldrd	r0, r1, [r7]
 800124c:	f7ff fbac 	bl	80009a8 <__aeabi_dcmpeq>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d004      	beq.n	8001260 <calc_distance+0x48>
		return 0;
 8001256:	f04f 0200 	mov.w	r2, #0
 800125a:	f04f 0300 	mov.w	r3, #0
 800125e:	e0c4      	b.n	80013ea <calc_distance+0x1d2>
	} else {

		double dLat = deg2rad((lat2 - lat1)) / 2.0;
 8001260:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001264:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001268:	f7fe ff7e 	bl	8000168 <__aeabi_dsub>
 800126c:	4602      	mov	r2, r0
 800126e:	460b      	mov	r3, r1
 8001270:	4610      	mov	r0, r2
 8001272:	4619      	mov	r1, r3
 8001274:	f7ff ffac 	bl	80011d0 <deg2rad>
 8001278:	f04f 0200 	mov.w	r2, #0
 800127c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001280:	f7ff fa54 	bl	800072c <__aeabi_ddiv>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		double dLon = deg2rad((lon2 - lon1)) / 2.0;
 800128c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001290:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001294:	f7fe ff68 	bl	8000168 <__aeabi_dsub>
 8001298:	4602      	mov	r2, r0
 800129a:	460b      	mov	r3, r1
 800129c:	4610      	mov	r0, r2
 800129e:	4619      	mov	r1, r3
 80012a0:	f7ff ff96 	bl	80011d0 <deg2rad>
 80012a4:	f04f 0200 	mov.w	r2, #0
 80012a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012ac:	f7ff fa3e 	bl	800072c <__aeabi_ddiv>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

		lat1 = deg2rad(lat1);
 80012b8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80012bc:	f7ff ff88 	bl	80011d0 <deg2rad>
 80012c0:	e9c7 0102 	strd	r0, r1, [r7, #8]
		lat2 = deg2rad(lat2);
 80012c4:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80012c8:	f7ff ff82 	bl	80011d0 <deg2rad>
 80012cc:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58

		double a = sin(dLat) * sin(dLat)
 80012d0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80012d4:	f00a fe2e 	bl	800bf34 <sin>
 80012d8:	4604      	mov	r4, r0
 80012da:	460d      	mov	r5, r1
 80012dc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80012e0:	f00a fe28 	bl	800bf34 <sin>
 80012e4:	4602      	mov	r2, r0
 80012e6:	460b      	mov	r3, r1
 80012e8:	4620      	mov	r0, r4
 80012ea:	4629      	mov	r1, r5
 80012ec:	f7ff f8f4 	bl	80004d8 <__aeabi_dmul>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	4690      	mov	r8, r2
 80012f6:	4699      	mov	r9, r3
				+ sin(dLon) * sin(dLon) * cos(lat1) * cos(lat2);
 80012f8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80012fc:	f00a fe1a 	bl	800bf34 <sin>
 8001300:	4604      	mov	r4, r0
 8001302:	460d      	mov	r5, r1
 8001304:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001308:	f00a fe14 	bl	800bf34 <sin>
 800130c:	4602      	mov	r2, r0
 800130e:	460b      	mov	r3, r1
 8001310:	4620      	mov	r0, r4
 8001312:	4629      	mov	r1, r5
 8001314:	f7ff f8e0 	bl	80004d8 <__aeabi_dmul>
 8001318:	4602      	mov	r2, r0
 800131a:	460b      	mov	r3, r1
 800131c:	4614      	mov	r4, r2
 800131e:	461d      	mov	r5, r3
 8001320:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001324:	f00a fdc0 	bl	800bea8 <cos>
 8001328:	4602      	mov	r2, r0
 800132a:	460b      	mov	r3, r1
 800132c:	4620      	mov	r0, r4
 800132e:	4629      	mov	r1, r5
 8001330:	f7ff f8d2 	bl	80004d8 <__aeabi_dmul>
 8001334:	4602      	mov	r2, r0
 8001336:	460b      	mov	r3, r1
 8001338:	4614      	mov	r4, r2
 800133a:	461d      	mov	r5, r3
 800133c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001340:	f00a fdb2 	bl	800bea8 <cos>
 8001344:	4602      	mov	r2, r0
 8001346:	460b      	mov	r3, r1
 8001348:	4620      	mov	r0, r4
 800134a:	4629      	mov	r1, r5
 800134c:	f7ff f8c4 	bl	80004d8 <__aeabi_dmul>
 8001350:	4602      	mov	r2, r0
 8001352:	460b      	mov	r3, r1
		double a = sin(dLat) * sin(dLat)
 8001354:	4640      	mov	r0, r8
 8001356:	4649      	mov	r1, r9
 8001358:	f7fe ff08 	bl	800016c <__adddf3>
 800135c:	4602      	mov	r2, r0
 800135e:	460b      	mov	r3, r1
 8001360:	e9c7 2308 	strd	r2, r3, [r7, #32]
		double c = 2 * atan2f(sqrtf(a), sqrtf(1 - a));
 8001364:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001368:	f7ff fbae 	bl	8000ac8 <__aeabi_d2f>
 800136c:	4603      	mov	r3, r0
 800136e:	4618      	mov	r0, r3
 8001370:	f00a fe28 	bl	800bfc4 <sqrtf>
 8001374:	4604      	mov	r4, r0
 8001376:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800137a:	f04f 0000 	mov.w	r0, #0
 800137e:	4920      	ldr	r1, [pc, #128]	; (8001400 <calc_distance+0x1e8>)
 8001380:	f7fe fef2 	bl	8000168 <__aeabi_dsub>
 8001384:	4602      	mov	r2, r0
 8001386:	460b      	mov	r3, r1
 8001388:	4610      	mov	r0, r2
 800138a:	4619      	mov	r1, r3
 800138c:	f7ff fb9c 	bl	8000ac8 <__aeabi_d2f>
 8001390:	4603      	mov	r3, r0
 8001392:	4618      	mov	r0, r3
 8001394:	f00a fe16 	bl	800bfc4 <sqrtf>
 8001398:	4603      	mov	r3, r0
 800139a:	4619      	mov	r1, r3
 800139c:	4620      	mov	r0, r4
 800139e:	f00a fe0f 	bl	800bfc0 <atan2f>
 80013a2:	4603      	mov	r3, r0
 80013a4:	4619      	mov	r1, r3
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff fbe4 	bl	8000b74 <__addsf3>
 80013ac:	4603      	mov	r3, r0
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff f83a 	bl	8000428 <__aeabi_f2d>
 80013b4:	4602      	mov	r2, r0
 80013b6:	460b      	mov	r3, r1
 80013b8:	e9c7 2306 	strd	r2, r3, [r7, #24]
		double dDistance = radius * c;
 80013bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80013c0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80013c4:	f7ff f888 	bl	80004d8 <__aeabi_dmul>
 80013c8:	4602      	mov	r2, r0
 80013ca:	460b      	mov	r3, r1
 80013cc:	e9c7 2304 	strd	r2, r3, [r7, #16]

		dDistance *= 1000.0;
 80013d0:	f04f 0200 	mov.w	r2, #0
 80013d4:	4b0b      	ldr	r3, [pc, #44]	; (8001404 <calc_distance+0x1ec>)
 80013d6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80013da:	f7ff f87d 	bl	80004d8 <__aeabi_dmul>
 80013de:	4602      	mov	r2, r0
 80013e0:	460b      	mov	r3, r1
 80013e2:	e9c7 2304 	strd	r2, r3, [r7, #16]

		return dDistance;
 80013e6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
	 dist = dist * 1.609344;
	 return (dist);
	 }
	 */

}
 80013ea:	4610      	mov	r0, r2
 80013ec:	4619      	mov	r1, r3
 80013ee:	3740      	adds	r7, #64	; 0x40
 80013f0:	46bd      	mov	sp, r7
 80013f2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80013f6:	bf00      	nop
 80013f8:	00000000 	.word	0x00000000
 80013fc:	40b8e300 	.word	0x40b8e300
 8001400:	3ff00000 	.word	0x3ff00000
 8001404:	408f4000 	.word	0x408f4000

08001408 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001408:	b5b0      	push	{r4, r5, r7, lr}
 800140a:	f5ad 6dbd 	sub.w	sp, sp, #1512	; 0x5e8
 800140e:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	static double f_latitude1 = 0.0;
	static double f_longitude1 = 0.0;
	double f_latitude2 = 0.0;
 8001410:	f04f 0200 	mov.w	r2, #0
 8001414:	f04f 0300 	mov.w	r3, #0
 8001418:	f507 61ba 	add.w	r1, r7, #1488	; 0x5d0
 800141c:	e9c1 2300 	strd	r2, r3, [r1]
	double f_longitude2 = 0.0;
 8001420:	f04f 0200 	mov.w	r2, #0
 8001424:	f04f 0300 	mov.w	r3, #0
 8001428:	f507 61b9 	add.w	r1, r7, #1480	; 0x5c8
 800142c:	e9c1 2300 	strd	r2, r3, [r1]

	double distance = 0.0;
 8001430:	f04f 0200 	mov.w	r2, #0
 8001434:	f04f 0300 	mov.w	r3, #0
 8001438:	f507 61ab 	add.w	r1, r7, #1368	; 0x558
 800143c:	e9c1 2300 	strd	r2, r3, [r1]
	double total_distance = 0.0;
 8001440:	f04f 0200 	mov.w	r2, #0
 8001444:	f04f 0300 	mov.w	r3, #0
 8001448:	f507 61b8 	add.w	r1, r7, #1472	; 0x5c0
 800144c:	e9c1 2300 	strd	r2, r3, [r1]
	static double pre_time = 0.0;
	double f_seconds = 0.0;
 8001450:	f04f 0200 	mov.w	r2, #0
 8001454:	f04f 0300 	mov.w	r3, #0
 8001458:	f507 61aa 	add.w	r1, r7, #1360	; 0x550
 800145c:	e9c1 2300 	strd	r2, r3, [r1]
	double time_interval = 0.0;
 8001460:	f04f 0200 	mov.w	r2, #0
 8001464:	f04f 0300 	mov.w	r3, #0
 8001468:	f507 61b7 	add.w	r1, r7, #1464	; 0x5b8
 800146c:	e9c1 2300 	strd	r2, r3, [r1]
	double speed = 0.0;
 8001470:	f04f 0200 	mov.w	r2, #0
 8001474:	f04f 0300 	mov.w	r3, #0
 8001478:	f507 61b6 	add.w	r1, r7, #1456	; 0x5b0
 800147c:	e9c1 2300 	strd	r2, r3, [r1]
	double ground_speed = 0.0;
 8001480:	f04f 0200 	mov.w	r2, #0
 8001484:	f04f 0300 	mov.w	r3, #0
 8001488:	f507 61a9 	add.w	r1, r7, #1352	; 0x548
 800148c:	e9c1 2300 	strd	r2, r3, [r1]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001490:	f001 fb2a 	bl	8002ae8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001494:	f000 fd6c 	bl	8001f70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001498:	f000 feea 	bl	8002270 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800149c:	f000 fe94 	bl	80021c8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80014a0:	f000 febc 	bl	800221c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80014a4:	f000 fdbc 	bl	8002020 <MX_SPI1_Init>
  MX_TIM1_Init();
 80014a8:	f000 fdf0 	bl	800208c <MX_TIM1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80014ac:	f000 fda4 	bl	8001ff8 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
	u8g2_Setup_ssd1306_128x64_noname_f(&u8g2, U8G2_R0, u8x8_byte_stm32_hw_spi,
 80014b0:	4ba3      	ldr	r3, [pc, #652]	; (8001740 <main+0x338>)
 80014b2:	4aa4      	ldr	r2, [pc, #656]	; (8001744 <main+0x33c>)
 80014b4:	49a4      	ldr	r1, [pc, #656]	; (8001748 <main+0x340>)
 80014b6:	48a5      	ldr	r0, [pc, #660]	; (800174c <main+0x344>)
 80014b8:	f004 fb02 	bl	8005ac0 <u8g2_Setup_ssd1306_128x64_noname_f>
			u8x8_stm32_gpio_and_delay);

	u8g2_InitDisplay(&u8g2);
 80014bc:	48a3      	ldr	r0, [pc, #652]	; (800174c <main+0x344>)
 80014be:	f005 ff5a 	bl	8007376 <u8x8_InitDisplay>
	u8g2_SetPowerSave(&u8g2, 0);
 80014c2:	2100      	movs	r1, #0
 80014c4:	48a1      	ldr	r0, [pc, #644]	; (800174c <main+0x344>)
 80014c6:	f005 ff65 	bl	8007394 <u8x8_SetPowerSave>

	//u8g2_SetFont(&u8g2, u8g2_font_5x7_tr);
	//u8g2_SetFont(&u8g2, u8g2_font_6x13_mr);
	u8g2_SetFont(&u8g2, u8g2_font_inb16_mr);
 80014ca:	49a1      	ldr	r1, [pc, #644]	; (8001750 <main+0x348>)
 80014cc:	489f      	ldr	r0, [pc, #636]	; (800174c <main+0x344>)
 80014ce:	f005 f8a1 	bl	8006614 <u8g2_SetFont>

	u8g2_SetDisplayRotation(&u8g2, U8G2_R2);
 80014d2:	49a0      	ldr	r1, [pc, #640]	; (8001754 <main+0x34c>)
 80014d4:	489d      	ldr	r0, [pc, #628]	; (800174c <main+0x344>)
 80014d6:	f005 fb0f 	bl	8006af8 <u8g2_SetDisplayRotation>

	/* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
	__HAL_UART_ENABLE_IT(&huart2, UART_IT_ERR);
 80014da:	4b9f      	ldr	r3, [pc, #636]	; (8001758 <main+0x350>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	695a      	ldr	r2, [r3, #20]
 80014e0:	4b9d      	ldr	r3, [pc, #628]	; (8001758 <main+0x350>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f042 0201 	orr.w	r2, r2, #1
 80014e8:	615a      	str	r2, [r3, #20]
	/* Enable the UART Data Register not empty Interrupt */
	__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 80014ea:	4b9b      	ldr	r3, [pc, #620]	; (8001758 <main+0x350>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	68da      	ldr	r2, [r3, #12]
 80014f0:	4b99      	ldr	r3, [pc, #612]	; (8001758 <main+0x350>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f042 0220 	orr.w	r2, r2, #32
 80014f8:	60da      	str	r2, [r3, #12]
	rxBufferInit(&uart_rx);
 80014fa:	4898      	ldr	r0, [pc, #608]	; (800175c <main+0x354>)
 80014fc:	f001 fa28 	bl	8002950 <rxBufferInit>

	HAL_TIM_Base_Start_IT(&htim1);
 8001500:	4897      	ldr	r0, [pc, #604]	; (8001760 <main+0x358>)
 8001502:	f002 fda1 	bl	8004048 <HAL_TIM_Base_Start_IT>
	printf("this is MAIN code, not WHILE\r\n");
 8001506:	4897      	ldr	r0, [pc, #604]	; (8001764 <main+0x35c>)
 8001508:	f006 ff08 	bl	800831c <puts>

	sprintf(str_buff, "Hello :)");
 800150c:	f207 43dc 	addw	r3, r7, #1244	; 0x4dc
 8001510:	4995      	ldr	r1, [pc, #596]	; (8001768 <main+0x360>)
 8001512:	4618      	mov	r0, r3
 8001514:	f006 ff0e 	bl	8008334 <siprintf>
	sprintf(str_buff2, "Push the button,");
 8001518:	f207 43bc 	addw	r3, r7, #1212	; 0x4bc
 800151c:	4993      	ldr	r1, [pc, #588]	; (800176c <main+0x364>)
 800151e:	4618      	mov	r0, r3
 8001520:	f006 ff08 	bl	8008334 <siprintf>
	//sprintf(str_buff3, "See your speed.");
	u8g2_FirstPage(&u8g2);
 8001524:	4889      	ldr	r0, [pc, #548]	; (800174c <main+0x344>)
 8001526:	f004 fa78 	bl	8005a1a <u8g2_FirstPage>
	do {

		u8g2_DrawStr(&u8g2, 2, 15, str_buff);
 800152a:	f207 43dc 	addw	r3, r7, #1244	; 0x4dc
 800152e:	220f      	movs	r2, #15
 8001530:	2102      	movs	r1, #2
 8001532:	4886      	ldr	r0, [pc, #536]	; (800174c <main+0x344>)
 8001534:	f004 ffd0 	bl	80064d8 <u8g2_DrawStr>
		u8g2_DrawStr(&u8g2, 2, 35, str_buff2);
 8001538:	f207 43bc 	addw	r3, r7, #1212	; 0x4bc
 800153c:	2223      	movs	r2, #35	; 0x23
 800153e:	2102      	movs	r1, #2
 8001540:	4882      	ldr	r0, [pc, #520]	; (800174c <main+0x344>)
 8001542:	f004 ffc9 	bl	80064d8 <u8g2_DrawStr>
		//u8g2_DrawStr(&u8g2, 2, 45, str_buff3);

	} while (u8g2_NextPage(&u8g2));
 8001546:	4881      	ldr	r0, [pc, #516]	; (800174c <main+0x344>)
 8001548:	f004 fa7b 	bl	8005a42 <u8g2_NextPage>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d1eb      	bne.n	800152a <main+0x122>

	memset(str_buff, 0, sizeof(str_buff));
 8001552:	f207 43dc 	addw	r3, r7, #1244	; 0x4dc
 8001556:	2220      	movs	r2, #32
 8001558:	2100      	movs	r1, #0
 800155a:	4618      	mov	r0, r3
 800155c:	f005 ffe2 	bl	8007524 <memset>
	memset(str_buff2, 0, sizeof(str_buff2));
 8001560:	f207 43bc 	addw	r3, r7, #1212	; 0x4bc
 8001564:	2220      	movs	r2, #32
 8001566:	2100      	movs	r1, #0
 8001568:	4618      	mov	r0, r3
 800156a:	f005 ffdb 	bl	8007524 <memset>
	memset(str_buff3, 0, sizeof(str_buff3));
 800156e:	f207 439c 	addw	r3, r7, #1180	; 0x49c
 8001572:	2220      	movs	r2, #32
 8001574:	2100      	movs	r1, #0
 8001576:	4618      	mov	r0, r3
 8001578:	f005 ffd4 	bl	8007524 <memset>

	while (1) {

//		if (btnFlag == 1) {

		sprintf(str_buff, "%.2f km/h", speed);
 800157c:	f207 40dc 	addw	r0, r7, #1244	; 0x4dc
 8001580:	f507 63b6 	add.w	r3, r7, #1456	; 0x5b0
 8001584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001588:	4979      	ldr	r1, [pc, #484]	; (8001770 <main+0x368>)
 800158a:	f006 fed3 	bl	8008334 <siprintf>
		sprintf(str_buff2, "%d m", (int) total_distance);
 800158e:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 8001592:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001596:	f7ff fa4f 	bl	8000a38 <__aeabi_d2iz>
 800159a:	4602      	mov	r2, r0
 800159c:	f207 43bc 	addw	r3, r7, #1212	; 0x4bc
 80015a0:	4974      	ldr	r1, [pc, #464]	; (8001774 <main+0x36c>)
 80015a2:	4618      	mov	r0, r3
 80015a4:	f006 fec6 	bl	8008334 <siprintf>
		//sprintf(str_buff3, "Time interval: %.2f s", time_interval);
		//sprintf(str_buff4, "Gnd Speed: %.3f km/h", ground_speed);
		//	sprintf(str_buff, "Latitude: %.6f", f_latitude2);
		//	sprintf(str_buff3, "Longitude: %.6f", f_longitude2);

		u8g2_FirstPage(&u8g2);
 80015a8:	4868      	ldr	r0, [pc, #416]	; (800174c <main+0x344>)
 80015aa:	f004 fa36 	bl	8005a1a <u8g2_FirstPage>
		do {

			u8g2_DrawStr(&u8g2, 5, 21, str_buff);
 80015ae:	f207 43dc 	addw	r3, r7, #1244	; 0x4dc
 80015b2:	2215      	movs	r2, #21
 80015b4:	2105      	movs	r1, #5
 80015b6:	4865      	ldr	r0, [pc, #404]	; (800174c <main+0x344>)
 80015b8:	f004 ff8e 	bl	80064d8 <u8g2_DrawStr>
			u8g2_DrawStr(&u8g2, 20, 42, str_buff2);
 80015bc:	f207 43bc 	addw	r3, r7, #1212	; 0x4bc
 80015c0:	222a      	movs	r2, #42	; 0x2a
 80015c2:	2114      	movs	r1, #20
 80015c4:	4861      	ldr	r0, [pc, #388]	; (800174c <main+0x344>)
 80015c6:	f004 ff87 	bl	80064d8 <u8g2_DrawStr>
			//	u8g2_DrawStr(&u8g2, 2, 45, str_buff3);
			//	u8g2_DrawStr(&u8g2, 2, 60, str_buff4);

		} while (u8g2_NextPage(&u8g2));
 80015ca:	4860      	ldr	r0, [pc, #384]	; (800174c <main+0x344>)
 80015cc:	f004 fa39 	bl	8005a42 <u8g2_NextPage>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d1eb      	bne.n	80015ae <main+0x1a6>

		memset(str_buff, 0, sizeof(str_buff));
 80015d6:	f207 43dc 	addw	r3, r7, #1244	; 0x4dc
 80015da:	2220      	movs	r2, #32
 80015dc:	2100      	movs	r1, #0
 80015de:	4618      	mov	r0, r3
 80015e0:	f005 ffa0 	bl	8007524 <memset>
		memset(str_buff2, 0, sizeof(str_buff2));
 80015e4:	f207 43bc 	addw	r3, r7, #1212	; 0x4bc
 80015e8:	2220      	movs	r2, #32
 80015ea:	2100      	movs	r1, #0
 80015ec:	4618      	mov	r0, r3
 80015ee:	f005 ff99 	bl	8007524 <memset>
		memset(str_buff3, 0, sizeof(str_buff3));
 80015f2:	f207 439c 	addw	r3, r7, #1180	; 0x49c
 80015f6:	2220      	movs	r2, #32
 80015f8:	2100      	movs	r1, #0
 80015fa:	4618      	mov	r0, r3
 80015fc:	f005 ff92 	bl	8007524 <memset>
		memset(str_buff4, 0, sizeof(str_buff4));
 8001600:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 8001604:	2220      	movs	r2, #32
 8001606:	2100      	movs	r1, #0
 8001608:	4618      	mov	r0, r3
 800160a:	f005 ff8b 	bl	8007524 <memset>

		int i = 0;
 800160e:	2300      	movs	r3, #0
 8001610:	f8c7 35ac 	str.w	r3, [r7, #1452]	; 0x5ac
		uint32_t tick = HAL_GetTick();
 8001614:	f001 fac0 	bl	8002b98 <HAL_GetTick>
 8001618:	f8c7 0544 	str.w	r0, [r7, #1348]	; 0x544
		while ((HAL_GetTick() - tick) < 1000) {
 800161c:	e01d      	b.n	800165a <main+0x252>
			if (uart_available(&uart_rx)) {
 800161e:	484f      	ldr	r0, [pc, #316]	; (800175c <main+0x354>)
 8001620:	f001 f9fd 	bl	8002a1e <uart_available>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d017      	beq.n	800165a <main+0x252>
				int ch = pop(&uart_rx);
 800162a:	484c      	ldr	r0, [pc, #304]	; (800175c <main+0x354>)
 800162c:	f001 f9cd 	bl	80029ca <pop>
 8001630:	4603      	mov	r3, r0
 8001632:	f8c7 34fc 	str.w	r3, [r7, #1276]	; 0x4fc
				if (ch != -1) {
 8001636:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	; 0x4fc
 800163a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800163e:	d00c      	beq.n	800165a <main+0x252>
					buff[i++] = ch;
 8001640:	f8d7 35ac 	ldr.w	r3, [r7, #1452]	; 0x5ac
 8001644:	1c5a      	adds	r2, r3, #1
 8001646:	f8c7 25ac 	str.w	r2, [r7, #1452]	; 0x5ac
 800164a:	f8d7 24fc 	ldr.w	r2, [r7, #1276]	; 0x4fc
 800164e:	b2d1      	uxtb	r1, r2
 8001650:	f507 62bb 	add.w	r2, r7, #1496	; 0x5d8
 8001654:	f2a2 525c 	subw	r2, r2, #1372	; 0x55c
 8001658:	54d1      	strb	r1, [r2, r3]
		while ((HAL_GetTick() - tick) < 1000) {
 800165a:	f001 fa9d 	bl	8002b98 <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800166a:	d3d8      	bcc.n	800161e <main+0x216>
		}
#ifndef OLED
	HAL_UART_Transmit(&huart1, (uint8_t*) buff, strlen(buff), 500);
#endif

		int k = 0;
 800166c:	2300      	movs	r3, #0
 800166e:	f8c7 35a8 	str.w	r3, [r7, #1448]	; 0x5a8
		char *ptr;
		ptr = buff;
 8001672:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001676:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4

		while (((*ptr) != 'R') && (k < strlen(buff))) {
 800167a:	e009      	b.n	8001690 <main+0x288>
			k++;
 800167c:	f8d7 35a8 	ldr.w	r3, [r7, #1448]	; 0x5a8
 8001680:	3301      	adds	r3, #1
 8001682:	f8c7 35a8 	str.w	r3, [r7, #1448]	; 0x5a8
			ptr++;
 8001686:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 800168a:	3301      	adds	r3, #1
 800168c:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
		while (((*ptr) != 'R') && (k < strlen(buff))) {
 8001690:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	2b52      	cmp	r3, #82	; 0x52
 8001698:	d009      	beq.n	80016ae <main+0x2a6>
 800169a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800169e:	4618      	mov	r0, r3
 80016a0:	f7fe fd56 	bl	8000150 <strlen>
 80016a4:	4602      	mov	r2, r0
 80016a6:	f8d7 35a8 	ldr.w	r3, [r7, #1448]	; 0x5a8
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d8e6      	bhi.n	800167c <main+0x274>
		}

		if ((*ptr) == 'R') {
 80016ae:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	2b52      	cmp	r3, #82	; 0x52
 80016b6:	f47f af61 	bne.w	800157c <main+0x174>

			if ((*(ptr + 1)) == 'M' && (*(ptr + 2)) == 'C') {
 80016ba:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 80016be:	3301      	adds	r3, #1
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	2b4d      	cmp	r3, #77	; 0x4d
 80016c4:	f040 83fb 	bne.w	8001ebe <main+0xab6>
 80016c8:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 80016cc:	3302      	adds	r3, #2
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2b43      	cmp	r3, #67	; 0x43
 80016d2:	f040 83f4 	bne.w	8001ebe <main+0xab6>

				char *ptr2 = type;
 80016d6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80016da:	f8c7 35a0 	str.w	r3, [r7, #1440]	; 0x5a0
				int n2 = 0;
 80016de:	2300      	movs	r3, #0
 80016e0:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
				while ((*ptr) != ',') {
 80016e4:	e014      	b.n	8001710 <main+0x308>
 80016e6:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 80016ea:	781a      	ldrb	r2, [r3, #0]
					memcpy(ptr2, ptr, 1);
 80016ec:	f8d7 35a0 	ldr.w	r3, [r7, #1440]	; 0x5a0
 80016f0:	701a      	strb	r2, [r3, #0]
					ptr2++;
 80016f2:	f8d7 35a0 	ldr.w	r3, [r7, #1440]	; 0x5a0
 80016f6:	3301      	adds	r3, #1
 80016f8:	f8c7 35a0 	str.w	r3, [r7, #1440]	; 0x5a0
					ptr++;
 80016fc:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 8001700:	3301      	adds	r3, #1
 8001702:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
					n2++;
 8001706:	f8d7 359c 	ldr.w	r3, [r7, #1436]	; 0x59c
 800170a:	3301      	adds	r3, #1
 800170c:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
				while ((*ptr) != ',') {
 8001710:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	2b2c      	cmp	r3, #44	; 0x2c
 8001718:	d1e5      	bne.n	80016e6 <main+0x2de>
				}

				memcpy(ptr2, "\0", 1);
 800171a:	2201      	movs	r2, #1
 800171c:	4916      	ldr	r1, [pc, #88]	; (8001778 <main+0x370>)
 800171e:	f8d7 05a0 	ldr.w	r0, [r7, #1440]	; 0x5a0
 8001722:	f005 fef1 	bl	8007508 <memcpy>
			HAL_UART_Transmit(&huart1, (uint8_t*) type, n2 + 1, 500);

			HAL_UART_Transmit(&huart1, (uint8_t*) "\r", 1, 500);
			HAL_UART_Transmit(&huart1, (uint8_t*) "\n", 1, 500);
#endif
				ptr++;
 8001726:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 800172a:	3301      	adds	r3, #1
 800172c:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4

				char *ptr3 = time;
 8001730:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001734:	f8c7 3598 	str.w	r3, [r7, #1432]	; 0x598

				int n3 = 0;
 8001738:	2300      	movs	r3, #0
 800173a:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
				while ((*ptr) != ',') {
 800173e:	e032      	b.n	80017a6 <main+0x39e>
 8001740:	08002795 	.word	0x08002795
 8001744:	0800288d 	.word	0x0800288d
 8001748:	0800dda8 	.word	0x0800dda8
 800174c:	20000330 	.word	0x20000330
 8001750:	0800d3d4 	.word	0x0800d3d4
 8001754:	0800ddb4 	.word	0x0800ddb4
 8001758:	200002e4 	.word	0x200002e4
 800175c:	200003e4 	.word	0x200003e4
 8001760:	20000254 	.word	0x20000254
 8001764:	0800d348 	.word	0x0800d348
 8001768:	0800d368 	.word	0x0800d368
 800176c:	0800d374 	.word	0x0800d374
 8001770:	0800d388 	.word	0x0800d388
 8001774:	0800d394 	.word	0x0800d394
 8001778:	0800d39c 	.word	0x0800d39c
 800177c:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 8001780:	781a      	ldrb	r2, [r3, #0]
					memcpy(ptr3, ptr, 1);
 8001782:	f8d7 3598 	ldr.w	r3, [r7, #1432]	; 0x598
 8001786:	701a      	strb	r2, [r3, #0]

					ptr3++;
 8001788:	f8d7 3598 	ldr.w	r3, [r7, #1432]	; 0x598
 800178c:	3301      	adds	r3, #1
 800178e:	f8c7 3598 	str.w	r3, [r7, #1432]	; 0x598
					ptr++;
 8001792:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 8001796:	3301      	adds	r3, #1
 8001798:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
					n3++;
 800179c:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 80017a0:	3301      	adds	r3, #1
 80017a2:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
				while ((*ptr) != ',') {
 80017a6:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	2b2c      	cmp	r3, #44	; 0x2c
 80017ae:	d1e5      	bne.n	800177c <main+0x374>
				}

				memcpy(ptr3, "\0", 1);
 80017b0:	2201      	movs	r2, #1
 80017b2:	49c0      	ldr	r1, [pc, #768]	; (8001ab4 <main+0x6ac>)
 80017b4:	f8d7 0598 	ldr.w	r0, [r7, #1432]	; 0x598
 80017b8:	f005 fea6 	bl	8007508 <memcpy>

				if (n3 == 9) {
 80017bc:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 80017c0:	2b09      	cmp	r3, #9
 80017c2:	f040 80ae 	bne.w	8001922 <main+0x51a>
					char hour[5] = { 0, };
 80017c6:	f507 63bb 	add.w	r3, r7, #1496	; 0x5d8
 80017ca:	f5a3 63b8 	sub.w	r3, r3, #1472	; 0x5c0
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	2200      	movs	r2, #0
 80017d4:	711a      	strb	r2, [r3, #4]
					char minute[5] = { 0, };
 80017d6:	f507 63bb 	add.w	r3, r7, #1496	; 0x5d8
 80017da:	f5a3 63b9 	sub.w	r3, r3, #1480	; 0x5c8
 80017de:	2200      	movs	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	2200      	movs	r2, #0
 80017e4:	711a      	strb	r2, [r3, #4]
					char second[10] = { 0, };
 80017e6:	f507 63bb 	add.w	r3, r7, #1496	; 0x5d8
 80017ea:	f2a3 53d4 	subw	r3, r3, #1492	; 0x5d4
 80017ee:	2200      	movs	r2, #0
 80017f0:	601a      	str	r2, [r3, #0]
 80017f2:	3304      	adds	r3, #4
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	809a      	strh	r2, [r3, #4]
 80017fa:	f507 63bb 	add.w	r3, r7, #1496	; 0x5d8
 80017fe:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8001802:	881a      	ldrh	r2, [r3, #0]

					memcpy(hour, time, 2);
 8001804:	f507 63bb 	add.w	r3, r7, #1496	; 0x5d8
 8001808:	f5a3 63b8 	sub.w	r3, r3, #1472	; 0x5c0
 800180c:	801a      	strh	r2, [r3, #0]
					memcpy(&hour[2], "\0", 1);
 800180e:	f507 63bb 	add.w	r3, r7, #1496	; 0x5d8
 8001812:	f5a3 63b8 	sub.w	r3, r3, #1472	; 0x5c0
 8001816:	2200      	movs	r2, #0
 8001818:	709a      	strb	r2, [r3, #2]
 800181a:	f507 63bb 	add.w	r3, r7, #1496	; 0x5d8
 800181e:	f2a3 537c 	subw	r3, r3, #1404	; 0x57c
 8001822:	885a      	ldrh	r2, [r3, #2]

					memcpy(minute, &time[2], 2);
 8001824:	f507 63bb 	add.w	r3, r7, #1496	; 0x5d8
 8001828:	f5a3 63b9 	sub.w	r3, r3, #1480	; 0x5c8
 800182c:	801a      	strh	r2, [r3, #0]
					memcpy(&minute[2], "\0", 1);
 800182e:	f507 63bb 	add.w	r3, r7, #1496	; 0x5d8
 8001832:	f5a3 63b9 	sub.w	r3, r3, #1480	; 0x5c8
 8001836:	2200      	movs	r2, #0
 8001838:	709a      	strb	r2, [r3, #2]

					memcpy(second, &time[4], 5);
 800183a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800183e:	1d19      	adds	r1, r3, #4
 8001840:	1d3b      	adds	r3, r7, #4
 8001842:	2205      	movs	r2, #5
 8001844:	4618      	mov	r0, r3
 8001846:	f005 fe5f 	bl	8007508 <memcpy>
					memcpy(&second[5], "\0", 1);
 800184a:	f507 63bb 	add.w	r3, r7, #1496	; 0x5d8
 800184e:	f2a3 53d4 	subw	r3, r3, #1492	; 0x5d4
 8001852:	2200      	movs	r2, #0
 8001854:	715a      	strb	r2, [r3, #5]

					f_seconds = (atof(hour) * 60.0 * 60.0)
 8001856:	f107 0318 	add.w	r3, r7, #24
 800185a:	4618      	mov	r0, r3
 800185c:	f005 fe27 	bl	80074ae <atof>
 8001860:	f04f 0200 	mov.w	r2, #0
 8001864:	4b94      	ldr	r3, [pc, #592]	; (8001ab8 <main+0x6b0>)
 8001866:	f7fe fe37 	bl	80004d8 <__aeabi_dmul>
 800186a:	4602      	mov	r2, r0
 800186c:	460b      	mov	r3, r1
 800186e:	4610      	mov	r0, r2
 8001870:	4619      	mov	r1, r3
 8001872:	f04f 0200 	mov.w	r2, #0
 8001876:	4b90      	ldr	r3, [pc, #576]	; (8001ab8 <main+0x6b0>)
 8001878:	f7fe fe2e 	bl	80004d8 <__aeabi_dmul>
 800187c:	4602      	mov	r2, r0
 800187e:	460b      	mov	r3, r1
 8001880:	4614      	mov	r4, r2
 8001882:	461d      	mov	r5, r3
							+ (atof(minute) * 60.0) + (atof(second));
 8001884:	f107 0310 	add.w	r3, r7, #16
 8001888:	4618      	mov	r0, r3
 800188a:	f005 fe10 	bl	80074ae <atof>
 800188e:	f04f 0200 	mov.w	r2, #0
 8001892:	4b89      	ldr	r3, [pc, #548]	; (8001ab8 <main+0x6b0>)
 8001894:	f7fe fe20 	bl	80004d8 <__aeabi_dmul>
 8001898:	4602      	mov	r2, r0
 800189a:	460b      	mov	r3, r1
 800189c:	4620      	mov	r0, r4
 800189e:	4629      	mov	r1, r5
 80018a0:	f7fe fc64 	bl	800016c <__adddf3>
 80018a4:	4602      	mov	r2, r0
 80018a6:	460b      	mov	r3, r1
 80018a8:	4614      	mov	r4, r2
 80018aa:	461d      	mov	r5, r3
 80018ac:	1d3b      	adds	r3, r7, #4
 80018ae:	4618      	mov	r0, r3
 80018b0:	f005 fdfd 	bl	80074ae <atof>
 80018b4:	4602      	mov	r2, r0
 80018b6:	460b      	mov	r3, r1
					f_seconds = (atof(hour) * 60.0 * 60.0)
 80018b8:	4620      	mov	r0, r4
 80018ba:	4629      	mov	r1, r5
 80018bc:	f7fe fc56 	bl	800016c <__adddf3>
 80018c0:	4602      	mov	r2, r0
 80018c2:	460b      	mov	r3, r1
 80018c4:	f507 61aa 	add.w	r1, r7, #1360	; 0x550
 80018c8:	e9c1 2300 	strd	r2, r3, [r1]
				printf("pre_time : %.2f\r\n", pre_time);

				printf("f_seconds : %.2f\r\n", f_seconds);
#endif

					if (pre_time == 0) {
 80018cc:	4b7b      	ldr	r3, [pc, #492]	; (8001abc <main+0x6b4>)
 80018ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018d2:	f04f 0200 	mov.w	r2, #0
 80018d6:	f04f 0300 	mov.w	r3, #0
 80018da:	f7ff f865 	bl	80009a8 <__aeabi_dcmpeq>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d008      	beq.n	80018f6 <main+0x4ee>
						time_interval = 0.0;
 80018e4:	f04f 0200 	mov.w	r2, #0
 80018e8:	f04f 0300 	mov.w	r3, #0
 80018ec:	f507 61b7 	add.w	r1, r7, #1464	; 0x5b8
 80018f0:	e9c1 2300 	strd	r2, r3, [r1]
 80018f4:	e00e      	b.n	8001914 <main+0x50c>
					} else {
						time_interval = f_seconds - pre_time;
 80018f6:	4b71      	ldr	r3, [pc, #452]	; (8001abc <main+0x6b4>)
 80018f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018fc:	f507 61aa 	add.w	r1, r7, #1360	; 0x550
 8001900:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001904:	f7fe fc30 	bl	8000168 <__aeabi_dsub>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	f507 61b7 	add.w	r1, r7, #1464	; 0x5b8
 8001910:	e9c1 2300 	strd	r2, r3, [r1]

#ifndef OLED
				printf("time_interval : %.2f\r\n", time_interval);
#endif

					pre_time = f_seconds;
 8001914:	4969      	ldr	r1, [pc, #420]	; (8001abc <main+0x6b4>)
 8001916:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 800191a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800191e:	e9c1 2300 	strd	r2, r3, [r1]

			HAL_UART_Transmit(&huart1, (uint8_t*) "\r", 1, 500);
			HAL_UART_Transmit(&huart1, (uint8_t*) "\n", 1, 500);
#endif

				ptr++;
 8001922:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 8001926:	3301      	adds	r3, #1
 8001928:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4

				char *ptr4 = valid;
 800192c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001930:	f8c7 3590 	str.w	r3, [r7, #1424]	; 0x590

				int n4 = 0;
 8001934:	2300      	movs	r3, #0
 8001936:	f8c7 358c 	str.w	r3, [r7, #1420]	; 0x58c
				while ((*ptr) != ',') {
 800193a:	e014      	b.n	8001966 <main+0x55e>
 800193c:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 8001940:	781a      	ldrb	r2, [r3, #0]
					memcpy(ptr4, ptr, 1);
 8001942:	f8d7 3590 	ldr.w	r3, [r7, #1424]	; 0x590
 8001946:	701a      	strb	r2, [r3, #0]
					ptr4++;
 8001948:	f8d7 3590 	ldr.w	r3, [r7, #1424]	; 0x590
 800194c:	3301      	adds	r3, #1
 800194e:	f8c7 3590 	str.w	r3, [r7, #1424]	; 0x590
					ptr++;
 8001952:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 8001956:	3301      	adds	r3, #1
 8001958:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
					n4++;
 800195c:	f8d7 358c 	ldr.w	r3, [r7, #1420]	; 0x58c
 8001960:	3301      	adds	r3, #1
 8001962:	f8c7 358c 	str.w	r3, [r7, #1420]	; 0x58c
				while ((*ptr) != ',') {
 8001966:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	2b2c      	cmp	r3, #44	; 0x2c
 800196e:	d1e5      	bne.n	800193c <main+0x534>
				}

				memcpy(ptr4, "\0", 1);
 8001970:	2201      	movs	r2, #1
 8001972:	4950      	ldr	r1, [pc, #320]	; (8001ab4 <main+0x6ac>)
 8001974:	f8d7 0590 	ldr.w	r0, [r7, #1424]	; 0x590
 8001978:	f005 fdc6 	bl	8007508 <memcpy>
			HAL_UART_Transmit(&huart1, (uint8_t*) valid, n4 + 1, 500);

			printf("\r\n");
#endif

				ptr++;
 800197c:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 8001980:	3301      	adds	r3, #1
 8001982:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4

				char *ptr5 = latitude;
 8001986:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800198a:	f8c7 3588 	str.w	r3, [r7, #1416]	; 0x588

				int n5 = 0;
 800198e:	2300      	movs	r3, #0
 8001990:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
				while ((*ptr) != ',') {
 8001994:	e014      	b.n	80019c0 <main+0x5b8>
 8001996:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 800199a:	781a      	ldrb	r2, [r3, #0]
					memcpy(ptr5, ptr, 1);
 800199c:	f8d7 3588 	ldr.w	r3, [r7, #1416]	; 0x588
 80019a0:	701a      	strb	r2, [r3, #0]

					ptr5++;
 80019a2:	f8d7 3588 	ldr.w	r3, [r7, #1416]	; 0x588
 80019a6:	3301      	adds	r3, #1
 80019a8:	f8c7 3588 	str.w	r3, [r7, #1416]	; 0x588
					ptr++;
 80019ac:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 80019b0:	3301      	adds	r3, #1
 80019b2:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
					n5++;
 80019b6:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 80019ba:	3301      	adds	r3, #1
 80019bc:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
				while ((*ptr) != ',') {
 80019c0:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	2b2c      	cmp	r3, #44	; 0x2c
 80019c8:	d1e5      	bne.n	8001996 <main+0x58e>
				}

				memcpy(ptr5, "\0", 1);
 80019ca:	2201      	movs	r2, #1
 80019cc:	4939      	ldr	r1, [pc, #228]	; (8001ab4 <main+0x6ac>)
 80019ce:	f8d7 0588 	ldr.w	r0, [r7, #1416]	; 0x588
 80019d2:	f005 fd99 	bl	8007508 <memcpy>

				if (n5 == 10) {
 80019d6:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 80019da:	2b0a      	cmp	r3, #10
 80019dc:	d15c      	bne.n	8001a98 <main+0x690>
					double f_latitude = atof(latitude);
 80019de:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80019e2:	4618      	mov	r0, r3
 80019e4:	f005 fd63 	bl	80074ae <atof>
 80019e8:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 80019ec:	e9c3 0100 	strd	r0, r1, [r3]
					if (f_latitude > 0) {
 80019f0:	f04f 0200 	mov.w	r2, #0
 80019f4:	f04f 0300 	mov.w	r3, #0
 80019f8:	f507 61a7 	add.w	r1, r7, #1336	; 0x538
 80019fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a00:	f7fe fffa 	bl	80009f8 <__aeabi_dcmpgt>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d046      	beq.n	8001a98 <main+0x690>
						int degree_latitude = ((int) f_latitude / 100);
 8001a0a:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8001a0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a12:	f7ff f811 	bl	8000a38 <__aeabi_d2iz>
 8001a16:	4603      	mov	r3, r0
 8001a18:	4a29      	ldr	r2, [pc, #164]	; (8001ac0 <main+0x6b8>)
 8001a1a:	fb82 1203 	smull	r1, r2, r2, r3
 8001a1e:	1152      	asrs	r2, r2, #5
 8001a20:	17db      	asrs	r3, r3, #31
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534

						double minute_latitude = f_latitude
								- ((double) (degree_latitude) * 100.0);
 8001a28:	f8d7 0534 	ldr.w	r0, [r7, #1332]	; 0x534
 8001a2c:	f7fe fcea 	bl	8000404 <__aeabi_i2d>
 8001a30:	f04f 0200 	mov.w	r2, #0
 8001a34:	4b23      	ldr	r3, [pc, #140]	; (8001ac4 <main+0x6bc>)
 8001a36:	f7fe fd4f 	bl	80004d8 <__aeabi_dmul>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	460b      	mov	r3, r1
						double minute_latitude = f_latitude
 8001a3e:	f507 61a7 	add.w	r1, r7, #1336	; 0x538
 8001a42:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a46:	f7fe fb8f 	bl	8000168 <__aeabi_dsub>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	f507 61a5 	add.w	r1, r7, #1320	; 0x528
 8001a52:	e9c1 2300 	strd	r2, r3, [r1]
						double minute2degree_latitude = minute_latitude
 8001a56:	f04f 0200 	mov.w	r2, #0
 8001a5a:	4b17      	ldr	r3, [pc, #92]	; (8001ab8 <main+0x6b0>)
 8001a5c:	f507 61a5 	add.w	r1, r7, #1320	; 0x528
 8001a60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a64:	f7fe fe62 	bl	800072c <__aeabi_ddiv>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	f507 61a4 	add.w	r1, r7, #1312	; 0x520
 8001a70:	e9c1 2300 	strd	r2, r3, [r1]
								/ 60.000;
						f_latitude2 = degree_latitude + minute2degree_latitude;
 8001a74:	f8d7 0534 	ldr.w	r0, [r7, #1332]	; 0x534
 8001a78:	f7fe fcc4 	bl	8000404 <__aeabi_i2d>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	460b      	mov	r3, r1
 8001a80:	f507 61a4 	add.w	r1, r7, #1312	; 0x520
 8001a84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a88:	f7fe fb70 	bl	800016c <__adddf3>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	460b      	mov	r3, r1
 8001a90:	f507 61ba 	add.w	r1, r7, #1488	; 0x5d0
 8001a94:	e9c1 2300 	strd	r2, r3, [r1]
					}
				}

				//HAL_UART_Transmit(&huart1, (uint8_t*)latitude, n5+1, 500);

				ptr++;
 8001a98:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4

				char *ptr6 = NS;
 8001aa2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001aa6:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580

				int n6 = 0;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
				while ((*ptr) != ',') {
 8001ab0:	e01f      	b.n	8001af2 <main+0x6ea>
 8001ab2:	bf00      	nop
 8001ab4:	0800d39c 	.word	0x0800d39c
 8001ab8:	404e0000 	.word	0x404e0000
 8001abc:	200003c8 	.word	0x200003c8
 8001ac0:	51eb851f 	.word	0x51eb851f
 8001ac4:	40590000 	.word	0x40590000
 8001ac8:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 8001acc:	781a      	ldrb	r2, [r3, #0]
					memcpy(ptr6, ptr, 1);
 8001ace:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 8001ad2:	701a      	strb	r2, [r3, #0]
					ptr6++;
 8001ad4:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 8001ad8:	3301      	adds	r3, #1
 8001ada:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
					ptr++;
 8001ade:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
					n6++;
 8001ae8:	f8d7 357c 	ldr.w	r3, [r7, #1404]	; 0x57c
 8001aec:	3301      	adds	r3, #1
 8001aee:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
				while ((*ptr) != ',') {
 8001af2:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	2b2c      	cmp	r3, #44	; 0x2c
 8001afa:	d1e5      	bne.n	8001ac8 <main+0x6c0>
				}

				memcpy(ptr6, "\0", 1);
 8001afc:	2201      	movs	r2, #1
 8001afe:	4966      	ldr	r1, [pc, #408]	; (8001c98 <main+0x890>)
 8001b00:	f8d7 0580 	ldr.w	r0, [r7, #1408]	; 0x580
 8001b04:	f005 fd00 	bl	8007508 <memcpy>
			HAL_UART_Transmit(&huart1, (uint8_t*) NS, n6 + 1, 500);

			printf("\r\n");
#endif

				ptr++;
 8001b08:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4

				char *ptr7 = longitude;
 8001b12:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b16:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578

				int n7 = 0;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
				while ((*ptr) != ',') {
 8001b20:	e014      	b.n	8001b4c <main+0x744>
 8001b22:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 8001b26:	781a      	ldrb	r2, [r3, #0]
					memcpy(ptr7, ptr, 1);
 8001b28:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8001b2c:	701a      	strb	r2, [r3, #0]
					ptr7++;
 8001b2e:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8001b32:	3301      	adds	r3, #1
 8001b34:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
					ptr++;
 8001b38:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
					n7++;
 8001b42:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8001b46:	3301      	adds	r3, #1
 8001b48:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
				while ((*ptr) != ',') {
 8001b4c:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	2b2c      	cmp	r3, #44	; 0x2c
 8001b54:	d1e5      	bne.n	8001b22 <main+0x71a>
				}

				memcpy(ptr7, "\0", 1);
 8001b56:	2201      	movs	r2, #1
 8001b58:	494f      	ldr	r1, [pc, #316]	; (8001c98 <main+0x890>)
 8001b5a:	f8d7 0578 	ldr.w	r0, [r7, #1400]	; 0x578
 8001b5e:	f005 fcd3 	bl	8007508 <memcpy>

				if (n7 == 11) {
 8001b62:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8001b66:	2b0b      	cmp	r3, #11
 8001b68:	d15c      	bne.n	8001c24 <main+0x81c>
					double f_longitude = atof(longitude);
 8001b6a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f005 fc9d 	bl	80074ae <atof>
 8001b74:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 8001b78:	e9c3 0100 	strd	r0, r1, [r3]
					if (f_longitude > 0) {
 8001b7c:	f04f 0200 	mov.w	r2, #0
 8001b80:	f04f 0300 	mov.w	r3, #0
 8001b84:	f507 61a3 	add.w	r1, r7, #1304	; 0x518
 8001b88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001b8c:	f7fe ff34 	bl	80009f8 <__aeabi_dcmpgt>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d046      	beq.n	8001c24 <main+0x81c>
						int degree_longitude = ((int) f_longitude / 100);
 8001b96:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 8001b9a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b9e:	f7fe ff4b 	bl	8000a38 <__aeabi_d2iz>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	4a3d      	ldr	r2, [pc, #244]	; (8001c9c <main+0x894>)
 8001ba6:	fb82 1203 	smull	r1, r2, r2, r3
 8001baa:	1152      	asrs	r2, r2, #5
 8001bac:	17db      	asrs	r3, r3, #31
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
						double minute_longitude = f_longitude
								- ((double) (degree_longitude) * 100.0);
 8001bb4:	f8d7 0514 	ldr.w	r0, [r7, #1300]	; 0x514
 8001bb8:	f7fe fc24 	bl	8000404 <__aeabi_i2d>
 8001bbc:	f04f 0200 	mov.w	r2, #0
 8001bc0:	4b37      	ldr	r3, [pc, #220]	; (8001ca0 <main+0x898>)
 8001bc2:	f7fe fc89 	bl	80004d8 <__aeabi_dmul>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	460b      	mov	r3, r1
						double minute_longitude = f_longitude
 8001bca:	f507 61a3 	add.w	r1, r7, #1304	; 0x518
 8001bce:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001bd2:	f7fe fac9 	bl	8000168 <__aeabi_dsub>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	460b      	mov	r3, r1
 8001bda:	f507 61a1 	add.w	r1, r7, #1288	; 0x508
 8001bde:	e9c1 2300 	strd	r2, r3, [r1]
						double minute2degree_longitude = minute_longitude
 8001be2:	f04f 0200 	mov.w	r2, #0
 8001be6:	4b2f      	ldr	r3, [pc, #188]	; (8001ca4 <main+0x89c>)
 8001be8:	f507 61a1 	add.w	r1, r7, #1288	; 0x508
 8001bec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001bf0:	f7fe fd9c 	bl	800072c <__aeabi_ddiv>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	f507 61a0 	add.w	r1, r7, #1280	; 0x500
 8001bfc:	e9c1 2300 	strd	r2, r3, [r1]
								/ 60.0;
						f_longitude2 = degree_longitude
								+ minute2degree_longitude;
 8001c00:	f8d7 0514 	ldr.w	r0, [r7, #1300]	; 0x514
 8001c04:	f7fe fbfe 	bl	8000404 <__aeabi_i2d>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
						f_longitude2 = degree_longitude
 8001c0c:	f507 61a0 	add.w	r1, r7, #1280	; 0x500
 8001c10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001c14:	f7fe faaa 	bl	800016c <__adddf3>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	f507 61b9 	add.w	r1, r7, #1480	; 0x5c8
 8001c20:	e9c1 2300 	strd	r2, r3, [r1]
					}
				}

				//HAL_UART_Transmit(&huart1, (uint8_t*)longitude, n7+1, 500);

				ptr++;
 8001c24:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 8001c28:	3301      	adds	r3, #1
 8001c2a:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4

				char *ptr8 = EW;
 8001c2e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c32:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570

				int n8 = 0;
 8001c36:	2300      	movs	r3, #0
 8001c38:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
				while ((*ptr) != ',') {
 8001c3c:	e014      	b.n	8001c68 <main+0x860>
 8001c3e:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 8001c42:	781a      	ldrb	r2, [r3, #0]
					memcpy(ptr8, ptr, 1);
 8001c44:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8001c48:	701a      	strb	r2, [r3, #0]
					ptr8++;
 8001c4a:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8001c4e:	3301      	adds	r3, #1
 8001c50:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
					ptr++;
 8001c54:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 8001c58:	3301      	adds	r3, #1
 8001c5a:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
					n8++;
 8001c5e:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8001c62:	3301      	adds	r3, #1
 8001c64:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
				while ((*ptr) != ',') {
 8001c68:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	2b2c      	cmp	r3, #44	; 0x2c
 8001c70:	d1e5      	bne.n	8001c3e <main+0x836>
				}

				memcpy(ptr8, "\0", 1);
 8001c72:	2201      	movs	r2, #1
 8001c74:	4908      	ldr	r1, [pc, #32]	; (8001c98 <main+0x890>)
 8001c76:	f8d7 0570 	ldr.w	r0, [r7, #1392]	; 0x570
 8001c7a:	f005 fc45 	bl	8007508 <memcpy>
			HAL_UART_Transmit(&huart1, (uint8_t*) EW, n8 + 1, 500);

			printf("\r\n");
#endif

				ptr++;
 8001c7e:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 8001c82:	3301      	adds	r3, #1
 8001c84:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4

				char *ptr9 = groundSpeed;
 8001c88:	f107 0320 	add.w	r3, r7, #32
 8001c8c:	f8c7 3568 	str.w	r3, [r7, #1384]	; 0x568

				int n9 = 0;
 8001c90:	2300      	movs	r3, #0
 8001c92:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
				while ((*ptr) != ',') {
 8001c96:	e01c      	b.n	8001cd2 <main+0x8ca>
 8001c98:	0800d39c 	.word	0x0800d39c
 8001c9c:	51eb851f 	.word	0x51eb851f
 8001ca0:	40590000 	.word	0x40590000
 8001ca4:	404e0000 	.word	0x404e0000
 8001ca8:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 8001cac:	781a      	ldrb	r2, [r3, #0]
					memcpy(ptr9, ptr, 1);
 8001cae:	f8d7 3568 	ldr.w	r3, [r7, #1384]	; 0x568
 8001cb2:	701a      	strb	r2, [r3, #0]

					ptr9++;
 8001cb4:	f8d7 3568 	ldr.w	r3, [r7, #1384]	; 0x568
 8001cb8:	3301      	adds	r3, #1
 8001cba:	f8c7 3568 	str.w	r3, [r7, #1384]	; 0x568
					ptr++;
 8001cbe:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
					n9++;
 8001cc8:	f8d7 3564 	ldr.w	r3, [r7, #1380]	; 0x564
 8001ccc:	3301      	adds	r3, #1
 8001cce:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
				while ((*ptr) != ',') {
 8001cd2:	f8d7 35a4 	ldr.w	r3, [r7, #1444]	; 0x5a4
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	2b2c      	cmp	r3, #44	; 0x2c
 8001cda:	d1e5      	bne.n	8001ca8 <main+0x8a0>
				}

				memcpy(ptr9, "\0", 1);
 8001cdc:	2201      	movs	r2, #1
 8001cde:	499e      	ldr	r1, [pc, #632]	; (8001f58 <main+0xb50>)
 8001ce0:	f8d7 0568 	ldr.w	r0, [r7, #1384]	; 0x568
 8001ce4:	f005 fc10 	bl	8007508 <memcpy>

				if (n9 == 5) {
 8001ce8:	f8d7 3564 	ldr.w	r3, [r7, #1380]	; 0x564
 8001cec:	2b05      	cmp	r3, #5
 8001cee:	d10f      	bne.n	8001d10 <main+0x908>
					ground_speed = (atof(groundSpeed)) * 1.852;
 8001cf0:	f107 0320 	add.w	r3, r7, #32
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f005 fbda 	bl	80074ae <atof>
 8001cfa:	a38f      	add	r3, pc, #572	; (adr r3, 8001f38 <main+0xb30>)
 8001cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d00:	f7fe fbea 	bl	80004d8 <__aeabi_dmul>
 8001d04:	4602      	mov	r2, r0
 8001d06:	460b      	mov	r3, r1
 8001d08:	f507 61a9 	add.w	r1, r7, #1352	; 0x548
 8001d0c:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_UART_Transmit(&huart1, (uint8_t*) groundSpeed, n9 + 1, 500);

			printf("\r\n");
#endif

				if ((f_latitude1 == 0) && (f_longitude1 == 0)) {
 8001d10:	4b92      	ldr	r3, [pc, #584]	; (8001f5c <main+0xb54>)
 8001d12:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d16:	f04f 0200 	mov.w	r2, #0
 8001d1a:	f04f 0300 	mov.w	r3, #0
 8001d1e:	f7fe fe43 	bl	80009a8 <__aeabi_dcmpeq>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d019      	beq.n	8001d5c <main+0x954>
 8001d28:	4b8d      	ldr	r3, [pc, #564]	; (8001f60 <main+0xb58>)
 8001d2a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d2e:	f04f 0200 	mov.w	r2, #0
 8001d32:	f04f 0300 	mov.w	r3, #0
 8001d36:	f7fe fe37 	bl	80009a8 <__aeabi_dcmpeq>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d00d      	beq.n	8001d5c <main+0x954>
					f_latitude1 = f_latitude2;
 8001d40:	4986      	ldr	r1, [pc, #536]	; (8001f5c <main+0xb54>)
 8001d42:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8001d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d4a:	e9c1 2300 	strd	r2, r3, [r1]
					f_longitude1 = f_longitude2;
 8001d4e:	4984      	ldr	r1, [pc, #528]	; (8001f60 <main+0xb58>)
 8001d50:	f507 63b9 	add.w	r3, r7, #1480	; 0x5c8
 8001d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d58:	e9c1 2300 	strd	r2, r3, [r1]
				}

				if (time_interval >= 0.000 && f_latitude1 > 0) {
 8001d5c:	f04f 0200 	mov.w	r2, #0
 8001d60:	f04f 0300 	mov.w	r3, #0
 8001d64:	f507 61b7 	add.w	r1, r7, #1464	; 0x5b8
 8001d68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001d6c:	f7fe fe3a 	bl	80009e4 <__aeabi_dcmpge>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	f000 8095 	beq.w	8001ea2 <main+0xa9a>
 8001d78:	4b78      	ldr	r3, [pc, #480]	; (8001f5c <main+0xb54>)
 8001d7a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d7e:	f04f 0200 	mov.w	r2, #0
 8001d82:	f04f 0300 	mov.w	r3, #0
 8001d86:	f7fe fe37 	bl	80009f8 <__aeabi_dcmpgt>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	f000 8088 	beq.w	8001ea2 <main+0xa9a>

					distance = calc_distance(f_latitude1, f_longitude1,
 8001d92:	4b72      	ldr	r3, [pc, #456]	; (8001f5c <main+0xb54>)
 8001d94:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d98:	4b71      	ldr	r3, [pc, #452]	; (8001f60 <main+0xb58>)
 8001d9a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001d9e:	f507 63b9 	add.w	r3, r7, #1480	; 0x5c8
 8001da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001daa:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8001dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db2:	e9cd 2300 	strd	r2, r3, [sp]
 8001db6:	4622      	mov	r2, r4
 8001db8:	462b      	mov	r3, r5
 8001dba:	f7ff fa2d 	bl	8001218 <calc_distance>
 8001dbe:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 8001dc2:	e9c3 0100 	strd	r0, r1, [r3]
							f_latitude2, f_longitude2);
					if ((distance < 1.4) || (distance > 15.0)) {
 8001dc6:	a35e      	add	r3, pc, #376	; (adr r3, 8001f40 <main+0xb38>)
 8001dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dcc:	f507 61ab 	add.w	r1, r7, #1368	; 0x558
 8001dd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001dd4:	f7fe fdf2 	bl	80009bc <__aeabi_dcmplt>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d11b      	bne.n	8001e16 <main+0xa0e>
 8001dde:	f04f 0200 	mov.w	r2, #0
 8001de2:	4b60      	ldr	r3, [pc, #384]	; (8001f64 <main+0xb5c>)
 8001de4:	f507 61ab 	add.w	r1, r7, #1368	; 0x558
 8001de8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001dec:	f7fe fe04 	bl	80009f8 <__aeabi_dcmpgt>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d10f      	bne.n	8001e16 <main+0xa0e>
					} else {
						total_distance += distance;
 8001df6:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 8001dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dfe:	f507 61b8 	add.w	r1, r7, #1472	; 0x5c0
 8001e02:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001e06:	f7fe f9b1 	bl	800016c <__adddf3>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	f507 61b8 	add.w	r1, r7, #1472	; 0x5c0
 8001e12:	e9c1 2300 	strd	r2, r3, [r1]

#ifndef OLED
				printf("distance : %.7f\r\n", distance);
#endif

					f_latitude1 = f_latitude2;
 8001e16:	4951      	ldr	r1, [pc, #324]	; (8001f5c <main+0xb54>)
 8001e18:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8001e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e20:	e9c1 2300 	strd	r2, r3, [r1]
					f_longitude1 = f_longitude2;
 8001e24:	494e      	ldr	r1, [pc, #312]	; (8001f60 <main+0xb58>)
 8001e26:	f507 63b9 	add.w	r3, r7, #1480	; 0x5c8
 8001e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e2e:	e9c1 2300 	strd	r2, r3, [r1]
					if (distance == 0) {
 8001e32:	f04f 0200 	mov.w	r2, #0
 8001e36:	f04f 0300 	mov.w	r3, #0
 8001e3a:	f507 61ab 	add.w	r1, r7, #1368	; 0x558
 8001e3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001e42:	f7fe fdb1 	bl	80009a8 <__aeabi_dcmpeq>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d008      	beq.n	8001e5e <main+0xa56>
						speed = 0.0;
 8001e4c:	f04f 0200 	mov.w	r2, #0
 8001e50:	f04f 0300 	mov.w	r3, #0
 8001e54:	f507 61b6 	add.w	r1, r7, #1456	; 0x5b0
 8001e58:	e9c1 2300 	strd	r2, r3, [r1]
 8001e5c:	e021      	b.n	8001ea2 <main+0xa9a>
					} else {
						speed = (distance * 0.001 * 3600.0) / time_interval;
 8001e5e:	a33a      	add	r3, pc, #232	; (adr r3, 8001f48 <main+0xb40>)
 8001e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e64:	f507 61ab 	add.w	r1, r7, #1368	; 0x558
 8001e68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001e6c:	f7fe fb34 	bl	80004d8 <__aeabi_dmul>
 8001e70:	4602      	mov	r2, r0
 8001e72:	460b      	mov	r3, r1
 8001e74:	4610      	mov	r0, r2
 8001e76:	4619      	mov	r1, r3
 8001e78:	a335      	add	r3, pc, #212	; (adr r3, 8001f50 <main+0xb48>)
 8001e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e7e:	f7fe fb2b 	bl	80004d8 <__aeabi_dmul>
 8001e82:	4602      	mov	r2, r0
 8001e84:	460b      	mov	r3, r1
 8001e86:	4610      	mov	r0, r2
 8001e88:	4619      	mov	r1, r3
 8001e8a:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8001e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e92:	f7fe fc4b 	bl	800072c <__aeabi_ddiv>
 8001e96:	4602      	mov	r2, r0
 8001e98:	460b      	mov	r3, r1
 8001e9a:	f507 61b6 	add.w	r1, r7, #1456	; 0x5b0
 8001e9e:	e9c1 2300 	strd	r2, r3, [r1]

#ifndef OLED
			printf("speed : %.7f\r\n", speed);
			printf("ground_speed : %.7f\r\n", ground_speed);
#endif
				if (timeFlag == 1) {
 8001ea2:	4b31      	ldr	r3, [pc, #196]	; (8001f68 <main+0xb60>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d109      	bne.n	8001ebe <main+0xab6>
					timeFlag = 0;
 8001eaa:	4b2f      	ldr	r3, [pc, #188]	; (8001f68 <main+0xb60>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]
					printf("%.2f\n", speed);
 8001eb0:	f507 63b6 	add.w	r3, r7, #1456	; 0x5b0
 8001eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb8:	482c      	ldr	r0, [pc, #176]	; (8001f6c <main+0xb64>)
 8001eba:	f006 f9a9 	bl	8008210 <iprintf>
				}
			}

			memset(type, 0, sizeof(type));
 8001ebe:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001ec2:	2210      	movs	r2, #16
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f005 fb2c 	bl	8007524 <memset>
			memset(time, 0, sizeof(time));
 8001ecc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001ed0:	2210      	movs	r2, #16
 8001ed2:	2100      	movs	r1, #0
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f005 fb25 	bl	8007524 <memset>
			memset(latitude, 0, sizeof(latitude));
 8001eda:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001ede:	2210      	movs	r2, #16
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f005 fb1e 	bl	8007524 <memset>
			memset(NS, 0, sizeof(NS));
 8001ee8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001eec:	2204      	movs	r2, #4
 8001eee:	2100      	movs	r1, #0
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f005 fb17 	bl	8007524 <memset>
			memset(longitude, 0, sizeof(longitude));
 8001ef6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001efa:	2210      	movs	r2, #16
 8001efc:	2100      	movs	r1, #0
 8001efe:	4618      	mov	r0, r3
 8001f00:	f005 fb10 	bl	8007524 <memset>
			memset(EW, 0, sizeof(EW));
 8001f04:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f08:	2204      	movs	r2, #4
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f005 fb09 	bl	8007524 <memset>
			memset(groundSpeed, 0, sizeof(groundSpeed));
 8001f12:	f107 0320 	add.w	r3, r7, #32
 8001f16:	2210      	movs	r2, #16
 8001f18:	2100      	movs	r1, #0
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f005 fb02 	bl	8007524 <memset>

			memset(buff, 0, sizeof(buff));
 8001f20:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001f24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f28:	2100      	movs	r1, #0
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f005 fafa 	bl	8007524 <memset>
	while (1) {
 8001f30:	f7ff bb24 	b.w	800157c <main+0x174>
 8001f34:	f3af 8000 	nop.w
 8001f38:	c083126f 	.word	0xc083126f
 8001f3c:	3ffda1ca 	.word	0x3ffda1ca
 8001f40:	66666666 	.word	0x66666666
 8001f44:	3ff66666 	.word	0x3ff66666
 8001f48:	d2f1a9fc 	.word	0xd2f1a9fc
 8001f4c:	3f50624d 	.word	0x3f50624d
 8001f50:	00000000 	.word	0x00000000
 8001f54:	40ac2000 	.word	0x40ac2000
 8001f58:	0800d39c 	.word	0x0800d39c
 8001f5c:	200003d0 	.word	0x200003d0
 8001f60:	200003d8 	.word	0x200003d8
 8001f64:	402e0000 	.word	0x402e0000
 8001f68:	2000032c 	.word	0x2000032c
 8001f6c:	0800d3a0 	.word	0x0800d3a0

08001f70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b090      	sub	sp, #64	; 0x40
 8001f74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f76:	f107 0318 	add.w	r3, r7, #24
 8001f7a:	2228      	movs	r2, #40	; 0x28
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f005 fad0 	bl	8007524 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f84:	1d3b      	adds	r3, r7, #4
 8001f86:	2200      	movs	r2, #0
 8001f88:	601a      	str	r2, [r3, #0]
 8001f8a:	605a      	str	r2, [r3, #4]
 8001f8c:	609a      	str	r2, [r3, #8]
 8001f8e:	60da      	str	r2, [r3, #12]
 8001f90:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f92:	2301      	movs	r3, #1
 8001f94:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f9a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001fa8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fb2:	f107 0318 	add.w	r3, r7, #24
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f001 f978 	bl	80032ac <HAL_RCC_OscConfig>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <SystemClock_Config+0x56>
  {
    Error_Handler();
 8001fc2:	f000 f9cb 	bl	800235c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fc6:	230f      	movs	r3, #15
 8001fc8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fca:	2302      	movs	r3, #2
 8001fcc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001fce:	2380      	movs	r3, #128	; 0x80
 8001fd0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001fd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fd6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001fdc:	1d3b      	adds	r3, r7, #4
 8001fde:	2100      	movs	r1, #0
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f001 fbe5 	bl	80037b0 <HAL_RCC_ClockConfig>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001fec:	f000 f9b6 	bl	800235c <Error_Handler>
  }
}
 8001ff0:	bf00      	nop
 8001ff2:	3740      	adds	r7, #64	; 0x40
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	2100      	movs	r1, #0
 8002000:	2026      	movs	r0, #38	; 0x26
 8002002:	f000 fece 	bl	8002da2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002006:	2026      	movs	r0, #38	; 0x26
 8002008:	f000 fee7 	bl	8002dda <HAL_NVIC_EnableIRQ>
  /* TIM1_UP_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800200c:	2200      	movs	r2, #0
 800200e:	2100      	movs	r1, #0
 8002010:	2019      	movs	r0, #25
 8002012:	f000 fec6 	bl	8002da2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002016:	2019      	movs	r0, #25
 8002018:	f000 fedf 	bl	8002dda <HAL_NVIC_EnableIRQ>
}
 800201c:	bf00      	nop
 800201e:	bd80      	pop	{r7, pc}

08002020 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002024:	4b17      	ldr	r3, [pc, #92]	; (8002084 <MX_SPI1_Init+0x64>)
 8002026:	4a18      	ldr	r2, [pc, #96]	; (8002088 <MX_SPI1_Init+0x68>)
 8002028:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800202a:	4b16      	ldr	r3, [pc, #88]	; (8002084 <MX_SPI1_Init+0x64>)
 800202c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002030:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002032:	4b14      	ldr	r3, [pc, #80]	; (8002084 <MX_SPI1_Init+0x64>)
 8002034:	2200      	movs	r2, #0
 8002036:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002038:	4b12      	ldr	r3, [pc, #72]	; (8002084 <MX_SPI1_Init+0x64>)
 800203a:	2200      	movs	r2, #0
 800203c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800203e:	4b11      	ldr	r3, [pc, #68]	; (8002084 <MX_SPI1_Init+0x64>)
 8002040:	2200      	movs	r2, #0
 8002042:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002044:	4b0f      	ldr	r3, [pc, #60]	; (8002084 <MX_SPI1_Init+0x64>)
 8002046:	2200      	movs	r2, #0
 8002048:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800204a:	4b0e      	ldr	r3, [pc, #56]	; (8002084 <MX_SPI1_Init+0x64>)
 800204c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002050:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002052:	4b0c      	ldr	r3, [pc, #48]	; (8002084 <MX_SPI1_Init+0x64>)
 8002054:	2208      	movs	r2, #8
 8002056:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002058:	4b0a      	ldr	r3, [pc, #40]	; (8002084 <MX_SPI1_Init+0x64>)
 800205a:	2200      	movs	r2, #0
 800205c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800205e:	4b09      	ldr	r3, [pc, #36]	; (8002084 <MX_SPI1_Init+0x64>)
 8002060:	2200      	movs	r2, #0
 8002062:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002064:	4b07      	ldr	r3, [pc, #28]	; (8002084 <MX_SPI1_Init+0x64>)
 8002066:	2200      	movs	r2, #0
 8002068:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800206a:	4b06      	ldr	r3, [pc, #24]	; (8002084 <MX_SPI1_Init+0x64>)
 800206c:	220a      	movs	r2, #10
 800206e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002070:	4804      	ldr	r0, [pc, #16]	; (8002084 <MX_SPI1_Init+0x64>)
 8002072:	f001 fd2b 	bl	8003acc <HAL_SPI_Init>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800207c:	f000 f96e 	bl	800235c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002080:	bf00      	nop
 8002082:	bd80      	pop	{r7, pc}
 8002084:	200001fc 	.word	0x200001fc
 8002088:	40013000 	.word	0x40013000

0800208c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b096      	sub	sp, #88	; 0x58
 8002090:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002092:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002096:	2200      	movs	r2, #0
 8002098:	601a      	str	r2, [r3, #0]
 800209a:	605a      	str	r2, [r3, #4]
 800209c:	609a      	str	r2, [r3, #8]
 800209e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020a0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ae:	2200      	movs	r2, #0
 80020b0:	601a      	str	r2, [r3, #0]
 80020b2:	605a      	str	r2, [r3, #4]
 80020b4:	609a      	str	r2, [r3, #8]
 80020b6:	60da      	str	r2, [r3, #12]
 80020b8:	611a      	str	r2, [r3, #16]
 80020ba:	615a      	str	r2, [r3, #20]
 80020bc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80020be:	1d3b      	adds	r3, r7, #4
 80020c0:	2220      	movs	r2, #32
 80020c2:	2100      	movs	r1, #0
 80020c4:	4618      	mov	r0, r3
 80020c6:	f005 fa2d 	bl	8007524 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80020ca:	4b3d      	ldr	r3, [pc, #244]	; (80021c0 <MX_TIM1_Init+0x134>)
 80020cc:	4a3d      	ldr	r2, [pc, #244]	; (80021c4 <MX_TIM1_Init+0x138>)
 80020ce:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 29999;
 80020d0:	4b3b      	ldr	r3, [pc, #236]	; (80021c0 <MX_TIM1_Init+0x134>)
 80020d2:	f247 522f 	movw	r2, #29999	; 0x752f
 80020d6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020d8:	4b39      	ldr	r3, [pc, #228]	; (80021c0 <MX_TIM1_Init+0x134>)
 80020da:	2200      	movs	r2, #0
 80020dc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 15999;
 80020de:	4b38      	ldr	r3, [pc, #224]	; (80021c0 <MX_TIM1_Init+0x134>)
 80020e0:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80020e4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020e6:	4b36      	ldr	r3, [pc, #216]	; (80021c0 <MX_TIM1_Init+0x134>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80020ec:	4b34      	ldr	r3, [pc, #208]	; (80021c0 <MX_TIM1_Init+0x134>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020f2:	4b33      	ldr	r3, [pc, #204]	; (80021c0 <MX_TIM1_Init+0x134>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80020f8:	4831      	ldr	r0, [pc, #196]	; (80021c0 <MX_TIM1_Init+0x134>)
 80020fa:	f001 ff55 	bl	8003fa8 <HAL_TIM_Base_Init>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002104:	f000 f92a 	bl	800235c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002108:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800210c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800210e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002112:	4619      	mov	r1, r3
 8002114:	482a      	ldr	r0, [pc, #168]	; (80021c0 <MX_TIM1_Init+0x134>)
 8002116:	f002 f9a5 	bl	8004464 <HAL_TIM_ConfigClockSource>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002120:	f000 f91c 	bl	800235c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8002124:	4826      	ldr	r0, [pc, #152]	; (80021c0 <MX_TIM1_Init+0x134>)
 8002126:	f001 ffe1 	bl	80040ec <HAL_TIM_OC_Init>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002130:	f000 f914 	bl	800235c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002134:	2300      	movs	r3, #0
 8002136:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002138:	2300      	movs	r3, #0
 800213a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800213c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002140:	4619      	mov	r1, r3
 8002142:	481f      	ldr	r0, [pc, #124]	; (80021c0 <MX_TIM1_Init+0x134>)
 8002144:	f002 fcfa 	bl	8004b3c <HAL_TIMEx_MasterConfigSynchronization>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 800214e:	f000 f905 	bl	800235c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002152:	2300      	movs	r3, #0
 8002154:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002156:	2300      	movs	r3, #0
 8002158:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800215a:	2300      	movs	r3, #0
 800215c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800215e:	2300      	movs	r3, #0
 8002160:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002162:	2300      	movs	r3, #0
 8002164:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002166:	2300      	movs	r3, #0
 8002168:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800216a:	2300      	movs	r3, #0
 800216c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800216e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002172:	2200      	movs	r2, #0
 8002174:	4619      	mov	r1, r3
 8002176:	4812      	ldr	r0, [pc, #72]	; (80021c0 <MX_TIM1_Init+0x134>)
 8002178:	f002 f918 	bl	80043ac <HAL_TIM_OC_ConfigChannel>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8002182:	f000 f8eb 	bl	800235c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002186:	2300      	movs	r3, #0
 8002188:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800218a:	2300      	movs	r3, #0
 800218c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800218e:	2300      	movs	r3, #0
 8002190:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002192:	2300      	movs	r3, #0
 8002194:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002196:	2300      	movs	r3, #0
 8002198:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800219a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800219e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80021a0:	2300      	movs	r3, #0
 80021a2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80021a4:	1d3b      	adds	r3, r7, #4
 80021a6:	4619      	mov	r1, r3
 80021a8:	4805      	ldr	r0, [pc, #20]	; (80021c0 <MX_TIM1_Init+0x134>)
 80021aa:	f002 fd25 	bl	8004bf8 <HAL_TIMEx_ConfigBreakDeadTime>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d001      	beq.n	80021b8 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80021b4:	f000 f8d2 	bl	800235c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80021b8:	bf00      	nop
 80021ba:	3758      	adds	r7, #88	; 0x58
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	20000254 	.word	0x20000254
 80021c4:	40012c00 	.word	0x40012c00

080021c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80021cc:	4b11      	ldr	r3, [pc, #68]	; (8002214 <MX_USART1_UART_Init+0x4c>)
 80021ce:	4a12      	ldr	r2, [pc, #72]	; (8002218 <MX_USART1_UART_Init+0x50>)
 80021d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80021d2:	4b10      	ldr	r3, [pc, #64]	; (8002214 <MX_USART1_UART_Init+0x4c>)
 80021d4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80021d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80021da:	4b0e      	ldr	r3, [pc, #56]	; (8002214 <MX_USART1_UART_Init+0x4c>)
 80021dc:	2200      	movs	r2, #0
 80021de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80021e0:	4b0c      	ldr	r3, [pc, #48]	; (8002214 <MX_USART1_UART_Init+0x4c>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80021e6:	4b0b      	ldr	r3, [pc, #44]	; (8002214 <MX_USART1_UART_Init+0x4c>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80021ec:	4b09      	ldr	r3, [pc, #36]	; (8002214 <MX_USART1_UART_Init+0x4c>)
 80021ee:	220c      	movs	r2, #12
 80021f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021f2:	4b08      	ldr	r3, [pc, #32]	; (8002214 <MX_USART1_UART_Init+0x4c>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021f8:	4b06      	ldr	r3, [pc, #24]	; (8002214 <MX_USART1_UART_Init+0x4c>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021fe:	4805      	ldr	r0, [pc, #20]	; (8002214 <MX_USART1_UART_Init+0x4c>)
 8002200:	f002 fd5d 	bl	8004cbe <HAL_UART_Init>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800220a:	f000 f8a7 	bl	800235c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800220e:	bf00      	nop
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	2000029c 	.word	0x2000029c
 8002218:	40013800 	.word	0x40013800

0800221c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002220:	4b11      	ldr	r3, [pc, #68]	; (8002268 <MX_USART2_UART_Init+0x4c>)
 8002222:	4a12      	ldr	r2, [pc, #72]	; (800226c <MX_USART2_UART_Init+0x50>)
 8002224:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002226:	4b10      	ldr	r3, [pc, #64]	; (8002268 <MX_USART2_UART_Init+0x4c>)
 8002228:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800222c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800222e:	4b0e      	ldr	r3, [pc, #56]	; (8002268 <MX_USART2_UART_Init+0x4c>)
 8002230:	2200      	movs	r2, #0
 8002232:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002234:	4b0c      	ldr	r3, [pc, #48]	; (8002268 <MX_USART2_UART_Init+0x4c>)
 8002236:	2200      	movs	r2, #0
 8002238:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800223a:	4b0b      	ldr	r3, [pc, #44]	; (8002268 <MX_USART2_UART_Init+0x4c>)
 800223c:	2200      	movs	r2, #0
 800223e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002240:	4b09      	ldr	r3, [pc, #36]	; (8002268 <MX_USART2_UART_Init+0x4c>)
 8002242:	220c      	movs	r2, #12
 8002244:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002246:	4b08      	ldr	r3, [pc, #32]	; (8002268 <MX_USART2_UART_Init+0x4c>)
 8002248:	2200      	movs	r2, #0
 800224a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800224c:	4b06      	ldr	r3, [pc, #24]	; (8002268 <MX_USART2_UART_Init+0x4c>)
 800224e:	2200      	movs	r2, #0
 8002250:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002252:	4805      	ldr	r0, [pc, #20]	; (8002268 <MX_USART2_UART_Init+0x4c>)
 8002254:	f002 fd33 	bl	8004cbe <HAL_UART_Init>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800225e:	f000 f87d 	bl	800235c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002262:	bf00      	nop
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	200002e4 	.word	0x200002e4
 800226c:	40004400 	.word	0x40004400

08002270 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b088      	sub	sp, #32
 8002274:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002276:	f107 0310 	add.w	r3, r7, #16
 800227a:	2200      	movs	r2, #0
 800227c:	601a      	str	r2, [r3, #0]
 800227e:	605a      	str	r2, [r3, #4]
 8002280:	609a      	str	r2, [r3, #8]
 8002282:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002284:	4b26      	ldr	r3, [pc, #152]	; (8002320 <MX_GPIO_Init+0xb0>)
 8002286:	699b      	ldr	r3, [r3, #24]
 8002288:	4a25      	ldr	r2, [pc, #148]	; (8002320 <MX_GPIO_Init+0xb0>)
 800228a:	f043 0320 	orr.w	r3, r3, #32
 800228e:	6193      	str	r3, [r2, #24]
 8002290:	4b23      	ldr	r3, [pc, #140]	; (8002320 <MX_GPIO_Init+0xb0>)
 8002292:	699b      	ldr	r3, [r3, #24]
 8002294:	f003 0320 	and.w	r3, r3, #32
 8002298:	60fb      	str	r3, [r7, #12]
 800229a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800229c:	4b20      	ldr	r3, [pc, #128]	; (8002320 <MX_GPIO_Init+0xb0>)
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	4a1f      	ldr	r2, [pc, #124]	; (8002320 <MX_GPIO_Init+0xb0>)
 80022a2:	f043 0304 	orr.w	r3, r3, #4
 80022a6:	6193      	str	r3, [r2, #24]
 80022a8:	4b1d      	ldr	r3, [pc, #116]	; (8002320 <MX_GPIO_Init+0xb0>)
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	f003 0304 	and.w	r3, r3, #4
 80022b0:	60bb      	str	r3, [r7, #8]
 80022b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022b4:	4b1a      	ldr	r3, [pc, #104]	; (8002320 <MX_GPIO_Init+0xb0>)
 80022b6:	699b      	ldr	r3, [r3, #24]
 80022b8:	4a19      	ldr	r2, [pc, #100]	; (8002320 <MX_GPIO_Init+0xb0>)
 80022ba:	f043 0308 	orr.w	r3, r3, #8
 80022be:	6193      	str	r3, [r2, #24]
 80022c0:	4b17      	ldr	r3, [pc, #92]	; (8002320 <MX_GPIO_Init+0xb0>)
 80022c2:	699b      	ldr	r3, [r3, #24]
 80022c4:	f003 0308 	and.w	r3, r3, #8
 80022c8:	607b      	str	r3, [r7, #4]
 80022ca:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OLED_RST_Pin|OLED_DC_Pin, GPIO_PIN_SET);
 80022cc:	2201      	movs	r2, #1
 80022ce:	2150      	movs	r1, #80	; 0x50
 80022d0:	4814      	ldr	r0, [pc, #80]	; (8002324 <MX_GPIO_Init+0xb4>)
 80022d2:	f000 ffd3 	bl	800327c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_SET);
 80022d6:	2201      	movs	r2, #1
 80022d8:	2101      	movs	r1, #1
 80022da:	4813      	ldr	r0, [pc, #76]	; (8002328 <MX_GPIO_Init+0xb8>)
 80022dc:	f000 ffce 	bl	800327c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_RST_Pin OLED_DC_Pin */
  GPIO_InitStruct.Pin = OLED_RST_Pin|OLED_DC_Pin;
 80022e0:	2350      	movs	r3, #80	; 0x50
 80022e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022e4:	2301      	movs	r3, #1
 80022e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022e8:	2301      	movs	r3, #1
 80022ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022ec:	2303      	movs	r3, #3
 80022ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022f0:	f107 0310 	add.w	r3, r7, #16
 80022f4:	4619      	mov	r1, r3
 80022f6:	480b      	ldr	r0, [pc, #44]	; (8002324 <MX_GPIO_Init+0xb4>)
 80022f8:	f000 fe3c 	bl	8002f74 <HAL_GPIO_Init>

  /*Configure GPIO pin : OLED_CS_Pin */
  GPIO_InitStruct.Pin = OLED_CS_Pin;
 80022fc:	2301      	movs	r3, #1
 80022fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002300:	2301      	movs	r3, #1
 8002302:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002304:	2301      	movs	r3, #1
 8002306:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002308:	2303      	movs	r3, #3
 800230a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OLED_CS_GPIO_Port, &GPIO_InitStruct);
 800230c:	f107 0310 	add.w	r3, r7, #16
 8002310:	4619      	mov	r1, r3
 8002312:	4805      	ldr	r0, [pc, #20]	; (8002328 <MX_GPIO_Init+0xb8>)
 8002314:	f000 fe2e 	bl	8002f74 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002318:	bf00      	nop
 800231a:	3720      	adds	r7, #32
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40021000 	.word	0x40021000
 8002324:	40010800 	.word	0x40010800
 8002328:	40010c00 	.word	0x40010c00

0800232c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim1.Instance) {
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	4b06      	ldr	r3, [pc, #24]	; (8002354 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	429a      	cmp	r2, r3
 800233e:	d105      	bne.n	800234c <HAL_TIM_PeriodElapsedCallback+0x20>
		timeFlag = 1;
 8002340:	4b05      	ldr	r3, [pc, #20]	; (8002358 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8002342:	2201      	movs	r2, #1
 8002344:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim1);
 8002346:	4803      	ldr	r0, [pc, #12]	; (8002354 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8002348:	f001 fe7e 	bl	8004048 <HAL_TIM_Base_Start_IT>
	}

}
 800234c:	bf00      	nop
 800234e:	3708      	adds	r7, #8
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	20000254 	.word	0x20000254
 8002358:	2000032c 	.word	0x2000032c

0800235c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002360:	b672      	cpsid	i
}
 8002362:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002364:	e7fe      	b.n	8002364 <Error_Handler+0x8>
	...

08002368 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002368:	b480      	push	{r7}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800236e:	4b15      	ldr	r3, [pc, #84]	; (80023c4 <HAL_MspInit+0x5c>)
 8002370:	699b      	ldr	r3, [r3, #24]
 8002372:	4a14      	ldr	r2, [pc, #80]	; (80023c4 <HAL_MspInit+0x5c>)
 8002374:	f043 0301 	orr.w	r3, r3, #1
 8002378:	6193      	str	r3, [r2, #24]
 800237a:	4b12      	ldr	r3, [pc, #72]	; (80023c4 <HAL_MspInit+0x5c>)
 800237c:	699b      	ldr	r3, [r3, #24]
 800237e:	f003 0301 	and.w	r3, r3, #1
 8002382:	60bb      	str	r3, [r7, #8]
 8002384:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002386:	4b0f      	ldr	r3, [pc, #60]	; (80023c4 <HAL_MspInit+0x5c>)
 8002388:	69db      	ldr	r3, [r3, #28]
 800238a:	4a0e      	ldr	r2, [pc, #56]	; (80023c4 <HAL_MspInit+0x5c>)
 800238c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002390:	61d3      	str	r3, [r2, #28]
 8002392:	4b0c      	ldr	r3, [pc, #48]	; (80023c4 <HAL_MspInit+0x5c>)
 8002394:	69db      	ldr	r3, [r3, #28]
 8002396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800239a:	607b      	str	r3, [r7, #4]
 800239c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800239e:	4b0a      	ldr	r3, [pc, #40]	; (80023c8 <HAL_MspInit+0x60>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	60fb      	str	r3, [r7, #12]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80023aa:	60fb      	str	r3, [r7, #12]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80023b2:	60fb      	str	r3, [r7, #12]
 80023b4:	4a04      	ldr	r2, [pc, #16]	; (80023c8 <HAL_MspInit+0x60>)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023ba:	bf00      	nop
 80023bc:	3714      	adds	r7, #20
 80023be:	46bd      	mov	sp, r7
 80023c0:	bc80      	pop	{r7}
 80023c2:	4770      	bx	lr
 80023c4:	40021000 	.word	0x40021000
 80023c8:	40010000 	.word	0x40010000

080023cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b088      	sub	sp, #32
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d4:	f107 0310 	add.w	r3, r7, #16
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]
 80023dc:	605a      	str	r2, [r3, #4]
 80023de:	609a      	str	r2, [r3, #8]
 80023e0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a15      	ldr	r2, [pc, #84]	; (800243c <HAL_SPI_MspInit+0x70>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d123      	bne.n	8002434 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80023ec:	4b14      	ldr	r3, [pc, #80]	; (8002440 <HAL_SPI_MspInit+0x74>)
 80023ee:	699b      	ldr	r3, [r3, #24]
 80023f0:	4a13      	ldr	r2, [pc, #76]	; (8002440 <HAL_SPI_MspInit+0x74>)
 80023f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80023f6:	6193      	str	r3, [r2, #24]
 80023f8:	4b11      	ldr	r3, [pc, #68]	; (8002440 <HAL_SPI_MspInit+0x74>)
 80023fa:	699b      	ldr	r3, [r3, #24]
 80023fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002400:	60fb      	str	r3, [r7, #12]
 8002402:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002404:	4b0e      	ldr	r3, [pc, #56]	; (8002440 <HAL_SPI_MspInit+0x74>)
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	4a0d      	ldr	r2, [pc, #52]	; (8002440 <HAL_SPI_MspInit+0x74>)
 800240a:	f043 0304 	orr.w	r3, r3, #4
 800240e:	6193      	str	r3, [r2, #24]
 8002410:	4b0b      	ldr	r3, [pc, #44]	; (8002440 <HAL_SPI_MspInit+0x74>)
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	f003 0304 	and.w	r3, r3, #4
 8002418:	60bb      	str	r3, [r7, #8]
 800241a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800241c:	23a0      	movs	r3, #160	; 0xa0
 800241e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002420:	2302      	movs	r3, #2
 8002422:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002424:	2303      	movs	r3, #3
 8002426:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002428:	f107 0310 	add.w	r3, r7, #16
 800242c:	4619      	mov	r1, r3
 800242e:	4805      	ldr	r0, [pc, #20]	; (8002444 <HAL_SPI_MspInit+0x78>)
 8002430:	f000 fda0 	bl	8002f74 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002434:	bf00      	nop
 8002436:	3720      	adds	r7, #32
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	40013000 	.word	0x40013000
 8002440:	40021000 	.word	0x40021000
 8002444:	40010800 	.word	0x40010800

08002448 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002448:	b480      	push	{r7}
 800244a:	b085      	sub	sp, #20
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a09      	ldr	r2, [pc, #36]	; (800247c <HAL_TIM_Base_MspInit+0x34>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d10b      	bne.n	8002472 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800245a:	4b09      	ldr	r3, [pc, #36]	; (8002480 <HAL_TIM_Base_MspInit+0x38>)
 800245c:	699b      	ldr	r3, [r3, #24]
 800245e:	4a08      	ldr	r2, [pc, #32]	; (8002480 <HAL_TIM_Base_MspInit+0x38>)
 8002460:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002464:	6193      	str	r3, [r2, #24]
 8002466:	4b06      	ldr	r3, [pc, #24]	; (8002480 <HAL_TIM_Base_MspInit+0x38>)
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800246e:	60fb      	str	r3, [r7, #12]
 8002470:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002472:	bf00      	nop
 8002474:	3714      	adds	r7, #20
 8002476:	46bd      	mov	sp, r7
 8002478:	bc80      	pop	{r7}
 800247a:	4770      	bx	lr
 800247c:	40012c00 	.word	0x40012c00
 8002480:	40021000 	.word	0x40021000

08002484 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b08a      	sub	sp, #40	; 0x28
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800248c:	f107 0318 	add.w	r3, r7, #24
 8002490:	2200      	movs	r2, #0
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	605a      	str	r2, [r3, #4]
 8002496:	609a      	str	r2, [r3, #8]
 8002498:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a37      	ldr	r2, [pc, #220]	; (800257c <HAL_UART_MspInit+0xf8>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d132      	bne.n	800250a <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024a4:	4b36      	ldr	r3, [pc, #216]	; (8002580 <HAL_UART_MspInit+0xfc>)
 80024a6:	699b      	ldr	r3, [r3, #24]
 80024a8:	4a35      	ldr	r2, [pc, #212]	; (8002580 <HAL_UART_MspInit+0xfc>)
 80024aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024ae:	6193      	str	r3, [r2, #24]
 80024b0:	4b33      	ldr	r3, [pc, #204]	; (8002580 <HAL_UART_MspInit+0xfc>)
 80024b2:	699b      	ldr	r3, [r3, #24]
 80024b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024b8:	617b      	str	r3, [r7, #20]
 80024ba:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024bc:	4b30      	ldr	r3, [pc, #192]	; (8002580 <HAL_UART_MspInit+0xfc>)
 80024be:	699b      	ldr	r3, [r3, #24]
 80024c0:	4a2f      	ldr	r2, [pc, #188]	; (8002580 <HAL_UART_MspInit+0xfc>)
 80024c2:	f043 0304 	orr.w	r3, r3, #4
 80024c6:	6193      	str	r3, [r2, #24]
 80024c8:	4b2d      	ldr	r3, [pc, #180]	; (8002580 <HAL_UART_MspInit+0xfc>)
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	f003 0304 	and.w	r3, r3, #4
 80024d0:	613b      	str	r3, [r7, #16]
 80024d2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80024d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024da:	2302      	movs	r3, #2
 80024dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024de:	2303      	movs	r3, #3
 80024e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024e2:	f107 0318 	add.w	r3, r7, #24
 80024e6:	4619      	mov	r1, r3
 80024e8:	4826      	ldr	r0, [pc, #152]	; (8002584 <HAL_UART_MspInit+0x100>)
 80024ea:	f000 fd43 	bl	8002f74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80024ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024f4:	2300      	movs	r3, #0
 80024f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f8:	2300      	movs	r3, #0
 80024fa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024fc:	f107 0318 	add.w	r3, r7, #24
 8002500:	4619      	mov	r1, r3
 8002502:	4820      	ldr	r0, [pc, #128]	; (8002584 <HAL_UART_MspInit+0x100>)
 8002504:	f000 fd36 	bl	8002f74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002508:	e034      	b.n	8002574 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a1e      	ldr	r2, [pc, #120]	; (8002588 <HAL_UART_MspInit+0x104>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d12f      	bne.n	8002574 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002514:	4b1a      	ldr	r3, [pc, #104]	; (8002580 <HAL_UART_MspInit+0xfc>)
 8002516:	69db      	ldr	r3, [r3, #28]
 8002518:	4a19      	ldr	r2, [pc, #100]	; (8002580 <HAL_UART_MspInit+0xfc>)
 800251a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800251e:	61d3      	str	r3, [r2, #28]
 8002520:	4b17      	ldr	r3, [pc, #92]	; (8002580 <HAL_UART_MspInit+0xfc>)
 8002522:	69db      	ldr	r3, [r3, #28]
 8002524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002528:	60fb      	str	r3, [r7, #12]
 800252a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800252c:	4b14      	ldr	r3, [pc, #80]	; (8002580 <HAL_UART_MspInit+0xfc>)
 800252e:	699b      	ldr	r3, [r3, #24]
 8002530:	4a13      	ldr	r2, [pc, #76]	; (8002580 <HAL_UART_MspInit+0xfc>)
 8002532:	f043 0304 	orr.w	r3, r3, #4
 8002536:	6193      	str	r3, [r2, #24]
 8002538:	4b11      	ldr	r3, [pc, #68]	; (8002580 <HAL_UART_MspInit+0xfc>)
 800253a:	699b      	ldr	r3, [r3, #24]
 800253c:	f003 0304 	and.w	r3, r3, #4
 8002540:	60bb      	str	r3, [r7, #8]
 8002542:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002544:	2304      	movs	r3, #4
 8002546:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002548:	2302      	movs	r3, #2
 800254a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800254c:	2303      	movs	r3, #3
 800254e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002550:	f107 0318 	add.w	r3, r7, #24
 8002554:	4619      	mov	r1, r3
 8002556:	480b      	ldr	r0, [pc, #44]	; (8002584 <HAL_UART_MspInit+0x100>)
 8002558:	f000 fd0c 	bl	8002f74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800255c:	2308      	movs	r3, #8
 800255e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002560:	2300      	movs	r3, #0
 8002562:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002564:	2300      	movs	r3, #0
 8002566:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002568:	f107 0318 	add.w	r3, r7, #24
 800256c:	4619      	mov	r1, r3
 800256e:	4805      	ldr	r0, [pc, #20]	; (8002584 <HAL_UART_MspInit+0x100>)
 8002570:	f000 fd00 	bl	8002f74 <HAL_GPIO_Init>
}
 8002574:	bf00      	nop
 8002576:	3728      	adds	r7, #40	; 0x28
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	40013800 	.word	0x40013800
 8002580:	40021000 	.word	0x40021000
 8002584:	40010800 	.word	0x40010800
 8002588:	40004400 	.word	0x40004400

0800258c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002590:	e7fe      	b.n	8002590 <NMI_Handler+0x4>

08002592 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002592:	b480      	push	{r7}
 8002594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002596:	e7fe      	b.n	8002596 <HardFault_Handler+0x4>

08002598 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800259c:	e7fe      	b.n	800259c <MemManage_Handler+0x4>

0800259e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800259e:	b480      	push	{r7}
 80025a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025a2:	e7fe      	b.n	80025a2 <BusFault_Handler+0x4>

080025a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025a8:	e7fe      	b.n	80025a8 <UsageFault_Handler+0x4>

080025aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025aa:	b480      	push	{r7}
 80025ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025ae:	bf00      	nop
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bc80      	pop	{r7}
 80025b4:	4770      	bx	lr

080025b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025b6:	b480      	push	{r7}
 80025b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025ba:	bf00      	nop
 80025bc:	46bd      	mov	sp, r7
 80025be:	bc80      	pop	{r7}
 80025c0:	4770      	bx	lr

080025c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025c2:	b480      	push	{r7}
 80025c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025c6:	bf00      	nop
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bc80      	pop	{r7}
 80025cc:	4770      	bx	lr

080025ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025ce:	b580      	push	{r7, lr}
 80025d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025d2:	f000 facf 	bl	8002b74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025d6:	bf00      	nop
 80025d8:	bd80      	pop	{r7, pc}
	...

080025dc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80025e0:	4802      	ldr	r0, [pc, #8]	; (80025ec <TIM1_UP_IRQHandler+0x10>)
 80025e2:	f001 fddb 	bl	800419c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80025e6:	bf00      	nop
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	20000254 	.word	0x20000254

080025f0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	Uart_isr(&huart2);
 80025f4:	4803      	ldr	r0, [pc, #12]	; (8002604 <USART2_IRQHandler+0x14>)
 80025f6:	f000 fa29 	bl	8002a4c <Uart_isr>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80025fa:	4802      	ldr	r0, [pc, #8]	; (8002604 <USART2_IRQHandler+0x14>)
 80025fc:	f002 fc32 	bl	8004e64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002600:	bf00      	nop
 8002602:	bd80      	pop	{r7, pc}
 8002604:	200002e4 	.word	0x200002e4

08002608 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
  return 1;
 800260c:	2301      	movs	r3, #1
}
 800260e:	4618      	mov	r0, r3
 8002610:	46bd      	mov	sp, r7
 8002612:	bc80      	pop	{r7}
 8002614:	4770      	bx	lr

08002616 <_kill>:

int _kill(int pid, int sig)
{
 8002616:	b580      	push	{r7, lr}
 8002618:	b082      	sub	sp, #8
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
 800261e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002620:	f004 ff48 	bl	80074b4 <__errno>
 8002624:	4603      	mov	r3, r0
 8002626:	2216      	movs	r2, #22
 8002628:	601a      	str	r2, [r3, #0]
  return -1;
 800262a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800262e:	4618      	mov	r0, r3
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <_exit>:

void _exit (int status)
{
 8002636:	b580      	push	{r7, lr}
 8002638:	b082      	sub	sp, #8
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800263e:	f04f 31ff 	mov.w	r1, #4294967295
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f7ff ffe7 	bl	8002616 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002648:	e7fe      	b.n	8002648 <_exit+0x12>

0800264a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800264a:	b580      	push	{r7, lr}
 800264c:	b086      	sub	sp, #24
 800264e:	af00      	add	r7, sp, #0
 8002650:	60f8      	str	r0, [r7, #12]
 8002652:	60b9      	str	r1, [r7, #8]
 8002654:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002656:	2300      	movs	r3, #0
 8002658:	617b      	str	r3, [r7, #20]
 800265a:	e00a      	b.n	8002672 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800265c:	f3af 8000 	nop.w
 8002660:	4601      	mov	r1, r0
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	1c5a      	adds	r2, r3, #1
 8002666:	60ba      	str	r2, [r7, #8]
 8002668:	b2ca      	uxtb	r2, r1
 800266a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	3301      	adds	r3, #1
 8002670:	617b      	str	r3, [r7, #20]
 8002672:	697a      	ldr	r2, [r7, #20]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	429a      	cmp	r2, r3
 8002678:	dbf0      	blt.n	800265c <_read+0x12>
  }

  return len;
 800267a:	687b      	ldr	r3, [r7, #4]
}
 800267c:	4618      	mov	r0, r3
 800267e:	3718      	adds	r7, #24
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b086      	sub	sp, #24
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002690:	2300      	movs	r3, #0
 8002692:	617b      	str	r3, [r7, #20]
 8002694:	e009      	b.n	80026aa <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	1c5a      	adds	r2, r3, #1
 800269a:	60ba      	str	r2, [r7, #8]
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	4618      	mov	r0, r3
 80026a0:	f7fe fd84 	bl	80011ac <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	3301      	adds	r3, #1
 80026a8:	617b      	str	r3, [r7, #20]
 80026aa:	697a      	ldr	r2, [r7, #20]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	dbf1      	blt.n	8002696 <_write+0x12>
  }
  return len;
 80026b2:	687b      	ldr	r3, [r7, #4]
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3718      	adds	r7, #24
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <_close>:

int _close(int file)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80026c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bc80      	pop	{r7}
 80026d0:	4770      	bx	lr

080026d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026d2:	b480      	push	{r7}
 80026d4:	b083      	sub	sp, #12
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
 80026da:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80026e2:	605a      	str	r2, [r3, #4]
  return 0;
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bc80      	pop	{r7}
 80026ee:	4770      	bx	lr

080026f0 <_isatty>:

int _isatty(int file)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80026f8:	2301      	movs	r3, #1
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	bc80      	pop	{r7}
 8002702:	4770      	bx	lr

08002704 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002704:	b480      	push	{r7}
 8002706:	b085      	sub	sp, #20
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	3714      	adds	r7, #20
 8002716:	46bd      	mov	sp, r7
 8002718:	bc80      	pop	{r7}
 800271a:	4770      	bx	lr

0800271c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b086      	sub	sp, #24
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002724:	4a14      	ldr	r2, [pc, #80]	; (8002778 <_sbrk+0x5c>)
 8002726:	4b15      	ldr	r3, [pc, #84]	; (800277c <_sbrk+0x60>)
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002730:	4b13      	ldr	r3, [pc, #76]	; (8002780 <_sbrk+0x64>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d102      	bne.n	800273e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002738:	4b11      	ldr	r3, [pc, #68]	; (8002780 <_sbrk+0x64>)
 800273a:	4a12      	ldr	r2, [pc, #72]	; (8002784 <_sbrk+0x68>)
 800273c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800273e:	4b10      	ldr	r3, [pc, #64]	; (8002780 <_sbrk+0x64>)
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4413      	add	r3, r2
 8002746:	693a      	ldr	r2, [r7, #16]
 8002748:	429a      	cmp	r2, r3
 800274a:	d207      	bcs.n	800275c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800274c:	f004 feb2 	bl	80074b4 <__errno>
 8002750:	4603      	mov	r3, r0
 8002752:	220c      	movs	r2, #12
 8002754:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002756:	f04f 33ff 	mov.w	r3, #4294967295
 800275a:	e009      	b.n	8002770 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800275c:	4b08      	ldr	r3, [pc, #32]	; (8002780 <_sbrk+0x64>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002762:	4b07      	ldr	r3, [pc, #28]	; (8002780 <_sbrk+0x64>)
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4413      	add	r3, r2
 800276a:	4a05      	ldr	r2, [pc, #20]	; (8002780 <_sbrk+0x64>)
 800276c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800276e:	68fb      	ldr	r3, [r7, #12]
}
 8002770:	4618      	mov	r0, r3
 8002772:	3718      	adds	r7, #24
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	20005000 	.word	0x20005000
 800277c:	00000400 	.word	0x00000400
 8002780:	200003e0 	.word	0x200003e0
 8002784:	20000c00 	.word	0x20000c00

08002788 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800278c:	bf00      	nop
 800278e:	46bd      	mov	sp, r7
 8002790:	bc80      	pop	{r7}
 8002792:	4770      	bx	lr

08002794 <u8x8_stm32_gpio_and_delay>:
#define TX_TIMEOUT		100

extern SPI_HandleTypeDef hspi1;

uint8_t u8x8_stm32_gpio_and_delay(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	607b      	str	r3, [r7, #4]
 800279e:	460b      	mov	r3, r1
 80027a0:	72fb      	strb	r3, [r7, #11]
 80027a2:	4613      	mov	r3, r2
 80027a4:	72bb      	strb	r3, [r7, #10]
	/* STM32 supports HW SPI, Remove unused cases like U8X8_MSG_DELAY_XXX & U8X8_MSG_GPIO_XXX */
	switch(msg)
 80027a6:	7afb      	ldrb	r3, [r7, #11]
 80027a8:	3b28      	subs	r3, #40	; 0x28
 80027aa:	2b23      	cmp	r3, #35	; 0x23
 80027ac:	d864      	bhi.n	8002878 <u8x8_stm32_gpio_and_delay+0xe4>
 80027ae:	a201      	add	r2, pc, #4	; (adr r2, 80027b4 <u8x8_stm32_gpio_and_delay+0x20>)
 80027b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027b4:	08002879 	.word	0x08002879
 80027b8:	08002845 	.word	0x08002845
 80027bc:	08002879 	.word	0x08002879
 80027c0:	08002879 	.word	0x08002879
 80027c4:	08002879 	.word	0x08002879
 80027c8:	08002879 	.word	0x08002879
 80027cc:	08002879 	.word	0x08002879
 80027d0:	08002879 	.word	0x08002879
 80027d4:	08002879 	.word	0x08002879
 80027d8:	08002879 	.word	0x08002879
 80027dc:	08002879 	.word	0x08002879
 80027e0:	08002879 	.word	0x08002879
 80027e4:	08002879 	.word	0x08002879
 80027e8:	08002879 	.word	0x08002879
 80027ec:	08002879 	.word	0x08002879
 80027f0:	08002879 	.word	0x08002879
 80027f4:	08002879 	.word	0x08002879
 80027f8:	08002879 	.word	0x08002879
 80027fc:	08002879 	.word	0x08002879
 8002800:	08002879 	.word	0x08002879
 8002804:	08002879 	.word	0x08002879
 8002808:	08002879 	.word	0x08002879
 800280c:	08002879 	.word	0x08002879
 8002810:	08002879 	.word	0x08002879
 8002814:	08002879 	.word	0x08002879
 8002818:	08002879 	.word	0x08002879
 800281c:	08002879 	.word	0x08002879
 8002820:	08002879 	.word	0x08002879
 8002824:	08002879 	.word	0x08002879
 8002828:	08002879 	.word	0x08002879
 800282c:	08002879 	.word	0x08002879
 8002830:	08002879 	.word	0x08002879
 8002834:	08002879 	.word	0x08002879
 8002838:	0800284f 	.word	0x0800284f
 800283c:	0800285d 	.word	0x0800285d
 8002840:	0800286b 	.word	0x0800286b
	case U8X8_MSG_GPIO_AND_DELAY_INIT:
		/* Insert codes for initialization */
		break;
	case U8X8_MSG_DELAY_MILLI:
		/* ms Delay */
		HAL_Delay(arg_int);
 8002844:	7abb      	ldrb	r3, [r7, #10]
 8002846:	4618      	mov	r0, r3
 8002848:	f000 f9b0 	bl	8002bac <HAL_Delay>
		break;
 800284c:	e014      	b.n	8002878 <u8x8_stm32_gpio_and_delay+0xe4>
	case U8X8_MSG_GPIO_CS:
		/* Insert codes for SS pin control */
		HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, arg_int);
 800284e:	7abb      	ldrb	r3, [r7, #10]
 8002850:	461a      	mov	r2, r3
 8002852:	2101      	movs	r1, #1
 8002854:	480b      	ldr	r0, [pc, #44]	; (8002884 <u8x8_stm32_gpio_and_delay+0xf0>)
 8002856:	f000 fd11 	bl	800327c <HAL_GPIO_WritePin>
		break;
 800285a:	e00d      	b.n	8002878 <u8x8_stm32_gpio_and_delay+0xe4>
	case U8X8_MSG_GPIO_DC:
		/* Insert codes for DC pin control */
		HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, arg_int);
 800285c:	7abb      	ldrb	r3, [r7, #10]
 800285e:	461a      	mov	r2, r3
 8002860:	2140      	movs	r1, #64	; 0x40
 8002862:	4809      	ldr	r0, [pc, #36]	; (8002888 <u8x8_stm32_gpio_and_delay+0xf4>)
 8002864:	f000 fd0a 	bl	800327c <HAL_GPIO_WritePin>
		break;
 8002868:	e006      	b.n	8002878 <u8x8_stm32_gpio_and_delay+0xe4>
	case U8X8_MSG_GPIO_RESET:
		/* Insert codes for RST pin control */
		HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, arg_int);
 800286a:	7abb      	ldrb	r3, [r7, #10]
 800286c:	461a      	mov	r2, r3
 800286e:	2110      	movs	r1, #16
 8002870:	4805      	ldr	r0, [pc, #20]	; (8002888 <u8x8_stm32_gpio_and_delay+0xf4>)
 8002872:	f000 fd03 	bl	800327c <HAL_GPIO_WritePin>
		break;
 8002876:	bf00      	nop
	}
	return 1;
 8002878:	2301      	movs	r3, #1
}
 800287a:	4618      	mov	r0, r3
 800287c:	3710      	adds	r7, #16
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	40010c00 	.word	0x40010c00
 8002888:	40010800 	.word	0x40010800

0800288c <u8x8_byte_stm32_hw_spi>:

uint8_t u8x8_byte_stm32_hw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	607b      	str	r3, [r7, #4]
 8002896:	460b      	mov	r3, r1
 8002898:	72fb      	strb	r3, [r7, #11]
 800289a:	4613      	mov	r3, r2
 800289c:	72bb      	strb	r3, [r7, #10]
	switch(msg) {
 800289e:	7afb      	ldrb	r3, [r7, #11]
 80028a0:	3b14      	subs	r3, #20
 80028a2:	2b0c      	cmp	r3, #12
 80028a4:	d847      	bhi.n	8002936 <u8x8_byte_stm32_hw_spi+0xaa>
 80028a6:	a201      	add	r2, pc, #4	; (adr r2, 80028ac <u8x8_byte_stm32_hw_spi+0x20>)
 80028a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ac:	0800293b 	.word	0x0800293b
 80028b0:	08002937 	.word	0x08002937
 80028b4:	08002937 	.word	0x08002937
 80028b8:	080028e1 	.word	0x080028e1
 80028bc:	08002907 	.word	0x08002907
 80028c0:	0800291f 	.word	0x0800291f
 80028c4:	08002937 	.word	0x08002937
 80028c8:	08002937 	.word	0x08002937
 80028cc:	08002937 	.word	0x08002937
 80028d0:	08002937 	.word	0x08002937
 80028d4:	08002937 	.word	0x08002937
 80028d8:	08002937 	.word	0x08002937
 80028dc:	080028f9 	.word	0x080028f9
	case U8X8_MSG_BYTE_SEND:
		/* Insert codes to transmit data */
		if(HAL_SPI_Transmit(&hspi1, arg_ptr, arg_int, TX_TIMEOUT) != HAL_OK) return 0;
 80028e0:	7abb      	ldrb	r3, [r7, #10]
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	2364      	movs	r3, #100	; 0x64
 80028e6:	6879      	ldr	r1, [r7, #4]
 80028e8:	4818      	ldr	r0, [pc, #96]	; (800294c <u8x8_byte_stm32_hw_spi+0xc0>)
 80028ea:	f001 f973 	bl	8003bd4 <HAL_SPI_Transmit>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d024      	beq.n	800293e <u8x8_byte_stm32_hw_spi+0xb2>
 80028f4:	2300      	movs	r3, #0
 80028f6:	e024      	b.n	8002942 <u8x8_byte_stm32_hw_spi+0xb6>
	case U8X8_MSG_BYTE_INIT:
		/* Insert codes to begin SPI transmission */
		break;
	case U8X8_MSG_BYTE_SET_DC:
		/* Control DC pin, U8X8_MSG_GPIO_DC will be called */
		u8x8_gpio_SetDC(u8x8, arg_int);
 80028f8:	7abb      	ldrb	r3, [r7, #10]
 80028fa:	461a      	mov	r2, r3
 80028fc:	214a      	movs	r1, #74	; 0x4a
 80028fe:	68f8      	ldr	r0, [r7, #12]
 8002900:	f004 fd68 	bl	80073d4 <u8x8_gpio_call>
		break;
 8002904:	e01c      	b.n	8002940 <u8x8_byte_stm32_hw_spi+0xb4>
	case U8X8_MSG_BYTE_START_TRANSFER:
		/* Select slave, U8X8_MSG_GPIO_CS will be called */
		u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_enable_level);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	461a      	mov	r2, r3
 800290e:	2149      	movs	r1, #73	; 0x49
 8002910:	68f8      	ldr	r0, [r7, #12]
 8002912:	f004 fd5f 	bl	80073d4 <u8x8_gpio_call>
		HAL_Delay(1);
 8002916:	2001      	movs	r0, #1
 8002918:	f000 f948 	bl	8002bac <HAL_Delay>
		break;
 800291c:	e010      	b.n	8002940 <u8x8_byte_stm32_hw_spi+0xb4>
	case U8X8_MSG_BYTE_END_TRANSFER:
		HAL_Delay(1);
 800291e:	2001      	movs	r0, #1
 8002920:	f000 f944 	bl	8002bac <HAL_Delay>
		/* Insert codes to end SPI transmission */
		u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	785b      	ldrb	r3, [r3, #1]
 800292a:	461a      	mov	r2, r3
 800292c:	2149      	movs	r1, #73	; 0x49
 800292e:	68f8      	ldr	r0, [r7, #12]
 8002930:	f004 fd50 	bl	80073d4 <u8x8_gpio_call>
		break;
 8002934:	e004      	b.n	8002940 <u8x8_byte_stm32_hw_spi+0xb4>
	default:
		return 0;
 8002936:	2300      	movs	r3, #0
 8002938:	e003      	b.n	8002942 <u8x8_byte_stm32_hw_spi+0xb6>
		break;
 800293a:	bf00      	nop
 800293c:	e000      	b.n	8002940 <u8x8_byte_stm32_hw_spi+0xb4>
		break;
 800293e:	bf00      	nop
	}
	return 1;
 8002940:	2301      	movs	r3, #1
}
 8002942:	4618      	mov	r0, r3
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	200001fc 	.word	0x200001fc

08002950 <rxBufferInit>:
#include "uart.h"

ring_buffer_t uart_rx={{0},0,0};
//extern UART_HandleTypeDef huart2;

void rxBufferInit(ring_buffer_t *uart) {
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
	uart->head = 0;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
	uart->tail = 0;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
	memset(uart->buffer, 0, sizeof(RX_BUFFER_SIZE));
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2204      	movs	r2, #4
 800296c:	2100      	movs	r1, #0
 800296e:	4618      	mov	r0, r3
 8002970:	f004 fdd8 	bl	8007524 <memset>
}
 8002974:	bf00      	nop
 8002976:	3708      	adds	r7, #8
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}

0800297c <push>:

void push(ring_buffer_t *uart, uint8_t ch) {
 800297c:	b480      	push	{r7}
 800297e:	b085      	sub	sp, #20
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	460b      	mov	r3, r1
 8002986:	70fb      	strb	r3, [r7, #3]
	uint16_t i = (unsigned int) (uart->head + 1) % RX_BUFFER_SIZE;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 800298e:	b29b      	uxth	r3, r3
 8002990:	3301      	adds	r3, #1
 8002992:	b29b      	uxth	r3, r3
 8002994:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002998:	81fb      	strh	r3, [r7, #14]
	if (i != uart->tail) {
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	89fa      	ldrh	r2, [r7, #14]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d00b      	beq.n	80029c0 <push+0x44>
		uart->buffer[uart->head] = ch;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	4619      	mov	r1, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	78fa      	ldrb	r2, [r7, #3]
 80029b6:	545a      	strb	r2, [r3, r1]
		uart->head = i;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	89fa      	ldrh	r2, [r7, #14]
 80029bc:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
	}
}
 80029c0:	bf00      	nop
 80029c2:	3714      	adds	r7, #20
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bc80      	pop	{r7}
 80029c8:	4770      	bx	lr

080029ca <pop>:

uint8_t pop(ring_buffer_t *uart) {
 80029ca:	b480      	push	{r7}
 80029cc:	b085      	sub	sp, #20
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]

	if (uart->head == uart->tail) {
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 80029d8:	b29a      	uxth	r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d101      	bne.n	80029ea <pop+0x20>
		return -1;
 80029e6:	23ff      	movs	r3, #255	; 0xff
 80029e8:	e014      	b.n	8002a14 <pop+0x4a>
	} else {

		unsigned char cpop = uart->buffer[uart->tail];
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	461a      	mov	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	5c9b      	ldrb	r3, [r3, r2]
 80029f8:	73fb      	strb	r3, [r7, #15]
		uart->tail = (uint16_t) (uart->tail + 1) % RX_BUFFER_SIZE;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	3301      	adds	r3, #1
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a0a:	b29a      	uxth	r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402

		return cpop;
 8002a12:	7bfb      	ldrb	r3, [r7, #15]

	}
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3714      	adds	r7, #20
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bc80      	pop	{r7}
 8002a1c:	4770      	bx	lr

08002a1e <uart_available>:

int8_t uart_available(ring_buffer_t *uart) {
 8002a1e:	b480      	push	{r7}
 8002a20:	b085      	sub	sp, #20
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]

	uint8_t n = (unsigned int) (RX_BUFFER_SIZE + (uart->head) - (uart->tail))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	b2da      	uxtb	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	73fb      	strb	r3, [r7, #15]
			% RX_BUFFER_SIZE;
	return n;
 8002a3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3714      	adds	r7, #20
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bc80      	pop	{r7}
 8002a4a:	4770      	bx	lr

08002a4c <Uart_isr>:

void Uart_isr(UART_HandleTypeDef *huart) {
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b086      	sub	sp, #24
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
	uint32_t isrflags = READ_REG(huart->Instance->SR);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	617b      	str	r3, [r7, #20]
	uint32_t cr1its = READ_REG(huart->Instance->CR1);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	613b      	str	r3, [r7, #16]

	/* if DR is not empty and the Rx Int is enabled */
	if (((isrflags & USART_SR_RXNE) != RESET)
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	f003 0320 	and.w	r3, r3, #32
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d011      	beq.n	8002a92 <Uart_isr+0x46>
			&& ((cr1its & USART_CR1_RXNEIE) != RESET)) {
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	f003 0320 	and.w	r3, r3, #32
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d00c      	beq.n	8002a92 <Uart_isr+0x46>
		 * @note   RXNE flag can be also cleared by a read to the USART_DR register.
		 * @note   TC flag can be also cleared by software sequence: a read operation to
		 *          USART_SR register followed by a write operation to USART_DR register.
		 * @note   TXE flag is cleared only by a write to the USART_DR register.
		 *********************/
		huart->Instance->SR; /* Read status register */
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
		unsigned char c = huart->Instance->DR; /* Read data register */
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	73fb      	strb	r3, [r7, #15]
		push(&uart_rx, c);  // store data in buffer
 8002a86:	7bfb      	ldrb	r3, [r7, #15]
 8002a88:	4619      	mov	r1, r3
 8002a8a:	4803      	ldr	r0, [pc, #12]	; (8002a98 <Uart_isr+0x4c>)
 8002a8c:	f7ff ff76 	bl	800297c <push>
		return;
 8002a90:	bf00      	nop
	}
}
 8002a92:	3718      	adds	r7, #24
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	200003e4 	.word	0x200003e4

08002a9c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002a9c:	f7ff fe74 	bl	8002788 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002aa0:	480b      	ldr	r0, [pc, #44]	; (8002ad0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002aa2:	490c      	ldr	r1, [pc, #48]	; (8002ad4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002aa4:	4a0c      	ldr	r2, [pc, #48]	; (8002ad8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002aa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002aa8:	e002      	b.n	8002ab0 <LoopCopyDataInit>

08002aaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002aaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002aac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002aae:	3304      	adds	r3, #4

08002ab0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ab0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ab2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ab4:	d3f9      	bcc.n	8002aaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ab6:	4a09      	ldr	r2, [pc, #36]	; (8002adc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002ab8:	4c09      	ldr	r4, [pc, #36]	; (8002ae0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002aba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002abc:	e001      	b.n	8002ac2 <LoopFillZerobss>

08002abe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002abe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ac0:	3204      	adds	r2, #4

08002ac2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ac2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ac4:	d3fb      	bcc.n	8002abe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002ac6:	f004 fcfb 	bl	80074c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002aca:	f7fe fc9d 	bl	8001408 <main>
  bx lr
 8002ace:	4770      	bx	lr
  ldr r0, =_sdata
 8002ad0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ad4:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002ad8:	0800e4f8 	.word	0x0800e4f8
  ldr r2, =_sbss
 8002adc:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002ae0:	20000bfc 	.word	0x20000bfc

08002ae4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ae4:	e7fe      	b.n	8002ae4 <ADC1_2_IRQHandler>
	...

08002ae8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002aec:	4b08      	ldr	r3, [pc, #32]	; (8002b10 <HAL_Init+0x28>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a07      	ldr	r2, [pc, #28]	; (8002b10 <HAL_Init+0x28>)
 8002af2:	f043 0310 	orr.w	r3, r3, #16
 8002af6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002af8:	2003      	movs	r0, #3
 8002afa:	f000 f947 	bl	8002d8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002afe:	200f      	movs	r0, #15
 8002b00:	f000 f808 	bl	8002b14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b04:	f7ff fc30 	bl	8002368 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	40022000 	.word	0x40022000

08002b14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b1c:	4b12      	ldr	r3, [pc, #72]	; (8002b68 <HAL_InitTick+0x54>)
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	4b12      	ldr	r3, [pc, #72]	; (8002b6c <HAL_InitTick+0x58>)
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	4619      	mov	r1, r3
 8002b26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b32:	4618      	mov	r0, r3
 8002b34:	f000 f95f 	bl	8002df6 <HAL_SYSTICK_Config>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e00e      	b.n	8002b60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2b0f      	cmp	r3, #15
 8002b46:	d80a      	bhi.n	8002b5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b48:	2200      	movs	r2, #0
 8002b4a:	6879      	ldr	r1, [r7, #4]
 8002b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b50:	f000 f927 	bl	8002da2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b54:	4a06      	ldr	r2, [pc, #24]	; (8002b70 <HAL_InitTick+0x5c>)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	e000      	b.n	8002b60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3708      	adds	r7, #8
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	20000000 	.word	0x20000000
 8002b6c:	20000008 	.word	0x20000008
 8002b70:	20000004 	.word	0x20000004

08002b74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b78:	4b05      	ldr	r3, [pc, #20]	; (8002b90 <HAL_IncTick+0x1c>)
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	4b05      	ldr	r3, [pc, #20]	; (8002b94 <HAL_IncTick+0x20>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4413      	add	r3, r2
 8002b84:	4a03      	ldr	r2, [pc, #12]	; (8002b94 <HAL_IncTick+0x20>)
 8002b86:	6013      	str	r3, [r2, #0]
}
 8002b88:	bf00      	nop
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bc80      	pop	{r7}
 8002b8e:	4770      	bx	lr
 8002b90:	20000008 	.word	0x20000008
 8002b94:	200007e8 	.word	0x200007e8

08002b98 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	af00      	add	r7, sp, #0
  return uwTick;
 8002b9c:	4b02      	ldr	r3, [pc, #8]	; (8002ba8 <HAL_GetTick+0x10>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bc80      	pop	{r7}
 8002ba6:	4770      	bx	lr
 8002ba8:	200007e8 	.word	0x200007e8

08002bac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bb4:	f7ff fff0 	bl	8002b98 <HAL_GetTick>
 8002bb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc4:	d005      	beq.n	8002bd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bc6:	4b0a      	ldr	r3, [pc, #40]	; (8002bf0 <HAL_Delay+0x44>)
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	461a      	mov	r2, r3
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	4413      	add	r3, r2
 8002bd0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002bd2:	bf00      	nop
 8002bd4:	f7ff ffe0 	bl	8002b98 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d8f7      	bhi.n	8002bd4 <HAL_Delay+0x28>
  {
  }
}
 8002be4:	bf00      	nop
 8002be6:	bf00      	nop
 8002be8:	3710      	adds	r7, #16
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	20000008 	.word	0x20000008

08002bf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b085      	sub	sp, #20
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f003 0307 	and.w	r3, r3, #7
 8002c02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c04:	4b0c      	ldr	r3, [pc, #48]	; (8002c38 <__NVIC_SetPriorityGrouping+0x44>)
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c0a:	68ba      	ldr	r2, [r7, #8]
 8002c0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c10:	4013      	ands	r3, r2
 8002c12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c26:	4a04      	ldr	r2, [pc, #16]	; (8002c38 <__NVIC_SetPriorityGrouping+0x44>)
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	60d3      	str	r3, [r2, #12]
}
 8002c2c:	bf00      	nop
 8002c2e:	3714      	adds	r7, #20
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bc80      	pop	{r7}
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	e000ed00 	.word	0xe000ed00

08002c3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c40:	4b04      	ldr	r3, [pc, #16]	; (8002c54 <__NVIC_GetPriorityGrouping+0x18>)
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	0a1b      	lsrs	r3, r3, #8
 8002c46:	f003 0307 	and.w	r3, r3, #7
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bc80      	pop	{r7}
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	e000ed00 	.word	0xe000ed00

08002c58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	4603      	mov	r3, r0
 8002c60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	db0b      	blt.n	8002c82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c6a:	79fb      	ldrb	r3, [r7, #7]
 8002c6c:	f003 021f 	and.w	r2, r3, #31
 8002c70:	4906      	ldr	r1, [pc, #24]	; (8002c8c <__NVIC_EnableIRQ+0x34>)
 8002c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c76:	095b      	lsrs	r3, r3, #5
 8002c78:	2001      	movs	r0, #1
 8002c7a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c82:	bf00      	nop
 8002c84:	370c      	adds	r7, #12
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bc80      	pop	{r7}
 8002c8a:	4770      	bx	lr
 8002c8c:	e000e100 	.word	0xe000e100

08002c90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	4603      	mov	r3, r0
 8002c98:	6039      	str	r1, [r7, #0]
 8002c9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	db0a      	blt.n	8002cba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	b2da      	uxtb	r2, r3
 8002ca8:	490c      	ldr	r1, [pc, #48]	; (8002cdc <__NVIC_SetPriority+0x4c>)
 8002caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cae:	0112      	lsls	r2, r2, #4
 8002cb0:	b2d2      	uxtb	r2, r2
 8002cb2:	440b      	add	r3, r1
 8002cb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cb8:	e00a      	b.n	8002cd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	b2da      	uxtb	r2, r3
 8002cbe:	4908      	ldr	r1, [pc, #32]	; (8002ce0 <__NVIC_SetPriority+0x50>)
 8002cc0:	79fb      	ldrb	r3, [r7, #7]
 8002cc2:	f003 030f 	and.w	r3, r3, #15
 8002cc6:	3b04      	subs	r3, #4
 8002cc8:	0112      	lsls	r2, r2, #4
 8002cca:	b2d2      	uxtb	r2, r2
 8002ccc:	440b      	add	r3, r1
 8002cce:	761a      	strb	r2, [r3, #24]
}
 8002cd0:	bf00      	nop
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bc80      	pop	{r7}
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	e000e100 	.word	0xe000e100
 8002ce0:	e000ed00 	.word	0xe000ed00

08002ce4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b089      	sub	sp, #36	; 0x24
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f003 0307 	and.w	r3, r3, #7
 8002cf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	f1c3 0307 	rsb	r3, r3, #7
 8002cfe:	2b04      	cmp	r3, #4
 8002d00:	bf28      	it	cs
 8002d02:	2304      	movcs	r3, #4
 8002d04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	3304      	adds	r3, #4
 8002d0a:	2b06      	cmp	r3, #6
 8002d0c:	d902      	bls.n	8002d14 <NVIC_EncodePriority+0x30>
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	3b03      	subs	r3, #3
 8002d12:	e000      	b.n	8002d16 <NVIC_EncodePriority+0x32>
 8002d14:	2300      	movs	r3, #0
 8002d16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d18:	f04f 32ff 	mov.w	r2, #4294967295
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d22:	43da      	mvns	r2, r3
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	401a      	ands	r2, r3
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d2c:	f04f 31ff 	mov.w	r1, #4294967295
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	fa01 f303 	lsl.w	r3, r1, r3
 8002d36:	43d9      	mvns	r1, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d3c:	4313      	orrs	r3, r2
         );
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3724      	adds	r7, #36	; 0x24
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bc80      	pop	{r7}
 8002d46:	4770      	bx	lr

08002d48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	3b01      	subs	r3, #1
 8002d54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d58:	d301      	bcc.n	8002d5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e00f      	b.n	8002d7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d5e:	4a0a      	ldr	r2, [pc, #40]	; (8002d88 <SysTick_Config+0x40>)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	3b01      	subs	r3, #1
 8002d64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d66:	210f      	movs	r1, #15
 8002d68:	f04f 30ff 	mov.w	r0, #4294967295
 8002d6c:	f7ff ff90 	bl	8002c90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d70:	4b05      	ldr	r3, [pc, #20]	; (8002d88 <SysTick_Config+0x40>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d76:	4b04      	ldr	r3, [pc, #16]	; (8002d88 <SysTick_Config+0x40>)
 8002d78:	2207      	movs	r2, #7
 8002d7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3708      	adds	r7, #8
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	e000e010 	.word	0xe000e010

08002d8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f7ff ff2d 	bl	8002bf4 <__NVIC_SetPriorityGrouping>
}
 8002d9a:	bf00      	nop
 8002d9c:	3708      	adds	r7, #8
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b086      	sub	sp, #24
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	4603      	mov	r3, r0
 8002daa:	60b9      	str	r1, [r7, #8]
 8002dac:	607a      	str	r2, [r7, #4]
 8002dae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002db0:	2300      	movs	r3, #0
 8002db2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002db4:	f7ff ff42 	bl	8002c3c <__NVIC_GetPriorityGrouping>
 8002db8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	68b9      	ldr	r1, [r7, #8]
 8002dbe:	6978      	ldr	r0, [r7, #20]
 8002dc0:	f7ff ff90 	bl	8002ce4 <NVIC_EncodePriority>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dca:	4611      	mov	r1, r2
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7ff ff5f 	bl	8002c90 <__NVIC_SetPriority>
}
 8002dd2:	bf00      	nop
 8002dd4:	3718      	adds	r7, #24
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b082      	sub	sp, #8
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	4603      	mov	r3, r0
 8002de2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7ff ff35 	bl	8002c58 <__NVIC_EnableIRQ>
}
 8002dee:	bf00      	nop
 8002df0:	3708      	adds	r7, #8
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b082      	sub	sp, #8
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f7ff ffa2 	bl	8002d48 <SysTick_Config>
 8002e04:	4603      	mov	r3, r0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3708      	adds	r7, #8
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}

08002e0e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e0e:	b480      	push	{r7}
 8002e10:	b085      	sub	sp, #20
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e16:	2300      	movs	r3, #0
 8002e18:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d008      	beq.n	8002e38 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2204      	movs	r2, #4
 8002e2a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e020      	b.n	8002e7a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f022 020e 	bic.w	r2, r2, #14
 8002e46:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f022 0201 	bic.w	r2, r2, #1
 8002e56:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e60:	2101      	movs	r1, #1
 8002e62:	fa01 f202 	lsl.w	r2, r1, r2
 8002e66:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3714      	adds	r7, #20
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bc80      	pop	{r7}
 8002e82:	4770      	bx	lr

08002e84 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d005      	beq.n	8002ea8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2204      	movs	r2, #4
 8002ea0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	73fb      	strb	r3, [r7, #15]
 8002ea6:	e051      	b.n	8002f4c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f022 020e 	bic.w	r2, r2, #14
 8002eb6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f022 0201 	bic.w	r2, r2, #1
 8002ec6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a22      	ldr	r2, [pc, #136]	; (8002f58 <HAL_DMA_Abort_IT+0xd4>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d029      	beq.n	8002f26 <HAL_DMA_Abort_IT+0xa2>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a21      	ldr	r2, [pc, #132]	; (8002f5c <HAL_DMA_Abort_IT+0xd8>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d022      	beq.n	8002f22 <HAL_DMA_Abort_IT+0x9e>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a1f      	ldr	r2, [pc, #124]	; (8002f60 <HAL_DMA_Abort_IT+0xdc>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d01a      	beq.n	8002f1c <HAL_DMA_Abort_IT+0x98>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a1e      	ldr	r2, [pc, #120]	; (8002f64 <HAL_DMA_Abort_IT+0xe0>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d012      	beq.n	8002f16 <HAL_DMA_Abort_IT+0x92>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a1c      	ldr	r2, [pc, #112]	; (8002f68 <HAL_DMA_Abort_IT+0xe4>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d00a      	beq.n	8002f10 <HAL_DMA_Abort_IT+0x8c>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a1b      	ldr	r2, [pc, #108]	; (8002f6c <HAL_DMA_Abort_IT+0xe8>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d102      	bne.n	8002f0a <HAL_DMA_Abort_IT+0x86>
 8002f04:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002f08:	e00e      	b.n	8002f28 <HAL_DMA_Abort_IT+0xa4>
 8002f0a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f0e:	e00b      	b.n	8002f28 <HAL_DMA_Abort_IT+0xa4>
 8002f10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f14:	e008      	b.n	8002f28 <HAL_DMA_Abort_IT+0xa4>
 8002f16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f1a:	e005      	b.n	8002f28 <HAL_DMA_Abort_IT+0xa4>
 8002f1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f20:	e002      	b.n	8002f28 <HAL_DMA_Abort_IT+0xa4>
 8002f22:	2310      	movs	r3, #16
 8002f24:	e000      	b.n	8002f28 <HAL_DMA_Abort_IT+0xa4>
 8002f26:	2301      	movs	r3, #1
 8002f28:	4a11      	ldr	r2, [pc, #68]	; (8002f70 <HAL_DMA_Abort_IT+0xec>)
 8002f2a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d003      	beq.n	8002f4c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	4798      	blx	r3
    } 
  }
  return status;
 8002f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3710      	adds	r7, #16
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	40020008 	.word	0x40020008
 8002f5c:	4002001c 	.word	0x4002001c
 8002f60:	40020030 	.word	0x40020030
 8002f64:	40020044 	.word	0x40020044
 8002f68:	40020058 	.word	0x40020058
 8002f6c:	4002006c 	.word	0x4002006c
 8002f70:	40020000 	.word	0x40020000

08002f74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b08b      	sub	sp, #44	; 0x2c
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002f82:	2300      	movs	r3, #0
 8002f84:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f86:	e169      	b.n	800325c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002f88:	2201      	movs	r2, #1
 8002f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f90:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	69fa      	ldr	r2, [r7, #28]
 8002f98:	4013      	ands	r3, r2
 8002f9a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002f9c:	69ba      	ldr	r2, [r7, #24]
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	f040 8158 	bne.w	8003256 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	4a9a      	ldr	r2, [pc, #616]	; (8003214 <HAL_GPIO_Init+0x2a0>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d05e      	beq.n	800306e <HAL_GPIO_Init+0xfa>
 8002fb0:	4a98      	ldr	r2, [pc, #608]	; (8003214 <HAL_GPIO_Init+0x2a0>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d875      	bhi.n	80030a2 <HAL_GPIO_Init+0x12e>
 8002fb6:	4a98      	ldr	r2, [pc, #608]	; (8003218 <HAL_GPIO_Init+0x2a4>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d058      	beq.n	800306e <HAL_GPIO_Init+0xfa>
 8002fbc:	4a96      	ldr	r2, [pc, #600]	; (8003218 <HAL_GPIO_Init+0x2a4>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d86f      	bhi.n	80030a2 <HAL_GPIO_Init+0x12e>
 8002fc2:	4a96      	ldr	r2, [pc, #600]	; (800321c <HAL_GPIO_Init+0x2a8>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d052      	beq.n	800306e <HAL_GPIO_Init+0xfa>
 8002fc8:	4a94      	ldr	r2, [pc, #592]	; (800321c <HAL_GPIO_Init+0x2a8>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d869      	bhi.n	80030a2 <HAL_GPIO_Init+0x12e>
 8002fce:	4a94      	ldr	r2, [pc, #592]	; (8003220 <HAL_GPIO_Init+0x2ac>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d04c      	beq.n	800306e <HAL_GPIO_Init+0xfa>
 8002fd4:	4a92      	ldr	r2, [pc, #584]	; (8003220 <HAL_GPIO_Init+0x2ac>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d863      	bhi.n	80030a2 <HAL_GPIO_Init+0x12e>
 8002fda:	4a92      	ldr	r2, [pc, #584]	; (8003224 <HAL_GPIO_Init+0x2b0>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d046      	beq.n	800306e <HAL_GPIO_Init+0xfa>
 8002fe0:	4a90      	ldr	r2, [pc, #576]	; (8003224 <HAL_GPIO_Init+0x2b0>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d85d      	bhi.n	80030a2 <HAL_GPIO_Init+0x12e>
 8002fe6:	2b12      	cmp	r3, #18
 8002fe8:	d82a      	bhi.n	8003040 <HAL_GPIO_Init+0xcc>
 8002fea:	2b12      	cmp	r3, #18
 8002fec:	d859      	bhi.n	80030a2 <HAL_GPIO_Init+0x12e>
 8002fee:	a201      	add	r2, pc, #4	; (adr r2, 8002ff4 <HAL_GPIO_Init+0x80>)
 8002ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ff4:	0800306f 	.word	0x0800306f
 8002ff8:	08003049 	.word	0x08003049
 8002ffc:	0800305b 	.word	0x0800305b
 8003000:	0800309d 	.word	0x0800309d
 8003004:	080030a3 	.word	0x080030a3
 8003008:	080030a3 	.word	0x080030a3
 800300c:	080030a3 	.word	0x080030a3
 8003010:	080030a3 	.word	0x080030a3
 8003014:	080030a3 	.word	0x080030a3
 8003018:	080030a3 	.word	0x080030a3
 800301c:	080030a3 	.word	0x080030a3
 8003020:	080030a3 	.word	0x080030a3
 8003024:	080030a3 	.word	0x080030a3
 8003028:	080030a3 	.word	0x080030a3
 800302c:	080030a3 	.word	0x080030a3
 8003030:	080030a3 	.word	0x080030a3
 8003034:	080030a3 	.word	0x080030a3
 8003038:	08003051 	.word	0x08003051
 800303c:	08003065 	.word	0x08003065
 8003040:	4a79      	ldr	r2, [pc, #484]	; (8003228 <HAL_GPIO_Init+0x2b4>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d013      	beq.n	800306e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003046:	e02c      	b.n	80030a2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	623b      	str	r3, [r7, #32]
          break;
 800304e:	e029      	b.n	80030a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	3304      	adds	r3, #4
 8003056:	623b      	str	r3, [r7, #32]
          break;
 8003058:	e024      	b.n	80030a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	3308      	adds	r3, #8
 8003060:	623b      	str	r3, [r7, #32]
          break;
 8003062:	e01f      	b.n	80030a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	330c      	adds	r3, #12
 800306a:	623b      	str	r3, [r7, #32]
          break;
 800306c:	e01a      	b.n	80030a4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d102      	bne.n	800307c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003076:	2304      	movs	r3, #4
 8003078:	623b      	str	r3, [r7, #32]
          break;
 800307a:	e013      	b.n	80030a4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d105      	bne.n	8003090 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003084:	2308      	movs	r3, #8
 8003086:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	69fa      	ldr	r2, [r7, #28]
 800308c:	611a      	str	r2, [r3, #16]
          break;
 800308e:	e009      	b.n	80030a4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003090:	2308      	movs	r3, #8
 8003092:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	69fa      	ldr	r2, [r7, #28]
 8003098:	615a      	str	r2, [r3, #20]
          break;
 800309a:	e003      	b.n	80030a4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800309c:	2300      	movs	r3, #0
 800309e:	623b      	str	r3, [r7, #32]
          break;
 80030a0:	e000      	b.n	80030a4 <HAL_GPIO_Init+0x130>
          break;
 80030a2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	2bff      	cmp	r3, #255	; 0xff
 80030a8:	d801      	bhi.n	80030ae <HAL_GPIO_Init+0x13a>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	e001      	b.n	80030b2 <HAL_GPIO_Init+0x13e>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	3304      	adds	r3, #4
 80030b2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	2bff      	cmp	r3, #255	; 0xff
 80030b8:	d802      	bhi.n	80030c0 <HAL_GPIO_Init+0x14c>
 80030ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	e002      	b.n	80030c6 <HAL_GPIO_Init+0x152>
 80030c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c2:	3b08      	subs	r3, #8
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	210f      	movs	r1, #15
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	fa01 f303 	lsl.w	r3, r1, r3
 80030d4:	43db      	mvns	r3, r3
 80030d6:	401a      	ands	r2, r3
 80030d8:	6a39      	ldr	r1, [r7, #32]
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	fa01 f303 	lsl.w	r3, r1, r3
 80030e0:	431a      	orrs	r2, r3
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	f000 80b1 	beq.w	8003256 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80030f4:	4b4d      	ldr	r3, [pc, #308]	; (800322c <HAL_GPIO_Init+0x2b8>)
 80030f6:	699b      	ldr	r3, [r3, #24]
 80030f8:	4a4c      	ldr	r2, [pc, #304]	; (800322c <HAL_GPIO_Init+0x2b8>)
 80030fa:	f043 0301 	orr.w	r3, r3, #1
 80030fe:	6193      	str	r3, [r2, #24]
 8003100:	4b4a      	ldr	r3, [pc, #296]	; (800322c <HAL_GPIO_Init+0x2b8>)
 8003102:	699b      	ldr	r3, [r3, #24]
 8003104:	f003 0301 	and.w	r3, r3, #1
 8003108:	60bb      	str	r3, [r7, #8]
 800310a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800310c:	4a48      	ldr	r2, [pc, #288]	; (8003230 <HAL_GPIO_Init+0x2bc>)
 800310e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003110:	089b      	lsrs	r3, r3, #2
 8003112:	3302      	adds	r3, #2
 8003114:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003118:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800311a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311c:	f003 0303 	and.w	r3, r3, #3
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	220f      	movs	r2, #15
 8003124:	fa02 f303 	lsl.w	r3, r2, r3
 8003128:	43db      	mvns	r3, r3
 800312a:	68fa      	ldr	r2, [r7, #12]
 800312c:	4013      	ands	r3, r2
 800312e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	4a40      	ldr	r2, [pc, #256]	; (8003234 <HAL_GPIO_Init+0x2c0>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d013      	beq.n	8003160 <HAL_GPIO_Init+0x1ec>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4a3f      	ldr	r2, [pc, #252]	; (8003238 <HAL_GPIO_Init+0x2c4>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d00d      	beq.n	800315c <HAL_GPIO_Init+0x1e8>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	4a3e      	ldr	r2, [pc, #248]	; (800323c <HAL_GPIO_Init+0x2c8>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d007      	beq.n	8003158 <HAL_GPIO_Init+0x1e4>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4a3d      	ldr	r2, [pc, #244]	; (8003240 <HAL_GPIO_Init+0x2cc>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d101      	bne.n	8003154 <HAL_GPIO_Init+0x1e0>
 8003150:	2303      	movs	r3, #3
 8003152:	e006      	b.n	8003162 <HAL_GPIO_Init+0x1ee>
 8003154:	2304      	movs	r3, #4
 8003156:	e004      	b.n	8003162 <HAL_GPIO_Init+0x1ee>
 8003158:	2302      	movs	r3, #2
 800315a:	e002      	b.n	8003162 <HAL_GPIO_Init+0x1ee>
 800315c:	2301      	movs	r3, #1
 800315e:	e000      	b.n	8003162 <HAL_GPIO_Init+0x1ee>
 8003160:	2300      	movs	r3, #0
 8003162:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003164:	f002 0203 	and.w	r2, r2, #3
 8003168:	0092      	lsls	r2, r2, #2
 800316a:	4093      	lsls	r3, r2
 800316c:	68fa      	ldr	r2, [r7, #12]
 800316e:	4313      	orrs	r3, r2
 8003170:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003172:	492f      	ldr	r1, [pc, #188]	; (8003230 <HAL_GPIO_Init+0x2bc>)
 8003174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003176:	089b      	lsrs	r3, r3, #2
 8003178:	3302      	adds	r3, #2
 800317a:	68fa      	ldr	r2, [r7, #12]
 800317c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d006      	beq.n	800319a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800318c:	4b2d      	ldr	r3, [pc, #180]	; (8003244 <HAL_GPIO_Init+0x2d0>)
 800318e:	689a      	ldr	r2, [r3, #8]
 8003190:	492c      	ldr	r1, [pc, #176]	; (8003244 <HAL_GPIO_Init+0x2d0>)
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	4313      	orrs	r3, r2
 8003196:	608b      	str	r3, [r1, #8]
 8003198:	e006      	b.n	80031a8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800319a:	4b2a      	ldr	r3, [pc, #168]	; (8003244 <HAL_GPIO_Init+0x2d0>)
 800319c:	689a      	ldr	r2, [r3, #8]
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	43db      	mvns	r3, r3
 80031a2:	4928      	ldr	r1, [pc, #160]	; (8003244 <HAL_GPIO_Init+0x2d0>)
 80031a4:	4013      	ands	r3, r2
 80031a6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d006      	beq.n	80031c2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80031b4:	4b23      	ldr	r3, [pc, #140]	; (8003244 <HAL_GPIO_Init+0x2d0>)
 80031b6:	68da      	ldr	r2, [r3, #12]
 80031b8:	4922      	ldr	r1, [pc, #136]	; (8003244 <HAL_GPIO_Init+0x2d0>)
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	4313      	orrs	r3, r2
 80031be:	60cb      	str	r3, [r1, #12]
 80031c0:	e006      	b.n	80031d0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80031c2:	4b20      	ldr	r3, [pc, #128]	; (8003244 <HAL_GPIO_Init+0x2d0>)
 80031c4:	68da      	ldr	r2, [r3, #12]
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	43db      	mvns	r3, r3
 80031ca:	491e      	ldr	r1, [pc, #120]	; (8003244 <HAL_GPIO_Init+0x2d0>)
 80031cc:	4013      	ands	r3, r2
 80031ce:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d006      	beq.n	80031ea <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80031dc:	4b19      	ldr	r3, [pc, #100]	; (8003244 <HAL_GPIO_Init+0x2d0>)
 80031de:	685a      	ldr	r2, [r3, #4]
 80031e0:	4918      	ldr	r1, [pc, #96]	; (8003244 <HAL_GPIO_Init+0x2d0>)
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	604b      	str	r3, [r1, #4]
 80031e8:	e006      	b.n	80031f8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80031ea:	4b16      	ldr	r3, [pc, #88]	; (8003244 <HAL_GPIO_Init+0x2d0>)
 80031ec:	685a      	ldr	r2, [r3, #4]
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	43db      	mvns	r3, r3
 80031f2:	4914      	ldr	r1, [pc, #80]	; (8003244 <HAL_GPIO_Init+0x2d0>)
 80031f4:	4013      	ands	r3, r2
 80031f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d021      	beq.n	8003248 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003204:	4b0f      	ldr	r3, [pc, #60]	; (8003244 <HAL_GPIO_Init+0x2d0>)
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	490e      	ldr	r1, [pc, #56]	; (8003244 <HAL_GPIO_Init+0x2d0>)
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	4313      	orrs	r3, r2
 800320e:	600b      	str	r3, [r1, #0]
 8003210:	e021      	b.n	8003256 <HAL_GPIO_Init+0x2e2>
 8003212:	bf00      	nop
 8003214:	10320000 	.word	0x10320000
 8003218:	10310000 	.word	0x10310000
 800321c:	10220000 	.word	0x10220000
 8003220:	10210000 	.word	0x10210000
 8003224:	10120000 	.word	0x10120000
 8003228:	10110000 	.word	0x10110000
 800322c:	40021000 	.word	0x40021000
 8003230:	40010000 	.word	0x40010000
 8003234:	40010800 	.word	0x40010800
 8003238:	40010c00 	.word	0x40010c00
 800323c:	40011000 	.word	0x40011000
 8003240:	40011400 	.word	0x40011400
 8003244:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003248:	4b0b      	ldr	r3, [pc, #44]	; (8003278 <HAL_GPIO_Init+0x304>)
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	43db      	mvns	r3, r3
 8003250:	4909      	ldr	r1, [pc, #36]	; (8003278 <HAL_GPIO_Init+0x304>)
 8003252:	4013      	ands	r3, r2
 8003254:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003258:	3301      	adds	r3, #1
 800325a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003262:	fa22 f303 	lsr.w	r3, r2, r3
 8003266:	2b00      	cmp	r3, #0
 8003268:	f47f ae8e 	bne.w	8002f88 <HAL_GPIO_Init+0x14>
  }
}
 800326c:	bf00      	nop
 800326e:	bf00      	nop
 8003270:	372c      	adds	r7, #44	; 0x2c
 8003272:	46bd      	mov	sp, r7
 8003274:	bc80      	pop	{r7}
 8003276:	4770      	bx	lr
 8003278:	40010400 	.word	0x40010400

0800327c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	460b      	mov	r3, r1
 8003286:	807b      	strh	r3, [r7, #2]
 8003288:	4613      	mov	r3, r2
 800328a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800328c:	787b      	ldrb	r3, [r7, #1]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d003      	beq.n	800329a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003292:	887a      	ldrh	r2, [r7, #2]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003298:	e003      	b.n	80032a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800329a:	887b      	ldrh	r3, [r7, #2]
 800329c:	041a      	lsls	r2, r3, #16
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	611a      	str	r2, [r3, #16]
}
 80032a2:	bf00      	nop
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bc80      	pop	{r7}
 80032aa:	4770      	bx	lr

080032ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b086      	sub	sp, #24
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d101      	bne.n	80032be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e272      	b.n	80037a4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	f000 8087 	beq.w	80033da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80032cc:	4b92      	ldr	r3, [pc, #584]	; (8003518 <HAL_RCC_OscConfig+0x26c>)
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f003 030c 	and.w	r3, r3, #12
 80032d4:	2b04      	cmp	r3, #4
 80032d6:	d00c      	beq.n	80032f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80032d8:	4b8f      	ldr	r3, [pc, #572]	; (8003518 <HAL_RCC_OscConfig+0x26c>)
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f003 030c 	and.w	r3, r3, #12
 80032e0:	2b08      	cmp	r3, #8
 80032e2:	d112      	bne.n	800330a <HAL_RCC_OscConfig+0x5e>
 80032e4:	4b8c      	ldr	r3, [pc, #560]	; (8003518 <HAL_RCC_OscConfig+0x26c>)
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032f0:	d10b      	bne.n	800330a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032f2:	4b89      	ldr	r3, [pc, #548]	; (8003518 <HAL_RCC_OscConfig+0x26c>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d06c      	beq.n	80033d8 <HAL_RCC_OscConfig+0x12c>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d168      	bne.n	80033d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e24c      	b.n	80037a4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003312:	d106      	bne.n	8003322 <HAL_RCC_OscConfig+0x76>
 8003314:	4b80      	ldr	r3, [pc, #512]	; (8003518 <HAL_RCC_OscConfig+0x26c>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a7f      	ldr	r2, [pc, #508]	; (8003518 <HAL_RCC_OscConfig+0x26c>)
 800331a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800331e:	6013      	str	r3, [r2, #0]
 8003320:	e02e      	b.n	8003380 <HAL_RCC_OscConfig+0xd4>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d10c      	bne.n	8003344 <HAL_RCC_OscConfig+0x98>
 800332a:	4b7b      	ldr	r3, [pc, #492]	; (8003518 <HAL_RCC_OscConfig+0x26c>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a7a      	ldr	r2, [pc, #488]	; (8003518 <HAL_RCC_OscConfig+0x26c>)
 8003330:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003334:	6013      	str	r3, [r2, #0]
 8003336:	4b78      	ldr	r3, [pc, #480]	; (8003518 <HAL_RCC_OscConfig+0x26c>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a77      	ldr	r2, [pc, #476]	; (8003518 <HAL_RCC_OscConfig+0x26c>)
 800333c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003340:	6013      	str	r3, [r2, #0]
 8003342:	e01d      	b.n	8003380 <HAL_RCC_OscConfig+0xd4>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800334c:	d10c      	bne.n	8003368 <HAL_RCC_OscConfig+0xbc>
 800334e:	4b72      	ldr	r3, [pc, #456]	; (8003518 <HAL_RCC_OscConfig+0x26c>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a71      	ldr	r2, [pc, #452]	; (8003518 <HAL_RCC_OscConfig+0x26c>)
 8003354:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003358:	6013      	str	r3, [r2, #0]
 800335a:	4b6f      	ldr	r3, [pc, #444]	; (8003518 <HAL_RCC_OscConfig+0x26c>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a6e      	ldr	r2, [pc, #440]	; (8003518 <HAL_RCC_OscConfig+0x26c>)
 8003360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003364:	6013      	str	r3, [r2, #0]
 8003366:	e00b      	b.n	8003380 <HAL_RCC_OscConfig+0xd4>
 8003368:	4b6b      	ldr	r3, [pc, #428]	; (8003518 <HAL_RCC_OscConfig+0x26c>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a6a      	ldr	r2, [pc, #424]	; (8003518 <HAL_RCC_OscConfig+0x26c>)
 800336e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003372:	6013      	str	r3, [r2, #0]
 8003374:	4b68      	ldr	r3, [pc, #416]	; (8003518 <HAL_RCC_OscConfig+0x26c>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a67      	ldr	r2, [pc, #412]	; (8003518 <HAL_RCC_OscConfig+0x26c>)
 800337a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800337e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d013      	beq.n	80033b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003388:	f7ff fc06 	bl	8002b98 <HAL_GetTick>
 800338c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800338e:	e008      	b.n	80033a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003390:	f7ff fc02 	bl	8002b98 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	2b64      	cmp	r3, #100	; 0x64
 800339c:	d901      	bls.n	80033a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e200      	b.n	80037a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033a2:	4b5d      	ldr	r3, [pc, #372]	; (8003518 <HAL_RCC_OscConfig+0x26c>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d0f0      	beq.n	8003390 <HAL_RCC_OscConfig+0xe4>
 80033ae:	e014      	b.n	80033da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033b0:	f7ff fbf2 	bl	8002b98 <HAL_GetTick>
 80033b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033b6:	e008      	b.n	80033ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033b8:	f7ff fbee 	bl	8002b98 <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	2b64      	cmp	r3, #100	; 0x64
 80033c4:	d901      	bls.n	80033ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e1ec      	b.n	80037a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ca:	4b53      	ldr	r3, [pc, #332]	; (8003518 <HAL_RCC_OscConfig+0x26c>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1f0      	bne.n	80033b8 <HAL_RCC_OscConfig+0x10c>
 80033d6:	e000      	b.n	80033da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d063      	beq.n	80034ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80033e6:	4b4c      	ldr	r3, [pc, #304]	; (8003518 <HAL_RCC_OscConfig+0x26c>)
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f003 030c 	and.w	r3, r3, #12
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d00b      	beq.n	800340a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80033f2:	4b49      	ldr	r3, [pc, #292]	; (8003518 <HAL_RCC_OscConfig+0x26c>)
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f003 030c 	and.w	r3, r3, #12
 80033fa:	2b08      	cmp	r3, #8
 80033fc:	d11c      	bne.n	8003438 <HAL_RCC_OscConfig+0x18c>
 80033fe:	4b46      	ldr	r3, [pc, #280]	; (8003518 <HAL_RCC_OscConfig+0x26c>)
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d116      	bne.n	8003438 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800340a:	4b43      	ldr	r3, [pc, #268]	; (8003518 <HAL_RCC_OscConfig+0x26c>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0302 	and.w	r3, r3, #2
 8003412:	2b00      	cmp	r3, #0
 8003414:	d005      	beq.n	8003422 <HAL_RCC_OscConfig+0x176>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	2b01      	cmp	r3, #1
 800341c:	d001      	beq.n	8003422 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e1c0      	b.n	80037a4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003422:	4b3d      	ldr	r3, [pc, #244]	; (8003518 <HAL_RCC_OscConfig+0x26c>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	695b      	ldr	r3, [r3, #20]
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	4939      	ldr	r1, [pc, #228]	; (8003518 <HAL_RCC_OscConfig+0x26c>)
 8003432:	4313      	orrs	r3, r2
 8003434:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003436:	e03a      	b.n	80034ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	691b      	ldr	r3, [r3, #16]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d020      	beq.n	8003482 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003440:	4b36      	ldr	r3, [pc, #216]	; (800351c <HAL_RCC_OscConfig+0x270>)
 8003442:	2201      	movs	r2, #1
 8003444:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003446:	f7ff fba7 	bl	8002b98 <HAL_GetTick>
 800344a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800344c:	e008      	b.n	8003460 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800344e:	f7ff fba3 	bl	8002b98 <HAL_GetTick>
 8003452:	4602      	mov	r2, r0
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	2b02      	cmp	r3, #2
 800345a:	d901      	bls.n	8003460 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800345c:	2303      	movs	r3, #3
 800345e:	e1a1      	b.n	80037a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003460:	4b2d      	ldr	r3, [pc, #180]	; (8003518 <HAL_RCC_OscConfig+0x26c>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0302 	and.w	r3, r3, #2
 8003468:	2b00      	cmp	r3, #0
 800346a:	d0f0      	beq.n	800344e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800346c:	4b2a      	ldr	r3, [pc, #168]	; (8003518 <HAL_RCC_OscConfig+0x26c>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	695b      	ldr	r3, [r3, #20]
 8003478:	00db      	lsls	r3, r3, #3
 800347a:	4927      	ldr	r1, [pc, #156]	; (8003518 <HAL_RCC_OscConfig+0x26c>)
 800347c:	4313      	orrs	r3, r2
 800347e:	600b      	str	r3, [r1, #0]
 8003480:	e015      	b.n	80034ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003482:	4b26      	ldr	r3, [pc, #152]	; (800351c <HAL_RCC_OscConfig+0x270>)
 8003484:	2200      	movs	r2, #0
 8003486:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003488:	f7ff fb86 	bl	8002b98 <HAL_GetTick>
 800348c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800348e:	e008      	b.n	80034a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003490:	f7ff fb82 	bl	8002b98 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	2b02      	cmp	r3, #2
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e180      	b.n	80037a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034a2:	4b1d      	ldr	r3, [pc, #116]	; (8003518 <HAL_RCC_OscConfig+0x26c>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d1f0      	bne.n	8003490 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0308 	and.w	r3, r3, #8
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d03a      	beq.n	8003530 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	699b      	ldr	r3, [r3, #24]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d019      	beq.n	80034f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034c2:	4b17      	ldr	r3, [pc, #92]	; (8003520 <HAL_RCC_OscConfig+0x274>)
 80034c4:	2201      	movs	r2, #1
 80034c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034c8:	f7ff fb66 	bl	8002b98 <HAL_GetTick>
 80034cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034ce:	e008      	b.n	80034e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034d0:	f7ff fb62 	bl	8002b98 <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e160      	b.n	80037a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034e2:	4b0d      	ldr	r3, [pc, #52]	; (8003518 <HAL_RCC_OscConfig+0x26c>)
 80034e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d0f0      	beq.n	80034d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80034ee:	2001      	movs	r0, #1
 80034f0:	f000 face 	bl	8003a90 <RCC_Delay>
 80034f4:	e01c      	b.n	8003530 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034f6:	4b0a      	ldr	r3, [pc, #40]	; (8003520 <HAL_RCC_OscConfig+0x274>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034fc:	f7ff fb4c 	bl	8002b98 <HAL_GetTick>
 8003500:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003502:	e00f      	b.n	8003524 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003504:	f7ff fb48 	bl	8002b98 <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	2b02      	cmp	r3, #2
 8003510:	d908      	bls.n	8003524 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e146      	b.n	80037a4 <HAL_RCC_OscConfig+0x4f8>
 8003516:	bf00      	nop
 8003518:	40021000 	.word	0x40021000
 800351c:	42420000 	.word	0x42420000
 8003520:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003524:	4b92      	ldr	r3, [pc, #584]	; (8003770 <HAL_RCC_OscConfig+0x4c4>)
 8003526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003528:	f003 0302 	and.w	r3, r3, #2
 800352c:	2b00      	cmp	r3, #0
 800352e:	d1e9      	bne.n	8003504 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0304 	and.w	r3, r3, #4
 8003538:	2b00      	cmp	r3, #0
 800353a:	f000 80a6 	beq.w	800368a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800353e:	2300      	movs	r3, #0
 8003540:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003542:	4b8b      	ldr	r3, [pc, #556]	; (8003770 <HAL_RCC_OscConfig+0x4c4>)
 8003544:	69db      	ldr	r3, [r3, #28]
 8003546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d10d      	bne.n	800356a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800354e:	4b88      	ldr	r3, [pc, #544]	; (8003770 <HAL_RCC_OscConfig+0x4c4>)
 8003550:	69db      	ldr	r3, [r3, #28]
 8003552:	4a87      	ldr	r2, [pc, #540]	; (8003770 <HAL_RCC_OscConfig+0x4c4>)
 8003554:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003558:	61d3      	str	r3, [r2, #28]
 800355a:	4b85      	ldr	r3, [pc, #532]	; (8003770 <HAL_RCC_OscConfig+0x4c4>)
 800355c:	69db      	ldr	r3, [r3, #28]
 800355e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003562:	60bb      	str	r3, [r7, #8]
 8003564:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003566:	2301      	movs	r3, #1
 8003568:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800356a:	4b82      	ldr	r3, [pc, #520]	; (8003774 <HAL_RCC_OscConfig+0x4c8>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003572:	2b00      	cmp	r3, #0
 8003574:	d118      	bne.n	80035a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003576:	4b7f      	ldr	r3, [pc, #508]	; (8003774 <HAL_RCC_OscConfig+0x4c8>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a7e      	ldr	r2, [pc, #504]	; (8003774 <HAL_RCC_OscConfig+0x4c8>)
 800357c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003580:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003582:	f7ff fb09 	bl	8002b98 <HAL_GetTick>
 8003586:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003588:	e008      	b.n	800359c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800358a:	f7ff fb05 	bl	8002b98 <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	2b64      	cmp	r3, #100	; 0x64
 8003596:	d901      	bls.n	800359c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	e103      	b.n	80037a4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800359c:	4b75      	ldr	r3, [pc, #468]	; (8003774 <HAL_RCC_OscConfig+0x4c8>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d0f0      	beq.n	800358a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d106      	bne.n	80035be <HAL_RCC_OscConfig+0x312>
 80035b0:	4b6f      	ldr	r3, [pc, #444]	; (8003770 <HAL_RCC_OscConfig+0x4c4>)
 80035b2:	6a1b      	ldr	r3, [r3, #32]
 80035b4:	4a6e      	ldr	r2, [pc, #440]	; (8003770 <HAL_RCC_OscConfig+0x4c4>)
 80035b6:	f043 0301 	orr.w	r3, r3, #1
 80035ba:	6213      	str	r3, [r2, #32]
 80035bc:	e02d      	b.n	800361a <HAL_RCC_OscConfig+0x36e>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d10c      	bne.n	80035e0 <HAL_RCC_OscConfig+0x334>
 80035c6:	4b6a      	ldr	r3, [pc, #424]	; (8003770 <HAL_RCC_OscConfig+0x4c4>)
 80035c8:	6a1b      	ldr	r3, [r3, #32]
 80035ca:	4a69      	ldr	r2, [pc, #420]	; (8003770 <HAL_RCC_OscConfig+0x4c4>)
 80035cc:	f023 0301 	bic.w	r3, r3, #1
 80035d0:	6213      	str	r3, [r2, #32]
 80035d2:	4b67      	ldr	r3, [pc, #412]	; (8003770 <HAL_RCC_OscConfig+0x4c4>)
 80035d4:	6a1b      	ldr	r3, [r3, #32]
 80035d6:	4a66      	ldr	r2, [pc, #408]	; (8003770 <HAL_RCC_OscConfig+0x4c4>)
 80035d8:	f023 0304 	bic.w	r3, r3, #4
 80035dc:	6213      	str	r3, [r2, #32]
 80035de:	e01c      	b.n	800361a <HAL_RCC_OscConfig+0x36e>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	2b05      	cmp	r3, #5
 80035e6:	d10c      	bne.n	8003602 <HAL_RCC_OscConfig+0x356>
 80035e8:	4b61      	ldr	r3, [pc, #388]	; (8003770 <HAL_RCC_OscConfig+0x4c4>)
 80035ea:	6a1b      	ldr	r3, [r3, #32]
 80035ec:	4a60      	ldr	r2, [pc, #384]	; (8003770 <HAL_RCC_OscConfig+0x4c4>)
 80035ee:	f043 0304 	orr.w	r3, r3, #4
 80035f2:	6213      	str	r3, [r2, #32]
 80035f4:	4b5e      	ldr	r3, [pc, #376]	; (8003770 <HAL_RCC_OscConfig+0x4c4>)
 80035f6:	6a1b      	ldr	r3, [r3, #32]
 80035f8:	4a5d      	ldr	r2, [pc, #372]	; (8003770 <HAL_RCC_OscConfig+0x4c4>)
 80035fa:	f043 0301 	orr.w	r3, r3, #1
 80035fe:	6213      	str	r3, [r2, #32]
 8003600:	e00b      	b.n	800361a <HAL_RCC_OscConfig+0x36e>
 8003602:	4b5b      	ldr	r3, [pc, #364]	; (8003770 <HAL_RCC_OscConfig+0x4c4>)
 8003604:	6a1b      	ldr	r3, [r3, #32]
 8003606:	4a5a      	ldr	r2, [pc, #360]	; (8003770 <HAL_RCC_OscConfig+0x4c4>)
 8003608:	f023 0301 	bic.w	r3, r3, #1
 800360c:	6213      	str	r3, [r2, #32]
 800360e:	4b58      	ldr	r3, [pc, #352]	; (8003770 <HAL_RCC_OscConfig+0x4c4>)
 8003610:	6a1b      	ldr	r3, [r3, #32]
 8003612:	4a57      	ldr	r2, [pc, #348]	; (8003770 <HAL_RCC_OscConfig+0x4c4>)
 8003614:	f023 0304 	bic.w	r3, r3, #4
 8003618:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d015      	beq.n	800364e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003622:	f7ff fab9 	bl	8002b98 <HAL_GetTick>
 8003626:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003628:	e00a      	b.n	8003640 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800362a:	f7ff fab5 	bl	8002b98 <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	f241 3288 	movw	r2, #5000	; 0x1388
 8003638:	4293      	cmp	r3, r2
 800363a:	d901      	bls.n	8003640 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e0b1      	b.n	80037a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003640:	4b4b      	ldr	r3, [pc, #300]	; (8003770 <HAL_RCC_OscConfig+0x4c4>)
 8003642:	6a1b      	ldr	r3, [r3, #32]
 8003644:	f003 0302 	and.w	r3, r3, #2
 8003648:	2b00      	cmp	r3, #0
 800364a:	d0ee      	beq.n	800362a <HAL_RCC_OscConfig+0x37e>
 800364c:	e014      	b.n	8003678 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800364e:	f7ff faa3 	bl	8002b98 <HAL_GetTick>
 8003652:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003654:	e00a      	b.n	800366c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003656:	f7ff fa9f 	bl	8002b98 <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	f241 3288 	movw	r2, #5000	; 0x1388
 8003664:	4293      	cmp	r3, r2
 8003666:	d901      	bls.n	800366c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e09b      	b.n	80037a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800366c:	4b40      	ldr	r3, [pc, #256]	; (8003770 <HAL_RCC_OscConfig+0x4c4>)
 800366e:	6a1b      	ldr	r3, [r3, #32]
 8003670:	f003 0302 	and.w	r3, r3, #2
 8003674:	2b00      	cmp	r3, #0
 8003676:	d1ee      	bne.n	8003656 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003678:	7dfb      	ldrb	r3, [r7, #23]
 800367a:	2b01      	cmp	r3, #1
 800367c:	d105      	bne.n	800368a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800367e:	4b3c      	ldr	r3, [pc, #240]	; (8003770 <HAL_RCC_OscConfig+0x4c4>)
 8003680:	69db      	ldr	r3, [r3, #28]
 8003682:	4a3b      	ldr	r2, [pc, #236]	; (8003770 <HAL_RCC_OscConfig+0x4c4>)
 8003684:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003688:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	69db      	ldr	r3, [r3, #28]
 800368e:	2b00      	cmp	r3, #0
 8003690:	f000 8087 	beq.w	80037a2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003694:	4b36      	ldr	r3, [pc, #216]	; (8003770 <HAL_RCC_OscConfig+0x4c4>)
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f003 030c 	and.w	r3, r3, #12
 800369c:	2b08      	cmp	r3, #8
 800369e:	d061      	beq.n	8003764 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	69db      	ldr	r3, [r3, #28]
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d146      	bne.n	8003736 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036a8:	4b33      	ldr	r3, [pc, #204]	; (8003778 <HAL_RCC_OscConfig+0x4cc>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ae:	f7ff fa73 	bl	8002b98 <HAL_GetTick>
 80036b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036b4:	e008      	b.n	80036c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036b6:	f7ff fa6f 	bl	8002b98 <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d901      	bls.n	80036c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e06d      	b.n	80037a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036c8:	4b29      	ldr	r3, [pc, #164]	; (8003770 <HAL_RCC_OscConfig+0x4c4>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d1f0      	bne.n	80036b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a1b      	ldr	r3, [r3, #32]
 80036d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036dc:	d108      	bne.n	80036f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80036de:	4b24      	ldr	r3, [pc, #144]	; (8003770 <HAL_RCC_OscConfig+0x4c4>)
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	4921      	ldr	r1, [pc, #132]	; (8003770 <HAL_RCC_OscConfig+0x4c4>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036f0:	4b1f      	ldr	r3, [pc, #124]	; (8003770 <HAL_RCC_OscConfig+0x4c4>)
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a19      	ldr	r1, [r3, #32]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003700:	430b      	orrs	r3, r1
 8003702:	491b      	ldr	r1, [pc, #108]	; (8003770 <HAL_RCC_OscConfig+0x4c4>)
 8003704:	4313      	orrs	r3, r2
 8003706:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003708:	4b1b      	ldr	r3, [pc, #108]	; (8003778 <HAL_RCC_OscConfig+0x4cc>)
 800370a:	2201      	movs	r2, #1
 800370c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800370e:	f7ff fa43 	bl	8002b98 <HAL_GetTick>
 8003712:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003714:	e008      	b.n	8003728 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003716:	f7ff fa3f 	bl	8002b98 <HAL_GetTick>
 800371a:	4602      	mov	r2, r0
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	2b02      	cmp	r3, #2
 8003722:	d901      	bls.n	8003728 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	e03d      	b.n	80037a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003728:	4b11      	ldr	r3, [pc, #68]	; (8003770 <HAL_RCC_OscConfig+0x4c4>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d0f0      	beq.n	8003716 <HAL_RCC_OscConfig+0x46a>
 8003734:	e035      	b.n	80037a2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003736:	4b10      	ldr	r3, [pc, #64]	; (8003778 <HAL_RCC_OscConfig+0x4cc>)
 8003738:	2200      	movs	r2, #0
 800373a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800373c:	f7ff fa2c 	bl	8002b98 <HAL_GetTick>
 8003740:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003742:	e008      	b.n	8003756 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003744:	f7ff fa28 	bl	8002b98 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	2b02      	cmp	r3, #2
 8003750:	d901      	bls.n	8003756 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e026      	b.n	80037a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003756:	4b06      	ldr	r3, [pc, #24]	; (8003770 <HAL_RCC_OscConfig+0x4c4>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d1f0      	bne.n	8003744 <HAL_RCC_OscConfig+0x498>
 8003762:	e01e      	b.n	80037a2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	69db      	ldr	r3, [r3, #28]
 8003768:	2b01      	cmp	r3, #1
 800376a:	d107      	bne.n	800377c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e019      	b.n	80037a4 <HAL_RCC_OscConfig+0x4f8>
 8003770:	40021000 	.word	0x40021000
 8003774:	40007000 	.word	0x40007000
 8003778:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800377c:	4b0b      	ldr	r3, [pc, #44]	; (80037ac <HAL_RCC_OscConfig+0x500>)
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6a1b      	ldr	r3, [r3, #32]
 800378c:	429a      	cmp	r2, r3
 800378e:	d106      	bne.n	800379e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800379a:	429a      	cmp	r2, r3
 800379c:	d001      	beq.n	80037a2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e000      	b.n	80037a4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80037a2:	2300      	movs	r3, #0
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3718      	adds	r7, #24
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	40021000 	.word	0x40021000

080037b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d101      	bne.n	80037c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e0d0      	b.n	8003966 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037c4:	4b6a      	ldr	r3, [pc, #424]	; (8003970 <HAL_RCC_ClockConfig+0x1c0>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0307 	and.w	r3, r3, #7
 80037cc:	683a      	ldr	r2, [r7, #0]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d910      	bls.n	80037f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037d2:	4b67      	ldr	r3, [pc, #412]	; (8003970 <HAL_RCC_ClockConfig+0x1c0>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f023 0207 	bic.w	r2, r3, #7
 80037da:	4965      	ldr	r1, [pc, #404]	; (8003970 <HAL_RCC_ClockConfig+0x1c0>)
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	4313      	orrs	r3, r2
 80037e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037e2:	4b63      	ldr	r3, [pc, #396]	; (8003970 <HAL_RCC_ClockConfig+0x1c0>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0307 	and.w	r3, r3, #7
 80037ea:	683a      	ldr	r2, [r7, #0]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d001      	beq.n	80037f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e0b8      	b.n	8003966 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0302 	and.w	r3, r3, #2
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d020      	beq.n	8003842 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0304 	and.w	r3, r3, #4
 8003808:	2b00      	cmp	r3, #0
 800380a:	d005      	beq.n	8003818 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800380c:	4b59      	ldr	r3, [pc, #356]	; (8003974 <HAL_RCC_ClockConfig+0x1c4>)
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	4a58      	ldr	r2, [pc, #352]	; (8003974 <HAL_RCC_ClockConfig+0x1c4>)
 8003812:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003816:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0308 	and.w	r3, r3, #8
 8003820:	2b00      	cmp	r3, #0
 8003822:	d005      	beq.n	8003830 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003824:	4b53      	ldr	r3, [pc, #332]	; (8003974 <HAL_RCC_ClockConfig+0x1c4>)
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	4a52      	ldr	r2, [pc, #328]	; (8003974 <HAL_RCC_ClockConfig+0x1c4>)
 800382a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800382e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003830:	4b50      	ldr	r3, [pc, #320]	; (8003974 <HAL_RCC_ClockConfig+0x1c4>)
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	494d      	ldr	r1, [pc, #308]	; (8003974 <HAL_RCC_ClockConfig+0x1c4>)
 800383e:	4313      	orrs	r3, r2
 8003840:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0301 	and.w	r3, r3, #1
 800384a:	2b00      	cmp	r3, #0
 800384c:	d040      	beq.n	80038d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	2b01      	cmp	r3, #1
 8003854:	d107      	bne.n	8003866 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003856:	4b47      	ldr	r3, [pc, #284]	; (8003974 <HAL_RCC_ClockConfig+0x1c4>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d115      	bne.n	800388e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e07f      	b.n	8003966 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	2b02      	cmp	r3, #2
 800386c:	d107      	bne.n	800387e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800386e:	4b41      	ldr	r3, [pc, #260]	; (8003974 <HAL_RCC_ClockConfig+0x1c4>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d109      	bne.n	800388e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e073      	b.n	8003966 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800387e:	4b3d      	ldr	r3, [pc, #244]	; (8003974 <HAL_RCC_ClockConfig+0x1c4>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0302 	and.w	r3, r3, #2
 8003886:	2b00      	cmp	r3, #0
 8003888:	d101      	bne.n	800388e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e06b      	b.n	8003966 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800388e:	4b39      	ldr	r3, [pc, #228]	; (8003974 <HAL_RCC_ClockConfig+0x1c4>)
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f023 0203 	bic.w	r2, r3, #3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	4936      	ldr	r1, [pc, #216]	; (8003974 <HAL_RCC_ClockConfig+0x1c4>)
 800389c:	4313      	orrs	r3, r2
 800389e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038a0:	f7ff f97a 	bl	8002b98 <HAL_GetTick>
 80038a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038a6:	e00a      	b.n	80038be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038a8:	f7ff f976 	bl	8002b98 <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d901      	bls.n	80038be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e053      	b.n	8003966 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038be:	4b2d      	ldr	r3, [pc, #180]	; (8003974 <HAL_RCC_ClockConfig+0x1c4>)
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	f003 020c 	and.w	r2, r3, #12
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d1eb      	bne.n	80038a8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038d0:	4b27      	ldr	r3, [pc, #156]	; (8003970 <HAL_RCC_ClockConfig+0x1c0>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0307 	and.w	r3, r3, #7
 80038d8:	683a      	ldr	r2, [r7, #0]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d210      	bcs.n	8003900 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038de:	4b24      	ldr	r3, [pc, #144]	; (8003970 <HAL_RCC_ClockConfig+0x1c0>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f023 0207 	bic.w	r2, r3, #7
 80038e6:	4922      	ldr	r1, [pc, #136]	; (8003970 <HAL_RCC_ClockConfig+0x1c0>)
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ee:	4b20      	ldr	r3, [pc, #128]	; (8003970 <HAL_RCC_ClockConfig+0x1c0>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0307 	and.w	r3, r3, #7
 80038f6:	683a      	ldr	r2, [r7, #0]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d001      	beq.n	8003900 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e032      	b.n	8003966 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0304 	and.w	r3, r3, #4
 8003908:	2b00      	cmp	r3, #0
 800390a:	d008      	beq.n	800391e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800390c:	4b19      	ldr	r3, [pc, #100]	; (8003974 <HAL_RCC_ClockConfig+0x1c4>)
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	4916      	ldr	r1, [pc, #88]	; (8003974 <HAL_RCC_ClockConfig+0x1c4>)
 800391a:	4313      	orrs	r3, r2
 800391c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0308 	and.w	r3, r3, #8
 8003926:	2b00      	cmp	r3, #0
 8003928:	d009      	beq.n	800393e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800392a:	4b12      	ldr	r3, [pc, #72]	; (8003974 <HAL_RCC_ClockConfig+0x1c4>)
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	00db      	lsls	r3, r3, #3
 8003938:	490e      	ldr	r1, [pc, #56]	; (8003974 <HAL_RCC_ClockConfig+0x1c4>)
 800393a:	4313      	orrs	r3, r2
 800393c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800393e:	f000 f821 	bl	8003984 <HAL_RCC_GetSysClockFreq>
 8003942:	4602      	mov	r2, r0
 8003944:	4b0b      	ldr	r3, [pc, #44]	; (8003974 <HAL_RCC_ClockConfig+0x1c4>)
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	091b      	lsrs	r3, r3, #4
 800394a:	f003 030f 	and.w	r3, r3, #15
 800394e:	490a      	ldr	r1, [pc, #40]	; (8003978 <HAL_RCC_ClockConfig+0x1c8>)
 8003950:	5ccb      	ldrb	r3, [r1, r3]
 8003952:	fa22 f303 	lsr.w	r3, r2, r3
 8003956:	4a09      	ldr	r2, [pc, #36]	; (800397c <HAL_RCC_ClockConfig+0x1cc>)
 8003958:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800395a:	4b09      	ldr	r3, [pc, #36]	; (8003980 <HAL_RCC_ClockConfig+0x1d0>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4618      	mov	r0, r3
 8003960:	f7ff f8d8 	bl	8002b14 <HAL_InitTick>

  return HAL_OK;
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	3710      	adds	r7, #16
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	40022000 	.word	0x40022000
 8003974:	40021000 	.word	0x40021000
 8003978:	0800d3a8 	.word	0x0800d3a8
 800397c:	20000000 	.word	0x20000000
 8003980:	20000004 	.word	0x20000004

08003984 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003984:	b480      	push	{r7}
 8003986:	b087      	sub	sp, #28
 8003988:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800398a:	2300      	movs	r3, #0
 800398c:	60fb      	str	r3, [r7, #12]
 800398e:	2300      	movs	r3, #0
 8003990:	60bb      	str	r3, [r7, #8]
 8003992:	2300      	movs	r3, #0
 8003994:	617b      	str	r3, [r7, #20]
 8003996:	2300      	movs	r3, #0
 8003998:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800399a:	2300      	movs	r3, #0
 800399c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800399e:	4b1e      	ldr	r3, [pc, #120]	; (8003a18 <HAL_RCC_GetSysClockFreq+0x94>)
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f003 030c 	and.w	r3, r3, #12
 80039aa:	2b04      	cmp	r3, #4
 80039ac:	d002      	beq.n	80039b4 <HAL_RCC_GetSysClockFreq+0x30>
 80039ae:	2b08      	cmp	r3, #8
 80039b0:	d003      	beq.n	80039ba <HAL_RCC_GetSysClockFreq+0x36>
 80039b2:	e027      	b.n	8003a04 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80039b4:	4b19      	ldr	r3, [pc, #100]	; (8003a1c <HAL_RCC_GetSysClockFreq+0x98>)
 80039b6:	613b      	str	r3, [r7, #16]
      break;
 80039b8:	e027      	b.n	8003a0a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	0c9b      	lsrs	r3, r3, #18
 80039be:	f003 030f 	and.w	r3, r3, #15
 80039c2:	4a17      	ldr	r2, [pc, #92]	; (8003a20 <HAL_RCC_GetSysClockFreq+0x9c>)
 80039c4:	5cd3      	ldrb	r3, [r2, r3]
 80039c6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d010      	beq.n	80039f4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80039d2:	4b11      	ldr	r3, [pc, #68]	; (8003a18 <HAL_RCC_GetSysClockFreq+0x94>)
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	0c5b      	lsrs	r3, r3, #17
 80039d8:	f003 0301 	and.w	r3, r3, #1
 80039dc:	4a11      	ldr	r2, [pc, #68]	; (8003a24 <HAL_RCC_GetSysClockFreq+0xa0>)
 80039de:	5cd3      	ldrb	r3, [r2, r3]
 80039e0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a0d      	ldr	r2, [pc, #52]	; (8003a1c <HAL_RCC_GetSysClockFreq+0x98>)
 80039e6:	fb03 f202 	mul.w	r2, r3, r2
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80039f0:	617b      	str	r3, [r7, #20]
 80039f2:	e004      	b.n	80039fe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	4a0c      	ldr	r2, [pc, #48]	; (8003a28 <HAL_RCC_GetSysClockFreq+0xa4>)
 80039f8:	fb02 f303 	mul.w	r3, r2, r3
 80039fc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	613b      	str	r3, [r7, #16]
      break;
 8003a02:	e002      	b.n	8003a0a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a04:	4b05      	ldr	r3, [pc, #20]	; (8003a1c <HAL_RCC_GetSysClockFreq+0x98>)
 8003a06:	613b      	str	r3, [r7, #16]
      break;
 8003a08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a0a:	693b      	ldr	r3, [r7, #16]
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	371c      	adds	r7, #28
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bc80      	pop	{r7}
 8003a14:	4770      	bx	lr
 8003a16:	bf00      	nop
 8003a18:	40021000 	.word	0x40021000
 8003a1c:	007a1200 	.word	0x007a1200
 8003a20:	0800d3c0 	.word	0x0800d3c0
 8003a24:	0800d3d0 	.word	0x0800d3d0
 8003a28:	003d0900 	.word	0x003d0900

08003a2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a30:	4b02      	ldr	r3, [pc, #8]	; (8003a3c <HAL_RCC_GetHCLKFreq+0x10>)
 8003a32:	681b      	ldr	r3, [r3, #0]
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bc80      	pop	{r7}
 8003a3a:	4770      	bx	lr
 8003a3c:	20000000 	.word	0x20000000

08003a40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a44:	f7ff fff2 	bl	8003a2c <HAL_RCC_GetHCLKFreq>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	4b05      	ldr	r3, [pc, #20]	; (8003a60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	0a1b      	lsrs	r3, r3, #8
 8003a50:	f003 0307 	and.w	r3, r3, #7
 8003a54:	4903      	ldr	r1, [pc, #12]	; (8003a64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a56:	5ccb      	ldrb	r3, [r1, r3]
 8003a58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	40021000 	.word	0x40021000
 8003a64:	0800d3b8 	.word	0x0800d3b8

08003a68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a6c:	f7ff ffde 	bl	8003a2c <HAL_RCC_GetHCLKFreq>
 8003a70:	4602      	mov	r2, r0
 8003a72:	4b05      	ldr	r3, [pc, #20]	; (8003a88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	0adb      	lsrs	r3, r3, #11
 8003a78:	f003 0307 	and.w	r3, r3, #7
 8003a7c:	4903      	ldr	r1, [pc, #12]	; (8003a8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a7e:	5ccb      	ldrb	r3, [r1, r3]
 8003a80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	40021000 	.word	0x40021000
 8003a8c:	0800d3b8 	.word	0x0800d3b8

08003a90 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b085      	sub	sp, #20
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003a98:	4b0a      	ldr	r3, [pc, #40]	; (8003ac4 <RCC_Delay+0x34>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a0a      	ldr	r2, [pc, #40]	; (8003ac8 <RCC_Delay+0x38>)
 8003a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa2:	0a5b      	lsrs	r3, r3, #9
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	fb02 f303 	mul.w	r3, r2, r3
 8003aaa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003aac:	bf00      	nop
  }
  while (Delay --);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	1e5a      	subs	r2, r3, #1
 8003ab2:	60fa      	str	r2, [r7, #12]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d1f9      	bne.n	8003aac <RCC_Delay+0x1c>
}
 8003ab8:	bf00      	nop
 8003aba:	bf00      	nop
 8003abc:	3714      	adds	r7, #20
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bc80      	pop	{r7}
 8003ac2:	4770      	bx	lr
 8003ac4:	20000000 	.word	0x20000000
 8003ac8:	10624dd3 	.word	0x10624dd3

08003acc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d101      	bne.n	8003ade <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e076      	b.n	8003bcc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d108      	bne.n	8003af8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003aee:	d009      	beq.n	8003b04 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	61da      	str	r2, [r3, #28]
 8003af6:	e005      	b.n	8003b04 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d106      	bne.n	8003b24 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f7fe fc54 	bl	80023cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2202      	movs	r2, #2
 8003b28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b3a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003b4c:	431a      	orrs	r2, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b56:	431a      	orrs	r2, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	691b      	ldr	r3, [r3, #16]
 8003b5c:	f003 0302 	and.w	r3, r3, #2
 8003b60:	431a      	orrs	r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	695b      	ldr	r3, [r3, #20]
 8003b66:	f003 0301 	and.w	r3, r3, #1
 8003b6a:	431a      	orrs	r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	699b      	ldr	r3, [r3, #24]
 8003b70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b74:	431a      	orrs	r2, r3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	69db      	ldr	r3, [r3, #28]
 8003b7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b7e:	431a      	orrs	r2, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6a1b      	ldr	r3, [r3, #32]
 8003b84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b88:	ea42 0103 	orr.w	r1, r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b90:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	430a      	orrs	r2, r1
 8003b9a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	699b      	ldr	r3, [r3, #24]
 8003ba0:	0c1a      	lsrs	r2, r3, #16
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f002 0204 	and.w	r2, r2, #4
 8003baa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	69da      	ldr	r2, [r3, #28]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bba:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003bca:	2300      	movs	r3, #0
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3708      	adds	r7, #8
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b088      	sub	sp, #32
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	60b9      	str	r1, [r7, #8]
 8003bde:	603b      	str	r3, [r7, #0]
 8003be0:	4613      	mov	r3, r2
 8003be2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003be4:	2300      	movs	r3, #0
 8003be6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d101      	bne.n	8003bf6 <HAL_SPI_Transmit+0x22>
 8003bf2:	2302      	movs	r3, #2
 8003bf4:	e12d      	b.n	8003e52 <HAL_SPI_Transmit+0x27e>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003bfe:	f7fe ffcb 	bl	8002b98 <HAL_GetTick>
 8003c02:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003c04:	88fb      	ldrh	r3, [r7, #6]
 8003c06:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d002      	beq.n	8003c1a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003c14:	2302      	movs	r3, #2
 8003c16:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c18:	e116      	b.n	8003e48 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d002      	beq.n	8003c26 <HAL_SPI_Transmit+0x52>
 8003c20:	88fb      	ldrh	r3, [r7, #6]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d102      	bne.n	8003c2c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c2a:	e10d      	b.n	8003e48 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2203      	movs	r2, #3
 8003c30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2200      	movs	r2, #0
 8003c38:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	68ba      	ldr	r2, [r7, #8]
 8003c3e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	88fa      	ldrh	r2, [r7, #6]
 8003c44:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	88fa      	ldrh	r2, [r7, #6]
 8003c4a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2200      	movs	r2, #0
 8003c56:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2200      	movs	r2, #0
 8003c62:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2200      	movs	r2, #0
 8003c68:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c72:	d10f      	bne.n	8003c94 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c82:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c92:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c9e:	2b40      	cmp	r3, #64	; 0x40
 8003ca0:	d007      	beq.n	8003cb2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cb0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cba:	d14f      	bne.n	8003d5c <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d002      	beq.n	8003cca <HAL_SPI_Transmit+0xf6>
 8003cc4:	8afb      	ldrh	r3, [r7, #22]
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d142      	bne.n	8003d50 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cce:	881a      	ldrh	r2, [r3, #0]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cda:	1c9a      	adds	r2, r3, #2
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	b29a      	uxth	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003cee:	e02f      	b.n	8003d50 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	f003 0302 	and.w	r3, r3, #2
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d112      	bne.n	8003d24 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d02:	881a      	ldrh	r2, [r3, #0]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d0e:	1c9a      	adds	r2, r3, #2
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	b29a      	uxth	r2, r3
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	86da      	strh	r2, [r3, #54]	; 0x36
 8003d22:	e015      	b.n	8003d50 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d24:	f7fe ff38 	bl	8002b98 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	683a      	ldr	r2, [r7, #0]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d803      	bhi.n	8003d3c <HAL_SPI_Transmit+0x168>
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d3a:	d102      	bne.n	8003d42 <HAL_SPI_Transmit+0x16e>
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d106      	bne.n	8003d50 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003d4e:	e07b      	b.n	8003e48 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1ca      	bne.n	8003cf0 <HAL_SPI_Transmit+0x11c>
 8003d5a:	e050      	b.n	8003dfe <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d002      	beq.n	8003d6a <HAL_SPI_Transmit+0x196>
 8003d64:	8afb      	ldrh	r3, [r7, #22]
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d144      	bne.n	8003df4 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	330c      	adds	r3, #12
 8003d74:	7812      	ldrb	r2, [r2, #0]
 8003d76:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7c:	1c5a      	adds	r2, r3, #1
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	3b01      	subs	r3, #1
 8003d8a:	b29a      	uxth	r2, r3
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003d90:	e030      	b.n	8003df4 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	f003 0302 	and.w	r3, r3, #2
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d113      	bne.n	8003dc8 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	330c      	adds	r3, #12
 8003daa:	7812      	ldrb	r2, [r2, #0]
 8003dac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db2:	1c5a      	adds	r2, r3, #1
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	3b01      	subs	r3, #1
 8003dc0:	b29a      	uxth	r2, r3
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	86da      	strh	r2, [r3, #54]	; 0x36
 8003dc6:	e015      	b.n	8003df4 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003dc8:	f7fe fee6 	bl	8002b98 <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	683a      	ldr	r2, [r7, #0]
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d803      	bhi.n	8003de0 <HAL_SPI_Transmit+0x20c>
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dde:	d102      	bne.n	8003de6 <HAL_SPI_Transmit+0x212>
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d106      	bne.n	8003df4 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2201      	movs	r2, #1
 8003dee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003df2:	e029      	b.n	8003e48 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d1c9      	bne.n	8003d92 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003dfe:	69ba      	ldr	r2, [r7, #24]
 8003e00:	6839      	ldr	r1, [r7, #0]
 8003e02:	68f8      	ldr	r0, [r7, #12]
 8003e04:	f000 f8b2 	bl	8003f6c <SPI_EndRxTxTransaction>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d002      	beq.n	8003e14 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2220      	movs	r2, #32
 8003e12:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d10a      	bne.n	8003e32 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	613b      	str	r3, [r7, #16]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	613b      	str	r3, [r7, #16]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	613b      	str	r3, [r7, #16]
 8003e30:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d002      	beq.n	8003e40 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	77fb      	strb	r3, [r7, #31]
 8003e3e:	e003      	b.n	8003e48 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003e50:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3720      	adds	r7, #32
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
	...

08003e5c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b088      	sub	sp, #32
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	603b      	str	r3, [r7, #0]
 8003e68:	4613      	mov	r3, r2
 8003e6a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003e6c:	f7fe fe94 	bl	8002b98 <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e74:	1a9b      	subs	r3, r3, r2
 8003e76:	683a      	ldr	r2, [r7, #0]
 8003e78:	4413      	add	r3, r2
 8003e7a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003e7c:	f7fe fe8c 	bl	8002b98 <HAL_GetTick>
 8003e80:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003e82:	4b39      	ldr	r3, [pc, #228]	; (8003f68 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	015b      	lsls	r3, r3, #5
 8003e88:	0d1b      	lsrs	r3, r3, #20
 8003e8a:	69fa      	ldr	r2, [r7, #28]
 8003e8c:	fb02 f303 	mul.w	r3, r2, r3
 8003e90:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e92:	e054      	b.n	8003f3e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e9a:	d050      	beq.n	8003f3e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003e9c:	f7fe fe7c 	bl	8002b98 <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	69bb      	ldr	r3, [r7, #24]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	69fa      	ldr	r2, [r7, #28]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d902      	bls.n	8003eb2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d13d      	bne.n	8003f2e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	685a      	ldr	r2, [r3, #4]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003ec0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003eca:	d111      	bne.n	8003ef0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ed4:	d004      	beq.n	8003ee0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ede:	d107      	bne.n	8003ef0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003eee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ef8:	d10f      	bne.n	8003f1a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f08:	601a      	str	r2, [r3, #0]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f18:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e017      	b.n	8003f5e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d101      	bne.n	8003f38 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003f34:	2300      	movs	r3, #0
 8003f36:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	689a      	ldr	r2, [r3, #8]
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	4013      	ands	r3, r2
 8003f48:	68ba      	ldr	r2, [r7, #8]
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	bf0c      	ite	eq
 8003f4e:	2301      	moveq	r3, #1
 8003f50:	2300      	movne	r3, #0
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	461a      	mov	r2, r3
 8003f56:	79fb      	ldrb	r3, [r7, #7]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d19b      	bne.n	8003e94 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3720      	adds	r7, #32
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	20000000 	.word	0x20000000

08003f6c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b086      	sub	sp, #24
 8003f70:	af02      	add	r7, sp, #8
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	9300      	str	r3, [sp, #0]
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	2180      	movs	r1, #128	; 0x80
 8003f82:	68f8      	ldr	r0, [r7, #12]
 8003f84:	f7ff ff6a 	bl	8003e5c <SPI_WaitFlagStateUntilTimeout>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d007      	beq.n	8003f9e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f92:	f043 0220 	orr.w	r2, r3, #32
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e000      	b.n	8003fa0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003f9e:	2300      	movs	r3, #0
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3710      	adds	r7, #16
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b082      	sub	sp, #8
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d101      	bne.n	8003fba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e041      	b.n	800403e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d106      	bne.n	8003fd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f7fe fa3a 	bl	8002448 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2202      	movs	r2, #2
 8003fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	3304      	adds	r3, #4
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	4610      	mov	r0, r2
 8003fe8:	f000 fb28 	bl	800463c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800403c:	2300      	movs	r3, #0
}
 800403e:	4618      	mov	r0, r3
 8004040:	3708      	adds	r7, #8
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
	...

08004048 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004048:	b480      	push	{r7}
 800404a:	b085      	sub	sp, #20
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004056:	b2db      	uxtb	r3, r3
 8004058:	2b01      	cmp	r3, #1
 800405a:	d001      	beq.n	8004060 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e03a      	b.n	80040d6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2202      	movs	r2, #2
 8004064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68da      	ldr	r2, [r3, #12]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f042 0201 	orr.w	r2, r2, #1
 8004076:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a18      	ldr	r2, [pc, #96]	; (80040e0 <HAL_TIM_Base_Start_IT+0x98>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d00e      	beq.n	80040a0 <HAL_TIM_Base_Start_IT+0x58>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800408a:	d009      	beq.n	80040a0 <HAL_TIM_Base_Start_IT+0x58>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a14      	ldr	r2, [pc, #80]	; (80040e4 <HAL_TIM_Base_Start_IT+0x9c>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d004      	beq.n	80040a0 <HAL_TIM_Base_Start_IT+0x58>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a13      	ldr	r2, [pc, #76]	; (80040e8 <HAL_TIM_Base_Start_IT+0xa0>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d111      	bne.n	80040c4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	f003 0307 	and.w	r3, r3, #7
 80040aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2b06      	cmp	r3, #6
 80040b0:	d010      	beq.n	80040d4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f042 0201 	orr.w	r2, r2, #1
 80040c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040c2:	e007      	b.n	80040d4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f042 0201 	orr.w	r2, r2, #1
 80040d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040d4:	2300      	movs	r3, #0
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3714      	adds	r7, #20
 80040da:	46bd      	mov	sp, r7
 80040dc:	bc80      	pop	{r7}
 80040de:	4770      	bx	lr
 80040e0:	40012c00 	.word	0x40012c00
 80040e4:	40000400 	.word	0x40000400
 80040e8:	40000800 	.word	0x40000800

080040ec <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d101      	bne.n	80040fe <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e041      	b.n	8004182 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004104:	b2db      	uxtb	r3, r3
 8004106:	2b00      	cmp	r3, #0
 8004108:	d106      	bne.n	8004118 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 f839 	bl	800418a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2202      	movs	r2, #2
 800411c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	3304      	adds	r3, #4
 8004128:	4619      	mov	r1, r3
 800412a:	4610      	mov	r0, r2
 800412c:	f000 fa86 	bl	800463c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	3708      	adds	r7, #8
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}

0800418a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800418a:	b480      	push	{r7}
 800418c:	b083      	sub	sp, #12
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004192:	bf00      	nop
 8004194:	370c      	adds	r7, #12
 8004196:	46bd      	mov	sp, r7
 8004198:	bc80      	pop	{r7}
 800419a:	4770      	bx	lr

0800419c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b082      	sub	sp, #8
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	f003 0302 	and.w	r3, r3, #2
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d122      	bne.n	80041f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	f003 0302 	and.w	r3, r3, #2
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d11b      	bne.n	80041f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f06f 0202 	mvn.w	r2, #2
 80041c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2201      	movs	r2, #1
 80041ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	699b      	ldr	r3, [r3, #24]
 80041d6:	f003 0303 	and.w	r3, r3, #3
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d003      	beq.n	80041e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 fa10 	bl	8004604 <HAL_TIM_IC_CaptureCallback>
 80041e4:	e005      	b.n	80041f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 fa03 	bl	80045f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f000 fa12 	bl	8004616 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	f003 0304 	and.w	r3, r3, #4
 8004202:	2b04      	cmp	r3, #4
 8004204:	d122      	bne.n	800424c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	f003 0304 	and.w	r3, r3, #4
 8004210:	2b04      	cmp	r3, #4
 8004212:	d11b      	bne.n	800424c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f06f 0204 	mvn.w	r2, #4
 800421c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2202      	movs	r2, #2
 8004222:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	699b      	ldr	r3, [r3, #24]
 800422a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800422e:	2b00      	cmp	r3, #0
 8004230:	d003      	beq.n	800423a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f000 f9e6 	bl	8004604 <HAL_TIM_IC_CaptureCallback>
 8004238:	e005      	b.n	8004246 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 f9d9 	bl	80045f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f000 f9e8 	bl	8004616 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	691b      	ldr	r3, [r3, #16]
 8004252:	f003 0308 	and.w	r3, r3, #8
 8004256:	2b08      	cmp	r3, #8
 8004258:	d122      	bne.n	80042a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	f003 0308 	and.w	r3, r3, #8
 8004264:	2b08      	cmp	r3, #8
 8004266:	d11b      	bne.n	80042a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f06f 0208 	mvn.w	r2, #8
 8004270:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2204      	movs	r2, #4
 8004276:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	69db      	ldr	r3, [r3, #28]
 800427e:	f003 0303 	and.w	r3, r3, #3
 8004282:	2b00      	cmp	r3, #0
 8004284:	d003      	beq.n	800428e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f000 f9bc 	bl	8004604 <HAL_TIM_IC_CaptureCallback>
 800428c:	e005      	b.n	800429a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 f9af 	bl	80045f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f000 f9be 	bl	8004616 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	f003 0310 	and.w	r3, r3, #16
 80042aa:	2b10      	cmp	r3, #16
 80042ac:	d122      	bne.n	80042f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	f003 0310 	and.w	r3, r3, #16
 80042b8:	2b10      	cmp	r3, #16
 80042ba:	d11b      	bne.n	80042f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f06f 0210 	mvn.w	r2, #16
 80042c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2208      	movs	r2, #8
 80042ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	69db      	ldr	r3, [r3, #28]
 80042d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d003      	beq.n	80042e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f000 f992 	bl	8004604 <HAL_TIM_IC_CaptureCallback>
 80042e0:	e005      	b.n	80042ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f000 f985 	bl	80045f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f000 f994 	bl	8004616 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	691b      	ldr	r3, [r3, #16]
 80042fa:	f003 0301 	and.w	r3, r3, #1
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d10e      	bne.n	8004320 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	f003 0301 	and.w	r3, r3, #1
 800430c:	2b01      	cmp	r3, #1
 800430e:	d107      	bne.n	8004320 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f06f 0201 	mvn.w	r2, #1
 8004318:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f7fe f806 	bl	800232c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800432a:	2b80      	cmp	r3, #128	; 0x80
 800432c:	d10e      	bne.n	800434c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004338:	2b80      	cmp	r3, #128	; 0x80
 800433a:	d107      	bne.n	800434c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004344:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 fcb0 	bl	8004cac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004356:	2b40      	cmp	r3, #64	; 0x40
 8004358:	d10e      	bne.n	8004378 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004364:	2b40      	cmp	r3, #64	; 0x40
 8004366:	d107      	bne.n	8004378 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004370:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 f958 	bl	8004628 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	f003 0320 	and.w	r3, r3, #32
 8004382:	2b20      	cmp	r3, #32
 8004384:	d10e      	bne.n	80043a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	f003 0320 	and.w	r3, r3, #32
 8004390:	2b20      	cmp	r3, #32
 8004392:	d107      	bne.n	80043a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f06f 0220 	mvn.w	r2, #32
 800439c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 fc7b 	bl	8004c9a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043a4:	bf00      	nop
 80043a6:	3708      	adds	r7, #8
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b086      	sub	sp, #24
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043b8:	2300      	movs	r3, #0
 80043ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d101      	bne.n	80043ca <HAL_TIM_OC_ConfigChannel+0x1e>
 80043c6:	2302      	movs	r3, #2
 80043c8:	e048      	b.n	800445c <HAL_TIM_OC_ConfigChannel+0xb0>
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2201      	movs	r2, #1
 80043ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2b0c      	cmp	r3, #12
 80043d6:	d839      	bhi.n	800444c <HAL_TIM_OC_ConfigChannel+0xa0>
 80043d8:	a201      	add	r2, pc, #4	; (adr r2, 80043e0 <HAL_TIM_OC_ConfigChannel+0x34>)
 80043da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043de:	bf00      	nop
 80043e0:	08004415 	.word	0x08004415
 80043e4:	0800444d 	.word	0x0800444d
 80043e8:	0800444d 	.word	0x0800444d
 80043ec:	0800444d 	.word	0x0800444d
 80043f0:	08004423 	.word	0x08004423
 80043f4:	0800444d 	.word	0x0800444d
 80043f8:	0800444d 	.word	0x0800444d
 80043fc:	0800444d 	.word	0x0800444d
 8004400:	08004431 	.word	0x08004431
 8004404:	0800444d 	.word	0x0800444d
 8004408:	0800444d 	.word	0x0800444d
 800440c:	0800444d 	.word	0x0800444d
 8004410:	0800443f 	.word	0x0800443f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	68b9      	ldr	r1, [r7, #8]
 800441a:	4618      	mov	r0, r3
 800441c:	f000 f970 	bl	8004700 <TIM_OC1_SetConfig>
      break;
 8004420:	e017      	b.n	8004452 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	68b9      	ldr	r1, [r7, #8]
 8004428:	4618      	mov	r0, r3
 800442a:	f000 f9cf 	bl	80047cc <TIM_OC2_SetConfig>
      break;
 800442e:	e010      	b.n	8004452 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68b9      	ldr	r1, [r7, #8]
 8004436:	4618      	mov	r0, r3
 8004438:	f000 fa32 	bl	80048a0 <TIM_OC3_SetConfig>
      break;
 800443c:	e009      	b.n	8004452 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68b9      	ldr	r1, [r7, #8]
 8004444:	4618      	mov	r0, r3
 8004446:	f000 fa95 	bl	8004974 <TIM_OC4_SetConfig>
      break;
 800444a:	e002      	b.n	8004452 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	75fb      	strb	r3, [r7, #23]
      break;
 8004450:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2200      	movs	r2, #0
 8004456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800445a:	7dfb      	ldrb	r3, [r7, #23]
}
 800445c:	4618      	mov	r0, r3
 800445e:	3718      	adds	r7, #24
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}

08004464 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800446e:	2300      	movs	r3, #0
 8004470:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004478:	2b01      	cmp	r3, #1
 800447a:	d101      	bne.n	8004480 <HAL_TIM_ConfigClockSource+0x1c>
 800447c:	2302      	movs	r3, #2
 800447e:	e0b4      	b.n	80045ea <HAL_TIM_ConfigClockSource+0x186>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2202      	movs	r2, #2
 800448c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800449e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68ba      	ldr	r2, [r7, #8]
 80044ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044b8:	d03e      	beq.n	8004538 <HAL_TIM_ConfigClockSource+0xd4>
 80044ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044be:	f200 8087 	bhi.w	80045d0 <HAL_TIM_ConfigClockSource+0x16c>
 80044c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044c6:	f000 8086 	beq.w	80045d6 <HAL_TIM_ConfigClockSource+0x172>
 80044ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044ce:	d87f      	bhi.n	80045d0 <HAL_TIM_ConfigClockSource+0x16c>
 80044d0:	2b70      	cmp	r3, #112	; 0x70
 80044d2:	d01a      	beq.n	800450a <HAL_TIM_ConfigClockSource+0xa6>
 80044d4:	2b70      	cmp	r3, #112	; 0x70
 80044d6:	d87b      	bhi.n	80045d0 <HAL_TIM_ConfigClockSource+0x16c>
 80044d8:	2b60      	cmp	r3, #96	; 0x60
 80044da:	d050      	beq.n	800457e <HAL_TIM_ConfigClockSource+0x11a>
 80044dc:	2b60      	cmp	r3, #96	; 0x60
 80044de:	d877      	bhi.n	80045d0 <HAL_TIM_ConfigClockSource+0x16c>
 80044e0:	2b50      	cmp	r3, #80	; 0x50
 80044e2:	d03c      	beq.n	800455e <HAL_TIM_ConfigClockSource+0xfa>
 80044e4:	2b50      	cmp	r3, #80	; 0x50
 80044e6:	d873      	bhi.n	80045d0 <HAL_TIM_ConfigClockSource+0x16c>
 80044e8:	2b40      	cmp	r3, #64	; 0x40
 80044ea:	d058      	beq.n	800459e <HAL_TIM_ConfigClockSource+0x13a>
 80044ec:	2b40      	cmp	r3, #64	; 0x40
 80044ee:	d86f      	bhi.n	80045d0 <HAL_TIM_ConfigClockSource+0x16c>
 80044f0:	2b30      	cmp	r3, #48	; 0x30
 80044f2:	d064      	beq.n	80045be <HAL_TIM_ConfigClockSource+0x15a>
 80044f4:	2b30      	cmp	r3, #48	; 0x30
 80044f6:	d86b      	bhi.n	80045d0 <HAL_TIM_ConfigClockSource+0x16c>
 80044f8:	2b20      	cmp	r3, #32
 80044fa:	d060      	beq.n	80045be <HAL_TIM_ConfigClockSource+0x15a>
 80044fc:	2b20      	cmp	r3, #32
 80044fe:	d867      	bhi.n	80045d0 <HAL_TIM_ConfigClockSource+0x16c>
 8004500:	2b00      	cmp	r3, #0
 8004502:	d05c      	beq.n	80045be <HAL_TIM_ConfigClockSource+0x15a>
 8004504:	2b10      	cmp	r3, #16
 8004506:	d05a      	beq.n	80045be <HAL_TIM_ConfigClockSource+0x15a>
 8004508:	e062      	b.n	80045d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6818      	ldr	r0, [r3, #0]
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	6899      	ldr	r1, [r3, #8]
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	685a      	ldr	r2, [r3, #4]
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	f000 faf0 	bl	8004afe <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800452c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68ba      	ldr	r2, [r7, #8]
 8004534:	609a      	str	r2, [r3, #8]
      break;
 8004536:	e04f      	b.n	80045d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6818      	ldr	r0, [r3, #0]
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	6899      	ldr	r1, [r3, #8]
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	685a      	ldr	r2, [r3, #4]
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	f000 fad9 	bl	8004afe <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	689a      	ldr	r2, [r3, #8]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800455a:	609a      	str	r2, [r3, #8]
      break;
 800455c:	e03c      	b.n	80045d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6818      	ldr	r0, [r3, #0]
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	6859      	ldr	r1, [r3, #4]
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	461a      	mov	r2, r3
 800456c:	f000 fa50 	bl	8004a10 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	2150      	movs	r1, #80	; 0x50
 8004576:	4618      	mov	r0, r3
 8004578:	f000 faa7 	bl	8004aca <TIM_ITRx_SetConfig>
      break;
 800457c:	e02c      	b.n	80045d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6818      	ldr	r0, [r3, #0]
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	6859      	ldr	r1, [r3, #4]
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	461a      	mov	r2, r3
 800458c:	f000 fa6e 	bl	8004a6c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2160      	movs	r1, #96	; 0x60
 8004596:	4618      	mov	r0, r3
 8004598:	f000 fa97 	bl	8004aca <TIM_ITRx_SetConfig>
      break;
 800459c:	e01c      	b.n	80045d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6818      	ldr	r0, [r3, #0]
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	6859      	ldr	r1, [r3, #4]
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	461a      	mov	r2, r3
 80045ac:	f000 fa30 	bl	8004a10 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2140      	movs	r1, #64	; 0x40
 80045b6:	4618      	mov	r0, r3
 80045b8:	f000 fa87 	bl	8004aca <TIM_ITRx_SetConfig>
      break;
 80045bc:	e00c      	b.n	80045d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4619      	mov	r1, r3
 80045c8:	4610      	mov	r0, r2
 80045ca:	f000 fa7e 	bl	8004aca <TIM_ITRx_SetConfig>
      break;
 80045ce:	e003      	b.n	80045d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	73fb      	strb	r3, [r7, #15]
      break;
 80045d4:	e000      	b.n	80045d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80045d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80045e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3710      	adds	r7, #16
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}

080045f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045f2:	b480      	push	{r7}
 80045f4:	b083      	sub	sp, #12
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80045fa:	bf00      	nop
 80045fc:	370c      	adds	r7, #12
 80045fe:	46bd      	mov	sp, r7
 8004600:	bc80      	pop	{r7}
 8004602:	4770      	bx	lr

08004604 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800460c:	bf00      	nop
 800460e:	370c      	adds	r7, #12
 8004610:	46bd      	mov	sp, r7
 8004612:	bc80      	pop	{r7}
 8004614:	4770      	bx	lr

08004616 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004616:	b480      	push	{r7}
 8004618:	b083      	sub	sp, #12
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800461e:	bf00      	nop
 8004620:	370c      	adds	r7, #12
 8004622:	46bd      	mov	sp, r7
 8004624:	bc80      	pop	{r7}
 8004626:	4770      	bx	lr

08004628 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004628:	b480      	push	{r7}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004630:	bf00      	nop
 8004632:	370c      	adds	r7, #12
 8004634:	46bd      	mov	sp, r7
 8004636:	bc80      	pop	{r7}
 8004638:	4770      	bx	lr
	...

0800463c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800463c:	b480      	push	{r7}
 800463e:	b085      	sub	sp, #20
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	4a29      	ldr	r2, [pc, #164]	; (80046f4 <TIM_Base_SetConfig+0xb8>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d00b      	beq.n	800466c <TIM_Base_SetConfig+0x30>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800465a:	d007      	beq.n	800466c <TIM_Base_SetConfig+0x30>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	4a26      	ldr	r2, [pc, #152]	; (80046f8 <TIM_Base_SetConfig+0xbc>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d003      	beq.n	800466c <TIM_Base_SetConfig+0x30>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a25      	ldr	r2, [pc, #148]	; (80046fc <TIM_Base_SetConfig+0xc0>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d108      	bne.n	800467e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004672:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	68fa      	ldr	r2, [r7, #12]
 800467a:	4313      	orrs	r3, r2
 800467c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a1c      	ldr	r2, [pc, #112]	; (80046f4 <TIM_Base_SetConfig+0xb8>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d00b      	beq.n	800469e <TIM_Base_SetConfig+0x62>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800468c:	d007      	beq.n	800469e <TIM_Base_SetConfig+0x62>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a19      	ldr	r2, [pc, #100]	; (80046f8 <TIM_Base_SetConfig+0xbc>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d003      	beq.n	800469e <TIM_Base_SetConfig+0x62>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a18      	ldr	r2, [pc, #96]	; (80046fc <TIM_Base_SetConfig+0xc0>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d108      	bne.n	80046b0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	68fa      	ldr	r2, [r7, #12]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	695b      	ldr	r3, [r3, #20]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	68fa      	ldr	r2, [r7, #12]
 80046c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	689a      	ldr	r2, [r3, #8]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	4a07      	ldr	r2, [pc, #28]	; (80046f4 <TIM_Base_SetConfig+0xb8>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d103      	bne.n	80046e4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	691a      	ldr	r2, [r3, #16]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	615a      	str	r2, [r3, #20]
}
 80046ea:	bf00      	nop
 80046ec:	3714      	adds	r7, #20
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bc80      	pop	{r7}
 80046f2:	4770      	bx	lr
 80046f4:	40012c00 	.word	0x40012c00
 80046f8:	40000400 	.word	0x40000400
 80046fc:	40000800 	.word	0x40000800

08004700 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004700:	b480      	push	{r7}
 8004702:	b087      	sub	sp, #28
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a1b      	ldr	r3, [r3, #32]
 800470e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6a1b      	ldr	r3, [r3, #32]
 8004714:	f023 0201 	bic.w	r2, r3, #1
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	699b      	ldr	r3, [r3, #24]
 8004726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800472e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f023 0303 	bic.w	r3, r3, #3
 8004736:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68fa      	ldr	r2, [r7, #12]
 800473e:	4313      	orrs	r3, r2
 8004740:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	f023 0302 	bic.w	r3, r3, #2
 8004748:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	697a      	ldr	r2, [r7, #20]
 8004750:	4313      	orrs	r3, r2
 8004752:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4a1c      	ldr	r2, [pc, #112]	; (80047c8 <TIM_OC1_SetConfig+0xc8>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d10c      	bne.n	8004776 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	f023 0308 	bic.w	r3, r3, #8
 8004762:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	697a      	ldr	r2, [r7, #20]
 800476a:	4313      	orrs	r3, r2
 800476c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	f023 0304 	bic.w	r3, r3, #4
 8004774:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4a13      	ldr	r2, [pc, #76]	; (80047c8 <TIM_OC1_SetConfig+0xc8>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d111      	bne.n	80047a2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004784:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800478c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	693a      	ldr	r2, [r7, #16]
 8004794:	4313      	orrs	r3, r2
 8004796:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	699b      	ldr	r3, [r3, #24]
 800479c:	693a      	ldr	r2, [r7, #16]
 800479e:	4313      	orrs	r3, r2
 80047a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	693a      	ldr	r2, [r7, #16]
 80047a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	68fa      	ldr	r2, [r7, #12]
 80047ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	685a      	ldr	r2, [r3, #4]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	697a      	ldr	r2, [r7, #20]
 80047ba:	621a      	str	r2, [r3, #32]
}
 80047bc:	bf00      	nop
 80047be:	371c      	adds	r7, #28
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bc80      	pop	{r7}
 80047c4:	4770      	bx	lr
 80047c6:	bf00      	nop
 80047c8:	40012c00 	.word	0x40012c00

080047cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b087      	sub	sp, #28
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a1b      	ldr	r3, [r3, #32]
 80047da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a1b      	ldr	r3, [r3, #32]
 80047e0:	f023 0210 	bic.w	r2, r3, #16
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	699b      	ldr	r3, [r3, #24]
 80047f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004802:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	021b      	lsls	r3, r3, #8
 800480a:	68fa      	ldr	r2, [r7, #12]
 800480c:	4313      	orrs	r3, r2
 800480e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	f023 0320 	bic.w	r3, r3, #32
 8004816:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	011b      	lsls	r3, r3, #4
 800481e:	697a      	ldr	r2, [r7, #20]
 8004820:	4313      	orrs	r3, r2
 8004822:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4a1d      	ldr	r2, [pc, #116]	; (800489c <TIM_OC2_SetConfig+0xd0>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d10d      	bne.n	8004848 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004832:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	011b      	lsls	r3, r3, #4
 800483a:	697a      	ldr	r2, [r7, #20]
 800483c:	4313      	orrs	r3, r2
 800483e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004846:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4a14      	ldr	r2, [pc, #80]	; (800489c <TIM_OC2_SetConfig+0xd0>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d113      	bne.n	8004878 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004856:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800485e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	695b      	ldr	r3, [r3, #20]
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	693a      	ldr	r2, [r7, #16]
 8004868:	4313      	orrs	r3, r2
 800486a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	699b      	ldr	r3, [r3, #24]
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	693a      	ldr	r2, [r7, #16]
 8004874:	4313      	orrs	r3, r2
 8004876:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	693a      	ldr	r2, [r7, #16]
 800487c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	68fa      	ldr	r2, [r7, #12]
 8004882:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	685a      	ldr	r2, [r3, #4]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	697a      	ldr	r2, [r7, #20]
 8004890:	621a      	str	r2, [r3, #32]
}
 8004892:	bf00      	nop
 8004894:	371c      	adds	r7, #28
 8004896:	46bd      	mov	sp, r7
 8004898:	bc80      	pop	{r7}
 800489a:	4770      	bx	lr
 800489c:	40012c00 	.word	0x40012c00

080048a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b087      	sub	sp, #28
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a1b      	ldr	r3, [r3, #32]
 80048ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a1b      	ldr	r3, [r3, #32]
 80048b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	69db      	ldr	r3, [r3, #28]
 80048c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f023 0303 	bic.w	r3, r3, #3
 80048d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	68fa      	ldr	r2, [r7, #12]
 80048de:	4313      	orrs	r3, r2
 80048e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80048e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	021b      	lsls	r3, r3, #8
 80048f0:	697a      	ldr	r2, [r7, #20]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a1d      	ldr	r2, [pc, #116]	; (8004970 <TIM_OC3_SetConfig+0xd0>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d10d      	bne.n	800491a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004904:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	021b      	lsls	r3, r3, #8
 800490c:	697a      	ldr	r2, [r7, #20]
 800490e:	4313      	orrs	r3, r2
 8004910:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004918:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a14      	ldr	r2, [pc, #80]	; (8004970 <TIM_OC3_SetConfig+0xd0>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d113      	bne.n	800494a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004928:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004930:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	695b      	ldr	r3, [r3, #20]
 8004936:	011b      	lsls	r3, r3, #4
 8004938:	693a      	ldr	r2, [r7, #16]
 800493a:	4313      	orrs	r3, r2
 800493c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	699b      	ldr	r3, [r3, #24]
 8004942:	011b      	lsls	r3, r3, #4
 8004944:	693a      	ldr	r2, [r7, #16]
 8004946:	4313      	orrs	r3, r2
 8004948:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	693a      	ldr	r2, [r7, #16]
 800494e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	68fa      	ldr	r2, [r7, #12]
 8004954:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	685a      	ldr	r2, [r3, #4]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	697a      	ldr	r2, [r7, #20]
 8004962:	621a      	str	r2, [r3, #32]
}
 8004964:	bf00      	nop
 8004966:	371c      	adds	r7, #28
 8004968:	46bd      	mov	sp, r7
 800496a:	bc80      	pop	{r7}
 800496c:	4770      	bx	lr
 800496e:	bf00      	nop
 8004970:	40012c00 	.word	0x40012c00

08004974 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004974:	b480      	push	{r7}
 8004976:	b087      	sub	sp, #28
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a1b      	ldr	r3, [r3, #32]
 8004982:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6a1b      	ldr	r3, [r3, #32]
 8004988:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	69db      	ldr	r3, [r3, #28]
 800499a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	021b      	lsls	r3, r3, #8
 80049b2:	68fa      	ldr	r2, [r7, #12]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80049be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	031b      	lsls	r3, r3, #12
 80049c6:	693a      	ldr	r2, [r7, #16]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	4a0f      	ldr	r2, [pc, #60]	; (8004a0c <TIM_OC4_SetConfig+0x98>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d109      	bne.n	80049e8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	695b      	ldr	r3, [r3, #20]
 80049e0:	019b      	lsls	r3, r3, #6
 80049e2:	697a      	ldr	r2, [r7, #20]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	697a      	ldr	r2, [r7, #20]
 80049ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	68fa      	ldr	r2, [r7, #12]
 80049f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	685a      	ldr	r2, [r3, #4]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	693a      	ldr	r2, [r7, #16]
 8004a00:	621a      	str	r2, [r3, #32]
}
 8004a02:	bf00      	nop
 8004a04:	371c      	adds	r7, #28
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bc80      	pop	{r7}
 8004a0a:	4770      	bx	lr
 8004a0c:	40012c00 	.word	0x40012c00

08004a10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b087      	sub	sp, #28
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	60b9      	str	r1, [r7, #8]
 8004a1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6a1b      	ldr	r3, [r3, #32]
 8004a20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6a1b      	ldr	r3, [r3, #32]
 8004a26:	f023 0201 	bic.w	r2, r3, #1
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	699b      	ldr	r3, [r3, #24]
 8004a32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	011b      	lsls	r3, r3, #4
 8004a40:	693a      	ldr	r2, [r7, #16]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	f023 030a 	bic.w	r3, r3, #10
 8004a4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a4e:	697a      	ldr	r2, [r7, #20]
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	693a      	ldr	r2, [r7, #16]
 8004a5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	697a      	ldr	r2, [r7, #20]
 8004a60:	621a      	str	r2, [r3, #32]
}
 8004a62:	bf00      	nop
 8004a64:	371c      	adds	r7, #28
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bc80      	pop	{r7}
 8004a6a:	4770      	bx	lr

08004a6c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b087      	sub	sp, #28
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	60f8      	str	r0, [r7, #12]
 8004a74:	60b9      	str	r1, [r7, #8]
 8004a76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6a1b      	ldr	r3, [r3, #32]
 8004a7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	6a1b      	ldr	r3, [r3, #32]
 8004a82:	f023 0210 	bic.w	r2, r3, #16
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	699b      	ldr	r3, [r3, #24]
 8004a8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	031b      	lsls	r3, r3, #12
 8004a9c:	693a      	ldr	r2, [r7, #16]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004aa8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	011b      	lsls	r3, r3, #4
 8004aae:	697a      	ldr	r2, [r7, #20]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	693a      	ldr	r2, [r7, #16]
 8004ab8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	697a      	ldr	r2, [r7, #20]
 8004abe:	621a      	str	r2, [r3, #32]
}
 8004ac0:	bf00      	nop
 8004ac2:	371c      	adds	r7, #28
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bc80      	pop	{r7}
 8004ac8:	4770      	bx	lr

08004aca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004aca:	b480      	push	{r7}
 8004acc:	b085      	sub	sp, #20
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
 8004ad2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ae0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ae2:	683a      	ldr	r2, [r7, #0]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	f043 0307 	orr.w	r3, r3, #7
 8004aec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	68fa      	ldr	r2, [r7, #12]
 8004af2:	609a      	str	r2, [r3, #8]
}
 8004af4:	bf00      	nop
 8004af6:	3714      	adds	r7, #20
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bc80      	pop	{r7}
 8004afc:	4770      	bx	lr

08004afe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004afe:	b480      	push	{r7}
 8004b00:	b087      	sub	sp, #28
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	60f8      	str	r0, [r7, #12]
 8004b06:	60b9      	str	r1, [r7, #8]
 8004b08:	607a      	str	r2, [r7, #4]
 8004b0a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b18:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	021a      	lsls	r2, r3, #8
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	431a      	orrs	r2, r3
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	697a      	ldr	r2, [r7, #20]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	697a      	ldr	r2, [r7, #20]
 8004b30:	609a      	str	r2, [r3, #8]
}
 8004b32:	bf00      	nop
 8004b34:	371c      	adds	r7, #28
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bc80      	pop	{r7}
 8004b3a:	4770      	bx	lr

08004b3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b085      	sub	sp, #20
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d101      	bne.n	8004b54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b50:	2302      	movs	r3, #2
 8004b52:	e046      	b.n	8004be2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2202      	movs	r2, #2
 8004b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68fa      	ldr	r2, [r7, #12]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a16      	ldr	r2, [pc, #88]	; (8004bec <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d00e      	beq.n	8004bb6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ba0:	d009      	beq.n	8004bb6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a12      	ldr	r2, [pc, #72]	; (8004bf0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d004      	beq.n	8004bb6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a10      	ldr	r2, [pc, #64]	; (8004bf4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d10c      	bne.n	8004bd0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bbc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	68ba      	ldr	r2, [r7, #8]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68ba      	ldr	r2, [r7, #8]
 8004bce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004be0:	2300      	movs	r3, #0
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3714      	adds	r7, #20
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bc80      	pop	{r7}
 8004bea:	4770      	bx	lr
 8004bec:	40012c00 	.word	0x40012c00
 8004bf0:	40000400 	.word	0x40000400
 8004bf4:	40000800 	.word	0x40000800

08004bf8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b085      	sub	sp, #20
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004c02:	2300      	movs	r3, #0
 8004c04:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d101      	bne.n	8004c14 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004c10:	2302      	movs	r3, #2
 8004c12:	e03d      	b.n	8004c90 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	4313      	orrs	r3, r2
 8004c36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	4313      	orrs	r3, r2
 8004c44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	695b      	ldr	r3, [r3, #20]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	69db      	ldr	r3, [r3, #28]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	68fa      	ldr	r2, [r7, #12]
 8004c84:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c8e:	2300      	movs	r3, #0
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3714      	adds	r7, #20
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bc80      	pop	{r7}
 8004c98:	4770      	bx	lr

08004c9a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c9a:	b480      	push	{r7}
 8004c9c:	b083      	sub	sp, #12
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ca2:	bf00      	nop
 8004ca4:	370c      	adds	r7, #12
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bc80      	pop	{r7}
 8004caa:	4770      	bx	lr

08004cac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004cb4:	bf00      	nop
 8004cb6:	370c      	adds	r7, #12
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bc80      	pop	{r7}
 8004cbc:	4770      	bx	lr

08004cbe <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cbe:	b580      	push	{r7, lr}
 8004cc0:	b082      	sub	sp, #8
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d101      	bne.n	8004cd0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e042      	b.n	8004d56 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d106      	bne.n	8004cea <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f7fd fbcd 	bl	8002484 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2224      	movs	r2, #36	; 0x24
 8004cee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68da      	ldr	r2, [r3, #12]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d00:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 fd70 	bl	80057e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	691a      	ldr	r2, [r3, #16]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d16:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	695a      	ldr	r2, [r3, #20]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d26:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	68da      	ldr	r2, [r3, #12]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d36:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2220      	movs	r2, #32
 8004d42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2220      	movs	r2, #32
 8004d4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2200      	movs	r2, #0
 8004d52:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004d54:	2300      	movs	r3, #0
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3708      	adds	r7, #8
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}

08004d5e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d5e:	b580      	push	{r7, lr}
 8004d60:	b08a      	sub	sp, #40	; 0x28
 8004d62:	af02      	add	r7, sp, #8
 8004d64:	60f8      	str	r0, [r7, #12]
 8004d66:	60b9      	str	r1, [r7, #8]
 8004d68:	603b      	str	r3, [r7, #0]
 8004d6a:	4613      	mov	r3, r2
 8004d6c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	2b20      	cmp	r3, #32
 8004d7c:	d16d      	bne.n	8004e5a <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d002      	beq.n	8004d8a <HAL_UART_Transmit+0x2c>
 8004d84:	88fb      	ldrh	r3, [r7, #6]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d101      	bne.n	8004d8e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e066      	b.n	8004e5c <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2200      	movs	r2, #0
 8004d92:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2221      	movs	r2, #33	; 0x21
 8004d98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d9c:	f7fd fefc 	bl	8002b98 <HAL_GetTick>
 8004da0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	88fa      	ldrh	r2, [r7, #6]
 8004da6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	88fa      	ldrh	r2, [r7, #6]
 8004dac:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004db6:	d108      	bne.n	8004dca <HAL_UART_Transmit+0x6c>
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	691b      	ldr	r3, [r3, #16]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d104      	bne.n	8004dca <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	61bb      	str	r3, [r7, #24]
 8004dc8:	e003      	b.n	8004dd2 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004dd2:	e02a      	b.n	8004e2a <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	9300      	str	r3, [sp, #0]
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	2180      	movs	r1, #128	; 0x80
 8004dde:	68f8      	ldr	r0, [r7, #12]
 8004de0:	f000 faf8 	bl	80053d4 <UART_WaitOnFlagUntilTimeout>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d001      	beq.n	8004dee <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e036      	b.n	8004e5c <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d10b      	bne.n	8004e0c <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004df4:	69bb      	ldr	r3, [r7, #24]
 8004df6:	881b      	ldrh	r3, [r3, #0]
 8004df8:	461a      	mov	r2, r3
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e02:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004e04:	69bb      	ldr	r3, [r7, #24]
 8004e06:	3302      	adds	r3, #2
 8004e08:	61bb      	str	r3, [r7, #24]
 8004e0a:	e007      	b.n	8004e1c <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	781a      	ldrb	r2, [r3, #0]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	3301      	adds	r3, #1
 8004e1a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	3b01      	subs	r3, #1
 8004e24:	b29a      	uxth	r2, r3
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d1cf      	bne.n	8004dd4 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	9300      	str	r3, [sp, #0]
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	2140      	movs	r1, #64	; 0x40
 8004e3e:	68f8      	ldr	r0, [r7, #12]
 8004e40:	f000 fac8 	bl	80053d4 <UART_WaitOnFlagUntilTimeout>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d001      	beq.n	8004e4e <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	e006      	b.n	8004e5c <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2220      	movs	r2, #32
 8004e52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004e56:	2300      	movs	r3, #0
 8004e58:	e000      	b.n	8004e5c <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004e5a:	2302      	movs	r3, #2
  }
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3720      	adds	r7, #32
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}

08004e64 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b0ba      	sub	sp, #232	; 0xe8
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	695b      	ldr	r3, [r3, #20]
 8004e86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004e90:	2300      	movs	r3, #0
 8004e92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004e96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e9a:	f003 030f 	and.w	r3, r3, #15
 8004e9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004ea2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d10f      	bne.n	8004eca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004eaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004eae:	f003 0320 	and.w	r3, r3, #32
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d009      	beq.n	8004eca <HAL_UART_IRQHandler+0x66>
 8004eb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004eba:	f003 0320 	and.w	r3, r3, #32
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d003      	beq.n	8004eca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f000 fbd1 	bl	800566a <UART_Receive_IT>
      return;
 8004ec8:	e25b      	b.n	8005382 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004eca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	f000 80de 	beq.w	8005090 <HAL_UART_IRQHandler+0x22c>
 8004ed4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ed8:	f003 0301 	and.w	r3, r3, #1
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d106      	bne.n	8004eee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004ee0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ee4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	f000 80d1 	beq.w	8005090 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004eee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ef2:	f003 0301 	and.w	r3, r3, #1
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00b      	beq.n	8004f12 <HAL_UART_IRQHandler+0xae>
 8004efa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d005      	beq.n	8004f12 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f0a:	f043 0201 	orr.w	r2, r3, #1
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f16:	f003 0304 	and.w	r3, r3, #4
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d00b      	beq.n	8004f36 <HAL_UART_IRQHandler+0xd2>
 8004f1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f22:	f003 0301 	and.w	r3, r3, #1
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d005      	beq.n	8004f36 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f2e:	f043 0202 	orr.w	r2, r3, #2
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f3a:	f003 0302 	and.w	r3, r3, #2
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d00b      	beq.n	8004f5a <HAL_UART_IRQHandler+0xf6>
 8004f42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f46:	f003 0301 	and.w	r3, r3, #1
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d005      	beq.n	8004f5a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f52:	f043 0204 	orr.w	r2, r3, #4
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004f5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f5e:	f003 0308 	and.w	r3, r3, #8
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d011      	beq.n	8004f8a <HAL_UART_IRQHandler+0x126>
 8004f66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f6a:	f003 0320 	and.w	r3, r3, #32
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d105      	bne.n	8004f7e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004f72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f76:	f003 0301 	and.w	r3, r3, #1
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d005      	beq.n	8004f8a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f82:	f043 0208 	orr.w	r2, r3, #8
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	f000 81f2 	beq.w	8005378 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f98:	f003 0320 	and.w	r3, r3, #32
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d008      	beq.n	8004fb2 <HAL_UART_IRQHandler+0x14e>
 8004fa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fa4:	f003 0320 	and.w	r3, r3, #32
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d002      	beq.n	8004fb2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f000 fb5c 	bl	800566a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	695b      	ldr	r3, [r3, #20]
 8004fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	bf14      	ite	ne
 8004fc0:	2301      	movne	r3, #1
 8004fc2:	2300      	moveq	r3, #0
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fce:	f003 0308 	and.w	r3, r3, #8
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d103      	bne.n	8004fde <HAL_UART_IRQHandler+0x17a>
 8004fd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d04f      	beq.n	800507e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f000 fa66 	bl	80054b0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	695b      	ldr	r3, [r3, #20]
 8004fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d041      	beq.n	8005076 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	3314      	adds	r3, #20
 8004ff8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ffc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005000:	e853 3f00 	ldrex	r3, [r3]
 8005004:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005008:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800500c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005010:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	3314      	adds	r3, #20
 800501a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800501e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005022:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005026:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800502a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800502e:	e841 2300 	strex	r3, r2, [r1]
 8005032:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005036:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d1d9      	bne.n	8004ff2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005042:	2b00      	cmp	r3, #0
 8005044:	d013      	beq.n	800506e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800504a:	4a7e      	ldr	r2, [pc, #504]	; (8005244 <HAL_UART_IRQHandler+0x3e0>)
 800504c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005052:	4618      	mov	r0, r3
 8005054:	f7fd ff16 	bl	8002e84 <HAL_DMA_Abort_IT>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d016      	beq.n	800508c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005068:	4610      	mov	r0, r2
 800506a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800506c:	e00e      	b.n	800508c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 f99c 	bl	80053ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005074:	e00a      	b.n	800508c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 f998 	bl	80053ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800507c:	e006      	b.n	800508c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f000 f994 	bl	80053ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800508a:	e175      	b.n	8005378 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800508c:	bf00      	nop
    return;
 800508e:	e173      	b.n	8005378 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005094:	2b01      	cmp	r3, #1
 8005096:	f040 814f 	bne.w	8005338 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800509a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800509e:	f003 0310 	and.w	r3, r3, #16
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	f000 8148 	beq.w	8005338 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80050a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050ac:	f003 0310 	and.w	r3, r3, #16
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	f000 8141 	beq.w	8005338 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80050b6:	2300      	movs	r3, #0
 80050b8:	60bb      	str	r3, [r7, #8]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	60bb      	str	r3, [r7, #8]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	60bb      	str	r3, [r7, #8]
 80050ca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	695b      	ldr	r3, [r3, #20]
 80050d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	f000 80b6 	beq.w	8005248 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80050e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	f000 8145 	beq.w	800537c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80050f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80050fa:	429a      	cmp	r2, r3
 80050fc:	f080 813e 	bcs.w	800537c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005106:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800510c:	699b      	ldr	r3, [r3, #24]
 800510e:	2b20      	cmp	r3, #32
 8005110:	f000 8088 	beq.w	8005224 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	330c      	adds	r3, #12
 800511a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800511e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005122:	e853 3f00 	ldrex	r3, [r3]
 8005126:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800512a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800512e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005132:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	330c      	adds	r3, #12
 800513c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005140:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005144:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005148:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800514c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005150:	e841 2300 	strex	r3, r2, [r1]
 8005154:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005158:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800515c:	2b00      	cmp	r3, #0
 800515e:	d1d9      	bne.n	8005114 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	3314      	adds	r3, #20
 8005166:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005168:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800516a:	e853 3f00 	ldrex	r3, [r3]
 800516e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005170:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005172:	f023 0301 	bic.w	r3, r3, #1
 8005176:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	3314      	adds	r3, #20
 8005180:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005184:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005188:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800518a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800518c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005190:	e841 2300 	strex	r3, r2, [r1]
 8005194:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005196:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005198:	2b00      	cmp	r3, #0
 800519a:	d1e1      	bne.n	8005160 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	3314      	adds	r3, #20
 80051a2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80051a6:	e853 3f00 	ldrex	r3, [r3]
 80051aa:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80051ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	3314      	adds	r3, #20
 80051bc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80051c0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80051c2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80051c6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80051c8:	e841 2300 	strex	r3, r2, [r1]
 80051cc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80051ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d1e3      	bne.n	800519c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2220      	movs	r2, #32
 80051d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	330c      	adds	r3, #12
 80051e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051ec:	e853 3f00 	ldrex	r3, [r3]
 80051f0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80051f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051f4:	f023 0310 	bic.w	r3, r3, #16
 80051f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	330c      	adds	r3, #12
 8005202:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005206:	65ba      	str	r2, [r7, #88]	; 0x58
 8005208:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800520a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800520c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800520e:	e841 2300 	strex	r3, r2, [r1]
 8005212:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005214:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005216:	2b00      	cmp	r3, #0
 8005218:	d1e3      	bne.n	80051e2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800521e:	4618      	mov	r0, r3
 8005220:	f7fd fdf5 	bl	8002e0e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2202      	movs	r2, #2
 8005228:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005232:	b29b      	uxth	r3, r3
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	b29b      	uxth	r3, r3
 8005238:	4619      	mov	r1, r3
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f000 f8bf 	bl	80053be <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005240:	e09c      	b.n	800537c <HAL_UART_IRQHandler+0x518>
 8005242:	bf00      	nop
 8005244:	08005575 	.word	0x08005575
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005250:	b29b      	uxth	r3, r3
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800525c:	b29b      	uxth	r3, r3
 800525e:	2b00      	cmp	r3, #0
 8005260:	f000 808e 	beq.w	8005380 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005264:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005268:	2b00      	cmp	r3, #0
 800526a:	f000 8089 	beq.w	8005380 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	330c      	adds	r3, #12
 8005274:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005278:	e853 3f00 	ldrex	r3, [r3]
 800527c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800527e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005280:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005284:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	330c      	adds	r3, #12
 800528e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005292:	647a      	str	r2, [r7, #68]	; 0x44
 8005294:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005296:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005298:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800529a:	e841 2300 	strex	r3, r2, [r1]
 800529e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80052a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d1e3      	bne.n	800526e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	3314      	adds	r3, #20
 80052ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b0:	e853 3f00 	ldrex	r3, [r3]
 80052b4:	623b      	str	r3, [r7, #32]
   return(result);
 80052b6:	6a3b      	ldr	r3, [r7, #32]
 80052b8:	f023 0301 	bic.w	r3, r3, #1
 80052bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	3314      	adds	r3, #20
 80052c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80052ca:	633a      	str	r2, [r7, #48]	; 0x30
 80052cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80052d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052d2:	e841 2300 	strex	r3, r2, [r1]
 80052d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80052d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d1e3      	bne.n	80052a6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2220      	movs	r2, #32
 80052e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	330c      	adds	r3, #12
 80052f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	e853 3f00 	ldrex	r3, [r3]
 80052fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f023 0310 	bic.w	r3, r3, #16
 8005302:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	330c      	adds	r3, #12
 800530c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005310:	61fa      	str	r2, [r7, #28]
 8005312:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005314:	69b9      	ldr	r1, [r7, #24]
 8005316:	69fa      	ldr	r2, [r7, #28]
 8005318:	e841 2300 	strex	r3, r2, [r1]
 800531c:	617b      	str	r3, [r7, #20]
   return(result);
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d1e3      	bne.n	80052ec <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2202      	movs	r2, #2
 8005328:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800532a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800532e:	4619      	mov	r1, r3
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f000 f844 	bl	80053be <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005336:	e023      	b.n	8005380 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005338:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800533c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005340:	2b00      	cmp	r3, #0
 8005342:	d009      	beq.n	8005358 <HAL_UART_IRQHandler+0x4f4>
 8005344:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005348:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800534c:	2b00      	cmp	r3, #0
 800534e:	d003      	beq.n	8005358 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f000 f923 	bl	800559c <UART_Transmit_IT>
    return;
 8005356:	e014      	b.n	8005382 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005358:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800535c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005360:	2b00      	cmp	r3, #0
 8005362:	d00e      	beq.n	8005382 <HAL_UART_IRQHandler+0x51e>
 8005364:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800536c:	2b00      	cmp	r3, #0
 800536e:	d008      	beq.n	8005382 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f000 f962 	bl	800563a <UART_EndTransmit_IT>
    return;
 8005376:	e004      	b.n	8005382 <HAL_UART_IRQHandler+0x51e>
    return;
 8005378:	bf00      	nop
 800537a:	e002      	b.n	8005382 <HAL_UART_IRQHandler+0x51e>
      return;
 800537c:	bf00      	nop
 800537e:	e000      	b.n	8005382 <HAL_UART_IRQHandler+0x51e>
      return;
 8005380:	bf00      	nop
  }
}
 8005382:	37e8      	adds	r7, #232	; 0xe8
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005390:	bf00      	nop
 8005392:	370c      	adds	r7, #12
 8005394:	46bd      	mov	sp, r7
 8005396:	bc80      	pop	{r7}
 8005398:	4770      	bx	lr

0800539a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800539a:	b480      	push	{r7}
 800539c:	b083      	sub	sp, #12
 800539e:	af00      	add	r7, sp, #0
 80053a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80053a2:	bf00      	nop
 80053a4:	370c      	adds	r7, #12
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bc80      	pop	{r7}
 80053aa:	4770      	bx	lr

080053ac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b083      	sub	sp, #12
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80053b4:	bf00      	nop
 80053b6:	370c      	adds	r7, #12
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bc80      	pop	{r7}
 80053bc:	4770      	bx	lr

080053be <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80053be:	b480      	push	{r7}
 80053c0:	b083      	sub	sp, #12
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	6078      	str	r0, [r7, #4]
 80053c6:	460b      	mov	r3, r1
 80053c8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80053ca:	bf00      	nop
 80053cc:	370c      	adds	r7, #12
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bc80      	pop	{r7}
 80053d2:	4770      	bx	lr

080053d4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b090      	sub	sp, #64	; 0x40
 80053d8:	af00      	add	r7, sp, #0
 80053da:	60f8      	str	r0, [r7, #12]
 80053dc:	60b9      	str	r1, [r7, #8]
 80053de:	603b      	str	r3, [r7, #0]
 80053e0:	4613      	mov	r3, r2
 80053e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053e4:	e050      	b.n	8005488 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ec:	d04c      	beq.n	8005488 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80053ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d007      	beq.n	8005404 <UART_WaitOnFlagUntilTimeout+0x30>
 80053f4:	f7fd fbd0 	bl	8002b98 <HAL_GetTick>
 80053f8:	4602      	mov	r2, r0
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	1ad3      	subs	r3, r2, r3
 80053fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005400:	429a      	cmp	r2, r3
 8005402:	d241      	bcs.n	8005488 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	330c      	adds	r3, #12
 800540a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800540c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800540e:	e853 3f00 	ldrex	r3, [r3]
 8005412:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005416:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800541a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	330c      	adds	r3, #12
 8005422:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005424:	637a      	str	r2, [r7, #52]	; 0x34
 8005426:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005428:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800542a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800542c:	e841 2300 	strex	r3, r2, [r1]
 8005430:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005434:	2b00      	cmp	r3, #0
 8005436:	d1e5      	bne.n	8005404 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	3314      	adds	r3, #20
 800543e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	e853 3f00 	ldrex	r3, [r3]
 8005446:	613b      	str	r3, [r7, #16]
   return(result);
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	f023 0301 	bic.w	r3, r3, #1
 800544e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	3314      	adds	r3, #20
 8005456:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005458:	623a      	str	r2, [r7, #32]
 800545a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800545c:	69f9      	ldr	r1, [r7, #28]
 800545e:	6a3a      	ldr	r2, [r7, #32]
 8005460:	e841 2300 	strex	r3, r2, [r1]
 8005464:	61bb      	str	r3, [r7, #24]
   return(result);
 8005466:	69bb      	ldr	r3, [r7, #24]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d1e5      	bne.n	8005438 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2220      	movs	r2, #32
 8005470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2220      	movs	r2, #32
 8005478:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2200      	movs	r2, #0
 8005480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8005484:	2303      	movs	r3, #3
 8005486:	e00f      	b.n	80054a8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	4013      	ands	r3, r2
 8005492:	68ba      	ldr	r2, [r7, #8]
 8005494:	429a      	cmp	r2, r3
 8005496:	bf0c      	ite	eq
 8005498:	2301      	moveq	r3, #1
 800549a:	2300      	movne	r3, #0
 800549c:	b2db      	uxtb	r3, r3
 800549e:	461a      	mov	r2, r3
 80054a0:	79fb      	ldrb	r3, [r7, #7]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d09f      	beq.n	80053e6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80054a6:	2300      	movs	r3, #0
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3740      	adds	r7, #64	; 0x40
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}

080054b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b095      	sub	sp, #84	; 0x54
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	330c      	adds	r3, #12
 80054be:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054c2:	e853 3f00 	ldrex	r3, [r3]
 80054c6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80054c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80054ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	330c      	adds	r3, #12
 80054d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80054d8:	643a      	str	r2, [r7, #64]	; 0x40
 80054da:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80054de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80054e0:	e841 2300 	strex	r3, r2, [r1]
 80054e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80054e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d1e5      	bne.n	80054b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	3314      	adds	r3, #20
 80054f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f4:	6a3b      	ldr	r3, [r7, #32]
 80054f6:	e853 3f00 	ldrex	r3, [r3]
 80054fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	f023 0301 	bic.w	r3, r3, #1
 8005502:	64bb      	str	r3, [r7, #72]	; 0x48
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	3314      	adds	r3, #20
 800550a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800550c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800550e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005510:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005512:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005514:	e841 2300 	strex	r3, r2, [r1]
 8005518:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800551a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551c:	2b00      	cmp	r3, #0
 800551e:	d1e5      	bne.n	80054ec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005524:	2b01      	cmp	r3, #1
 8005526:	d119      	bne.n	800555c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	330c      	adds	r3, #12
 800552e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	e853 3f00 	ldrex	r3, [r3]
 8005536:	60bb      	str	r3, [r7, #8]
   return(result);
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	f023 0310 	bic.w	r3, r3, #16
 800553e:	647b      	str	r3, [r7, #68]	; 0x44
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	330c      	adds	r3, #12
 8005546:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005548:	61ba      	str	r2, [r7, #24]
 800554a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800554c:	6979      	ldr	r1, [r7, #20]
 800554e:	69ba      	ldr	r2, [r7, #24]
 8005550:	e841 2300 	strex	r3, r2, [r1]
 8005554:	613b      	str	r3, [r7, #16]
   return(result);
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d1e5      	bne.n	8005528 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2220      	movs	r2, #32
 8005560:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	631a      	str	r2, [r3, #48]	; 0x30
}
 800556a:	bf00      	nop
 800556c:	3754      	adds	r7, #84	; 0x54
 800556e:	46bd      	mov	sp, r7
 8005570:	bc80      	pop	{r7}
 8005572:	4770      	bx	lr

08005574 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b084      	sub	sp, #16
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005580:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2200      	movs	r2, #0
 8005586:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2200      	movs	r2, #0
 800558c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800558e:	68f8      	ldr	r0, [r7, #12]
 8005590:	f7ff ff0c 	bl	80053ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005594:	bf00      	nop
 8005596:	3710      	adds	r7, #16
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}

0800559c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800559c:	b480      	push	{r7}
 800559e:	b085      	sub	sp, #20
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	2b21      	cmp	r3, #33	; 0x21
 80055ae:	d13e      	bne.n	800562e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055b8:	d114      	bne.n	80055e4 <UART_Transmit_IT+0x48>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d110      	bne.n	80055e4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a1b      	ldr	r3, [r3, #32]
 80055c6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	881b      	ldrh	r3, [r3, #0]
 80055cc:	461a      	mov	r2, r3
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055d6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6a1b      	ldr	r3, [r3, #32]
 80055dc:	1c9a      	adds	r2, r3, #2
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	621a      	str	r2, [r3, #32]
 80055e2:	e008      	b.n	80055f6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6a1b      	ldr	r3, [r3, #32]
 80055e8:	1c59      	adds	r1, r3, #1
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	6211      	str	r1, [r2, #32]
 80055ee:	781a      	ldrb	r2, [r3, #0]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	3b01      	subs	r3, #1
 80055fe:	b29b      	uxth	r3, r3
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	4619      	mov	r1, r3
 8005604:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005606:	2b00      	cmp	r3, #0
 8005608:	d10f      	bne.n	800562a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	68da      	ldr	r2, [r3, #12]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005618:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	68da      	ldr	r2, [r3, #12]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005628:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800562a:	2300      	movs	r3, #0
 800562c:	e000      	b.n	8005630 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800562e:	2302      	movs	r3, #2
  }
}
 8005630:	4618      	mov	r0, r3
 8005632:	3714      	adds	r7, #20
 8005634:	46bd      	mov	sp, r7
 8005636:	bc80      	pop	{r7}
 8005638:	4770      	bx	lr

0800563a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800563a:	b580      	push	{r7, lr}
 800563c:	b082      	sub	sp, #8
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	68da      	ldr	r2, [r3, #12]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005650:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2220      	movs	r2, #32
 8005656:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f7ff fe94 	bl	8005388 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005660:	2300      	movs	r3, #0
}
 8005662:	4618      	mov	r0, r3
 8005664:	3708      	adds	r7, #8
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}

0800566a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800566a:	b580      	push	{r7, lr}
 800566c:	b08c      	sub	sp, #48	; 0x30
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005678:	b2db      	uxtb	r3, r3
 800567a:	2b22      	cmp	r3, #34	; 0x22
 800567c:	f040 80ae 	bne.w	80057dc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005688:	d117      	bne.n	80056ba <UART_Receive_IT+0x50>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d113      	bne.n	80056ba <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005692:	2300      	movs	r3, #0
 8005694:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800569a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056a8:	b29a      	uxth	r2, r3
 80056aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b2:	1c9a      	adds	r2, r3, #2
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	629a      	str	r2, [r3, #40]	; 0x28
 80056b8:	e026      	b.n	8005708 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056be:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80056c0:	2300      	movs	r3, #0
 80056c2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056cc:	d007      	beq.n	80056de <UART_Receive_IT+0x74>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d10a      	bne.n	80056ec <UART_Receive_IT+0x82>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d106      	bne.n	80056ec <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	b2da      	uxtb	r2, r3
 80056e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056e8:	701a      	strb	r2, [r3, #0]
 80056ea:	e008      	b.n	80056fe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056f8:	b2da      	uxtb	r2, r3
 80056fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056fc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005702:	1c5a      	adds	r2, r3, #1
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800570c:	b29b      	uxth	r3, r3
 800570e:	3b01      	subs	r3, #1
 8005710:	b29b      	uxth	r3, r3
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	4619      	mov	r1, r3
 8005716:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005718:	2b00      	cmp	r3, #0
 800571a:	d15d      	bne.n	80057d8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	68da      	ldr	r2, [r3, #12]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f022 0220 	bic.w	r2, r2, #32
 800572a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68da      	ldr	r2, [r3, #12]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800573a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	695a      	ldr	r2, [r3, #20]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f022 0201 	bic.w	r2, r2, #1
 800574a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2220      	movs	r2, #32
 8005750:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800575e:	2b01      	cmp	r3, #1
 8005760:	d135      	bne.n	80057ce <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	330c      	adds	r3, #12
 800576e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	e853 3f00 	ldrex	r3, [r3]
 8005776:	613b      	str	r3, [r7, #16]
   return(result);
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	f023 0310 	bic.w	r3, r3, #16
 800577e:	627b      	str	r3, [r7, #36]	; 0x24
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	330c      	adds	r3, #12
 8005786:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005788:	623a      	str	r2, [r7, #32]
 800578a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800578c:	69f9      	ldr	r1, [r7, #28]
 800578e:	6a3a      	ldr	r2, [r7, #32]
 8005790:	e841 2300 	strex	r3, r2, [r1]
 8005794:	61bb      	str	r3, [r7, #24]
   return(result);
 8005796:	69bb      	ldr	r3, [r7, #24]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d1e5      	bne.n	8005768 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f003 0310 	and.w	r3, r3, #16
 80057a6:	2b10      	cmp	r3, #16
 80057a8:	d10a      	bne.n	80057c0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80057aa:	2300      	movs	r3, #0
 80057ac:	60fb      	str	r3, [r7, #12]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	60fb      	str	r3, [r7, #12]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	60fb      	str	r3, [r7, #12]
 80057be:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80057c4:	4619      	mov	r1, r3
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f7ff fdf9 	bl	80053be <HAL_UARTEx_RxEventCallback>
 80057cc:	e002      	b.n	80057d4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f7ff fde3 	bl	800539a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80057d4:	2300      	movs	r3, #0
 80057d6:	e002      	b.n	80057de <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80057d8:	2300      	movs	r3, #0
 80057da:	e000      	b.n	80057de <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80057dc:	2302      	movs	r3, #2
  }
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3730      	adds	r7, #48	; 0x30
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
	...

080057e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b084      	sub	sp, #16
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	68da      	ldr	r2, [r3, #12]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	430a      	orrs	r2, r1
 8005804:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	689a      	ldr	r2, [r3, #8]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	691b      	ldr	r3, [r3, #16]
 800580e:	431a      	orrs	r2, r3
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	695b      	ldr	r3, [r3, #20]
 8005814:	4313      	orrs	r3, r2
 8005816:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005822:	f023 030c 	bic.w	r3, r3, #12
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	6812      	ldr	r2, [r2, #0]
 800582a:	68b9      	ldr	r1, [r7, #8]
 800582c:	430b      	orrs	r3, r1
 800582e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	695b      	ldr	r3, [r3, #20]
 8005836:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	699a      	ldr	r2, [r3, #24]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	430a      	orrs	r2, r1
 8005844:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a2c      	ldr	r2, [pc, #176]	; (80058fc <UART_SetConfig+0x114>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d103      	bne.n	8005858 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005850:	f7fe f90a 	bl	8003a68 <HAL_RCC_GetPCLK2Freq>
 8005854:	60f8      	str	r0, [r7, #12]
 8005856:	e002      	b.n	800585e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005858:	f7fe f8f2 	bl	8003a40 <HAL_RCC_GetPCLK1Freq>
 800585c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800585e:	68fa      	ldr	r2, [r7, #12]
 8005860:	4613      	mov	r3, r2
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	4413      	add	r3, r2
 8005866:	009a      	lsls	r2, r3, #2
 8005868:	441a      	add	r2, r3
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	fbb2 f3f3 	udiv	r3, r2, r3
 8005874:	4a22      	ldr	r2, [pc, #136]	; (8005900 <UART_SetConfig+0x118>)
 8005876:	fba2 2303 	umull	r2, r3, r2, r3
 800587a:	095b      	lsrs	r3, r3, #5
 800587c:	0119      	lsls	r1, r3, #4
 800587e:	68fa      	ldr	r2, [r7, #12]
 8005880:	4613      	mov	r3, r2
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	4413      	add	r3, r2
 8005886:	009a      	lsls	r2, r3, #2
 8005888:	441a      	add	r2, r3
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	fbb2 f2f3 	udiv	r2, r2, r3
 8005894:	4b1a      	ldr	r3, [pc, #104]	; (8005900 <UART_SetConfig+0x118>)
 8005896:	fba3 0302 	umull	r0, r3, r3, r2
 800589a:	095b      	lsrs	r3, r3, #5
 800589c:	2064      	movs	r0, #100	; 0x64
 800589e:	fb00 f303 	mul.w	r3, r0, r3
 80058a2:	1ad3      	subs	r3, r2, r3
 80058a4:	011b      	lsls	r3, r3, #4
 80058a6:	3332      	adds	r3, #50	; 0x32
 80058a8:	4a15      	ldr	r2, [pc, #84]	; (8005900 <UART_SetConfig+0x118>)
 80058aa:	fba2 2303 	umull	r2, r3, r2, r3
 80058ae:	095b      	lsrs	r3, r3, #5
 80058b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058b4:	4419      	add	r1, r3
 80058b6:	68fa      	ldr	r2, [r7, #12]
 80058b8:	4613      	mov	r3, r2
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	4413      	add	r3, r2
 80058be:	009a      	lsls	r2, r3, #2
 80058c0:	441a      	add	r2, r3
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80058cc:	4b0c      	ldr	r3, [pc, #48]	; (8005900 <UART_SetConfig+0x118>)
 80058ce:	fba3 0302 	umull	r0, r3, r3, r2
 80058d2:	095b      	lsrs	r3, r3, #5
 80058d4:	2064      	movs	r0, #100	; 0x64
 80058d6:	fb00 f303 	mul.w	r3, r0, r3
 80058da:	1ad3      	subs	r3, r2, r3
 80058dc:	011b      	lsls	r3, r3, #4
 80058de:	3332      	adds	r3, #50	; 0x32
 80058e0:	4a07      	ldr	r2, [pc, #28]	; (8005900 <UART_SetConfig+0x118>)
 80058e2:	fba2 2303 	umull	r2, r3, r2, r3
 80058e6:	095b      	lsrs	r3, r3, #5
 80058e8:	f003 020f 	and.w	r2, r3, #15
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	440a      	add	r2, r1
 80058f2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80058f4:	bf00      	nop
 80058f6:	3710      	adds	r7, #16
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	40013800 	.word	0x40013800
 8005900:	51eb851f 	.word	0x51eb851f

08005904 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b084      	sub	sp, #16
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	7c1b      	ldrb	r3, [r3, #16]
 8005912:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800591a:	461a      	mov	r2, r3
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	fb02 f303 	mul.w	r3, r2, r3
 8005922:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	00db      	lsls	r3, r3, #3
 8005928:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800592e:	68fa      	ldr	r2, [r7, #12]
 8005930:	2100      	movs	r1, #0
 8005932:	4618      	mov	r0, r3
 8005934:	f001 fdf6 	bl	8007524 <memset>
}
 8005938:	bf00      	nop
 800593a:	3710      	adds	r7, #16
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}

08005940 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b086      	sub	sp, #24
 8005944:	af02      	add	r7, sp, #8
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	460b      	mov	r3, r1
 800594a:	70fb      	strb	r3, [r7, #3]
 800594c:	4613      	mov	r3, r2
 800594e:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	7c1b      	ldrb	r3, [r3, #16]
 8005956:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8005958:	78fb      	ldrb	r3, [r7, #3]
 800595a:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005960:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8005962:	7bfb      	ldrb	r3, [r7, #15]
 8005964:	b29b      	uxth	r3, r3
 8005966:	89ba      	ldrh	r2, [r7, #12]
 8005968:	fb02 f303 	mul.w	r3, r2, r3
 800596c:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 800596e:	89bb      	ldrh	r3, [r7, #12]
 8005970:	00db      	lsls	r3, r3, #3
 8005972:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8005974:	89bb      	ldrh	r3, [r7, #12]
 8005976:	68ba      	ldr	r2, [r7, #8]
 8005978:	4413      	add	r3, r2
 800597a:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 800597c:	7bf9      	ldrb	r1, [r7, #15]
 800597e:	78ba      	ldrb	r2, [r7, #2]
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	9300      	str	r3, [sp, #0]
 8005984:	460b      	mov	r3, r1
 8005986:	2100      	movs	r1, #0
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f001 fcc3 	bl	8007314 <u8x8_DrawTile>
}
 800598e:	bf00      	nop
 8005990:	3710      	adds	r7, #16
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}

08005996 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8005996:	b580      	push	{r7, lr}
 8005998:	b084      	sub	sp, #16
 800599a:	af00      	add	r7, sp, #0
 800599c:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 800599e:	2300      	movs	r3, #0
 80059a0:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80059a8:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80059b0:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	7c5b      	ldrb	r3, [r3, #17]
 80059b8:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 80059ba:	7bba      	ldrb	r2, [r7, #14]
 80059bc:	7bfb      	ldrb	r3, [r7, #15]
 80059be:	4619      	mov	r1, r3
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f7ff ffbd 	bl	8005940 <u8g2_send_tile_row>
    src_row++;
 80059c6:	7bfb      	ldrb	r3, [r7, #15]
 80059c8:	3301      	adds	r3, #1
 80059ca:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 80059cc:	7bbb      	ldrb	r3, [r7, #14]
 80059ce:	3301      	adds	r3, #1
 80059d0:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 80059d2:	7bfa      	ldrb	r2, [r7, #15]
 80059d4:	7b7b      	ldrb	r3, [r7, #13]
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d203      	bcs.n	80059e2 <u8g2_send_buffer+0x4c>
 80059da:	7bba      	ldrb	r2, [r7, #14]
 80059dc:	7b3b      	ldrb	r3, [r7, #12]
 80059de:	429a      	cmp	r2, r3
 80059e0:	d3eb      	bcc.n	80059ba <u8g2_send_buffer+0x24>
}
 80059e2:	bf00      	nop
 80059e4:	3710      	adds	r7, #16
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}

080059ea <u8g2_SetBufferCurrTileRow>:
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
}

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 80059ea:	b580      	push	{r7, lr}
 80059ec:	b082      	sub	sp, #8
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]
 80059f2:	460b      	mov	r3, r1
 80059f4:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	78fa      	ldrb	r2, [r7, #3]
 80059fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  u8g2->cb->update_dimension(u8g2);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	4798      	blx	r3
}
 8005a12:	bf00      	nop
 8005a14:	3708      	adds	r7, #8
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}

08005a1a <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 8005a1a:	b580      	push	{r7, lr}
 8005a1c:	b082      	sub	sp, #8
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d002      	beq.n	8005a32 <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f7ff ff69 	bl	8005904 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 8005a32:	2100      	movs	r1, #0
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f7ff ffd8 	bl	80059ea <u8g2_SetBufferCurrTileRow>
}
 8005a3a:	bf00      	nop
 8005a3c:	3708      	adds	r7, #8
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}

08005a42 <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 8005a42:	b580      	push	{r7, lr}
 8005a44:	b084      	sub	sp, #16
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f7ff ffa3 	bl	8005996 <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005a56:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8005a5e:	7bfb      	ldrb	r3, [r7, #15]
 8005a60:	4413      	add	r3, r2
 8005a62:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	7c5b      	ldrb	r3, [r3, #17]
 8005a6a:	7bfa      	ldrb	r2, [r7, #15]
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d304      	bcc.n	8005a7a <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f001 fca0 	bl	80073b6 <u8x8_RefreshDisplay>
    return 0;
 8005a76:	2300      	movs	r3, #0
 8005a78:	e00d      	b.n	8005a96 <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d002      	beq.n	8005a8a <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f7ff ff3d 	bl	8005904 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 8005a8a:	7bfb      	ldrb	r3, [r7, #15]
 8005a8c:	4619      	mov	r1, r3
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f7ff ffab 	bl	80059ea <u8g2_SetBufferCurrTileRow>
  return 1;
 8005a94:	2301      	movs	r3, #1
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3710      	adds	r7, #16
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
	...

08005aa0 <u8g2_m_16_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b083      	sub	sp, #12
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2208      	movs	r2, #8
 8005aac:	701a      	strb	r2, [r3, #0]
  return buf;
 8005aae:	4b03      	ldr	r3, [pc, #12]	; (8005abc <u8g2_m_16_8_f+0x1c>)
  #endif
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	370c      	adds	r7, #12
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bc80      	pop	{r7}
 8005ab8:	4770      	bx	lr
 8005aba:	bf00      	nop
 8005abc:	200007ec 	.word	0x200007ec

08005ac0 <u8g2_Setup_ssd1306_128x64_noname_f>:
  buf = u8g2_m_16_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 f */
void u8g2_Setup_ssd1306_128x64_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b088      	sub	sp, #32
 8005ac4:	af02      	add	r7, sp, #8
 8005ac6:	60f8      	str	r0, [r7, #12]
 8005ac8:	60b9      	str	r1, [r7, #8]
 8005aca:	607a      	str	r2, [r7, #4]
 8005acc:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	9300      	str	r3, [sp, #0]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	4a0b      	ldr	r2, [pc, #44]	; (8005b04 <u8g2_Setup_ssd1306_128x64_noname_f+0x44>)
 8005ad6:	490c      	ldr	r1, [pc, #48]	; (8005b08 <u8g2_Setup_ssd1306_128x64_noname_f+0x48>)
 8005ad8:	68f8      	ldr	r0, [r7, #12]
 8005ada:	f001 fccb 	bl	8007474 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 8005ade:	f107 0313 	add.w	r3, r7, #19
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f7ff ffdc 	bl	8005aa0 <u8g2_m_16_8_f>
 8005ae8:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8005aea:	7cfa      	ldrb	r2, [r7, #19]
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	9300      	str	r3, [sp, #0]
 8005af0:	4b06      	ldr	r3, [pc, #24]	; (8005b0c <u8g2_Setup_ssd1306_128x64_noname_f+0x4c>)
 8005af2:	6979      	ldr	r1, [r7, #20]
 8005af4:	68f8      	ldr	r0, [r7, #12]
 8005af6:	f000 ffbc 	bl	8006a72 <u8g2_SetupBuffer>
}
 8005afa:	bf00      	nop
 8005afc:	3718      	adds	r7, #24
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	bf00      	nop
 8005b04:	08007039 	.word	0x08007039
 8005b08:	08007211 	.word	0x08007211
 8005b0c:	080068f7 	.word	0x080068f7

08005b10 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	460b      	mov	r3, r1
 8005b1a:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8005b1c:	78fb      	ldrb	r3, [r7, #3]
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	4413      	add	r3, r2
 8005b22:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	781b      	ldrb	r3, [r3, #0]
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	370c      	adds	r7, #12
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bc80      	pop	{r7}
 8005b30:	4770      	bx	lr

08005b32 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 8005b32:	b480      	push	{r7}
 8005b34:	b085      	sub	sp, #20
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]
 8005b3a:	460b      	mov	r3, r1
 8005b3c:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8005b3e:	78fb      	ldrb	r3, [r7, #3]
 8005b40:	687a      	ldr	r2, [r7, #4]
 8005b42:	4413      	add	r3, r2
 8005b44:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	81fb      	strh	r3, [r7, #14]
    font++;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	3301      	adds	r3, #1
 8005b50:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8005b52:	89fb      	ldrh	r3, [r7, #14]
 8005b54:	021b      	lsls	r3, r3, #8
 8005b56:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	b29a      	uxth	r2, r3
 8005b5e:	89fb      	ldrh	r3, [r7, #14]
 8005b60:	4413      	add	r3, r2
 8005b62:	81fb      	strh	r3, [r7, #14]
    return pos;
 8005b64:	89fb      	ldrh	r3, [r7, #14]
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3714      	adds	r7, #20
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bc80      	pop	{r7}
 8005b6e:	4770      	bx	lr

08005b70 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b082      	sub	sp, #8
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8005b7a:	2100      	movs	r1, #0
 8005b7c:	6838      	ldr	r0, [r7, #0]
 8005b7e:	f7ff ffc7 	bl	8005b10 <u8g2_font_get_byte>
 8005b82:	4603      	mov	r3, r0
 8005b84:	461a      	mov	r2, r3
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8005b8a:	2101      	movs	r1, #1
 8005b8c:	6838      	ldr	r0, [r7, #0]
 8005b8e:	f7ff ffbf 	bl	8005b10 <u8g2_font_get_byte>
 8005b92:	4603      	mov	r3, r0
 8005b94:	461a      	mov	r2, r3
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8005b9a:	2102      	movs	r1, #2
 8005b9c:	6838      	ldr	r0, [r7, #0]
 8005b9e:	f7ff ffb7 	bl	8005b10 <u8g2_font_get_byte>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8005baa:	2103      	movs	r1, #3
 8005bac:	6838      	ldr	r0, [r7, #0]
 8005bae:	f7ff ffaf 	bl	8005b10 <u8g2_font_get_byte>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8005bba:	2104      	movs	r1, #4
 8005bbc:	6838      	ldr	r0, [r7, #0]
 8005bbe:	f7ff ffa7 	bl	8005b10 <u8g2_font_get_byte>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 8005bca:	2105      	movs	r1, #5
 8005bcc:	6838      	ldr	r0, [r7, #0]
 8005bce:	f7ff ff9f 	bl	8005b10 <u8g2_font_get_byte>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8005bda:	2106      	movs	r1, #6
 8005bdc:	6838      	ldr	r0, [r7, #0]
 8005bde:	f7ff ff97 	bl	8005b10 <u8g2_font_get_byte>
 8005be2:	4603      	mov	r3, r0
 8005be4:	461a      	mov	r2, r3
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8005bea:	2107      	movs	r1, #7
 8005bec:	6838      	ldr	r0, [r7, #0]
 8005bee:	f7ff ff8f 	bl	8005b10 <u8g2_font_get_byte>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	461a      	mov	r2, r3
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 8005bfa:	2108      	movs	r1, #8
 8005bfc:	6838      	ldr	r0, [r7, #0]
 8005bfe:	f7ff ff87 	bl	8005b10 <u8g2_font_get_byte>
 8005c02:	4603      	mov	r3, r0
 8005c04:	461a      	mov	r2, r3
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 8005c0a:	2109      	movs	r1, #9
 8005c0c:	6838      	ldr	r0, [r7, #0]
 8005c0e:	f7ff ff7f 	bl	8005b10 <u8g2_font_get_byte>
 8005c12:	4603      	mov	r3, r0
 8005c14:	b25a      	sxtb	r2, r3
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8005c1a:	210a      	movs	r1, #10
 8005c1c:	6838      	ldr	r0, [r7, #0]
 8005c1e:	f7ff ff77 	bl	8005b10 <u8g2_font_get_byte>
 8005c22:	4603      	mov	r3, r0
 8005c24:	b25a      	sxtb	r2, r3
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 8005c2a:	210b      	movs	r1, #11
 8005c2c:	6838      	ldr	r0, [r7, #0]
 8005c2e:	f7ff ff6f 	bl	8005b10 <u8g2_font_get_byte>
 8005c32:	4603      	mov	r3, r0
 8005c34:	b25a      	sxtb	r2, r3
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 8005c3a:	210c      	movs	r1, #12
 8005c3c:	6838      	ldr	r0, [r7, #0]
 8005c3e:	f7ff ff67 	bl	8005b10 <u8g2_font_get_byte>
 8005c42:	4603      	mov	r3, r0
 8005c44:	b25a      	sxtb	r2, r3
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8005c4a:	210d      	movs	r1, #13
 8005c4c:	6838      	ldr	r0, [r7, #0]
 8005c4e:	f7ff ff5f 	bl	8005b10 <u8g2_font_get_byte>
 8005c52:	4603      	mov	r3, r0
 8005c54:	b25a      	sxtb	r2, r3
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 8005c5a:	210e      	movs	r1, #14
 8005c5c:	6838      	ldr	r0, [r7, #0]
 8005c5e:	f7ff ff57 	bl	8005b10 <u8g2_font_get_byte>
 8005c62:	4603      	mov	r3, r0
 8005c64:	b25a      	sxtb	r2, r3
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8005c6a:	210f      	movs	r1, #15
 8005c6c:	6838      	ldr	r0, [r7, #0]
 8005c6e:	f7ff ff4f 	bl	8005b10 <u8g2_font_get_byte>
 8005c72:	4603      	mov	r3, r0
 8005c74:	b25a      	sxtb	r2, r3
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 8005c7a:	2110      	movs	r1, #16
 8005c7c:	6838      	ldr	r0, [r7, #0]
 8005c7e:	f7ff ff47 	bl	8005b10 <u8g2_font_get_byte>
 8005c82:	4603      	mov	r3, r0
 8005c84:	b25a      	sxtb	r2, r3
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8005c8a:	2111      	movs	r1, #17
 8005c8c:	6838      	ldr	r0, [r7, #0]
 8005c8e:	f7ff ff50 	bl	8005b32 <u8g2_font_get_word>
 8005c92:	4603      	mov	r3, r0
 8005c94:	461a      	mov	r2, r3
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8005c9a:	2113      	movs	r1, #19
 8005c9c:	6838      	ldr	r0, [r7, #0]
 8005c9e:	f7ff ff48 	bl	8005b32 <u8g2_font_get_word>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	461a      	mov	r2, r3
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 8005caa:	2115      	movs	r1, #21
 8005cac:	6838      	ldr	r0, [r7, #0]
 8005cae:	f7ff ff40 	bl	8005b32 <u8g2_font_get_word>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	82da      	strh	r2, [r3, #22]
#endif
}
 8005cba:	bf00      	nop
 8005cbc:	3708      	adds	r7, #8
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}

08005cc2 <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 8005cc2:	b480      	push	{r7}
 8005cc4:	b085      	sub	sp, #20
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	6078      	str	r0, [r7, #4]
 8005cca:	460b      	mov	r3, r1
 8005ccc:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	7b1b      	ldrb	r3, [r3, #12]
 8005cd2:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 8005cdc:	7bfa      	ldrb	r2, [r7, #15]
 8005cde:	7b7b      	ldrb	r3, [r7, #13]
 8005ce0:	fa42 f303 	asr.w	r3, r2, r3
 8005ce4:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 8005ce6:	7b7b      	ldrb	r3, [r7, #13]
 8005ce8:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 8005cea:	7bba      	ldrb	r2, [r7, #14]
 8005cec:	78fb      	ldrb	r3, [r7, #3]
 8005cee:	4413      	add	r3, r2
 8005cf0:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 8005cf2:	7bbb      	ldrb	r3, [r7, #14]
 8005cf4:	2b07      	cmp	r3, #7
 8005cf6:	d91a      	bls.n	8005d2e <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8005cf8:	2308      	movs	r3, #8
 8005cfa:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 8005cfc:	7b3a      	ldrb	r2, [r7, #12]
 8005cfe:	7b7b      	ldrb	r3, [r7, #13]
 8005d00:	1ad3      	subs	r3, r2, r3
 8005d02:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	1c5a      	adds	r2, r3, #1
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	461a      	mov	r2, r3
 8005d16:	7b3b      	ldrb	r3, [r7, #12]
 8005d18:	fa02 f303 	lsl.w	r3, r2, r3
 8005d1c:	b25a      	sxtb	r2, r3
 8005d1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	b25b      	sxtb	r3, r3
 8005d26:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8005d28:	7bbb      	ldrb	r3, [r7, #14]
 8005d2a:	3b08      	subs	r3, #8
 8005d2c:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 8005d2e:	78fb      	ldrb	r3, [r7, #3]
 8005d30:	f04f 32ff 	mov.w	r2, #4294967295
 8005d34:	fa02 f303 	lsl.w	r3, r2, r3
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	43db      	mvns	r3, r3
 8005d3c:	b2da      	uxtb	r2, r3
 8005d3e:	7bfb      	ldrb	r3, [r7, #15]
 8005d40:	4013      	ands	r3, r2
 8005d42:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	7bba      	ldrb	r2, [r7, #14]
 8005d48:	731a      	strb	r2, [r3, #12]
  return val;
 8005d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3714      	adds	r7, #20
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bc80      	pop	{r7}
 8005d54:	4770      	bx	lr

08005d56 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 8005d56:	b580      	push	{r7, lr}
 8005d58:	b084      	sub	sp, #16
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
 8005d5e:	460b      	mov	r3, r1
 8005d60:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8005d62:	78fb      	ldrb	r3, [r7, #3]
 8005d64:	4619      	mov	r1, r3
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f7ff ffab 	bl	8005cc2 <u8g2_font_decode_get_unsigned_bits>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	73fb      	strb	r3, [r7, #15]
  d = 1;
 8005d70:	2301      	movs	r3, #1
 8005d72:	73bb      	strb	r3, [r7, #14]
  cnt--;
 8005d74:	78fb      	ldrb	r3, [r7, #3]
 8005d76:	3b01      	subs	r3, #1
 8005d78:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 8005d7a:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8005d7e:	78fb      	ldrb	r3, [r7, #3]
 8005d80:	fa02 f303 	lsl.w	r3, r2, r3
 8005d84:	73bb      	strb	r3, [r7, #14]
  v -= d;
 8005d86:	7bfa      	ldrb	r2, [r7, #15]
 8005d88:	7bbb      	ldrb	r3, [r7, #14]
 8005d8a:	1ad3      	subs	r3, r2, r3
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	73fb      	strb	r3, [r7, #15]
  return v;
 8005d90:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3710      	adds	r7, #16
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 8005d9c:	b490      	push	{r4, r7}
 8005d9e:	b082      	sub	sp, #8
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	4604      	mov	r4, r0
 8005da4:	4608      	mov	r0, r1
 8005da6:	4611      	mov	r1, r2
 8005da8:	461a      	mov	r2, r3
 8005daa:	4623      	mov	r3, r4
 8005dac:	80fb      	strh	r3, [r7, #6]
 8005dae:	4603      	mov	r3, r0
 8005db0:	717b      	strb	r3, [r7, #5]
 8005db2:	460b      	mov	r3, r1
 8005db4:	713b      	strb	r3, [r7, #4]
 8005db6:	4613      	mov	r3, r2
 8005db8:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 8005dba:	78fb      	ldrb	r3, [r7, #3]
 8005dbc:	2b02      	cmp	r3, #2
 8005dbe:	d014      	beq.n	8005dea <u8g2_add_vector_y+0x4e>
 8005dc0:	2b02      	cmp	r3, #2
 8005dc2:	dc19      	bgt.n	8005df8 <u8g2_add_vector_y+0x5c>
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d002      	beq.n	8005dce <u8g2_add_vector_y+0x32>
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d007      	beq.n	8005ddc <u8g2_add_vector_y+0x40>
 8005dcc:	e014      	b.n	8005df8 <u8g2_add_vector_y+0x5c>
  {
    case 0:
      dy += y;
 8005dce:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8005dd2:	b29a      	uxth	r2, r3
 8005dd4:	88fb      	ldrh	r3, [r7, #6]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	80fb      	strh	r3, [r7, #6]
      break;
 8005dda:	e014      	b.n	8005e06 <u8g2_add_vector_y+0x6a>
    case 1:
      dy += x;
 8005ddc:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8005de0:	b29a      	uxth	r2, r3
 8005de2:	88fb      	ldrh	r3, [r7, #6]
 8005de4:	4413      	add	r3, r2
 8005de6:	80fb      	strh	r3, [r7, #6]
      break;
 8005de8:	e00d      	b.n	8005e06 <u8g2_add_vector_y+0x6a>
    case 2:
      dy -= y;
 8005dea:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	88fa      	ldrh	r2, [r7, #6]
 8005df2:	1ad3      	subs	r3, r2, r3
 8005df4:	80fb      	strh	r3, [r7, #6]
      break;
 8005df6:	e006      	b.n	8005e06 <u8g2_add_vector_y+0x6a>
    default:
      dy -= x;
 8005df8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	88fa      	ldrh	r2, [r7, #6]
 8005e00:	1ad3      	subs	r3, r2, r3
 8005e02:	80fb      	strh	r3, [r7, #6]
      break;      
 8005e04:	bf00      	nop
  }
  return dy;
 8005e06:	88fb      	ldrh	r3, [r7, #6]
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3708      	adds	r7, #8
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bc90      	pop	{r4, r7}
 8005e10:	4770      	bx	lr

08005e12 <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 8005e12:	b490      	push	{r4, r7}
 8005e14:	b082      	sub	sp, #8
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	4604      	mov	r4, r0
 8005e1a:	4608      	mov	r0, r1
 8005e1c:	4611      	mov	r1, r2
 8005e1e:	461a      	mov	r2, r3
 8005e20:	4623      	mov	r3, r4
 8005e22:	80fb      	strh	r3, [r7, #6]
 8005e24:	4603      	mov	r3, r0
 8005e26:	717b      	strb	r3, [r7, #5]
 8005e28:	460b      	mov	r3, r1
 8005e2a:	713b      	strb	r3, [r7, #4]
 8005e2c:	4613      	mov	r3, r2
 8005e2e:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 8005e30:	78fb      	ldrb	r3, [r7, #3]
 8005e32:	2b02      	cmp	r3, #2
 8005e34:	d014      	beq.n	8005e60 <u8g2_add_vector_x+0x4e>
 8005e36:	2b02      	cmp	r3, #2
 8005e38:	dc19      	bgt.n	8005e6e <u8g2_add_vector_x+0x5c>
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d002      	beq.n	8005e44 <u8g2_add_vector_x+0x32>
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d007      	beq.n	8005e52 <u8g2_add_vector_x+0x40>
 8005e42:	e014      	b.n	8005e6e <u8g2_add_vector_x+0x5c>
  {
    case 0:
      dx += x;
 8005e44:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8005e48:	b29a      	uxth	r2, r3
 8005e4a:	88fb      	ldrh	r3, [r7, #6]
 8005e4c:	4413      	add	r3, r2
 8005e4e:	80fb      	strh	r3, [r7, #6]
      break;
 8005e50:	e014      	b.n	8005e7c <u8g2_add_vector_x+0x6a>
    case 1:
      dx -= y;
 8005e52:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	88fa      	ldrh	r2, [r7, #6]
 8005e5a:	1ad3      	subs	r3, r2, r3
 8005e5c:	80fb      	strh	r3, [r7, #6]
      break;
 8005e5e:	e00d      	b.n	8005e7c <u8g2_add_vector_x+0x6a>
    case 2:
      dx -= x;
 8005e60:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	88fa      	ldrh	r2, [r7, #6]
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	80fb      	strh	r3, [r7, #6]
      break;
 8005e6c:	e006      	b.n	8005e7c <u8g2_add_vector_x+0x6a>
    default:
      dx += y;
 8005e6e:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8005e72:	b29a      	uxth	r2, r3
 8005e74:	88fb      	ldrh	r3, [r7, #6]
 8005e76:	4413      	add	r3, r2
 8005e78:	80fb      	strh	r3, [r7, #6]
      break;      
 8005e7a:	bf00      	nop
  }
  return dx;
 8005e7c:	88fb      	ldrh	r3, [r7, #6]
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3708      	adds	r7, #8
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bc90      	pop	{r4, r7}
 8005e86:	4770      	bx	lr

08005e88 <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b088      	sub	sp, #32
 8005e8c:	af02      	add	r7, sp, #8
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	460b      	mov	r3, r1
 8005e92:	70fb      	strb	r3, [r7, #3]
 8005e94:	4613      	mov	r3, r2
 8005e96:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	3360      	adds	r3, #96	; 0x60
 8005e9c:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 8005e9e:	78fb      	ldrb	r3, [r7, #3]
 8005ea0:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005ea8:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8005eb0:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8005eb8:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 8005eba:	7bfa      	ldrb	r2, [r7, #15]
 8005ebc:	7d7b      	ldrb	r3, [r7, #21]
 8005ebe:	1ad3      	subs	r3, r2, r3
 8005ec0:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8005ec2:	7bfb      	ldrb	r3, [r7, #15]
 8005ec4:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 8005ec6:	7dfa      	ldrb	r2, [r7, #23]
 8005ec8:	7bfb      	ldrb	r3, [r7, #15]
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d201      	bcs.n	8005ed2 <u8g2_font_decode_len+0x4a>
      current = cnt;
 8005ece:	7dfb      	ldrb	r3, [r7, #23]
 8005ed0:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	889b      	ldrh	r3, [r3, #4]
 8005ed6:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	88db      	ldrh	r3, [r3, #6]
 8005edc:	817b      	strh	r3, [r7, #10]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8005ede:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8005ee2:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	7c1b      	ldrb	r3, [r3, #16]
 8005eea:	89b8      	ldrh	r0, [r7, #12]
 8005eec:	f7ff ff91 	bl	8005e12 <u8g2_add_vector_x>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	81bb      	strh	r3, [r7, #12]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8005ef4:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8005ef8:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	7c1b      	ldrb	r3, [r3, #16]
 8005f00:	8978      	ldrh	r0, [r7, #10]
 8005f02:	f7ff ff4b 	bl	8005d9c <u8g2_add_vector_y>
 8005f06:	4603      	mov	r3, r0
 8005f08:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 8005f0a:	78bb      	ldrb	r3, [r7, #2]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d010      	beq.n	8005f32 <u8g2_font_decode_len+0xaa>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	7b9a      	ldrb	r2, [r3, #14]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 8005f1a:	7dbb      	ldrb	r3, [r7, #22]
 8005f1c:	b298      	uxth	r0, r3
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	7c1b      	ldrb	r3, [r3, #16]
 8005f22:	897a      	ldrh	r2, [r7, #10]
 8005f24:	89b9      	ldrh	r1, [r7, #12]
 8005f26:	9300      	str	r3, [sp, #0]
 8005f28:	4603      	mov	r3, r0
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f000 fbfa 	bl	8006724 <u8g2_DrawHVLine>
 8005f30:	e013      	b.n	8005f5a <u8g2_font_decode_len+0xd2>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	7b5b      	ldrb	r3, [r3, #13]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d10f      	bne.n	8005f5a <u8g2_font_decode_len+0xd2>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	7bda      	ldrb	r2, [r3, #15]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 8005f44:	7dbb      	ldrb	r3, [r7, #22]
 8005f46:	b298      	uxth	r0, r3
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	7c1b      	ldrb	r3, [r3, #16]
 8005f4c:	897a      	ldrh	r2, [r7, #10]
 8005f4e:	89b9      	ldrh	r1, [r7, #12]
 8005f50:	9300      	str	r3, [sp, #0]
 8005f52:	4603      	mov	r3, r0
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f000 fbe5 	bl	8006724 <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8005f5a:	7dfa      	ldrb	r2, [r7, #23]
 8005f5c:	7bfb      	ldrb	r3, [r7, #15]
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d309      	bcc.n	8005f76 <u8g2_font_decode_len+0xee>
      break;
    cnt -= rem;
 8005f62:	7dfa      	ldrb	r2, [r7, #23]
 8005f64:	7bfb      	ldrb	r3, [r7, #15]
 8005f66:	1ad3      	subs	r3, r2, r3
 8005f68:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	757b      	strb	r3, [r7, #21]
    ly++;
 8005f6e:	7d3b      	ldrb	r3, [r7, #20]
 8005f70:	3301      	adds	r3, #1
 8005f72:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8005f74:	e79d      	b.n	8005eb2 <u8g2_font_decode_len+0x2a>
      break;
 8005f76:	bf00      	nop
  }
  lx += cnt;
 8005f78:	7d7a      	ldrb	r2, [r7, #21]
 8005f7a:	7dfb      	ldrb	r3, [r7, #23]
 8005f7c:	4413      	add	r3, r2
 8005f7e:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 8005f80:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	721a      	strb	r2, [r3, #8]
  decode->y = ly;  
 8005f88:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	725a      	strb	r2, [r3, #9]
}
 8005f90:	bf00      	nop
 8005f92:	3718      	adds	r7, #24
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <u8g2_font_setup_decode>:
  
}


static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b084      	sub	sp, #16
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	3360      	adds	r3, #96	; 0x60
 8005fa6:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	683a      	ldr	r2, [r7, #0]
 8005fac:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8005fba:	4619      	mov	r1, r3
 8005fbc:	68f8      	ldr	r0, [r7, #12]
 8005fbe:	f7ff fe80 	bl	8005cc2 <u8g2_font_decode_get_unsigned_bits>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	b25a      	sxtb	r2, r3
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	68f8      	ldr	r0, [r7, #12]
 8005fd4:	f7ff fe75 	bl	8005cc2 <u8g2_font_decode_get_unsigned_bits>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	b25a      	sxtb	r2, r3
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	7b9b      	ldrb	r3, [r3, #14]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	bf0c      	ite	eq
 8005ff2:	2301      	moveq	r3, #1
 8005ff4:	2300      	movne	r3, #0
 8005ff6:	b2db      	uxtb	r3, r3
 8005ff8:	461a      	mov	r2, r3
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	73da      	strb	r2, [r3, #15]
}
 8005ffe:	bf00      	nop
 8006000:	3710      	adds	r7, #16
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
	...

08006008 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b08a      	sub	sp, #40	; 0x28
 800600c:	af02      	add	r7, sp, #8
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	3360      	adds	r3, #96	; 0x60
 8006016:	617b      	str	r3, [r7, #20]
    
  u8g2_font_setup_decode(u8g2, glyph_data);     /* set values in u8g2->font_decode data structure */
 8006018:	6839      	ldr	r1, [r7, #0]
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f7ff ffbc 	bl	8005f98 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8006026:	74fb      	strb	r3, [r7, #19]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800602e:	4619      	mov	r1, r3
 8006030:	6978      	ldr	r0, [r7, #20]
 8006032:	f7ff fe90 	bl	8005d56 <u8g2_font_decode_get_signed_bits>
 8006036:	4603      	mov	r3, r0
 8006038:	74bb      	strb	r3, [r7, #18]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8006040:	4619      	mov	r1, r3
 8006042:	6978      	ldr	r0, [r7, #20]
 8006044:	f7ff fe87 	bl	8005d56 <u8g2_font_decode_get_signed_bits>
 8006048:	4603      	mov	r3, r0
 800604a:	747b      	strb	r3, [r7, #17]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006052:	4619      	mov	r1, r3
 8006054:	6978      	ldr	r0, [r7, #20]
 8006056:	f7ff fe7e 	bl	8005d56 <u8g2_font_decode_get_signed_bits>
 800605a:	4603      	mov	r3, r0
 800605c:	743b      	strb	r3, [r7, #16]
  
  if ( decode->glyph_width > 0 )
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8006064:	2b00      	cmp	r3, #0
 8006066:	f340 80d7 	ble.w	8006218 <u8g2_font_decode_glyph+0x210>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	8898      	ldrh	r0, [r3, #4]
 800606e:	7cfa      	ldrb	r2, [r7, #19]
 8006070:	7c7b      	ldrb	r3, [r7, #17]
 8006072:	4413      	add	r3, r2
 8006074:	b2db      	uxtb	r3, r3
 8006076:	425b      	negs	r3, r3
 8006078:	b2db      	uxtb	r3, r3
 800607a:	b25a      	sxtb	r2, r3
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	7c1b      	ldrb	r3, [r3, #16]
 8006080:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8006084:	f7ff fec5 	bl	8005e12 <u8g2_add_vector_x>
 8006088:	4603      	mov	r3, r0
 800608a:	461a      	mov	r2, r3
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	809a      	strh	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	88d8      	ldrh	r0, [r3, #6]
 8006094:	7cfa      	ldrb	r2, [r7, #19]
 8006096:	7c7b      	ldrb	r3, [r7, #17]
 8006098:	4413      	add	r3, r2
 800609a:	b2db      	uxtb	r3, r3
 800609c:	425b      	negs	r3, r3
 800609e:	b2db      	uxtb	r3, r3
 80060a0:	b25a      	sxtb	r2, r3
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	7c1b      	ldrb	r3, [r3, #16]
 80060a6:	f997 1012 	ldrsb.w	r1, [r7, #18]
 80060aa:	f7ff fe77 	bl	8005d9c <u8g2_add_vector_y>
 80060ae:	4603      	mov	r3, r0
 80060b0:	461a      	mov	r2, r3
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	80da      	strh	r2, [r3, #6]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	889b      	ldrh	r3, [r3, #4]
 80060ba:	83fb      	strh	r3, [r7, #30]
      y0 = decode->target_y;
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	88db      	ldrh	r3, [r3, #6]
 80060c0:	837b      	strh	r3, [r7, #26]
      x1 = x0;
 80060c2:	8bfb      	ldrh	r3, [r7, #30]
 80060c4:	83bb      	strh	r3, [r7, #28]
      y1 = y0;
 80060c6:	8b7b      	ldrh	r3, [r7, #26]
 80060c8:	833b      	strh	r3, [r7, #24]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	7c1b      	ldrb	r3, [r3, #16]
 80060ce:	2b03      	cmp	r3, #3
 80060d0:	d85a      	bhi.n	8006188 <u8g2_font_decode_glyph+0x180>
 80060d2:	a201      	add	r2, pc, #4	; (adr r2, 80060d8 <u8g2_font_decode_glyph+0xd0>)
 80060d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060d8:	080060e9 	.word	0x080060e9
 80060dc:	08006105 	.word	0x08006105
 80060e0:	0800612d 	.word	0x0800612d
 80060e4:	08006161 	.word	0x08006161
      {
	case 0:
	    x1 += decode->glyph_width;
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80060ee:	b29a      	uxth	r2, r3
 80060f0:	8bbb      	ldrh	r3, [r7, #28]
 80060f2:	4413      	add	r3, r2
 80060f4:	83bb      	strh	r3, [r7, #28]
	    y1 += h;
 80060f6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80060fa:	b29a      	uxth	r2, r3
 80060fc:	8b3b      	ldrh	r3, [r7, #24]
 80060fe:	4413      	add	r3, r2
 8006100:	833b      	strh	r3, [r7, #24]
	    break;
 8006102:	e041      	b.n	8006188 <u8g2_font_decode_glyph+0x180>
	case 1:
	    x0 -= h;
 8006104:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006108:	b29b      	uxth	r3, r3
 800610a:	8bfa      	ldrh	r2, [r7, #30]
 800610c:	1ad3      	subs	r3, r2, r3
 800610e:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8006110:	8bfb      	ldrh	r3, [r7, #30]
 8006112:	3301      	adds	r3, #1
 8006114:	83fb      	strh	r3, [r7, #30]
	    x1++;
 8006116:	8bbb      	ldrh	r3, [r7, #28]
 8006118:	3301      	adds	r3, #1
 800611a:	83bb      	strh	r3, [r7, #28]
	    y1 += decode->glyph_width;
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8006122:	b29a      	uxth	r2, r3
 8006124:	8b3b      	ldrh	r3, [r7, #24]
 8006126:	4413      	add	r3, r2
 8006128:	833b      	strh	r3, [r7, #24]
	    break;
 800612a:	e02d      	b.n	8006188 <u8g2_font_decode_glyph+0x180>
	case 2:
	    x0 -= decode->glyph_width;
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8006132:	b29b      	uxth	r3, r3
 8006134:	8bfa      	ldrh	r2, [r7, #30]
 8006136:	1ad3      	subs	r3, r2, r3
 8006138:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800613a:	8bfb      	ldrh	r3, [r7, #30]
 800613c:	3301      	adds	r3, #1
 800613e:	83fb      	strh	r3, [r7, #30]
	    x1++;
 8006140:	8bbb      	ldrh	r3, [r7, #28]
 8006142:	3301      	adds	r3, #1
 8006144:	83bb      	strh	r3, [r7, #28]
	    y0 -= h;
 8006146:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800614a:	b29b      	uxth	r3, r3
 800614c:	8b7a      	ldrh	r2, [r7, #26]
 800614e:	1ad3      	subs	r3, r2, r3
 8006150:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8006152:	8b7b      	ldrh	r3, [r7, #26]
 8006154:	3301      	adds	r3, #1
 8006156:	837b      	strh	r3, [r7, #26]
	    y1++;
 8006158:	8b3b      	ldrh	r3, [r7, #24]
 800615a:	3301      	adds	r3, #1
 800615c:	833b      	strh	r3, [r7, #24]
	    break;	  
 800615e:	e013      	b.n	8006188 <u8g2_font_decode_glyph+0x180>
	case 3:
	    x1 += h;
 8006160:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006164:	b29a      	uxth	r2, r3
 8006166:	8bbb      	ldrh	r3, [r7, #28]
 8006168:	4413      	add	r3, r2
 800616a:	83bb      	strh	r3, [r7, #28]
	    y0 -= decode->glyph_width;
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8006172:	b29b      	uxth	r3, r3
 8006174:	8b7a      	ldrh	r2, [r7, #26]
 8006176:	1ad3      	subs	r3, r2, r3
 8006178:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800617a:	8b7b      	ldrh	r3, [r7, #26]
 800617c:	3301      	adds	r3, #1
 800617e:	837b      	strh	r3, [r7, #26]
	    y1++;
 8006180:	8b3b      	ldrh	r3, [r7, #24]
 8006182:	3301      	adds	r3, #1
 8006184:	833b      	strh	r3, [r7, #24]
	    break;	  
 8006186:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8006188:	8bb8      	ldrh	r0, [r7, #28]
 800618a:	8b7a      	ldrh	r2, [r7, #26]
 800618c:	8bf9      	ldrh	r1, [r7, #30]
 800618e:	8b3b      	ldrh	r3, [r7, #24]
 8006190:	9300      	str	r3, [sp, #0]
 8006192:	4603      	mov	r3, r0
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f000 fb83 	bl	80068a0 <u8g2_IsIntersection>
 800619a:	4603      	mov	r3, r0
 800619c:	2b00      	cmp	r3, #0
 800619e:	d102      	bne.n	80061a6 <u8g2_font_decode_glyph+0x19e>
	return d;
 80061a0:	f997 3010 	ldrsb.w	r3, [r7, #16]
 80061a4:	e03a      	b.n	800621c <u8g2_font_decode_glyph+0x214>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	2200      	movs	r2, #0
 80061aa:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	2200      	movs	r2, #0
 80061b0:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 80061b8:	4619      	mov	r1, r3
 80061ba:	6978      	ldr	r0, [r7, #20]
 80061bc:	f7ff fd81 	bl	8005cc2 <u8g2_font_decode_get_unsigned_bits>
 80061c0:	4603      	mov	r3, r0
 80061c2:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 80061ca:	4619      	mov	r1, r3
 80061cc:	6978      	ldr	r0, [r7, #20]
 80061ce:	f7ff fd78 	bl	8005cc2 <u8g2_font_decode_get_unsigned_bits>
 80061d2:	4603      	mov	r3, r0
 80061d4:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 80061d6:	7bfb      	ldrb	r3, [r7, #15]
 80061d8:	2200      	movs	r2, #0
 80061da:	4619      	mov	r1, r3
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f7ff fe53 	bl	8005e88 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 80061e2:	7bbb      	ldrb	r3, [r7, #14]
 80061e4:	2201      	movs	r2, #1
 80061e6:	4619      	mov	r1, r3
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f7ff fe4d 	bl	8005e88 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 80061ee:	2101      	movs	r1, #1
 80061f0:	6978      	ldr	r0, [r7, #20]
 80061f2:	f7ff fd66 	bl	8005cc2 <u8g2_font_decode_get_unsigned_bits>
 80061f6:	4603      	mov	r3, r0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d1ec      	bne.n	80061d6 <u8g2_font_decode_glyph+0x1ce>

      if ( decode->y >= h )
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8006202:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8006206:	429a      	cmp	r2, r3
 8006208:	dd00      	ble.n	800620c <u8g2_font_decode_glyph+0x204>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 800620a:	e7d2      	b.n	80061b2 <u8g2_font_decode_glyph+0x1aa>
	break;
 800620c:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	7b9a      	ldrb	r2, [r3, #14]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  }
  return d;
 8006218:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 800621c:	4618      	mov	r0, r3
 800621e:	3720      	adds	r7, #32
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}

08006224 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b086      	sub	sp, #24
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	460b      	mov	r3, r1
 800622e:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006234:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	3317      	adds	r3, #23
 800623a:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 800623c:	887b      	ldrh	r3, [r7, #2]
 800623e:	2bff      	cmp	r3, #255	; 0xff
 8006240:	d82a      	bhi.n	8006298 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 8006242:	887b      	ldrh	r3, [r7, #2]
 8006244:	2b60      	cmp	r3, #96	; 0x60
 8006246:	d907      	bls.n	8006258 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800624e:	461a      	mov	r2, r3
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	4413      	add	r3, r2
 8006254:	617b      	str	r3, [r7, #20]
 8006256:	e009      	b.n	800626c <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8006258:	887b      	ldrh	r3, [r7, #2]
 800625a:	2b40      	cmp	r3, #64	; 0x40
 800625c:	d906      	bls.n	800626c <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8006264:	461a      	mov	r2, r3
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	4413      	add	r3, r2
 800626a:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	3301      	adds	r3, #1
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d04e      	beq.n	8006314 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	781b      	ldrb	r3, [r3, #0]
 800627a:	b29b      	uxth	r3, r3
 800627c:	887a      	ldrh	r2, [r7, #2]
 800627e:	429a      	cmp	r2, r3
 8006280:	d102      	bne.n	8006288 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	3302      	adds	r3, #2
 8006286:	e049      	b.n	800631c <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	3301      	adds	r3, #1
 800628c:	781b      	ldrb	r3, [r3, #0]
 800628e:	461a      	mov	r2, r3
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	4413      	add	r3, r2
 8006294:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8006296:	e7e9      	b.n	800626c <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 800629e:	461a      	mov	r2, r3
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	4413      	add	r3, r2
 80062a4:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 80062aa:	2100      	movs	r1, #0
 80062ac:	6938      	ldr	r0, [r7, #16]
 80062ae:	f7ff fc40 	bl	8005b32 <u8g2_font_get_word>
 80062b2:	4603      	mov	r3, r0
 80062b4:	461a      	mov	r2, r3
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	4413      	add	r3, r2
 80062ba:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 80062bc:	2102      	movs	r1, #2
 80062be:	6938      	ldr	r0, [r7, #16]
 80062c0:	f7ff fc37 	bl	8005b32 <u8g2_font_get_word>
 80062c4:	4603      	mov	r3, r0
 80062c6:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	3304      	adds	r3, #4
 80062cc:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 80062ce:	89fa      	ldrh	r2, [r7, #14]
 80062d0:	887b      	ldrh	r3, [r7, #2]
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d3e9      	bcc.n	80062aa <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	781b      	ldrb	r3, [r3, #0]
 80062da:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 80062dc:	89fb      	ldrh	r3, [r7, #14]
 80062de:	021b      	lsls	r3, r3, #8
 80062e0:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	3301      	adds	r3, #1
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	b29a      	uxth	r2, r3
 80062ea:	89fb      	ldrh	r3, [r7, #14]
 80062ec:	4313      	orrs	r3, r2
 80062ee:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 80062f0:	89fb      	ldrh	r3, [r7, #14]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d010      	beq.n	8006318 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 80062f6:	89fa      	ldrh	r2, [r7, #14]
 80062f8:	887b      	ldrh	r3, [r7, #2]
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d102      	bne.n	8006304 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	3303      	adds	r3, #3
 8006302:	e00b      	b.n	800631c <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	3302      	adds	r3, #2
 8006308:	781b      	ldrb	r3, [r3, #0]
 800630a:	461a      	mov	r2, r3
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	4413      	add	r3, r2
 8006310:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 8006312:	e7e0      	b.n	80062d6 <u8g2_font_get_glyph_data+0xb2>
	break;
 8006314:	bf00      	nop
 8006316:	e000      	b.n	800631a <u8g2_font_get_glyph_data+0xf6>
	break;
 8006318:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 800631a:	2300      	movs	r3, #0
}
 800631c:	4618      	mov	r0, r3
 800631e:	3718      	adds	r7, #24
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b086      	sub	sp, #24
 8006328:	af00      	add	r7, sp, #0
 800632a:	60f8      	str	r0, [r7, #12]
 800632c:	4608      	mov	r0, r1
 800632e:	4611      	mov	r1, r2
 8006330:	461a      	mov	r2, r3
 8006332:	4603      	mov	r3, r0
 8006334:	817b      	strh	r3, [r7, #10]
 8006336:	460b      	mov	r3, r1
 8006338:	813b      	strh	r3, [r7, #8]
 800633a:	4613      	mov	r3, r2
 800633c:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t dx = 0;
 800633e:	2300      	movs	r3, #0
 8006340:	82fb      	strh	r3, [r7, #22]
  u8g2->font_decode.target_x = x;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	897a      	ldrh	r2, [r7, #10]
 8006346:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  u8g2->font_decode.target_y = y;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	893a      	ldrh	r2, [r7, #8]
 800634e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8006352:	88fb      	ldrh	r3, [r7, #6]
 8006354:	4619      	mov	r1, r3
 8006356:	68f8      	ldr	r0, [r7, #12]
 8006358:	f7ff ff64 	bl	8006224 <u8g2_font_get_glyph_data>
 800635c:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d005      	beq.n	8006370 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8006364:	6939      	ldr	r1, [r7, #16]
 8006366:	68f8      	ldr	r0, [r7, #12]
 8006368:	f7ff fe4e 	bl	8006008 <u8g2_font_decode_glyph>
 800636c:	4603      	mov	r3, r0
 800636e:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 8006370:	8afb      	ldrh	r3, [r7, #22]
}
 8006372:	4618      	mov	r0, r3
 8006374:	3718      	adds	r7, #24
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
	...

0800637c <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b084      	sub	sp, #16
 8006380:	af00      	add	r7, sp, #0
 8006382:	60f8      	str	r0, [r7, #12]
 8006384:	4608      	mov	r0, r1
 8006386:	4611      	mov	r1, r2
 8006388:	461a      	mov	r2, r3
 800638a:	4603      	mov	r3, r0
 800638c:	817b      	strh	r3, [r7, #10]
 800638e:	460b      	mov	r3, r1
 8006390:	813b      	strh	r3, [r7, #8]
 8006392:	4613      	mov	r3, r2
 8006394:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800639c:	2b03      	cmp	r3, #3
 800639e:	d833      	bhi.n	8006408 <u8g2_DrawGlyph+0x8c>
 80063a0:	a201      	add	r2, pc, #4	; (adr r2, 80063a8 <u8g2_DrawGlyph+0x2c>)
 80063a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063a6:	bf00      	nop
 80063a8:	080063b9 	.word	0x080063b9
 80063ac:	080063cd 	.word	0x080063cd
 80063b0:	080063e1 	.word	0x080063e1
 80063b4:	080063f5 	.word	0x080063f5
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063bc:	68f8      	ldr	r0, [r7, #12]
 80063be:	4798      	blx	r3
 80063c0:	4603      	mov	r3, r0
 80063c2:	461a      	mov	r2, r3
 80063c4:	893b      	ldrh	r3, [r7, #8]
 80063c6:	4413      	add	r3, r2
 80063c8:	813b      	strh	r3, [r7, #8]
      break;
 80063ca:	e01d      	b.n	8006408 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063d0:	68f8      	ldr	r0, [r7, #12]
 80063d2:	4798      	blx	r3
 80063d4:	4603      	mov	r3, r0
 80063d6:	461a      	mov	r2, r3
 80063d8:	897b      	ldrh	r3, [r7, #10]
 80063da:	1a9b      	subs	r3, r3, r2
 80063dc:	817b      	strh	r3, [r7, #10]
      break;
 80063de:	e013      	b.n	8006408 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063e4:	68f8      	ldr	r0, [r7, #12]
 80063e6:	4798      	blx	r3
 80063e8:	4603      	mov	r3, r0
 80063ea:	461a      	mov	r2, r3
 80063ec:	893b      	ldrh	r3, [r7, #8]
 80063ee:	1a9b      	subs	r3, r3, r2
 80063f0:	813b      	strh	r3, [r7, #8]
      break;
 80063f2:	e009      	b.n	8006408 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063f8:	68f8      	ldr	r0, [r7, #12]
 80063fa:	4798      	blx	r3
 80063fc:	4603      	mov	r3, r0
 80063fe:	461a      	mov	r2, r3
 8006400:	897b      	ldrh	r3, [r7, #10]
 8006402:	4413      	add	r3, r2
 8006404:	817b      	strh	r3, [r7, #10]
      break;
 8006406:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8006408:	88fb      	ldrh	r3, [r7, #6]
 800640a:	893a      	ldrh	r2, [r7, #8]
 800640c:	8979      	ldrh	r1, [r7, #10]
 800640e:	68f8      	ldr	r0, [r7, #12]
 8006410:	f7ff ff88 	bl	8006324 <u8g2_font_draw_glyph>
 8006414:	4603      	mov	r3, r0
}
 8006416:	4618      	mov	r0, r3
 8006418:	3710      	adds	r7, #16
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
 800641e:	bf00      	nop

08006420 <u8g2_draw_string>:
  return u8g2_font_2x_draw_glyph(u8g2, x, y, encoding);
}

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b086      	sub	sp, #24
 8006424:	af00      	add	r7, sp, #0
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	607b      	str	r3, [r7, #4]
 800642a:	460b      	mov	r3, r1
 800642c:	817b      	strh	r3, [r7, #10]
 800642e:	4613      	mov	r3, r2
 8006430:	813b      	strh	r3, [r7, #8]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8006432:	68f8      	ldr	r0, [r7, #12]
 8006434:	f000 fcfd 	bl	8006e32 <u8x8_utf8_init>
  sum = 0;
 8006438:	2300      	movs	r3, #0
 800643a:	82fb      	strh	r3, [r7, #22]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	7812      	ldrb	r2, [r2, #0]
 8006444:	4611      	mov	r1, r2
 8006446:	68f8      	ldr	r0, [r7, #12]
 8006448:	4798      	blx	r3
 800644a:	4603      	mov	r3, r0
 800644c:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 800644e:	8abb      	ldrh	r3, [r7, #20]
 8006450:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006454:	4293      	cmp	r3, r2
 8006456:	d038      	beq.n	80064ca <u8g2_draw_string+0xaa>
      break;
    str++;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	3301      	adds	r3, #1
 800645c:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 800645e:	8abb      	ldrh	r3, [r7, #20]
 8006460:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006464:	4293      	cmp	r3, r2
 8006466:	d0e9      	beq.n	800643c <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8006468:	8abb      	ldrh	r3, [r7, #20]
 800646a:	893a      	ldrh	r2, [r7, #8]
 800646c:	8979      	ldrh	r1, [r7, #10]
 800646e:	68f8      	ldr	r0, [r7, #12]
 8006470:	f7ff ff84 	bl	800637c <u8g2_DrawGlyph>
 8006474:	4603      	mov	r3, r0
 8006476:	827b      	strh	r3, [r7, #18]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800647e:	2b03      	cmp	r3, #3
 8006480:	d81e      	bhi.n	80064c0 <u8g2_draw_string+0xa0>
 8006482:	a201      	add	r2, pc, #4	; (adr r2, 8006488 <u8g2_draw_string+0x68>)
 8006484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006488:	08006499 	.word	0x08006499
 800648c:	080064a3 	.word	0x080064a3
 8006490:	080064ad 	.word	0x080064ad
 8006494:	080064b7 	.word	0x080064b7
      {
	case 0:
	  x += delta;
 8006498:	897a      	ldrh	r2, [r7, #10]
 800649a:	8a7b      	ldrh	r3, [r7, #18]
 800649c:	4413      	add	r3, r2
 800649e:	817b      	strh	r3, [r7, #10]
	  break;
 80064a0:	e00e      	b.n	80064c0 <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 80064a2:	893a      	ldrh	r2, [r7, #8]
 80064a4:	8a7b      	ldrh	r3, [r7, #18]
 80064a6:	4413      	add	r3, r2
 80064a8:	813b      	strh	r3, [r7, #8]
	  break;
 80064aa:	e009      	b.n	80064c0 <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 80064ac:	897a      	ldrh	r2, [r7, #10]
 80064ae:	8a7b      	ldrh	r3, [r7, #18]
 80064b0:	1ad3      	subs	r3, r2, r3
 80064b2:	817b      	strh	r3, [r7, #10]
	  break;
 80064b4:	e004      	b.n	80064c0 <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 80064b6:	893a      	ldrh	r2, [r7, #8]
 80064b8:	8a7b      	ldrh	r3, [r7, #18]
 80064ba:	1ad3      	subs	r3, r2, r3
 80064bc:	813b      	strh	r3, [r7, #8]
	  break;
 80064be:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 80064c0:	8afa      	ldrh	r2, [r7, #22]
 80064c2:	8a7b      	ldrh	r3, [r7, #18]
 80064c4:	4413      	add	r3, r2
 80064c6:	82fb      	strh	r3, [r7, #22]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80064c8:	e7b8      	b.n	800643c <u8g2_draw_string+0x1c>
      break;
 80064ca:	bf00      	nop
    }
  }
  return sum;
 80064cc:	8afb      	ldrh	r3, [r7, #22]
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3718      	adds	r7, #24
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}
 80064d6:	bf00      	nop

080064d8 <u8g2_DrawStr>:
  }
  return sum;
}

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af00      	add	r7, sp, #0
 80064de:	60f8      	str	r0, [r7, #12]
 80064e0:	607b      	str	r3, [r7, #4]
 80064e2:	460b      	mov	r3, r1
 80064e4:	817b      	strh	r3, [r7, #10]
 80064e6:	4613      	mov	r3, r2
 80064e8:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	4a06      	ldr	r2, [pc, #24]	; (8006508 <u8g2_DrawStr+0x30>)
 80064ee:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 80064f0:	893a      	ldrh	r2, [r7, #8]
 80064f2:	8979      	ldrh	r1, [r7, #10]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	68f8      	ldr	r0, [r7, #12]
 80064f8:	f7ff ff92 	bl	8006420 <u8g2_draw_string>
 80064fc:	4603      	mov	r3, r0
}
 80064fe:	4618      	mov	r0, r3
 8006500:	3710      	adds	r7, #16
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}
 8006506:	bf00      	nop
 8006508:	08006e4d 	.word	0x08006e4d

0800650c <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 800650c:	b480      	push	{r7}
 800650e:	b083      	sub	sp, #12
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006518:	2b00      	cmp	r3, #0
 800651a:	d05d      	beq.n	80065d8 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f993 2081 	ldrsb.w	r2, [r3, #129]	; 0x81
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f993 2082 	ldrsb.w	r2, [r3, #130]	; 0x82
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800653a:	2b00      	cmp	r3, #0
 800653c:	d04d      	beq.n	80065da <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8006544:	2b01      	cmp	r3, #1
 8006546:	d11c      	bne.n	8006582 <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f993 208e 	ldrsb.w	r2, [r3, #142]	; 0x8e
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f993 3083 	ldrsb.w	r3, [r3, #131]	; 0x83
 8006554:	429a      	cmp	r2, r3
 8006556:	da05      	bge.n	8006564 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f993 3084 	ldrsb.w	r3, [r3, #132]	; 0x84
 8006570:	429a      	cmp	r2, r3
 8006572:	dd32      	ble.n	80065da <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f993 2084 	ldrsb.w	r2, [r3, #132]	; 0x84
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8006580:	e02b      	b.n	80065da <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 8006588:	461a      	mov	r2, r3
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8006590:	4619      	mov	r1, r3
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8006598:	440b      	add	r3, r1
 800659a:	429a      	cmp	r2, r3
 800659c:	da0d      	bge.n	80065ba <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 80065a4:	b2da      	uxtb	r2, r3
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 80065ac:	b2db      	uxtb	r3, r3
 80065ae:	4413      	add	r3, r2
 80065b0:	b2db      	uxtb	r3, r3
 80065b2:	b25a      	sxtb	r2, r3
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 80065c6:	429a      	cmp	r2, r3
 80065c8:	dd07      	ble.n	80065da <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f993 2080 	ldrsb.w	r2, [r3, #128]	; 0x80
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 80065d6:	e000      	b.n	80065da <u8g2_UpdateRefHeight+0xce>
    return;
 80065d8:	bf00      	nop
  }  
}
 80065da:	370c      	adds	r7, #12
 80065dc:	46bd      	mov	sp, r7
 80065de:	bc80      	pop	{r7}
 80065e0:	4770      	bx	lr

080065e2 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 80065e2:	b480      	push	{r7}
 80065e4:	b083      	sub	sp, #12
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	6078      	str	r0, [r7, #4]
  return 0;
 80065ea:	2300      	movs	r3, #0
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	370c      	adds	r7, #12
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bc80      	pop	{r7}
 80065f4:	4770      	bx	lr
	...

080065f8 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b083      	sub	sp, #12
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	4a03      	ldr	r2, [pc, #12]	; (8006610 <u8g2_SetFontPosBaseline+0x18>)
 8006604:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8006606:	bf00      	nop
 8006608:	370c      	adds	r7, #12
 800660a:	46bd      	mov	sp, r7
 800660c:	bc80      	pop	{r7}
 800660e:	4770      	bx	lr
 8006610:	080065e3 	.word	0x080065e3

08006614 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b082      	sub	sp, #8
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006622:	683a      	ldr	r2, [r7, #0]
 8006624:	429a      	cmp	r2, r3
 8006626:	d00b      	beq.n	8006640 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	683a      	ldr	r2, [r7, #0]
 800662c:	659a      	str	r2, [r3, #88]	; 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	3374      	adds	r3, #116	; 0x74
 8006632:	6839      	ldr	r1, [r7, #0]
 8006634:	4618      	mov	r0, r3
 8006636:	f7ff fa9b 	bl	8005b70 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f7ff ff66 	bl	800650c <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8006640:	bf00      	nop
 8006642:	3708      	adds	r7, #8
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}

08006648 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 8006648:	b480      	push	{r7}
 800664a:	b087      	sub	sp, #28
 800664c:	af00      	add	r7, sp, #0
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	60b9      	str	r1, [r7, #8]
 8006652:	4611      	mov	r1, r2
 8006654:	461a      	mov	r2, r3
 8006656:	460b      	mov	r3, r1
 8006658:	80fb      	strh	r3, [r7, #6]
 800665a:	4613      	mov	r3, r2
 800665c:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	881b      	ldrh	r3, [r3, #0]
 8006662:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 8006664:	8afb      	ldrh	r3, [r7, #22]
 8006666:	82bb      	strh	r3, [r7, #20]
  b += *len;
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	881a      	ldrh	r2, [r3, #0]
 800666c:	8abb      	ldrh	r3, [r7, #20]
 800666e:	4413      	add	r3, r2
 8006670:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8006672:	8afa      	ldrh	r2, [r7, #22]
 8006674:	8abb      	ldrh	r3, [r7, #20]
 8006676:	429a      	cmp	r2, r3
 8006678:	d90b      	bls.n	8006692 <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 800667a:	8afa      	ldrh	r2, [r7, #22]
 800667c:	88bb      	ldrh	r3, [r7, #4]
 800667e:	429a      	cmp	r2, r3
 8006680:	d205      	bcs.n	800668e <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8006682:	88bb      	ldrh	r3, [r7, #4]
 8006684:	82bb      	strh	r3, [r7, #20]
      b--;
 8006686:	8abb      	ldrh	r3, [r7, #20]
 8006688:	3b01      	subs	r3, #1
 800668a:	82bb      	strh	r3, [r7, #20]
 800668c:	e001      	b.n	8006692 <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 800668e:	88fb      	ldrh	r3, [r7, #6]
 8006690:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8006692:	8afa      	ldrh	r2, [r7, #22]
 8006694:	88bb      	ldrh	r3, [r7, #4]
 8006696:	429a      	cmp	r2, r3
 8006698:	d301      	bcc.n	800669e <u8g2_clip_intersection2+0x56>
    return 0;
 800669a:	2300      	movs	r3, #0
 800669c:	e01c      	b.n	80066d8 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 800669e:	8aba      	ldrh	r2, [r7, #20]
 80066a0:	88fb      	ldrh	r3, [r7, #6]
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d801      	bhi.n	80066aa <u8g2_clip_intersection2+0x62>
    return 0;
 80066a6:	2300      	movs	r3, #0
 80066a8:	e016      	b.n	80066d8 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 80066aa:	8afa      	ldrh	r2, [r7, #22]
 80066ac:	88fb      	ldrh	r3, [r7, #6]
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d201      	bcs.n	80066b6 <u8g2_clip_intersection2+0x6e>
    a = c;
 80066b2:	88fb      	ldrh	r3, [r7, #6]
 80066b4:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 80066b6:	8aba      	ldrh	r2, [r7, #20]
 80066b8:	88bb      	ldrh	r3, [r7, #4]
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d901      	bls.n	80066c2 <u8g2_clip_intersection2+0x7a>
    b = d;
 80066be:	88bb      	ldrh	r3, [r7, #4]
 80066c0:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	8afa      	ldrh	r2, [r7, #22]
 80066c6:	801a      	strh	r2, [r3, #0]
  b -= a;
 80066c8:	8aba      	ldrh	r2, [r7, #20]
 80066ca:	8afb      	ldrh	r3, [r7, #22]
 80066cc:	1ad3      	subs	r3, r2, r3
 80066ce:	82bb      	strh	r3, [r7, #20]
  *len = b;
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	8aba      	ldrh	r2, [r7, #20]
 80066d4:	801a      	strh	r2, [r3, #0]
  return 1;
 80066d6:	2301      	movs	r3, #1
}
 80066d8:	4618      	mov	r0, r3
 80066da:	371c      	adds	r7, #28
 80066dc:	46bd      	mov	sp, r7
 80066de:	bc80      	pop	{r7}
 80066e0:	4770      	bx	lr

080066e2 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80066e2:	b590      	push	{r4, r7, lr}
 80066e4:	b087      	sub	sp, #28
 80066e6:	af02      	add	r7, sp, #8
 80066e8:	60f8      	str	r0, [r7, #12]
 80066ea:	4608      	mov	r0, r1
 80066ec:	4611      	mov	r1, r2
 80066ee:	461a      	mov	r2, r3
 80066f0:	4603      	mov	r3, r0
 80066f2:	817b      	strh	r3, [r7, #10]
 80066f4:	460b      	mov	r3, r1
 80066f6:	813b      	strh	r3, [r7, #8]
 80066f8:	4613      	mov	r3, r2
 80066fa:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006700:	893a      	ldrh	r2, [r7, #8]
 8006702:	1ad3      	subs	r3, r2, r3
 8006704:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800670a:	88f8      	ldrh	r0, [r7, #6]
 800670c:	893a      	ldrh	r2, [r7, #8]
 800670e:	8979      	ldrh	r1, [r7, #10]
 8006710:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006714:	9300      	str	r3, [sp, #0]
 8006716:	4603      	mov	r3, r0
 8006718:	68f8      	ldr	r0, [r7, #12]
 800671a:	47a0      	blx	r4
}
 800671c:	bf00      	nop
 800671e:	3714      	adds	r7, #20
 8006720:	46bd      	mov	sp, r7
 8006722:	bd90      	pop	{r4, r7, pc}

08006724 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8006724:	b590      	push	{r4, r7, lr}
 8006726:	b087      	sub	sp, #28
 8006728:	af02      	add	r7, sp, #8
 800672a:	60f8      	str	r0, [r7, #12]
 800672c:	4608      	mov	r0, r1
 800672e:	4611      	mov	r1, r2
 8006730:	461a      	mov	r2, r3
 8006732:	4603      	mov	r3, r0
 8006734:	817b      	strh	r3, [r7, #10]
 8006736:	460b      	mov	r3, r1
 8006738:	813b      	strh	r3, [r7, #8]
 800673a:	4613      	mov	r3, r2
 800673c:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8006744:	2b00      	cmp	r3, #0
 8006746:	d075      	beq.n	8006834 <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8006748:	88fb      	ldrh	r3, [r7, #6]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d072      	beq.n	8006834 <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 800674e:	88fb      	ldrh	r3, [r7, #6]
 8006750:	2b01      	cmp	r3, #1
 8006752:	d91a      	bls.n	800678a <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 8006754:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006758:	2b02      	cmp	r3, #2
 800675a:	d109      	bne.n	8006770 <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 800675c:	897a      	ldrh	r2, [r7, #10]
 800675e:	88fb      	ldrh	r3, [r7, #6]
 8006760:	1ad3      	subs	r3, r2, r3
 8006762:	b29b      	uxth	r3, r3
 8006764:	817b      	strh	r3, [r7, #10]
	  x++;
 8006766:	897b      	ldrh	r3, [r7, #10]
 8006768:	3301      	adds	r3, #1
 800676a:	b29b      	uxth	r3, r3
 800676c:	817b      	strh	r3, [r7, #10]
 800676e:	e00c      	b.n	800678a <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 8006770:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006774:	2b03      	cmp	r3, #3
 8006776:	d108      	bne.n	800678a <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 8006778:	893a      	ldrh	r2, [r7, #8]
 800677a:	88fb      	ldrh	r3, [r7, #6]
 800677c:	1ad3      	subs	r3, r2, r3
 800677e:	b29b      	uxth	r3, r3
 8006780:	813b      	strh	r3, [r7, #8]
	  y++;
 8006782:	893b      	ldrh	r3, [r7, #8]
 8006784:	3301      	adds	r3, #1
 8006786:	b29b      	uxth	r3, r3
 8006788:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 800678a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800678e:	f003 0301 	and.w	r3, r3, #1
 8006792:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 8006796:	f897 3020 	ldrb.w	r3, [r7, #32]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d11a      	bne.n	80067d4 <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 80067a4:	893b      	ldrh	r3, [r7, #8]
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d83b      	bhi.n	8006822 <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 80067b0:	893b      	ldrh	r3, [r7, #8]
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d937      	bls.n	8006826 <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80067c2:	1db9      	adds	r1, r7, #6
 80067c4:	f107 000a 	add.w	r0, r7, #10
 80067c8:	f7ff ff3e 	bl	8006648 <u8g2_clip_intersection2>
 80067cc:	4603      	mov	r3, r0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d11a      	bne.n	8006808 <u8g2_DrawHVLine+0xe4>
	  return;
 80067d2:	e02f      	b.n	8006834 <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80067da:	897b      	ldrh	r3, [r7, #10]
 80067dc:	429a      	cmp	r2, r3
 80067de:	d824      	bhi.n	800682a <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80067e6:	897b      	ldrh	r3, [r7, #10]
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d920      	bls.n	800682e <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 80067f8:	1db9      	adds	r1, r7, #6
 80067fa:	f107 0008 	add.w	r0, r7, #8
 80067fe:	f7ff ff23 	bl	8006648 <u8g2_clip_intersection2>
 8006802:	4603      	mov	r3, r0
 8006804:	2b00      	cmp	r3, #0
 8006806:	d014      	beq.n	8006832 <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800680c:	689c      	ldr	r4, [r3, #8]
 800680e:	8979      	ldrh	r1, [r7, #10]
 8006810:	893a      	ldrh	r2, [r7, #8]
 8006812:	88f8      	ldrh	r0, [r7, #6]
 8006814:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006818:	9300      	str	r3, [sp, #0]
 800681a:	4603      	mov	r3, r0
 800681c:	68f8      	ldr	r0, [r7, #12]
 800681e:	47a0      	blx	r4
 8006820:	e008      	b.n	8006834 <u8g2_DrawHVLine+0x110>
	  return;
 8006822:	bf00      	nop
 8006824:	e006      	b.n	8006834 <u8g2_DrawHVLine+0x110>
	  return;
 8006826:	bf00      	nop
 8006828:	e004      	b.n	8006834 <u8g2_DrawHVLine+0x110>
	  return;
 800682a:	bf00      	nop
 800682c:	e002      	b.n	8006834 <u8g2_DrawHVLine+0x110>
	  return;
 800682e:	bf00      	nop
 8006830:	e000      	b.n	8006834 <u8g2_DrawHVLine+0x110>
	  return;
 8006832:	bf00      	nop
    }
}
 8006834:	3714      	adds	r7, #20
 8006836:	46bd      	mov	sp, r7
 8006838:	bd90      	pop	{r4, r7, pc}

0800683a <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 800683a:	b490      	push	{r4, r7}
 800683c:	b082      	sub	sp, #8
 800683e:	af00      	add	r7, sp, #0
 8006840:	4604      	mov	r4, r0
 8006842:	4608      	mov	r0, r1
 8006844:	4611      	mov	r1, r2
 8006846:	461a      	mov	r2, r3
 8006848:	4623      	mov	r3, r4
 800684a:	80fb      	strh	r3, [r7, #6]
 800684c:	4603      	mov	r3, r0
 800684e:	80bb      	strh	r3, [r7, #4]
 8006850:	460b      	mov	r3, r1
 8006852:	807b      	strh	r3, [r7, #2]
 8006854:	4613      	mov	r3, r2
 8006856:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 8006858:	887a      	ldrh	r2, [r7, #2]
 800685a:	88bb      	ldrh	r3, [r7, #4]
 800685c:	429a      	cmp	r2, r3
 800685e:	d20d      	bcs.n	800687c <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8006860:	883a      	ldrh	r2, [r7, #0]
 8006862:	88fb      	ldrh	r3, [r7, #6]
 8006864:	429a      	cmp	r2, r3
 8006866:	d901      	bls.n	800686c <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8006868:	2301      	movs	r3, #1
 800686a:	e014      	b.n	8006896 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 800686c:	887a      	ldrh	r2, [r7, #2]
 800686e:	883b      	ldrh	r3, [r7, #0]
 8006870:	429a      	cmp	r2, r3
 8006872:	d901      	bls.n	8006878 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8006874:	2301      	movs	r3, #1
 8006876:	e00e      	b.n	8006896 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8006878:	2300      	movs	r3, #0
 800687a:	e00c      	b.n	8006896 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 800687c:	883a      	ldrh	r2, [r7, #0]
 800687e:	88fb      	ldrh	r3, [r7, #6]
 8006880:	429a      	cmp	r2, r3
 8006882:	d907      	bls.n	8006894 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8006884:	887a      	ldrh	r2, [r7, #2]
 8006886:	883b      	ldrh	r3, [r7, #0]
 8006888:	429a      	cmp	r2, r3
 800688a:	d901      	bls.n	8006890 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 800688c:	2301      	movs	r3, #1
 800688e:	e002      	b.n	8006896 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8006890:	2300      	movs	r3, #0
 8006892:	e000      	b.n	8006896 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8006894:	2300      	movs	r3, #0
    }
  }
}
 8006896:	4618      	mov	r0, r3
 8006898:	3708      	adds	r7, #8
 800689a:	46bd      	mov	sp, r7
 800689c:	bc90      	pop	{r4, r7}
 800689e:	4770      	bx	lr

080068a0 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b084      	sub	sp, #16
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	60f8      	str	r0, [r7, #12]
 80068a8:	4608      	mov	r0, r1
 80068aa:	4611      	mov	r1, r2
 80068ac:	461a      	mov	r2, r3
 80068ae:	4603      	mov	r3, r0
 80068b0:	817b      	strh	r3, [r7, #10]
 80068b2:	460b      	mov	r3, r1
 80068b4:	813b      	strh	r3, [r7, #8]
 80068b6:	4613      	mov	r3, r2
 80068b8:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f8b3 104e 	ldrh.w	r1, [r3, #78]	; 0x4e
 80068c6:	8b3b      	ldrh	r3, [r7, #24]
 80068c8:	893a      	ldrh	r2, [r7, #8]
 80068ca:	f7ff ffb6 	bl	800683a <u8g2_is_intersection_decision_tree>
 80068ce:	4603      	mov	r3, r0
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d101      	bne.n	80068d8 <u8g2_IsIntersection+0x38>
    return 0; 
 80068d4:	2300      	movs	r3, #0
 80068d6:	e00a      	b.n	80068ee <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
 80068e4:	88fb      	ldrh	r3, [r7, #6]
 80068e6:	897a      	ldrh	r2, [r7, #10]
 80068e8:	f7ff ffa7 	bl	800683a <u8g2_is_intersection_decision_tree>
 80068ec:	4603      	mov	r3, r0
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3710      	adds	r7, #16
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}

080068f6 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80068f6:	b480      	push	{r7}
 80068f8:	b089      	sub	sp, #36	; 0x24
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	60f8      	str	r0, [r7, #12]
 80068fe:	4608      	mov	r0, r1
 8006900:	4611      	mov	r1, r2
 8006902:	461a      	mov	r2, r3
 8006904:	4603      	mov	r3, r0
 8006906:	817b      	strh	r3, [r7, #10]
 8006908:	460b      	mov	r3, r1
 800690a:	813b      	strh	r3, [r7, #8]
 800690c:	4613      	mov	r3, r2
 800690e:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8006910:	893b      	ldrh	r3, [r7, #8]
 8006912:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8006914:	7efb      	ldrb	r3, [r7, #27]
 8006916:	f003 0307 	and.w	r3, r3, #7
 800691a:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 800691c:	2301      	movs	r3, #1
 800691e:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 8006920:	7e3a      	ldrb	r2, [r7, #24]
 8006922:	7efb      	ldrb	r3, [r7, #27]
 8006924:	fa02 f303 	lsl.w	r3, r2, r3
 8006928:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 800692a:	2300      	movs	r3, #0
 800692c:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 800692e:	2300      	movs	r3, #0
 8006930:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8006938:	2b01      	cmp	r3, #1
 800693a:	d801      	bhi.n	8006940 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 800693c:	7e3b      	ldrb	r3, [r7, #24]
 800693e:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8006946:	2b01      	cmp	r3, #1
 8006948:	d001      	beq.n	800694e <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 800694a:	7e3b      	ldrb	r3, [r7, #24]
 800694c:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 800694e:	893b      	ldrh	r3, [r7, #8]
 8006950:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 8006952:	8afb      	ldrh	r3, [r7, #22]
 8006954:	f023 0307 	bic.w	r3, r3, #7
 8006958:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	7c1b      	ldrb	r3, [r3, #16]
 8006960:	b29b      	uxth	r3, r3
 8006962:	8afa      	ldrh	r2, [r7, #22]
 8006964:	fb02 f303 	mul.w	r3, r2, r3
 8006968:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800696e:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 8006970:	8afb      	ldrh	r3, [r7, #22]
 8006972:	69fa      	ldr	r2, [r7, #28]
 8006974:	4413      	add	r3, r2
 8006976:	61fb      	str	r3, [r7, #28]
  ptr += x;
 8006978:	897b      	ldrh	r3, [r7, #10]
 800697a:	69fa      	ldr	r2, [r7, #28]
 800697c:	4413      	add	r3, r2
 800697e:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 8006980:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006984:	2b00      	cmp	r3, #0
 8006986:	d117      	bne.n	80069b8 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8006988:	69fb      	ldr	r3, [r7, #28]
 800698a:	781a      	ldrb	r2, [r3, #0]
 800698c:	7ebb      	ldrb	r3, [r7, #26]
 800698e:	4313      	orrs	r3, r2
 8006990:	b2da      	uxtb	r2, r3
 8006992:	69fb      	ldr	r3, [r7, #28]
 8006994:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8006996:	69fb      	ldr	r3, [r7, #28]
 8006998:	781a      	ldrb	r2, [r3, #0]
 800699a:	7e7b      	ldrb	r3, [r7, #25]
 800699c:	4053      	eors	r3, r2
 800699e:	b2da      	uxtb	r2, r3
 80069a0:	69fb      	ldr	r3, [r7, #28]
 80069a2:	701a      	strb	r2, [r3, #0]
	ptr++;
 80069a4:	69fb      	ldr	r3, [r7, #28]
 80069a6:	3301      	adds	r3, #1
 80069a8:	61fb      	str	r3, [r7, #28]
	len--;
 80069aa:	88fb      	ldrh	r3, [r7, #6]
 80069ac:	3b01      	subs	r3, #1
 80069ae:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 80069b0:	88fb      	ldrh	r3, [r7, #6]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d1e8      	bne.n	8006988 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 80069b6:	e038      	b.n	8006a2a <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 80069b8:	69fb      	ldr	r3, [r7, #28]
 80069ba:	781a      	ldrb	r2, [r3, #0]
 80069bc:	7ebb      	ldrb	r3, [r7, #26]
 80069be:	4313      	orrs	r3, r2
 80069c0:	b2da      	uxtb	r2, r3
 80069c2:	69fb      	ldr	r3, [r7, #28]
 80069c4:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 80069c6:	69fb      	ldr	r3, [r7, #28]
 80069c8:	781a      	ldrb	r2, [r3, #0]
 80069ca:	7e7b      	ldrb	r3, [r7, #25]
 80069cc:	4053      	eors	r3, r2
 80069ce:	b2da      	uxtb	r2, r3
 80069d0:	69fb      	ldr	r3, [r7, #28]
 80069d2:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 80069d4:	7efb      	ldrb	r3, [r7, #27]
 80069d6:	3301      	adds	r3, #1
 80069d8:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 80069da:	7efb      	ldrb	r3, [r7, #27]
 80069dc:	f003 0307 	and.w	r3, r3, #7
 80069e0:	76fb      	strb	r3, [r7, #27]
      len--;
 80069e2:	88fb      	ldrh	r3, [r7, #6]
 80069e4:	3b01      	subs	r3, #1
 80069e6:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 80069e8:	7efb      	ldrb	r3, [r7, #27]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d114      	bne.n	8006a18 <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80069f2:	461a      	mov	r2, r3
 80069f4:	69fb      	ldr	r3, [r7, #28]
 80069f6:	4413      	add	r3, r2
 80069f8:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d801      	bhi.n	8006a08 <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 8006a04:	2301      	movs	r3, #1
 8006a06:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d008      	beq.n	8006a24 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 8006a12:	2301      	movs	r3, #1
 8006a14:	767b      	strb	r3, [r7, #25]
 8006a16:	e005      	b.n	8006a24 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 8006a18:	7ebb      	ldrb	r3, [r7, #26]
 8006a1a:	005b      	lsls	r3, r3, #1
 8006a1c:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 8006a1e:	7e7b      	ldrb	r3, [r7, #25]
 8006a20:	005b      	lsls	r3, r3, #1
 8006a22:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 8006a24:	88fb      	ldrh	r3, [r7, #6]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d1c6      	bne.n	80069b8 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8006a2a:	bf00      	nop
 8006a2c:	3724      	adds	r7, #36	; 0x24
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bc80      	pop	{r7}
 8006a32:	4770      	bx	lr

08006a34 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b082      	sub	sp, #8
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  u8g2->clip_y0 = 0;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2200      	movs	r2, #0
 8006a48:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006a52:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006a5c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  
  u8g2->cb->update_page_win(u8g2);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	4798      	blx	r3
}
 8006a6a:	bf00      	nop
 8006a6c:	3708      	adds	r7, #8
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}

08006a72 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8006a72:	b580      	push	{r7, lr}
 8006a74:	b084      	sub	sp, #16
 8006a76:	af00      	add	r7, sp, #0
 8006a78:	60f8      	str	r0, [r7, #12]
 8006a7a:	60b9      	str	r1, [r7, #8]
 8006a7c:	603b      	str	r3, [r7, #0]
 8006a7e:	4613      	mov	r3, r2
 8006a80:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2200      	movs	r2, #0
 8006a86:	659a      	str	r2, [r3, #88]	; 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	683a      	ldr	r2, [r7, #0]
 8006a8c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	68ba      	ldr	r2, [r7, #8]
 8006a92:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	79fa      	ldrb	r2, [r7, #7]
 8006a98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  u8g2->bitmap_transparency = 0;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  
  u8g2->font_height_mode = 0; /* issue 2046 */
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
  u8g2->draw_color = 1;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  u8g2->is_auto_page_clear = 1;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
  
  u8g2->cb = u8g2_cb;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	69ba      	ldr	r2, [r7, #24]
 8006ad0:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	68f8      	ldr	r0, [r7, #12]
 8006ada:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8006adc:	68f8      	ldr	r0, [r7, #12]
 8006ade:	f7ff ffa9 	bl	8006a34 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8006ae2:	68f8      	ldr	r0, [r7, #12]
 8006ae4:	f7ff fd88 	bl	80065f8 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2200      	movs	r2, #0
 8006aec:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
#endif
}
 8006af0:	bf00      	nop
 8006af2:	3710      	adds	r7, #16
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}

08006af8 <u8g2_SetDisplayRotation>:
/*
  Usually the display rotation is set initially, but it could be done later also
  u8g2_cb can be U8G2_R0..U8G2_R3
*/
void u8g2_SetDisplayRotation(u8g2_t *u8g2, const u8g2_cb_t *u8g2_cb)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b082      	sub	sp, #8
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	6039      	str	r1, [r7, #0]
  u8g2->cb = u8g2_cb;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	683a      	ldr	r2, [r7, #0]
 8006b06:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	4798      	blx	r3
}
 8006b1c:	bf00      	nop
 8006b1e:	3708      	adds	r7, #8
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}

08006b24 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b085      	sub	sp, #20
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006b38:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8006b3a:	89fb      	ldrh	r3, [r7, #14]
 8006b3c:	00db      	lsls	r3, r3, #3
 8006b3e:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	89fa      	ldrh	r2, [r7, #14]
 8006b44:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  t = display_info->tile_width;
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	7c1b      	ldrb	r3, [r3, #16]
 8006b4a:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 8006b4c:	89fb      	ldrh	r3, [r7, #14]
 8006b4e:	00db      	lsls	r3, r3, #3
 8006b50:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	89fa      	ldrh	r2, [r7, #14]
 8006b56:	875a      	strh	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006b5e:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8006b60:	89fb      	ldrh	r3, [r7, #14]
 8006b62:	00db      	lsls	r3, r3, #3
 8006b64:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	89fa      	ldrh	r2, [r7, #14]
 8006b6a:	87da      	strh	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_buf_height;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006b72:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8006b74:	89fb      	ldrh	r3, [r7, #14]
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 8006b7c:	4413      	add	r3, r2
 8006b7e:	68ba      	ldr	r2, [r7, #8]
 8006b80:	7c52      	ldrb	r2, [r2, #17]
 8006b82:	4293      	cmp	r3, r2
 8006b84:	dd08      	ble.n	8006b98 <u8g2_update_dimension_common+0x74>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	7c5b      	ldrb	r3, [r3, #17]
 8006b8a:	b29a      	uxth	r2, r3
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006b92:	b29b      	uxth	r3, r3
 8006b94:	1ad3      	subs	r3, r2, r3
 8006b96:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8006b98:	89fb      	ldrh	r3, [r7, #14]
 8006b9a:	00db      	lsls	r3, r3, #3
 8006b9c:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8006bba:	89fb      	ldrh	r3, [r7, #14]
 8006bbc:	4413      	add	r3, r2
 8006bbe:	b29a      	uxth	r2, r3
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	8a9a      	ldrh	r2, [r3, #20]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  u8g2->height = display_info->pixel_height;
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	8ada      	ldrh	r2, [r3, #22]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 8006bda:	bf00      	nop
 8006bdc:	3714      	adds	r7, #20
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bc80      	pop	{r7}
 8006be2:	4770      	bx	lr

08006be4 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b084      	sub	sp, #16
 8006be8:	af02      	add	r7, sp, #8
 8006bea:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f8b3 0052 	ldrh.w	r0, [r3, #82]	; 0x52
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006c04:	9300      	str	r3, [sp, #0]
 8006c06:	4603      	mov	r3, r0
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f7ff fe49 	bl	80068a0 <u8g2_IsIntersection>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d104      	bne.n	8006c1e <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2200      	movs	r2, #0
 8006c18:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 8006c1c:	e03b      	b.n	8006c96 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2201      	movs	r2, #1
 8006c22:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c32:	429a      	cmp	r2, r3
 8006c34:	d205      	bcs.n	8006c42 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	d905      	bls.n	8006c5e <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	d205      	bcs.n	8006c7a <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006c86:	429a      	cmp	r2, r3
 8006c88:	d905      	bls.n	8006c96 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 8006c96:	bf00      	nop
 8006c98:	3708      	adds	r7, #8
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}

08006c9e <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 8006c9e:	b580      	push	{r7, lr}
 8006ca0:	b082      	sub	sp, #8
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f7ff ff3c 	bl	8006b24 <u8g2_update_dimension_common>
}
 8006cac:	bf00      	nop
 8006cae:	3708      	adds	r7, #8
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}

08006cb4 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b082      	sub	sp, #8
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  
  u8g2->user_y0 = u8g2->buf_y0;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  u8g2->user_y1 = u8g2->buf_y1;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f7ff ff7b 	bl	8006be4 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8006cee:	bf00      	nop
 8006cf0:	3708      	adds	r7, #8
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}

08006cf6 <u8g2_update_dimension_r2>:
  u8g2_apply_clip_window(u8g2);
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}

void u8g2_update_dimension_r2(u8g2_t *u8g2)
{
 8006cf6:	b580      	push	{r7, lr}
 8006cf8:	b082      	sub	sp, #8
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f7ff ff10 	bl	8006b24 <u8g2_update_dimension_common>
}
 8006d04:	bf00      	nop
 8006d06:	3708      	adds	r7, #8
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <u8g2_update_page_win_r2>:

void u8g2_update_page_win_r2(u8g2_t *u8g2)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b082      	sub	sp, #8
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2200      	movs	r2, #0
 8006d18:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  u8g2->user_x1 = u8g2->width;	/* pixel_buf_width replaced with width */
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  
  /* there are ases where the height is not a multiple of 8. */
  /* in such a case u8g2->buf_y1 might be heigher than u8g2->height */
  u8g2->user_y0 = 0;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  if ( u8g2->height >= u8g2->buf_y1 )
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8b3 2046 	ldrh.w	r2, [r3, #70]	; 0x46
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d30a      	bcc.n	8006d56 <u8g2_update_page_win_r2+0x4a>
    u8g2->user_y0 = u8g2->height - u8g2->buf_y1;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f8b3 2046 	ldrh.w	r2, [r3, #70]	; 0x46
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8006d4c:	1ad3      	subs	r3, r2, r3
 8006d4e:	b29a      	uxth	r2, r3
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  u8g2->user_y1 = u8g2->height - u8g2->buf_y0;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f8b3 2046 	ldrh.w	r2, [r3, #70]	; 0x46
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006d62:	1ad3      	subs	r3, r2, r3
 8006d64:	b29a      	uxth	r2, r3
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f7ff ff39 	bl	8006be4 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8006d72:	bf00      	nop
 8006d74:	3708      	adds	r7, #8
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}

08006d7a <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8006d7a:	b580      	push	{r7, lr}
 8006d7c:	b086      	sub	sp, #24
 8006d7e:	af02      	add	r7, sp, #8
 8006d80:	60f8      	str	r0, [r7, #12]
 8006d82:	4608      	mov	r0, r1
 8006d84:	4611      	mov	r1, r2
 8006d86:	461a      	mov	r2, r3
 8006d88:	4603      	mov	r3, r0
 8006d8a:	817b      	strh	r3, [r7, #10]
 8006d8c:	460b      	mov	r3, r1
 8006d8e:	813b      	strh	r3, [r7, #8]
 8006d90:	4613      	mov	r3, r2
 8006d92:	80fb      	strh	r3, [r7, #6]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8006d94:	88f8      	ldrh	r0, [r7, #6]
 8006d96:	893a      	ldrh	r2, [r7, #8]
 8006d98:	8979      	ldrh	r1, [r7, #10]
 8006d9a:	7e3b      	ldrb	r3, [r7, #24]
 8006d9c:	9300      	str	r3, [sp, #0]
 8006d9e:	4603      	mov	r3, r0
 8006da0:	68f8      	ldr	r0, [r7, #12]
 8006da2:	f7ff fc9e 	bl	80066e2 <u8g2_draw_hv_line_2dir>
}
 8006da6:	bf00      	nop
 8006da8:	3710      	adds	r7, #16
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}

08006dae <u8g2_draw_l90_r2>:
  
  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
}

void u8g2_draw_l90_r2(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8006dae:	b580      	push	{r7, lr}
 8006db0:	b088      	sub	sp, #32
 8006db2:	af02      	add	r7, sp, #8
 8006db4:	60f8      	str	r0, [r7, #12]
 8006db6:	4608      	mov	r0, r1
 8006db8:	4611      	mov	r1, r2
 8006dba:	461a      	mov	r2, r3
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	817b      	strh	r3, [r7, #10]
 8006dc0:	460b      	mov	r3, r1
 8006dc2:	813b      	strh	r3, [r7, #8]
 8006dc4:	4613      	mov	r3, r2
 8006dc6:	80fb      	strh	r3, [r7, #6]
    yy -= len;
    yy++;
  }
  */

  yy = u8g2->height;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006dce:	82bb      	strh	r3, [r7, #20]
  yy -= y;
 8006dd0:	8aba      	ldrh	r2, [r7, #20]
 8006dd2:	893b      	ldrh	r3, [r7, #8]
 8006dd4:	1ad3      	subs	r3, r2, r3
 8006dd6:	82bb      	strh	r3, [r7, #20]
  
  xx = u8g2->width;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006dde:	82fb      	strh	r3, [r7, #22]
  xx -= x;
 8006de0:	8afa      	ldrh	r2, [r7, #22]
 8006de2:	897b      	ldrh	r3, [r7, #10]
 8006de4:	1ad3      	subs	r3, r2, r3
 8006de6:	82fb      	strh	r3, [r7, #22]
  
  if ( dir == 0 )
 8006de8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d107      	bne.n	8006e00 <u8g2_draw_l90_r2+0x52>
  {
    yy--;
 8006df0:	8abb      	ldrh	r3, [r7, #20]
 8006df2:	3b01      	subs	r3, #1
 8006df4:	82bb      	strh	r3, [r7, #20]
    xx -= len;
 8006df6:	8afa      	ldrh	r2, [r7, #22]
 8006df8:	88fb      	ldrh	r3, [r7, #6]
 8006dfa:	1ad3      	subs	r3, r2, r3
 8006dfc:	82fb      	strh	r3, [r7, #22]
 8006dfe:	e00a      	b.n	8006e16 <u8g2_draw_l90_r2+0x68>
  }
  else if ( dir == 1 )
 8006e00:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d106      	bne.n	8006e16 <u8g2_draw_l90_r2+0x68>
  {
    xx--;
 8006e08:	8afb      	ldrh	r3, [r7, #22]
 8006e0a:	3b01      	subs	r3, #1
 8006e0c:	82fb      	strh	r3, [r7, #22]
    yy -= len;
 8006e0e:	8aba      	ldrh	r2, [r7, #20]
 8006e10:	88fb      	ldrh	r3, [r7, #6]
 8006e12:	1ad3      	subs	r3, r2, r3
 8006e14:	82bb      	strh	r3, [r7, #20]
  }

  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 8006e16:	88f8      	ldrh	r0, [r7, #6]
 8006e18:	8aba      	ldrh	r2, [r7, #20]
 8006e1a:	8af9      	ldrh	r1, [r7, #22]
 8006e1c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006e20:	9300      	str	r3, [sp, #0]
 8006e22:	4603      	mov	r3, r0
 8006e24:	68f8      	ldr	r0, [r7, #12]
 8006e26:	f7ff fc5c 	bl	80066e2 <u8g2_draw_hv_line_2dir>
}
 8006e2a:	bf00      	nop
 8006e2c:	3718      	adds	r7, #24
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}

08006e32 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8006e32:	b480      	push	{r7}
 8006e34:	b083      	sub	sp, #12
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8006e42:	bf00      	nop
 8006e44:	370c      	adds	r7, #12
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bc80      	pop	{r7}
 8006e4a:	4770      	bx	lr

08006e4c <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b083      	sub	sp, #12
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	460b      	mov	r3, r1
 8006e56:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8006e58:	78fb      	ldrb	r3, [r7, #3]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d002      	beq.n	8006e64 <u8x8_ascii_next+0x18>
 8006e5e:	78fb      	ldrb	r3, [r7, #3]
 8006e60:	2b0a      	cmp	r3, #10
 8006e62:	d102      	bne.n	8006e6a <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 8006e64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006e68:	e001      	b.n	8006e6e <u8x8_ascii_next+0x22>
  return b;
 8006e6a:	78fb      	ldrb	r3, [r7, #3]
 8006e6c:	b29b      	uxth	r3, r3
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	370c      	adds	r7, #12
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bc80      	pop	{r7}
 8006e76:	4770      	bx	lr

08006e78 <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 8006e78:	b590      	push	{r4, r7, lr}
 8006e7a:	b083      	sub	sp, #12
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	460b      	mov	r3, r1
 8006e82:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	691c      	ldr	r4, [r3, #16]
 8006e88:	78fa      	ldrb	r2, [r7, #3]
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	2120      	movs	r1, #32
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	47a0      	blx	r4
 8006e92:	4603      	mov	r3, r0
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	370c      	adds	r7, #12
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd90      	pop	{r4, r7, pc}

08006e9c <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8006e9c:	b590      	push	{r4, r7, lr}
 8006e9e:	b085      	sub	sp, #20
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	60f8      	str	r0, [r7, #12]
 8006ea4:	460b      	mov	r3, r1
 8006ea6:	607a      	str	r2, [r7, #4]
 8006ea8:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	691c      	ldr	r4, [r3, #16]
 8006eae:	7afa      	ldrb	r2, [r7, #11]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2117      	movs	r1, #23
 8006eb4:	68f8      	ldr	r0, [r7, #12]
 8006eb6:	47a0      	blx	r4
 8006eb8:	4603      	mov	r3, r0
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3714      	adds	r7, #20
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd90      	pop	{r4, r7, pc}

08006ec2 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8006ec2:	b580      	push	{r7, lr}
 8006ec4:	b082      	sub	sp, #8
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	6078      	str	r0, [r7, #4]
 8006eca:	460b      	mov	r3, r1
 8006ecc:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8006ece:	1cfb      	adds	r3, r7, #3
 8006ed0:	461a      	mov	r2, r3
 8006ed2:	2101      	movs	r1, #1
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f7ff ffe1 	bl	8006e9c <u8x8_byte_SendBytes>
 8006eda:	4603      	mov	r3, r0
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3708      	adds	r7, #8
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}

08006ee4 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8006ee4:	b590      	push	{r4, r7, lr}
 8006ee6:	b083      	sub	sp, #12
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	460b      	mov	r3, r1
 8006eee:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	68dc      	ldr	r4, [r3, #12]
 8006ef4:	78fa      	ldrb	r2, [r7, #3]
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	2115      	movs	r1, #21
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	47a0      	blx	r4
 8006efe:	4603      	mov	r3, r0
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	370c      	adds	r7, #12
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd90      	pop	{r4, r7, pc}

08006f08 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8006f08:	b590      	push	{r4, r7, lr}
 8006f0a:	b083      	sub	sp, #12
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	460b      	mov	r3, r1
 8006f12:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	68dc      	ldr	r4, [r3, #12]
 8006f18:	78fa      	ldrb	r2, [r7, #3]
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	2116      	movs	r1, #22
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	47a0      	blx	r4
 8006f22:	4603      	mov	r3, r0
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	370c      	adds	r7, #12
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd90      	pop	{r4, r7, pc}

08006f2c <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8006f2c:	b590      	push	{r4, r7, lr}
 8006f2e:	b085      	sub	sp, #20
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	60f8      	str	r0, [r7, #12]
 8006f34:	460b      	mov	r3, r1
 8006f36:	607a      	str	r2, [r7, #4]
 8006f38:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	68dc      	ldr	r4, [r3, #12]
 8006f3e:	7afa      	ldrb	r2, [r7, #11]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2117      	movs	r1, #23
 8006f44:	68f8      	ldr	r0, [r7, #12]
 8006f46:	47a0      	blx	r4
 8006f48:	4603      	mov	r3, r0
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3714      	adds	r7, #20
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd90      	pop	{r4, r7, pc}

08006f52 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8006f52:	b590      	push	{r4, r7, lr}
 8006f54:	b083      	sub	sp, #12
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	68dc      	ldr	r4, [r3, #12]
 8006f5e:	2300      	movs	r3, #0
 8006f60:	2200      	movs	r2, #0
 8006f62:	2118      	movs	r1, #24
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	47a0      	blx	r4
 8006f68:	4603      	mov	r3, r0
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	370c      	adds	r7, #12
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd90      	pop	{r4, r7, pc}

08006f72 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8006f72:	b590      	push	{r4, r7, lr}
 8006f74:	b083      	sub	sp, #12
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	68dc      	ldr	r4, [r3, #12]
 8006f7e:	2300      	movs	r3, #0
 8006f80:	2200      	movs	r2, #0
 8006f82:	2119      	movs	r1, #25
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	47a0      	blx	r4
 8006f88:	4603      	mov	r3, r0
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	370c      	adds	r7, #12
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd90      	pop	{r4, r7, pc}

08006f92 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8006f92:	b590      	push	{r4, r7, lr}
 8006f94:	b085      	sub	sp, #20
 8006f96:	af00      	add	r7, sp, #0
 8006f98:	6078      	str	r0, [r7, #4]
 8006f9a:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	781b      	ldrb	r3, [r3, #0]
 8006fa0:	73fb      	strb	r3, [r7, #15]
    data++;
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	3301      	adds	r3, #1
 8006fa6:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8006fa8:	7bfb      	ldrb	r3, [r7, #15]
 8006faa:	2bfe      	cmp	r3, #254	; 0xfe
 8006fac:	d031      	beq.n	8007012 <u8x8_cad_SendSequence+0x80>
 8006fae:	2bfe      	cmp	r3, #254	; 0xfe
 8006fb0:	dc3d      	bgt.n	800702e <u8x8_cad_SendSequence+0x9c>
 8006fb2:	2b19      	cmp	r3, #25
 8006fb4:	dc3b      	bgt.n	800702e <u8x8_cad_SendSequence+0x9c>
 8006fb6:	2b18      	cmp	r3, #24
 8006fb8:	da23      	bge.n	8007002 <u8x8_cad_SendSequence+0x70>
 8006fba:	2b16      	cmp	r3, #22
 8006fbc:	dc02      	bgt.n	8006fc4 <u8x8_cad_SendSequence+0x32>
 8006fbe:	2b15      	cmp	r3, #21
 8006fc0:	da03      	bge.n	8006fca <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8006fc2:	e034      	b.n	800702e <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 8006fc4:	2b17      	cmp	r3, #23
 8006fc6:	d00e      	beq.n	8006fe6 <u8x8_cad_SendSequence+0x54>
	return;
 8006fc8:	e031      	b.n	800702e <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	781b      	ldrb	r3, [r3, #0]
 8006fce:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	68dc      	ldr	r4, [r3, #12]
 8006fd4:	7bba      	ldrb	r2, [r7, #14]
 8006fd6:	7bf9      	ldrb	r1, [r7, #15]
 8006fd8:	2300      	movs	r3, #0
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	47a0      	blx	r4
	  data++;
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	3301      	adds	r3, #1
 8006fe2:	603b      	str	r3, [r7, #0]
	  break;
 8006fe4:	e022      	b.n	800702c <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	781b      	ldrb	r3, [r3, #0]
 8006fea:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8006fec:	f107 030e 	add.w	r3, r7, #14
 8006ff0:	461a      	mov	r2, r3
 8006ff2:	2101      	movs	r1, #1
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f7ff ff99 	bl	8006f2c <u8x8_cad_SendData>
	  data++;
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	3301      	adds	r3, #1
 8006ffe:	603b      	str	r3, [r7, #0]
	  break;
 8007000:	e014      	b.n	800702c <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	68dc      	ldr	r4, [r3, #12]
 8007006:	7bf9      	ldrb	r1, [r7, #15]
 8007008:	2300      	movs	r3, #0
 800700a:	2200      	movs	r2, #0
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	47a0      	blx	r4
	  break;
 8007010:	e00c      	b.n	800702c <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	781b      	ldrb	r3, [r3, #0]
 8007016:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8007018:	7bbb      	ldrb	r3, [r7, #14]
 800701a:	461a      	mov	r2, r3
 800701c:	2129      	movs	r1, #41	; 0x29
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f000 f9d8 	bl	80073d4 <u8x8_gpio_call>
	  data++;
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	3301      	adds	r3, #1
 8007028:	603b      	str	r3, [r7, #0]
	  break;
 800702a:	bf00      	nop
    cmd = *data;
 800702c:	e7b6      	b.n	8006f9c <u8x8_cad_SendSequence+0xa>
	return;
 800702e:	bf00      	nop
    }
  }
}
 8007030:	3714      	adds	r7, #20
 8007032:	46bd      	mov	sp, r7
 8007034:	bd90      	pop	{r4, r7, pc}
	...

08007038 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8007038:	b590      	push	{r4, r7, lr}
 800703a:	b085      	sub	sp, #20
 800703c:	af00      	add	r7, sp, #0
 800703e:	60f8      	str	r0, [r7, #12]
 8007040:	607b      	str	r3, [r7, #4]
 8007042:	460b      	mov	r3, r1
 8007044:	72fb      	strb	r3, [r7, #11]
 8007046:	4613      	mov	r3, r2
 8007048:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 800704a:	7afb      	ldrb	r3, [r7, #11]
 800704c:	3b14      	subs	r3, #20
 800704e:	2b05      	cmp	r3, #5
 8007050:	d82f      	bhi.n	80070b2 <u8x8_cad_001+0x7a>
 8007052:	a201      	add	r2, pc, #4	; (adr r2, 8007058 <u8x8_cad_001+0x20>)
 8007054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007058:	080070a1 	.word	0x080070a1
 800705c:	08007071 	.word	0x08007071
 8007060:	08007085 	.word	0x08007085
 8007064:	08007099 	.word	0x08007099
 8007068:	080070a1 	.word	0x080070a1
 800706c:	080070a1 	.word	0x080070a1
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 8007070:	2100      	movs	r1, #0
 8007072:	68f8      	ldr	r0, [r7, #12]
 8007074:	f7ff ff00 	bl	8006e78 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8007078:	7abb      	ldrb	r3, [r7, #10]
 800707a:	4619      	mov	r1, r3
 800707c:	68f8      	ldr	r0, [r7, #12]
 800707e:	f7ff ff20 	bl	8006ec2 <u8x8_byte_SendByte>
      break;
 8007082:	e018      	b.n	80070b6 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 8007084:	2100      	movs	r1, #0
 8007086:	68f8      	ldr	r0, [r7, #12]
 8007088:	f7ff fef6 	bl	8006e78 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 800708c:	7abb      	ldrb	r3, [r7, #10]
 800708e:	4619      	mov	r1, r3
 8007090:	68f8      	ldr	r0, [r7, #12]
 8007092:	f7ff ff16 	bl	8006ec2 <u8x8_byte_SendByte>
      break;
 8007096:	e00e      	b.n	80070b6 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 8007098:	2101      	movs	r1, #1
 800709a:	68f8      	ldr	r0, [r7, #12]
 800709c:	f7ff feec 	bl	8006e78 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	691c      	ldr	r4, [r3, #16]
 80070a4:	7aba      	ldrb	r2, [r7, #10]
 80070a6:	7af9      	ldrb	r1, [r7, #11]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	68f8      	ldr	r0, [r7, #12]
 80070ac:	47a0      	blx	r4
 80070ae:	4603      	mov	r3, r0
 80070b0:	e002      	b.n	80070b8 <u8x8_cad_001+0x80>
    default:
      return 0;
 80070b2:	2300      	movs	r3, #0
 80070b4:	e000      	b.n	80070b8 <u8x8_cad_001+0x80>
  }
  return 1;
 80070b6:	2301      	movs	r3, #1
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3714      	adds	r7, #20
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd90      	pop	{r4, r7, pc}

080070c0 <u8x8_d_ssd1306_sh1106_generic>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b086      	sub	sp, #24
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	60f8      	str	r0, [r7, #12]
 80070c8:	607b      	str	r3, [r7, #4]
 80070ca:	460b      	mov	r3, r1
 80070cc:	72fb      	strb	r3, [r7, #11]
 80070ce:	4613      	mov	r3, r2
 80070d0:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 80070d2:	7afb      	ldrb	r3, [r7, #11]
 80070d4:	3b0b      	subs	r3, #11
 80070d6:	2b04      	cmp	r3, #4
 80070d8:	f200 808a 	bhi.w	80071f0 <u8x8_d_ssd1306_sh1106_generic+0x130>
 80070dc:	a201      	add	r2, pc, #4	; (adr r2, 80070e4 <u8x8_d_ssd1306_sh1106_generic+0x24>)
 80070de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070e2:	bf00      	nop
 80070e4:	080070f9 	.word	0x080070f9
 80070e8:	080071f1 	.word	0x080071f1
 80070ec:	08007113 	.word	0x08007113
 80070f0:	08007145 	.word	0x08007145
 80070f4:	08007165 	.word	0x08007165
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 80070f8:	7abb      	ldrb	r3, [r7, #10]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d104      	bne.n	8007108 <u8x8_d_ssd1306_sh1106_generic+0x48>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
 80070fe:	4940      	ldr	r1, [pc, #256]	; (8007200 <u8x8_d_ssd1306_sh1106_generic+0x140>)
 8007100:	68f8      	ldr	r0, [r7, #12]
 8007102:	f7ff ff46 	bl	8006f92 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
      break;
 8007106:	e075      	b.n	80071f4 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
 8007108:	493e      	ldr	r1, [pc, #248]	; (8007204 <u8x8_d_ssd1306_sh1106_generic+0x144>)
 800710a:	68f8      	ldr	r0, [r7, #12]
 800710c:	f7ff ff41 	bl	8006f92 <u8x8_cad_SendSequence>
      break;
 8007110:	e070      	b.n	80071f4 <u8x8_d_ssd1306_sh1106_generic+0x134>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 8007112:	7abb      	ldrb	r3, [r7, #10]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d10a      	bne.n	800712e <u8x8_d_ssd1306_sh1106_generic+0x6e>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
 8007118:	493b      	ldr	r1, [pc, #236]	; (8007208 <u8x8_d_ssd1306_sh1106_generic+0x148>)
 800711a:	68f8      	ldr	r0, [r7, #12]
 800711c:	f7ff ff39 	bl	8006f92 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	7c9a      	ldrb	r2, [r3, #18]
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 800712c:	e062      	b.n	80071f4 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
 800712e:	4937      	ldr	r1, [pc, #220]	; (800720c <u8x8_d_ssd1306_sh1106_generic+0x14c>)
 8007130:	68f8      	ldr	r0, [r7, #12]
 8007132:	f7ff ff2e 	bl	8006f92 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	7cda      	ldrb	r2, [r3, #19]
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 8007142:	e057      	b.n	80071f4 <u8x8_d_ssd1306_sh1106_generic+0x134>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8007144:	68f8      	ldr	r0, [r7, #12]
 8007146:	f7ff ff04 	bl	8006f52 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 800714a:	2181      	movs	r1, #129	; 0x81
 800714c:	68f8      	ldr	r0, [r7, #12]
 800714e:	f7ff fec9 	bl	8006ee4 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
 8007152:	7abb      	ldrb	r3, [r7, #10]
 8007154:	4619      	mov	r1, r3
 8007156:	68f8      	ldr	r0, [r7, #12]
 8007158:	f7ff fed6 	bl	8006f08 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 800715c:	68f8      	ldr	r0, [r7, #12]
 800715e:	f7ff ff08 	bl	8006f72 <u8x8_cad_EndTransfer>
      break;
 8007162:	e047      	b.n	80071f4 <u8x8_d_ssd1306_sh1106_generic+0x134>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8007164:	68f8      	ldr	r0, [r7, #12]
 8007166:	f7ff fef4 	bl	8006f52 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	795b      	ldrb	r3, [r3, #5]
 800716e:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 8007170:	7dfb      	ldrb	r3, [r7, #23]
 8007172:	00db      	lsls	r3, r3, #3
 8007174:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800717c:	7dfb      	ldrb	r3, [r7, #23]
 800717e:	4413      	add	r3, r2
 8007180:	75fb      	strb	r3, [r7, #23]
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 8007182:	2140      	movs	r1, #64	; 0x40
 8007184:	68f8      	ldr	r0, [r7, #12]
 8007186:	f7ff fead 	bl	8006ee4 <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 800718a:	7dfb      	ldrb	r3, [r7, #23]
 800718c:	091b      	lsrs	r3, r3, #4
 800718e:	b2db      	uxtb	r3, r3
 8007190:	f043 0310 	orr.w	r3, r3, #16
 8007194:	b2db      	uxtb	r3, r3
 8007196:	4619      	mov	r1, r3
 8007198:	68f8      	ldr	r0, [r7, #12]
 800719a:	f7ff fea3 	bl	8006ee4 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
 800719e:	7dfb      	ldrb	r3, [r7, #23]
 80071a0:	f003 030f 	and.w	r3, r3, #15
 80071a4:	b2db      	uxtb	r3, r3
 80071a6:	4619      	mov	r1, r3
 80071a8:	68f8      	ldr	r0, [r7, #12]
 80071aa:	f7ff fead 	bl	8006f08 <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	799b      	ldrb	r3, [r3, #6]
 80071b2:	f063 034f 	orn	r3, r3, #79	; 0x4f
 80071b6:	b2db      	uxtb	r3, r3
 80071b8:	4619      	mov	r1, r3
 80071ba:	68f8      	ldr	r0, [r7, #12]
 80071bc:	f7ff fea4 	bl	8006f08 <u8x8_cad_SendArg>

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	791b      	ldrb	r3, [r3, #4]
 80071c4:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 80071cc:	7dbb      	ldrb	r3, [r7, #22]
 80071ce:	00db      	lsls	r3, r3, #3
 80071d0:	b2db      	uxtb	r3, r3
 80071d2:	693a      	ldr	r2, [r7, #16]
 80071d4:	4619      	mov	r1, r3
 80071d6:	68f8      	ldr	r0, [r7, #12]
 80071d8:	f7ff fea8 	bl	8006f2c <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 80071dc:	7abb      	ldrb	r3, [r7, #10]
 80071de:	3b01      	subs	r3, #1
 80071e0:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 80071e2:	7abb      	ldrb	r3, [r7, #10]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d1eb      	bne.n	80071c0 <u8x8_d_ssd1306_sh1106_generic+0x100>
      
      u8x8_cad_EndTransfer(u8x8);
 80071e8:	68f8      	ldr	r0, [r7, #12]
 80071ea:	f7ff fec2 	bl	8006f72 <u8x8_cad_EndTransfer>
      break;
 80071ee:	e001      	b.n	80071f4 <u8x8_d_ssd1306_sh1106_generic+0x134>
    default:
      return 0;
 80071f0:	2300      	movs	r3, #0
 80071f2:	e000      	b.n	80071f6 <u8x8_d_ssd1306_sh1106_generic+0x136>
  }
  return 1;
 80071f4:	2301      	movs	r3, #1
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3718      	adds	r7, #24
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}
 80071fe:	bf00      	nop
 8007200:	0800ddf8 	.word	0x0800ddf8
 8007204:	0800de00 	.word	0x0800de00
 8007208:	0800de08 	.word	0x0800de08
 800720c:	0800de10 	.word	0x0800de10

08007210 <u8x8_d_ssd1306_128x64_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b084      	sub	sp, #16
 8007214:	af00      	add	r7, sp, #0
 8007216:	60f8      	str	r0, [r7, #12]
 8007218:	607b      	str	r3, [r7, #4]
 800721a:	460b      	mov	r3, r1
 800721c:	72fb      	strb	r3, [r7, #11]
 800721e:	4613      	mov	r3, r2
 8007220:	72bb      	strb	r3, [r7, #10]
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 8007222:	7aba      	ldrb	r2, [r7, #10]
 8007224:	7af9      	ldrb	r1, [r7, #11]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	68f8      	ldr	r0, [r7, #12]
 800722a:	f7ff ff49 	bl	80070c0 <u8x8_d_ssd1306_sh1106_generic>
 800722e:	4603      	mov	r3, r0
 8007230:	2b00      	cmp	r3, #0
 8007232:	d001      	beq.n	8007238 <u8x8_d_ssd1306_128x64_noname+0x28>
    return 1;
 8007234:	2301      	movs	r3, #1
 8007236:	e014      	b.n	8007262 <u8x8_d_ssd1306_128x64_noname+0x52>
  
  switch(msg)
 8007238:	7afb      	ldrb	r3, [r7, #11]
 800723a:	2b09      	cmp	r3, #9
 800723c:	d009      	beq.n	8007252 <u8x8_d_ssd1306_128x64_noname+0x42>
 800723e:	2b0a      	cmp	r3, #10
 8007240:	d10c      	bne.n	800725c <u8x8_d_ssd1306_128x64_noname+0x4c>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 8007242:	68f8      	ldr	r0, [r7, #12]
 8007244:	f000 f829 	bl	800729a <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
 8007248:	4908      	ldr	r1, [pc, #32]	; (800726c <u8x8_d_ssd1306_128x64_noname+0x5c>)
 800724a:	68f8      	ldr	r0, [r7, #12]
 800724c:	f7ff fea1 	bl	8006f92 <u8x8_cad_SendSequence>
      break;
 8007250:	e006      	b.n	8007260 <u8x8_d_ssd1306_128x64_noname+0x50>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
 8007252:	4907      	ldr	r1, [pc, #28]	; (8007270 <u8x8_d_ssd1306_128x64_noname+0x60>)
 8007254:	68f8      	ldr	r0, [r7, #12]
 8007256:	f000 f80d 	bl	8007274 <u8x8_d_helper_display_setup_memory>
      break;
 800725a:	e001      	b.n	8007260 <u8x8_d_ssd1306_128x64_noname+0x50>
    default:
      return 0;
 800725c:	2300      	movs	r3, #0
 800725e:	e000      	b.n	8007262 <u8x8_d_ssd1306_128x64_noname+0x52>
  }
  return 1;
 8007260:	2301      	movs	r3, #1
}
 8007262:	4618      	mov	r0, r3
 8007264:	3710      	adds	r7, #16
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}
 800726a:	bf00      	nop
 800726c:	0800ddc0 	.word	0x0800ddc0
 8007270:	0800de18 	.word	0x0800de18

08007274 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8007274:	b480      	push	{r7}
 8007276:	b083      	sub	sp, #12
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	683a      	ldr	r2, [r7, #0]
 8007282:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	7c9a      	ldrb	r2, [r3, #18]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8007290:	bf00      	nop
 8007292:	370c      	adds	r7, #12
 8007294:	46bd      	mov	sp, r7
 8007296:	bc80      	pop	{r7}
 8007298:	4770      	bx	lr

0800729a <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 800729a:	b590      	push	{r4, r7, lr}
 800729c:	b083      	sub	sp, #12
 800729e:	af00      	add	r7, sp, #0
 80072a0:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	695c      	ldr	r4, [r3, #20]
 80072a6:	2300      	movs	r3, #0
 80072a8:	2200      	movs	r2, #0
 80072aa:	2128      	movs	r1, #40	; 0x28
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	68dc      	ldr	r4, [r3, #12]
 80072b4:	2300      	movs	r3, #0
 80072b6:	2200      	movs	r2, #0
 80072b8:	2114      	movs	r1, #20
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 80072be:	2201      	movs	r2, #1
 80072c0:	214b      	movs	r1, #75	; 0x4b
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f000 f886 	bl	80073d4 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	791b      	ldrb	r3, [r3, #4]
 80072ce:	461a      	mov	r2, r3
 80072d0:	2129      	movs	r1, #41	; 0x29
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f000 f87e 	bl	80073d4 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 80072d8:	2200      	movs	r2, #0
 80072da:	214b      	movs	r1, #75	; 0x4b
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f000 f879 	bl	80073d4 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	791b      	ldrb	r3, [r3, #4]
 80072e8:	461a      	mov	r2, r3
 80072ea:	2129      	movs	r1, #41	; 0x29
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f000 f871 	bl	80073d4 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 80072f2:	2201      	movs	r2, #1
 80072f4:	214b      	movs	r1, #75	; 0x4b
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f000 f86c 	bl	80073d4 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	795b      	ldrb	r3, [r3, #5]
 8007302:	461a      	mov	r2, r3
 8007304:	2129      	movs	r1, #41	; 0x29
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f000 f864 	bl	80073d4 <u8x8_gpio_call>
}    
 800730c:	bf00      	nop
 800730e:	370c      	adds	r7, #12
 8007310:	46bd      	mov	sp, r7
 8007312:	bd90      	pop	{r4, r7, pc}

08007314 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8007314:	b590      	push	{r4, r7, lr}
 8007316:	b085      	sub	sp, #20
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	4608      	mov	r0, r1
 800731e:	4611      	mov	r1, r2
 8007320:	461a      	mov	r2, r3
 8007322:	4603      	mov	r3, r0
 8007324:	70fb      	strb	r3, [r7, #3]
 8007326:	460b      	mov	r3, r1
 8007328:	70bb      	strb	r3, [r7, #2]
 800732a:	4613      	mov	r3, r2
 800732c:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 800732e:	78fb      	ldrb	r3, [r7, #3]
 8007330:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8007332:	78bb      	ldrb	r3, [r7, #2]
 8007334:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8007336:	787b      	ldrb	r3, [r7, #1]
 8007338:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 800733a:	6a3b      	ldr	r3, [r7, #32]
 800733c:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	689c      	ldr	r4, [r3, #8]
 8007342:	f107 0308 	add.w	r3, r7, #8
 8007346:	2201      	movs	r2, #1
 8007348:	210f      	movs	r1, #15
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	47a0      	blx	r4
 800734e:	4603      	mov	r3, r0
}
 8007350:	4618      	mov	r0, r3
 8007352:	3714      	adds	r7, #20
 8007354:	46bd      	mov	sp, r7
 8007356:	bd90      	pop	{r4, r7, pc}

08007358 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8007358:	b590      	push	{r4, r7, lr}
 800735a:	b083      	sub	sp, #12
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	689c      	ldr	r4, [r3, #8]
 8007364:	2300      	movs	r3, #0
 8007366:	2200      	movs	r2, #0
 8007368:	2109      	movs	r1, #9
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	47a0      	blx	r4
}
 800736e:	bf00      	nop
 8007370:	370c      	adds	r7, #12
 8007372:	46bd      	mov	sp, r7
 8007374:	bd90      	pop	{r4, r7, pc}

08007376 <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8007376:	b590      	push	{r4, r7, lr}
 8007378:	b083      	sub	sp, #12
 800737a:	af00      	add	r7, sp, #0
 800737c:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	689c      	ldr	r4, [r3, #8]
 8007382:	2300      	movs	r3, #0
 8007384:	2200      	movs	r2, #0
 8007386:	210a      	movs	r1, #10
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	47a0      	blx	r4
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}
 800738c:	bf00      	nop
 800738e:	370c      	adds	r7, #12
 8007390:	46bd      	mov	sp, r7
 8007392:	bd90      	pop	{r4, r7, pc}

08007394 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8007394:	b590      	push	{r4, r7, lr}
 8007396:	b083      	sub	sp, #12
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	460b      	mov	r3, r1
 800739e:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	689c      	ldr	r4, [r3, #8]
 80073a4:	78fa      	ldrb	r2, [r7, #3]
 80073a6:	2300      	movs	r3, #0
 80073a8:	210b      	movs	r1, #11
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	47a0      	blx	r4
}
 80073ae:	bf00      	nop
 80073b0:	370c      	adds	r7, #12
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd90      	pop	{r4, r7, pc}

080073b6 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 80073b6:	b590      	push	{r4, r7, lr}
 80073b8:	b083      	sub	sp, #12
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	689c      	ldr	r4, [r3, #8]
 80073c2:	2300      	movs	r3, #0
 80073c4:	2200      	movs	r2, #0
 80073c6:	2110      	movs	r1, #16
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	47a0      	blx	r4
}
 80073cc:	bf00      	nop
 80073ce:	370c      	adds	r7, #12
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd90      	pop	{r4, r7, pc}

080073d4 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 80073d4:	b590      	push	{r4, r7, lr}
 80073d6:	b083      	sub	sp, #12
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	460b      	mov	r3, r1
 80073de:	70fb      	strb	r3, [r7, #3]
 80073e0:	4613      	mov	r3, r2
 80073e2:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	695c      	ldr	r4, [r3, #20]
 80073e8:	78ba      	ldrb	r2, [r7, #2]
 80073ea:	78f9      	ldrb	r1, [r7, #3]
 80073ec:	2300      	movs	r3, #0
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	47a0      	blx	r4
}
 80073f2:	bf00      	nop
 80073f4:	370c      	adds	r7, #12
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd90      	pop	{r4, r7, pc}

080073fa <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 80073fa:	b480      	push	{r7}
 80073fc:	b085      	sub	sp, #20
 80073fe:	af00      	add	r7, sp, #0
 8007400:	60f8      	str	r0, [r7, #12]
 8007402:	607b      	str	r3, [r7, #4]
 8007404:	460b      	mov	r3, r1
 8007406:	72fb      	strb	r3, [r7, #11]
 8007408:	4613      	mov	r3, r2
 800740a:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 800740c:	2300      	movs	r3, #0
}
 800740e:	4618      	mov	r0, r3
 8007410:	3714      	adds	r7, #20
 8007412:	46bd      	mov	sp, r7
 8007414:	bc80      	pop	{r7}
 8007416:	4770      	bx	lr

08007418 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8007418:	b480      	push	{r7}
 800741a:	b083      	sub	sp, #12
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2200      	movs	r2, #0
 8007424:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	4a11      	ldr	r2, [pc, #68]	; (8007470 <u8x8_SetupDefaults+0x58>)
 800742a:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	4a10      	ldr	r2, [pc, #64]	; (8007470 <u8x8_SetupDefaults+0x58>)
 8007430:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	4a0e      	ldr	r2, [pc, #56]	; (8007470 <u8x8_SetupDefaults+0x58>)
 8007436:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	4a0d      	ldr	r2, [pc, #52]	; (8007470 <u8x8_SetupDefaults+0x58>)
 800743c:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2200      	movs	r2, #0
 8007442:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2200      	movs	r2, #0
 800744a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2200      	movs	r2, #0
 8007452:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	22ff      	movs	r2, #255	; 0xff
 8007458:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	22ff      	movs	r2, #255	; 0xff
 8007460:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8007464:	bf00      	nop
 8007466:	370c      	adds	r7, #12
 8007468:	46bd      	mov	sp, r7
 800746a:	bc80      	pop	{r7}
 800746c:	4770      	bx	lr
 800746e:	bf00      	nop
 8007470:	080073fb 	.word	0x080073fb

08007474 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b084      	sub	sp, #16
 8007478:	af00      	add	r7, sp, #0
 800747a:	60f8      	str	r0, [r7, #12]
 800747c:	60b9      	str	r1, [r7, #8]
 800747e:	607a      	str	r2, [r7, #4]
 8007480:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8007482:	68f8      	ldr	r0, [r7, #12]
 8007484:	f7ff ffc8 	bl	8007418 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	68ba      	ldr	r2, [r7, #8]
 800748c:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	687a      	ldr	r2, [r7, #4]
 8007492:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	683a      	ldr	r2, [r7, #0]
 8007498:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	69ba      	ldr	r2, [r7, #24]
 800749e:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 80074a0:	68f8      	ldr	r0, [r7, #12]
 80074a2:	f7ff ff59 	bl	8007358 <u8x8_SetupMemory>
}
 80074a6:	bf00      	nop
 80074a8:	3710      	adds	r7, #16
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}

080074ae <atof>:
 80074ae:	2100      	movs	r1, #0
 80074b0:	f001 bd70 	b.w	8008f94 <strtod>

080074b4 <__errno>:
 80074b4:	4b01      	ldr	r3, [pc, #4]	; (80074bc <__errno+0x8>)
 80074b6:	6818      	ldr	r0, [r3, #0]
 80074b8:	4770      	bx	lr
 80074ba:	bf00      	nop
 80074bc:	2000000c 	.word	0x2000000c

080074c0 <__libc_init_array>:
 80074c0:	b570      	push	{r4, r5, r6, lr}
 80074c2:	2600      	movs	r6, #0
 80074c4:	4d0c      	ldr	r5, [pc, #48]	; (80074f8 <__libc_init_array+0x38>)
 80074c6:	4c0d      	ldr	r4, [pc, #52]	; (80074fc <__libc_init_array+0x3c>)
 80074c8:	1b64      	subs	r4, r4, r5
 80074ca:	10a4      	asrs	r4, r4, #2
 80074cc:	42a6      	cmp	r6, r4
 80074ce:	d109      	bne.n	80074e4 <__libc_init_array+0x24>
 80074d0:	f005 ff2c 	bl	800d32c <_init>
 80074d4:	2600      	movs	r6, #0
 80074d6:	4d0a      	ldr	r5, [pc, #40]	; (8007500 <__libc_init_array+0x40>)
 80074d8:	4c0a      	ldr	r4, [pc, #40]	; (8007504 <__libc_init_array+0x44>)
 80074da:	1b64      	subs	r4, r4, r5
 80074dc:	10a4      	asrs	r4, r4, #2
 80074de:	42a6      	cmp	r6, r4
 80074e0:	d105      	bne.n	80074ee <__libc_init_array+0x2e>
 80074e2:	bd70      	pop	{r4, r5, r6, pc}
 80074e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80074e8:	4798      	blx	r3
 80074ea:	3601      	adds	r6, #1
 80074ec:	e7ee      	b.n	80074cc <__libc_init_array+0xc>
 80074ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80074f2:	4798      	blx	r3
 80074f4:	3601      	adds	r6, #1
 80074f6:	e7f2      	b.n	80074de <__libc_init_array+0x1e>
 80074f8:	0800e4f0 	.word	0x0800e4f0
 80074fc:	0800e4f0 	.word	0x0800e4f0
 8007500:	0800e4f0 	.word	0x0800e4f0
 8007504:	0800e4f4 	.word	0x0800e4f4

08007508 <memcpy>:
 8007508:	440a      	add	r2, r1
 800750a:	4291      	cmp	r1, r2
 800750c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007510:	d100      	bne.n	8007514 <memcpy+0xc>
 8007512:	4770      	bx	lr
 8007514:	b510      	push	{r4, lr}
 8007516:	f811 4b01 	ldrb.w	r4, [r1], #1
 800751a:	4291      	cmp	r1, r2
 800751c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007520:	d1f9      	bne.n	8007516 <memcpy+0xe>
 8007522:	bd10      	pop	{r4, pc}

08007524 <memset>:
 8007524:	4603      	mov	r3, r0
 8007526:	4402      	add	r2, r0
 8007528:	4293      	cmp	r3, r2
 800752a:	d100      	bne.n	800752e <memset+0xa>
 800752c:	4770      	bx	lr
 800752e:	f803 1b01 	strb.w	r1, [r3], #1
 8007532:	e7f9      	b.n	8007528 <memset+0x4>

08007534 <__cvt>:
 8007534:	2b00      	cmp	r3, #0
 8007536:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800753a:	461f      	mov	r7, r3
 800753c:	bfbb      	ittet	lt
 800753e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8007542:	461f      	movlt	r7, r3
 8007544:	2300      	movge	r3, #0
 8007546:	232d      	movlt	r3, #45	; 0x2d
 8007548:	b088      	sub	sp, #32
 800754a:	4614      	mov	r4, r2
 800754c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800754e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007550:	7013      	strb	r3, [r2, #0]
 8007552:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007554:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8007558:	f023 0820 	bic.w	r8, r3, #32
 800755c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007560:	d005      	beq.n	800756e <__cvt+0x3a>
 8007562:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007566:	d100      	bne.n	800756a <__cvt+0x36>
 8007568:	3501      	adds	r5, #1
 800756a:	2302      	movs	r3, #2
 800756c:	e000      	b.n	8007570 <__cvt+0x3c>
 800756e:	2303      	movs	r3, #3
 8007570:	aa07      	add	r2, sp, #28
 8007572:	9204      	str	r2, [sp, #16]
 8007574:	aa06      	add	r2, sp, #24
 8007576:	e9cd a202 	strd	sl, r2, [sp, #8]
 800757a:	e9cd 3500 	strd	r3, r5, [sp]
 800757e:	4622      	mov	r2, r4
 8007580:	463b      	mov	r3, r7
 8007582:	f001 fedd 	bl	8009340 <_dtoa_r>
 8007586:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800758a:	4606      	mov	r6, r0
 800758c:	d102      	bne.n	8007594 <__cvt+0x60>
 800758e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007590:	07db      	lsls	r3, r3, #31
 8007592:	d522      	bpl.n	80075da <__cvt+0xa6>
 8007594:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007598:	eb06 0905 	add.w	r9, r6, r5
 800759c:	d110      	bne.n	80075c0 <__cvt+0x8c>
 800759e:	7833      	ldrb	r3, [r6, #0]
 80075a0:	2b30      	cmp	r3, #48	; 0x30
 80075a2:	d10a      	bne.n	80075ba <__cvt+0x86>
 80075a4:	2200      	movs	r2, #0
 80075a6:	2300      	movs	r3, #0
 80075a8:	4620      	mov	r0, r4
 80075aa:	4639      	mov	r1, r7
 80075ac:	f7f9 f9fc 	bl	80009a8 <__aeabi_dcmpeq>
 80075b0:	b918      	cbnz	r0, 80075ba <__cvt+0x86>
 80075b2:	f1c5 0501 	rsb	r5, r5, #1
 80075b6:	f8ca 5000 	str.w	r5, [sl]
 80075ba:	f8da 3000 	ldr.w	r3, [sl]
 80075be:	4499      	add	r9, r3
 80075c0:	2200      	movs	r2, #0
 80075c2:	2300      	movs	r3, #0
 80075c4:	4620      	mov	r0, r4
 80075c6:	4639      	mov	r1, r7
 80075c8:	f7f9 f9ee 	bl	80009a8 <__aeabi_dcmpeq>
 80075cc:	b108      	cbz	r0, 80075d2 <__cvt+0x9e>
 80075ce:	f8cd 901c 	str.w	r9, [sp, #28]
 80075d2:	2230      	movs	r2, #48	; 0x30
 80075d4:	9b07      	ldr	r3, [sp, #28]
 80075d6:	454b      	cmp	r3, r9
 80075d8:	d307      	bcc.n	80075ea <__cvt+0xb6>
 80075da:	4630      	mov	r0, r6
 80075dc:	9b07      	ldr	r3, [sp, #28]
 80075de:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80075e0:	1b9b      	subs	r3, r3, r6
 80075e2:	6013      	str	r3, [r2, #0]
 80075e4:	b008      	add	sp, #32
 80075e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075ea:	1c59      	adds	r1, r3, #1
 80075ec:	9107      	str	r1, [sp, #28]
 80075ee:	701a      	strb	r2, [r3, #0]
 80075f0:	e7f0      	b.n	80075d4 <__cvt+0xa0>

080075f2 <__exponent>:
 80075f2:	4603      	mov	r3, r0
 80075f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80075f6:	2900      	cmp	r1, #0
 80075f8:	f803 2b02 	strb.w	r2, [r3], #2
 80075fc:	bfb6      	itet	lt
 80075fe:	222d      	movlt	r2, #45	; 0x2d
 8007600:	222b      	movge	r2, #43	; 0x2b
 8007602:	4249      	neglt	r1, r1
 8007604:	2909      	cmp	r1, #9
 8007606:	7042      	strb	r2, [r0, #1]
 8007608:	dd2b      	ble.n	8007662 <__exponent+0x70>
 800760a:	f10d 0407 	add.w	r4, sp, #7
 800760e:	46a4      	mov	ip, r4
 8007610:	270a      	movs	r7, #10
 8007612:	fb91 f6f7 	sdiv	r6, r1, r7
 8007616:	460a      	mov	r2, r1
 8007618:	46a6      	mov	lr, r4
 800761a:	fb07 1516 	mls	r5, r7, r6, r1
 800761e:	2a63      	cmp	r2, #99	; 0x63
 8007620:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8007624:	4631      	mov	r1, r6
 8007626:	f104 34ff 	add.w	r4, r4, #4294967295
 800762a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800762e:	dcf0      	bgt.n	8007612 <__exponent+0x20>
 8007630:	3130      	adds	r1, #48	; 0x30
 8007632:	f1ae 0502 	sub.w	r5, lr, #2
 8007636:	f804 1c01 	strb.w	r1, [r4, #-1]
 800763a:	4629      	mov	r1, r5
 800763c:	1c44      	adds	r4, r0, #1
 800763e:	4561      	cmp	r1, ip
 8007640:	d30a      	bcc.n	8007658 <__exponent+0x66>
 8007642:	f10d 0209 	add.w	r2, sp, #9
 8007646:	eba2 020e 	sub.w	r2, r2, lr
 800764a:	4565      	cmp	r5, ip
 800764c:	bf88      	it	hi
 800764e:	2200      	movhi	r2, #0
 8007650:	4413      	add	r3, r2
 8007652:	1a18      	subs	r0, r3, r0
 8007654:	b003      	add	sp, #12
 8007656:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007658:	f811 2b01 	ldrb.w	r2, [r1], #1
 800765c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007660:	e7ed      	b.n	800763e <__exponent+0x4c>
 8007662:	2330      	movs	r3, #48	; 0x30
 8007664:	3130      	adds	r1, #48	; 0x30
 8007666:	7083      	strb	r3, [r0, #2]
 8007668:	70c1      	strb	r1, [r0, #3]
 800766a:	1d03      	adds	r3, r0, #4
 800766c:	e7f1      	b.n	8007652 <__exponent+0x60>
	...

08007670 <_printf_float>:
 8007670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007674:	b091      	sub	sp, #68	; 0x44
 8007676:	460c      	mov	r4, r1
 8007678:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800767c:	4616      	mov	r6, r2
 800767e:	461f      	mov	r7, r3
 8007680:	4605      	mov	r5, r0
 8007682:	f003 f965 	bl	800a950 <_localeconv_r>
 8007686:	6803      	ldr	r3, [r0, #0]
 8007688:	4618      	mov	r0, r3
 800768a:	9309      	str	r3, [sp, #36]	; 0x24
 800768c:	f7f8 fd60 	bl	8000150 <strlen>
 8007690:	2300      	movs	r3, #0
 8007692:	930e      	str	r3, [sp, #56]	; 0x38
 8007694:	f8d8 3000 	ldr.w	r3, [r8]
 8007698:	900a      	str	r0, [sp, #40]	; 0x28
 800769a:	3307      	adds	r3, #7
 800769c:	f023 0307 	bic.w	r3, r3, #7
 80076a0:	f103 0208 	add.w	r2, r3, #8
 80076a4:	f894 9018 	ldrb.w	r9, [r4, #24]
 80076a8:	f8d4 b000 	ldr.w	fp, [r4]
 80076ac:	f8c8 2000 	str.w	r2, [r8]
 80076b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076b4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80076b8:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80076bc:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80076c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80076c2:	f04f 32ff 	mov.w	r2, #4294967295
 80076c6:	4640      	mov	r0, r8
 80076c8:	4b9c      	ldr	r3, [pc, #624]	; (800793c <_printf_float+0x2cc>)
 80076ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80076cc:	f7f9 f99e 	bl	8000a0c <__aeabi_dcmpun>
 80076d0:	bb70      	cbnz	r0, 8007730 <_printf_float+0xc0>
 80076d2:	f04f 32ff 	mov.w	r2, #4294967295
 80076d6:	4640      	mov	r0, r8
 80076d8:	4b98      	ldr	r3, [pc, #608]	; (800793c <_printf_float+0x2cc>)
 80076da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80076dc:	f7f9 f978 	bl	80009d0 <__aeabi_dcmple>
 80076e0:	bb30      	cbnz	r0, 8007730 <_printf_float+0xc0>
 80076e2:	2200      	movs	r2, #0
 80076e4:	2300      	movs	r3, #0
 80076e6:	4640      	mov	r0, r8
 80076e8:	4651      	mov	r1, sl
 80076ea:	f7f9 f967 	bl	80009bc <__aeabi_dcmplt>
 80076ee:	b110      	cbz	r0, 80076f6 <_printf_float+0x86>
 80076f0:	232d      	movs	r3, #45	; 0x2d
 80076f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076f6:	4b92      	ldr	r3, [pc, #584]	; (8007940 <_printf_float+0x2d0>)
 80076f8:	4892      	ldr	r0, [pc, #584]	; (8007944 <_printf_float+0x2d4>)
 80076fa:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80076fe:	bf94      	ite	ls
 8007700:	4698      	movls	r8, r3
 8007702:	4680      	movhi	r8, r0
 8007704:	2303      	movs	r3, #3
 8007706:	f04f 0a00 	mov.w	sl, #0
 800770a:	6123      	str	r3, [r4, #16]
 800770c:	f02b 0304 	bic.w	r3, fp, #4
 8007710:	6023      	str	r3, [r4, #0]
 8007712:	4633      	mov	r3, r6
 8007714:	4621      	mov	r1, r4
 8007716:	4628      	mov	r0, r5
 8007718:	9700      	str	r7, [sp, #0]
 800771a:	aa0f      	add	r2, sp, #60	; 0x3c
 800771c:	f000 f9d4 	bl	8007ac8 <_printf_common>
 8007720:	3001      	adds	r0, #1
 8007722:	f040 8090 	bne.w	8007846 <_printf_float+0x1d6>
 8007726:	f04f 30ff 	mov.w	r0, #4294967295
 800772a:	b011      	add	sp, #68	; 0x44
 800772c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007730:	4642      	mov	r2, r8
 8007732:	4653      	mov	r3, sl
 8007734:	4640      	mov	r0, r8
 8007736:	4651      	mov	r1, sl
 8007738:	f7f9 f968 	bl	8000a0c <__aeabi_dcmpun>
 800773c:	b148      	cbz	r0, 8007752 <_printf_float+0xe2>
 800773e:	f1ba 0f00 	cmp.w	sl, #0
 8007742:	bfb8      	it	lt
 8007744:	232d      	movlt	r3, #45	; 0x2d
 8007746:	4880      	ldr	r0, [pc, #512]	; (8007948 <_printf_float+0x2d8>)
 8007748:	bfb8      	it	lt
 800774a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800774e:	4b7f      	ldr	r3, [pc, #508]	; (800794c <_printf_float+0x2dc>)
 8007750:	e7d3      	b.n	80076fa <_printf_float+0x8a>
 8007752:	6863      	ldr	r3, [r4, #4]
 8007754:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007758:	1c5a      	adds	r2, r3, #1
 800775a:	d142      	bne.n	80077e2 <_printf_float+0x172>
 800775c:	2306      	movs	r3, #6
 800775e:	6063      	str	r3, [r4, #4]
 8007760:	2200      	movs	r2, #0
 8007762:	9206      	str	r2, [sp, #24]
 8007764:	aa0e      	add	r2, sp, #56	; 0x38
 8007766:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800776a:	aa0d      	add	r2, sp, #52	; 0x34
 800776c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8007770:	9203      	str	r2, [sp, #12]
 8007772:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8007776:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800777a:	6023      	str	r3, [r4, #0]
 800777c:	6863      	ldr	r3, [r4, #4]
 800777e:	4642      	mov	r2, r8
 8007780:	9300      	str	r3, [sp, #0]
 8007782:	4628      	mov	r0, r5
 8007784:	4653      	mov	r3, sl
 8007786:	910b      	str	r1, [sp, #44]	; 0x2c
 8007788:	f7ff fed4 	bl	8007534 <__cvt>
 800778c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800778e:	4680      	mov	r8, r0
 8007790:	2947      	cmp	r1, #71	; 0x47
 8007792:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007794:	d108      	bne.n	80077a8 <_printf_float+0x138>
 8007796:	1cc8      	adds	r0, r1, #3
 8007798:	db02      	blt.n	80077a0 <_printf_float+0x130>
 800779a:	6863      	ldr	r3, [r4, #4]
 800779c:	4299      	cmp	r1, r3
 800779e:	dd40      	ble.n	8007822 <_printf_float+0x1b2>
 80077a0:	f1a9 0902 	sub.w	r9, r9, #2
 80077a4:	fa5f f989 	uxtb.w	r9, r9
 80077a8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80077ac:	d81f      	bhi.n	80077ee <_printf_float+0x17e>
 80077ae:	464a      	mov	r2, r9
 80077b0:	3901      	subs	r1, #1
 80077b2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80077b6:	910d      	str	r1, [sp, #52]	; 0x34
 80077b8:	f7ff ff1b 	bl	80075f2 <__exponent>
 80077bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80077be:	4682      	mov	sl, r0
 80077c0:	1813      	adds	r3, r2, r0
 80077c2:	2a01      	cmp	r2, #1
 80077c4:	6123      	str	r3, [r4, #16]
 80077c6:	dc02      	bgt.n	80077ce <_printf_float+0x15e>
 80077c8:	6822      	ldr	r2, [r4, #0]
 80077ca:	07d2      	lsls	r2, r2, #31
 80077cc:	d501      	bpl.n	80077d2 <_printf_float+0x162>
 80077ce:	3301      	adds	r3, #1
 80077d0:	6123      	str	r3, [r4, #16]
 80077d2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d09b      	beq.n	8007712 <_printf_float+0xa2>
 80077da:	232d      	movs	r3, #45	; 0x2d
 80077dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077e0:	e797      	b.n	8007712 <_printf_float+0xa2>
 80077e2:	2947      	cmp	r1, #71	; 0x47
 80077e4:	d1bc      	bne.n	8007760 <_printf_float+0xf0>
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d1ba      	bne.n	8007760 <_printf_float+0xf0>
 80077ea:	2301      	movs	r3, #1
 80077ec:	e7b7      	b.n	800775e <_printf_float+0xee>
 80077ee:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80077f2:	d118      	bne.n	8007826 <_printf_float+0x1b6>
 80077f4:	2900      	cmp	r1, #0
 80077f6:	6863      	ldr	r3, [r4, #4]
 80077f8:	dd0b      	ble.n	8007812 <_printf_float+0x1a2>
 80077fa:	6121      	str	r1, [r4, #16]
 80077fc:	b913      	cbnz	r3, 8007804 <_printf_float+0x194>
 80077fe:	6822      	ldr	r2, [r4, #0]
 8007800:	07d0      	lsls	r0, r2, #31
 8007802:	d502      	bpl.n	800780a <_printf_float+0x19a>
 8007804:	3301      	adds	r3, #1
 8007806:	440b      	add	r3, r1
 8007808:	6123      	str	r3, [r4, #16]
 800780a:	f04f 0a00 	mov.w	sl, #0
 800780e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007810:	e7df      	b.n	80077d2 <_printf_float+0x162>
 8007812:	b913      	cbnz	r3, 800781a <_printf_float+0x1aa>
 8007814:	6822      	ldr	r2, [r4, #0]
 8007816:	07d2      	lsls	r2, r2, #31
 8007818:	d501      	bpl.n	800781e <_printf_float+0x1ae>
 800781a:	3302      	adds	r3, #2
 800781c:	e7f4      	b.n	8007808 <_printf_float+0x198>
 800781e:	2301      	movs	r3, #1
 8007820:	e7f2      	b.n	8007808 <_printf_float+0x198>
 8007822:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007826:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007828:	4299      	cmp	r1, r3
 800782a:	db05      	blt.n	8007838 <_printf_float+0x1c8>
 800782c:	6823      	ldr	r3, [r4, #0]
 800782e:	6121      	str	r1, [r4, #16]
 8007830:	07d8      	lsls	r0, r3, #31
 8007832:	d5ea      	bpl.n	800780a <_printf_float+0x19a>
 8007834:	1c4b      	adds	r3, r1, #1
 8007836:	e7e7      	b.n	8007808 <_printf_float+0x198>
 8007838:	2900      	cmp	r1, #0
 800783a:	bfcc      	ite	gt
 800783c:	2201      	movgt	r2, #1
 800783e:	f1c1 0202 	rsble	r2, r1, #2
 8007842:	4413      	add	r3, r2
 8007844:	e7e0      	b.n	8007808 <_printf_float+0x198>
 8007846:	6823      	ldr	r3, [r4, #0]
 8007848:	055a      	lsls	r2, r3, #21
 800784a:	d407      	bmi.n	800785c <_printf_float+0x1ec>
 800784c:	6923      	ldr	r3, [r4, #16]
 800784e:	4642      	mov	r2, r8
 8007850:	4631      	mov	r1, r6
 8007852:	4628      	mov	r0, r5
 8007854:	47b8      	blx	r7
 8007856:	3001      	adds	r0, #1
 8007858:	d12b      	bne.n	80078b2 <_printf_float+0x242>
 800785a:	e764      	b.n	8007726 <_printf_float+0xb6>
 800785c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007860:	f240 80dd 	bls.w	8007a1e <_printf_float+0x3ae>
 8007864:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007868:	2200      	movs	r2, #0
 800786a:	2300      	movs	r3, #0
 800786c:	f7f9 f89c 	bl	80009a8 <__aeabi_dcmpeq>
 8007870:	2800      	cmp	r0, #0
 8007872:	d033      	beq.n	80078dc <_printf_float+0x26c>
 8007874:	2301      	movs	r3, #1
 8007876:	4631      	mov	r1, r6
 8007878:	4628      	mov	r0, r5
 800787a:	4a35      	ldr	r2, [pc, #212]	; (8007950 <_printf_float+0x2e0>)
 800787c:	47b8      	blx	r7
 800787e:	3001      	adds	r0, #1
 8007880:	f43f af51 	beq.w	8007726 <_printf_float+0xb6>
 8007884:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007888:	429a      	cmp	r2, r3
 800788a:	db02      	blt.n	8007892 <_printf_float+0x222>
 800788c:	6823      	ldr	r3, [r4, #0]
 800788e:	07d8      	lsls	r0, r3, #31
 8007890:	d50f      	bpl.n	80078b2 <_printf_float+0x242>
 8007892:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007896:	4631      	mov	r1, r6
 8007898:	4628      	mov	r0, r5
 800789a:	47b8      	blx	r7
 800789c:	3001      	adds	r0, #1
 800789e:	f43f af42 	beq.w	8007726 <_printf_float+0xb6>
 80078a2:	f04f 0800 	mov.w	r8, #0
 80078a6:	f104 091a 	add.w	r9, r4, #26
 80078aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80078ac:	3b01      	subs	r3, #1
 80078ae:	4543      	cmp	r3, r8
 80078b0:	dc09      	bgt.n	80078c6 <_printf_float+0x256>
 80078b2:	6823      	ldr	r3, [r4, #0]
 80078b4:	079b      	lsls	r3, r3, #30
 80078b6:	f100 8102 	bmi.w	8007abe <_printf_float+0x44e>
 80078ba:	68e0      	ldr	r0, [r4, #12]
 80078bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80078be:	4298      	cmp	r0, r3
 80078c0:	bfb8      	it	lt
 80078c2:	4618      	movlt	r0, r3
 80078c4:	e731      	b.n	800772a <_printf_float+0xba>
 80078c6:	2301      	movs	r3, #1
 80078c8:	464a      	mov	r2, r9
 80078ca:	4631      	mov	r1, r6
 80078cc:	4628      	mov	r0, r5
 80078ce:	47b8      	blx	r7
 80078d0:	3001      	adds	r0, #1
 80078d2:	f43f af28 	beq.w	8007726 <_printf_float+0xb6>
 80078d6:	f108 0801 	add.w	r8, r8, #1
 80078da:	e7e6      	b.n	80078aa <_printf_float+0x23a>
 80078dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078de:	2b00      	cmp	r3, #0
 80078e0:	dc38      	bgt.n	8007954 <_printf_float+0x2e4>
 80078e2:	2301      	movs	r3, #1
 80078e4:	4631      	mov	r1, r6
 80078e6:	4628      	mov	r0, r5
 80078e8:	4a19      	ldr	r2, [pc, #100]	; (8007950 <_printf_float+0x2e0>)
 80078ea:	47b8      	blx	r7
 80078ec:	3001      	adds	r0, #1
 80078ee:	f43f af1a 	beq.w	8007726 <_printf_float+0xb6>
 80078f2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80078f6:	4313      	orrs	r3, r2
 80078f8:	d102      	bne.n	8007900 <_printf_float+0x290>
 80078fa:	6823      	ldr	r3, [r4, #0]
 80078fc:	07d9      	lsls	r1, r3, #31
 80078fe:	d5d8      	bpl.n	80078b2 <_printf_float+0x242>
 8007900:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007904:	4631      	mov	r1, r6
 8007906:	4628      	mov	r0, r5
 8007908:	47b8      	blx	r7
 800790a:	3001      	adds	r0, #1
 800790c:	f43f af0b 	beq.w	8007726 <_printf_float+0xb6>
 8007910:	f04f 0900 	mov.w	r9, #0
 8007914:	f104 0a1a 	add.w	sl, r4, #26
 8007918:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800791a:	425b      	negs	r3, r3
 800791c:	454b      	cmp	r3, r9
 800791e:	dc01      	bgt.n	8007924 <_printf_float+0x2b4>
 8007920:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007922:	e794      	b.n	800784e <_printf_float+0x1de>
 8007924:	2301      	movs	r3, #1
 8007926:	4652      	mov	r2, sl
 8007928:	4631      	mov	r1, r6
 800792a:	4628      	mov	r0, r5
 800792c:	47b8      	blx	r7
 800792e:	3001      	adds	r0, #1
 8007930:	f43f aef9 	beq.w	8007726 <_printf_float+0xb6>
 8007934:	f109 0901 	add.w	r9, r9, #1
 8007938:	e7ee      	b.n	8007918 <_printf_float+0x2a8>
 800793a:	bf00      	nop
 800793c:	7fefffff 	.word	0x7fefffff
 8007940:	0800de34 	.word	0x0800de34
 8007944:	0800de38 	.word	0x0800de38
 8007948:	0800de40 	.word	0x0800de40
 800794c:	0800de3c 	.word	0x0800de3c
 8007950:	0800de44 	.word	0x0800de44
 8007954:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007956:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007958:	429a      	cmp	r2, r3
 800795a:	bfa8      	it	ge
 800795c:	461a      	movge	r2, r3
 800795e:	2a00      	cmp	r2, #0
 8007960:	4691      	mov	r9, r2
 8007962:	dc37      	bgt.n	80079d4 <_printf_float+0x364>
 8007964:	f04f 0b00 	mov.w	fp, #0
 8007968:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800796c:	f104 021a 	add.w	r2, r4, #26
 8007970:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007974:	ebaa 0309 	sub.w	r3, sl, r9
 8007978:	455b      	cmp	r3, fp
 800797a:	dc33      	bgt.n	80079e4 <_printf_float+0x374>
 800797c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007980:	429a      	cmp	r2, r3
 8007982:	db3b      	blt.n	80079fc <_printf_float+0x38c>
 8007984:	6823      	ldr	r3, [r4, #0]
 8007986:	07da      	lsls	r2, r3, #31
 8007988:	d438      	bmi.n	80079fc <_printf_float+0x38c>
 800798a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800798c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800798e:	eba3 020a 	sub.w	r2, r3, sl
 8007992:	eba3 0901 	sub.w	r9, r3, r1
 8007996:	4591      	cmp	r9, r2
 8007998:	bfa8      	it	ge
 800799a:	4691      	movge	r9, r2
 800799c:	f1b9 0f00 	cmp.w	r9, #0
 80079a0:	dc34      	bgt.n	8007a0c <_printf_float+0x39c>
 80079a2:	f04f 0800 	mov.w	r8, #0
 80079a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80079aa:	f104 0a1a 	add.w	sl, r4, #26
 80079ae:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80079b2:	1a9b      	subs	r3, r3, r2
 80079b4:	eba3 0309 	sub.w	r3, r3, r9
 80079b8:	4543      	cmp	r3, r8
 80079ba:	f77f af7a 	ble.w	80078b2 <_printf_float+0x242>
 80079be:	2301      	movs	r3, #1
 80079c0:	4652      	mov	r2, sl
 80079c2:	4631      	mov	r1, r6
 80079c4:	4628      	mov	r0, r5
 80079c6:	47b8      	blx	r7
 80079c8:	3001      	adds	r0, #1
 80079ca:	f43f aeac 	beq.w	8007726 <_printf_float+0xb6>
 80079ce:	f108 0801 	add.w	r8, r8, #1
 80079d2:	e7ec      	b.n	80079ae <_printf_float+0x33e>
 80079d4:	4613      	mov	r3, r2
 80079d6:	4631      	mov	r1, r6
 80079d8:	4642      	mov	r2, r8
 80079da:	4628      	mov	r0, r5
 80079dc:	47b8      	blx	r7
 80079de:	3001      	adds	r0, #1
 80079e0:	d1c0      	bne.n	8007964 <_printf_float+0x2f4>
 80079e2:	e6a0      	b.n	8007726 <_printf_float+0xb6>
 80079e4:	2301      	movs	r3, #1
 80079e6:	4631      	mov	r1, r6
 80079e8:	4628      	mov	r0, r5
 80079ea:	920b      	str	r2, [sp, #44]	; 0x2c
 80079ec:	47b8      	blx	r7
 80079ee:	3001      	adds	r0, #1
 80079f0:	f43f ae99 	beq.w	8007726 <_printf_float+0xb6>
 80079f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80079f6:	f10b 0b01 	add.w	fp, fp, #1
 80079fa:	e7b9      	b.n	8007970 <_printf_float+0x300>
 80079fc:	4631      	mov	r1, r6
 80079fe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a02:	4628      	mov	r0, r5
 8007a04:	47b8      	blx	r7
 8007a06:	3001      	adds	r0, #1
 8007a08:	d1bf      	bne.n	800798a <_printf_float+0x31a>
 8007a0a:	e68c      	b.n	8007726 <_printf_float+0xb6>
 8007a0c:	464b      	mov	r3, r9
 8007a0e:	4631      	mov	r1, r6
 8007a10:	4628      	mov	r0, r5
 8007a12:	eb08 020a 	add.w	r2, r8, sl
 8007a16:	47b8      	blx	r7
 8007a18:	3001      	adds	r0, #1
 8007a1a:	d1c2      	bne.n	80079a2 <_printf_float+0x332>
 8007a1c:	e683      	b.n	8007726 <_printf_float+0xb6>
 8007a1e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007a20:	2a01      	cmp	r2, #1
 8007a22:	dc01      	bgt.n	8007a28 <_printf_float+0x3b8>
 8007a24:	07db      	lsls	r3, r3, #31
 8007a26:	d537      	bpl.n	8007a98 <_printf_float+0x428>
 8007a28:	2301      	movs	r3, #1
 8007a2a:	4642      	mov	r2, r8
 8007a2c:	4631      	mov	r1, r6
 8007a2e:	4628      	mov	r0, r5
 8007a30:	47b8      	blx	r7
 8007a32:	3001      	adds	r0, #1
 8007a34:	f43f ae77 	beq.w	8007726 <_printf_float+0xb6>
 8007a38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a3c:	4631      	mov	r1, r6
 8007a3e:	4628      	mov	r0, r5
 8007a40:	47b8      	blx	r7
 8007a42:	3001      	adds	r0, #1
 8007a44:	f43f ae6f 	beq.w	8007726 <_printf_float+0xb6>
 8007a48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	2300      	movs	r3, #0
 8007a50:	f7f8 ffaa 	bl	80009a8 <__aeabi_dcmpeq>
 8007a54:	b9d8      	cbnz	r0, 8007a8e <_printf_float+0x41e>
 8007a56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a58:	f108 0201 	add.w	r2, r8, #1
 8007a5c:	3b01      	subs	r3, #1
 8007a5e:	4631      	mov	r1, r6
 8007a60:	4628      	mov	r0, r5
 8007a62:	47b8      	blx	r7
 8007a64:	3001      	adds	r0, #1
 8007a66:	d10e      	bne.n	8007a86 <_printf_float+0x416>
 8007a68:	e65d      	b.n	8007726 <_printf_float+0xb6>
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	464a      	mov	r2, r9
 8007a6e:	4631      	mov	r1, r6
 8007a70:	4628      	mov	r0, r5
 8007a72:	47b8      	blx	r7
 8007a74:	3001      	adds	r0, #1
 8007a76:	f43f ae56 	beq.w	8007726 <_printf_float+0xb6>
 8007a7a:	f108 0801 	add.w	r8, r8, #1
 8007a7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a80:	3b01      	subs	r3, #1
 8007a82:	4543      	cmp	r3, r8
 8007a84:	dcf1      	bgt.n	8007a6a <_printf_float+0x3fa>
 8007a86:	4653      	mov	r3, sl
 8007a88:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007a8c:	e6e0      	b.n	8007850 <_printf_float+0x1e0>
 8007a8e:	f04f 0800 	mov.w	r8, #0
 8007a92:	f104 091a 	add.w	r9, r4, #26
 8007a96:	e7f2      	b.n	8007a7e <_printf_float+0x40e>
 8007a98:	2301      	movs	r3, #1
 8007a9a:	4642      	mov	r2, r8
 8007a9c:	e7df      	b.n	8007a5e <_printf_float+0x3ee>
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	464a      	mov	r2, r9
 8007aa2:	4631      	mov	r1, r6
 8007aa4:	4628      	mov	r0, r5
 8007aa6:	47b8      	blx	r7
 8007aa8:	3001      	adds	r0, #1
 8007aaa:	f43f ae3c 	beq.w	8007726 <_printf_float+0xb6>
 8007aae:	f108 0801 	add.w	r8, r8, #1
 8007ab2:	68e3      	ldr	r3, [r4, #12]
 8007ab4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007ab6:	1a5b      	subs	r3, r3, r1
 8007ab8:	4543      	cmp	r3, r8
 8007aba:	dcf0      	bgt.n	8007a9e <_printf_float+0x42e>
 8007abc:	e6fd      	b.n	80078ba <_printf_float+0x24a>
 8007abe:	f04f 0800 	mov.w	r8, #0
 8007ac2:	f104 0919 	add.w	r9, r4, #25
 8007ac6:	e7f4      	b.n	8007ab2 <_printf_float+0x442>

08007ac8 <_printf_common>:
 8007ac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007acc:	4616      	mov	r6, r2
 8007ace:	4699      	mov	r9, r3
 8007ad0:	688a      	ldr	r2, [r1, #8]
 8007ad2:	690b      	ldr	r3, [r1, #16]
 8007ad4:	4607      	mov	r7, r0
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	bfb8      	it	lt
 8007ada:	4613      	movlt	r3, r2
 8007adc:	6033      	str	r3, [r6, #0]
 8007ade:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007ae2:	460c      	mov	r4, r1
 8007ae4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007ae8:	b10a      	cbz	r2, 8007aee <_printf_common+0x26>
 8007aea:	3301      	adds	r3, #1
 8007aec:	6033      	str	r3, [r6, #0]
 8007aee:	6823      	ldr	r3, [r4, #0]
 8007af0:	0699      	lsls	r1, r3, #26
 8007af2:	bf42      	ittt	mi
 8007af4:	6833      	ldrmi	r3, [r6, #0]
 8007af6:	3302      	addmi	r3, #2
 8007af8:	6033      	strmi	r3, [r6, #0]
 8007afa:	6825      	ldr	r5, [r4, #0]
 8007afc:	f015 0506 	ands.w	r5, r5, #6
 8007b00:	d106      	bne.n	8007b10 <_printf_common+0x48>
 8007b02:	f104 0a19 	add.w	sl, r4, #25
 8007b06:	68e3      	ldr	r3, [r4, #12]
 8007b08:	6832      	ldr	r2, [r6, #0]
 8007b0a:	1a9b      	subs	r3, r3, r2
 8007b0c:	42ab      	cmp	r3, r5
 8007b0e:	dc28      	bgt.n	8007b62 <_printf_common+0x9a>
 8007b10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007b14:	1e13      	subs	r3, r2, #0
 8007b16:	6822      	ldr	r2, [r4, #0]
 8007b18:	bf18      	it	ne
 8007b1a:	2301      	movne	r3, #1
 8007b1c:	0692      	lsls	r2, r2, #26
 8007b1e:	d42d      	bmi.n	8007b7c <_printf_common+0xb4>
 8007b20:	4649      	mov	r1, r9
 8007b22:	4638      	mov	r0, r7
 8007b24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b28:	47c0      	blx	r8
 8007b2a:	3001      	adds	r0, #1
 8007b2c:	d020      	beq.n	8007b70 <_printf_common+0xa8>
 8007b2e:	6823      	ldr	r3, [r4, #0]
 8007b30:	68e5      	ldr	r5, [r4, #12]
 8007b32:	f003 0306 	and.w	r3, r3, #6
 8007b36:	2b04      	cmp	r3, #4
 8007b38:	bf18      	it	ne
 8007b3a:	2500      	movne	r5, #0
 8007b3c:	6832      	ldr	r2, [r6, #0]
 8007b3e:	f04f 0600 	mov.w	r6, #0
 8007b42:	68a3      	ldr	r3, [r4, #8]
 8007b44:	bf08      	it	eq
 8007b46:	1aad      	subeq	r5, r5, r2
 8007b48:	6922      	ldr	r2, [r4, #16]
 8007b4a:	bf08      	it	eq
 8007b4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b50:	4293      	cmp	r3, r2
 8007b52:	bfc4      	itt	gt
 8007b54:	1a9b      	subgt	r3, r3, r2
 8007b56:	18ed      	addgt	r5, r5, r3
 8007b58:	341a      	adds	r4, #26
 8007b5a:	42b5      	cmp	r5, r6
 8007b5c:	d11a      	bne.n	8007b94 <_printf_common+0xcc>
 8007b5e:	2000      	movs	r0, #0
 8007b60:	e008      	b.n	8007b74 <_printf_common+0xac>
 8007b62:	2301      	movs	r3, #1
 8007b64:	4652      	mov	r2, sl
 8007b66:	4649      	mov	r1, r9
 8007b68:	4638      	mov	r0, r7
 8007b6a:	47c0      	blx	r8
 8007b6c:	3001      	adds	r0, #1
 8007b6e:	d103      	bne.n	8007b78 <_printf_common+0xb0>
 8007b70:	f04f 30ff 	mov.w	r0, #4294967295
 8007b74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b78:	3501      	adds	r5, #1
 8007b7a:	e7c4      	b.n	8007b06 <_printf_common+0x3e>
 8007b7c:	2030      	movs	r0, #48	; 0x30
 8007b7e:	18e1      	adds	r1, r4, r3
 8007b80:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007b84:	1c5a      	adds	r2, r3, #1
 8007b86:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007b8a:	4422      	add	r2, r4
 8007b8c:	3302      	adds	r3, #2
 8007b8e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007b92:	e7c5      	b.n	8007b20 <_printf_common+0x58>
 8007b94:	2301      	movs	r3, #1
 8007b96:	4622      	mov	r2, r4
 8007b98:	4649      	mov	r1, r9
 8007b9a:	4638      	mov	r0, r7
 8007b9c:	47c0      	blx	r8
 8007b9e:	3001      	adds	r0, #1
 8007ba0:	d0e6      	beq.n	8007b70 <_printf_common+0xa8>
 8007ba2:	3601      	adds	r6, #1
 8007ba4:	e7d9      	b.n	8007b5a <_printf_common+0x92>
	...

08007ba8 <_printf_i>:
 8007ba8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007bac:	7e0f      	ldrb	r7, [r1, #24]
 8007bae:	4691      	mov	r9, r2
 8007bb0:	2f78      	cmp	r7, #120	; 0x78
 8007bb2:	4680      	mov	r8, r0
 8007bb4:	460c      	mov	r4, r1
 8007bb6:	469a      	mov	sl, r3
 8007bb8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007bba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007bbe:	d807      	bhi.n	8007bd0 <_printf_i+0x28>
 8007bc0:	2f62      	cmp	r7, #98	; 0x62
 8007bc2:	d80a      	bhi.n	8007bda <_printf_i+0x32>
 8007bc4:	2f00      	cmp	r7, #0
 8007bc6:	f000 80d9 	beq.w	8007d7c <_printf_i+0x1d4>
 8007bca:	2f58      	cmp	r7, #88	; 0x58
 8007bcc:	f000 80a4 	beq.w	8007d18 <_printf_i+0x170>
 8007bd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007bd4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007bd8:	e03a      	b.n	8007c50 <_printf_i+0xa8>
 8007bda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007bde:	2b15      	cmp	r3, #21
 8007be0:	d8f6      	bhi.n	8007bd0 <_printf_i+0x28>
 8007be2:	a101      	add	r1, pc, #4	; (adr r1, 8007be8 <_printf_i+0x40>)
 8007be4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007be8:	08007c41 	.word	0x08007c41
 8007bec:	08007c55 	.word	0x08007c55
 8007bf0:	08007bd1 	.word	0x08007bd1
 8007bf4:	08007bd1 	.word	0x08007bd1
 8007bf8:	08007bd1 	.word	0x08007bd1
 8007bfc:	08007bd1 	.word	0x08007bd1
 8007c00:	08007c55 	.word	0x08007c55
 8007c04:	08007bd1 	.word	0x08007bd1
 8007c08:	08007bd1 	.word	0x08007bd1
 8007c0c:	08007bd1 	.word	0x08007bd1
 8007c10:	08007bd1 	.word	0x08007bd1
 8007c14:	08007d63 	.word	0x08007d63
 8007c18:	08007c85 	.word	0x08007c85
 8007c1c:	08007d45 	.word	0x08007d45
 8007c20:	08007bd1 	.word	0x08007bd1
 8007c24:	08007bd1 	.word	0x08007bd1
 8007c28:	08007d85 	.word	0x08007d85
 8007c2c:	08007bd1 	.word	0x08007bd1
 8007c30:	08007c85 	.word	0x08007c85
 8007c34:	08007bd1 	.word	0x08007bd1
 8007c38:	08007bd1 	.word	0x08007bd1
 8007c3c:	08007d4d 	.word	0x08007d4d
 8007c40:	682b      	ldr	r3, [r5, #0]
 8007c42:	1d1a      	adds	r2, r3, #4
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	602a      	str	r2, [r5, #0]
 8007c48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c50:	2301      	movs	r3, #1
 8007c52:	e0a4      	b.n	8007d9e <_printf_i+0x1f6>
 8007c54:	6820      	ldr	r0, [r4, #0]
 8007c56:	6829      	ldr	r1, [r5, #0]
 8007c58:	0606      	lsls	r6, r0, #24
 8007c5a:	f101 0304 	add.w	r3, r1, #4
 8007c5e:	d50a      	bpl.n	8007c76 <_printf_i+0xce>
 8007c60:	680e      	ldr	r6, [r1, #0]
 8007c62:	602b      	str	r3, [r5, #0]
 8007c64:	2e00      	cmp	r6, #0
 8007c66:	da03      	bge.n	8007c70 <_printf_i+0xc8>
 8007c68:	232d      	movs	r3, #45	; 0x2d
 8007c6a:	4276      	negs	r6, r6
 8007c6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c70:	230a      	movs	r3, #10
 8007c72:	485e      	ldr	r0, [pc, #376]	; (8007dec <_printf_i+0x244>)
 8007c74:	e019      	b.n	8007caa <_printf_i+0x102>
 8007c76:	680e      	ldr	r6, [r1, #0]
 8007c78:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007c7c:	602b      	str	r3, [r5, #0]
 8007c7e:	bf18      	it	ne
 8007c80:	b236      	sxthne	r6, r6
 8007c82:	e7ef      	b.n	8007c64 <_printf_i+0xbc>
 8007c84:	682b      	ldr	r3, [r5, #0]
 8007c86:	6820      	ldr	r0, [r4, #0]
 8007c88:	1d19      	adds	r1, r3, #4
 8007c8a:	6029      	str	r1, [r5, #0]
 8007c8c:	0601      	lsls	r1, r0, #24
 8007c8e:	d501      	bpl.n	8007c94 <_printf_i+0xec>
 8007c90:	681e      	ldr	r6, [r3, #0]
 8007c92:	e002      	b.n	8007c9a <_printf_i+0xf2>
 8007c94:	0646      	lsls	r6, r0, #25
 8007c96:	d5fb      	bpl.n	8007c90 <_printf_i+0xe8>
 8007c98:	881e      	ldrh	r6, [r3, #0]
 8007c9a:	2f6f      	cmp	r7, #111	; 0x6f
 8007c9c:	bf0c      	ite	eq
 8007c9e:	2308      	moveq	r3, #8
 8007ca0:	230a      	movne	r3, #10
 8007ca2:	4852      	ldr	r0, [pc, #328]	; (8007dec <_printf_i+0x244>)
 8007ca4:	2100      	movs	r1, #0
 8007ca6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007caa:	6865      	ldr	r5, [r4, #4]
 8007cac:	2d00      	cmp	r5, #0
 8007cae:	bfa8      	it	ge
 8007cb0:	6821      	ldrge	r1, [r4, #0]
 8007cb2:	60a5      	str	r5, [r4, #8]
 8007cb4:	bfa4      	itt	ge
 8007cb6:	f021 0104 	bicge.w	r1, r1, #4
 8007cba:	6021      	strge	r1, [r4, #0]
 8007cbc:	b90e      	cbnz	r6, 8007cc2 <_printf_i+0x11a>
 8007cbe:	2d00      	cmp	r5, #0
 8007cc0:	d04d      	beq.n	8007d5e <_printf_i+0x1b6>
 8007cc2:	4615      	mov	r5, r2
 8007cc4:	fbb6 f1f3 	udiv	r1, r6, r3
 8007cc8:	fb03 6711 	mls	r7, r3, r1, r6
 8007ccc:	5dc7      	ldrb	r7, [r0, r7]
 8007cce:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007cd2:	4637      	mov	r7, r6
 8007cd4:	42bb      	cmp	r3, r7
 8007cd6:	460e      	mov	r6, r1
 8007cd8:	d9f4      	bls.n	8007cc4 <_printf_i+0x11c>
 8007cda:	2b08      	cmp	r3, #8
 8007cdc:	d10b      	bne.n	8007cf6 <_printf_i+0x14e>
 8007cde:	6823      	ldr	r3, [r4, #0]
 8007ce0:	07de      	lsls	r6, r3, #31
 8007ce2:	d508      	bpl.n	8007cf6 <_printf_i+0x14e>
 8007ce4:	6923      	ldr	r3, [r4, #16]
 8007ce6:	6861      	ldr	r1, [r4, #4]
 8007ce8:	4299      	cmp	r1, r3
 8007cea:	bfde      	ittt	le
 8007cec:	2330      	movle	r3, #48	; 0x30
 8007cee:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007cf2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007cf6:	1b52      	subs	r2, r2, r5
 8007cf8:	6122      	str	r2, [r4, #16]
 8007cfa:	464b      	mov	r3, r9
 8007cfc:	4621      	mov	r1, r4
 8007cfe:	4640      	mov	r0, r8
 8007d00:	f8cd a000 	str.w	sl, [sp]
 8007d04:	aa03      	add	r2, sp, #12
 8007d06:	f7ff fedf 	bl	8007ac8 <_printf_common>
 8007d0a:	3001      	adds	r0, #1
 8007d0c:	d14c      	bne.n	8007da8 <_printf_i+0x200>
 8007d0e:	f04f 30ff 	mov.w	r0, #4294967295
 8007d12:	b004      	add	sp, #16
 8007d14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d18:	4834      	ldr	r0, [pc, #208]	; (8007dec <_printf_i+0x244>)
 8007d1a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007d1e:	6829      	ldr	r1, [r5, #0]
 8007d20:	6823      	ldr	r3, [r4, #0]
 8007d22:	f851 6b04 	ldr.w	r6, [r1], #4
 8007d26:	6029      	str	r1, [r5, #0]
 8007d28:	061d      	lsls	r5, r3, #24
 8007d2a:	d514      	bpl.n	8007d56 <_printf_i+0x1ae>
 8007d2c:	07df      	lsls	r7, r3, #31
 8007d2e:	bf44      	itt	mi
 8007d30:	f043 0320 	orrmi.w	r3, r3, #32
 8007d34:	6023      	strmi	r3, [r4, #0]
 8007d36:	b91e      	cbnz	r6, 8007d40 <_printf_i+0x198>
 8007d38:	6823      	ldr	r3, [r4, #0]
 8007d3a:	f023 0320 	bic.w	r3, r3, #32
 8007d3e:	6023      	str	r3, [r4, #0]
 8007d40:	2310      	movs	r3, #16
 8007d42:	e7af      	b.n	8007ca4 <_printf_i+0xfc>
 8007d44:	6823      	ldr	r3, [r4, #0]
 8007d46:	f043 0320 	orr.w	r3, r3, #32
 8007d4a:	6023      	str	r3, [r4, #0]
 8007d4c:	2378      	movs	r3, #120	; 0x78
 8007d4e:	4828      	ldr	r0, [pc, #160]	; (8007df0 <_printf_i+0x248>)
 8007d50:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007d54:	e7e3      	b.n	8007d1e <_printf_i+0x176>
 8007d56:	0659      	lsls	r1, r3, #25
 8007d58:	bf48      	it	mi
 8007d5a:	b2b6      	uxthmi	r6, r6
 8007d5c:	e7e6      	b.n	8007d2c <_printf_i+0x184>
 8007d5e:	4615      	mov	r5, r2
 8007d60:	e7bb      	b.n	8007cda <_printf_i+0x132>
 8007d62:	682b      	ldr	r3, [r5, #0]
 8007d64:	6826      	ldr	r6, [r4, #0]
 8007d66:	1d18      	adds	r0, r3, #4
 8007d68:	6961      	ldr	r1, [r4, #20]
 8007d6a:	6028      	str	r0, [r5, #0]
 8007d6c:	0635      	lsls	r5, r6, #24
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	d501      	bpl.n	8007d76 <_printf_i+0x1ce>
 8007d72:	6019      	str	r1, [r3, #0]
 8007d74:	e002      	b.n	8007d7c <_printf_i+0x1d4>
 8007d76:	0670      	lsls	r0, r6, #25
 8007d78:	d5fb      	bpl.n	8007d72 <_printf_i+0x1ca>
 8007d7a:	8019      	strh	r1, [r3, #0]
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	4615      	mov	r5, r2
 8007d80:	6123      	str	r3, [r4, #16]
 8007d82:	e7ba      	b.n	8007cfa <_printf_i+0x152>
 8007d84:	682b      	ldr	r3, [r5, #0]
 8007d86:	2100      	movs	r1, #0
 8007d88:	1d1a      	adds	r2, r3, #4
 8007d8a:	602a      	str	r2, [r5, #0]
 8007d8c:	681d      	ldr	r5, [r3, #0]
 8007d8e:	6862      	ldr	r2, [r4, #4]
 8007d90:	4628      	mov	r0, r5
 8007d92:	f002 fe63 	bl	800aa5c <memchr>
 8007d96:	b108      	cbz	r0, 8007d9c <_printf_i+0x1f4>
 8007d98:	1b40      	subs	r0, r0, r5
 8007d9a:	6060      	str	r0, [r4, #4]
 8007d9c:	6863      	ldr	r3, [r4, #4]
 8007d9e:	6123      	str	r3, [r4, #16]
 8007da0:	2300      	movs	r3, #0
 8007da2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007da6:	e7a8      	b.n	8007cfa <_printf_i+0x152>
 8007da8:	462a      	mov	r2, r5
 8007daa:	4649      	mov	r1, r9
 8007dac:	4640      	mov	r0, r8
 8007dae:	6923      	ldr	r3, [r4, #16]
 8007db0:	47d0      	blx	sl
 8007db2:	3001      	adds	r0, #1
 8007db4:	d0ab      	beq.n	8007d0e <_printf_i+0x166>
 8007db6:	6823      	ldr	r3, [r4, #0]
 8007db8:	079b      	lsls	r3, r3, #30
 8007dba:	d413      	bmi.n	8007de4 <_printf_i+0x23c>
 8007dbc:	68e0      	ldr	r0, [r4, #12]
 8007dbe:	9b03      	ldr	r3, [sp, #12]
 8007dc0:	4298      	cmp	r0, r3
 8007dc2:	bfb8      	it	lt
 8007dc4:	4618      	movlt	r0, r3
 8007dc6:	e7a4      	b.n	8007d12 <_printf_i+0x16a>
 8007dc8:	2301      	movs	r3, #1
 8007dca:	4632      	mov	r2, r6
 8007dcc:	4649      	mov	r1, r9
 8007dce:	4640      	mov	r0, r8
 8007dd0:	47d0      	blx	sl
 8007dd2:	3001      	adds	r0, #1
 8007dd4:	d09b      	beq.n	8007d0e <_printf_i+0x166>
 8007dd6:	3501      	adds	r5, #1
 8007dd8:	68e3      	ldr	r3, [r4, #12]
 8007dda:	9903      	ldr	r1, [sp, #12]
 8007ddc:	1a5b      	subs	r3, r3, r1
 8007dde:	42ab      	cmp	r3, r5
 8007de0:	dcf2      	bgt.n	8007dc8 <_printf_i+0x220>
 8007de2:	e7eb      	b.n	8007dbc <_printf_i+0x214>
 8007de4:	2500      	movs	r5, #0
 8007de6:	f104 0619 	add.w	r6, r4, #25
 8007dea:	e7f5      	b.n	8007dd8 <_printf_i+0x230>
 8007dec:	0800de46 	.word	0x0800de46
 8007df0:	0800de57 	.word	0x0800de57

08007df4 <_scanf_float>:
 8007df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007df8:	b087      	sub	sp, #28
 8007dfa:	9303      	str	r3, [sp, #12]
 8007dfc:	688b      	ldr	r3, [r1, #8]
 8007dfe:	4617      	mov	r7, r2
 8007e00:	1e5a      	subs	r2, r3, #1
 8007e02:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007e06:	bf85      	ittet	hi
 8007e08:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007e0c:	195b      	addhi	r3, r3, r5
 8007e0e:	2300      	movls	r3, #0
 8007e10:	9302      	strhi	r3, [sp, #8]
 8007e12:	bf88      	it	hi
 8007e14:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007e18:	468b      	mov	fp, r1
 8007e1a:	f04f 0500 	mov.w	r5, #0
 8007e1e:	bf8c      	ite	hi
 8007e20:	608b      	strhi	r3, [r1, #8]
 8007e22:	9302      	strls	r3, [sp, #8]
 8007e24:	680b      	ldr	r3, [r1, #0]
 8007e26:	4680      	mov	r8, r0
 8007e28:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007e2c:	f84b 3b1c 	str.w	r3, [fp], #28
 8007e30:	460c      	mov	r4, r1
 8007e32:	465e      	mov	r6, fp
 8007e34:	46aa      	mov	sl, r5
 8007e36:	46a9      	mov	r9, r5
 8007e38:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007e3c:	9501      	str	r5, [sp, #4]
 8007e3e:	68a2      	ldr	r2, [r4, #8]
 8007e40:	b152      	cbz	r2, 8007e58 <_scanf_float+0x64>
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	781b      	ldrb	r3, [r3, #0]
 8007e46:	2b4e      	cmp	r3, #78	; 0x4e
 8007e48:	d864      	bhi.n	8007f14 <_scanf_float+0x120>
 8007e4a:	2b40      	cmp	r3, #64	; 0x40
 8007e4c:	d83c      	bhi.n	8007ec8 <_scanf_float+0xd4>
 8007e4e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007e52:	b2c8      	uxtb	r0, r1
 8007e54:	280e      	cmp	r0, #14
 8007e56:	d93a      	bls.n	8007ece <_scanf_float+0xda>
 8007e58:	f1b9 0f00 	cmp.w	r9, #0
 8007e5c:	d003      	beq.n	8007e66 <_scanf_float+0x72>
 8007e5e:	6823      	ldr	r3, [r4, #0]
 8007e60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e64:	6023      	str	r3, [r4, #0]
 8007e66:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007e6a:	f1ba 0f01 	cmp.w	sl, #1
 8007e6e:	f200 8113 	bhi.w	8008098 <_scanf_float+0x2a4>
 8007e72:	455e      	cmp	r6, fp
 8007e74:	f200 8105 	bhi.w	8008082 <_scanf_float+0x28e>
 8007e78:	2501      	movs	r5, #1
 8007e7a:	4628      	mov	r0, r5
 8007e7c:	b007      	add	sp, #28
 8007e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e82:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007e86:	2a0d      	cmp	r2, #13
 8007e88:	d8e6      	bhi.n	8007e58 <_scanf_float+0x64>
 8007e8a:	a101      	add	r1, pc, #4	; (adr r1, 8007e90 <_scanf_float+0x9c>)
 8007e8c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007e90:	08007fcf 	.word	0x08007fcf
 8007e94:	08007e59 	.word	0x08007e59
 8007e98:	08007e59 	.word	0x08007e59
 8007e9c:	08007e59 	.word	0x08007e59
 8007ea0:	0800802f 	.word	0x0800802f
 8007ea4:	08008007 	.word	0x08008007
 8007ea8:	08007e59 	.word	0x08007e59
 8007eac:	08007e59 	.word	0x08007e59
 8007eb0:	08007fdd 	.word	0x08007fdd
 8007eb4:	08007e59 	.word	0x08007e59
 8007eb8:	08007e59 	.word	0x08007e59
 8007ebc:	08007e59 	.word	0x08007e59
 8007ec0:	08007e59 	.word	0x08007e59
 8007ec4:	08007f95 	.word	0x08007f95
 8007ec8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007ecc:	e7db      	b.n	8007e86 <_scanf_float+0x92>
 8007ece:	290e      	cmp	r1, #14
 8007ed0:	d8c2      	bhi.n	8007e58 <_scanf_float+0x64>
 8007ed2:	a001      	add	r0, pc, #4	; (adr r0, 8007ed8 <_scanf_float+0xe4>)
 8007ed4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007ed8:	08007f87 	.word	0x08007f87
 8007edc:	08007e59 	.word	0x08007e59
 8007ee0:	08007f87 	.word	0x08007f87
 8007ee4:	0800801b 	.word	0x0800801b
 8007ee8:	08007e59 	.word	0x08007e59
 8007eec:	08007f35 	.word	0x08007f35
 8007ef0:	08007f71 	.word	0x08007f71
 8007ef4:	08007f71 	.word	0x08007f71
 8007ef8:	08007f71 	.word	0x08007f71
 8007efc:	08007f71 	.word	0x08007f71
 8007f00:	08007f71 	.word	0x08007f71
 8007f04:	08007f71 	.word	0x08007f71
 8007f08:	08007f71 	.word	0x08007f71
 8007f0c:	08007f71 	.word	0x08007f71
 8007f10:	08007f71 	.word	0x08007f71
 8007f14:	2b6e      	cmp	r3, #110	; 0x6e
 8007f16:	d809      	bhi.n	8007f2c <_scanf_float+0x138>
 8007f18:	2b60      	cmp	r3, #96	; 0x60
 8007f1a:	d8b2      	bhi.n	8007e82 <_scanf_float+0x8e>
 8007f1c:	2b54      	cmp	r3, #84	; 0x54
 8007f1e:	d077      	beq.n	8008010 <_scanf_float+0x21c>
 8007f20:	2b59      	cmp	r3, #89	; 0x59
 8007f22:	d199      	bne.n	8007e58 <_scanf_float+0x64>
 8007f24:	2d07      	cmp	r5, #7
 8007f26:	d197      	bne.n	8007e58 <_scanf_float+0x64>
 8007f28:	2508      	movs	r5, #8
 8007f2a:	e029      	b.n	8007f80 <_scanf_float+0x18c>
 8007f2c:	2b74      	cmp	r3, #116	; 0x74
 8007f2e:	d06f      	beq.n	8008010 <_scanf_float+0x21c>
 8007f30:	2b79      	cmp	r3, #121	; 0x79
 8007f32:	e7f6      	b.n	8007f22 <_scanf_float+0x12e>
 8007f34:	6821      	ldr	r1, [r4, #0]
 8007f36:	05c8      	lsls	r0, r1, #23
 8007f38:	d51a      	bpl.n	8007f70 <_scanf_float+0x17c>
 8007f3a:	9b02      	ldr	r3, [sp, #8]
 8007f3c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007f40:	6021      	str	r1, [r4, #0]
 8007f42:	f109 0901 	add.w	r9, r9, #1
 8007f46:	b11b      	cbz	r3, 8007f50 <_scanf_float+0x15c>
 8007f48:	3b01      	subs	r3, #1
 8007f4a:	3201      	adds	r2, #1
 8007f4c:	9302      	str	r3, [sp, #8]
 8007f4e:	60a2      	str	r2, [r4, #8]
 8007f50:	68a3      	ldr	r3, [r4, #8]
 8007f52:	3b01      	subs	r3, #1
 8007f54:	60a3      	str	r3, [r4, #8]
 8007f56:	6923      	ldr	r3, [r4, #16]
 8007f58:	3301      	adds	r3, #1
 8007f5a:	6123      	str	r3, [r4, #16]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	3b01      	subs	r3, #1
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	607b      	str	r3, [r7, #4]
 8007f64:	f340 8084 	ble.w	8008070 <_scanf_float+0x27c>
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	3301      	adds	r3, #1
 8007f6c:	603b      	str	r3, [r7, #0]
 8007f6e:	e766      	b.n	8007e3e <_scanf_float+0x4a>
 8007f70:	eb1a 0f05 	cmn.w	sl, r5
 8007f74:	f47f af70 	bne.w	8007e58 <_scanf_float+0x64>
 8007f78:	6822      	ldr	r2, [r4, #0]
 8007f7a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007f7e:	6022      	str	r2, [r4, #0]
 8007f80:	f806 3b01 	strb.w	r3, [r6], #1
 8007f84:	e7e4      	b.n	8007f50 <_scanf_float+0x15c>
 8007f86:	6822      	ldr	r2, [r4, #0]
 8007f88:	0610      	lsls	r0, r2, #24
 8007f8a:	f57f af65 	bpl.w	8007e58 <_scanf_float+0x64>
 8007f8e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007f92:	e7f4      	b.n	8007f7e <_scanf_float+0x18a>
 8007f94:	f1ba 0f00 	cmp.w	sl, #0
 8007f98:	d10e      	bne.n	8007fb8 <_scanf_float+0x1c4>
 8007f9a:	f1b9 0f00 	cmp.w	r9, #0
 8007f9e:	d10e      	bne.n	8007fbe <_scanf_float+0x1ca>
 8007fa0:	6822      	ldr	r2, [r4, #0]
 8007fa2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007fa6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007faa:	d108      	bne.n	8007fbe <_scanf_float+0x1ca>
 8007fac:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007fb0:	f04f 0a01 	mov.w	sl, #1
 8007fb4:	6022      	str	r2, [r4, #0]
 8007fb6:	e7e3      	b.n	8007f80 <_scanf_float+0x18c>
 8007fb8:	f1ba 0f02 	cmp.w	sl, #2
 8007fbc:	d055      	beq.n	800806a <_scanf_float+0x276>
 8007fbe:	2d01      	cmp	r5, #1
 8007fc0:	d002      	beq.n	8007fc8 <_scanf_float+0x1d4>
 8007fc2:	2d04      	cmp	r5, #4
 8007fc4:	f47f af48 	bne.w	8007e58 <_scanf_float+0x64>
 8007fc8:	3501      	adds	r5, #1
 8007fca:	b2ed      	uxtb	r5, r5
 8007fcc:	e7d8      	b.n	8007f80 <_scanf_float+0x18c>
 8007fce:	f1ba 0f01 	cmp.w	sl, #1
 8007fd2:	f47f af41 	bne.w	8007e58 <_scanf_float+0x64>
 8007fd6:	f04f 0a02 	mov.w	sl, #2
 8007fda:	e7d1      	b.n	8007f80 <_scanf_float+0x18c>
 8007fdc:	b97d      	cbnz	r5, 8007ffe <_scanf_float+0x20a>
 8007fde:	f1b9 0f00 	cmp.w	r9, #0
 8007fe2:	f47f af3c 	bne.w	8007e5e <_scanf_float+0x6a>
 8007fe6:	6822      	ldr	r2, [r4, #0]
 8007fe8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007fec:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007ff0:	f47f af39 	bne.w	8007e66 <_scanf_float+0x72>
 8007ff4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007ff8:	2501      	movs	r5, #1
 8007ffa:	6022      	str	r2, [r4, #0]
 8007ffc:	e7c0      	b.n	8007f80 <_scanf_float+0x18c>
 8007ffe:	2d03      	cmp	r5, #3
 8008000:	d0e2      	beq.n	8007fc8 <_scanf_float+0x1d4>
 8008002:	2d05      	cmp	r5, #5
 8008004:	e7de      	b.n	8007fc4 <_scanf_float+0x1d0>
 8008006:	2d02      	cmp	r5, #2
 8008008:	f47f af26 	bne.w	8007e58 <_scanf_float+0x64>
 800800c:	2503      	movs	r5, #3
 800800e:	e7b7      	b.n	8007f80 <_scanf_float+0x18c>
 8008010:	2d06      	cmp	r5, #6
 8008012:	f47f af21 	bne.w	8007e58 <_scanf_float+0x64>
 8008016:	2507      	movs	r5, #7
 8008018:	e7b2      	b.n	8007f80 <_scanf_float+0x18c>
 800801a:	6822      	ldr	r2, [r4, #0]
 800801c:	0591      	lsls	r1, r2, #22
 800801e:	f57f af1b 	bpl.w	8007e58 <_scanf_float+0x64>
 8008022:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008026:	6022      	str	r2, [r4, #0]
 8008028:	f8cd 9004 	str.w	r9, [sp, #4]
 800802c:	e7a8      	b.n	8007f80 <_scanf_float+0x18c>
 800802e:	6822      	ldr	r2, [r4, #0]
 8008030:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008034:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008038:	d006      	beq.n	8008048 <_scanf_float+0x254>
 800803a:	0550      	lsls	r0, r2, #21
 800803c:	f57f af0c 	bpl.w	8007e58 <_scanf_float+0x64>
 8008040:	f1b9 0f00 	cmp.w	r9, #0
 8008044:	f43f af0f 	beq.w	8007e66 <_scanf_float+0x72>
 8008048:	0591      	lsls	r1, r2, #22
 800804a:	bf58      	it	pl
 800804c:	9901      	ldrpl	r1, [sp, #4]
 800804e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008052:	bf58      	it	pl
 8008054:	eba9 0101 	subpl.w	r1, r9, r1
 8008058:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800805c:	f04f 0900 	mov.w	r9, #0
 8008060:	bf58      	it	pl
 8008062:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008066:	6022      	str	r2, [r4, #0]
 8008068:	e78a      	b.n	8007f80 <_scanf_float+0x18c>
 800806a:	f04f 0a03 	mov.w	sl, #3
 800806e:	e787      	b.n	8007f80 <_scanf_float+0x18c>
 8008070:	4639      	mov	r1, r7
 8008072:	4640      	mov	r0, r8
 8008074:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008078:	4798      	blx	r3
 800807a:	2800      	cmp	r0, #0
 800807c:	f43f aedf 	beq.w	8007e3e <_scanf_float+0x4a>
 8008080:	e6ea      	b.n	8007e58 <_scanf_float+0x64>
 8008082:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008086:	463a      	mov	r2, r7
 8008088:	4640      	mov	r0, r8
 800808a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800808e:	4798      	blx	r3
 8008090:	6923      	ldr	r3, [r4, #16]
 8008092:	3b01      	subs	r3, #1
 8008094:	6123      	str	r3, [r4, #16]
 8008096:	e6ec      	b.n	8007e72 <_scanf_float+0x7e>
 8008098:	1e6b      	subs	r3, r5, #1
 800809a:	2b06      	cmp	r3, #6
 800809c:	d825      	bhi.n	80080ea <_scanf_float+0x2f6>
 800809e:	2d02      	cmp	r5, #2
 80080a0:	d836      	bhi.n	8008110 <_scanf_float+0x31c>
 80080a2:	455e      	cmp	r6, fp
 80080a4:	f67f aee8 	bls.w	8007e78 <_scanf_float+0x84>
 80080a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80080ac:	463a      	mov	r2, r7
 80080ae:	4640      	mov	r0, r8
 80080b0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80080b4:	4798      	blx	r3
 80080b6:	6923      	ldr	r3, [r4, #16]
 80080b8:	3b01      	subs	r3, #1
 80080ba:	6123      	str	r3, [r4, #16]
 80080bc:	e7f1      	b.n	80080a2 <_scanf_float+0x2ae>
 80080be:	9802      	ldr	r0, [sp, #8]
 80080c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80080c4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80080c8:	463a      	mov	r2, r7
 80080ca:	9002      	str	r0, [sp, #8]
 80080cc:	4640      	mov	r0, r8
 80080ce:	4798      	blx	r3
 80080d0:	6923      	ldr	r3, [r4, #16]
 80080d2:	3b01      	subs	r3, #1
 80080d4:	6123      	str	r3, [r4, #16]
 80080d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80080da:	fa5f fa8a 	uxtb.w	sl, sl
 80080de:	f1ba 0f02 	cmp.w	sl, #2
 80080e2:	d1ec      	bne.n	80080be <_scanf_float+0x2ca>
 80080e4:	3d03      	subs	r5, #3
 80080e6:	b2ed      	uxtb	r5, r5
 80080e8:	1b76      	subs	r6, r6, r5
 80080ea:	6823      	ldr	r3, [r4, #0]
 80080ec:	05da      	lsls	r2, r3, #23
 80080ee:	d52f      	bpl.n	8008150 <_scanf_float+0x35c>
 80080f0:	055b      	lsls	r3, r3, #21
 80080f2:	d510      	bpl.n	8008116 <_scanf_float+0x322>
 80080f4:	455e      	cmp	r6, fp
 80080f6:	f67f aebf 	bls.w	8007e78 <_scanf_float+0x84>
 80080fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80080fe:	463a      	mov	r2, r7
 8008100:	4640      	mov	r0, r8
 8008102:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008106:	4798      	blx	r3
 8008108:	6923      	ldr	r3, [r4, #16]
 800810a:	3b01      	subs	r3, #1
 800810c:	6123      	str	r3, [r4, #16]
 800810e:	e7f1      	b.n	80080f4 <_scanf_float+0x300>
 8008110:	46aa      	mov	sl, r5
 8008112:	9602      	str	r6, [sp, #8]
 8008114:	e7df      	b.n	80080d6 <_scanf_float+0x2e2>
 8008116:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800811a:	6923      	ldr	r3, [r4, #16]
 800811c:	2965      	cmp	r1, #101	; 0x65
 800811e:	f103 33ff 	add.w	r3, r3, #4294967295
 8008122:	f106 35ff 	add.w	r5, r6, #4294967295
 8008126:	6123      	str	r3, [r4, #16]
 8008128:	d00c      	beq.n	8008144 <_scanf_float+0x350>
 800812a:	2945      	cmp	r1, #69	; 0x45
 800812c:	d00a      	beq.n	8008144 <_scanf_float+0x350>
 800812e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008132:	463a      	mov	r2, r7
 8008134:	4640      	mov	r0, r8
 8008136:	4798      	blx	r3
 8008138:	6923      	ldr	r3, [r4, #16]
 800813a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800813e:	3b01      	subs	r3, #1
 8008140:	1eb5      	subs	r5, r6, #2
 8008142:	6123      	str	r3, [r4, #16]
 8008144:	463a      	mov	r2, r7
 8008146:	4640      	mov	r0, r8
 8008148:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800814c:	4798      	blx	r3
 800814e:	462e      	mov	r6, r5
 8008150:	6825      	ldr	r5, [r4, #0]
 8008152:	f015 0510 	ands.w	r5, r5, #16
 8008156:	d155      	bne.n	8008204 <_scanf_float+0x410>
 8008158:	7035      	strb	r5, [r6, #0]
 800815a:	6823      	ldr	r3, [r4, #0]
 800815c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008160:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008164:	d11b      	bne.n	800819e <_scanf_float+0x3aa>
 8008166:	9b01      	ldr	r3, [sp, #4]
 8008168:	454b      	cmp	r3, r9
 800816a:	eba3 0209 	sub.w	r2, r3, r9
 800816e:	d123      	bne.n	80081b8 <_scanf_float+0x3c4>
 8008170:	2200      	movs	r2, #0
 8008172:	4659      	mov	r1, fp
 8008174:	4640      	mov	r0, r8
 8008176:	f000 ff07 	bl	8008f88 <_strtod_r>
 800817a:	6822      	ldr	r2, [r4, #0]
 800817c:	9b03      	ldr	r3, [sp, #12]
 800817e:	f012 0f02 	tst.w	r2, #2
 8008182:	4606      	mov	r6, r0
 8008184:	460f      	mov	r7, r1
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	d021      	beq.n	80081ce <_scanf_float+0x3da>
 800818a:	1d1a      	adds	r2, r3, #4
 800818c:	9903      	ldr	r1, [sp, #12]
 800818e:	600a      	str	r2, [r1, #0]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	e9c3 6700 	strd	r6, r7, [r3]
 8008196:	68e3      	ldr	r3, [r4, #12]
 8008198:	3301      	adds	r3, #1
 800819a:	60e3      	str	r3, [r4, #12]
 800819c:	e66d      	b.n	8007e7a <_scanf_float+0x86>
 800819e:	9b04      	ldr	r3, [sp, #16]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d0e5      	beq.n	8008170 <_scanf_float+0x37c>
 80081a4:	9905      	ldr	r1, [sp, #20]
 80081a6:	230a      	movs	r3, #10
 80081a8:	462a      	mov	r2, r5
 80081aa:	4640      	mov	r0, r8
 80081ac:	3101      	adds	r1, #1
 80081ae:	f000 ff79 	bl	80090a4 <_strtol_r>
 80081b2:	9b04      	ldr	r3, [sp, #16]
 80081b4:	9e05      	ldr	r6, [sp, #20]
 80081b6:	1ac2      	subs	r2, r0, r3
 80081b8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80081bc:	429e      	cmp	r6, r3
 80081be:	bf28      	it	cs
 80081c0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80081c4:	4630      	mov	r0, r6
 80081c6:	4910      	ldr	r1, [pc, #64]	; (8008208 <_scanf_float+0x414>)
 80081c8:	f000 f8b4 	bl	8008334 <siprintf>
 80081cc:	e7d0      	b.n	8008170 <_scanf_float+0x37c>
 80081ce:	f012 0f04 	tst.w	r2, #4
 80081d2:	f103 0204 	add.w	r2, r3, #4
 80081d6:	d1d9      	bne.n	800818c <_scanf_float+0x398>
 80081d8:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80081dc:	f8cc 2000 	str.w	r2, [ip]
 80081e0:	f8d3 8000 	ldr.w	r8, [r3]
 80081e4:	4602      	mov	r2, r0
 80081e6:	460b      	mov	r3, r1
 80081e8:	f7f8 fc10 	bl	8000a0c <__aeabi_dcmpun>
 80081ec:	b128      	cbz	r0, 80081fa <_scanf_float+0x406>
 80081ee:	4807      	ldr	r0, [pc, #28]	; (800820c <_scanf_float+0x418>)
 80081f0:	f000 f89c 	bl	800832c <nanf>
 80081f4:	f8c8 0000 	str.w	r0, [r8]
 80081f8:	e7cd      	b.n	8008196 <_scanf_float+0x3a2>
 80081fa:	4630      	mov	r0, r6
 80081fc:	4639      	mov	r1, r7
 80081fe:	f7f8 fc63 	bl	8000ac8 <__aeabi_d2f>
 8008202:	e7f7      	b.n	80081f4 <_scanf_float+0x400>
 8008204:	2500      	movs	r5, #0
 8008206:	e638      	b.n	8007e7a <_scanf_float+0x86>
 8008208:	0800de68 	.word	0x0800de68
 800820c:	0800e2d8 	.word	0x0800e2d8

08008210 <iprintf>:
 8008210:	b40f      	push	{r0, r1, r2, r3}
 8008212:	4b0a      	ldr	r3, [pc, #40]	; (800823c <iprintf+0x2c>)
 8008214:	b513      	push	{r0, r1, r4, lr}
 8008216:	681c      	ldr	r4, [r3, #0]
 8008218:	b124      	cbz	r4, 8008224 <iprintf+0x14>
 800821a:	69a3      	ldr	r3, [r4, #24]
 800821c:	b913      	cbnz	r3, 8008224 <iprintf+0x14>
 800821e:	4620      	mov	r0, r4
 8008220:	f001 ff92 	bl	800a148 <__sinit>
 8008224:	ab05      	add	r3, sp, #20
 8008226:	4620      	mov	r0, r4
 8008228:	9a04      	ldr	r2, [sp, #16]
 800822a:	68a1      	ldr	r1, [r4, #8]
 800822c:	9301      	str	r3, [sp, #4]
 800822e:	f003 fb4f 	bl	800b8d0 <_vfiprintf_r>
 8008232:	b002      	add	sp, #8
 8008234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008238:	b004      	add	sp, #16
 800823a:	4770      	bx	lr
 800823c:	2000000c 	.word	0x2000000c

08008240 <_puts_r>:
 8008240:	b570      	push	{r4, r5, r6, lr}
 8008242:	460e      	mov	r6, r1
 8008244:	4605      	mov	r5, r0
 8008246:	b118      	cbz	r0, 8008250 <_puts_r+0x10>
 8008248:	6983      	ldr	r3, [r0, #24]
 800824a:	b90b      	cbnz	r3, 8008250 <_puts_r+0x10>
 800824c:	f001 ff7c 	bl	800a148 <__sinit>
 8008250:	69ab      	ldr	r3, [r5, #24]
 8008252:	68ac      	ldr	r4, [r5, #8]
 8008254:	b913      	cbnz	r3, 800825c <_puts_r+0x1c>
 8008256:	4628      	mov	r0, r5
 8008258:	f001 ff76 	bl	800a148 <__sinit>
 800825c:	4b2c      	ldr	r3, [pc, #176]	; (8008310 <_puts_r+0xd0>)
 800825e:	429c      	cmp	r4, r3
 8008260:	d120      	bne.n	80082a4 <_puts_r+0x64>
 8008262:	686c      	ldr	r4, [r5, #4]
 8008264:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008266:	07db      	lsls	r3, r3, #31
 8008268:	d405      	bmi.n	8008276 <_puts_r+0x36>
 800826a:	89a3      	ldrh	r3, [r4, #12]
 800826c:	0598      	lsls	r0, r3, #22
 800826e:	d402      	bmi.n	8008276 <_puts_r+0x36>
 8008270:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008272:	f002 fb72 	bl	800a95a <__retarget_lock_acquire_recursive>
 8008276:	89a3      	ldrh	r3, [r4, #12]
 8008278:	0719      	lsls	r1, r3, #28
 800827a:	d51d      	bpl.n	80082b8 <_puts_r+0x78>
 800827c:	6923      	ldr	r3, [r4, #16]
 800827e:	b1db      	cbz	r3, 80082b8 <_puts_r+0x78>
 8008280:	3e01      	subs	r6, #1
 8008282:	68a3      	ldr	r3, [r4, #8]
 8008284:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008288:	3b01      	subs	r3, #1
 800828a:	60a3      	str	r3, [r4, #8]
 800828c:	bb39      	cbnz	r1, 80082de <_puts_r+0x9e>
 800828e:	2b00      	cmp	r3, #0
 8008290:	da38      	bge.n	8008304 <_puts_r+0xc4>
 8008292:	4622      	mov	r2, r4
 8008294:	210a      	movs	r1, #10
 8008296:	4628      	mov	r0, r5
 8008298:	f000 ff06 	bl	80090a8 <__swbuf_r>
 800829c:	3001      	adds	r0, #1
 800829e:	d011      	beq.n	80082c4 <_puts_r+0x84>
 80082a0:	250a      	movs	r5, #10
 80082a2:	e011      	b.n	80082c8 <_puts_r+0x88>
 80082a4:	4b1b      	ldr	r3, [pc, #108]	; (8008314 <_puts_r+0xd4>)
 80082a6:	429c      	cmp	r4, r3
 80082a8:	d101      	bne.n	80082ae <_puts_r+0x6e>
 80082aa:	68ac      	ldr	r4, [r5, #8]
 80082ac:	e7da      	b.n	8008264 <_puts_r+0x24>
 80082ae:	4b1a      	ldr	r3, [pc, #104]	; (8008318 <_puts_r+0xd8>)
 80082b0:	429c      	cmp	r4, r3
 80082b2:	bf08      	it	eq
 80082b4:	68ec      	ldreq	r4, [r5, #12]
 80082b6:	e7d5      	b.n	8008264 <_puts_r+0x24>
 80082b8:	4621      	mov	r1, r4
 80082ba:	4628      	mov	r0, r5
 80082bc:	f000 ff46 	bl	800914c <__swsetup_r>
 80082c0:	2800      	cmp	r0, #0
 80082c2:	d0dd      	beq.n	8008280 <_puts_r+0x40>
 80082c4:	f04f 35ff 	mov.w	r5, #4294967295
 80082c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80082ca:	07da      	lsls	r2, r3, #31
 80082cc:	d405      	bmi.n	80082da <_puts_r+0x9a>
 80082ce:	89a3      	ldrh	r3, [r4, #12]
 80082d0:	059b      	lsls	r3, r3, #22
 80082d2:	d402      	bmi.n	80082da <_puts_r+0x9a>
 80082d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80082d6:	f002 fb41 	bl	800a95c <__retarget_lock_release_recursive>
 80082da:	4628      	mov	r0, r5
 80082dc:	bd70      	pop	{r4, r5, r6, pc}
 80082de:	2b00      	cmp	r3, #0
 80082e0:	da04      	bge.n	80082ec <_puts_r+0xac>
 80082e2:	69a2      	ldr	r2, [r4, #24]
 80082e4:	429a      	cmp	r2, r3
 80082e6:	dc06      	bgt.n	80082f6 <_puts_r+0xb6>
 80082e8:	290a      	cmp	r1, #10
 80082ea:	d004      	beq.n	80082f6 <_puts_r+0xb6>
 80082ec:	6823      	ldr	r3, [r4, #0]
 80082ee:	1c5a      	adds	r2, r3, #1
 80082f0:	6022      	str	r2, [r4, #0]
 80082f2:	7019      	strb	r1, [r3, #0]
 80082f4:	e7c5      	b.n	8008282 <_puts_r+0x42>
 80082f6:	4622      	mov	r2, r4
 80082f8:	4628      	mov	r0, r5
 80082fa:	f000 fed5 	bl	80090a8 <__swbuf_r>
 80082fe:	3001      	adds	r0, #1
 8008300:	d1bf      	bne.n	8008282 <_puts_r+0x42>
 8008302:	e7df      	b.n	80082c4 <_puts_r+0x84>
 8008304:	250a      	movs	r5, #10
 8008306:	6823      	ldr	r3, [r4, #0]
 8008308:	1c5a      	adds	r2, r3, #1
 800830a:	6022      	str	r2, [r4, #0]
 800830c:	701d      	strb	r5, [r3, #0]
 800830e:	e7db      	b.n	80082c8 <_puts_r+0x88>
 8008310:	0800e074 	.word	0x0800e074
 8008314:	0800e094 	.word	0x0800e094
 8008318:	0800e054 	.word	0x0800e054

0800831c <puts>:
 800831c:	4b02      	ldr	r3, [pc, #8]	; (8008328 <puts+0xc>)
 800831e:	4601      	mov	r1, r0
 8008320:	6818      	ldr	r0, [r3, #0]
 8008322:	f7ff bf8d 	b.w	8008240 <_puts_r>
 8008326:	bf00      	nop
 8008328:	2000000c 	.word	0x2000000c

0800832c <nanf>:
 800832c:	4800      	ldr	r0, [pc, #0]	; (8008330 <nanf+0x4>)
 800832e:	4770      	bx	lr
 8008330:	7fc00000 	.word	0x7fc00000

08008334 <siprintf>:
 8008334:	b40e      	push	{r1, r2, r3}
 8008336:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800833a:	b500      	push	{lr}
 800833c:	b09c      	sub	sp, #112	; 0x70
 800833e:	ab1d      	add	r3, sp, #116	; 0x74
 8008340:	9002      	str	r0, [sp, #8]
 8008342:	9006      	str	r0, [sp, #24]
 8008344:	9107      	str	r1, [sp, #28]
 8008346:	9104      	str	r1, [sp, #16]
 8008348:	4808      	ldr	r0, [pc, #32]	; (800836c <siprintf+0x38>)
 800834a:	4909      	ldr	r1, [pc, #36]	; (8008370 <siprintf+0x3c>)
 800834c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008350:	9105      	str	r1, [sp, #20]
 8008352:	6800      	ldr	r0, [r0, #0]
 8008354:	a902      	add	r1, sp, #8
 8008356:	9301      	str	r3, [sp, #4]
 8008358:	f003 f992 	bl	800b680 <_svfiprintf_r>
 800835c:	2200      	movs	r2, #0
 800835e:	9b02      	ldr	r3, [sp, #8]
 8008360:	701a      	strb	r2, [r3, #0]
 8008362:	b01c      	add	sp, #112	; 0x70
 8008364:	f85d eb04 	ldr.w	lr, [sp], #4
 8008368:	b003      	add	sp, #12
 800836a:	4770      	bx	lr
 800836c:	2000000c 	.word	0x2000000c
 8008370:	ffff0208 	.word	0xffff0208

08008374 <sulp>:
 8008374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008378:	460f      	mov	r7, r1
 800837a:	4690      	mov	r8, r2
 800837c:	f002 feec 	bl	800b158 <__ulp>
 8008380:	4604      	mov	r4, r0
 8008382:	460d      	mov	r5, r1
 8008384:	f1b8 0f00 	cmp.w	r8, #0
 8008388:	d011      	beq.n	80083ae <sulp+0x3a>
 800838a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800838e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008392:	2b00      	cmp	r3, #0
 8008394:	dd0b      	ble.n	80083ae <sulp+0x3a>
 8008396:	2400      	movs	r4, #0
 8008398:	051b      	lsls	r3, r3, #20
 800839a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800839e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80083a2:	4622      	mov	r2, r4
 80083a4:	462b      	mov	r3, r5
 80083a6:	f7f8 f897 	bl	80004d8 <__aeabi_dmul>
 80083aa:	4604      	mov	r4, r0
 80083ac:	460d      	mov	r5, r1
 80083ae:	4620      	mov	r0, r4
 80083b0:	4629      	mov	r1, r5
 80083b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080083b8 <_strtod_l>:
 80083b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083bc:	469b      	mov	fp, r3
 80083be:	2300      	movs	r3, #0
 80083c0:	b09f      	sub	sp, #124	; 0x7c
 80083c2:	931a      	str	r3, [sp, #104]	; 0x68
 80083c4:	4b9e      	ldr	r3, [pc, #632]	; (8008640 <_strtod_l+0x288>)
 80083c6:	4682      	mov	sl, r0
 80083c8:	681f      	ldr	r7, [r3, #0]
 80083ca:	460e      	mov	r6, r1
 80083cc:	4638      	mov	r0, r7
 80083ce:	9215      	str	r2, [sp, #84]	; 0x54
 80083d0:	f7f7 febe 	bl	8000150 <strlen>
 80083d4:	f04f 0800 	mov.w	r8, #0
 80083d8:	4604      	mov	r4, r0
 80083da:	f04f 0900 	mov.w	r9, #0
 80083de:	9619      	str	r6, [sp, #100]	; 0x64
 80083e0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80083e2:	781a      	ldrb	r2, [r3, #0]
 80083e4:	2a2b      	cmp	r2, #43	; 0x2b
 80083e6:	d04c      	beq.n	8008482 <_strtod_l+0xca>
 80083e8:	d83a      	bhi.n	8008460 <_strtod_l+0xa8>
 80083ea:	2a0d      	cmp	r2, #13
 80083ec:	d833      	bhi.n	8008456 <_strtod_l+0x9e>
 80083ee:	2a08      	cmp	r2, #8
 80083f0:	d833      	bhi.n	800845a <_strtod_l+0xa2>
 80083f2:	2a00      	cmp	r2, #0
 80083f4:	d03d      	beq.n	8008472 <_strtod_l+0xba>
 80083f6:	2300      	movs	r3, #0
 80083f8:	930a      	str	r3, [sp, #40]	; 0x28
 80083fa:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80083fc:	782b      	ldrb	r3, [r5, #0]
 80083fe:	2b30      	cmp	r3, #48	; 0x30
 8008400:	f040 80aa 	bne.w	8008558 <_strtod_l+0x1a0>
 8008404:	786b      	ldrb	r3, [r5, #1]
 8008406:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800840a:	2b58      	cmp	r3, #88	; 0x58
 800840c:	d166      	bne.n	80084dc <_strtod_l+0x124>
 800840e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008410:	4650      	mov	r0, sl
 8008412:	9301      	str	r3, [sp, #4]
 8008414:	ab1a      	add	r3, sp, #104	; 0x68
 8008416:	9300      	str	r3, [sp, #0]
 8008418:	4a8a      	ldr	r2, [pc, #552]	; (8008644 <_strtod_l+0x28c>)
 800841a:	f8cd b008 	str.w	fp, [sp, #8]
 800841e:	ab1b      	add	r3, sp, #108	; 0x6c
 8008420:	a919      	add	r1, sp, #100	; 0x64
 8008422:	f001 ff97 	bl	800a354 <__gethex>
 8008426:	f010 0607 	ands.w	r6, r0, #7
 800842a:	4604      	mov	r4, r0
 800842c:	d005      	beq.n	800843a <_strtod_l+0x82>
 800842e:	2e06      	cmp	r6, #6
 8008430:	d129      	bne.n	8008486 <_strtod_l+0xce>
 8008432:	2300      	movs	r3, #0
 8008434:	3501      	adds	r5, #1
 8008436:	9519      	str	r5, [sp, #100]	; 0x64
 8008438:	930a      	str	r3, [sp, #40]	; 0x28
 800843a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800843c:	2b00      	cmp	r3, #0
 800843e:	f040 858a 	bne.w	8008f56 <_strtod_l+0xb9e>
 8008442:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008444:	b1d3      	cbz	r3, 800847c <_strtod_l+0xc4>
 8008446:	4642      	mov	r2, r8
 8008448:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800844c:	4610      	mov	r0, r2
 800844e:	4619      	mov	r1, r3
 8008450:	b01f      	add	sp, #124	; 0x7c
 8008452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008456:	2a20      	cmp	r2, #32
 8008458:	d1cd      	bne.n	80083f6 <_strtod_l+0x3e>
 800845a:	3301      	adds	r3, #1
 800845c:	9319      	str	r3, [sp, #100]	; 0x64
 800845e:	e7bf      	b.n	80083e0 <_strtod_l+0x28>
 8008460:	2a2d      	cmp	r2, #45	; 0x2d
 8008462:	d1c8      	bne.n	80083f6 <_strtod_l+0x3e>
 8008464:	2201      	movs	r2, #1
 8008466:	920a      	str	r2, [sp, #40]	; 0x28
 8008468:	1c5a      	adds	r2, r3, #1
 800846a:	9219      	str	r2, [sp, #100]	; 0x64
 800846c:	785b      	ldrb	r3, [r3, #1]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d1c3      	bne.n	80083fa <_strtod_l+0x42>
 8008472:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008474:	9619      	str	r6, [sp, #100]	; 0x64
 8008476:	2b00      	cmp	r3, #0
 8008478:	f040 856b 	bne.w	8008f52 <_strtod_l+0xb9a>
 800847c:	4642      	mov	r2, r8
 800847e:	464b      	mov	r3, r9
 8008480:	e7e4      	b.n	800844c <_strtod_l+0x94>
 8008482:	2200      	movs	r2, #0
 8008484:	e7ef      	b.n	8008466 <_strtod_l+0xae>
 8008486:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008488:	b13a      	cbz	r2, 800849a <_strtod_l+0xe2>
 800848a:	2135      	movs	r1, #53	; 0x35
 800848c:	a81c      	add	r0, sp, #112	; 0x70
 800848e:	f002 ff67 	bl	800b360 <__copybits>
 8008492:	4650      	mov	r0, sl
 8008494:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008496:	f002 fb2f 	bl	800aaf8 <_Bfree>
 800849a:	3e01      	subs	r6, #1
 800849c:	2e04      	cmp	r6, #4
 800849e:	d806      	bhi.n	80084ae <_strtod_l+0xf6>
 80084a0:	e8df f006 	tbb	[pc, r6]
 80084a4:	1714030a 	.word	0x1714030a
 80084a8:	0a          	.byte	0x0a
 80084a9:	00          	.byte	0x00
 80084aa:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 80084ae:	0721      	lsls	r1, r4, #28
 80084b0:	d5c3      	bpl.n	800843a <_strtod_l+0x82>
 80084b2:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80084b6:	e7c0      	b.n	800843a <_strtod_l+0x82>
 80084b8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80084ba:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 80084be:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80084c2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80084c6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80084ca:	e7f0      	b.n	80084ae <_strtod_l+0xf6>
 80084cc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008648 <_strtod_l+0x290>
 80084d0:	e7ed      	b.n	80084ae <_strtod_l+0xf6>
 80084d2:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80084d6:	f04f 38ff 	mov.w	r8, #4294967295
 80084da:	e7e8      	b.n	80084ae <_strtod_l+0xf6>
 80084dc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80084de:	1c5a      	adds	r2, r3, #1
 80084e0:	9219      	str	r2, [sp, #100]	; 0x64
 80084e2:	785b      	ldrb	r3, [r3, #1]
 80084e4:	2b30      	cmp	r3, #48	; 0x30
 80084e6:	d0f9      	beq.n	80084dc <_strtod_l+0x124>
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d0a6      	beq.n	800843a <_strtod_l+0x82>
 80084ec:	2301      	movs	r3, #1
 80084ee:	9307      	str	r3, [sp, #28]
 80084f0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80084f2:	220a      	movs	r2, #10
 80084f4:	9308      	str	r3, [sp, #32]
 80084f6:	2300      	movs	r3, #0
 80084f8:	469b      	mov	fp, r3
 80084fa:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80084fe:	9819      	ldr	r0, [sp, #100]	; 0x64
 8008500:	7805      	ldrb	r5, [r0, #0]
 8008502:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8008506:	b2d9      	uxtb	r1, r3
 8008508:	2909      	cmp	r1, #9
 800850a:	d927      	bls.n	800855c <_strtod_l+0x1a4>
 800850c:	4622      	mov	r2, r4
 800850e:	4639      	mov	r1, r7
 8008510:	f003 fb67 	bl	800bbe2 <strncmp>
 8008514:	2800      	cmp	r0, #0
 8008516:	d033      	beq.n	8008580 <_strtod_l+0x1c8>
 8008518:	2000      	movs	r0, #0
 800851a:	462a      	mov	r2, r5
 800851c:	465c      	mov	r4, fp
 800851e:	4603      	mov	r3, r0
 8008520:	9004      	str	r0, [sp, #16]
 8008522:	2a65      	cmp	r2, #101	; 0x65
 8008524:	d001      	beq.n	800852a <_strtod_l+0x172>
 8008526:	2a45      	cmp	r2, #69	; 0x45
 8008528:	d114      	bne.n	8008554 <_strtod_l+0x19c>
 800852a:	b91c      	cbnz	r4, 8008534 <_strtod_l+0x17c>
 800852c:	9a07      	ldr	r2, [sp, #28]
 800852e:	4302      	orrs	r2, r0
 8008530:	d09f      	beq.n	8008472 <_strtod_l+0xba>
 8008532:	2400      	movs	r4, #0
 8008534:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8008536:	1c72      	adds	r2, r6, #1
 8008538:	9219      	str	r2, [sp, #100]	; 0x64
 800853a:	7872      	ldrb	r2, [r6, #1]
 800853c:	2a2b      	cmp	r2, #43	; 0x2b
 800853e:	d079      	beq.n	8008634 <_strtod_l+0x27c>
 8008540:	2a2d      	cmp	r2, #45	; 0x2d
 8008542:	f000 8083 	beq.w	800864c <_strtod_l+0x294>
 8008546:	2700      	movs	r7, #0
 8008548:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800854c:	2909      	cmp	r1, #9
 800854e:	f240 8083 	bls.w	8008658 <_strtod_l+0x2a0>
 8008552:	9619      	str	r6, [sp, #100]	; 0x64
 8008554:	2500      	movs	r5, #0
 8008556:	e09f      	b.n	8008698 <_strtod_l+0x2e0>
 8008558:	2300      	movs	r3, #0
 800855a:	e7c8      	b.n	80084ee <_strtod_l+0x136>
 800855c:	f1bb 0f08 	cmp.w	fp, #8
 8008560:	bfd5      	itete	le
 8008562:	9906      	ldrle	r1, [sp, #24]
 8008564:	9905      	ldrgt	r1, [sp, #20]
 8008566:	fb02 3301 	mlale	r3, r2, r1, r3
 800856a:	fb02 3301 	mlagt	r3, r2, r1, r3
 800856e:	f100 0001 	add.w	r0, r0, #1
 8008572:	bfd4      	ite	le
 8008574:	9306      	strle	r3, [sp, #24]
 8008576:	9305      	strgt	r3, [sp, #20]
 8008578:	f10b 0b01 	add.w	fp, fp, #1
 800857c:	9019      	str	r0, [sp, #100]	; 0x64
 800857e:	e7be      	b.n	80084fe <_strtod_l+0x146>
 8008580:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008582:	191a      	adds	r2, r3, r4
 8008584:	9219      	str	r2, [sp, #100]	; 0x64
 8008586:	5d1a      	ldrb	r2, [r3, r4]
 8008588:	f1bb 0f00 	cmp.w	fp, #0
 800858c:	d036      	beq.n	80085fc <_strtod_l+0x244>
 800858e:	465c      	mov	r4, fp
 8008590:	9004      	str	r0, [sp, #16]
 8008592:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008596:	2b09      	cmp	r3, #9
 8008598:	d912      	bls.n	80085c0 <_strtod_l+0x208>
 800859a:	2301      	movs	r3, #1
 800859c:	e7c1      	b.n	8008522 <_strtod_l+0x16a>
 800859e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80085a0:	3001      	adds	r0, #1
 80085a2:	1c5a      	adds	r2, r3, #1
 80085a4:	9219      	str	r2, [sp, #100]	; 0x64
 80085a6:	785a      	ldrb	r2, [r3, #1]
 80085a8:	2a30      	cmp	r2, #48	; 0x30
 80085aa:	d0f8      	beq.n	800859e <_strtod_l+0x1e6>
 80085ac:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80085b0:	2b08      	cmp	r3, #8
 80085b2:	f200 84d5 	bhi.w	8008f60 <_strtod_l+0xba8>
 80085b6:	9004      	str	r0, [sp, #16]
 80085b8:	2000      	movs	r0, #0
 80085ba:	4604      	mov	r4, r0
 80085bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80085be:	9308      	str	r3, [sp, #32]
 80085c0:	3a30      	subs	r2, #48	; 0x30
 80085c2:	f100 0301 	add.w	r3, r0, #1
 80085c6:	d013      	beq.n	80085f0 <_strtod_l+0x238>
 80085c8:	9904      	ldr	r1, [sp, #16]
 80085ca:	1905      	adds	r5, r0, r4
 80085cc:	4419      	add	r1, r3
 80085ce:	9104      	str	r1, [sp, #16]
 80085d0:	4623      	mov	r3, r4
 80085d2:	210a      	movs	r1, #10
 80085d4:	42ab      	cmp	r3, r5
 80085d6:	d113      	bne.n	8008600 <_strtod_l+0x248>
 80085d8:	1823      	adds	r3, r4, r0
 80085da:	2b08      	cmp	r3, #8
 80085dc:	f104 0401 	add.w	r4, r4, #1
 80085e0:	4404      	add	r4, r0
 80085e2:	dc1b      	bgt.n	800861c <_strtod_l+0x264>
 80085e4:	230a      	movs	r3, #10
 80085e6:	9906      	ldr	r1, [sp, #24]
 80085e8:	fb03 2301 	mla	r3, r3, r1, r2
 80085ec:	9306      	str	r3, [sp, #24]
 80085ee:	2300      	movs	r3, #0
 80085f0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80085f2:	4618      	mov	r0, r3
 80085f4:	1c51      	adds	r1, r2, #1
 80085f6:	9119      	str	r1, [sp, #100]	; 0x64
 80085f8:	7852      	ldrb	r2, [r2, #1]
 80085fa:	e7ca      	b.n	8008592 <_strtod_l+0x1da>
 80085fc:	4658      	mov	r0, fp
 80085fe:	e7d3      	b.n	80085a8 <_strtod_l+0x1f0>
 8008600:	2b08      	cmp	r3, #8
 8008602:	dc04      	bgt.n	800860e <_strtod_l+0x256>
 8008604:	9f06      	ldr	r7, [sp, #24]
 8008606:	434f      	muls	r7, r1
 8008608:	9706      	str	r7, [sp, #24]
 800860a:	3301      	adds	r3, #1
 800860c:	e7e2      	b.n	80085d4 <_strtod_l+0x21c>
 800860e:	1c5f      	adds	r7, r3, #1
 8008610:	2f10      	cmp	r7, #16
 8008612:	bfde      	ittt	le
 8008614:	9f05      	ldrle	r7, [sp, #20]
 8008616:	434f      	mulle	r7, r1
 8008618:	9705      	strle	r7, [sp, #20]
 800861a:	e7f6      	b.n	800860a <_strtod_l+0x252>
 800861c:	2c10      	cmp	r4, #16
 800861e:	bfdf      	itttt	le
 8008620:	230a      	movle	r3, #10
 8008622:	9905      	ldrle	r1, [sp, #20]
 8008624:	fb03 2301 	mlale	r3, r3, r1, r2
 8008628:	9305      	strle	r3, [sp, #20]
 800862a:	e7e0      	b.n	80085ee <_strtod_l+0x236>
 800862c:	2300      	movs	r3, #0
 800862e:	9304      	str	r3, [sp, #16]
 8008630:	2301      	movs	r3, #1
 8008632:	e77b      	b.n	800852c <_strtod_l+0x174>
 8008634:	2700      	movs	r7, #0
 8008636:	1cb2      	adds	r2, r6, #2
 8008638:	9219      	str	r2, [sp, #100]	; 0x64
 800863a:	78b2      	ldrb	r2, [r6, #2]
 800863c:	e784      	b.n	8008548 <_strtod_l+0x190>
 800863e:	bf00      	nop
 8008640:	0800e11c 	.word	0x0800e11c
 8008644:	0800de70 	.word	0x0800de70
 8008648:	7ff00000 	.word	0x7ff00000
 800864c:	2701      	movs	r7, #1
 800864e:	e7f2      	b.n	8008636 <_strtod_l+0x27e>
 8008650:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008652:	1c51      	adds	r1, r2, #1
 8008654:	9119      	str	r1, [sp, #100]	; 0x64
 8008656:	7852      	ldrb	r2, [r2, #1]
 8008658:	2a30      	cmp	r2, #48	; 0x30
 800865a:	d0f9      	beq.n	8008650 <_strtod_l+0x298>
 800865c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008660:	2908      	cmp	r1, #8
 8008662:	f63f af77 	bhi.w	8008554 <_strtod_l+0x19c>
 8008666:	f04f 0e0a 	mov.w	lr, #10
 800866a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800866e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008670:	9209      	str	r2, [sp, #36]	; 0x24
 8008672:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008674:	1c51      	adds	r1, r2, #1
 8008676:	9119      	str	r1, [sp, #100]	; 0x64
 8008678:	7852      	ldrb	r2, [r2, #1]
 800867a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800867e:	2d09      	cmp	r5, #9
 8008680:	d935      	bls.n	80086ee <_strtod_l+0x336>
 8008682:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008684:	1b49      	subs	r1, r1, r5
 8008686:	2908      	cmp	r1, #8
 8008688:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800868c:	dc02      	bgt.n	8008694 <_strtod_l+0x2dc>
 800868e:	4565      	cmp	r5, ip
 8008690:	bfa8      	it	ge
 8008692:	4665      	movge	r5, ip
 8008694:	b107      	cbz	r7, 8008698 <_strtod_l+0x2e0>
 8008696:	426d      	negs	r5, r5
 8008698:	2c00      	cmp	r4, #0
 800869a:	d14c      	bne.n	8008736 <_strtod_l+0x37e>
 800869c:	9907      	ldr	r1, [sp, #28]
 800869e:	4301      	orrs	r1, r0
 80086a0:	f47f aecb 	bne.w	800843a <_strtod_l+0x82>
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	f47f aee4 	bne.w	8008472 <_strtod_l+0xba>
 80086aa:	2a69      	cmp	r2, #105	; 0x69
 80086ac:	d026      	beq.n	80086fc <_strtod_l+0x344>
 80086ae:	dc23      	bgt.n	80086f8 <_strtod_l+0x340>
 80086b0:	2a49      	cmp	r2, #73	; 0x49
 80086b2:	d023      	beq.n	80086fc <_strtod_l+0x344>
 80086b4:	2a4e      	cmp	r2, #78	; 0x4e
 80086b6:	f47f aedc 	bne.w	8008472 <_strtod_l+0xba>
 80086ba:	499d      	ldr	r1, [pc, #628]	; (8008930 <_strtod_l+0x578>)
 80086bc:	a819      	add	r0, sp, #100	; 0x64
 80086be:	f002 f897 	bl	800a7f0 <__match>
 80086c2:	2800      	cmp	r0, #0
 80086c4:	f43f aed5 	beq.w	8008472 <_strtod_l+0xba>
 80086c8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80086ca:	781b      	ldrb	r3, [r3, #0]
 80086cc:	2b28      	cmp	r3, #40	; 0x28
 80086ce:	d12c      	bne.n	800872a <_strtod_l+0x372>
 80086d0:	4998      	ldr	r1, [pc, #608]	; (8008934 <_strtod_l+0x57c>)
 80086d2:	aa1c      	add	r2, sp, #112	; 0x70
 80086d4:	a819      	add	r0, sp, #100	; 0x64
 80086d6:	f002 f89f 	bl	800a818 <__hexnan>
 80086da:	2805      	cmp	r0, #5
 80086dc:	d125      	bne.n	800872a <_strtod_l+0x372>
 80086de:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80086e0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 80086e4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80086e8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80086ec:	e6a5      	b.n	800843a <_strtod_l+0x82>
 80086ee:	fb0e 2c0c 	mla	ip, lr, ip, r2
 80086f2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80086f6:	e7bc      	b.n	8008672 <_strtod_l+0x2ba>
 80086f8:	2a6e      	cmp	r2, #110	; 0x6e
 80086fa:	e7dc      	b.n	80086b6 <_strtod_l+0x2fe>
 80086fc:	498e      	ldr	r1, [pc, #568]	; (8008938 <_strtod_l+0x580>)
 80086fe:	a819      	add	r0, sp, #100	; 0x64
 8008700:	f002 f876 	bl	800a7f0 <__match>
 8008704:	2800      	cmp	r0, #0
 8008706:	f43f aeb4 	beq.w	8008472 <_strtod_l+0xba>
 800870a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800870c:	498b      	ldr	r1, [pc, #556]	; (800893c <_strtod_l+0x584>)
 800870e:	3b01      	subs	r3, #1
 8008710:	a819      	add	r0, sp, #100	; 0x64
 8008712:	9319      	str	r3, [sp, #100]	; 0x64
 8008714:	f002 f86c 	bl	800a7f0 <__match>
 8008718:	b910      	cbnz	r0, 8008720 <_strtod_l+0x368>
 800871a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800871c:	3301      	adds	r3, #1
 800871e:	9319      	str	r3, [sp, #100]	; 0x64
 8008720:	f04f 0800 	mov.w	r8, #0
 8008724:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8008940 <_strtod_l+0x588>
 8008728:	e687      	b.n	800843a <_strtod_l+0x82>
 800872a:	4886      	ldr	r0, [pc, #536]	; (8008944 <_strtod_l+0x58c>)
 800872c:	f003 fa00 	bl	800bb30 <nan>
 8008730:	4680      	mov	r8, r0
 8008732:	4689      	mov	r9, r1
 8008734:	e681      	b.n	800843a <_strtod_l+0x82>
 8008736:	9b04      	ldr	r3, [sp, #16]
 8008738:	f1bb 0f00 	cmp.w	fp, #0
 800873c:	bf08      	it	eq
 800873e:	46a3      	moveq	fp, r4
 8008740:	1aeb      	subs	r3, r5, r3
 8008742:	2c10      	cmp	r4, #16
 8008744:	9806      	ldr	r0, [sp, #24]
 8008746:	4626      	mov	r6, r4
 8008748:	9307      	str	r3, [sp, #28]
 800874a:	bfa8      	it	ge
 800874c:	2610      	movge	r6, #16
 800874e:	f7f7 fe49 	bl	80003e4 <__aeabi_ui2d>
 8008752:	2c09      	cmp	r4, #9
 8008754:	4680      	mov	r8, r0
 8008756:	4689      	mov	r9, r1
 8008758:	dd13      	ble.n	8008782 <_strtod_l+0x3ca>
 800875a:	4b7b      	ldr	r3, [pc, #492]	; (8008948 <_strtod_l+0x590>)
 800875c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008760:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008764:	f7f7 feb8 	bl	80004d8 <__aeabi_dmul>
 8008768:	4680      	mov	r8, r0
 800876a:	9805      	ldr	r0, [sp, #20]
 800876c:	4689      	mov	r9, r1
 800876e:	f7f7 fe39 	bl	80003e4 <__aeabi_ui2d>
 8008772:	4602      	mov	r2, r0
 8008774:	460b      	mov	r3, r1
 8008776:	4640      	mov	r0, r8
 8008778:	4649      	mov	r1, r9
 800877a:	f7f7 fcf7 	bl	800016c <__adddf3>
 800877e:	4680      	mov	r8, r0
 8008780:	4689      	mov	r9, r1
 8008782:	2c0f      	cmp	r4, #15
 8008784:	dc36      	bgt.n	80087f4 <_strtod_l+0x43c>
 8008786:	9b07      	ldr	r3, [sp, #28]
 8008788:	2b00      	cmp	r3, #0
 800878a:	f43f ae56 	beq.w	800843a <_strtod_l+0x82>
 800878e:	dd22      	ble.n	80087d6 <_strtod_l+0x41e>
 8008790:	2b16      	cmp	r3, #22
 8008792:	dc09      	bgt.n	80087a8 <_strtod_l+0x3f0>
 8008794:	496c      	ldr	r1, [pc, #432]	; (8008948 <_strtod_l+0x590>)
 8008796:	4642      	mov	r2, r8
 8008798:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800879c:	464b      	mov	r3, r9
 800879e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80087a2:	f7f7 fe99 	bl	80004d8 <__aeabi_dmul>
 80087a6:	e7c3      	b.n	8008730 <_strtod_l+0x378>
 80087a8:	9a07      	ldr	r2, [sp, #28]
 80087aa:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80087ae:	4293      	cmp	r3, r2
 80087b0:	db20      	blt.n	80087f4 <_strtod_l+0x43c>
 80087b2:	4d65      	ldr	r5, [pc, #404]	; (8008948 <_strtod_l+0x590>)
 80087b4:	f1c4 040f 	rsb	r4, r4, #15
 80087b8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80087bc:	4642      	mov	r2, r8
 80087be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80087c2:	464b      	mov	r3, r9
 80087c4:	f7f7 fe88 	bl	80004d8 <__aeabi_dmul>
 80087c8:	9b07      	ldr	r3, [sp, #28]
 80087ca:	1b1c      	subs	r4, r3, r4
 80087cc:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80087d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80087d4:	e7e5      	b.n	80087a2 <_strtod_l+0x3ea>
 80087d6:	9b07      	ldr	r3, [sp, #28]
 80087d8:	3316      	adds	r3, #22
 80087da:	db0b      	blt.n	80087f4 <_strtod_l+0x43c>
 80087dc:	9b04      	ldr	r3, [sp, #16]
 80087de:	4640      	mov	r0, r8
 80087e0:	1b5d      	subs	r5, r3, r5
 80087e2:	4b59      	ldr	r3, [pc, #356]	; (8008948 <_strtod_l+0x590>)
 80087e4:	4649      	mov	r1, r9
 80087e6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80087ea:	e9d5 2300 	ldrd	r2, r3, [r5]
 80087ee:	f7f7 ff9d 	bl	800072c <__aeabi_ddiv>
 80087f2:	e79d      	b.n	8008730 <_strtod_l+0x378>
 80087f4:	9b07      	ldr	r3, [sp, #28]
 80087f6:	1ba6      	subs	r6, r4, r6
 80087f8:	441e      	add	r6, r3
 80087fa:	2e00      	cmp	r6, #0
 80087fc:	dd74      	ble.n	80088e8 <_strtod_l+0x530>
 80087fe:	f016 030f 	ands.w	r3, r6, #15
 8008802:	d00a      	beq.n	800881a <_strtod_l+0x462>
 8008804:	4950      	ldr	r1, [pc, #320]	; (8008948 <_strtod_l+0x590>)
 8008806:	4642      	mov	r2, r8
 8008808:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800880c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008810:	464b      	mov	r3, r9
 8008812:	f7f7 fe61 	bl	80004d8 <__aeabi_dmul>
 8008816:	4680      	mov	r8, r0
 8008818:	4689      	mov	r9, r1
 800881a:	f036 060f 	bics.w	r6, r6, #15
 800881e:	d052      	beq.n	80088c6 <_strtod_l+0x50e>
 8008820:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8008824:	dd27      	ble.n	8008876 <_strtod_l+0x4be>
 8008826:	f04f 0b00 	mov.w	fp, #0
 800882a:	f8cd b010 	str.w	fp, [sp, #16]
 800882e:	f8cd b020 	str.w	fp, [sp, #32]
 8008832:	f8cd b018 	str.w	fp, [sp, #24]
 8008836:	2322      	movs	r3, #34	; 0x22
 8008838:	f04f 0800 	mov.w	r8, #0
 800883c:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8008940 <_strtod_l+0x588>
 8008840:	f8ca 3000 	str.w	r3, [sl]
 8008844:	9b08      	ldr	r3, [sp, #32]
 8008846:	2b00      	cmp	r3, #0
 8008848:	f43f adf7 	beq.w	800843a <_strtod_l+0x82>
 800884c:	4650      	mov	r0, sl
 800884e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008850:	f002 f952 	bl	800aaf8 <_Bfree>
 8008854:	4650      	mov	r0, sl
 8008856:	9906      	ldr	r1, [sp, #24]
 8008858:	f002 f94e 	bl	800aaf8 <_Bfree>
 800885c:	4650      	mov	r0, sl
 800885e:	9904      	ldr	r1, [sp, #16]
 8008860:	f002 f94a 	bl	800aaf8 <_Bfree>
 8008864:	4650      	mov	r0, sl
 8008866:	9908      	ldr	r1, [sp, #32]
 8008868:	f002 f946 	bl	800aaf8 <_Bfree>
 800886c:	4659      	mov	r1, fp
 800886e:	4650      	mov	r0, sl
 8008870:	f002 f942 	bl	800aaf8 <_Bfree>
 8008874:	e5e1      	b.n	800843a <_strtod_l+0x82>
 8008876:	4b35      	ldr	r3, [pc, #212]	; (800894c <_strtod_l+0x594>)
 8008878:	4640      	mov	r0, r8
 800887a:	9305      	str	r3, [sp, #20]
 800887c:	2300      	movs	r3, #0
 800887e:	4649      	mov	r1, r9
 8008880:	461f      	mov	r7, r3
 8008882:	1136      	asrs	r6, r6, #4
 8008884:	2e01      	cmp	r6, #1
 8008886:	dc21      	bgt.n	80088cc <_strtod_l+0x514>
 8008888:	b10b      	cbz	r3, 800888e <_strtod_l+0x4d6>
 800888a:	4680      	mov	r8, r0
 800888c:	4689      	mov	r9, r1
 800888e:	4b2f      	ldr	r3, [pc, #188]	; (800894c <_strtod_l+0x594>)
 8008890:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8008894:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008898:	4642      	mov	r2, r8
 800889a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800889e:	464b      	mov	r3, r9
 80088a0:	f7f7 fe1a 	bl	80004d8 <__aeabi_dmul>
 80088a4:	4b26      	ldr	r3, [pc, #152]	; (8008940 <_strtod_l+0x588>)
 80088a6:	460a      	mov	r2, r1
 80088a8:	400b      	ands	r3, r1
 80088aa:	4929      	ldr	r1, [pc, #164]	; (8008950 <_strtod_l+0x598>)
 80088ac:	4680      	mov	r8, r0
 80088ae:	428b      	cmp	r3, r1
 80088b0:	d8b9      	bhi.n	8008826 <_strtod_l+0x46e>
 80088b2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80088b6:	428b      	cmp	r3, r1
 80088b8:	bf86      	itte	hi
 80088ba:	f04f 38ff 	movhi.w	r8, #4294967295
 80088be:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8008954 <_strtod_l+0x59c>
 80088c2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80088c6:	2300      	movs	r3, #0
 80088c8:	9305      	str	r3, [sp, #20]
 80088ca:	e07f      	b.n	80089cc <_strtod_l+0x614>
 80088cc:	07f2      	lsls	r2, r6, #31
 80088ce:	d505      	bpl.n	80088dc <_strtod_l+0x524>
 80088d0:	9b05      	ldr	r3, [sp, #20]
 80088d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d6:	f7f7 fdff 	bl	80004d8 <__aeabi_dmul>
 80088da:	2301      	movs	r3, #1
 80088dc:	9a05      	ldr	r2, [sp, #20]
 80088de:	3701      	adds	r7, #1
 80088e0:	3208      	adds	r2, #8
 80088e2:	1076      	asrs	r6, r6, #1
 80088e4:	9205      	str	r2, [sp, #20]
 80088e6:	e7cd      	b.n	8008884 <_strtod_l+0x4cc>
 80088e8:	d0ed      	beq.n	80088c6 <_strtod_l+0x50e>
 80088ea:	4276      	negs	r6, r6
 80088ec:	f016 020f 	ands.w	r2, r6, #15
 80088f0:	d00a      	beq.n	8008908 <_strtod_l+0x550>
 80088f2:	4b15      	ldr	r3, [pc, #84]	; (8008948 <_strtod_l+0x590>)
 80088f4:	4640      	mov	r0, r8
 80088f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80088fa:	4649      	mov	r1, r9
 80088fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008900:	f7f7 ff14 	bl	800072c <__aeabi_ddiv>
 8008904:	4680      	mov	r8, r0
 8008906:	4689      	mov	r9, r1
 8008908:	1136      	asrs	r6, r6, #4
 800890a:	d0dc      	beq.n	80088c6 <_strtod_l+0x50e>
 800890c:	2e1f      	cmp	r6, #31
 800890e:	dd23      	ble.n	8008958 <_strtod_l+0x5a0>
 8008910:	f04f 0b00 	mov.w	fp, #0
 8008914:	f8cd b010 	str.w	fp, [sp, #16]
 8008918:	f8cd b020 	str.w	fp, [sp, #32]
 800891c:	f8cd b018 	str.w	fp, [sp, #24]
 8008920:	2322      	movs	r3, #34	; 0x22
 8008922:	f04f 0800 	mov.w	r8, #0
 8008926:	f04f 0900 	mov.w	r9, #0
 800892a:	f8ca 3000 	str.w	r3, [sl]
 800892e:	e789      	b.n	8008844 <_strtod_l+0x48c>
 8008930:	0800de41 	.word	0x0800de41
 8008934:	0800de84 	.word	0x0800de84
 8008938:	0800de39 	.word	0x0800de39
 800893c:	0800dfc4 	.word	0x0800dfc4
 8008940:	7ff00000 	.word	0x7ff00000
 8008944:	0800e2d8 	.word	0x0800e2d8
 8008948:	0800e1b8 	.word	0x0800e1b8
 800894c:	0800e190 	.word	0x0800e190
 8008950:	7ca00000 	.word	0x7ca00000
 8008954:	7fefffff 	.word	0x7fefffff
 8008958:	f016 0310 	ands.w	r3, r6, #16
 800895c:	bf18      	it	ne
 800895e:	236a      	movne	r3, #106	; 0x6a
 8008960:	4640      	mov	r0, r8
 8008962:	9305      	str	r3, [sp, #20]
 8008964:	4649      	mov	r1, r9
 8008966:	2300      	movs	r3, #0
 8008968:	4fb0      	ldr	r7, [pc, #704]	; (8008c2c <_strtod_l+0x874>)
 800896a:	07f2      	lsls	r2, r6, #31
 800896c:	d504      	bpl.n	8008978 <_strtod_l+0x5c0>
 800896e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008972:	f7f7 fdb1 	bl	80004d8 <__aeabi_dmul>
 8008976:	2301      	movs	r3, #1
 8008978:	1076      	asrs	r6, r6, #1
 800897a:	f107 0708 	add.w	r7, r7, #8
 800897e:	d1f4      	bne.n	800896a <_strtod_l+0x5b2>
 8008980:	b10b      	cbz	r3, 8008986 <_strtod_l+0x5ce>
 8008982:	4680      	mov	r8, r0
 8008984:	4689      	mov	r9, r1
 8008986:	9b05      	ldr	r3, [sp, #20]
 8008988:	b1c3      	cbz	r3, 80089bc <_strtod_l+0x604>
 800898a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800898e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008992:	2b00      	cmp	r3, #0
 8008994:	4649      	mov	r1, r9
 8008996:	dd11      	ble.n	80089bc <_strtod_l+0x604>
 8008998:	2b1f      	cmp	r3, #31
 800899a:	f340 8127 	ble.w	8008bec <_strtod_l+0x834>
 800899e:	2b34      	cmp	r3, #52	; 0x34
 80089a0:	bfd8      	it	le
 80089a2:	f04f 33ff 	movle.w	r3, #4294967295
 80089a6:	f04f 0800 	mov.w	r8, #0
 80089aa:	bfcf      	iteee	gt
 80089ac:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80089b0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80089b4:	fa03 f202 	lslle.w	r2, r3, r2
 80089b8:	ea02 0901 	andle.w	r9, r2, r1
 80089bc:	2200      	movs	r2, #0
 80089be:	2300      	movs	r3, #0
 80089c0:	4640      	mov	r0, r8
 80089c2:	4649      	mov	r1, r9
 80089c4:	f7f7 fff0 	bl	80009a8 <__aeabi_dcmpeq>
 80089c8:	2800      	cmp	r0, #0
 80089ca:	d1a1      	bne.n	8008910 <_strtod_l+0x558>
 80089cc:	9b06      	ldr	r3, [sp, #24]
 80089ce:	465a      	mov	r2, fp
 80089d0:	9300      	str	r3, [sp, #0]
 80089d2:	4650      	mov	r0, sl
 80089d4:	4623      	mov	r3, r4
 80089d6:	9908      	ldr	r1, [sp, #32]
 80089d8:	f002 f8f6 	bl	800abc8 <__s2b>
 80089dc:	9008      	str	r0, [sp, #32]
 80089de:	2800      	cmp	r0, #0
 80089e0:	f43f af21 	beq.w	8008826 <_strtod_l+0x46e>
 80089e4:	9b04      	ldr	r3, [sp, #16]
 80089e6:	f04f 0b00 	mov.w	fp, #0
 80089ea:	1b5d      	subs	r5, r3, r5
 80089ec:	9b07      	ldr	r3, [sp, #28]
 80089ee:	f8cd b010 	str.w	fp, [sp, #16]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	bfb4      	ite	lt
 80089f6:	462b      	movlt	r3, r5
 80089f8:	2300      	movge	r3, #0
 80089fa:	930e      	str	r3, [sp, #56]	; 0x38
 80089fc:	9b07      	ldr	r3, [sp, #28]
 80089fe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008a02:	9314      	str	r3, [sp, #80]	; 0x50
 8008a04:	9b08      	ldr	r3, [sp, #32]
 8008a06:	4650      	mov	r0, sl
 8008a08:	6859      	ldr	r1, [r3, #4]
 8008a0a:	f002 f835 	bl	800aa78 <_Balloc>
 8008a0e:	9006      	str	r0, [sp, #24]
 8008a10:	2800      	cmp	r0, #0
 8008a12:	f43f af10 	beq.w	8008836 <_strtod_l+0x47e>
 8008a16:	9b08      	ldr	r3, [sp, #32]
 8008a18:	300c      	adds	r0, #12
 8008a1a:	691a      	ldr	r2, [r3, #16]
 8008a1c:	f103 010c 	add.w	r1, r3, #12
 8008a20:	3202      	adds	r2, #2
 8008a22:	0092      	lsls	r2, r2, #2
 8008a24:	f7fe fd70 	bl	8007508 <memcpy>
 8008a28:	ab1c      	add	r3, sp, #112	; 0x70
 8008a2a:	9301      	str	r3, [sp, #4]
 8008a2c:	ab1b      	add	r3, sp, #108	; 0x6c
 8008a2e:	9300      	str	r3, [sp, #0]
 8008a30:	4642      	mov	r2, r8
 8008a32:	464b      	mov	r3, r9
 8008a34:	4650      	mov	r0, sl
 8008a36:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8008a3a:	f002 fc07 	bl	800b24c <__d2b>
 8008a3e:	901a      	str	r0, [sp, #104]	; 0x68
 8008a40:	2800      	cmp	r0, #0
 8008a42:	f43f aef8 	beq.w	8008836 <_strtod_l+0x47e>
 8008a46:	2101      	movs	r1, #1
 8008a48:	4650      	mov	r0, sl
 8008a4a:	f002 f955 	bl	800acf8 <__i2b>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	9004      	str	r0, [sp, #16]
 8008a52:	2800      	cmp	r0, #0
 8008a54:	f43f aeef 	beq.w	8008836 <_strtod_l+0x47e>
 8008a58:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8008a5a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008a5c:	2d00      	cmp	r5, #0
 8008a5e:	bfab      	itete	ge
 8008a60:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8008a62:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8008a64:	18ee      	addge	r6, r5, r3
 8008a66:	1b5c      	sublt	r4, r3, r5
 8008a68:	9b05      	ldr	r3, [sp, #20]
 8008a6a:	bfa8      	it	ge
 8008a6c:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8008a6e:	eba5 0503 	sub.w	r5, r5, r3
 8008a72:	4415      	add	r5, r2
 8008a74:	4b6e      	ldr	r3, [pc, #440]	; (8008c30 <_strtod_l+0x878>)
 8008a76:	f105 35ff 	add.w	r5, r5, #4294967295
 8008a7a:	bfb8      	it	lt
 8008a7c:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8008a7e:	429d      	cmp	r5, r3
 8008a80:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008a84:	f280 80c4 	bge.w	8008c10 <_strtod_l+0x858>
 8008a88:	1b5b      	subs	r3, r3, r5
 8008a8a:	2b1f      	cmp	r3, #31
 8008a8c:	f04f 0701 	mov.w	r7, #1
 8008a90:	eba2 0203 	sub.w	r2, r2, r3
 8008a94:	f300 80b1 	bgt.w	8008bfa <_strtod_l+0x842>
 8008a98:	2500      	movs	r5, #0
 8008a9a:	fa07 f303 	lsl.w	r3, r7, r3
 8008a9e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008aa0:	18b7      	adds	r7, r6, r2
 8008aa2:	9b05      	ldr	r3, [sp, #20]
 8008aa4:	42be      	cmp	r6, r7
 8008aa6:	4414      	add	r4, r2
 8008aa8:	441c      	add	r4, r3
 8008aaa:	4633      	mov	r3, r6
 8008aac:	bfa8      	it	ge
 8008aae:	463b      	movge	r3, r7
 8008ab0:	42a3      	cmp	r3, r4
 8008ab2:	bfa8      	it	ge
 8008ab4:	4623      	movge	r3, r4
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	bfc2      	ittt	gt
 8008aba:	1aff      	subgt	r7, r7, r3
 8008abc:	1ae4      	subgt	r4, r4, r3
 8008abe:	1af6      	subgt	r6, r6, r3
 8008ac0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	dd17      	ble.n	8008af6 <_strtod_l+0x73e>
 8008ac6:	461a      	mov	r2, r3
 8008ac8:	4650      	mov	r0, sl
 8008aca:	9904      	ldr	r1, [sp, #16]
 8008acc:	f002 f9d2 	bl	800ae74 <__pow5mult>
 8008ad0:	9004      	str	r0, [sp, #16]
 8008ad2:	2800      	cmp	r0, #0
 8008ad4:	f43f aeaf 	beq.w	8008836 <_strtod_l+0x47e>
 8008ad8:	4601      	mov	r1, r0
 8008ada:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008adc:	4650      	mov	r0, sl
 8008ade:	f002 f921 	bl	800ad24 <__multiply>
 8008ae2:	9009      	str	r0, [sp, #36]	; 0x24
 8008ae4:	2800      	cmp	r0, #0
 8008ae6:	f43f aea6 	beq.w	8008836 <_strtod_l+0x47e>
 8008aea:	4650      	mov	r0, sl
 8008aec:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008aee:	f002 f803 	bl	800aaf8 <_Bfree>
 8008af2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008af4:	931a      	str	r3, [sp, #104]	; 0x68
 8008af6:	2f00      	cmp	r7, #0
 8008af8:	f300 808e 	bgt.w	8008c18 <_strtod_l+0x860>
 8008afc:	9b07      	ldr	r3, [sp, #28]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	dd08      	ble.n	8008b14 <_strtod_l+0x75c>
 8008b02:	4650      	mov	r0, sl
 8008b04:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008b06:	9906      	ldr	r1, [sp, #24]
 8008b08:	f002 f9b4 	bl	800ae74 <__pow5mult>
 8008b0c:	9006      	str	r0, [sp, #24]
 8008b0e:	2800      	cmp	r0, #0
 8008b10:	f43f ae91 	beq.w	8008836 <_strtod_l+0x47e>
 8008b14:	2c00      	cmp	r4, #0
 8008b16:	dd08      	ble.n	8008b2a <_strtod_l+0x772>
 8008b18:	4622      	mov	r2, r4
 8008b1a:	4650      	mov	r0, sl
 8008b1c:	9906      	ldr	r1, [sp, #24]
 8008b1e:	f002 fa03 	bl	800af28 <__lshift>
 8008b22:	9006      	str	r0, [sp, #24]
 8008b24:	2800      	cmp	r0, #0
 8008b26:	f43f ae86 	beq.w	8008836 <_strtod_l+0x47e>
 8008b2a:	2e00      	cmp	r6, #0
 8008b2c:	dd08      	ble.n	8008b40 <_strtod_l+0x788>
 8008b2e:	4632      	mov	r2, r6
 8008b30:	4650      	mov	r0, sl
 8008b32:	9904      	ldr	r1, [sp, #16]
 8008b34:	f002 f9f8 	bl	800af28 <__lshift>
 8008b38:	9004      	str	r0, [sp, #16]
 8008b3a:	2800      	cmp	r0, #0
 8008b3c:	f43f ae7b 	beq.w	8008836 <_strtod_l+0x47e>
 8008b40:	4650      	mov	r0, sl
 8008b42:	9a06      	ldr	r2, [sp, #24]
 8008b44:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008b46:	f002 fa7b 	bl	800b040 <__mdiff>
 8008b4a:	4683      	mov	fp, r0
 8008b4c:	2800      	cmp	r0, #0
 8008b4e:	f43f ae72 	beq.w	8008836 <_strtod_l+0x47e>
 8008b52:	2400      	movs	r4, #0
 8008b54:	68c3      	ldr	r3, [r0, #12]
 8008b56:	9904      	ldr	r1, [sp, #16]
 8008b58:	60c4      	str	r4, [r0, #12]
 8008b5a:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b5c:	f002 fa54 	bl	800b008 <__mcmp>
 8008b60:	42a0      	cmp	r0, r4
 8008b62:	da6b      	bge.n	8008c3c <_strtod_l+0x884>
 8008b64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b66:	ea53 0308 	orrs.w	r3, r3, r8
 8008b6a:	f040 8091 	bne.w	8008c90 <_strtod_l+0x8d8>
 8008b6e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	f040 808c 	bne.w	8008c90 <_strtod_l+0x8d8>
 8008b78:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008b7c:	0d1b      	lsrs	r3, r3, #20
 8008b7e:	051b      	lsls	r3, r3, #20
 8008b80:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008b84:	f240 8084 	bls.w	8008c90 <_strtod_l+0x8d8>
 8008b88:	f8db 3014 	ldr.w	r3, [fp, #20]
 8008b8c:	b91b      	cbnz	r3, 8008b96 <_strtod_l+0x7de>
 8008b8e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8008b92:	2b01      	cmp	r3, #1
 8008b94:	dd7c      	ble.n	8008c90 <_strtod_l+0x8d8>
 8008b96:	4659      	mov	r1, fp
 8008b98:	2201      	movs	r2, #1
 8008b9a:	4650      	mov	r0, sl
 8008b9c:	f002 f9c4 	bl	800af28 <__lshift>
 8008ba0:	9904      	ldr	r1, [sp, #16]
 8008ba2:	4683      	mov	fp, r0
 8008ba4:	f002 fa30 	bl	800b008 <__mcmp>
 8008ba8:	2800      	cmp	r0, #0
 8008baa:	dd71      	ble.n	8008c90 <_strtod_l+0x8d8>
 8008bac:	9905      	ldr	r1, [sp, #20]
 8008bae:	464b      	mov	r3, r9
 8008bb0:	4a20      	ldr	r2, [pc, #128]	; (8008c34 <_strtod_l+0x87c>)
 8008bb2:	2900      	cmp	r1, #0
 8008bb4:	f000 808c 	beq.w	8008cd0 <_strtod_l+0x918>
 8008bb8:	ea02 0109 	and.w	r1, r2, r9
 8008bbc:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008bc0:	f300 8086 	bgt.w	8008cd0 <_strtod_l+0x918>
 8008bc4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008bc8:	f77f aeaa 	ble.w	8008920 <_strtod_l+0x568>
 8008bcc:	4640      	mov	r0, r8
 8008bce:	4649      	mov	r1, r9
 8008bd0:	4b19      	ldr	r3, [pc, #100]	; (8008c38 <_strtod_l+0x880>)
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	f7f7 fc80 	bl	80004d8 <__aeabi_dmul>
 8008bd8:	460b      	mov	r3, r1
 8008bda:	4303      	orrs	r3, r0
 8008bdc:	bf08      	it	eq
 8008bde:	2322      	moveq	r3, #34	; 0x22
 8008be0:	4680      	mov	r8, r0
 8008be2:	4689      	mov	r9, r1
 8008be4:	bf08      	it	eq
 8008be6:	f8ca 3000 	streq.w	r3, [sl]
 8008bea:	e62f      	b.n	800884c <_strtod_l+0x494>
 8008bec:	f04f 32ff 	mov.w	r2, #4294967295
 8008bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8008bf4:	ea03 0808 	and.w	r8, r3, r8
 8008bf8:	e6e0      	b.n	80089bc <_strtod_l+0x604>
 8008bfa:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8008bfe:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8008c02:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8008c06:	35e2      	adds	r5, #226	; 0xe2
 8008c08:	fa07 f505 	lsl.w	r5, r7, r5
 8008c0c:	970f      	str	r7, [sp, #60]	; 0x3c
 8008c0e:	e747      	b.n	8008aa0 <_strtod_l+0x6e8>
 8008c10:	2301      	movs	r3, #1
 8008c12:	2500      	movs	r5, #0
 8008c14:	930f      	str	r3, [sp, #60]	; 0x3c
 8008c16:	e743      	b.n	8008aa0 <_strtod_l+0x6e8>
 8008c18:	463a      	mov	r2, r7
 8008c1a:	4650      	mov	r0, sl
 8008c1c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008c1e:	f002 f983 	bl	800af28 <__lshift>
 8008c22:	901a      	str	r0, [sp, #104]	; 0x68
 8008c24:	2800      	cmp	r0, #0
 8008c26:	f47f af69 	bne.w	8008afc <_strtod_l+0x744>
 8008c2a:	e604      	b.n	8008836 <_strtod_l+0x47e>
 8008c2c:	0800de98 	.word	0x0800de98
 8008c30:	fffffc02 	.word	0xfffffc02
 8008c34:	7ff00000 	.word	0x7ff00000
 8008c38:	39500000 	.word	0x39500000
 8008c3c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008c40:	d165      	bne.n	8008d0e <_strtod_l+0x956>
 8008c42:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008c44:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008c48:	b35a      	cbz	r2, 8008ca2 <_strtod_l+0x8ea>
 8008c4a:	4a99      	ldr	r2, [pc, #612]	; (8008eb0 <_strtod_l+0xaf8>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d12b      	bne.n	8008ca8 <_strtod_l+0x8f0>
 8008c50:	9b05      	ldr	r3, [sp, #20]
 8008c52:	4641      	mov	r1, r8
 8008c54:	b303      	cbz	r3, 8008c98 <_strtod_l+0x8e0>
 8008c56:	464a      	mov	r2, r9
 8008c58:	4b96      	ldr	r3, [pc, #600]	; (8008eb4 <_strtod_l+0xafc>)
 8008c5a:	4013      	ands	r3, r2
 8008c5c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008c60:	f04f 32ff 	mov.w	r2, #4294967295
 8008c64:	d81b      	bhi.n	8008c9e <_strtod_l+0x8e6>
 8008c66:	0d1b      	lsrs	r3, r3, #20
 8008c68:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8008c70:	4299      	cmp	r1, r3
 8008c72:	d119      	bne.n	8008ca8 <_strtod_l+0x8f0>
 8008c74:	4b90      	ldr	r3, [pc, #576]	; (8008eb8 <_strtod_l+0xb00>)
 8008c76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c78:	429a      	cmp	r2, r3
 8008c7a:	d102      	bne.n	8008c82 <_strtod_l+0x8ca>
 8008c7c:	3101      	adds	r1, #1
 8008c7e:	f43f adda 	beq.w	8008836 <_strtod_l+0x47e>
 8008c82:	f04f 0800 	mov.w	r8, #0
 8008c86:	4b8b      	ldr	r3, [pc, #556]	; (8008eb4 <_strtod_l+0xafc>)
 8008c88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c8a:	401a      	ands	r2, r3
 8008c8c:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8008c90:	9b05      	ldr	r3, [sp, #20]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d19a      	bne.n	8008bcc <_strtod_l+0x814>
 8008c96:	e5d9      	b.n	800884c <_strtod_l+0x494>
 8008c98:	f04f 33ff 	mov.w	r3, #4294967295
 8008c9c:	e7e8      	b.n	8008c70 <_strtod_l+0x8b8>
 8008c9e:	4613      	mov	r3, r2
 8008ca0:	e7e6      	b.n	8008c70 <_strtod_l+0x8b8>
 8008ca2:	ea53 0308 	orrs.w	r3, r3, r8
 8008ca6:	d081      	beq.n	8008bac <_strtod_l+0x7f4>
 8008ca8:	b1e5      	cbz	r5, 8008ce4 <_strtod_l+0x92c>
 8008caa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cac:	421d      	tst	r5, r3
 8008cae:	d0ef      	beq.n	8008c90 <_strtod_l+0x8d8>
 8008cb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008cb2:	4640      	mov	r0, r8
 8008cb4:	4649      	mov	r1, r9
 8008cb6:	9a05      	ldr	r2, [sp, #20]
 8008cb8:	b1c3      	cbz	r3, 8008cec <_strtod_l+0x934>
 8008cba:	f7ff fb5b 	bl	8008374 <sulp>
 8008cbe:	4602      	mov	r2, r0
 8008cc0:	460b      	mov	r3, r1
 8008cc2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008cc6:	f7f7 fa51 	bl	800016c <__adddf3>
 8008cca:	4680      	mov	r8, r0
 8008ccc:	4689      	mov	r9, r1
 8008cce:	e7df      	b.n	8008c90 <_strtod_l+0x8d8>
 8008cd0:	4013      	ands	r3, r2
 8008cd2:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008cd6:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8008cda:	f04f 38ff 	mov.w	r8, #4294967295
 8008cde:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8008ce2:	e7d5      	b.n	8008c90 <_strtod_l+0x8d8>
 8008ce4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008ce6:	ea13 0f08 	tst.w	r3, r8
 8008cea:	e7e0      	b.n	8008cae <_strtod_l+0x8f6>
 8008cec:	f7ff fb42 	bl	8008374 <sulp>
 8008cf0:	4602      	mov	r2, r0
 8008cf2:	460b      	mov	r3, r1
 8008cf4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008cf8:	f7f7 fa36 	bl	8000168 <__aeabi_dsub>
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	2300      	movs	r3, #0
 8008d00:	4680      	mov	r8, r0
 8008d02:	4689      	mov	r9, r1
 8008d04:	f7f7 fe50 	bl	80009a8 <__aeabi_dcmpeq>
 8008d08:	2800      	cmp	r0, #0
 8008d0a:	d0c1      	beq.n	8008c90 <_strtod_l+0x8d8>
 8008d0c:	e608      	b.n	8008920 <_strtod_l+0x568>
 8008d0e:	4658      	mov	r0, fp
 8008d10:	9904      	ldr	r1, [sp, #16]
 8008d12:	f002 faf7 	bl	800b304 <__ratio>
 8008d16:	2200      	movs	r2, #0
 8008d18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008d1c:	4606      	mov	r6, r0
 8008d1e:	460f      	mov	r7, r1
 8008d20:	f7f7 fe56 	bl	80009d0 <__aeabi_dcmple>
 8008d24:	2800      	cmp	r0, #0
 8008d26:	d070      	beq.n	8008e0a <_strtod_l+0xa52>
 8008d28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d042      	beq.n	8008db4 <_strtod_l+0x9fc>
 8008d2e:	2600      	movs	r6, #0
 8008d30:	4f62      	ldr	r7, [pc, #392]	; (8008ebc <_strtod_l+0xb04>)
 8008d32:	4d62      	ldr	r5, [pc, #392]	; (8008ebc <_strtod_l+0xb04>)
 8008d34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d36:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008d3a:	0d1b      	lsrs	r3, r3, #20
 8008d3c:	051b      	lsls	r3, r3, #20
 8008d3e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008d40:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008d42:	4b5f      	ldr	r3, [pc, #380]	; (8008ec0 <_strtod_l+0xb08>)
 8008d44:	429a      	cmp	r2, r3
 8008d46:	f040 80c3 	bne.w	8008ed0 <_strtod_l+0xb18>
 8008d4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d4c:	4640      	mov	r0, r8
 8008d4e:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8008d52:	4649      	mov	r1, r9
 8008d54:	f002 fa00 	bl	800b158 <__ulp>
 8008d58:	4602      	mov	r2, r0
 8008d5a:	460b      	mov	r3, r1
 8008d5c:	4630      	mov	r0, r6
 8008d5e:	4639      	mov	r1, r7
 8008d60:	f7f7 fbba 	bl	80004d8 <__aeabi_dmul>
 8008d64:	4642      	mov	r2, r8
 8008d66:	464b      	mov	r3, r9
 8008d68:	f7f7 fa00 	bl	800016c <__adddf3>
 8008d6c:	460b      	mov	r3, r1
 8008d6e:	4951      	ldr	r1, [pc, #324]	; (8008eb4 <_strtod_l+0xafc>)
 8008d70:	4a54      	ldr	r2, [pc, #336]	; (8008ec4 <_strtod_l+0xb0c>)
 8008d72:	4019      	ands	r1, r3
 8008d74:	4291      	cmp	r1, r2
 8008d76:	4680      	mov	r8, r0
 8008d78:	d95d      	bls.n	8008e36 <_strtod_l+0xa7e>
 8008d7a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008d7c:	4b4e      	ldr	r3, [pc, #312]	; (8008eb8 <_strtod_l+0xb00>)
 8008d7e:	429a      	cmp	r2, r3
 8008d80:	d103      	bne.n	8008d8a <_strtod_l+0x9d2>
 8008d82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008d84:	3301      	adds	r3, #1
 8008d86:	f43f ad56 	beq.w	8008836 <_strtod_l+0x47e>
 8008d8a:	f04f 38ff 	mov.w	r8, #4294967295
 8008d8e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8008eb8 <_strtod_l+0xb00>
 8008d92:	4650      	mov	r0, sl
 8008d94:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008d96:	f001 feaf 	bl	800aaf8 <_Bfree>
 8008d9a:	4650      	mov	r0, sl
 8008d9c:	9906      	ldr	r1, [sp, #24]
 8008d9e:	f001 feab 	bl	800aaf8 <_Bfree>
 8008da2:	4650      	mov	r0, sl
 8008da4:	9904      	ldr	r1, [sp, #16]
 8008da6:	f001 fea7 	bl	800aaf8 <_Bfree>
 8008daa:	4659      	mov	r1, fp
 8008dac:	4650      	mov	r0, sl
 8008dae:	f001 fea3 	bl	800aaf8 <_Bfree>
 8008db2:	e627      	b.n	8008a04 <_strtod_l+0x64c>
 8008db4:	f1b8 0f00 	cmp.w	r8, #0
 8008db8:	d119      	bne.n	8008dee <_strtod_l+0xa36>
 8008dba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008dc0:	b9e3      	cbnz	r3, 8008dfc <_strtod_l+0xa44>
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	4630      	mov	r0, r6
 8008dc6:	4639      	mov	r1, r7
 8008dc8:	4b3c      	ldr	r3, [pc, #240]	; (8008ebc <_strtod_l+0xb04>)
 8008dca:	f7f7 fdf7 	bl	80009bc <__aeabi_dcmplt>
 8008dce:	b9c8      	cbnz	r0, 8008e04 <_strtod_l+0xa4c>
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	4630      	mov	r0, r6
 8008dd4:	4639      	mov	r1, r7
 8008dd6:	4b3c      	ldr	r3, [pc, #240]	; (8008ec8 <_strtod_l+0xb10>)
 8008dd8:	f7f7 fb7e 	bl	80004d8 <__aeabi_dmul>
 8008ddc:	4604      	mov	r4, r0
 8008dde:	460d      	mov	r5, r1
 8008de0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8008de4:	9416      	str	r4, [sp, #88]	; 0x58
 8008de6:	9317      	str	r3, [sp, #92]	; 0x5c
 8008de8:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8008dec:	e7a2      	b.n	8008d34 <_strtod_l+0x97c>
 8008dee:	f1b8 0f01 	cmp.w	r8, #1
 8008df2:	d103      	bne.n	8008dfc <_strtod_l+0xa44>
 8008df4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	f43f ad92 	beq.w	8008920 <_strtod_l+0x568>
 8008dfc:	2600      	movs	r6, #0
 8008dfe:	2400      	movs	r4, #0
 8008e00:	4f32      	ldr	r7, [pc, #200]	; (8008ecc <_strtod_l+0xb14>)
 8008e02:	e796      	b.n	8008d32 <_strtod_l+0x97a>
 8008e04:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8008e06:	4d30      	ldr	r5, [pc, #192]	; (8008ec8 <_strtod_l+0xb10>)
 8008e08:	e7ea      	b.n	8008de0 <_strtod_l+0xa28>
 8008e0a:	4b2f      	ldr	r3, [pc, #188]	; (8008ec8 <_strtod_l+0xb10>)
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	4630      	mov	r0, r6
 8008e10:	4639      	mov	r1, r7
 8008e12:	f7f7 fb61 	bl	80004d8 <__aeabi_dmul>
 8008e16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e18:	4604      	mov	r4, r0
 8008e1a:	460d      	mov	r5, r1
 8008e1c:	b933      	cbnz	r3, 8008e2c <_strtod_l+0xa74>
 8008e1e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008e22:	9010      	str	r0, [sp, #64]	; 0x40
 8008e24:	9311      	str	r3, [sp, #68]	; 0x44
 8008e26:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008e2a:	e783      	b.n	8008d34 <_strtod_l+0x97c>
 8008e2c:	4602      	mov	r2, r0
 8008e2e:	460b      	mov	r3, r1
 8008e30:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8008e34:	e7f7      	b.n	8008e26 <_strtod_l+0xa6e>
 8008e36:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8008e3a:	9b05      	ldr	r3, [sp, #20]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d1a8      	bne.n	8008d92 <_strtod_l+0x9da>
 8008e40:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008e44:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008e46:	0d1b      	lsrs	r3, r3, #20
 8008e48:	051b      	lsls	r3, r3, #20
 8008e4a:	429a      	cmp	r2, r3
 8008e4c:	d1a1      	bne.n	8008d92 <_strtod_l+0x9da>
 8008e4e:	4620      	mov	r0, r4
 8008e50:	4629      	mov	r1, r5
 8008e52:	f7f8 f973 	bl	800113c <__aeabi_d2lz>
 8008e56:	f7f7 fb11 	bl	800047c <__aeabi_l2d>
 8008e5a:	4602      	mov	r2, r0
 8008e5c:	460b      	mov	r3, r1
 8008e5e:	4620      	mov	r0, r4
 8008e60:	4629      	mov	r1, r5
 8008e62:	f7f7 f981 	bl	8000168 <__aeabi_dsub>
 8008e66:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008e68:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008e6c:	ea43 0308 	orr.w	r3, r3, r8
 8008e70:	4313      	orrs	r3, r2
 8008e72:	4604      	mov	r4, r0
 8008e74:	460d      	mov	r5, r1
 8008e76:	d066      	beq.n	8008f46 <_strtod_l+0xb8e>
 8008e78:	a309      	add	r3, pc, #36	; (adr r3, 8008ea0 <_strtod_l+0xae8>)
 8008e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e7e:	f7f7 fd9d 	bl	80009bc <__aeabi_dcmplt>
 8008e82:	2800      	cmp	r0, #0
 8008e84:	f47f ace2 	bne.w	800884c <_strtod_l+0x494>
 8008e88:	a307      	add	r3, pc, #28	; (adr r3, 8008ea8 <_strtod_l+0xaf0>)
 8008e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e8e:	4620      	mov	r0, r4
 8008e90:	4629      	mov	r1, r5
 8008e92:	f7f7 fdb1 	bl	80009f8 <__aeabi_dcmpgt>
 8008e96:	2800      	cmp	r0, #0
 8008e98:	f43f af7b 	beq.w	8008d92 <_strtod_l+0x9da>
 8008e9c:	e4d6      	b.n	800884c <_strtod_l+0x494>
 8008e9e:	bf00      	nop
 8008ea0:	94a03595 	.word	0x94a03595
 8008ea4:	3fdfffff 	.word	0x3fdfffff
 8008ea8:	35afe535 	.word	0x35afe535
 8008eac:	3fe00000 	.word	0x3fe00000
 8008eb0:	000fffff 	.word	0x000fffff
 8008eb4:	7ff00000 	.word	0x7ff00000
 8008eb8:	7fefffff 	.word	0x7fefffff
 8008ebc:	3ff00000 	.word	0x3ff00000
 8008ec0:	7fe00000 	.word	0x7fe00000
 8008ec4:	7c9fffff 	.word	0x7c9fffff
 8008ec8:	3fe00000 	.word	0x3fe00000
 8008ecc:	bff00000 	.word	0xbff00000
 8008ed0:	9b05      	ldr	r3, [sp, #20]
 8008ed2:	b313      	cbz	r3, 8008f1a <_strtod_l+0xb62>
 8008ed4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008ed6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008eda:	d81e      	bhi.n	8008f1a <_strtod_l+0xb62>
 8008edc:	a326      	add	r3, pc, #152	; (adr r3, 8008f78 <_strtod_l+0xbc0>)
 8008ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ee2:	4620      	mov	r0, r4
 8008ee4:	4629      	mov	r1, r5
 8008ee6:	f7f7 fd73 	bl	80009d0 <__aeabi_dcmple>
 8008eea:	b190      	cbz	r0, 8008f12 <_strtod_l+0xb5a>
 8008eec:	4629      	mov	r1, r5
 8008eee:	4620      	mov	r0, r4
 8008ef0:	f7f7 fdca 	bl	8000a88 <__aeabi_d2uiz>
 8008ef4:	2801      	cmp	r0, #1
 8008ef6:	bf38      	it	cc
 8008ef8:	2001      	movcc	r0, #1
 8008efa:	f7f7 fa73 	bl	80003e4 <__aeabi_ui2d>
 8008efe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f00:	4604      	mov	r4, r0
 8008f02:	460d      	mov	r5, r1
 8008f04:	b9d3      	cbnz	r3, 8008f3c <_strtod_l+0xb84>
 8008f06:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008f0a:	9012      	str	r0, [sp, #72]	; 0x48
 8008f0c:	9313      	str	r3, [sp, #76]	; 0x4c
 8008f0e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8008f12:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008f14:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8008f18:	1a9f      	subs	r7, r3, r2
 8008f1a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008f1e:	f002 f91b 	bl	800b158 <__ulp>
 8008f22:	4602      	mov	r2, r0
 8008f24:	460b      	mov	r3, r1
 8008f26:	4630      	mov	r0, r6
 8008f28:	4639      	mov	r1, r7
 8008f2a:	f7f7 fad5 	bl	80004d8 <__aeabi_dmul>
 8008f2e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008f32:	f7f7 f91b 	bl	800016c <__adddf3>
 8008f36:	4680      	mov	r8, r0
 8008f38:	4689      	mov	r9, r1
 8008f3a:	e77e      	b.n	8008e3a <_strtod_l+0xa82>
 8008f3c:	4602      	mov	r2, r0
 8008f3e:	460b      	mov	r3, r1
 8008f40:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8008f44:	e7e3      	b.n	8008f0e <_strtod_l+0xb56>
 8008f46:	a30e      	add	r3, pc, #56	; (adr r3, 8008f80 <_strtod_l+0xbc8>)
 8008f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f4c:	f7f7 fd36 	bl	80009bc <__aeabi_dcmplt>
 8008f50:	e7a1      	b.n	8008e96 <_strtod_l+0xade>
 8008f52:	2300      	movs	r3, #0
 8008f54:	930a      	str	r3, [sp, #40]	; 0x28
 8008f56:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008f58:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008f5a:	6013      	str	r3, [r2, #0]
 8008f5c:	f7ff ba71 	b.w	8008442 <_strtod_l+0x8a>
 8008f60:	2a65      	cmp	r2, #101	; 0x65
 8008f62:	f43f ab63 	beq.w	800862c <_strtod_l+0x274>
 8008f66:	2a45      	cmp	r2, #69	; 0x45
 8008f68:	f43f ab60 	beq.w	800862c <_strtod_l+0x274>
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	f7ff bb95 	b.w	800869c <_strtod_l+0x2e4>
 8008f72:	bf00      	nop
 8008f74:	f3af 8000 	nop.w
 8008f78:	ffc00000 	.word	0xffc00000
 8008f7c:	41dfffff 	.word	0x41dfffff
 8008f80:	94a03595 	.word	0x94a03595
 8008f84:	3fcfffff 	.word	0x3fcfffff

08008f88 <_strtod_r>:
 8008f88:	4b01      	ldr	r3, [pc, #4]	; (8008f90 <_strtod_r+0x8>)
 8008f8a:	f7ff ba15 	b.w	80083b8 <_strtod_l>
 8008f8e:	bf00      	nop
 8008f90:	20000074 	.word	0x20000074

08008f94 <strtod>:
 8008f94:	460a      	mov	r2, r1
 8008f96:	4601      	mov	r1, r0
 8008f98:	4802      	ldr	r0, [pc, #8]	; (8008fa4 <strtod+0x10>)
 8008f9a:	4b03      	ldr	r3, [pc, #12]	; (8008fa8 <strtod+0x14>)
 8008f9c:	6800      	ldr	r0, [r0, #0]
 8008f9e:	f7ff ba0b 	b.w	80083b8 <_strtod_l>
 8008fa2:	bf00      	nop
 8008fa4:	2000000c 	.word	0x2000000c
 8008fa8:	20000074 	.word	0x20000074

08008fac <_strtol_l.constprop.0>:
 8008fac:	2b01      	cmp	r3, #1
 8008fae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fb2:	4680      	mov	r8, r0
 8008fb4:	d001      	beq.n	8008fba <_strtol_l.constprop.0+0xe>
 8008fb6:	2b24      	cmp	r3, #36	; 0x24
 8008fb8:	d906      	bls.n	8008fc8 <_strtol_l.constprop.0+0x1c>
 8008fba:	f7fe fa7b 	bl	80074b4 <__errno>
 8008fbe:	2316      	movs	r3, #22
 8008fc0:	6003      	str	r3, [r0, #0]
 8008fc2:	2000      	movs	r0, #0
 8008fc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fc8:	460d      	mov	r5, r1
 8008fca:	4f35      	ldr	r7, [pc, #212]	; (80090a0 <_strtol_l.constprop.0+0xf4>)
 8008fcc:	4628      	mov	r0, r5
 8008fce:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008fd2:	5de6      	ldrb	r6, [r4, r7]
 8008fd4:	f016 0608 	ands.w	r6, r6, #8
 8008fd8:	d1f8      	bne.n	8008fcc <_strtol_l.constprop.0+0x20>
 8008fda:	2c2d      	cmp	r4, #45	; 0x2d
 8008fdc:	d12f      	bne.n	800903e <_strtol_l.constprop.0+0x92>
 8008fde:	2601      	movs	r6, #1
 8008fe0:	782c      	ldrb	r4, [r5, #0]
 8008fe2:	1c85      	adds	r5, r0, #2
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d057      	beq.n	8009098 <_strtol_l.constprop.0+0xec>
 8008fe8:	2b10      	cmp	r3, #16
 8008fea:	d109      	bne.n	8009000 <_strtol_l.constprop.0+0x54>
 8008fec:	2c30      	cmp	r4, #48	; 0x30
 8008fee:	d107      	bne.n	8009000 <_strtol_l.constprop.0+0x54>
 8008ff0:	7828      	ldrb	r0, [r5, #0]
 8008ff2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8008ff6:	2858      	cmp	r0, #88	; 0x58
 8008ff8:	d149      	bne.n	800908e <_strtol_l.constprop.0+0xe2>
 8008ffa:	2310      	movs	r3, #16
 8008ffc:	786c      	ldrb	r4, [r5, #1]
 8008ffe:	3502      	adds	r5, #2
 8009000:	2700      	movs	r7, #0
 8009002:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8009006:	f10e 3eff 	add.w	lr, lr, #4294967295
 800900a:	fbbe f9f3 	udiv	r9, lr, r3
 800900e:	4638      	mov	r0, r7
 8009010:	fb03 ea19 	mls	sl, r3, r9, lr
 8009014:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009018:	f1bc 0f09 	cmp.w	ip, #9
 800901c:	d814      	bhi.n	8009048 <_strtol_l.constprop.0+0x9c>
 800901e:	4664      	mov	r4, ip
 8009020:	42a3      	cmp	r3, r4
 8009022:	dd22      	ble.n	800906a <_strtol_l.constprop.0+0xbe>
 8009024:	2f00      	cmp	r7, #0
 8009026:	db1d      	blt.n	8009064 <_strtol_l.constprop.0+0xb8>
 8009028:	4581      	cmp	r9, r0
 800902a:	d31b      	bcc.n	8009064 <_strtol_l.constprop.0+0xb8>
 800902c:	d101      	bne.n	8009032 <_strtol_l.constprop.0+0x86>
 800902e:	45a2      	cmp	sl, r4
 8009030:	db18      	blt.n	8009064 <_strtol_l.constprop.0+0xb8>
 8009032:	2701      	movs	r7, #1
 8009034:	fb00 4003 	mla	r0, r0, r3, r4
 8009038:	f815 4b01 	ldrb.w	r4, [r5], #1
 800903c:	e7ea      	b.n	8009014 <_strtol_l.constprop.0+0x68>
 800903e:	2c2b      	cmp	r4, #43	; 0x2b
 8009040:	bf04      	itt	eq
 8009042:	782c      	ldrbeq	r4, [r5, #0]
 8009044:	1c85      	addeq	r5, r0, #2
 8009046:	e7cd      	b.n	8008fe4 <_strtol_l.constprop.0+0x38>
 8009048:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800904c:	f1bc 0f19 	cmp.w	ip, #25
 8009050:	d801      	bhi.n	8009056 <_strtol_l.constprop.0+0xaa>
 8009052:	3c37      	subs	r4, #55	; 0x37
 8009054:	e7e4      	b.n	8009020 <_strtol_l.constprop.0+0x74>
 8009056:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800905a:	f1bc 0f19 	cmp.w	ip, #25
 800905e:	d804      	bhi.n	800906a <_strtol_l.constprop.0+0xbe>
 8009060:	3c57      	subs	r4, #87	; 0x57
 8009062:	e7dd      	b.n	8009020 <_strtol_l.constprop.0+0x74>
 8009064:	f04f 37ff 	mov.w	r7, #4294967295
 8009068:	e7e6      	b.n	8009038 <_strtol_l.constprop.0+0x8c>
 800906a:	2f00      	cmp	r7, #0
 800906c:	da07      	bge.n	800907e <_strtol_l.constprop.0+0xd2>
 800906e:	2322      	movs	r3, #34	; 0x22
 8009070:	4670      	mov	r0, lr
 8009072:	f8c8 3000 	str.w	r3, [r8]
 8009076:	2a00      	cmp	r2, #0
 8009078:	d0a4      	beq.n	8008fc4 <_strtol_l.constprop.0+0x18>
 800907a:	1e69      	subs	r1, r5, #1
 800907c:	e005      	b.n	800908a <_strtol_l.constprop.0+0xde>
 800907e:	b106      	cbz	r6, 8009082 <_strtol_l.constprop.0+0xd6>
 8009080:	4240      	negs	r0, r0
 8009082:	2a00      	cmp	r2, #0
 8009084:	d09e      	beq.n	8008fc4 <_strtol_l.constprop.0+0x18>
 8009086:	2f00      	cmp	r7, #0
 8009088:	d1f7      	bne.n	800907a <_strtol_l.constprop.0+0xce>
 800908a:	6011      	str	r1, [r2, #0]
 800908c:	e79a      	b.n	8008fc4 <_strtol_l.constprop.0+0x18>
 800908e:	2430      	movs	r4, #48	; 0x30
 8009090:	2b00      	cmp	r3, #0
 8009092:	d1b5      	bne.n	8009000 <_strtol_l.constprop.0+0x54>
 8009094:	2308      	movs	r3, #8
 8009096:	e7b3      	b.n	8009000 <_strtol_l.constprop.0+0x54>
 8009098:	2c30      	cmp	r4, #48	; 0x30
 800909a:	d0a9      	beq.n	8008ff0 <_strtol_l.constprop.0+0x44>
 800909c:	230a      	movs	r3, #10
 800909e:	e7af      	b.n	8009000 <_strtol_l.constprop.0+0x54>
 80090a0:	0800dec1 	.word	0x0800dec1

080090a4 <_strtol_r>:
 80090a4:	f7ff bf82 	b.w	8008fac <_strtol_l.constprop.0>

080090a8 <__swbuf_r>:
 80090a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090aa:	460e      	mov	r6, r1
 80090ac:	4614      	mov	r4, r2
 80090ae:	4605      	mov	r5, r0
 80090b0:	b118      	cbz	r0, 80090ba <__swbuf_r+0x12>
 80090b2:	6983      	ldr	r3, [r0, #24]
 80090b4:	b90b      	cbnz	r3, 80090ba <__swbuf_r+0x12>
 80090b6:	f001 f847 	bl	800a148 <__sinit>
 80090ba:	4b21      	ldr	r3, [pc, #132]	; (8009140 <__swbuf_r+0x98>)
 80090bc:	429c      	cmp	r4, r3
 80090be:	d12b      	bne.n	8009118 <__swbuf_r+0x70>
 80090c0:	686c      	ldr	r4, [r5, #4]
 80090c2:	69a3      	ldr	r3, [r4, #24]
 80090c4:	60a3      	str	r3, [r4, #8]
 80090c6:	89a3      	ldrh	r3, [r4, #12]
 80090c8:	071a      	lsls	r2, r3, #28
 80090ca:	d52f      	bpl.n	800912c <__swbuf_r+0x84>
 80090cc:	6923      	ldr	r3, [r4, #16]
 80090ce:	b36b      	cbz	r3, 800912c <__swbuf_r+0x84>
 80090d0:	6923      	ldr	r3, [r4, #16]
 80090d2:	6820      	ldr	r0, [r4, #0]
 80090d4:	b2f6      	uxtb	r6, r6
 80090d6:	1ac0      	subs	r0, r0, r3
 80090d8:	6963      	ldr	r3, [r4, #20]
 80090da:	4637      	mov	r7, r6
 80090dc:	4283      	cmp	r3, r0
 80090de:	dc04      	bgt.n	80090ea <__swbuf_r+0x42>
 80090e0:	4621      	mov	r1, r4
 80090e2:	4628      	mov	r0, r5
 80090e4:	f000 ff9c 	bl	800a020 <_fflush_r>
 80090e8:	bb30      	cbnz	r0, 8009138 <__swbuf_r+0x90>
 80090ea:	68a3      	ldr	r3, [r4, #8]
 80090ec:	3001      	adds	r0, #1
 80090ee:	3b01      	subs	r3, #1
 80090f0:	60a3      	str	r3, [r4, #8]
 80090f2:	6823      	ldr	r3, [r4, #0]
 80090f4:	1c5a      	adds	r2, r3, #1
 80090f6:	6022      	str	r2, [r4, #0]
 80090f8:	701e      	strb	r6, [r3, #0]
 80090fa:	6963      	ldr	r3, [r4, #20]
 80090fc:	4283      	cmp	r3, r0
 80090fe:	d004      	beq.n	800910a <__swbuf_r+0x62>
 8009100:	89a3      	ldrh	r3, [r4, #12]
 8009102:	07db      	lsls	r3, r3, #31
 8009104:	d506      	bpl.n	8009114 <__swbuf_r+0x6c>
 8009106:	2e0a      	cmp	r6, #10
 8009108:	d104      	bne.n	8009114 <__swbuf_r+0x6c>
 800910a:	4621      	mov	r1, r4
 800910c:	4628      	mov	r0, r5
 800910e:	f000 ff87 	bl	800a020 <_fflush_r>
 8009112:	b988      	cbnz	r0, 8009138 <__swbuf_r+0x90>
 8009114:	4638      	mov	r0, r7
 8009116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009118:	4b0a      	ldr	r3, [pc, #40]	; (8009144 <__swbuf_r+0x9c>)
 800911a:	429c      	cmp	r4, r3
 800911c:	d101      	bne.n	8009122 <__swbuf_r+0x7a>
 800911e:	68ac      	ldr	r4, [r5, #8]
 8009120:	e7cf      	b.n	80090c2 <__swbuf_r+0x1a>
 8009122:	4b09      	ldr	r3, [pc, #36]	; (8009148 <__swbuf_r+0xa0>)
 8009124:	429c      	cmp	r4, r3
 8009126:	bf08      	it	eq
 8009128:	68ec      	ldreq	r4, [r5, #12]
 800912a:	e7ca      	b.n	80090c2 <__swbuf_r+0x1a>
 800912c:	4621      	mov	r1, r4
 800912e:	4628      	mov	r0, r5
 8009130:	f000 f80c 	bl	800914c <__swsetup_r>
 8009134:	2800      	cmp	r0, #0
 8009136:	d0cb      	beq.n	80090d0 <__swbuf_r+0x28>
 8009138:	f04f 37ff 	mov.w	r7, #4294967295
 800913c:	e7ea      	b.n	8009114 <__swbuf_r+0x6c>
 800913e:	bf00      	nop
 8009140:	0800e074 	.word	0x0800e074
 8009144:	0800e094 	.word	0x0800e094
 8009148:	0800e054 	.word	0x0800e054

0800914c <__swsetup_r>:
 800914c:	4b32      	ldr	r3, [pc, #200]	; (8009218 <__swsetup_r+0xcc>)
 800914e:	b570      	push	{r4, r5, r6, lr}
 8009150:	681d      	ldr	r5, [r3, #0]
 8009152:	4606      	mov	r6, r0
 8009154:	460c      	mov	r4, r1
 8009156:	b125      	cbz	r5, 8009162 <__swsetup_r+0x16>
 8009158:	69ab      	ldr	r3, [r5, #24]
 800915a:	b913      	cbnz	r3, 8009162 <__swsetup_r+0x16>
 800915c:	4628      	mov	r0, r5
 800915e:	f000 fff3 	bl	800a148 <__sinit>
 8009162:	4b2e      	ldr	r3, [pc, #184]	; (800921c <__swsetup_r+0xd0>)
 8009164:	429c      	cmp	r4, r3
 8009166:	d10f      	bne.n	8009188 <__swsetup_r+0x3c>
 8009168:	686c      	ldr	r4, [r5, #4]
 800916a:	89a3      	ldrh	r3, [r4, #12]
 800916c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009170:	0719      	lsls	r1, r3, #28
 8009172:	d42c      	bmi.n	80091ce <__swsetup_r+0x82>
 8009174:	06dd      	lsls	r5, r3, #27
 8009176:	d411      	bmi.n	800919c <__swsetup_r+0x50>
 8009178:	2309      	movs	r3, #9
 800917a:	6033      	str	r3, [r6, #0]
 800917c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009180:	f04f 30ff 	mov.w	r0, #4294967295
 8009184:	81a3      	strh	r3, [r4, #12]
 8009186:	e03e      	b.n	8009206 <__swsetup_r+0xba>
 8009188:	4b25      	ldr	r3, [pc, #148]	; (8009220 <__swsetup_r+0xd4>)
 800918a:	429c      	cmp	r4, r3
 800918c:	d101      	bne.n	8009192 <__swsetup_r+0x46>
 800918e:	68ac      	ldr	r4, [r5, #8]
 8009190:	e7eb      	b.n	800916a <__swsetup_r+0x1e>
 8009192:	4b24      	ldr	r3, [pc, #144]	; (8009224 <__swsetup_r+0xd8>)
 8009194:	429c      	cmp	r4, r3
 8009196:	bf08      	it	eq
 8009198:	68ec      	ldreq	r4, [r5, #12]
 800919a:	e7e6      	b.n	800916a <__swsetup_r+0x1e>
 800919c:	0758      	lsls	r0, r3, #29
 800919e:	d512      	bpl.n	80091c6 <__swsetup_r+0x7a>
 80091a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80091a2:	b141      	cbz	r1, 80091b6 <__swsetup_r+0x6a>
 80091a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80091a8:	4299      	cmp	r1, r3
 80091aa:	d002      	beq.n	80091b2 <__swsetup_r+0x66>
 80091ac:	4630      	mov	r0, r6
 80091ae:	f002 f92f 	bl	800b410 <_free_r>
 80091b2:	2300      	movs	r3, #0
 80091b4:	6363      	str	r3, [r4, #52]	; 0x34
 80091b6:	89a3      	ldrh	r3, [r4, #12]
 80091b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80091bc:	81a3      	strh	r3, [r4, #12]
 80091be:	2300      	movs	r3, #0
 80091c0:	6063      	str	r3, [r4, #4]
 80091c2:	6923      	ldr	r3, [r4, #16]
 80091c4:	6023      	str	r3, [r4, #0]
 80091c6:	89a3      	ldrh	r3, [r4, #12]
 80091c8:	f043 0308 	orr.w	r3, r3, #8
 80091cc:	81a3      	strh	r3, [r4, #12]
 80091ce:	6923      	ldr	r3, [r4, #16]
 80091d0:	b94b      	cbnz	r3, 80091e6 <__swsetup_r+0x9a>
 80091d2:	89a3      	ldrh	r3, [r4, #12]
 80091d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80091d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80091dc:	d003      	beq.n	80091e6 <__swsetup_r+0x9a>
 80091de:	4621      	mov	r1, r4
 80091e0:	4630      	mov	r0, r6
 80091e2:	f001 fbe1 	bl	800a9a8 <__smakebuf_r>
 80091e6:	89a0      	ldrh	r0, [r4, #12]
 80091e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80091ec:	f010 0301 	ands.w	r3, r0, #1
 80091f0:	d00a      	beq.n	8009208 <__swsetup_r+0xbc>
 80091f2:	2300      	movs	r3, #0
 80091f4:	60a3      	str	r3, [r4, #8]
 80091f6:	6963      	ldr	r3, [r4, #20]
 80091f8:	425b      	negs	r3, r3
 80091fa:	61a3      	str	r3, [r4, #24]
 80091fc:	6923      	ldr	r3, [r4, #16]
 80091fe:	b943      	cbnz	r3, 8009212 <__swsetup_r+0xc6>
 8009200:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009204:	d1ba      	bne.n	800917c <__swsetup_r+0x30>
 8009206:	bd70      	pop	{r4, r5, r6, pc}
 8009208:	0781      	lsls	r1, r0, #30
 800920a:	bf58      	it	pl
 800920c:	6963      	ldrpl	r3, [r4, #20]
 800920e:	60a3      	str	r3, [r4, #8]
 8009210:	e7f4      	b.n	80091fc <__swsetup_r+0xb0>
 8009212:	2000      	movs	r0, #0
 8009214:	e7f7      	b.n	8009206 <__swsetup_r+0xba>
 8009216:	bf00      	nop
 8009218:	2000000c 	.word	0x2000000c
 800921c:	0800e074 	.word	0x0800e074
 8009220:	0800e094 	.word	0x0800e094
 8009224:	0800e054 	.word	0x0800e054

08009228 <quorem>:
 8009228:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800922c:	6903      	ldr	r3, [r0, #16]
 800922e:	690c      	ldr	r4, [r1, #16]
 8009230:	4607      	mov	r7, r0
 8009232:	42a3      	cmp	r3, r4
 8009234:	f2c0 8082 	blt.w	800933c <quorem+0x114>
 8009238:	3c01      	subs	r4, #1
 800923a:	f100 0514 	add.w	r5, r0, #20
 800923e:	f101 0814 	add.w	r8, r1, #20
 8009242:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009246:	9301      	str	r3, [sp, #4]
 8009248:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800924c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009250:	3301      	adds	r3, #1
 8009252:	429a      	cmp	r2, r3
 8009254:	fbb2 f6f3 	udiv	r6, r2, r3
 8009258:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800925c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009260:	d331      	bcc.n	80092c6 <quorem+0x9e>
 8009262:	f04f 0e00 	mov.w	lr, #0
 8009266:	4640      	mov	r0, r8
 8009268:	46ac      	mov	ip, r5
 800926a:	46f2      	mov	sl, lr
 800926c:	f850 2b04 	ldr.w	r2, [r0], #4
 8009270:	b293      	uxth	r3, r2
 8009272:	fb06 e303 	mla	r3, r6, r3, lr
 8009276:	0c12      	lsrs	r2, r2, #16
 8009278:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800927c:	b29b      	uxth	r3, r3
 800927e:	fb06 e202 	mla	r2, r6, r2, lr
 8009282:	ebaa 0303 	sub.w	r3, sl, r3
 8009286:	f8dc a000 	ldr.w	sl, [ip]
 800928a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800928e:	fa1f fa8a 	uxth.w	sl, sl
 8009292:	4453      	add	r3, sl
 8009294:	f8dc a000 	ldr.w	sl, [ip]
 8009298:	b292      	uxth	r2, r2
 800929a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800929e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80092a2:	b29b      	uxth	r3, r3
 80092a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80092a8:	4581      	cmp	r9, r0
 80092aa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80092ae:	f84c 3b04 	str.w	r3, [ip], #4
 80092b2:	d2db      	bcs.n	800926c <quorem+0x44>
 80092b4:	f855 300b 	ldr.w	r3, [r5, fp]
 80092b8:	b92b      	cbnz	r3, 80092c6 <quorem+0x9e>
 80092ba:	9b01      	ldr	r3, [sp, #4]
 80092bc:	3b04      	subs	r3, #4
 80092be:	429d      	cmp	r5, r3
 80092c0:	461a      	mov	r2, r3
 80092c2:	d32f      	bcc.n	8009324 <quorem+0xfc>
 80092c4:	613c      	str	r4, [r7, #16]
 80092c6:	4638      	mov	r0, r7
 80092c8:	f001 fe9e 	bl	800b008 <__mcmp>
 80092cc:	2800      	cmp	r0, #0
 80092ce:	db25      	blt.n	800931c <quorem+0xf4>
 80092d0:	4628      	mov	r0, r5
 80092d2:	f04f 0c00 	mov.w	ip, #0
 80092d6:	3601      	adds	r6, #1
 80092d8:	f858 1b04 	ldr.w	r1, [r8], #4
 80092dc:	f8d0 e000 	ldr.w	lr, [r0]
 80092e0:	b28b      	uxth	r3, r1
 80092e2:	ebac 0303 	sub.w	r3, ip, r3
 80092e6:	fa1f f28e 	uxth.w	r2, lr
 80092ea:	4413      	add	r3, r2
 80092ec:	0c0a      	lsrs	r2, r1, #16
 80092ee:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80092f2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80092f6:	b29b      	uxth	r3, r3
 80092f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80092fc:	45c1      	cmp	r9, r8
 80092fe:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009302:	f840 3b04 	str.w	r3, [r0], #4
 8009306:	d2e7      	bcs.n	80092d8 <quorem+0xb0>
 8009308:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800930c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009310:	b922      	cbnz	r2, 800931c <quorem+0xf4>
 8009312:	3b04      	subs	r3, #4
 8009314:	429d      	cmp	r5, r3
 8009316:	461a      	mov	r2, r3
 8009318:	d30a      	bcc.n	8009330 <quorem+0x108>
 800931a:	613c      	str	r4, [r7, #16]
 800931c:	4630      	mov	r0, r6
 800931e:	b003      	add	sp, #12
 8009320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009324:	6812      	ldr	r2, [r2, #0]
 8009326:	3b04      	subs	r3, #4
 8009328:	2a00      	cmp	r2, #0
 800932a:	d1cb      	bne.n	80092c4 <quorem+0x9c>
 800932c:	3c01      	subs	r4, #1
 800932e:	e7c6      	b.n	80092be <quorem+0x96>
 8009330:	6812      	ldr	r2, [r2, #0]
 8009332:	3b04      	subs	r3, #4
 8009334:	2a00      	cmp	r2, #0
 8009336:	d1f0      	bne.n	800931a <quorem+0xf2>
 8009338:	3c01      	subs	r4, #1
 800933a:	e7eb      	b.n	8009314 <quorem+0xec>
 800933c:	2000      	movs	r0, #0
 800933e:	e7ee      	b.n	800931e <quorem+0xf6>

08009340 <_dtoa_r>:
 8009340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009344:	4616      	mov	r6, r2
 8009346:	461f      	mov	r7, r3
 8009348:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800934a:	b099      	sub	sp, #100	; 0x64
 800934c:	4605      	mov	r5, r0
 800934e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009352:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8009356:	b974      	cbnz	r4, 8009376 <_dtoa_r+0x36>
 8009358:	2010      	movs	r0, #16
 800935a:	f001 fb65 	bl	800aa28 <malloc>
 800935e:	4602      	mov	r2, r0
 8009360:	6268      	str	r0, [r5, #36]	; 0x24
 8009362:	b920      	cbnz	r0, 800936e <_dtoa_r+0x2e>
 8009364:	21ea      	movs	r1, #234	; 0xea
 8009366:	4ba8      	ldr	r3, [pc, #672]	; (8009608 <_dtoa_r+0x2c8>)
 8009368:	48a8      	ldr	r0, [pc, #672]	; (800960c <_dtoa_r+0x2cc>)
 800936a:	f002 fc6d 	bl	800bc48 <__assert_func>
 800936e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009372:	6004      	str	r4, [r0, #0]
 8009374:	60c4      	str	r4, [r0, #12]
 8009376:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009378:	6819      	ldr	r1, [r3, #0]
 800937a:	b151      	cbz	r1, 8009392 <_dtoa_r+0x52>
 800937c:	685a      	ldr	r2, [r3, #4]
 800937e:	2301      	movs	r3, #1
 8009380:	4093      	lsls	r3, r2
 8009382:	604a      	str	r2, [r1, #4]
 8009384:	608b      	str	r3, [r1, #8]
 8009386:	4628      	mov	r0, r5
 8009388:	f001 fbb6 	bl	800aaf8 <_Bfree>
 800938c:	2200      	movs	r2, #0
 800938e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009390:	601a      	str	r2, [r3, #0]
 8009392:	1e3b      	subs	r3, r7, #0
 8009394:	bfaf      	iteee	ge
 8009396:	2300      	movge	r3, #0
 8009398:	2201      	movlt	r2, #1
 800939a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800939e:	9305      	strlt	r3, [sp, #20]
 80093a0:	bfa8      	it	ge
 80093a2:	f8c8 3000 	strge.w	r3, [r8]
 80093a6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80093aa:	4b99      	ldr	r3, [pc, #612]	; (8009610 <_dtoa_r+0x2d0>)
 80093ac:	bfb8      	it	lt
 80093ae:	f8c8 2000 	strlt.w	r2, [r8]
 80093b2:	ea33 0309 	bics.w	r3, r3, r9
 80093b6:	d119      	bne.n	80093ec <_dtoa_r+0xac>
 80093b8:	f242 730f 	movw	r3, #9999	; 0x270f
 80093bc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80093be:	6013      	str	r3, [r2, #0]
 80093c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80093c4:	4333      	orrs	r3, r6
 80093c6:	f000 857f 	beq.w	8009ec8 <_dtoa_r+0xb88>
 80093ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80093cc:	b953      	cbnz	r3, 80093e4 <_dtoa_r+0xa4>
 80093ce:	4b91      	ldr	r3, [pc, #580]	; (8009614 <_dtoa_r+0x2d4>)
 80093d0:	e022      	b.n	8009418 <_dtoa_r+0xd8>
 80093d2:	4b91      	ldr	r3, [pc, #580]	; (8009618 <_dtoa_r+0x2d8>)
 80093d4:	9303      	str	r3, [sp, #12]
 80093d6:	3308      	adds	r3, #8
 80093d8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80093da:	6013      	str	r3, [r2, #0]
 80093dc:	9803      	ldr	r0, [sp, #12]
 80093de:	b019      	add	sp, #100	; 0x64
 80093e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093e4:	4b8b      	ldr	r3, [pc, #556]	; (8009614 <_dtoa_r+0x2d4>)
 80093e6:	9303      	str	r3, [sp, #12]
 80093e8:	3303      	adds	r3, #3
 80093ea:	e7f5      	b.n	80093d8 <_dtoa_r+0x98>
 80093ec:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80093f0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80093f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80093f8:	2200      	movs	r2, #0
 80093fa:	2300      	movs	r3, #0
 80093fc:	f7f7 fad4 	bl	80009a8 <__aeabi_dcmpeq>
 8009400:	4680      	mov	r8, r0
 8009402:	b158      	cbz	r0, 800941c <_dtoa_r+0xdc>
 8009404:	2301      	movs	r3, #1
 8009406:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009408:	6013      	str	r3, [r2, #0]
 800940a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800940c:	2b00      	cmp	r3, #0
 800940e:	f000 8558 	beq.w	8009ec2 <_dtoa_r+0xb82>
 8009412:	4882      	ldr	r0, [pc, #520]	; (800961c <_dtoa_r+0x2dc>)
 8009414:	6018      	str	r0, [r3, #0]
 8009416:	1e43      	subs	r3, r0, #1
 8009418:	9303      	str	r3, [sp, #12]
 800941a:	e7df      	b.n	80093dc <_dtoa_r+0x9c>
 800941c:	ab16      	add	r3, sp, #88	; 0x58
 800941e:	9301      	str	r3, [sp, #4]
 8009420:	ab17      	add	r3, sp, #92	; 0x5c
 8009422:	9300      	str	r3, [sp, #0]
 8009424:	4628      	mov	r0, r5
 8009426:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800942a:	f001 ff0f 	bl	800b24c <__d2b>
 800942e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009432:	4683      	mov	fp, r0
 8009434:	2c00      	cmp	r4, #0
 8009436:	d07f      	beq.n	8009538 <_dtoa_r+0x1f8>
 8009438:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800943c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800943e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8009442:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009446:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800944a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800944e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8009452:	2200      	movs	r2, #0
 8009454:	4b72      	ldr	r3, [pc, #456]	; (8009620 <_dtoa_r+0x2e0>)
 8009456:	f7f6 fe87 	bl	8000168 <__aeabi_dsub>
 800945a:	a365      	add	r3, pc, #404	; (adr r3, 80095f0 <_dtoa_r+0x2b0>)
 800945c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009460:	f7f7 f83a 	bl	80004d8 <__aeabi_dmul>
 8009464:	a364      	add	r3, pc, #400	; (adr r3, 80095f8 <_dtoa_r+0x2b8>)
 8009466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800946a:	f7f6 fe7f 	bl	800016c <__adddf3>
 800946e:	4606      	mov	r6, r0
 8009470:	4620      	mov	r0, r4
 8009472:	460f      	mov	r7, r1
 8009474:	f7f6 ffc6 	bl	8000404 <__aeabi_i2d>
 8009478:	a361      	add	r3, pc, #388	; (adr r3, 8009600 <_dtoa_r+0x2c0>)
 800947a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800947e:	f7f7 f82b 	bl	80004d8 <__aeabi_dmul>
 8009482:	4602      	mov	r2, r0
 8009484:	460b      	mov	r3, r1
 8009486:	4630      	mov	r0, r6
 8009488:	4639      	mov	r1, r7
 800948a:	f7f6 fe6f 	bl	800016c <__adddf3>
 800948e:	4606      	mov	r6, r0
 8009490:	460f      	mov	r7, r1
 8009492:	f7f7 fad1 	bl	8000a38 <__aeabi_d2iz>
 8009496:	2200      	movs	r2, #0
 8009498:	4682      	mov	sl, r0
 800949a:	2300      	movs	r3, #0
 800949c:	4630      	mov	r0, r6
 800949e:	4639      	mov	r1, r7
 80094a0:	f7f7 fa8c 	bl	80009bc <__aeabi_dcmplt>
 80094a4:	b148      	cbz	r0, 80094ba <_dtoa_r+0x17a>
 80094a6:	4650      	mov	r0, sl
 80094a8:	f7f6 ffac 	bl	8000404 <__aeabi_i2d>
 80094ac:	4632      	mov	r2, r6
 80094ae:	463b      	mov	r3, r7
 80094b0:	f7f7 fa7a 	bl	80009a8 <__aeabi_dcmpeq>
 80094b4:	b908      	cbnz	r0, 80094ba <_dtoa_r+0x17a>
 80094b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80094ba:	f1ba 0f16 	cmp.w	sl, #22
 80094be:	d858      	bhi.n	8009572 <_dtoa_r+0x232>
 80094c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80094c4:	4b57      	ldr	r3, [pc, #348]	; (8009624 <_dtoa_r+0x2e4>)
 80094c6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80094ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ce:	f7f7 fa75 	bl	80009bc <__aeabi_dcmplt>
 80094d2:	2800      	cmp	r0, #0
 80094d4:	d04f      	beq.n	8009576 <_dtoa_r+0x236>
 80094d6:	2300      	movs	r3, #0
 80094d8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80094dc:	930f      	str	r3, [sp, #60]	; 0x3c
 80094de:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80094e0:	1b1c      	subs	r4, r3, r4
 80094e2:	1e63      	subs	r3, r4, #1
 80094e4:	9309      	str	r3, [sp, #36]	; 0x24
 80094e6:	bf49      	itett	mi
 80094e8:	f1c4 0301 	rsbmi	r3, r4, #1
 80094ec:	2300      	movpl	r3, #0
 80094ee:	9306      	strmi	r3, [sp, #24]
 80094f0:	2300      	movmi	r3, #0
 80094f2:	bf54      	ite	pl
 80094f4:	9306      	strpl	r3, [sp, #24]
 80094f6:	9309      	strmi	r3, [sp, #36]	; 0x24
 80094f8:	f1ba 0f00 	cmp.w	sl, #0
 80094fc:	db3d      	blt.n	800957a <_dtoa_r+0x23a>
 80094fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009500:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8009504:	4453      	add	r3, sl
 8009506:	9309      	str	r3, [sp, #36]	; 0x24
 8009508:	2300      	movs	r3, #0
 800950a:	930a      	str	r3, [sp, #40]	; 0x28
 800950c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800950e:	2b09      	cmp	r3, #9
 8009510:	f200 808c 	bhi.w	800962c <_dtoa_r+0x2ec>
 8009514:	2b05      	cmp	r3, #5
 8009516:	bfc4      	itt	gt
 8009518:	3b04      	subgt	r3, #4
 800951a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800951c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800951e:	bfc8      	it	gt
 8009520:	2400      	movgt	r4, #0
 8009522:	f1a3 0302 	sub.w	r3, r3, #2
 8009526:	bfd8      	it	le
 8009528:	2401      	movle	r4, #1
 800952a:	2b03      	cmp	r3, #3
 800952c:	f200 808a 	bhi.w	8009644 <_dtoa_r+0x304>
 8009530:	e8df f003 	tbb	[pc, r3]
 8009534:	5b4d4f2d 	.word	0x5b4d4f2d
 8009538:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800953c:	441c      	add	r4, r3
 800953e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8009542:	2b20      	cmp	r3, #32
 8009544:	bfc3      	ittte	gt
 8009546:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800954a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800954e:	fa09 f303 	lslgt.w	r3, r9, r3
 8009552:	f1c3 0320 	rsble	r3, r3, #32
 8009556:	bfc6      	itte	gt
 8009558:	fa26 f000 	lsrgt.w	r0, r6, r0
 800955c:	4318      	orrgt	r0, r3
 800955e:	fa06 f003 	lslle.w	r0, r6, r3
 8009562:	f7f6 ff3f 	bl	80003e4 <__aeabi_ui2d>
 8009566:	2301      	movs	r3, #1
 8009568:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800956c:	3c01      	subs	r4, #1
 800956e:	9313      	str	r3, [sp, #76]	; 0x4c
 8009570:	e76f      	b.n	8009452 <_dtoa_r+0x112>
 8009572:	2301      	movs	r3, #1
 8009574:	e7b2      	b.n	80094dc <_dtoa_r+0x19c>
 8009576:	900f      	str	r0, [sp, #60]	; 0x3c
 8009578:	e7b1      	b.n	80094de <_dtoa_r+0x19e>
 800957a:	9b06      	ldr	r3, [sp, #24]
 800957c:	eba3 030a 	sub.w	r3, r3, sl
 8009580:	9306      	str	r3, [sp, #24]
 8009582:	f1ca 0300 	rsb	r3, sl, #0
 8009586:	930a      	str	r3, [sp, #40]	; 0x28
 8009588:	2300      	movs	r3, #0
 800958a:	930e      	str	r3, [sp, #56]	; 0x38
 800958c:	e7be      	b.n	800950c <_dtoa_r+0x1cc>
 800958e:	2300      	movs	r3, #0
 8009590:	930b      	str	r3, [sp, #44]	; 0x2c
 8009592:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009594:	2b00      	cmp	r3, #0
 8009596:	dc58      	bgt.n	800964a <_dtoa_r+0x30a>
 8009598:	f04f 0901 	mov.w	r9, #1
 800959c:	464b      	mov	r3, r9
 800959e:	f8cd 9020 	str.w	r9, [sp, #32]
 80095a2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80095a6:	2200      	movs	r2, #0
 80095a8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80095aa:	6042      	str	r2, [r0, #4]
 80095ac:	2204      	movs	r2, #4
 80095ae:	f102 0614 	add.w	r6, r2, #20
 80095b2:	429e      	cmp	r6, r3
 80095b4:	6841      	ldr	r1, [r0, #4]
 80095b6:	d94e      	bls.n	8009656 <_dtoa_r+0x316>
 80095b8:	4628      	mov	r0, r5
 80095ba:	f001 fa5d 	bl	800aa78 <_Balloc>
 80095be:	9003      	str	r0, [sp, #12]
 80095c0:	2800      	cmp	r0, #0
 80095c2:	d14c      	bne.n	800965e <_dtoa_r+0x31e>
 80095c4:	4602      	mov	r2, r0
 80095c6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80095ca:	4b17      	ldr	r3, [pc, #92]	; (8009628 <_dtoa_r+0x2e8>)
 80095cc:	e6cc      	b.n	8009368 <_dtoa_r+0x28>
 80095ce:	2301      	movs	r3, #1
 80095d0:	e7de      	b.n	8009590 <_dtoa_r+0x250>
 80095d2:	2300      	movs	r3, #0
 80095d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80095d6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80095d8:	eb0a 0903 	add.w	r9, sl, r3
 80095dc:	f109 0301 	add.w	r3, r9, #1
 80095e0:	2b01      	cmp	r3, #1
 80095e2:	9308      	str	r3, [sp, #32]
 80095e4:	bfb8      	it	lt
 80095e6:	2301      	movlt	r3, #1
 80095e8:	e7dd      	b.n	80095a6 <_dtoa_r+0x266>
 80095ea:	2301      	movs	r3, #1
 80095ec:	e7f2      	b.n	80095d4 <_dtoa_r+0x294>
 80095ee:	bf00      	nop
 80095f0:	636f4361 	.word	0x636f4361
 80095f4:	3fd287a7 	.word	0x3fd287a7
 80095f8:	8b60c8b3 	.word	0x8b60c8b3
 80095fc:	3fc68a28 	.word	0x3fc68a28
 8009600:	509f79fb 	.word	0x509f79fb
 8009604:	3fd34413 	.word	0x3fd34413
 8009608:	0800dfce 	.word	0x0800dfce
 800960c:	0800dfe5 	.word	0x0800dfe5
 8009610:	7ff00000 	.word	0x7ff00000
 8009614:	0800dfca 	.word	0x0800dfca
 8009618:	0800dfc1 	.word	0x0800dfc1
 800961c:	0800de45 	.word	0x0800de45
 8009620:	3ff80000 	.word	0x3ff80000
 8009624:	0800e1b8 	.word	0x0800e1b8
 8009628:	0800e040 	.word	0x0800e040
 800962c:	2401      	movs	r4, #1
 800962e:	2300      	movs	r3, #0
 8009630:	940b      	str	r4, [sp, #44]	; 0x2c
 8009632:	9322      	str	r3, [sp, #136]	; 0x88
 8009634:	f04f 39ff 	mov.w	r9, #4294967295
 8009638:	2200      	movs	r2, #0
 800963a:	2312      	movs	r3, #18
 800963c:	f8cd 9020 	str.w	r9, [sp, #32]
 8009640:	9223      	str	r2, [sp, #140]	; 0x8c
 8009642:	e7b0      	b.n	80095a6 <_dtoa_r+0x266>
 8009644:	2301      	movs	r3, #1
 8009646:	930b      	str	r3, [sp, #44]	; 0x2c
 8009648:	e7f4      	b.n	8009634 <_dtoa_r+0x2f4>
 800964a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800964e:	464b      	mov	r3, r9
 8009650:	f8cd 9020 	str.w	r9, [sp, #32]
 8009654:	e7a7      	b.n	80095a6 <_dtoa_r+0x266>
 8009656:	3101      	adds	r1, #1
 8009658:	6041      	str	r1, [r0, #4]
 800965a:	0052      	lsls	r2, r2, #1
 800965c:	e7a7      	b.n	80095ae <_dtoa_r+0x26e>
 800965e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009660:	9a03      	ldr	r2, [sp, #12]
 8009662:	601a      	str	r2, [r3, #0]
 8009664:	9b08      	ldr	r3, [sp, #32]
 8009666:	2b0e      	cmp	r3, #14
 8009668:	f200 80a8 	bhi.w	80097bc <_dtoa_r+0x47c>
 800966c:	2c00      	cmp	r4, #0
 800966e:	f000 80a5 	beq.w	80097bc <_dtoa_r+0x47c>
 8009672:	f1ba 0f00 	cmp.w	sl, #0
 8009676:	dd34      	ble.n	80096e2 <_dtoa_r+0x3a2>
 8009678:	4a9a      	ldr	r2, [pc, #616]	; (80098e4 <_dtoa_r+0x5a4>)
 800967a:	f00a 030f 	and.w	r3, sl, #15
 800967e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009682:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009686:	e9d3 3400 	ldrd	r3, r4, [r3]
 800968a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800968e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8009692:	d016      	beq.n	80096c2 <_dtoa_r+0x382>
 8009694:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009698:	4b93      	ldr	r3, [pc, #588]	; (80098e8 <_dtoa_r+0x5a8>)
 800969a:	2703      	movs	r7, #3
 800969c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80096a0:	f7f7 f844 	bl	800072c <__aeabi_ddiv>
 80096a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80096a8:	f004 040f 	and.w	r4, r4, #15
 80096ac:	4e8e      	ldr	r6, [pc, #568]	; (80098e8 <_dtoa_r+0x5a8>)
 80096ae:	b954      	cbnz	r4, 80096c6 <_dtoa_r+0x386>
 80096b0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80096b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80096b8:	f7f7 f838 	bl	800072c <__aeabi_ddiv>
 80096bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80096c0:	e029      	b.n	8009716 <_dtoa_r+0x3d6>
 80096c2:	2702      	movs	r7, #2
 80096c4:	e7f2      	b.n	80096ac <_dtoa_r+0x36c>
 80096c6:	07e1      	lsls	r1, r4, #31
 80096c8:	d508      	bpl.n	80096dc <_dtoa_r+0x39c>
 80096ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80096ce:	e9d6 2300 	ldrd	r2, r3, [r6]
 80096d2:	f7f6 ff01 	bl	80004d8 <__aeabi_dmul>
 80096d6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80096da:	3701      	adds	r7, #1
 80096dc:	1064      	asrs	r4, r4, #1
 80096de:	3608      	adds	r6, #8
 80096e0:	e7e5      	b.n	80096ae <_dtoa_r+0x36e>
 80096e2:	f000 80a5 	beq.w	8009830 <_dtoa_r+0x4f0>
 80096e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80096ea:	f1ca 0400 	rsb	r4, sl, #0
 80096ee:	4b7d      	ldr	r3, [pc, #500]	; (80098e4 <_dtoa_r+0x5a4>)
 80096f0:	f004 020f 	and.w	r2, r4, #15
 80096f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80096f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096fc:	f7f6 feec 	bl	80004d8 <__aeabi_dmul>
 8009700:	2702      	movs	r7, #2
 8009702:	2300      	movs	r3, #0
 8009704:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009708:	4e77      	ldr	r6, [pc, #476]	; (80098e8 <_dtoa_r+0x5a8>)
 800970a:	1124      	asrs	r4, r4, #4
 800970c:	2c00      	cmp	r4, #0
 800970e:	f040 8084 	bne.w	800981a <_dtoa_r+0x4da>
 8009712:	2b00      	cmp	r3, #0
 8009714:	d1d2      	bne.n	80096bc <_dtoa_r+0x37c>
 8009716:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009718:	2b00      	cmp	r3, #0
 800971a:	f000 808b 	beq.w	8009834 <_dtoa_r+0x4f4>
 800971e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009722:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009726:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800972a:	2200      	movs	r2, #0
 800972c:	4b6f      	ldr	r3, [pc, #444]	; (80098ec <_dtoa_r+0x5ac>)
 800972e:	f7f7 f945 	bl	80009bc <__aeabi_dcmplt>
 8009732:	2800      	cmp	r0, #0
 8009734:	d07e      	beq.n	8009834 <_dtoa_r+0x4f4>
 8009736:	9b08      	ldr	r3, [sp, #32]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d07b      	beq.n	8009834 <_dtoa_r+0x4f4>
 800973c:	f1b9 0f00 	cmp.w	r9, #0
 8009740:	dd38      	ble.n	80097b4 <_dtoa_r+0x474>
 8009742:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009746:	2200      	movs	r2, #0
 8009748:	4b69      	ldr	r3, [pc, #420]	; (80098f0 <_dtoa_r+0x5b0>)
 800974a:	f7f6 fec5 	bl	80004d8 <__aeabi_dmul>
 800974e:	464c      	mov	r4, r9
 8009750:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009754:	f10a 38ff 	add.w	r8, sl, #4294967295
 8009758:	3701      	adds	r7, #1
 800975a:	4638      	mov	r0, r7
 800975c:	f7f6 fe52 	bl	8000404 <__aeabi_i2d>
 8009760:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009764:	f7f6 feb8 	bl	80004d8 <__aeabi_dmul>
 8009768:	2200      	movs	r2, #0
 800976a:	4b62      	ldr	r3, [pc, #392]	; (80098f4 <_dtoa_r+0x5b4>)
 800976c:	f7f6 fcfe 	bl	800016c <__adddf3>
 8009770:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009774:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009778:	9611      	str	r6, [sp, #68]	; 0x44
 800977a:	2c00      	cmp	r4, #0
 800977c:	d15d      	bne.n	800983a <_dtoa_r+0x4fa>
 800977e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009782:	2200      	movs	r2, #0
 8009784:	4b5c      	ldr	r3, [pc, #368]	; (80098f8 <_dtoa_r+0x5b8>)
 8009786:	f7f6 fcef 	bl	8000168 <__aeabi_dsub>
 800978a:	4602      	mov	r2, r0
 800978c:	460b      	mov	r3, r1
 800978e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009792:	4633      	mov	r3, r6
 8009794:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009796:	f7f7 f92f 	bl	80009f8 <__aeabi_dcmpgt>
 800979a:	2800      	cmp	r0, #0
 800979c:	f040 829c 	bne.w	8009cd8 <_dtoa_r+0x998>
 80097a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80097a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80097a6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80097aa:	f7f7 f907 	bl	80009bc <__aeabi_dcmplt>
 80097ae:	2800      	cmp	r0, #0
 80097b0:	f040 8290 	bne.w	8009cd4 <_dtoa_r+0x994>
 80097b4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80097b8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80097bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80097be:	2b00      	cmp	r3, #0
 80097c0:	f2c0 8152 	blt.w	8009a68 <_dtoa_r+0x728>
 80097c4:	f1ba 0f0e 	cmp.w	sl, #14
 80097c8:	f300 814e 	bgt.w	8009a68 <_dtoa_r+0x728>
 80097cc:	4b45      	ldr	r3, [pc, #276]	; (80098e4 <_dtoa_r+0x5a4>)
 80097ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80097d2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80097d6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80097da:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80097dc:	2b00      	cmp	r3, #0
 80097de:	f280 80db 	bge.w	8009998 <_dtoa_r+0x658>
 80097e2:	9b08      	ldr	r3, [sp, #32]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	f300 80d7 	bgt.w	8009998 <_dtoa_r+0x658>
 80097ea:	f040 8272 	bne.w	8009cd2 <_dtoa_r+0x992>
 80097ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80097f2:	2200      	movs	r2, #0
 80097f4:	4b40      	ldr	r3, [pc, #256]	; (80098f8 <_dtoa_r+0x5b8>)
 80097f6:	f7f6 fe6f 	bl	80004d8 <__aeabi_dmul>
 80097fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80097fe:	f7f7 f8f1 	bl	80009e4 <__aeabi_dcmpge>
 8009802:	9c08      	ldr	r4, [sp, #32]
 8009804:	4626      	mov	r6, r4
 8009806:	2800      	cmp	r0, #0
 8009808:	f040 8248 	bne.w	8009c9c <_dtoa_r+0x95c>
 800980c:	2331      	movs	r3, #49	; 0x31
 800980e:	9f03      	ldr	r7, [sp, #12]
 8009810:	f10a 0a01 	add.w	sl, sl, #1
 8009814:	f807 3b01 	strb.w	r3, [r7], #1
 8009818:	e244      	b.n	8009ca4 <_dtoa_r+0x964>
 800981a:	07e2      	lsls	r2, r4, #31
 800981c:	d505      	bpl.n	800982a <_dtoa_r+0x4ea>
 800981e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009822:	f7f6 fe59 	bl	80004d8 <__aeabi_dmul>
 8009826:	2301      	movs	r3, #1
 8009828:	3701      	adds	r7, #1
 800982a:	1064      	asrs	r4, r4, #1
 800982c:	3608      	adds	r6, #8
 800982e:	e76d      	b.n	800970c <_dtoa_r+0x3cc>
 8009830:	2702      	movs	r7, #2
 8009832:	e770      	b.n	8009716 <_dtoa_r+0x3d6>
 8009834:	46d0      	mov	r8, sl
 8009836:	9c08      	ldr	r4, [sp, #32]
 8009838:	e78f      	b.n	800975a <_dtoa_r+0x41a>
 800983a:	9903      	ldr	r1, [sp, #12]
 800983c:	4b29      	ldr	r3, [pc, #164]	; (80098e4 <_dtoa_r+0x5a4>)
 800983e:	4421      	add	r1, r4
 8009840:	9112      	str	r1, [sp, #72]	; 0x48
 8009842:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009844:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009848:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800984c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009850:	2900      	cmp	r1, #0
 8009852:	d055      	beq.n	8009900 <_dtoa_r+0x5c0>
 8009854:	2000      	movs	r0, #0
 8009856:	4929      	ldr	r1, [pc, #164]	; (80098fc <_dtoa_r+0x5bc>)
 8009858:	f7f6 ff68 	bl	800072c <__aeabi_ddiv>
 800985c:	463b      	mov	r3, r7
 800985e:	4632      	mov	r2, r6
 8009860:	f7f6 fc82 	bl	8000168 <__aeabi_dsub>
 8009864:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009868:	9f03      	ldr	r7, [sp, #12]
 800986a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800986e:	f7f7 f8e3 	bl	8000a38 <__aeabi_d2iz>
 8009872:	4604      	mov	r4, r0
 8009874:	f7f6 fdc6 	bl	8000404 <__aeabi_i2d>
 8009878:	4602      	mov	r2, r0
 800987a:	460b      	mov	r3, r1
 800987c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009880:	f7f6 fc72 	bl	8000168 <__aeabi_dsub>
 8009884:	4602      	mov	r2, r0
 8009886:	460b      	mov	r3, r1
 8009888:	3430      	adds	r4, #48	; 0x30
 800988a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800988e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009892:	f807 4b01 	strb.w	r4, [r7], #1
 8009896:	f7f7 f891 	bl	80009bc <__aeabi_dcmplt>
 800989a:	2800      	cmp	r0, #0
 800989c:	d174      	bne.n	8009988 <_dtoa_r+0x648>
 800989e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80098a2:	2000      	movs	r0, #0
 80098a4:	4911      	ldr	r1, [pc, #68]	; (80098ec <_dtoa_r+0x5ac>)
 80098a6:	f7f6 fc5f 	bl	8000168 <__aeabi_dsub>
 80098aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80098ae:	f7f7 f885 	bl	80009bc <__aeabi_dcmplt>
 80098b2:	2800      	cmp	r0, #0
 80098b4:	f040 80b7 	bne.w	8009a26 <_dtoa_r+0x6e6>
 80098b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80098ba:	429f      	cmp	r7, r3
 80098bc:	f43f af7a 	beq.w	80097b4 <_dtoa_r+0x474>
 80098c0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80098c4:	2200      	movs	r2, #0
 80098c6:	4b0a      	ldr	r3, [pc, #40]	; (80098f0 <_dtoa_r+0x5b0>)
 80098c8:	f7f6 fe06 	bl	80004d8 <__aeabi_dmul>
 80098cc:	2200      	movs	r2, #0
 80098ce:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80098d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80098d6:	4b06      	ldr	r3, [pc, #24]	; (80098f0 <_dtoa_r+0x5b0>)
 80098d8:	f7f6 fdfe 	bl	80004d8 <__aeabi_dmul>
 80098dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80098e0:	e7c3      	b.n	800986a <_dtoa_r+0x52a>
 80098e2:	bf00      	nop
 80098e4:	0800e1b8 	.word	0x0800e1b8
 80098e8:	0800e190 	.word	0x0800e190
 80098ec:	3ff00000 	.word	0x3ff00000
 80098f0:	40240000 	.word	0x40240000
 80098f4:	401c0000 	.word	0x401c0000
 80098f8:	40140000 	.word	0x40140000
 80098fc:	3fe00000 	.word	0x3fe00000
 8009900:	4630      	mov	r0, r6
 8009902:	4639      	mov	r1, r7
 8009904:	f7f6 fde8 	bl	80004d8 <__aeabi_dmul>
 8009908:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800990a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800990e:	9c03      	ldr	r4, [sp, #12]
 8009910:	9314      	str	r3, [sp, #80]	; 0x50
 8009912:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009916:	f7f7 f88f 	bl	8000a38 <__aeabi_d2iz>
 800991a:	9015      	str	r0, [sp, #84]	; 0x54
 800991c:	f7f6 fd72 	bl	8000404 <__aeabi_i2d>
 8009920:	4602      	mov	r2, r0
 8009922:	460b      	mov	r3, r1
 8009924:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009928:	f7f6 fc1e 	bl	8000168 <__aeabi_dsub>
 800992c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800992e:	4606      	mov	r6, r0
 8009930:	3330      	adds	r3, #48	; 0x30
 8009932:	f804 3b01 	strb.w	r3, [r4], #1
 8009936:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009938:	460f      	mov	r7, r1
 800993a:	429c      	cmp	r4, r3
 800993c:	f04f 0200 	mov.w	r2, #0
 8009940:	d124      	bne.n	800998c <_dtoa_r+0x64c>
 8009942:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009946:	4bb0      	ldr	r3, [pc, #704]	; (8009c08 <_dtoa_r+0x8c8>)
 8009948:	f7f6 fc10 	bl	800016c <__adddf3>
 800994c:	4602      	mov	r2, r0
 800994e:	460b      	mov	r3, r1
 8009950:	4630      	mov	r0, r6
 8009952:	4639      	mov	r1, r7
 8009954:	f7f7 f850 	bl	80009f8 <__aeabi_dcmpgt>
 8009958:	2800      	cmp	r0, #0
 800995a:	d163      	bne.n	8009a24 <_dtoa_r+0x6e4>
 800995c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009960:	2000      	movs	r0, #0
 8009962:	49a9      	ldr	r1, [pc, #676]	; (8009c08 <_dtoa_r+0x8c8>)
 8009964:	f7f6 fc00 	bl	8000168 <__aeabi_dsub>
 8009968:	4602      	mov	r2, r0
 800996a:	460b      	mov	r3, r1
 800996c:	4630      	mov	r0, r6
 800996e:	4639      	mov	r1, r7
 8009970:	f7f7 f824 	bl	80009bc <__aeabi_dcmplt>
 8009974:	2800      	cmp	r0, #0
 8009976:	f43f af1d 	beq.w	80097b4 <_dtoa_r+0x474>
 800997a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800997c:	1e7b      	subs	r3, r7, #1
 800997e:	9314      	str	r3, [sp, #80]	; 0x50
 8009980:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8009984:	2b30      	cmp	r3, #48	; 0x30
 8009986:	d0f8      	beq.n	800997a <_dtoa_r+0x63a>
 8009988:	46c2      	mov	sl, r8
 800998a:	e03b      	b.n	8009a04 <_dtoa_r+0x6c4>
 800998c:	4b9f      	ldr	r3, [pc, #636]	; (8009c0c <_dtoa_r+0x8cc>)
 800998e:	f7f6 fda3 	bl	80004d8 <__aeabi_dmul>
 8009992:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009996:	e7bc      	b.n	8009912 <_dtoa_r+0x5d2>
 8009998:	9f03      	ldr	r7, [sp, #12]
 800999a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800999e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80099a2:	4640      	mov	r0, r8
 80099a4:	4649      	mov	r1, r9
 80099a6:	f7f6 fec1 	bl	800072c <__aeabi_ddiv>
 80099aa:	f7f7 f845 	bl	8000a38 <__aeabi_d2iz>
 80099ae:	4604      	mov	r4, r0
 80099b0:	f7f6 fd28 	bl	8000404 <__aeabi_i2d>
 80099b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80099b8:	f7f6 fd8e 	bl	80004d8 <__aeabi_dmul>
 80099bc:	4602      	mov	r2, r0
 80099be:	460b      	mov	r3, r1
 80099c0:	4640      	mov	r0, r8
 80099c2:	4649      	mov	r1, r9
 80099c4:	f7f6 fbd0 	bl	8000168 <__aeabi_dsub>
 80099c8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80099cc:	f807 6b01 	strb.w	r6, [r7], #1
 80099d0:	9e03      	ldr	r6, [sp, #12]
 80099d2:	f8dd c020 	ldr.w	ip, [sp, #32]
 80099d6:	1bbe      	subs	r6, r7, r6
 80099d8:	45b4      	cmp	ip, r6
 80099da:	4602      	mov	r2, r0
 80099dc:	460b      	mov	r3, r1
 80099de:	d136      	bne.n	8009a4e <_dtoa_r+0x70e>
 80099e0:	f7f6 fbc4 	bl	800016c <__adddf3>
 80099e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80099e8:	4680      	mov	r8, r0
 80099ea:	4689      	mov	r9, r1
 80099ec:	f7f7 f804 	bl	80009f8 <__aeabi_dcmpgt>
 80099f0:	bb58      	cbnz	r0, 8009a4a <_dtoa_r+0x70a>
 80099f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80099f6:	4640      	mov	r0, r8
 80099f8:	4649      	mov	r1, r9
 80099fa:	f7f6 ffd5 	bl	80009a8 <__aeabi_dcmpeq>
 80099fe:	b108      	cbz	r0, 8009a04 <_dtoa_r+0x6c4>
 8009a00:	07e1      	lsls	r1, r4, #31
 8009a02:	d422      	bmi.n	8009a4a <_dtoa_r+0x70a>
 8009a04:	4628      	mov	r0, r5
 8009a06:	4659      	mov	r1, fp
 8009a08:	f001 f876 	bl	800aaf8 <_Bfree>
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	703b      	strb	r3, [r7, #0]
 8009a10:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009a12:	f10a 0001 	add.w	r0, sl, #1
 8009a16:	6018      	str	r0, [r3, #0]
 8009a18:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	f43f acde 	beq.w	80093dc <_dtoa_r+0x9c>
 8009a20:	601f      	str	r7, [r3, #0]
 8009a22:	e4db      	b.n	80093dc <_dtoa_r+0x9c>
 8009a24:	4627      	mov	r7, r4
 8009a26:	463b      	mov	r3, r7
 8009a28:	461f      	mov	r7, r3
 8009a2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009a2e:	2a39      	cmp	r2, #57	; 0x39
 8009a30:	d107      	bne.n	8009a42 <_dtoa_r+0x702>
 8009a32:	9a03      	ldr	r2, [sp, #12]
 8009a34:	429a      	cmp	r2, r3
 8009a36:	d1f7      	bne.n	8009a28 <_dtoa_r+0x6e8>
 8009a38:	2230      	movs	r2, #48	; 0x30
 8009a3a:	9903      	ldr	r1, [sp, #12]
 8009a3c:	f108 0801 	add.w	r8, r8, #1
 8009a40:	700a      	strb	r2, [r1, #0]
 8009a42:	781a      	ldrb	r2, [r3, #0]
 8009a44:	3201      	adds	r2, #1
 8009a46:	701a      	strb	r2, [r3, #0]
 8009a48:	e79e      	b.n	8009988 <_dtoa_r+0x648>
 8009a4a:	46d0      	mov	r8, sl
 8009a4c:	e7eb      	b.n	8009a26 <_dtoa_r+0x6e6>
 8009a4e:	2200      	movs	r2, #0
 8009a50:	4b6e      	ldr	r3, [pc, #440]	; (8009c0c <_dtoa_r+0x8cc>)
 8009a52:	f7f6 fd41 	bl	80004d8 <__aeabi_dmul>
 8009a56:	2200      	movs	r2, #0
 8009a58:	2300      	movs	r3, #0
 8009a5a:	4680      	mov	r8, r0
 8009a5c:	4689      	mov	r9, r1
 8009a5e:	f7f6 ffa3 	bl	80009a8 <__aeabi_dcmpeq>
 8009a62:	2800      	cmp	r0, #0
 8009a64:	d09b      	beq.n	800999e <_dtoa_r+0x65e>
 8009a66:	e7cd      	b.n	8009a04 <_dtoa_r+0x6c4>
 8009a68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009a6a:	2a00      	cmp	r2, #0
 8009a6c:	f000 80d0 	beq.w	8009c10 <_dtoa_r+0x8d0>
 8009a70:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009a72:	2a01      	cmp	r2, #1
 8009a74:	f300 80ae 	bgt.w	8009bd4 <_dtoa_r+0x894>
 8009a78:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009a7a:	2a00      	cmp	r2, #0
 8009a7c:	f000 80a6 	beq.w	8009bcc <_dtoa_r+0x88c>
 8009a80:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009a84:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009a86:	9f06      	ldr	r7, [sp, #24]
 8009a88:	9a06      	ldr	r2, [sp, #24]
 8009a8a:	2101      	movs	r1, #1
 8009a8c:	441a      	add	r2, r3
 8009a8e:	9206      	str	r2, [sp, #24]
 8009a90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a92:	4628      	mov	r0, r5
 8009a94:	441a      	add	r2, r3
 8009a96:	9209      	str	r2, [sp, #36]	; 0x24
 8009a98:	f001 f92e 	bl	800acf8 <__i2b>
 8009a9c:	4606      	mov	r6, r0
 8009a9e:	2f00      	cmp	r7, #0
 8009aa0:	dd0c      	ble.n	8009abc <_dtoa_r+0x77c>
 8009aa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	dd09      	ble.n	8009abc <_dtoa_r+0x77c>
 8009aa8:	42bb      	cmp	r3, r7
 8009aaa:	bfa8      	it	ge
 8009aac:	463b      	movge	r3, r7
 8009aae:	9a06      	ldr	r2, [sp, #24]
 8009ab0:	1aff      	subs	r7, r7, r3
 8009ab2:	1ad2      	subs	r2, r2, r3
 8009ab4:	9206      	str	r2, [sp, #24]
 8009ab6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ab8:	1ad3      	subs	r3, r2, r3
 8009aba:	9309      	str	r3, [sp, #36]	; 0x24
 8009abc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009abe:	b1f3      	cbz	r3, 8009afe <_dtoa_r+0x7be>
 8009ac0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	f000 80a8 	beq.w	8009c18 <_dtoa_r+0x8d8>
 8009ac8:	2c00      	cmp	r4, #0
 8009aca:	dd10      	ble.n	8009aee <_dtoa_r+0x7ae>
 8009acc:	4631      	mov	r1, r6
 8009ace:	4622      	mov	r2, r4
 8009ad0:	4628      	mov	r0, r5
 8009ad2:	f001 f9cf 	bl	800ae74 <__pow5mult>
 8009ad6:	465a      	mov	r2, fp
 8009ad8:	4601      	mov	r1, r0
 8009ada:	4606      	mov	r6, r0
 8009adc:	4628      	mov	r0, r5
 8009ade:	f001 f921 	bl	800ad24 <__multiply>
 8009ae2:	4680      	mov	r8, r0
 8009ae4:	4659      	mov	r1, fp
 8009ae6:	4628      	mov	r0, r5
 8009ae8:	f001 f806 	bl	800aaf8 <_Bfree>
 8009aec:	46c3      	mov	fp, r8
 8009aee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009af0:	1b1a      	subs	r2, r3, r4
 8009af2:	d004      	beq.n	8009afe <_dtoa_r+0x7be>
 8009af4:	4659      	mov	r1, fp
 8009af6:	4628      	mov	r0, r5
 8009af8:	f001 f9bc 	bl	800ae74 <__pow5mult>
 8009afc:	4683      	mov	fp, r0
 8009afe:	2101      	movs	r1, #1
 8009b00:	4628      	mov	r0, r5
 8009b02:	f001 f8f9 	bl	800acf8 <__i2b>
 8009b06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b08:	4604      	mov	r4, r0
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	f340 8086 	ble.w	8009c1c <_dtoa_r+0x8dc>
 8009b10:	461a      	mov	r2, r3
 8009b12:	4601      	mov	r1, r0
 8009b14:	4628      	mov	r0, r5
 8009b16:	f001 f9ad 	bl	800ae74 <__pow5mult>
 8009b1a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009b1c:	4604      	mov	r4, r0
 8009b1e:	2b01      	cmp	r3, #1
 8009b20:	dd7f      	ble.n	8009c22 <_dtoa_r+0x8e2>
 8009b22:	f04f 0800 	mov.w	r8, #0
 8009b26:	6923      	ldr	r3, [r4, #16]
 8009b28:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009b2c:	6918      	ldr	r0, [r3, #16]
 8009b2e:	f001 f895 	bl	800ac5c <__hi0bits>
 8009b32:	f1c0 0020 	rsb	r0, r0, #32
 8009b36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b38:	4418      	add	r0, r3
 8009b3a:	f010 001f 	ands.w	r0, r0, #31
 8009b3e:	f000 8092 	beq.w	8009c66 <_dtoa_r+0x926>
 8009b42:	f1c0 0320 	rsb	r3, r0, #32
 8009b46:	2b04      	cmp	r3, #4
 8009b48:	f340 808a 	ble.w	8009c60 <_dtoa_r+0x920>
 8009b4c:	f1c0 001c 	rsb	r0, r0, #28
 8009b50:	9b06      	ldr	r3, [sp, #24]
 8009b52:	4407      	add	r7, r0
 8009b54:	4403      	add	r3, r0
 8009b56:	9306      	str	r3, [sp, #24]
 8009b58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b5a:	4403      	add	r3, r0
 8009b5c:	9309      	str	r3, [sp, #36]	; 0x24
 8009b5e:	9b06      	ldr	r3, [sp, #24]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	dd05      	ble.n	8009b70 <_dtoa_r+0x830>
 8009b64:	4659      	mov	r1, fp
 8009b66:	461a      	mov	r2, r3
 8009b68:	4628      	mov	r0, r5
 8009b6a:	f001 f9dd 	bl	800af28 <__lshift>
 8009b6e:	4683      	mov	fp, r0
 8009b70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	dd05      	ble.n	8009b82 <_dtoa_r+0x842>
 8009b76:	4621      	mov	r1, r4
 8009b78:	461a      	mov	r2, r3
 8009b7a:	4628      	mov	r0, r5
 8009b7c:	f001 f9d4 	bl	800af28 <__lshift>
 8009b80:	4604      	mov	r4, r0
 8009b82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d070      	beq.n	8009c6a <_dtoa_r+0x92a>
 8009b88:	4621      	mov	r1, r4
 8009b8a:	4658      	mov	r0, fp
 8009b8c:	f001 fa3c 	bl	800b008 <__mcmp>
 8009b90:	2800      	cmp	r0, #0
 8009b92:	da6a      	bge.n	8009c6a <_dtoa_r+0x92a>
 8009b94:	2300      	movs	r3, #0
 8009b96:	4659      	mov	r1, fp
 8009b98:	220a      	movs	r2, #10
 8009b9a:	4628      	mov	r0, r5
 8009b9c:	f000 ffce 	bl	800ab3c <__multadd>
 8009ba0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ba2:	4683      	mov	fp, r0
 8009ba4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	f000 8194 	beq.w	8009ed6 <_dtoa_r+0xb96>
 8009bae:	4631      	mov	r1, r6
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	220a      	movs	r2, #10
 8009bb4:	4628      	mov	r0, r5
 8009bb6:	f000 ffc1 	bl	800ab3c <__multadd>
 8009bba:	f1b9 0f00 	cmp.w	r9, #0
 8009bbe:	4606      	mov	r6, r0
 8009bc0:	f300 8093 	bgt.w	8009cea <_dtoa_r+0x9aa>
 8009bc4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009bc6:	2b02      	cmp	r3, #2
 8009bc8:	dc57      	bgt.n	8009c7a <_dtoa_r+0x93a>
 8009bca:	e08e      	b.n	8009cea <_dtoa_r+0x9aa>
 8009bcc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009bce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009bd2:	e757      	b.n	8009a84 <_dtoa_r+0x744>
 8009bd4:	9b08      	ldr	r3, [sp, #32]
 8009bd6:	1e5c      	subs	r4, r3, #1
 8009bd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bda:	42a3      	cmp	r3, r4
 8009bdc:	bfb7      	itett	lt
 8009bde:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009be0:	1b1c      	subge	r4, r3, r4
 8009be2:	1ae2      	sublt	r2, r4, r3
 8009be4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009be6:	bfbe      	ittt	lt
 8009be8:	940a      	strlt	r4, [sp, #40]	; 0x28
 8009bea:	189b      	addlt	r3, r3, r2
 8009bec:	930e      	strlt	r3, [sp, #56]	; 0x38
 8009bee:	9b08      	ldr	r3, [sp, #32]
 8009bf0:	bfb8      	it	lt
 8009bf2:	2400      	movlt	r4, #0
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	bfbb      	ittet	lt
 8009bf8:	9b06      	ldrlt	r3, [sp, #24]
 8009bfa:	9a08      	ldrlt	r2, [sp, #32]
 8009bfc:	9f06      	ldrge	r7, [sp, #24]
 8009bfe:	1a9f      	sublt	r7, r3, r2
 8009c00:	bfac      	ite	ge
 8009c02:	9b08      	ldrge	r3, [sp, #32]
 8009c04:	2300      	movlt	r3, #0
 8009c06:	e73f      	b.n	8009a88 <_dtoa_r+0x748>
 8009c08:	3fe00000 	.word	0x3fe00000
 8009c0c:	40240000 	.word	0x40240000
 8009c10:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009c12:	9f06      	ldr	r7, [sp, #24]
 8009c14:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8009c16:	e742      	b.n	8009a9e <_dtoa_r+0x75e>
 8009c18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c1a:	e76b      	b.n	8009af4 <_dtoa_r+0x7b4>
 8009c1c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009c1e:	2b01      	cmp	r3, #1
 8009c20:	dc19      	bgt.n	8009c56 <_dtoa_r+0x916>
 8009c22:	9b04      	ldr	r3, [sp, #16]
 8009c24:	b9bb      	cbnz	r3, 8009c56 <_dtoa_r+0x916>
 8009c26:	9b05      	ldr	r3, [sp, #20]
 8009c28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009c2c:	b99b      	cbnz	r3, 8009c56 <_dtoa_r+0x916>
 8009c2e:	9b05      	ldr	r3, [sp, #20]
 8009c30:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009c34:	0d1b      	lsrs	r3, r3, #20
 8009c36:	051b      	lsls	r3, r3, #20
 8009c38:	b183      	cbz	r3, 8009c5c <_dtoa_r+0x91c>
 8009c3a:	f04f 0801 	mov.w	r8, #1
 8009c3e:	9b06      	ldr	r3, [sp, #24]
 8009c40:	3301      	adds	r3, #1
 8009c42:	9306      	str	r3, [sp, #24]
 8009c44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c46:	3301      	adds	r3, #1
 8009c48:	9309      	str	r3, [sp, #36]	; 0x24
 8009c4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	f47f af6a 	bne.w	8009b26 <_dtoa_r+0x7e6>
 8009c52:	2001      	movs	r0, #1
 8009c54:	e76f      	b.n	8009b36 <_dtoa_r+0x7f6>
 8009c56:	f04f 0800 	mov.w	r8, #0
 8009c5a:	e7f6      	b.n	8009c4a <_dtoa_r+0x90a>
 8009c5c:	4698      	mov	r8, r3
 8009c5e:	e7f4      	b.n	8009c4a <_dtoa_r+0x90a>
 8009c60:	f43f af7d 	beq.w	8009b5e <_dtoa_r+0x81e>
 8009c64:	4618      	mov	r0, r3
 8009c66:	301c      	adds	r0, #28
 8009c68:	e772      	b.n	8009b50 <_dtoa_r+0x810>
 8009c6a:	9b08      	ldr	r3, [sp, #32]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	dc36      	bgt.n	8009cde <_dtoa_r+0x99e>
 8009c70:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009c72:	2b02      	cmp	r3, #2
 8009c74:	dd33      	ble.n	8009cde <_dtoa_r+0x99e>
 8009c76:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009c7a:	f1b9 0f00 	cmp.w	r9, #0
 8009c7e:	d10d      	bne.n	8009c9c <_dtoa_r+0x95c>
 8009c80:	4621      	mov	r1, r4
 8009c82:	464b      	mov	r3, r9
 8009c84:	2205      	movs	r2, #5
 8009c86:	4628      	mov	r0, r5
 8009c88:	f000 ff58 	bl	800ab3c <__multadd>
 8009c8c:	4601      	mov	r1, r0
 8009c8e:	4604      	mov	r4, r0
 8009c90:	4658      	mov	r0, fp
 8009c92:	f001 f9b9 	bl	800b008 <__mcmp>
 8009c96:	2800      	cmp	r0, #0
 8009c98:	f73f adb8 	bgt.w	800980c <_dtoa_r+0x4cc>
 8009c9c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009c9e:	9f03      	ldr	r7, [sp, #12]
 8009ca0:	ea6f 0a03 	mvn.w	sl, r3
 8009ca4:	f04f 0800 	mov.w	r8, #0
 8009ca8:	4621      	mov	r1, r4
 8009caa:	4628      	mov	r0, r5
 8009cac:	f000 ff24 	bl	800aaf8 <_Bfree>
 8009cb0:	2e00      	cmp	r6, #0
 8009cb2:	f43f aea7 	beq.w	8009a04 <_dtoa_r+0x6c4>
 8009cb6:	f1b8 0f00 	cmp.w	r8, #0
 8009cba:	d005      	beq.n	8009cc8 <_dtoa_r+0x988>
 8009cbc:	45b0      	cmp	r8, r6
 8009cbe:	d003      	beq.n	8009cc8 <_dtoa_r+0x988>
 8009cc0:	4641      	mov	r1, r8
 8009cc2:	4628      	mov	r0, r5
 8009cc4:	f000 ff18 	bl	800aaf8 <_Bfree>
 8009cc8:	4631      	mov	r1, r6
 8009cca:	4628      	mov	r0, r5
 8009ccc:	f000 ff14 	bl	800aaf8 <_Bfree>
 8009cd0:	e698      	b.n	8009a04 <_dtoa_r+0x6c4>
 8009cd2:	2400      	movs	r4, #0
 8009cd4:	4626      	mov	r6, r4
 8009cd6:	e7e1      	b.n	8009c9c <_dtoa_r+0x95c>
 8009cd8:	46c2      	mov	sl, r8
 8009cda:	4626      	mov	r6, r4
 8009cdc:	e596      	b.n	800980c <_dtoa_r+0x4cc>
 8009cde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ce0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	f000 80fd 	beq.w	8009ee4 <_dtoa_r+0xba4>
 8009cea:	2f00      	cmp	r7, #0
 8009cec:	dd05      	ble.n	8009cfa <_dtoa_r+0x9ba>
 8009cee:	4631      	mov	r1, r6
 8009cf0:	463a      	mov	r2, r7
 8009cf2:	4628      	mov	r0, r5
 8009cf4:	f001 f918 	bl	800af28 <__lshift>
 8009cf8:	4606      	mov	r6, r0
 8009cfa:	f1b8 0f00 	cmp.w	r8, #0
 8009cfe:	d05c      	beq.n	8009dba <_dtoa_r+0xa7a>
 8009d00:	4628      	mov	r0, r5
 8009d02:	6871      	ldr	r1, [r6, #4]
 8009d04:	f000 feb8 	bl	800aa78 <_Balloc>
 8009d08:	4607      	mov	r7, r0
 8009d0a:	b928      	cbnz	r0, 8009d18 <_dtoa_r+0x9d8>
 8009d0c:	4602      	mov	r2, r0
 8009d0e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009d12:	4b7f      	ldr	r3, [pc, #508]	; (8009f10 <_dtoa_r+0xbd0>)
 8009d14:	f7ff bb28 	b.w	8009368 <_dtoa_r+0x28>
 8009d18:	6932      	ldr	r2, [r6, #16]
 8009d1a:	f106 010c 	add.w	r1, r6, #12
 8009d1e:	3202      	adds	r2, #2
 8009d20:	0092      	lsls	r2, r2, #2
 8009d22:	300c      	adds	r0, #12
 8009d24:	f7fd fbf0 	bl	8007508 <memcpy>
 8009d28:	2201      	movs	r2, #1
 8009d2a:	4639      	mov	r1, r7
 8009d2c:	4628      	mov	r0, r5
 8009d2e:	f001 f8fb 	bl	800af28 <__lshift>
 8009d32:	46b0      	mov	r8, r6
 8009d34:	4606      	mov	r6, r0
 8009d36:	9b03      	ldr	r3, [sp, #12]
 8009d38:	3301      	adds	r3, #1
 8009d3a:	9308      	str	r3, [sp, #32]
 8009d3c:	9b03      	ldr	r3, [sp, #12]
 8009d3e:	444b      	add	r3, r9
 8009d40:	930a      	str	r3, [sp, #40]	; 0x28
 8009d42:	9b04      	ldr	r3, [sp, #16]
 8009d44:	f003 0301 	and.w	r3, r3, #1
 8009d48:	9309      	str	r3, [sp, #36]	; 0x24
 8009d4a:	9b08      	ldr	r3, [sp, #32]
 8009d4c:	4621      	mov	r1, r4
 8009d4e:	3b01      	subs	r3, #1
 8009d50:	4658      	mov	r0, fp
 8009d52:	9304      	str	r3, [sp, #16]
 8009d54:	f7ff fa68 	bl	8009228 <quorem>
 8009d58:	4603      	mov	r3, r0
 8009d5a:	4641      	mov	r1, r8
 8009d5c:	3330      	adds	r3, #48	; 0x30
 8009d5e:	9006      	str	r0, [sp, #24]
 8009d60:	4658      	mov	r0, fp
 8009d62:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d64:	f001 f950 	bl	800b008 <__mcmp>
 8009d68:	4632      	mov	r2, r6
 8009d6a:	4681      	mov	r9, r0
 8009d6c:	4621      	mov	r1, r4
 8009d6e:	4628      	mov	r0, r5
 8009d70:	f001 f966 	bl	800b040 <__mdiff>
 8009d74:	68c2      	ldr	r2, [r0, #12]
 8009d76:	4607      	mov	r7, r0
 8009d78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d7a:	bb02      	cbnz	r2, 8009dbe <_dtoa_r+0xa7e>
 8009d7c:	4601      	mov	r1, r0
 8009d7e:	4658      	mov	r0, fp
 8009d80:	f001 f942 	bl	800b008 <__mcmp>
 8009d84:	4602      	mov	r2, r0
 8009d86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d88:	4639      	mov	r1, r7
 8009d8a:	4628      	mov	r0, r5
 8009d8c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8009d90:	f000 feb2 	bl	800aaf8 <_Bfree>
 8009d94:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009d96:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009d98:	9f08      	ldr	r7, [sp, #32]
 8009d9a:	ea43 0102 	orr.w	r1, r3, r2
 8009d9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009da0:	430b      	orrs	r3, r1
 8009da2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009da4:	d10d      	bne.n	8009dc2 <_dtoa_r+0xa82>
 8009da6:	2b39      	cmp	r3, #57	; 0x39
 8009da8:	d029      	beq.n	8009dfe <_dtoa_r+0xabe>
 8009daa:	f1b9 0f00 	cmp.w	r9, #0
 8009dae:	dd01      	ble.n	8009db4 <_dtoa_r+0xa74>
 8009db0:	9b06      	ldr	r3, [sp, #24]
 8009db2:	3331      	adds	r3, #49	; 0x31
 8009db4:	9a04      	ldr	r2, [sp, #16]
 8009db6:	7013      	strb	r3, [r2, #0]
 8009db8:	e776      	b.n	8009ca8 <_dtoa_r+0x968>
 8009dba:	4630      	mov	r0, r6
 8009dbc:	e7b9      	b.n	8009d32 <_dtoa_r+0x9f2>
 8009dbe:	2201      	movs	r2, #1
 8009dc0:	e7e2      	b.n	8009d88 <_dtoa_r+0xa48>
 8009dc2:	f1b9 0f00 	cmp.w	r9, #0
 8009dc6:	db06      	blt.n	8009dd6 <_dtoa_r+0xa96>
 8009dc8:	9922      	ldr	r1, [sp, #136]	; 0x88
 8009dca:	ea41 0909 	orr.w	r9, r1, r9
 8009dce:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009dd0:	ea59 0101 	orrs.w	r1, r9, r1
 8009dd4:	d120      	bne.n	8009e18 <_dtoa_r+0xad8>
 8009dd6:	2a00      	cmp	r2, #0
 8009dd8:	ddec      	ble.n	8009db4 <_dtoa_r+0xa74>
 8009dda:	4659      	mov	r1, fp
 8009ddc:	2201      	movs	r2, #1
 8009dde:	4628      	mov	r0, r5
 8009de0:	9308      	str	r3, [sp, #32]
 8009de2:	f001 f8a1 	bl	800af28 <__lshift>
 8009de6:	4621      	mov	r1, r4
 8009de8:	4683      	mov	fp, r0
 8009dea:	f001 f90d 	bl	800b008 <__mcmp>
 8009dee:	2800      	cmp	r0, #0
 8009df0:	9b08      	ldr	r3, [sp, #32]
 8009df2:	dc02      	bgt.n	8009dfa <_dtoa_r+0xaba>
 8009df4:	d1de      	bne.n	8009db4 <_dtoa_r+0xa74>
 8009df6:	07da      	lsls	r2, r3, #31
 8009df8:	d5dc      	bpl.n	8009db4 <_dtoa_r+0xa74>
 8009dfa:	2b39      	cmp	r3, #57	; 0x39
 8009dfc:	d1d8      	bne.n	8009db0 <_dtoa_r+0xa70>
 8009dfe:	2339      	movs	r3, #57	; 0x39
 8009e00:	9a04      	ldr	r2, [sp, #16]
 8009e02:	7013      	strb	r3, [r2, #0]
 8009e04:	463b      	mov	r3, r7
 8009e06:	461f      	mov	r7, r3
 8009e08:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8009e0c:	3b01      	subs	r3, #1
 8009e0e:	2a39      	cmp	r2, #57	; 0x39
 8009e10:	d050      	beq.n	8009eb4 <_dtoa_r+0xb74>
 8009e12:	3201      	adds	r2, #1
 8009e14:	701a      	strb	r2, [r3, #0]
 8009e16:	e747      	b.n	8009ca8 <_dtoa_r+0x968>
 8009e18:	2a00      	cmp	r2, #0
 8009e1a:	dd03      	ble.n	8009e24 <_dtoa_r+0xae4>
 8009e1c:	2b39      	cmp	r3, #57	; 0x39
 8009e1e:	d0ee      	beq.n	8009dfe <_dtoa_r+0xabe>
 8009e20:	3301      	adds	r3, #1
 8009e22:	e7c7      	b.n	8009db4 <_dtoa_r+0xa74>
 8009e24:	9a08      	ldr	r2, [sp, #32]
 8009e26:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009e28:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009e2c:	428a      	cmp	r2, r1
 8009e2e:	d02a      	beq.n	8009e86 <_dtoa_r+0xb46>
 8009e30:	4659      	mov	r1, fp
 8009e32:	2300      	movs	r3, #0
 8009e34:	220a      	movs	r2, #10
 8009e36:	4628      	mov	r0, r5
 8009e38:	f000 fe80 	bl	800ab3c <__multadd>
 8009e3c:	45b0      	cmp	r8, r6
 8009e3e:	4683      	mov	fp, r0
 8009e40:	f04f 0300 	mov.w	r3, #0
 8009e44:	f04f 020a 	mov.w	r2, #10
 8009e48:	4641      	mov	r1, r8
 8009e4a:	4628      	mov	r0, r5
 8009e4c:	d107      	bne.n	8009e5e <_dtoa_r+0xb1e>
 8009e4e:	f000 fe75 	bl	800ab3c <__multadd>
 8009e52:	4680      	mov	r8, r0
 8009e54:	4606      	mov	r6, r0
 8009e56:	9b08      	ldr	r3, [sp, #32]
 8009e58:	3301      	adds	r3, #1
 8009e5a:	9308      	str	r3, [sp, #32]
 8009e5c:	e775      	b.n	8009d4a <_dtoa_r+0xa0a>
 8009e5e:	f000 fe6d 	bl	800ab3c <__multadd>
 8009e62:	4631      	mov	r1, r6
 8009e64:	4680      	mov	r8, r0
 8009e66:	2300      	movs	r3, #0
 8009e68:	220a      	movs	r2, #10
 8009e6a:	4628      	mov	r0, r5
 8009e6c:	f000 fe66 	bl	800ab3c <__multadd>
 8009e70:	4606      	mov	r6, r0
 8009e72:	e7f0      	b.n	8009e56 <_dtoa_r+0xb16>
 8009e74:	f1b9 0f00 	cmp.w	r9, #0
 8009e78:	bfcc      	ite	gt
 8009e7a:	464f      	movgt	r7, r9
 8009e7c:	2701      	movle	r7, #1
 8009e7e:	f04f 0800 	mov.w	r8, #0
 8009e82:	9a03      	ldr	r2, [sp, #12]
 8009e84:	4417      	add	r7, r2
 8009e86:	4659      	mov	r1, fp
 8009e88:	2201      	movs	r2, #1
 8009e8a:	4628      	mov	r0, r5
 8009e8c:	9308      	str	r3, [sp, #32]
 8009e8e:	f001 f84b 	bl	800af28 <__lshift>
 8009e92:	4621      	mov	r1, r4
 8009e94:	4683      	mov	fp, r0
 8009e96:	f001 f8b7 	bl	800b008 <__mcmp>
 8009e9a:	2800      	cmp	r0, #0
 8009e9c:	dcb2      	bgt.n	8009e04 <_dtoa_r+0xac4>
 8009e9e:	d102      	bne.n	8009ea6 <_dtoa_r+0xb66>
 8009ea0:	9b08      	ldr	r3, [sp, #32]
 8009ea2:	07db      	lsls	r3, r3, #31
 8009ea4:	d4ae      	bmi.n	8009e04 <_dtoa_r+0xac4>
 8009ea6:	463b      	mov	r3, r7
 8009ea8:	461f      	mov	r7, r3
 8009eaa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009eae:	2a30      	cmp	r2, #48	; 0x30
 8009eb0:	d0fa      	beq.n	8009ea8 <_dtoa_r+0xb68>
 8009eb2:	e6f9      	b.n	8009ca8 <_dtoa_r+0x968>
 8009eb4:	9a03      	ldr	r2, [sp, #12]
 8009eb6:	429a      	cmp	r2, r3
 8009eb8:	d1a5      	bne.n	8009e06 <_dtoa_r+0xac6>
 8009eba:	2331      	movs	r3, #49	; 0x31
 8009ebc:	f10a 0a01 	add.w	sl, sl, #1
 8009ec0:	e779      	b.n	8009db6 <_dtoa_r+0xa76>
 8009ec2:	4b14      	ldr	r3, [pc, #80]	; (8009f14 <_dtoa_r+0xbd4>)
 8009ec4:	f7ff baa8 	b.w	8009418 <_dtoa_r+0xd8>
 8009ec8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	f47f aa81 	bne.w	80093d2 <_dtoa_r+0x92>
 8009ed0:	4b11      	ldr	r3, [pc, #68]	; (8009f18 <_dtoa_r+0xbd8>)
 8009ed2:	f7ff baa1 	b.w	8009418 <_dtoa_r+0xd8>
 8009ed6:	f1b9 0f00 	cmp.w	r9, #0
 8009eda:	dc03      	bgt.n	8009ee4 <_dtoa_r+0xba4>
 8009edc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009ede:	2b02      	cmp	r3, #2
 8009ee0:	f73f aecb 	bgt.w	8009c7a <_dtoa_r+0x93a>
 8009ee4:	9f03      	ldr	r7, [sp, #12]
 8009ee6:	4621      	mov	r1, r4
 8009ee8:	4658      	mov	r0, fp
 8009eea:	f7ff f99d 	bl	8009228 <quorem>
 8009eee:	9a03      	ldr	r2, [sp, #12]
 8009ef0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009ef4:	f807 3b01 	strb.w	r3, [r7], #1
 8009ef8:	1aba      	subs	r2, r7, r2
 8009efa:	4591      	cmp	r9, r2
 8009efc:	ddba      	ble.n	8009e74 <_dtoa_r+0xb34>
 8009efe:	4659      	mov	r1, fp
 8009f00:	2300      	movs	r3, #0
 8009f02:	220a      	movs	r2, #10
 8009f04:	4628      	mov	r0, r5
 8009f06:	f000 fe19 	bl	800ab3c <__multadd>
 8009f0a:	4683      	mov	fp, r0
 8009f0c:	e7eb      	b.n	8009ee6 <_dtoa_r+0xba6>
 8009f0e:	bf00      	nop
 8009f10:	0800e040 	.word	0x0800e040
 8009f14:	0800de44 	.word	0x0800de44
 8009f18:	0800dfc1 	.word	0x0800dfc1

08009f1c <__sflush_r>:
 8009f1c:	898a      	ldrh	r2, [r1, #12]
 8009f1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f20:	4605      	mov	r5, r0
 8009f22:	0710      	lsls	r0, r2, #28
 8009f24:	460c      	mov	r4, r1
 8009f26:	d457      	bmi.n	8009fd8 <__sflush_r+0xbc>
 8009f28:	684b      	ldr	r3, [r1, #4]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	dc04      	bgt.n	8009f38 <__sflush_r+0x1c>
 8009f2e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	dc01      	bgt.n	8009f38 <__sflush_r+0x1c>
 8009f34:	2000      	movs	r0, #0
 8009f36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009f3a:	2e00      	cmp	r6, #0
 8009f3c:	d0fa      	beq.n	8009f34 <__sflush_r+0x18>
 8009f3e:	2300      	movs	r3, #0
 8009f40:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009f44:	682f      	ldr	r7, [r5, #0]
 8009f46:	602b      	str	r3, [r5, #0]
 8009f48:	d032      	beq.n	8009fb0 <__sflush_r+0x94>
 8009f4a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009f4c:	89a3      	ldrh	r3, [r4, #12]
 8009f4e:	075a      	lsls	r2, r3, #29
 8009f50:	d505      	bpl.n	8009f5e <__sflush_r+0x42>
 8009f52:	6863      	ldr	r3, [r4, #4]
 8009f54:	1ac0      	subs	r0, r0, r3
 8009f56:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009f58:	b10b      	cbz	r3, 8009f5e <__sflush_r+0x42>
 8009f5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009f5c:	1ac0      	subs	r0, r0, r3
 8009f5e:	2300      	movs	r3, #0
 8009f60:	4602      	mov	r2, r0
 8009f62:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009f64:	4628      	mov	r0, r5
 8009f66:	6a21      	ldr	r1, [r4, #32]
 8009f68:	47b0      	blx	r6
 8009f6a:	1c43      	adds	r3, r0, #1
 8009f6c:	89a3      	ldrh	r3, [r4, #12]
 8009f6e:	d106      	bne.n	8009f7e <__sflush_r+0x62>
 8009f70:	6829      	ldr	r1, [r5, #0]
 8009f72:	291d      	cmp	r1, #29
 8009f74:	d82c      	bhi.n	8009fd0 <__sflush_r+0xb4>
 8009f76:	4a29      	ldr	r2, [pc, #164]	; (800a01c <__sflush_r+0x100>)
 8009f78:	40ca      	lsrs	r2, r1
 8009f7a:	07d6      	lsls	r6, r2, #31
 8009f7c:	d528      	bpl.n	8009fd0 <__sflush_r+0xb4>
 8009f7e:	2200      	movs	r2, #0
 8009f80:	6062      	str	r2, [r4, #4]
 8009f82:	6922      	ldr	r2, [r4, #16]
 8009f84:	04d9      	lsls	r1, r3, #19
 8009f86:	6022      	str	r2, [r4, #0]
 8009f88:	d504      	bpl.n	8009f94 <__sflush_r+0x78>
 8009f8a:	1c42      	adds	r2, r0, #1
 8009f8c:	d101      	bne.n	8009f92 <__sflush_r+0x76>
 8009f8e:	682b      	ldr	r3, [r5, #0]
 8009f90:	b903      	cbnz	r3, 8009f94 <__sflush_r+0x78>
 8009f92:	6560      	str	r0, [r4, #84]	; 0x54
 8009f94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f96:	602f      	str	r7, [r5, #0]
 8009f98:	2900      	cmp	r1, #0
 8009f9a:	d0cb      	beq.n	8009f34 <__sflush_r+0x18>
 8009f9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009fa0:	4299      	cmp	r1, r3
 8009fa2:	d002      	beq.n	8009faa <__sflush_r+0x8e>
 8009fa4:	4628      	mov	r0, r5
 8009fa6:	f001 fa33 	bl	800b410 <_free_r>
 8009faa:	2000      	movs	r0, #0
 8009fac:	6360      	str	r0, [r4, #52]	; 0x34
 8009fae:	e7c2      	b.n	8009f36 <__sflush_r+0x1a>
 8009fb0:	6a21      	ldr	r1, [r4, #32]
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	4628      	mov	r0, r5
 8009fb6:	47b0      	blx	r6
 8009fb8:	1c41      	adds	r1, r0, #1
 8009fba:	d1c7      	bne.n	8009f4c <__sflush_r+0x30>
 8009fbc:	682b      	ldr	r3, [r5, #0]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d0c4      	beq.n	8009f4c <__sflush_r+0x30>
 8009fc2:	2b1d      	cmp	r3, #29
 8009fc4:	d001      	beq.n	8009fca <__sflush_r+0xae>
 8009fc6:	2b16      	cmp	r3, #22
 8009fc8:	d101      	bne.n	8009fce <__sflush_r+0xb2>
 8009fca:	602f      	str	r7, [r5, #0]
 8009fcc:	e7b2      	b.n	8009f34 <__sflush_r+0x18>
 8009fce:	89a3      	ldrh	r3, [r4, #12]
 8009fd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009fd4:	81a3      	strh	r3, [r4, #12]
 8009fd6:	e7ae      	b.n	8009f36 <__sflush_r+0x1a>
 8009fd8:	690f      	ldr	r7, [r1, #16]
 8009fda:	2f00      	cmp	r7, #0
 8009fdc:	d0aa      	beq.n	8009f34 <__sflush_r+0x18>
 8009fde:	0793      	lsls	r3, r2, #30
 8009fe0:	bf18      	it	ne
 8009fe2:	2300      	movne	r3, #0
 8009fe4:	680e      	ldr	r6, [r1, #0]
 8009fe6:	bf08      	it	eq
 8009fe8:	694b      	ldreq	r3, [r1, #20]
 8009fea:	1bf6      	subs	r6, r6, r7
 8009fec:	600f      	str	r7, [r1, #0]
 8009fee:	608b      	str	r3, [r1, #8]
 8009ff0:	2e00      	cmp	r6, #0
 8009ff2:	dd9f      	ble.n	8009f34 <__sflush_r+0x18>
 8009ff4:	4633      	mov	r3, r6
 8009ff6:	463a      	mov	r2, r7
 8009ff8:	4628      	mov	r0, r5
 8009ffa:	6a21      	ldr	r1, [r4, #32]
 8009ffc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800a000:	47e0      	blx	ip
 800a002:	2800      	cmp	r0, #0
 800a004:	dc06      	bgt.n	800a014 <__sflush_r+0xf8>
 800a006:	89a3      	ldrh	r3, [r4, #12]
 800a008:	f04f 30ff 	mov.w	r0, #4294967295
 800a00c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a010:	81a3      	strh	r3, [r4, #12]
 800a012:	e790      	b.n	8009f36 <__sflush_r+0x1a>
 800a014:	4407      	add	r7, r0
 800a016:	1a36      	subs	r6, r6, r0
 800a018:	e7ea      	b.n	8009ff0 <__sflush_r+0xd4>
 800a01a:	bf00      	nop
 800a01c:	20400001 	.word	0x20400001

0800a020 <_fflush_r>:
 800a020:	b538      	push	{r3, r4, r5, lr}
 800a022:	690b      	ldr	r3, [r1, #16]
 800a024:	4605      	mov	r5, r0
 800a026:	460c      	mov	r4, r1
 800a028:	b913      	cbnz	r3, 800a030 <_fflush_r+0x10>
 800a02a:	2500      	movs	r5, #0
 800a02c:	4628      	mov	r0, r5
 800a02e:	bd38      	pop	{r3, r4, r5, pc}
 800a030:	b118      	cbz	r0, 800a03a <_fflush_r+0x1a>
 800a032:	6983      	ldr	r3, [r0, #24]
 800a034:	b90b      	cbnz	r3, 800a03a <_fflush_r+0x1a>
 800a036:	f000 f887 	bl	800a148 <__sinit>
 800a03a:	4b14      	ldr	r3, [pc, #80]	; (800a08c <_fflush_r+0x6c>)
 800a03c:	429c      	cmp	r4, r3
 800a03e:	d11b      	bne.n	800a078 <_fflush_r+0x58>
 800a040:	686c      	ldr	r4, [r5, #4]
 800a042:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d0ef      	beq.n	800a02a <_fflush_r+0xa>
 800a04a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a04c:	07d0      	lsls	r0, r2, #31
 800a04e:	d404      	bmi.n	800a05a <_fflush_r+0x3a>
 800a050:	0599      	lsls	r1, r3, #22
 800a052:	d402      	bmi.n	800a05a <_fflush_r+0x3a>
 800a054:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a056:	f000 fc80 	bl	800a95a <__retarget_lock_acquire_recursive>
 800a05a:	4628      	mov	r0, r5
 800a05c:	4621      	mov	r1, r4
 800a05e:	f7ff ff5d 	bl	8009f1c <__sflush_r>
 800a062:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a064:	4605      	mov	r5, r0
 800a066:	07da      	lsls	r2, r3, #31
 800a068:	d4e0      	bmi.n	800a02c <_fflush_r+0xc>
 800a06a:	89a3      	ldrh	r3, [r4, #12]
 800a06c:	059b      	lsls	r3, r3, #22
 800a06e:	d4dd      	bmi.n	800a02c <_fflush_r+0xc>
 800a070:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a072:	f000 fc73 	bl	800a95c <__retarget_lock_release_recursive>
 800a076:	e7d9      	b.n	800a02c <_fflush_r+0xc>
 800a078:	4b05      	ldr	r3, [pc, #20]	; (800a090 <_fflush_r+0x70>)
 800a07a:	429c      	cmp	r4, r3
 800a07c:	d101      	bne.n	800a082 <_fflush_r+0x62>
 800a07e:	68ac      	ldr	r4, [r5, #8]
 800a080:	e7df      	b.n	800a042 <_fflush_r+0x22>
 800a082:	4b04      	ldr	r3, [pc, #16]	; (800a094 <_fflush_r+0x74>)
 800a084:	429c      	cmp	r4, r3
 800a086:	bf08      	it	eq
 800a088:	68ec      	ldreq	r4, [r5, #12]
 800a08a:	e7da      	b.n	800a042 <_fflush_r+0x22>
 800a08c:	0800e074 	.word	0x0800e074
 800a090:	0800e094 	.word	0x0800e094
 800a094:	0800e054 	.word	0x0800e054

0800a098 <std>:
 800a098:	2300      	movs	r3, #0
 800a09a:	b510      	push	{r4, lr}
 800a09c:	4604      	mov	r4, r0
 800a09e:	e9c0 3300 	strd	r3, r3, [r0]
 800a0a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a0a6:	6083      	str	r3, [r0, #8]
 800a0a8:	8181      	strh	r1, [r0, #12]
 800a0aa:	6643      	str	r3, [r0, #100]	; 0x64
 800a0ac:	81c2      	strh	r2, [r0, #14]
 800a0ae:	6183      	str	r3, [r0, #24]
 800a0b0:	4619      	mov	r1, r3
 800a0b2:	2208      	movs	r2, #8
 800a0b4:	305c      	adds	r0, #92	; 0x5c
 800a0b6:	f7fd fa35 	bl	8007524 <memset>
 800a0ba:	4b05      	ldr	r3, [pc, #20]	; (800a0d0 <std+0x38>)
 800a0bc:	6224      	str	r4, [r4, #32]
 800a0be:	6263      	str	r3, [r4, #36]	; 0x24
 800a0c0:	4b04      	ldr	r3, [pc, #16]	; (800a0d4 <std+0x3c>)
 800a0c2:	62a3      	str	r3, [r4, #40]	; 0x28
 800a0c4:	4b04      	ldr	r3, [pc, #16]	; (800a0d8 <std+0x40>)
 800a0c6:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a0c8:	4b04      	ldr	r3, [pc, #16]	; (800a0dc <std+0x44>)
 800a0ca:	6323      	str	r3, [r4, #48]	; 0x30
 800a0cc:	bd10      	pop	{r4, pc}
 800a0ce:	bf00      	nop
 800a0d0:	0800bb5d 	.word	0x0800bb5d
 800a0d4:	0800bb7f 	.word	0x0800bb7f
 800a0d8:	0800bbb7 	.word	0x0800bbb7
 800a0dc:	0800bbdb 	.word	0x0800bbdb

0800a0e0 <_cleanup_r>:
 800a0e0:	4901      	ldr	r1, [pc, #4]	; (800a0e8 <_cleanup_r+0x8>)
 800a0e2:	f000 b8af 	b.w	800a244 <_fwalk_reent>
 800a0e6:	bf00      	nop
 800a0e8:	0800a021 	.word	0x0800a021

0800a0ec <__sfmoreglue>:
 800a0ec:	2268      	movs	r2, #104	; 0x68
 800a0ee:	b570      	push	{r4, r5, r6, lr}
 800a0f0:	1e4d      	subs	r5, r1, #1
 800a0f2:	4355      	muls	r5, r2
 800a0f4:	460e      	mov	r6, r1
 800a0f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a0fa:	f001 f9f1 	bl	800b4e0 <_malloc_r>
 800a0fe:	4604      	mov	r4, r0
 800a100:	b140      	cbz	r0, 800a114 <__sfmoreglue+0x28>
 800a102:	2100      	movs	r1, #0
 800a104:	e9c0 1600 	strd	r1, r6, [r0]
 800a108:	300c      	adds	r0, #12
 800a10a:	60a0      	str	r0, [r4, #8]
 800a10c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a110:	f7fd fa08 	bl	8007524 <memset>
 800a114:	4620      	mov	r0, r4
 800a116:	bd70      	pop	{r4, r5, r6, pc}

0800a118 <__sfp_lock_acquire>:
 800a118:	4801      	ldr	r0, [pc, #4]	; (800a120 <__sfp_lock_acquire+0x8>)
 800a11a:	f000 bc1e 	b.w	800a95a <__retarget_lock_acquire_recursive>
 800a11e:	bf00      	nop
 800a120:	20000bed 	.word	0x20000bed

0800a124 <__sfp_lock_release>:
 800a124:	4801      	ldr	r0, [pc, #4]	; (800a12c <__sfp_lock_release+0x8>)
 800a126:	f000 bc19 	b.w	800a95c <__retarget_lock_release_recursive>
 800a12a:	bf00      	nop
 800a12c:	20000bed 	.word	0x20000bed

0800a130 <__sinit_lock_acquire>:
 800a130:	4801      	ldr	r0, [pc, #4]	; (800a138 <__sinit_lock_acquire+0x8>)
 800a132:	f000 bc12 	b.w	800a95a <__retarget_lock_acquire_recursive>
 800a136:	bf00      	nop
 800a138:	20000bee 	.word	0x20000bee

0800a13c <__sinit_lock_release>:
 800a13c:	4801      	ldr	r0, [pc, #4]	; (800a144 <__sinit_lock_release+0x8>)
 800a13e:	f000 bc0d 	b.w	800a95c <__retarget_lock_release_recursive>
 800a142:	bf00      	nop
 800a144:	20000bee 	.word	0x20000bee

0800a148 <__sinit>:
 800a148:	b510      	push	{r4, lr}
 800a14a:	4604      	mov	r4, r0
 800a14c:	f7ff fff0 	bl	800a130 <__sinit_lock_acquire>
 800a150:	69a3      	ldr	r3, [r4, #24]
 800a152:	b11b      	cbz	r3, 800a15c <__sinit+0x14>
 800a154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a158:	f7ff bff0 	b.w	800a13c <__sinit_lock_release>
 800a15c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a160:	6523      	str	r3, [r4, #80]	; 0x50
 800a162:	4b13      	ldr	r3, [pc, #76]	; (800a1b0 <__sinit+0x68>)
 800a164:	4a13      	ldr	r2, [pc, #76]	; (800a1b4 <__sinit+0x6c>)
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	62a2      	str	r2, [r4, #40]	; 0x28
 800a16a:	42a3      	cmp	r3, r4
 800a16c:	bf08      	it	eq
 800a16e:	2301      	moveq	r3, #1
 800a170:	4620      	mov	r0, r4
 800a172:	bf08      	it	eq
 800a174:	61a3      	streq	r3, [r4, #24]
 800a176:	f000 f81f 	bl	800a1b8 <__sfp>
 800a17a:	6060      	str	r0, [r4, #4]
 800a17c:	4620      	mov	r0, r4
 800a17e:	f000 f81b 	bl	800a1b8 <__sfp>
 800a182:	60a0      	str	r0, [r4, #8]
 800a184:	4620      	mov	r0, r4
 800a186:	f000 f817 	bl	800a1b8 <__sfp>
 800a18a:	2200      	movs	r2, #0
 800a18c:	2104      	movs	r1, #4
 800a18e:	60e0      	str	r0, [r4, #12]
 800a190:	6860      	ldr	r0, [r4, #4]
 800a192:	f7ff ff81 	bl	800a098 <std>
 800a196:	2201      	movs	r2, #1
 800a198:	2109      	movs	r1, #9
 800a19a:	68a0      	ldr	r0, [r4, #8]
 800a19c:	f7ff ff7c 	bl	800a098 <std>
 800a1a0:	2202      	movs	r2, #2
 800a1a2:	2112      	movs	r1, #18
 800a1a4:	68e0      	ldr	r0, [r4, #12]
 800a1a6:	f7ff ff77 	bl	800a098 <std>
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	61a3      	str	r3, [r4, #24]
 800a1ae:	e7d1      	b.n	800a154 <__sinit+0xc>
 800a1b0:	0800de30 	.word	0x0800de30
 800a1b4:	0800a0e1 	.word	0x0800a0e1

0800a1b8 <__sfp>:
 800a1b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1ba:	4607      	mov	r7, r0
 800a1bc:	f7ff ffac 	bl	800a118 <__sfp_lock_acquire>
 800a1c0:	4b1e      	ldr	r3, [pc, #120]	; (800a23c <__sfp+0x84>)
 800a1c2:	681e      	ldr	r6, [r3, #0]
 800a1c4:	69b3      	ldr	r3, [r6, #24]
 800a1c6:	b913      	cbnz	r3, 800a1ce <__sfp+0x16>
 800a1c8:	4630      	mov	r0, r6
 800a1ca:	f7ff ffbd 	bl	800a148 <__sinit>
 800a1ce:	3648      	adds	r6, #72	; 0x48
 800a1d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a1d4:	3b01      	subs	r3, #1
 800a1d6:	d503      	bpl.n	800a1e0 <__sfp+0x28>
 800a1d8:	6833      	ldr	r3, [r6, #0]
 800a1da:	b30b      	cbz	r3, 800a220 <__sfp+0x68>
 800a1dc:	6836      	ldr	r6, [r6, #0]
 800a1de:	e7f7      	b.n	800a1d0 <__sfp+0x18>
 800a1e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a1e4:	b9d5      	cbnz	r5, 800a21c <__sfp+0x64>
 800a1e6:	4b16      	ldr	r3, [pc, #88]	; (800a240 <__sfp+0x88>)
 800a1e8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a1ec:	60e3      	str	r3, [r4, #12]
 800a1ee:	6665      	str	r5, [r4, #100]	; 0x64
 800a1f0:	f000 fbb2 	bl	800a958 <__retarget_lock_init_recursive>
 800a1f4:	f7ff ff96 	bl	800a124 <__sfp_lock_release>
 800a1f8:	2208      	movs	r2, #8
 800a1fa:	4629      	mov	r1, r5
 800a1fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a200:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a204:	6025      	str	r5, [r4, #0]
 800a206:	61a5      	str	r5, [r4, #24]
 800a208:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a20c:	f7fd f98a 	bl	8007524 <memset>
 800a210:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a214:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a218:	4620      	mov	r0, r4
 800a21a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a21c:	3468      	adds	r4, #104	; 0x68
 800a21e:	e7d9      	b.n	800a1d4 <__sfp+0x1c>
 800a220:	2104      	movs	r1, #4
 800a222:	4638      	mov	r0, r7
 800a224:	f7ff ff62 	bl	800a0ec <__sfmoreglue>
 800a228:	4604      	mov	r4, r0
 800a22a:	6030      	str	r0, [r6, #0]
 800a22c:	2800      	cmp	r0, #0
 800a22e:	d1d5      	bne.n	800a1dc <__sfp+0x24>
 800a230:	f7ff ff78 	bl	800a124 <__sfp_lock_release>
 800a234:	230c      	movs	r3, #12
 800a236:	603b      	str	r3, [r7, #0]
 800a238:	e7ee      	b.n	800a218 <__sfp+0x60>
 800a23a:	bf00      	nop
 800a23c:	0800de30 	.word	0x0800de30
 800a240:	ffff0001 	.word	0xffff0001

0800a244 <_fwalk_reent>:
 800a244:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a248:	4606      	mov	r6, r0
 800a24a:	4688      	mov	r8, r1
 800a24c:	2700      	movs	r7, #0
 800a24e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a252:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a256:	f1b9 0901 	subs.w	r9, r9, #1
 800a25a:	d505      	bpl.n	800a268 <_fwalk_reent+0x24>
 800a25c:	6824      	ldr	r4, [r4, #0]
 800a25e:	2c00      	cmp	r4, #0
 800a260:	d1f7      	bne.n	800a252 <_fwalk_reent+0xe>
 800a262:	4638      	mov	r0, r7
 800a264:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a268:	89ab      	ldrh	r3, [r5, #12]
 800a26a:	2b01      	cmp	r3, #1
 800a26c:	d907      	bls.n	800a27e <_fwalk_reent+0x3a>
 800a26e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a272:	3301      	adds	r3, #1
 800a274:	d003      	beq.n	800a27e <_fwalk_reent+0x3a>
 800a276:	4629      	mov	r1, r5
 800a278:	4630      	mov	r0, r6
 800a27a:	47c0      	blx	r8
 800a27c:	4307      	orrs	r7, r0
 800a27e:	3568      	adds	r5, #104	; 0x68
 800a280:	e7e9      	b.n	800a256 <_fwalk_reent+0x12>

0800a282 <rshift>:
 800a282:	6903      	ldr	r3, [r0, #16]
 800a284:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a288:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a28c:	f100 0414 	add.w	r4, r0, #20
 800a290:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a294:	dd46      	ble.n	800a324 <rshift+0xa2>
 800a296:	f011 011f 	ands.w	r1, r1, #31
 800a29a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a29e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a2a2:	d10c      	bne.n	800a2be <rshift+0x3c>
 800a2a4:	4629      	mov	r1, r5
 800a2a6:	f100 0710 	add.w	r7, r0, #16
 800a2aa:	42b1      	cmp	r1, r6
 800a2ac:	d335      	bcc.n	800a31a <rshift+0x98>
 800a2ae:	1a9b      	subs	r3, r3, r2
 800a2b0:	009b      	lsls	r3, r3, #2
 800a2b2:	1eea      	subs	r2, r5, #3
 800a2b4:	4296      	cmp	r6, r2
 800a2b6:	bf38      	it	cc
 800a2b8:	2300      	movcc	r3, #0
 800a2ba:	4423      	add	r3, r4
 800a2bc:	e015      	b.n	800a2ea <rshift+0x68>
 800a2be:	46a1      	mov	r9, r4
 800a2c0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a2c4:	f1c1 0820 	rsb	r8, r1, #32
 800a2c8:	40cf      	lsrs	r7, r1
 800a2ca:	f105 0e04 	add.w	lr, r5, #4
 800a2ce:	4576      	cmp	r6, lr
 800a2d0:	46f4      	mov	ip, lr
 800a2d2:	d816      	bhi.n	800a302 <rshift+0x80>
 800a2d4:	1a9a      	subs	r2, r3, r2
 800a2d6:	0092      	lsls	r2, r2, #2
 800a2d8:	3a04      	subs	r2, #4
 800a2da:	3501      	adds	r5, #1
 800a2dc:	42ae      	cmp	r6, r5
 800a2de:	bf38      	it	cc
 800a2e0:	2200      	movcc	r2, #0
 800a2e2:	18a3      	adds	r3, r4, r2
 800a2e4:	50a7      	str	r7, [r4, r2]
 800a2e6:	b107      	cbz	r7, 800a2ea <rshift+0x68>
 800a2e8:	3304      	adds	r3, #4
 800a2ea:	42a3      	cmp	r3, r4
 800a2ec:	eba3 0204 	sub.w	r2, r3, r4
 800a2f0:	bf08      	it	eq
 800a2f2:	2300      	moveq	r3, #0
 800a2f4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a2f8:	6102      	str	r2, [r0, #16]
 800a2fa:	bf08      	it	eq
 800a2fc:	6143      	streq	r3, [r0, #20]
 800a2fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a302:	f8dc c000 	ldr.w	ip, [ip]
 800a306:	fa0c fc08 	lsl.w	ip, ip, r8
 800a30a:	ea4c 0707 	orr.w	r7, ip, r7
 800a30e:	f849 7b04 	str.w	r7, [r9], #4
 800a312:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a316:	40cf      	lsrs	r7, r1
 800a318:	e7d9      	b.n	800a2ce <rshift+0x4c>
 800a31a:	f851 cb04 	ldr.w	ip, [r1], #4
 800a31e:	f847 cf04 	str.w	ip, [r7, #4]!
 800a322:	e7c2      	b.n	800a2aa <rshift+0x28>
 800a324:	4623      	mov	r3, r4
 800a326:	e7e0      	b.n	800a2ea <rshift+0x68>

0800a328 <__hexdig_fun>:
 800a328:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a32c:	2b09      	cmp	r3, #9
 800a32e:	d802      	bhi.n	800a336 <__hexdig_fun+0xe>
 800a330:	3820      	subs	r0, #32
 800a332:	b2c0      	uxtb	r0, r0
 800a334:	4770      	bx	lr
 800a336:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a33a:	2b05      	cmp	r3, #5
 800a33c:	d801      	bhi.n	800a342 <__hexdig_fun+0x1a>
 800a33e:	3847      	subs	r0, #71	; 0x47
 800a340:	e7f7      	b.n	800a332 <__hexdig_fun+0xa>
 800a342:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a346:	2b05      	cmp	r3, #5
 800a348:	d801      	bhi.n	800a34e <__hexdig_fun+0x26>
 800a34a:	3827      	subs	r0, #39	; 0x27
 800a34c:	e7f1      	b.n	800a332 <__hexdig_fun+0xa>
 800a34e:	2000      	movs	r0, #0
 800a350:	4770      	bx	lr
	...

0800a354 <__gethex>:
 800a354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a358:	b08b      	sub	sp, #44	; 0x2c
 800a35a:	9305      	str	r3, [sp, #20]
 800a35c:	4bb2      	ldr	r3, [pc, #712]	; (800a628 <__gethex+0x2d4>)
 800a35e:	9002      	str	r0, [sp, #8]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	468b      	mov	fp, r1
 800a364:	4618      	mov	r0, r3
 800a366:	4690      	mov	r8, r2
 800a368:	9303      	str	r3, [sp, #12]
 800a36a:	f7f5 fef1 	bl	8000150 <strlen>
 800a36e:	4682      	mov	sl, r0
 800a370:	9b03      	ldr	r3, [sp, #12]
 800a372:	f8db 2000 	ldr.w	r2, [fp]
 800a376:	4403      	add	r3, r0
 800a378:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a37c:	9306      	str	r3, [sp, #24]
 800a37e:	1c93      	adds	r3, r2, #2
 800a380:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a384:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a388:	32fe      	adds	r2, #254	; 0xfe
 800a38a:	18d1      	adds	r1, r2, r3
 800a38c:	461f      	mov	r7, r3
 800a38e:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a392:	9101      	str	r1, [sp, #4]
 800a394:	2830      	cmp	r0, #48	; 0x30
 800a396:	d0f8      	beq.n	800a38a <__gethex+0x36>
 800a398:	f7ff ffc6 	bl	800a328 <__hexdig_fun>
 800a39c:	4604      	mov	r4, r0
 800a39e:	2800      	cmp	r0, #0
 800a3a0:	d13a      	bne.n	800a418 <__gethex+0xc4>
 800a3a2:	4652      	mov	r2, sl
 800a3a4:	4638      	mov	r0, r7
 800a3a6:	9903      	ldr	r1, [sp, #12]
 800a3a8:	f001 fc1b 	bl	800bbe2 <strncmp>
 800a3ac:	4605      	mov	r5, r0
 800a3ae:	2800      	cmp	r0, #0
 800a3b0:	d166      	bne.n	800a480 <__gethex+0x12c>
 800a3b2:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a3b6:	eb07 060a 	add.w	r6, r7, sl
 800a3ba:	f7ff ffb5 	bl	800a328 <__hexdig_fun>
 800a3be:	2800      	cmp	r0, #0
 800a3c0:	d060      	beq.n	800a484 <__gethex+0x130>
 800a3c2:	4633      	mov	r3, r6
 800a3c4:	7818      	ldrb	r0, [r3, #0]
 800a3c6:	461f      	mov	r7, r3
 800a3c8:	2830      	cmp	r0, #48	; 0x30
 800a3ca:	f103 0301 	add.w	r3, r3, #1
 800a3ce:	d0f9      	beq.n	800a3c4 <__gethex+0x70>
 800a3d0:	f7ff ffaa 	bl	800a328 <__hexdig_fun>
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	fab0 f480 	clz	r4, r0
 800a3da:	4635      	mov	r5, r6
 800a3dc:	0964      	lsrs	r4, r4, #5
 800a3de:	9301      	str	r3, [sp, #4]
 800a3e0:	463a      	mov	r2, r7
 800a3e2:	4616      	mov	r6, r2
 800a3e4:	7830      	ldrb	r0, [r6, #0]
 800a3e6:	3201      	adds	r2, #1
 800a3e8:	f7ff ff9e 	bl	800a328 <__hexdig_fun>
 800a3ec:	2800      	cmp	r0, #0
 800a3ee:	d1f8      	bne.n	800a3e2 <__gethex+0x8e>
 800a3f0:	4652      	mov	r2, sl
 800a3f2:	4630      	mov	r0, r6
 800a3f4:	9903      	ldr	r1, [sp, #12]
 800a3f6:	f001 fbf4 	bl	800bbe2 <strncmp>
 800a3fa:	b980      	cbnz	r0, 800a41e <__gethex+0xca>
 800a3fc:	b94d      	cbnz	r5, 800a412 <__gethex+0xbe>
 800a3fe:	eb06 050a 	add.w	r5, r6, sl
 800a402:	462a      	mov	r2, r5
 800a404:	4616      	mov	r6, r2
 800a406:	7830      	ldrb	r0, [r6, #0]
 800a408:	3201      	adds	r2, #1
 800a40a:	f7ff ff8d 	bl	800a328 <__hexdig_fun>
 800a40e:	2800      	cmp	r0, #0
 800a410:	d1f8      	bne.n	800a404 <__gethex+0xb0>
 800a412:	1bad      	subs	r5, r5, r6
 800a414:	00ad      	lsls	r5, r5, #2
 800a416:	e004      	b.n	800a422 <__gethex+0xce>
 800a418:	2400      	movs	r4, #0
 800a41a:	4625      	mov	r5, r4
 800a41c:	e7e0      	b.n	800a3e0 <__gethex+0x8c>
 800a41e:	2d00      	cmp	r5, #0
 800a420:	d1f7      	bne.n	800a412 <__gethex+0xbe>
 800a422:	7833      	ldrb	r3, [r6, #0]
 800a424:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a428:	2b50      	cmp	r3, #80	; 0x50
 800a42a:	d139      	bne.n	800a4a0 <__gethex+0x14c>
 800a42c:	7873      	ldrb	r3, [r6, #1]
 800a42e:	2b2b      	cmp	r3, #43	; 0x2b
 800a430:	d02a      	beq.n	800a488 <__gethex+0x134>
 800a432:	2b2d      	cmp	r3, #45	; 0x2d
 800a434:	d02c      	beq.n	800a490 <__gethex+0x13c>
 800a436:	f04f 0900 	mov.w	r9, #0
 800a43a:	1c71      	adds	r1, r6, #1
 800a43c:	7808      	ldrb	r0, [r1, #0]
 800a43e:	f7ff ff73 	bl	800a328 <__hexdig_fun>
 800a442:	1e43      	subs	r3, r0, #1
 800a444:	b2db      	uxtb	r3, r3
 800a446:	2b18      	cmp	r3, #24
 800a448:	d82a      	bhi.n	800a4a0 <__gethex+0x14c>
 800a44a:	f1a0 0210 	sub.w	r2, r0, #16
 800a44e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a452:	f7ff ff69 	bl	800a328 <__hexdig_fun>
 800a456:	1e43      	subs	r3, r0, #1
 800a458:	b2db      	uxtb	r3, r3
 800a45a:	2b18      	cmp	r3, #24
 800a45c:	d91b      	bls.n	800a496 <__gethex+0x142>
 800a45e:	f1b9 0f00 	cmp.w	r9, #0
 800a462:	d000      	beq.n	800a466 <__gethex+0x112>
 800a464:	4252      	negs	r2, r2
 800a466:	4415      	add	r5, r2
 800a468:	f8cb 1000 	str.w	r1, [fp]
 800a46c:	b1d4      	cbz	r4, 800a4a4 <__gethex+0x150>
 800a46e:	9b01      	ldr	r3, [sp, #4]
 800a470:	2b00      	cmp	r3, #0
 800a472:	bf14      	ite	ne
 800a474:	2700      	movne	r7, #0
 800a476:	2706      	moveq	r7, #6
 800a478:	4638      	mov	r0, r7
 800a47a:	b00b      	add	sp, #44	; 0x2c
 800a47c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a480:	463e      	mov	r6, r7
 800a482:	4625      	mov	r5, r4
 800a484:	2401      	movs	r4, #1
 800a486:	e7cc      	b.n	800a422 <__gethex+0xce>
 800a488:	f04f 0900 	mov.w	r9, #0
 800a48c:	1cb1      	adds	r1, r6, #2
 800a48e:	e7d5      	b.n	800a43c <__gethex+0xe8>
 800a490:	f04f 0901 	mov.w	r9, #1
 800a494:	e7fa      	b.n	800a48c <__gethex+0x138>
 800a496:	230a      	movs	r3, #10
 800a498:	fb03 0202 	mla	r2, r3, r2, r0
 800a49c:	3a10      	subs	r2, #16
 800a49e:	e7d6      	b.n	800a44e <__gethex+0xfa>
 800a4a0:	4631      	mov	r1, r6
 800a4a2:	e7e1      	b.n	800a468 <__gethex+0x114>
 800a4a4:	4621      	mov	r1, r4
 800a4a6:	1bf3      	subs	r3, r6, r7
 800a4a8:	3b01      	subs	r3, #1
 800a4aa:	2b07      	cmp	r3, #7
 800a4ac:	dc0a      	bgt.n	800a4c4 <__gethex+0x170>
 800a4ae:	9802      	ldr	r0, [sp, #8]
 800a4b0:	f000 fae2 	bl	800aa78 <_Balloc>
 800a4b4:	4604      	mov	r4, r0
 800a4b6:	b940      	cbnz	r0, 800a4ca <__gethex+0x176>
 800a4b8:	4602      	mov	r2, r0
 800a4ba:	21de      	movs	r1, #222	; 0xde
 800a4bc:	4b5b      	ldr	r3, [pc, #364]	; (800a62c <__gethex+0x2d8>)
 800a4be:	485c      	ldr	r0, [pc, #368]	; (800a630 <__gethex+0x2dc>)
 800a4c0:	f001 fbc2 	bl	800bc48 <__assert_func>
 800a4c4:	3101      	adds	r1, #1
 800a4c6:	105b      	asrs	r3, r3, #1
 800a4c8:	e7ef      	b.n	800a4aa <__gethex+0x156>
 800a4ca:	f04f 0b00 	mov.w	fp, #0
 800a4ce:	f100 0914 	add.w	r9, r0, #20
 800a4d2:	f1ca 0301 	rsb	r3, sl, #1
 800a4d6:	f8cd 9010 	str.w	r9, [sp, #16]
 800a4da:	f8cd b004 	str.w	fp, [sp, #4]
 800a4de:	9308      	str	r3, [sp, #32]
 800a4e0:	42b7      	cmp	r7, r6
 800a4e2:	d33f      	bcc.n	800a564 <__gethex+0x210>
 800a4e4:	9f04      	ldr	r7, [sp, #16]
 800a4e6:	9b01      	ldr	r3, [sp, #4]
 800a4e8:	f847 3b04 	str.w	r3, [r7], #4
 800a4ec:	eba7 0709 	sub.w	r7, r7, r9
 800a4f0:	10bf      	asrs	r7, r7, #2
 800a4f2:	6127      	str	r7, [r4, #16]
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	f000 fbb1 	bl	800ac5c <__hi0bits>
 800a4fa:	017f      	lsls	r7, r7, #5
 800a4fc:	f8d8 6000 	ldr.w	r6, [r8]
 800a500:	1a3f      	subs	r7, r7, r0
 800a502:	42b7      	cmp	r7, r6
 800a504:	dd62      	ble.n	800a5cc <__gethex+0x278>
 800a506:	1bbf      	subs	r7, r7, r6
 800a508:	4639      	mov	r1, r7
 800a50a:	4620      	mov	r0, r4
 800a50c:	f000 ff4b 	bl	800b3a6 <__any_on>
 800a510:	4682      	mov	sl, r0
 800a512:	b1a8      	cbz	r0, 800a540 <__gethex+0x1ec>
 800a514:	f04f 0a01 	mov.w	sl, #1
 800a518:	1e7b      	subs	r3, r7, #1
 800a51a:	1159      	asrs	r1, r3, #5
 800a51c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a520:	f003 021f 	and.w	r2, r3, #31
 800a524:	fa0a f202 	lsl.w	r2, sl, r2
 800a528:	420a      	tst	r2, r1
 800a52a:	d009      	beq.n	800a540 <__gethex+0x1ec>
 800a52c:	4553      	cmp	r3, sl
 800a52e:	dd05      	ble.n	800a53c <__gethex+0x1e8>
 800a530:	4620      	mov	r0, r4
 800a532:	1eb9      	subs	r1, r7, #2
 800a534:	f000 ff37 	bl	800b3a6 <__any_on>
 800a538:	2800      	cmp	r0, #0
 800a53a:	d144      	bne.n	800a5c6 <__gethex+0x272>
 800a53c:	f04f 0a02 	mov.w	sl, #2
 800a540:	4639      	mov	r1, r7
 800a542:	4620      	mov	r0, r4
 800a544:	f7ff fe9d 	bl	800a282 <rshift>
 800a548:	443d      	add	r5, r7
 800a54a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a54e:	42ab      	cmp	r3, r5
 800a550:	da4a      	bge.n	800a5e8 <__gethex+0x294>
 800a552:	4621      	mov	r1, r4
 800a554:	9802      	ldr	r0, [sp, #8]
 800a556:	f000 facf 	bl	800aaf8 <_Bfree>
 800a55a:	2300      	movs	r3, #0
 800a55c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a55e:	27a3      	movs	r7, #163	; 0xa3
 800a560:	6013      	str	r3, [r2, #0]
 800a562:	e789      	b.n	800a478 <__gethex+0x124>
 800a564:	1e73      	subs	r3, r6, #1
 800a566:	9a06      	ldr	r2, [sp, #24]
 800a568:	9307      	str	r3, [sp, #28]
 800a56a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a56e:	4293      	cmp	r3, r2
 800a570:	d019      	beq.n	800a5a6 <__gethex+0x252>
 800a572:	f1bb 0f20 	cmp.w	fp, #32
 800a576:	d107      	bne.n	800a588 <__gethex+0x234>
 800a578:	9b04      	ldr	r3, [sp, #16]
 800a57a:	9a01      	ldr	r2, [sp, #4]
 800a57c:	f843 2b04 	str.w	r2, [r3], #4
 800a580:	9304      	str	r3, [sp, #16]
 800a582:	2300      	movs	r3, #0
 800a584:	469b      	mov	fp, r3
 800a586:	9301      	str	r3, [sp, #4]
 800a588:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a58c:	f7ff fecc 	bl	800a328 <__hexdig_fun>
 800a590:	9b01      	ldr	r3, [sp, #4]
 800a592:	f000 000f 	and.w	r0, r0, #15
 800a596:	fa00 f00b 	lsl.w	r0, r0, fp
 800a59a:	4303      	orrs	r3, r0
 800a59c:	9301      	str	r3, [sp, #4]
 800a59e:	f10b 0b04 	add.w	fp, fp, #4
 800a5a2:	9b07      	ldr	r3, [sp, #28]
 800a5a4:	e00d      	b.n	800a5c2 <__gethex+0x26e>
 800a5a6:	9a08      	ldr	r2, [sp, #32]
 800a5a8:	1e73      	subs	r3, r6, #1
 800a5aa:	4413      	add	r3, r2
 800a5ac:	42bb      	cmp	r3, r7
 800a5ae:	d3e0      	bcc.n	800a572 <__gethex+0x21e>
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	4652      	mov	r2, sl
 800a5b4:	9903      	ldr	r1, [sp, #12]
 800a5b6:	9309      	str	r3, [sp, #36]	; 0x24
 800a5b8:	f001 fb13 	bl	800bbe2 <strncmp>
 800a5bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5be:	2800      	cmp	r0, #0
 800a5c0:	d1d7      	bne.n	800a572 <__gethex+0x21e>
 800a5c2:	461e      	mov	r6, r3
 800a5c4:	e78c      	b.n	800a4e0 <__gethex+0x18c>
 800a5c6:	f04f 0a03 	mov.w	sl, #3
 800a5ca:	e7b9      	b.n	800a540 <__gethex+0x1ec>
 800a5cc:	da09      	bge.n	800a5e2 <__gethex+0x28e>
 800a5ce:	1bf7      	subs	r7, r6, r7
 800a5d0:	4621      	mov	r1, r4
 800a5d2:	463a      	mov	r2, r7
 800a5d4:	9802      	ldr	r0, [sp, #8]
 800a5d6:	f000 fca7 	bl	800af28 <__lshift>
 800a5da:	4604      	mov	r4, r0
 800a5dc:	1bed      	subs	r5, r5, r7
 800a5de:	f100 0914 	add.w	r9, r0, #20
 800a5e2:	f04f 0a00 	mov.w	sl, #0
 800a5e6:	e7b0      	b.n	800a54a <__gethex+0x1f6>
 800a5e8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a5ec:	42a8      	cmp	r0, r5
 800a5ee:	dd72      	ble.n	800a6d6 <__gethex+0x382>
 800a5f0:	1b45      	subs	r5, r0, r5
 800a5f2:	42ae      	cmp	r6, r5
 800a5f4:	dc35      	bgt.n	800a662 <__gethex+0x30e>
 800a5f6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a5fa:	2b02      	cmp	r3, #2
 800a5fc:	d029      	beq.n	800a652 <__gethex+0x2fe>
 800a5fe:	2b03      	cmp	r3, #3
 800a600:	d02b      	beq.n	800a65a <__gethex+0x306>
 800a602:	2b01      	cmp	r3, #1
 800a604:	d11c      	bne.n	800a640 <__gethex+0x2ec>
 800a606:	42ae      	cmp	r6, r5
 800a608:	d11a      	bne.n	800a640 <__gethex+0x2ec>
 800a60a:	2e01      	cmp	r6, #1
 800a60c:	d112      	bne.n	800a634 <__gethex+0x2e0>
 800a60e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a612:	9a05      	ldr	r2, [sp, #20]
 800a614:	2762      	movs	r7, #98	; 0x62
 800a616:	6013      	str	r3, [r2, #0]
 800a618:	2301      	movs	r3, #1
 800a61a:	6123      	str	r3, [r4, #16]
 800a61c:	f8c9 3000 	str.w	r3, [r9]
 800a620:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a622:	601c      	str	r4, [r3, #0]
 800a624:	e728      	b.n	800a478 <__gethex+0x124>
 800a626:	bf00      	nop
 800a628:	0800e11c 	.word	0x0800e11c
 800a62c:	0800e040 	.word	0x0800e040
 800a630:	0800e0b4 	.word	0x0800e0b4
 800a634:	4620      	mov	r0, r4
 800a636:	1e71      	subs	r1, r6, #1
 800a638:	f000 feb5 	bl	800b3a6 <__any_on>
 800a63c:	2800      	cmp	r0, #0
 800a63e:	d1e6      	bne.n	800a60e <__gethex+0x2ba>
 800a640:	4621      	mov	r1, r4
 800a642:	9802      	ldr	r0, [sp, #8]
 800a644:	f000 fa58 	bl	800aaf8 <_Bfree>
 800a648:	2300      	movs	r3, #0
 800a64a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a64c:	2750      	movs	r7, #80	; 0x50
 800a64e:	6013      	str	r3, [r2, #0]
 800a650:	e712      	b.n	800a478 <__gethex+0x124>
 800a652:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a654:	2b00      	cmp	r3, #0
 800a656:	d1f3      	bne.n	800a640 <__gethex+0x2ec>
 800a658:	e7d9      	b.n	800a60e <__gethex+0x2ba>
 800a65a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d1d6      	bne.n	800a60e <__gethex+0x2ba>
 800a660:	e7ee      	b.n	800a640 <__gethex+0x2ec>
 800a662:	1e6f      	subs	r7, r5, #1
 800a664:	f1ba 0f00 	cmp.w	sl, #0
 800a668:	d132      	bne.n	800a6d0 <__gethex+0x37c>
 800a66a:	b127      	cbz	r7, 800a676 <__gethex+0x322>
 800a66c:	4639      	mov	r1, r7
 800a66e:	4620      	mov	r0, r4
 800a670:	f000 fe99 	bl	800b3a6 <__any_on>
 800a674:	4682      	mov	sl, r0
 800a676:	2101      	movs	r1, #1
 800a678:	117b      	asrs	r3, r7, #5
 800a67a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a67e:	f007 071f 	and.w	r7, r7, #31
 800a682:	fa01 f707 	lsl.w	r7, r1, r7
 800a686:	421f      	tst	r7, r3
 800a688:	f04f 0702 	mov.w	r7, #2
 800a68c:	4629      	mov	r1, r5
 800a68e:	4620      	mov	r0, r4
 800a690:	bf18      	it	ne
 800a692:	f04a 0a02 	orrne.w	sl, sl, #2
 800a696:	1b76      	subs	r6, r6, r5
 800a698:	f7ff fdf3 	bl	800a282 <rshift>
 800a69c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a6a0:	f1ba 0f00 	cmp.w	sl, #0
 800a6a4:	d048      	beq.n	800a738 <__gethex+0x3e4>
 800a6a6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a6aa:	2b02      	cmp	r3, #2
 800a6ac:	d015      	beq.n	800a6da <__gethex+0x386>
 800a6ae:	2b03      	cmp	r3, #3
 800a6b0:	d017      	beq.n	800a6e2 <__gethex+0x38e>
 800a6b2:	2b01      	cmp	r3, #1
 800a6b4:	d109      	bne.n	800a6ca <__gethex+0x376>
 800a6b6:	f01a 0f02 	tst.w	sl, #2
 800a6ba:	d006      	beq.n	800a6ca <__gethex+0x376>
 800a6bc:	f8d9 0000 	ldr.w	r0, [r9]
 800a6c0:	ea4a 0a00 	orr.w	sl, sl, r0
 800a6c4:	f01a 0f01 	tst.w	sl, #1
 800a6c8:	d10e      	bne.n	800a6e8 <__gethex+0x394>
 800a6ca:	f047 0710 	orr.w	r7, r7, #16
 800a6ce:	e033      	b.n	800a738 <__gethex+0x3e4>
 800a6d0:	f04f 0a01 	mov.w	sl, #1
 800a6d4:	e7cf      	b.n	800a676 <__gethex+0x322>
 800a6d6:	2701      	movs	r7, #1
 800a6d8:	e7e2      	b.n	800a6a0 <__gethex+0x34c>
 800a6da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a6dc:	f1c3 0301 	rsb	r3, r3, #1
 800a6e0:	9315      	str	r3, [sp, #84]	; 0x54
 800a6e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d0f0      	beq.n	800a6ca <__gethex+0x376>
 800a6e8:	f04f 0c00 	mov.w	ip, #0
 800a6ec:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a6f0:	f104 0314 	add.w	r3, r4, #20
 800a6f4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a6f8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800a702:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a706:	d01c      	beq.n	800a742 <__gethex+0x3ee>
 800a708:	3201      	adds	r2, #1
 800a70a:	6002      	str	r2, [r0, #0]
 800a70c:	2f02      	cmp	r7, #2
 800a70e:	f104 0314 	add.w	r3, r4, #20
 800a712:	d13d      	bne.n	800a790 <__gethex+0x43c>
 800a714:	f8d8 2000 	ldr.w	r2, [r8]
 800a718:	3a01      	subs	r2, #1
 800a71a:	42b2      	cmp	r2, r6
 800a71c:	d10a      	bne.n	800a734 <__gethex+0x3e0>
 800a71e:	2201      	movs	r2, #1
 800a720:	1171      	asrs	r1, r6, #5
 800a722:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a726:	f006 061f 	and.w	r6, r6, #31
 800a72a:	fa02 f606 	lsl.w	r6, r2, r6
 800a72e:	421e      	tst	r6, r3
 800a730:	bf18      	it	ne
 800a732:	4617      	movne	r7, r2
 800a734:	f047 0720 	orr.w	r7, r7, #32
 800a738:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a73a:	601c      	str	r4, [r3, #0]
 800a73c:	9b05      	ldr	r3, [sp, #20]
 800a73e:	601d      	str	r5, [r3, #0]
 800a740:	e69a      	b.n	800a478 <__gethex+0x124>
 800a742:	4299      	cmp	r1, r3
 800a744:	f843 cc04 	str.w	ip, [r3, #-4]
 800a748:	d8d8      	bhi.n	800a6fc <__gethex+0x3a8>
 800a74a:	68a3      	ldr	r3, [r4, #8]
 800a74c:	459b      	cmp	fp, r3
 800a74e:	db17      	blt.n	800a780 <__gethex+0x42c>
 800a750:	6861      	ldr	r1, [r4, #4]
 800a752:	9802      	ldr	r0, [sp, #8]
 800a754:	3101      	adds	r1, #1
 800a756:	f000 f98f 	bl	800aa78 <_Balloc>
 800a75a:	4681      	mov	r9, r0
 800a75c:	b918      	cbnz	r0, 800a766 <__gethex+0x412>
 800a75e:	4602      	mov	r2, r0
 800a760:	2184      	movs	r1, #132	; 0x84
 800a762:	4b19      	ldr	r3, [pc, #100]	; (800a7c8 <__gethex+0x474>)
 800a764:	e6ab      	b.n	800a4be <__gethex+0x16a>
 800a766:	6922      	ldr	r2, [r4, #16]
 800a768:	f104 010c 	add.w	r1, r4, #12
 800a76c:	3202      	adds	r2, #2
 800a76e:	0092      	lsls	r2, r2, #2
 800a770:	300c      	adds	r0, #12
 800a772:	f7fc fec9 	bl	8007508 <memcpy>
 800a776:	4621      	mov	r1, r4
 800a778:	9802      	ldr	r0, [sp, #8]
 800a77a:	f000 f9bd 	bl	800aaf8 <_Bfree>
 800a77e:	464c      	mov	r4, r9
 800a780:	6923      	ldr	r3, [r4, #16]
 800a782:	1c5a      	adds	r2, r3, #1
 800a784:	6122      	str	r2, [r4, #16]
 800a786:	2201      	movs	r2, #1
 800a788:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a78c:	615a      	str	r2, [r3, #20]
 800a78e:	e7bd      	b.n	800a70c <__gethex+0x3b8>
 800a790:	6922      	ldr	r2, [r4, #16]
 800a792:	455a      	cmp	r2, fp
 800a794:	dd0b      	ble.n	800a7ae <__gethex+0x45a>
 800a796:	2101      	movs	r1, #1
 800a798:	4620      	mov	r0, r4
 800a79a:	f7ff fd72 	bl	800a282 <rshift>
 800a79e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a7a2:	3501      	adds	r5, #1
 800a7a4:	42ab      	cmp	r3, r5
 800a7a6:	f6ff aed4 	blt.w	800a552 <__gethex+0x1fe>
 800a7aa:	2701      	movs	r7, #1
 800a7ac:	e7c2      	b.n	800a734 <__gethex+0x3e0>
 800a7ae:	f016 061f 	ands.w	r6, r6, #31
 800a7b2:	d0fa      	beq.n	800a7aa <__gethex+0x456>
 800a7b4:	4453      	add	r3, sl
 800a7b6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a7ba:	f000 fa4f 	bl	800ac5c <__hi0bits>
 800a7be:	f1c6 0620 	rsb	r6, r6, #32
 800a7c2:	42b0      	cmp	r0, r6
 800a7c4:	dbe7      	blt.n	800a796 <__gethex+0x442>
 800a7c6:	e7f0      	b.n	800a7aa <__gethex+0x456>
 800a7c8:	0800e040 	.word	0x0800e040

0800a7cc <L_shift>:
 800a7cc:	f1c2 0208 	rsb	r2, r2, #8
 800a7d0:	0092      	lsls	r2, r2, #2
 800a7d2:	b570      	push	{r4, r5, r6, lr}
 800a7d4:	f1c2 0620 	rsb	r6, r2, #32
 800a7d8:	6843      	ldr	r3, [r0, #4]
 800a7da:	6804      	ldr	r4, [r0, #0]
 800a7dc:	fa03 f506 	lsl.w	r5, r3, r6
 800a7e0:	432c      	orrs	r4, r5
 800a7e2:	40d3      	lsrs	r3, r2
 800a7e4:	6004      	str	r4, [r0, #0]
 800a7e6:	f840 3f04 	str.w	r3, [r0, #4]!
 800a7ea:	4288      	cmp	r0, r1
 800a7ec:	d3f4      	bcc.n	800a7d8 <L_shift+0xc>
 800a7ee:	bd70      	pop	{r4, r5, r6, pc}

0800a7f0 <__match>:
 800a7f0:	b530      	push	{r4, r5, lr}
 800a7f2:	6803      	ldr	r3, [r0, #0]
 800a7f4:	3301      	adds	r3, #1
 800a7f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a7fa:	b914      	cbnz	r4, 800a802 <__match+0x12>
 800a7fc:	6003      	str	r3, [r0, #0]
 800a7fe:	2001      	movs	r0, #1
 800a800:	bd30      	pop	{r4, r5, pc}
 800a802:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a806:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a80a:	2d19      	cmp	r5, #25
 800a80c:	bf98      	it	ls
 800a80e:	3220      	addls	r2, #32
 800a810:	42a2      	cmp	r2, r4
 800a812:	d0f0      	beq.n	800a7f6 <__match+0x6>
 800a814:	2000      	movs	r0, #0
 800a816:	e7f3      	b.n	800a800 <__match+0x10>

0800a818 <__hexnan>:
 800a818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a81c:	2500      	movs	r5, #0
 800a81e:	680b      	ldr	r3, [r1, #0]
 800a820:	4682      	mov	sl, r0
 800a822:	115e      	asrs	r6, r3, #5
 800a824:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a828:	f013 031f 	ands.w	r3, r3, #31
 800a82c:	bf18      	it	ne
 800a82e:	3604      	addne	r6, #4
 800a830:	1f37      	subs	r7, r6, #4
 800a832:	46b9      	mov	r9, r7
 800a834:	463c      	mov	r4, r7
 800a836:	46ab      	mov	fp, r5
 800a838:	b087      	sub	sp, #28
 800a83a:	4690      	mov	r8, r2
 800a83c:	6802      	ldr	r2, [r0, #0]
 800a83e:	9301      	str	r3, [sp, #4]
 800a840:	f846 5c04 	str.w	r5, [r6, #-4]
 800a844:	9502      	str	r5, [sp, #8]
 800a846:	7851      	ldrb	r1, [r2, #1]
 800a848:	1c53      	adds	r3, r2, #1
 800a84a:	9303      	str	r3, [sp, #12]
 800a84c:	b341      	cbz	r1, 800a8a0 <__hexnan+0x88>
 800a84e:	4608      	mov	r0, r1
 800a850:	9205      	str	r2, [sp, #20]
 800a852:	9104      	str	r1, [sp, #16]
 800a854:	f7ff fd68 	bl	800a328 <__hexdig_fun>
 800a858:	2800      	cmp	r0, #0
 800a85a:	d14f      	bne.n	800a8fc <__hexnan+0xe4>
 800a85c:	9904      	ldr	r1, [sp, #16]
 800a85e:	9a05      	ldr	r2, [sp, #20]
 800a860:	2920      	cmp	r1, #32
 800a862:	d818      	bhi.n	800a896 <__hexnan+0x7e>
 800a864:	9b02      	ldr	r3, [sp, #8]
 800a866:	459b      	cmp	fp, r3
 800a868:	dd13      	ble.n	800a892 <__hexnan+0x7a>
 800a86a:	454c      	cmp	r4, r9
 800a86c:	d206      	bcs.n	800a87c <__hexnan+0x64>
 800a86e:	2d07      	cmp	r5, #7
 800a870:	dc04      	bgt.n	800a87c <__hexnan+0x64>
 800a872:	462a      	mov	r2, r5
 800a874:	4649      	mov	r1, r9
 800a876:	4620      	mov	r0, r4
 800a878:	f7ff ffa8 	bl	800a7cc <L_shift>
 800a87c:	4544      	cmp	r4, r8
 800a87e:	d950      	bls.n	800a922 <__hexnan+0x10a>
 800a880:	2300      	movs	r3, #0
 800a882:	f1a4 0904 	sub.w	r9, r4, #4
 800a886:	f844 3c04 	str.w	r3, [r4, #-4]
 800a88a:	461d      	mov	r5, r3
 800a88c:	464c      	mov	r4, r9
 800a88e:	f8cd b008 	str.w	fp, [sp, #8]
 800a892:	9a03      	ldr	r2, [sp, #12]
 800a894:	e7d7      	b.n	800a846 <__hexnan+0x2e>
 800a896:	2929      	cmp	r1, #41	; 0x29
 800a898:	d156      	bne.n	800a948 <__hexnan+0x130>
 800a89a:	3202      	adds	r2, #2
 800a89c:	f8ca 2000 	str.w	r2, [sl]
 800a8a0:	f1bb 0f00 	cmp.w	fp, #0
 800a8a4:	d050      	beq.n	800a948 <__hexnan+0x130>
 800a8a6:	454c      	cmp	r4, r9
 800a8a8:	d206      	bcs.n	800a8b8 <__hexnan+0xa0>
 800a8aa:	2d07      	cmp	r5, #7
 800a8ac:	dc04      	bgt.n	800a8b8 <__hexnan+0xa0>
 800a8ae:	462a      	mov	r2, r5
 800a8b0:	4649      	mov	r1, r9
 800a8b2:	4620      	mov	r0, r4
 800a8b4:	f7ff ff8a 	bl	800a7cc <L_shift>
 800a8b8:	4544      	cmp	r4, r8
 800a8ba:	d934      	bls.n	800a926 <__hexnan+0x10e>
 800a8bc:	4623      	mov	r3, r4
 800a8be:	f1a8 0204 	sub.w	r2, r8, #4
 800a8c2:	f853 1b04 	ldr.w	r1, [r3], #4
 800a8c6:	429f      	cmp	r7, r3
 800a8c8:	f842 1f04 	str.w	r1, [r2, #4]!
 800a8cc:	d2f9      	bcs.n	800a8c2 <__hexnan+0xaa>
 800a8ce:	1b3b      	subs	r3, r7, r4
 800a8d0:	f023 0303 	bic.w	r3, r3, #3
 800a8d4:	3304      	adds	r3, #4
 800a8d6:	3401      	adds	r4, #1
 800a8d8:	3e03      	subs	r6, #3
 800a8da:	42b4      	cmp	r4, r6
 800a8dc:	bf88      	it	hi
 800a8de:	2304      	movhi	r3, #4
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	4443      	add	r3, r8
 800a8e4:	f843 2b04 	str.w	r2, [r3], #4
 800a8e8:	429f      	cmp	r7, r3
 800a8ea:	d2fb      	bcs.n	800a8e4 <__hexnan+0xcc>
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	b91b      	cbnz	r3, 800a8f8 <__hexnan+0xe0>
 800a8f0:	4547      	cmp	r7, r8
 800a8f2:	d127      	bne.n	800a944 <__hexnan+0x12c>
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	603b      	str	r3, [r7, #0]
 800a8f8:	2005      	movs	r0, #5
 800a8fa:	e026      	b.n	800a94a <__hexnan+0x132>
 800a8fc:	3501      	adds	r5, #1
 800a8fe:	2d08      	cmp	r5, #8
 800a900:	f10b 0b01 	add.w	fp, fp, #1
 800a904:	dd06      	ble.n	800a914 <__hexnan+0xfc>
 800a906:	4544      	cmp	r4, r8
 800a908:	d9c3      	bls.n	800a892 <__hexnan+0x7a>
 800a90a:	2300      	movs	r3, #0
 800a90c:	2501      	movs	r5, #1
 800a90e:	f844 3c04 	str.w	r3, [r4, #-4]
 800a912:	3c04      	subs	r4, #4
 800a914:	6822      	ldr	r2, [r4, #0]
 800a916:	f000 000f 	and.w	r0, r0, #15
 800a91a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a91e:	6022      	str	r2, [r4, #0]
 800a920:	e7b7      	b.n	800a892 <__hexnan+0x7a>
 800a922:	2508      	movs	r5, #8
 800a924:	e7b5      	b.n	800a892 <__hexnan+0x7a>
 800a926:	9b01      	ldr	r3, [sp, #4]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d0df      	beq.n	800a8ec <__hexnan+0xd4>
 800a92c:	f04f 32ff 	mov.w	r2, #4294967295
 800a930:	f1c3 0320 	rsb	r3, r3, #32
 800a934:	fa22 f303 	lsr.w	r3, r2, r3
 800a938:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a93c:	401a      	ands	r2, r3
 800a93e:	f846 2c04 	str.w	r2, [r6, #-4]
 800a942:	e7d3      	b.n	800a8ec <__hexnan+0xd4>
 800a944:	3f04      	subs	r7, #4
 800a946:	e7d1      	b.n	800a8ec <__hexnan+0xd4>
 800a948:	2004      	movs	r0, #4
 800a94a:	b007      	add	sp, #28
 800a94c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a950 <_localeconv_r>:
 800a950:	4800      	ldr	r0, [pc, #0]	; (800a954 <_localeconv_r+0x4>)
 800a952:	4770      	bx	lr
 800a954:	20000164 	.word	0x20000164

0800a958 <__retarget_lock_init_recursive>:
 800a958:	4770      	bx	lr

0800a95a <__retarget_lock_acquire_recursive>:
 800a95a:	4770      	bx	lr

0800a95c <__retarget_lock_release_recursive>:
 800a95c:	4770      	bx	lr

0800a95e <__swhatbuf_r>:
 800a95e:	b570      	push	{r4, r5, r6, lr}
 800a960:	460e      	mov	r6, r1
 800a962:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a966:	4614      	mov	r4, r2
 800a968:	2900      	cmp	r1, #0
 800a96a:	461d      	mov	r5, r3
 800a96c:	b096      	sub	sp, #88	; 0x58
 800a96e:	da08      	bge.n	800a982 <__swhatbuf_r+0x24>
 800a970:	2200      	movs	r2, #0
 800a972:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a976:	602a      	str	r2, [r5, #0]
 800a978:	061a      	lsls	r2, r3, #24
 800a97a:	d410      	bmi.n	800a99e <__swhatbuf_r+0x40>
 800a97c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a980:	e00e      	b.n	800a9a0 <__swhatbuf_r+0x42>
 800a982:	466a      	mov	r2, sp
 800a984:	f001 f9a0 	bl	800bcc8 <_fstat_r>
 800a988:	2800      	cmp	r0, #0
 800a98a:	dbf1      	blt.n	800a970 <__swhatbuf_r+0x12>
 800a98c:	9a01      	ldr	r2, [sp, #4]
 800a98e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a992:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a996:	425a      	negs	r2, r3
 800a998:	415a      	adcs	r2, r3
 800a99a:	602a      	str	r2, [r5, #0]
 800a99c:	e7ee      	b.n	800a97c <__swhatbuf_r+0x1e>
 800a99e:	2340      	movs	r3, #64	; 0x40
 800a9a0:	2000      	movs	r0, #0
 800a9a2:	6023      	str	r3, [r4, #0]
 800a9a4:	b016      	add	sp, #88	; 0x58
 800a9a6:	bd70      	pop	{r4, r5, r6, pc}

0800a9a8 <__smakebuf_r>:
 800a9a8:	898b      	ldrh	r3, [r1, #12]
 800a9aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a9ac:	079d      	lsls	r5, r3, #30
 800a9ae:	4606      	mov	r6, r0
 800a9b0:	460c      	mov	r4, r1
 800a9b2:	d507      	bpl.n	800a9c4 <__smakebuf_r+0x1c>
 800a9b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a9b8:	6023      	str	r3, [r4, #0]
 800a9ba:	6123      	str	r3, [r4, #16]
 800a9bc:	2301      	movs	r3, #1
 800a9be:	6163      	str	r3, [r4, #20]
 800a9c0:	b002      	add	sp, #8
 800a9c2:	bd70      	pop	{r4, r5, r6, pc}
 800a9c4:	466a      	mov	r2, sp
 800a9c6:	ab01      	add	r3, sp, #4
 800a9c8:	f7ff ffc9 	bl	800a95e <__swhatbuf_r>
 800a9cc:	9900      	ldr	r1, [sp, #0]
 800a9ce:	4605      	mov	r5, r0
 800a9d0:	4630      	mov	r0, r6
 800a9d2:	f000 fd85 	bl	800b4e0 <_malloc_r>
 800a9d6:	b948      	cbnz	r0, 800a9ec <__smakebuf_r+0x44>
 800a9d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9dc:	059a      	lsls	r2, r3, #22
 800a9de:	d4ef      	bmi.n	800a9c0 <__smakebuf_r+0x18>
 800a9e0:	f023 0303 	bic.w	r3, r3, #3
 800a9e4:	f043 0302 	orr.w	r3, r3, #2
 800a9e8:	81a3      	strh	r3, [r4, #12]
 800a9ea:	e7e3      	b.n	800a9b4 <__smakebuf_r+0xc>
 800a9ec:	4b0d      	ldr	r3, [pc, #52]	; (800aa24 <__smakebuf_r+0x7c>)
 800a9ee:	62b3      	str	r3, [r6, #40]	; 0x28
 800a9f0:	89a3      	ldrh	r3, [r4, #12]
 800a9f2:	6020      	str	r0, [r4, #0]
 800a9f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9f8:	81a3      	strh	r3, [r4, #12]
 800a9fa:	9b00      	ldr	r3, [sp, #0]
 800a9fc:	6120      	str	r0, [r4, #16]
 800a9fe:	6163      	str	r3, [r4, #20]
 800aa00:	9b01      	ldr	r3, [sp, #4]
 800aa02:	b15b      	cbz	r3, 800aa1c <__smakebuf_r+0x74>
 800aa04:	4630      	mov	r0, r6
 800aa06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa0a:	f001 f96f 	bl	800bcec <_isatty_r>
 800aa0e:	b128      	cbz	r0, 800aa1c <__smakebuf_r+0x74>
 800aa10:	89a3      	ldrh	r3, [r4, #12]
 800aa12:	f023 0303 	bic.w	r3, r3, #3
 800aa16:	f043 0301 	orr.w	r3, r3, #1
 800aa1a:	81a3      	strh	r3, [r4, #12]
 800aa1c:	89a0      	ldrh	r0, [r4, #12]
 800aa1e:	4305      	orrs	r5, r0
 800aa20:	81a5      	strh	r5, [r4, #12]
 800aa22:	e7cd      	b.n	800a9c0 <__smakebuf_r+0x18>
 800aa24:	0800a0e1 	.word	0x0800a0e1

0800aa28 <malloc>:
 800aa28:	4b02      	ldr	r3, [pc, #8]	; (800aa34 <malloc+0xc>)
 800aa2a:	4601      	mov	r1, r0
 800aa2c:	6818      	ldr	r0, [r3, #0]
 800aa2e:	f000 bd57 	b.w	800b4e0 <_malloc_r>
 800aa32:	bf00      	nop
 800aa34:	2000000c 	.word	0x2000000c

0800aa38 <__ascii_mbtowc>:
 800aa38:	b082      	sub	sp, #8
 800aa3a:	b901      	cbnz	r1, 800aa3e <__ascii_mbtowc+0x6>
 800aa3c:	a901      	add	r1, sp, #4
 800aa3e:	b142      	cbz	r2, 800aa52 <__ascii_mbtowc+0x1a>
 800aa40:	b14b      	cbz	r3, 800aa56 <__ascii_mbtowc+0x1e>
 800aa42:	7813      	ldrb	r3, [r2, #0]
 800aa44:	600b      	str	r3, [r1, #0]
 800aa46:	7812      	ldrb	r2, [r2, #0]
 800aa48:	1e10      	subs	r0, r2, #0
 800aa4a:	bf18      	it	ne
 800aa4c:	2001      	movne	r0, #1
 800aa4e:	b002      	add	sp, #8
 800aa50:	4770      	bx	lr
 800aa52:	4610      	mov	r0, r2
 800aa54:	e7fb      	b.n	800aa4e <__ascii_mbtowc+0x16>
 800aa56:	f06f 0001 	mvn.w	r0, #1
 800aa5a:	e7f8      	b.n	800aa4e <__ascii_mbtowc+0x16>

0800aa5c <memchr>:
 800aa5c:	4603      	mov	r3, r0
 800aa5e:	b510      	push	{r4, lr}
 800aa60:	b2c9      	uxtb	r1, r1
 800aa62:	4402      	add	r2, r0
 800aa64:	4293      	cmp	r3, r2
 800aa66:	4618      	mov	r0, r3
 800aa68:	d101      	bne.n	800aa6e <memchr+0x12>
 800aa6a:	2000      	movs	r0, #0
 800aa6c:	e003      	b.n	800aa76 <memchr+0x1a>
 800aa6e:	7804      	ldrb	r4, [r0, #0]
 800aa70:	3301      	adds	r3, #1
 800aa72:	428c      	cmp	r4, r1
 800aa74:	d1f6      	bne.n	800aa64 <memchr+0x8>
 800aa76:	bd10      	pop	{r4, pc}

0800aa78 <_Balloc>:
 800aa78:	b570      	push	{r4, r5, r6, lr}
 800aa7a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800aa7c:	4604      	mov	r4, r0
 800aa7e:	460d      	mov	r5, r1
 800aa80:	b976      	cbnz	r6, 800aaa0 <_Balloc+0x28>
 800aa82:	2010      	movs	r0, #16
 800aa84:	f7ff ffd0 	bl	800aa28 <malloc>
 800aa88:	4602      	mov	r2, r0
 800aa8a:	6260      	str	r0, [r4, #36]	; 0x24
 800aa8c:	b920      	cbnz	r0, 800aa98 <_Balloc+0x20>
 800aa8e:	2166      	movs	r1, #102	; 0x66
 800aa90:	4b17      	ldr	r3, [pc, #92]	; (800aaf0 <_Balloc+0x78>)
 800aa92:	4818      	ldr	r0, [pc, #96]	; (800aaf4 <_Balloc+0x7c>)
 800aa94:	f001 f8d8 	bl	800bc48 <__assert_func>
 800aa98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aa9c:	6006      	str	r6, [r0, #0]
 800aa9e:	60c6      	str	r6, [r0, #12]
 800aaa0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800aaa2:	68f3      	ldr	r3, [r6, #12]
 800aaa4:	b183      	cbz	r3, 800aac8 <_Balloc+0x50>
 800aaa6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aaa8:	68db      	ldr	r3, [r3, #12]
 800aaaa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aaae:	b9b8      	cbnz	r0, 800aae0 <_Balloc+0x68>
 800aab0:	2101      	movs	r1, #1
 800aab2:	fa01 f605 	lsl.w	r6, r1, r5
 800aab6:	1d72      	adds	r2, r6, #5
 800aab8:	4620      	mov	r0, r4
 800aaba:	0092      	lsls	r2, r2, #2
 800aabc:	f000 fc94 	bl	800b3e8 <_calloc_r>
 800aac0:	b160      	cbz	r0, 800aadc <_Balloc+0x64>
 800aac2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800aac6:	e00e      	b.n	800aae6 <_Balloc+0x6e>
 800aac8:	2221      	movs	r2, #33	; 0x21
 800aaca:	2104      	movs	r1, #4
 800aacc:	4620      	mov	r0, r4
 800aace:	f000 fc8b 	bl	800b3e8 <_calloc_r>
 800aad2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aad4:	60f0      	str	r0, [r6, #12]
 800aad6:	68db      	ldr	r3, [r3, #12]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d1e4      	bne.n	800aaa6 <_Balloc+0x2e>
 800aadc:	2000      	movs	r0, #0
 800aade:	bd70      	pop	{r4, r5, r6, pc}
 800aae0:	6802      	ldr	r2, [r0, #0]
 800aae2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800aae6:	2300      	movs	r3, #0
 800aae8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aaec:	e7f7      	b.n	800aade <_Balloc+0x66>
 800aaee:	bf00      	nop
 800aaf0:	0800dfce 	.word	0x0800dfce
 800aaf4:	0800e130 	.word	0x0800e130

0800aaf8 <_Bfree>:
 800aaf8:	b570      	push	{r4, r5, r6, lr}
 800aafa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800aafc:	4605      	mov	r5, r0
 800aafe:	460c      	mov	r4, r1
 800ab00:	b976      	cbnz	r6, 800ab20 <_Bfree+0x28>
 800ab02:	2010      	movs	r0, #16
 800ab04:	f7ff ff90 	bl	800aa28 <malloc>
 800ab08:	4602      	mov	r2, r0
 800ab0a:	6268      	str	r0, [r5, #36]	; 0x24
 800ab0c:	b920      	cbnz	r0, 800ab18 <_Bfree+0x20>
 800ab0e:	218a      	movs	r1, #138	; 0x8a
 800ab10:	4b08      	ldr	r3, [pc, #32]	; (800ab34 <_Bfree+0x3c>)
 800ab12:	4809      	ldr	r0, [pc, #36]	; (800ab38 <_Bfree+0x40>)
 800ab14:	f001 f898 	bl	800bc48 <__assert_func>
 800ab18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ab1c:	6006      	str	r6, [r0, #0]
 800ab1e:	60c6      	str	r6, [r0, #12]
 800ab20:	b13c      	cbz	r4, 800ab32 <_Bfree+0x3a>
 800ab22:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ab24:	6862      	ldr	r2, [r4, #4]
 800ab26:	68db      	ldr	r3, [r3, #12]
 800ab28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ab2c:	6021      	str	r1, [r4, #0]
 800ab2e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ab32:	bd70      	pop	{r4, r5, r6, pc}
 800ab34:	0800dfce 	.word	0x0800dfce
 800ab38:	0800e130 	.word	0x0800e130

0800ab3c <__multadd>:
 800ab3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab40:	4607      	mov	r7, r0
 800ab42:	460c      	mov	r4, r1
 800ab44:	461e      	mov	r6, r3
 800ab46:	2000      	movs	r0, #0
 800ab48:	690d      	ldr	r5, [r1, #16]
 800ab4a:	f101 0c14 	add.w	ip, r1, #20
 800ab4e:	f8dc 3000 	ldr.w	r3, [ip]
 800ab52:	3001      	adds	r0, #1
 800ab54:	b299      	uxth	r1, r3
 800ab56:	fb02 6101 	mla	r1, r2, r1, r6
 800ab5a:	0c1e      	lsrs	r6, r3, #16
 800ab5c:	0c0b      	lsrs	r3, r1, #16
 800ab5e:	fb02 3306 	mla	r3, r2, r6, r3
 800ab62:	b289      	uxth	r1, r1
 800ab64:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ab68:	4285      	cmp	r5, r0
 800ab6a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ab6e:	f84c 1b04 	str.w	r1, [ip], #4
 800ab72:	dcec      	bgt.n	800ab4e <__multadd+0x12>
 800ab74:	b30e      	cbz	r6, 800abba <__multadd+0x7e>
 800ab76:	68a3      	ldr	r3, [r4, #8]
 800ab78:	42ab      	cmp	r3, r5
 800ab7a:	dc19      	bgt.n	800abb0 <__multadd+0x74>
 800ab7c:	6861      	ldr	r1, [r4, #4]
 800ab7e:	4638      	mov	r0, r7
 800ab80:	3101      	adds	r1, #1
 800ab82:	f7ff ff79 	bl	800aa78 <_Balloc>
 800ab86:	4680      	mov	r8, r0
 800ab88:	b928      	cbnz	r0, 800ab96 <__multadd+0x5a>
 800ab8a:	4602      	mov	r2, r0
 800ab8c:	21b5      	movs	r1, #181	; 0xb5
 800ab8e:	4b0c      	ldr	r3, [pc, #48]	; (800abc0 <__multadd+0x84>)
 800ab90:	480c      	ldr	r0, [pc, #48]	; (800abc4 <__multadd+0x88>)
 800ab92:	f001 f859 	bl	800bc48 <__assert_func>
 800ab96:	6922      	ldr	r2, [r4, #16]
 800ab98:	f104 010c 	add.w	r1, r4, #12
 800ab9c:	3202      	adds	r2, #2
 800ab9e:	0092      	lsls	r2, r2, #2
 800aba0:	300c      	adds	r0, #12
 800aba2:	f7fc fcb1 	bl	8007508 <memcpy>
 800aba6:	4621      	mov	r1, r4
 800aba8:	4638      	mov	r0, r7
 800abaa:	f7ff ffa5 	bl	800aaf8 <_Bfree>
 800abae:	4644      	mov	r4, r8
 800abb0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800abb4:	3501      	adds	r5, #1
 800abb6:	615e      	str	r6, [r3, #20]
 800abb8:	6125      	str	r5, [r4, #16]
 800abba:	4620      	mov	r0, r4
 800abbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abc0:	0800e040 	.word	0x0800e040
 800abc4:	0800e130 	.word	0x0800e130

0800abc8 <__s2b>:
 800abc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abcc:	4615      	mov	r5, r2
 800abce:	2209      	movs	r2, #9
 800abd0:	461f      	mov	r7, r3
 800abd2:	3308      	adds	r3, #8
 800abd4:	460c      	mov	r4, r1
 800abd6:	fb93 f3f2 	sdiv	r3, r3, r2
 800abda:	4606      	mov	r6, r0
 800abdc:	2201      	movs	r2, #1
 800abde:	2100      	movs	r1, #0
 800abe0:	429a      	cmp	r2, r3
 800abe2:	db09      	blt.n	800abf8 <__s2b+0x30>
 800abe4:	4630      	mov	r0, r6
 800abe6:	f7ff ff47 	bl	800aa78 <_Balloc>
 800abea:	b940      	cbnz	r0, 800abfe <__s2b+0x36>
 800abec:	4602      	mov	r2, r0
 800abee:	21ce      	movs	r1, #206	; 0xce
 800abf0:	4b18      	ldr	r3, [pc, #96]	; (800ac54 <__s2b+0x8c>)
 800abf2:	4819      	ldr	r0, [pc, #100]	; (800ac58 <__s2b+0x90>)
 800abf4:	f001 f828 	bl	800bc48 <__assert_func>
 800abf8:	0052      	lsls	r2, r2, #1
 800abfa:	3101      	adds	r1, #1
 800abfc:	e7f0      	b.n	800abe0 <__s2b+0x18>
 800abfe:	9b08      	ldr	r3, [sp, #32]
 800ac00:	2d09      	cmp	r5, #9
 800ac02:	6143      	str	r3, [r0, #20]
 800ac04:	f04f 0301 	mov.w	r3, #1
 800ac08:	6103      	str	r3, [r0, #16]
 800ac0a:	dd16      	ble.n	800ac3a <__s2b+0x72>
 800ac0c:	f104 0909 	add.w	r9, r4, #9
 800ac10:	46c8      	mov	r8, r9
 800ac12:	442c      	add	r4, r5
 800ac14:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ac18:	4601      	mov	r1, r0
 800ac1a:	220a      	movs	r2, #10
 800ac1c:	4630      	mov	r0, r6
 800ac1e:	3b30      	subs	r3, #48	; 0x30
 800ac20:	f7ff ff8c 	bl	800ab3c <__multadd>
 800ac24:	45a0      	cmp	r8, r4
 800ac26:	d1f5      	bne.n	800ac14 <__s2b+0x4c>
 800ac28:	f1a5 0408 	sub.w	r4, r5, #8
 800ac2c:	444c      	add	r4, r9
 800ac2e:	1b2d      	subs	r5, r5, r4
 800ac30:	1963      	adds	r3, r4, r5
 800ac32:	42bb      	cmp	r3, r7
 800ac34:	db04      	blt.n	800ac40 <__s2b+0x78>
 800ac36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac3a:	2509      	movs	r5, #9
 800ac3c:	340a      	adds	r4, #10
 800ac3e:	e7f6      	b.n	800ac2e <__s2b+0x66>
 800ac40:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ac44:	4601      	mov	r1, r0
 800ac46:	220a      	movs	r2, #10
 800ac48:	4630      	mov	r0, r6
 800ac4a:	3b30      	subs	r3, #48	; 0x30
 800ac4c:	f7ff ff76 	bl	800ab3c <__multadd>
 800ac50:	e7ee      	b.n	800ac30 <__s2b+0x68>
 800ac52:	bf00      	nop
 800ac54:	0800e040 	.word	0x0800e040
 800ac58:	0800e130 	.word	0x0800e130

0800ac5c <__hi0bits>:
 800ac5c:	0c02      	lsrs	r2, r0, #16
 800ac5e:	0412      	lsls	r2, r2, #16
 800ac60:	4603      	mov	r3, r0
 800ac62:	b9ca      	cbnz	r2, 800ac98 <__hi0bits+0x3c>
 800ac64:	0403      	lsls	r3, r0, #16
 800ac66:	2010      	movs	r0, #16
 800ac68:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800ac6c:	bf04      	itt	eq
 800ac6e:	021b      	lsleq	r3, r3, #8
 800ac70:	3008      	addeq	r0, #8
 800ac72:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ac76:	bf04      	itt	eq
 800ac78:	011b      	lsleq	r3, r3, #4
 800ac7a:	3004      	addeq	r0, #4
 800ac7c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ac80:	bf04      	itt	eq
 800ac82:	009b      	lsleq	r3, r3, #2
 800ac84:	3002      	addeq	r0, #2
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	db05      	blt.n	800ac96 <__hi0bits+0x3a>
 800ac8a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800ac8e:	f100 0001 	add.w	r0, r0, #1
 800ac92:	bf08      	it	eq
 800ac94:	2020      	moveq	r0, #32
 800ac96:	4770      	bx	lr
 800ac98:	2000      	movs	r0, #0
 800ac9a:	e7e5      	b.n	800ac68 <__hi0bits+0xc>

0800ac9c <__lo0bits>:
 800ac9c:	6803      	ldr	r3, [r0, #0]
 800ac9e:	4602      	mov	r2, r0
 800aca0:	f013 0007 	ands.w	r0, r3, #7
 800aca4:	d00b      	beq.n	800acbe <__lo0bits+0x22>
 800aca6:	07d9      	lsls	r1, r3, #31
 800aca8:	d421      	bmi.n	800acee <__lo0bits+0x52>
 800acaa:	0798      	lsls	r0, r3, #30
 800acac:	bf49      	itett	mi
 800acae:	085b      	lsrmi	r3, r3, #1
 800acb0:	089b      	lsrpl	r3, r3, #2
 800acb2:	2001      	movmi	r0, #1
 800acb4:	6013      	strmi	r3, [r2, #0]
 800acb6:	bf5c      	itt	pl
 800acb8:	2002      	movpl	r0, #2
 800acba:	6013      	strpl	r3, [r2, #0]
 800acbc:	4770      	bx	lr
 800acbe:	b299      	uxth	r1, r3
 800acc0:	b909      	cbnz	r1, 800acc6 <__lo0bits+0x2a>
 800acc2:	2010      	movs	r0, #16
 800acc4:	0c1b      	lsrs	r3, r3, #16
 800acc6:	b2d9      	uxtb	r1, r3
 800acc8:	b909      	cbnz	r1, 800acce <__lo0bits+0x32>
 800acca:	3008      	adds	r0, #8
 800accc:	0a1b      	lsrs	r3, r3, #8
 800acce:	0719      	lsls	r1, r3, #28
 800acd0:	bf04      	itt	eq
 800acd2:	091b      	lsreq	r3, r3, #4
 800acd4:	3004      	addeq	r0, #4
 800acd6:	0799      	lsls	r1, r3, #30
 800acd8:	bf04      	itt	eq
 800acda:	089b      	lsreq	r3, r3, #2
 800acdc:	3002      	addeq	r0, #2
 800acde:	07d9      	lsls	r1, r3, #31
 800ace0:	d403      	bmi.n	800acea <__lo0bits+0x4e>
 800ace2:	085b      	lsrs	r3, r3, #1
 800ace4:	f100 0001 	add.w	r0, r0, #1
 800ace8:	d003      	beq.n	800acf2 <__lo0bits+0x56>
 800acea:	6013      	str	r3, [r2, #0]
 800acec:	4770      	bx	lr
 800acee:	2000      	movs	r0, #0
 800acf0:	4770      	bx	lr
 800acf2:	2020      	movs	r0, #32
 800acf4:	4770      	bx	lr
	...

0800acf8 <__i2b>:
 800acf8:	b510      	push	{r4, lr}
 800acfa:	460c      	mov	r4, r1
 800acfc:	2101      	movs	r1, #1
 800acfe:	f7ff febb 	bl	800aa78 <_Balloc>
 800ad02:	4602      	mov	r2, r0
 800ad04:	b928      	cbnz	r0, 800ad12 <__i2b+0x1a>
 800ad06:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ad0a:	4b04      	ldr	r3, [pc, #16]	; (800ad1c <__i2b+0x24>)
 800ad0c:	4804      	ldr	r0, [pc, #16]	; (800ad20 <__i2b+0x28>)
 800ad0e:	f000 ff9b 	bl	800bc48 <__assert_func>
 800ad12:	2301      	movs	r3, #1
 800ad14:	6144      	str	r4, [r0, #20]
 800ad16:	6103      	str	r3, [r0, #16]
 800ad18:	bd10      	pop	{r4, pc}
 800ad1a:	bf00      	nop
 800ad1c:	0800e040 	.word	0x0800e040
 800ad20:	0800e130 	.word	0x0800e130

0800ad24 <__multiply>:
 800ad24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad28:	4691      	mov	r9, r2
 800ad2a:	690a      	ldr	r2, [r1, #16]
 800ad2c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ad30:	460c      	mov	r4, r1
 800ad32:	429a      	cmp	r2, r3
 800ad34:	bfbe      	ittt	lt
 800ad36:	460b      	movlt	r3, r1
 800ad38:	464c      	movlt	r4, r9
 800ad3a:	4699      	movlt	r9, r3
 800ad3c:	6927      	ldr	r7, [r4, #16]
 800ad3e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ad42:	68a3      	ldr	r3, [r4, #8]
 800ad44:	6861      	ldr	r1, [r4, #4]
 800ad46:	eb07 060a 	add.w	r6, r7, sl
 800ad4a:	42b3      	cmp	r3, r6
 800ad4c:	b085      	sub	sp, #20
 800ad4e:	bfb8      	it	lt
 800ad50:	3101      	addlt	r1, #1
 800ad52:	f7ff fe91 	bl	800aa78 <_Balloc>
 800ad56:	b930      	cbnz	r0, 800ad66 <__multiply+0x42>
 800ad58:	4602      	mov	r2, r0
 800ad5a:	f240 115d 	movw	r1, #349	; 0x15d
 800ad5e:	4b43      	ldr	r3, [pc, #268]	; (800ae6c <__multiply+0x148>)
 800ad60:	4843      	ldr	r0, [pc, #268]	; (800ae70 <__multiply+0x14c>)
 800ad62:	f000 ff71 	bl	800bc48 <__assert_func>
 800ad66:	f100 0514 	add.w	r5, r0, #20
 800ad6a:	462b      	mov	r3, r5
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ad72:	4543      	cmp	r3, r8
 800ad74:	d321      	bcc.n	800adba <__multiply+0x96>
 800ad76:	f104 0314 	add.w	r3, r4, #20
 800ad7a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ad7e:	f109 0314 	add.w	r3, r9, #20
 800ad82:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ad86:	9202      	str	r2, [sp, #8]
 800ad88:	1b3a      	subs	r2, r7, r4
 800ad8a:	3a15      	subs	r2, #21
 800ad8c:	f022 0203 	bic.w	r2, r2, #3
 800ad90:	3204      	adds	r2, #4
 800ad92:	f104 0115 	add.w	r1, r4, #21
 800ad96:	428f      	cmp	r7, r1
 800ad98:	bf38      	it	cc
 800ad9a:	2204      	movcc	r2, #4
 800ad9c:	9201      	str	r2, [sp, #4]
 800ad9e:	9a02      	ldr	r2, [sp, #8]
 800ada0:	9303      	str	r3, [sp, #12]
 800ada2:	429a      	cmp	r2, r3
 800ada4:	d80c      	bhi.n	800adc0 <__multiply+0x9c>
 800ada6:	2e00      	cmp	r6, #0
 800ada8:	dd03      	ble.n	800adb2 <__multiply+0x8e>
 800adaa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d059      	beq.n	800ae66 <__multiply+0x142>
 800adb2:	6106      	str	r6, [r0, #16]
 800adb4:	b005      	add	sp, #20
 800adb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adba:	f843 2b04 	str.w	r2, [r3], #4
 800adbe:	e7d8      	b.n	800ad72 <__multiply+0x4e>
 800adc0:	f8b3 a000 	ldrh.w	sl, [r3]
 800adc4:	f1ba 0f00 	cmp.w	sl, #0
 800adc8:	d023      	beq.n	800ae12 <__multiply+0xee>
 800adca:	46a9      	mov	r9, r5
 800adcc:	f04f 0c00 	mov.w	ip, #0
 800add0:	f104 0e14 	add.w	lr, r4, #20
 800add4:	f85e 2b04 	ldr.w	r2, [lr], #4
 800add8:	f8d9 1000 	ldr.w	r1, [r9]
 800addc:	fa1f fb82 	uxth.w	fp, r2
 800ade0:	b289      	uxth	r1, r1
 800ade2:	fb0a 110b 	mla	r1, sl, fp, r1
 800ade6:	4461      	add	r1, ip
 800ade8:	f8d9 c000 	ldr.w	ip, [r9]
 800adec:	0c12      	lsrs	r2, r2, #16
 800adee:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800adf2:	fb0a c202 	mla	r2, sl, r2, ip
 800adf6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800adfa:	b289      	uxth	r1, r1
 800adfc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ae00:	4577      	cmp	r7, lr
 800ae02:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ae06:	f849 1b04 	str.w	r1, [r9], #4
 800ae0a:	d8e3      	bhi.n	800add4 <__multiply+0xb0>
 800ae0c:	9a01      	ldr	r2, [sp, #4]
 800ae0e:	f845 c002 	str.w	ip, [r5, r2]
 800ae12:	9a03      	ldr	r2, [sp, #12]
 800ae14:	3304      	adds	r3, #4
 800ae16:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ae1a:	f1b9 0f00 	cmp.w	r9, #0
 800ae1e:	d020      	beq.n	800ae62 <__multiply+0x13e>
 800ae20:	46ae      	mov	lr, r5
 800ae22:	f04f 0a00 	mov.w	sl, #0
 800ae26:	6829      	ldr	r1, [r5, #0]
 800ae28:	f104 0c14 	add.w	ip, r4, #20
 800ae2c:	f8bc b000 	ldrh.w	fp, [ip]
 800ae30:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ae34:	b289      	uxth	r1, r1
 800ae36:	fb09 220b 	mla	r2, r9, fp, r2
 800ae3a:	4492      	add	sl, r2
 800ae3c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ae40:	f84e 1b04 	str.w	r1, [lr], #4
 800ae44:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ae48:	f8be 1000 	ldrh.w	r1, [lr]
 800ae4c:	0c12      	lsrs	r2, r2, #16
 800ae4e:	fb09 1102 	mla	r1, r9, r2, r1
 800ae52:	4567      	cmp	r7, ip
 800ae54:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ae58:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ae5c:	d8e6      	bhi.n	800ae2c <__multiply+0x108>
 800ae5e:	9a01      	ldr	r2, [sp, #4]
 800ae60:	50a9      	str	r1, [r5, r2]
 800ae62:	3504      	adds	r5, #4
 800ae64:	e79b      	b.n	800ad9e <__multiply+0x7a>
 800ae66:	3e01      	subs	r6, #1
 800ae68:	e79d      	b.n	800ada6 <__multiply+0x82>
 800ae6a:	bf00      	nop
 800ae6c:	0800e040 	.word	0x0800e040
 800ae70:	0800e130 	.word	0x0800e130

0800ae74 <__pow5mult>:
 800ae74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae78:	4615      	mov	r5, r2
 800ae7a:	f012 0203 	ands.w	r2, r2, #3
 800ae7e:	4606      	mov	r6, r0
 800ae80:	460f      	mov	r7, r1
 800ae82:	d007      	beq.n	800ae94 <__pow5mult+0x20>
 800ae84:	4c25      	ldr	r4, [pc, #148]	; (800af1c <__pow5mult+0xa8>)
 800ae86:	3a01      	subs	r2, #1
 800ae88:	2300      	movs	r3, #0
 800ae8a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ae8e:	f7ff fe55 	bl	800ab3c <__multadd>
 800ae92:	4607      	mov	r7, r0
 800ae94:	10ad      	asrs	r5, r5, #2
 800ae96:	d03d      	beq.n	800af14 <__pow5mult+0xa0>
 800ae98:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ae9a:	b97c      	cbnz	r4, 800aebc <__pow5mult+0x48>
 800ae9c:	2010      	movs	r0, #16
 800ae9e:	f7ff fdc3 	bl	800aa28 <malloc>
 800aea2:	4602      	mov	r2, r0
 800aea4:	6270      	str	r0, [r6, #36]	; 0x24
 800aea6:	b928      	cbnz	r0, 800aeb4 <__pow5mult+0x40>
 800aea8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800aeac:	4b1c      	ldr	r3, [pc, #112]	; (800af20 <__pow5mult+0xac>)
 800aeae:	481d      	ldr	r0, [pc, #116]	; (800af24 <__pow5mult+0xb0>)
 800aeb0:	f000 feca 	bl	800bc48 <__assert_func>
 800aeb4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aeb8:	6004      	str	r4, [r0, #0]
 800aeba:	60c4      	str	r4, [r0, #12]
 800aebc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800aec0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800aec4:	b94c      	cbnz	r4, 800aeda <__pow5mult+0x66>
 800aec6:	f240 2171 	movw	r1, #625	; 0x271
 800aeca:	4630      	mov	r0, r6
 800aecc:	f7ff ff14 	bl	800acf8 <__i2b>
 800aed0:	2300      	movs	r3, #0
 800aed2:	4604      	mov	r4, r0
 800aed4:	f8c8 0008 	str.w	r0, [r8, #8]
 800aed8:	6003      	str	r3, [r0, #0]
 800aeda:	f04f 0900 	mov.w	r9, #0
 800aede:	07eb      	lsls	r3, r5, #31
 800aee0:	d50a      	bpl.n	800aef8 <__pow5mult+0x84>
 800aee2:	4639      	mov	r1, r7
 800aee4:	4622      	mov	r2, r4
 800aee6:	4630      	mov	r0, r6
 800aee8:	f7ff ff1c 	bl	800ad24 <__multiply>
 800aeec:	4680      	mov	r8, r0
 800aeee:	4639      	mov	r1, r7
 800aef0:	4630      	mov	r0, r6
 800aef2:	f7ff fe01 	bl	800aaf8 <_Bfree>
 800aef6:	4647      	mov	r7, r8
 800aef8:	106d      	asrs	r5, r5, #1
 800aefa:	d00b      	beq.n	800af14 <__pow5mult+0xa0>
 800aefc:	6820      	ldr	r0, [r4, #0]
 800aefe:	b938      	cbnz	r0, 800af10 <__pow5mult+0x9c>
 800af00:	4622      	mov	r2, r4
 800af02:	4621      	mov	r1, r4
 800af04:	4630      	mov	r0, r6
 800af06:	f7ff ff0d 	bl	800ad24 <__multiply>
 800af0a:	6020      	str	r0, [r4, #0]
 800af0c:	f8c0 9000 	str.w	r9, [r0]
 800af10:	4604      	mov	r4, r0
 800af12:	e7e4      	b.n	800aede <__pow5mult+0x6a>
 800af14:	4638      	mov	r0, r7
 800af16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af1a:	bf00      	nop
 800af1c:	0800e280 	.word	0x0800e280
 800af20:	0800dfce 	.word	0x0800dfce
 800af24:	0800e130 	.word	0x0800e130

0800af28 <__lshift>:
 800af28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af2c:	460c      	mov	r4, r1
 800af2e:	4607      	mov	r7, r0
 800af30:	4691      	mov	r9, r2
 800af32:	6923      	ldr	r3, [r4, #16]
 800af34:	6849      	ldr	r1, [r1, #4]
 800af36:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800af3a:	68a3      	ldr	r3, [r4, #8]
 800af3c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800af40:	f108 0601 	add.w	r6, r8, #1
 800af44:	42b3      	cmp	r3, r6
 800af46:	db0b      	blt.n	800af60 <__lshift+0x38>
 800af48:	4638      	mov	r0, r7
 800af4a:	f7ff fd95 	bl	800aa78 <_Balloc>
 800af4e:	4605      	mov	r5, r0
 800af50:	b948      	cbnz	r0, 800af66 <__lshift+0x3e>
 800af52:	4602      	mov	r2, r0
 800af54:	f240 11d9 	movw	r1, #473	; 0x1d9
 800af58:	4b29      	ldr	r3, [pc, #164]	; (800b000 <__lshift+0xd8>)
 800af5a:	482a      	ldr	r0, [pc, #168]	; (800b004 <__lshift+0xdc>)
 800af5c:	f000 fe74 	bl	800bc48 <__assert_func>
 800af60:	3101      	adds	r1, #1
 800af62:	005b      	lsls	r3, r3, #1
 800af64:	e7ee      	b.n	800af44 <__lshift+0x1c>
 800af66:	2300      	movs	r3, #0
 800af68:	f100 0114 	add.w	r1, r0, #20
 800af6c:	f100 0210 	add.w	r2, r0, #16
 800af70:	4618      	mov	r0, r3
 800af72:	4553      	cmp	r3, sl
 800af74:	db37      	blt.n	800afe6 <__lshift+0xbe>
 800af76:	6920      	ldr	r0, [r4, #16]
 800af78:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800af7c:	f104 0314 	add.w	r3, r4, #20
 800af80:	f019 091f 	ands.w	r9, r9, #31
 800af84:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800af88:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800af8c:	d02f      	beq.n	800afee <__lshift+0xc6>
 800af8e:	468a      	mov	sl, r1
 800af90:	f04f 0c00 	mov.w	ip, #0
 800af94:	f1c9 0e20 	rsb	lr, r9, #32
 800af98:	681a      	ldr	r2, [r3, #0]
 800af9a:	fa02 f209 	lsl.w	r2, r2, r9
 800af9e:	ea42 020c 	orr.w	r2, r2, ip
 800afa2:	f84a 2b04 	str.w	r2, [sl], #4
 800afa6:	f853 2b04 	ldr.w	r2, [r3], #4
 800afaa:	4298      	cmp	r0, r3
 800afac:	fa22 fc0e 	lsr.w	ip, r2, lr
 800afb0:	d8f2      	bhi.n	800af98 <__lshift+0x70>
 800afb2:	1b03      	subs	r3, r0, r4
 800afb4:	3b15      	subs	r3, #21
 800afb6:	f023 0303 	bic.w	r3, r3, #3
 800afba:	3304      	adds	r3, #4
 800afbc:	f104 0215 	add.w	r2, r4, #21
 800afc0:	4290      	cmp	r0, r2
 800afc2:	bf38      	it	cc
 800afc4:	2304      	movcc	r3, #4
 800afc6:	f841 c003 	str.w	ip, [r1, r3]
 800afca:	f1bc 0f00 	cmp.w	ip, #0
 800afce:	d001      	beq.n	800afd4 <__lshift+0xac>
 800afd0:	f108 0602 	add.w	r6, r8, #2
 800afd4:	3e01      	subs	r6, #1
 800afd6:	4638      	mov	r0, r7
 800afd8:	4621      	mov	r1, r4
 800afda:	612e      	str	r6, [r5, #16]
 800afdc:	f7ff fd8c 	bl	800aaf8 <_Bfree>
 800afe0:	4628      	mov	r0, r5
 800afe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afe6:	f842 0f04 	str.w	r0, [r2, #4]!
 800afea:	3301      	adds	r3, #1
 800afec:	e7c1      	b.n	800af72 <__lshift+0x4a>
 800afee:	3904      	subs	r1, #4
 800aff0:	f853 2b04 	ldr.w	r2, [r3], #4
 800aff4:	4298      	cmp	r0, r3
 800aff6:	f841 2f04 	str.w	r2, [r1, #4]!
 800affa:	d8f9      	bhi.n	800aff0 <__lshift+0xc8>
 800affc:	e7ea      	b.n	800afd4 <__lshift+0xac>
 800affe:	bf00      	nop
 800b000:	0800e040 	.word	0x0800e040
 800b004:	0800e130 	.word	0x0800e130

0800b008 <__mcmp>:
 800b008:	4603      	mov	r3, r0
 800b00a:	690a      	ldr	r2, [r1, #16]
 800b00c:	6900      	ldr	r0, [r0, #16]
 800b00e:	b530      	push	{r4, r5, lr}
 800b010:	1a80      	subs	r0, r0, r2
 800b012:	d10d      	bne.n	800b030 <__mcmp+0x28>
 800b014:	3314      	adds	r3, #20
 800b016:	3114      	adds	r1, #20
 800b018:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b01c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b020:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b024:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b028:	4295      	cmp	r5, r2
 800b02a:	d002      	beq.n	800b032 <__mcmp+0x2a>
 800b02c:	d304      	bcc.n	800b038 <__mcmp+0x30>
 800b02e:	2001      	movs	r0, #1
 800b030:	bd30      	pop	{r4, r5, pc}
 800b032:	42a3      	cmp	r3, r4
 800b034:	d3f4      	bcc.n	800b020 <__mcmp+0x18>
 800b036:	e7fb      	b.n	800b030 <__mcmp+0x28>
 800b038:	f04f 30ff 	mov.w	r0, #4294967295
 800b03c:	e7f8      	b.n	800b030 <__mcmp+0x28>
	...

0800b040 <__mdiff>:
 800b040:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b044:	460d      	mov	r5, r1
 800b046:	4607      	mov	r7, r0
 800b048:	4611      	mov	r1, r2
 800b04a:	4628      	mov	r0, r5
 800b04c:	4614      	mov	r4, r2
 800b04e:	f7ff ffdb 	bl	800b008 <__mcmp>
 800b052:	1e06      	subs	r6, r0, #0
 800b054:	d111      	bne.n	800b07a <__mdiff+0x3a>
 800b056:	4631      	mov	r1, r6
 800b058:	4638      	mov	r0, r7
 800b05a:	f7ff fd0d 	bl	800aa78 <_Balloc>
 800b05e:	4602      	mov	r2, r0
 800b060:	b928      	cbnz	r0, 800b06e <__mdiff+0x2e>
 800b062:	f240 2132 	movw	r1, #562	; 0x232
 800b066:	4b3a      	ldr	r3, [pc, #232]	; (800b150 <__mdiff+0x110>)
 800b068:	483a      	ldr	r0, [pc, #232]	; (800b154 <__mdiff+0x114>)
 800b06a:	f000 fded 	bl	800bc48 <__assert_func>
 800b06e:	2301      	movs	r3, #1
 800b070:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b074:	4610      	mov	r0, r2
 800b076:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b07a:	bfa4      	itt	ge
 800b07c:	4623      	movge	r3, r4
 800b07e:	462c      	movge	r4, r5
 800b080:	4638      	mov	r0, r7
 800b082:	6861      	ldr	r1, [r4, #4]
 800b084:	bfa6      	itte	ge
 800b086:	461d      	movge	r5, r3
 800b088:	2600      	movge	r6, #0
 800b08a:	2601      	movlt	r6, #1
 800b08c:	f7ff fcf4 	bl	800aa78 <_Balloc>
 800b090:	4602      	mov	r2, r0
 800b092:	b918      	cbnz	r0, 800b09c <__mdiff+0x5c>
 800b094:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b098:	4b2d      	ldr	r3, [pc, #180]	; (800b150 <__mdiff+0x110>)
 800b09a:	e7e5      	b.n	800b068 <__mdiff+0x28>
 800b09c:	f102 0814 	add.w	r8, r2, #20
 800b0a0:	46c2      	mov	sl, r8
 800b0a2:	f04f 0c00 	mov.w	ip, #0
 800b0a6:	6927      	ldr	r7, [r4, #16]
 800b0a8:	60c6      	str	r6, [r0, #12]
 800b0aa:	692e      	ldr	r6, [r5, #16]
 800b0ac:	f104 0014 	add.w	r0, r4, #20
 800b0b0:	f105 0914 	add.w	r9, r5, #20
 800b0b4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800b0b8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b0bc:	3410      	adds	r4, #16
 800b0be:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800b0c2:	f859 3b04 	ldr.w	r3, [r9], #4
 800b0c6:	fa1f f18b 	uxth.w	r1, fp
 800b0ca:	448c      	add	ip, r1
 800b0cc:	b299      	uxth	r1, r3
 800b0ce:	0c1b      	lsrs	r3, r3, #16
 800b0d0:	ebac 0101 	sub.w	r1, ip, r1
 800b0d4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b0d8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b0dc:	b289      	uxth	r1, r1
 800b0de:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800b0e2:	454e      	cmp	r6, r9
 800b0e4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b0e8:	f84a 3b04 	str.w	r3, [sl], #4
 800b0ec:	d8e7      	bhi.n	800b0be <__mdiff+0x7e>
 800b0ee:	1b73      	subs	r3, r6, r5
 800b0f0:	3b15      	subs	r3, #21
 800b0f2:	f023 0303 	bic.w	r3, r3, #3
 800b0f6:	3515      	adds	r5, #21
 800b0f8:	3304      	adds	r3, #4
 800b0fa:	42ae      	cmp	r6, r5
 800b0fc:	bf38      	it	cc
 800b0fe:	2304      	movcc	r3, #4
 800b100:	4418      	add	r0, r3
 800b102:	4443      	add	r3, r8
 800b104:	461e      	mov	r6, r3
 800b106:	4605      	mov	r5, r0
 800b108:	4575      	cmp	r5, lr
 800b10a:	d30e      	bcc.n	800b12a <__mdiff+0xea>
 800b10c:	f10e 0103 	add.w	r1, lr, #3
 800b110:	1a09      	subs	r1, r1, r0
 800b112:	f021 0103 	bic.w	r1, r1, #3
 800b116:	3803      	subs	r0, #3
 800b118:	4586      	cmp	lr, r0
 800b11a:	bf38      	it	cc
 800b11c:	2100      	movcc	r1, #0
 800b11e:	4419      	add	r1, r3
 800b120:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800b124:	b18b      	cbz	r3, 800b14a <__mdiff+0x10a>
 800b126:	6117      	str	r7, [r2, #16]
 800b128:	e7a4      	b.n	800b074 <__mdiff+0x34>
 800b12a:	f855 8b04 	ldr.w	r8, [r5], #4
 800b12e:	fa1f f188 	uxth.w	r1, r8
 800b132:	4461      	add	r1, ip
 800b134:	140c      	asrs	r4, r1, #16
 800b136:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b13a:	b289      	uxth	r1, r1
 800b13c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b140:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800b144:	f846 1b04 	str.w	r1, [r6], #4
 800b148:	e7de      	b.n	800b108 <__mdiff+0xc8>
 800b14a:	3f01      	subs	r7, #1
 800b14c:	e7e8      	b.n	800b120 <__mdiff+0xe0>
 800b14e:	bf00      	nop
 800b150:	0800e040 	.word	0x0800e040
 800b154:	0800e130 	.word	0x0800e130

0800b158 <__ulp>:
 800b158:	4b11      	ldr	r3, [pc, #68]	; (800b1a0 <__ulp+0x48>)
 800b15a:	400b      	ands	r3, r1
 800b15c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800b160:	2b00      	cmp	r3, #0
 800b162:	dd02      	ble.n	800b16a <__ulp+0x12>
 800b164:	2000      	movs	r0, #0
 800b166:	4619      	mov	r1, r3
 800b168:	4770      	bx	lr
 800b16a:	425b      	negs	r3, r3
 800b16c:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800b170:	f04f 0000 	mov.w	r0, #0
 800b174:	f04f 0100 	mov.w	r1, #0
 800b178:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b17c:	da04      	bge.n	800b188 <__ulp+0x30>
 800b17e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b182:	fa43 f102 	asr.w	r1, r3, r2
 800b186:	4770      	bx	lr
 800b188:	f1a2 0314 	sub.w	r3, r2, #20
 800b18c:	2b1e      	cmp	r3, #30
 800b18e:	bfd6      	itet	le
 800b190:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800b194:	2301      	movgt	r3, #1
 800b196:	fa22 f303 	lsrle.w	r3, r2, r3
 800b19a:	4618      	mov	r0, r3
 800b19c:	4770      	bx	lr
 800b19e:	bf00      	nop
 800b1a0:	7ff00000 	.word	0x7ff00000

0800b1a4 <__b2d>:
 800b1a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1a8:	6907      	ldr	r7, [r0, #16]
 800b1aa:	f100 0914 	add.w	r9, r0, #20
 800b1ae:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800b1b2:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800b1b6:	f1a7 0804 	sub.w	r8, r7, #4
 800b1ba:	4630      	mov	r0, r6
 800b1bc:	f7ff fd4e 	bl	800ac5c <__hi0bits>
 800b1c0:	f1c0 0320 	rsb	r3, r0, #32
 800b1c4:	280a      	cmp	r0, #10
 800b1c6:	600b      	str	r3, [r1, #0]
 800b1c8:	491f      	ldr	r1, [pc, #124]	; (800b248 <__b2d+0xa4>)
 800b1ca:	dc17      	bgt.n	800b1fc <__b2d+0x58>
 800b1cc:	45c1      	cmp	r9, r8
 800b1ce:	bf28      	it	cs
 800b1d0:	2200      	movcs	r2, #0
 800b1d2:	f1c0 0c0b 	rsb	ip, r0, #11
 800b1d6:	fa26 f30c 	lsr.w	r3, r6, ip
 800b1da:	bf38      	it	cc
 800b1dc:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800b1e0:	ea43 0501 	orr.w	r5, r3, r1
 800b1e4:	f100 0315 	add.w	r3, r0, #21
 800b1e8:	fa06 f303 	lsl.w	r3, r6, r3
 800b1ec:	fa22 f20c 	lsr.w	r2, r2, ip
 800b1f0:	ea43 0402 	orr.w	r4, r3, r2
 800b1f4:	4620      	mov	r0, r4
 800b1f6:	4629      	mov	r1, r5
 800b1f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1fc:	45c1      	cmp	r9, r8
 800b1fe:	bf2e      	itee	cs
 800b200:	2200      	movcs	r2, #0
 800b202:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800b206:	f1a7 0808 	subcc.w	r8, r7, #8
 800b20a:	f1b0 030b 	subs.w	r3, r0, #11
 800b20e:	d016      	beq.n	800b23e <__b2d+0x9a>
 800b210:	f1c3 0720 	rsb	r7, r3, #32
 800b214:	fa22 f107 	lsr.w	r1, r2, r7
 800b218:	45c8      	cmp	r8, r9
 800b21a:	fa06 f603 	lsl.w	r6, r6, r3
 800b21e:	ea46 0601 	orr.w	r6, r6, r1
 800b222:	bf94      	ite	ls
 800b224:	2100      	movls	r1, #0
 800b226:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800b22a:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800b22e:	fa02 f003 	lsl.w	r0, r2, r3
 800b232:	40f9      	lsrs	r1, r7
 800b234:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b238:	ea40 0401 	orr.w	r4, r0, r1
 800b23c:	e7da      	b.n	800b1f4 <__b2d+0x50>
 800b23e:	4614      	mov	r4, r2
 800b240:	ea46 0501 	orr.w	r5, r6, r1
 800b244:	e7d6      	b.n	800b1f4 <__b2d+0x50>
 800b246:	bf00      	nop
 800b248:	3ff00000 	.word	0x3ff00000

0800b24c <__d2b>:
 800b24c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b250:	2101      	movs	r1, #1
 800b252:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800b256:	4690      	mov	r8, r2
 800b258:	461d      	mov	r5, r3
 800b25a:	f7ff fc0d 	bl	800aa78 <_Balloc>
 800b25e:	4604      	mov	r4, r0
 800b260:	b930      	cbnz	r0, 800b270 <__d2b+0x24>
 800b262:	4602      	mov	r2, r0
 800b264:	f240 310a 	movw	r1, #778	; 0x30a
 800b268:	4b24      	ldr	r3, [pc, #144]	; (800b2fc <__d2b+0xb0>)
 800b26a:	4825      	ldr	r0, [pc, #148]	; (800b300 <__d2b+0xb4>)
 800b26c:	f000 fcec 	bl	800bc48 <__assert_func>
 800b270:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800b274:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800b278:	bb2d      	cbnz	r5, 800b2c6 <__d2b+0x7a>
 800b27a:	9301      	str	r3, [sp, #4]
 800b27c:	f1b8 0300 	subs.w	r3, r8, #0
 800b280:	d026      	beq.n	800b2d0 <__d2b+0x84>
 800b282:	4668      	mov	r0, sp
 800b284:	9300      	str	r3, [sp, #0]
 800b286:	f7ff fd09 	bl	800ac9c <__lo0bits>
 800b28a:	9900      	ldr	r1, [sp, #0]
 800b28c:	b1f0      	cbz	r0, 800b2cc <__d2b+0x80>
 800b28e:	9a01      	ldr	r2, [sp, #4]
 800b290:	f1c0 0320 	rsb	r3, r0, #32
 800b294:	fa02 f303 	lsl.w	r3, r2, r3
 800b298:	430b      	orrs	r3, r1
 800b29a:	40c2      	lsrs	r2, r0
 800b29c:	6163      	str	r3, [r4, #20]
 800b29e:	9201      	str	r2, [sp, #4]
 800b2a0:	9b01      	ldr	r3, [sp, #4]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	bf14      	ite	ne
 800b2a6:	2102      	movne	r1, #2
 800b2a8:	2101      	moveq	r1, #1
 800b2aa:	61a3      	str	r3, [r4, #24]
 800b2ac:	6121      	str	r1, [r4, #16]
 800b2ae:	b1c5      	cbz	r5, 800b2e2 <__d2b+0x96>
 800b2b0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b2b4:	4405      	add	r5, r0
 800b2b6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b2ba:	603d      	str	r5, [r7, #0]
 800b2bc:	6030      	str	r0, [r6, #0]
 800b2be:	4620      	mov	r0, r4
 800b2c0:	b002      	add	sp, #8
 800b2c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b2ca:	e7d6      	b.n	800b27a <__d2b+0x2e>
 800b2cc:	6161      	str	r1, [r4, #20]
 800b2ce:	e7e7      	b.n	800b2a0 <__d2b+0x54>
 800b2d0:	a801      	add	r0, sp, #4
 800b2d2:	f7ff fce3 	bl	800ac9c <__lo0bits>
 800b2d6:	2101      	movs	r1, #1
 800b2d8:	9b01      	ldr	r3, [sp, #4]
 800b2da:	6121      	str	r1, [r4, #16]
 800b2dc:	6163      	str	r3, [r4, #20]
 800b2de:	3020      	adds	r0, #32
 800b2e0:	e7e5      	b.n	800b2ae <__d2b+0x62>
 800b2e2:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800b2e6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b2ea:	6038      	str	r0, [r7, #0]
 800b2ec:	6918      	ldr	r0, [r3, #16]
 800b2ee:	f7ff fcb5 	bl	800ac5c <__hi0bits>
 800b2f2:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800b2f6:	6031      	str	r1, [r6, #0]
 800b2f8:	e7e1      	b.n	800b2be <__d2b+0x72>
 800b2fa:	bf00      	nop
 800b2fc:	0800e040 	.word	0x0800e040
 800b300:	0800e130 	.word	0x0800e130

0800b304 <__ratio>:
 800b304:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b308:	4688      	mov	r8, r1
 800b30a:	4669      	mov	r1, sp
 800b30c:	4681      	mov	r9, r0
 800b30e:	f7ff ff49 	bl	800b1a4 <__b2d>
 800b312:	460f      	mov	r7, r1
 800b314:	4604      	mov	r4, r0
 800b316:	460d      	mov	r5, r1
 800b318:	4640      	mov	r0, r8
 800b31a:	a901      	add	r1, sp, #4
 800b31c:	f7ff ff42 	bl	800b1a4 <__b2d>
 800b320:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b324:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b328:	468b      	mov	fp, r1
 800b32a:	eba3 0c02 	sub.w	ip, r3, r2
 800b32e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b332:	1a9b      	subs	r3, r3, r2
 800b334:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b338:	2b00      	cmp	r3, #0
 800b33a:	bfd5      	itete	le
 800b33c:	460a      	movle	r2, r1
 800b33e:	462a      	movgt	r2, r5
 800b340:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b344:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b348:	bfd8      	it	le
 800b34a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b34e:	465b      	mov	r3, fp
 800b350:	4602      	mov	r2, r0
 800b352:	4639      	mov	r1, r7
 800b354:	4620      	mov	r0, r4
 800b356:	f7f5 f9e9 	bl	800072c <__aeabi_ddiv>
 800b35a:	b003      	add	sp, #12
 800b35c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b360 <__copybits>:
 800b360:	3901      	subs	r1, #1
 800b362:	b570      	push	{r4, r5, r6, lr}
 800b364:	1149      	asrs	r1, r1, #5
 800b366:	6914      	ldr	r4, [r2, #16]
 800b368:	3101      	adds	r1, #1
 800b36a:	f102 0314 	add.w	r3, r2, #20
 800b36e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b372:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b376:	1f05      	subs	r5, r0, #4
 800b378:	42a3      	cmp	r3, r4
 800b37a:	d30c      	bcc.n	800b396 <__copybits+0x36>
 800b37c:	1aa3      	subs	r3, r4, r2
 800b37e:	3b11      	subs	r3, #17
 800b380:	f023 0303 	bic.w	r3, r3, #3
 800b384:	3211      	adds	r2, #17
 800b386:	42a2      	cmp	r2, r4
 800b388:	bf88      	it	hi
 800b38a:	2300      	movhi	r3, #0
 800b38c:	4418      	add	r0, r3
 800b38e:	2300      	movs	r3, #0
 800b390:	4288      	cmp	r0, r1
 800b392:	d305      	bcc.n	800b3a0 <__copybits+0x40>
 800b394:	bd70      	pop	{r4, r5, r6, pc}
 800b396:	f853 6b04 	ldr.w	r6, [r3], #4
 800b39a:	f845 6f04 	str.w	r6, [r5, #4]!
 800b39e:	e7eb      	b.n	800b378 <__copybits+0x18>
 800b3a0:	f840 3b04 	str.w	r3, [r0], #4
 800b3a4:	e7f4      	b.n	800b390 <__copybits+0x30>

0800b3a6 <__any_on>:
 800b3a6:	f100 0214 	add.w	r2, r0, #20
 800b3aa:	6900      	ldr	r0, [r0, #16]
 800b3ac:	114b      	asrs	r3, r1, #5
 800b3ae:	4298      	cmp	r0, r3
 800b3b0:	b510      	push	{r4, lr}
 800b3b2:	db11      	blt.n	800b3d8 <__any_on+0x32>
 800b3b4:	dd0a      	ble.n	800b3cc <__any_on+0x26>
 800b3b6:	f011 011f 	ands.w	r1, r1, #31
 800b3ba:	d007      	beq.n	800b3cc <__any_on+0x26>
 800b3bc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b3c0:	fa24 f001 	lsr.w	r0, r4, r1
 800b3c4:	fa00 f101 	lsl.w	r1, r0, r1
 800b3c8:	428c      	cmp	r4, r1
 800b3ca:	d10b      	bne.n	800b3e4 <__any_on+0x3e>
 800b3cc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b3d0:	4293      	cmp	r3, r2
 800b3d2:	d803      	bhi.n	800b3dc <__any_on+0x36>
 800b3d4:	2000      	movs	r0, #0
 800b3d6:	bd10      	pop	{r4, pc}
 800b3d8:	4603      	mov	r3, r0
 800b3da:	e7f7      	b.n	800b3cc <__any_on+0x26>
 800b3dc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b3e0:	2900      	cmp	r1, #0
 800b3e2:	d0f5      	beq.n	800b3d0 <__any_on+0x2a>
 800b3e4:	2001      	movs	r0, #1
 800b3e6:	e7f6      	b.n	800b3d6 <__any_on+0x30>

0800b3e8 <_calloc_r>:
 800b3e8:	b570      	push	{r4, r5, r6, lr}
 800b3ea:	fba1 5402 	umull	r5, r4, r1, r2
 800b3ee:	b934      	cbnz	r4, 800b3fe <_calloc_r+0x16>
 800b3f0:	4629      	mov	r1, r5
 800b3f2:	f000 f875 	bl	800b4e0 <_malloc_r>
 800b3f6:	4606      	mov	r6, r0
 800b3f8:	b928      	cbnz	r0, 800b406 <_calloc_r+0x1e>
 800b3fa:	4630      	mov	r0, r6
 800b3fc:	bd70      	pop	{r4, r5, r6, pc}
 800b3fe:	220c      	movs	r2, #12
 800b400:	2600      	movs	r6, #0
 800b402:	6002      	str	r2, [r0, #0]
 800b404:	e7f9      	b.n	800b3fa <_calloc_r+0x12>
 800b406:	462a      	mov	r2, r5
 800b408:	4621      	mov	r1, r4
 800b40a:	f7fc f88b 	bl	8007524 <memset>
 800b40e:	e7f4      	b.n	800b3fa <_calloc_r+0x12>

0800b410 <_free_r>:
 800b410:	b538      	push	{r3, r4, r5, lr}
 800b412:	4605      	mov	r5, r0
 800b414:	2900      	cmp	r1, #0
 800b416:	d040      	beq.n	800b49a <_free_r+0x8a>
 800b418:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b41c:	1f0c      	subs	r4, r1, #4
 800b41e:	2b00      	cmp	r3, #0
 800b420:	bfb8      	it	lt
 800b422:	18e4      	addlt	r4, r4, r3
 800b424:	f000 fc9e 	bl	800bd64 <__malloc_lock>
 800b428:	4a1c      	ldr	r2, [pc, #112]	; (800b49c <_free_r+0x8c>)
 800b42a:	6813      	ldr	r3, [r2, #0]
 800b42c:	b933      	cbnz	r3, 800b43c <_free_r+0x2c>
 800b42e:	6063      	str	r3, [r4, #4]
 800b430:	6014      	str	r4, [r2, #0]
 800b432:	4628      	mov	r0, r5
 800b434:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b438:	f000 bc9a 	b.w	800bd70 <__malloc_unlock>
 800b43c:	42a3      	cmp	r3, r4
 800b43e:	d908      	bls.n	800b452 <_free_r+0x42>
 800b440:	6820      	ldr	r0, [r4, #0]
 800b442:	1821      	adds	r1, r4, r0
 800b444:	428b      	cmp	r3, r1
 800b446:	bf01      	itttt	eq
 800b448:	6819      	ldreq	r1, [r3, #0]
 800b44a:	685b      	ldreq	r3, [r3, #4]
 800b44c:	1809      	addeq	r1, r1, r0
 800b44e:	6021      	streq	r1, [r4, #0]
 800b450:	e7ed      	b.n	800b42e <_free_r+0x1e>
 800b452:	461a      	mov	r2, r3
 800b454:	685b      	ldr	r3, [r3, #4]
 800b456:	b10b      	cbz	r3, 800b45c <_free_r+0x4c>
 800b458:	42a3      	cmp	r3, r4
 800b45a:	d9fa      	bls.n	800b452 <_free_r+0x42>
 800b45c:	6811      	ldr	r1, [r2, #0]
 800b45e:	1850      	adds	r0, r2, r1
 800b460:	42a0      	cmp	r0, r4
 800b462:	d10b      	bne.n	800b47c <_free_r+0x6c>
 800b464:	6820      	ldr	r0, [r4, #0]
 800b466:	4401      	add	r1, r0
 800b468:	1850      	adds	r0, r2, r1
 800b46a:	4283      	cmp	r3, r0
 800b46c:	6011      	str	r1, [r2, #0]
 800b46e:	d1e0      	bne.n	800b432 <_free_r+0x22>
 800b470:	6818      	ldr	r0, [r3, #0]
 800b472:	685b      	ldr	r3, [r3, #4]
 800b474:	4401      	add	r1, r0
 800b476:	6011      	str	r1, [r2, #0]
 800b478:	6053      	str	r3, [r2, #4]
 800b47a:	e7da      	b.n	800b432 <_free_r+0x22>
 800b47c:	d902      	bls.n	800b484 <_free_r+0x74>
 800b47e:	230c      	movs	r3, #12
 800b480:	602b      	str	r3, [r5, #0]
 800b482:	e7d6      	b.n	800b432 <_free_r+0x22>
 800b484:	6820      	ldr	r0, [r4, #0]
 800b486:	1821      	adds	r1, r4, r0
 800b488:	428b      	cmp	r3, r1
 800b48a:	bf01      	itttt	eq
 800b48c:	6819      	ldreq	r1, [r3, #0]
 800b48e:	685b      	ldreq	r3, [r3, #4]
 800b490:	1809      	addeq	r1, r1, r0
 800b492:	6021      	streq	r1, [r4, #0]
 800b494:	6063      	str	r3, [r4, #4]
 800b496:	6054      	str	r4, [r2, #4]
 800b498:	e7cb      	b.n	800b432 <_free_r+0x22>
 800b49a:	bd38      	pop	{r3, r4, r5, pc}
 800b49c:	20000bf0 	.word	0x20000bf0

0800b4a0 <sbrk_aligned>:
 800b4a0:	b570      	push	{r4, r5, r6, lr}
 800b4a2:	4e0e      	ldr	r6, [pc, #56]	; (800b4dc <sbrk_aligned+0x3c>)
 800b4a4:	460c      	mov	r4, r1
 800b4a6:	6831      	ldr	r1, [r6, #0]
 800b4a8:	4605      	mov	r5, r0
 800b4aa:	b911      	cbnz	r1, 800b4b2 <sbrk_aligned+0x12>
 800b4ac:	f000 fb46 	bl	800bb3c <_sbrk_r>
 800b4b0:	6030      	str	r0, [r6, #0]
 800b4b2:	4621      	mov	r1, r4
 800b4b4:	4628      	mov	r0, r5
 800b4b6:	f000 fb41 	bl	800bb3c <_sbrk_r>
 800b4ba:	1c43      	adds	r3, r0, #1
 800b4bc:	d00a      	beq.n	800b4d4 <sbrk_aligned+0x34>
 800b4be:	1cc4      	adds	r4, r0, #3
 800b4c0:	f024 0403 	bic.w	r4, r4, #3
 800b4c4:	42a0      	cmp	r0, r4
 800b4c6:	d007      	beq.n	800b4d8 <sbrk_aligned+0x38>
 800b4c8:	1a21      	subs	r1, r4, r0
 800b4ca:	4628      	mov	r0, r5
 800b4cc:	f000 fb36 	bl	800bb3c <_sbrk_r>
 800b4d0:	3001      	adds	r0, #1
 800b4d2:	d101      	bne.n	800b4d8 <sbrk_aligned+0x38>
 800b4d4:	f04f 34ff 	mov.w	r4, #4294967295
 800b4d8:	4620      	mov	r0, r4
 800b4da:	bd70      	pop	{r4, r5, r6, pc}
 800b4dc:	20000bf4 	.word	0x20000bf4

0800b4e0 <_malloc_r>:
 800b4e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4e4:	1ccd      	adds	r5, r1, #3
 800b4e6:	f025 0503 	bic.w	r5, r5, #3
 800b4ea:	3508      	adds	r5, #8
 800b4ec:	2d0c      	cmp	r5, #12
 800b4ee:	bf38      	it	cc
 800b4f0:	250c      	movcc	r5, #12
 800b4f2:	2d00      	cmp	r5, #0
 800b4f4:	4607      	mov	r7, r0
 800b4f6:	db01      	blt.n	800b4fc <_malloc_r+0x1c>
 800b4f8:	42a9      	cmp	r1, r5
 800b4fa:	d905      	bls.n	800b508 <_malloc_r+0x28>
 800b4fc:	230c      	movs	r3, #12
 800b4fe:	2600      	movs	r6, #0
 800b500:	603b      	str	r3, [r7, #0]
 800b502:	4630      	mov	r0, r6
 800b504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b508:	4e2e      	ldr	r6, [pc, #184]	; (800b5c4 <_malloc_r+0xe4>)
 800b50a:	f000 fc2b 	bl	800bd64 <__malloc_lock>
 800b50e:	6833      	ldr	r3, [r6, #0]
 800b510:	461c      	mov	r4, r3
 800b512:	bb34      	cbnz	r4, 800b562 <_malloc_r+0x82>
 800b514:	4629      	mov	r1, r5
 800b516:	4638      	mov	r0, r7
 800b518:	f7ff ffc2 	bl	800b4a0 <sbrk_aligned>
 800b51c:	1c43      	adds	r3, r0, #1
 800b51e:	4604      	mov	r4, r0
 800b520:	d14d      	bne.n	800b5be <_malloc_r+0xde>
 800b522:	6834      	ldr	r4, [r6, #0]
 800b524:	4626      	mov	r6, r4
 800b526:	2e00      	cmp	r6, #0
 800b528:	d140      	bne.n	800b5ac <_malloc_r+0xcc>
 800b52a:	6823      	ldr	r3, [r4, #0]
 800b52c:	4631      	mov	r1, r6
 800b52e:	4638      	mov	r0, r7
 800b530:	eb04 0803 	add.w	r8, r4, r3
 800b534:	f000 fb02 	bl	800bb3c <_sbrk_r>
 800b538:	4580      	cmp	r8, r0
 800b53a:	d13a      	bne.n	800b5b2 <_malloc_r+0xd2>
 800b53c:	6821      	ldr	r1, [r4, #0]
 800b53e:	3503      	adds	r5, #3
 800b540:	1a6d      	subs	r5, r5, r1
 800b542:	f025 0503 	bic.w	r5, r5, #3
 800b546:	3508      	adds	r5, #8
 800b548:	2d0c      	cmp	r5, #12
 800b54a:	bf38      	it	cc
 800b54c:	250c      	movcc	r5, #12
 800b54e:	4638      	mov	r0, r7
 800b550:	4629      	mov	r1, r5
 800b552:	f7ff ffa5 	bl	800b4a0 <sbrk_aligned>
 800b556:	3001      	adds	r0, #1
 800b558:	d02b      	beq.n	800b5b2 <_malloc_r+0xd2>
 800b55a:	6823      	ldr	r3, [r4, #0]
 800b55c:	442b      	add	r3, r5
 800b55e:	6023      	str	r3, [r4, #0]
 800b560:	e00e      	b.n	800b580 <_malloc_r+0xa0>
 800b562:	6822      	ldr	r2, [r4, #0]
 800b564:	1b52      	subs	r2, r2, r5
 800b566:	d41e      	bmi.n	800b5a6 <_malloc_r+0xc6>
 800b568:	2a0b      	cmp	r2, #11
 800b56a:	d916      	bls.n	800b59a <_malloc_r+0xba>
 800b56c:	1961      	adds	r1, r4, r5
 800b56e:	42a3      	cmp	r3, r4
 800b570:	6025      	str	r5, [r4, #0]
 800b572:	bf18      	it	ne
 800b574:	6059      	strne	r1, [r3, #4]
 800b576:	6863      	ldr	r3, [r4, #4]
 800b578:	bf08      	it	eq
 800b57a:	6031      	streq	r1, [r6, #0]
 800b57c:	5162      	str	r2, [r4, r5]
 800b57e:	604b      	str	r3, [r1, #4]
 800b580:	4638      	mov	r0, r7
 800b582:	f104 060b 	add.w	r6, r4, #11
 800b586:	f000 fbf3 	bl	800bd70 <__malloc_unlock>
 800b58a:	f026 0607 	bic.w	r6, r6, #7
 800b58e:	1d23      	adds	r3, r4, #4
 800b590:	1af2      	subs	r2, r6, r3
 800b592:	d0b6      	beq.n	800b502 <_malloc_r+0x22>
 800b594:	1b9b      	subs	r3, r3, r6
 800b596:	50a3      	str	r3, [r4, r2]
 800b598:	e7b3      	b.n	800b502 <_malloc_r+0x22>
 800b59a:	6862      	ldr	r2, [r4, #4]
 800b59c:	42a3      	cmp	r3, r4
 800b59e:	bf0c      	ite	eq
 800b5a0:	6032      	streq	r2, [r6, #0]
 800b5a2:	605a      	strne	r2, [r3, #4]
 800b5a4:	e7ec      	b.n	800b580 <_malloc_r+0xa0>
 800b5a6:	4623      	mov	r3, r4
 800b5a8:	6864      	ldr	r4, [r4, #4]
 800b5aa:	e7b2      	b.n	800b512 <_malloc_r+0x32>
 800b5ac:	4634      	mov	r4, r6
 800b5ae:	6876      	ldr	r6, [r6, #4]
 800b5b0:	e7b9      	b.n	800b526 <_malloc_r+0x46>
 800b5b2:	230c      	movs	r3, #12
 800b5b4:	4638      	mov	r0, r7
 800b5b6:	603b      	str	r3, [r7, #0]
 800b5b8:	f000 fbda 	bl	800bd70 <__malloc_unlock>
 800b5bc:	e7a1      	b.n	800b502 <_malloc_r+0x22>
 800b5be:	6025      	str	r5, [r4, #0]
 800b5c0:	e7de      	b.n	800b580 <_malloc_r+0xa0>
 800b5c2:	bf00      	nop
 800b5c4:	20000bf0 	.word	0x20000bf0

0800b5c8 <__ssputs_r>:
 800b5c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5cc:	688e      	ldr	r6, [r1, #8]
 800b5ce:	4682      	mov	sl, r0
 800b5d0:	429e      	cmp	r6, r3
 800b5d2:	460c      	mov	r4, r1
 800b5d4:	4690      	mov	r8, r2
 800b5d6:	461f      	mov	r7, r3
 800b5d8:	d838      	bhi.n	800b64c <__ssputs_r+0x84>
 800b5da:	898a      	ldrh	r2, [r1, #12]
 800b5dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b5e0:	d032      	beq.n	800b648 <__ssputs_r+0x80>
 800b5e2:	6825      	ldr	r5, [r4, #0]
 800b5e4:	6909      	ldr	r1, [r1, #16]
 800b5e6:	3301      	adds	r3, #1
 800b5e8:	eba5 0901 	sub.w	r9, r5, r1
 800b5ec:	6965      	ldr	r5, [r4, #20]
 800b5ee:	444b      	add	r3, r9
 800b5f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b5f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b5f8:	106d      	asrs	r5, r5, #1
 800b5fa:	429d      	cmp	r5, r3
 800b5fc:	bf38      	it	cc
 800b5fe:	461d      	movcc	r5, r3
 800b600:	0553      	lsls	r3, r2, #21
 800b602:	d531      	bpl.n	800b668 <__ssputs_r+0xa0>
 800b604:	4629      	mov	r1, r5
 800b606:	f7ff ff6b 	bl	800b4e0 <_malloc_r>
 800b60a:	4606      	mov	r6, r0
 800b60c:	b950      	cbnz	r0, 800b624 <__ssputs_r+0x5c>
 800b60e:	230c      	movs	r3, #12
 800b610:	f04f 30ff 	mov.w	r0, #4294967295
 800b614:	f8ca 3000 	str.w	r3, [sl]
 800b618:	89a3      	ldrh	r3, [r4, #12]
 800b61a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b61e:	81a3      	strh	r3, [r4, #12]
 800b620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b624:	464a      	mov	r2, r9
 800b626:	6921      	ldr	r1, [r4, #16]
 800b628:	f7fb ff6e 	bl	8007508 <memcpy>
 800b62c:	89a3      	ldrh	r3, [r4, #12]
 800b62e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b632:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b636:	81a3      	strh	r3, [r4, #12]
 800b638:	6126      	str	r6, [r4, #16]
 800b63a:	444e      	add	r6, r9
 800b63c:	6026      	str	r6, [r4, #0]
 800b63e:	463e      	mov	r6, r7
 800b640:	6165      	str	r5, [r4, #20]
 800b642:	eba5 0509 	sub.w	r5, r5, r9
 800b646:	60a5      	str	r5, [r4, #8]
 800b648:	42be      	cmp	r6, r7
 800b64a:	d900      	bls.n	800b64e <__ssputs_r+0x86>
 800b64c:	463e      	mov	r6, r7
 800b64e:	4632      	mov	r2, r6
 800b650:	4641      	mov	r1, r8
 800b652:	6820      	ldr	r0, [r4, #0]
 800b654:	f000 fb6c 	bl	800bd30 <memmove>
 800b658:	68a3      	ldr	r3, [r4, #8]
 800b65a:	2000      	movs	r0, #0
 800b65c:	1b9b      	subs	r3, r3, r6
 800b65e:	60a3      	str	r3, [r4, #8]
 800b660:	6823      	ldr	r3, [r4, #0]
 800b662:	4433      	add	r3, r6
 800b664:	6023      	str	r3, [r4, #0]
 800b666:	e7db      	b.n	800b620 <__ssputs_r+0x58>
 800b668:	462a      	mov	r2, r5
 800b66a:	f000 fb87 	bl	800bd7c <_realloc_r>
 800b66e:	4606      	mov	r6, r0
 800b670:	2800      	cmp	r0, #0
 800b672:	d1e1      	bne.n	800b638 <__ssputs_r+0x70>
 800b674:	4650      	mov	r0, sl
 800b676:	6921      	ldr	r1, [r4, #16]
 800b678:	f7ff feca 	bl	800b410 <_free_r>
 800b67c:	e7c7      	b.n	800b60e <__ssputs_r+0x46>
	...

0800b680 <_svfiprintf_r>:
 800b680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b684:	4698      	mov	r8, r3
 800b686:	898b      	ldrh	r3, [r1, #12]
 800b688:	4607      	mov	r7, r0
 800b68a:	061b      	lsls	r3, r3, #24
 800b68c:	460d      	mov	r5, r1
 800b68e:	4614      	mov	r4, r2
 800b690:	b09d      	sub	sp, #116	; 0x74
 800b692:	d50e      	bpl.n	800b6b2 <_svfiprintf_r+0x32>
 800b694:	690b      	ldr	r3, [r1, #16]
 800b696:	b963      	cbnz	r3, 800b6b2 <_svfiprintf_r+0x32>
 800b698:	2140      	movs	r1, #64	; 0x40
 800b69a:	f7ff ff21 	bl	800b4e0 <_malloc_r>
 800b69e:	6028      	str	r0, [r5, #0]
 800b6a0:	6128      	str	r0, [r5, #16]
 800b6a2:	b920      	cbnz	r0, 800b6ae <_svfiprintf_r+0x2e>
 800b6a4:	230c      	movs	r3, #12
 800b6a6:	603b      	str	r3, [r7, #0]
 800b6a8:	f04f 30ff 	mov.w	r0, #4294967295
 800b6ac:	e0d1      	b.n	800b852 <_svfiprintf_r+0x1d2>
 800b6ae:	2340      	movs	r3, #64	; 0x40
 800b6b0:	616b      	str	r3, [r5, #20]
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	9309      	str	r3, [sp, #36]	; 0x24
 800b6b6:	2320      	movs	r3, #32
 800b6b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b6bc:	2330      	movs	r3, #48	; 0x30
 800b6be:	f04f 0901 	mov.w	r9, #1
 800b6c2:	f8cd 800c 	str.w	r8, [sp, #12]
 800b6c6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b86c <_svfiprintf_r+0x1ec>
 800b6ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b6ce:	4623      	mov	r3, r4
 800b6d0:	469a      	mov	sl, r3
 800b6d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b6d6:	b10a      	cbz	r2, 800b6dc <_svfiprintf_r+0x5c>
 800b6d8:	2a25      	cmp	r2, #37	; 0x25
 800b6da:	d1f9      	bne.n	800b6d0 <_svfiprintf_r+0x50>
 800b6dc:	ebba 0b04 	subs.w	fp, sl, r4
 800b6e0:	d00b      	beq.n	800b6fa <_svfiprintf_r+0x7a>
 800b6e2:	465b      	mov	r3, fp
 800b6e4:	4622      	mov	r2, r4
 800b6e6:	4629      	mov	r1, r5
 800b6e8:	4638      	mov	r0, r7
 800b6ea:	f7ff ff6d 	bl	800b5c8 <__ssputs_r>
 800b6ee:	3001      	adds	r0, #1
 800b6f0:	f000 80aa 	beq.w	800b848 <_svfiprintf_r+0x1c8>
 800b6f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b6f6:	445a      	add	r2, fp
 800b6f8:	9209      	str	r2, [sp, #36]	; 0x24
 800b6fa:	f89a 3000 	ldrb.w	r3, [sl]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	f000 80a2 	beq.w	800b848 <_svfiprintf_r+0x1c8>
 800b704:	2300      	movs	r3, #0
 800b706:	f04f 32ff 	mov.w	r2, #4294967295
 800b70a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b70e:	f10a 0a01 	add.w	sl, sl, #1
 800b712:	9304      	str	r3, [sp, #16]
 800b714:	9307      	str	r3, [sp, #28]
 800b716:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b71a:	931a      	str	r3, [sp, #104]	; 0x68
 800b71c:	4654      	mov	r4, sl
 800b71e:	2205      	movs	r2, #5
 800b720:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b724:	4851      	ldr	r0, [pc, #324]	; (800b86c <_svfiprintf_r+0x1ec>)
 800b726:	f7ff f999 	bl	800aa5c <memchr>
 800b72a:	9a04      	ldr	r2, [sp, #16]
 800b72c:	b9d8      	cbnz	r0, 800b766 <_svfiprintf_r+0xe6>
 800b72e:	06d0      	lsls	r0, r2, #27
 800b730:	bf44      	itt	mi
 800b732:	2320      	movmi	r3, #32
 800b734:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b738:	0711      	lsls	r1, r2, #28
 800b73a:	bf44      	itt	mi
 800b73c:	232b      	movmi	r3, #43	; 0x2b
 800b73e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b742:	f89a 3000 	ldrb.w	r3, [sl]
 800b746:	2b2a      	cmp	r3, #42	; 0x2a
 800b748:	d015      	beq.n	800b776 <_svfiprintf_r+0xf6>
 800b74a:	4654      	mov	r4, sl
 800b74c:	2000      	movs	r0, #0
 800b74e:	f04f 0c0a 	mov.w	ip, #10
 800b752:	9a07      	ldr	r2, [sp, #28]
 800b754:	4621      	mov	r1, r4
 800b756:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b75a:	3b30      	subs	r3, #48	; 0x30
 800b75c:	2b09      	cmp	r3, #9
 800b75e:	d94e      	bls.n	800b7fe <_svfiprintf_r+0x17e>
 800b760:	b1b0      	cbz	r0, 800b790 <_svfiprintf_r+0x110>
 800b762:	9207      	str	r2, [sp, #28]
 800b764:	e014      	b.n	800b790 <_svfiprintf_r+0x110>
 800b766:	eba0 0308 	sub.w	r3, r0, r8
 800b76a:	fa09 f303 	lsl.w	r3, r9, r3
 800b76e:	4313      	orrs	r3, r2
 800b770:	46a2      	mov	sl, r4
 800b772:	9304      	str	r3, [sp, #16]
 800b774:	e7d2      	b.n	800b71c <_svfiprintf_r+0x9c>
 800b776:	9b03      	ldr	r3, [sp, #12]
 800b778:	1d19      	adds	r1, r3, #4
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	9103      	str	r1, [sp, #12]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	bfbb      	ittet	lt
 800b782:	425b      	neglt	r3, r3
 800b784:	f042 0202 	orrlt.w	r2, r2, #2
 800b788:	9307      	strge	r3, [sp, #28]
 800b78a:	9307      	strlt	r3, [sp, #28]
 800b78c:	bfb8      	it	lt
 800b78e:	9204      	strlt	r2, [sp, #16]
 800b790:	7823      	ldrb	r3, [r4, #0]
 800b792:	2b2e      	cmp	r3, #46	; 0x2e
 800b794:	d10c      	bne.n	800b7b0 <_svfiprintf_r+0x130>
 800b796:	7863      	ldrb	r3, [r4, #1]
 800b798:	2b2a      	cmp	r3, #42	; 0x2a
 800b79a:	d135      	bne.n	800b808 <_svfiprintf_r+0x188>
 800b79c:	9b03      	ldr	r3, [sp, #12]
 800b79e:	3402      	adds	r4, #2
 800b7a0:	1d1a      	adds	r2, r3, #4
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	9203      	str	r2, [sp, #12]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	bfb8      	it	lt
 800b7aa:	f04f 33ff 	movlt.w	r3, #4294967295
 800b7ae:	9305      	str	r3, [sp, #20]
 800b7b0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800b870 <_svfiprintf_r+0x1f0>
 800b7b4:	2203      	movs	r2, #3
 800b7b6:	4650      	mov	r0, sl
 800b7b8:	7821      	ldrb	r1, [r4, #0]
 800b7ba:	f7ff f94f 	bl	800aa5c <memchr>
 800b7be:	b140      	cbz	r0, 800b7d2 <_svfiprintf_r+0x152>
 800b7c0:	2340      	movs	r3, #64	; 0x40
 800b7c2:	eba0 000a 	sub.w	r0, r0, sl
 800b7c6:	fa03 f000 	lsl.w	r0, r3, r0
 800b7ca:	9b04      	ldr	r3, [sp, #16]
 800b7cc:	3401      	adds	r4, #1
 800b7ce:	4303      	orrs	r3, r0
 800b7d0:	9304      	str	r3, [sp, #16]
 800b7d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7d6:	2206      	movs	r2, #6
 800b7d8:	4826      	ldr	r0, [pc, #152]	; (800b874 <_svfiprintf_r+0x1f4>)
 800b7da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b7de:	f7ff f93d 	bl	800aa5c <memchr>
 800b7e2:	2800      	cmp	r0, #0
 800b7e4:	d038      	beq.n	800b858 <_svfiprintf_r+0x1d8>
 800b7e6:	4b24      	ldr	r3, [pc, #144]	; (800b878 <_svfiprintf_r+0x1f8>)
 800b7e8:	bb1b      	cbnz	r3, 800b832 <_svfiprintf_r+0x1b2>
 800b7ea:	9b03      	ldr	r3, [sp, #12]
 800b7ec:	3307      	adds	r3, #7
 800b7ee:	f023 0307 	bic.w	r3, r3, #7
 800b7f2:	3308      	adds	r3, #8
 800b7f4:	9303      	str	r3, [sp, #12]
 800b7f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7f8:	4433      	add	r3, r6
 800b7fa:	9309      	str	r3, [sp, #36]	; 0x24
 800b7fc:	e767      	b.n	800b6ce <_svfiprintf_r+0x4e>
 800b7fe:	460c      	mov	r4, r1
 800b800:	2001      	movs	r0, #1
 800b802:	fb0c 3202 	mla	r2, ip, r2, r3
 800b806:	e7a5      	b.n	800b754 <_svfiprintf_r+0xd4>
 800b808:	2300      	movs	r3, #0
 800b80a:	f04f 0c0a 	mov.w	ip, #10
 800b80e:	4619      	mov	r1, r3
 800b810:	3401      	adds	r4, #1
 800b812:	9305      	str	r3, [sp, #20]
 800b814:	4620      	mov	r0, r4
 800b816:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b81a:	3a30      	subs	r2, #48	; 0x30
 800b81c:	2a09      	cmp	r2, #9
 800b81e:	d903      	bls.n	800b828 <_svfiprintf_r+0x1a8>
 800b820:	2b00      	cmp	r3, #0
 800b822:	d0c5      	beq.n	800b7b0 <_svfiprintf_r+0x130>
 800b824:	9105      	str	r1, [sp, #20]
 800b826:	e7c3      	b.n	800b7b0 <_svfiprintf_r+0x130>
 800b828:	4604      	mov	r4, r0
 800b82a:	2301      	movs	r3, #1
 800b82c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b830:	e7f0      	b.n	800b814 <_svfiprintf_r+0x194>
 800b832:	ab03      	add	r3, sp, #12
 800b834:	9300      	str	r3, [sp, #0]
 800b836:	462a      	mov	r2, r5
 800b838:	4638      	mov	r0, r7
 800b83a:	4b10      	ldr	r3, [pc, #64]	; (800b87c <_svfiprintf_r+0x1fc>)
 800b83c:	a904      	add	r1, sp, #16
 800b83e:	f7fb ff17 	bl	8007670 <_printf_float>
 800b842:	1c42      	adds	r2, r0, #1
 800b844:	4606      	mov	r6, r0
 800b846:	d1d6      	bne.n	800b7f6 <_svfiprintf_r+0x176>
 800b848:	89ab      	ldrh	r3, [r5, #12]
 800b84a:	065b      	lsls	r3, r3, #25
 800b84c:	f53f af2c 	bmi.w	800b6a8 <_svfiprintf_r+0x28>
 800b850:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b852:	b01d      	add	sp, #116	; 0x74
 800b854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b858:	ab03      	add	r3, sp, #12
 800b85a:	9300      	str	r3, [sp, #0]
 800b85c:	462a      	mov	r2, r5
 800b85e:	4638      	mov	r0, r7
 800b860:	4b06      	ldr	r3, [pc, #24]	; (800b87c <_svfiprintf_r+0x1fc>)
 800b862:	a904      	add	r1, sp, #16
 800b864:	f7fc f9a0 	bl	8007ba8 <_printf_i>
 800b868:	e7eb      	b.n	800b842 <_svfiprintf_r+0x1c2>
 800b86a:	bf00      	nop
 800b86c:	0800e28c 	.word	0x0800e28c
 800b870:	0800e292 	.word	0x0800e292
 800b874:	0800e296 	.word	0x0800e296
 800b878:	08007671 	.word	0x08007671
 800b87c:	0800b5c9 	.word	0x0800b5c9

0800b880 <__sfputc_r>:
 800b880:	6893      	ldr	r3, [r2, #8]
 800b882:	b410      	push	{r4}
 800b884:	3b01      	subs	r3, #1
 800b886:	2b00      	cmp	r3, #0
 800b888:	6093      	str	r3, [r2, #8]
 800b88a:	da07      	bge.n	800b89c <__sfputc_r+0x1c>
 800b88c:	6994      	ldr	r4, [r2, #24]
 800b88e:	42a3      	cmp	r3, r4
 800b890:	db01      	blt.n	800b896 <__sfputc_r+0x16>
 800b892:	290a      	cmp	r1, #10
 800b894:	d102      	bne.n	800b89c <__sfputc_r+0x1c>
 800b896:	bc10      	pop	{r4}
 800b898:	f7fd bc06 	b.w	80090a8 <__swbuf_r>
 800b89c:	6813      	ldr	r3, [r2, #0]
 800b89e:	1c58      	adds	r0, r3, #1
 800b8a0:	6010      	str	r0, [r2, #0]
 800b8a2:	7019      	strb	r1, [r3, #0]
 800b8a4:	4608      	mov	r0, r1
 800b8a6:	bc10      	pop	{r4}
 800b8a8:	4770      	bx	lr

0800b8aa <__sfputs_r>:
 800b8aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8ac:	4606      	mov	r6, r0
 800b8ae:	460f      	mov	r7, r1
 800b8b0:	4614      	mov	r4, r2
 800b8b2:	18d5      	adds	r5, r2, r3
 800b8b4:	42ac      	cmp	r4, r5
 800b8b6:	d101      	bne.n	800b8bc <__sfputs_r+0x12>
 800b8b8:	2000      	movs	r0, #0
 800b8ba:	e007      	b.n	800b8cc <__sfputs_r+0x22>
 800b8bc:	463a      	mov	r2, r7
 800b8be:	4630      	mov	r0, r6
 800b8c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8c4:	f7ff ffdc 	bl	800b880 <__sfputc_r>
 800b8c8:	1c43      	adds	r3, r0, #1
 800b8ca:	d1f3      	bne.n	800b8b4 <__sfputs_r+0xa>
 800b8cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b8d0 <_vfiprintf_r>:
 800b8d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8d4:	460d      	mov	r5, r1
 800b8d6:	4614      	mov	r4, r2
 800b8d8:	4698      	mov	r8, r3
 800b8da:	4606      	mov	r6, r0
 800b8dc:	b09d      	sub	sp, #116	; 0x74
 800b8de:	b118      	cbz	r0, 800b8e8 <_vfiprintf_r+0x18>
 800b8e0:	6983      	ldr	r3, [r0, #24]
 800b8e2:	b90b      	cbnz	r3, 800b8e8 <_vfiprintf_r+0x18>
 800b8e4:	f7fe fc30 	bl	800a148 <__sinit>
 800b8e8:	4b89      	ldr	r3, [pc, #548]	; (800bb10 <_vfiprintf_r+0x240>)
 800b8ea:	429d      	cmp	r5, r3
 800b8ec:	d11b      	bne.n	800b926 <_vfiprintf_r+0x56>
 800b8ee:	6875      	ldr	r5, [r6, #4]
 800b8f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b8f2:	07d9      	lsls	r1, r3, #31
 800b8f4:	d405      	bmi.n	800b902 <_vfiprintf_r+0x32>
 800b8f6:	89ab      	ldrh	r3, [r5, #12]
 800b8f8:	059a      	lsls	r2, r3, #22
 800b8fa:	d402      	bmi.n	800b902 <_vfiprintf_r+0x32>
 800b8fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b8fe:	f7ff f82c 	bl	800a95a <__retarget_lock_acquire_recursive>
 800b902:	89ab      	ldrh	r3, [r5, #12]
 800b904:	071b      	lsls	r3, r3, #28
 800b906:	d501      	bpl.n	800b90c <_vfiprintf_r+0x3c>
 800b908:	692b      	ldr	r3, [r5, #16]
 800b90a:	b9eb      	cbnz	r3, 800b948 <_vfiprintf_r+0x78>
 800b90c:	4629      	mov	r1, r5
 800b90e:	4630      	mov	r0, r6
 800b910:	f7fd fc1c 	bl	800914c <__swsetup_r>
 800b914:	b1c0      	cbz	r0, 800b948 <_vfiprintf_r+0x78>
 800b916:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b918:	07dc      	lsls	r4, r3, #31
 800b91a:	d50e      	bpl.n	800b93a <_vfiprintf_r+0x6a>
 800b91c:	f04f 30ff 	mov.w	r0, #4294967295
 800b920:	b01d      	add	sp, #116	; 0x74
 800b922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b926:	4b7b      	ldr	r3, [pc, #492]	; (800bb14 <_vfiprintf_r+0x244>)
 800b928:	429d      	cmp	r5, r3
 800b92a:	d101      	bne.n	800b930 <_vfiprintf_r+0x60>
 800b92c:	68b5      	ldr	r5, [r6, #8]
 800b92e:	e7df      	b.n	800b8f0 <_vfiprintf_r+0x20>
 800b930:	4b79      	ldr	r3, [pc, #484]	; (800bb18 <_vfiprintf_r+0x248>)
 800b932:	429d      	cmp	r5, r3
 800b934:	bf08      	it	eq
 800b936:	68f5      	ldreq	r5, [r6, #12]
 800b938:	e7da      	b.n	800b8f0 <_vfiprintf_r+0x20>
 800b93a:	89ab      	ldrh	r3, [r5, #12]
 800b93c:	0598      	lsls	r0, r3, #22
 800b93e:	d4ed      	bmi.n	800b91c <_vfiprintf_r+0x4c>
 800b940:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b942:	f7ff f80b 	bl	800a95c <__retarget_lock_release_recursive>
 800b946:	e7e9      	b.n	800b91c <_vfiprintf_r+0x4c>
 800b948:	2300      	movs	r3, #0
 800b94a:	9309      	str	r3, [sp, #36]	; 0x24
 800b94c:	2320      	movs	r3, #32
 800b94e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b952:	2330      	movs	r3, #48	; 0x30
 800b954:	f04f 0901 	mov.w	r9, #1
 800b958:	f8cd 800c 	str.w	r8, [sp, #12]
 800b95c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800bb1c <_vfiprintf_r+0x24c>
 800b960:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b964:	4623      	mov	r3, r4
 800b966:	469a      	mov	sl, r3
 800b968:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b96c:	b10a      	cbz	r2, 800b972 <_vfiprintf_r+0xa2>
 800b96e:	2a25      	cmp	r2, #37	; 0x25
 800b970:	d1f9      	bne.n	800b966 <_vfiprintf_r+0x96>
 800b972:	ebba 0b04 	subs.w	fp, sl, r4
 800b976:	d00b      	beq.n	800b990 <_vfiprintf_r+0xc0>
 800b978:	465b      	mov	r3, fp
 800b97a:	4622      	mov	r2, r4
 800b97c:	4629      	mov	r1, r5
 800b97e:	4630      	mov	r0, r6
 800b980:	f7ff ff93 	bl	800b8aa <__sfputs_r>
 800b984:	3001      	adds	r0, #1
 800b986:	f000 80aa 	beq.w	800bade <_vfiprintf_r+0x20e>
 800b98a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b98c:	445a      	add	r2, fp
 800b98e:	9209      	str	r2, [sp, #36]	; 0x24
 800b990:	f89a 3000 	ldrb.w	r3, [sl]
 800b994:	2b00      	cmp	r3, #0
 800b996:	f000 80a2 	beq.w	800bade <_vfiprintf_r+0x20e>
 800b99a:	2300      	movs	r3, #0
 800b99c:	f04f 32ff 	mov.w	r2, #4294967295
 800b9a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b9a4:	f10a 0a01 	add.w	sl, sl, #1
 800b9a8:	9304      	str	r3, [sp, #16]
 800b9aa:	9307      	str	r3, [sp, #28]
 800b9ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b9b0:	931a      	str	r3, [sp, #104]	; 0x68
 800b9b2:	4654      	mov	r4, sl
 800b9b4:	2205      	movs	r2, #5
 800b9b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9ba:	4858      	ldr	r0, [pc, #352]	; (800bb1c <_vfiprintf_r+0x24c>)
 800b9bc:	f7ff f84e 	bl	800aa5c <memchr>
 800b9c0:	9a04      	ldr	r2, [sp, #16]
 800b9c2:	b9d8      	cbnz	r0, 800b9fc <_vfiprintf_r+0x12c>
 800b9c4:	06d1      	lsls	r1, r2, #27
 800b9c6:	bf44      	itt	mi
 800b9c8:	2320      	movmi	r3, #32
 800b9ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b9ce:	0713      	lsls	r3, r2, #28
 800b9d0:	bf44      	itt	mi
 800b9d2:	232b      	movmi	r3, #43	; 0x2b
 800b9d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b9d8:	f89a 3000 	ldrb.w	r3, [sl]
 800b9dc:	2b2a      	cmp	r3, #42	; 0x2a
 800b9de:	d015      	beq.n	800ba0c <_vfiprintf_r+0x13c>
 800b9e0:	4654      	mov	r4, sl
 800b9e2:	2000      	movs	r0, #0
 800b9e4:	f04f 0c0a 	mov.w	ip, #10
 800b9e8:	9a07      	ldr	r2, [sp, #28]
 800b9ea:	4621      	mov	r1, r4
 800b9ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b9f0:	3b30      	subs	r3, #48	; 0x30
 800b9f2:	2b09      	cmp	r3, #9
 800b9f4:	d94e      	bls.n	800ba94 <_vfiprintf_r+0x1c4>
 800b9f6:	b1b0      	cbz	r0, 800ba26 <_vfiprintf_r+0x156>
 800b9f8:	9207      	str	r2, [sp, #28]
 800b9fa:	e014      	b.n	800ba26 <_vfiprintf_r+0x156>
 800b9fc:	eba0 0308 	sub.w	r3, r0, r8
 800ba00:	fa09 f303 	lsl.w	r3, r9, r3
 800ba04:	4313      	orrs	r3, r2
 800ba06:	46a2      	mov	sl, r4
 800ba08:	9304      	str	r3, [sp, #16]
 800ba0a:	e7d2      	b.n	800b9b2 <_vfiprintf_r+0xe2>
 800ba0c:	9b03      	ldr	r3, [sp, #12]
 800ba0e:	1d19      	adds	r1, r3, #4
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	9103      	str	r1, [sp, #12]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	bfbb      	ittet	lt
 800ba18:	425b      	neglt	r3, r3
 800ba1a:	f042 0202 	orrlt.w	r2, r2, #2
 800ba1e:	9307      	strge	r3, [sp, #28]
 800ba20:	9307      	strlt	r3, [sp, #28]
 800ba22:	bfb8      	it	lt
 800ba24:	9204      	strlt	r2, [sp, #16]
 800ba26:	7823      	ldrb	r3, [r4, #0]
 800ba28:	2b2e      	cmp	r3, #46	; 0x2e
 800ba2a:	d10c      	bne.n	800ba46 <_vfiprintf_r+0x176>
 800ba2c:	7863      	ldrb	r3, [r4, #1]
 800ba2e:	2b2a      	cmp	r3, #42	; 0x2a
 800ba30:	d135      	bne.n	800ba9e <_vfiprintf_r+0x1ce>
 800ba32:	9b03      	ldr	r3, [sp, #12]
 800ba34:	3402      	adds	r4, #2
 800ba36:	1d1a      	adds	r2, r3, #4
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	9203      	str	r2, [sp, #12]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	bfb8      	it	lt
 800ba40:	f04f 33ff 	movlt.w	r3, #4294967295
 800ba44:	9305      	str	r3, [sp, #20]
 800ba46:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800bb20 <_vfiprintf_r+0x250>
 800ba4a:	2203      	movs	r2, #3
 800ba4c:	4650      	mov	r0, sl
 800ba4e:	7821      	ldrb	r1, [r4, #0]
 800ba50:	f7ff f804 	bl	800aa5c <memchr>
 800ba54:	b140      	cbz	r0, 800ba68 <_vfiprintf_r+0x198>
 800ba56:	2340      	movs	r3, #64	; 0x40
 800ba58:	eba0 000a 	sub.w	r0, r0, sl
 800ba5c:	fa03 f000 	lsl.w	r0, r3, r0
 800ba60:	9b04      	ldr	r3, [sp, #16]
 800ba62:	3401      	adds	r4, #1
 800ba64:	4303      	orrs	r3, r0
 800ba66:	9304      	str	r3, [sp, #16]
 800ba68:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba6c:	2206      	movs	r2, #6
 800ba6e:	482d      	ldr	r0, [pc, #180]	; (800bb24 <_vfiprintf_r+0x254>)
 800ba70:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ba74:	f7fe fff2 	bl	800aa5c <memchr>
 800ba78:	2800      	cmp	r0, #0
 800ba7a:	d03f      	beq.n	800bafc <_vfiprintf_r+0x22c>
 800ba7c:	4b2a      	ldr	r3, [pc, #168]	; (800bb28 <_vfiprintf_r+0x258>)
 800ba7e:	bb1b      	cbnz	r3, 800bac8 <_vfiprintf_r+0x1f8>
 800ba80:	9b03      	ldr	r3, [sp, #12]
 800ba82:	3307      	adds	r3, #7
 800ba84:	f023 0307 	bic.w	r3, r3, #7
 800ba88:	3308      	adds	r3, #8
 800ba8a:	9303      	str	r3, [sp, #12]
 800ba8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba8e:	443b      	add	r3, r7
 800ba90:	9309      	str	r3, [sp, #36]	; 0x24
 800ba92:	e767      	b.n	800b964 <_vfiprintf_r+0x94>
 800ba94:	460c      	mov	r4, r1
 800ba96:	2001      	movs	r0, #1
 800ba98:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba9c:	e7a5      	b.n	800b9ea <_vfiprintf_r+0x11a>
 800ba9e:	2300      	movs	r3, #0
 800baa0:	f04f 0c0a 	mov.w	ip, #10
 800baa4:	4619      	mov	r1, r3
 800baa6:	3401      	adds	r4, #1
 800baa8:	9305      	str	r3, [sp, #20]
 800baaa:	4620      	mov	r0, r4
 800baac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bab0:	3a30      	subs	r2, #48	; 0x30
 800bab2:	2a09      	cmp	r2, #9
 800bab4:	d903      	bls.n	800babe <_vfiprintf_r+0x1ee>
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d0c5      	beq.n	800ba46 <_vfiprintf_r+0x176>
 800baba:	9105      	str	r1, [sp, #20]
 800babc:	e7c3      	b.n	800ba46 <_vfiprintf_r+0x176>
 800babe:	4604      	mov	r4, r0
 800bac0:	2301      	movs	r3, #1
 800bac2:	fb0c 2101 	mla	r1, ip, r1, r2
 800bac6:	e7f0      	b.n	800baaa <_vfiprintf_r+0x1da>
 800bac8:	ab03      	add	r3, sp, #12
 800baca:	9300      	str	r3, [sp, #0]
 800bacc:	462a      	mov	r2, r5
 800bace:	4630      	mov	r0, r6
 800bad0:	4b16      	ldr	r3, [pc, #88]	; (800bb2c <_vfiprintf_r+0x25c>)
 800bad2:	a904      	add	r1, sp, #16
 800bad4:	f7fb fdcc 	bl	8007670 <_printf_float>
 800bad8:	4607      	mov	r7, r0
 800bada:	1c78      	adds	r0, r7, #1
 800badc:	d1d6      	bne.n	800ba8c <_vfiprintf_r+0x1bc>
 800bade:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bae0:	07d9      	lsls	r1, r3, #31
 800bae2:	d405      	bmi.n	800baf0 <_vfiprintf_r+0x220>
 800bae4:	89ab      	ldrh	r3, [r5, #12]
 800bae6:	059a      	lsls	r2, r3, #22
 800bae8:	d402      	bmi.n	800baf0 <_vfiprintf_r+0x220>
 800baea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800baec:	f7fe ff36 	bl	800a95c <__retarget_lock_release_recursive>
 800baf0:	89ab      	ldrh	r3, [r5, #12]
 800baf2:	065b      	lsls	r3, r3, #25
 800baf4:	f53f af12 	bmi.w	800b91c <_vfiprintf_r+0x4c>
 800baf8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bafa:	e711      	b.n	800b920 <_vfiprintf_r+0x50>
 800bafc:	ab03      	add	r3, sp, #12
 800bafe:	9300      	str	r3, [sp, #0]
 800bb00:	462a      	mov	r2, r5
 800bb02:	4630      	mov	r0, r6
 800bb04:	4b09      	ldr	r3, [pc, #36]	; (800bb2c <_vfiprintf_r+0x25c>)
 800bb06:	a904      	add	r1, sp, #16
 800bb08:	f7fc f84e 	bl	8007ba8 <_printf_i>
 800bb0c:	e7e4      	b.n	800bad8 <_vfiprintf_r+0x208>
 800bb0e:	bf00      	nop
 800bb10:	0800e074 	.word	0x0800e074
 800bb14:	0800e094 	.word	0x0800e094
 800bb18:	0800e054 	.word	0x0800e054
 800bb1c:	0800e28c 	.word	0x0800e28c
 800bb20:	0800e292 	.word	0x0800e292
 800bb24:	0800e296 	.word	0x0800e296
 800bb28:	08007671 	.word	0x08007671
 800bb2c:	0800b8ab 	.word	0x0800b8ab

0800bb30 <nan>:
 800bb30:	2000      	movs	r0, #0
 800bb32:	4901      	ldr	r1, [pc, #4]	; (800bb38 <nan+0x8>)
 800bb34:	4770      	bx	lr
 800bb36:	bf00      	nop
 800bb38:	7ff80000 	.word	0x7ff80000

0800bb3c <_sbrk_r>:
 800bb3c:	b538      	push	{r3, r4, r5, lr}
 800bb3e:	2300      	movs	r3, #0
 800bb40:	4d05      	ldr	r5, [pc, #20]	; (800bb58 <_sbrk_r+0x1c>)
 800bb42:	4604      	mov	r4, r0
 800bb44:	4608      	mov	r0, r1
 800bb46:	602b      	str	r3, [r5, #0]
 800bb48:	f7f6 fde8 	bl	800271c <_sbrk>
 800bb4c:	1c43      	adds	r3, r0, #1
 800bb4e:	d102      	bne.n	800bb56 <_sbrk_r+0x1a>
 800bb50:	682b      	ldr	r3, [r5, #0]
 800bb52:	b103      	cbz	r3, 800bb56 <_sbrk_r+0x1a>
 800bb54:	6023      	str	r3, [r4, #0]
 800bb56:	bd38      	pop	{r3, r4, r5, pc}
 800bb58:	20000bf8 	.word	0x20000bf8

0800bb5c <__sread>:
 800bb5c:	b510      	push	{r4, lr}
 800bb5e:	460c      	mov	r4, r1
 800bb60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb64:	f000 f93a 	bl	800bddc <_read_r>
 800bb68:	2800      	cmp	r0, #0
 800bb6a:	bfab      	itete	ge
 800bb6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bb6e:	89a3      	ldrhlt	r3, [r4, #12]
 800bb70:	181b      	addge	r3, r3, r0
 800bb72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bb76:	bfac      	ite	ge
 800bb78:	6563      	strge	r3, [r4, #84]	; 0x54
 800bb7a:	81a3      	strhlt	r3, [r4, #12]
 800bb7c:	bd10      	pop	{r4, pc}

0800bb7e <__swrite>:
 800bb7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb82:	461f      	mov	r7, r3
 800bb84:	898b      	ldrh	r3, [r1, #12]
 800bb86:	4605      	mov	r5, r0
 800bb88:	05db      	lsls	r3, r3, #23
 800bb8a:	460c      	mov	r4, r1
 800bb8c:	4616      	mov	r6, r2
 800bb8e:	d505      	bpl.n	800bb9c <__swrite+0x1e>
 800bb90:	2302      	movs	r3, #2
 800bb92:	2200      	movs	r2, #0
 800bb94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb98:	f000 f8b8 	bl	800bd0c <_lseek_r>
 800bb9c:	89a3      	ldrh	r3, [r4, #12]
 800bb9e:	4632      	mov	r2, r6
 800bba0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bba4:	81a3      	strh	r3, [r4, #12]
 800bba6:	4628      	mov	r0, r5
 800bba8:	463b      	mov	r3, r7
 800bbaa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bbae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bbb2:	f000 b837 	b.w	800bc24 <_write_r>

0800bbb6 <__sseek>:
 800bbb6:	b510      	push	{r4, lr}
 800bbb8:	460c      	mov	r4, r1
 800bbba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbbe:	f000 f8a5 	bl	800bd0c <_lseek_r>
 800bbc2:	1c43      	adds	r3, r0, #1
 800bbc4:	89a3      	ldrh	r3, [r4, #12]
 800bbc6:	bf15      	itete	ne
 800bbc8:	6560      	strne	r0, [r4, #84]	; 0x54
 800bbca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bbce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bbd2:	81a3      	strheq	r3, [r4, #12]
 800bbd4:	bf18      	it	ne
 800bbd6:	81a3      	strhne	r3, [r4, #12]
 800bbd8:	bd10      	pop	{r4, pc}

0800bbda <__sclose>:
 800bbda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbde:	f000 b851 	b.w	800bc84 <_close_r>

0800bbe2 <strncmp>:
 800bbe2:	4603      	mov	r3, r0
 800bbe4:	b510      	push	{r4, lr}
 800bbe6:	b172      	cbz	r2, 800bc06 <strncmp+0x24>
 800bbe8:	3901      	subs	r1, #1
 800bbea:	1884      	adds	r4, r0, r2
 800bbec:	f813 0b01 	ldrb.w	r0, [r3], #1
 800bbf0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800bbf4:	4290      	cmp	r0, r2
 800bbf6:	d101      	bne.n	800bbfc <strncmp+0x1a>
 800bbf8:	42a3      	cmp	r3, r4
 800bbfa:	d101      	bne.n	800bc00 <strncmp+0x1e>
 800bbfc:	1a80      	subs	r0, r0, r2
 800bbfe:	bd10      	pop	{r4, pc}
 800bc00:	2800      	cmp	r0, #0
 800bc02:	d1f3      	bne.n	800bbec <strncmp+0xa>
 800bc04:	e7fa      	b.n	800bbfc <strncmp+0x1a>
 800bc06:	4610      	mov	r0, r2
 800bc08:	e7f9      	b.n	800bbfe <strncmp+0x1c>

0800bc0a <__ascii_wctomb>:
 800bc0a:	4603      	mov	r3, r0
 800bc0c:	4608      	mov	r0, r1
 800bc0e:	b141      	cbz	r1, 800bc22 <__ascii_wctomb+0x18>
 800bc10:	2aff      	cmp	r2, #255	; 0xff
 800bc12:	d904      	bls.n	800bc1e <__ascii_wctomb+0x14>
 800bc14:	228a      	movs	r2, #138	; 0x8a
 800bc16:	f04f 30ff 	mov.w	r0, #4294967295
 800bc1a:	601a      	str	r2, [r3, #0]
 800bc1c:	4770      	bx	lr
 800bc1e:	2001      	movs	r0, #1
 800bc20:	700a      	strb	r2, [r1, #0]
 800bc22:	4770      	bx	lr

0800bc24 <_write_r>:
 800bc24:	b538      	push	{r3, r4, r5, lr}
 800bc26:	4604      	mov	r4, r0
 800bc28:	4608      	mov	r0, r1
 800bc2a:	4611      	mov	r1, r2
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	4d05      	ldr	r5, [pc, #20]	; (800bc44 <_write_r+0x20>)
 800bc30:	602a      	str	r2, [r5, #0]
 800bc32:	461a      	mov	r2, r3
 800bc34:	f7f6 fd26 	bl	8002684 <_write>
 800bc38:	1c43      	adds	r3, r0, #1
 800bc3a:	d102      	bne.n	800bc42 <_write_r+0x1e>
 800bc3c:	682b      	ldr	r3, [r5, #0]
 800bc3e:	b103      	cbz	r3, 800bc42 <_write_r+0x1e>
 800bc40:	6023      	str	r3, [r4, #0]
 800bc42:	bd38      	pop	{r3, r4, r5, pc}
 800bc44:	20000bf8 	.word	0x20000bf8

0800bc48 <__assert_func>:
 800bc48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bc4a:	4614      	mov	r4, r2
 800bc4c:	461a      	mov	r2, r3
 800bc4e:	4b09      	ldr	r3, [pc, #36]	; (800bc74 <__assert_func+0x2c>)
 800bc50:	4605      	mov	r5, r0
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	68d8      	ldr	r0, [r3, #12]
 800bc56:	b14c      	cbz	r4, 800bc6c <__assert_func+0x24>
 800bc58:	4b07      	ldr	r3, [pc, #28]	; (800bc78 <__assert_func+0x30>)
 800bc5a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bc5e:	9100      	str	r1, [sp, #0]
 800bc60:	462b      	mov	r3, r5
 800bc62:	4906      	ldr	r1, [pc, #24]	; (800bc7c <__assert_func+0x34>)
 800bc64:	f000 f81e 	bl	800bca4 <fiprintf>
 800bc68:	f000 f8ca 	bl	800be00 <abort>
 800bc6c:	4b04      	ldr	r3, [pc, #16]	; (800bc80 <__assert_func+0x38>)
 800bc6e:	461c      	mov	r4, r3
 800bc70:	e7f3      	b.n	800bc5a <__assert_func+0x12>
 800bc72:	bf00      	nop
 800bc74:	2000000c 	.word	0x2000000c
 800bc78:	0800e29d 	.word	0x0800e29d
 800bc7c:	0800e2aa 	.word	0x0800e2aa
 800bc80:	0800e2d8 	.word	0x0800e2d8

0800bc84 <_close_r>:
 800bc84:	b538      	push	{r3, r4, r5, lr}
 800bc86:	2300      	movs	r3, #0
 800bc88:	4d05      	ldr	r5, [pc, #20]	; (800bca0 <_close_r+0x1c>)
 800bc8a:	4604      	mov	r4, r0
 800bc8c:	4608      	mov	r0, r1
 800bc8e:	602b      	str	r3, [r5, #0]
 800bc90:	f7f6 fd14 	bl	80026bc <_close>
 800bc94:	1c43      	adds	r3, r0, #1
 800bc96:	d102      	bne.n	800bc9e <_close_r+0x1a>
 800bc98:	682b      	ldr	r3, [r5, #0]
 800bc9a:	b103      	cbz	r3, 800bc9e <_close_r+0x1a>
 800bc9c:	6023      	str	r3, [r4, #0]
 800bc9e:	bd38      	pop	{r3, r4, r5, pc}
 800bca0:	20000bf8 	.word	0x20000bf8

0800bca4 <fiprintf>:
 800bca4:	b40e      	push	{r1, r2, r3}
 800bca6:	b503      	push	{r0, r1, lr}
 800bca8:	4601      	mov	r1, r0
 800bcaa:	ab03      	add	r3, sp, #12
 800bcac:	4805      	ldr	r0, [pc, #20]	; (800bcc4 <fiprintf+0x20>)
 800bcae:	f853 2b04 	ldr.w	r2, [r3], #4
 800bcb2:	6800      	ldr	r0, [r0, #0]
 800bcb4:	9301      	str	r3, [sp, #4]
 800bcb6:	f7ff fe0b 	bl	800b8d0 <_vfiprintf_r>
 800bcba:	b002      	add	sp, #8
 800bcbc:	f85d eb04 	ldr.w	lr, [sp], #4
 800bcc0:	b003      	add	sp, #12
 800bcc2:	4770      	bx	lr
 800bcc4:	2000000c 	.word	0x2000000c

0800bcc8 <_fstat_r>:
 800bcc8:	b538      	push	{r3, r4, r5, lr}
 800bcca:	2300      	movs	r3, #0
 800bccc:	4d06      	ldr	r5, [pc, #24]	; (800bce8 <_fstat_r+0x20>)
 800bcce:	4604      	mov	r4, r0
 800bcd0:	4608      	mov	r0, r1
 800bcd2:	4611      	mov	r1, r2
 800bcd4:	602b      	str	r3, [r5, #0]
 800bcd6:	f7f6 fcfc 	bl	80026d2 <_fstat>
 800bcda:	1c43      	adds	r3, r0, #1
 800bcdc:	d102      	bne.n	800bce4 <_fstat_r+0x1c>
 800bcde:	682b      	ldr	r3, [r5, #0]
 800bce0:	b103      	cbz	r3, 800bce4 <_fstat_r+0x1c>
 800bce2:	6023      	str	r3, [r4, #0]
 800bce4:	bd38      	pop	{r3, r4, r5, pc}
 800bce6:	bf00      	nop
 800bce8:	20000bf8 	.word	0x20000bf8

0800bcec <_isatty_r>:
 800bcec:	b538      	push	{r3, r4, r5, lr}
 800bcee:	2300      	movs	r3, #0
 800bcf0:	4d05      	ldr	r5, [pc, #20]	; (800bd08 <_isatty_r+0x1c>)
 800bcf2:	4604      	mov	r4, r0
 800bcf4:	4608      	mov	r0, r1
 800bcf6:	602b      	str	r3, [r5, #0]
 800bcf8:	f7f6 fcfa 	bl	80026f0 <_isatty>
 800bcfc:	1c43      	adds	r3, r0, #1
 800bcfe:	d102      	bne.n	800bd06 <_isatty_r+0x1a>
 800bd00:	682b      	ldr	r3, [r5, #0]
 800bd02:	b103      	cbz	r3, 800bd06 <_isatty_r+0x1a>
 800bd04:	6023      	str	r3, [r4, #0]
 800bd06:	bd38      	pop	{r3, r4, r5, pc}
 800bd08:	20000bf8 	.word	0x20000bf8

0800bd0c <_lseek_r>:
 800bd0c:	b538      	push	{r3, r4, r5, lr}
 800bd0e:	4604      	mov	r4, r0
 800bd10:	4608      	mov	r0, r1
 800bd12:	4611      	mov	r1, r2
 800bd14:	2200      	movs	r2, #0
 800bd16:	4d05      	ldr	r5, [pc, #20]	; (800bd2c <_lseek_r+0x20>)
 800bd18:	602a      	str	r2, [r5, #0]
 800bd1a:	461a      	mov	r2, r3
 800bd1c:	f7f6 fcf2 	bl	8002704 <_lseek>
 800bd20:	1c43      	adds	r3, r0, #1
 800bd22:	d102      	bne.n	800bd2a <_lseek_r+0x1e>
 800bd24:	682b      	ldr	r3, [r5, #0]
 800bd26:	b103      	cbz	r3, 800bd2a <_lseek_r+0x1e>
 800bd28:	6023      	str	r3, [r4, #0]
 800bd2a:	bd38      	pop	{r3, r4, r5, pc}
 800bd2c:	20000bf8 	.word	0x20000bf8

0800bd30 <memmove>:
 800bd30:	4288      	cmp	r0, r1
 800bd32:	b510      	push	{r4, lr}
 800bd34:	eb01 0402 	add.w	r4, r1, r2
 800bd38:	d902      	bls.n	800bd40 <memmove+0x10>
 800bd3a:	4284      	cmp	r4, r0
 800bd3c:	4623      	mov	r3, r4
 800bd3e:	d807      	bhi.n	800bd50 <memmove+0x20>
 800bd40:	1e43      	subs	r3, r0, #1
 800bd42:	42a1      	cmp	r1, r4
 800bd44:	d008      	beq.n	800bd58 <memmove+0x28>
 800bd46:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bd4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bd4e:	e7f8      	b.n	800bd42 <memmove+0x12>
 800bd50:	4601      	mov	r1, r0
 800bd52:	4402      	add	r2, r0
 800bd54:	428a      	cmp	r2, r1
 800bd56:	d100      	bne.n	800bd5a <memmove+0x2a>
 800bd58:	bd10      	pop	{r4, pc}
 800bd5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bd5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bd62:	e7f7      	b.n	800bd54 <memmove+0x24>

0800bd64 <__malloc_lock>:
 800bd64:	4801      	ldr	r0, [pc, #4]	; (800bd6c <__malloc_lock+0x8>)
 800bd66:	f7fe bdf8 	b.w	800a95a <__retarget_lock_acquire_recursive>
 800bd6a:	bf00      	nop
 800bd6c:	20000bec 	.word	0x20000bec

0800bd70 <__malloc_unlock>:
 800bd70:	4801      	ldr	r0, [pc, #4]	; (800bd78 <__malloc_unlock+0x8>)
 800bd72:	f7fe bdf3 	b.w	800a95c <__retarget_lock_release_recursive>
 800bd76:	bf00      	nop
 800bd78:	20000bec 	.word	0x20000bec

0800bd7c <_realloc_r>:
 800bd7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd80:	4680      	mov	r8, r0
 800bd82:	4614      	mov	r4, r2
 800bd84:	460e      	mov	r6, r1
 800bd86:	b921      	cbnz	r1, 800bd92 <_realloc_r+0x16>
 800bd88:	4611      	mov	r1, r2
 800bd8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd8e:	f7ff bba7 	b.w	800b4e0 <_malloc_r>
 800bd92:	b92a      	cbnz	r2, 800bda0 <_realloc_r+0x24>
 800bd94:	f7ff fb3c 	bl	800b410 <_free_r>
 800bd98:	4625      	mov	r5, r4
 800bd9a:	4628      	mov	r0, r5
 800bd9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bda0:	f000 f835 	bl	800be0e <_malloc_usable_size_r>
 800bda4:	4284      	cmp	r4, r0
 800bda6:	4607      	mov	r7, r0
 800bda8:	d802      	bhi.n	800bdb0 <_realloc_r+0x34>
 800bdaa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bdae:	d812      	bhi.n	800bdd6 <_realloc_r+0x5a>
 800bdb0:	4621      	mov	r1, r4
 800bdb2:	4640      	mov	r0, r8
 800bdb4:	f7ff fb94 	bl	800b4e0 <_malloc_r>
 800bdb8:	4605      	mov	r5, r0
 800bdba:	2800      	cmp	r0, #0
 800bdbc:	d0ed      	beq.n	800bd9a <_realloc_r+0x1e>
 800bdbe:	42bc      	cmp	r4, r7
 800bdc0:	4622      	mov	r2, r4
 800bdc2:	4631      	mov	r1, r6
 800bdc4:	bf28      	it	cs
 800bdc6:	463a      	movcs	r2, r7
 800bdc8:	f7fb fb9e 	bl	8007508 <memcpy>
 800bdcc:	4631      	mov	r1, r6
 800bdce:	4640      	mov	r0, r8
 800bdd0:	f7ff fb1e 	bl	800b410 <_free_r>
 800bdd4:	e7e1      	b.n	800bd9a <_realloc_r+0x1e>
 800bdd6:	4635      	mov	r5, r6
 800bdd8:	e7df      	b.n	800bd9a <_realloc_r+0x1e>
	...

0800bddc <_read_r>:
 800bddc:	b538      	push	{r3, r4, r5, lr}
 800bdde:	4604      	mov	r4, r0
 800bde0:	4608      	mov	r0, r1
 800bde2:	4611      	mov	r1, r2
 800bde4:	2200      	movs	r2, #0
 800bde6:	4d05      	ldr	r5, [pc, #20]	; (800bdfc <_read_r+0x20>)
 800bde8:	602a      	str	r2, [r5, #0]
 800bdea:	461a      	mov	r2, r3
 800bdec:	f7f6 fc2d 	bl	800264a <_read>
 800bdf0:	1c43      	adds	r3, r0, #1
 800bdf2:	d102      	bne.n	800bdfa <_read_r+0x1e>
 800bdf4:	682b      	ldr	r3, [r5, #0]
 800bdf6:	b103      	cbz	r3, 800bdfa <_read_r+0x1e>
 800bdf8:	6023      	str	r3, [r4, #0]
 800bdfa:	bd38      	pop	{r3, r4, r5, pc}
 800bdfc:	20000bf8 	.word	0x20000bf8

0800be00 <abort>:
 800be00:	2006      	movs	r0, #6
 800be02:	b508      	push	{r3, lr}
 800be04:	f000 f834 	bl	800be70 <raise>
 800be08:	2001      	movs	r0, #1
 800be0a:	f7f6 fc14 	bl	8002636 <_exit>

0800be0e <_malloc_usable_size_r>:
 800be0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be12:	1f18      	subs	r0, r3, #4
 800be14:	2b00      	cmp	r3, #0
 800be16:	bfbc      	itt	lt
 800be18:	580b      	ldrlt	r3, [r1, r0]
 800be1a:	18c0      	addlt	r0, r0, r3
 800be1c:	4770      	bx	lr

0800be1e <_raise_r>:
 800be1e:	291f      	cmp	r1, #31
 800be20:	b538      	push	{r3, r4, r5, lr}
 800be22:	4604      	mov	r4, r0
 800be24:	460d      	mov	r5, r1
 800be26:	d904      	bls.n	800be32 <_raise_r+0x14>
 800be28:	2316      	movs	r3, #22
 800be2a:	6003      	str	r3, [r0, #0]
 800be2c:	f04f 30ff 	mov.w	r0, #4294967295
 800be30:	bd38      	pop	{r3, r4, r5, pc}
 800be32:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800be34:	b112      	cbz	r2, 800be3c <_raise_r+0x1e>
 800be36:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800be3a:	b94b      	cbnz	r3, 800be50 <_raise_r+0x32>
 800be3c:	4620      	mov	r0, r4
 800be3e:	f000 f831 	bl	800bea4 <_getpid_r>
 800be42:	462a      	mov	r2, r5
 800be44:	4601      	mov	r1, r0
 800be46:	4620      	mov	r0, r4
 800be48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be4c:	f000 b818 	b.w	800be80 <_kill_r>
 800be50:	2b01      	cmp	r3, #1
 800be52:	d00a      	beq.n	800be6a <_raise_r+0x4c>
 800be54:	1c59      	adds	r1, r3, #1
 800be56:	d103      	bne.n	800be60 <_raise_r+0x42>
 800be58:	2316      	movs	r3, #22
 800be5a:	6003      	str	r3, [r0, #0]
 800be5c:	2001      	movs	r0, #1
 800be5e:	e7e7      	b.n	800be30 <_raise_r+0x12>
 800be60:	2400      	movs	r4, #0
 800be62:	4628      	mov	r0, r5
 800be64:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800be68:	4798      	blx	r3
 800be6a:	2000      	movs	r0, #0
 800be6c:	e7e0      	b.n	800be30 <_raise_r+0x12>
	...

0800be70 <raise>:
 800be70:	4b02      	ldr	r3, [pc, #8]	; (800be7c <raise+0xc>)
 800be72:	4601      	mov	r1, r0
 800be74:	6818      	ldr	r0, [r3, #0]
 800be76:	f7ff bfd2 	b.w	800be1e <_raise_r>
 800be7a:	bf00      	nop
 800be7c:	2000000c 	.word	0x2000000c

0800be80 <_kill_r>:
 800be80:	b538      	push	{r3, r4, r5, lr}
 800be82:	2300      	movs	r3, #0
 800be84:	4d06      	ldr	r5, [pc, #24]	; (800bea0 <_kill_r+0x20>)
 800be86:	4604      	mov	r4, r0
 800be88:	4608      	mov	r0, r1
 800be8a:	4611      	mov	r1, r2
 800be8c:	602b      	str	r3, [r5, #0]
 800be8e:	f7f6 fbc2 	bl	8002616 <_kill>
 800be92:	1c43      	adds	r3, r0, #1
 800be94:	d102      	bne.n	800be9c <_kill_r+0x1c>
 800be96:	682b      	ldr	r3, [r5, #0]
 800be98:	b103      	cbz	r3, 800be9c <_kill_r+0x1c>
 800be9a:	6023      	str	r3, [r4, #0]
 800be9c:	bd38      	pop	{r3, r4, r5, pc}
 800be9e:	bf00      	nop
 800bea0:	20000bf8 	.word	0x20000bf8

0800bea4 <_getpid_r>:
 800bea4:	f7f6 bbb0 	b.w	8002608 <_getpid>

0800bea8 <cos>:
 800bea8:	b530      	push	{r4, r5, lr}
 800beaa:	4a20      	ldr	r2, [pc, #128]	; (800bf2c <cos+0x84>)
 800beac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800beb0:	4293      	cmp	r3, r2
 800beb2:	b087      	sub	sp, #28
 800beb4:	dc06      	bgt.n	800bec4 <cos+0x1c>
 800beb6:	2200      	movs	r2, #0
 800beb8:	2300      	movs	r3, #0
 800beba:	b007      	add	sp, #28
 800bebc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bec0:	f000 bb6a 	b.w	800c598 <__kernel_cos>
 800bec4:	4a1a      	ldr	r2, [pc, #104]	; (800bf30 <cos+0x88>)
 800bec6:	4293      	cmp	r3, r2
 800bec8:	dd05      	ble.n	800bed6 <cos+0x2e>
 800beca:	4602      	mov	r2, r0
 800becc:	460b      	mov	r3, r1
 800bece:	f7f4 f94b 	bl	8000168 <__aeabi_dsub>
 800bed2:	b007      	add	sp, #28
 800bed4:	bd30      	pop	{r4, r5, pc}
 800bed6:	aa02      	add	r2, sp, #8
 800bed8:	f000 f88e 	bl	800bff8 <__ieee754_rem_pio2>
 800bedc:	f000 0003 	and.w	r0, r0, #3
 800bee0:	2801      	cmp	r0, #1
 800bee2:	d009      	beq.n	800bef8 <cos+0x50>
 800bee4:	2802      	cmp	r0, #2
 800bee6:	d011      	beq.n	800bf0c <cos+0x64>
 800bee8:	b9b8      	cbnz	r0, 800bf1a <cos+0x72>
 800beea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800beee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bef2:	f000 fb51 	bl	800c598 <__kernel_cos>
 800bef6:	e7ec      	b.n	800bed2 <cos+0x2a>
 800bef8:	9000      	str	r0, [sp, #0]
 800befa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800befe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf02:	f000 ff49 	bl	800cd98 <__kernel_sin>
 800bf06:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800bf0a:	e7e2      	b.n	800bed2 <cos+0x2a>
 800bf0c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bf10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf14:	f000 fb40 	bl	800c598 <__kernel_cos>
 800bf18:	e7f5      	b.n	800bf06 <cos+0x5e>
 800bf1a:	2301      	movs	r3, #1
 800bf1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf20:	9300      	str	r3, [sp, #0]
 800bf22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bf26:	f000 ff37 	bl	800cd98 <__kernel_sin>
 800bf2a:	e7d2      	b.n	800bed2 <cos+0x2a>
 800bf2c:	3fe921fb 	.word	0x3fe921fb
 800bf30:	7fefffff 	.word	0x7fefffff

0800bf34 <sin>:
 800bf34:	b530      	push	{r4, r5, lr}
 800bf36:	4a20      	ldr	r2, [pc, #128]	; (800bfb8 <sin+0x84>)
 800bf38:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bf3c:	4293      	cmp	r3, r2
 800bf3e:	b087      	sub	sp, #28
 800bf40:	dc06      	bgt.n	800bf50 <sin+0x1c>
 800bf42:	2300      	movs	r3, #0
 800bf44:	2200      	movs	r2, #0
 800bf46:	9300      	str	r3, [sp, #0]
 800bf48:	2300      	movs	r3, #0
 800bf4a:	f000 ff25 	bl	800cd98 <__kernel_sin>
 800bf4e:	e006      	b.n	800bf5e <sin+0x2a>
 800bf50:	4a1a      	ldr	r2, [pc, #104]	; (800bfbc <sin+0x88>)
 800bf52:	4293      	cmp	r3, r2
 800bf54:	dd05      	ble.n	800bf62 <sin+0x2e>
 800bf56:	4602      	mov	r2, r0
 800bf58:	460b      	mov	r3, r1
 800bf5a:	f7f4 f905 	bl	8000168 <__aeabi_dsub>
 800bf5e:	b007      	add	sp, #28
 800bf60:	bd30      	pop	{r4, r5, pc}
 800bf62:	aa02      	add	r2, sp, #8
 800bf64:	f000 f848 	bl	800bff8 <__ieee754_rem_pio2>
 800bf68:	f000 0003 	and.w	r0, r0, #3
 800bf6c:	2801      	cmp	r0, #1
 800bf6e:	d009      	beq.n	800bf84 <sin+0x50>
 800bf70:	2802      	cmp	r0, #2
 800bf72:	d00e      	beq.n	800bf92 <sin+0x5e>
 800bf74:	b9c0      	cbnz	r0, 800bfa8 <sin+0x74>
 800bf76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf7a:	2301      	movs	r3, #1
 800bf7c:	9300      	str	r3, [sp, #0]
 800bf7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bf82:	e7e2      	b.n	800bf4a <sin+0x16>
 800bf84:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bf88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf8c:	f000 fb04 	bl	800c598 <__kernel_cos>
 800bf90:	e7e5      	b.n	800bf5e <sin+0x2a>
 800bf92:	2301      	movs	r3, #1
 800bf94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf98:	9300      	str	r3, [sp, #0]
 800bf9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bf9e:	f000 fefb 	bl	800cd98 <__kernel_sin>
 800bfa2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800bfa6:	e7da      	b.n	800bf5e <sin+0x2a>
 800bfa8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bfac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bfb0:	f000 faf2 	bl	800c598 <__kernel_cos>
 800bfb4:	e7f5      	b.n	800bfa2 <sin+0x6e>
 800bfb6:	bf00      	nop
 800bfb8:	3fe921fb 	.word	0x3fe921fb
 800bfbc:	7fefffff 	.word	0x7fefffff

0800bfc0 <atan2f>:
 800bfc0:	f000 ba12 	b.w	800c3e8 <__ieee754_atan2f>

0800bfc4 <sqrtf>:
 800bfc4:	b538      	push	{r3, r4, r5, lr}
 800bfc6:	4605      	mov	r5, r0
 800bfc8:	f000 fa94 	bl	800c4f4 <__ieee754_sqrtf>
 800bfcc:	4629      	mov	r1, r5
 800bfce:	4604      	mov	r4, r0
 800bfd0:	4628      	mov	r0, r5
 800bfd2:	f7f5 f89d 	bl	8001110 <__aeabi_fcmpun>
 800bfd6:	b968      	cbnz	r0, 800bff4 <sqrtf+0x30>
 800bfd8:	2100      	movs	r1, #0
 800bfda:	4628      	mov	r0, r5
 800bfdc:	f7f5 f870 	bl	80010c0 <__aeabi_fcmplt>
 800bfe0:	b140      	cbz	r0, 800bff4 <sqrtf+0x30>
 800bfe2:	f7fb fa67 	bl	80074b4 <__errno>
 800bfe6:	2321      	movs	r3, #33	; 0x21
 800bfe8:	2100      	movs	r1, #0
 800bfea:	6003      	str	r3, [r0, #0]
 800bfec:	4608      	mov	r0, r1
 800bfee:	f7f4 ff7d 	bl	8000eec <__aeabi_fdiv>
 800bff2:	4604      	mov	r4, r0
 800bff4:	4620      	mov	r0, r4
 800bff6:	bd38      	pop	{r3, r4, r5, pc}

0800bff8 <__ieee754_rem_pio2>:
 800bff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bffc:	4614      	mov	r4, r2
 800bffe:	4ac4      	ldr	r2, [pc, #784]	; (800c310 <__ieee754_rem_pio2+0x318>)
 800c000:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800c004:	b08d      	sub	sp, #52	; 0x34
 800c006:	4592      	cmp	sl, r2
 800c008:	9104      	str	r1, [sp, #16]
 800c00a:	dc07      	bgt.n	800c01c <__ieee754_rem_pio2+0x24>
 800c00c:	2200      	movs	r2, #0
 800c00e:	2300      	movs	r3, #0
 800c010:	e9c4 0100 	strd	r0, r1, [r4]
 800c014:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800c018:	2500      	movs	r5, #0
 800c01a:	e024      	b.n	800c066 <__ieee754_rem_pio2+0x6e>
 800c01c:	4abd      	ldr	r2, [pc, #756]	; (800c314 <__ieee754_rem_pio2+0x31c>)
 800c01e:	4592      	cmp	sl, r2
 800c020:	dc72      	bgt.n	800c108 <__ieee754_rem_pio2+0x110>
 800c022:	9b04      	ldr	r3, [sp, #16]
 800c024:	4dbc      	ldr	r5, [pc, #752]	; (800c318 <__ieee754_rem_pio2+0x320>)
 800c026:	2b00      	cmp	r3, #0
 800c028:	a3ab      	add	r3, pc, #684	; (adr r3, 800c2d8 <__ieee754_rem_pio2+0x2e0>)
 800c02a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c02e:	dd36      	ble.n	800c09e <__ieee754_rem_pio2+0xa6>
 800c030:	f7f4 f89a 	bl	8000168 <__aeabi_dsub>
 800c034:	45aa      	cmp	sl, r5
 800c036:	4606      	mov	r6, r0
 800c038:	460f      	mov	r7, r1
 800c03a:	d018      	beq.n	800c06e <__ieee754_rem_pio2+0x76>
 800c03c:	a3a8      	add	r3, pc, #672	; (adr r3, 800c2e0 <__ieee754_rem_pio2+0x2e8>)
 800c03e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c042:	f7f4 f891 	bl	8000168 <__aeabi_dsub>
 800c046:	4602      	mov	r2, r0
 800c048:	460b      	mov	r3, r1
 800c04a:	4630      	mov	r0, r6
 800c04c:	e9c4 2300 	strd	r2, r3, [r4]
 800c050:	4639      	mov	r1, r7
 800c052:	f7f4 f889 	bl	8000168 <__aeabi_dsub>
 800c056:	a3a2      	add	r3, pc, #648	; (adr r3, 800c2e0 <__ieee754_rem_pio2+0x2e8>)
 800c058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c05c:	f7f4 f884 	bl	8000168 <__aeabi_dsub>
 800c060:	2501      	movs	r5, #1
 800c062:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c066:	4628      	mov	r0, r5
 800c068:	b00d      	add	sp, #52	; 0x34
 800c06a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c06e:	a39e      	add	r3, pc, #632	; (adr r3, 800c2e8 <__ieee754_rem_pio2+0x2f0>)
 800c070:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c074:	f7f4 f878 	bl	8000168 <__aeabi_dsub>
 800c078:	a39d      	add	r3, pc, #628	; (adr r3, 800c2f0 <__ieee754_rem_pio2+0x2f8>)
 800c07a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c07e:	4606      	mov	r6, r0
 800c080:	460f      	mov	r7, r1
 800c082:	f7f4 f871 	bl	8000168 <__aeabi_dsub>
 800c086:	4602      	mov	r2, r0
 800c088:	460b      	mov	r3, r1
 800c08a:	4630      	mov	r0, r6
 800c08c:	e9c4 2300 	strd	r2, r3, [r4]
 800c090:	4639      	mov	r1, r7
 800c092:	f7f4 f869 	bl	8000168 <__aeabi_dsub>
 800c096:	a396      	add	r3, pc, #600	; (adr r3, 800c2f0 <__ieee754_rem_pio2+0x2f8>)
 800c098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c09c:	e7de      	b.n	800c05c <__ieee754_rem_pio2+0x64>
 800c09e:	f7f4 f865 	bl	800016c <__adddf3>
 800c0a2:	45aa      	cmp	sl, r5
 800c0a4:	4606      	mov	r6, r0
 800c0a6:	460f      	mov	r7, r1
 800c0a8:	d016      	beq.n	800c0d8 <__ieee754_rem_pio2+0xe0>
 800c0aa:	a38d      	add	r3, pc, #564	; (adr r3, 800c2e0 <__ieee754_rem_pio2+0x2e8>)
 800c0ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0b0:	f7f4 f85c 	bl	800016c <__adddf3>
 800c0b4:	4602      	mov	r2, r0
 800c0b6:	460b      	mov	r3, r1
 800c0b8:	4630      	mov	r0, r6
 800c0ba:	e9c4 2300 	strd	r2, r3, [r4]
 800c0be:	4639      	mov	r1, r7
 800c0c0:	f7f4 f852 	bl	8000168 <__aeabi_dsub>
 800c0c4:	a386      	add	r3, pc, #536	; (adr r3, 800c2e0 <__ieee754_rem_pio2+0x2e8>)
 800c0c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ca:	f7f4 f84f 	bl	800016c <__adddf3>
 800c0ce:	f04f 35ff 	mov.w	r5, #4294967295
 800c0d2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c0d6:	e7c6      	b.n	800c066 <__ieee754_rem_pio2+0x6e>
 800c0d8:	a383      	add	r3, pc, #524	; (adr r3, 800c2e8 <__ieee754_rem_pio2+0x2f0>)
 800c0da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0de:	f7f4 f845 	bl	800016c <__adddf3>
 800c0e2:	a383      	add	r3, pc, #524	; (adr r3, 800c2f0 <__ieee754_rem_pio2+0x2f8>)
 800c0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0e8:	4606      	mov	r6, r0
 800c0ea:	460f      	mov	r7, r1
 800c0ec:	f7f4 f83e 	bl	800016c <__adddf3>
 800c0f0:	4602      	mov	r2, r0
 800c0f2:	460b      	mov	r3, r1
 800c0f4:	4630      	mov	r0, r6
 800c0f6:	e9c4 2300 	strd	r2, r3, [r4]
 800c0fa:	4639      	mov	r1, r7
 800c0fc:	f7f4 f834 	bl	8000168 <__aeabi_dsub>
 800c100:	a37b      	add	r3, pc, #492	; (adr r3, 800c2f0 <__ieee754_rem_pio2+0x2f8>)
 800c102:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c106:	e7e0      	b.n	800c0ca <__ieee754_rem_pio2+0xd2>
 800c108:	4a84      	ldr	r2, [pc, #528]	; (800c31c <__ieee754_rem_pio2+0x324>)
 800c10a:	4592      	cmp	sl, r2
 800c10c:	f300 80d5 	bgt.w	800c2ba <__ieee754_rem_pio2+0x2c2>
 800c110:	f000 fef8 	bl	800cf04 <fabs>
 800c114:	a378      	add	r3, pc, #480	; (adr r3, 800c2f8 <__ieee754_rem_pio2+0x300>)
 800c116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c11a:	4606      	mov	r6, r0
 800c11c:	460f      	mov	r7, r1
 800c11e:	f7f4 f9db 	bl	80004d8 <__aeabi_dmul>
 800c122:	2200      	movs	r2, #0
 800c124:	4b7e      	ldr	r3, [pc, #504]	; (800c320 <__ieee754_rem_pio2+0x328>)
 800c126:	f7f4 f821 	bl	800016c <__adddf3>
 800c12a:	f7f4 fc85 	bl	8000a38 <__aeabi_d2iz>
 800c12e:	4605      	mov	r5, r0
 800c130:	f7f4 f968 	bl	8000404 <__aeabi_i2d>
 800c134:	4602      	mov	r2, r0
 800c136:	460b      	mov	r3, r1
 800c138:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c13c:	a366      	add	r3, pc, #408	; (adr r3, 800c2d8 <__ieee754_rem_pio2+0x2e0>)
 800c13e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c142:	f7f4 f9c9 	bl	80004d8 <__aeabi_dmul>
 800c146:	4602      	mov	r2, r0
 800c148:	460b      	mov	r3, r1
 800c14a:	4630      	mov	r0, r6
 800c14c:	4639      	mov	r1, r7
 800c14e:	f7f4 f80b 	bl	8000168 <__aeabi_dsub>
 800c152:	a363      	add	r3, pc, #396	; (adr r3, 800c2e0 <__ieee754_rem_pio2+0x2e8>)
 800c154:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c158:	4680      	mov	r8, r0
 800c15a:	4689      	mov	r9, r1
 800c15c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c160:	f7f4 f9ba 	bl	80004d8 <__aeabi_dmul>
 800c164:	2d1f      	cmp	r5, #31
 800c166:	4606      	mov	r6, r0
 800c168:	460f      	mov	r7, r1
 800c16a:	dc0e      	bgt.n	800c18a <__ieee754_rem_pio2+0x192>
 800c16c:	4b6d      	ldr	r3, [pc, #436]	; (800c324 <__ieee754_rem_pio2+0x32c>)
 800c16e:	1e6a      	subs	r2, r5, #1
 800c170:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c174:	4553      	cmp	r3, sl
 800c176:	d008      	beq.n	800c18a <__ieee754_rem_pio2+0x192>
 800c178:	4632      	mov	r2, r6
 800c17a:	463b      	mov	r3, r7
 800c17c:	4640      	mov	r0, r8
 800c17e:	4649      	mov	r1, r9
 800c180:	f7f3 fff2 	bl	8000168 <__aeabi_dsub>
 800c184:	e9c4 0100 	strd	r0, r1, [r4]
 800c188:	e013      	b.n	800c1b2 <__ieee754_rem_pio2+0x1ba>
 800c18a:	463b      	mov	r3, r7
 800c18c:	4632      	mov	r2, r6
 800c18e:	4640      	mov	r0, r8
 800c190:	4649      	mov	r1, r9
 800c192:	f7f3 ffe9 	bl	8000168 <__aeabi_dsub>
 800c196:	ea4f 532a 	mov.w	r3, sl, asr #20
 800c19a:	9305      	str	r3, [sp, #20]
 800c19c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c1a0:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 800c1a4:	f1ba 0f10 	cmp.w	sl, #16
 800c1a8:	dc1f      	bgt.n	800c1ea <__ieee754_rem_pio2+0x1f2>
 800c1aa:	4602      	mov	r2, r0
 800c1ac:	460b      	mov	r3, r1
 800c1ae:	e9c4 2300 	strd	r2, r3, [r4]
 800c1b2:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800c1b6:	4640      	mov	r0, r8
 800c1b8:	4653      	mov	r3, sl
 800c1ba:	4649      	mov	r1, r9
 800c1bc:	f7f3 ffd4 	bl	8000168 <__aeabi_dsub>
 800c1c0:	4632      	mov	r2, r6
 800c1c2:	463b      	mov	r3, r7
 800c1c4:	f7f3 ffd0 	bl	8000168 <__aeabi_dsub>
 800c1c8:	460b      	mov	r3, r1
 800c1ca:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c1ce:	9904      	ldr	r1, [sp, #16]
 800c1d0:	4602      	mov	r2, r0
 800c1d2:	2900      	cmp	r1, #0
 800c1d4:	f6bf af47 	bge.w	800c066 <__ieee754_rem_pio2+0x6e>
 800c1d8:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 800c1dc:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800c1e0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c1e4:	60e3      	str	r3, [r4, #12]
 800c1e6:	426d      	negs	r5, r5
 800c1e8:	e73d      	b.n	800c066 <__ieee754_rem_pio2+0x6e>
 800c1ea:	a33f      	add	r3, pc, #252	; (adr r3, 800c2e8 <__ieee754_rem_pio2+0x2f0>)
 800c1ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c1f4:	f7f4 f970 	bl	80004d8 <__aeabi_dmul>
 800c1f8:	4606      	mov	r6, r0
 800c1fa:	460f      	mov	r7, r1
 800c1fc:	4602      	mov	r2, r0
 800c1fe:	460b      	mov	r3, r1
 800c200:	4640      	mov	r0, r8
 800c202:	4649      	mov	r1, r9
 800c204:	f7f3 ffb0 	bl	8000168 <__aeabi_dsub>
 800c208:	4602      	mov	r2, r0
 800c20a:	460b      	mov	r3, r1
 800c20c:	4682      	mov	sl, r0
 800c20e:	468b      	mov	fp, r1
 800c210:	4640      	mov	r0, r8
 800c212:	4649      	mov	r1, r9
 800c214:	f7f3 ffa8 	bl	8000168 <__aeabi_dsub>
 800c218:	4632      	mov	r2, r6
 800c21a:	463b      	mov	r3, r7
 800c21c:	f7f3 ffa4 	bl	8000168 <__aeabi_dsub>
 800c220:	a333      	add	r3, pc, #204	; (adr r3, 800c2f0 <__ieee754_rem_pio2+0x2f8>)
 800c222:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c226:	4606      	mov	r6, r0
 800c228:	460f      	mov	r7, r1
 800c22a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c22e:	f7f4 f953 	bl	80004d8 <__aeabi_dmul>
 800c232:	4632      	mov	r2, r6
 800c234:	463b      	mov	r3, r7
 800c236:	f7f3 ff97 	bl	8000168 <__aeabi_dsub>
 800c23a:	4602      	mov	r2, r0
 800c23c:	460b      	mov	r3, r1
 800c23e:	4606      	mov	r6, r0
 800c240:	460f      	mov	r7, r1
 800c242:	4650      	mov	r0, sl
 800c244:	4659      	mov	r1, fp
 800c246:	f7f3 ff8f 	bl	8000168 <__aeabi_dsub>
 800c24a:	9a05      	ldr	r2, [sp, #20]
 800c24c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c250:	1ad3      	subs	r3, r2, r3
 800c252:	2b31      	cmp	r3, #49	; 0x31
 800c254:	dc06      	bgt.n	800c264 <__ieee754_rem_pio2+0x26c>
 800c256:	4602      	mov	r2, r0
 800c258:	460b      	mov	r3, r1
 800c25a:	46d0      	mov	r8, sl
 800c25c:	46d9      	mov	r9, fp
 800c25e:	e9c4 2300 	strd	r2, r3, [r4]
 800c262:	e7a6      	b.n	800c1b2 <__ieee754_rem_pio2+0x1ba>
 800c264:	a326      	add	r3, pc, #152	; (adr r3, 800c300 <__ieee754_rem_pio2+0x308>)
 800c266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c26a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c26e:	f7f4 f933 	bl	80004d8 <__aeabi_dmul>
 800c272:	4606      	mov	r6, r0
 800c274:	460f      	mov	r7, r1
 800c276:	4602      	mov	r2, r0
 800c278:	460b      	mov	r3, r1
 800c27a:	4650      	mov	r0, sl
 800c27c:	4659      	mov	r1, fp
 800c27e:	f7f3 ff73 	bl	8000168 <__aeabi_dsub>
 800c282:	4602      	mov	r2, r0
 800c284:	460b      	mov	r3, r1
 800c286:	4680      	mov	r8, r0
 800c288:	4689      	mov	r9, r1
 800c28a:	4650      	mov	r0, sl
 800c28c:	4659      	mov	r1, fp
 800c28e:	f7f3 ff6b 	bl	8000168 <__aeabi_dsub>
 800c292:	4632      	mov	r2, r6
 800c294:	463b      	mov	r3, r7
 800c296:	f7f3 ff67 	bl	8000168 <__aeabi_dsub>
 800c29a:	a31b      	add	r3, pc, #108	; (adr r3, 800c308 <__ieee754_rem_pio2+0x310>)
 800c29c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2a0:	4606      	mov	r6, r0
 800c2a2:	460f      	mov	r7, r1
 800c2a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c2a8:	f7f4 f916 	bl	80004d8 <__aeabi_dmul>
 800c2ac:	4632      	mov	r2, r6
 800c2ae:	463b      	mov	r3, r7
 800c2b0:	f7f3 ff5a 	bl	8000168 <__aeabi_dsub>
 800c2b4:	4606      	mov	r6, r0
 800c2b6:	460f      	mov	r7, r1
 800c2b8:	e75e      	b.n	800c178 <__ieee754_rem_pio2+0x180>
 800c2ba:	4a1b      	ldr	r2, [pc, #108]	; (800c328 <__ieee754_rem_pio2+0x330>)
 800c2bc:	4592      	cmp	sl, r2
 800c2be:	dd35      	ble.n	800c32c <__ieee754_rem_pio2+0x334>
 800c2c0:	4602      	mov	r2, r0
 800c2c2:	460b      	mov	r3, r1
 800c2c4:	f7f3 ff50 	bl	8000168 <__aeabi_dsub>
 800c2c8:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c2cc:	e9c4 0100 	strd	r0, r1, [r4]
 800c2d0:	e6a2      	b.n	800c018 <__ieee754_rem_pio2+0x20>
 800c2d2:	bf00      	nop
 800c2d4:	f3af 8000 	nop.w
 800c2d8:	54400000 	.word	0x54400000
 800c2dc:	3ff921fb 	.word	0x3ff921fb
 800c2e0:	1a626331 	.word	0x1a626331
 800c2e4:	3dd0b461 	.word	0x3dd0b461
 800c2e8:	1a600000 	.word	0x1a600000
 800c2ec:	3dd0b461 	.word	0x3dd0b461
 800c2f0:	2e037073 	.word	0x2e037073
 800c2f4:	3ba3198a 	.word	0x3ba3198a
 800c2f8:	6dc9c883 	.word	0x6dc9c883
 800c2fc:	3fe45f30 	.word	0x3fe45f30
 800c300:	2e000000 	.word	0x2e000000
 800c304:	3ba3198a 	.word	0x3ba3198a
 800c308:	252049c1 	.word	0x252049c1
 800c30c:	397b839a 	.word	0x397b839a
 800c310:	3fe921fb 	.word	0x3fe921fb
 800c314:	4002d97b 	.word	0x4002d97b
 800c318:	3ff921fb 	.word	0x3ff921fb
 800c31c:	413921fb 	.word	0x413921fb
 800c320:	3fe00000 	.word	0x3fe00000
 800c324:	0800e2dc 	.word	0x0800e2dc
 800c328:	7fefffff 	.word	0x7fefffff
 800c32c:	ea4f 552a 	mov.w	r5, sl, asr #20
 800c330:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800c334:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800c338:	460f      	mov	r7, r1
 800c33a:	4606      	mov	r6, r0
 800c33c:	f7f4 fb7c 	bl	8000a38 <__aeabi_d2iz>
 800c340:	f7f4 f860 	bl	8000404 <__aeabi_i2d>
 800c344:	4602      	mov	r2, r0
 800c346:	460b      	mov	r3, r1
 800c348:	4630      	mov	r0, r6
 800c34a:	4639      	mov	r1, r7
 800c34c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c350:	f7f3 ff0a 	bl	8000168 <__aeabi_dsub>
 800c354:	2200      	movs	r2, #0
 800c356:	4b22      	ldr	r3, [pc, #136]	; (800c3e0 <__ieee754_rem_pio2+0x3e8>)
 800c358:	f7f4 f8be 	bl	80004d8 <__aeabi_dmul>
 800c35c:	460f      	mov	r7, r1
 800c35e:	4606      	mov	r6, r0
 800c360:	f7f4 fb6a 	bl	8000a38 <__aeabi_d2iz>
 800c364:	f7f4 f84e 	bl	8000404 <__aeabi_i2d>
 800c368:	4602      	mov	r2, r0
 800c36a:	460b      	mov	r3, r1
 800c36c:	4630      	mov	r0, r6
 800c36e:	4639      	mov	r1, r7
 800c370:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c374:	f7f3 fef8 	bl	8000168 <__aeabi_dsub>
 800c378:	2200      	movs	r2, #0
 800c37a:	4b19      	ldr	r3, [pc, #100]	; (800c3e0 <__ieee754_rem_pio2+0x3e8>)
 800c37c:	f7f4 f8ac 	bl	80004d8 <__aeabi_dmul>
 800c380:	f04f 0803 	mov.w	r8, #3
 800c384:	2600      	movs	r6, #0
 800c386:	2700      	movs	r7, #0
 800c388:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c38c:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 800c390:	4632      	mov	r2, r6
 800c392:	e879 0102 	ldrd	r0, r1, [r9], #-8
 800c396:	463b      	mov	r3, r7
 800c398:	46c2      	mov	sl, r8
 800c39a:	f108 38ff 	add.w	r8, r8, #4294967295
 800c39e:	f7f4 fb03 	bl	80009a8 <__aeabi_dcmpeq>
 800c3a2:	2800      	cmp	r0, #0
 800c3a4:	d1f4      	bne.n	800c390 <__ieee754_rem_pio2+0x398>
 800c3a6:	4b0f      	ldr	r3, [pc, #60]	; (800c3e4 <__ieee754_rem_pio2+0x3ec>)
 800c3a8:	462a      	mov	r2, r5
 800c3aa:	9301      	str	r3, [sp, #4]
 800c3ac:	2302      	movs	r3, #2
 800c3ae:	4621      	mov	r1, r4
 800c3b0:	9300      	str	r3, [sp, #0]
 800c3b2:	a806      	add	r0, sp, #24
 800c3b4:	4653      	mov	r3, sl
 800c3b6:	f000 f9ad 	bl	800c714 <__kernel_rem_pio2>
 800c3ba:	9b04      	ldr	r3, [sp, #16]
 800c3bc:	4605      	mov	r5, r0
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	f6bf ae51 	bge.w	800c066 <__ieee754_rem_pio2+0x6e>
 800c3c4:	e9d4 2100 	ldrd	r2, r1, [r4]
 800c3c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c3cc:	e9c4 2300 	strd	r2, r3, [r4]
 800c3d0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800c3d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c3d8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800c3dc:	e703      	b.n	800c1e6 <__ieee754_rem_pio2+0x1ee>
 800c3de:	bf00      	nop
 800c3e0:	41700000 	.word	0x41700000
 800c3e4:	0800e35c 	.word	0x0800e35c

0800c3e8 <__ieee754_atan2f>:
 800c3e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3ea:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c3ee:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800c3f2:	4603      	mov	r3, r0
 800c3f4:	dc05      	bgt.n	800c402 <__ieee754_atan2f+0x1a>
 800c3f6:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800c3fa:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800c3fe:	4607      	mov	r7, r0
 800c400:	dd04      	ble.n	800c40c <__ieee754_atan2f+0x24>
 800c402:	4618      	mov	r0, r3
 800c404:	f7f4 fbb6 	bl	8000b74 <__addsf3>
 800c408:	4603      	mov	r3, r0
 800c40a:	e011      	b.n	800c430 <__ieee754_atan2f+0x48>
 800c40c:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800c410:	d103      	bne.n	800c41a <__ieee754_atan2f+0x32>
 800c412:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c416:	f000 be79 	b.w	800d10c <atanf>
 800c41a:	178c      	asrs	r4, r1, #30
 800c41c:	f004 0402 	and.w	r4, r4, #2
 800c420:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800c424:	b932      	cbnz	r2, 800c434 <__ieee754_atan2f+0x4c>
 800c426:	2c02      	cmp	r4, #2
 800c428:	d04c      	beq.n	800c4c4 <__ieee754_atan2f+0xdc>
 800c42a:	2c03      	cmp	r4, #3
 800c42c:	d100      	bne.n	800c430 <__ieee754_atan2f+0x48>
 800c42e:	4b29      	ldr	r3, [pc, #164]	; (800c4d4 <__ieee754_atan2f+0xec>)
 800c430:	4618      	mov	r0, r3
 800c432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c434:	b91e      	cbnz	r6, 800c43e <__ieee754_atan2f+0x56>
 800c436:	2f00      	cmp	r7, #0
 800c438:	da4a      	bge.n	800c4d0 <__ieee754_atan2f+0xe8>
 800c43a:	4b27      	ldr	r3, [pc, #156]	; (800c4d8 <__ieee754_atan2f+0xf0>)
 800c43c:	e7f8      	b.n	800c430 <__ieee754_atan2f+0x48>
 800c43e:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800c442:	d10e      	bne.n	800c462 <__ieee754_atan2f+0x7a>
 800c444:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800c448:	f104 34ff 	add.w	r4, r4, #4294967295
 800c44c:	d105      	bne.n	800c45a <__ieee754_atan2f+0x72>
 800c44e:	2c02      	cmp	r4, #2
 800c450:	d83a      	bhi.n	800c4c8 <__ieee754_atan2f+0xe0>
 800c452:	4b22      	ldr	r3, [pc, #136]	; (800c4dc <__ieee754_atan2f+0xf4>)
 800c454:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800c458:	e7ea      	b.n	800c430 <__ieee754_atan2f+0x48>
 800c45a:	2c02      	cmp	r4, #2
 800c45c:	d836      	bhi.n	800c4cc <__ieee754_atan2f+0xe4>
 800c45e:	4b20      	ldr	r3, [pc, #128]	; (800c4e0 <__ieee754_atan2f+0xf8>)
 800c460:	e7f8      	b.n	800c454 <__ieee754_atan2f+0x6c>
 800c462:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800c466:	d0e6      	beq.n	800c436 <__ieee754_atan2f+0x4e>
 800c468:	1b92      	subs	r2, r2, r6
 800c46a:	f1b2 5ff4 	cmp.w	r2, #511705088	; 0x1e800000
 800c46e:	ea4f 50e2 	mov.w	r0, r2, asr #23
 800c472:	da17      	bge.n	800c4a4 <__ieee754_atan2f+0xbc>
 800c474:	2900      	cmp	r1, #0
 800c476:	da01      	bge.n	800c47c <__ieee754_atan2f+0x94>
 800c478:	303c      	adds	r0, #60	; 0x3c
 800c47a:	db15      	blt.n	800c4a8 <__ieee754_atan2f+0xc0>
 800c47c:	4618      	mov	r0, r3
 800c47e:	f7f4 fd35 	bl	8000eec <__aeabi_fdiv>
 800c482:	f000 ff4f 	bl	800d324 <fabsf>
 800c486:	f000 fe41 	bl	800d10c <atanf>
 800c48a:	4603      	mov	r3, r0
 800c48c:	2c01      	cmp	r4, #1
 800c48e:	d00d      	beq.n	800c4ac <__ieee754_atan2f+0xc4>
 800c490:	2c02      	cmp	r4, #2
 800c492:	d00e      	beq.n	800c4b2 <__ieee754_atan2f+0xca>
 800c494:	2c00      	cmp	r4, #0
 800c496:	d0cb      	beq.n	800c430 <__ieee754_atan2f+0x48>
 800c498:	4912      	ldr	r1, [pc, #72]	; (800c4e4 <__ieee754_atan2f+0xfc>)
 800c49a:	4618      	mov	r0, r3
 800c49c:	f7f4 fb6a 	bl	8000b74 <__addsf3>
 800c4a0:	4911      	ldr	r1, [pc, #68]	; (800c4e8 <__ieee754_atan2f+0x100>)
 800c4a2:	e00c      	b.n	800c4be <__ieee754_atan2f+0xd6>
 800c4a4:	4b11      	ldr	r3, [pc, #68]	; (800c4ec <__ieee754_atan2f+0x104>)
 800c4a6:	e7f1      	b.n	800c48c <__ieee754_atan2f+0xa4>
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	e7ef      	b.n	800c48c <__ieee754_atan2f+0xa4>
 800c4ac:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c4b0:	e7be      	b.n	800c430 <__ieee754_atan2f+0x48>
 800c4b2:	490c      	ldr	r1, [pc, #48]	; (800c4e4 <__ieee754_atan2f+0xfc>)
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	f7f4 fb5d 	bl	8000b74 <__addsf3>
 800c4ba:	4601      	mov	r1, r0
 800c4bc:	480a      	ldr	r0, [pc, #40]	; (800c4e8 <__ieee754_atan2f+0x100>)
 800c4be:	f7f4 fb57 	bl	8000b70 <__aeabi_fsub>
 800c4c2:	e7a1      	b.n	800c408 <__ieee754_atan2f+0x20>
 800c4c4:	4b08      	ldr	r3, [pc, #32]	; (800c4e8 <__ieee754_atan2f+0x100>)
 800c4c6:	e7b3      	b.n	800c430 <__ieee754_atan2f+0x48>
 800c4c8:	4b09      	ldr	r3, [pc, #36]	; (800c4f0 <__ieee754_atan2f+0x108>)
 800c4ca:	e7b1      	b.n	800c430 <__ieee754_atan2f+0x48>
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	e7af      	b.n	800c430 <__ieee754_atan2f+0x48>
 800c4d0:	4b06      	ldr	r3, [pc, #24]	; (800c4ec <__ieee754_atan2f+0x104>)
 800c4d2:	e7ad      	b.n	800c430 <__ieee754_atan2f+0x48>
 800c4d4:	c0490fdb 	.word	0xc0490fdb
 800c4d8:	bfc90fdb 	.word	0xbfc90fdb
 800c4dc:	0800e464 	.word	0x0800e464
 800c4e0:	0800e470 	.word	0x0800e470
 800c4e4:	33bbbd2e 	.word	0x33bbbd2e
 800c4e8:	40490fdb 	.word	0x40490fdb
 800c4ec:	3fc90fdb 	.word	0x3fc90fdb
 800c4f0:	3f490fdb 	.word	0x3f490fdb

0800c4f4 <__ieee754_sqrtf>:
 800c4f4:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800c4f8:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800c4fc:	b570      	push	{r4, r5, r6, lr}
 800c4fe:	4603      	mov	r3, r0
 800c500:	4604      	mov	r4, r0
 800c502:	d309      	bcc.n	800c518 <__ieee754_sqrtf+0x24>
 800c504:	4601      	mov	r1, r0
 800c506:	f7f4 fc3d 	bl	8000d84 <__aeabi_fmul>
 800c50a:	4601      	mov	r1, r0
 800c50c:	4620      	mov	r0, r4
 800c50e:	f7f4 fb31 	bl	8000b74 <__addsf3>
 800c512:	4604      	mov	r4, r0
 800c514:	4620      	mov	r0, r4
 800c516:	bd70      	pop	{r4, r5, r6, pc}
 800c518:	2a00      	cmp	r2, #0
 800c51a:	d0fb      	beq.n	800c514 <__ieee754_sqrtf+0x20>
 800c51c:	2800      	cmp	r0, #0
 800c51e:	da06      	bge.n	800c52e <__ieee754_sqrtf+0x3a>
 800c520:	4601      	mov	r1, r0
 800c522:	f7f4 fb25 	bl	8000b70 <__aeabi_fsub>
 800c526:	4601      	mov	r1, r0
 800c528:	f7f4 fce0 	bl	8000eec <__aeabi_fdiv>
 800c52c:	e7f1      	b.n	800c512 <__ieee754_sqrtf+0x1e>
 800c52e:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 800c532:	ea4f 51e0 	mov.w	r1, r0, asr #23
 800c536:	d029      	beq.n	800c58c <__ieee754_sqrtf+0x98>
 800c538:	f3c3 0216 	ubfx	r2, r3, #0, #23
 800c53c:	07cb      	lsls	r3, r1, #31
 800c53e:	f04f 0300 	mov.w	r3, #0
 800c542:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 800c546:	f04f 0419 	mov.w	r4, #25
 800c54a:	461e      	mov	r6, r3
 800c54c:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800c550:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800c554:	bf58      	it	pl
 800c556:	0052      	lslpl	r2, r2, #1
 800c558:	1040      	asrs	r0, r0, #1
 800c55a:	0052      	lsls	r2, r2, #1
 800c55c:	1875      	adds	r5, r6, r1
 800c55e:	4295      	cmp	r5, r2
 800c560:	bfde      	ittt	le
 800c562:	186e      	addle	r6, r5, r1
 800c564:	1b52      	suble	r2, r2, r5
 800c566:	185b      	addle	r3, r3, r1
 800c568:	3c01      	subs	r4, #1
 800c56a:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800c56e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800c572:	d1f3      	bne.n	800c55c <__ieee754_sqrtf+0x68>
 800c574:	b112      	cbz	r2, 800c57c <__ieee754_sqrtf+0x88>
 800c576:	3301      	adds	r3, #1
 800c578:	f023 0301 	bic.w	r3, r3, #1
 800c57c:	105c      	asrs	r4, r3, #1
 800c57e:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 800c582:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 800c586:	e7c5      	b.n	800c514 <__ieee754_sqrtf+0x20>
 800c588:	005b      	lsls	r3, r3, #1
 800c58a:	3201      	adds	r2, #1
 800c58c:	0218      	lsls	r0, r3, #8
 800c58e:	d5fb      	bpl.n	800c588 <__ieee754_sqrtf+0x94>
 800c590:	3a01      	subs	r2, #1
 800c592:	1a89      	subs	r1, r1, r2
 800c594:	e7d0      	b.n	800c538 <__ieee754_sqrtf+0x44>
	...

0800c598 <__kernel_cos>:
 800c598:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c59c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c5a0:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800c5a4:	4680      	mov	r8, r0
 800c5a6:	460f      	mov	r7, r1
 800c5a8:	e9cd 2300 	strd	r2, r3, [sp]
 800c5ac:	da04      	bge.n	800c5b8 <__kernel_cos+0x20>
 800c5ae:	f7f4 fa43 	bl	8000a38 <__aeabi_d2iz>
 800c5b2:	2800      	cmp	r0, #0
 800c5b4:	f000 8086 	beq.w	800c6c4 <__kernel_cos+0x12c>
 800c5b8:	4642      	mov	r2, r8
 800c5ba:	463b      	mov	r3, r7
 800c5bc:	4640      	mov	r0, r8
 800c5be:	4639      	mov	r1, r7
 800c5c0:	f7f3 ff8a 	bl	80004d8 <__aeabi_dmul>
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	4b4e      	ldr	r3, [pc, #312]	; (800c700 <__kernel_cos+0x168>)
 800c5c8:	4604      	mov	r4, r0
 800c5ca:	460d      	mov	r5, r1
 800c5cc:	f7f3 ff84 	bl	80004d8 <__aeabi_dmul>
 800c5d0:	a33f      	add	r3, pc, #252	; (adr r3, 800c6d0 <__kernel_cos+0x138>)
 800c5d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5d6:	4682      	mov	sl, r0
 800c5d8:	468b      	mov	fp, r1
 800c5da:	4620      	mov	r0, r4
 800c5dc:	4629      	mov	r1, r5
 800c5de:	f7f3 ff7b 	bl	80004d8 <__aeabi_dmul>
 800c5e2:	a33d      	add	r3, pc, #244	; (adr r3, 800c6d8 <__kernel_cos+0x140>)
 800c5e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5e8:	f7f3 fdc0 	bl	800016c <__adddf3>
 800c5ec:	4622      	mov	r2, r4
 800c5ee:	462b      	mov	r3, r5
 800c5f0:	f7f3 ff72 	bl	80004d8 <__aeabi_dmul>
 800c5f4:	a33a      	add	r3, pc, #232	; (adr r3, 800c6e0 <__kernel_cos+0x148>)
 800c5f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5fa:	f7f3 fdb5 	bl	8000168 <__aeabi_dsub>
 800c5fe:	4622      	mov	r2, r4
 800c600:	462b      	mov	r3, r5
 800c602:	f7f3 ff69 	bl	80004d8 <__aeabi_dmul>
 800c606:	a338      	add	r3, pc, #224	; (adr r3, 800c6e8 <__kernel_cos+0x150>)
 800c608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c60c:	f7f3 fdae 	bl	800016c <__adddf3>
 800c610:	4622      	mov	r2, r4
 800c612:	462b      	mov	r3, r5
 800c614:	f7f3 ff60 	bl	80004d8 <__aeabi_dmul>
 800c618:	a335      	add	r3, pc, #212	; (adr r3, 800c6f0 <__kernel_cos+0x158>)
 800c61a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c61e:	f7f3 fda3 	bl	8000168 <__aeabi_dsub>
 800c622:	4622      	mov	r2, r4
 800c624:	462b      	mov	r3, r5
 800c626:	f7f3 ff57 	bl	80004d8 <__aeabi_dmul>
 800c62a:	a333      	add	r3, pc, #204	; (adr r3, 800c6f8 <__kernel_cos+0x160>)
 800c62c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c630:	f7f3 fd9c 	bl	800016c <__adddf3>
 800c634:	4622      	mov	r2, r4
 800c636:	462b      	mov	r3, r5
 800c638:	f7f3 ff4e 	bl	80004d8 <__aeabi_dmul>
 800c63c:	4622      	mov	r2, r4
 800c63e:	462b      	mov	r3, r5
 800c640:	f7f3 ff4a 	bl	80004d8 <__aeabi_dmul>
 800c644:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c648:	4604      	mov	r4, r0
 800c64a:	460d      	mov	r5, r1
 800c64c:	4640      	mov	r0, r8
 800c64e:	4639      	mov	r1, r7
 800c650:	f7f3 ff42 	bl	80004d8 <__aeabi_dmul>
 800c654:	460b      	mov	r3, r1
 800c656:	4602      	mov	r2, r0
 800c658:	4629      	mov	r1, r5
 800c65a:	4620      	mov	r0, r4
 800c65c:	f7f3 fd84 	bl	8000168 <__aeabi_dsub>
 800c660:	4b28      	ldr	r3, [pc, #160]	; (800c704 <__kernel_cos+0x16c>)
 800c662:	4680      	mov	r8, r0
 800c664:	429e      	cmp	r6, r3
 800c666:	4689      	mov	r9, r1
 800c668:	dc0e      	bgt.n	800c688 <__kernel_cos+0xf0>
 800c66a:	4602      	mov	r2, r0
 800c66c:	460b      	mov	r3, r1
 800c66e:	4650      	mov	r0, sl
 800c670:	4659      	mov	r1, fp
 800c672:	f7f3 fd79 	bl	8000168 <__aeabi_dsub>
 800c676:	4602      	mov	r2, r0
 800c678:	2000      	movs	r0, #0
 800c67a:	460b      	mov	r3, r1
 800c67c:	4922      	ldr	r1, [pc, #136]	; (800c708 <__kernel_cos+0x170>)
 800c67e:	f7f3 fd73 	bl	8000168 <__aeabi_dsub>
 800c682:	b003      	add	sp, #12
 800c684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c688:	2400      	movs	r4, #0
 800c68a:	4b20      	ldr	r3, [pc, #128]	; (800c70c <__kernel_cos+0x174>)
 800c68c:	4622      	mov	r2, r4
 800c68e:	429e      	cmp	r6, r3
 800c690:	bfcc      	ite	gt
 800c692:	4d1f      	ldrgt	r5, [pc, #124]	; (800c710 <__kernel_cos+0x178>)
 800c694:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800c698:	462b      	mov	r3, r5
 800c69a:	2000      	movs	r0, #0
 800c69c:	491a      	ldr	r1, [pc, #104]	; (800c708 <__kernel_cos+0x170>)
 800c69e:	f7f3 fd63 	bl	8000168 <__aeabi_dsub>
 800c6a2:	4622      	mov	r2, r4
 800c6a4:	4606      	mov	r6, r0
 800c6a6:	460f      	mov	r7, r1
 800c6a8:	462b      	mov	r3, r5
 800c6aa:	4650      	mov	r0, sl
 800c6ac:	4659      	mov	r1, fp
 800c6ae:	f7f3 fd5b 	bl	8000168 <__aeabi_dsub>
 800c6b2:	4642      	mov	r2, r8
 800c6b4:	464b      	mov	r3, r9
 800c6b6:	f7f3 fd57 	bl	8000168 <__aeabi_dsub>
 800c6ba:	4602      	mov	r2, r0
 800c6bc:	460b      	mov	r3, r1
 800c6be:	4630      	mov	r0, r6
 800c6c0:	4639      	mov	r1, r7
 800c6c2:	e7dc      	b.n	800c67e <__kernel_cos+0xe6>
 800c6c4:	2000      	movs	r0, #0
 800c6c6:	4910      	ldr	r1, [pc, #64]	; (800c708 <__kernel_cos+0x170>)
 800c6c8:	e7db      	b.n	800c682 <__kernel_cos+0xea>
 800c6ca:	bf00      	nop
 800c6cc:	f3af 8000 	nop.w
 800c6d0:	be8838d4 	.word	0xbe8838d4
 800c6d4:	bda8fae9 	.word	0xbda8fae9
 800c6d8:	bdb4b1c4 	.word	0xbdb4b1c4
 800c6dc:	3e21ee9e 	.word	0x3e21ee9e
 800c6e0:	809c52ad 	.word	0x809c52ad
 800c6e4:	3e927e4f 	.word	0x3e927e4f
 800c6e8:	19cb1590 	.word	0x19cb1590
 800c6ec:	3efa01a0 	.word	0x3efa01a0
 800c6f0:	16c15177 	.word	0x16c15177
 800c6f4:	3f56c16c 	.word	0x3f56c16c
 800c6f8:	5555554c 	.word	0x5555554c
 800c6fc:	3fa55555 	.word	0x3fa55555
 800c700:	3fe00000 	.word	0x3fe00000
 800c704:	3fd33332 	.word	0x3fd33332
 800c708:	3ff00000 	.word	0x3ff00000
 800c70c:	3fe90000 	.word	0x3fe90000
 800c710:	3fd20000 	.word	0x3fd20000

0800c714 <__kernel_rem_pio2>:
 800c714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c718:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800c71c:	9308      	str	r3, [sp, #32]
 800c71e:	9106      	str	r1, [sp, #24]
 800c720:	4bb6      	ldr	r3, [pc, #728]	; (800c9fc <__kernel_rem_pio2+0x2e8>)
 800c722:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800c724:	f112 0f14 	cmn.w	r2, #20
 800c728:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c72c:	bfa8      	it	ge
 800c72e:	1ed4      	subge	r4, r2, #3
 800c730:	9302      	str	r3, [sp, #8]
 800c732:	9b08      	ldr	r3, [sp, #32]
 800c734:	bfb8      	it	lt
 800c736:	2400      	movlt	r4, #0
 800c738:	f103 33ff 	add.w	r3, r3, #4294967295
 800c73c:	9307      	str	r3, [sp, #28]
 800c73e:	bfa4      	itt	ge
 800c740:	2318      	movge	r3, #24
 800c742:	fb94 f4f3 	sdivge	r4, r4, r3
 800c746:	f06f 0317 	mvn.w	r3, #23
 800c74a:	fb04 3303 	mla	r3, r4, r3, r3
 800c74e:	eb03 0b02 	add.w	fp, r3, r2
 800c752:	9a07      	ldr	r2, [sp, #28]
 800c754:	9b02      	ldr	r3, [sp, #8]
 800c756:	1aa7      	subs	r7, r4, r2
 800c758:	eb03 0802 	add.w	r8, r3, r2
 800c75c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800c75e:	2500      	movs	r5, #0
 800c760:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800c764:	2200      	movs	r2, #0
 800c766:	2300      	movs	r3, #0
 800c768:	9009      	str	r0, [sp, #36]	; 0x24
 800c76a:	ae20      	add	r6, sp, #128	; 0x80
 800c76c:	4545      	cmp	r5, r8
 800c76e:	dd14      	ble.n	800c79a <__kernel_rem_pio2+0x86>
 800c770:	f04f 0800 	mov.w	r8, #0
 800c774:	9a08      	ldr	r2, [sp, #32]
 800c776:	ab20      	add	r3, sp, #128	; 0x80
 800c778:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 800c77c:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 800c780:	9b02      	ldr	r3, [sp, #8]
 800c782:	4598      	cmp	r8, r3
 800c784:	dc35      	bgt.n	800c7f2 <__kernel_rem_pio2+0xde>
 800c786:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c788:	2200      	movs	r2, #0
 800c78a:	f1a3 0908 	sub.w	r9, r3, #8
 800c78e:	2300      	movs	r3, #0
 800c790:	462f      	mov	r7, r5
 800c792:	2600      	movs	r6, #0
 800c794:	e9cd 2300 	strd	r2, r3, [sp]
 800c798:	e01f      	b.n	800c7da <__kernel_rem_pio2+0xc6>
 800c79a:	42ef      	cmn	r7, r5
 800c79c:	d40b      	bmi.n	800c7b6 <__kernel_rem_pio2+0xa2>
 800c79e:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800c7a2:	e9cd 2300 	strd	r2, r3, [sp]
 800c7a6:	f7f3 fe2d 	bl	8000404 <__aeabi_i2d>
 800c7aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c7ae:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c7b2:	3501      	adds	r5, #1
 800c7b4:	e7da      	b.n	800c76c <__kernel_rem_pio2+0x58>
 800c7b6:	4610      	mov	r0, r2
 800c7b8:	4619      	mov	r1, r3
 800c7ba:	e7f8      	b.n	800c7ae <__kernel_rem_pio2+0x9a>
 800c7bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c7c0:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800c7c4:	f7f3 fe88 	bl	80004d8 <__aeabi_dmul>
 800c7c8:	4602      	mov	r2, r0
 800c7ca:	460b      	mov	r3, r1
 800c7cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c7d0:	f7f3 fccc 	bl	800016c <__adddf3>
 800c7d4:	e9cd 0100 	strd	r0, r1, [sp]
 800c7d8:	3601      	adds	r6, #1
 800c7da:	9b07      	ldr	r3, [sp, #28]
 800c7dc:	3f08      	subs	r7, #8
 800c7de:	429e      	cmp	r6, r3
 800c7e0:	ddec      	ble.n	800c7bc <__kernel_rem_pio2+0xa8>
 800c7e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c7e6:	f108 0801 	add.w	r8, r8, #1
 800c7ea:	e8ea 2302 	strd	r2, r3, [sl], #8
 800c7ee:	3508      	adds	r5, #8
 800c7f0:	e7c6      	b.n	800c780 <__kernel_rem_pio2+0x6c>
 800c7f2:	9b02      	ldr	r3, [sp, #8]
 800c7f4:	aa0c      	add	r2, sp, #48	; 0x30
 800c7f6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c7fa:	930b      	str	r3, [sp, #44]	; 0x2c
 800c7fc:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800c7fe:	9e02      	ldr	r6, [sp, #8]
 800c800:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c804:	930a      	str	r3, [sp, #40]	; 0x28
 800c806:	ab98      	add	r3, sp, #608	; 0x260
 800c808:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c80c:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 800c810:	ab70      	add	r3, sp, #448	; 0x1c0
 800c812:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 800c816:	46d0      	mov	r8, sl
 800c818:	46b1      	mov	r9, r6
 800c81a:	af0c      	add	r7, sp, #48	; 0x30
 800c81c:	9700      	str	r7, [sp, #0]
 800c81e:	f1b9 0f00 	cmp.w	r9, #0
 800c822:	f1a8 0808 	sub.w	r8, r8, #8
 800c826:	dc71      	bgt.n	800c90c <__kernel_rem_pio2+0x1f8>
 800c828:	465a      	mov	r2, fp
 800c82a:	4620      	mov	r0, r4
 800c82c:	4629      	mov	r1, r5
 800c82e:	f000 fbef 	bl	800d010 <scalbn>
 800c832:	2200      	movs	r2, #0
 800c834:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800c838:	4604      	mov	r4, r0
 800c83a:	460d      	mov	r5, r1
 800c83c:	f7f3 fe4c 	bl	80004d8 <__aeabi_dmul>
 800c840:	f000 fb66 	bl	800cf10 <floor>
 800c844:	2200      	movs	r2, #0
 800c846:	4b6e      	ldr	r3, [pc, #440]	; (800ca00 <__kernel_rem_pio2+0x2ec>)
 800c848:	f7f3 fe46 	bl	80004d8 <__aeabi_dmul>
 800c84c:	4602      	mov	r2, r0
 800c84e:	460b      	mov	r3, r1
 800c850:	4620      	mov	r0, r4
 800c852:	4629      	mov	r1, r5
 800c854:	f7f3 fc88 	bl	8000168 <__aeabi_dsub>
 800c858:	460d      	mov	r5, r1
 800c85a:	4604      	mov	r4, r0
 800c85c:	f7f4 f8ec 	bl	8000a38 <__aeabi_d2iz>
 800c860:	9004      	str	r0, [sp, #16]
 800c862:	f7f3 fdcf 	bl	8000404 <__aeabi_i2d>
 800c866:	4602      	mov	r2, r0
 800c868:	460b      	mov	r3, r1
 800c86a:	4620      	mov	r0, r4
 800c86c:	4629      	mov	r1, r5
 800c86e:	f7f3 fc7b 	bl	8000168 <__aeabi_dsub>
 800c872:	f1bb 0f00 	cmp.w	fp, #0
 800c876:	4680      	mov	r8, r0
 800c878:	4689      	mov	r9, r1
 800c87a:	dd70      	ble.n	800c95e <__kernel_rem_pio2+0x24a>
 800c87c:	1e72      	subs	r2, r6, #1
 800c87e:	ab0c      	add	r3, sp, #48	; 0x30
 800c880:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800c884:	9c04      	ldr	r4, [sp, #16]
 800c886:	f1cb 0118 	rsb	r1, fp, #24
 800c88a:	fa40 f301 	asr.w	r3, r0, r1
 800c88e:	441c      	add	r4, r3
 800c890:	408b      	lsls	r3, r1
 800c892:	1ac0      	subs	r0, r0, r3
 800c894:	ab0c      	add	r3, sp, #48	; 0x30
 800c896:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800c89a:	f1cb 0317 	rsb	r3, fp, #23
 800c89e:	9404      	str	r4, [sp, #16]
 800c8a0:	fa40 f303 	asr.w	r3, r0, r3
 800c8a4:	9300      	str	r3, [sp, #0]
 800c8a6:	9b00      	ldr	r3, [sp, #0]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	dd66      	ble.n	800c97a <__kernel_rem_pio2+0x266>
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800c8b2:	4614      	mov	r4, r2
 800c8b4:	9b04      	ldr	r3, [sp, #16]
 800c8b6:	3301      	adds	r3, #1
 800c8b8:	9304      	str	r3, [sp, #16]
 800c8ba:	4296      	cmp	r6, r2
 800c8bc:	f300 80ac 	bgt.w	800ca18 <__kernel_rem_pio2+0x304>
 800c8c0:	f1bb 0f00 	cmp.w	fp, #0
 800c8c4:	dd07      	ble.n	800c8d6 <__kernel_rem_pio2+0x1c2>
 800c8c6:	f1bb 0f01 	cmp.w	fp, #1
 800c8ca:	f000 80b4 	beq.w	800ca36 <__kernel_rem_pio2+0x322>
 800c8ce:	f1bb 0f02 	cmp.w	fp, #2
 800c8d2:	f000 80ba 	beq.w	800ca4a <__kernel_rem_pio2+0x336>
 800c8d6:	9b00      	ldr	r3, [sp, #0]
 800c8d8:	2b02      	cmp	r3, #2
 800c8da:	d14e      	bne.n	800c97a <__kernel_rem_pio2+0x266>
 800c8dc:	4642      	mov	r2, r8
 800c8de:	464b      	mov	r3, r9
 800c8e0:	2000      	movs	r0, #0
 800c8e2:	4948      	ldr	r1, [pc, #288]	; (800ca04 <__kernel_rem_pio2+0x2f0>)
 800c8e4:	f7f3 fc40 	bl	8000168 <__aeabi_dsub>
 800c8e8:	4680      	mov	r8, r0
 800c8ea:	4689      	mov	r9, r1
 800c8ec:	2c00      	cmp	r4, #0
 800c8ee:	d044      	beq.n	800c97a <__kernel_rem_pio2+0x266>
 800c8f0:	465a      	mov	r2, fp
 800c8f2:	2000      	movs	r0, #0
 800c8f4:	4943      	ldr	r1, [pc, #268]	; (800ca04 <__kernel_rem_pio2+0x2f0>)
 800c8f6:	f000 fb8b 	bl	800d010 <scalbn>
 800c8fa:	4602      	mov	r2, r0
 800c8fc:	460b      	mov	r3, r1
 800c8fe:	4640      	mov	r0, r8
 800c900:	4649      	mov	r1, r9
 800c902:	f7f3 fc31 	bl	8000168 <__aeabi_dsub>
 800c906:	4680      	mov	r8, r0
 800c908:	4689      	mov	r9, r1
 800c90a:	e036      	b.n	800c97a <__kernel_rem_pio2+0x266>
 800c90c:	2200      	movs	r2, #0
 800c90e:	4b3e      	ldr	r3, [pc, #248]	; (800ca08 <__kernel_rem_pio2+0x2f4>)
 800c910:	4620      	mov	r0, r4
 800c912:	4629      	mov	r1, r5
 800c914:	f7f3 fde0 	bl	80004d8 <__aeabi_dmul>
 800c918:	f7f4 f88e 	bl	8000a38 <__aeabi_d2iz>
 800c91c:	f7f3 fd72 	bl	8000404 <__aeabi_i2d>
 800c920:	4602      	mov	r2, r0
 800c922:	460b      	mov	r3, r1
 800c924:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c928:	2200      	movs	r2, #0
 800c92a:	4b38      	ldr	r3, [pc, #224]	; (800ca0c <__kernel_rem_pio2+0x2f8>)
 800c92c:	f7f3 fdd4 	bl	80004d8 <__aeabi_dmul>
 800c930:	4602      	mov	r2, r0
 800c932:	460b      	mov	r3, r1
 800c934:	4620      	mov	r0, r4
 800c936:	4629      	mov	r1, r5
 800c938:	f7f3 fc16 	bl	8000168 <__aeabi_dsub>
 800c93c:	f7f4 f87c 	bl	8000a38 <__aeabi_d2iz>
 800c940:	9b00      	ldr	r3, [sp, #0]
 800c942:	f109 39ff 	add.w	r9, r9, #4294967295
 800c946:	f843 0b04 	str.w	r0, [r3], #4
 800c94a:	9300      	str	r3, [sp, #0]
 800c94c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c950:	e9d8 2300 	ldrd	r2, r3, [r8]
 800c954:	f7f3 fc0a 	bl	800016c <__adddf3>
 800c958:	4604      	mov	r4, r0
 800c95a:	460d      	mov	r5, r1
 800c95c:	e75f      	b.n	800c81e <__kernel_rem_pio2+0x10a>
 800c95e:	d105      	bne.n	800c96c <__kernel_rem_pio2+0x258>
 800c960:	1e73      	subs	r3, r6, #1
 800c962:	aa0c      	add	r2, sp, #48	; 0x30
 800c964:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c968:	15c3      	asrs	r3, r0, #23
 800c96a:	e79b      	b.n	800c8a4 <__kernel_rem_pio2+0x190>
 800c96c:	2200      	movs	r2, #0
 800c96e:	4b28      	ldr	r3, [pc, #160]	; (800ca10 <__kernel_rem_pio2+0x2fc>)
 800c970:	f7f4 f838 	bl	80009e4 <__aeabi_dcmpge>
 800c974:	2800      	cmp	r0, #0
 800c976:	d13e      	bne.n	800c9f6 <__kernel_rem_pio2+0x2e2>
 800c978:	9000      	str	r0, [sp, #0]
 800c97a:	2200      	movs	r2, #0
 800c97c:	2300      	movs	r3, #0
 800c97e:	4640      	mov	r0, r8
 800c980:	4649      	mov	r1, r9
 800c982:	f7f4 f811 	bl	80009a8 <__aeabi_dcmpeq>
 800c986:	2800      	cmp	r0, #0
 800c988:	f000 80b1 	beq.w	800caee <__kernel_rem_pio2+0x3da>
 800c98c:	1e74      	subs	r4, r6, #1
 800c98e:	4623      	mov	r3, r4
 800c990:	2200      	movs	r2, #0
 800c992:	9902      	ldr	r1, [sp, #8]
 800c994:	428b      	cmp	r3, r1
 800c996:	da5f      	bge.n	800ca58 <__kernel_rem_pio2+0x344>
 800c998:	2a00      	cmp	r2, #0
 800c99a:	d074      	beq.n	800ca86 <__kernel_rem_pio2+0x372>
 800c99c:	ab0c      	add	r3, sp, #48	; 0x30
 800c99e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800c9a2:	f1ab 0b18 	sub.w	fp, fp, #24
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	f000 809f 	beq.w	800caea <__kernel_rem_pio2+0x3d6>
 800c9ac:	465a      	mov	r2, fp
 800c9ae:	2000      	movs	r0, #0
 800c9b0:	4914      	ldr	r1, [pc, #80]	; (800ca04 <__kernel_rem_pio2+0x2f0>)
 800c9b2:	f000 fb2d 	bl	800d010 <scalbn>
 800c9b6:	46a2      	mov	sl, r4
 800c9b8:	4606      	mov	r6, r0
 800c9ba:	460f      	mov	r7, r1
 800c9bc:	f04f 0800 	mov.w	r8, #0
 800c9c0:	ab70      	add	r3, sp, #448	; 0x1c0
 800c9c2:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800ca08 <__kernel_rem_pio2+0x2f4>
 800c9c6:	00e5      	lsls	r5, r4, #3
 800c9c8:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 800c9cc:	f1ba 0f00 	cmp.w	sl, #0
 800c9d0:	f280 80c3 	bge.w	800cb5a <__kernel_rem_pio2+0x446>
 800c9d4:	4626      	mov	r6, r4
 800c9d6:	2e00      	cmp	r6, #0
 800c9d8:	f2c0 80f5 	blt.w	800cbc6 <__kernel_rem_pio2+0x4b2>
 800c9dc:	4b0d      	ldr	r3, [pc, #52]	; (800ca14 <__kernel_rem_pio2+0x300>)
 800c9de:	f04f 0a00 	mov.w	sl, #0
 800c9e2:	9307      	str	r3, [sp, #28]
 800c9e4:	ab70      	add	r3, sp, #448	; 0x1c0
 800c9e6:	f04f 0b00 	mov.w	fp, #0
 800c9ea:	f04f 0800 	mov.w	r8, #0
 800c9ee:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800c9f2:	1ba7      	subs	r7, r4, r6
 800c9f4:	e0db      	b.n	800cbae <__kernel_rem_pio2+0x49a>
 800c9f6:	2302      	movs	r3, #2
 800c9f8:	9300      	str	r3, [sp, #0]
 800c9fa:	e757      	b.n	800c8ac <__kernel_rem_pio2+0x198>
 800c9fc:	0800e4c0 	.word	0x0800e4c0
 800ca00:	40200000 	.word	0x40200000
 800ca04:	3ff00000 	.word	0x3ff00000
 800ca08:	3e700000 	.word	0x3e700000
 800ca0c:	41700000 	.word	0x41700000
 800ca10:	3fe00000 	.word	0x3fe00000
 800ca14:	0800e480 	.word	0x0800e480
 800ca18:	683b      	ldr	r3, [r7, #0]
 800ca1a:	b944      	cbnz	r4, 800ca2e <__kernel_rem_pio2+0x31a>
 800ca1c:	b11b      	cbz	r3, 800ca26 <__kernel_rem_pio2+0x312>
 800ca1e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800ca22:	603b      	str	r3, [r7, #0]
 800ca24:	2301      	movs	r3, #1
 800ca26:	461c      	mov	r4, r3
 800ca28:	3201      	adds	r2, #1
 800ca2a:	3704      	adds	r7, #4
 800ca2c:	e745      	b.n	800c8ba <__kernel_rem_pio2+0x1a6>
 800ca2e:	1acb      	subs	r3, r1, r3
 800ca30:	603b      	str	r3, [r7, #0]
 800ca32:	4623      	mov	r3, r4
 800ca34:	e7f7      	b.n	800ca26 <__kernel_rem_pio2+0x312>
 800ca36:	1e72      	subs	r2, r6, #1
 800ca38:	ab0c      	add	r3, sp, #48	; 0x30
 800ca3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca3e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ca42:	a90c      	add	r1, sp, #48	; 0x30
 800ca44:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800ca48:	e745      	b.n	800c8d6 <__kernel_rem_pio2+0x1c2>
 800ca4a:	1e72      	subs	r2, r6, #1
 800ca4c:	ab0c      	add	r3, sp, #48	; 0x30
 800ca4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca52:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ca56:	e7f4      	b.n	800ca42 <__kernel_rem_pio2+0x32e>
 800ca58:	a90c      	add	r1, sp, #48	; 0x30
 800ca5a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800ca5e:	3b01      	subs	r3, #1
 800ca60:	430a      	orrs	r2, r1
 800ca62:	e796      	b.n	800c992 <__kernel_rem_pio2+0x27e>
 800ca64:	3401      	adds	r4, #1
 800ca66:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ca6a:	2a00      	cmp	r2, #0
 800ca6c:	d0fa      	beq.n	800ca64 <__kernel_rem_pio2+0x350>
 800ca6e:	9b08      	ldr	r3, [sp, #32]
 800ca70:	f106 0801 	add.w	r8, r6, #1
 800ca74:	18f5      	adds	r5, r6, r3
 800ca76:	ab20      	add	r3, sp, #128	; 0x80
 800ca78:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800ca7c:	4434      	add	r4, r6
 800ca7e:	4544      	cmp	r4, r8
 800ca80:	da04      	bge.n	800ca8c <__kernel_rem_pio2+0x378>
 800ca82:	4626      	mov	r6, r4
 800ca84:	e6bf      	b.n	800c806 <__kernel_rem_pio2+0xf2>
 800ca86:	2401      	movs	r4, #1
 800ca88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca8a:	e7ec      	b.n	800ca66 <__kernel_rem_pio2+0x352>
 800ca8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca8e:	f04f 0900 	mov.w	r9, #0
 800ca92:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800ca96:	f7f3 fcb5 	bl	8000404 <__aeabi_i2d>
 800ca9a:	2600      	movs	r6, #0
 800ca9c:	2700      	movs	r7, #0
 800ca9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800caa0:	e9c5 0100 	strd	r0, r1, [r5]
 800caa4:	3b08      	subs	r3, #8
 800caa6:	9300      	str	r3, [sp, #0]
 800caa8:	9504      	str	r5, [sp, #16]
 800caaa:	9b07      	ldr	r3, [sp, #28]
 800caac:	4599      	cmp	r9, r3
 800caae:	dd05      	ble.n	800cabc <__kernel_rem_pio2+0x3a8>
 800cab0:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 800cab4:	f108 0801 	add.w	r8, r8, #1
 800cab8:	3508      	adds	r5, #8
 800caba:	e7e0      	b.n	800ca7e <__kernel_rem_pio2+0x36a>
 800cabc:	f8dd c010 	ldr.w	ip, [sp, #16]
 800cac0:	9900      	ldr	r1, [sp, #0]
 800cac2:	f109 0901 	add.w	r9, r9, #1
 800cac6:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800caca:	9100      	str	r1, [sp, #0]
 800cacc:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 800cad0:	f8cd c010 	str.w	ip, [sp, #16]
 800cad4:	f7f3 fd00 	bl	80004d8 <__aeabi_dmul>
 800cad8:	4602      	mov	r2, r0
 800cada:	460b      	mov	r3, r1
 800cadc:	4630      	mov	r0, r6
 800cade:	4639      	mov	r1, r7
 800cae0:	f7f3 fb44 	bl	800016c <__adddf3>
 800cae4:	4606      	mov	r6, r0
 800cae6:	460f      	mov	r7, r1
 800cae8:	e7df      	b.n	800caaa <__kernel_rem_pio2+0x396>
 800caea:	3c01      	subs	r4, #1
 800caec:	e756      	b.n	800c99c <__kernel_rem_pio2+0x288>
 800caee:	f1cb 0200 	rsb	r2, fp, #0
 800caf2:	4640      	mov	r0, r8
 800caf4:	4649      	mov	r1, r9
 800caf6:	f000 fa8b 	bl	800d010 <scalbn>
 800cafa:	2200      	movs	r2, #0
 800cafc:	4ba4      	ldr	r3, [pc, #656]	; (800cd90 <__kernel_rem_pio2+0x67c>)
 800cafe:	4604      	mov	r4, r0
 800cb00:	460d      	mov	r5, r1
 800cb02:	f7f3 ff6f 	bl	80009e4 <__aeabi_dcmpge>
 800cb06:	b1f8      	cbz	r0, 800cb48 <__kernel_rem_pio2+0x434>
 800cb08:	2200      	movs	r2, #0
 800cb0a:	4ba2      	ldr	r3, [pc, #648]	; (800cd94 <__kernel_rem_pio2+0x680>)
 800cb0c:	4620      	mov	r0, r4
 800cb0e:	4629      	mov	r1, r5
 800cb10:	f7f3 fce2 	bl	80004d8 <__aeabi_dmul>
 800cb14:	f7f3 ff90 	bl	8000a38 <__aeabi_d2iz>
 800cb18:	4607      	mov	r7, r0
 800cb1a:	f7f3 fc73 	bl	8000404 <__aeabi_i2d>
 800cb1e:	2200      	movs	r2, #0
 800cb20:	4b9b      	ldr	r3, [pc, #620]	; (800cd90 <__kernel_rem_pio2+0x67c>)
 800cb22:	f7f3 fcd9 	bl	80004d8 <__aeabi_dmul>
 800cb26:	460b      	mov	r3, r1
 800cb28:	4602      	mov	r2, r0
 800cb2a:	4629      	mov	r1, r5
 800cb2c:	4620      	mov	r0, r4
 800cb2e:	f7f3 fb1b 	bl	8000168 <__aeabi_dsub>
 800cb32:	f7f3 ff81 	bl	8000a38 <__aeabi_d2iz>
 800cb36:	1c74      	adds	r4, r6, #1
 800cb38:	ab0c      	add	r3, sp, #48	; 0x30
 800cb3a:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800cb3e:	f10b 0b18 	add.w	fp, fp, #24
 800cb42:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 800cb46:	e731      	b.n	800c9ac <__kernel_rem_pio2+0x298>
 800cb48:	4620      	mov	r0, r4
 800cb4a:	4629      	mov	r1, r5
 800cb4c:	f7f3 ff74 	bl	8000a38 <__aeabi_d2iz>
 800cb50:	ab0c      	add	r3, sp, #48	; 0x30
 800cb52:	4634      	mov	r4, r6
 800cb54:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800cb58:	e728      	b.n	800c9ac <__kernel_rem_pio2+0x298>
 800cb5a:	ab0c      	add	r3, sp, #48	; 0x30
 800cb5c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800cb60:	f7f3 fc50 	bl	8000404 <__aeabi_i2d>
 800cb64:	4632      	mov	r2, r6
 800cb66:	463b      	mov	r3, r7
 800cb68:	f7f3 fcb6 	bl	80004d8 <__aeabi_dmul>
 800cb6c:	4642      	mov	r2, r8
 800cb6e:	e86b 0102 	strd	r0, r1, [fp], #-8
 800cb72:	464b      	mov	r3, r9
 800cb74:	4630      	mov	r0, r6
 800cb76:	4639      	mov	r1, r7
 800cb78:	f7f3 fcae 	bl	80004d8 <__aeabi_dmul>
 800cb7c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cb80:	4606      	mov	r6, r0
 800cb82:	460f      	mov	r7, r1
 800cb84:	e722      	b.n	800c9cc <__kernel_rem_pio2+0x2b8>
 800cb86:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800cb8a:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800cb8e:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 800cb92:	f8cd c01c 	str.w	ip, [sp, #28]
 800cb96:	f7f3 fc9f 	bl	80004d8 <__aeabi_dmul>
 800cb9a:	4602      	mov	r2, r0
 800cb9c:	460b      	mov	r3, r1
 800cb9e:	4650      	mov	r0, sl
 800cba0:	4659      	mov	r1, fp
 800cba2:	f7f3 fae3 	bl	800016c <__adddf3>
 800cba6:	4682      	mov	sl, r0
 800cba8:	468b      	mov	fp, r1
 800cbaa:	f108 0801 	add.w	r8, r8, #1
 800cbae:	9b02      	ldr	r3, [sp, #8]
 800cbb0:	4598      	cmp	r8, r3
 800cbb2:	dc01      	bgt.n	800cbb8 <__kernel_rem_pio2+0x4a4>
 800cbb4:	45b8      	cmp	r8, r7
 800cbb6:	dde6      	ble.n	800cb86 <__kernel_rem_pio2+0x472>
 800cbb8:	ab48      	add	r3, sp, #288	; 0x120
 800cbba:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800cbbe:	e9c7 ab00 	strd	sl, fp, [r7]
 800cbc2:	3e01      	subs	r6, #1
 800cbc4:	e707      	b.n	800c9d6 <__kernel_rem_pio2+0x2c2>
 800cbc6:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800cbc8:	2b02      	cmp	r3, #2
 800cbca:	dc09      	bgt.n	800cbe0 <__kernel_rem_pio2+0x4cc>
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	dc32      	bgt.n	800cc36 <__kernel_rem_pio2+0x522>
 800cbd0:	d05a      	beq.n	800cc88 <__kernel_rem_pio2+0x574>
 800cbd2:	9b04      	ldr	r3, [sp, #16]
 800cbd4:	f003 0007 	and.w	r0, r3, #7
 800cbd8:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800cbdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbe0:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800cbe2:	2b03      	cmp	r3, #3
 800cbe4:	d1f5      	bne.n	800cbd2 <__kernel_rem_pio2+0x4be>
 800cbe6:	ab48      	add	r3, sp, #288	; 0x120
 800cbe8:	441d      	add	r5, r3
 800cbea:	46aa      	mov	sl, r5
 800cbec:	46a3      	mov	fp, r4
 800cbee:	f1bb 0f00 	cmp.w	fp, #0
 800cbf2:	dc76      	bgt.n	800cce2 <__kernel_rem_pio2+0x5ce>
 800cbf4:	46aa      	mov	sl, r5
 800cbf6:	46a3      	mov	fp, r4
 800cbf8:	f1bb 0f01 	cmp.w	fp, #1
 800cbfc:	f300 8090 	bgt.w	800cd20 <__kernel_rem_pio2+0x60c>
 800cc00:	2700      	movs	r7, #0
 800cc02:	463e      	mov	r6, r7
 800cc04:	2c01      	cmp	r4, #1
 800cc06:	f300 80aa 	bgt.w	800cd5e <__kernel_rem_pio2+0x64a>
 800cc0a:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 800cc0e:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 800cc12:	9b00      	ldr	r3, [sp, #0]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	f040 80ac 	bne.w	800cd72 <__kernel_rem_pio2+0x65e>
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	462a      	mov	r2, r5
 800cc1e:	9806      	ldr	r0, [sp, #24]
 800cc20:	e9c0 2300 	strd	r2, r3, [r0]
 800cc24:	4622      	mov	r2, r4
 800cc26:	460b      	mov	r3, r1
 800cc28:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800cc2c:	463a      	mov	r2, r7
 800cc2e:	4633      	mov	r3, r6
 800cc30:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800cc34:	e7cd      	b.n	800cbd2 <__kernel_rem_pio2+0x4be>
 800cc36:	2000      	movs	r0, #0
 800cc38:	46a0      	mov	r8, r4
 800cc3a:	4601      	mov	r1, r0
 800cc3c:	ab48      	add	r3, sp, #288	; 0x120
 800cc3e:	441d      	add	r5, r3
 800cc40:	f1b8 0f00 	cmp.w	r8, #0
 800cc44:	da3a      	bge.n	800ccbc <__kernel_rem_pio2+0x5a8>
 800cc46:	9b00      	ldr	r3, [sp, #0]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d03e      	beq.n	800ccca <__kernel_rem_pio2+0x5b6>
 800cc4c:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 800cc50:	4602      	mov	r2, r0
 800cc52:	462b      	mov	r3, r5
 800cc54:	9d06      	ldr	r5, [sp, #24]
 800cc56:	2601      	movs	r6, #1
 800cc58:	e9c5 2300 	strd	r2, r3, [r5]
 800cc5c:	460b      	mov	r3, r1
 800cc5e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800cc62:	f7f3 fa81 	bl	8000168 <__aeabi_dsub>
 800cc66:	4684      	mov	ip, r0
 800cc68:	460f      	mov	r7, r1
 800cc6a:	ad48      	add	r5, sp, #288	; 0x120
 800cc6c:	42b4      	cmp	r4, r6
 800cc6e:	f105 0508 	add.w	r5, r5, #8
 800cc72:	da2c      	bge.n	800ccce <__kernel_rem_pio2+0x5ba>
 800cc74:	9b00      	ldr	r3, [sp, #0]
 800cc76:	b10b      	cbz	r3, 800cc7c <__kernel_rem_pio2+0x568>
 800cc78:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800cc7c:	4662      	mov	r2, ip
 800cc7e:	463b      	mov	r3, r7
 800cc80:	9906      	ldr	r1, [sp, #24]
 800cc82:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800cc86:	e7a4      	b.n	800cbd2 <__kernel_rem_pio2+0x4be>
 800cc88:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 800cc8a:	ab48      	add	r3, sp, #288	; 0x120
 800cc8c:	4637      	mov	r7, r6
 800cc8e:	441d      	add	r5, r3
 800cc90:	2c00      	cmp	r4, #0
 800cc92:	da09      	bge.n	800cca8 <__kernel_rem_pio2+0x594>
 800cc94:	9b00      	ldr	r3, [sp, #0]
 800cc96:	b10b      	cbz	r3, 800cc9c <__kernel_rem_pio2+0x588>
 800cc98:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800cc9c:	4632      	mov	r2, r6
 800cc9e:	463b      	mov	r3, r7
 800cca0:	9906      	ldr	r1, [sp, #24]
 800cca2:	e9c1 2300 	strd	r2, r3, [r1]
 800cca6:	e794      	b.n	800cbd2 <__kernel_rem_pio2+0x4be>
 800cca8:	4630      	mov	r0, r6
 800ccaa:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800ccae:	4639      	mov	r1, r7
 800ccb0:	f7f3 fa5c 	bl	800016c <__adddf3>
 800ccb4:	3c01      	subs	r4, #1
 800ccb6:	4606      	mov	r6, r0
 800ccb8:	460f      	mov	r7, r1
 800ccba:	e7e9      	b.n	800cc90 <__kernel_rem_pio2+0x57c>
 800ccbc:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800ccc0:	f7f3 fa54 	bl	800016c <__adddf3>
 800ccc4:	f108 38ff 	add.w	r8, r8, #4294967295
 800ccc8:	e7ba      	b.n	800cc40 <__kernel_rem_pio2+0x52c>
 800ccca:	460d      	mov	r5, r1
 800cccc:	e7c0      	b.n	800cc50 <__kernel_rem_pio2+0x53c>
 800ccce:	4660      	mov	r0, ip
 800ccd0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ccd4:	4639      	mov	r1, r7
 800ccd6:	f7f3 fa49 	bl	800016c <__adddf3>
 800ccda:	3601      	adds	r6, #1
 800ccdc:	4684      	mov	ip, r0
 800ccde:	460f      	mov	r7, r1
 800cce0:	e7c4      	b.n	800cc6c <__kernel_rem_pio2+0x558>
 800cce2:	e9da 6700 	ldrd	r6, r7, [sl]
 800cce6:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 800ccea:	4632      	mov	r2, r6
 800ccec:	463b      	mov	r3, r7
 800ccee:	4640      	mov	r0, r8
 800ccf0:	4649      	mov	r1, r9
 800ccf2:	f7f3 fa3b 	bl	800016c <__adddf3>
 800ccf6:	4602      	mov	r2, r0
 800ccf8:	460b      	mov	r3, r1
 800ccfa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ccfe:	4640      	mov	r0, r8
 800cd00:	4649      	mov	r1, r9
 800cd02:	f7f3 fa31 	bl	8000168 <__aeabi_dsub>
 800cd06:	4632      	mov	r2, r6
 800cd08:	463b      	mov	r3, r7
 800cd0a:	f7f3 fa2f 	bl	800016c <__adddf3>
 800cd0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cd12:	e86a 0102 	strd	r0, r1, [sl], #-8
 800cd16:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cd1a:	e9ca 2300 	strd	r2, r3, [sl]
 800cd1e:	e766      	b.n	800cbee <__kernel_rem_pio2+0x4da>
 800cd20:	e9da 8900 	ldrd	r8, r9, [sl]
 800cd24:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 800cd28:	4642      	mov	r2, r8
 800cd2a:	464b      	mov	r3, r9
 800cd2c:	4630      	mov	r0, r6
 800cd2e:	4639      	mov	r1, r7
 800cd30:	f7f3 fa1c 	bl	800016c <__adddf3>
 800cd34:	4602      	mov	r2, r0
 800cd36:	460b      	mov	r3, r1
 800cd38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cd3c:	4630      	mov	r0, r6
 800cd3e:	4639      	mov	r1, r7
 800cd40:	f7f3 fa12 	bl	8000168 <__aeabi_dsub>
 800cd44:	4642      	mov	r2, r8
 800cd46:	464b      	mov	r3, r9
 800cd48:	f7f3 fa10 	bl	800016c <__adddf3>
 800cd4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cd50:	e86a 0102 	strd	r0, r1, [sl], #-8
 800cd54:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cd58:	e9ca 2300 	strd	r2, r3, [sl]
 800cd5c:	e74c      	b.n	800cbf8 <__kernel_rem_pio2+0x4e4>
 800cd5e:	4638      	mov	r0, r7
 800cd60:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800cd64:	4631      	mov	r1, r6
 800cd66:	f7f3 fa01 	bl	800016c <__adddf3>
 800cd6a:	3c01      	subs	r4, #1
 800cd6c:	4607      	mov	r7, r0
 800cd6e:	460e      	mov	r6, r1
 800cd70:	e748      	b.n	800cc04 <__kernel_rem_pio2+0x4f0>
 800cd72:	9b06      	ldr	r3, [sp, #24]
 800cd74:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800cd78:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800cd7c:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800cd80:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800cd84:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800cd88:	601d      	str	r5, [r3, #0]
 800cd8a:	615e      	str	r6, [r3, #20]
 800cd8c:	e721      	b.n	800cbd2 <__kernel_rem_pio2+0x4be>
 800cd8e:	bf00      	nop
 800cd90:	41700000 	.word	0x41700000
 800cd94:	3e700000 	.word	0x3e700000

0800cd98 <__kernel_sin>:
 800cd98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd9c:	b086      	sub	sp, #24
 800cd9e:	e9cd 2300 	strd	r2, r3, [sp]
 800cda2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cda6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800cdaa:	4682      	mov	sl, r0
 800cdac:	460c      	mov	r4, r1
 800cdae:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800cdb0:	da03      	bge.n	800cdba <__kernel_sin+0x22>
 800cdb2:	f7f3 fe41 	bl	8000a38 <__aeabi_d2iz>
 800cdb6:	2800      	cmp	r0, #0
 800cdb8:	d050      	beq.n	800ce5c <__kernel_sin+0xc4>
 800cdba:	4652      	mov	r2, sl
 800cdbc:	4623      	mov	r3, r4
 800cdbe:	4650      	mov	r0, sl
 800cdc0:	4621      	mov	r1, r4
 800cdc2:	f7f3 fb89 	bl	80004d8 <__aeabi_dmul>
 800cdc6:	4606      	mov	r6, r0
 800cdc8:	460f      	mov	r7, r1
 800cdca:	4602      	mov	r2, r0
 800cdcc:	460b      	mov	r3, r1
 800cdce:	4650      	mov	r0, sl
 800cdd0:	4621      	mov	r1, r4
 800cdd2:	f7f3 fb81 	bl	80004d8 <__aeabi_dmul>
 800cdd6:	a33e      	add	r3, pc, #248	; (adr r3, 800ced0 <__kernel_sin+0x138>)
 800cdd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cddc:	4680      	mov	r8, r0
 800cdde:	4689      	mov	r9, r1
 800cde0:	4630      	mov	r0, r6
 800cde2:	4639      	mov	r1, r7
 800cde4:	f7f3 fb78 	bl	80004d8 <__aeabi_dmul>
 800cde8:	a33b      	add	r3, pc, #236	; (adr r3, 800ced8 <__kernel_sin+0x140>)
 800cdea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdee:	f7f3 f9bb 	bl	8000168 <__aeabi_dsub>
 800cdf2:	4632      	mov	r2, r6
 800cdf4:	463b      	mov	r3, r7
 800cdf6:	f7f3 fb6f 	bl	80004d8 <__aeabi_dmul>
 800cdfa:	a339      	add	r3, pc, #228	; (adr r3, 800cee0 <__kernel_sin+0x148>)
 800cdfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce00:	f7f3 f9b4 	bl	800016c <__adddf3>
 800ce04:	4632      	mov	r2, r6
 800ce06:	463b      	mov	r3, r7
 800ce08:	f7f3 fb66 	bl	80004d8 <__aeabi_dmul>
 800ce0c:	a336      	add	r3, pc, #216	; (adr r3, 800cee8 <__kernel_sin+0x150>)
 800ce0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce12:	f7f3 f9a9 	bl	8000168 <__aeabi_dsub>
 800ce16:	4632      	mov	r2, r6
 800ce18:	463b      	mov	r3, r7
 800ce1a:	f7f3 fb5d 	bl	80004d8 <__aeabi_dmul>
 800ce1e:	a334      	add	r3, pc, #208	; (adr r3, 800cef0 <__kernel_sin+0x158>)
 800ce20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce24:	f7f3 f9a2 	bl	800016c <__adddf3>
 800ce28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ce2c:	b9dd      	cbnz	r5, 800ce66 <__kernel_sin+0xce>
 800ce2e:	4602      	mov	r2, r0
 800ce30:	460b      	mov	r3, r1
 800ce32:	4630      	mov	r0, r6
 800ce34:	4639      	mov	r1, r7
 800ce36:	f7f3 fb4f 	bl	80004d8 <__aeabi_dmul>
 800ce3a:	a32f      	add	r3, pc, #188	; (adr r3, 800cef8 <__kernel_sin+0x160>)
 800ce3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce40:	f7f3 f992 	bl	8000168 <__aeabi_dsub>
 800ce44:	4642      	mov	r2, r8
 800ce46:	464b      	mov	r3, r9
 800ce48:	f7f3 fb46 	bl	80004d8 <__aeabi_dmul>
 800ce4c:	4602      	mov	r2, r0
 800ce4e:	460b      	mov	r3, r1
 800ce50:	4650      	mov	r0, sl
 800ce52:	4621      	mov	r1, r4
 800ce54:	f7f3 f98a 	bl	800016c <__adddf3>
 800ce58:	4682      	mov	sl, r0
 800ce5a:	460c      	mov	r4, r1
 800ce5c:	4650      	mov	r0, sl
 800ce5e:	4621      	mov	r1, r4
 800ce60:	b006      	add	sp, #24
 800ce62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce66:	2200      	movs	r2, #0
 800ce68:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ce6c:	4b24      	ldr	r3, [pc, #144]	; (800cf00 <__kernel_sin+0x168>)
 800ce6e:	f7f3 fb33 	bl	80004d8 <__aeabi_dmul>
 800ce72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ce76:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ce7a:	4640      	mov	r0, r8
 800ce7c:	4649      	mov	r1, r9
 800ce7e:	f7f3 fb2b 	bl	80004d8 <__aeabi_dmul>
 800ce82:	4602      	mov	r2, r0
 800ce84:	460b      	mov	r3, r1
 800ce86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ce8a:	f7f3 f96d 	bl	8000168 <__aeabi_dsub>
 800ce8e:	4632      	mov	r2, r6
 800ce90:	463b      	mov	r3, r7
 800ce92:	f7f3 fb21 	bl	80004d8 <__aeabi_dmul>
 800ce96:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ce9a:	f7f3 f965 	bl	8000168 <__aeabi_dsub>
 800ce9e:	a316      	add	r3, pc, #88	; (adr r3, 800cef8 <__kernel_sin+0x160>)
 800cea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cea4:	4606      	mov	r6, r0
 800cea6:	460f      	mov	r7, r1
 800cea8:	4640      	mov	r0, r8
 800ceaa:	4649      	mov	r1, r9
 800ceac:	f7f3 fb14 	bl	80004d8 <__aeabi_dmul>
 800ceb0:	4602      	mov	r2, r0
 800ceb2:	460b      	mov	r3, r1
 800ceb4:	4630      	mov	r0, r6
 800ceb6:	4639      	mov	r1, r7
 800ceb8:	f7f3 f958 	bl	800016c <__adddf3>
 800cebc:	4602      	mov	r2, r0
 800cebe:	460b      	mov	r3, r1
 800cec0:	4650      	mov	r0, sl
 800cec2:	4621      	mov	r1, r4
 800cec4:	f7f3 f950 	bl	8000168 <__aeabi_dsub>
 800cec8:	e7c6      	b.n	800ce58 <__kernel_sin+0xc0>
 800ceca:	bf00      	nop
 800cecc:	f3af 8000 	nop.w
 800ced0:	5acfd57c 	.word	0x5acfd57c
 800ced4:	3de5d93a 	.word	0x3de5d93a
 800ced8:	8a2b9ceb 	.word	0x8a2b9ceb
 800cedc:	3e5ae5e6 	.word	0x3e5ae5e6
 800cee0:	57b1fe7d 	.word	0x57b1fe7d
 800cee4:	3ec71de3 	.word	0x3ec71de3
 800cee8:	19c161d5 	.word	0x19c161d5
 800ceec:	3f2a01a0 	.word	0x3f2a01a0
 800cef0:	1110f8a6 	.word	0x1110f8a6
 800cef4:	3f811111 	.word	0x3f811111
 800cef8:	55555549 	.word	0x55555549
 800cefc:	3fc55555 	.word	0x3fc55555
 800cf00:	3fe00000 	.word	0x3fe00000

0800cf04 <fabs>:
 800cf04:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800cf08:	4770      	bx	lr
 800cf0a:	0000      	movs	r0, r0
 800cf0c:	0000      	movs	r0, r0
	...

0800cf10 <floor>:
 800cf10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf14:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800cf18:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800cf1c:	2e13      	cmp	r6, #19
 800cf1e:	4602      	mov	r2, r0
 800cf20:	460b      	mov	r3, r1
 800cf22:	4607      	mov	r7, r0
 800cf24:	460c      	mov	r4, r1
 800cf26:	4605      	mov	r5, r0
 800cf28:	dc33      	bgt.n	800cf92 <floor+0x82>
 800cf2a:	2e00      	cmp	r6, #0
 800cf2c:	da14      	bge.n	800cf58 <floor+0x48>
 800cf2e:	a334      	add	r3, pc, #208	; (adr r3, 800d000 <floor+0xf0>)
 800cf30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf34:	f7f3 f91a 	bl	800016c <__adddf3>
 800cf38:	2200      	movs	r2, #0
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	f7f3 fd5c 	bl	80009f8 <__aeabi_dcmpgt>
 800cf40:	b138      	cbz	r0, 800cf52 <floor+0x42>
 800cf42:	2c00      	cmp	r4, #0
 800cf44:	da58      	bge.n	800cff8 <floor+0xe8>
 800cf46:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800cf4a:	431d      	orrs	r5, r3
 800cf4c:	d001      	beq.n	800cf52 <floor+0x42>
 800cf4e:	2500      	movs	r5, #0
 800cf50:	4c2d      	ldr	r4, [pc, #180]	; (800d008 <floor+0xf8>)
 800cf52:	4623      	mov	r3, r4
 800cf54:	462f      	mov	r7, r5
 800cf56:	e025      	b.n	800cfa4 <floor+0x94>
 800cf58:	4a2c      	ldr	r2, [pc, #176]	; (800d00c <floor+0xfc>)
 800cf5a:	fa42 f806 	asr.w	r8, r2, r6
 800cf5e:	ea01 0208 	and.w	r2, r1, r8
 800cf62:	4302      	orrs	r2, r0
 800cf64:	d01e      	beq.n	800cfa4 <floor+0x94>
 800cf66:	a326      	add	r3, pc, #152	; (adr r3, 800d000 <floor+0xf0>)
 800cf68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf6c:	f7f3 f8fe 	bl	800016c <__adddf3>
 800cf70:	2200      	movs	r2, #0
 800cf72:	2300      	movs	r3, #0
 800cf74:	f7f3 fd40 	bl	80009f8 <__aeabi_dcmpgt>
 800cf78:	2800      	cmp	r0, #0
 800cf7a:	d0ea      	beq.n	800cf52 <floor+0x42>
 800cf7c:	2c00      	cmp	r4, #0
 800cf7e:	bfbe      	ittt	lt
 800cf80:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800cf84:	fa43 f606 	asrlt.w	r6, r3, r6
 800cf88:	19a4      	addlt	r4, r4, r6
 800cf8a:	2500      	movs	r5, #0
 800cf8c:	ea24 0408 	bic.w	r4, r4, r8
 800cf90:	e7df      	b.n	800cf52 <floor+0x42>
 800cf92:	2e33      	cmp	r6, #51	; 0x33
 800cf94:	dd0a      	ble.n	800cfac <floor+0x9c>
 800cf96:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800cf9a:	d103      	bne.n	800cfa4 <floor+0x94>
 800cf9c:	f7f3 f8e6 	bl	800016c <__adddf3>
 800cfa0:	4607      	mov	r7, r0
 800cfa2:	460b      	mov	r3, r1
 800cfa4:	4638      	mov	r0, r7
 800cfa6:	4619      	mov	r1, r3
 800cfa8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cfac:	f04f 32ff 	mov.w	r2, #4294967295
 800cfb0:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800cfb4:	fa22 f808 	lsr.w	r8, r2, r8
 800cfb8:	ea18 0f00 	tst.w	r8, r0
 800cfbc:	d0f2      	beq.n	800cfa4 <floor+0x94>
 800cfbe:	a310      	add	r3, pc, #64	; (adr r3, 800d000 <floor+0xf0>)
 800cfc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfc4:	f7f3 f8d2 	bl	800016c <__adddf3>
 800cfc8:	2200      	movs	r2, #0
 800cfca:	2300      	movs	r3, #0
 800cfcc:	f7f3 fd14 	bl	80009f8 <__aeabi_dcmpgt>
 800cfd0:	2800      	cmp	r0, #0
 800cfd2:	d0be      	beq.n	800cf52 <floor+0x42>
 800cfd4:	2c00      	cmp	r4, #0
 800cfd6:	da02      	bge.n	800cfde <floor+0xce>
 800cfd8:	2e14      	cmp	r6, #20
 800cfda:	d103      	bne.n	800cfe4 <floor+0xd4>
 800cfdc:	3401      	adds	r4, #1
 800cfde:	ea25 0508 	bic.w	r5, r5, r8
 800cfe2:	e7b6      	b.n	800cf52 <floor+0x42>
 800cfe4:	2301      	movs	r3, #1
 800cfe6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800cfea:	fa03 f606 	lsl.w	r6, r3, r6
 800cfee:	4435      	add	r5, r6
 800cff0:	42bd      	cmp	r5, r7
 800cff2:	bf38      	it	cc
 800cff4:	18e4      	addcc	r4, r4, r3
 800cff6:	e7f2      	b.n	800cfde <floor+0xce>
 800cff8:	2500      	movs	r5, #0
 800cffa:	462c      	mov	r4, r5
 800cffc:	e7a9      	b.n	800cf52 <floor+0x42>
 800cffe:	bf00      	nop
 800d000:	8800759c 	.word	0x8800759c
 800d004:	7e37e43c 	.word	0x7e37e43c
 800d008:	bff00000 	.word	0xbff00000
 800d00c:	000fffff 	.word	0x000fffff

0800d010 <scalbn>:
 800d010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d012:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800d016:	4604      	mov	r4, r0
 800d018:	460d      	mov	r5, r1
 800d01a:	4617      	mov	r7, r2
 800d01c:	460b      	mov	r3, r1
 800d01e:	b996      	cbnz	r6, 800d046 <scalbn+0x36>
 800d020:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d024:	4303      	orrs	r3, r0
 800d026:	d039      	beq.n	800d09c <scalbn+0x8c>
 800d028:	4b33      	ldr	r3, [pc, #204]	; (800d0f8 <scalbn+0xe8>)
 800d02a:	2200      	movs	r2, #0
 800d02c:	f7f3 fa54 	bl	80004d8 <__aeabi_dmul>
 800d030:	4b32      	ldr	r3, [pc, #200]	; (800d0fc <scalbn+0xec>)
 800d032:	4604      	mov	r4, r0
 800d034:	429f      	cmp	r7, r3
 800d036:	460d      	mov	r5, r1
 800d038:	da0f      	bge.n	800d05a <scalbn+0x4a>
 800d03a:	a32b      	add	r3, pc, #172	; (adr r3, 800d0e8 <scalbn+0xd8>)
 800d03c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d040:	f7f3 fa4a 	bl	80004d8 <__aeabi_dmul>
 800d044:	e006      	b.n	800d054 <scalbn+0x44>
 800d046:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800d04a:	4296      	cmp	r6, r2
 800d04c:	d10a      	bne.n	800d064 <scalbn+0x54>
 800d04e:	4602      	mov	r2, r0
 800d050:	f7f3 f88c 	bl	800016c <__adddf3>
 800d054:	4604      	mov	r4, r0
 800d056:	460d      	mov	r5, r1
 800d058:	e020      	b.n	800d09c <scalbn+0x8c>
 800d05a:	460b      	mov	r3, r1
 800d05c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800d060:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800d064:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800d068:	19b9      	adds	r1, r7, r6
 800d06a:	4291      	cmp	r1, r2
 800d06c:	dd0e      	ble.n	800d08c <scalbn+0x7c>
 800d06e:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800d072:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800d076:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800d07a:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800d07e:	4820      	ldr	r0, [pc, #128]	; (800d100 <scalbn+0xf0>)
 800d080:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800d084:	a31a      	add	r3, pc, #104	; (adr r3, 800d0f0 <scalbn+0xe0>)
 800d086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d08a:	e7d9      	b.n	800d040 <scalbn+0x30>
 800d08c:	2900      	cmp	r1, #0
 800d08e:	dd08      	ble.n	800d0a2 <scalbn+0x92>
 800d090:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d094:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d098:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800d09c:	4620      	mov	r0, r4
 800d09e:	4629      	mov	r1, r5
 800d0a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d0a2:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800d0a6:	da12      	bge.n	800d0ce <scalbn+0xbe>
 800d0a8:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d0ac:	429f      	cmp	r7, r3
 800d0ae:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800d0b2:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 800d0b6:	dcdc      	bgt.n	800d072 <scalbn+0x62>
 800d0b8:	a30b      	add	r3, pc, #44	; (adr r3, 800d0e8 <scalbn+0xd8>)
 800d0ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0be:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800d0c2:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800d0c6:	480f      	ldr	r0, [pc, #60]	; (800d104 <scalbn+0xf4>)
 800d0c8:	f041 011f 	orr.w	r1, r1, #31
 800d0cc:	e7b8      	b.n	800d040 <scalbn+0x30>
 800d0ce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d0d2:	3136      	adds	r1, #54	; 0x36
 800d0d4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d0d8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800d0dc:	4620      	mov	r0, r4
 800d0de:	4629      	mov	r1, r5
 800d0e0:	2200      	movs	r2, #0
 800d0e2:	4b09      	ldr	r3, [pc, #36]	; (800d108 <scalbn+0xf8>)
 800d0e4:	e7ac      	b.n	800d040 <scalbn+0x30>
 800d0e6:	bf00      	nop
 800d0e8:	c2f8f359 	.word	0xc2f8f359
 800d0ec:	01a56e1f 	.word	0x01a56e1f
 800d0f0:	8800759c 	.word	0x8800759c
 800d0f4:	7e37e43c 	.word	0x7e37e43c
 800d0f8:	43500000 	.word	0x43500000
 800d0fc:	ffff3cb0 	.word	0xffff3cb0
 800d100:	8800759c 	.word	0x8800759c
 800d104:	c2f8f359 	.word	0xc2f8f359
 800d108:	3c900000 	.word	0x3c900000

0800d10c <atanf>:
 800d10c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d110:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800d114:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 800d118:	4604      	mov	r4, r0
 800d11a:	4680      	mov	r8, r0
 800d11c:	db0e      	blt.n	800d13c <atanf+0x30>
 800d11e:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800d122:	dd04      	ble.n	800d12e <atanf+0x22>
 800d124:	4601      	mov	r1, r0
 800d126:	f7f3 fd25 	bl	8000b74 <__addsf3>
 800d12a:	4604      	mov	r4, r0
 800d12c:	e003      	b.n	800d136 <atanf+0x2a>
 800d12e:	2800      	cmp	r0, #0
 800d130:	f300 80ce 	bgt.w	800d2d0 <atanf+0x1c4>
 800d134:	4c67      	ldr	r4, [pc, #412]	; (800d2d4 <atanf+0x1c8>)
 800d136:	4620      	mov	r0, r4
 800d138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d13c:	4b66      	ldr	r3, [pc, #408]	; (800d2d8 <atanf+0x1cc>)
 800d13e:	429d      	cmp	r5, r3
 800d140:	dc0e      	bgt.n	800d160 <atanf+0x54>
 800d142:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 800d146:	da08      	bge.n	800d15a <atanf+0x4e>
 800d148:	4964      	ldr	r1, [pc, #400]	; (800d2dc <atanf+0x1d0>)
 800d14a:	f7f3 fd13 	bl	8000b74 <__addsf3>
 800d14e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800d152:	f7f3 ffd3 	bl	80010fc <__aeabi_fcmpgt>
 800d156:	2800      	cmp	r0, #0
 800d158:	d1ed      	bne.n	800d136 <atanf+0x2a>
 800d15a:	f04f 36ff 	mov.w	r6, #4294967295
 800d15e:	e01c      	b.n	800d19a <atanf+0x8e>
 800d160:	f000 f8e0 	bl	800d324 <fabsf>
 800d164:	4b5e      	ldr	r3, [pc, #376]	; (800d2e0 <atanf+0x1d4>)
 800d166:	4604      	mov	r4, r0
 800d168:	429d      	cmp	r5, r3
 800d16a:	dc7c      	bgt.n	800d266 <atanf+0x15a>
 800d16c:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800d170:	429d      	cmp	r5, r3
 800d172:	dc67      	bgt.n	800d244 <atanf+0x138>
 800d174:	4601      	mov	r1, r0
 800d176:	f7f3 fcfd 	bl	8000b74 <__addsf3>
 800d17a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800d17e:	f7f3 fcf7 	bl	8000b70 <__aeabi_fsub>
 800d182:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800d186:	4605      	mov	r5, r0
 800d188:	4620      	mov	r0, r4
 800d18a:	f7f3 fcf3 	bl	8000b74 <__addsf3>
 800d18e:	4601      	mov	r1, r0
 800d190:	4628      	mov	r0, r5
 800d192:	f7f3 feab 	bl	8000eec <__aeabi_fdiv>
 800d196:	2600      	movs	r6, #0
 800d198:	4604      	mov	r4, r0
 800d19a:	4621      	mov	r1, r4
 800d19c:	4620      	mov	r0, r4
 800d19e:	f7f3 fdf1 	bl	8000d84 <__aeabi_fmul>
 800d1a2:	4601      	mov	r1, r0
 800d1a4:	4607      	mov	r7, r0
 800d1a6:	f7f3 fded 	bl	8000d84 <__aeabi_fmul>
 800d1aa:	4605      	mov	r5, r0
 800d1ac:	494d      	ldr	r1, [pc, #308]	; (800d2e4 <atanf+0x1d8>)
 800d1ae:	f7f3 fde9 	bl	8000d84 <__aeabi_fmul>
 800d1b2:	494d      	ldr	r1, [pc, #308]	; (800d2e8 <atanf+0x1dc>)
 800d1b4:	f7f3 fcde 	bl	8000b74 <__addsf3>
 800d1b8:	4629      	mov	r1, r5
 800d1ba:	f7f3 fde3 	bl	8000d84 <__aeabi_fmul>
 800d1be:	494b      	ldr	r1, [pc, #300]	; (800d2ec <atanf+0x1e0>)
 800d1c0:	f7f3 fcd8 	bl	8000b74 <__addsf3>
 800d1c4:	4629      	mov	r1, r5
 800d1c6:	f7f3 fddd 	bl	8000d84 <__aeabi_fmul>
 800d1ca:	4949      	ldr	r1, [pc, #292]	; (800d2f0 <atanf+0x1e4>)
 800d1cc:	f7f3 fcd2 	bl	8000b74 <__addsf3>
 800d1d0:	4629      	mov	r1, r5
 800d1d2:	f7f3 fdd7 	bl	8000d84 <__aeabi_fmul>
 800d1d6:	4947      	ldr	r1, [pc, #284]	; (800d2f4 <atanf+0x1e8>)
 800d1d8:	f7f3 fccc 	bl	8000b74 <__addsf3>
 800d1dc:	4629      	mov	r1, r5
 800d1de:	f7f3 fdd1 	bl	8000d84 <__aeabi_fmul>
 800d1e2:	4945      	ldr	r1, [pc, #276]	; (800d2f8 <atanf+0x1ec>)
 800d1e4:	f7f3 fcc6 	bl	8000b74 <__addsf3>
 800d1e8:	4639      	mov	r1, r7
 800d1ea:	f7f3 fdcb 	bl	8000d84 <__aeabi_fmul>
 800d1ee:	4943      	ldr	r1, [pc, #268]	; (800d2fc <atanf+0x1f0>)
 800d1f0:	4607      	mov	r7, r0
 800d1f2:	4628      	mov	r0, r5
 800d1f4:	f7f3 fdc6 	bl	8000d84 <__aeabi_fmul>
 800d1f8:	4941      	ldr	r1, [pc, #260]	; (800d300 <atanf+0x1f4>)
 800d1fa:	f7f3 fcb9 	bl	8000b70 <__aeabi_fsub>
 800d1fe:	4629      	mov	r1, r5
 800d200:	f7f3 fdc0 	bl	8000d84 <__aeabi_fmul>
 800d204:	493f      	ldr	r1, [pc, #252]	; (800d304 <atanf+0x1f8>)
 800d206:	f7f3 fcb3 	bl	8000b70 <__aeabi_fsub>
 800d20a:	4629      	mov	r1, r5
 800d20c:	f7f3 fdba 	bl	8000d84 <__aeabi_fmul>
 800d210:	493d      	ldr	r1, [pc, #244]	; (800d308 <atanf+0x1fc>)
 800d212:	f7f3 fcad 	bl	8000b70 <__aeabi_fsub>
 800d216:	4629      	mov	r1, r5
 800d218:	f7f3 fdb4 	bl	8000d84 <__aeabi_fmul>
 800d21c:	493b      	ldr	r1, [pc, #236]	; (800d30c <atanf+0x200>)
 800d21e:	f7f3 fca7 	bl	8000b70 <__aeabi_fsub>
 800d222:	4629      	mov	r1, r5
 800d224:	f7f3 fdae 	bl	8000d84 <__aeabi_fmul>
 800d228:	4601      	mov	r1, r0
 800d22a:	4638      	mov	r0, r7
 800d22c:	f7f3 fca2 	bl	8000b74 <__addsf3>
 800d230:	4621      	mov	r1, r4
 800d232:	f7f3 fda7 	bl	8000d84 <__aeabi_fmul>
 800d236:	1c73      	adds	r3, r6, #1
 800d238:	4601      	mov	r1, r0
 800d23a:	d133      	bne.n	800d2a4 <atanf+0x198>
 800d23c:	4620      	mov	r0, r4
 800d23e:	f7f3 fc97 	bl	8000b70 <__aeabi_fsub>
 800d242:	e772      	b.n	800d12a <atanf+0x1e>
 800d244:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800d248:	f7f3 fc92 	bl	8000b70 <__aeabi_fsub>
 800d24c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800d250:	4605      	mov	r5, r0
 800d252:	4620      	mov	r0, r4
 800d254:	f7f3 fc8e 	bl	8000b74 <__addsf3>
 800d258:	4601      	mov	r1, r0
 800d25a:	4628      	mov	r0, r5
 800d25c:	f7f3 fe46 	bl	8000eec <__aeabi_fdiv>
 800d260:	2601      	movs	r6, #1
 800d262:	4604      	mov	r4, r0
 800d264:	e799      	b.n	800d19a <atanf+0x8e>
 800d266:	4b2a      	ldr	r3, [pc, #168]	; (800d310 <atanf+0x204>)
 800d268:	429d      	cmp	r5, r3
 800d26a:	dc14      	bgt.n	800d296 <atanf+0x18a>
 800d26c:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800d270:	f7f3 fc7e 	bl	8000b70 <__aeabi_fsub>
 800d274:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800d278:	4605      	mov	r5, r0
 800d27a:	4620      	mov	r0, r4
 800d27c:	f7f3 fd82 	bl	8000d84 <__aeabi_fmul>
 800d280:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800d284:	f7f3 fc76 	bl	8000b74 <__addsf3>
 800d288:	4601      	mov	r1, r0
 800d28a:	4628      	mov	r0, r5
 800d28c:	f7f3 fe2e 	bl	8000eec <__aeabi_fdiv>
 800d290:	2602      	movs	r6, #2
 800d292:	4604      	mov	r4, r0
 800d294:	e781      	b.n	800d19a <atanf+0x8e>
 800d296:	4601      	mov	r1, r0
 800d298:	481e      	ldr	r0, [pc, #120]	; (800d314 <atanf+0x208>)
 800d29a:	f7f3 fe27 	bl	8000eec <__aeabi_fdiv>
 800d29e:	2603      	movs	r6, #3
 800d2a0:	4604      	mov	r4, r0
 800d2a2:	e77a      	b.n	800d19a <atanf+0x8e>
 800d2a4:	4b1c      	ldr	r3, [pc, #112]	; (800d318 <atanf+0x20c>)
 800d2a6:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800d2aa:	f7f3 fc61 	bl	8000b70 <__aeabi_fsub>
 800d2ae:	4621      	mov	r1, r4
 800d2b0:	f7f3 fc5e 	bl	8000b70 <__aeabi_fsub>
 800d2b4:	4b19      	ldr	r3, [pc, #100]	; (800d31c <atanf+0x210>)
 800d2b6:	4601      	mov	r1, r0
 800d2b8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800d2bc:	f7f3 fc58 	bl	8000b70 <__aeabi_fsub>
 800d2c0:	f1b8 0f00 	cmp.w	r8, #0
 800d2c4:	4604      	mov	r4, r0
 800d2c6:	f6bf af36 	bge.w	800d136 <atanf+0x2a>
 800d2ca:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800d2ce:	e72c      	b.n	800d12a <atanf+0x1e>
 800d2d0:	4c13      	ldr	r4, [pc, #76]	; (800d320 <atanf+0x214>)
 800d2d2:	e730      	b.n	800d136 <atanf+0x2a>
 800d2d4:	bfc90fdb 	.word	0xbfc90fdb
 800d2d8:	3edfffff 	.word	0x3edfffff
 800d2dc:	7149f2ca 	.word	0x7149f2ca
 800d2e0:	3f97ffff 	.word	0x3f97ffff
 800d2e4:	3c8569d7 	.word	0x3c8569d7
 800d2e8:	3d4bda59 	.word	0x3d4bda59
 800d2ec:	3d886b35 	.word	0x3d886b35
 800d2f0:	3dba2e6e 	.word	0x3dba2e6e
 800d2f4:	3e124925 	.word	0x3e124925
 800d2f8:	3eaaaaab 	.word	0x3eaaaaab
 800d2fc:	bd15a221 	.word	0xbd15a221
 800d300:	3d6ef16b 	.word	0x3d6ef16b
 800d304:	3d9d8795 	.word	0x3d9d8795
 800d308:	3de38e38 	.word	0x3de38e38
 800d30c:	3e4ccccd 	.word	0x3e4ccccd
 800d310:	401bffff 	.word	0x401bffff
 800d314:	bf800000 	.word	0xbf800000
 800d318:	0800e4e0 	.word	0x0800e4e0
 800d31c:	0800e4d0 	.word	0x0800e4d0
 800d320:	3fc90fdb 	.word	0x3fc90fdb

0800d324 <fabsf>:
 800d324:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800d328:	4770      	bx	lr
	...

0800d32c <_init>:
 800d32c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d32e:	bf00      	nop
 800d330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d332:	bc08      	pop	{r3}
 800d334:	469e      	mov	lr, r3
 800d336:	4770      	bx	lr

0800d338 <_fini>:
 800d338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d33a:	bf00      	nop
 800d33c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d33e:	bc08      	pop	{r3}
 800d340:	469e      	mov	lr, r3
 800d342:	4770      	bx	lr
