
NRF24L01P_P1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083fc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000468  08008510  08008510  00018510  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008978  08008978  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08008978  08008978  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008978  08008978  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008978  08008978  00018978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800897c  0800897c  0001897c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008980  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000021c  200001dc  08008b5c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003f8  08008b5c  000203f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY
 13 .debug_info   000080e5  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d8b  00000000  00000000  0002832d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000960  00000000  00000000  0002a0b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006f7  00000000  00000000  0002aa18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000186dc  00000000  00000000  0002b10f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ab4f  00000000  00000000  000437eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00088d73  00000000  00000000  0004e33a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000392c  00000000  00000000  000d70b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000da9dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	080084f4 	.word	0x080084f4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	080084f4 	.word	0x080084f4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	4605      	mov	r5, r0
 8000b6c:	460c      	mov	r4, r1
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2300      	movs	r3, #0
 8000b72:	4628      	mov	r0, r5
 8000b74:	4621      	mov	r1, r4
 8000b76:	f7ff ff21 	bl	80009bc <__aeabi_dcmplt>
 8000b7a:	b928      	cbnz	r0, 8000b88 <__aeabi_d2lz+0x20>
 8000b7c:	4628      	mov	r0, r5
 8000b7e:	4621      	mov	r1, r4
 8000b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b84:	f000 b80a 	b.w	8000b9c <__aeabi_d2ulz>
 8000b88:	4628      	mov	r0, r5
 8000b8a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000b8e:	f000 f805 	bl	8000b9c <__aeabi_d2ulz>
 8000b92:	4240      	negs	r0, r0
 8000b94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b98:	bd38      	pop	{r3, r4, r5, pc}
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2ulz>:
 8000b9c:	b5d0      	push	{r4, r6, r7, lr}
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <__aeabi_d2ulz+0x34>)
 8000ba2:	4606      	mov	r6, r0
 8000ba4:	460f      	mov	r7, r1
 8000ba6:	f7ff fc97 	bl	80004d8 <__aeabi_dmul>
 8000baa:	f7ff ff6d 	bl	8000a88 <__aeabi_d2uiz>
 8000bae:	4604      	mov	r4, r0
 8000bb0:	f7ff fc18 	bl	80003e4 <__aeabi_ui2d>
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <__aeabi_d2ulz+0x38>)
 8000bb8:	f7ff fc8e 	bl	80004d8 <__aeabi_dmul>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	4630      	mov	r0, r6
 8000bc2:	4639      	mov	r1, r7
 8000bc4:	f7ff fad0 	bl	8000168 <__aeabi_dsub>
 8000bc8:	f7ff ff5e 	bl	8000a88 <__aeabi_d2uiz>
 8000bcc:	4621      	mov	r1, r4
 8000bce:	bdd0      	pop	{r4, r6, r7, pc}
 8000bd0:	3df00000 	.word	0x3df00000
 8000bd4:	41f00000 	.word	0x41f00000

08000bd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bdc:	f000 fb96 	bl	800130c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000be0:	f000 f860 	bl	8000ca4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000be4:	f000 f94c 	bl	8000e80 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000be8:	f000 f914 	bl	8000e14 <MX_SPI1_Init>
  MX_ADC1_Init();
 8000bec:	f000 f8b6 	bl	8000d5c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  nrf24l01p_tx_init(2500, _1Mbps,P0_address);
 8000bf0:	4a27      	ldr	r2, [pc, #156]	; (8000c90 <main+0xb8>)
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8000bf8:	f002 fef6 	bl	80039e8 <nrf24l01p_tx_init>
				 nrf24l01p_rx_flag = 0;
				 nrf24l01p_rx_receive(rx_data, sizeof(rx_data));
		}
*/

		memset(tx_data, 0, sizeof(tx_data));
 8000bfc:	2220      	movs	r2, #32
 8000bfe:	2100      	movs	r1, #0
 8000c00:	4824      	ldr	r0, [pc, #144]	; (8000c94 <main+0xbc>)
 8000c02:	f004 f854 	bl	8004cae <memset>

		HAL_ADCEx_InjectedStart(&hadc1);
 8000c06:	4824      	ldr	r0, [pc, #144]	; (8000c98 <main+0xc0>)
 8000c08:	f000 fd7a 	bl	8001700 <HAL_ADCEx_InjectedStart>

		HAL_ADCEx_InjectedPollForConversion(&hadc1, HAL_MAX_DELAY);
 8000c0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c10:	4821      	ldr	r0, [pc, #132]	; (8000c98 <main+0xc0>)
 8000c12:	f000 fdfb 	bl	800180c <HAL_ADCEx_InjectedPollForConversion>

		adc_value1=HAL_ADCEx_InjectedGetValue(&hadc1,ADC_INJECTED_RANK_1);
 8000c16:	2101      	movs	r1, #1
 8000c18:	481f      	ldr	r0, [pc, #124]	; (8000c98 <main+0xc0>)
 8000c1a:	f000 feef 	bl	80019fc <HAL_ADCEx_InjectedGetValue>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	b29a      	uxth	r2, r3
 8000c22:	4b1e      	ldr	r3, [pc, #120]	; (8000c9c <main+0xc4>)
 8000c24:	801a      	strh	r2, [r3, #0]

		HAL_ADCEx_InjectedStart(&hadc1);
 8000c26:	481c      	ldr	r0, [pc, #112]	; (8000c98 <main+0xc0>)
 8000c28:	f000 fd6a 	bl	8001700 <HAL_ADCEx_InjectedStart>

		HAL_ADCEx_InjectedPollForConversion(&hadc1, HAL_MAX_DELAY);
 8000c2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c30:	4819      	ldr	r0, [pc, #100]	; (8000c98 <main+0xc0>)
 8000c32:	f000 fdeb 	bl	800180c <HAL_ADCEx_InjectedPollForConversion>

		adc_value2=HAL_ADCEx_InjectedGetValue(&hadc1,ADC_INJECTED_RANK_2);
 8000c36:	2102      	movs	r1, #2
 8000c38:	4817      	ldr	r0, [pc, #92]	; (8000c98 <main+0xc0>)
 8000c3a:	f000 fedf 	bl	80019fc <HAL_ADCEx_InjectedGetValue>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	b29a      	uxth	r2, r3
 8000c42:	4b17      	ldr	r3, [pc, #92]	; (8000ca0 <main+0xc8>)
 8000c44:	801a      	strh	r2, [r3, #0]


		tx_data[0] = adc_value1 & 0xff;
 8000c46:	4b15      	ldr	r3, [pc, #84]	; (8000c9c <main+0xc4>)
 8000c48:	881b      	ldrh	r3, [r3, #0]
 8000c4a:	b2da      	uxtb	r2, r3
 8000c4c:	4b11      	ldr	r3, [pc, #68]	; (8000c94 <main+0xbc>)
 8000c4e:	701a      	strb	r2, [r3, #0]
		tx_data[1] = (adc_value1 >> 8) & 0xff;
 8000c50:	4b12      	ldr	r3, [pc, #72]	; (8000c9c <main+0xc4>)
 8000c52:	881b      	ldrh	r3, [r3, #0]
 8000c54:	0a1b      	lsrs	r3, r3, #8
 8000c56:	b29b      	uxth	r3, r3
 8000c58:	b2da      	uxtb	r2, r3
 8000c5a:	4b0e      	ldr	r3, [pc, #56]	; (8000c94 <main+0xbc>)
 8000c5c:	705a      	strb	r2, [r3, #1]
		tx_data[2] = adc_value2 & 0xff;
 8000c5e:	4b10      	ldr	r3, [pc, #64]	; (8000ca0 <main+0xc8>)
 8000c60:	881b      	ldrh	r3, [r3, #0]
 8000c62:	b2da      	uxtb	r2, r3
 8000c64:	4b0b      	ldr	r3, [pc, #44]	; (8000c94 <main+0xbc>)
 8000c66:	709a      	strb	r2, [r3, #2]
		tx_data[3] = (adc_value2 >> 8) & 0xff;
 8000c68:	4b0d      	ldr	r3, [pc, #52]	; (8000ca0 <main+0xc8>)
 8000c6a:	881b      	ldrh	r3, [r3, #0]
 8000c6c:	0a1b      	lsrs	r3, r3, #8
 8000c6e:	b29b      	uxth	r3, r3
 8000c70:	b2da      	uxtb	r2, r3
 8000c72:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <main+0xbc>)
 8000c74:	70da      	strb	r2, [r3, #3]

		nrf24l01p_ptx_mode();
 8000c76:	f002 ff45 	bl	8003b04 <nrf24l01p_ptx_mode>

		nrf24l01p_flush_tx_fifo();
 8000c7a:	f002 ff9b 	bl	8003bb4 <nrf24l01p_flush_tx_fifo>
		nrf24l01p_tx_transmit(tx_data, sizeof(tx_data));
 8000c7e:	2120      	movs	r1, #32
 8000c80:	4804      	ldr	r0, [pc, #16]	; (8000c94 <main+0xbc>)
 8000c82:	f002 fee0 	bl	8003a46 <nrf24l01p_tx_transmit>

		HAL_Delay(100);
 8000c86:	2064      	movs	r0, #100	; 0x64
 8000c88:	f000 fba2 	bl	80013d0 <HAL_Delay>
		memset(tx_data, 0, sizeof(tx_data));
 8000c8c:	e7b6      	b.n	8000bfc <main+0x24>
 8000c8e:	bf00      	nop
 8000c90:	20000000 	.word	0x20000000
 8000c94:	20000284 	.word	0x20000284
 8000c98:	200001f8 	.word	0x200001f8
 8000c9c:	20000280 	.word	0x20000280
 8000ca0:	20000282 	.word	0x20000282

08000ca4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b094      	sub	sp, #80	; 0x50
 8000ca8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000caa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cae:	2228      	movs	r2, #40	; 0x28
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f003 fffb 	bl	8004cae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cb8:	f107 0314 	add.w	r3, r7, #20
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
 8000cc2:	609a      	str	r2, [r3, #8]
 8000cc4:	60da      	str	r2, [r3, #12]
 8000cc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cc8:	1d3b      	adds	r3, r7, #4
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	605a      	str	r2, [r3, #4]
 8000cd0:	609a      	str	r2, [r3, #8]
 8000cd2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cd8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000cf0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000cf4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cf6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f001 fac6 	bl	800228c <HAL_RCC_OscConfig>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000d06:	f000 f917 	bl	8000f38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d0a:	230f      	movs	r3, #15
 8000d0c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d0e:	2302      	movs	r3, #2
 8000d10:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d12:	2300      	movs	r3, #0
 8000d14:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d1a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d20:	f107 0314 	add.w	r3, r7, #20
 8000d24:	2102      	movs	r1, #2
 8000d26:	4618      	mov	r0, r3
 8000d28:	f001 fd32 	bl	8002790 <HAL_RCC_ClockConfig>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000d32:	f000 f901 	bl	8000f38 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d36:	2302      	movs	r3, #2
 8000d38:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000d3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d3e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d40:	1d3b      	adds	r3, r7, #4
 8000d42:	4618      	mov	r0, r3
 8000d44:	f001 fe9e 	bl	8002a84 <HAL_RCCEx_PeriphCLKConfig>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000d4e:	f000 f8f3 	bl	8000f38 <Error_Handler>
  }
}
 8000d52:	bf00      	nop
 8000d54:	3750      	adds	r7, #80	; 0x50
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
	...

08000d5c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b088      	sub	sp, #32
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000d62:	1d3b      	adds	r3, r7, #4
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
 8000d6e:	611a      	str	r2, [r3, #16]
 8000d70:	615a      	str	r2, [r3, #20]
 8000d72:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d74:	4b25      	ldr	r3, [pc, #148]	; (8000e0c <MX_ADC1_Init+0xb0>)
 8000d76:	4a26      	ldr	r2, [pc, #152]	; (8000e10 <MX_ADC1_Init+0xb4>)
 8000d78:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000d7a:	4b24      	ldr	r3, [pc, #144]	; (8000e0c <MX_ADC1_Init+0xb0>)
 8000d7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d80:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d82:	4b22      	ldr	r3, [pc, #136]	; (8000e0c <MX_ADC1_Init+0xb0>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d88:	4b20      	ldr	r3, [pc, #128]	; (8000e0c <MX_ADC1_Init+0xb0>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d8e:	4b1f      	ldr	r3, [pc, #124]	; (8000e0c <MX_ADC1_Init+0xb0>)
 8000d90:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000d94:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d96:	4b1d      	ldr	r3, [pc, #116]	; (8000e0c <MX_ADC1_Init+0xb0>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000d9c:	4b1b      	ldr	r3, [pc, #108]	; (8000e0c <MX_ADC1_Init+0xb0>)
 8000d9e:	2201      	movs	r2, #1
 8000da0:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000da2:	481a      	ldr	r0, [pc, #104]	; (8000e0c <MX_ADC1_Init+0xb0>)
 8000da4:	f000 fb38 	bl	8001418 <HAL_ADC_Init>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_ADC1_Init+0x56>
  {
    Error_Handler();
 8000dae:	f000 f8c3 	bl	8000f38 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8000db2:	2301      	movs	r3, #1
 8000db4:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000db6:	2301      	movs	r3, #1
 8000db8:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedNbrOfConversion = 2;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000dbe:	2307      	movs	r3, #7
 8000dc0:	60fb      	str	r3, [r7, #12]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8000dc2:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000dc6:	61fb      	str	r3, [r7, #28]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	767b      	strb	r3, [r7, #25]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	763b      	strb	r3, [r7, #24]
  sConfigInjected.InjectedOffset = 0;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	613b      	str	r3, [r7, #16]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000dd4:	1d3b      	adds	r3, r7, #4
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	480c      	ldr	r0, [pc, #48]	; (8000e0c <MX_ADC1_Init+0xb0>)
 8000dda:	f000 fe3d 	bl	8001a58 <HAL_ADCEx_InjectedConfigChannel>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000de4:	f000 f8a8 	bl	8000f38 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_8;
 8000de8:	2308      	movs	r3, #8
 8000dea:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000dec:	2302      	movs	r3, #2
 8000dee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000df0:	1d3b      	adds	r3, r7, #4
 8000df2:	4619      	mov	r1, r3
 8000df4:	4805      	ldr	r0, [pc, #20]	; (8000e0c <MX_ADC1_Init+0xb0>)
 8000df6:	f000 fe2f 	bl	8001a58 <HAL_ADCEx_InjectedConfigChannel>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8000e00:	f000 f89a 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e04:	bf00      	nop
 8000e06:	3720      	adds	r7, #32
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	200001f8 	.word	0x200001f8
 8000e10:	40012400 	.word	0x40012400

08000e14 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e18:	4b17      	ldr	r3, [pc, #92]	; (8000e78 <MX_SPI1_Init+0x64>)
 8000e1a:	4a18      	ldr	r2, [pc, #96]	; (8000e7c <MX_SPI1_Init+0x68>)
 8000e1c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e1e:	4b16      	ldr	r3, [pc, #88]	; (8000e78 <MX_SPI1_Init+0x64>)
 8000e20:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e24:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e26:	4b14      	ldr	r3, [pc, #80]	; (8000e78 <MX_SPI1_Init+0x64>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e2c:	4b12      	ldr	r3, [pc, #72]	; (8000e78 <MX_SPI1_Init+0x64>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e32:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <MX_SPI1_Init+0x64>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e38:	4b0f      	ldr	r3, [pc, #60]	; (8000e78 <MX_SPI1_Init+0x64>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e3e:	4b0e      	ldr	r3, [pc, #56]	; (8000e78 <MX_SPI1_Init+0x64>)
 8000e40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e44:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000e46:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <MX_SPI1_Init+0x64>)
 8000e48:	2218      	movs	r2, #24
 8000e4a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e4c:	4b0a      	ldr	r3, [pc, #40]	; (8000e78 <MX_SPI1_Init+0x64>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e52:	4b09      	ldr	r3, [pc, #36]	; (8000e78 <MX_SPI1_Init+0x64>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e58:	4b07      	ldr	r3, [pc, #28]	; (8000e78 <MX_SPI1_Init+0x64>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000e5e:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <MX_SPI1_Init+0x64>)
 8000e60:	220a      	movs	r2, #10
 8000e62:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e64:	4804      	ldr	r0, [pc, #16]	; (8000e78 <MX_SPI1_Init+0x64>)
 8000e66:	f001 ff79 	bl	8002d5c <HAL_SPI_Init>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000e70:	f000 f862 	bl	8000f38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e74:	bf00      	nop
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20000228 	.word	0x20000228
 8000e7c:	40013000 	.word	0x40013000

08000e80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b088      	sub	sp, #32
 8000e84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e86:	f107 0310 	add.w	r3, r7, #16
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	601a      	str	r2, [r3, #0]
 8000e8e:	605a      	str	r2, [r3, #4]
 8000e90:	609a      	str	r2, [r3, #8]
 8000e92:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e94:	4b26      	ldr	r3, [pc, #152]	; (8000f30 <MX_GPIO_Init+0xb0>)
 8000e96:	699b      	ldr	r3, [r3, #24]
 8000e98:	4a25      	ldr	r2, [pc, #148]	; (8000f30 <MX_GPIO_Init+0xb0>)
 8000e9a:	f043 0320 	orr.w	r3, r3, #32
 8000e9e:	6193      	str	r3, [r2, #24]
 8000ea0:	4b23      	ldr	r3, [pc, #140]	; (8000f30 <MX_GPIO_Init+0xb0>)
 8000ea2:	699b      	ldr	r3, [r3, #24]
 8000ea4:	f003 0320 	and.w	r3, r3, #32
 8000ea8:	60fb      	str	r3, [r7, #12]
 8000eaa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eac:	4b20      	ldr	r3, [pc, #128]	; (8000f30 <MX_GPIO_Init+0xb0>)
 8000eae:	699b      	ldr	r3, [r3, #24]
 8000eb0:	4a1f      	ldr	r2, [pc, #124]	; (8000f30 <MX_GPIO_Init+0xb0>)
 8000eb2:	f043 0304 	orr.w	r3, r3, #4
 8000eb6:	6193      	str	r3, [r2, #24]
 8000eb8:	4b1d      	ldr	r3, [pc, #116]	; (8000f30 <MX_GPIO_Init+0xb0>)
 8000eba:	699b      	ldr	r3, [r3, #24]
 8000ebc:	f003 0304 	and.w	r3, r3, #4
 8000ec0:	60bb      	str	r3, [r7, #8]
 8000ec2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec4:	4b1a      	ldr	r3, [pc, #104]	; (8000f30 <MX_GPIO_Init+0xb0>)
 8000ec6:	699b      	ldr	r3, [r3, #24]
 8000ec8:	4a19      	ldr	r2, [pc, #100]	; (8000f30 <MX_GPIO_Init+0xb0>)
 8000eca:	f043 0308 	orr.w	r3, r3, #8
 8000ece:	6193      	str	r3, [r2, #24]
 8000ed0:	4b17      	ldr	r3, [pc, #92]	; (8000f30 <MX_GPIO_Init+0xb0>)
 8000ed2:	699b      	ldr	r3, [r3, #24]
 8000ed4:	f003 0308 	and.w	r3, r3, #8
 8000ed8:	607b      	str	r3, [r7, #4]
 8000eda:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_SET);
 8000edc:	2201      	movs	r2, #1
 8000ede:	2108      	movs	r1, #8
 8000ee0:	4814      	ldr	r0, [pc, #80]	; (8000f34 <MX_GPIO_Init+0xb4>)
 8000ee2:	f001 f9bb 	bl	800225c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2110      	movs	r1, #16
 8000eea:	4812      	ldr	r0, [pc, #72]	; (8000f34 <MX_GPIO_Init+0xb4>)
 8000eec:	f001 f9b6 	bl	800225c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CSN_Pin */
  GPIO_InitStruct.Pin = CSN_Pin;
 8000ef0:	2308      	movs	r3, #8
 8000ef2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000efc:	2303      	movs	r3, #3
 8000efe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CSN_GPIO_Port, &GPIO_InitStruct);
 8000f00:	f107 0310 	add.w	r3, r7, #16
 8000f04:	4619      	mov	r1, r3
 8000f06:	480b      	ldr	r0, [pc, #44]	; (8000f34 <MX_GPIO_Init+0xb4>)
 8000f08:	f001 f824 	bl	8001f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : CE_Pin */
  GPIO_InitStruct.Pin = CE_Pin;
 8000f0c:	2310      	movs	r3, #16
 8000f0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f10:	2301      	movs	r3, #1
 8000f12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f14:	2302      	movs	r3, #2
 8000f16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f18:	2303      	movs	r3, #3
 8000f1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CE_GPIO_Port, &GPIO_InitStruct);
 8000f1c:	f107 0310 	add.w	r3, r7, #16
 8000f20:	4619      	mov	r1, r3
 8000f22:	4804      	ldr	r0, [pc, #16]	; (8000f34 <MX_GPIO_Init+0xb4>)
 8000f24:	f001 f816 	bl	8001f54 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f28:	bf00      	nop
 8000f2a:	3720      	adds	r7, #32
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40021000 	.word	0x40021000
 8000f34:	40010800 	.word	0x40010800

08000f38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f3c:	b672      	cpsid	i
}
 8000f3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000f40:	e7fe      	b.n	8000f40 <Error_Handler+0x8>
	...

08000f44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f4a:	4b15      	ldr	r3, [pc, #84]	; (8000fa0 <HAL_MspInit+0x5c>)
 8000f4c:	699b      	ldr	r3, [r3, #24]
 8000f4e:	4a14      	ldr	r2, [pc, #80]	; (8000fa0 <HAL_MspInit+0x5c>)
 8000f50:	f043 0301 	orr.w	r3, r3, #1
 8000f54:	6193      	str	r3, [r2, #24]
 8000f56:	4b12      	ldr	r3, [pc, #72]	; (8000fa0 <HAL_MspInit+0x5c>)
 8000f58:	699b      	ldr	r3, [r3, #24]
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	60bb      	str	r3, [r7, #8]
 8000f60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f62:	4b0f      	ldr	r3, [pc, #60]	; (8000fa0 <HAL_MspInit+0x5c>)
 8000f64:	69db      	ldr	r3, [r3, #28]
 8000f66:	4a0e      	ldr	r2, [pc, #56]	; (8000fa0 <HAL_MspInit+0x5c>)
 8000f68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f6c:	61d3      	str	r3, [r2, #28]
 8000f6e:	4b0c      	ldr	r3, [pc, #48]	; (8000fa0 <HAL_MspInit+0x5c>)
 8000f70:	69db      	ldr	r3, [r3, #28]
 8000f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f76:	607b      	str	r3, [r7, #4]
 8000f78:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f7a:	4b0a      	ldr	r3, [pc, #40]	; (8000fa4 <HAL_MspInit+0x60>)
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	4a04      	ldr	r2, [pc, #16]	; (8000fa4 <HAL_MspInit+0x60>)
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f96:	bf00      	nop
 8000f98:	3714      	adds	r7, #20
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bc80      	pop	{r7}
 8000f9e:	4770      	bx	lr
 8000fa0:	40021000 	.word	0x40021000
 8000fa4:	40010000 	.word	0x40010000

08000fa8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b08a      	sub	sp, #40	; 0x28
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb0:	f107 0318 	add.w	r3, r7, #24
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a1f      	ldr	r2, [pc, #124]	; (8001040 <HAL_ADC_MspInit+0x98>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d137      	bne.n	8001038 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fc8:	4b1e      	ldr	r3, [pc, #120]	; (8001044 <HAL_ADC_MspInit+0x9c>)
 8000fca:	699b      	ldr	r3, [r3, #24]
 8000fcc:	4a1d      	ldr	r2, [pc, #116]	; (8001044 <HAL_ADC_MspInit+0x9c>)
 8000fce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fd2:	6193      	str	r3, [r2, #24]
 8000fd4:	4b1b      	ldr	r3, [pc, #108]	; (8001044 <HAL_ADC_MspInit+0x9c>)
 8000fd6:	699b      	ldr	r3, [r3, #24]
 8000fd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fdc:	617b      	str	r3, [r7, #20]
 8000fde:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe0:	4b18      	ldr	r3, [pc, #96]	; (8001044 <HAL_ADC_MspInit+0x9c>)
 8000fe2:	699b      	ldr	r3, [r3, #24]
 8000fe4:	4a17      	ldr	r2, [pc, #92]	; (8001044 <HAL_ADC_MspInit+0x9c>)
 8000fe6:	f043 0304 	orr.w	r3, r3, #4
 8000fea:	6193      	str	r3, [r2, #24]
 8000fec:	4b15      	ldr	r3, [pc, #84]	; (8001044 <HAL_ADC_MspInit+0x9c>)
 8000fee:	699b      	ldr	r3, [r3, #24]
 8000ff0:	f003 0304 	and.w	r3, r3, #4
 8000ff4:	613b      	str	r3, [r7, #16]
 8000ff6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff8:	4b12      	ldr	r3, [pc, #72]	; (8001044 <HAL_ADC_MspInit+0x9c>)
 8000ffa:	699b      	ldr	r3, [r3, #24]
 8000ffc:	4a11      	ldr	r2, [pc, #68]	; (8001044 <HAL_ADC_MspInit+0x9c>)
 8000ffe:	f043 0308 	orr.w	r3, r3, #8
 8001002:	6193      	str	r3, [r2, #24]
 8001004:	4b0f      	ldr	r3, [pc, #60]	; (8001044 <HAL_ADC_MspInit+0x9c>)
 8001006:	699b      	ldr	r3, [r3, #24]
 8001008:	f003 0308 	and.w	r3, r3, #8
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001010:	2302      	movs	r3, #2
 8001012:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001014:	2303      	movs	r3, #3
 8001016:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001018:	f107 0318 	add.w	r3, r7, #24
 800101c:	4619      	mov	r1, r3
 800101e:	480a      	ldr	r0, [pc, #40]	; (8001048 <HAL_ADC_MspInit+0xa0>)
 8001020:	f000 ff98 	bl	8001f54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001024:	2301      	movs	r3, #1
 8001026:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001028:	2303      	movs	r3, #3
 800102a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800102c:	f107 0318 	add.w	r3, r7, #24
 8001030:	4619      	mov	r1, r3
 8001032:	4806      	ldr	r0, [pc, #24]	; (800104c <HAL_ADC_MspInit+0xa4>)
 8001034:	f000 ff8e 	bl	8001f54 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001038:	bf00      	nop
 800103a:	3728      	adds	r7, #40	; 0x28
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40012400 	.word	0x40012400
 8001044:	40021000 	.word	0x40021000
 8001048:	40010800 	.word	0x40010800
 800104c:	40010c00 	.word	0x40010c00

08001050 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b088      	sub	sp, #32
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001058:	f107 0310 	add.w	r3, r7, #16
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a1b      	ldr	r2, [pc, #108]	; (80010d8 <HAL_SPI_MspInit+0x88>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d12f      	bne.n	80010d0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001070:	4b1a      	ldr	r3, [pc, #104]	; (80010dc <HAL_SPI_MspInit+0x8c>)
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	4a19      	ldr	r2, [pc, #100]	; (80010dc <HAL_SPI_MspInit+0x8c>)
 8001076:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800107a:	6193      	str	r3, [r2, #24]
 800107c:	4b17      	ldr	r3, [pc, #92]	; (80010dc <HAL_SPI_MspInit+0x8c>)
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001088:	4b14      	ldr	r3, [pc, #80]	; (80010dc <HAL_SPI_MspInit+0x8c>)
 800108a:	699b      	ldr	r3, [r3, #24]
 800108c:	4a13      	ldr	r2, [pc, #76]	; (80010dc <HAL_SPI_MspInit+0x8c>)
 800108e:	f043 0304 	orr.w	r3, r3, #4
 8001092:	6193      	str	r3, [r2, #24]
 8001094:	4b11      	ldr	r3, [pc, #68]	; (80010dc <HAL_SPI_MspInit+0x8c>)
 8001096:	699b      	ldr	r3, [r3, #24]
 8001098:	f003 0304 	and.w	r3, r3, #4
 800109c:	60bb      	str	r3, [r7, #8]
 800109e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80010a0:	23a0      	movs	r3, #160	; 0xa0
 80010a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a4:	2302      	movs	r3, #2
 80010a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010a8:	2303      	movs	r3, #3
 80010aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ac:	f107 0310 	add.w	r3, r7, #16
 80010b0:	4619      	mov	r1, r3
 80010b2:	480b      	ldr	r0, [pc, #44]	; (80010e0 <HAL_SPI_MspInit+0x90>)
 80010b4:	f000 ff4e 	bl	8001f54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80010b8:	2340      	movs	r3, #64	; 0x40
 80010ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010bc:	2300      	movs	r3, #0
 80010be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c4:	f107 0310 	add.w	r3, r7, #16
 80010c8:	4619      	mov	r1, r3
 80010ca:	4805      	ldr	r0, [pc, #20]	; (80010e0 <HAL_SPI_MspInit+0x90>)
 80010cc:	f000 ff42 	bl	8001f54 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80010d0:	bf00      	nop
 80010d2:	3720      	adds	r7, #32
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40013000 	.word	0x40013000
 80010dc:	40021000 	.word	0x40021000
 80010e0:	40010800 	.word	0x40010800

080010e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010e8:	e7fe      	b.n	80010e8 <NMI_Handler+0x4>

080010ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ea:	b480      	push	{r7}
 80010ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ee:	e7fe      	b.n	80010ee <HardFault_Handler+0x4>

080010f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010f4:	e7fe      	b.n	80010f4 <MemManage_Handler+0x4>

080010f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010f6:	b480      	push	{r7}
 80010f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010fa:	e7fe      	b.n	80010fa <BusFault_Handler+0x4>

080010fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001100:	e7fe      	b.n	8001100 <UsageFault_Handler+0x4>

08001102 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001102:	b480      	push	{r7}
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	46bd      	mov	sp, r7
 800110a:	bc80      	pop	{r7}
 800110c:	4770      	bx	lr

0800110e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800110e:	b480      	push	{r7}
 8001110:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001112:	bf00      	nop
 8001114:	46bd      	mov	sp, r7
 8001116:	bc80      	pop	{r7}
 8001118:	4770      	bx	lr

0800111a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800111a:	b480      	push	{r7}
 800111c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800111e:	bf00      	nop
 8001120:	46bd      	mov	sp, r7
 8001122:	bc80      	pop	{r7}
 8001124:	4770      	bx	lr

08001126 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800112a:	f000 f935 	bl	8001398 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}

08001132 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001132:	b480      	push	{r7}
 8001134:	af00      	add	r7, sp, #0
  return 1;
 8001136:	2301      	movs	r3, #1
}
 8001138:	4618      	mov	r0, r3
 800113a:	46bd      	mov	sp, r7
 800113c:	bc80      	pop	{r7}
 800113e:	4770      	bx	lr

08001140 <_kill>:

int _kill(int pid, int sig)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800114a:	f003 fe03 	bl	8004d54 <__errno>
 800114e:	4603      	mov	r3, r0
 8001150:	2216      	movs	r2, #22
 8001152:	601a      	str	r2, [r3, #0]
  return -1;
 8001154:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001158:	4618      	mov	r0, r3
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <_exit>:

void _exit (int status)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001168:	f04f 31ff 	mov.w	r1, #4294967295
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f7ff ffe7 	bl	8001140 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001172:	e7fe      	b.n	8001172 <_exit+0x12>

08001174 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af00      	add	r7, sp, #0
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	60b9      	str	r1, [r7, #8]
 800117e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001180:	2300      	movs	r3, #0
 8001182:	617b      	str	r3, [r7, #20]
 8001184:	e00a      	b.n	800119c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001186:	f3af 8000 	nop.w
 800118a:	4601      	mov	r1, r0
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	1c5a      	adds	r2, r3, #1
 8001190:	60ba      	str	r2, [r7, #8]
 8001192:	b2ca      	uxtb	r2, r1
 8001194:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	3301      	adds	r3, #1
 800119a:	617b      	str	r3, [r7, #20]
 800119c:	697a      	ldr	r2, [r7, #20]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	dbf0      	blt.n	8001186 <_read+0x12>
  }

  return len;
 80011a4:	687b      	ldr	r3, [r7, #4]
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3718      	adds	r7, #24
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b086      	sub	sp, #24
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	60f8      	str	r0, [r7, #12]
 80011b6:	60b9      	str	r1, [r7, #8]
 80011b8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ba:	2300      	movs	r3, #0
 80011bc:	617b      	str	r3, [r7, #20]
 80011be:	e009      	b.n	80011d4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	1c5a      	adds	r2, r3, #1
 80011c4:	60ba      	str	r2, [r7, #8]
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	3301      	adds	r3, #1
 80011d2:	617b      	str	r3, [r7, #20]
 80011d4:	697a      	ldr	r2, [r7, #20]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	429a      	cmp	r2, r3
 80011da:	dbf1      	blt.n	80011c0 <_write+0x12>
  }
  return len;
 80011dc:	687b      	ldr	r3, [r7, #4]
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3718      	adds	r7, #24
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <_close>:

int _close(int file)
{
 80011e6:	b480      	push	{r7}
 80011e8:	b083      	sub	sp, #12
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80011ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bc80      	pop	{r7}
 80011fa:	4770      	bx	lr

080011fc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800120c:	605a      	str	r2, [r3, #4]
  return 0;
 800120e:	2300      	movs	r3, #0
}
 8001210:	4618      	mov	r0, r3
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	bc80      	pop	{r7}
 8001218:	4770      	bx	lr

0800121a <_isatty>:

int _isatty(int file)
{
 800121a:	b480      	push	{r7}
 800121c:	b083      	sub	sp, #12
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001222:	2301      	movs	r3, #1
}
 8001224:	4618      	mov	r0, r3
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	bc80      	pop	{r7}
 800122c:	4770      	bx	lr

0800122e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800122e:	b480      	push	{r7}
 8001230:	b085      	sub	sp, #20
 8001232:	af00      	add	r7, sp, #0
 8001234:	60f8      	str	r0, [r7, #12]
 8001236:	60b9      	str	r1, [r7, #8]
 8001238:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800123a:	2300      	movs	r3, #0
}
 800123c:	4618      	mov	r0, r3
 800123e:	3714      	adds	r7, #20
 8001240:	46bd      	mov	sp, r7
 8001242:	bc80      	pop	{r7}
 8001244:	4770      	bx	lr
	...

08001248 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001250:	4a14      	ldr	r2, [pc, #80]	; (80012a4 <_sbrk+0x5c>)
 8001252:	4b15      	ldr	r3, [pc, #84]	; (80012a8 <_sbrk+0x60>)
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800125c:	4b13      	ldr	r3, [pc, #76]	; (80012ac <_sbrk+0x64>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d102      	bne.n	800126a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001264:	4b11      	ldr	r3, [pc, #68]	; (80012ac <_sbrk+0x64>)
 8001266:	4a12      	ldr	r2, [pc, #72]	; (80012b0 <_sbrk+0x68>)
 8001268:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800126a:	4b10      	ldr	r3, [pc, #64]	; (80012ac <_sbrk+0x64>)
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4413      	add	r3, r2
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	429a      	cmp	r2, r3
 8001276:	d207      	bcs.n	8001288 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001278:	f003 fd6c 	bl	8004d54 <__errno>
 800127c:	4603      	mov	r3, r0
 800127e:	220c      	movs	r2, #12
 8001280:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001282:	f04f 33ff 	mov.w	r3, #4294967295
 8001286:	e009      	b.n	800129c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001288:	4b08      	ldr	r3, [pc, #32]	; (80012ac <_sbrk+0x64>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800128e:	4b07      	ldr	r3, [pc, #28]	; (80012ac <_sbrk+0x64>)
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4413      	add	r3, r2
 8001296:	4a05      	ldr	r2, [pc, #20]	; (80012ac <_sbrk+0x64>)
 8001298:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800129a:	68fb      	ldr	r3, [r7, #12]
}
 800129c:	4618      	mov	r0, r3
 800129e:	3718      	adds	r7, #24
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	20005000 	.word	0x20005000
 80012a8:	00000400 	.word	0x00000400
 80012ac:	200002a4 	.word	0x200002a4
 80012b0:	200003f8 	.word	0x200003f8

080012b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012b8:	bf00      	nop
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bc80      	pop	{r7}
 80012be:	4770      	bx	lr

080012c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012c0:	f7ff fff8 	bl	80012b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012c4:	480b      	ldr	r0, [pc, #44]	; (80012f4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80012c6:	490c      	ldr	r1, [pc, #48]	; (80012f8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80012c8:	4a0c      	ldr	r2, [pc, #48]	; (80012fc <LoopFillZerobss+0x16>)
  movs r3, #0
 80012ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012cc:	e002      	b.n	80012d4 <LoopCopyDataInit>

080012ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012d2:	3304      	adds	r3, #4

080012d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012d8:	d3f9      	bcc.n	80012ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012da:	4a09      	ldr	r2, [pc, #36]	; (8001300 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80012dc:	4c09      	ldr	r4, [pc, #36]	; (8001304 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012e0:	e001      	b.n	80012e6 <LoopFillZerobss>

080012e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012e4:	3204      	adds	r2, #4

080012e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012e8:	d3fb      	bcc.n	80012e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012ea:	f003 fd39 	bl	8004d60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012ee:	f7ff fc73 	bl	8000bd8 <main>
  bx lr
 80012f2:	4770      	bx	lr
  ldr r0, =_sdata
 80012f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012f8:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80012fc:	08008980 	.word	0x08008980
  ldr r2, =_sbss
 8001300:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001304:	200003f8 	.word	0x200003f8

08001308 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001308:	e7fe      	b.n	8001308 <ADC1_2_IRQHandler>
	...

0800130c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001310:	4b08      	ldr	r3, [pc, #32]	; (8001334 <HAL_Init+0x28>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a07      	ldr	r2, [pc, #28]	; (8001334 <HAL_Init+0x28>)
 8001316:	f043 0310 	orr.w	r3, r3, #16
 800131a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800131c:	2003      	movs	r0, #3
 800131e:	f000 fde5 	bl	8001eec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001322:	200f      	movs	r0, #15
 8001324:	f000 f808 	bl	8001338 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001328:	f7ff fe0c 	bl	8000f44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40022000 	.word	0x40022000

08001338 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001340:	4b12      	ldr	r3, [pc, #72]	; (800138c <HAL_InitTick+0x54>)
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	4b12      	ldr	r3, [pc, #72]	; (8001390 <HAL_InitTick+0x58>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	4619      	mov	r1, r3
 800134a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800134e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001352:	fbb2 f3f3 	udiv	r3, r2, r3
 8001356:	4618      	mov	r0, r3
 8001358:	f000 fdef 	bl	8001f3a <HAL_SYSTICK_Config>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e00e      	b.n	8001384 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2b0f      	cmp	r3, #15
 800136a:	d80a      	bhi.n	8001382 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800136c:	2200      	movs	r2, #0
 800136e:	6879      	ldr	r1, [r7, #4]
 8001370:	f04f 30ff 	mov.w	r0, #4294967295
 8001374:	f000 fdc5 	bl	8001f02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001378:	4a06      	ldr	r2, [pc, #24]	; (8001394 <HAL_InitTick+0x5c>)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800137e:	2300      	movs	r3, #0
 8001380:	e000      	b.n	8001384 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
}
 8001384:	4618      	mov	r0, r3
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	20000008 	.word	0x20000008
 8001390:	20000010 	.word	0x20000010
 8001394:	2000000c 	.word	0x2000000c

08001398 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800139c:	4b05      	ldr	r3, [pc, #20]	; (80013b4 <HAL_IncTick+0x1c>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	461a      	mov	r2, r3
 80013a2:	4b05      	ldr	r3, [pc, #20]	; (80013b8 <HAL_IncTick+0x20>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4413      	add	r3, r2
 80013a8:	4a03      	ldr	r2, [pc, #12]	; (80013b8 <HAL_IncTick+0x20>)
 80013aa:	6013      	str	r3, [r2, #0]
}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bc80      	pop	{r7}
 80013b2:	4770      	bx	lr
 80013b4:	20000010 	.word	0x20000010
 80013b8:	200002a8 	.word	0x200002a8

080013bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  return uwTick;
 80013c0:	4b02      	ldr	r3, [pc, #8]	; (80013cc <HAL_GetTick+0x10>)
 80013c2:	681b      	ldr	r3, [r3, #0]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bc80      	pop	{r7}
 80013ca:	4770      	bx	lr
 80013cc:	200002a8 	.word	0x200002a8

080013d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013d8:	f7ff fff0 	bl	80013bc <HAL_GetTick>
 80013dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013e8:	d005      	beq.n	80013f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013ea:	4b0a      	ldr	r3, [pc, #40]	; (8001414 <HAL_Delay+0x44>)
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	461a      	mov	r2, r3
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	4413      	add	r3, r2
 80013f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013f6:	bf00      	nop
 80013f8:	f7ff ffe0 	bl	80013bc <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	68fa      	ldr	r2, [r7, #12]
 8001404:	429a      	cmp	r2, r3
 8001406:	d8f7      	bhi.n	80013f8 <HAL_Delay+0x28>
  {
  }
}
 8001408:	bf00      	nop
 800140a:	bf00      	nop
 800140c:	3710      	adds	r7, #16
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	20000010 	.word	0x20000010

08001418 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001420:	2300      	movs	r3, #0
 8001422:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001424:	2300      	movs	r3, #0
 8001426:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001428:	2300      	movs	r3, #0
 800142a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800142c:	2300      	movs	r3, #0
 800142e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d101      	bne.n	800143a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e0be      	b.n	80015b8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001444:	2b00      	cmp	r3, #0
 8001446:	d109      	bne.n	800145c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2200      	movs	r2, #0
 800144c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2200      	movs	r2, #0
 8001452:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f7ff fda6 	bl	8000fa8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f000 f90d 	bl	800167c <ADC_ConversionStop_Disable>
 8001462:	4603      	mov	r3, r0
 8001464:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800146a:	f003 0310 	and.w	r3, r3, #16
 800146e:	2b00      	cmp	r3, #0
 8001470:	f040 8099 	bne.w	80015a6 <HAL_ADC_Init+0x18e>
 8001474:	7dfb      	ldrb	r3, [r7, #23]
 8001476:	2b00      	cmp	r3, #0
 8001478:	f040 8095 	bne.w	80015a6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001480:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001484:	f023 0302 	bic.w	r3, r3, #2
 8001488:	f043 0202 	orr.w	r2, r3, #2
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001498:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	7b1b      	ldrb	r3, [r3, #12]
 800149e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80014a0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80014a2:	68ba      	ldr	r2, [r7, #8]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014b0:	d003      	beq.n	80014ba <HAL_ADC_Init+0xa2>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d102      	bne.n	80014c0 <HAL_ADC_Init+0xa8>
 80014ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014be:	e000      	b.n	80014c2 <HAL_ADC_Init+0xaa>
 80014c0:	2300      	movs	r3, #0
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	7d1b      	ldrb	r3, [r3, #20]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d119      	bne.n	8001504 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	7b1b      	ldrb	r3, [r3, #12]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d109      	bne.n	80014ec <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	699b      	ldr	r3, [r3, #24]
 80014dc:	3b01      	subs	r3, #1
 80014de:	035a      	lsls	r2, r3, #13
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014e8:	613b      	str	r3, [r7, #16]
 80014ea:	e00b      	b.n	8001504 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f0:	f043 0220 	orr.w	r2, r3, #32
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014fc:	f043 0201 	orr.w	r2, r3, #1
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	430a      	orrs	r2, r1
 8001516:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	689a      	ldr	r2, [r3, #8]
 800151e:	4b28      	ldr	r3, [pc, #160]	; (80015c0 <HAL_ADC_Init+0x1a8>)
 8001520:	4013      	ands	r3, r2
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	6812      	ldr	r2, [r2, #0]
 8001526:	68b9      	ldr	r1, [r7, #8]
 8001528:	430b      	orrs	r3, r1
 800152a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001534:	d003      	beq.n	800153e <HAL_ADC_Init+0x126>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	2b01      	cmp	r3, #1
 800153c:	d104      	bne.n	8001548 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	691b      	ldr	r3, [r3, #16]
 8001542:	3b01      	subs	r3, #1
 8001544:	051b      	lsls	r3, r3, #20
 8001546:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800154e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	68fa      	ldr	r2, [r7, #12]
 8001558:	430a      	orrs	r2, r1
 800155a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	689a      	ldr	r2, [r3, #8]
 8001562:	4b18      	ldr	r3, [pc, #96]	; (80015c4 <HAL_ADC_Init+0x1ac>)
 8001564:	4013      	ands	r3, r2
 8001566:	68ba      	ldr	r2, [r7, #8]
 8001568:	429a      	cmp	r2, r3
 800156a:	d10b      	bne.n	8001584 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2200      	movs	r2, #0
 8001570:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001576:	f023 0303 	bic.w	r3, r3, #3
 800157a:	f043 0201 	orr.w	r2, r3, #1
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001582:	e018      	b.n	80015b6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001588:	f023 0312 	bic.w	r3, r3, #18
 800158c:	f043 0210 	orr.w	r2, r3, #16
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001598:	f043 0201 	orr.w	r2, r3, #1
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80015a4:	e007      	b.n	80015b6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015aa:	f043 0210 	orr.w	r2, r3, #16
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80015b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3718      	adds	r7, #24
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	ffe1f7fd 	.word	0xffe1f7fd
 80015c4:	ff1f0efe 	.word	0xff1f0efe

080015c8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80015d0:	2300      	movs	r3, #0
 80015d2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80015d4:	2300      	movs	r3, #0
 80015d6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d040      	beq.n	8001668 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	689a      	ldr	r2, [r3, #8]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f042 0201 	orr.w	r2, r2, #1
 80015f4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80015f6:	4b1f      	ldr	r3, [pc, #124]	; (8001674 <ADC_Enable+0xac>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a1f      	ldr	r2, [pc, #124]	; (8001678 <ADC_Enable+0xb0>)
 80015fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001600:	0c9b      	lsrs	r3, r3, #18
 8001602:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001604:	e002      	b.n	800160c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	3b01      	subs	r3, #1
 800160a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d1f9      	bne.n	8001606 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001612:	f7ff fed3 	bl	80013bc <HAL_GetTick>
 8001616:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001618:	e01f      	b.n	800165a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800161a:	f7ff fecf 	bl	80013bc <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	2b02      	cmp	r3, #2
 8001626:	d918      	bls.n	800165a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	f003 0301 	and.w	r3, r3, #1
 8001632:	2b01      	cmp	r3, #1
 8001634:	d011      	beq.n	800165a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800163a:	f043 0210 	orr.w	r2, r3, #16
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001646:	f043 0201 	orr.w	r2, r3, #1
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2200      	movs	r2, #0
 8001652:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e007      	b.n	800166a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	f003 0301 	and.w	r3, r3, #1
 8001664:	2b01      	cmp	r3, #1
 8001666:	d1d8      	bne.n	800161a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	20000008 	.word	0x20000008
 8001678:	431bde83 	.word	0x431bde83

0800167c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001684:	2300      	movs	r3, #0
 8001686:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	2b01      	cmp	r3, #1
 8001694:	d12e      	bne.n	80016f4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	689a      	ldr	r2, [r3, #8]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f022 0201 	bic.w	r2, r2, #1
 80016a4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80016a6:	f7ff fe89 	bl	80013bc <HAL_GetTick>
 80016aa:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80016ac:	e01b      	b.n	80016e6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80016ae:	f7ff fe85 	bl	80013bc <HAL_GetTick>
 80016b2:	4602      	mov	r2, r0
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d914      	bls.n	80016e6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d10d      	bne.n	80016e6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ce:	f043 0210 	orr.w	r2, r3, #16
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016da:	f043 0201 	orr.w	r2, r3, #1
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e007      	b.n	80016f6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	f003 0301 	and.w	r3, r3, #1
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d0dc      	beq.n	80016ae <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80016f4:	2300      	movs	r3, #0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
	...

08001700 <HAL_ADCEx_InjectedStart>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef* hadc)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001708:	2300      	movs	r3, #0
 800170a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001712:	2b01      	cmp	r3, #1
 8001714:	d101      	bne.n	800171a <HAL_ADCEx_InjectedStart+0x1a>
 8001716:	2302      	movs	r3, #2
 8001718:	e070      	b.n	80017fc <HAL_ADCEx_InjectedStart+0xfc>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2201      	movs	r2, #1
 800171e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f7ff ff50 	bl	80015c8 <ADC_Enable>
 8001728:	4603      	mov	r3, r0
 800172a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800172c:	7bfb      	ldrb	r3, [r7, #15]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d15f      	bne.n	80017f2 <HAL_ADCEx_InjectedStart+0xf2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001736:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800173a:	f023 0301 	bic.w	r3, r3, #1
 800173e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_INJ_EOC,
                      HAL_ADC_STATE_INJ_BUSY);
    
    /* Case of independent mode or multimode (for devices with several ADCs): */
    /* Set multimode state.                                                   */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a2e      	ldr	r2, [pc, #184]	; (8001804 <HAL_ADCEx_InjectedStart+0x104>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d105      	bne.n	800175c <HAL_ADCEx_InjectedStart+0x5c>
 8001750:	4b2d      	ldr	r3, [pc, #180]	; (8001808 <HAL_ADCEx_InjectedStart+0x108>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001758:	2b00      	cmp	r3, #0
 800175a:	d106      	bne.n	800176a <HAL_ADCEx_InjectedStart+0x6a>
    {
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001760:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	629a      	str	r2, [r3, #40]	; 0x28
 8001768:	e005      	b.n	8001776 <HAL_ADCEx_InjectedStart+0x76>
    }
    else
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800176e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800177a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800177e:	2b00      	cmp	r3, #0
 8001780:	d102      	bne.n	8001788 <HAL_ADCEx_InjectedStart+0x88>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2200      	movs	r2, #0
 8001786:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2200      	movs	r2, #0
 800178c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f06f 0204 	mvn.w	r2, #4
 8001798:	601a      	str	r2, [r3, #0]
    /* If automatic injected conversion is enabled, conversion will start     */
    /* after next regular group conversion.                                   */
    /* Case of multimode enabled (for devices with several ADCs): if ADC is   */
    /* slave, ADC is enabled only (conversion is not started). If ADC is      */
    /* master, ADC is enabled and conversion is started.                      */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO))
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d128      	bne.n	80017fa <HAL_ADCEx_InjectedStart+0xfa>
    {
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80017b2:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80017b6:	d113      	bne.n	80017e0 <HAL_ADCEx_InjectedStart+0xe0>
          ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 80017bc:	4a11      	ldr	r2, [pc, #68]	; (8001804 <HAL_ADCEx_InjectedStart+0x104>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d105      	bne.n	80017ce <HAL_ADCEx_InjectedStart+0xce>
          ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80017c2:	4b11      	ldr	r3, [pc, #68]	; (8001808 <HAL_ADCEx_InjectedStart+0x108>)
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d108      	bne.n	80017e0 <HAL_ADCEx_InjectedStart+0xe0>
      {
        /* Start ADC conversion on injected group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_JSWSTART | ADC_CR2_JEXTTRIG));
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	689a      	ldr	r2, [r3, #8]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f442 1202 	orr.w	r2, r2, #2129920	; 0x208000
 80017dc:	609a      	str	r2, [r3, #8]
 80017de:	e00c      	b.n	80017fa <HAL_ADCEx_InjectedStart+0xfa>
      }
      else
      {
        /* Start ADC conversion on injected group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_JEXTTRIG);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	689a      	ldr	r2, [r3, #8]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80017ee:	609a      	str	r2, [r3, #8]
 80017f0:	e003      	b.n	80017fa <HAL_ADCEx_InjectedStart+0xfa>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2200      	movs	r2, #0
 80017f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 80017fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3710      	adds	r7, #16
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	40012800 	.word	0x40012800
 8001808:	40012400 	.word	0x40012400

0800180c <HAL_ADCEx_InjectedPollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedPollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800180c:	b590      	push	{r4, r7, lr}
 800180e:	b087      	sub	sp, #28
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001816:	2300      	movs	r3, #0
 8001818:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800181a:	2300      	movs	r3, #0
 800181c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Get timeout */
  tickstart = HAL_GetTick();  
 800181e:	f7ff fdcd 	bl	80013bc <HAL_GetTick>
 8001822:	6138      	str	r0, [r7, #16]
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag JEOC is not set after each conversion, no timeout status can  */
  /*    be set.                                                               */
  if ((hadc->Instance->JSQR & ADC_JSQR_JL) == RESET)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800182a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d12a      	bne.n	8001888 <HAL_ADCEx_InjectedPollForConversion+0x7c>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_JEOC))
 8001832:	e021      	b.n	8001878 <HAL_ADCEx_InjectedPollForConversion+0x6c>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800183a:	d01d      	beq.n	8001878 <HAL_ADCEx_InjectedPollForConversion+0x6c>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d007      	beq.n	8001852 <HAL_ADCEx_InjectedPollForConversion+0x46>
 8001842:	f7ff fdbb 	bl	80013bc <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	683a      	ldr	r2, [r7, #0]
 800184e:	429a      	cmp	r2, r3
 8001850:	d212      	bcs.n	8001878 <HAL_ADCEx_InjectedPollForConversion+0x6c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_JEOC))
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 0304 	and.w	r3, r3, #4
 800185c:	2b00      	cmp	r3, #0
 800185e:	d10b      	bne.n	8001878 <HAL_ADCEx_InjectedPollForConversion+0x6c>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001864:	f043 0204 	orr.w	r2, r3, #4
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2200      	movs	r2, #0
 8001870:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001874:	2303      	movs	r3, #3
 8001876:	e0b1      	b.n	80019dc <HAL_ADCEx_InjectedPollForConversion+0x1d0>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_JEOC))
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0304 	and.w	r3, r3, #4
 8001882:	2b00      	cmp	r3, #0
 8001884:	d0d6      	beq.n	8001834 <HAL_ADCEx_InjectedPollForConversion+0x28>
 8001886:	e070      	b.n	800196a <HAL_ADCEx_InjectedPollForConversion+0x15e>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001888:	4b56      	ldr	r3, [pc, #344]	; (80019e4 <HAL_ADCEx_InjectedPollForConversion+0x1d8>)
 800188a:	681c      	ldr	r4, [r3, #0]
 800188c:	2002      	movs	r0, #2
 800188e:	f001 f9af 	bl	8002bf0 <HAL_RCCEx_GetPeriphCLKFreq>
 8001892:	4603      	mov	r3, r0
 8001894:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	6919      	ldr	r1, [r3, #16]
 800189e:	4b52      	ldr	r3, [pc, #328]	; (80019e8 <HAL_ADCEx_InjectedPollForConversion+0x1dc>)
 80018a0:	400b      	ands	r3, r1
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d118      	bne.n	80018d8 <HAL_ADCEx_InjectedPollForConversion+0xcc>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	68d9      	ldr	r1, [r3, #12]
 80018ac:	4b4f      	ldr	r3, [pc, #316]	; (80019ec <HAL_ADCEx_InjectedPollForConversion+0x1e0>)
 80018ae:	400b      	ands	r3, r1
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d111      	bne.n	80018d8 <HAL_ADCEx_InjectedPollForConversion+0xcc>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	6919      	ldr	r1, [r3, #16]
 80018ba:	4b4d      	ldr	r3, [pc, #308]	; (80019f0 <HAL_ADCEx_InjectedPollForConversion+0x1e4>)
 80018bc:	400b      	ands	r3, r1
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d108      	bne.n	80018d4 <HAL_ADCEx_InjectedPollForConversion+0xc8>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	68d9      	ldr	r1, [r3, #12]
 80018c8:	4b4a      	ldr	r3, [pc, #296]	; (80019f4 <HAL_ADCEx_InjectedPollForConversion+0x1e8>)
 80018ca:	400b      	ands	r3, r1
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d101      	bne.n	80018d4 <HAL_ADCEx_InjectedPollForConversion+0xc8>
 80018d0:	2314      	movs	r3, #20
 80018d2:	e020      	b.n	8001916 <HAL_ADCEx_InjectedPollForConversion+0x10a>
 80018d4:	2329      	movs	r3, #41	; 0x29
 80018d6:	e01e      	b.n	8001916 <HAL_ADCEx_InjectedPollForConversion+0x10a>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	6919      	ldr	r1, [r3, #16]
 80018de:	4b44      	ldr	r3, [pc, #272]	; (80019f0 <HAL_ADCEx_InjectedPollForConversion+0x1e4>)
 80018e0:	400b      	ands	r3, r1
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d106      	bne.n	80018f4 <HAL_ADCEx_InjectedPollForConversion+0xe8>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	68d9      	ldr	r1, [r3, #12]
 80018ec:	4b41      	ldr	r3, [pc, #260]	; (80019f4 <HAL_ADCEx_InjectedPollForConversion+0x1e8>)
 80018ee:	400b      	ands	r3, r1
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d00d      	beq.n	8001910 <HAL_ADCEx_InjectedPollForConversion+0x104>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	6919      	ldr	r1, [r3, #16]
 80018fa:	4b3f      	ldr	r3, [pc, #252]	; (80019f8 <HAL_ADCEx_InjectedPollForConversion+0x1ec>)
 80018fc:	400b      	ands	r3, r1
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d108      	bne.n	8001914 <HAL_ADCEx_InjectedPollForConversion+0x108>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	68d9      	ldr	r1, [r3, #12]
 8001908:	4b3b      	ldr	r3, [pc, #236]	; (80019f8 <HAL_ADCEx_InjectedPollForConversion+0x1ec>)
 800190a:	400b      	ands	r3, r1
 800190c:	2b00      	cmp	r3, #0
 800190e:	d101      	bne.n	8001914 <HAL_ADCEx_InjectedPollForConversion+0x108>
 8001910:	2354      	movs	r3, #84	; 0x54
 8001912:	e000      	b.n	8001916 <HAL_ADCEx_InjectedPollForConversion+0x10a>
 8001914:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001916:	fb02 f303 	mul.w	r3, r2, r3
 800191a:	617b      	str	r3, [r7, #20]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800191c:	e021      	b.n	8001962 <HAL_ADCEx_InjectedPollForConversion+0x156>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001924:	d01a      	beq.n	800195c <HAL_ADCEx_InjectedPollForConversion+0x150>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d007      	beq.n	800193c <HAL_ADCEx_InjectedPollForConversion+0x130>
 800192c:	f7ff fd46 	bl	80013bc <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	683a      	ldr	r2, [r7, #0]
 8001938:	429a      	cmp	r2, r3
 800193a:	d20f      	bcs.n	800195c <HAL_ADCEx_InjectedPollForConversion+0x150>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	697a      	ldr	r2, [r7, #20]
 8001940:	429a      	cmp	r2, r3
 8001942:	d90b      	bls.n	800195c <HAL_ADCEx_InjectedPollForConversion+0x150>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001948:	f043 0204 	orr.w	r2, r3, #4
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2200      	movs	r2, #0
 8001954:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e03f      	b.n	80019dc <HAL_ADCEx_InjectedPollForConversion+0x1d0>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	3301      	adds	r3, #1
 8001960:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	697a      	ldr	r2, [r7, #20]
 8001966:	429a      	cmp	r2, r3
 8001968:	d8d9      	bhi.n	800191e <HAL_ADCEx_InjectedPollForConversion+0x112>
  }

  /* Clear injected group conversion flag */
  /* Note: On STM32F1 ADC, clear regular conversion flag raised               */
  /* simultaneously.                                                          */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JSTRT | ADC_FLAG_JEOC | ADC_FLAG_EOC);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f06f 020e 	mvn.w	r2, #14
 8001972:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001978:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Determine whether any further conversion upcoming on group injected      */
  /* by external trigger or by automatic injected conversion                  */
  /* from group regular.                                                      */
  if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800198a:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 800198e:	d012      	beq.n	80019b6 <HAL_ADCEx_InjectedPollForConversion+0x1aa>
     (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800199a:	2b00      	cmp	r3, #0
 800199c:	d11d      	bne.n	80019da <HAL_ADCEx_InjectedPollForConversion+0x1ce>
     (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
     (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80019a8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80019ac:	d115      	bne.n	80019da <HAL_ADCEx_InjectedPollForConversion+0x1ce>
      (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	7b1b      	ldrb	r3, [r3, #12]
     (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d111      	bne.n	80019da <HAL_ADCEx_InjectedPollForConversion+0x1ce>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	629a      	str	r2, [r3, #40]	; 0x28
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d105      	bne.n	80019da <HAL_ADCEx_InjectedPollForConversion+0x1ce>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d2:	f043 0201 	orr.w	r2, r3, #1
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80019da:	2300      	movs	r3, #0
}
 80019dc:	4618      	mov	r0, r3
 80019de:	371c      	adds	r7, #28
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd90      	pop	{r4, r7, pc}
 80019e4:	20000008 	.word	0x20000008
 80019e8:	24924924 	.word	0x24924924
 80019ec:	00924924 	.word	0x00924924
 80019f0:	12492492 	.word	0x12492492
 80019f4:	00492492 	.word	0x00492492
 80019f8:	00249249 	.word	0x00249249

080019fc <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval ADC group injected conversion data
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b085      	sub	sp, #20
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
  uint32_t tmp_jdr = 0U;
 8001a06:	2300      	movs	r3, #0
 8001a08:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Get ADC converted value */ 
  switch(InjectedRank)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	2b04      	cmp	r3, #4
 8001a0e:	d009      	beq.n	8001a24 <HAL_ADCEx_InjectedGetValue+0x28>
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	2b04      	cmp	r3, #4
 8001a14:	d815      	bhi.n	8001a42 <HAL_ADCEx_InjectedGetValue+0x46>
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d00d      	beq.n	8001a38 <HAL_ADCEx_InjectedGetValue+0x3c>
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	2b03      	cmp	r3, #3
 8001a20:	d005      	beq.n	8001a2e <HAL_ADCEx_InjectedGetValue+0x32>
 8001a22:	e00e      	b.n	8001a42 <HAL_ADCEx_InjectedGetValue+0x46>
  {  
    case ADC_INJECTED_RANK_4: 
      tmp_jdr = hadc->Instance->JDR4;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a2a:	60fb      	str	r3, [r7, #12]
      break;
 8001a2c:	e00e      	b.n	8001a4c <HAL_ADCEx_InjectedGetValue+0x50>
    case ADC_INJECTED_RANK_3: 
      tmp_jdr = hadc->Instance->JDR3;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a34:	60fb      	str	r3, [r7, #12]
      break;
 8001a36:	e009      	b.n	8001a4c <HAL_ADCEx_InjectedGetValue+0x50>
    case ADC_INJECTED_RANK_2: 
      tmp_jdr = hadc->Instance->JDR2;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3e:	60fb      	str	r3, [r7, #12]
      break;
 8001a40:	e004      	b.n	8001a4c <HAL_ADCEx_InjectedGetValue+0x50>
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a48:	60fb      	str	r3, [r7, #12]
      break;
 8001a4a:	bf00      	nop
  }
  
  /* Return ADC converted value */ 
  return tmp_jdr;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3714      	adds	r7, #20
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bc80      	pop	{r7}
 8001a56:	4770      	bx	lr

08001a58 <HAL_ADCEx_InjectedConfigChannel>:
  * @param  sConfigInjected: Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8001a58:	b490      	push	{r4, r7}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a62:	2300      	movs	r3, #0
 8001a64:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001a66:	2300      	movs	r3, #0
 8001a68:	60bb      	str	r3, [r7, #8]
    assert_param(IS_ADC_INJECTED_NB_CONV(sConfigInjected->InjectedNbrOfConversion));
    assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->InjectedDiscontinuousConvMode));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d101      	bne.n	8001a78 <HAL_ADCEx_InjectedConfigChannel+0x20>
 8001a74:	2302      	movs	r3, #2
 8001a76:	e17d      	b.n	8001d74 <HAL_ADCEx_InjectedConfigChannel+0x31c>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /*   Note: Scan mode is present by hardware on this device and, if          */
  /*   disabled, discards automatically nb of conversions. Anyway, nb of      */
  /*   conversions is forced to 0x00 for alignment over all STM32 devices.    */
  /* - if scan mode is enabled, injected channels sequence length is set to   */
  /*   parameter "InjectedNbrOfConversion".                                   */
  if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d119      	bne.n	8001abc <HAL_ADCEx_InjectedConfigChannel+0x64>
  {
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d10c      	bne.n	8001aaa <HAL_ADCEx_InjectedConfigChannel+0x52>
    {
      /* Clear the old SQx bits for all injected ranks */
      MODIFY_REG(hadc->Instance->JSQR                             ,
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a96:	0d9b      	lsrs	r3, r3, #22
 8001a98:	059b      	lsls	r3, r3, #22
 8001a9a:	683a      	ldr	r2, [r7, #0]
 8001a9c:	6812      	ldr	r2, [r2, #0]
 8001a9e:	03d1      	lsls	r1, r2, #15
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	6812      	ldr	r2, [r2, #0]
 8001aa4:	430b      	orrs	r3, r1
 8001aa6:	6393      	str	r3, [r2, #56]	; 0x38
 8001aa8:	e04f      	b.n	8001b4a <HAL_ADCEx_InjectedConfigChannel+0xf2>
    /* If another injected rank than rank1 was intended to be set, and could  */
    /* not due to ScanConvMode disabled, error is reported.                   */
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aae:	f043 0220 	orr.w	r2, r3, #32
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	73fb      	strb	r3, [r7, #15]
 8001aba:	e046      	b.n	8001b4a <HAL_ADCEx_InjectedConfigChannel+0xf2>
  else
  {
    /* Since injected channels rank conv. order depends on total number of   */
    /* injected conversions, selected rank must be below or equal to total   */
    /* number of injected conversions to be updated.                         */
    if (sConfigInjected->InjectedRank <= sConfigInjected->InjectedNbrOfConversion)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685a      	ldr	r2, [r3, #4]
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	691b      	ldr	r3, [r3, #16]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d82a      	bhi.n	8001b1e <HAL_ADCEx_InjectedConfigChannel+0xc6>
    {
      /* Clear the old SQx bits for the selected rank */
      /* Set the SQx bits for the selected rank */
      MODIFY_REG(hadc->Instance->JSQR                                         ,
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685a      	ldr	r2, [r3, #4]
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	691b      	ldr	r3, [r3, #16]
 8001ad6:	1ad2      	subs	r2, r2, r3
 8001ad8:	4613      	mov	r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	4413      	add	r3, r2
 8001ade:	330f      	adds	r3, #15
 8001ae0:	221f      	movs	r2, #31
 8001ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8001aea:	43db      	mvns	r3, r3
 8001aec:	4019      	ands	r1, r3
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	691b      	ldr	r3, [r3, #16]
 8001af2:	3b01      	subs	r3, #1
 8001af4:	0518      	lsls	r0, r3, #20
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	681c      	ldr	r4, [r3, #0]
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685a      	ldr	r2, [r3, #4]
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	691b      	ldr	r3, [r3, #16]
 8001b02:	1ad2      	subs	r2, r2, r3
 8001b04:	4613      	mov	r3, r2
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	4413      	add	r3, r2
 8001b0a:	330f      	adds	r3, #15
 8001b0c:	fa04 f303 	lsl.w	r3, r4, r3
 8001b10:	ea40 0203 	orr.w	r2, r0, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	430a      	orrs	r2, r1
 8001b1a:	639a      	str	r2, [r3, #56]	; 0x38
 8001b1c:	e015      	b.n	8001b4a <HAL_ADCEx_InjectedConfigChannel+0xf2>
                                  sConfigInjected->InjectedNbrOfConversion)    );
    }
    else
    {
      /* Clear the old SQx bits for the selected rank */
      MODIFY_REG(hadc->Instance->JSQR                                       ,
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685a      	ldr	r2, [r3, #4]
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	691b      	ldr	r3, [r3, #16]
 8001b2c:	1ad2      	subs	r2, r2, r3
 8001b2e:	4613      	mov	r3, r2
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	4413      	add	r3, r2
 8001b34:	330f      	adds	r3, #15
 8001b36:	221f      	movs	r2, #31
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8001b40:	43da      	mvns	r2, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	400a      	ands	r2, r1
 8001b48:	639a      	str	r2, [r3, #56]	; 0x38
  /* Parameters update not conditioned to ADC state:                          */
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  /* Note: In case of ADC already enabled, caution to not launch an unwanted  */
  /*       conversion while modifying register CR2 by writing 1 to bit ADON.  */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f003 0301 	and.w	r3, r3, #1
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d00c      	beq.n	8001b72 <HAL_ADCEx_InjectedConfigChannel+0x11a>
  {    
    MODIFY_REG(hadc->Instance->CR2                                           ,
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b62:	f023 0301 	bic.w	r3, r3, #1
 8001b66:	683a      	ldr	r2, [r7, #0]
 8001b68:	6991      	ldr	r1, [r2, #24]
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	6812      	ldr	r2, [r2, #0]
 8001b6e:	430b      	orrs	r3, r1
 8001b70:	6093      	str	r3, [r2, #8]
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  
    /* Automatic injected conversion can be enabled if injected group         */
    /* external triggers are disabled.                                        */
    if (sConfigInjected->AutoInjectedConv == ENABLE)
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	7d5b      	ldrb	r3, [r3, #21]
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d115      	bne.n	8001ba6 <HAL_ADCEx_InjectedConfigChannel+0x14e>
    {
      if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	699b      	ldr	r3, [r3, #24]
 8001b7e:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001b82:	d108      	bne.n	8001b96 <HAL_ADCEx_InjectedConfigChannel+0x13e>
      {
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	685a      	ldr	r2, [r3, #4]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001b92:	605a      	str	r2, [r3, #4]
 8001b94:	e007      	b.n	8001ba6 <HAL_ADCEx_InjectedConfigChannel+0x14e>
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b9a:	f043 0220 	orr.w	r2, r3, #32
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	629a      	str	r2, [r3, #40]	; 0x28
        
        tmp_hal_status = HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	73fb      	strb	r3, [r7, #15]
      }
    }
    
    /* Injected discontinuous can be enabled only if auto-injected mode is    */
    /* disabled.                                                              */  
    if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	7d1b      	ldrb	r3, [r3, #20]
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d114      	bne.n	8001bd8 <HAL_ADCEx_InjectedConfigChannel+0x180>
    {
      if (sConfigInjected->AutoInjectedConv == DISABLE)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	7d5b      	ldrb	r3, [r3, #21]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d108      	bne.n	8001bc8 <HAL_ADCEx_InjectedConfigChannel+0x170>
      {
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JDISCEN);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	685a      	ldr	r2, [r3, #4]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001bc4:	605a      	str	r2, [r3, #4]
 8001bc6:	e007      	b.n	8001bd8 <HAL_ADCEx_InjectedConfigChannel+0x180>
      } 
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bcc:	f043 0220 	orr.w	r2, r3, #32
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	629a      	str	r2, [r3, #40]	; 0x28
        
        tmp_hal_status = HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	73fb      	strb	r3, [r7, #15]
    }


  /* InjectedChannel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2b09      	cmp	r3, #9
 8001bde:	d91c      	bls.n	8001c1a <HAL_ADCEx_InjectedConfigChannel+0x1c2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	68d9      	ldr	r1, [r3, #12]
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	4613      	mov	r3, r2
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	4413      	add	r3, r2
 8001bf0:	3b1e      	subs	r3, #30
 8001bf2:	2207      	movs	r2, #7
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	4019      	ands	r1, r3
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	6898      	ldr	r0, [r3, #8]
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	4613      	mov	r3, r2
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	4413      	add	r3, r2
 8001c0a:	3b1e      	subs	r3, #30
 8001c0c:	fa00 f203 	lsl.w	r2, r0, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	430a      	orrs	r2, r1
 8001c16:	60da      	str	r2, [r3, #12]
 8001c18:	e019      	b.n	8001c4e <HAL_ADCEx_InjectedConfigChannel+0x1f6>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel)                      ,
               ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	6919      	ldr	r1, [r3, #16]
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	4613      	mov	r3, r2
 8001c26:	005b      	lsls	r3, r3, #1
 8001c28:	4413      	add	r3, r2
 8001c2a:	2207      	movs	r2, #7
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	43db      	mvns	r3, r3
 8001c32:	4019      	ands	r1, r3
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	6898      	ldr	r0, [r3, #8]
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	4413      	add	r3, r2
 8001c42:	fa00 f203 	lsl.w	r2, r0, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  
  /* If ADC1 InjectedChannel_16 or InjectedChannel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2b10      	cmp	r3, #16
 8001c54:	d003      	beq.n	8001c5e <HAL_ADCEx_InjectedConfigChannel+0x206>
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8001c5a:	2b11      	cmp	r3, #17
 8001c5c:	d107      	bne.n	8001c6e <HAL_ADCEx_InjectedConfigChannel+0x216>
  {
    SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	689a      	ldr	r2, [r3, #8]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001c6c:	609a      	str	r2, [r3, #8]
  }
  
  
  /* Configure the offset: offset enable/disable, InjectedChannel, offset value */
  switch(sConfigInjected->InjectedRank)
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	2b03      	cmp	r3, #3
 8001c74:	d022      	beq.n	8001cbc <HAL_ADCEx_InjectedConfigChannel+0x264>
 8001c76:	2b03      	cmp	r3, #3
 8001c78:	d82e      	bhi.n	8001cd8 <HAL_ADCEx_InjectedConfigChannel+0x280>
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d002      	beq.n	8001c84 <HAL_ADCEx_InjectedConfigChannel+0x22c>
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d00e      	beq.n	8001ca0 <HAL_ADCEx_InjectedConfigChannel+0x248>
 8001c82:	e029      	b.n	8001cd8 <HAL_ADCEx_InjectedConfigChannel+0x280>
  {
    case 1:
      /* Set injected channel 1 offset */
      MODIFY_REG(hadc->Instance->JOFR1,
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	695b      	ldr	r3, [r3, #20]
 8001c8a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001c8e:	f023 030f 	bic.w	r3, r3, #15
 8001c92:	683a      	ldr	r2, [r7, #0]
 8001c94:	68d1      	ldr	r1, [r2, #12]
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	6812      	ldr	r2, [r2, #0]
 8001c9a:	430b      	orrs	r3, r1
 8001c9c:	6153      	str	r3, [r2, #20]
                 ADC_JOFR1_JOFFSET1,
                 sConfigInjected->InjectedOffset);
      break;
 8001c9e:	e029      	b.n	8001cf4 <HAL_ADCEx_InjectedConfigChannel+0x29c>
    case 2:
      /* Set injected channel 2 offset */
      MODIFY_REG(hadc->Instance->JOFR2,
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	699b      	ldr	r3, [r3, #24]
 8001ca6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001caa:	f023 030f 	bic.w	r3, r3, #15
 8001cae:	683a      	ldr	r2, [r7, #0]
 8001cb0:	68d1      	ldr	r1, [r2, #12]
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	6812      	ldr	r2, [r2, #0]
 8001cb6:	430b      	orrs	r3, r1
 8001cb8:	6193      	str	r3, [r2, #24]
                 ADC_JOFR2_JOFFSET2,
                 sConfigInjected->InjectedOffset);
      break;
 8001cba:	e01b      	b.n	8001cf4 <HAL_ADCEx_InjectedConfigChannel+0x29c>
    case 3:
      /* Set injected channel 3 offset */
      MODIFY_REG(hadc->Instance->JOFR3,
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	69db      	ldr	r3, [r3, #28]
 8001cc2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001cc6:	f023 030f 	bic.w	r3, r3, #15
 8001cca:	683a      	ldr	r2, [r7, #0]
 8001ccc:	68d1      	ldr	r1, [r2, #12]
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	6812      	ldr	r2, [r2, #0]
 8001cd2:	430b      	orrs	r3, r1
 8001cd4:	61d3      	str	r3, [r2, #28]
                 ADC_JOFR3_JOFFSET3,
                 sConfigInjected->InjectedOffset);
      break;
 8001cd6:	e00d      	b.n	8001cf4 <HAL_ADCEx_InjectedConfigChannel+0x29c>
    case 4:
    default:
      MODIFY_REG(hadc->Instance->JOFR4,
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	6a1b      	ldr	r3, [r3, #32]
 8001cde:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001ce2:	f023 030f 	bic.w	r3, r3, #15
 8001ce6:	683a      	ldr	r2, [r7, #0]
 8001ce8:	68d1      	ldr	r1, [r2, #12]
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	6812      	ldr	r2, [r2, #0]
 8001cee:	430b      	orrs	r3, r1
 8001cf0:	6213      	str	r3, [r2, #32]
                 ADC_JOFR4_JOFFSET4,
                 sConfigInjected->InjectedOffset);
      break;
 8001cf2:	bf00      	nop
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2b10      	cmp	r3, #16
 8001cfa:	d003      	beq.n	8001d04 <HAL_ADCEx_InjectedConfigChannel+0x2ac>
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	681b      	ldr	r3, [r3, #0]
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8001d00:	2b11      	cmp	r3, #17
 8001d02:	d132      	bne.n	8001d6a <HAL_ADCEx_InjectedConfigChannel+0x312>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a1d      	ldr	r2, [pc, #116]	; (8001d80 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d125      	bne.n	8001d5a <HAL_ADCEx_InjectedConfigChannel+0x302>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d126      	bne.n	8001d6a <HAL_ADCEx_InjectedConfigChannel+0x312>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	689a      	ldr	r2, [r3, #8]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001d2a:	609a      	str	r2, [r3, #8]
        
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR))
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2b10      	cmp	r3, #16
 8001d32:	d11a      	bne.n	8001d6a <HAL_ADCEx_InjectedConfigChannel+0x312>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d34:	4b13      	ldr	r3, [pc, #76]	; (8001d84 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a13      	ldr	r2, [pc, #76]	; (8001d88 <HAL_ADCEx_InjectedConfigChannel+0x330>)
 8001d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d3e:	0c9a      	lsrs	r2, r3, #18
 8001d40:	4613      	mov	r3, r2
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	4413      	add	r3, r2
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d4a:	e002      	b.n	8001d52 <HAL_ADCEx_InjectedConfigChannel+0x2fa>
          {
            wait_loop_index--;
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d1f9      	bne.n	8001d4c <HAL_ADCEx_InjectedConfigChannel+0x2f4>
 8001d58:	e007      	b.n	8001d6a <HAL_ADCEx_InjectedConfigChannel+0x312>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d5e:	f043 0220 	orr.w	r2, r3, #32
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3710      	adds	r7, #16
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bc90      	pop	{r4, r7}
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	40012400 	.word	0x40012400
 8001d84:	20000008 	.word	0x20000008
 8001d88:	431bde83 	.word	0x431bde83

08001d8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b085      	sub	sp, #20
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f003 0307 	and.w	r3, r3, #7
 8001d9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d9c:	4b0c      	ldr	r3, [pc, #48]	; (8001dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001da2:	68ba      	ldr	r2, [r7, #8]
 8001da4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001da8:	4013      	ands	r3, r2
 8001daa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001db4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001db8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dbe:	4a04      	ldr	r2, [pc, #16]	; (8001dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	60d3      	str	r3, [r2, #12]
}
 8001dc4:	bf00      	nop
 8001dc6:	3714      	adds	r7, #20
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bc80      	pop	{r7}
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	e000ed00 	.word	0xe000ed00

08001dd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dd8:	4b04      	ldr	r3, [pc, #16]	; (8001dec <__NVIC_GetPriorityGrouping+0x18>)
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	0a1b      	lsrs	r3, r3, #8
 8001dde:	f003 0307 	and.w	r3, r3, #7
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bc80      	pop	{r7}
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	e000ed00 	.word	0xe000ed00

08001df0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	6039      	str	r1, [r7, #0]
 8001dfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	db0a      	blt.n	8001e1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	b2da      	uxtb	r2, r3
 8001e08:	490c      	ldr	r1, [pc, #48]	; (8001e3c <__NVIC_SetPriority+0x4c>)
 8001e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0e:	0112      	lsls	r2, r2, #4
 8001e10:	b2d2      	uxtb	r2, r2
 8001e12:	440b      	add	r3, r1
 8001e14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e18:	e00a      	b.n	8001e30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	b2da      	uxtb	r2, r3
 8001e1e:	4908      	ldr	r1, [pc, #32]	; (8001e40 <__NVIC_SetPriority+0x50>)
 8001e20:	79fb      	ldrb	r3, [r7, #7]
 8001e22:	f003 030f 	and.w	r3, r3, #15
 8001e26:	3b04      	subs	r3, #4
 8001e28:	0112      	lsls	r2, r2, #4
 8001e2a:	b2d2      	uxtb	r2, r2
 8001e2c:	440b      	add	r3, r1
 8001e2e:	761a      	strb	r2, [r3, #24]
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bc80      	pop	{r7}
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	e000e100 	.word	0xe000e100
 8001e40:	e000ed00 	.word	0xe000ed00

08001e44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b089      	sub	sp, #36	; 0x24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f003 0307 	and.w	r3, r3, #7
 8001e56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	f1c3 0307 	rsb	r3, r3, #7
 8001e5e:	2b04      	cmp	r3, #4
 8001e60:	bf28      	it	cs
 8001e62:	2304      	movcs	r3, #4
 8001e64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	3304      	adds	r3, #4
 8001e6a:	2b06      	cmp	r3, #6
 8001e6c:	d902      	bls.n	8001e74 <NVIC_EncodePriority+0x30>
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	3b03      	subs	r3, #3
 8001e72:	e000      	b.n	8001e76 <NVIC_EncodePriority+0x32>
 8001e74:	2300      	movs	r3, #0
 8001e76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e78:	f04f 32ff 	mov.w	r2, #4294967295
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e82:	43da      	mvns	r2, r3
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	401a      	ands	r2, r3
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	fa01 f303 	lsl.w	r3, r1, r3
 8001e96:	43d9      	mvns	r1, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e9c:	4313      	orrs	r3, r2
         );
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3724      	adds	r7, #36	; 0x24
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bc80      	pop	{r7}
 8001ea6:	4770      	bx	lr

08001ea8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001eb8:	d301      	bcc.n	8001ebe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e00f      	b.n	8001ede <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ebe:	4a0a      	ldr	r2, [pc, #40]	; (8001ee8 <SysTick_Config+0x40>)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ec6:	210f      	movs	r1, #15
 8001ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ecc:	f7ff ff90 	bl	8001df0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ed0:	4b05      	ldr	r3, [pc, #20]	; (8001ee8 <SysTick_Config+0x40>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ed6:	4b04      	ldr	r3, [pc, #16]	; (8001ee8 <SysTick_Config+0x40>)
 8001ed8:	2207      	movs	r2, #7
 8001eda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	e000e010 	.word	0xe000e010

08001eec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f7ff ff49 	bl	8001d8c <__NVIC_SetPriorityGrouping>
}
 8001efa:	bf00      	nop
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b086      	sub	sp, #24
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	4603      	mov	r3, r0
 8001f0a:	60b9      	str	r1, [r7, #8]
 8001f0c:	607a      	str	r2, [r7, #4]
 8001f0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f10:	2300      	movs	r3, #0
 8001f12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f14:	f7ff ff5e 	bl	8001dd4 <__NVIC_GetPriorityGrouping>
 8001f18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	68b9      	ldr	r1, [r7, #8]
 8001f1e:	6978      	ldr	r0, [r7, #20]
 8001f20:	f7ff ff90 	bl	8001e44 <NVIC_EncodePriority>
 8001f24:	4602      	mov	r2, r0
 8001f26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f2a:	4611      	mov	r1, r2
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff ff5f 	bl	8001df0 <__NVIC_SetPriority>
}
 8001f32:	bf00      	nop
 8001f34:	3718      	adds	r7, #24
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b082      	sub	sp, #8
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f7ff ffb0 	bl	8001ea8 <SysTick_Config>
 8001f48:	4603      	mov	r3, r0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
	...

08001f54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b08b      	sub	sp, #44	; 0x2c
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f62:	2300      	movs	r3, #0
 8001f64:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f66:	e169      	b.n	800223c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f68:	2201      	movs	r2, #1
 8001f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	69fa      	ldr	r2, [r7, #28]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	f040 8158 	bne.w	8002236 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	4a9a      	ldr	r2, [pc, #616]	; (80021f4 <HAL_GPIO_Init+0x2a0>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d05e      	beq.n	800204e <HAL_GPIO_Init+0xfa>
 8001f90:	4a98      	ldr	r2, [pc, #608]	; (80021f4 <HAL_GPIO_Init+0x2a0>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d875      	bhi.n	8002082 <HAL_GPIO_Init+0x12e>
 8001f96:	4a98      	ldr	r2, [pc, #608]	; (80021f8 <HAL_GPIO_Init+0x2a4>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d058      	beq.n	800204e <HAL_GPIO_Init+0xfa>
 8001f9c:	4a96      	ldr	r2, [pc, #600]	; (80021f8 <HAL_GPIO_Init+0x2a4>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d86f      	bhi.n	8002082 <HAL_GPIO_Init+0x12e>
 8001fa2:	4a96      	ldr	r2, [pc, #600]	; (80021fc <HAL_GPIO_Init+0x2a8>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d052      	beq.n	800204e <HAL_GPIO_Init+0xfa>
 8001fa8:	4a94      	ldr	r2, [pc, #592]	; (80021fc <HAL_GPIO_Init+0x2a8>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d869      	bhi.n	8002082 <HAL_GPIO_Init+0x12e>
 8001fae:	4a94      	ldr	r2, [pc, #592]	; (8002200 <HAL_GPIO_Init+0x2ac>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d04c      	beq.n	800204e <HAL_GPIO_Init+0xfa>
 8001fb4:	4a92      	ldr	r2, [pc, #584]	; (8002200 <HAL_GPIO_Init+0x2ac>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d863      	bhi.n	8002082 <HAL_GPIO_Init+0x12e>
 8001fba:	4a92      	ldr	r2, [pc, #584]	; (8002204 <HAL_GPIO_Init+0x2b0>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d046      	beq.n	800204e <HAL_GPIO_Init+0xfa>
 8001fc0:	4a90      	ldr	r2, [pc, #576]	; (8002204 <HAL_GPIO_Init+0x2b0>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d85d      	bhi.n	8002082 <HAL_GPIO_Init+0x12e>
 8001fc6:	2b12      	cmp	r3, #18
 8001fc8:	d82a      	bhi.n	8002020 <HAL_GPIO_Init+0xcc>
 8001fca:	2b12      	cmp	r3, #18
 8001fcc:	d859      	bhi.n	8002082 <HAL_GPIO_Init+0x12e>
 8001fce:	a201      	add	r2, pc, #4	; (adr r2, 8001fd4 <HAL_GPIO_Init+0x80>)
 8001fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fd4:	0800204f 	.word	0x0800204f
 8001fd8:	08002029 	.word	0x08002029
 8001fdc:	0800203b 	.word	0x0800203b
 8001fe0:	0800207d 	.word	0x0800207d
 8001fe4:	08002083 	.word	0x08002083
 8001fe8:	08002083 	.word	0x08002083
 8001fec:	08002083 	.word	0x08002083
 8001ff0:	08002083 	.word	0x08002083
 8001ff4:	08002083 	.word	0x08002083
 8001ff8:	08002083 	.word	0x08002083
 8001ffc:	08002083 	.word	0x08002083
 8002000:	08002083 	.word	0x08002083
 8002004:	08002083 	.word	0x08002083
 8002008:	08002083 	.word	0x08002083
 800200c:	08002083 	.word	0x08002083
 8002010:	08002083 	.word	0x08002083
 8002014:	08002083 	.word	0x08002083
 8002018:	08002031 	.word	0x08002031
 800201c:	08002045 	.word	0x08002045
 8002020:	4a79      	ldr	r2, [pc, #484]	; (8002208 <HAL_GPIO_Init+0x2b4>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d013      	beq.n	800204e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002026:	e02c      	b.n	8002082 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	623b      	str	r3, [r7, #32]
          break;
 800202e:	e029      	b.n	8002084 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	3304      	adds	r3, #4
 8002036:	623b      	str	r3, [r7, #32]
          break;
 8002038:	e024      	b.n	8002084 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	3308      	adds	r3, #8
 8002040:	623b      	str	r3, [r7, #32]
          break;
 8002042:	e01f      	b.n	8002084 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	330c      	adds	r3, #12
 800204a:	623b      	str	r3, [r7, #32]
          break;
 800204c:	e01a      	b.n	8002084 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d102      	bne.n	800205c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002056:	2304      	movs	r3, #4
 8002058:	623b      	str	r3, [r7, #32]
          break;
 800205a:	e013      	b.n	8002084 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	2b01      	cmp	r3, #1
 8002062:	d105      	bne.n	8002070 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002064:	2308      	movs	r3, #8
 8002066:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	69fa      	ldr	r2, [r7, #28]
 800206c:	611a      	str	r2, [r3, #16]
          break;
 800206e:	e009      	b.n	8002084 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002070:	2308      	movs	r3, #8
 8002072:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	69fa      	ldr	r2, [r7, #28]
 8002078:	615a      	str	r2, [r3, #20]
          break;
 800207a:	e003      	b.n	8002084 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800207c:	2300      	movs	r3, #0
 800207e:	623b      	str	r3, [r7, #32]
          break;
 8002080:	e000      	b.n	8002084 <HAL_GPIO_Init+0x130>
          break;
 8002082:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	2bff      	cmp	r3, #255	; 0xff
 8002088:	d801      	bhi.n	800208e <HAL_GPIO_Init+0x13a>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	e001      	b.n	8002092 <HAL_GPIO_Init+0x13e>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	3304      	adds	r3, #4
 8002092:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	2bff      	cmp	r3, #255	; 0xff
 8002098:	d802      	bhi.n	80020a0 <HAL_GPIO_Init+0x14c>
 800209a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	e002      	b.n	80020a6 <HAL_GPIO_Init+0x152>
 80020a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a2:	3b08      	subs	r3, #8
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	210f      	movs	r1, #15
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	fa01 f303 	lsl.w	r3, r1, r3
 80020b4:	43db      	mvns	r3, r3
 80020b6:	401a      	ands	r2, r3
 80020b8:	6a39      	ldr	r1, [r7, #32]
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	fa01 f303 	lsl.w	r3, r1, r3
 80020c0:	431a      	orrs	r2, r3
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	f000 80b1 	beq.w	8002236 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80020d4:	4b4d      	ldr	r3, [pc, #308]	; (800220c <HAL_GPIO_Init+0x2b8>)
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	4a4c      	ldr	r2, [pc, #304]	; (800220c <HAL_GPIO_Init+0x2b8>)
 80020da:	f043 0301 	orr.w	r3, r3, #1
 80020de:	6193      	str	r3, [r2, #24]
 80020e0:	4b4a      	ldr	r3, [pc, #296]	; (800220c <HAL_GPIO_Init+0x2b8>)
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	f003 0301 	and.w	r3, r3, #1
 80020e8:	60bb      	str	r3, [r7, #8]
 80020ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80020ec:	4a48      	ldr	r2, [pc, #288]	; (8002210 <HAL_GPIO_Init+0x2bc>)
 80020ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f0:	089b      	lsrs	r3, r3, #2
 80020f2:	3302      	adds	r3, #2
 80020f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80020fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fc:	f003 0303 	and.w	r3, r3, #3
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	220f      	movs	r2, #15
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	43db      	mvns	r3, r3
 800210a:	68fa      	ldr	r2, [r7, #12]
 800210c:	4013      	ands	r3, r2
 800210e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4a40      	ldr	r2, [pc, #256]	; (8002214 <HAL_GPIO_Init+0x2c0>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d013      	beq.n	8002140 <HAL_GPIO_Init+0x1ec>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	4a3f      	ldr	r2, [pc, #252]	; (8002218 <HAL_GPIO_Init+0x2c4>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d00d      	beq.n	800213c <HAL_GPIO_Init+0x1e8>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4a3e      	ldr	r2, [pc, #248]	; (800221c <HAL_GPIO_Init+0x2c8>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d007      	beq.n	8002138 <HAL_GPIO_Init+0x1e4>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4a3d      	ldr	r2, [pc, #244]	; (8002220 <HAL_GPIO_Init+0x2cc>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d101      	bne.n	8002134 <HAL_GPIO_Init+0x1e0>
 8002130:	2303      	movs	r3, #3
 8002132:	e006      	b.n	8002142 <HAL_GPIO_Init+0x1ee>
 8002134:	2304      	movs	r3, #4
 8002136:	e004      	b.n	8002142 <HAL_GPIO_Init+0x1ee>
 8002138:	2302      	movs	r3, #2
 800213a:	e002      	b.n	8002142 <HAL_GPIO_Init+0x1ee>
 800213c:	2301      	movs	r3, #1
 800213e:	e000      	b.n	8002142 <HAL_GPIO_Init+0x1ee>
 8002140:	2300      	movs	r3, #0
 8002142:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002144:	f002 0203 	and.w	r2, r2, #3
 8002148:	0092      	lsls	r2, r2, #2
 800214a:	4093      	lsls	r3, r2
 800214c:	68fa      	ldr	r2, [r7, #12]
 800214e:	4313      	orrs	r3, r2
 8002150:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002152:	492f      	ldr	r1, [pc, #188]	; (8002210 <HAL_GPIO_Init+0x2bc>)
 8002154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002156:	089b      	lsrs	r3, r3, #2
 8002158:	3302      	adds	r3, #2
 800215a:	68fa      	ldr	r2, [r7, #12]
 800215c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d006      	beq.n	800217a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800216c:	4b2d      	ldr	r3, [pc, #180]	; (8002224 <HAL_GPIO_Init+0x2d0>)
 800216e:	689a      	ldr	r2, [r3, #8]
 8002170:	492c      	ldr	r1, [pc, #176]	; (8002224 <HAL_GPIO_Init+0x2d0>)
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	4313      	orrs	r3, r2
 8002176:	608b      	str	r3, [r1, #8]
 8002178:	e006      	b.n	8002188 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800217a:	4b2a      	ldr	r3, [pc, #168]	; (8002224 <HAL_GPIO_Init+0x2d0>)
 800217c:	689a      	ldr	r2, [r3, #8]
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	43db      	mvns	r3, r3
 8002182:	4928      	ldr	r1, [pc, #160]	; (8002224 <HAL_GPIO_Init+0x2d0>)
 8002184:	4013      	ands	r3, r2
 8002186:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d006      	beq.n	80021a2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002194:	4b23      	ldr	r3, [pc, #140]	; (8002224 <HAL_GPIO_Init+0x2d0>)
 8002196:	68da      	ldr	r2, [r3, #12]
 8002198:	4922      	ldr	r1, [pc, #136]	; (8002224 <HAL_GPIO_Init+0x2d0>)
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	4313      	orrs	r3, r2
 800219e:	60cb      	str	r3, [r1, #12]
 80021a0:	e006      	b.n	80021b0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80021a2:	4b20      	ldr	r3, [pc, #128]	; (8002224 <HAL_GPIO_Init+0x2d0>)
 80021a4:	68da      	ldr	r2, [r3, #12]
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	43db      	mvns	r3, r3
 80021aa:	491e      	ldr	r1, [pc, #120]	; (8002224 <HAL_GPIO_Init+0x2d0>)
 80021ac:	4013      	ands	r3, r2
 80021ae:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d006      	beq.n	80021ca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80021bc:	4b19      	ldr	r3, [pc, #100]	; (8002224 <HAL_GPIO_Init+0x2d0>)
 80021be:	685a      	ldr	r2, [r3, #4]
 80021c0:	4918      	ldr	r1, [pc, #96]	; (8002224 <HAL_GPIO_Init+0x2d0>)
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	604b      	str	r3, [r1, #4]
 80021c8:	e006      	b.n	80021d8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80021ca:	4b16      	ldr	r3, [pc, #88]	; (8002224 <HAL_GPIO_Init+0x2d0>)
 80021cc:	685a      	ldr	r2, [r3, #4]
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	43db      	mvns	r3, r3
 80021d2:	4914      	ldr	r1, [pc, #80]	; (8002224 <HAL_GPIO_Init+0x2d0>)
 80021d4:	4013      	ands	r3, r2
 80021d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d021      	beq.n	8002228 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80021e4:	4b0f      	ldr	r3, [pc, #60]	; (8002224 <HAL_GPIO_Init+0x2d0>)
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	490e      	ldr	r1, [pc, #56]	; (8002224 <HAL_GPIO_Init+0x2d0>)
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	600b      	str	r3, [r1, #0]
 80021f0:	e021      	b.n	8002236 <HAL_GPIO_Init+0x2e2>
 80021f2:	bf00      	nop
 80021f4:	10320000 	.word	0x10320000
 80021f8:	10310000 	.word	0x10310000
 80021fc:	10220000 	.word	0x10220000
 8002200:	10210000 	.word	0x10210000
 8002204:	10120000 	.word	0x10120000
 8002208:	10110000 	.word	0x10110000
 800220c:	40021000 	.word	0x40021000
 8002210:	40010000 	.word	0x40010000
 8002214:	40010800 	.word	0x40010800
 8002218:	40010c00 	.word	0x40010c00
 800221c:	40011000 	.word	0x40011000
 8002220:	40011400 	.word	0x40011400
 8002224:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002228:	4b0b      	ldr	r3, [pc, #44]	; (8002258 <HAL_GPIO_Init+0x304>)
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	43db      	mvns	r3, r3
 8002230:	4909      	ldr	r1, [pc, #36]	; (8002258 <HAL_GPIO_Init+0x304>)
 8002232:	4013      	ands	r3, r2
 8002234:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002238:	3301      	adds	r3, #1
 800223a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002242:	fa22 f303 	lsr.w	r3, r2, r3
 8002246:	2b00      	cmp	r3, #0
 8002248:	f47f ae8e 	bne.w	8001f68 <HAL_GPIO_Init+0x14>
  }
}
 800224c:	bf00      	nop
 800224e:	bf00      	nop
 8002250:	372c      	adds	r7, #44	; 0x2c
 8002252:	46bd      	mov	sp, r7
 8002254:	bc80      	pop	{r7}
 8002256:	4770      	bx	lr
 8002258:	40010400 	.word	0x40010400

0800225c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	460b      	mov	r3, r1
 8002266:	807b      	strh	r3, [r7, #2]
 8002268:	4613      	mov	r3, r2
 800226a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800226c:	787b      	ldrb	r3, [r7, #1]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d003      	beq.n	800227a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002272:	887a      	ldrh	r2, [r7, #2]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002278:	e003      	b.n	8002282 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800227a:	887b      	ldrh	r3, [r7, #2]
 800227c:	041a      	lsls	r2, r3, #16
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	611a      	str	r2, [r3, #16]
}
 8002282:	bf00      	nop
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	bc80      	pop	{r7}
 800228a:	4770      	bx	lr

0800228c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b086      	sub	sp, #24
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d101      	bne.n	800229e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e272      	b.n	8002784 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	f000 8087 	beq.w	80023ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022ac:	4b92      	ldr	r3, [pc, #584]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f003 030c 	and.w	r3, r3, #12
 80022b4:	2b04      	cmp	r3, #4
 80022b6:	d00c      	beq.n	80022d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022b8:	4b8f      	ldr	r3, [pc, #572]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f003 030c 	and.w	r3, r3, #12
 80022c0:	2b08      	cmp	r3, #8
 80022c2:	d112      	bne.n	80022ea <HAL_RCC_OscConfig+0x5e>
 80022c4:	4b8c      	ldr	r3, [pc, #560]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022d0:	d10b      	bne.n	80022ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022d2:	4b89      	ldr	r3, [pc, #548]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d06c      	beq.n	80023b8 <HAL_RCC_OscConfig+0x12c>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d168      	bne.n	80023b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e24c      	b.n	8002784 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022f2:	d106      	bne.n	8002302 <HAL_RCC_OscConfig+0x76>
 80022f4:	4b80      	ldr	r3, [pc, #512]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a7f      	ldr	r2, [pc, #508]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 80022fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022fe:	6013      	str	r3, [r2, #0]
 8002300:	e02e      	b.n	8002360 <HAL_RCC_OscConfig+0xd4>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d10c      	bne.n	8002324 <HAL_RCC_OscConfig+0x98>
 800230a:	4b7b      	ldr	r3, [pc, #492]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a7a      	ldr	r2, [pc, #488]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 8002310:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002314:	6013      	str	r3, [r2, #0]
 8002316:	4b78      	ldr	r3, [pc, #480]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a77      	ldr	r2, [pc, #476]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 800231c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002320:	6013      	str	r3, [r2, #0]
 8002322:	e01d      	b.n	8002360 <HAL_RCC_OscConfig+0xd4>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800232c:	d10c      	bne.n	8002348 <HAL_RCC_OscConfig+0xbc>
 800232e:	4b72      	ldr	r3, [pc, #456]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a71      	ldr	r2, [pc, #452]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 8002334:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002338:	6013      	str	r3, [r2, #0]
 800233a:	4b6f      	ldr	r3, [pc, #444]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a6e      	ldr	r2, [pc, #440]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 8002340:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002344:	6013      	str	r3, [r2, #0]
 8002346:	e00b      	b.n	8002360 <HAL_RCC_OscConfig+0xd4>
 8002348:	4b6b      	ldr	r3, [pc, #428]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a6a      	ldr	r2, [pc, #424]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 800234e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002352:	6013      	str	r3, [r2, #0]
 8002354:	4b68      	ldr	r3, [pc, #416]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a67      	ldr	r2, [pc, #412]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 800235a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800235e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d013      	beq.n	8002390 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002368:	f7ff f828 	bl	80013bc <HAL_GetTick>
 800236c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800236e:	e008      	b.n	8002382 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002370:	f7ff f824 	bl	80013bc <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b64      	cmp	r3, #100	; 0x64
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e200      	b.n	8002784 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002382:	4b5d      	ldr	r3, [pc, #372]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d0f0      	beq.n	8002370 <HAL_RCC_OscConfig+0xe4>
 800238e:	e014      	b.n	80023ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002390:	f7ff f814 	bl	80013bc <HAL_GetTick>
 8002394:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002396:	e008      	b.n	80023aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002398:	f7ff f810 	bl	80013bc <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b64      	cmp	r3, #100	; 0x64
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e1ec      	b.n	8002784 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023aa:	4b53      	ldr	r3, [pc, #332]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1f0      	bne.n	8002398 <HAL_RCC_OscConfig+0x10c>
 80023b6:	e000      	b.n	80023ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d063      	beq.n	800248e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023c6:	4b4c      	ldr	r3, [pc, #304]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f003 030c 	and.w	r3, r3, #12
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d00b      	beq.n	80023ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80023d2:	4b49      	ldr	r3, [pc, #292]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f003 030c 	and.w	r3, r3, #12
 80023da:	2b08      	cmp	r3, #8
 80023dc:	d11c      	bne.n	8002418 <HAL_RCC_OscConfig+0x18c>
 80023de:	4b46      	ldr	r3, [pc, #280]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d116      	bne.n	8002418 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ea:	4b43      	ldr	r3, [pc, #268]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d005      	beq.n	8002402 <HAL_RCC_OscConfig+0x176>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d001      	beq.n	8002402 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e1c0      	b.n	8002784 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002402:	4b3d      	ldr	r3, [pc, #244]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	695b      	ldr	r3, [r3, #20]
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	4939      	ldr	r1, [pc, #228]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 8002412:	4313      	orrs	r3, r2
 8002414:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002416:	e03a      	b.n	800248e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	691b      	ldr	r3, [r3, #16]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d020      	beq.n	8002462 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002420:	4b36      	ldr	r3, [pc, #216]	; (80024fc <HAL_RCC_OscConfig+0x270>)
 8002422:	2201      	movs	r2, #1
 8002424:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002426:	f7fe ffc9 	bl	80013bc <HAL_GetTick>
 800242a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800242c:	e008      	b.n	8002440 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800242e:	f7fe ffc5 	bl	80013bc <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	2b02      	cmp	r3, #2
 800243a:	d901      	bls.n	8002440 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e1a1      	b.n	8002784 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002440:	4b2d      	ldr	r3, [pc, #180]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0302 	and.w	r3, r3, #2
 8002448:	2b00      	cmp	r3, #0
 800244a:	d0f0      	beq.n	800242e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800244c:	4b2a      	ldr	r3, [pc, #168]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	695b      	ldr	r3, [r3, #20]
 8002458:	00db      	lsls	r3, r3, #3
 800245a:	4927      	ldr	r1, [pc, #156]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 800245c:	4313      	orrs	r3, r2
 800245e:	600b      	str	r3, [r1, #0]
 8002460:	e015      	b.n	800248e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002462:	4b26      	ldr	r3, [pc, #152]	; (80024fc <HAL_RCC_OscConfig+0x270>)
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002468:	f7fe ffa8 	bl	80013bc <HAL_GetTick>
 800246c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800246e:	e008      	b.n	8002482 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002470:	f7fe ffa4 	bl	80013bc <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	2b02      	cmp	r3, #2
 800247c:	d901      	bls.n	8002482 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e180      	b.n	8002784 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002482:	4b1d      	ldr	r3, [pc, #116]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d1f0      	bne.n	8002470 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0308 	and.w	r3, r3, #8
 8002496:	2b00      	cmp	r3, #0
 8002498:	d03a      	beq.n	8002510 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	699b      	ldr	r3, [r3, #24]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d019      	beq.n	80024d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024a2:	4b17      	ldr	r3, [pc, #92]	; (8002500 <HAL_RCC_OscConfig+0x274>)
 80024a4:	2201      	movs	r2, #1
 80024a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024a8:	f7fe ff88 	bl	80013bc <HAL_GetTick>
 80024ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024ae:	e008      	b.n	80024c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024b0:	f7fe ff84 	bl	80013bc <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e160      	b.n	8002784 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024c2:	4b0d      	ldr	r3, [pc, #52]	; (80024f8 <HAL_RCC_OscConfig+0x26c>)
 80024c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d0f0      	beq.n	80024b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80024ce:	2001      	movs	r0, #1
 80024d0:	f000 faba 	bl	8002a48 <RCC_Delay>
 80024d4:	e01c      	b.n	8002510 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024d6:	4b0a      	ldr	r3, [pc, #40]	; (8002500 <HAL_RCC_OscConfig+0x274>)
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024dc:	f7fe ff6e 	bl	80013bc <HAL_GetTick>
 80024e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024e2:	e00f      	b.n	8002504 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024e4:	f7fe ff6a 	bl	80013bc <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d908      	bls.n	8002504 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e146      	b.n	8002784 <HAL_RCC_OscConfig+0x4f8>
 80024f6:	bf00      	nop
 80024f8:	40021000 	.word	0x40021000
 80024fc:	42420000 	.word	0x42420000
 8002500:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002504:	4b92      	ldr	r3, [pc, #584]	; (8002750 <HAL_RCC_OscConfig+0x4c4>)
 8002506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002508:	f003 0302 	and.w	r3, r3, #2
 800250c:	2b00      	cmp	r3, #0
 800250e:	d1e9      	bne.n	80024e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0304 	and.w	r3, r3, #4
 8002518:	2b00      	cmp	r3, #0
 800251a:	f000 80a6 	beq.w	800266a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800251e:	2300      	movs	r3, #0
 8002520:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002522:	4b8b      	ldr	r3, [pc, #556]	; (8002750 <HAL_RCC_OscConfig+0x4c4>)
 8002524:	69db      	ldr	r3, [r3, #28]
 8002526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d10d      	bne.n	800254a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800252e:	4b88      	ldr	r3, [pc, #544]	; (8002750 <HAL_RCC_OscConfig+0x4c4>)
 8002530:	69db      	ldr	r3, [r3, #28]
 8002532:	4a87      	ldr	r2, [pc, #540]	; (8002750 <HAL_RCC_OscConfig+0x4c4>)
 8002534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002538:	61d3      	str	r3, [r2, #28]
 800253a:	4b85      	ldr	r3, [pc, #532]	; (8002750 <HAL_RCC_OscConfig+0x4c4>)
 800253c:	69db      	ldr	r3, [r3, #28]
 800253e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002542:	60bb      	str	r3, [r7, #8]
 8002544:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002546:	2301      	movs	r3, #1
 8002548:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800254a:	4b82      	ldr	r3, [pc, #520]	; (8002754 <HAL_RCC_OscConfig+0x4c8>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002552:	2b00      	cmp	r3, #0
 8002554:	d118      	bne.n	8002588 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002556:	4b7f      	ldr	r3, [pc, #508]	; (8002754 <HAL_RCC_OscConfig+0x4c8>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a7e      	ldr	r2, [pc, #504]	; (8002754 <HAL_RCC_OscConfig+0x4c8>)
 800255c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002560:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002562:	f7fe ff2b 	bl	80013bc <HAL_GetTick>
 8002566:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002568:	e008      	b.n	800257c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800256a:	f7fe ff27 	bl	80013bc <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	2b64      	cmp	r3, #100	; 0x64
 8002576:	d901      	bls.n	800257c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e103      	b.n	8002784 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800257c:	4b75      	ldr	r3, [pc, #468]	; (8002754 <HAL_RCC_OscConfig+0x4c8>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002584:	2b00      	cmp	r3, #0
 8002586:	d0f0      	beq.n	800256a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	2b01      	cmp	r3, #1
 800258e:	d106      	bne.n	800259e <HAL_RCC_OscConfig+0x312>
 8002590:	4b6f      	ldr	r3, [pc, #444]	; (8002750 <HAL_RCC_OscConfig+0x4c4>)
 8002592:	6a1b      	ldr	r3, [r3, #32]
 8002594:	4a6e      	ldr	r2, [pc, #440]	; (8002750 <HAL_RCC_OscConfig+0x4c4>)
 8002596:	f043 0301 	orr.w	r3, r3, #1
 800259a:	6213      	str	r3, [r2, #32]
 800259c:	e02d      	b.n	80025fa <HAL_RCC_OscConfig+0x36e>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d10c      	bne.n	80025c0 <HAL_RCC_OscConfig+0x334>
 80025a6:	4b6a      	ldr	r3, [pc, #424]	; (8002750 <HAL_RCC_OscConfig+0x4c4>)
 80025a8:	6a1b      	ldr	r3, [r3, #32]
 80025aa:	4a69      	ldr	r2, [pc, #420]	; (8002750 <HAL_RCC_OscConfig+0x4c4>)
 80025ac:	f023 0301 	bic.w	r3, r3, #1
 80025b0:	6213      	str	r3, [r2, #32]
 80025b2:	4b67      	ldr	r3, [pc, #412]	; (8002750 <HAL_RCC_OscConfig+0x4c4>)
 80025b4:	6a1b      	ldr	r3, [r3, #32]
 80025b6:	4a66      	ldr	r2, [pc, #408]	; (8002750 <HAL_RCC_OscConfig+0x4c4>)
 80025b8:	f023 0304 	bic.w	r3, r3, #4
 80025bc:	6213      	str	r3, [r2, #32]
 80025be:	e01c      	b.n	80025fa <HAL_RCC_OscConfig+0x36e>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	2b05      	cmp	r3, #5
 80025c6:	d10c      	bne.n	80025e2 <HAL_RCC_OscConfig+0x356>
 80025c8:	4b61      	ldr	r3, [pc, #388]	; (8002750 <HAL_RCC_OscConfig+0x4c4>)
 80025ca:	6a1b      	ldr	r3, [r3, #32]
 80025cc:	4a60      	ldr	r2, [pc, #384]	; (8002750 <HAL_RCC_OscConfig+0x4c4>)
 80025ce:	f043 0304 	orr.w	r3, r3, #4
 80025d2:	6213      	str	r3, [r2, #32]
 80025d4:	4b5e      	ldr	r3, [pc, #376]	; (8002750 <HAL_RCC_OscConfig+0x4c4>)
 80025d6:	6a1b      	ldr	r3, [r3, #32]
 80025d8:	4a5d      	ldr	r2, [pc, #372]	; (8002750 <HAL_RCC_OscConfig+0x4c4>)
 80025da:	f043 0301 	orr.w	r3, r3, #1
 80025de:	6213      	str	r3, [r2, #32]
 80025e0:	e00b      	b.n	80025fa <HAL_RCC_OscConfig+0x36e>
 80025e2:	4b5b      	ldr	r3, [pc, #364]	; (8002750 <HAL_RCC_OscConfig+0x4c4>)
 80025e4:	6a1b      	ldr	r3, [r3, #32]
 80025e6:	4a5a      	ldr	r2, [pc, #360]	; (8002750 <HAL_RCC_OscConfig+0x4c4>)
 80025e8:	f023 0301 	bic.w	r3, r3, #1
 80025ec:	6213      	str	r3, [r2, #32]
 80025ee:	4b58      	ldr	r3, [pc, #352]	; (8002750 <HAL_RCC_OscConfig+0x4c4>)
 80025f0:	6a1b      	ldr	r3, [r3, #32]
 80025f2:	4a57      	ldr	r2, [pc, #348]	; (8002750 <HAL_RCC_OscConfig+0x4c4>)
 80025f4:	f023 0304 	bic.w	r3, r3, #4
 80025f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d015      	beq.n	800262e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002602:	f7fe fedb 	bl	80013bc <HAL_GetTick>
 8002606:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002608:	e00a      	b.n	8002620 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800260a:	f7fe fed7 	bl	80013bc <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	f241 3288 	movw	r2, #5000	; 0x1388
 8002618:	4293      	cmp	r3, r2
 800261a:	d901      	bls.n	8002620 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e0b1      	b.n	8002784 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002620:	4b4b      	ldr	r3, [pc, #300]	; (8002750 <HAL_RCC_OscConfig+0x4c4>)
 8002622:	6a1b      	ldr	r3, [r3, #32]
 8002624:	f003 0302 	and.w	r3, r3, #2
 8002628:	2b00      	cmp	r3, #0
 800262a:	d0ee      	beq.n	800260a <HAL_RCC_OscConfig+0x37e>
 800262c:	e014      	b.n	8002658 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800262e:	f7fe fec5 	bl	80013bc <HAL_GetTick>
 8002632:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002634:	e00a      	b.n	800264c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002636:	f7fe fec1 	bl	80013bc <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	f241 3288 	movw	r2, #5000	; 0x1388
 8002644:	4293      	cmp	r3, r2
 8002646:	d901      	bls.n	800264c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e09b      	b.n	8002784 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800264c:	4b40      	ldr	r3, [pc, #256]	; (8002750 <HAL_RCC_OscConfig+0x4c4>)
 800264e:	6a1b      	ldr	r3, [r3, #32]
 8002650:	f003 0302 	and.w	r3, r3, #2
 8002654:	2b00      	cmp	r3, #0
 8002656:	d1ee      	bne.n	8002636 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002658:	7dfb      	ldrb	r3, [r7, #23]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d105      	bne.n	800266a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800265e:	4b3c      	ldr	r3, [pc, #240]	; (8002750 <HAL_RCC_OscConfig+0x4c4>)
 8002660:	69db      	ldr	r3, [r3, #28]
 8002662:	4a3b      	ldr	r2, [pc, #236]	; (8002750 <HAL_RCC_OscConfig+0x4c4>)
 8002664:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002668:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	69db      	ldr	r3, [r3, #28]
 800266e:	2b00      	cmp	r3, #0
 8002670:	f000 8087 	beq.w	8002782 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002674:	4b36      	ldr	r3, [pc, #216]	; (8002750 <HAL_RCC_OscConfig+0x4c4>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f003 030c 	and.w	r3, r3, #12
 800267c:	2b08      	cmp	r3, #8
 800267e:	d061      	beq.n	8002744 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	69db      	ldr	r3, [r3, #28]
 8002684:	2b02      	cmp	r3, #2
 8002686:	d146      	bne.n	8002716 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002688:	4b33      	ldr	r3, [pc, #204]	; (8002758 <HAL_RCC_OscConfig+0x4cc>)
 800268a:	2200      	movs	r2, #0
 800268c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800268e:	f7fe fe95 	bl	80013bc <HAL_GetTick>
 8002692:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002694:	e008      	b.n	80026a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002696:	f7fe fe91 	bl	80013bc <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d901      	bls.n	80026a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e06d      	b.n	8002784 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026a8:	4b29      	ldr	r3, [pc, #164]	; (8002750 <HAL_RCC_OscConfig+0x4c4>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d1f0      	bne.n	8002696 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a1b      	ldr	r3, [r3, #32]
 80026b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026bc:	d108      	bne.n	80026d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80026be:	4b24      	ldr	r3, [pc, #144]	; (8002750 <HAL_RCC_OscConfig+0x4c4>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	4921      	ldr	r1, [pc, #132]	; (8002750 <HAL_RCC_OscConfig+0x4c4>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026d0:	4b1f      	ldr	r3, [pc, #124]	; (8002750 <HAL_RCC_OscConfig+0x4c4>)
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a19      	ldr	r1, [r3, #32]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e0:	430b      	orrs	r3, r1
 80026e2:	491b      	ldr	r1, [pc, #108]	; (8002750 <HAL_RCC_OscConfig+0x4c4>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026e8:	4b1b      	ldr	r3, [pc, #108]	; (8002758 <HAL_RCC_OscConfig+0x4cc>)
 80026ea:	2201      	movs	r2, #1
 80026ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ee:	f7fe fe65 	bl	80013bc <HAL_GetTick>
 80026f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026f4:	e008      	b.n	8002708 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026f6:	f7fe fe61 	bl	80013bc <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	2b02      	cmp	r3, #2
 8002702:	d901      	bls.n	8002708 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e03d      	b.n	8002784 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002708:	4b11      	ldr	r3, [pc, #68]	; (8002750 <HAL_RCC_OscConfig+0x4c4>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d0f0      	beq.n	80026f6 <HAL_RCC_OscConfig+0x46a>
 8002714:	e035      	b.n	8002782 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002716:	4b10      	ldr	r3, [pc, #64]	; (8002758 <HAL_RCC_OscConfig+0x4cc>)
 8002718:	2200      	movs	r2, #0
 800271a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800271c:	f7fe fe4e 	bl	80013bc <HAL_GetTick>
 8002720:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002722:	e008      	b.n	8002736 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002724:	f7fe fe4a 	bl	80013bc <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b02      	cmp	r3, #2
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e026      	b.n	8002784 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002736:	4b06      	ldr	r3, [pc, #24]	; (8002750 <HAL_RCC_OscConfig+0x4c4>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1f0      	bne.n	8002724 <HAL_RCC_OscConfig+0x498>
 8002742:	e01e      	b.n	8002782 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	69db      	ldr	r3, [r3, #28]
 8002748:	2b01      	cmp	r3, #1
 800274a:	d107      	bne.n	800275c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e019      	b.n	8002784 <HAL_RCC_OscConfig+0x4f8>
 8002750:	40021000 	.word	0x40021000
 8002754:	40007000 	.word	0x40007000
 8002758:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800275c:	4b0b      	ldr	r3, [pc, #44]	; (800278c <HAL_RCC_OscConfig+0x500>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a1b      	ldr	r3, [r3, #32]
 800276c:	429a      	cmp	r2, r3
 800276e:	d106      	bne.n	800277e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800277a:	429a      	cmp	r2, r3
 800277c:	d001      	beq.n	8002782 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e000      	b.n	8002784 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002782:	2300      	movs	r3, #0
}
 8002784:	4618      	mov	r0, r3
 8002786:	3718      	adds	r7, #24
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	40021000 	.word	0x40021000

08002790 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d101      	bne.n	80027a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e0d0      	b.n	8002946 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027a4:	4b6a      	ldr	r3, [pc, #424]	; (8002950 <HAL_RCC_ClockConfig+0x1c0>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0307 	and.w	r3, r3, #7
 80027ac:	683a      	ldr	r2, [r7, #0]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d910      	bls.n	80027d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027b2:	4b67      	ldr	r3, [pc, #412]	; (8002950 <HAL_RCC_ClockConfig+0x1c0>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f023 0207 	bic.w	r2, r3, #7
 80027ba:	4965      	ldr	r1, [pc, #404]	; (8002950 <HAL_RCC_ClockConfig+0x1c0>)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	4313      	orrs	r3, r2
 80027c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027c2:	4b63      	ldr	r3, [pc, #396]	; (8002950 <HAL_RCC_ClockConfig+0x1c0>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0307 	and.w	r3, r3, #7
 80027ca:	683a      	ldr	r2, [r7, #0]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d001      	beq.n	80027d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e0b8      	b.n	8002946 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0302 	and.w	r3, r3, #2
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d020      	beq.n	8002822 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0304 	and.w	r3, r3, #4
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d005      	beq.n	80027f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027ec:	4b59      	ldr	r3, [pc, #356]	; (8002954 <HAL_RCC_ClockConfig+0x1c4>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	4a58      	ldr	r2, [pc, #352]	; (8002954 <HAL_RCC_ClockConfig+0x1c4>)
 80027f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80027f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0308 	and.w	r3, r3, #8
 8002800:	2b00      	cmp	r3, #0
 8002802:	d005      	beq.n	8002810 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002804:	4b53      	ldr	r3, [pc, #332]	; (8002954 <HAL_RCC_ClockConfig+0x1c4>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	4a52      	ldr	r2, [pc, #328]	; (8002954 <HAL_RCC_ClockConfig+0x1c4>)
 800280a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800280e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002810:	4b50      	ldr	r3, [pc, #320]	; (8002954 <HAL_RCC_ClockConfig+0x1c4>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	494d      	ldr	r1, [pc, #308]	; (8002954 <HAL_RCC_ClockConfig+0x1c4>)
 800281e:	4313      	orrs	r3, r2
 8002820:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	2b00      	cmp	r3, #0
 800282c:	d040      	beq.n	80028b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	2b01      	cmp	r3, #1
 8002834:	d107      	bne.n	8002846 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002836:	4b47      	ldr	r3, [pc, #284]	; (8002954 <HAL_RCC_ClockConfig+0x1c4>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d115      	bne.n	800286e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e07f      	b.n	8002946 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	2b02      	cmp	r3, #2
 800284c:	d107      	bne.n	800285e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800284e:	4b41      	ldr	r3, [pc, #260]	; (8002954 <HAL_RCC_ClockConfig+0x1c4>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d109      	bne.n	800286e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e073      	b.n	8002946 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800285e:	4b3d      	ldr	r3, [pc, #244]	; (8002954 <HAL_RCC_ClockConfig+0x1c4>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d101      	bne.n	800286e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e06b      	b.n	8002946 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800286e:	4b39      	ldr	r3, [pc, #228]	; (8002954 <HAL_RCC_ClockConfig+0x1c4>)
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f023 0203 	bic.w	r2, r3, #3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	4936      	ldr	r1, [pc, #216]	; (8002954 <HAL_RCC_ClockConfig+0x1c4>)
 800287c:	4313      	orrs	r3, r2
 800287e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002880:	f7fe fd9c 	bl	80013bc <HAL_GetTick>
 8002884:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002886:	e00a      	b.n	800289e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002888:	f7fe fd98 	bl	80013bc <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	f241 3288 	movw	r2, #5000	; 0x1388
 8002896:	4293      	cmp	r3, r2
 8002898:	d901      	bls.n	800289e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e053      	b.n	8002946 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800289e:	4b2d      	ldr	r3, [pc, #180]	; (8002954 <HAL_RCC_ClockConfig+0x1c4>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f003 020c 	and.w	r2, r3, #12
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d1eb      	bne.n	8002888 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028b0:	4b27      	ldr	r3, [pc, #156]	; (8002950 <HAL_RCC_ClockConfig+0x1c0>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0307 	and.w	r3, r3, #7
 80028b8:	683a      	ldr	r2, [r7, #0]
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d210      	bcs.n	80028e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028be:	4b24      	ldr	r3, [pc, #144]	; (8002950 <HAL_RCC_ClockConfig+0x1c0>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f023 0207 	bic.w	r2, r3, #7
 80028c6:	4922      	ldr	r1, [pc, #136]	; (8002950 <HAL_RCC_ClockConfig+0x1c0>)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ce:	4b20      	ldr	r3, [pc, #128]	; (8002950 <HAL_RCC_ClockConfig+0x1c0>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0307 	and.w	r3, r3, #7
 80028d6:	683a      	ldr	r2, [r7, #0]
 80028d8:	429a      	cmp	r2, r3
 80028da:	d001      	beq.n	80028e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e032      	b.n	8002946 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0304 	and.w	r3, r3, #4
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d008      	beq.n	80028fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028ec:	4b19      	ldr	r3, [pc, #100]	; (8002954 <HAL_RCC_ClockConfig+0x1c4>)
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	4916      	ldr	r1, [pc, #88]	; (8002954 <HAL_RCC_ClockConfig+0x1c4>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0308 	and.w	r3, r3, #8
 8002906:	2b00      	cmp	r3, #0
 8002908:	d009      	beq.n	800291e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800290a:	4b12      	ldr	r3, [pc, #72]	; (8002954 <HAL_RCC_ClockConfig+0x1c4>)
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	00db      	lsls	r3, r3, #3
 8002918:	490e      	ldr	r1, [pc, #56]	; (8002954 <HAL_RCC_ClockConfig+0x1c4>)
 800291a:	4313      	orrs	r3, r2
 800291c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800291e:	f000 f821 	bl	8002964 <HAL_RCC_GetSysClockFreq>
 8002922:	4602      	mov	r2, r0
 8002924:	4b0b      	ldr	r3, [pc, #44]	; (8002954 <HAL_RCC_ClockConfig+0x1c4>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	091b      	lsrs	r3, r3, #4
 800292a:	f003 030f 	and.w	r3, r3, #15
 800292e:	490a      	ldr	r1, [pc, #40]	; (8002958 <HAL_RCC_ClockConfig+0x1c8>)
 8002930:	5ccb      	ldrb	r3, [r1, r3]
 8002932:	fa22 f303 	lsr.w	r3, r2, r3
 8002936:	4a09      	ldr	r2, [pc, #36]	; (800295c <HAL_RCC_ClockConfig+0x1cc>)
 8002938:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800293a:	4b09      	ldr	r3, [pc, #36]	; (8002960 <HAL_RCC_ClockConfig+0x1d0>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4618      	mov	r0, r3
 8002940:	f7fe fcfa 	bl	8001338 <HAL_InitTick>

  return HAL_OK;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3710      	adds	r7, #16
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	40022000 	.word	0x40022000
 8002954:	40021000 	.word	0x40021000
 8002958:	08008510 	.word	0x08008510
 800295c:	20000008 	.word	0x20000008
 8002960:	2000000c 	.word	0x2000000c

08002964 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002964:	b480      	push	{r7}
 8002966:	b087      	sub	sp, #28
 8002968:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800296a:	2300      	movs	r3, #0
 800296c:	60fb      	str	r3, [r7, #12]
 800296e:	2300      	movs	r3, #0
 8002970:	60bb      	str	r3, [r7, #8]
 8002972:	2300      	movs	r3, #0
 8002974:	617b      	str	r3, [r7, #20]
 8002976:	2300      	movs	r3, #0
 8002978:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800297a:	2300      	movs	r3, #0
 800297c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800297e:	4b1e      	ldr	r3, [pc, #120]	; (80029f8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f003 030c 	and.w	r3, r3, #12
 800298a:	2b04      	cmp	r3, #4
 800298c:	d002      	beq.n	8002994 <HAL_RCC_GetSysClockFreq+0x30>
 800298e:	2b08      	cmp	r3, #8
 8002990:	d003      	beq.n	800299a <HAL_RCC_GetSysClockFreq+0x36>
 8002992:	e027      	b.n	80029e4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002994:	4b19      	ldr	r3, [pc, #100]	; (80029fc <HAL_RCC_GetSysClockFreq+0x98>)
 8002996:	613b      	str	r3, [r7, #16]
      break;
 8002998:	e027      	b.n	80029ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	0c9b      	lsrs	r3, r3, #18
 800299e:	f003 030f 	and.w	r3, r3, #15
 80029a2:	4a17      	ldr	r2, [pc, #92]	; (8002a00 <HAL_RCC_GetSysClockFreq+0x9c>)
 80029a4:	5cd3      	ldrb	r3, [r2, r3]
 80029a6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d010      	beq.n	80029d4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80029b2:	4b11      	ldr	r3, [pc, #68]	; (80029f8 <HAL_RCC_GetSysClockFreq+0x94>)
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	0c5b      	lsrs	r3, r3, #17
 80029b8:	f003 0301 	and.w	r3, r3, #1
 80029bc:	4a11      	ldr	r2, [pc, #68]	; (8002a04 <HAL_RCC_GetSysClockFreq+0xa0>)
 80029be:	5cd3      	ldrb	r3, [r2, r3]
 80029c0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a0d      	ldr	r2, [pc, #52]	; (80029fc <HAL_RCC_GetSysClockFreq+0x98>)
 80029c6:	fb03 f202 	mul.w	r2, r3, r2
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80029d0:	617b      	str	r3, [r7, #20]
 80029d2:	e004      	b.n	80029de <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	4a0c      	ldr	r2, [pc, #48]	; (8002a08 <HAL_RCC_GetSysClockFreq+0xa4>)
 80029d8:	fb02 f303 	mul.w	r3, r2, r3
 80029dc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	613b      	str	r3, [r7, #16]
      break;
 80029e2:	e002      	b.n	80029ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029e4:	4b05      	ldr	r3, [pc, #20]	; (80029fc <HAL_RCC_GetSysClockFreq+0x98>)
 80029e6:	613b      	str	r3, [r7, #16]
      break;
 80029e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029ea:	693b      	ldr	r3, [r7, #16]
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	371c      	adds	r7, #28
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bc80      	pop	{r7}
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	40021000 	.word	0x40021000
 80029fc:	007a1200 	.word	0x007a1200
 8002a00:	08008528 	.word	0x08008528
 8002a04:	08008538 	.word	0x08008538
 8002a08:	003d0900 	.word	0x003d0900

08002a0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a10:	4b02      	ldr	r3, [pc, #8]	; (8002a1c <HAL_RCC_GetHCLKFreq+0x10>)
 8002a12:	681b      	ldr	r3, [r3, #0]
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bc80      	pop	{r7}
 8002a1a:	4770      	bx	lr
 8002a1c:	20000008 	.word	0x20000008

08002a20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a24:	f7ff fff2 	bl	8002a0c <HAL_RCC_GetHCLKFreq>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	4b05      	ldr	r3, [pc, #20]	; (8002a40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	0adb      	lsrs	r3, r3, #11
 8002a30:	f003 0307 	and.w	r3, r3, #7
 8002a34:	4903      	ldr	r1, [pc, #12]	; (8002a44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a36:	5ccb      	ldrb	r3, [r1, r3]
 8002a38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	40021000 	.word	0x40021000
 8002a44:	08008520 	.word	0x08008520

08002a48 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b085      	sub	sp, #20
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a50:	4b0a      	ldr	r3, [pc, #40]	; (8002a7c <RCC_Delay+0x34>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a0a      	ldr	r2, [pc, #40]	; (8002a80 <RCC_Delay+0x38>)
 8002a56:	fba2 2303 	umull	r2, r3, r2, r3
 8002a5a:	0a5b      	lsrs	r3, r3, #9
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	fb02 f303 	mul.w	r3, r2, r3
 8002a62:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a64:	bf00      	nop
  }
  while (Delay --);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	1e5a      	subs	r2, r3, #1
 8002a6a:	60fa      	str	r2, [r7, #12]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d1f9      	bne.n	8002a64 <RCC_Delay+0x1c>
}
 8002a70:	bf00      	nop
 8002a72:	bf00      	nop
 8002a74:	3714      	adds	r7, #20
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bc80      	pop	{r7}
 8002a7a:	4770      	bx	lr
 8002a7c:	20000008 	.word	0x20000008
 8002a80:	10624dd3 	.word	0x10624dd3

08002a84 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b086      	sub	sp, #24
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	613b      	str	r3, [r7, #16]
 8002a90:	2300      	movs	r3, #0
 8002a92:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0301 	and.w	r3, r3, #1
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d07d      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002aa4:	4b4f      	ldr	r3, [pc, #316]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aa6:	69db      	ldr	r3, [r3, #28]
 8002aa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d10d      	bne.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ab0:	4b4c      	ldr	r3, [pc, #304]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ab2:	69db      	ldr	r3, [r3, #28]
 8002ab4:	4a4b      	ldr	r2, [pc, #300]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ab6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aba:	61d3      	str	r3, [r2, #28]
 8002abc:	4b49      	ldr	r3, [pc, #292]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002abe:	69db      	ldr	r3, [r3, #28]
 8002ac0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ac4:	60bb      	str	r3, [r7, #8]
 8002ac6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002acc:	4b46      	ldr	r3, [pc, #280]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d118      	bne.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ad8:	4b43      	ldr	r3, [pc, #268]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a42      	ldr	r2, [pc, #264]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ade:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ae2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ae4:	f7fe fc6a 	bl	80013bc <HAL_GetTick>
 8002ae8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aea:	e008      	b.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aec:	f7fe fc66 	bl	80013bc <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b64      	cmp	r3, #100	; 0x64
 8002af8:	d901      	bls.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e06d      	b.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002afe:	4b3a      	ldr	r3, [pc, #232]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d0f0      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b0a:	4b36      	ldr	r3, [pc, #216]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b0c:	6a1b      	ldr	r3, [r3, #32]
 8002b0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b12:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d02e      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b22:	68fa      	ldr	r2, [r7, #12]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d027      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b28:	4b2e      	ldr	r3, [pc, #184]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b2a:	6a1b      	ldr	r3, [r3, #32]
 8002b2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b30:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b32:	4b2e      	ldr	r3, [pc, #184]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b34:	2201      	movs	r2, #1
 8002b36:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b38:	4b2c      	ldr	r3, [pc, #176]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b3e:	4a29      	ldr	r2, [pc, #164]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d014      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b4e:	f7fe fc35 	bl	80013bc <HAL_GetTick>
 8002b52:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b54:	e00a      	b.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b56:	f7fe fc31 	bl	80013bc <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d901      	bls.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e036      	b.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b6c:	4b1d      	ldr	r3, [pc, #116]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b6e:	6a1b      	ldr	r3, [r3, #32]
 8002b70:	f003 0302 	and.w	r3, r3, #2
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d0ee      	beq.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b78:	4b1a      	ldr	r3, [pc, #104]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b7a:	6a1b      	ldr	r3, [r3, #32]
 8002b7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	4917      	ldr	r1, [pc, #92]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b8a:	7dfb      	ldrb	r3, [r7, #23]
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d105      	bne.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b90:	4b14      	ldr	r3, [pc, #80]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b92:	69db      	ldr	r3, [r3, #28]
 8002b94:	4a13      	ldr	r2, [pc, #76]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b9a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0302 	and.w	r3, r3, #2
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d008      	beq.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ba8:	4b0e      	ldr	r3, [pc, #56]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	490b      	ldr	r1, [pc, #44]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0310 	and.w	r3, r3, #16
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d008      	beq.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002bc6:	4b07      	ldr	r3, [pc, #28]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	4904      	ldr	r1, [pc, #16]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002bd8:	2300      	movs	r3, #0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3718      	adds	r7, #24
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	40021000 	.word	0x40021000
 8002be8:	40007000 	.word	0x40007000
 8002bec:	42420440 	.word	0x42420440

08002bf0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b088      	sub	sp, #32
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	617b      	str	r3, [r7, #20]
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	61fb      	str	r3, [r7, #28]
 8002c00:	2300      	movs	r3, #0
 8002c02:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002c04:	2300      	movs	r3, #0
 8002c06:	60fb      	str	r3, [r7, #12]
 8002c08:	2300      	movs	r3, #0
 8002c0a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2b10      	cmp	r3, #16
 8002c10:	d00a      	beq.n	8002c28 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2b10      	cmp	r3, #16
 8002c16:	f200 808a 	bhi.w	8002d2e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d045      	beq.n	8002cac <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d075      	beq.n	8002d12 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002c26:	e082      	b.n	8002d2e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002c28:	4b46      	ldr	r3, [pc, #280]	; (8002d44 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002c2e:	4b45      	ldr	r3, [pc, #276]	; (8002d44 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d07b      	beq.n	8002d32 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	0c9b      	lsrs	r3, r3, #18
 8002c3e:	f003 030f 	and.w	r3, r3, #15
 8002c42:	4a41      	ldr	r2, [pc, #260]	; (8002d48 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002c44:	5cd3      	ldrb	r3, [r2, r3]
 8002c46:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d015      	beq.n	8002c7e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c52:	4b3c      	ldr	r3, [pc, #240]	; (8002d44 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	0c5b      	lsrs	r3, r3, #17
 8002c58:	f003 0301 	and.w	r3, r3, #1
 8002c5c:	4a3b      	ldr	r2, [pc, #236]	; (8002d4c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002c5e:	5cd3      	ldrb	r3, [r2, r3]
 8002c60:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d00d      	beq.n	8002c88 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002c6c:	4a38      	ldr	r2, [pc, #224]	; (8002d50 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	fb02 f303 	mul.w	r3, r2, r3
 8002c7a:	61fb      	str	r3, [r7, #28]
 8002c7c:	e004      	b.n	8002c88 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	4a34      	ldr	r2, [pc, #208]	; (8002d54 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002c82:	fb02 f303 	mul.w	r3, r2, r3
 8002c86:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002c88:	4b2e      	ldr	r3, [pc, #184]	; (8002d44 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c94:	d102      	bne.n	8002c9c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	61bb      	str	r3, [r7, #24]
      break;
 8002c9a:	e04a      	b.n	8002d32 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	4a2d      	ldr	r2, [pc, #180]	; (8002d58 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca6:	085b      	lsrs	r3, r3, #1
 8002ca8:	61bb      	str	r3, [r7, #24]
      break;
 8002caa:	e042      	b.n	8002d32 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002cac:	4b25      	ldr	r3, [pc, #148]	; (8002d44 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002cae:	6a1b      	ldr	r3, [r3, #32]
 8002cb0:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cbc:	d108      	bne.n	8002cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	f003 0302 	and.w	r3, r3, #2
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d003      	beq.n	8002cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002cc8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ccc:	61bb      	str	r3, [r7, #24]
 8002cce:	e01f      	b.n	8002d10 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cda:	d109      	bne.n	8002cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002cdc:	4b19      	ldr	r3, [pc, #100]	; (8002d44 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce0:	f003 0302 	and.w	r3, r3, #2
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d003      	beq.n	8002cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002ce8:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002cec:	61bb      	str	r3, [r7, #24]
 8002cee:	e00f      	b.n	8002d10 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cf6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002cfa:	d11c      	bne.n	8002d36 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002cfc:	4b11      	ldr	r3, [pc, #68]	; (8002d44 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d016      	beq.n	8002d36 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002d08:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002d0c:	61bb      	str	r3, [r7, #24]
      break;
 8002d0e:	e012      	b.n	8002d36 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002d10:	e011      	b.n	8002d36 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002d12:	f7ff fe85 	bl	8002a20 <HAL_RCC_GetPCLK2Freq>
 8002d16:	4602      	mov	r2, r0
 8002d18:	4b0a      	ldr	r3, [pc, #40]	; (8002d44 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	0b9b      	lsrs	r3, r3, #14
 8002d1e:	f003 0303 	and.w	r3, r3, #3
 8002d22:	3301      	adds	r3, #1
 8002d24:	005b      	lsls	r3, r3, #1
 8002d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d2a:	61bb      	str	r3, [r7, #24]
      break;
 8002d2c:	e004      	b.n	8002d38 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002d2e:	bf00      	nop
 8002d30:	e002      	b.n	8002d38 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002d32:	bf00      	nop
 8002d34:	e000      	b.n	8002d38 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002d36:	bf00      	nop
    }
  }
  return (frequency);
 8002d38:	69bb      	ldr	r3, [r7, #24]
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3720      	adds	r7, #32
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	40021000 	.word	0x40021000
 8002d48:	0800853c 	.word	0x0800853c
 8002d4c:	0800854c 	.word	0x0800854c
 8002d50:	007a1200 	.word	0x007a1200
 8002d54:	003d0900 	.word	0x003d0900
 8002d58:	aaaaaaab 	.word	0xaaaaaaab

08002d5c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d101      	bne.n	8002d6e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e076      	b.n	8002e5c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d108      	bne.n	8002d88 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d7e:	d009      	beq.n	8002d94 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	61da      	str	r2, [r3, #28]
 8002d86:	e005      	b.n	8002d94 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d106      	bne.n	8002db4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f7fe f94e 	bl	8001050 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2202      	movs	r2, #2
 8002db8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002ddc:	431a      	orrs	r2, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002de6:	431a      	orrs	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	691b      	ldr	r3, [r3, #16]
 8002dec:	f003 0302 	and.w	r3, r3, #2
 8002df0:	431a      	orrs	r2, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	431a      	orrs	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	699b      	ldr	r3, [r3, #24]
 8002e00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e04:	431a      	orrs	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	69db      	ldr	r3, [r3, #28]
 8002e0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e0e:	431a      	orrs	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a1b      	ldr	r3, [r3, #32]
 8002e14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e18:	ea42 0103 	orr.w	r1, r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e20:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	699b      	ldr	r3, [r3, #24]
 8002e30:	0c1a      	lsrs	r2, r3, #16
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f002 0204 	and.w	r2, r2, #4
 8002e3a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	69da      	ldr	r2, [r3, #28]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e4a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2201      	movs	r2, #1
 8002e56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3708      	adds	r7, #8
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b088      	sub	sp, #32
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	603b      	str	r3, [r7, #0]
 8002e70:	4613      	mov	r3, r2
 8002e72:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e74:	2300      	movs	r3, #0
 8002e76:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d101      	bne.n	8002e86 <HAL_SPI_Transmit+0x22>
 8002e82:	2302      	movs	r3, #2
 8002e84:	e12d      	b.n	80030e2 <HAL_SPI_Transmit+0x27e>
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2201      	movs	r2, #1
 8002e8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e8e:	f7fe fa95 	bl	80013bc <HAL_GetTick>
 8002e92:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002e94:	88fb      	ldrh	r3, [r7, #6]
 8002e96:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d002      	beq.n	8002eaa <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ea8:	e116      	b.n	80030d8 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d002      	beq.n	8002eb6 <HAL_SPI_Transmit+0x52>
 8002eb0:	88fb      	ldrh	r3, [r7, #6]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d102      	bne.n	8002ebc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002eba:	e10d      	b.n	80030d8 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2203      	movs	r2, #3
 8002ec0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	68ba      	ldr	r2, [r7, #8]
 8002ece:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	88fa      	ldrh	r2, [r7, #6]
 8002ed4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	88fa      	ldrh	r2, [r7, #6]
 8002eda:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2200      	movs	r2, #0
 8002eec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f02:	d10f      	bne.n	8002f24 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f12:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f22:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f2e:	2b40      	cmp	r3, #64	; 0x40
 8002f30:	d007      	beq.n	8002f42 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f40:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f4a:	d14f      	bne.n	8002fec <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d002      	beq.n	8002f5a <HAL_SPI_Transmit+0xf6>
 8002f54:	8afb      	ldrh	r3, [r7, #22]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d142      	bne.n	8002fe0 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5e:	881a      	ldrh	r2, [r3, #0]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6a:	1c9a      	adds	r2, r3, #2
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	3b01      	subs	r3, #1
 8002f78:	b29a      	uxth	r2, r3
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002f7e:	e02f      	b.n	8002fe0 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f003 0302 	and.w	r3, r3, #2
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d112      	bne.n	8002fb4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f92:	881a      	ldrh	r2, [r3, #0]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9e:	1c9a      	adds	r2, r3, #2
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	3b01      	subs	r3, #1
 8002fac:	b29a      	uxth	r2, r3
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	86da      	strh	r2, [r3, #54]	; 0x36
 8002fb2:	e015      	b.n	8002fe0 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fb4:	f7fe fa02 	bl	80013bc <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	683a      	ldr	r2, [r7, #0]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d803      	bhi.n	8002fcc <HAL_SPI_Transmit+0x168>
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fca:	d102      	bne.n	8002fd2 <HAL_SPI_Transmit+0x16e>
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d106      	bne.n	8002fe0 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002fde:	e07b      	b.n	80030d8 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d1ca      	bne.n	8002f80 <HAL_SPI_Transmit+0x11c>
 8002fea:	e050      	b.n	800308e <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d002      	beq.n	8002ffa <HAL_SPI_Transmit+0x196>
 8002ff4:	8afb      	ldrh	r3, [r7, #22]
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d144      	bne.n	8003084 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	330c      	adds	r3, #12
 8003004:	7812      	ldrb	r2, [r2, #0]
 8003006:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300c:	1c5a      	adds	r2, r3, #1
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003016:	b29b      	uxth	r3, r3
 8003018:	3b01      	subs	r3, #1
 800301a:	b29a      	uxth	r2, r3
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003020:	e030      	b.n	8003084 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	f003 0302 	and.w	r3, r3, #2
 800302c:	2b02      	cmp	r3, #2
 800302e:	d113      	bne.n	8003058 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	330c      	adds	r3, #12
 800303a:	7812      	ldrb	r2, [r2, #0]
 800303c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003042:	1c5a      	adds	r2, r3, #1
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800304c:	b29b      	uxth	r3, r3
 800304e:	3b01      	subs	r3, #1
 8003050:	b29a      	uxth	r2, r3
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	86da      	strh	r2, [r3, #54]	; 0x36
 8003056:	e015      	b.n	8003084 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003058:	f7fe f9b0 	bl	80013bc <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	683a      	ldr	r2, [r7, #0]
 8003064:	429a      	cmp	r2, r3
 8003066:	d803      	bhi.n	8003070 <HAL_SPI_Transmit+0x20c>
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800306e:	d102      	bne.n	8003076 <HAL_SPI_Transmit+0x212>
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d106      	bne.n	8003084 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2201      	movs	r2, #1
 800307e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003082:	e029      	b.n	80030d8 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003088:	b29b      	uxth	r3, r3
 800308a:	2b00      	cmp	r3, #0
 800308c:	d1c9      	bne.n	8003022 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800308e:	69ba      	ldr	r2, [r7, #24]
 8003090:	6839      	ldr	r1, [r7, #0]
 8003092:	68f8      	ldr	r0, [r7, #12]
 8003094:	f000 fbcc 	bl	8003830 <SPI_EndRxTxTransaction>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d002      	beq.n	80030a4 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2220      	movs	r2, #32
 80030a2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d10a      	bne.n	80030c2 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030ac:	2300      	movs	r3, #0
 80030ae:	613b      	str	r3, [r7, #16]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	613b      	str	r3, [r7, #16]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	613b      	str	r3, [r7, #16]
 80030c0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d002      	beq.n	80030d0 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	77fb      	strb	r3, [r7, #31]
 80030ce:	e003      	b.n	80030d8 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80030e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3720      	adds	r7, #32
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}

080030ea <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030ea:	b580      	push	{r7, lr}
 80030ec:	b088      	sub	sp, #32
 80030ee:	af02      	add	r7, sp, #8
 80030f0:	60f8      	str	r0, [r7, #12]
 80030f2:	60b9      	str	r1, [r7, #8]
 80030f4:	603b      	str	r3, [r7, #0]
 80030f6:	4613      	mov	r3, r2
 80030f8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80030fa:	2300      	movs	r3, #0
 80030fc:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b01      	cmp	r3, #1
 8003108:	d002      	beq.n	8003110 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800310a:	2302      	movs	r3, #2
 800310c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800310e:	e0fb      	b.n	8003308 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003118:	d112      	bne.n	8003140 <HAL_SPI_Receive+0x56>
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d10e      	bne.n	8003140 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2204      	movs	r2, #4
 8003126:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800312a:	88fa      	ldrh	r2, [r7, #6]
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	9300      	str	r3, [sp, #0]
 8003130:	4613      	mov	r3, r2
 8003132:	68ba      	ldr	r2, [r7, #8]
 8003134:	68b9      	ldr	r1, [r7, #8]
 8003136:	68f8      	ldr	r0, [r7, #12]
 8003138:	f000 f8ef 	bl	800331a <HAL_SPI_TransmitReceive>
 800313c:	4603      	mov	r3, r0
 800313e:	e0e8      	b.n	8003312 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003146:	2b01      	cmp	r3, #1
 8003148:	d101      	bne.n	800314e <HAL_SPI_Receive+0x64>
 800314a:	2302      	movs	r3, #2
 800314c:	e0e1      	b.n	8003312 <HAL_SPI_Receive+0x228>
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2201      	movs	r2, #1
 8003152:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003156:	f7fe f931 	bl	80013bc <HAL_GetTick>
 800315a:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d002      	beq.n	8003168 <HAL_SPI_Receive+0x7e>
 8003162:	88fb      	ldrh	r3, [r7, #6]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d102      	bne.n	800316e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800316c:	e0cc      	b.n	8003308 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2204      	movs	r2, #4
 8003172:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	68ba      	ldr	r2, [r7, #8]
 8003180:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	88fa      	ldrh	r2, [r7, #6]
 8003186:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	88fa      	ldrh	r2, [r7, #6]
 800318c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2200      	movs	r2, #0
 8003198:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2200      	movs	r2, #0
 800319e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2200      	movs	r2, #0
 80031a4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2200      	movs	r2, #0
 80031aa:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031b4:	d10f      	bne.n	80031d6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031c4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80031d4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031e0:	2b40      	cmp	r3, #64	; 0x40
 80031e2:	d007      	beq.n	80031f4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031f2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d16a      	bne.n	80032d2 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80031fc:	e032      	b.n	8003264 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	f003 0301 	and.w	r3, r3, #1
 8003208:	2b01      	cmp	r3, #1
 800320a:	d115      	bne.n	8003238 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f103 020c 	add.w	r2, r3, #12
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003218:	7812      	ldrb	r2, [r2, #0]
 800321a:	b2d2      	uxtb	r2, r2
 800321c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003222:	1c5a      	adds	r2, r3, #1
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800322c:	b29b      	uxth	r3, r3
 800322e:	3b01      	subs	r3, #1
 8003230:	b29a      	uxth	r2, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003236:	e015      	b.n	8003264 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003238:	f7fe f8c0 	bl	80013bc <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	683a      	ldr	r2, [r7, #0]
 8003244:	429a      	cmp	r2, r3
 8003246:	d803      	bhi.n	8003250 <HAL_SPI_Receive+0x166>
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800324e:	d102      	bne.n	8003256 <HAL_SPI_Receive+0x16c>
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d106      	bne.n	8003264 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2201      	movs	r2, #1
 800325e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003262:	e051      	b.n	8003308 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003268:	b29b      	uxth	r3, r3
 800326a:	2b00      	cmp	r3, #0
 800326c:	d1c7      	bne.n	80031fe <HAL_SPI_Receive+0x114>
 800326e:	e035      	b.n	80032dc <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	2b01      	cmp	r3, #1
 800327c:	d113      	bne.n	80032a6 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	68da      	ldr	r2, [r3, #12]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003288:	b292      	uxth	r2, r2
 800328a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003290:	1c9a      	adds	r2, r3, #2
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800329a:	b29b      	uxth	r3, r3
 800329c:	3b01      	subs	r3, #1
 800329e:	b29a      	uxth	r2, r3
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80032a4:	e015      	b.n	80032d2 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032a6:	f7fe f889 	bl	80013bc <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	683a      	ldr	r2, [r7, #0]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d803      	bhi.n	80032be <HAL_SPI_Receive+0x1d4>
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032bc:	d102      	bne.n	80032c4 <HAL_SPI_Receive+0x1da>
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d106      	bne.n	80032d2 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80032d0:	e01a      	b.n	8003308 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d1c9      	bne.n	8003270 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80032dc:	693a      	ldr	r2, [r7, #16]
 80032de:	6839      	ldr	r1, [r7, #0]
 80032e0:	68f8      	ldr	r0, [r7, #12]
 80032e2:	f000 fa53 	bl	800378c <SPI_EndRxTransaction>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d002      	beq.n	80032f2 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2220      	movs	r2, #32
 80032f0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d002      	beq.n	8003300 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	75fb      	strb	r3, [r7, #23]
 80032fe:	e003      	b.n	8003308 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2200      	movs	r2, #0
 800330c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003310:	7dfb      	ldrb	r3, [r7, #23]
}
 8003312:	4618      	mov	r0, r3
 8003314:	3718      	adds	r7, #24
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}

0800331a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800331a:	b580      	push	{r7, lr}
 800331c:	b08c      	sub	sp, #48	; 0x30
 800331e:	af00      	add	r7, sp, #0
 8003320:	60f8      	str	r0, [r7, #12]
 8003322:	60b9      	str	r1, [r7, #8]
 8003324:	607a      	str	r2, [r7, #4]
 8003326:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003328:	2301      	movs	r3, #1
 800332a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800332c:	2300      	movs	r3, #0
 800332e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003338:	2b01      	cmp	r3, #1
 800333a:	d101      	bne.n	8003340 <HAL_SPI_TransmitReceive+0x26>
 800333c:	2302      	movs	r3, #2
 800333e:	e198      	b.n	8003672 <HAL_SPI_TransmitReceive+0x358>
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003348:	f7fe f838 	bl	80013bc <HAL_GetTick>
 800334c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003354:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800335e:	887b      	ldrh	r3, [r7, #2]
 8003360:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003362:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003366:	2b01      	cmp	r3, #1
 8003368:	d00f      	beq.n	800338a <HAL_SPI_TransmitReceive+0x70>
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003370:	d107      	bne.n	8003382 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d103      	bne.n	8003382 <HAL_SPI_TransmitReceive+0x68>
 800337a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800337e:	2b04      	cmp	r3, #4
 8003380:	d003      	beq.n	800338a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003382:	2302      	movs	r3, #2
 8003384:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003388:	e16d      	b.n	8003666 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d005      	beq.n	800339c <HAL_SPI_TransmitReceive+0x82>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d002      	beq.n	800339c <HAL_SPI_TransmitReceive+0x82>
 8003396:	887b      	ldrh	r3, [r7, #2]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d103      	bne.n	80033a4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80033a2:	e160      	b.n	8003666 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	2b04      	cmp	r3, #4
 80033ae:	d003      	beq.n	80033b8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2205      	movs	r2, #5
 80033b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2200      	movs	r2, #0
 80033bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	887a      	ldrh	r2, [r7, #2]
 80033c8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	887a      	ldrh	r2, [r7, #2]
 80033ce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	68ba      	ldr	r2, [r7, #8]
 80033d4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	887a      	ldrh	r2, [r7, #2]
 80033da:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	887a      	ldrh	r2, [r7, #2]
 80033e0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2200      	movs	r2, #0
 80033e6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2200      	movs	r2, #0
 80033ec:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033f8:	2b40      	cmp	r3, #64	; 0x40
 80033fa:	d007      	beq.n	800340c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800340a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003414:	d17c      	bne.n	8003510 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d002      	beq.n	8003424 <HAL_SPI_TransmitReceive+0x10a>
 800341e:	8b7b      	ldrh	r3, [r7, #26]
 8003420:	2b01      	cmp	r3, #1
 8003422:	d16a      	bne.n	80034fa <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003428:	881a      	ldrh	r2, [r3, #0]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003434:	1c9a      	adds	r2, r3, #2
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800343e:	b29b      	uxth	r3, r3
 8003440:	3b01      	subs	r3, #1
 8003442:	b29a      	uxth	r2, r3
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003448:	e057      	b.n	80034fa <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f003 0302 	and.w	r3, r3, #2
 8003454:	2b02      	cmp	r3, #2
 8003456:	d11b      	bne.n	8003490 <HAL_SPI_TransmitReceive+0x176>
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800345c:	b29b      	uxth	r3, r3
 800345e:	2b00      	cmp	r3, #0
 8003460:	d016      	beq.n	8003490 <HAL_SPI_TransmitReceive+0x176>
 8003462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003464:	2b01      	cmp	r3, #1
 8003466:	d113      	bne.n	8003490 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346c:	881a      	ldrh	r2, [r3, #0]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003478:	1c9a      	adds	r2, r3, #2
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003482:	b29b      	uxth	r3, r3
 8003484:	3b01      	subs	r3, #1
 8003486:	b29a      	uxth	r2, r3
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800348c:	2300      	movs	r3, #0
 800348e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	2b01      	cmp	r3, #1
 800349c:	d119      	bne.n	80034d2 <HAL_SPI_TransmitReceive+0x1b8>
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d014      	beq.n	80034d2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	68da      	ldr	r2, [r3, #12]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034b2:	b292      	uxth	r2, r2
 80034b4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ba:	1c9a      	adds	r2, r3, #2
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	3b01      	subs	r3, #1
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80034ce:	2301      	movs	r3, #1
 80034d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80034d2:	f7fd ff73 	bl	80013bc <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80034de:	429a      	cmp	r2, r3
 80034e0:	d80b      	bhi.n	80034fa <HAL_SPI_TransmitReceive+0x1e0>
 80034e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e8:	d007      	beq.n	80034fa <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80034f8:	e0b5      	b.n	8003666 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034fe:	b29b      	uxth	r3, r3
 8003500:	2b00      	cmp	r3, #0
 8003502:	d1a2      	bne.n	800344a <HAL_SPI_TransmitReceive+0x130>
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003508:	b29b      	uxth	r3, r3
 800350a:	2b00      	cmp	r3, #0
 800350c:	d19d      	bne.n	800344a <HAL_SPI_TransmitReceive+0x130>
 800350e:	e080      	b.n	8003612 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d002      	beq.n	800351e <HAL_SPI_TransmitReceive+0x204>
 8003518:	8b7b      	ldrh	r3, [r7, #26]
 800351a:	2b01      	cmp	r3, #1
 800351c:	d16f      	bne.n	80035fe <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	330c      	adds	r3, #12
 8003528:	7812      	ldrb	r2, [r2, #0]
 800352a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003530:	1c5a      	adds	r2, r3, #1
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800353a:	b29b      	uxth	r3, r3
 800353c:	3b01      	subs	r3, #1
 800353e:	b29a      	uxth	r2, r3
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003544:	e05b      	b.n	80035fe <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f003 0302 	and.w	r3, r3, #2
 8003550:	2b02      	cmp	r3, #2
 8003552:	d11c      	bne.n	800358e <HAL_SPI_TransmitReceive+0x274>
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003558:	b29b      	uxth	r3, r3
 800355a:	2b00      	cmp	r3, #0
 800355c:	d017      	beq.n	800358e <HAL_SPI_TransmitReceive+0x274>
 800355e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003560:	2b01      	cmp	r3, #1
 8003562:	d114      	bne.n	800358e <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	330c      	adds	r3, #12
 800356e:	7812      	ldrb	r2, [r2, #0]
 8003570:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003576:	1c5a      	adds	r2, r3, #1
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003580:	b29b      	uxth	r3, r3
 8003582:	3b01      	subs	r3, #1
 8003584:	b29a      	uxth	r2, r3
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800358a:	2300      	movs	r3, #0
 800358c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f003 0301 	and.w	r3, r3, #1
 8003598:	2b01      	cmp	r3, #1
 800359a:	d119      	bne.n	80035d0 <HAL_SPI_TransmitReceive+0x2b6>
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d014      	beq.n	80035d0 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	68da      	ldr	r2, [r3, #12]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b0:	b2d2      	uxtb	r2, r2
 80035b2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b8:	1c5a      	adds	r2, r3, #1
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	3b01      	subs	r3, #1
 80035c6:	b29a      	uxth	r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80035cc:	2301      	movs	r3, #1
 80035ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80035d0:	f7fd fef4 	bl	80013bc <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80035dc:	429a      	cmp	r2, r3
 80035de:	d803      	bhi.n	80035e8 <HAL_SPI_TransmitReceive+0x2ce>
 80035e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e6:	d102      	bne.n	80035ee <HAL_SPI_TransmitReceive+0x2d4>
 80035e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d107      	bne.n	80035fe <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80035fc:	e033      	b.n	8003666 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003602:	b29b      	uxth	r3, r3
 8003604:	2b00      	cmp	r3, #0
 8003606:	d19e      	bne.n	8003546 <HAL_SPI_TransmitReceive+0x22c>
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800360c:	b29b      	uxth	r3, r3
 800360e:	2b00      	cmp	r3, #0
 8003610:	d199      	bne.n	8003546 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003612:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003614:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003616:	68f8      	ldr	r0, [r7, #12]
 8003618:	f000 f90a 	bl	8003830 <SPI_EndRxTxTransaction>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d006      	beq.n	8003630 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2220      	movs	r2, #32
 800362c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800362e:	e01a      	b.n	8003666 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d10a      	bne.n	800364e <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003638:	2300      	movs	r3, #0
 800363a:	617b      	str	r3, [r7, #20]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	617b      	str	r3, [r7, #20]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	617b      	str	r3, [r7, #20]
 800364c:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003652:	2b00      	cmp	r3, #0
 8003654:	d003      	beq.n	800365e <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800365c:	e003      	b.n	8003666 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2201      	movs	r2, #1
 8003662:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800366e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003672:	4618      	mov	r0, r3
 8003674:	3730      	adds	r7, #48	; 0x30
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
	...

0800367c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b088      	sub	sp, #32
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	603b      	str	r3, [r7, #0]
 8003688:	4613      	mov	r3, r2
 800368a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800368c:	f7fd fe96 	bl	80013bc <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003694:	1a9b      	subs	r3, r3, r2
 8003696:	683a      	ldr	r2, [r7, #0]
 8003698:	4413      	add	r3, r2
 800369a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800369c:	f7fd fe8e 	bl	80013bc <HAL_GetTick>
 80036a0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80036a2:	4b39      	ldr	r3, [pc, #228]	; (8003788 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	015b      	lsls	r3, r3, #5
 80036a8:	0d1b      	lsrs	r3, r3, #20
 80036aa:	69fa      	ldr	r2, [r7, #28]
 80036ac:	fb02 f303 	mul.w	r3, r2, r3
 80036b0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036b2:	e054      	b.n	800375e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ba:	d050      	beq.n	800375e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80036bc:	f7fd fe7e 	bl	80013bc <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	69fa      	ldr	r2, [r7, #28]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d902      	bls.n	80036d2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d13d      	bne.n	800374e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	685a      	ldr	r2, [r3, #4]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80036e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036ea:	d111      	bne.n	8003710 <SPI_WaitFlagStateUntilTimeout+0x94>
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036f4:	d004      	beq.n	8003700 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036fe:	d107      	bne.n	8003710 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800370e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003714:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003718:	d10f      	bne.n	800373a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003728:	601a      	str	r2, [r3, #0]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003738:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2201      	movs	r2, #1
 800373e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2200      	movs	r2, #0
 8003746:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e017      	b.n	800377e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d101      	bne.n	8003758 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003754:	2300      	movs	r3, #0
 8003756:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	3b01      	subs	r3, #1
 800375c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	689a      	ldr	r2, [r3, #8]
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	4013      	ands	r3, r2
 8003768:	68ba      	ldr	r2, [r7, #8]
 800376a:	429a      	cmp	r2, r3
 800376c:	bf0c      	ite	eq
 800376e:	2301      	moveq	r3, #1
 8003770:	2300      	movne	r3, #0
 8003772:	b2db      	uxtb	r3, r3
 8003774:	461a      	mov	r2, r3
 8003776:	79fb      	ldrb	r3, [r7, #7]
 8003778:	429a      	cmp	r2, r3
 800377a:	d19b      	bne.n	80036b4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3720      	adds	r7, #32
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	20000008 	.word	0x20000008

0800378c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b086      	sub	sp, #24
 8003790:	af02      	add	r7, sp, #8
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	60b9      	str	r1, [r7, #8]
 8003796:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037a0:	d111      	bne.n	80037c6 <SPI_EndRxTransaction+0x3a>
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037aa:	d004      	beq.n	80037b6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037b4:	d107      	bne.n	80037c6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037c4:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037ce:	d117      	bne.n	8003800 <SPI_EndRxTransaction+0x74>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037d8:	d112      	bne.n	8003800 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	9300      	str	r3, [sp, #0]
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	2200      	movs	r2, #0
 80037e2:	2101      	movs	r1, #1
 80037e4:	68f8      	ldr	r0, [r7, #12]
 80037e6:	f7ff ff49 	bl	800367c <SPI_WaitFlagStateUntilTimeout>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d01a      	beq.n	8003826 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f4:	f043 0220 	orr.w	r2, r3, #32
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	e013      	b.n	8003828 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	9300      	str	r3, [sp, #0]
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	2200      	movs	r2, #0
 8003808:	2180      	movs	r1, #128	; 0x80
 800380a:	68f8      	ldr	r0, [r7, #12]
 800380c:	f7ff ff36 	bl	800367c <SPI_WaitFlagStateUntilTimeout>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d007      	beq.n	8003826 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800381a:	f043 0220 	orr.w	r2, r3, #32
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e000      	b.n	8003828 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003826:	2300      	movs	r3, #0
}
 8003828:	4618      	mov	r0, r3
 800382a:	3710      	adds	r7, #16
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b086      	sub	sp, #24
 8003834:	af02      	add	r7, sp, #8
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	9300      	str	r3, [sp, #0]
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	2200      	movs	r2, #0
 8003844:	2180      	movs	r1, #128	; 0x80
 8003846:	68f8      	ldr	r0, [r7, #12]
 8003848:	f7ff ff18 	bl	800367c <SPI_WaitFlagStateUntilTimeout>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d007      	beq.n	8003862 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003856:	f043 0220 	orr.w	r2, r3, #32
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e000      	b.n	8003864 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	3710      	adds	r7, #16
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <cs_high>:
 * 
 */

#include "nrf24l01p.h"

static void cs_high() {
 800386c:	b580      	push	{r7, lr}
 800386e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER,
 8003870:	2201      	movs	r2, #1
 8003872:	2108      	movs	r1, #8
 8003874:	4802      	ldr	r0, [pc, #8]	; (8003880 <cs_high+0x14>)
 8003876:	f7fe fcf1 	bl	800225c <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
}
 800387a:	bf00      	nop
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	40010800 	.word	0x40010800

08003884 <cs_low>:

static void cs_low() {
 8003884:	b580      	push	{r7, lr}
 8003886:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER,
 8003888:	2200      	movs	r2, #0
 800388a:	2108      	movs	r1, #8
 800388c:	4802      	ldr	r0, [pc, #8]	; (8003898 <cs_low+0x14>)
 800388e:	f7fe fce5 	bl	800225c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
}
 8003892:	bf00      	nop
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	40010800 	.word	0x40010800

0800389c <ce_high>:

static void ce_high() {
 800389c:	b580      	push	{r7, lr}
 800389e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER,
 80038a0:	2201      	movs	r2, #1
 80038a2:	2110      	movs	r1, #16
 80038a4:	4802      	ldr	r0, [pc, #8]	; (80038b0 <ce_high+0x14>)
 80038a6:	f7fe fcd9 	bl	800225c <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
}
 80038aa:	bf00      	nop
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	40010800 	.word	0x40010800

080038b4 <ce_low>:

static void ce_low() {
 80038b4:	b580      	push	{r7, lr}
 80038b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER,
 80038b8:	2200      	movs	r2, #0
 80038ba:	2110      	movs	r1, #16
 80038bc:	4802      	ldr	r0, [pc, #8]	; (80038c8 <ce_low+0x14>)
 80038be:	f7fe fccd 	bl	800225c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
}
 80038c2:	bf00      	nop
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	40010800 	.word	0x40010800

080038cc <read_register>:

uint8_t read_register(uint8_t reg) {
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b086      	sub	sp, #24
 80038d0:	af02      	add	r7, sp, #8
 80038d2:	4603      	mov	r3, r0
 80038d4:	71fb      	strb	r3, [r7, #7]
	uint8_t command = NRF24L01P_CMD_R_REGISTER | reg;
 80038d6:	79fb      	ldrb	r3, [r7, #7]
 80038d8:	73fb      	strb	r3, [r7, #15]
	uint8_t status;
	uint8_t read_val;

	cs_low();
 80038da:	f7ff ffd3 	bl	8003884 <cs_low>
	HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 80038de:	f107 020e 	add.w	r2, r7, #14
 80038e2:	f107 010f 	add.w	r1, r7, #15
 80038e6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80038ea:	9300      	str	r3, [sp, #0]
 80038ec:	2301      	movs	r3, #1
 80038ee:	4809      	ldr	r0, [pc, #36]	; (8003914 <read_register+0x48>)
 80038f0:	f7ff fd13 	bl	800331a <HAL_SPI_TransmitReceive>
	HAL_SPI_Receive(NRF24L01P_SPI, &read_val, 1, 2000);
 80038f4:	f107 010d 	add.w	r1, r7, #13
 80038f8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80038fc:	2201      	movs	r2, #1
 80038fe:	4805      	ldr	r0, [pc, #20]	; (8003914 <read_register+0x48>)
 8003900:	f7ff fbf3 	bl	80030ea <HAL_SPI_Receive>
	cs_high();
 8003904:	f7ff ffb2 	bl	800386c <cs_high>

	return read_val;
 8003908:	7b7b      	ldrb	r3, [r7, #13]
}
 800390a:	4618      	mov	r0, r3
 800390c:	3710      	adds	r7, #16
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	20000228 	.word	0x20000228

08003918 <write_register>:

static uint8_t write_register(uint8_t reg, uint8_t value) {
 8003918:	b580      	push	{r7, lr}
 800391a:	b086      	sub	sp, #24
 800391c:	af02      	add	r7, sp, #8
 800391e:	4603      	mov	r3, r0
 8003920:	460a      	mov	r2, r1
 8003922:	71fb      	strb	r3, [r7, #7]
 8003924:	4613      	mov	r3, r2
 8003926:	71bb      	strb	r3, [r7, #6]
	uint8_t command = NRF24L01P_CMD_W_REGISTER | reg;
 8003928:	79fb      	ldrb	r3, [r7, #7]
 800392a:	f043 0320 	orr.w	r3, r3, #32
 800392e:	b2db      	uxtb	r3, r3
 8003930:	73fb      	strb	r3, [r7, #15]
	uint8_t status;
	uint8_t write_val = value;
 8003932:	79bb      	ldrb	r3, [r7, #6]
 8003934:	737b      	strb	r3, [r7, #13]

	cs_low();
 8003936:	f7ff ffa5 	bl	8003884 <cs_low>
	HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 800393a:	f107 020e 	add.w	r2, r7, #14
 800393e:	f107 010f 	add.w	r1, r7, #15
 8003942:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003946:	9300      	str	r3, [sp, #0]
 8003948:	2301      	movs	r3, #1
 800394a:	4809      	ldr	r0, [pc, #36]	; (8003970 <write_register+0x58>)
 800394c:	f7ff fce5 	bl	800331a <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(NRF24L01P_SPI, &write_val, 1, 2000);
 8003950:	f107 010d 	add.w	r1, r7, #13
 8003954:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003958:	2201      	movs	r2, #1
 800395a:	4805      	ldr	r0, [pc, #20]	; (8003970 <write_register+0x58>)
 800395c:	f7ff fa82 	bl	8002e64 <HAL_SPI_Transmit>
	cs_high();
 8003960:	f7ff ff84 	bl	800386c <cs_high>

	return write_val;
 8003964:	7b7b      	ldrb	r3, [r7, #13]
}
 8003966:	4618      	mov	r0, r3
 8003968:	3710      	adds	r7, #16
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	20000228 	.word	0x20000228

08003974 <write_register_multi>:

void write_register_multi(uint8_t reg, uint8_t *address) {
 8003974:	b580      	push	{r7, lr}
 8003976:	b086      	sub	sp, #24
 8003978:	af02      	add	r7, sp, #8
 800397a:	4603      	mov	r3, r0
 800397c:	6039      	str	r1, [r7, #0]
 800397e:	71fb      	strb	r3, [r7, #7]
	uint8_t command = NRF24L01P_CMD_W_REGISTER | reg;
 8003980:	79fb      	ldrb	r3, [r7, #7]
 8003982:	f043 0320 	orr.w	r3, r3, #32
 8003986:	b2db      	uxtb	r3, r3
 8003988:	73bb      	strb	r3, [r7, #14]
	uint8_t status;
	uint8_t bytes[5];
	for (uint8_t i = 0; i < 5; i++) {
 800398a:	2300      	movs	r3, #0
 800398c:	73fb      	strb	r3, [r7, #15]
 800398e:	e00b      	b.n	80039a8 <write_register_multi+0x34>
		bytes[i] = address [i];
 8003990:	7bfb      	ldrb	r3, [r7, #15]
 8003992:	683a      	ldr	r2, [r7, #0]
 8003994:	441a      	add	r2, r3
 8003996:	7bfb      	ldrb	r3, [r7, #15]
 8003998:	7812      	ldrb	r2, [r2, #0]
 800399a:	3310      	adds	r3, #16
 800399c:	443b      	add	r3, r7
 800399e:	f803 2c08 	strb.w	r2, [r3, #-8]
	for (uint8_t i = 0; i < 5; i++) {
 80039a2:	7bfb      	ldrb	r3, [r7, #15]
 80039a4:	3301      	adds	r3, #1
 80039a6:	73fb      	strb	r3, [r7, #15]
 80039a8:	7bfb      	ldrb	r3, [r7, #15]
 80039aa:	2b04      	cmp	r3, #4
 80039ac:	d9f0      	bls.n	8003990 <write_register_multi+0x1c>
	}
	cs_low();
 80039ae:	f7ff ff69 	bl	8003884 <cs_low>
	HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 80039b2:	f107 020d 	add.w	r2, r7, #13
 80039b6:	f107 010e 	add.w	r1, r7, #14
 80039ba:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80039be:	9300      	str	r3, [sp, #0]
 80039c0:	2301      	movs	r3, #1
 80039c2:	4808      	ldr	r0, [pc, #32]	; (80039e4 <write_register_multi+0x70>)
 80039c4:	f7ff fca9 	bl	800331a <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(NRF24L01P_SPI, bytes, 5, 2000);
 80039c8:	f107 0108 	add.w	r1, r7, #8
 80039cc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80039d0:	2205      	movs	r2, #5
 80039d2:	4804      	ldr	r0, [pc, #16]	; (80039e4 <write_register_multi+0x70>)
 80039d4:	f7ff fa46 	bl	8002e64 <HAL_SPI_Transmit>
	cs_high();
 80039d8:	f7ff ff48 	bl	800386c <cs_high>

	// return address;
}
 80039dc:	bf00      	nop
 80039de:	3710      	adds	r7, #16
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	20000228 	.word	0x20000228

080039e8 <nrf24l01p_tx_init>:
	nrf24l01p_auto_retransmit_delay(250);

	ce_high();
}

void nrf24l01p_tx_init(channel MHz, air_data_rate bps,uint8_t* address) {
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	4603      	mov	r3, r0
 80039f0:	603a      	str	r2, [r7, #0]
 80039f2:	80fb      	strh	r3, [r7, #6]
 80039f4:	460b      	mov	r3, r1
 80039f6:	717b      	strb	r3, [r7, #5]
	nrf24l01p_reset();
 80039f8:	f000 f834 	bl	8003a64 <nrf24l01p_reset>

	nrf24l01p_ptx_mode();
 80039fc:	f000 f882 	bl	8003b04 <nrf24l01p_ptx_mode>
	nrf24l01p_power_up();
 8003a00:	f000 f8f0 	bl	8003be4 <nrf24l01p_power_up>

	nrf24l01p_set_rf_channel(MHz);
 8003a04:	88fb      	ldrh	r3, [r7, #6]
 8003a06:	4618      	mov	r0, r3
 8003a08:	f000 f978 	bl	8003cfc <nrf24l01p_set_rf_channel>
	nrf24l01p_set_rf_air_data_rate(bps);
 8003a0c:	797b      	ldrb	r3, [r7, #5]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f000 f9a4 	bl	8003d5c <nrf24l01p_set_rf_air_data_rate>
	nrf24l01p_set_rf_tx_output_power(_0dBm);
 8003a14:	2003      	movs	r0, #3
 8003a16:	f000 f984 	bl	8003d22 <nrf24l01p_set_rf_tx_output_power>

	nrf24l01p_set_crc_length(1);
 8003a1a:	2001      	movs	r0, #1
 8003a1c:	f000 f8f7 	bl	8003c0e <nrf24l01p_set_crc_length>
	nrf24l01p_set_address_widths(5);
 8003a20:	2005      	movs	r0, #5
 8003a22:	f000 f917 	bl	8003c54 <nrf24l01p_set_address_widths>

	write_register_multi(NRF24L01P_REG_TX_ADDR,address);
 8003a26:	6839      	ldr	r1, [r7, #0]
 8003a28:	2010      	movs	r0, #16
 8003a2a:	f7ff ffa3 	bl	8003974 <write_register_multi>

	nrf24l01p_auto_retransmit_count(3);
 8003a2e:	2003      	movs	r0, #3
 8003a30:	f000 f920 	bl	8003c74 <nrf24l01p_auto_retransmit_count>
	nrf24l01p_auto_retransmit_delay(250);
 8003a34:	20fa      	movs	r0, #250	; 0xfa
 8003a36:	f000 f939 	bl	8003cac <nrf24l01p_auto_retransmit_delay>

	ce_high();
 8003a3a:	f7ff ff2f 	bl	800389c <ce_high>
}
 8003a3e:	bf00      	nop
 8003a40:	3708      	adds	r7, #8
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}

08003a46 <nrf24l01p_tx_transmit>:
	nrf24l01p_clear_rx_dr();

	//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
}

void nrf24l01p_tx_transmit(uint8_t *tx_payload,uint8_t size) {
 8003a46:	b580      	push	{r7, lr}
 8003a48:	b082      	sub	sp, #8
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
 8003a4e:	460b      	mov	r3, r1
 8003a50:	70fb      	strb	r3, [r7, #3]
	nrf24l01p_write_tx_fifo(tx_payload,size);
 8003a52:	78fb      	ldrb	r3, [r7, #3]
 8003a54:	4619      	mov	r1, r3
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 f86e 	bl	8003b38 <nrf24l01p_write_tx_fifo>
}
 8003a5c:	bf00      	nop
 8003a5e:	3708      	adds	r7, #8
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <nrf24l01p_reset>:
		nrf24l01p_clear_max_rt();
	}
}

/* nRF24L01+ Sub Functions */
void nrf24l01p_reset() {
 8003a64:	b580      	push	{r7, lr}
 8003a66:	af00      	add	r7, sp, #0
	// Reset pins
	cs_high();
 8003a68:	f7ff ff00 	bl	800386c <cs_high>
	ce_low();
 8003a6c:	f7ff ff22 	bl	80038b4 <ce_low>

	// Reset registers
	write_register(NRF24L01P_REG_CONFIG, 0x08);
 8003a70:	2108      	movs	r1, #8
 8003a72:	2000      	movs	r0, #0
 8003a74:	f7ff ff50 	bl	8003918 <write_register>
	write_register(NRF24L01P_REG_EN_AA, 0x3C);
 8003a78:	213c      	movs	r1, #60	; 0x3c
 8003a7a:	2001      	movs	r0, #1
 8003a7c:	f7ff ff4c 	bl	8003918 <write_register>
	write_register(NRF24L01P_REG_EN_RXADDR, 0x03);
 8003a80:	2103      	movs	r1, #3
 8003a82:	2002      	movs	r0, #2
 8003a84:	f7ff ff48 	bl	8003918 <write_register>
	write_register(NRF24L01P_REG_SETUP_AW, 0x03);
 8003a88:	2103      	movs	r1, #3
 8003a8a:	2003      	movs	r0, #3
 8003a8c:	f7ff ff44 	bl	8003918 <write_register>
	write_register(NRF24L01P_REG_SETUP_RETR, 0x03);
 8003a90:	2103      	movs	r1, #3
 8003a92:	2004      	movs	r0, #4
 8003a94:	f7ff ff40 	bl	8003918 <write_register>
	write_register(NRF24L01P_REG_RF_CH, 0x02);
 8003a98:	2102      	movs	r1, #2
 8003a9a:	2005      	movs	r0, #5
 8003a9c:	f7ff ff3c 	bl	8003918 <write_register>
	write_register(NRF24L01P_REG_RF_SETUP, 0x07);
 8003aa0:	2107      	movs	r1, #7
 8003aa2:	2006      	movs	r0, #6
 8003aa4:	f7ff ff38 	bl	8003918 <write_register>
	write_register(NRF24L01P_REG_STATUS, 0x7E);
 8003aa8:	217e      	movs	r1, #126	; 0x7e
 8003aaa:	2007      	movs	r0, #7
 8003aac:	f7ff ff34 	bl	8003918 <write_register>
	write_register(NRF24L01P_REG_RX_PW_P0, 0x20);
 8003ab0:	2120      	movs	r1, #32
 8003ab2:	2011      	movs	r0, #17
 8003ab4:	f7ff ff30 	bl	8003918 <write_register>
	write_register(NRF24L01P_REG_RX_PW_P1, 0x20);
 8003ab8:	2120      	movs	r1, #32
 8003aba:	2012      	movs	r0, #18
 8003abc:	f7ff ff2c 	bl	8003918 <write_register>
	write_register(NRF24L01P_REG_RX_PW_P2, 0x00);
 8003ac0:	2100      	movs	r1, #0
 8003ac2:	2013      	movs	r0, #19
 8003ac4:	f7ff ff28 	bl	8003918 <write_register>
	write_register(NRF24L01P_REG_RX_PW_P3, 0x00);
 8003ac8:	2100      	movs	r1, #0
 8003aca:	2014      	movs	r0, #20
 8003acc:	f7ff ff24 	bl	8003918 <write_register>
	write_register(NRF24L01P_REG_RX_PW_P4, 0x00);
 8003ad0:	2100      	movs	r1, #0
 8003ad2:	2015      	movs	r0, #21
 8003ad4:	f7ff ff20 	bl	8003918 <write_register>
	write_register(NRF24L01P_REG_RX_PW_P5, 0x00);
 8003ad8:	2100      	movs	r1, #0
 8003ada:	2016      	movs	r0, #22
 8003adc:	f7ff ff1c 	bl	8003918 <write_register>
	write_register(NRF24L01P_REG_FIFO_STATUS, 0x11);
 8003ae0:	2111      	movs	r1, #17
 8003ae2:	2017      	movs	r0, #23
 8003ae4:	f7ff ff18 	bl	8003918 <write_register>
	write_register(NRF24L01P_REG_DYNPD, 0x00);
 8003ae8:	2100      	movs	r1, #0
 8003aea:	201c      	movs	r0, #28
 8003aec:	f7ff ff14 	bl	8003918 <write_register>
	write_register(NRF24L01P_REG_FEATURE, 0x00);
 8003af0:	2100      	movs	r1, #0
 8003af2:	201d      	movs	r0, #29
 8003af4:	f7ff ff10 	bl	8003918 <write_register>

	// Reset FIFO
	nrf24l01p_flush_rx_fifo();
 8003af8:	f000 f844 	bl	8003b84 <nrf24l01p_flush_rx_fifo>
	nrf24l01p_flush_tx_fifo();
 8003afc:	f000 f85a 	bl	8003bb4 <nrf24l01p_flush_tx_fifo>
}
 8003b00:	bf00      	nop
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <nrf24l01p_ptx_mode>:
	write_register(NRF24L01P_REG_CONFIG, new_config);

	ce_high();
}

void nrf24l01p_ptx_mode() {
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
	ce_low();
 8003b0a:	f7ff fed3 	bl	80038b4 <ce_low>

	uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8003b0e:	2000      	movs	r0, #0
 8003b10:	f7ff fedc 	bl	80038cc <read_register>
 8003b14:	4603      	mov	r3, r0
 8003b16:	71fb      	strb	r3, [r7, #7]
	new_config &= 0xFE;
 8003b18:	79fb      	ldrb	r3, [r7, #7]
 8003b1a:	f023 0301 	bic.w	r3, r3, #1
 8003b1e:	71fb      	strb	r3, [r7, #7]

	write_register(NRF24L01P_REG_CONFIG, new_config);
 8003b20:	79fb      	ldrb	r3, [r7, #7]
 8003b22:	4619      	mov	r1, r3
 8003b24:	2000      	movs	r0, #0
 8003b26:	f7ff fef7 	bl	8003918 <write_register>

	ce_high();
 8003b2a:	f7ff feb7 	bl	800389c <ce_high>
}
 8003b2e:	bf00      	nop
 8003b30:	3708      	adds	r7, #8
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
	...

08003b38 <nrf24l01p_write_tx_fifo>:
	cs_high();

	return status;
}

uint8_t nrf24l01p_write_tx_fifo(uint8_t *tx_payload,uint8_t size) {
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b086      	sub	sp, #24
 8003b3c:	af02      	add	r7, sp, #8
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	460b      	mov	r3, r1
 8003b42:	70fb      	strb	r3, [r7, #3]
	uint8_t command = NRF24L01P_CMD_W_TX_PAYLOAD;
 8003b44:	23a0      	movs	r3, #160	; 0xa0
 8003b46:	73fb      	strb	r3, [r7, #15]
	uint8_t status;

	cs_low();
 8003b48:	f7ff fe9c 	bl	8003884 <cs_low>
	HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8003b4c:	f107 020e 	add.w	r2, r7, #14
 8003b50:	f107 010f 	add.w	r1, r7, #15
 8003b54:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003b58:	9300      	str	r3, [sp, #0]
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	4808      	ldr	r0, [pc, #32]	; (8003b80 <nrf24l01p_write_tx_fifo+0x48>)
 8003b5e:	f7ff fbdc 	bl	800331a <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(NRF24L01P_SPI, tx_payload, size, 2000);
 8003b62:	78fb      	ldrb	r3, [r7, #3]
 8003b64:	b29a      	uxth	r2, r3
 8003b66:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003b6a:	6879      	ldr	r1, [r7, #4]
 8003b6c:	4804      	ldr	r0, [pc, #16]	; (8003b80 <nrf24l01p_write_tx_fifo+0x48>)
 8003b6e:	f7ff f979 	bl	8002e64 <HAL_SPI_Transmit>
	//HAL_SPI_Transmit(NRF24L01P_SPI, tx_payload, NRF24L01P_PAYLOAD_LENGTH, 2000);
	cs_high();
 8003b72:	f7ff fe7b 	bl	800386c <cs_high>

	return status;
 8003b76:	7bbb      	ldrb	r3, [r7, #14]
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3710      	adds	r7, #16
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	20000228 	.word	0x20000228

08003b84 <nrf24l01p_flush_rx_fifo>:

void nrf24l01p_flush_rx_fifo() {
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af02      	add	r7, sp, #8
	uint8_t command = NRF24L01P_CMD_FLUSH_RX;
 8003b8a:	23e2      	movs	r3, #226	; 0xe2
 8003b8c:	71fb      	strb	r3, [r7, #7]
	uint8_t status;

	cs_low();
 8003b8e:	f7ff fe79 	bl	8003884 <cs_low>
	HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8003b92:	1dba      	adds	r2, r7, #6
 8003b94:	1df9      	adds	r1, r7, #7
 8003b96:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003b9a:	9300      	str	r3, [sp, #0]
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	4804      	ldr	r0, [pc, #16]	; (8003bb0 <nrf24l01p_flush_rx_fifo+0x2c>)
 8003ba0:	f7ff fbbb 	bl	800331a <HAL_SPI_TransmitReceive>
	cs_high();
 8003ba4:	f7ff fe62 	bl	800386c <cs_high>
}
 8003ba8:	bf00      	nop
 8003baa:	3708      	adds	r7, #8
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	20000228 	.word	0x20000228

08003bb4 <nrf24l01p_flush_tx_fifo>:

void nrf24l01p_flush_tx_fifo() {
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af02      	add	r7, sp, #8
	uint8_t command = NRF24L01P_CMD_FLUSH_TX;
 8003bba:	23e1      	movs	r3, #225	; 0xe1
 8003bbc:	71fb      	strb	r3, [r7, #7]
	uint8_t status;

	cs_low();
 8003bbe:	f7ff fe61 	bl	8003884 <cs_low>
	HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8003bc2:	1dba      	adds	r2, r7, #6
 8003bc4:	1df9      	adds	r1, r7, #7
 8003bc6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003bca:	9300      	str	r3, [sp, #0]
 8003bcc:	2301      	movs	r3, #1
 8003bce:	4804      	ldr	r0, [pc, #16]	; (8003be0 <nrf24l01p_flush_tx_fifo+0x2c>)
 8003bd0:	f7ff fba3 	bl	800331a <HAL_SPI_TransmitReceive>
	cs_high();
 8003bd4:	f7ff fe4a 	bl	800386c <cs_high>
}
 8003bd8:	bf00      	nop
 8003bda:	3708      	adds	r7, #8
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	20000228 	.word	0x20000228

08003be4 <nrf24l01p_power_up>:
	new_status |= 0x10;

	write_register(NRF24L01P_REG_STATUS, new_status);
}

void nrf24l01p_power_up() {
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
	uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8003bea:	2000      	movs	r0, #0
 8003bec:	f7ff fe6e 	bl	80038cc <read_register>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	71fb      	strb	r3, [r7, #7]
	new_config |= 1 << 1;
 8003bf4:	79fb      	ldrb	r3, [r7, #7]
 8003bf6:	f043 0302 	orr.w	r3, r3, #2
 8003bfa:	71fb      	strb	r3, [r7, #7]

	write_register(NRF24L01P_REG_CONFIG, new_config);
 8003bfc:	79fb      	ldrb	r3, [r7, #7]
 8003bfe:	4619      	mov	r1, r3
 8003c00:	2000      	movs	r0, #0
 8003c02:	f7ff fe89 	bl	8003918 <write_register>
}
 8003c06:	bf00      	nop
 8003c08:	3708      	adds	r7, #8
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}

08003c0e <nrf24l01p_set_crc_length>:
	new_config &= 0xFD;

	write_register(NRF24L01P_REG_CONFIG, new_config);
}

void nrf24l01p_set_crc_length(length bytes) {
 8003c0e:	b580      	push	{r7, lr}
 8003c10:	b084      	sub	sp, #16
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	4603      	mov	r3, r0
 8003c16:	71fb      	strb	r3, [r7, #7]
	uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8003c18:	2000      	movs	r0, #0
 8003c1a:	f7ff fe57 	bl	80038cc <read_register>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	73fb      	strb	r3, [r7, #15]

	switch (bytes) {
 8003c22:	79fb      	ldrb	r3, [r7, #7]
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d002      	beq.n	8003c2e <nrf24l01p_set_crc_length+0x20>
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d005      	beq.n	8003c38 <nrf24l01p_set_crc_length+0x2a>
 8003c2c:	e009      	b.n	8003c42 <nrf24l01p_set_crc_length+0x34>
	// CRCO bit in CONFIG resiger set 0
	case 1:
		new_config &= 0xFB;
 8003c2e:	7bfb      	ldrb	r3, [r7, #15]
 8003c30:	f023 0304 	bic.w	r3, r3, #4
 8003c34:	73fb      	strb	r3, [r7, #15]
		break;
 8003c36:	e004      	b.n	8003c42 <nrf24l01p_set_crc_length+0x34>
		// CRCO bit in CONFIG resiger set 1
	case 2:
		new_config |= 1 << 2;
 8003c38:	7bfb      	ldrb	r3, [r7, #15]
 8003c3a:	f043 0304 	orr.w	r3, r3, #4
 8003c3e:	73fb      	strb	r3, [r7, #15]
		break;
 8003c40:	bf00      	nop
	}

	write_register(NRF24L01P_REG_CONFIG, new_config);
 8003c42:	7bfb      	ldrb	r3, [r7, #15]
 8003c44:	4619      	mov	r1, r3
 8003c46:	2000      	movs	r0, #0
 8003c48:	f7ff fe66 	bl	8003918 <write_register>
}
 8003c4c:	bf00      	nop
 8003c4e:	3710      	adds	r7, #16
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <nrf24l01p_set_address_widths>:

void nrf24l01p_set_address_widths(widths bytes) {
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	71fb      	strb	r3, [r7, #7]
	write_register(NRF24L01P_REG_SETUP_AW, bytes - 2);
 8003c5e:	79fb      	ldrb	r3, [r7, #7]
 8003c60:	3b02      	subs	r3, #2
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	4619      	mov	r1, r3
 8003c66:	2003      	movs	r0, #3
 8003c68:	f7ff fe56 	bl	8003918 <write_register>
}
 8003c6c:	bf00      	nop
 8003c6e:	3708      	adds	r7, #8
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}

08003c74 <nrf24l01p_auto_retransmit_count>:

void nrf24l01p_auto_retransmit_count(count cnt) {
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	71fb      	strb	r3, [r7, #7]
	uint8_t new_setup_retr = read_register(NRF24L01P_REG_SETUP_RETR);
 8003c7e:	2004      	movs	r0, #4
 8003c80:	f7ff fe24 	bl	80038cc <read_register>
 8003c84:	4603      	mov	r3, r0
 8003c86:	73fb      	strb	r3, [r7, #15]

	// Reset ARC register 0
	new_setup_retr |= 0xF0;
 8003c88:	7bfb      	ldrb	r3, [r7, #15]
 8003c8a:	f063 030f 	orn	r3, r3, #15
 8003c8e:	73fb      	strb	r3, [r7, #15]
	new_setup_retr |= cnt;
 8003c90:	7bfa      	ldrb	r2, [r7, #15]
 8003c92:	79fb      	ldrb	r3, [r7, #7]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	73fb      	strb	r3, [r7, #15]
	write_register(NRF24L01P_REG_SETUP_RETR, new_setup_retr);
 8003c98:	7bfb      	ldrb	r3, [r7, #15]
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	2004      	movs	r0, #4
 8003c9e:	f7ff fe3b 	bl	8003918 <write_register>
}
 8003ca2:	bf00      	nop
 8003ca4:	3710      	adds	r7, #16
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
	...

08003cac <nrf24l01p_auto_retransmit_delay>:

void nrf24l01p_auto_retransmit_delay(delay us) {
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	80fb      	strh	r3, [r7, #6]
	uint8_t new_setup_retr = read_register(NRF24L01P_REG_SETUP_RETR);
 8003cb6:	2004      	movs	r0, #4
 8003cb8:	f7ff fe08 	bl	80038cc <read_register>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	73fb      	strb	r3, [r7, #15]

	// Reset ARD register 0
	new_setup_retr |= 0x0F;
 8003cc0:	7bfb      	ldrb	r3, [r7, #15]
 8003cc2:	f043 030f 	orr.w	r3, r3, #15
 8003cc6:	73fb      	strb	r3, [r7, #15]
	new_setup_retr |= ((us / 250) - 1) << 4;
 8003cc8:	88fb      	ldrh	r3, [r7, #6]
 8003cca:	4a0b      	ldr	r2, [pc, #44]	; (8003cf8 <nrf24l01p_auto_retransmit_delay+0x4c>)
 8003ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd0:	091b      	lsrs	r3, r3, #4
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	3b01      	subs	r3, #1
 8003cd6:	011b      	lsls	r3, r3, #4
 8003cd8:	b25a      	sxtb	r2, r3
 8003cda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	b25b      	sxtb	r3, r3
 8003ce2:	73fb      	strb	r3, [r7, #15]
	write_register(NRF24L01P_REG_SETUP_RETR, new_setup_retr);
 8003ce4:	7bfb      	ldrb	r3, [r7, #15]
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	2004      	movs	r0, #4
 8003cea:	f7ff fe15 	bl	8003918 <write_register>
}
 8003cee:	bf00      	nop
 8003cf0:	3710      	adds	r7, #16
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	10624dd3 	.word	0x10624dd3

08003cfc <nrf24l01p_set_rf_channel>:

void nrf24l01p_set_rf_channel(channel MHz) {
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	4603      	mov	r3, r0
 8003d04:	80fb      	strh	r3, [r7, #6]
	uint16_t new_rf_ch = MHz - 2400;
 8003d06:	88fb      	ldrh	r3, [r7, #6]
 8003d08:	f5a3 6316 	sub.w	r3, r3, #2400	; 0x960
 8003d0c:	81fb      	strh	r3, [r7, #14]
	write_register(NRF24L01P_REG_RF_CH, new_rf_ch);
 8003d0e:	89fb      	ldrh	r3, [r7, #14]
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	4619      	mov	r1, r3
 8003d14:	2005      	movs	r0, #5
 8003d16:	f7ff fdff 	bl	8003918 <write_register>
}
 8003d1a:	bf00      	nop
 8003d1c:	3710      	adds	r7, #16
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}

08003d22 <nrf24l01p_set_rf_tx_output_power>:

void nrf24l01p_set_rf_tx_output_power(output_power dBm) {
 8003d22:	b580      	push	{r7, lr}
 8003d24:	b084      	sub	sp, #16
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	4603      	mov	r3, r0
 8003d2a:	71fb      	strb	r3, [r7, #7]
	uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xF9;
 8003d2c:	2006      	movs	r0, #6
 8003d2e:	f7ff fdcd 	bl	80038cc <read_register>
 8003d32:	4603      	mov	r3, r0
 8003d34:	f023 0306 	bic.w	r3, r3, #6
 8003d38:	73fb      	strb	r3, [r7, #15]
	new_rf_setup |= (dBm << 1);
 8003d3a:	79fb      	ldrb	r3, [r7, #7]
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	b25a      	sxtb	r2, r3
 8003d40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	b25b      	sxtb	r3, r3
 8003d48:	73fb      	strb	r3, [r7, #15]

	write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 8003d4a:	7bfb      	ldrb	r3, [r7, #15]
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	2006      	movs	r0, #6
 8003d50:	f7ff fde2 	bl	8003918 <write_register>
}
 8003d54:	bf00      	nop
 8003d56:	3710      	adds	r7, #16
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <nrf24l01p_set_rf_air_data_rate>:

void nrf24l01p_set_rf_air_data_rate(air_data_rate bps) {
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	4603      	mov	r3, r0
 8003d64:	71fb      	strb	r3, [r7, #7]
	// Set value to 0
	uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xD7;
 8003d66:	2006      	movs	r0, #6
 8003d68:	f7ff fdb0 	bl	80038cc <read_register>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8003d72:	73fb      	strb	r3, [r7, #15]

	switch (bps) {
 8003d74:	79fb      	ldrb	r3, [r7, #7]
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d00a      	beq.n	8003d90 <nrf24l01p_set_rf_air_data_rate+0x34>
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	dc0e      	bgt.n	8003d9c <nrf24l01p_set_rf_air_data_rate+0x40>
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d00b      	beq.n	8003d9a <nrf24l01p_set_rf_air_data_rate+0x3e>
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d10a      	bne.n	8003d9c <nrf24l01p_set_rf_air_data_rate+0x40>
	case _1Mbps:
		break;
	case _2Mbps:
		new_rf_setup |= 1 << 3;
 8003d86:	7bfb      	ldrb	r3, [r7, #15]
 8003d88:	f043 0308 	orr.w	r3, r3, #8
 8003d8c:	73fb      	strb	r3, [r7, #15]
		break;
 8003d8e:	e005      	b.n	8003d9c <nrf24l01p_set_rf_air_data_rate+0x40>
	case _250kbps:
		new_rf_setup |= 1 << 5;
 8003d90:	7bfb      	ldrb	r3, [r7, #15]
 8003d92:	f043 0320 	orr.w	r3, r3, #32
 8003d96:	73fb      	strb	r3, [r7, #15]
		break;
 8003d98:	e000      	b.n	8003d9c <nrf24l01p_set_rf_air_data_rate+0x40>
		break;
 8003d9a:	bf00      	nop
	}
	write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 8003d9c:	7bfb      	ldrb	r3, [r7, #15]
 8003d9e:	4619      	mov	r1, r3
 8003da0:	2006      	movs	r0, #6
 8003da2:	f7ff fdb9 	bl	8003918 <write_register>
}
 8003da6:	bf00      	nop
 8003da8:	3710      	adds	r7, #16
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}

08003dae <__cvt>:
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003db4:	461f      	mov	r7, r3
 8003db6:	bfbb      	ittet	lt
 8003db8:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003dbc:	461f      	movlt	r7, r3
 8003dbe:	2300      	movge	r3, #0
 8003dc0:	232d      	movlt	r3, #45	; 0x2d
 8003dc2:	b088      	sub	sp, #32
 8003dc4:	4614      	mov	r4, r2
 8003dc6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003dc8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003dca:	7013      	strb	r3, [r2, #0]
 8003dcc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003dce:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003dd2:	f023 0820 	bic.w	r8, r3, #32
 8003dd6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003dda:	d005      	beq.n	8003de8 <__cvt+0x3a>
 8003ddc:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003de0:	d100      	bne.n	8003de4 <__cvt+0x36>
 8003de2:	3501      	adds	r5, #1
 8003de4:	2302      	movs	r3, #2
 8003de6:	e000      	b.n	8003dea <__cvt+0x3c>
 8003de8:	2303      	movs	r3, #3
 8003dea:	aa07      	add	r2, sp, #28
 8003dec:	9204      	str	r2, [sp, #16]
 8003dee:	aa06      	add	r2, sp, #24
 8003df0:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003df4:	e9cd 3500 	strd	r3, r5, [sp]
 8003df8:	4622      	mov	r2, r4
 8003dfa:	463b      	mov	r3, r7
 8003dfc:	f001 f874 	bl	8004ee8 <_dtoa_r>
 8003e00:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003e04:	4606      	mov	r6, r0
 8003e06:	d102      	bne.n	8003e0e <__cvt+0x60>
 8003e08:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003e0a:	07db      	lsls	r3, r3, #31
 8003e0c:	d522      	bpl.n	8003e54 <__cvt+0xa6>
 8003e0e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003e12:	eb06 0905 	add.w	r9, r6, r5
 8003e16:	d110      	bne.n	8003e3a <__cvt+0x8c>
 8003e18:	7833      	ldrb	r3, [r6, #0]
 8003e1a:	2b30      	cmp	r3, #48	; 0x30
 8003e1c:	d10a      	bne.n	8003e34 <__cvt+0x86>
 8003e1e:	2200      	movs	r2, #0
 8003e20:	2300      	movs	r3, #0
 8003e22:	4620      	mov	r0, r4
 8003e24:	4639      	mov	r1, r7
 8003e26:	f7fc fdbf 	bl	80009a8 <__aeabi_dcmpeq>
 8003e2a:	b918      	cbnz	r0, 8003e34 <__cvt+0x86>
 8003e2c:	f1c5 0501 	rsb	r5, r5, #1
 8003e30:	f8ca 5000 	str.w	r5, [sl]
 8003e34:	f8da 3000 	ldr.w	r3, [sl]
 8003e38:	4499      	add	r9, r3
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	4620      	mov	r0, r4
 8003e40:	4639      	mov	r1, r7
 8003e42:	f7fc fdb1 	bl	80009a8 <__aeabi_dcmpeq>
 8003e46:	b108      	cbz	r0, 8003e4c <__cvt+0x9e>
 8003e48:	f8cd 901c 	str.w	r9, [sp, #28]
 8003e4c:	2230      	movs	r2, #48	; 0x30
 8003e4e:	9b07      	ldr	r3, [sp, #28]
 8003e50:	454b      	cmp	r3, r9
 8003e52:	d307      	bcc.n	8003e64 <__cvt+0xb6>
 8003e54:	4630      	mov	r0, r6
 8003e56:	9b07      	ldr	r3, [sp, #28]
 8003e58:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003e5a:	1b9b      	subs	r3, r3, r6
 8003e5c:	6013      	str	r3, [r2, #0]
 8003e5e:	b008      	add	sp, #32
 8003e60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e64:	1c59      	adds	r1, r3, #1
 8003e66:	9107      	str	r1, [sp, #28]
 8003e68:	701a      	strb	r2, [r3, #0]
 8003e6a:	e7f0      	b.n	8003e4e <__cvt+0xa0>

08003e6c <__exponent>:
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e70:	2900      	cmp	r1, #0
 8003e72:	f803 2b02 	strb.w	r2, [r3], #2
 8003e76:	bfb6      	itet	lt
 8003e78:	222d      	movlt	r2, #45	; 0x2d
 8003e7a:	222b      	movge	r2, #43	; 0x2b
 8003e7c:	4249      	neglt	r1, r1
 8003e7e:	2909      	cmp	r1, #9
 8003e80:	7042      	strb	r2, [r0, #1]
 8003e82:	dd2a      	ble.n	8003eda <__exponent+0x6e>
 8003e84:	f10d 0207 	add.w	r2, sp, #7
 8003e88:	4617      	mov	r7, r2
 8003e8a:	260a      	movs	r6, #10
 8003e8c:	fb91 f5f6 	sdiv	r5, r1, r6
 8003e90:	4694      	mov	ip, r2
 8003e92:	fb06 1415 	mls	r4, r6, r5, r1
 8003e96:	3430      	adds	r4, #48	; 0x30
 8003e98:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8003e9c:	460c      	mov	r4, r1
 8003e9e:	2c63      	cmp	r4, #99	; 0x63
 8003ea0:	4629      	mov	r1, r5
 8003ea2:	f102 32ff 	add.w	r2, r2, #4294967295
 8003ea6:	dcf1      	bgt.n	8003e8c <__exponent+0x20>
 8003ea8:	3130      	adds	r1, #48	; 0x30
 8003eaa:	f1ac 0402 	sub.w	r4, ip, #2
 8003eae:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003eb2:	4622      	mov	r2, r4
 8003eb4:	1c41      	adds	r1, r0, #1
 8003eb6:	42ba      	cmp	r2, r7
 8003eb8:	d30a      	bcc.n	8003ed0 <__exponent+0x64>
 8003eba:	f10d 0209 	add.w	r2, sp, #9
 8003ebe:	eba2 020c 	sub.w	r2, r2, ip
 8003ec2:	42bc      	cmp	r4, r7
 8003ec4:	bf88      	it	hi
 8003ec6:	2200      	movhi	r2, #0
 8003ec8:	4413      	add	r3, r2
 8003eca:	1a18      	subs	r0, r3, r0
 8003ecc:	b003      	add	sp, #12
 8003ece:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ed0:	f812 5b01 	ldrb.w	r5, [r2], #1
 8003ed4:	f801 5f01 	strb.w	r5, [r1, #1]!
 8003ed8:	e7ed      	b.n	8003eb6 <__exponent+0x4a>
 8003eda:	2330      	movs	r3, #48	; 0x30
 8003edc:	3130      	adds	r1, #48	; 0x30
 8003ede:	7083      	strb	r3, [r0, #2]
 8003ee0:	70c1      	strb	r1, [r0, #3]
 8003ee2:	1d03      	adds	r3, r0, #4
 8003ee4:	e7f1      	b.n	8003eca <__exponent+0x5e>
	...

08003ee8 <_printf_float>:
 8003ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003eec:	b091      	sub	sp, #68	; 0x44
 8003eee:	460c      	mov	r4, r1
 8003ef0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003ef4:	4616      	mov	r6, r2
 8003ef6:	461f      	mov	r7, r3
 8003ef8:	4605      	mov	r5, r0
 8003efa:	f000 fee1 	bl	8004cc0 <_localeconv_r>
 8003efe:	6803      	ldr	r3, [r0, #0]
 8003f00:	4618      	mov	r0, r3
 8003f02:	9309      	str	r3, [sp, #36]	; 0x24
 8003f04:	f7fc f924 	bl	8000150 <strlen>
 8003f08:	2300      	movs	r3, #0
 8003f0a:	930e      	str	r3, [sp, #56]	; 0x38
 8003f0c:	f8d8 3000 	ldr.w	r3, [r8]
 8003f10:	900a      	str	r0, [sp, #40]	; 0x28
 8003f12:	3307      	adds	r3, #7
 8003f14:	f023 0307 	bic.w	r3, r3, #7
 8003f18:	f103 0208 	add.w	r2, r3, #8
 8003f1c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003f20:	f8d4 b000 	ldr.w	fp, [r4]
 8003f24:	f8c8 2000 	str.w	r2, [r8]
 8003f28:	e9d3 a800 	ldrd	sl, r8, [r3]
 8003f2c:	4652      	mov	r2, sl
 8003f2e:	4643      	mov	r3, r8
 8003f30:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003f34:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8003f38:	930b      	str	r3, [sp, #44]	; 0x2c
 8003f3a:	f04f 32ff 	mov.w	r2, #4294967295
 8003f3e:	4650      	mov	r0, sl
 8003f40:	4b9c      	ldr	r3, [pc, #624]	; (80041b4 <_printf_float+0x2cc>)
 8003f42:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003f44:	f7fc fd62 	bl	8000a0c <__aeabi_dcmpun>
 8003f48:	bb70      	cbnz	r0, 8003fa8 <_printf_float+0xc0>
 8003f4a:	f04f 32ff 	mov.w	r2, #4294967295
 8003f4e:	4650      	mov	r0, sl
 8003f50:	4b98      	ldr	r3, [pc, #608]	; (80041b4 <_printf_float+0x2cc>)
 8003f52:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003f54:	f7fc fd3c 	bl	80009d0 <__aeabi_dcmple>
 8003f58:	bb30      	cbnz	r0, 8003fa8 <_printf_float+0xc0>
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	4650      	mov	r0, sl
 8003f60:	4641      	mov	r1, r8
 8003f62:	f7fc fd2b 	bl	80009bc <__aeabi_dcmplt>
 8003f66:	b110      	cbz	r0, 8003f6e <_printf_float+0x86>
 8003f68:	232d      	movs	r3, #45	; 0x2d
 8003f6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f6e:	4a92      	ldr	r2, [pc, #584]	; (80041b8 <_printf_float+0x2d0>)
 8003f70:	4b92      	ldr	r3, [pc, #584]	; (80041bc <_printf_float+0x2d4>)
 8003f72:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003f76:	bf94      	ite	ls
 8003f78:	4690      	movls	r8, r2
 8003f7a:	4698      	movhi	r8, r3
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	f04f 0a00 	mov.w	sl, #0
 8003f82:	6123      	str	r3, [r4, #16]
 8003f84:	f02b 0304 	bic.w	r3, fp, #4
 8003f88:	6023      	str	r3, [r4, #0]
 8003f8a:	4633      	mov	r3, r6
 8003f8c:	4621      	mov	r1, r4
 8003f8e:	4628      	mov	r0, r5
 8003f90:	9700      	str	r7, [sp, #0]
 8003f92:	aa0f      	add	r2, sp, #60	; 0x3c
 8003f94:	f000 f9d6 	bl	8004344 <_printf_common>
 8003f98:	3001      	adds	r0, #1
 8003f9a:	f040 8090 	bne.w	80040be <_printf_float+0x1d6>
 8003f9e:	f04f 30ff 	mov.w	r0, #4294967295
 8003fa2:	b011      	add	sp, #68	; 0x44
 8003fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fa8:	4652      	mov	r2, sl
 8003faa:	4643      	mov	r3, r8
 8003fac:	4650      	mov	r0, sl
 8003fae:	4641      	mov	r1, r8
 8003fb0:	f7fc fd2c 	bl	8000a0c <__aeabi_dcmpun>
 8003fb4:	b148      	cbz	r0, 8003fca <_printf_float+0xe2>
 8003fb6:	f1b8 0f00 	cmp.w	r8, #0
 8003fba:	bfb8      	it	lt
 8003fbc:	232d      	movlt	r3, #45	; 0x2d
 8003fbe:	4a80      	ldr	r2, [pc, #512]	; (80041c0 <_printf_float+0x2d8>)
 8003fc0:	bfb8      	it	lt
 8003fc2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003fc6:	4b7f      	ldr	r3, [pc, #508]	; (80041c4 <_printf_float+0x2dc>)
 8003fc8:	e7d3      	b.n	8003f72 <_printf_float+0x8a>
 8003fca:	6863      	ldr	r3, [r4, #4]
 8003fcc:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003fd0:	1c5a      	adds	r2, r3, #1
 8003fd2:	d142      	bne.n	800405a <_printf_float+0x172>
 8003fd4:	2306      	movs	r3, #6
 8003fd6:	6063      	str	r3, [r4, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	9206      	str	r2, [sp, #24]
 8003fdc:	aa0e      	add	r2, sp, #56	; 0x38
 8003fde:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003fe2:	aa0d      	add	r2, sp, #52	; 0x34
 8003fe4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003fe8:	9203      	str	r2, [sp, #12]
 8003fea:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003fee:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003ff2:	6023      	str	r3, [r4, #0]
 8003ff4:	6863      	ldr	r3, [r4, #4]
 8003ff6:	4652      	mov	r2, sl
 8003ff8:	9300      	str	r3, [sp, #0]
 8003ffa:	4628      	mov	r0, r5
 8003ffc:	4643      	mov	r3, r8
 8003ffe:	910b      	str	r1, [sp, #44]	; 0x2c
 8004000:	f7ff fed5 	bl	8003dae <__cvt>
 8004004:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004006:	4680      	mov	r8, r0
 8004008:	2947      	cmp	r1, #71	; 0x47
 800400a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800400c:	d108      	bne.n	8004020 <_printf_float+0x138>
 800400e:	1cc8      	adds	r0, r1, #3
 8004010:	db02      	blt.n	8004018 <_printf_float+0x130>
 8004012:	6863      	ldr	r3, [r4, #4]
 8004014:	4299      	cmp	r1, r3
 8004016:	dd40      	ble.n	800409a <_printf_float+0x1b2>
 8004018:	f1a9 0902 	sub.w	r9, r9, #2
 800401c:	fa5f f989 	uxtb.w	r9, r9
 8004020:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004024:	d81f      	bhi.n	8004066 <_printf_float+0x17e>
 8004026:	464a      	mov	r2, r9
 8004028:	3901      	subs	r1, #1
 800402a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800402e:	910d      	str	r1, [sp, #52]	; 0x34
 8004030:	f7ff ff1c 	bl	8003e6c <__exponent>
 8004034:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004036:	4682      	mov	sl, r0
 8004038:	1813      	adds	r3, r2, r0
 800403a:	2a01      	cmp	r2, #1
 800403c:	6123      	str	r3, [r4, #16]
 800403e:	dc02      	bgt.n	8004046 <_printf_float+0x15e>
 8004040:	6822      	ldr	r2, [r4, #0]
 8004042:	07d2      	lsls	r2, r2, #31
 8004044:	d501      	bpl.n	800404a <_printf_float+0x162>
 8004046:	3301      	adds	r3, #1
 8004048:	6123      	str	r3, [r4, #16]
 800404a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800404e:	2b00      	cmp	r3, #0
 8004050:	d09b      	beq.n	8003f8a <_printf_float+0xa2>
 8004052:	232d      	movs	r3, #45	; 0x2d
 8004054:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004058:	e797      	b.n	8003f8a <_printf_float+0xa2>
 800405a:	2947      	cmp	r1, #71	; 0x47
 800405c:	d1bc      	bne.n	8003fd8 <_printf_float+0xf0>
 800405e:	2b00      	cmp	r3, #0
 8004060:	d1ba      	bne.n	8003fd8 <_printf_float+0xf0>
 8004062:	2301      	movs	r3, #1
 8004064:	e7b7      	b.n	8003fd6 <_printf_float+0xee>
 8004066:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800406a:	d118      	bne.n	800409e <_printf_float+0x1b6>
 800406c:	2900      	cmp	r1, #0
 800406e:	6863      	ldr	r3, [r4, #4]
 8004070:	dd0b      	ble.n	800408a <_printf_float+0x1a2>
 8004072:	6121      	str	r1, [r4, #16]
 8004074:	b913      	cbnz	r3, 800407c <_printf_float+0x194>
 8004076:	6822      	ldr	r2, [r4, #0]
 8004078:	07d0      	lsls	r0, r2, #31
 800407a:	d502      	bpl.n	8004082 <_printf_float+0x19a>
 800407c:	3301      	adds	r3, #1
 800407e:	440b      	add	r3, r1
 8004080:	6123      	str	r3, [r4, #16]
 8004082:	f04f 0a00 	mov.w	sl, #0
 8004086:	65a1      	str	r1, [r4, #88]	; 0x58
 8004088:	e7df      	b.n	800404a <_printf_float+0x162>
 800408a:	b913      	cbnz	r3, 8004092 <_printf_float+0x1aa>
 800408c:	6822      	ldr	r2, [r4, #0]
 800408e:	07d2      	lsls	r2, r2, #31
 8004090:	d501      	bpl.n	8004096 <_printf_float+0x1ae>
 8004092:	3302      	adds	r3, #2
 8004094:	e7f4      	b.n	8004080 <_printf_float+0x198>
 8004096:	2301      	movs	r3, #1
 8004098:	e7f2      	b.n	8004080 <_printf_float+0x198>
 800409a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800409e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80040a0:	4299      	cmp	r1, r3
 80040a2:	db05      	blt.n	80040b0 <_printf_float+0x1c8>
 80040a4:	6823      	ldr	r3, [r4, #0]
 80040a6:	6121      	str	r1, [r4, #16]
 80040a8:	07d8      	lsls	r0, r3, #31
 80040aa:	d5ea      	bpl.n	8004082 <_printf_float+0x19a>
 80040ac:	1c4b      	adds	r3, r1, #1
 80040ae:	e7e7      	b.n	8004080 <_printf_float+0x198>
 80040b0:	2900      	cmp	r1, #0
 80040b2:	bfcc      	ite	gt
 80040b4:	2201      	movgt	r2, #1
 80040b6:	f1c1 0202 	rsble	r2, r1, #2
 80040ba:	4413      	add	r3, r2
 80040bc:	e7e0      	b.n	8004080 <_printf_float+0x198>
 80040be:	6823      	ldr	r3, [r4, #0]
 80040c0:	055a      	lsls	r2, r3, #21
 80040c2:	d407      	bmi.n	80040d4 <_printf_float+0x1ec>
 80040c4:	6923      	ldr	r3, [r4, #16]
 80040c6:	4642      	mov	r2, r8
 80040c8:	4631      	mov	r1, r6
 80040ca:	4628      	mov	r0, r5
 80040cc:	47b8      	blx	r7
 80040ce:	3001      	adds	r0, #1
 80040d0:	d12b      	bne.n	800412a <_printf_float+0x242>
 80040d2:	e764      	b.n	8003f9e <_printf_float+0xb6>
 80040d4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80040d8:	f240 80dd 	bls.w	8004296 <_printf_float+0x3ae>
 80040dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80040e0:	2200      	movs	r2, #0
 80040e2:	2300      	movs	r3, #0
 80040e4:	f7fc fc60 	bl	80009a8 <__aeabi_dcmpeq>
 80040e8:	2800      	cmp	r0, #0
 80040ea:	d033      	beq.n	8004154 <_printf_float+0x26c>
 80040ec:	2301      	movs	r3, #1
 80040ee:	4631      	mov	r1, r6
 80040f0:	4628      	mov	r0, r5
 80040f2:	4a35      	ldr	r2, [pc, #212]	; (80041c8 <_printf_float+0x2e0>)
 80040f4:	47b8      	blx	r7
 80040f6:	3001      	adds	r0, #1
 80040f8:	f43f af51 	beq.w	8003f9e <_printf_float+0xb6>
 80040fc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004100:	429a      	cmp	r2, r3
 8004102:	db02      	blt.n	800410a <_printf_float+0x222>
 8004104:	6823      	ldr	r3, [r4, #0]
 8004106:	07d8      	lsls	r0, r3, #31
 8004108:	d50f      	bpl.n	800412a <_printf_float+0x242>
 800410a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800410e:	4631      	mov	r1, r6
 8004110:	4628      	mov	r0, r5
 8004112:	47b8      	blx	r7
 8004114:	3001      	adds	r0, #1
 8004116:	f43f af42 	beq.w	8003f9e <_printf_float+0xb6>
 800411a:	f04f 0800 	mov.w	r8, #0
 800411e:	f104 091a 	add.w	r9, r4, #26
 8004122:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004124:	3b01      	subs	r3, #1
 8004126:	4543      	cmp	r3, r8
 8004128:	dc09      	bgt.n	800413e <_printf_float+0x256>
 800412a:	6823      	ldr	r3, [r4, #0]
 800412c:	079b      	lsls	r3, r3, #30
 800412e:	f100 8104 	bmi.w	800433a <_printf_float+0x452>
 8004132:	68e0      	ldr	r0, [r4, #12]
 8004134:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004136:	4298      	cmp	r0, r3
 8004138:	bfb8      	it	lt
 800413a:	4618      	movlt	r0, r3
 800413c:	e731      	b.n	8003fa2 <_printf_float+0xba>
 800413e:	2301      	movs	r3, #1
 8004140:	464a      	mov	r2, r9
 8004142:	4631      	mov	r1, r6
 8004144:	4628      	mov	r0, r5
 8004146:	47b8      	blx	r7
 8004148:	3001      	adds	r0, #1
 800414a:	f43f af28 	beq.w	8003f9e <_printf_float+0xb6>
 800414e:	f108 0801 	add.w	r8, r8, #1
 8004152:	e7e6      	b.n	8004122 <_printf_float+0x23a>
 8004154:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004156:	2b00      	cmp	r3, #0
 8004158:	dc38      	bgt.n	80041cc <_printf_float+0x2e4>
 800415a:	2301      	movs	r3, #1
 800415c:	4631      	mov	r1, r6
 800415e:	4628      	mov	r0, r5
 8004160:	4a19      	ldr	r2, [pc, #100]	; (80041c8 <_printf_float+0x2e0>)
 8004162:	47b8      	blx	r7
 8004164:	3001      	adds	r0, #1
 8004166:	f43f af1a 	beq.w	8003f9e <_printf_float+0xb6>
 800416a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800416e:	4313      	orrs	r3, r2
 8004170:	d102      	bne.n	8004178 <_printf_float+0x290>
 8004172:	6823      	ldr	r3, [r4, #0]
 8004174:	07d9      	lsls	r1, r3, #31
 8004176:	d5d8      	bpl.n	800412a <_printf_float+0x242>
 8004178:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800417c:	4631      	mov	r1, r6
 800417e:	4628      	mov	r0, r5
 8004180:	47b8      	blx	r7
 8004182:	3001      	adds	r0, #1
 8004184:	f43f af0b 	beq.w	8003f9e <_printf_float+0xb6>
 8004188:	f04f 0900 	mov.w	r9, #0
 800418c:	f104 0a1a 	add.w	sl, r4, #26
 8004190:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004192:	425b      	negs	r3, r3
 8004194:	454b      	cmp	r3, r9
 8004196:	dc01      	bgt.n	800419c <_printf_float+0x2b4>
 8004198:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800419a:	e794      	b.n	80040c6 <_printf_float+0x1de>
 800419c:	2301      	movs	r3, #1
 800419e:	4652      	mov	r2, sl
 80041a0:	4631      	mov	r1, r6
 80041a2:	4628      	mov	r0, r5
 80041a4:	47b8      	blx	r7
 80041a6:	3001      	adds	r0, #1
 80041a8:	f43f aef9 	beq.w	8003f9e <_printf_float+0xb6>
 80041ac:	f109 0901 	add.w	r9, r9, #1
 80041b0:	e7ee      	b.n	8004190 <_printf_float+0x2a8>
 80041b2:	bf00      	nop
 80041b4:	7fefffff 	.word	0x7fefffff
 80041b8:	0800854e 	.word	0x0800854e
 80041bc:	08008552 	.word	0x08008552
 80041c0:	08008556 	.word	0x08008556
 80041c4:	0800855a 	.word	0x0800855a
 80041c8:	0800855e 	.word	0x0800855e
 80041cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80041ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80041d0:	429a      	cmp	r2, r3
 80041d2:	bfa8      	it	ge
 80041d4:	461a      	movge	r2, r3
 80041d6:	2a00      	cmp	r2, #0
 80041d8:	4691      	mov	r9, r2
 80041da:	dc37      	bgt.n	800424c <_printf_float+0x364>
 80041dc:	f04f 0b00 	mov.w	fp, #0
 80041e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80041e4:	f104 021a 	add.w	r2, r4, #26
 80041e8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80041ec:	ebaa 0309 	sub.w	r3, sl, r9
 80041f0:	455b      	cmp	r3, fp
 80041f2:	dc33      	bgt.n	800425c <_printf_float+0x374>
 80041f4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80041f8:	429a      	cmp	r2, r3
 80041fa:	db3b      	blt.n	8004274 <_printf_float+0x38c>
 80041fc:	6823      	ldr	r3, [r4, #0]
 80041fe:	07da      	lsls	r2, r3, #31
 8004200:	d438      	bmi.n	8004274 <_printf_float+0x38c>
 8004202:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004206:	eba2 0903 	sub.w	r9, r2, r3
 800420a:	eba2 020a 	sub.w	r2, r2, sl
 800420e:	4591      	cmp	r9, r2
 8004210:	bfa8      	it	ge
 8004212:	4691      	movge	r9, r2
 8004214:	f1b9 0f00 	cmp.w	r9, #0
 8004218:	dc34      	bgt.n	8004284 <_printf_float+0x39c>
 800421a:	f04f 0800 	mov.w	r8, #0
 800421e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004222:	f104 0a1a 	add.w	sl, r4, #26
 8004226:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800422a:	1a9b      	subs	r3, r3, r2
 800422c:	eba3 0309 	sub.w	r3, r3, r9
 8004230:	4543      	cmp	r3, r8
 8004232:	f77f af7a 	ble.w	800412a <_printf_float+0x242>
 8004236:	2301      	movs	r3, #1
 8004238:	4652      	mov	r2, sl
 800423a:	4631      	mov	r1, r6
 800423c:	4628      	mov	r0, r5
 800423e:	47b8      	blx	r7
 8004240:	3001      	adds	r0, #1
 8004242:	f43f aeac 	beq.w	8003f9e <_printf_float+0xb6>
 8004246:	f108 0801 	add.w	r8, r8, #1
 800424a:	e7ec      	b.n	8004226 <_printf_float+0x33e>
 800424c:	4613      	mov	r3, r2
 800424e:	4631      	mov	r1, r6
 8004250:	4642      	mov	r2, r8
 8004252:	4628      	mov	r0, r5
 8004254:	47b8      	blx	r7
 8004256:	3001      	adds	r0, #1
 8004258:	d1c0      	bne.n	80041dc <_printf_float+0x2f4>
 800425a:	e6a0      	b.n	8003f9e <_printf_float+0xb6>
 800425c:	2301      	movs	r3, #1
 800425e:	4631      	mov	r1, r6
 8004260:	4628      	mov	r0, r5
 8004262:	920b      	str	r2, [sp, #44]	; 0x2c
 8004264:	47b8      	blx	r7
 8004266:	3001      	adds	r0, #1
 8004268:	f43f ae99 	beq.w	8003f9e <_printf_float+0xb6>
 800426c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800426e:	f10b 0b01 	add.w	fp, fp, #1
 8004272:	e7b9      	b.n	80041e8 <_printf_float+0x300>
 8004274:	4631      	mov	r1, r6
 8004276:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800427a:	4628      	mov	r0, r5
 800427c:	47b8      	blx	r7
 800427e:	3001      	adds	r0, #1
 8004280:	d1bf      	bne.n	8004202 <_printf_float+0x31a>
 8004282:	e68c      	b.n	8003f9e <_printf_float+0xb6>
 8004284:	464b      	mov	r3, r9
 8004286:	4631      	mov	r1, r6
 8004288:	4628      	mov	r0, r5
 800428a:	eb08 020a 	add.w	r2, r8, sl
 800428e:	47b8      	blx	r7
 8004290:	3001      	adds	r0, #1
 8004292:	d1c2      	bne.n	800421a <_printf_float+0x332>
 8004294:	e683      	b.n	8003f9e <_printf_float+0xb6>
 8004296:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004298:	2a01      	cmp	r2, #1
 800429a:	dc01      	bgt.n	80042a0 <_printf_float+0x3b8>
 800429c:	07db      	lsls	r3, r3, #31
 800429e:	d539      	bpl.n	8004314 <_printf_float+0x42c>
 80042a0:	2301      	movs	r3, #1
 80042a2:	4642      	mov	r2, r8
 80042a4:	4631      	mov	r1, r6
 80042a6:	4628      	mov	r0, r5
 80042a8:	47b8      	blx	r7
 80042aa:	3001      	adds	r0, #1
 80042ac:	f43f ae77 	beq.w	8003f9e <_printf_float+0xb6>
 80042b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80042b4:	4631      	mov	r1, r6
 80042b6:	4628      	mov	r0, r5
 80042b8:	47b8      	blx	r7
 80042ba:	3001      	adds	r0, #1
 80042bc:	f43f ae6f 	beq.w	8003f9e <_printf_float+0xb6>
 80042c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80042c4:	2200      	movs	r2, #0
 80042c6:	2300      	movs	r3, #0
 80042c8:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 80042cc:	f7fc fb6c 	bl	80009a8 <__aeabi_dcmpeq>
 80042d0:	b9d8      	cbnz	r0, 800430a <_printf_float+0x422>
 80042d2:	f109 33ff 	add.w	r3, r9, #4294967295
 80042d6:	f108 0201 	add.w	r2, r8, #1
 80042da:	4631      	mov	r1, r6
 80042dc:	4628      	mov	r0, r5
 80042de:	47b8      	blx	r7
 80042e0:	3001      	adds	r0, #1
 80042e2:	d10e      	bne.n	8004302 <_printf_float+0x41a>
 80042e4:	e65b      	b.n	8003f9e <_printf_float+0xb6>
 80042e6:	2301      	movs	r3, #1
 80042e8:	464a      	mov	r2, r9
 80042ea:	4631      	mov	r1, r6
 80042ec:	4628      	mov	r0, r5
 80042ee:	47b8      	blx	r7
 80042f0:	3001      	adds	r0, #1
 80042f2:	f43f ae54 	beq.w	8003f9e <_printf_float+0xb6>
 80042f6:	f108 0801 	add.w	r8, r8, #1
 80042fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80042fc:	3b01      	subs	r3, #1
 80042fe:	4543      	cmp	r3, r8
 8004300:	dcf1      	bgt.n	80042e6 <_printf_float+0x3fe>
 8004302:	4653      	mov	r3, sl
 8004304:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004308:	e6de      	b.n	80040c8 <_printf_float+0x1e0>
 800430a:	f04f 0800 	mov.w	r8, #0
 800430e:	f104 091a 	add.w	r9, r4, #26
 8004312:	e7f2      	b.n	80042fa <_printf_float+0x412>
 8004314:	2301      	movs	r3, #1
 8004316:	4642      	mov	r2, r8
 8004318:	e7df      	b.n	80042da <_printf_float+0x3f2>
 800431a:	2301      	movs	r3, #1
 800431c:	464a      	mov	r2, r9
 800431e:	4631      	mov	r1, r6
 8004320:	4628      	mov	r0, r5
 8004322:	47b8      	blx	r7
 8004324:	3001      	adds	r0, #1
 8004326:	f43f ae3a 	beq.w	8003f9e <_printf_float+0xb6>
 800432a:	f108 0801 	add.w	r8, r8, #1
 800432e:	68e3      	ldr	r3, [r4, #12]
 8004330:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004332:	1a5b      	subs	r3, r3, r1
 8004334:	4543      	cmp	r3, r8
 8004336:	dcf0      	bgt.n	800431a <_printf_float+0x432>
 8004338:	e6fb      	b.n	8004132 <_printf_float+0x24a>
 800433a:	f04f 0800 	mov.w	r8, #0
 800433e:	f104 0919 	add.w	r9, r4, #25
 8004342:	e7f4      	b.n	800432e <_printf_float+0x446>

08004344 <_printf_common>:
 8004344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004348:	4616      	mov	r6, r2
 800434a:	4699      	mov	r9, r3
 800434c:	688a      	ldr	r2, [r1, #8]
 800434e:	690b      	ldr	r3, [r1, #16]
 8004350:	4607      	mov	r7, r0
 8004352:	4293      	cmp	r3, r2
 8004354:	bfb8      	it	lt
 8004356:	4613      	movlt	r3, r2
 8004358:	6033      	str	r3, [r6, #0]
 800435a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800435e:	460c      	mov	r4, r1
 8004360:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004364:	b10a      	cbz	r2, 800436a <_printf_common+0x26>
 8004366:	3301      	adds	r3, #1
 8004368:	6033      	str	r3, [r6, #0]
 800436a:	6823      	ldr	r3, [r4, #0]
 800436c:	0699      	lsls	r1, r3, #26
 800436e:	bf42      	ittt	mi
 8004370:	6833      	ldrmi	r3, [r6, #0]
 8004372:	3302      	addmi	r3, #2
 8004374:	6033      	strmi	r3, [r6, #0]
 8004376:	6825      	ldr	r5, [r4, #0]
 8004378:	f015 0506 	ands.w	r5, r5, #6
 800437c:	d106      	bne.n	800438c <_printf_common+0x48>
 800437e:	f104 0a19 	add.w	sl, r4, #25
 8004382:	68e3      	ldr	r3, [r4, #12]
 8004384:	6832      	ldr	r2, [r6, #0]
 8004386:	1a9b      	subs	r3, r3, r2
 8004388:	42ab      	cmp	r3, r5
 800438a:	dc2b      	bgt.n	80043e4 <_printf_common+0xa0>
 800438c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004390:	1e13      	subs	r3, r2, #0
 8004392:	6822      	ldr	r2, [r4, #0]
 8004394:	bf18      	it	ne
 8004396:	2301      	movne	r3, #1
 8004398:	0692      	lsls	r2, r2, #26
 800439a:	d430      	bmi.n	80043fe <_printf_common+0xba>
 800439c:	4649      	mov	r1, r9
 800439e:	4638      	mov	r0, r7
 80043a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80043a4:	47c0      	blx	r8
 80043a6:	3001      	adds	r0, #1
 80043a8:	d023      	beq.n	80043f2 <_printf_common+0xae>
 80043aa:	6823      	ldr	r3, [r4, #0]
 80043ac:	6922      	ldr	r2, [r4, #16]
 80043ae:	f003 0306 	and.w	r3, r3, #6
 80043b2:	2b04      	cmp	r3, #4
 80043b4:	bf14      	ite	ne
 80043b6:	2500      	movne	r5, #0
 80043b8:	6833      	ldreq	r3, [r6, #0]
 80043ba:	f04f 0600 	mov.w	r6, #0
 80043be:	bf08      	it	eq
 80043c0:	68e5      	ldreq	r5, [r4, #12]
 80043c2:	f104 041a 	add.w	r4, r4, #26
 80043c6:	bf08      	it	eq
 80043c8:	1aed      	subeq	r5, r5, r3
 80043ca:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80043ce:	bf08      	it	eq
 80043d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043d4:	4293      	cmp	r3, r2
 80043d6:	bfc4      	itt	gt
 80043d8:	1a9b      	subgt	r3, r3, r2
 80043da:	18ed      	addgt	r5, r5, r3
 80043dc:	42b5      	cmp	r5, r6
 80043de:	d11a      	bne.n	8004416 <_printf_common+0xd2>
 80043e0:	2000      	movs	r0, #0
 80043e2:	e008      	b.n	80043f6 <_printf_common+0xb2>
 80043e4:	2301      	movs	r3, #1
 80043e6:	4652      	mov	r2, sl
 80043e8:	4649      	mov	r1, r9
 80043ea:	4638      	mov	r0, r7
 80043ec:	47c0      	blx	r8
 80043ee:	3001      	adds	r0, #1
 80043f0:	d103      	bne.n	80043fa <_printf_common+0xb6>
 80043f2:	f04f 30ff 	mov.w	r0, #4294967295
 80043f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043fa:	3501      	adds	r5, #1
 80043fc:	e7c1      	b.n	8004382 <_printf_common+0x3e>
 80043fe:	2030      	movs	r0, #48	; 0x30
 8004400:	18e1      	adds	r1, r4, r3
 8004402:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004406:	1c5a      	adds	r2, r3, #1
 8004408:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800440c:	4422      	add	r2, r4
 800440e:	3302      	adds	r3, #2
 8004410:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004414:	e7c2      	b.n	800439c <_printf_common+0x58>
 8004416:	2301      	movs	r3, #1
 8004418:	4622      	mov	r2, r4
 800441a:	4649      	mov	r1, r9
 800441c:	4638      	mov	r0, r7
 800441e:	47c0      	blx	r8
 8004420:	3001      	adds	r0, #1
 8004422:	d0e6      	beq.n	80043f2 <_printf_common+0xae>
 8004424:	3601      	adds	r6, #1
 8004426:	e7d9      	b.n	80043dc <_printf_common+0x98>

08004428 <_printf_i>:
 8004428:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800442c:	7e0f      	ldrb	r7, [r1, #24]
 800442e:	4691      	mov	r9, r2
 8004430:	2f78      	cmp	r7, #120	; 0x78
 8004432:	4680      	mov	r8, r0
 8004434:	460c      	mov	r4, r1
 8004436:	469a      	mov	sl, r3
 8004438:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800443a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800443e:	d807      	bhi.n	8004450 <_printf_i+0x28>
 8004440:	2f62      	cmp	r7, #98	; 0x62
 8004442:	d80a      	bhi.n	800445a <_printf_i+0x32>
 8004444:	2f00      	cmp	r7, #0
 8004446:	f000 80d5 	beq.w	80045f4 <_printf_i+0x1cc>
 800444a:	2f58      	cmp	r7, #88	; 0x58
 800444c:	f000 80c1 	beq.w	80045d2 <_printf_i+0x1aa>
 8004450:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004454:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004458:	e03a      	b.n	80044d0 <_printf_i+0xa8>
 800445a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800445e:	2b15      	cmp	r3, #21
 8004460:	d8f6      	bhi.n	8004450 <_printf_i+0x28>
 8004462:	a101      	add	r1, pc, #4	; (adr r1, 8004468 <_printf_i+0x40>)
 8004464:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004468:	080044c1 	.word	0x080044c1
 800446c:	080044d5 	.word	0x080044d5
 8004470:	08004451 	.word	0x08004451
 8004474:	08004451 	.word	0x08004451
 8004478:	08004451 	.word	0x08004451
 800447c:	08004451 	.word	0x08004451
 8004480:	080044d5 	.word	0x080044d5
 8004484:	08004451 	.word	0x08004451
 8004488:	08004451 	.word	0x08004451
 800448c:	08004451 	.word	0x08004451
 8004490:	08004451 	.word	0x08004451
 8004494:	080045db 	.word	0x080045db
 8004498:	08004501 	.word	0x08004501
 800449c:	08004595 	.word	0x08004595
 80044a0:	08004451 	.word	0x08004451
 80044a4:	08004451 	.word	0x08004451
 80044a8:	080045fd 	.word	0x080045fd
 80044ac:	08004451 	.word	0x08004451
 80044b0:	08004501 	.word	0x08004501
 80044b4:	08004451 	.word	0x08004451
 80044b8:	08004451 	.word	0x08004451
 80044bc:	0800459d 	.word	0x0800459d
 80044c0:	682b      	ldr	r3, [r5, #0]
 80044c2:	1d1a      	adds	r2, r3, #4
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	602a      	str	r2, [r5, #0]
 80044c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80044d0:	2301      	movs	r3, #1
 80044d2:	e0a0      	b.n	8004616 <_printf_i+0x1ee>
 80044d4:	6820      	ldr	r0, [r4, #0]
 80044d6:	682b      	ldr	r3, [r5, #0]
 80044d8:	0607      	lsls	r7, r0, #24
 80044da:	f103 0104 	add.w	r1, r3, #4
 80044de:	6029      	str	r1, [r5, #0]
 80044e0:	d501      	bpl.n	80044e6 <_printf_i+0xbe>
 80044e2:	681e      	ldr	r6, [r3, #0]
 80044e4:	e003      	b.n	80044ee <_printf_i+0xc6>
 80044e6:	0646      	lsls	r6, r0, #25
 80044e8:	d5fb      	bpl.n	80044e2 <_printf_i+0xba>
 80044ea:	f9b3 6000 	ldrsh.w	r6, [r3]
 80044ee:	2e00      	cmp	r6, #0
 80044f0:	da03      	bge.n	80044fa <_printf_i+0xd2>
 80044f2:	232d      	movs	r3, #45	; 0x2d
 80044f4:	4276      	negs	r6, r6
 80044f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044fa:	230a      	movs	r3, #10
 80044fc:	4859      	ldr	r0, [pc, #356]	; (8004664 <_printf_i+0x23c>)
 80044fe:	e012      	b.n	8004526 <_printf_i+0xfe>
 8004500:	682b      	ldr	r3, [r5, #0]
 8004502:	6820      	ldr	r0, [r4, #0]
 8004504:	1d19      	adds	r1, r3, #4
 8004506:	6029      	str	r1, [r5, #0]
 8004508:	0605      	lsls	r5, r0, #24
 800450a:	d501      	bpl.n	8004510 <_printf_i+0xe8>
 800450c:	681e      	ldr	r6, [r3, #0]
 800450e:	e002      	b.n	8004516 <_printf_i+0xee>
 8004510:	0641      	lsls	r1, r0, #25
 8004512:	d5fb      	bpl.n	800450c <_printf_i+0xe4>
 8004514:	881e      	ldrh	r6, [r3, #0]
 8004516:	2f6f      	cmp	r7, #111	; 0x6f
 8004518:	bf0c      	ite	eq
 800451a:	2308      	moveq	r3, #8
 800451c:	230a      	movne	r3, #10
 800451e:	4851      	ldr	r0, [pc, #324]	; (8004664 <_printf_i+0x23c>)
 8004520:	2100      	movs	r1, #0
 8004522:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004526:	6865      	ldr	r5, [r4, #4]
 8004528:	2d00      	cmp	r5, #0
 800452a:	bfa8      	it	ge
 800452c:	6821      	ldrge	r1, [r4, #0]
 800452e:	60a5      	str	r5, [r4, #8]
 8004530:	bfa4      	itt	ge
 8004532:	f021 0104 	bicge.w	r1, r1, #4
 8004536:	6021      	strge	r1, [r4, #0]
 8004538:	b90e      	cbnz	r6, 800453e <_printf_i+0x116>
 800453a:	2d00      	cmp	r5, #0
 800453c:	d04b      	beq.n	80045d6 <_printf_i+0x1ae>
 800453e:	4615      	mov	r5, r2
 8004540:	fbb6 f1f3 	udiv	r1, r6, r3
 8004544:	fb03 6711 	mls	r7, r3, r1, r6
 8004548:	5dc7      	ldrb	r7, [r0, r7]
 800454a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800454e:	4637      	mov	r7, r6
 8004550:	42bb      	cmp	r3, r7
 8004552:	460e      	mov	r6, r1
 8004554:	d9f4      	bls.n	8004540 <_printf_i+0x118>
 8004556:	2b08      	cmp	r3, #8
 8004558:	d10b      	bne.n	8004572 <_printf_i+0x14a>
 800455a:	6823      	ldr	r3, [r4, #0]
 800455c:	07de      	lsls	r6, r3, #31
 800455e:	d508      	bpl.n	8004572 <_printf_i+0x14a>
 8004560:	6923      	ldr	r3, [r4, #16]
 8004562:	6861      	ldr	r1, [r4, #4]
 8004564:	4299      	cmp	r1, r3
 8004566:	bfde      	ittt	le
 8004568:	2330      	movle	r3, #48	; 0x30
 800456a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800456e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004572:	1b52      	subs	r2, r2, r5
 8004574:	6122      	str	r2, [r4, #16]
 8004576:	464b      	mov	r3, r9
 8004578:	4621      	mov	r1, r4
 800457a:	4640      	mov	r0, r8
 800457c:	f8cd a000 	str.w	sl, [sp]
 8004580:	aa03      	add	r2, sp, #12
 8004582:	f7ff fedf 	bl	8004344 <_printf_common>
 8004586:	3001      	adds	r0, #1
 8004588:	d14a      	bne.n	8004620 <_printf_i+0x1f8>
 800458a:	f04f 30ff 	mov.w	r0, #4294967295
 800458e:	b004      	add	sp, #16
 8004590:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004594:	6823      	ldr	r3, [r4, #0]
 8004596:	f043 0320 	orr.w	r3, r3, #32
 800459a:	6023      	str	r3, [r4, #0]
 800459c:	2778      	movs	r7, #120	; 0x78
 800459e:	4832      	ldr	r0, [pc, #200]	; (8004668 <_printf_i+0x240>)
 80045a0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80045a4:	6823      	ldr	r3, [r4, #0]
 80045a6:	6829      	ldr	r1, [r5, #0]
 80045a8:	061f      	lsls	r7, r3, #24
 80045aa:	f851 6b04 	ldr.w	r6, [r1], #4
 80045ae:	d402      	bmi.n	80045b6 <_printf_i+0x18e>
 80045b0:	065f      	lsls	r7, r3, #25
 80045b2:	bf48      	it	mi
 80045b4:	b2b6      	uxthmi	r6, r6
 80045b6:	07df      	lsls	r7, r3, #31
 80045b8:	bf48      	it	mi
 80045ba:	f043 0320 	orrmi.w	r3, r3, #32
 80045be:	6029      	str	r1, [r5, #0]
 80045c0:	bf48      	it	mi
 80045c2:	6023      	strmi	r3, [r4, #0]
 80045c4:	b91e      	cbnz	r6, 80045ce <_printf_i+0x1a6>
 80045c6:	6823      	ldr	r3, [r4, #0]
 80045c8:	f023 0320 	bic.w	r3, r3, #32
 80045cc:	6023      	str	r3, [r4, #0]
 80045ce:	2310      	movs	r3, #16
 80045d0:	e7a6      	b.n	8004520 <_printf_i+0xf8>
 80045d2:	4824      	ldr	r0, [pc, #144]	; (8004664 <_printf_i+0x23c>)
 80045d4:	e7e4      	b.n	80045a0 <_printf_i+0x178>
 80045d6:	4615      	mov	r5, r2
 80045d8:	e7bd      	b.n	8004556 <_printf_i+0x12e>
 80045da:	682b      	ldr	r3, [r5, #0]
 80045dc:	6826      	ldr	r6, [r4, #0]
 80045de:	1d18      	adds	r0, r3, #4
 80045e0:	6961      	ldr	r1, [r4, #20]
 80045e2:	6028      	str	r0, [r5, #0]
 80045e4:	0635      	lsls	r5, r6, #24
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	d501      	bpl.n	80045ee <_printf_i+0x1c6>
 80045ea:	6019      	str	r1, [r3, #0]
 80045ec:	e002      	b.n	80045f4 <_printf_i+0x1cc>
 80045ee:	0670      	lsls	r0, r6, #25
 80045f0:	d5fb      	bpl.n	80045ea <_printf_i+0x1c2>
 80045f2:	8019      	strh	r1, [r3, #0]
 80045f4:	2300      	movs	r3, #0
 80045f6:	4615      	mov	r5, r2
 80045f8:	6123      	str	r3, [r4, #16]
 80045fa:	e7bc      	b.n	8004576 <_printf_i+0x14e>
 80045fc:	682b      	ldr	r3, [r5, #0]
 80045fe:	2100      	movs	r1, #0
 8004600:	1d1a      	adds	r2, r3, #4
 8004602:	602a      	str	r2, [r5, #0]
 8004604:	681d      	ldr	r5, [r3, #0]
 8004606:	6862      	ldr	r2, [r4, #4]
 8004608:	4628      	mov	r0, r5
 800460a:	f000 fbcf 	bl	8004dac <memchr>
 800460e:	b108      	cbz	r0, 8004614 <_printf_i+0x1ec>
 8004610:	1b40      	subs	r0, r0, r5
 8004612:	6060      	str	r0, [r4, #4]
 8004614:	6863      	ldr	r3, [r4, #4]
 8004616:	6123      	str	r3, [r4, #16]
 8004618:	2300      	movs	r3, #0
 800461a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800461e:	e7aa      	b.n	8004576 <_printf_i+0x14e>
 8004620:	462a      	mov	r2, r5
 8004622:	4649      	mov	r1, r9
 8004624:	4640      	mov	r0, r8
 8004626:	6923      	ldr	r3, [r4, #16]
 8004628:	47d0      	blx	sl
 800462a:	3001      	adds	r0, #1
 800462c:	d0ad      	beq.n	800458a <_printf_i+0x162>
 800462e:	6823      	ldr	r3, [r4, #0]
 8004630:	079b      	lsls	r3, r3, #30
 8004632:	d413      	bmi.n	800465c <_printf_i+0x234>
 8004634:	68e0      	ldr	r0, [r4, #12]
 8004636:	9b03      	ldr	r3, [sp, #12]
 8004638:	4298      	cmp	r0, r3
 800463a:	bfb8      	it	lt
 800463c:	4618      	movlt	r0, r3
 800463e:	e7a6      	b.n	800458e <_printf_i+0x166>
 8004640:	2301      	movs	r3, #1
 8004642:	4632      	mov	r2, r6
 8004644:	4649      	mov	r1, r9
 8004646:	4640      	mov	r0, r8
 8004648:	47d0      	blx	sl
 800464a:	3001      	adds	r0, #1
 800464c:	d09d      	beq.n	800458a <_printf_i+0x162>
 800464e:	3501      	adds	r5, #1
 8004650:	68e3      	ldr	r3, [r4, #12]
 8004652:	9903      	ldr	r1, [sp, #12]
 8004654:	1a5b      	subs	r3, r3, r1
 8004656:	42ab      	cmp	r3, r5
 8004658:	dcf2      	bgt.n	8004640 <_printf_i+0x218>
 800465a:	e7eb      	b.n	8004634 <_printf_i+0x20c>
 800465c:	2500      	movs	r5, #0
 800465e:	f104 0619 	add.w	r6, r4, #25
 8004662:	e7f5      	b.n	8004650 <_printf_i+0x228>
 8004664:	08008560 	.word	0x08008560
 8004668:	08008571 	.word	0x08008571

0800466c <_scanf_float>:
 800466c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004670:	b087      	sub	sp, #28
 8004672:	9303      	str	r3, [sp, #12]
 8004674:	688b      	ldr	r3, [r1, #8]
 8004676:	4617      	mov	r7, r2
 8004678:	1e5a      	subs	r2, r3, #1
 800467a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800467e:	bf85      	ittet	hi
 8004680:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004684:	195b      	addhi	r3, r3, r5
 8004686:	2300      	movls	r3, #0
 8004688:	9302      	strhi	r3, [sp, #8]
 800468a:	bf88      	it	hi
 800468c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004690:	468b      	mov	fp, r1
 8004692:	f04f 0500 	mov.w	r5, #0
 8004696:	bf8c      	ite	hi
 8004698:	608b      	strhi	r3, [r1, #8]
 800469a:	9302      	strls	r3, [sp, #8]
 800469c:	680b      	ldr	r3, [r1, #0]
 800469e:	4680      	mov	r8, r0
 80046a0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80046a4:	f84b 3b1c 	str.w	r3, [fp], #28
 80046a8:	460c      	mov	r4, r1
 80046aa:	465e      	mov	r6, fp
 80046ac:	46aa      	mov	sl, r5
 80046ae:	46a9      	mov	r9, r5
 80046b0:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80046b4:	9501      	str	r5, [sp, #4]
 80046b6:	68a2      	ldr	r2, [r4, #8]
 80046b8:	b152      	cbz	r2, 80046d0 <_scanf_float+0x64>
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	2b4e      	cmp	r3, #78	; 0x4e
 80046c0:	d864      	bhi.n	800478c <_scanf_float+0x120>
 80046c2:	2b40      	cmp	r3, #64	; 0x40
 80046c4:	d83c      	bhi.n	8004740 <_scanf_float+0xd4>
 80046c6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80046ca:	b2c8      	uxtb	r0, r1
 80046cc:	280e      	cmp	r0, #14
 80046ce:	d93a      	bls.n	8004746 <_scanf_float+0xda>
 80046d0:	f1b9 0f00 	cmp.w	r9, #0
 80046d4:	d003      	beq.n	80046de <_scanf_float+0x72>
 80046d6:	6823      	ldr	r3, [r4, #0]
 80046d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046dc:	6023      	str	r3, [r4, #0]
 80046de:	f10a 3aff 	add.w	sl, sl, #4294967295
 80046e2:	f1ba 0f01 	cmp.w	sl, #1
 80046e6:	f200 8113 	bhi.w	8004910 <_scanf_float+0x2a4>
 80046ea:	455e      	cmp	r6, fp
 80046ec:	f200 8105 	bhi.w	80048fa <_scanf_float+0x28e>
 80046f0:	2501      	movs	r5, #1
 80046f2:	4628      	mov	r0, r5
 80046f4:	b007      	add	sp, #28
 80046f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046fa:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80046fe:	2a0d      	cmp	r2, #13
 8004700:	d8e6      	bhi.n	80046d0 <_scanf_float+0x64>
 8004702:	a101      	add	r1, pc, #4	; (adr r1, 8004708 <_scanf_float+0x9c>)
 8004704:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004708:	08004847 	.word	0x08004847
 800470c:	080046d1 	.word	0x080046d1
 8004710:	080046d1 	.word	0x080046d1
 8004714:	080046d1 	.word	0x080046d1
 8004718:	080048a7 	.word	0x080048a7
 800471c:	0800487f 	.word	0x0800487f
 8004720:	080046d1 	.word	0x080046d1
 8004724:	080046d1 	.word	0x080046d1
 8004728:	08004855 	.word	0x08004855
 800472c:	080046d1 	.word	0x080046d1
 8004730:	080046d1 	.word	0x080046d1
 8004734:	080046d1 	.word	0x080046d1
 8004738:	080046d1 	.word	0x080046d1
 800473c:	0800480d 	.word	0x0800480d
 8004740:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8004744:	e7db      	b.n	80046fe <_scanf_float+0x92>
 8004746:	290e      	cmp	r1, #14
 8004748:	d8c2      	bhi.n	80046d0 <_scanf_float+0x64>
 800474a:	a001      	add	r0, pc, #4	; (adr r0, 8004750 <_scanf_float+0xe4>)
 800474c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004750:	080047ff 	.word	0x080047ff
 8004754:	080046d1 	.word	0x080046d1
 8004758:	080047ff 	.word	0x080047ff
 800475c:	08004893 	.word	0x08004893
 8004760:	080046d1 	.word	0x080046d1
 8004764:	080047ad 	.word	0x080047ad
 8004768:	080047e9 	.word	0x080047e9
 800476c:	080047e9 	.word	0x080047e9
 8004770:	080047e9 	.word	0x080047e9
 8004774:	080047e9 	.word	0x080047e9
 8004778:	080047e9 	.word	0x080047e9
 800477c:	080047e9 	.word	0x080047e9
 8004780:	080047e9 	.word	0x080047e9
 8004784:	080047e9 	.word	0x080047e9
 8004788:	080047e9 	.word	0x080047e9
 800478c:	2b6e      	cmp	r3, #110	; 0x6e
 800478e:	d809      	bhi.n	80047a4 <_scanf_float+0x138>
 8004790:	2b60      	cmp	r3, #96	; 0x60
 8004792:	d8b2      	bhi.n	80046fa <_scanf_float+0x8e>
 8004794:	2b54      	cmp	r3, #84	; 0x54
 8004796:	d077      	beq.n	8004888 <_scanf_float+0x21c>
 8004798:	2b59      	cmp	r3, #89	; 0x59
 800479a:	d199      	bne.n	80046d0 <_scanf_float+0x64>
 800479c:	2d07      	cmp	r5, #7
 800479e:	d197      	bne.n	80046d0 <_scanf_float+0x64>
 80047a0:	2508      	movs	r5, #8
 80047a2:	e029      	b.n	80047f8 <_scanf_float+0x18c>
 80047a4:	2b74      	cmp	r3, #116	; 0x74
 80047a6:	d06f      	beq.n	8004888 <_scanf_float+0x21c>
 80047a8:	2b79      	cmp	r3, #121	; 0x79
 80047aa:	e7f6      	b.n	800479a <_scanf_float+0x12e>
 80047ac:	6821      	ldr	r1, [r4, #0]
 80047ae:	05c8      	lsls	r0, r1, #23
 80047b0:	d51a      	bpl.n	80047e8 <_scanf_float+0x17c>
 80047b2:	9b02      	ldr	r3, [sp, #8]
 80047b4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80047b8:	6021      	str	r1, [r4, #0]
 80047ba:	f109 0901 	add.w	r9, r9, #1
 80047be:	b11b      	cbz	r3, 80047c8 <_scanf_float+0x15c>
 80047c0:	3b01      	subs	r3, #1
 80047c2:	3201      	adds	r2, #1
 80047c4:	9302      	str	r3, [sp, #8]
 80047c6:	60a2      	str	r2, [r4, #8]
 80047c8:	68a3      	ldr	r3, [r4, #8]
 80047ca:	3b01      	subs	r3, #1
 80047cc:	60a3      	str	r3, [r4, #8]
 80047ce:	6923      	ldr	r3, [r4, #16]
 80047d0:	3301      	adds	r3, #1
 80047d2:	6123      	str	r3, [r4, #16]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	3b01      	subs	r3, #1
 80047d8:	2b00      	cmp	r3, #0
 80047da:	607b      	str	r3, [r7, #4]
 80047dc:	f340 8084 	ble.w	80048e8 <_scanf_float+0x27c>
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	3301      	adds	r3, #1
 80047e4:	603b      	str	r3, [r7, #0]
 80047e6:	e766      	b.n	80046b6 <_scanf_float+0x4a>
 80047e8:	eb1a 0f05 	cmn.w	sl, r5
 80047ec:	f47f af70 	bne.w	80046d0 <_scanf_float+0x64>
 80047f0:	6822      	ldr	r2, [r4, #0]
 80047f2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80047f6:	6022      	str	r2, [r4, #0]
 80047f8:	f806 3b01 	strb.w	r3, [r6], #1
 80047fc:	e7e4      	b.n	80047c8 <_scanf_float+0x15c>
 80047fe:	6822      	ldr	r2, [r4, #0]
 8004800:	0610      	lsls	r0, r2, #24
 8004802:	f57f af65 	bpl.w	80046d0 <_scanf_float+0x64>
 8004806:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800480a:	e7f4      	b.n	80047f6 <_scanf_float+0x18a>
 800480c:	f1ba 0f00 	cmp.w	sl, #0
 8004810:	d10e      	bne.n	8004830 <_scanf_float+0x1c4>
 8004812:	f1b9 0f00 	cmp.w	r9, #0
 8004816:	d10e      	bne.n	8004836 <_scanf_float+0x1ca>
 8004818:	6822      	ldr	r2, [r4, #0]
 800481a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800481e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004822:	d108      	bne.n	8004836 <_scanf_float+0x1ca>
 8004824:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004828:	f04f 0a01 	mov.w	sl, #1
 800482c:	6022      	str	r2, [r4, #0]
 800482e:	e7e3      	b.n	80047f8 <_scanf_float+0x18c>
 8004830:	f1ba 0f02 	cmp.w	sl, #2
 8004834:	d055      	beq.n	80048e2 <_scanf_float+0x276>
 8004836:	2d01      	cmp	r5, #1
 8004838:	d002      	beq.n	8004840 <_scanf_float+0x1d4>
 800483a:	2d04      	cmp	r5, #4
 800483c:	f47f af48 	bne.w	80046d0 <_scanf_float+0x64>
 8004840:	3501      	adds	r5, #1
 8004842:	b2ed      	uxtb	r5, r5
 8004844:	e7d8      	b.n	80047f8 <_scanf_float+0x18c>
 8004846:	f1ba 0f01 	cmp.w	sl, #1
 800484a:	f47f af41 	bne.w	80046d0 <_scanf_float+0x64>
 800484e:	f04f 0a02 	mov.w	sl, #2
 8004852:	e7d1      	b.n	80047f8 <_scanf_float+0x18c>
 8004854:	b97d      	cbnz	r5, 8004876 <_scanf_float+0x20a>
 8004856:	f1b9 0f00 	cmp.w	r9, #0
 800485a:	f47f af3c 	bne.w	80046d6 <_scanf_float+0x6a>
 800485e:	6822      	ldr	r2, [r4, #0]
 8004860:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004864:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004868:	f47f af39 	bne.w	80046de <_scanf_float+0x72>
 800486c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004870:	2501      	movs	r5, #1
 8004872:	6022      	str	r2, [r4, #0]
 8004874:	e7c0      	b.n	80047f8 <_scanf_float+0x18c>
 8004876:	2d03      	cmp	r5, #3
 8004878:	d0e2      	beq.n	8004840 <_scanf_float+0x1d4>
 800487a:	2d05      	cmp	r5, #5
 800487c:	e7de      	b.n	800483c <_scanf_float+0x1d0>
 800487e:	2d02      	cmp	r5, #2
 8004880:	f47f af26 	bne.w	80046d0 <_scanf_float+0x64>
 8004884:	2503      	movs	r5, #3
 8004886:	e7b7      	b.n	80047f8 <_scanf_float+0x18c>
 8004888:	2d06      	cmp	r5, #6
 800488a:	f47f af21 	bne.w	80046d0 <_scanf_float+0x64>
 800488e:	2507      	movs	r5, #7
 8004890:	e7b2      	b.n	80047f8 <_scanf_float+0x18c>
 8004892:	6822      	ldr	r2, [r4, #0]
 8004894:	0591      	lsls	r1, r2, #22
 8004896:	f57f af1b 	bpl.w	80046d0 <_scanf_float+0x64>
 800489a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800489e:	6022      	str	r2, [r4, #0]
 80048a0:	f8cd 9004 	str.w	r9, [sp, #4]
 80048a4:	e7a8      	b.n	80047f8 <_scanf_float+0x18c>
 80048a6:	6822      	ldr	r2, [r4, #0]
 80048a8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80048ac:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80048b0:	d006      	beq.n	80048c0 <_scanf_float+0x254>
 80048b2:	0550      	lsls	r0, r2, #21
 80048b4:	f57f af0c 	bpl.w	80046d0 <_scanf_float+0x64>
 80048b8:	f1b9 0f00 	cmp.w	r9, #0
 80048bc:	f43f af0f 	beq.w	80046de <_scanf_float+0x72>
 80048c0:	0591      	lsls	r1, r2, #22
 80048c2:	bf58      	it	pl
 80048c4:	9901      	ldrpl	r1, [sp, #4]
 80048c6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80048ca:	bf58      	it	pl
 80048cc:	eba9 0101 	subpl.w	r1, r9, r1
 80048d0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80048d4:	f04f 0900 	mov.w	r9, #0
 80048d8:	bf58      	it	pl
 80048da:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80048de:	6022      	str	r2, [r4, #0]
 80048e0:	e78a      	b.n	80047f8 <_scanf_float+0x18c>
 80048e2:	f04f 0a03 	mov.w	sl, #3
 80048e6:	e787      	b.n	80047f8 <_scanf_float+0x18c>
 80048e8:	4639      	mov	r1, r7
 80048ea:	4640      	mov	r0, r8
 80048ec:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80048f0:	4798      	blx	r3
 80048f2:	2800      	cmp	r0, #0
 80048f4:	f43f aedf 	beq.w	80046b6 <_scanf_float+0x4a>
 80048f8:	e6ea      	b.n	80046d0 <_scanf_float+0x64>
 80048fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80048fe:	463a      	mov	r2, r7
 8004900:	4640      	mov	r0, r8
 8004902:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004906:	4798      	blx	r3
 8004908:	6923      	ldr	r3, [r4, #16]
 800490a:	3b01      	subs	r3, #1
 800490c:	6123      	str	r3, [r4, #16]
 800490e:	e6ec      	b.n	80046ea <_scanf_float+0x7e>
 8004910:	1e6b      	subs	r3, r5, #1
 8004912:	2b06      	cmp	r3, #6
 8004914:	d825      	bhi.n	8004962 <_scanf_float+0x2f6>
 8004916:	2d02      	cmp	r5, #2
 8004918:	d836      	bhi.n	8004988 <_scanf_float+0x31c>
 800491a:	455e      	cmp	r6, fp
 800491c:	f67f aee8 	bls.w	80046f0 <_scanf_float+0x84>
 8004920:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004924:	463a      	mov	r2, r7
 8004926:	4640      	mov	r0, r8
 8004928:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800492c:	4798      	blx	r3
 800492e:	6923      	ldr	r3, [r4, #16]
 8004930:	3b01      	subs	r3, #1
 8004932:	6123      	str	r3, [r4, #16]
 8004934:	e7f1      	b.n	800491a <_scanf_float+0x2ae>
 8004936:	9802      	ldr	r0, [sp, #8]
 8004938:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800493c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8004940:	463a      	mov	r2, r7
 8004942:	9002      	str	r0, [sp, #8]
 8004944:	4640      	mov	r0, r8
 8004946:	4798      	blx	r3
 8004948:	6923      	ldr	r3, [r4, #16]
 800494a:	3b01      	subs	r3, #1
 800494c:	6123      	str	r3, [r4, #16]
 800494e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004952:	fa5f fa8a 	uxtb.w	sl, sl
 8004956:	f1ba 0f02 	cmp.w	sl, #2
 800495a:	d1ec      	bne.n	8004936 <_scanf_float+0x2ca>
 800495c:	3d03      	subs	r5, #3
 800495e:	b2ed      	uxtb	r5, r5
 8004960:	1b76      	subs	r6, r6, r5
 8004962:	6823      	ldr	r3, [r4, #0]
 8004964:	05da      	lsls	r2, r3, #23
 8004966:	d52f      	bpl.n	80049c8 <_scanf_float+0x35c>
 8004968:	055b      	lsls	r3, r3, #21
 800496a:	d510      	bpl.n	800498e <_scanf_float+0x322>
 800496c:	455e      	cmp	r6, fp
 800496e:	f67f aebf 	bls.w	80046f0 <_scanf_float+0x84>
 8004972:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004976:	463a      	mov	r2, r7
 8004978:	4640      	mov	r0, r8
 800497a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800497e:	4798      	blx	r3
 8004980:	6923      	ldr	r3, [r4, #16]
 8004982:	3b01      	subs	r3, #1
 8004984:	6123      	str	r3, [r4, #16]
 8004986:	e7f1      	b.n	800496c <_scanf_float+0x300>
 8004988:	46aa      	mov	sl, r5
 800498a:	9602      	str	r6, [sp, #8]
 800498c:	e7df      	b.n	800494e <_scanf_float+0x2e2>
 800498e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004992:	6923      	ldr	r3, [r4, #16]
 8004994:	2965      	cmp	r1, #101	; 0x65
 8004996:	f103 33ff 	add.w	r3, r3, #4294967295
 800499a:	f106 35ff 	add.w	r5, r6, #4294967295
 800499e:	6123      	str	r3, [r4, #16]
 80049a0:	d00c      	beq.n	80049bc <_scanf_float+0x350>
 80049a2:	2945      	cmp	r1, #69	; 0x45
 80049a4:	d00a      	beq.n	80049bc <_scanf_float+0x350>
 80049a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80049aa:	463a      	mov	r2, r7
 80049ac:	4640      	mov	r0, r8
 80049ae:	4798      	blx	r3
 80049b0:	6923      	ldr	r3, [r4, #16]
 80049b2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80049b6:	3b01      	subs	r3, #1
 80049b8:	1eb5      	subs	r5, r6, #2
 80049ba:	6123      	str	r3, [r4, #16]
 80049bc:	463a      	mov	r2, r7
 80049be:	4640      	mov	r0, r8
 80049c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80049c4:	4798      	blx	r3
 80049c6:	462e      	mov	r6, r5
 80049c8:	6825      	ldr	r5, [r4, #0]
 80049ca:	f015 0510 	ands.w	r5, r5, #16
 80049ce:	d155      	bne.n	8004a7c <_scanf_float+0x410>
 80049d0:	7035      	strb	r5, [r6, #0]
 80049d2:	6823      	ldr	r3, [r4, #0]
 80049d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80049d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049dc:	d11d      	bne.n	8004a1a <_scanf_float+0x3ae>
 80049de:	9b01      	ldr	r3, [sp, #4]
 80049e0:	454b      	cmp	r3, r9
 80049e2:	eba3 0209 	sub.w	r2, r3, r9
 80049e6:	d125      	bne.n	8004a34 <_scanf_float+0x3c8>
 80049e8:	2200      	movs	r2, #0
 80049ea:	4659      	mov	r1, fp
 80049ec:	4640      	mov	r0, r8
 80049ee:	f002 fc0f 	bl	8007210 <_strtod_r>
 80049f2:	9b03      	ldr	r3, [sp, #12]
 80049f4:	f8d4 c000 	ldr.w	ip, [r4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f01c 0f02 	tst.w	ip, #2
 80049fe:	4606      	mov	r6, r0
 8004a00:	460f      	mov	r7, r1
 8004a02:	f103 0204 	add.w	r2, r3, #4
 8004a06:	d020      	beq.n	8004a4a <_scanf_float+0x3de>
 8004a08:	9903      	ldr	r1, [sp, #12]
 8004a0a:	600a      	str	r2, [r1, #0]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	e9c3 6700 	strd	r6, r7, [r3]
 8004a12:	68e3      	ldr	r3, [r4, #12]
 8004a14:	3301      	adds	r3, #1
 8004a16:	60e3      	str	r3, [r4, #12]
 8004a18:	e66b      	b.n	80046f2 <_scanf_float+0x86>
 8004a1a:	9b04      	ldr	r3, [sp, #16]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d0e3      	beq.n	80049e8 <_scanf_float+0x37c>
 8004a20:	9905      	ldr	r1, [sp, #20]
 8004a22:	230a      	movs	r3, #10
 8004a24:	462a      	mov	r2, r5
 8004a26:	4640      	mov	r0, r8
 8004a28:	3101      	adds	r1, #1
 8004a2a:	f002 fc75 	bl	8007318 <_strtol_r>
 8004a2e:	9b04      	ldr	r3, [sp, #16]
 8004a30:	9e05      	ldr	r6, [sp, #20]
 8004a32:	1ac2      	subs	r2, r0, r3
 8004a34:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004a38:	429e      	cmp	r6, r3
 8004a3a:	bf28      	it	cs
 8004a3c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8004a40:	4630      	mov	r0, r6
 8004a42:	490f      	ldr	r1, [pc, #60]	; (8004a80 <_scanf_float+0x414>)
 8004a44:	f000 f8d0 	bl	8004be8 <siprintf>
 8004a48:	e7ce      	b.n	80049e8 <_scanf_float+0x37c>
 8004a4a:	f01c 0f04 	tst.w	ip, #4
 8004a4e:	d1db      	bne.n	8004a08 <_scanf_float+0x39c>
 8004a50:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8004a54:	f8cc 2000 	str.w	r2, [ip]
 8004a58:	f8d3 8000 	ldr.w	r8, [r3]
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	460b      	mov	r3, r1
 8004a60:	f7fb ffd4 	bl	8000a0c <__aeabi_dcmpun>
 8004a64:	b128      	cbz	r0, 8004a72 <_scanf_float+0x406>
 8004a66:	4807      	ldr	r0, [pc, #28]	; (8004a84 <_scanf_float+0x418>)
 8004a68:	f000 f9ae 	bl	8004dc8 <nanf>
 8004a6c:	f8c8 0000 	str.w	r0, [r8]
 8004a70:	e7cf      	b.n	8004a12 <_scanf_float+0x3a6>
 8004a72:	4630      	mov	r0, r6
 8004a74:	4639      	mov	r1, r7
 8004a76:	f7fc f827 	bl	8000ac8 <__aeabi_d2f>
 8004a7a:	e7f7      	b.n	8004a6c <_scanf_float+0x400>
 8004a7c:	2500      	movs	r5, #0
 8004a7e:	e638      	b.n	80046f2 <_scanf_float+0x86>
 8004a80:	08008582 	.word	0x08008582
 8004a84:	08008915 	.word	0x08008915

08004a88 <std>:
 8004a88:	2300      	movs	r3, #0
 8004a8a:	b510      	push	{r4, lr}
 8004a8c:	4604      	mov	r4, r0
 8004a8e:	e9c0 3300 	strd	r3, r3, [r0]
 8004a92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004a96:	6083      	str	r3, [r0, #8]
 8004a98:	8181      	strh	r1, [r0, #12]
 8004a9a:	6643      	str	r3, [r0, #100]	; 0x64
 8004a9c:	81c2      	strh	r2, [r0, #14]
 8004a9e:	6183      	str	r3, [r0, #24]
 8004aa0:	4619      	mov	r1, r3
 8004aa2:	2208      	movs	r2, #8
 8004aa4:	305c      	adds	r0, #92	; 0x5c
 8004aa6:	f000 f902 	bl	8004cae <memset>
 8004aaa:	4b05      	ldr	r3, [pc, #20]	; (8004ac0 <std+0x38>)
 8004aac:	6224      	str	r4, [r4, #32]
 8004aae:	6263      	str	r3, [r4, #36]	; 0x24
 8004ab0:	4b04      	ldr	r3, [pc, #16]	; (8004ac4 <std+0x3c>)
 8004ab2:	62a3      	str	r3, [r4, #40]	; 0x28
 8004ab4:	4b04      	ldr	r3, [pc, #16]	; (8004ac8 <std+0x40>)
 8004ab6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004ab8:	4b04      	ldr	r3, [pc, #16]	; (8004acc <std+0x44>)
 8004aba:	6323      	str	r3, [r4, #48]	; 0x30
 8004abc:	bd10      	pop	{r4, pc}
 8004abe:	bf00      	nop
 8004ac0:	08004c29 	.word	0x08004c29
 8004ac4:	08004c4b 	.word	0x08004c4b
 8004ac8:	08004c83 	.word	0x08004c83
 8004acc:	08004ca7 	.word	0x08004ca7

08004ad0 <stdio_exit_handler>:
 8004ad0:	4a02      	ldr	r2, [pc, #8]	; (8004adc <stdio_exit_handler+0xc>)
 8004ad2:	4903      	ldr	r1, [pc, #12]	; (8004ae0 <stdio_exit_handler+0x10>)
 8004ad4:	4803      	ldr	r0, [pc, #12]	; (8004ae4 <stdio_exit_handler+0x14>)
 8004ad6:	f000 b869 	b.w	8004bac <_fwalk_sglue>
 8004ada:	bf00      	nop
 8004adc:	20000014 	.word	0x20000014
 8004ae0:	080076d1 	.word	0x080076d1
 8004ae4:	20000020 	.word	0x20000020

08004ae8 <cleanup_stdio>:
 8004ae8:	6841      	ldr	r1, [r0, #4]
 8004aea:	4b0c      	ldr	r3, [pc, #48]	; (8004b1c <cleanup_stdio+0x34>)
 8004aec:	b510      	push	{r4, lr}
 8004aee:	4299      	cmp	r1, r3
 8004af0:	4604      	mov	r4, r0
 8004af2:	d001      	beq.n	8004af8 <cleanup_stdio+0x10>
 8004af4:	f002 fdec 	bl	80076d0 <_fflush_r>
 8004af8:	68a1      	ldr	r1, [r4, #8]
 8004afa:	4b09      	ldr	r3, [pc, #36]	; (8004b20 <cleanup_stdio+0x38>)
 8004afc:	4299      	cmp	r1, r3
 8004afe:	d002      	beq.n	8004b06 <cleanup_stdio+0x1e>
 8004b00:	4620      	mov	r0, r4
 8004b02:	f002 fde5 	bl	80076d0 <_fflush_r>
 8004b06:	68e1      	ldr	r1, [r4, #12]
 8004b08:	4b06      	ldr	r3, [pc, #24]	; (8004b24 <cleanup_stdio+0x3c>)
 8004b0a:	4299      	cmp	r1, r3
 8004b0c:	d004      	beq.n	8004b18 <cleanup_stdio+0x30>
 8004b0e:	4620      	mov	r0, r4
 8004b10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b14:	f002 bddc 	b.w	80076d0 <_fflush_r>
 8004b18:	bd10      	pop	{r4, pc}
 8004b1a:	bf00      	nop
 8004b1c:	200002ac 	.word	0x200002ac
 8004b20:	20000314 	.word	0x20000314
 8004b24:	2000037c 	.word	0x2000037c

08004b28 <global_stdio_init.part.0>:
 8004b28:	b510      	push	{r4, lr}
 8004b2a:	4b0b      	ldr	r3, [pc, #44]	; (8004b58 <global_stdio_init.part.0+0x30>)
 8004b2c:	4c0b      	ldr	r4, [pc, #44]	; (8004b5c <global_stdio_init.part.0+0x34>)
 8004b2e:	4a0c      	ldr	r2, [pc, #48]	; (8004b60 <global_stdio_init.part.0+0x38>)
 8004b30:	4620      	mov	r0, r4
 8004b32:	601a      	str	r2, [r3, #0]
 8004b34:	2104      	movs	r1, #4
 8004b36:	2200      	movs	r2, #0
 8004b38:	f7ff ffa6 	bl	8004a88 <std>
 8004b3c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004b40:	2201      	movs	r2, #1
 8004b42:	2109      	movs	r1, #9
 8004b44:	f7ff ffa0 	bl	8004a88 <std>
 8004b48:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004b4c:	2202      	movs	r2, #2
 8004b4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b52:	2112      	movs	r1, #18
 8004b54:	f7ff bf98 	b.w	8004a88 <std>
 8004b58:	200003e4 	.word	0x200003e4
 8004b5c:	200002ac 	.word	0x200002ac
 8004b60:	08004ad1 	.word	0x08004ad1

08004b64 <__sfp_lock_acquire>:
 8004b64:	4801      	ldr	r0, [pc, #4]	; (8004b6c <__sfp_lock_acquire+0x8>)
 8004b66:	f000 b91f 	b.w	8004da8 <__retarget_lock_acquire_recursive>
 8004b6a:	bf00      	nop
 8004b6c:	200003ed 	.word	0x200003ed

08004b70 <__sfp_lock_release>:
 8004b70:	4801      	ldr	r0, [pc, #4]	; (8004b78 <__sfp_lock_release+0x8>)
 8004b72:	f000 b91a 	b.w	8004daa <__retarget_lock_release_recursive>
 8004b76:	bf00      	nop
 8004b78:	200003ed 	.word	0x200003ed

08004b7c <__sinit>:
 8004b7c:	b510      	push	{r4, lr}
 8004b7e:	4604      	mov	r4, r0
 8004b80:	f7ff fff0 	bl	8004b64 <__sfp_lock_acquire>
 8004b84:	6a23      	ldr	r3, [r4, #32]
 8004b86:	b11b      	cbz	r3, 8004b90 <__sinit+0x14>
 8004b88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b8c:	f7ff bff0 	b.w	8004b70 <__sfp_lock_release>
 8004b90:	4b04      	ldr	r3, [pc, #16]	; (8004ba4 <__sinit+0x28>)
 8004b92:	6223      	str	r3, [r4, #32]
 8004b94:	4b04      	ldr	r3, [pc, #16]	; (8004ba8 <__sinit+0x2c>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d1f5      	bne.n	8004b88 <__sinit+0xc>
 8004b9c:	f7ff ffc4 	bl	8004b28 <global_stdio_init.part.0>
 8004ba0:	e7f2      	b.n	8004b88 <__sinit+0xc>
 8004ba2:	bf00      	nop
 8004ba4:	08004ae9 	.word	0x08004ae9
 8004ba8:	200003e4 	.word	0x200003e4

08004bac <_fwalk_sglue>:
 8004bac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004bb0:	4607      	mov	r7, r0
 8004bb2:	4688      	mov	r8, r1
 8004bb4:	4614      	mov	r4, r2
 8004bb6:	2600      	movs	r6, #0
 8004bb8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004bbc:	f1b9 0901 	subs.w	r9, r9, #1
 8004bc0:	d505      	bpl.n	8004bce <_fwalk_sglue+0x22>
 8004bc2:	6824      	ldr	r4, [r4, #0]
 8004bc4:	2c00      	cmp	r4, #0
 8004bc6:	d1f7      	bne.n	8004bb8 <_fwalk_sglue+0xc>
 8004bc8:	4630      	mov	r0, r6
 8004bca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004bce:	89ab      	ldrh	r3, [r5, #12]
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d907      	bls.n	8004be4 <_fwalk_sglue+0x38>
 8004bd4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004bd8:	3301      	adds	r3, #1
 8004bda:	d003      	beq.n	8004be4 <_fwalk_sglue+0x38>
 8004bdc:	4629      	mov	r1, r5
 8004bde:	4638      	mov	r0, r7
 8004be0:	47c0      	blx	r8
 8004be2:	4306      	orrs	r6, r0
 8004be4:	3568      	adds	r5, #104	; 0x68
 8004be6:	e7e9      	b.n	8004bbc <_fwalk_sglue+0x10>

08004be8 <siprintf>:
 8004be8:	b40e      	push	{r1, r2, r3}
 8004bea:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004bee:	b500      	push	{lr}
 8004bf0:	b09c      	sub	sp, #112	; 0x70
 8004bf2:	ab1d      	add	r3, sp, #116	; 0x74
 8004bf4:	9002      	str	r0, [sp, #8]
 8004bf6:	9006      	str	r0, [sp, #24]
 8004bf8:	9107      	str	r1, [sp, #28]
 8004bfa:	9104      	str	r1, [sp, #16]
 8004bfc:	4808      	ldr	r0, [pc, #32]	; (8004c20 <siprintf+0x38>)
 8004bfe:	4909      	ldr	r1, [pc, #36]	; (8004c24 <siprintf+0x3c>)
 8004c00:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c04:	9105      	str	r1, [sp, #20]
 8004c06:	6800      	ldr	r0, [r0, #0]
 8004c08:	a902      	add	r1, sp, #8
 8004c0a:	9301      	str	r3, [sp, #4]
 8004c0c:	f002 fbe0 	bl	80073d0 <_svfiprintf_r>
 8004c10:	2200      	movs	r2, #0
 8004c12:	9b02      	ldr	r3, [sp, #8]
 8004c14:	701a      	strb	r2, [r3, #0]
 8004c16:	b01c      	add	sp, #112	; 0x70
 8004c18:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c1c:	b003      	add	sp, #12
 8004c1e:	4770      	bx	lr
 8004c20:	2000006c 	.word	0x2000006c
 8004c24:	ffff0208 	.word	0xffff0208

08004c28 <__sread>:
 8004c28:	b510      	push	{r4, lr}
 8004c2a:	460c      	mov	r4, r1
 8004c2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c30:	f000 f86c 	bl	8004d0c <_read_r>
 8004c34:	2800      	cmp	r0, #0
 8004c36:	bfab      	itete	ge
 8004c38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004c3a:	89a3      	ldrhlt	r3, [r4, #12]
 8004c3c:	181b      	addge	r3, r3, r0
 8004c3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004c42:	bfac      	ite	ge
 8004c44:	6563      	strge	r3, [r4, #84]	; 0x54
 8004c46:	81a3      	strhlt	r3, [r4, #12]
 8004c48:	bd10      	pop	{r4, pc}

08004c4a <__swrite>:
 8004c4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c4e:	461f      	mov	r7, r3
 8004c50:	898b      	ldrh	r3, [r1, #12]
 8004c52:	4605      	mov	r5, r0
 8004c54:	05db      	lsls	r3, r3, #23
 8004c56:	460c      	mov	r4, r1
 8004c58:	4616      	mov	r6, r2
 8004c5a:	d505      	bpl.n	8004c68 <__swrite+0x1e>
 8004c5c:	2302      	movs	r3, #2
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c64:	f000 f840 	bl	8004ce8 <_lseek_r>
 8004c68:	89a3      	ldrh	r3, [r4, #12]
 8004c6a:	4632      	mov	r2, r6
 8004c6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c70:	81a3      	strh	r3, [r4, #12]
 8004c72:	4628      	mov	r0, r5
 8004c74:	463b      	mov	r3, r7
 8004c76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c7e:	f000 b857 	b.w	8004d30 <_write_r>

08004c82 <__sseek>:
 8004c82:	b510      	push	{r4, lr}
 8004c84:	460c      	mov	r4, r1
 8004c86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c8a:	f000 f82d 	bl	8004ce8 <_lseek_r>
 8004c8e:	1c43      	adds	r3, r0, #1
 8004c90:	89a3      	ldrh	r3, [r4, #12]
 8004c92:	bf15      	itete	ne
 8004c94:	6560      	strne	r0, [r4, #84]	; 0x54
 8004c96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004c9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004c9e:	81a3      	strheq	r3, [r4, #12]
 8004ca0:	bf18      	it	ne
 8004ca2:	81a3      	strhne	r3, [r4, #12]
 8004ca4:	bd10      	pop	{r4, pc}

08004ca6 <__sclose>:
 8004ca6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004caa:	f000 b80d 	b.w	8004cc8 <_close_r>

08004cae <memset>:
 8004cae:	4603      	mov	r3, r0
 8004cb0:	4402      	add	r2, r0
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d100      	bne.n	8004cb8 <memset+0xa>
 8004cb6:	4770      	bx	lr
 8004cb8:	f803 1b01 	strb.w	r1, [r3], #1
 8004cbc:	e7f9      	b.n	8004cb2 <memset+0x4>
	...

08004cc0 <_localeconv_r>:
 8004cc0:	4800      	ldr	r0, [pc, #0]	; (8004cc4 <_localeconv_r+0x4>)
 8004cc2:	4770      	bx	lr
 8004cc4:	20000160 	.word	0x20000160

08004cc8 <_close_r>:
 8004cc8:	b538      	push	{r3, r4, r5, lr}
 8004cca:	2300      	movs	r3, #0
 8004ccc:	4d05      	ldr	r5, [pc, #20]	; (8004ce4 <_close_r+0x1c>)
 8004cce:	4604      	mov	r4, r0
 8004cd0:	4608      	mov	r0, r1
 8004cd2:	602b      	str	r3, [r5, #0]
 8004cd4:	f7fc fa87 	bl	80011e6 <_close>
 8004cd8:	1c43      	adds	r3, r0, #1
 8004cda:	d102      	bne.n	8004ce2 <_close_r+0x1a>
 8004cdc:	682b      	ldr	r3, [r5, #0]
 8004cde:	b103      	cbz	r3, 8004ce2 <_close_r+0x1a>
 8004ce0:	6023      	str	r3, [r4, #0]
 8004ce2:	bd38      	pop	{r3, r4, r5, pc}
 8004ce4:	200003e8 	.word	0x200003e8

08004ce8 <_lseek_r>:
 8004ce8:	b538      	push	{r3, r4, r5, lr}
 8004cea:	4604      	mov	r4, r0
 8004cec:	4608      	mov	r0, r1
 8004cee:	4611      	mov	r1, r2
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	4d05      	ldr	r5, [pc, #20]	; (8004d08 <_lseek_r+0x20>)
 8004cf4:	602a      	str	r2, [r5, #0]
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	f7fc fa99 	bl	800122e <_lseek>
 8004cfc:	1c43      	adds	r3, r0, #1
 8004cfe:	d102      	bne.n	8004d06 <_lseek_r+0x1e>
 8004d00:	682b      	ldr	r3, [r5, #0]
 8004d02:	b103      	cbz	r3, 8004d06 <_lseek_r+0x1e>
 8004d04:	6023      	str	r3, [r4, #0]
 8004d06:	bd38      	pop	{r3, r4, r5, pc}
 8004d08:	200003e8 	.word	0x200003e8

08004d0c <_read_r>:
 8004d0c:	b538      	push	{r3, r4, r5, lr}
 8004d0e:	4604      	mov	r4, r0
 8004d10:	4608      	mov	r0, r1
 8004d12:	4611      	mov	r1, r2
 8004d14:	2200      	movs	r2, #0
 8004d16:	4d05      	ldr	r5, [pc, #20]	; (8004d2c <_read_r+0x20>)
 8004d18:	602a      	str	r2, [r5, #0]
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	f7fc fa2a 	bl	8001174 <_read>
 8004d20:	1c43      	adds	r3, r0, #1
 8004d22:	d102      	bne.n	8004d2a <_read_r+0x1e>
 8004d24:	682b      	ldr	r3, [r5, #0]
 8004d26:	b103      	cbz	r3, 8004d2a <_read_r+0x1e>
 8004d28:	6023      	str	r3, [r4, #0]
 8004d2a:	bd38      	pop	{r3, r4, r5, pc}
 8004d2c:	200003e8 	.word	0x200003e8

08004d30 <_write_r>:
 8004d30:	b538      	push	{r3, r4, r5, lr}
 8004d32:	4604      	mov	r4, r0
 8004d34:	4608      	mov	r0, r1
 8004d36:	4611      	mov	r1, r2
 8004d38:	2200      	movs	r2, #0
 8004d3a:	4d05      	ldr	r5, [pc, #20]	; (8004d50 <_write_r+0x20>)
 8004d3c:	602a      	str	r2, [r5, #0]
 8004d3e:	461a      	mov	r2, r3
 8004d40:	f7fc fa35 	bl	80011ae <_write>
 8004d44:	1c43      	adds	r3, r0, #1
 8004d46:	d102      	bne.n	8004d4e <_write_r+0x1e>
 8004d48:	682b      	ldr	r3, [r5, #0]
 8004d4a:	b103      	cbz	r3, 8004d4e <_write_r+0x1e>
 8004d4c:	6023      	str	r3, [r4, #0]
 8004d4e:	bd38      	pop	{r3, r4, r5, pc}
 8004d50:	200003e8 	.word	0x200003e8

08004d54 <__errno>:
 8004d54:	4b01      	ldr	r3, [pc, #4]	; (8004d5c <__errno+0x8>)
 8004d56:	6818      	ldr	r0, [r3, #0]
 8004d58:	4770      	bx	lr
 8004d5a:	bf00      	nop
 8004d5c:	2000006c 	.word	0x2000006c

08004d60 <__libc_init_array>:
 8004d60:	b570      	push	{r4, r5, r6, lr}
 8004d62:	2600      	movs	r6, #0
 8004d64:	4d0c      	ldr	r5, [pc, #48]	; (8004d98 <__libc_init_array+0x38>)
 8004d66:	4c0d      	ldr	r4, [pc, #52]	; (8004d9c <__libc_init_array+0x3c>)
 8004d68:	1b64      	subs	r4, r4, r5
 8004d6a:	10a4      	asrs	r4, r4, #2
 8004d6c:	42a6      	cmp	r6, r4
 8004d6e:	d109      	bne.n	8004d84 <__libc_init_array+0x24>
 8004d70:	f003 fbc0 	bl	80084f4 <_init>
 8004d74:	2600      	movs	r6, #0
 8004d76:	4d0a      	ldr	r5, [pc, #40]	; (8004da0 <__libc_init_array+0x40>)
 8004d78:	4c0a      	ldr	r4, [pc, #40]	; (8004da4 <__libc_init_array+0x44>)
 8004d7a:	1b64      	subs	r4, r4, r5
 8004d7c:	10a4      	asrs	r4, r4, #2
 8004d7e:	42a6      	cmp	r6, r4
 8004d80:	d105      	bne.n	8004d8e <__libc_init_array+0x2e>
 8004d82:	bd70      	pop	{r4, r5, r6, pc}
 8004d84:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d88:	4798      	blx	r3
 8004d8a:	3601      	adds	r6, #1
 8004d8c:	e7ee      	b.n	8004d6c <__libc_init_array+0xc>
 8004d8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d92:	4798      	blx	r3
 8004d94:	3601      	adds	r6, #1
 8004d96:	e7f2      	b.n	8004d7e <__libc_init_array+0x1e>
 8004d98:	08008978 	.word	0x08008978
 8004d9c:	08008978 	.word	0x08008978
 8004da0:	08008978 	.word	0x08008978
 8004da4:	0800897c 	.word	0x0800897c

08004da8 <__retarget_lock_acquire_recursive>:
 8004da8:	4770      	bx	lr

08004daa <__retarget_lock_release_recursive>:
 8004daa:	4770      	bx	lr

08004dac <memchr>:
 8004dac:	4603      	mov	r3, r0
 8004dae:	b510      	push	{r4, lr}
 8004db0:	b2c9      	uxtb	r1, r1
 8004db2:	4402      	add	r2, r0
 8004db4:	4293      	cmp	r3, r2
 8004db6:	4618      	mov	r0, r3
 8004db8:	d101      	bne.n	8004dbe <memchr+0x12>
 8004dba:	2000      	movs	r0, #0
 8004dbc:	e003      	b.n	8004dc6 <memchr+0x1a>
 8004dbe:	7804      	ldrb	r4, [r0, #0]
 8004dc0:	3301      	adds	r3, #1
 8004dc2:	428c      	cmp	r4, r1
 8004dc4:	d1f6      	bne.n	8004db4 <memchr+0x8>
 8004dc6:	bd10      	pop	{r4, pc}

08004dc8 <nanf>:
 8004dc8:	4800      	ldr	r0, [pc, #0]	; (8004dcc <nanf+0x4>)
 8004dca:	4770      	bx	lr
 8004dcc:	7fc00000 	.word	0x7fc00000

08004dd0 <quorem>:
 8004dd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dd4:	6903      	ldr	r3, [r0, #16]
 8004dd6:	690c      	ldr	r4, [r1, #16]
 8004dd8:	4607      	mov	r7, r0
 8004dda:	42a3      	cmp	r3, r4
 8004ddc:	db7f      	blt.n	8004ede <quorem+0x10e>
 8004dde:	3c01      	subs	r4, #1
 8004de0:	f100 0514 	add.w	r5, r0, #20
 8004de4:	f101 0814 	add.w	r8, r1, #20
 8004de8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004dec:	9301      	str	r3, [sp, #4]
 8004dee:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004df2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004df6:	3301      	adds	r3, #1
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	fbb2 f6f3 	udiv	r6, r2, r3
 8004dfe:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004e02:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004e06:	d331      	bcc.n	8004e6c <quorem+0x9c>
 8004e08:	f04f 0e00 	mov.w	lr, #0
 8004e0c:	4640      	mov	r0, r8
 8004e0e:	46ac      	mov	ip, r5
 8004e10:	46f2      	mov	sl, lr
 8004e12:	f850 2b04 	ldr.w	r2, [r0], #4
 8004e16:	b293      	uxth	r3, r2
 8004e18:	fb06 e303 	mla	r3, r6, r3, lr
 8004e1c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004e20:	0c1a      	lsrs	r2, r3, #16
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	fb06 220e 	mla	r2, r6, lr, r2
 8004e28:	ebaa 0303 	sub.w	r3, sl, r3
 8004e2c:	f8dc a000 	ldr.w	sl, [ip]
 8004e30:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004e34:	fa1f fa8a 	uxth.w	sl, sl
 8004e38:	4453      	add	r3, sl
 8004e3a:	f8dc a000 	ldr.w	sl, [ip]
 8004e3e:	b292      	uxth	r2, r2
 8004e40:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004e44:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004e4e:	4581      	cmp	r9, r0
 8004e50:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004e54:	f84c 3b04 	str.w	r3, [ip], #4
 8004e58:	d2db      	bcs.n	8004e12 <quorem+0x42>
 8004e5a:	f855 300b 	ldr.w	r3, [r5, fp]
 8004e5e:	b92b      	cbnz	r3, 8004e6c <quorem+0x9c>
 8004e60:	9b01      	ldr	r3, [sp, #4]
 8004e62:	3b04      	subs	r3, #4
 8004e64:	429d      	cmp	r5, r3
 8004e66:	461a      	mov	r2, r3
 8004e68:	d32d      	bcc.n	8004ec6 <quorem+0xf6>
 8004e6a:	613c      	str	r4, [r7, #16]
 8004e6c:	4638      	mov	r0, r7
 8004e6e:	f001 f9df 	bl	8006230 <__mcmp>
 8004e72:	2800      	cmp	r0, #0
 8004e74:	db23      	blt.n	8004ebe <quorem+0xee>
 8004e76:	4629      	mov	r1, r5
 8004e78:	2000      	movs	r0, #0
 8004e7a:	3601      	adds	r6, #1
 8004e7c:	f858 2b04 	ldr.w	r2, [r8], #4
 8004e80:	f8d1 c000 	ldr.w	ip, [r1]
 8004e84:	b293      	uxth	r3, r2
 8004e86:	1ac3      	subs	r3, r0, r3
 8004e88:	0c12      	lsrs	r2, r2, #16
 8004e8a:	fa1f f08c 	uxth.w	r0, ip
 8004e8e:	4403      	add	r3, r0
 8004e90:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8004e94:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004e9e:	45c1      	cmp	r9, r8
 8004ea0:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004ea4:	f841 3b04 	str.w	r3, [r1], #4
 8004ea8:	d2e8      	bcs.n	8004e7c <quorem+0xac>
 8004eaa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004eae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004eb2:	b922      	cbnz	r2, 8004ebe <quorem+0xee>
 8004eb4:	3b04      	subs	r3, #4
 8004eb6:	429d      	cmp	r5, r3
 8004eb8:	461a      	mov	r2, r3
 8004eba:	d30a      	bcc.n	8004ed2 <quorem+0x102>
 8004ebc:	613c      	str	r4, [r7, #16]
 8004ebe:	4630      	mov	r0, r6
 8004ec0:	b003      	add	sp, #12
 8004ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ec6:	6812      	ldr	r2, [r2, #0]
 8004ec8:	3b04      	subs	r3, #4
 8004eca:	2a00      	cmp	r2, #0
 8004ecc:	d1cd      	bne.n	8004e6a <quorem+0x9a>
 8004ece:	3c01      	subs	r4, #1
 8004ed0:	e7c8      	b.n	8004e64 <quorem+0x94>
 8004ed2:	6812      	ldr	r2, [r2, #0]
 8004ed4:	3b04      	subs	r3, #4
 8004ed6:	2a00      	cmp	r2, #0
 8004ed8:	d1f0      	bne.n	8004ebc <quorem+0xec>
 8004eda:	3c01      	subs	r4, #1
 8004edc:	e7eb      	b.n	8004eb6 <quorem+0xe6>
 8004ede:	2000      	movs	r0, #0
 8004ee0:	e7ee      	b.n	8004ec0 <quorem+0xf0>
 8004ee2:	0000      	movs	r0, r0
 8004ee4:	0000      	movs	r0, r0
	...

08004ee8 <_dtoa_r>:
 8004ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eec:	4616      	mov	r6, r2
 8004eee:	461f      	mov	r7, r3
 8004ef0:	69c4      	ldr	r4, [r0, #28]
 8004ef2:	b099      	sub	sp, #100	; 0x64
 8004ef4:	4605      	mov	r5, r0
 8004ef6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004efa:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004efe:	b974      	cbnz	r4, 8004f1e <_dtoa_r+0x36>
 8004f00:	2010      	movs	r0, #16
 8004f02:	f000 fe1d 	bl	8005b40 <malloc>
 8004f06:	4602      	mov	r2, r0
 8004f08:	61e8      	str	r0, [r5, #28]
 8004f0a:	b920      	cbnz	r0, 8004f16 <_dtoa_r+0x2e>
 8004f0c:	21ef      	movs	r1, #239	; 0xef
 8004f0e:	4bac      	ldr	r3, [pc, #688]	; (80051c0 <_dtoa_r+0x2d8>)
 8004f10:	48ac      	ldr	r0, [pc, #688]	; (80051c4 <_dtoa_r+0x2dc>)
 8004f12:	f002 fc55 	bl	80077c0 <__assert_func>
 8004f16:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004f1a:	6004      	str	r4, [r0, #0]
 8004f1c:	60c4      	str	r4, [r0, #12]
 8004f1e:	69eb      	ldr	r3, [r5, #28]
 8004f20:	6819      	ldr	r1, [r3, #0]
 8004f22:	b151      	cbz	r1, 8004f3a <_dtoa_r+0x52>
 8004f24:	685a      	ldr	r2, [r3, #4]
 8004f26:	2301      	movs	r3, #1
 8004f28:	4093      	lsls	r3, r2
 8004f2a:	604a      	str	r2, [r1, #4]
 8004f2c:	608b      	str	r3, [r1, #8]
 8004f2e:	4628      	mov	r0, r5
 8004f30:	f000 fefa 	bl	8005d28 <_Bfree>
 8004f34:	2200      	movs	r2, #0
 8004f36:	69eb      	ldr	r3, [r5, #28]
 8004f38:	601a      	str	r2, [r3, #0]
 8004f3a:	1e3b      	subs	r3, r7, #0
 8004f3c:	bfaf      	iteee	ge
 8004f3e:	2300      	movge	r3, #0
 8004f40:	2201      	movlt	r2, #1
 8004f42:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004f46:	9305      	strlt	r3, [sp, #20]
 8004f48:	bfa8      	it	ge
 8004f4a:	f8c8 3000 	strge.w	r3, [r8]
 8004f4e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004f52:	4b9d      	ldr	r3, [pc, #628]	; (80051c8 <_dtoa_r+0x2e0>)
 8004f54:	bfb8      	it	lt
 8004f56:	f8c8 2000 	strlt.w	r2, [r8]
 8004f5a:	ea33 0309 	bics.w	r3, r3, r9
 8004f5e:	d119      	bne.n	8004f94 <_dtoa_r+0xac>
 8004f60:	f242 730f 	movw	r3, #9999	; 0x270f
 8004f64:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004f66:	6013      	str	r3, [r2, #0]
 8004f68:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004f6c:	4333      	orrs	r3, r6
 8004f6e:	f000 8589 	beq.w	8005a84 <_dtoa_r+0xb9c>
 8004f72:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004f74:	b953      	cbnz	r3, 8004f8c <_dtoa_r+0xa4>
 8004f76:	4b95      	ldr	r3, [pc, #596]	; (80051cc <_dtoa_r+0x2e4>)
 8004f78:	e023      	b.n	8004fc2 <_dtoa_r+0xda>
 8004f7a:	4b95      	ldr	r3, [pc, #596]	; (80051d0 <_dtoa_r+0x2e8>)
 8004f7c:	9303      	str	r3, [sp, #12]
 8004f7e:	3308      	adds	r3, #8
 8004f80:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004f82:	6013      	str	r3, [r2, #0]
 8004f84:	9803      	ldr	r0, [sp, #12]
 8004f86:	b019      	add	sp, #100	; 0x64
 8004f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f8c:	4b8f      	ldr	r3, [pc, #572]	; (80051cc <_dtoa_r+0x2e4>)
 8004f8e:	9303      	str	r3, [sp, #12]
 8004f90:	3303      	adds	r3, #3
 8004f92:	e7f5      	b.n	8004f80 <_dtoa_r+0x98>
 8004f94:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004f98:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004f9c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	f7fb fd00 	bl	80009a8 <__aeabi_dcmpeq>
 8004fa8:	4680      	mov	r8, r0
 8004faa:	b160      	cbz	r0, 8004fc6 <_dtoa_r+0xde>
 8004fac:	2301      	movs	r3, #1
 8004fae:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004fb0:	6013      	str	r3, [r2, #0]
 8004fb2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	f000 8562 	beq.w	8005a7e <_dtoa_r+0xb96>
 8004fba:	4b86      	ldr	r3, [pc, #536]	; (80051d4 <_dtoa_r+0x2ec>)
 8004fbc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004fbe:	6013      	str	r3, [r2, #0]
 8004fc0:	3b01      	subs	r3, #1
 8004fc2:	9303      	str	r3, [sp, #12]
 8004fc4:	e7de      	b.n	8004f84 <_dtoa_r+0x9c>
 8004fc6:	ab16      	add	r3, sp, #88	; 0x58
 8004fc8:	9301      	str	r3, [sp, #4]
 8004fca:	ab17      	add	r3, sp, #92	; 0x5c
 8004fcc:	9300      	str	r3, [sp, #0]
 8004fce:	4628      	mov	r0, r5
 8004fd0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004fd4:	f001 fa3c 	bl	8006450 <__d2b>
 8004fd8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004fdc:	4682      	mov	sl, r0
 8004fde:	2c00      	cmp	r4, #0
 8004fe0:	d07e      	beq.n	80050e0 <_dtoa_r+0x1f8>
 8004fe2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004fe6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004fe8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004fec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ff0:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8004ff4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004ff8:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004ffc:	4619      	mov	r1, r3
 8004ffe:	2200      	movs	r2, #0
 8005000:	4b75      	ldr	r3, [pc, #468]	; (80051d8 <_dtoa_r+0x2f0>)
 8005002:	f7fb f8b1 	bl	8000168 <__aeabi_dsub>
 8005006:	a368      	add	r3, pc, #416	; (adr r3, 80051a8 <_dtoa_r+0x2c0>)
 8005008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800500c:	f7fb fa64 	bl	80004d8 <__aeabi_dmul>
 8005010:	a367      	add	r3, pc, #412	; (adr r3, 80051b0 <_dtoa_r+0x2c8>)
 8005012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005016:	f7fb f8a9 	bl	800016c <__adddf3>
 800501a:	4606      	mov	r6, r0
 800501c:	4620      	mov	r0, r4
 800501e:	460f      	mov	r7, r1
 8005020:	f7fb f9f0 	bl	8000404 <__aeabi_i2d>
 8005024:	a364      	add	r3, pc, #400	; (adr r3, 80051b8 <_dtoa_r+0x2d0>)
 8005026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800502a:	f7fb fa55 	bl	80004d8 <__aeabi_dmul>
 800502e:	4602      	mov	r2, r0
 8005030:	460b      	mov	r3, r1
 8005032:	4630      	mov	r0, r6
 8005034:	4639      	mov	r1, r7
 8005036:	f7fb f899 	bl	800016c <__adddf3>
 800503a:	4606      	mov	r6, r0
 800503c:	460f      	mov	r7, r1
 800503e:	f7fb fcfb 	bl	8000a38 <__aeabi_d2iz>
 8005042:	2200      	movs	r2, #0
 8005044:	4683      	mov	fp, r0
 8005046:	2300      	movs	r3, #0
 8005048:	4630      	mov	r0, r6
 800504a:	4639      	mov	r1, r7
 800504c:	f7fb fcb6 	bl	80009bc <__aeabi_dcmplt>
 8005050:	b148      	cbz	r0, 8005066 <_dtoa_r+0x17e>
 8005052:	4658      	mov	r0, fp
 8005054:	f7fb f9d6 	bl	8000404 <__aeabi_i2d>
 8005058:	4632      	mov	r2, r6
 800505a:	463b      	mov	r3, r7
 800505c:	f7fb fca4 	bl	80009a8 <__aeabi_dcmpeq>
 8005060:	b908      	cbnz	r0, 8005066 <_dtoa_r+0x17e>
 8005062:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005066:	f1bb 0f16 	cmp.w	fp, #22
 800506a:	d857      	bhi.n	800511c <_dtoa_r+0x234>
 800506c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005070:	4b5a      	ldr	r3, [pc, #360]	; (80051dc <_dtoa_r+0x2f4>)
 8005072:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800507a:	f7fb fc9f 	bl	80009bc <__aeabi_dcmplt>
 800507e:	2800      	cmp	r0, #0
 8005080:	d04e      	beq.n	8005120 <_dtoa_r+0x238>
 8005082:	2300      	movs	r3, #0
 8005084:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005088:	930f      	str	r3, [sp, #60]	; 0x3c
 800508a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800508c:	1b1b      	subs	r3, r3, r4
 800508e:	1e5a      	subs	r2, r3, #1
 8005090:	bf46      	itte	mi
 8005092:	f1c3 0901 	rsbmi	r9, r3, #1
 8005096:	2300      	movmi	r3, #0
 8005098:	f04f 0900 	movpl.w	r9, #0
 800509c:	9209      	str	r2, [sp, #36]	; 0x24
 800509e:	bf48      	it	mi
 80050a0:	9309      	strmi	r3, [sp, #36]	; 0x24
 80050a2:	f1bb 0f00 	cmp.w	fp, #0
 80050a6:	db3d      	blt.n	8005124 <_dtoa_r+0x23c>
 80050a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050aa:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80050ae:	445b      	add	r3, fp
 80050b0:	9309      	str	r3, [sp, #36]	; 0x24
 80050b2:	2300      	movs	r3, #0
 80050b4:	930a      	str	r3, [sp, #40]	; 0x28
 80050b6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80050b8:	2b09      	cmp	r3, #9
 80050ba:	d867      	bhi.n	800518c <_dtoa_r+0x2a4>
 80050bc:	2b05      	cmp	r3, #5
 80050be:	bfc4      	itt	gt
 80050c0:	3b04      	subgt	r3, #4
 80050c2:	9322      	strgt	r3, [sp, #136]	; 0x88
 80050c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80050c6:	bfc8      	it	gt
 80050c8:	2400      	movgt	r4, #0
 80050ca:	f1a3 0302 	sub.w	r3, r3, #2
 80050ce:	bfd8      	it	le
 80050d0:	2401      	movle	r4, #1
 80050d2:	2b03      	cmp	r3, #3
 80050d4:	f200 8086 	bhi.w	80051e4 <_dtoa_r+0x2fc>
 80050d8:	e8df f003 	tbb	[pc, r3]
 80050dc:	5637392c 	.word	0x5637392c
 80050e0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80050e4:	441c      	add	r4, r3
 80050e6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80050ea:	2b20      	cmp	r3, #32
 80050ec:	bfc1      	itttt	gt
 80050ee:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80050f2:	fa09 f903 	lslgt.w	r9, r9, r3
 80050f6:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 80050fa:	fa26 f303 	lsrgt.w	r3, r6, r3
 80050fe:	bfd6      	itet	le
 8005100:	f1c3 0320 	rsble	r3, r3, #32
 8005104:	ea49 0003 	orrgt.w	r0, r9, r3
 8005108:	fa06 f003 	lslle.w	r0, r6, r3
 800510c:	f7fb f96a 	bl	80003e4 <__aeabi_ui2d>
 8005110:	2201      	movs	r2, #1
 8005112:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005116:	3c01      	subs	r4, #1
 8005118:	9213      	str	r2, [sp, #76]	; 0x4c
 800511a:	e76f      	b.n	8004ffc <_dtoa_r+0x114>
 800511c:	2301      	movs	r3, #1
 800511e:	e7b3      	b.n	8005088 <_dtoa_r+0x1a0>
 8005120:	900f      	str	r0, [sp, #60]	; 0x3c
 8005122:	e7b2      	b.n	800508a <_dtoa_r+0x1a2>
 8005124:	f1cb 0300 	rsb	r3, fp, #0
 8005128:	930a      	str	r3, [sp, #40]	; 0x28
 800512a:	2300      	movs	r3, #0
 800512c:	eba9 090b 	sub.w	r9, r9, fp
 8005130:	930e      	str	r3, [sp, #56]	; 0x38
 8005132:	e7c0      	b.n	80050b6 <_dtoa_r+0x1ce>
 8005134:	2300      	movs	r3, #0
 8005136:	930b      	str	r3, [sp, #44]	; 0x2c
 8005138:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800513a:	2b00      	cmp	r3, #0
 800513c:	dc55      	bgt.n	80051ea <_dtoa_r+0x302>
 800513e:	2301      	movs	r3, #1
 8005140:	461a      	mov	r2, r3
 8005142:	9306      	str	r3, [sp, #24]
 8005144:	9308      	str	r3, [sp, #32]
 8005146:	9223      	str	r2, [sp, #140]	; 0x8c
 8005148:	e00b      	b.n	8005162 <_dtoa_r+0x27a>
 800514a:	2301      	movs	r3, #1
 800514c:	e7f3      	b.n	8005136 <_dtoa_r+0x24e>
 800514e:	2300      	movs	r3, #0
 8005150:	930b      	str	r3, [sp, #44]	; 0x2c
 8005152:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005154:	445b      	add	r3, fp
 8005156:	9306      	str	r3, [sp, #24]
 8005158:	3301      	adds	r3, #1
 800515a:	2b01      	cmp	r3, #1
 800515c:	9308      	str	r3, [sp, #32]
 800515e:	bfb8      	it	lt
 8005160:	2301      	movlt	r3, #1
 8005162:	2100      	movs	r1, #0
 8005164:	2204      	movs	r2, #4
 8005166:	69e8      	ldr	r0, [r5, #28]
 8005168:	f102 0614 	add.w	r6, r2, #20
 800516c:	429e      	cmp	r6, r3
 800516e:	d940      	bls.n	80051f2 <_dtoa_r+0x30a>
 8005170:	6041      	str	r1, [r0, #4]
 8005172:	4628      	mov	r0, r5
 8005174:	f000 fd98 	bl	8005ca8 <_Balloc>
 8005178:	9003      	str	r0, [sp, #12]
 800517a:	2800      	cmp	r0, #0
 800517c:	d13c      	bne.n	80051f8 <_dtoa_r+0x310>
 800517e:	4602      	mov	r2, r0
 8005180:	f240 11af 	movw	r1, #431	; 0x1af
 8005184:	4b16      	ldr	r3, [pc, #88]	; (80051e0 <_dtoa_r+0x2f8>)
 8005186:	e6c3      	b.n	8004f10 <_dtoa_r+0x28>
 8005188:	2301      	movs	r3, #1
 800518a:	e7e1      	b.n	8005150 <_dtoa_r+0x268>
 800518c:	2401      	movs	r4, #1
 800518e:	2300      	movs	r3, #0
 8005190:	940b      	str	r4, [sp, #44]	; 0x2c
 8005192:	9322      	str	r3, [sp, #136]	; 0x88
 8005194:	f04f 33ff 	mov.w	r3, #4294967295
 8005198:	2200      	movs	r2, #0
 800519a:	9306      	str	r3, [sp, #24]
 800519c:	9308      	str	r3, [sp, #32]
 800519e:	2312      	movs	r3, #18
 80051a0:	e7d1      	b.n	8005146 <_dtoa_r+0x25e>
 80051a2:	bf00      	nop
 80051a4:	f3af 8000 	nop.w
 80051a8:	636f4361 	.word	0x636f4361
 80051ac:	3fd287a7 	.word	0x3fd287a7
 80051b0:	8b60c8b3 	.word	0x8b60c8b3
 80051b4:	3fc68a28 	.word	0x3fc68a28
 80051b8:	509f79fb 	.word	0x509f79fb
 80051bc:	3fd34413 	.word	0x3fd34413
 80051c0:	08008594 	.word	0x08008594
 80051c4:	080085ab 	.word	0x080085ab
 80051c8:	7ff00000 	.word	0x7ff00000
 80051cc:	08008590 	.word	0x08008590
 80051d0:	08008587 	.word	0x08008587
 80051d4:	0800855f 	.word	0x0800855f
 80051d8:	3ff80000 	.word	0x3ff80000
 80051dc:	08008698 	.word	0x08008698
 80051e0:	08008603 	.word	0x08008603
 80051e4:	2301      	movs	r3, #1
 80051e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80051e8:	e7d4      	b.n	8005194 <_dtoa_r+0x2ac>
 80051ea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80051ec:	9306      	str	r3, [sp, #24]
 80051ee:	9308      	str	r3, [sp, #32]
 80051f0:	e7b7      	b.n	8005162 <_dtoa_r+0x27a>
 80051f2:	3101      	adds	r1, #1
 80051f4:	0052      	lsls	r2, r2, #1
 80051f6:	e7b7      	b.n	8005168 <_dtoa_r+0x280>
 80051f8:	69eb      	ldr	r3, [r5, #28]
 80051fa:	9a03      	ldr	r2, [sp, #12]
 80051fc:	601a      	str	r2, [r3, #0]
 80051fe:	9b08      	ldr	r3, [sp, #32]
 8005200:	2b0e      	cmp	r3, #14
 8005202:	f200 80a8 	bhi.w	8005356 <_dtoa_r+0x46e>
 8005206:	2c00      	cmp	r4, #0
 8005208:	f000 80a5 	beq.w	8005356 <_dtoa_r+0x46e>
 800520c:	f1bb 0f00 	cmp.w	fp, #0
 8005210:	dd34      	ble.n	800527c <_dtoa_r+0x394>
 8005212:	4b9a      	ldr	r3, [pc, #616]	; (800547c <_dtoa_r+0x594>)
 8005214:	f00b 020f 	and.w	r2, fp, #15
 8005218:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800521c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005220:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005224:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005228:	ea4f 142b 	mov.w	r4, fp, asr #4
 800522c:	d016      	beq.n	800525c <_dtoa_r+0x374>
 800522e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005232:	4b93      	ldr	r3, [pc, #588]	; (8005480 <_dtoa_r+0x598>)
 8005234:	2703      	movs	r7, #3
 8005236:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800523a:	f7fb fa77 	bl	800072c <__aeabi_ddiv>
 800523e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005242:	f004 040f 	and.w	r4, r4, #15
 8005246:	4e8e      	ldr	r6, [pc, #568]	; (8005480 <_dtoa_r+0x598>)
 8005248:	b954      	cbnz	r4, 8005260 <_dtoa_r+0x378>
 800524a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800524e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005252:	f7fb fa6b 	bl	800072c <__aeabi_ddiv>
 8005256:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800525a:	e029      	b.n	80052b0 <_dtoa_r+0x3c8>
 800525c:	2702      	movs	r7, #2
 800525e:	e7f2      	b.n	8005246 <_dtoa_r+0x35e>
 8005260:	07e1      	lsls	r1, r4, #31
 8005262:	d508      	bpl.n	8005276 <_dtoa_r+0x38e>
 8005264:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005268:	e9d6 2300 	ldrd	r2, r3, [r6]
 800526c:	f7fb f934 	bl	80004d8 <__aeabi_dmul>
 8005270:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005274:	3701      	adds	r7, #1
 8005276:	1064      	asrs	r4, r4, #1
 8005278:	3608      	adds	r6, #8
 800527a:	e7e5      	b.n	8005248 <_dtoa_r+0x360>
 800527c:	f000 80a5 	beq.w	80053ca <_dtoa_r+0x4e2>
 8005280:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005284:	f1cb 0400 	rsb	r4, fp, #0
 8005288:	4b7c      	ldr	r3, [pc, #496]	; (800547c <_dtoa_r+0x594>)
 800528a:	f004 020f 	and.w	r2, r4, #15
 800528e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005296:	f7fb f91f 	bl	80004d8 <__aeabi_dmul>
 800529a:	2702      	movs	r7, #2
 800529c:	2300      	movs	r3, #0
 800529e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80052a2:	4e77      	ldr	r6, [pc, #476]	; (8005480 <_dtoa_r+0x598>)
 80052a4:	1124      	asrs	r4, r4, #4
 80052a6:	2c00      	cmp	r4, #0
 80052a8:	f040 8084 	bne.w	80053b4 <_dtoa_r+0x4cc>
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d1d2      	bne.n	8005256 <_dtoa_r+0x36e>
 80052b0:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80052b4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80052b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	f000 8087 	beq.w	80053ce <_dtoa_r+0x4e6>
 80052c0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80052c4:	2200      	movs	r2, #0
 80052c6:	4b6f      	ldr	r3, [pc, #444]	; (8005484 <_dtoa_r+0x59c>)
 80052c8:	f7fb fb78 	bl	80009bc <__aeabi_dcmplt>
 80052cc:	2800      	cmp	r0, #0
 80052ce:	d07e      	beq.n	80053ce <_dtoa_r+0x4e6>
 80052d0:	9b08      	ldr	r3, [sp, #32]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d07b      	beq.n	80053ce <_dtoa_r+0x4e6>
 80052d6:	9b06      	ldr	r3, [sp, #24]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	dd38      	ble.n	800534e <_dtoa_r+0x466>
 80052dc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80052e0:	2200      	movs	r2, #0
 80052e2:	4b69      	ldr	r3, [pc, #420]	; (8005488 <_dtoa_r+0x5a0>)
 80052e4:	f7fb f8f8 	bl	80004d8 <__aeabi_dmul>
 80052e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80052ec:	9c06      	ldr	r4, [sp, #24]
 80052ee:	f10b 38ff 	add.w	r8, fp, #4294967295
 80052f2:	3701      	adds	r7, #1
 80052f4:	4638      	mov	r0, r7
 80052f6:	f7fb f885 	bl	8000404 <__aeabi_i2d>
 80052fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80052fe:	f7fb f8eb 	bl	80004d8 <__aeabi_dmul>
 8005302:	2200      	movs	r2, #0
 8005304:	4b61      	ldr	r3, [pc, #388]	; (800548c <_dtoa_r+0x5a4>)
 8005306:	f7fa ff31 	bl	800016c <__adddf3>
 800530a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800530e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005312:	9611      	str	r6, [sp, #68]	; 0x44
 8005314:	2c00      	cmp	r4, #0
 8005316:	d15d      	bne.n	80053d4 <_dtoa_r+0x4ec>
 8005318:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800531c:	2200      	movs	r2, #0
 800531e:	4b5c      	ldr	r3, [pc, #368]	; (8005490 <_dtoa_r+0x5a8>)
 8005320:	f7fa ff22 	bl	8000168 <__aeabi_dsub>
 8005324:	4602      	mov	r2, r0
 8005326:	460b      	mov	r3, r1
 8005328:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800532c:	4633      	mov	r3, r6
 800532e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005330:	f7fb fb62 	bl	80009f8 <__aeabi_dcmpgt>
 8005334:	2800      	cmp	r0, #0
 8005336:	f040 8295 	bne.w	8005864 <_dtoa_r+0x97c>
 800533a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800533e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005340:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005344:	f7fb fb3a 	bl	80009bc <__aeabi_dcmplt>
 8005348:	2800      	cmp	r0, #0
 800534a:	f040 8289 	bne.w	8005860 <_dtoa_r+0x978>
 800534e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005352:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005356:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005358:	2b00      	cmp	r3, #0
 800535a:	f2c0 8151 	blt.w	8005600 <_dtoa_r+0x718>
 800535e:	f1bb 0f0e 	cmp.w	fp, #14
 8005362:	f300 814d 	bgt.w	8005600 <_dtoa_r+0x718>
 8005366:	4b45      	ldr	r3, [pc, #276]	; (800547c <_dtoa_r+0x594>)
 8005368:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800536c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005370:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005374:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005376:	2b00      	cmp	r3, #0
 8005378:	f280 80da 	bge.w	8005530 <_dtoa_r+0x648>
 800537c:	9b08      	ldr	r3, [sp, #32]
 800537e:	2b00      	cmp	r3, #0
 8005380:	f300 80d6 	bgt.w	8005530 <_dtoa_r+0x648>
 8005384:	f040 826b 	bne.w	800585e <_dtoa_r+0x976>
 8005388:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800538c:	2200      	movs	r2, #0
 800538e:	4b40      	ldr	r3, [pc, #256]	; (8005490 <_dtoa_r+0x5a8>)
 8005390:	f7fb f8a2 	bl	80004d8 <__aeabi_dmul>
 8005394:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005398:	f7fb fb24 	bl	80009e4 <__aeabi_dcmpge>
 800539c:	9c08      	ldr	r4, [sp, #32]
 800539e:	4626      	mov	r6, r4
 80053a0:	2800      	cmp	r0, #0
 80053a2:	f040 8241 	bne.w	8005828 <_dtoa_r+0x940>
 80053a6:	2331      	movs	r3, #49	; 0x31
 80053a8:	9f03      	ldr	r7, [sp, #12]
 80053aa:	f10b 0b01 	add.w	fp, fp, #1
 80053ae:	f807 3b01 	strb.w	r3, [r7], #1
 80053b2:	e23d      	b.n	8005830 <_dtoa_r+0x948>
 80053b4:	07e2      	lsls	r2, r4, #31
 80053b6:	d505      	bpl.n	80053c4 <_dtoa_r+0x4dc>
 80053b8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80053bc:	f7fb f88c 	bl	80004d8 <__aeabi_dmul>
 80053c0:	2301      	movs	r3, #1
 80053c2:	3701      	adds	r7, #1
 80053c4:	1064      	asrs	r4, r4, #1
 80053c6:	3608      	adds	r6, #8
 80053c8:	e76d      	b.n	80052a6 <_dtoa_r+0x3be>
 80053ca:	2702      	movs	r7, #2
 80053cc:	e770      	b.n	80052b0 <_dtoa_r+0x3c8>
 80053ce:	46d8      	mov	r8, fp
 80053d0:	9c08      	ldr	r4, [sp, #32]
 80053d2:	e78f      	b.n	80052f4 <_dtoa_r+0x40c>
 80053d4:	9903      	ldr	r1, [sp, #12]
 80053d6:	4b29      	ldr	r3, [pc, #164]	; (800547c <_dtoa_r+0x594>)
 80053d8:	4421      	add	r1, r4
 80053da:	9112      	str	r1, [sp, #72]	; 0x48
 80053dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80053de:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80053e2:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80053e6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80053ea:	2900      	cmp	r1, #0
 80053ec:	d054      	beq.n	8005498 <_dtoa_r+0x5b0>
 80053ee:	2000      	movs	r0, #0
 80053f0:	4928      	ldr	r1, [pc, #160]	; (8005494 <_dtoa_r+0x5ac>)
 80053f2:	f7fb f99b 	bl	800072c <__aeabi_ddiv>
 80053f6:	463b      	mov	r3, r7
 80053f8:	4632      	mov	r2, r6
 80053fa:	f7fa feb5 	bl	8000168 <__aeabi_dsub>
 80053fe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005402:	9f03      	ldr	r7, [sp, #12]
 8005404:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005408:	f7fb fb16 	bl	8000a38 <__aeabi_d2iz>
 800540c:	4604      	mov	r4, r0
 800540e:	f7fa fff9 	bl	8000404 <__aeabi_i2d>
 8005412:	4602      	mov	r2, r0
 8005414:	460b      	mov	r3, r1
 8005416:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800541a:	f7fa fea5 	bl	8000168 <__aeabi_dsub>
 800541e:	4602      	mov	r2, r0
 8005420:	460b      	mov	r3, r1
 8005422:	3430      	adds	r4, #48	; 0x30
 8005424:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005428:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800542c:	f807 4b01 	strb.w	r4, [r7], #1
 8005430:	f7fb fac4 	bl	80009bc <__aeabi_dcmplt>
 8005434:	2800      	cmp	r0, #0
 8005436:	d173      	bne.n	8005520 <_dtoa_r+0x638>
 8005438:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800543c:	2000      	movs	r0, #0
 800543e:	4911      	ldr	r1, [pc, #68]	; (8005484 <_dtoa_r+0x59c>)
 8005440:	f7fa fe92 	bl	8000168 <__aeabi_dsub>
 8005444:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005448:	f7fb fab8 	bl	80009bc <__aeabi_dcmplt>
 800544c:	2800      	cmp	r0, #0
 800544e:	f040 80b6 	bne.w	80055be <_dtoa_r+0x6d6>
 8005452:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005454:	429f      	cmp	r7, r3
 8005456:	f43f af7a 	beq.w	800534e <_dtoa_r+0x466>
 800545a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800545e:	2200      	movs	r2, #0
 8005460:	4b09      	ldr	r3, [pc, #36]	; (8005488 <_dtoa_r+0x5a0>)
 8005462:	f7fb f839 	bl	80004d8 <__aeabi_dmul>
 8005466:	2200      	movs	r2, #0
 8005468:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800546c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005470:	4b05      	ldr	r3, [pc, #20]	; (8005488 <_dtoa_r+0x5a0>)
 8005472:	f7fb f831 	bl	80004d8 <__aeabi_dmul>
 8005476:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800547a:	e7c3      	b.n	8005404 <_dtoa_r+0x51c>
 800547c:	08008698 	.word	0x08008698
 8005480:	08008670 	.word	0x08008670
 8005484:	3ff00000 	.word	0x3ff00000
 8005488:	40240000 	.word	0x40240000
 800548c:	401c0000 	.word	0x401c0000
 8005490:	40140000 	.word	0x40140000
 8005494:	3fe00000 	.word	0x3fe00000
 8005498:	4630      	mov	r0, r6
 800549a:	4639      	mov	r1, r7
 800549c:	f7fb f81c 	bl	80004d8 <__aeabi_dmul>
 80054a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80054a2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80054a6:	9c03      	ldr	r4, [sp, #12]
 80054a8:	9314      	str	r3, [sp, #80]	; 0x50
 80054aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80054ae:	f7fb fac3 	bl	8000a38 <__aeabi_d2iz>
 80054b2:	9015      	str	r0, [sp, #84]	; 0x54
 80054b4:	f7fa ffa6 	bl	8000404 <__aeabi_i2d>
 80054b8:	4602      	mov	r2, r0
 80054ba:	460b      	mov	r3, r1
 80054bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80054c0:	f7fa fe52 	bl	8000168 <__aeabi_dsub>
 80054c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80054c6:	4606      	mov	r6, r0
 80054c8:	3330      	adds	r3, #48	; 0x30
 80054ca:	f804 3b01 	strb.w	r3, [r4], #1
 80054ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80054d0:	460f      	mov	r7, r1
 80054d2:	429c      	cmp	r4, r3
 80054d4:	f04f 0200 	mov.w	r2, #0
 80054d8:	d124      	bne.n	8005524 <_dtoa_r+0x63c>
 80054da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80054de:	4baf      	ldr	r3, [pc, #700]	; (800579c <_dtoa_r+0x8b4>)
 80054e0:	f7fa fe44 	bl	800016c <__adddf3>
 80054e4:	4602      	mov	r2, r0
 80054e6:	460b      	mov	r3, r1
 80054e8:	4630      	mov	r0, r6
 80054ea:	4639      	mov	r1, r7
 80054ec:	f7fb fa84 	bl	80009f8 <__aeabi_dcmpgt>
 80054f0:	2800      	cmp	r0, #0
 80054f2:	d163      	bne.n	80055bc <_dtoa_r+0x6d4>
 80054f4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80054f8:	2000      	movs	r0, #0
 80054fa:	49a8      	ldr	r1, [pc, #672]	; (800579c <_dtoa_r+0x8b4>)
 80054fc:	f7fa fe34 	bl	8000168 <__aeabi_dsub>
 8005500:	4602      	mov	r2, r0
 8005502:	460b      	mov	r3, r1
 8005504:	4630      	mov	r0, r6
 8005506:	4639      	mov	r1, r7
 8005508:	f7fb fa58 	bl	80009bc <__aeabi_dcmplt>
 800550c:	2800      	cmp	r0, #0
 800550e:	f43f af1e 	beq.w	800534e <_dtoa_r+0x466>
 8005512:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005514:	1e7b      	subs	r3, r7, #1
 8005516:	9314      	str	r3, [sp, #80]	; 0x50
 8005518:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800551c:	2b30      	cmp	r3, #48	; 0x30
 800551e:	d0f8      	beq.n	8005512 <_dtoa_r+0x62a>
 8005520:	46c3      	mov	fp, r8
 8005522:	e03b      	b.n	800559c <_dtoa_r+0x6b4>
 8005524:	4b9e      	ldr	r3, [pc, #632]	; (80057a0 <_dtoa_r+0x8b8>)
 8005526:	f7fa ffd7 	bl	80004d8 <__aeabi_dmul>
 800552a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800552e:	e7bc      	b.n	80054aa <_dtoa_r+0x5c2>
 8005530:	9f03      	ldr	r7, [sp, #12]
 8005532:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005536:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800553a:	4640      	mov	r0, r8
 800553c:	4649      	mov	r1, r9
 800553e:	f7fb f8f5 	bl	800072c <__aeabi_ddiv>
 8005542:	f7fb fa79 	bl	8000a38 <__aeabi_d2iz>
 8005546:	4604      	mov	r4, r0
 8005548:	f7fa ff5c 	bl	8000404 <__aeabi_i2d>
 800554c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005550:	f7fa ffc2 	bl	80004d8 <__aeabi_dmul>
 8005554:	4602      	mov	r2, r0
 8005556:	460b      	mov	r3, r1
 8005558:	4640      	mov	r0, r8
 800555a:	4649      	mov	r1, r9
 800555c:	f7fa fe04 	bl	8000168 <__aeabi_dsub>
 8005560:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005564:	f807 6b01 	strb.w	r6, [r7], #1
 8005568:	9e03      	ldr	r6, [sp, #12]
 800556a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800556e:	1bbe      	subs	r6, r7, r6
 8005570:	45b4      	cmp	ip, r6
 8005572:	4602      	mov	r2, r0
 8005574:	460b      	mov	r3, r1
 8005576:	d136      	bne.n	80055e6 <_dtoa_r+0x6fe>
 8005578:	f7fa fdf8 	bl	800016c <__adddf3>
 800557c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005580:	4680      	mov	r8, r0
 8005582:	4689      	mov	r9, r1
 8005584:	f7fb fa38 	bl	80009f8 <__aeabi_dcmpgt>
 8005588:	bb58      	cbnz	r0, 80055e2 <_dtoa_r+0x6fa>
 800558a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800558e:	4640      	mov	r0, r8
 8005590:	4649      	mov	r1, r9
 8005592:	f7fb fa09 	bl	80009a8 <__aeabi_dcmpeq>
 8005596:	b108      	cbz	r0, 800559c <_dtoa_r+0x6b4>
 8005598:	07e3      	lsls	r3, r4, #31
 800559a:	d422      	bmi.n	80055e2 <_dtoa_r+0x6fa>
 800559c:	4651      	mov	r1, sl
 800559e:	4628      	mov	r0, r5
 80055a0:	f000 fbc2 	bl	8005d28 <_Bfree>
 80055a4:	2300      	movs	r3, #0
 80055a6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80055a8:	703b      	strb	r3, [r7, #0]
 80055aa:	f10b 0301 	add.w	r3, fp, #1
 80055ae:	6013      	str	r3, [r2, #0]
 80055b0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	f43f ace6 	beq.w	8004f84 <_dtoa_r+0x9c>
 80055b8:	601f      	str	r7, [r3, #0]
 80055ba:	e4e3      	b.n	8004f84 <_dtoa_r+0x9c>
 80055bc:	4627      	mov	r7, r4
 80055be:	463b      	mov	r3, r7
 80055c0:	461f      	mov	r7, r3
 80055c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80055c6:	2a39      	cmp	r2, #57	; 0x39
 80055c8:	d107      	bne.n	80055da <_dtoa_r+0x6f2>
 80055ca:	9a03      	ldr	r2, [sp, #12]
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d1f7      	bne.n	80055c0 <_dtoa_r+0x6d8>
 80055d0:	2230      	movs	r2, #48	; 0x30
 80055d2:	9903      	ldr	r1, [sp, #12]
 80055d4:	f108 0801 	add.w	r8, r8, #1
 80055d8:	700a      	strb	r2, [r1, #0]
 80055da:	781a      	ldrb	r2, [r3, #0]
 80055dc:	3201      	adds	r2, #1
 80055de:	701a      	strb	r2, [r3, #0]
 80055e0:	e79e      	b.n	8005520 <_dtoa_r+0x638>
 80055e2:	46d8      	mov	r8, fp
 80055e4:	e7eb      	b.n	80055be <_dtoa_r+0x6d6>
 80055e6:	2200      	movs	r2, #0
 80055e8:	4b6d      	ldr	r3, [pc, #436]	; (80057a0 <_dtoa_r+0x8b8>)
 80055ea:	f7fa ff75 	bl	80004d8 <__aeabi_dmul>
 80055ee:	2200      	movs	r2, #0
 80055f0:	2300      	movs	r3, #0
 80055f2:	4680      	mov	r8, r0
 80055f4:	4689      	mov	r9, r1
 80055f6:	f7fb f9d7 	bl	80009a8 <__aeabi_dcmpeq>
 80055fa:	2800      	cmp	r0, #0
 80055fc:	d09b      	beq.n	8005536 <_dtoa_r+0x64e>
 80055fe:	e7cd      	b.n	800559c <_dtoa_r+0x6b4>
 8005600:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005602:	2a00      	cmp	r2, #0
 8005604:	f000 80c4 	beq.w	8005790 <_dtoa_r+0x8a8>
 8005608:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800560a:	2a01      	cmp	r2, #1
 800560c:	f300 80a8 	bgt.w	8005760 <_dtoa_r+0x878>
 8005610:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005612:	2a00      	cmp	r2, #0
 8005614:	f000 80a0 	beq.w	8005758 <_dtoa_r+0x870>
 8005618:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800561c:	464f      	mov	r7, r9
 800561e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005620:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005622:	2101      	movs	r1, #1
 8005624:	441a      	add	r2, r3
 8005626:	4628      	mov	r0, r5
 8005628:	4499      	add	r9, r3
 800562a:	9209      	str	r2, [sp, #36]	; 0x24
 800562c:	f000 fc7c 	bl	8005f28 <__i2b>
 8005630:	4606      	mov	r6, r0
 8005632:	b15f      	cbz	r7, 800564c <_dtoa_r+0x764>
 8005634:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005636:	2b00      	cmp	r3, #0
 8005638:	dd08      	ble.n	800564c <_dtoa_r+0x764>
 800563a:	42bb      	cmp	r3, r7
 800563c:	bfa8      	it	ge
 800563e:	463b      	movge	r3, r7
 8005640:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005642:	eba9 0903 	sub.w	r9, r9, r3
 8005646:	1aff      	subs	r7, r7, r3
 8005648:	1ad3      	subs	r3, r2, r3
 800564a:	9309      	str	r3, [sp, #36]	; 0x24
 800564c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800564e:	b1f3      	cbz	r3, 800568e <_dtoa_r+0x7a6>
 8005650:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005652:	2b00      	cmp	r3, #0
 8005654:	f000 80a0 	beq.w	8005798 <_dtoa_r+0x8b0>
 8005658:	2c00      	cmp	r4, #0
 800565a:	dd10      	ble.n	800567e <_dtoa_r+0x796>
 800565c:	4631      	mov	r1, r6
 800565e:	4622      	mov	r2, r4
 8005660:	4628      	mov	r0, r5
 8005662:	f000 fd1f 	bl	80060a4 <__pow5mult>
 8005666:	4652      	mov	r2, sl
 8005668:	4601      	mov	r1, r0
 800566a:	4606      	mov	r6, r0
 800566c:	4628      	mov	r0, r5
 800566e:	f000 fc71 	bl	8005f54 <__multiply>
 8005672:	4680      	mov	r8, r0
 8005674:	4651      	mov	r1, sl
 8005676:	4628      	mov	r0, r5
 8005678:	f000 fb56 	bl	8005d28 <_Bfree>
 800567c:	46c2      	mov	sl, r8
 800567e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005680:	1b1a      	subs	r2, r3, r4
 8005682:	d004      	beq.n	800568e <_dtoa_r+0x7a6>
 8005684:	4651      	mov	r1, sl
 8005686:	4628      	mov	r0, r5
 8005688:	f000 fd0c 	bl	80060a4 <__pow5mult>
 800568c:	4682      	mov	sl, r0
 800568e:	2101      	movs	r1, #1
 8005690:	4628      	mov	r0, r5
 8005692:	f000 fc49 	bl	8005f28 <__i2b>
 8005696:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005698:	4604      	mov	r4, r0
 800569a:	2b00      	cmp	r3, #0
 800569c:	f340 8082 	ble.w	80057a4 <_dtoa_r+0x8bc>
 80056a0:	461a      	mov	r2, r3
 80056a2:	4601      	mov	r1, r0
 80056a4:	4628      	mov	r0, r5
 80056a6:	f000 fcfd 	bl	80060a4 <__pow5mult>
 80056aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80056ac:	4604      	mov	r4, r0
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	dd7b      	ble.n	80057aa <_dtoa_r+0x8c2>
 80056b2:	f04f 0800 	mov.w	r8, #0
 80056b6:	6923      	ldr	r3, [r4, #16]
 80056b8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80056bc:	6918      	ldr	r0, [r3, #16]
 80056be:	f000 fbe5 	bl	8005e8c <__hi0bits>
 80056c2:	f1c0 0020 	rsb	r0, r0, #32
 80056c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056c8:	4418      	add	r0, r3
 80056ca:	f010 001f 	ands.w	r0, r0, #31
 80056ce:	f000 8092 	beq.w	80057f6 <_dtoa_r+0x90e>
 80056d2:	f1c0 0320 	rsb	r3, r0, #32
 80056d6:	2b04      	cmp	r3, #4
 80056d8:	f340 8085 	ble.w	80057e6 <_dtoa_r+0x8fe>
 80056dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056de:	f1c0 001c 	rsb	r0, r0, #28
 80056e2:	4403      	add	r3, r0
 80056e4:	4481      	add	r9, r0
 80056e6:	4407      	add	r7, r0
 80056e8:	9309      	str	r3, [sp, #36]	; 0x24
 80056ea:	f1b9 0f00 	cmp.w	r9, #0
 80056ee:	dd05      	ble.n	80056fc <_dtoa_r+0x814>
 80056f0:	4651      	mov	r1, sl
 80056f2:	464a      	mov	r2, r9
 80056f4:	4628      	mov	r0, r5
 80056f6:	f000 fd2f 	bl	8006158 <__lshift>
 80056fa:	4682      	mov	sl, r0
 80056fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056fe:	2b00      	cmp	r3, #0
 8005700:	dd05      	ble.n	800570e <_dtoa_r+0x826>
 8005702:	4621      	mov	r1, r4
 8005704:	461a      	mov	r2, r3
 8005706:	4628      	mov	r0, r5
 8005708:	f000 fd26 	bl	8006158 <__lshift>
 800570c:	4604      	mov	r4, r0
 800570e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005710:	2b00      	cmp	r3, #0
 8005712:	d072      	beq.n	80057fa <_dtoa_r+0x912>
 8005714:	4621      	mov	r1, r4
 8005716:	4650      	mov	r0, sl
 8005718:	f000 fd8a 	bl	8006230 <__mcmp>
 800571c:	2800      	cmp	r0, #0
 800571e:	da6c      	bge.n	80057fa <_dtoa_r+0x912>
 8005720:	2300      	movs	r3, #0
 8005722:	4651      	mov	r1, sl
 8005724:	220a      	movs	r2, #10
 8005726:	4628      	mov	r0, r5
 8005728:	f000 fb20 	bl	8005d6c <__multadd>
 800572c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800572e:	4682      	mov	sl, r0
 8005730:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005734:	2b00      	cmp	r3, #0
 8005736:	f000 81ac 	beq.w	8005a92 <_dtoa_r+0xbaa>
 800573a:	2300      	movs	r3, #0
 800573c:	4631      	mov	r1, r6
 800573e:	220a      	movs	r2, #10
 8005740:	4628      	mov	r0, r5
 8005742:	f000 fb13 	bl	8005d6c <__multadd>
 8005746:	9b06      	ldr	r3, [sp, #24]
 8005748:	4606      	mov	r6, r0
 800574a:	2b00      	cmp	r3, #0
 800574c:	f300 8093 	bgt.w	8005876 <_dtoa_r+0x98e>
 8005750:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005752:	2b02      	cmp	r3, #2
 8005754:	dc59      	bgt.n	800580a <_dtoa_r+0x922>
 8005756:	e08e      	b.n	8005876 <_dtoa_r+0x98e>
 8005758:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800575a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800575e:	e75d      	b.n	800561c <_dtoa_r+0x734>
 8005760:	9b08      	ldr	r3, [sp, #32]
 8005762:	1e5c      	subs	r4, r3, #1
 8005764:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005766:	42a3      	cmp	r3, r4
 8005768:	bfbf      	itttt	lt
 800576a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800576c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800576e:	1ae3      	sublt	r3, r4, r3
 8005770:	18d2      	addlt	r2, r2, r3
 8005772:	bfa8      	it	ge
 8005774:	1b1c      	subge	r4, r3, r4
 8005776:	9b08      	ldr	r3, [sp, #32]
 8005778:	bfbe      	ittt	lt
 800577a:	940a      	strlt	r4, [sp, #40]	; 0x28
 800577c:	920e      	strlt	r2, [sp, #56]	; 0x38
 800577e:	2400      	movlt	r4, #0
 8005780:	2b00      	cmp	r3, #0
 8005782:	bfb5      	itete	lt
 8005784:	eba9 0703 	sublt.w	r7, r9, r3
 8005788:	464f      	movge	r7, r9
 800578a:	2300      	movlt	r3, #0
 800578c:	9b08      	ldrge	r3, [sp, #32]
 800578e:	e747      	b.n	8005620 <_dtoa_r+0x738>
 8005790:	464f      	mov	r7, r9
 8005792:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005794:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005796:	e74c      	b.n	8005632 <_dtoa_r+0x74a>
 8005798:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800579a:	e773      	b.n	8005684 <_dtoa_r+0x79c>
 800579c:	3fe00000 	.word	0x3fe00000
 80057a0:	40240000 	.word	0x40240000
 80057a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	dc18      	bgt.n	80057dc <_dtoa_r+0x8f4>
 80057aa:	9b04      	ldr	r3, [sp, #16]
 80057ac:	b9b3      	cbnz	r3, 80057dc <_dtoa_r+0x8f4>
 80057ae:	9b05      	ldr	r3, [sp, #20]
 80057b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80057b4:	b993      	cbnz	r3, 80057dc <_dtoa_r+0x8f4>
 80057b6:	9b05      	ldr	r3, [sp, #20]
 80057b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80057bc:	0d1b      	lsrs	r3, r3, #20
 80057be:	051b      	lsls	r3, r3, #20
 80057c0:	b17b      	cbz	r3, 80057e2 <_dtoa_r+0x8fa>
 80057c2:	f04f 0801 	mov.w	r8, #1
 80057c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057c8:	f109 0901 	add.w	r9, r9, #1
 80057cc:	3301      	adds	r3, #1
 80057ce:	9309      	str	r3, [sp, #36]	; 0x24
 80057d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	f47f af6f 	bne.w	80056b6 <_dtoa_r+0x7ce>
 80057d8:	2001      	movs	r0, #1
 80057da:	e774      	b.n	80056c6 <_dtoa_r+0x7de>
 80057dc:	f04f 0800 	mov.w	r8, #0
 80057e0:	e7f6      	b.n	80057d0 <_dtoa_r+0x8e8>
 80057e2:	4698      	mov	r8, r3
 80057e4:	e7f4      	b.n	80057d0 <_dtoa_r+0x8e8>
 80057e6:	d080      	beq.n	80056ea <_dtoa_r+0x802>
 80057e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80057ea:	331c      	adds	r3, #28
 80057ec:	441a      	add	r2, r3
 80057ee:	4499      	add	r9, r3
 80057f0:	441f      	add	r7, r3
 80057f2:	9209      	str	r2, [sp, #36]	; 0x24
 80057f4:	e779      	b.n	80056ea <_dtoa_r+0x802>
 80057f6:	4603      	mov	r3, r0
 80057f8:	e7f6      	b.n	80057e8 <_dtoa_r+0x900>
 80057fa:	9b08      	ldr	r3, [sp, #32]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	dc34      	bgt.n	800586a <_dtoa_r+0x982>
 8005800:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005802:	2b02      	cmp	r3, #2
 8005804:	dd31      	ble.n	800586a <_dtoa_r+0x982>
 8005806:	9b08      	ldr	r3, [sp, #32]
 8005808:	9306      	str	r3, [sp, #24]
 800580a:	9b06      	ldr	r3, [sp, #24]
 800580c:	b963      	cbnz	r3, 8005828 <_dtoa_r+0x940>
 800580e:	4621      	mov	r1, r4
 8005810:	2205      	movs	r2, #5
 8005812:	4628      	mov	r0, r5
 8005814:	f000 faaa 	bl	8005d6c <__multadd>
 8005818:	4601      	mov	r1, r0
 800581a:	4604      	mov	r4, r0
 800581c:	4650      	mov	r0, sl
 800581e:	f000 fd07 	bl	8006230 <__mcmp>
 8005822:	2800      	cmp	r0, #0
 8005824:	f73f adbf 	bgt.w	80053a6 <_dtoa_r+0x4be>
 8005828:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800582a:	9f03      	ldr	r7, [sp, #12]
 800582c:	ea6f 0b03 	mvn.w	fp, r3
 8005830:	f04f 0800 	mov.w	r8, #0
 8005834:	4621      	mov	r1, r4
 8005836:	4628      	mov	r0, r5
 8005838:	f000 fa76 	bl	8005d28 <_Bfree>
 800583c:	2e00      	cmp	r6, #0
 800583e:	f43f aead 	beq.w	800559c <_dtoa_r+0x6b4>
 8005842:	f1b8 0f00 	cmp.w	r8, #0
 8005846:	d005      	beq.n	8005854 <_dtoa_r+0x96c>
 8005848:	45b0      	cmp	r8, r6
 800584a:	d003      	beq.n	8005854 <_dtoa_r+0x96c>
 800584c:	4641      	mov	r1, r8
 800584e:	4628      	mov	r0, r5
 8005850:	f000 fa6a 	bl	8005d28 <_Bfree>
 8005854:	4631      	mov	r1, r6
 8005856:	4628      	mov	r0, r5
 8005858:	f000 fa66 	bl	8005d28 <_Bfree>
 800585c:	e69e      	b.n	800559c <_dtoa_r+0x6b4>
 800585e:	2400      	movs	r4, #0
 8005860:	4626      	mov	r6, r4
 8005862:	e7e1      	b.n	8005828 <_dtoa_r+0x940>
 8005864:	46c3      	mov	fp, r8
 8005866:	4626      	mov	r6, r4
 8005868:	e59d      	b.n	80053a6 <_dtoa_r+0x4be>
 800586a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800586c:	2b00      	cmp	r3, #0
 800586e:	f000 80c8 	beq.w	8005a02 <_dtoa_r+0xb1a>
 8005872:	9b08      	ldr	r3, [sp, #32]
 8005874:	9306      	str	r3, [sp, #24]
 8005876:	2f00      	cmp	r7, #0
 8005878:	dd05      	ble.n	8005886 <_dtoa_r+0x99e>
 800587a:	4631      	mov	r1, r6
 800587c:	463a      	mov	r2, r7
 800587e:	4628      	mov	r0, r5
 8005880:	f000 fc6a 	bl	8006158 <__lshift>
 8005884:	4606      	mov	r6, r0
 8005886:	f1b8 0f00 	cmp.w	r8, #0
 800588a:	d05b      	beq.n	8005944 <_dtoa_r+0xa5c>
 800588c:	4628      	mov	r0, r5
 800588e:	6871      	ldr	r1, [r6, #4]
 8005890:	f000 fa0a 	bl	8005ca8 <_Balloc>
 8005894:	4607      	mov	r7, r0
 8005896:	b928      	cbnz	r0, 80058a4 <_dtoa_r+0x9bc>
 8005898:	4602      	mov	r2, r0
 800589a:	f240 21ef 	movw	r1, #751	; 0x2ef
 800589e:	4b81      	ldr	r3, [pc, #516]	; (8005aa4 <_dtoa_r+0xbbc>)
 80058a0:	f7ff bb36 	b.w	8004f10 <_dtoa_r+0x28>
 80058a4:	6932      	ldr	r2, [r6, #16]
 80058a6:	f106 010c 	add.w	r1, r6, #12
 80058aa:	3202      	adds	r2, #2
 80058ac:	0092      	lsls	r2, r2, #2
 80058ae:	300c      	adds	r0, #12
 80058b0:	f001 ff72 	bl	8007798 <memcpy>
 80058b4:	2201      	movs	r2, #1
 80058b6:	4639      	mov	r1, r7
 80058b8:	4628      	mov	r0, r5
 80058ba:	f000 fc4d 	bl	8006158 <__lshift>
 80058be:	46b0      	mov	r8, r6
 80058c0:	4606      	mov	r6, r0
 80058c2:	9b03      	ldr	r3, [sp, #12]
 80058c4:	9a03      	ldr	r2, [sp, #12]
 80058c6:	3301      	adds	r3, #1
 80058c8:	9308      	str	r3, [sp, #32]
 80058ca:	9b06      	ldr	r3, [sp, #24]
 80058cc:	4413      	add	r3, r2
 80058ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80058d0:	9b04      	ldr	r3, [sp, #16]
 80058d2:	f003 0301 	and.w	r3, r3, #1
 80058d6:	930a      	str	r3, [sp, #40]	; 0x28
 80058d8:	9b08      	ldr	r3, [sp, #32]
 80058da:	4621      	mov	r1, r4
 80058dc:	3b01      	subs	r3, #1
 80058de:	4650      	mov	r0, sl
 80058e0:	9304      	str	r3, [sp, #16]
 80058e2:	f7ff fa75 	bl	8004dd0 <quorem>
 80058e6:	4641      	mov	r1, r8
 80058e8:	9006      	str	r0, [sp, #24]
 80058ea:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80058ee:	4650      	mov	r0, sl
 80058f0:	f000 fc9e 	bl	8006230 <__mcmp>
 80058f4:	4632      	mov	r2, r6
 80058f6:	9009      	str	r0, [sp, #36]	; 0x24
 80058f8:	4621      	mov	r1, r4
 80058fa:	4628      	mov	r0, r5
 80058fc:	f000 fcb4 	bl	8006268 <__mdiff>
 8005900:	68c2      	ldr	r2, [r0, #12]
 8005902:	4607      	mov	r7, r0
 8005904:	bb02      	cbnz	r2, 8005948 <_dtoa_r+0xa60>
 8005906:	4601      	mov	r1, r0
 8005908:	4650      	mov	r0, sl
 800590a:	f000 fc91 	bl	8006230 <__mcmp>
 800590e:	4602      	mov	r2, r0
 8005910:	4639      	mov	r1, r7
 8005912:	4628      	mov	r0, r5
 8005914:	920c      	str	r2, [sp, #48]	; 0x30
 8005916:	f000 fa07 	bl	8005d28 <_Bfree>
 800591a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800591c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800591e:	9f08      	ldr	r7, [sp, #32]
 8005920:	ea43 0102 	orr.w	r1, r3, r2
 8005924:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005926:	4319      	orrs	r1, r3
 8005928:	d110      	bne.n	800594c <_dtoa_r+0xa64>
 800592a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800592e:	d029      	beq.n	8005984 <_dtoa_r+0xa9c>
 8005930:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005932:	2b00      	cmp	r3, #0
 8005934:	dd02      	ble.n	800593c <_dtoa_r+0xa54>
 8005936:	9b06      	ldr	r3, [sp, #24]
 8005938:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800593c:	9b04      	ldr	r3, [sp, #16]
 800593e:	f883 9000 	strb.w	r9, [r3]
 8005942:	e777      	b.n	8005834 <_dtoa_r+0x94c>
 8005944:	4630      	mov	r0, r6
 8005946:	e7ba      	b.n	80058be <_dtoa_r+0x9d6>
 8005948:	2201      	movs	r2, #1
 800594a:	e7e1      	b.n	8005910 <_dtoa_r+0xa28>
 800594c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800594e:	2b00      	cmp	r3, #0
 8005950:	db04      	blt.n	800595c <_dtoa_r+0xa74>
 8005952:	9922      	ldr	r1, [sp, #136]	; 0x88
 8005954:	430b      	orrs	r3, r1
 8005956:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005958:	430b      	orrs	r3, r1
 800595a:	d120      	bne.n	800599e <_dtoa_r+0xab6>
 800595c:	2a00      	cmp	r2, #0
 800595e:	dded      	ble.n	800593c <_dtoa_r+0xa54>
 8005960:	4651      	mov	r1, sl
 8005962:	2201      	movs	r2, #1
 8005964:	4628      	mov	r0, r5
 8005966:	f000 fbf7 	bl	8006158 <__lshift>
 800596a:	4621      	mov	r1, r4
 800596c:	4682      	mov	sl, r0
 800596e:	f000 fc5f 	bl	8006230 <__mcmp>
 8005972:	2800      	cmp	r0, #0
 8005974:	dc03      	bgt.n	800597e <_dtoa_r+0xa96>
 8005976:	d1e1      	bne.n	800593c <_dtoa_r+0xa54>
 8005978:	f019 0f01 	tst.w	r9, #1
 800597c:	d0de      	beq.n	800593c <_dtoa_r+0xa54>
 800597e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005982:	d1d8      	bne.n	8005936 <_dtoa_r+0xa4e>
 8005984:	2339      	movs	r3, #57	; 0x39
 8005986:	9a04      	ldr	r2, [sp, #16]
 8005988:	7013      	strb	r3, [r2, #0]
 800598a:	463b      	mov	r3, r7
 800598c:	461f      	mov	r7, r3
 800598e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005992:	3b01      	subs	r3, #1
 8005994:	2a39      	cmp	r2, #57	; 0x39
 8005996:	d06b      	beq.n	8005a70 <_dtoa_r+0xb88>
 8005998:	3201      	adds	r2, #1
 800599a:	701a      	strb	r2, [r3, #0]
 800599c:	e74a      	b.n	8005834 <_dtoa_r+0x94c>
 800599e:	2a00      	cmp	r2, #0
 80059a0:	dd07      	ble.n	80059b2 <_dtoa_r+0xaca>
 80059a2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80059a6:	d0ed      	beq.n	8005984 <_dtoa_r+0xa9c>
 80059a8:	9a04      	ldr	r2, [sp, #16]
 80059aa:	f109 0301 	add.w	r3, r9, #1
 80059ae:	7013      	strb	r3, [r2, #0]
 80059b0:	e740      	b.n	8005834 <_dtoa_r+0x94c>
 80059b2:	9b08      	ldr	r3, [sp, #32]
 80059b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80059b6:	f803 9c01 	strb.w	r9, [r3, #-1]
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d042      	beq.n	8005a44 <_dtoa_r+0xb5c>
 80059be:	4651      	mov	r1, sl
 80059c0:	2300      	movs	r3, #0
 80059c2:	220a      	movs	r2, #10
 80059c4:	4628      	mov	r0, r5
 80059c6:	f000 f9d1 	bl	8005d6c <__multadd>
 80059ca:	45b0      	cmp	r8, r6
 80059cc:	4682      	mov	sl, r0
 80059ce:	f04f 0300 	mov.w	r3, #0
 80059d2:	f04f 020a 	mov.w	r2, #10
 80059d6:	4641      	mov	r1, r8
 80059d8:	4628      	mov	r0, r5
 80059da:	d107      	bne.n	80059ec <_dtoa_r+0xb04>
 80059dc:	f000 f9c6 	bl	8005d6c <__multadd>
 80059e0:	4680      	mov	r8, r0
 80059e2:	4606      	mov	r6, r0
 80059e4:	9b08      	ldr	r3, [sp, #32]
 80059e6:	3301      	adds	r3, #1
 80059e8:	9308      	str	r3, [sp, #32]
 80059ea:	e775      	b.n	80058d8 <_dtoa_r+0x9f0>
 80059ec:	f000 f9be 	bl	8005d6c <__multadd>
 80059f0:	4631      	mov	r1, r6
 80059f2:	4680      	mov	r8, r0
 80059f4:	2300      	movs	r3, #0
 80059f6:	220a      	movs	r2, #10
 80059f8:	4628      	mov	r0, r5
 80059fa:	f000 f9b7 	bl	8005d6c <__multadd>
 80059fe:	4606      	mov	r6, r0
 8005a00:	e7f0      	b.n	80059e4 <_dtoa_r+0xafc>
 8005a02:	9b08      	ldr	r3, [sp, #32]
 8005a04:	9306      	str	r3, [sp, #24]
 8005a06:	9f03      	ldr	r7, [sp, #12]
 8005a08:	4621      	mov	r1, r4
 8005a0a:	4650      	mov	r0, sl
 8005a0c:	f7ff f9e0 	bl	8004dd0 <quorem>
 8005a10:	9b03      	ldr	r3, [sp, #12]
 8005a12:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005a16:	f807 9b01 	strb.w	r9, [r7], #1
 8005a1a:	1afa      	subs	r2, r7, r3
 8005a1c:	9b06      	ldr	r3, [sp, #24]
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	dd07      	ble.n	8005a32 <_dtoa_r+0xb4a>
 8005a22:	4651      	mov	r1, sl
 8005a24:	2300      	movs	r3, #0
 8005a26:	220a      	movs	r2, #10
 8005a28:	4628      	mov	r0, r5
 8005a2a:	f000 f99f 	bl	8005d6c <__multadd>
 8005a2e:	4682      	mov	sl, r0
 8005a30:	e7ea      	b.n	8005a08 <_dtoa_r+0xb20>
 8005a32:	9b06      	ldr	r3, [sp, #24]
 8005a34:	f04f 0800 	mov.w	r8, #0
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	bfcc      	ite	gt
 8005a3c:	461f      	movgt	r7, r3
 8005a3e:	2701      	movle	r7, #1
 8005a40:	9b03      	ldr	r3, [sp, #12]
 8005a42:	441f      	add	r7, r3
 8005a44:	4651      	mov	r1, sl
 8005a46:	2201      	movs	r2, #1
 8005a48:	4628      	mov	r0, r5
 8005a4a:	f000 fb85 	bl	8006158 <__lshift>
 8005a4e:	4621      	mov	r1, r4
 8005a50:	4682      	mov	sl, r0
 8005a52:	f000 fbed 	bl	8006230 <__mcmp>
 8005a56:	2800      	cmp	r0, #0
 8005a58:	dc97      	bgt.n	800598a <_dtoa_r+0xaa2>
 8005a5a:	d102      	bne.n	8005a62 <_dtoa_r+0xb7a>
 8005a5c:	f019 0f01 	tst.w	r9, #1
 8005a60:	d193      	bne.n	800598a <_dtoa_r+0xaa2>
 8005a62:	463b      	mov	r3, r7
 8005a64:	461f      	mov	r7, r3
 8005a66:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005a6a:	2a30      	cmp	r2, #48	; 0x30
 8005a6c:	d0fa      	beq.n	8005a64 <_dtoa_r+0xb7c>
 8005a6e:	e6e1      	b.n	8005834 <_dtoa_r+0x94c>
 8005a70:	9a03      	ldr	r2, [sp, #12]
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d18a      	bne.n	800598c <_dtoa_r+0xaa4>
 8005a76:	2331      	movs	r3, #49	; 0x31
 8005a78:	f10b 0b01 	add.w	fp, fp, #1
 8005a7c:	e797      	b.n	80059ae <_dtoa_r+0xac6>
 8005a7e:	4b0a      	ldr	r3, [pc, #40]	; (8005aa8 <_dtoa_r+0xbc0>)
 8005a80:	f7ff ba9f 	b.w	8004fc2 <_dtoa_r+0xda>
 8005a84:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	f47f aa77 	bne.w	8004f7a <_dtoa_r+0x92>
 8005a8c:	4b07      	ldr	r3, [pc, #28]	; (8005aac <_dtoa_r+0xbc4>)
 8005a8e:	f7ff ba98 	b.w	8004fc2 <_dtoa_r+0xda>
 8005a92:	9b06      	ldr	r3, [sp, #24]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	dcb6      	bgt.n	8005a06 <_dtoa_r+0xb1e>
 8005a98:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a9a:	2b02      	cmp	r3, #2
 8005a9c:	f73f aeb5 	bgt.w	800580a <_dtoa_r+0x922>
 8005aa0:	e7b1      	b.n	8005a06 <_dtoa_r+0xb1e>
 8005aa2:	bf00      	nop
 8005aa4:	08008603 	.word	0x08008603
 8005aa8:	0800855e 	.word	0x0800855e
 8005aac:	08008587 	.word	0x08008587

08005ab0 <_free_r>:
 8005ab0:	b538      	push	{r3, r4, r5, lr}
 8005ab2:	4605      	mov	r5, r0
 8005ab4:	2900      	cmp	r1, #0
 8005ab6:	d040      	beq.n	8005b3a <_free_r+0x8a>
 8005ab8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005abc:	1f0c      	subs	r4, r1, #4
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	bfb8      	it	lt
 8005ac2:	18e4      	addlt	r4, r4, r3
 8005ac4:	f000 f8e4 	bl	8005c90 <__malloc_lock>
 8005ac8:	4a1c      	ldr	r2, [pc, #112]	; (8005b3c <_free_r+0x8c>)
 8005aca:	6813      	ldr	r3, [r2, #0]
 8005acc:	b933      	cbnz	r3, 8005adc <_free_r+0x2c>
 8005ace:	6063      	str	r3, [r4, #4]
 8005ad0:	6014      	str	r4, [r2, #0]
 8005ad2:	4628      	mov	r0, r5
 8005ad4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ad8:	f000 b8e0 	b.w	8005c9c <__malloc_unlock>
 8005adc:	42a3      	cmp	r3, r4
 8005ade:	d908      	bls.n	8005af2 <_free_r+0x42>
 8005ae0:	6820      	ldr	r0, [r4, #0]
 8005ae2:	1821      	adds	r1, r4, r0
 8005ae4:	428b      	cmp	r3, r1
 8005ae6:	bf01      	itttt	eq
 8005ae8:	6819      	ldreq	r1, [r3, #0]
 8005aea:	685b      	ldreq	r3, [r3, #4]
 8005aec:	1809      	addeq	r1, r1, r0
 8005aee:	6021      	streq	r1, [r4, #0]
 8005af0:	e7ed      	b.n	8005ace <_free_r+0x1e>
 8005af2:	461a      	mov	r2, r3
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	b10b      	cbz	r3, 8005afc <_free_r+0x4c>
 8005af8:	42a3      	cmp	r3, r4
 8005afa:	d9fa      	bls.n	8005af2 <_free_r+0x42>
 8005afc:	6811      	ldr	r1, [r2, #0]
 8005afe:	1850      	adds	r0, r2, r1
 8005b00:	42a0      	cmp	r0, r4
 8005b02:	d10b      	bne.n	8005b1c <_free_r+0x6c>
 8005b04:	6820      	ldr	r0, [r4, #0]
 8005b06:	4401      	add	r1, r0
 8005b08:	1850      	adds	r0, r2, r1
 8005b0a:	4283      	cmp	r3, r0
 8005b0c:	6011      	str	r1, [r2, #0]
 8005b0e:	d1e0      	bne.n	8005ad2 <_free_r+0x22>
 8005b10:	6818      	ldr	r0, [r3, #0]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	4408      	add	r0, r1
 8005b16:	6010      	str	r0, [r2, #0]
 8005b18:	6053      	str	r3, [r2, #4]
 8005b1a:	e7da      	b.n	8005ad2 <_free_r+0x22>
 8005b1c:	d902      	bls.n	8005b24 <_free_r+0x74>
 8005b1e:	230c      	movs	r3, #12
 8005b20:	602b      	str	r3, [r5, #0]
 8005b22:	e7d6      	b.n	8005ad2 <_free_r+0x22>
 8005b24:	6820      	ldr	r0, [r4, #0]
 8005b26:	1821      	adds	r1, r4, r0
 8005b28:	428b      	cmp	r3, r1
 8005b2a:	bf01      	itttt	eq
 8005b2c:	6819      	ldreq	r1, [r3, #0]
 8005b2e:	685b      	ldreq	r3, [r3, #4]
 8005b30:	1809      	addeq	r1, r1, r0
 8005b32:	6021      	streq	r1, [r4, #0]
 8005b34:	6063      	str	r3, [r4, #4]
 8005b36:	6054      	str	r4, [r2, #4]
 8005b38:	e7cb      	b.n	8005ad2 <_free_r+0x22>
 8005b3a:	bd38      	pop	{r3, r4, r5, pc}
 8005b3c:	200003f0 	.word	0x200003f0

08005b40 <malloc>:
 8005b40:	4b02      	ldr	r3, [pc, #8]	; (8005b4c <malloc+0xc>)
 8005b42:	4601      	mov	r1, r0
 8005b44:	6818      	ldr	r0, [r3, #0]
 8005b46:	f000 b823 	b.w	8005b90 <_malloc_r>
 8005b4a:	bf00      	nop
 8005b4c:	2000006c 	.word	0x2000006c

08005b50 <sbrk_aligned>:
 8005b50:	b570      	push	{r4, r5, r6, lr}
 8005b52:	4e0e      	ldr	r6, [pc, #56]	; (8005b8c <sbrk_aligned+0x3c>)
 8005b54:	460c      	mov	r4, r1
 8005b56:	6831      	ldr	r1, [r6, #0]
 8005b58:	4605      	mov	r5, r0
 8005b5a:	b911      	cbnz	r1, 8005b62 <sbrk_aligned+0x12>
 8005b5c:	f001 fe0c 	bl	8007778 <_sbrk_r>
 8005b60:	6030      	str	r0, [r6, #0]
 8005b62:	4621      	mov	r1, r4
 8005b64:	4628      	mov	r0, r5
 8005b66:	f001 fe07 	bl	8007778 <_sbrk_r>
 8005b6a:	1c43      	adds	r3, r0, #1
 8005b6c:	d00a      	beq.n	8005b84 <sbrk_aligned+0x34>
 8005b6e:	1cc4      	adds	r4, r0, #3
 8005b70:	f024 0403 	bic.w	r4, r4, #3
 8005b74:	42a0      	cmp	r0, r4
 8005b76:	d007      	beq.n	8005b88 <sbrk_aligned+0x38>
 8005b78:	1a21      	subs	r1, r4, r0
 8005b7a:	4628      	mov	r0, r5
 8005b7c:	f001 fdfc 	bl	8007778 <_sbrk_r>
 8005b80:	3001      	adds	r0, #1
 8005b82:	d101      	bne.n	8005b88 <sbrk_aligned+0x38>
 8005b84:	f04f 34ff 	mov.w	r4, #4294967295
 8005b88:	4620      	mov	r0, r4
 8005b8a:	bd70      	pop	{r4, r5, r6, pc}
 8005b8c:	200003f4 	.word	0x200003f4

08005b90 <_malloc_r>:
 8005b90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b94:	1ccd      	adds	r5, r1, #3
 8005b96:	f025 0503 	bic.w	r5, r5, #3
 8005b9a:	3508      	adds	r5, #8
 8005b9c:	2d0c      	cmp	r5, #12
 8005b9e:	bf38      	it	cc
 8005ba0:	250c      	movcc	r5, #12
 8005ba2:	2d00      	cmp	r5, #0
 8005ba4:	4607      	mov	r7, r0
 8005ba6:	db01      	blt.n	8005bac <_malloc_r+0x1c>
 8005ba8:	42a9      	cmp	r1, r5
 8005baa:	d905      	bls.n	8005bb8 <_malloc_r+0x28>
 8005bac:	230c      	movs	r3, #12
 8005bae:	2600      	movs	r6, #0
 8005bb0:	603b      	str	r3, [r7, #0]
 8005bb2:	4630      	mov	r0, r6
 8005bb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005bb8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005c8c <_malloc_r+0xfc>
 8005bbc:	f000 f868 	bl	8005c90 <__malloc_lock>
 8005bc0:	f8d8 3000 	ldr.w	r3, [r8]
 8005bc4:	461c      	mov	r4, r3
 8005bc6:	bb5c      	cbnz	r4, 8005c20 <_malloc_r+0x90>
 8005bc8:	4629      	mov	r1, r5
 8005bca:	4638      	mov	r0, r7
 8005bcc:	f7ff ffc0 	bl	8005b50 <sbrk_aligned>
 8005bd0:	1c43      	adds	r3, r0, #1
 8005bd2:	4604      	mov	r4, r0
 8005bd4:	d155      	bne.n	8005c82 <_malloc_r+0xf2>
 8005bd6:	f8d8 4000 	ldr.w	r4, [r8]
 8005bda:	4626      	mov	r6, r4
 8005bdc:	2e00      	cmp	r6, #0
 8005bde:	d145      	bne.n	8005c6c <_malloc_r+0xdc>
 8005be0:	2c00      	cmp	r4, #0
 8005be2:	d048      	beq.n	8005c76 <_malloc_r+0xe6>
 8005be4:	6823      	ldr	r3, [r4, #0]
 8005be6:	4631      	mov	r1, r6
 8005be8:	4638      	mov	r0, r7
 8005bea:	eb04 0903 	add.w	r9, r4, r3
 8005bee:	f001 fdc3 	bl	8007778 <_sbrk_r>
 8005bf2:	4581      	cmp	r9, r0
 8005bf4:	d13f      	bne.n	8005c76 <_malloc_r+0xe6>
 8005bf6:	6821      	ldr	r1, [r4, #0]
 8005bf8:	4638      	mov	r0, r7
 8005bfa:	1a6d      	subs	r5, r5, r1
 8005bfc:	4629      	mov	r1, r5
 8005bfe:	f7ff ffa7 	bl	8005b50 <sbrk_aligned>
 8005c02:	3001      	adds	r0, #1
 8005c04:	d037      	beq.n	8005c76 <_malloc_r+0xe6>
 8005c06:	6823      	ldr	r3, [r4, #0]
 8005c08:	442b      	add	r3, r5
 8005c0a:	6023      	str	r3, [r4, #0]
 8005c0c:	f8d8 3000 	ldr.w	r3, [r8]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d038      	beq.n	8005c86 <_malloc_r+0xf6>
 8005c14:	685a      	ldr	r2, [r3, #4]
 8005c16:	42a2      	cmp	r2, r4
 8005c18:	d12b      	bne.n	8005c72 <_malloc_r+0xe2>
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	605a      	str	r2, [r3, #4]
 8005c1e:	e00f      	b.n	8005c40 <_malloc_r+0xb0>
 8005c20:	6822      	ldr	r2, [r4, #0]
 8005c22:	1b52      	subs	r2, r2, r5
 8005c24:	d41f      	bmi.n	8005c66 <_malloc_r+0xd6>
 8005c26:	2a0b      	cmp	r2, #11
 8005c28:	d917      	bls.n	8005c5a <_malloc_r+0xca>
 8005c2a:	1961      	adds	r1, r4, r5
 8005c2c:	42a3      	cmp	r3, r4
 8005c2e:	6025      	str	r5, [r4, #0]
 8005c30:	bf18      	it	ne
 8005c32:	6059      	strne	r1, [r3, #4]
 8005c34:	6863      	ldr	r3, [r4, #4]
 8005c36:	bf08      	it	eq
 8005c38:	f8c8 1000 	streq.w	r1, [r8]
 8005c3c:	5162      	str	r2, [r4, r5]
 8005c3e:	604b      	str	r3, [r1, #4]
 8005c40:	4638      	mov	r0, r7
 8005c42:	f104 060b 	add.w	r6, r4, #11
 8005c46:	f000 f829 	bl	8005c9c <__malloc_unlock>
 8005c4a:	f026 0607 	bic.w	r6, r6, #7
 8005c4e:	1d23      	adds	r3, r4, #4
 8005c50:	1af2      	subs	r2, r6, r3
 8005c52:	d0ae      	beq.n	8005bb2 <_malloc_r+0x22>
 8005c54:	1b9b      	subs	r3, r3, r6
 8005c56:	50a3      	str	r3, [r4, r2]
 8005c58:	e7ab      	b.n	8005bb2 <_malloc_r+0x22>
 8005c5a:	42a3      	cmp	r3, r4
 8005c5c:	6862      	ldr	r2, [r4, #4]
 8005c5e:	d1dd      	bne.n	8005c1c <_malloc_r+0x8c>
 8005c60:	f8c8 2000 	str.w	r2, [r8]
 8005c64:	e7ec      	b.n	8005c40 <_malloc_r+0xb0>
 8005c66:	4623      	mov	r3, r4
 8005c68:	6864      	ldr	r4, [r4, #4]
 8005c6a:	e7ac      	b.n	8005bc6 <_malloc_r+0x36>
 8005c6c:	4634      	mov	r4, r6
 8005c6e:	6876      	ldr	r6, [r6, #4]
 8005c70:	e7b4      	b.n	8005bdc <_malloc_r+0x4c>
 8005c72:	4613      	mov	r3, r2
 8005c74:	e7cc      	b.n	8005c10 <_malloc_r+0x80>
 8005c76:	230c      	movs	r3, #12
 8005c78:	4638      	mov	r0, r7
 8005c7a:	603b      	str	r3, [r7, #0]
 8005c7c:	f000 f80e 	bl	8005c9c <__malloc_unlock>
 8005c80:	e797      	b.n	8005bb2 <_malloc_r+0x22>
 8005c82:	6025      	str	r5, [r4, #0]
 8005c84:	e7dc      	b.n	8005c40 <_malloc_r+0xb0>
 8005c86:	605b      	str	r3, [r3, #4]
 8005c88:	deff      	udf	#255	; 0xff
 8005c8a:	bf00      	nop
 8005c8c:	200003f0 	.word	0x200003f0

08005c90 <__malloc_lock>:
 8005c90:	4801      	ldr	r0, [pc, #4]	; (8005c98 <__malloc_lock+0x8>)
 8005c92:	f7ff b889 	b.w	8004da8 <__retarget_lock_acquire_recursive>
 8005c96:	bf00      	nop
 8005c98:	200003ec 	.word	0x200003ec

08005c9c <__malloc_unlock>:
 8005c9c:	4801      	ldr	r0, [pc, #4]	; (8005ca4 <__malloc_unlock+0x8>)
 8005c9e:	f7ff b884 	b.w	8004daa <__retarget_lock_release_recursive>
 8005ca2:	bf00      	nop
 8005ca4:	200003ec 	.word	0x200003ec

08005ca8 <_Balloc>:
 8005ca8:	b570      	push	{r4, r5, r6, lr}
 8005caa:	69c6      	ldr	r6, [r0, #28]
 8005cac:	4604      	mov	r4, r0
 8005cae:	460d      	mov	r5, r1
 8005cb0:	b976      	cbnz	r6, 8005cd0 <_Balloc+0x28>
 8005cb2:	2010      	movs	r0, #16
 8005cb4:	f7ff ff44 	bl	8005b40 <malloc>
 8005cb8:	4602      	mov	r2, r0
 8005cba:	61e0      	str	r0, [r4, #28]
 8005cbc:	b920      	cbnz	r0, 8005cc8 <_Balloc+0x20>
 8005cbe:	216b      	movs	r1, #107	; 0x6b
 8005cc0:	4b17      	ldr	r3, [pc, #92]	; (8005d20 <_Balloc+0x78>)
 8005cc2:	4818      	ldr	r0, [pc, #96]	; (8005d24 <_Balloc+0x7c>)
 8005cc4:	f001 fd7c 	bl	80077c0 <__assert_func>
 8005cc8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005ccc:	6006      	str	r6, [r0, #0]
 8005cce:	60c6      	str	r6, [r0, #12]
 8005cd0:	69e6      	ldr	r6, [r4, #28]
 8005cd2:	68f3      	ldr	r3, [r6, #12]
 8005cd4:	b183      	cbz	r3, 8005cf8 <_Balloc+0x50>
 8005cd6:	69e3      	ldr	r3, [r4, #28]
 8005cd8:	68db      	ldr	r3, [r3, #12]
 8005cda:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005cde:	b9b8      	cbnz	r0, 8005d10 <_Balloc+0x68>
 8005ce0:	2101      	movs	r1, #1
 8005ce2:	fa01 f605 	lsl.w	r6, r1, r5
 8005ce6:	1d72      	adds	r2, r6, #5
 8005ce8:	4620      	mov	r0, r4
 8005cea:	0092      	lsls	r2, r2, #2
 8005cec:	f001 fd86 	bl	80077fc <_calloc_r>
 8005cf0:	b160      	cbz	r0, 8005d0c <_Balloc+0x64>
 8005cf2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005cf6:	e00e      	b.n	8005d16 <_Balloc+0x6e>
 8005cf8:	2221      	movs	r2, #33	; 0x21
 8005cfa:	2104      	movs	r1, #4
 8005cfc:	4620      	mov	r0, r4
 8005cfe:	f001 fd7d 	bl	80077fc <_calloc_r>
 8005d02:	69e3      	ldr	r3, [r4, #28]
 8005d04:	60f0      	str	r0, [r6, #12]
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d1e4      	bne.n	8005cd6 <_Balloc+0x2e>
 8005d0c:	2000      	movs	r0, #0
 8005d0e:	bd70      	pop	{r4, r5, r6, pc}
 8005d10:	6802      	ldr	r2, [r0, #0]
 8005d12:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005d16:	2300      	movs	r3, #0
 8005d18:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005d1c:	e7f7      	b.n	8005d0e <_Balloc+0x66>
 8005d1e:	bf00      	nop
 8005d20:	08008594 	.word	0x08008594
 8005d24:	08008614 	.word	0x08008614

08005d28 <_Bfree>:
 8005d28:	b570      	push	{r4, r5, r6, lr}
 8005d2a:	69c6      	ldr	r6, [r0, #28]
 8005d2c:	4605      	mov	r5, r0
 8005d2e:	460c      	mov	r4, r1
 8005d30:	b976      	cbnz	r6, 8005d50 <_Bfree+0x28>
 8005d32:	2010      	movs	r0, #16
 8005d34:	f7ff ff04 	bl	8005b40 <malloc>
 8005d38:	4602      	mov	r2, r0
 8005d3a:	61e8      	str	r0, [r5, #28]
 8005d3c:	b920      	cbnz	r0, 8005d48 <_Bfree+0x20>
 8005d3e:	218f      	movs	r1, #143	; 0x8f
 8005d40:	4b08      	ldr	r3, [pc, #32]	; (8005d64 <_Bfree+0x3c>)
 8005d42:	4809      	ldr	r0, [pc, #36]	; (8005d68 <_Bfree+0x40>)
 8005d44:	f001 fd3c 	bl	80077c0 <__assert_func>
 8005d48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005d4c:	6006      	str	r6, [r0, #0]
 8005d4e:	60c6      	str	r6, [r0, #12]
 8005d50:	b13c      	cbz	r4, 8005d62 <_Bfree+0x3a>
 8005d52:	69eb      	ldr	r3, [r5, #28]
 8005d54:	6862      	ldr	r2, [r4, #4]
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005d5c:	6021      	str	r1, [r4, #0]
 8005d5e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005d62:	bd70      	pop	{r4, r5, r6, pc}
 8005d64:	08008594 	.word	0x08008594
 8005d68:	08008614 	.word	0x08008614

08005d6c <__multadd>:
 8005d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d70:	4607      	mov	r7, r0
 8005d72:	460c      	mov	r4, r1
 8005d74:	461e      	mov	r6, r3
 8005d76:	2000      	movs	r0, #0
 8005d78:	690d      	ldr	r5, [r1, #16]
 8005d7a:	f101 0c14 	add.w	ip, r1, #20
 8005d7e:	f8dc 3000 	ldr.w	r3, [ip]
 8005d82:	3001      	adds	r0, #1
 8005d84:	b299      	uxth	r1, r3
 8005d86:	fb02 6101 	mla	r1, r2, r1, r6
 8005d8a:	0c1e      	lsrs	r6, r3, #16
 8005d8c:	0c0b      	lsrs	r3, r1, #16
 8005d8e:	fb02 3306 	mla	r3, r2, r6, r3
 8005d92:	b289      	uxth	r1, r1
 8005d94:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005d98:	4285      	cmp	r5, r0
 8005d9a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005d9e:	f84c 1b04 	str.w	r1, [ip], #4
 8005da2:	dcec      	bgt.n	8005d7e <__multadd+0x12>
 8005da4:	b30e      	cbz	r6, 8005dea <__multadd+0x7e>
 8005da6:	68a3      	ldr	r3, [r4, #8]
 8005da8:	42ab      	cmp	r3, r5
 8005daa:	dc19      	bgt.n	8005de0 <__multadd+0x74>
 8005dac:	6861      	ldr	r1, [r4, #4]
 8005dae:	4638      	mov	r0, r7
 8005db0:	3101      	adds	r1, #1
 8005db2:	f7ff ff79 	bl	8005ca8 <_Balloc>
 8005db6:	4680      	mov	r8, r0
 8005db8:	b928      	cbnz	r0, 8005dc6 <__multadd+0x5a>
 8005dba:	4602      	mov	r2, r0
 8005dbc:	21ba      	movs	r1, #186	; 0xba
 8005dbe:	4b0c      	ldr	r3, [pc, #48]	; (8005df0 <__multadd+0x84>)
 8005dc0:	480c      	ldr	r0, [pc, #48]	; (8005df4 <__multadd+0x88>)
 8005dc2:	f001 fcfd 	bl	80077c0 <__assert_func>
 8005dc6:	6922      	ldr	r2, [r4, #16]
 8005dc8:	f104 010c 	add.w	r1, r4, #12
 8005dcc:	3202      	adds	r2, #2
 8005dce:	0092      	lsls	r2, r2, #2
 8005dd0:	300c      	adds	r0, #12
 8005dd2:	f001 fce1 	bl	8007798 <memcpy>
 8005dd6:	4621      	mov	r1, r4
 8005dd8:	4638      	mov	r0, r7
 8005dda:	f7ff ffa5 	bl	8005d28 <_Bfree>
 8005dde:	4644      	mov	r4, r8
 8005de0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005de4:	3501      	adds	r5, #1
 8005de6:	615e      	str	r6, [r3, #20]
 8005de8:	6125      	str	r5, [r4, #16]
 8005dea:	4620      	mov	r0, r4
 8005dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005df0:	08008603 	.word	0x08008603
 8005df4:	08008614 	.word	0x08008614

08005df8 <__s2b>:
 8005df8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005dfc:	4615      	mov	r5, r2
 8005dfe:	2209      	movs	r2, #9
 8005e00:	461f      	mov	r7, r3
 8005e02:	3308      	adds	r3, #8
 8005e04:	460c      	mov	r4, r1
 8005e06:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e0a:	4606      	mov	r6, r0
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	2100      	movs	r1, #0
 8005e10:	429a      	cmp	r2, r3
 8005e12:	db09      	blt.n	8005e28 <__s2b+0x30>
 8005e14:	4630      	mov	r0, r6
 8005e16:	f7ff ff47 	bl	8005ca8 <_Balloc>
 8005e1a:	b940      	cbnz	r0, 8005e2e <__s2b+0x36>
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	21d3      	movs	r1, #211	; 0xd3
 8005e20:	4b18      	ldr	r3, [pc, #96]	; (8005e84 <__s2b+0x8c>)
 8005e22:	4819      	ldr	r0, [pc, #100]	; (8005e88 <__s2b+0x90>)
 8005e24:	f001 fccc 	bl	80077c0 <__assert_func>
 8005e28:	0052      	lsls	r2, r2, #1
 8005e2a:	3101      	adds	r1, #1
 8005e2c:	e7f0      	b.n	8005e10 <__s2b+0x18>
 8005e2e:	9b08      	ldr	r3, [sp, #32]
 8005e30:	2d09      	cmp	r5, #9
 8005e32:	6143      	str	r3, [r0, #20]
 8005e34:	f04f 0301 	mov.w	r3, #1
 8005e38:	6103      	str	r3, [r0, #16]
 8005e3a:	dd16      	ble.n	8005e6a <__s2b+0x72>
 8005e3c:	f104 0909 	add.w	r9, r4, #9
 8005e40:	46c8      	mov	r8, r9
 8005e42:	442c      	add	r4, r5
 8005e44:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005e48:	4601      	mov	r1, r0
 8005e4a:	220a      	movs	r2, #10
 8005e4c:	4630      	mov	r0, r6
 8005e4e:	3b30      	subs	r3, #48	; 0x30
 8005e50:	f7ff ff8c 	bl	8005d6c <__multadd>
 8005e54:	45a0      	cmp	r8, r4
 8005e56:	d1f5      	bne.n	8005e44 <__s2b+0x4c>
 8005e58:	f1a5 0408 	sub.w	r4, r5, #8
 8005e5c:	444c      	add	r4, r9
 8005e5e:	1b2d      	subs	r5, r5, r4
 8005e60:	1963      	adds	r3, r4, r5
 8005e62:	42bb      	cmp	r3, r7
 8005e64:	db04      	blt.n	8005e70 <__s2b+0x78>
 8005e66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e6a:	2509      	movs	r5, #9
 8005e6c:	340a      	adds	r4, #10
 8005e6e:	e7f6      	b.n	8005e5e <__s2b+0x66>
 8005e70:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005e74:	4601      	mov	r1, r0
 8005e76:	220a      	movs	r2, #10
 8005e78:	4630      	mov	r0, r6
 8005e7a:	3b30      	subs	r3, #48	; 0x30
 8005e7c:	f7ff ff76 	bl	8005d6c <__multadd>
 8005e80:	e7ee      	b.n	8005e60 <__s2b+0x68>
 8005e82:	bf00      	nop
 8005e84:	08008603 	.word	0x08008603
 8005e88:	08008614 	.word	0x08008614

08005e8c <__hi0bits>:
 8005e8c:	0c02      	lsrs	r2, r0, #16
 8005e8e:	0412      	lsls	r2, r2, #16
 8005e90:	4603      	mov	r3, r0
 8005e92:	b9ca      	cbnz	r2, 8005ec8 <__hi0bits+0x3c>
 8005e94:	0403      	lsls	r3, r0, #16
 8005e96:	2010      	movs	r0, #16
 8005e98:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005e9c:	bf04      	itt	eq
 8005e9e:	021b      	lsleq	r3, r3, #8
 8005ea0:	3008      	addeq	r0, #8
 8005ea2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005ea6:	bf04      	itt	eq
 8005ea8:	011b      	lsleq	r3, r3, #4
 8005eaa:	3004      	addeq	r0, #4
 8005eac:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005eb0:	bf04      	itt	eq
 8005eb2:	009b      	lsleq	r3, r3, #2
 8005eb4:	3002      	addeq	r0, #2
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	db05      	blt.n	8005ec6 <__hi0bits+0x3a>
 8005eba:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005ebe:	f100 0001 	add.w	r0, r0, #1
 8005ec2:	bf08      	it	eq
 8005ec4:	2020      	moveq	r0, #32
 8005ec6:	4770      	bx	lr
 8005ec8:	2000      	movs	r0, #0
 8005eca:	e7e5      	b.n	8005e98 <__hi0bits+0xc>

08005ecc <__lo0bits>:
 8005ecc:	6803      	ldr	r3, [r0, #0]
 8005ece:	4602      	mov	r2, r0
 8005ed0:	f013 0007 	ands.w	r0, r3, #7
 8005ed4:	d00b      	beq.n	8005eee <__lo0bits+0x22>
 8005ed6:	07d9      	lsls	r1, r3, #31
 8005ed8:	d421      	bmi.n	8005f1e <__lo0bits+0x52>
 8005eda:	0798      	lsls	r0, r3, #30
 8005edc:	bf49      	itett	mi
 8005ede:	085b      	lsrmi	r3, r3, #1
 8005ee0:	089b      	lsrpl	r3, r3, #2
 8005ee2:	2001      	movmi	r0, #1
 8005ee4:	6013      	strmi	r3, [r2, #0]
 8005ee6:	bf5c      	itt	pl
 8005ee8:	2002      	movpl	r0, #2
 8005eea:	6013      	strpl	r3, [r2, #0]
 8005eec:	4770      	bx	lr
 8005eee:	b299      	uxth	r1, r3
 8005ef0:	b909      	cbnz	r1, 8005ef6 <__lo0bits+0x2a>
 8005ef2:	2010      	movs	r0, #16
 8005ef4:	0c1b      	lsrs	r3, r3, #16
 8005ef6:	b2d9      	uxtb	r1, r3
 8005ef8:	b909      	cbnz	r1, 8005efe <__lo0bits+0x32>
 8005efa:	3008      	adds	r0, #8
 8005efc:	0a1b      	lsrs	r3, r3, #8
 8005efe:	0719      	lsls	r1, r3, #28
 8005f00:	bf04      	itt	eq
 8005f02:	091b      	lsreq	r3, r3, #4
 8005f04:	3004      	addeq	r0, #4
 8005f06:	0799      	lsls	r1, r3, #30
 8005f08:	bf04      	itt	eq
 8005f0a:	089b      	lsreq	r3, r3, #2
 8005f0c:	3002      	addeq	r0, #2
 8005f0e:	07d9      	lsls	r1, r3, #31
 8005f10:	d403      	bmi.n	8005f1a <__lo0bits+0x4e>
 8005f12:	085b      	lsrs	r3, r3, #1
 8005f14:	f100 0001 	add.w	r0, r0, #1
 8005f18:	d003      	beq.n	8005f22 <__lo0bits+0x56>
 8005f1a:	6013      	str	r3, [r2, #0]
 8005f1c:	4770      	bx	lr
 8005f1e:	2000      	movs	r0, #0
 8005f20:	4770      	bx	lr
 8005f22:	2020      	movs	r0, #32
 8005f24:	4770      	bx	lr
	...

08005f28 <__i2b>:
 8005f28:	b510      	push	{r4, lr}
 8005f2a:	460c      	mov	r4, r1
 8005f2c:	2101      	movs	r1, #1
 8005f2e:	f7ff febb 	bl	8005ca8 <_Balloc>
 8005f32:	4602      	mov	r2, r0
 8005f34:	b928      	cbnz	r0, 8005f42 <__i2b+0x1a>
 8005f36:	f240 1145 	movw	r1, #325	; 0x145
 8005f3a:	4b04      	ldr	r3, [pc, #16]	; (8005f4c <__i2b+0x24>)
 8005f3c:	4804      	ldr	r0, [pc, #16]	; (8005f50 <__i2b+0x28>)
 8005f3e:	f001 fc3f 	bl	80077c0 <__assert_func>
 8005f42:	2301      	movs	r3, #1
 8005f44:	6144      	str	r4, [r0, #20]
 8005f46:	6103      	str	r3, [r0, #16]
 8005f48:	bd10      	pop	{r4, pc}
 8005f4a:	bf00      	nop
 8005f4c:	08008603 	.word	0x08008603
 8005f50:	08008614 	.word	0x08008614

08005f54 <__multiply>:
 8005f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f58:	4691      	mov	r9, r2
 8005f5a:	690a      	ldr	r2, [r1, #16]
 8005f5c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005f60:	460c      	mov	r4, r1
 8005f62:	429a      	cmp	r2, r3
 8005f64:	bfbe      	ittt	lt
 8005f66:	460b      	movlt	r3, r1
 8005f68:	464c      	movlt	r4, r9
 8005f6a:	4699      	movlt	r9, r3
 8005f6c:	6927      	ldr	r7, [r4, #16]
 8005f6e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005f72:	68a3      	ldr	r3, [r4, #8]
 8005f74:	6861      	ldr	r1, [r4, #4]
 8005f76:	eb07 060a 	add.w	r6, r7, sl
 8005f7a:	42b3      	cmp	r3, r6
 8005f7c:	b085      	sub	sp, #20
 8005f7e:	bfb8      	it	lt
 8005f80:	3101      	addlt	r1, #1
 8005f82:	f7ff fe91 	bl	8005ca8 <_Balloc>
 8005f86:	b930      	cbnz	r0, 8005f96 <__multiply+0x42>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8005f8e:	4b43      	ldr	r3, [pc, #268]	; (800609c <__multiply+0x148>)
 8005f90:	4843      	ldr	r0, [pc, #268]	; (80060a0 <__multiply+0x14c>)
 8005f92:	f001 fc15 	bl	80077c0 <__assert_func>
 8005f96:	f100 0514 	add.w	r5, r0, #20
 8005f9a:	462b      	mov	r3, r5
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005fa2:	4543      	cmp	r3, r8
 8005fa4:	d321      	bcc.n	8005fea <__multiply+0x96>
 8005fa6:	f104 0314 	add.w	r3, r4, #20
 8005faa:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005fae:	f109 0314 	add.w	r3, r9, #20
 8005fb2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005fb6:	9202      	str	r2, [sp, #8]
 8005fb8:	1b3a      	subs	r2, r7, r4
 8005fba:	3a15      	subs	r2, #21
 8005fbc:	f022 0203 	bic.w	r2, r2, #3
 8005fc0:	3204      	adds	r2, #4
 8005fc2:	f104 0115 	add.w	r1, r4, #21
 8005fc6:	428f      	cmp	r7, r1
 8005fc8:	bf38      	it	cc
 8005fca:	2204      	movcc	r2, #4
 8005fcc:	9201      	str	r2, [sp, #4]
 8005fce:	9a02      	ldr	r2, [sp, #8]
 8005fd0:	9303      	str	r3, [sp, #12]
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d80c      	bhi.n	8005ff0 <__multiply+0x9c>
 8005fd6:	2e00      	cmp	r6, #0
 8005fd8:	dd03      	ble.n	8005fe2 <__multiply+0x8e>
 8005fda:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d05a      	beq.n	8006098 <__multiply+0x144>
 8005fe2:	6106      	str	r6, [r0, #16]
 8005fe4:	b005      	add	sp, #20
 8005fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fea:	f843 2b04 	str.w	r2, [r3], #4
 8005fee:	e7d8      	b.n	8005fa2 <__multiply+0x4e>
 8005ff0:	f8b3 a000 	ldrh.w	sl, [r3]
 8005ff4:	f1ba 0f00 	cmp.w	sl, #0
 8005ff8:	d023      	beq.n	8006042 <__multiply+0xee>
 8005ffa:	46a9      	mov	r9, r5
 8005ffc:	f04f 0c00 	mov.w	ip, #0
 8006000:	f104 0e14 	add.w	lr, r4, #20
 8006004:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006008:	f8d9 1000 	ldr.w	r1, [r9]
 800600c:	fa1f fb82 	uxth.w	fp, r2
 8006010:	b289      	uxth	r1, r1
 8006012:	fb0a 110b 	mla	r1, sl, fp, r1
 8006016:	4461      	add	r1, ip
 8006018:	f8d9 c000 	ldr.w	ip, [r9]
 800601c:	0c12      	lsrs	r2, r2, #16
 800601e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006022:	fb0a c202 	mla	r2, sl, r2, ip
 8006026:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800602a:	b289      	uxth	r1, r1
 800602c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006030:	4577      	cmp	r7, lr
 8006032:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006036:	f849 1b04 	str.w	r1, [r9], #4
 800603a:	d8e3      	bhi.n	8006004 <__multiply+0xb0>
 800603c:	9a01      	ldr	r2, [sp, #4]
 800603e:	f845 c002 	str.w	ip, [r5, r2]
 8006042:	9a03      	ldr	r2, [sp, #12]
 8006044:	3304      	adds	r3, #4
 8006046:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800604a:	f1b9 0f00 	cmp.w	r9, #0
 800604e:	d021      	beq.n	8006094 <__multiply+0x140>
 8006050:	46ae      	mov	lr, r5
 8006052:	f04f 0a00 	mov.w	sl, #0
 8006056:	6829      	ldr	r1, [r5, #0]
 8006058:	f104 0c14 	add.w	ip, r4, #20
 800605c:	f8bc b000 	ldrh.w	fp, [ip]
 8006060:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006064:	b289      	uxth	r1, r1
 8006066:	fb09 220b 	mla	r2, r9, fp, r2
 800606a:	4452      	add	r2, sl
 800606c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006070:	f84e 1b04 	str.w	r1, [lr], #4
 8006074:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006078:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800607c:	f8be 1000 	ldrh.w	r1, [lr]
 8006080:	4567      	cmp	r7, ip
 8006082:	fb09 110a 	mla	r1, r9, sl, r1
 8006086:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800608a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800608e:	d8e5      	bhi.n	800605c <__multiply+0x108>
 8006090:	9a01      	ldr	r2, [sp, #4]
 8006092:	50a9      	str	r1, [r5, r2]
 8006094:	3504      	adds	r5, #4
 8006096:	e79a      	b.n	8005fce <__multiply+0x7a>
 8006098:	3e01      	subs	r6, #1
 800609a:	e79c      	b.n	8005fd6 <__multiply+0x82>
 800609c:	08008603 	.word	0x08008603
 80060a0:	08008614 	.word	0x08008614

080060a4 <__pow5mult>:
 80060a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060a8:	4615      	mov	r5, r2
 80060aa:	f012 0203 	ands.w	r2, r2, #3
 80060ae:	4606      	mov	r6, r0
 80060b0:	460f      	mov	r7, r1
 80060b2:	d007      	beq.n	80060c4 <__pow5mult+0x20>
 80060b4:	4c25      	ldr	r4, [pc, #148]	; (800614c <__pow5mult+0xa8>)
 80060b6:	3a01      	subs	r2, #1
 80060b8:	2300      	movs	r3, #0
 80060ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80060be:	f7ff fe55 	bl	8005d6c <__multadd>
 80060c2:	4607      	mov	r7, r0
 80060c4:	10ad      	asrs	r5, r5, #2
 80060c6:	d03d      	beq.n	8006144 <__pow5mult+0xa0>
 80060c8:	69f4      	ldr	r4, [r6, #28]
 80060ca:	b97c      	cbnz	r4, 80060ec <__pow5mult+0x48>
 80060cc:	2010      	movs	r0, #16
 80060ce:	f7ff fd37 	bl	8005b40 <malloc>
 80060d2:	4602      	mov	r2, r0
 80060d4:	61f0      	str	r0, [r6, #28]
 80060d6:	b928      	cbnz	r0, 80060e4 <__pow5mult+0x40>
 80060d8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80060dc:	4b1c      	ldr	r3, [pc, #112]	; (8006150 <__pow5mult+0xac>)
 80060de:	481d      	ldr	r0, [pc, #116]	; (8006154 <__pow5mult+0xb0>)
 80060e0:	f001 fb6e 	bl	80077c0 <__assert_func>
 80060e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80060e8:	6004      	str	r4, [r0, #0]
 80060ea:	60c4      	str	r4, [r0, #12]
 80060ec:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80060f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80060f4:	b94c      	cbnz	r4, 800610a <__pow5mult+0x66>
 80060f6:	f240 2171 	movw	r1, #625	; 0x271
 80060fa:	4630      	mov	r0, r6
 80060fc:	f7ff ff14 	bl	8005f28 <__i2b>
 8006100:	2300      	movs	r3, #0
 8006102:	4604      	mov	r4, r0
 8006104:	f8c8 0008 	str.w	r0, [r8, #8]
 8006108:	6003      	str	r3, [r0, #0]
 800610a:	f04f 0900 	mov.w	r9, #0
 800610e:	07eb      	lsls	r3, r5, #31
 8006110:	d50a      	bpl.n	8006128 <__pow5mult+0x84>
 8006112:	4639      	mov	r1, r7
 8006114:	4622      	mov	r2, r4
 8006116:	4630      	mov	r0, r6
 8006118:	f7ff ff1c 	bl	8005f54 <__multiply>
 800611c:	4680      	mov	r8, r0
 800611e:	4639      	mov	r1, r7
 8006120:	4630      	mov	r0, r6
 8006122:	f7ff fe01 	bl	8005d28 <_Bfree>
 8006126:	4647      	mov	r7, r8
 8006128:	106d      	asrs	r5, r5, #1
 800612a:	d00b      	beq.n	8006144 <__pow5mult+0xa0>
 800612c:	6820      	ldr	r0, [r4, #0]
 800612e:	b938      	cbnz	r0, 8006140 <__pow5mult+0x9c>
 8006130:	4622      	mov	r2, r4
 8006132:	4621      	mov	r1, r4
 8006134:	4630      	mov	r0, r6
 8006136:	f7ff ff0d 	bl	8005f54 <__multiply>
 800613a:	6020      	str	r0, [r4, #0]
 800613c:	f8c0 9000 	str.w	r9, [r0]
 8006140:	4604      	mov	r4, r0
 8006142:	e7e4      	b.n	800610e <__pow5mult+0x6a>
 8006144:	4638      	mov	r0, r7
 8006146:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800614a:	bf00      	nop
 800614c:	08008760 	.word	0x08008760
 8006150:	08008594 	.word	0x08008594
 8006154:	08008614 	.word	0x08008614

08006158 <__lshift>:
 8006158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800615c:	460c      	mov	r4, r1
 800615e:	4607      	mov	r7, r0
 8006160:	4691      	mov	r9, r2
 8006162:	6923      	ldr	r3, [r4, #16]
 8006164:	6849      	ldr	r1, [r1, #4]
 8006166:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800616a:	68a3      	ldr	r3, [r4, #8]
 800616c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006170:	f108 0601 	add.w	r6, r8, #1
 8006174:	42b3      	cmp	r3, r6
 8006176:	db0b      	blt.n	8006190 <__lshift+0x38>
 8006178:	4638      	mov	r0, r7
 800617a:	f7ff fd95 	bl	8005ca8 <_Balloc>
 800617e:	4605      	mov	r5, r0
 8006180:	b948      	cbnz	r0, 8006196 <__lshift+0x3e>
 8006182:	4602      	mov	r2, r0
 8006184:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006188:	4b27      	ldr	r3, [pc, #156]	; (8006228 <__lshift+0xd0>)
 800618a:	4828      	ldr	r0, [pc, #160]	; (800622c <__lshift+0xd4>)
 800618c:	f001 fb18 	bl	80077c0 <__assert_func>
 8006190:	3101      	adds	r1, #1
 8006192:	005b      	lsls	r3, r3, #1
 8006194:	e7ee      	b.n	8006174 <__lshift+0x1c>
 8006196:	2300      	movs	r3, #0
 8006198:	f100 0114 	add.w	r1, r0, #20
 800619c:	f100 0210 	add.w	r2, r0, #16
 80061a0:	4618      	mov	r0, r3
 80061a2:	4553      	cmp	r3, sl
 80061a4:	db33      	blt.n	800620e <__lshift+0xb6>
 80061a6:	6920      	ldr	r0, [r4, #16]
 80061a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80061ac:	f104 0314 	add.w	r3, r4, #20
 80061b0:	f019 091f 	ands.w	r9, r9, #31
 80061b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80061b8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80061bc:	d02b      	beq.n	8006216 <__lshift+0xbe>
 80061be:	468a      	mov	sl, r1
 80061c0:	2200      	movs	r2, #0
 80061c2:	f1c9 0e20 	rsb	lr, r9, #32
 80061c6:	6818      	ldr	r0, [r3, #0]
 80061c8:	fa00 f009 	lsl.w	r0, r0, r9
 80061cc:	4310      	orrs	r0, r2
 80061ce:	f84a 0b04 	str.w	r0, [sl], #4
 80061d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80061d6:	459c      	cmp	ip, r3
 80061d8:	fa22 f20e 	lsr.w	r2, r2, lr
 80061dc:	d8f3      	bhi.n	80061c6 <__lshift+0x6e>
 80061de:	ebac 0304 	sub.w	r3, ip, r4
 80061e2:	3b15      	subs	r3, #21
 80061e4:	f023 0303 	bic.w	r3, r3, #3
 80061e8:	3304      	adds	r3, #4
 80061ea:	f104 0015 	add.w	r0, r4, #21
 80061ee:	4584      	cmp	ip, r0
 80061f0:	bf38      	it	cc
 80061f2:	2304      	movcc	r3, #4
 80061f4:	50ca      	str	r2, [r1, r3]
 80061f6:	b10a      	cbz	r2, 80061fc <__lshift+0xa4>
 80061f8:	f108 0602 	add.w	r6, r8, #2
 80061fc:	3e01      	subs	r6, #1
 80061fe:	4638      	mov	r0, r7
 8006200:	4621      	mov	r1, r4
 8006202:	612e      	str	r6, [r5, #16]
 8006204:	f7ff fd90 	bl	8005d28 <_Bfree>
 8006208:	4628      	mov	r0, r5
 800620a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800620e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006212:	3301      	adds	r3, #1
 8006214:	e7c5      	b.n	80061a2 <__lshift+0x4a>
 8006216:	3904      	subs	r1, #4
 8006218:	f853 2b04 	ldr.w	r2, [r3], #4
 800621c:	459c      	cmp	ip, r3
 800621e:	f841 2f04 	str.w	r2, [r1, #4]!
 8006222:	d8f9      	bhi.n	8006218 <__lshift+0xc0>
 8006224:	e7ea      	b.n	80061fc <__lshift+0xa4>
 8006226:	bf00      	nop
 8006228:	08008603 	.word	0x08008603
 800622c:	08008614 	.word	0x08008614

08006230 <__mcmp>:
 8006230:	4603      	mov	r3, r0
 8006232:	690a      	ldr	r2, [r1, #16]
 8006234:	6900      	ldr	r0, [r0, #16]
 8006236:	b530      	push	{r4, r5, lr}
 8006238:	1a80      	subs	r0, r0, r2
 800623a:	d10d      	bne.n	8006258 <__mcmp+0x28>
 800623c:	3314      	adds	r3, #20
 800623e:	3114      	adds	r1, #20
 8006240:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006244:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006248:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800624c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006250:	4295      	cmp	r5, r2
 8006252:	d002      	beq.n	800625a <__mcmp+0x2a>
 8006254:	d304      	bcc.n	8006260 <__mcmp+0x30>
 8006256:	2001      	movs	r0, #1
 8006258:	bd30      	pop	{r4, r5, pc}
 800625a:	42a3      	cmp	r3, r4
 800625c:	d3f4      	bcc.n	8006248 <__mcmp+0x18>
 800625e:	e7fb      	b.n	8006258 <__mcmp+0x28>
 8006260:	f04f 30ff 	mov.w	r0, #4294967295
 8006264:	e7f8      	b.n	8006258 <__mcmp+0x28>
	...

08006268 <__mdiff>:
 8006268:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800626c:	460d      	mov	r5, r1
 800626e:	4607      	mov	r7, r0
 8006270:	4611      	mov	r1, r2
 8006272:	4628      	mov	r0, r5
 8006274:	4614      	mov	r4, r2
 8006276:	f7ff ffdb 	bl	8006230 <__mcmp>
 800627a:	1e06      	subs	r6, r0, #0
 800627c:	d111      	bne.n	80062a2 <__mdiff+0x3a>
 800627e:	4631      	mov	r1, r6
 8006280:	4638      	mov	r0, r7
 8006282:	f7ff fd11 	bl	8005ca8 <_Balloc>
 8006286:	4602      	mov	r2, r0
 8006288:	b928      	cbnz	r0, 8006296 <__mdiff+0x2e>
 800628a:	f240 2137 	movw	r1, #567	; 0x237
 800628e:	4b3a      	ldr	r3, [pc, #232]	; (8006378 <__mdiff+0x110>)
 8006290:	483a      	ldr	r0, [pc, #232]	; (800637c <__mdiff+0x114>)
 8006292:	f001 fa95 	bl	80077c0 <__assert_func>
 8006296:	2301      	movs	r3, #1
 8006298:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800629c:	4610      	mov	r0, r2
 800629e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062a2:	bfa4      	itt	ge
 80062a4:	4623      	movge	r3, r4
 80062a6:	462c      	movge	r4, r5
 80062a8:	4638      	mov	r0, r7
 80062aa:	6861      	ldr	r1, [r4, #4]
 80062ac:	bfa6      	itte	ge
 80062ae:	461d      	movge	r5, r3
 80062b0:	2600      	movge	r6, #0
 80062b2:	2601      	movlt	r6, #1
 80062b4:	f7ff fcf8 	bl	8005ca8 <_Balloc>
 80062b8:	4602      	mov	r2, r0
 80062ba:	b918      	cbnz	r0, 80062c4 <__mdiff+0x5c>
 80062bc:	f240 2145 	movw	r1, #581	; 0x245
 80062c0:	4b2d      	ldr	r3, [pc, #180]	; (8006378 <__mdiff+0x110>)
 80062c2:	e7e5      	b.n	8006290 <__mdiff+0x28>
 80062c4:	f102 0814 	add.w	r8, r2, #20
 80062c8:	46c2      	mov	sl, r8
 80062ca:	f04f 0c00 	mov.w	ip, #0
 80062ce:	6927      	ldr	r7, [r4, #16]
 80062d0:	60c6      	str	r6, [r0, #12]
 80062d2:	692e      	ldr	r6, [r5, #16]
 80062d4:	f104 0014 	add.w	r0, r4, #20
 80062d8:	f105 0914 	add.w	r9, r5, #20
 80062dc:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80062e0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80062e4:	3410      	adds	r4, #16
 80062e6:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80062ea:	f859 3b04 	ldr.w	r3, [r9], #4
 80062ee:	fa1f f18b 	uxth.w	r1, fp
 80062f2:	4461      	add	r1, ip
 80062f4:	fa1f fc83 	uxth.w	ip, r3
 80062f8:	0c1b      	lsrs	r3, r3, #16
 80062fa:	eba1 010c 	sub.w	r1, r1, ip
 80062fe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006302:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006306:	b289      	uxth	r1, r1
 8006308:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800630c:	454e      	cmp	r6, r9
 800630e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006312:	f84a 1b04 	str.w	r1, [sl], #4
 8006316:	d8e6      	bhi.n	80062e6 <__mdiff+0x7e>
 8006318:	1b73      	subs	r3, r6, r5
 800631a:	3b15      	subs	r3, #21
 800631c:	f023 0303 	bic.w	r3, r3, #3
 8006320:	3515      	adds	r5, #21
 8006322:	3304      	adds	r3, #4
 8006324:	42ae      	cmp	r6, r5
 8006326:	bf38      	it	cc
 8006328:	2304      	movcc	r3, #4
 800632a:	4418      	add	r0, r3
 800632c:	4443      	add	r3, r8
 800632e:	461e      	mov	r6, r3
 8006330:	4605      	mov	r5, r0
 8006332:	4575      	cmp	r5, lr
 8006334:	d30e      	bcc.n	8006354 <__mdiff+0xec>
 8006336:	f10e 0103 	add.w	r1, lr, #3
 800633a:	1a09      	subs	r1, r1, r0
 800633c:	f021 0103 	bic.w	r1, r1, #3
 8006340:	3803      	subs	r0, #3
 8006342:	4586      	cmp	lr, r0
 8006344:	bf38      	it	cc
 8006346:	2100      	movcc	r1, #0
 8006348:	440b      	add	r3, r1
 800634a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800634e:	b189      	cbz	r1, 8006374 <__mdiff+0x10c>
 8006350:	6117      	str	r7, [r2, #16]
 8006352:	e7a3      	b.n	800629c <__mdiff+0x34>
 8006354:	f855 8b04 	ldr.w	r8, [r5], #4
 8006358:	fa1f f188 	uxth.w	r1, r8
 800635c:	4461      	add	r1, ip
 800635e:	140c      	asrs	r4, r1, #16
 8006360:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006364:	b289      	uxth	r1, r1
 8006366:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800636a:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800636e:	f846 1b04 	str.w	r1, [r6], #4
 8006372:	e7de      	b.n	8006332 <__mdiff+0xca>
 8006374:	3f01      	subs	r7, #1
 8006376:	e7e8      	b.n	800634a <__mdiff+0xe2>
 8006378:	08008603 	.word	0x08008603
 800637c:	08008614 	.word	0x08008614

08006380 <__ulp>:
 8006380:	4b0e      	ldr	r3, [pc, #56]	; (80063bc <__ulp+0x3c>)
 8006382:	400b      	ands	r3, r1
 8006384:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006388:	2b00      	cmp	r3, #0
 800638a:	dc08      	bgt.n	800639e <__ulp+0x1e>
 800638c:	425b      	negs	r3, r3
 800638e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8006392:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006396:	da04      	bge.n	80063a2 <__ulp+0x22>
 8006398:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800639c:	4113      	asrs	r3, r2
 800639e:	2200      	movs	r2, #0
 80063a0:	e008      	b.n	80063b4 <__ulp+0x34>
 80063a2:	f1a2 0314 	sub.w	r3, r2, #20
 80063a6:	2b1e      	cmp	r3, #30
 80063a8:	bfd6      	itet	le
 80063aa:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80063ae:	2201      	movgt	r2, #1
 80063b0:	40da      	lsrle	r2, r3
 80063b2:	2300      	movs	r3, #0
 80063b4:	4619      	mov	r1, r3
 80063b6:	4610      	mov	r0, r2
 80063b8:	4770      	bx	lr
 80063ba:	bf00      	nop
 80063bc:	7ff00000 	.word	0x7ff00000

080063c0 <__b2d>:
 80063c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063c2:	6905      	ldr	r5, [r0, #16]
 80063c4:	f100 0714 	add.w	r7, r0, #20
 80063c8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80063cc:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80063d0:	1f2e      	subs	r6, r5, #4
 80063d2:	4620      	mov	r0, r4
 80063d4:	f7ff fd5a 	bl	8005e8c <__hi0bits>
 80063d8:	f1c0 0220 	rsb	r2, r0, #32
 80063dc:	280a      	cmp	r0, #10
 80063de:	4603      	mov	r3, r0
 80063e0:	f8df c068 	ldr.w	ip, [pc, #104]	; 800644c <__b2d+0x8c>
 80063e4:	600a      	str	r2, [r1, #0]
 80063e6:	dc12      	bgt.n	800640e <__b2d+0x4e>
 80063e8:	f1c0 0e0b 	rsb	lr, r0, #11
 80063ec:	fa24 f20e 	lsr.w	r2, r4, lr
 80063f0:	42b7      	cmp	r7, r6
 80063f2:	ea42 010c 	orr.w	r1, r2, ip
 80063f6:	bf2c      	ite	cs
 80063f8:	2200      	movcs	r2, #0
 80063fa:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 80063fe:	3315      	adds	r3, #21
 8006400:	fa04 f303 	lsl.w	r3, r4, r3
 8006404:	fa22 f20e 	lsr.w	r2, r2, lr
 8006408:	431a      	orrs	r2, r3
 800640a:	4610      	mov	r0, r2
 800640c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800640e:	42b7      	cmp	r7, r6
 8006410:	bf2e      	itee	cs
 8006412:	2200      	movcs	r2, #0
 8006414:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8006418:	f1a5 0608 	subcc.w	r6, r5, #8
 800641c:	3b0b      	subs	r3, #11
 800641e:	d012      	beq.n	8006446 <__b2d+0x86>
 8006420:	f1c3 0520 	rsb	r5, r3, #32
 8006424:	fa22 f105 	lsr.w	r1, r2, r5
 8006428:	409c      	lsls	r4, r3
 800642a:	430c      	orrs	r4, r1
 800642c:	42be      	cmp	r6, r7
 800642e:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 8006432:	bf94      	ite	ls
 8006434:	2400      	movls	r4, #0
 8006436:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800643a:	409a      	lsls	r2, r3
 800643c:	40ec      	lsrs	r4, r5
 800643e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006442:	4322      	orrs	r2, r4
 8006444:	e7e1      	b.n	800640a <__b2d+0x4a>
 8006446:	ea44 010c 	orr.w	r1, r4, ip
 800644a:	e7de      	b.n	800640a <__b2d+0x4a>
 800644c:	3ff00000 	.word	0x3ff00000

08006450 <__d2b>:
 8006450:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006452:	2101      	movs	r1, #1
 8006454:	4617      	mov	r7, r2
 8006456:	461c      	mov	r4, r3
 8006458:	9e08      	ldr	r6, [sp, #32]
 800645a:	f7ff fc25 	bl	8005ca8 <_Balloc>
 800645e:	4605      	mov	r5, r0
 8006460:	b930      	cbnz	r0, 8006470 <__d2b+0x20>
 8006462:	4602      	mov	r2, r0
 8006464:	f240 310f 	movw	r1, #783	; 0x30f
 8006468:	4b22      	ldr	r3, [pc, #136]	; (80064f4 <__d2b+0xa4>)
 800646a:	4823      	ldr	r0, [pc, #140]	; (80064f8 <__d2b+0xa8>)
 800646c:	f001 f9a8 	bl	80077c0 <__assert_func>
 8006470:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8006474:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8006478:	bb24      	cbnz	r4, 80064c4 <__d2b+0x74>
 800647a:	2f00      	cmp	r7, #0
 800647c:	9301      	str	r3, [sp, #4]
 800647e:	d026      	beq.n	80064ce <__d2b+0x7e>
 8006480:	4668      	mov	r0, sp
 8006482:	9700      	str	r7, [sp, #0]
 8006484:	f7ff fd22 	bl	8005ecc <__lo0bits>
 8006488:	e9dd 1200 	ldrd	r1, r2, [sp]
 800648c:	b1e8      	cbz	r0, 80064ca <__d2b+0x7a>
 800648e:	f1c0 0320 	rsb	r3, r0, #32
 8006492:	fa02 f303 	lsl.w	r3, r2, r3
 8006496:	430b      	orrs	r3, r1
 8006498:	40c2      	lsrs	r2, r0
 800649a:	616b      	str	r3, [r5, #20]
 800649c:	9201      	str	r2, [sp, #4]
 800649e:	9b01      	ldr	r3, [sp, #4]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	bf14      	ite	ne
 80064a4:	2102      	movne	r1, #2
 80064a6:	2101      	moveq	r1, #1
 80064a8:	61ab      	str	r3, [r5, #24]
 80064aa:	6129      	str	r1, [r5, #16]
 80064ac:	b1bc      	cbz	r4, 80064de <__d2b+0x8e>
 80064ae:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80064b2:	4404      	add	r4, r0
 80064b4:	6034      	str	r4, [r6, #0]
 80064b6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80064ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064bc:	6018      	str	r0, [r3, #0]
 80064be:	4628      	mov	r0, r5
 80064c0:	b003      	add	sp, #12
 80064c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80064c8:	e7d7      	b.n	800647a <__d2b+0x2a>
 80064ca:	6169      	str	r1, [r5, #20]
 80064cc:	e7e7      	b.n	800649e <__d2b+0x4e>
 80064ce:	a801      	add	r0, sp, #4
 80064d0:	f7ff fcfc 	bl	8005ecc <__lo0bits>
 80064d4:	9b01      	ldr	r3, [sp, #4]
 80064d6:	2101      	movs	r1, #1
 80064d8:	616b      	str	r3, [r5, #20]
 80064da:	3020      	adds	r0, #32
 80064dc:	e7e5      	b.n	80064aa <__d2b+0x5a>
 80064de:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80064e2:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 80064e6:	6030      	str	r0, [r6, #0]
 80064e8:	6918      	ldr	r0, [r3, #16]
 80064ea:	f7ff fccf 	bl	8005e8c <__hi0bits>
 80064ee:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80064f2:	e7e2      	b.n	80064ba <__d2b+0x6a>
 80064f4:	08008603 	.word	0x08008603
 80064f8:	08008614 	.word	0x08008614

080064fc <__ratio>:
 80064fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006500:	4688      	mov	r8, r1
 8006502:	4669      	mov	r1, sp
 8006504:	4681      	mov	r9, r0
 8006506:	f7ff ff5b 	bl	80063c0 <__b2d>
 800650a:	460f      	mov	r7, r1
 800650c:	4604      	mov	r4, r0
 800650e:	460d      	mov	r5, r1
 8006510:	4640      	mov	r0, r8
 8006512:	a901      	add	r1, sp, #4
 8006514:	f7ff ff54 	bl	80063c0 <__b2d>
 8006518:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800651c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006520:	468b      	mov	fp, r1
 8006522:	eba3 0c02 	sub.w	ip, r3, r2
 8006526:	e9dd 3200 	ldrd	r3, r2, [sp]
 800652a:	1a9b      	subs	r3, r3, r2
 800652c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006530:	2b00      	cmp	r3, #0
 8006532:	bfd5      	itete	le
 8006534:	460a      	movle	r2, r1
 8006536:	462a      	movgt	r2, r5
 8006538:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800653c:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006540:	bfd8      	it	le
 8006542:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8006546:	465b      	mov	r3, fp
 8006548:	4602      	mov	r2, r0
 800654a:	4639      	mov	r1, r7
 800654c:	4620      	mov	r0, r4
 800654e:	f7fa f8ed 	bl	800072c <__aeabi_ddiv>
 8006552:	b003      	add	sp, #12
 8006554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006558 <__copybits>:
 8006558:	3901      	subs	r1, #1
 800655a:	b570      	push	{r4, r5, r6, lr}
 800655c:	1149      	asrs	r1, r1, #5
 800655e:	6914      	ldr	r4, [r2, #16]
 8006560:	3101      	adds	r1, #1
 8006562:	f102 0314 	add.w	r3, r2, #20
 8006566:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800656a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800656e:	1f05      	subs	r5, r0, #4
 8006570:	42a3      	cmp	r3, r4
 8006572:	d30c      	bcc.n	800658e <__copybits+0x36>
 8006574:	1aa3      	subs	r3, r4, r2
 8006576:	3b11      	subs	r3, #17
 8006578:	f023 0303 	bic.w	r3, r3, #3
 800657c:	3211      	adds	r2, #17
 800657e:	42a2      	cmp	r2, r4
 8006580:	bf88      	it	hi
 8006582:	2300      	movhi	r3, #0
 8006584:	4418      	add	r0, r3
 8006586:	2300      	movs	r3, #0
 8006588:	4288      	cmp	r0, r1
 800658a:	d305      	bcc.n	8006598 <__copybits+0x40>
 800658c:	bd70      	pop	{r4, r5, r6, pc}
 800658e:	f853 6b04 	ldr.w	r6, [r3], #4
 8006592:	f845 6f04 	str.w	r6, [r5, #4]!
 8006596:	e7eb      	b.n	8006570 <__copybits+0x18>
 8006598:	f840 3b04 	str.w	r3, [r0], #4
 800659c:	e7f4      	b.n	8006588 <__copybits+0x30>

0800659e <__any_on>:
 800659e:	f100 0214 	add.w	r2, r0, #20
 80065a2:	6900      	ldr	r0, [r0, #16]
 80065a4:	114b      	asrs	r3, r1, #5
 80065a6:	4298      	cmp	r0, r3
 80065a8:	b510      	push	{r4, lr}
 80065aa:	db11      	blt.n	80065d0 <__any_on+0x32>
 80065ac:	dd0a      	ble.n	80065c4 <__any_on+0x26>
 80065ae:	f011 011f 	ands.w	r1, r1, #31
 80065b2:	d007      	beq.n	80065c4 <__any_on+0x26>
 80065b4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80065b8:	fa24 f001 	lsr.w	r0, r4, r1
 80065bc:	fa00 f101 	lsl.w	r1, r0, r1
 80065c0:	428c      	cmp	r4, r1
 80065c2:	d10b      	bne.n	80065dc <__any_on+0x3e>
 80065c4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d803      	bhi.n	80065d4 <__any_on+0x36>
 80065cc:	2000      	movs	r0, #0
 80065ce:	bd10      	pop	{r4, pc}
 80065d0:	4603      	mov	r3, r0
 80065d2:	e7f7      	b.n	80065c4 <__any_on+0x26>
 80065d4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80065d8:	2900      	cmp	r1, #0
 80065da:	d0f5      	beq.n	80065c8 <__any_on+0x2a>
 80065dc:	2001      	movs	r0, #1
 80065de:	e7f6      	b.n	80065ce <__any_on+0x30>

080065e0 <sulp>:
 80065e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065e4:	460f      	mov	r7, r1
 80065e6:	4690      	mov	r8, r2
 80065e8:	f7ff feca 	bl	8006380 <__ulp>
 80065ec:	4604      	mov	r4, r0
 80065ee:	460d      	mov	r5, r1
 80065f0:	f1b8 0f00 	cmp.w	r8, #0
 80065f4:	d011      	beq.n	800661a <sulp+0x3a>
 80065f6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80065fa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80065fe:	2b00      	cmp	r3, #0
 8006600:	dd0b      	ble.n	800661a <sulp+0x3a>
 8006602:	2400      	movs	r4, #0
 8006604:	051b      	lsls	r3, r3, #20
 8006606:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800660a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800660e:	4622      	mov	r2, r4
 8006610:	462b      	mov	r3, r5
 8006612:	f7f9 ff61 	bl	80004d8 <__aeabi_dmul>
 8006616:	4604      	mov	r4, r0
 8006618:	460d      	mov	r5, r1
 800661a:	4620      	mov	r0, r4
 800661c:	4629      	mov	r1, r5
 800661e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006622:	0000      	movs	r0, r0
 8006624:	0000      	movs	r0, r0
	...

08006628 <_strtod_l>:
 8006628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800662c:	b09f      	sub	sp, #124	; 0x7c
 800662e:	9217      	str	r2, [sp, #92]	; 0x5c
 8006630:	2200      	movs	r2, #0
 8006632:	4604      	mov	r4, r0
 8006634:	921a      	str	r2, [sp, #104]	; 0x68
 8006636:	460d      	mov	r5, r1
 8006638:	f04f 0800 	mov.w	r8, #0
 800663c:	f04f 0900 	mov.w	r9, #0
 8006640:	460a      	mov	r2, r1
 8006642:	9219      	str	r2, [sp, #100]	; 0x64
 8006644:	7811      	ldrb	r1, [r2, #0]
 8006646:	292b      	cmp	r1, #43	; 0x2b
 8006648:	d04a      	beq.n	80066e0 <_strtod_l+0xb8>
 800664a:	d838      	bhi.n	80066be <_strtod_l+0x96>
 800664c:	290d      	cmp	r1, #13
 800664e:	d832      	bhi.n	80066b6 <_strtod_l+0x8e>
 8006650:	2908      	cmp	r1, #8
 8006652:	d832      	bhi.n	80066ba <_strtod_l+0x92>
 8006654:	2900      	cmp	r1, #0
 8006656:	d03b      	beq.n	80066d0 <_strtod_l+0xa8>
 8006658:	2200      	movs	r2, #0
 800665a:	920e      	str	r2, [sp, #56]	; 0x38
 800665c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800665e:	7832      	ldrb	r2, [r6, #0]
 8006660:	2a30      	cmp	r2, #48	; 0x30
 8006662:	f040 80b2 	bne.w	80067ca <_strtod_l+0x1a2>
 8006666:	7872      	ldrb	r2, [r6, #1]
 8006668:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800666c:	2a58      	cmp	r2, #88	; 0x58
 800666e:	d16e      	bne.n	800674e <_strtod_l+0x126>
 8006670:	9302      	str	r3, [sp, #8]
 8006672:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006674:	4620      	mov	r0, r4
 8006676:	9301      	str	r3, [sp, #4]
 8006678:	ab1a      	add	r3, sp, #104	; 0x68
 800667a:	9300      	str	r3, [sp, #0]
 800667c:	4a8c      	ldr	r2, [pc, #560]	; (80068b0 <_strtod_l+0x288>)
 800667e:	ab1b      	add	r3, sp, #108	; 0x6c
 8006680:	a919      	add	r1, sp, #100	; 0x64
 8006682:	f001 f937 	bl	80078f4 <__gethex>
 8006686:	f010 070f 	ands.w	r7, r0, #15
 800668a:	4605      	mov	r5, r0
 800668c:	d005      	beq.n	800669a <_strtod_l+0x72>
 800668e:	2f06      	cmp	r7, #6
 8006690:	d128      	bne.n	80066e4 <_strtod_l+0xbc>
 8006692:	2300      	movs	r3, #0
 8006694:	3601      	adds	r6, #1
 8006696:	9619      	str	r6, [sp, #100]	; 0x64
 8006698:	930e      	str	r3, [sp, #56]	; 0x38
 800669a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800669c:	2b00      	cmp	r3, #0
 800669e:	f040 85a0 	bne.w	80071e2 <_strtod_l+0xbba>
 80066a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80066a4:	b1cb      	cbz	r3, 80066da <_strtod_l+0xb2>
 80066a6:	4642      	mov	r2, r8
 80066a8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80066ac:	4610      	mov	r0, r2
 80066ae:	4619      	mov	r1, r3
 80066b0:	b01f      	add	sp, #124	; 0x7c
 80066b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066b6:	2920      	cmp	r1, #32
 80066b8:	d1ce      	bne.n	8006658 <_strtod_l+0x30>
 80066ba:	3201      	adds	r2, #1
 80066bc:	e7c1      	b.n	8006642 <_strtod_l+0x1a>
 80066be:	292d      	cmp	r1, #45	; 0x2d
 80066c0:	d1ca      	bne.n	8006658 <_strtod_l+0x30>
 80066c2:	2101      	movs	r1, #1
 80066c4:	910e      	str	r1, [sp, #56]	; 0x38
 80066c6:	1c51      	adds	r1, r2, #1
 80066c8:	9119      	str	r1, [sp, #100]	; 0x64
 80066ca:	7852      	ldrb	r2, [r2, #1]
 80066cc:	2a00      	cmp	r2, #0
 80066ce:	d1c5      	bne.n	800665c <_strtod_l+0x34>
 80066d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80066d2:	9519      	str	r5, [sp, #100]	; 0x64
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	f040 8582 	bne.w	80071de <_strtod_l+0xbb6>
 80066da:	4642      	mov	r2, r8
 80066dc:	464b      	mov	r3, r9
 80066de:	e7e5      	b.n	80066ac <_strtod_l+0x84>
 80066e0:	2100      	movs	r1, #0
 80066e2:	e7ef      	b.n	80066c4 <_strtod_l+0x9c>
 80066e4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80066e6:	b13a      	cbz	r2, 80066f8 <_strtod_l+0xd0>
 80066e8:	2135      	movs	r1, #53	; 0x35
 80066ea:	a81c      	add	r0, sp, #112	; 0x70
 80066ec:	f7ff ff34 	bl	8006558 <__copybits>
 80066f0:	4620      	mov	r0, r4
 80066f2:	991a      	ldr	r1, [sp, #104]	; 0x68
 80066f4:	f7ff fb18 	bl	8005d28 <_Bfree>
 80066f8:	3f01      	subs	r7, #1
 80066fa:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80066fc:	2f04      	cmp	r7, #4
 80066fe:	d806      	bhi.n	800670e <_strtod_l+0xe6>
 8006700:	e8df f007 	tbb	[pc, r7]
 8006704:	201d0314 	.word	0x201d0314
 8006708:	14          	.byte	0x14
 8006709:	00          	.byte	0x00
 800670a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800670e:	05e9      	lsls	r1, r5, #23
 8006710:	bf48      	it	mi
 8006712:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8006716:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800671a:	0d1b      	lsrs	r3, r3, #20
 800671c:	051b      	lsls	r3, r3, #20
 800671e:	2b00      	cmp	r3, #0
 8006720:	d1bb      	bne.n	800669a <_strtod_l+0x72>
 8006722:	f7fe fb17 	bl	8004d54 <__errno>
 8006726:	2322      	movs	r3, #34	; 0x22
 8006728:	6003      	str	r3, [r0, #0]
 800672a:	e7b6      	b.n	800669a <_strtod_l+0x72>
 800672c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006730:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8006734:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006738:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800673c:	e7e7      	b.n	800670e <_strtod_l+0xe6>
 800673e:	f8df 9174 	ldr.w	r9, [pc, #372]	; 80068b4 <_strtod_l+0x28c>
 8006742:	e7e4      	b.n	800670e <_strtod_l+0xe6>
 8006744:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8006748:	f04f 38ff 	mov.w	r8, #4294967295
 800674c:	e7df      	b.n	800670e <_strtod_l+0xe6>
 800674e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006750:	1c5a      	adds	r2, r3, #1
 8006752:	9219      	str	r2, [sp, #100]	; 0x64
 8006754:	785b      	ldrb	r3, [r3, #1]
 8006756:	2b30      	cmp	r3, #48	; 0x30
 8006758:	d0f9      	beq.n	800674e <_strtod_l+0x126>
 800675a:	2b00      	cmp	r3, #0
 800675c:	d09d      	beq.n	800669a <_strtod_l+0x72>
 800675e:	2301      	movs	r3, #1
 8006760:	f04f 0a00 	mov.w	sl, #0
 8006764:	220a      	movs	r2, #10
 8006766:	46d3      	mov	fp, sl
 8006768:	9305      	str	r3, [sp, #20]
 800676a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800676c:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8006770:	930b      	str	r3, [sp, #44]	; 0x2c
 8006772:	9819      	ldr	r0, [sp, #100]	; 0x64
 8006774:	7806      	ldrb	r6, [r0, #0]
 8006776:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800677a:	b2d9      	uxtb	r1, r3
 800677c:	2909      	cmp	r1, #9
 800677e:	d926      	bls.n	80067ce <_strtod_l+0x1a6>
 8006780:	2201      	movs	r2, #1
 8006782:	494d      	ldr	r1, [pc, #308]	; (80068b8 <_strtod_l+0x290>)
 8006784:	f000 ffe6 	bl	8007754 <strncmp>
 8006788:	2800      	cmp	r0, #0
 800678a:	d030      	beq.n	80067ee <_strtod_l+0x1c6>
 800678c:	2000      	movs	r0, #0
 800678e:	4632      	mov	r2, r6
 8006790:	4603      	mov	r3, r0
 8006792:	465e      	mov	r6, fp
 8006794:	9008      	str	r0, [sp, #32]
 8006796:	2a65      	cmp	r2, #101	; 0x65
 8006798:	d001      	beq.n	800679e <_strtod_l+0x176>
 800679a:	2a45      	cmp	r2, #69	; 0x45
 800679c:	d113      	bne.n	80067c6 <_strtod_l+0x19e>
 800679e:	b91e      	cbnz	r6, 80067a8 <_strtod_l+0x180>
 80067a0:	9a05      	ldr	r2, [sp, #20]
 80067a2:	4302      	orrs	r2, r0
 80067a4:	d094      	beq.n	80066d0 <_strtod_l+0xa8>
 80067a6:	2600      	movs	r6, #0
 80067a8:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80067aa:	1c6a      	adds	r2, r5, #1
 80067ac:	9219      	str	r2, [sp, #100]	; 0x64
 80067ae:	786a      	ldrb	r2, [r5, #1]
 80067b0:	2a2b      	cmp	r2, #43	; 0x2b
 80067b2:	d074      	beq.n	800689e <_strtod_l+0x276>
 80067b4:	2a2d      	cmp	r2, #45	; 0x2d
 80067b6:	d078      	beq.n	80068aa <_strtod_l+0x282>
 80067b8:	f04f 0c00 	mov.w	ip, #0
 80067bc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80067c0:	2909      	cmp	r1, #9
 80067c2:	d97f      	bls.n	80068c4 <_strtod_l+0x29c>
 80067c4:	9519      	str	r5, [sp, #100]	; 0x64
 80067c6:	2700      	movs	r7, #0
 80067c8:	e09e      	b.n	8006908 <_strtod_l+0x2e0>
 80067ca:	2300      	movs	r3, #0
 80067cc:	e7c8      	b.n	8006760 <_strtod_l+0x138>
 80067ce:	f1bb 0f08 	cmp.w	fp, #8
 80067d2:	bfd8      	it	le
 80067d4:	990a      	ldrle	r1, [sp, #40]	; 0x28
 80067d6:	f100 0001 	add.w	r0, r0, #1
 80067da:	bfd6      	itet	le
 80067dc:	fb02 3301 	mlale	r3, r2, r1, r3
 80067e0:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80067e4:	930a      	strle	r3, [sp, #40]	; 0x28
 80067e6:	f10b 0b01 	add.w	fp, fp, #1
 80067ea:	9019      	str	r0, [sp, #100]	; 0x64
 80067ec:	e7c1      	b.n	8006772 <_strtod_l+0x14a>
 80067ee:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80067f0:	1c5a      	adds	r2, r3, #1
 80067f2:	9219      	str	r2, [sp, #100]	; 0x64
 80067f4:	785a      	ldrb	r2, [r3, #1]
 80067f6:	f1bb 0f00 	cmp.w	fp, #0
 80067fa:	d037      	beq.n	800686c <_strtod_l+0x244>
 80067fc:	465e      	mov	r6, fp
 80067fe:	9008      	str	r0, [sp, #32]
 8006800:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006804:	2b09      	cmp	r3, #9
 8006806:	d912      	bls.n	800682e <_strtod_l+0x206>
 8006808:	2301      	movs	r3, #1
 800680a:	e7c4      	b.n	8006796 <_strtod_l+0x16e>
 800680c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800680e:	3001      	adds	r0, #1
 8006810:	1c5a      	adds	r2, r3, #1
 8006812:	9219      	str	r2, [sp, #100]	; 0x64
 8006814:	785a      	ldrb	r2, [r3, #1]
 8006816:	2a30      	cmp	r2, #48	; 0x30
 8006818:	d0f8      	beq.n	800680c <_strtod_l+0x1e4>
 800681a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800681e:	2b08      	cmp	r3, #8
 8006820:	f200 84e4 	bhi.w	80071ec <_strtod_l+0xbc4>
 8006824:	9008      	str	r0, [sp, #32]
 8006826:	2000      	movs	r0, #0
 8006828:	4606      	mov	r6, r0
 800682a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800682c:	930b      	str	r3, [sp, #44]	; 0x2c
 800682e:	3a30      	subs	r2, #48	; 0x30
 8006830:	f100 0301 	add.w	r3, r0, #1
 8006834:	d014      	beq.n	8006860 <_strtod_l+0x238>
 8006836:	9908      	ldr	r1, [sp, #32]
 8006838:	eb00 0c06 	add.w	ip, r0, r6
 800683c:	4419      	add	r1, r3
 800683e:	9108      	str	r1, [sp, #32]
 8006840:	4633      	mov	r3, r6
 8006842:	210a      	movs	r1, #10
 8006844:	4563      	cmp	r3, ip
 8006846:	d113      	bne.n	8006870 <_strtod_l+0x248>
 8006848:	1833      	adds	r3, r6, r0
 800684a:	2b08      	cmp	r3, #8
 800684c:	f106 0601 	add.w	r6, r6, #1
 8006850:	4406      	add	r6, r0
 8006852:	dc1a      	bgt.n	800688a <_strtod_l+0x262>
 8006854:	230a      	movs	r3, #10
 8006856:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006858:	fb03 2301 	mla	r3, r3, r1, r2
 800685c:	930a      	str	r3, [sp, #40]	; 0x28
 800685e:	2300      	movs	r3, #0
 8006860:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006862:	4618      	mov	r0, r3
 8006864:	1c51      	adds	r1, r2, #1
 8006866:	9119      	str	r1, [sp, #100]	; 0x64
 8006868:	7852      	ldrb	r2, [r2, #1]
 800686a:	e7c9      	b.n	8006800 <_strtod_l+0x1d8>
 800686c:	4658      	mov	r0, fp
 800686e:	e7d2      	b.n	8006816 <_strtod_l+0x1ee>
 8006870:	2b08      	cmp	r3, #8
 8006872:	f103 0301 	add.w	r3, r3, #1
 8006876:	dc03      	bgt.n	8006880 <_strtod_l+0x258>
 8006878:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800687a:	434f      	muls	r7, r1
 800687c:	970a      	str	r7, [sp, #40]	; 0x28
 800687e:	e7e1      	b.n	8006844 <_strtod_l+0x21c>
 8006880:	2b10      	cmp	r3, #16
 8006882:	bfd8      	it	le
 8006884:	fb01 fa0a 	mulle.w	sl, r1, sl
 8006888:	e7dc      	b.n	8006844 <_strtod_l+0x21c>
 800688a:	2e10      	cmp	r6, #16
 800688c:	bfdc      	itt	le
 800688e:	230a      	movle	r3, #10
 8006890:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8006894:	e7e3      	b.n	800685e <_strtod_l+0x236>
 8006896:	2300      	movs	r3, #0
 8006898:	9308      	str	r3, [sp, #32]
 800689a:	2301      	movs	r3, #1
 800689c:	e780      	b.n	80067a0 <_strtod_l+0x178>
 800689e:	f04f 0c00 	mov.w	ip, #0
 80068a2:	1caa      	adds	r2, r5, #2
 80068a4:	9219      	str	r2, [sp, #100]	; 0x64
 80068a6:	78aa      	ldrb	r2, [r5, #2]
 80068a8:	e788      	b.n	80067bc <_strtod_l+0x194>
 80068aa:	f04f 0c01 	mov.w	ip, #1
 80068ae:	e7f8      	b.n	80068a2 <_strtod_l+0x27a>
 80068b0:	08008770 	.word	0x08008770
 80068b4:	7ff00000 	.word	0x7ff00000
 80068b8:	0800876c 	.word	0x0800876c
 80068bc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80068be:	1c51      	adds	r1, r2, #1
 80068c0:	9119      	str	r1, [sp, #100]	; 0x64
 80068c2:	7852      	ldrb	r2, [r2, #1]
 80068c4:	2a30      	cmp	r2, #48	; 0x30
 80068c6:	d0f9      	beq.n	80068bc <_strtod_l+0x294>
 80068c8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80068cc:	2908      	cmp	r1, #8
 80068ce:	f63f af7a 	bhi.w	80067c6 <_strtod_l+0x19e>
 80068d2:	3a30      	subs	r2, #48	; 0x30
 80068d4:	9209      	str	r2, [sp, #36]	; 0x24
 80068d6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80068d8:	920c      	str	r2, [sp, #48]	; 0x30
 80068da:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80068dc:	1c57      	adds	r7, r2, #1
 80068de:	9719      	str	r7, [sp, #100]	; 0x64
 80068e0:	7852      	ldrb	r2, [r2, #1]
 80068e2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80068e6:	f1be 0f09 	cmp.w	lr, #9
 80068ea:	d938      	bls.n	800695e <_strtod_l+0x336>
 80068ec:	990c      	ldr	r1, [sp, #48]	; 0x30
 80068ee:	1a7f      	subs	r7, r7, r1
 80068f0:	2f08      	cmp	r7, #8
 80068f2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80068f6:	dc03      	bgt.n	8006900 <_strtod_l+0x2d8>
 80068f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80068fa:	428f      	cmp	r7, r1
 80068fc:	bfa8      	it	ge
 80068fe:	460f      	movge	r7, r1
 8006900:	f1bc 0f00 	cmp.w	ip, #0
 8006904:	d000      	beq.n	8006908 <_strtod_l+0x2e0>
 8006906:	427f      	negs	r7, r7
 8006908:	2e00      	cmp	r6, #0
 800690a:	d14f      	bne.n	80069ac <_strtod_l+0x384>
 800690c:	9905      	ldr	r1, [sp, #20]
 800690e:	4301      	orrs	r1, r0
 8006910:	f47f aec3 	bne.w	800669a <_strtod_l+0x72>
 8006914:	2b00      	cmp	r3, #0
 8006916:	f47f aedb 	bne.w	80066d0 <_strtod_l+0xa8>
 800691a:	2a69      	cmp	r2, #105	; 0x69
 800691c:	d029      	beq.n	8006972 <_strtod_l+0x34a>
 800691e:	dc26      	bgt.n	800696e <_strtod_l+0x346>
 8006920:	2a49      	cmp	r2, #73	; 0x49
 8006922:	d026      	beq.n	8006972 <_strtod_l+0x34a>
 8006924:	2a4e      	cmp	r2, #78	; 0x4e
 8006926:	f47f aed3 	bne.w	80066d0 <_strtod_l+0xa8>
 800692a:	499a      	ldr	r1, [pc, #616]	; (8006b94 <_strtod_l+0x56c>)
 800692c:	a819      	add	r0, sp, #100	; 0x64
 800692e:	f001 fa23 	bl	8007d78 <__match>
 8006932:	2800      	cmp	r0, #0
 8006934:	f43f aecc 	beq.w	80066d0 <_strtod_l+0xa8>
 8006938:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	2b28      	cmp	r3, #40	; 0x28
 800693e:	d12f      	bne.n	80069a0 <_strtod_l+0x378>
 8006940:	4995      	ldr	r1, [pc, #596]	; (8006b98 <_strtod_l+0x570>)
 8006942:	aa1c      	add	r2, sp, #112	; 0x70
 8006944:	a819      	add	r0, sp, #100	; 0x64
 8006946:	f001 fa2b 	bl	8007da0 <__hexnan>
 800694a:	2805      	cmp	r0, #5
 800694c:	d128      	bne.n	80069a0 <_strtod_l+0x378>
 800694e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006950:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8006954:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8006958:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800695c:	e69d      	b.n	800669a <_strtod_l+0x72>
 800695e:	210a      	movs	r1, #10
 8006960:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006962:	fb01 2107 	mla	r1, r1, r7, r2
 8006966:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800696a:	9209      	str	r2, [sp, #36]	; 0x24
 800696c:	e7b5      	b.n	80068da <_strtod_l+0x2b2>
 800696e:	2a6e      	cmp	r2, #110	; 0x6e
 8006970:	e7d9      	b.n	8006926 <_strtod_l+0x2fe>
 8006972:	498a      	ldr	r1, [pc, #552]	; (8006b9c <_strtod_l+0x574>)
 8006974:	a819      	add	r0, sp, #100	; 0x64
 8006976:	f001 f9ff 	bl	8007d78 <__match>
 800697a:	2800      	cmp	r0, #0
 800697c:	f43f aea8 	beq.w	80066d0 <_strtod_l+0xa8>
 8006980:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006982:	4987      	ldr	r1, [pc, #540]	; (8006ba0 <_strtod_l+0x578>)
 8006984:	3b01      	subs	r3, #1
 8006986:	a819      	add	r0, sp, #100	; 0x64
 8006988:	9319      	str	r3, [sp, #100]	; 0x64
 800698a:	f001 f9f5 	bl	8007d78 <__match>
 800698e:	b910      	cbnz	r0, 8006996 <_strtod_l+0x36e>
 8006990:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006992:	3301      	adds	r3, #1
 8006994:	9319      	str	r3, [sp, #100]	; 0x64
 8006996:	f04f 0800 	mov.w	r8, #0
 800699a:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8006ba4 <_strtod_l+0x57c>
 800699e:	e67c      	b.n	800669a <_strtod_l+0x72>
 80069a0:	4881      	ldr	r0, [pc, #516]	; (8006ba8 <_strtod_l+0x580>)
 80069a2:	f000 ff07 	bl	80077b4 <nan>
 80069a6:	4680      	mov	r8, r0
 80069a8:	4689      	mov	r9, r1
 80069aa:	e676      	b.n	800669a <_strtod_l+0x72>
 80069ac:	9b08      	ldr	r3, [sp, #32]
 80069ae:	f1bb 0f00 	cmp.w	fp, #0
 80069b2:	bf08      	it	eq
 80069b4:	46b3      	moveq	fp, r6
 80069b6:	1afb      	subs	r3, r7, r3
 80069b8:	2e10      	cmp	r6, #16
 80069ba:	980a      	ldr	r0, [sp, #40]	; 0x28
 80069bc:	4635      	mov	r5, r6
 80069be:	9309      	str	r3, [sp, #36]	; 0x24
 80069c0:	bfa8      	it	ge
 80069c2:	2510      	movge	r5, #16
 80069c4:	f7f9 fd0e 	bl	80003e4 <__aeabi_ui2d>
 80069c8:	2e09      	cmp	r6, #9
 80069ca:	4680      	mov	r8, r0
 80069cc:	4689      	mov	r9, r1
 80069ce:	dd13      	ble.n	80069f8 <_strtod_l+0x3d0>
 80069d0:	4b76      	ldr	r3, [pc, #472]	; (8006bac <_strtod_l+0x584>)
 80069d2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80069d6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80069da:	f7f9 fd7d 	bl	80004d8 <__aeabi_dmul>
 80069de:	4680      	mov	r8, r0
 80069e0:	4650      	mov	r0, sl
 80069e2:	4689      	mov	r9, r1
 80069e4:	f7f9 fcfe 	bl	80003e4 <__aeabi_ui2d>
 80069e8:	4602      	mov	r2, r0
 80069ea:	460b      	mov	r3, r1
 80069ec:	4640      	mov	r0, r8
 80069ee:	4649      	mov	r1, r9
 80069f0:	f7f9 fbbc 	bl	800016c <__adddf3>
 80069f4:	4680      	mov	r8, r0
 80069f6:	4689      	mov	r9, r1
 80069f8:	2e0f      	cmp	r6, #15
 80069fa:	dc36      	bgt.n	8006a6a <_strtod_l+0x442>
 80069fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	f43f ae4b 	beq.w	800669a <_strtod_l+0x72>
 8006a04:	dd22      	ble.n	8006a4c <_strtod_l+0x424>
 8006a06:	2b16      	cmp	r3, #22
 8006a08:	dc09      	bgt.n	8006a1e <_strtod_l+0x3f6>
 8006a0a:	4968      	ldr	r1, [pc, #416]	; (8006bac <_strtod_l+0x584>)
 8006a0c:	4642      	mov	r2, r8
 8006a0e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006a12:	464b      	mov	r3, r9
 8006a14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a18:	f7f9 fd5e 	bl	80004d8 <__aeabi_dmul>
 8006a1c:	e7c3      	b.n	80069a6 <_strtod_l+0x37e>
 8006a1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a20:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8006a24:	4293      	cmp	r3, r2
 8006a26:	db20      	blt.n	8006a6a <_strtod_l+0x442>
 8006a28:	4c60      	ldr	r4, [pc, #384]	; (8006bac <_strtod_l+0x584>)
 8006a2a:	f1c6 060f 	rsb	r6, r6, #15
 8006a2e:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8006a32:	4642      	mov	r2, r8
 8006a34:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a38:	464b      	mov	r3, r9
 8006a3a:	f7f9 fd4d 	bl	80004d8 <__aeabi_dmul>
 8006a3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a40:	1b9e      	subs	r6, r3, r6
 8006a42:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8006a46:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006a4a:	e7e5      	b.n	8006a18 <_strtod_l+0x3f0>
 8006a4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a4e:	3316      	adds	r3, #22
 8006a50:	db0b      	blt.n	8006a6a <_strtod_l+0x442>
 8006a52:	9b08      	ldr	r3, [sp, #32]
 8006a54:	4640      	mov	r0, r8
 8006a56:	1bdf      	subs	r7, r3, r7
 8006a58:	4b54      	ldr	r3, [pc, #336]	; (8006bac <_strtod_l+0x584>)
 8006a5a:	4649      	mov	r1, r9
 8006a5c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006a60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a64:	f7f9 fe62 	bl	800072c <__aeabi_ddiv>
 8006a68:	e79d      	b.n	80069a6 <_strtod_l+0x37e>
 8006a6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a6c:	1b75      	subs	r5, r6, r5
 8006a6e:	441d      	add	r5, r3
 8006a70:	2d00      	cmp	r5, #0
 8006a72:	dd70      	ble.n	8006b56 <_strtod_l+0x52e>
 8006a74:	f015 030f 	ands.w	r3, r5, #15
 8006a78:	d00a      	beq.n	8006a90 <_strtod_l+0x468>
 8006a7a:	494c      	ldr	r1, [pc, #304]	; (8006bac <_strtod_l+0x584>)
 8006a7c:	4642      	mov	r2, r8
 8006a7e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006a82:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a86:	464b      	mov	r3, r9
 8006a88:	f7f9 fd26 	bl	80004d8 <__aeabi_dmul>
 8006a8c:	4680      	mov	r8, r0
 8006a8e:	4689      	mov	r9, r1
 8006a90:	f035 050f 	bics.w	r5, r5, #15
 8006a94:	d04d      	beq.n	8006b32 <_strtod_l+0x50a>
 8006a96:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8006a9a:	dd22      	ble.n	8006ae2 <_strtod_l+0x4ba>
 8006a9c:	2600      	movs	r6, #0
 8006a9e:	46b3      	mov	fp, r6
 8006aa0:	960b      	str	r6, [sp, #44]	; 0x2c
 8006aa2:	9608      	str	r6, [sp, #32]
 8006aa4:	2322      	movs	r3, #34	; 0x22
 8006aa6:	f04f 0800 	mov.w	r8, #0
 8006aaa:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8006ba4 <_strtod_l+0x57c>
 8006aae:	6023      	str	r3, [r4, #0]
 8006ab0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	f43f adf1 	beq.w	800669a <_strtod_l+0x72>
 8006ab8:	4620      	mov	r0, r4
 8006aba:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006abc:	f7ff f934 	bl	8005d28 <_Bfree>
 8006ac0:	4620      	mov	r0, r4
 8006ac2:	9908      	ldr	r1, [sp, #32]
 8006ac4:	f7ff f930 	bl	8005d28 <_Bfree>
 8006ac8:	4659      	mov	r1, fp
 8006aca:	4620      	mov	r0, r4
 8006acc:	f7ff f92c 	bl	8005d28 <_Bfree>
 8006ad0:	4620      	mov	r0, r4
 8006ad2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006ad4:	f7ff f928 	bl	8005d28 <_Bfree>
 8006ad8:	4631      	mov	r1, r6
 8006ada:	4620      	mov	r0, r4
 8006adc:	f7ff f924 	bl	8005d28 <_Bfree>
 8006ae0:	e5db      	b.n	800669a <_strtod_l+0x72>
 8006ae2:	4b33      	ldr	r3, [pc, #204]	; (8006bb0 <_strtod_l+0x588>)
 8006ae4:	4640      	mov	r0, r8
 8006ae6:	9305      	str	r3, [sp, #20]
 8006ae8:	2300      	movs	r3, #0
 8006aea:	4649      	mov	r1, r9
 8006aec:	469a      	mov	sl, r3
 8006aee:	112d      	asrs	r5, r5, #4
 8006af0:	2d01      	cmp	r5, #1
 8006af2:	dc21      	bgt.n	8006b38 <_strtod_l+0x510>
 8006af4:	b10b      	cbz	r3, 8006afa <_strtod_l+0x4d2>
 8006af6:	4680      	mov	r8, r0
 8006af8:	4689      	mov	r9, r1
 8006afa:	492d      	ldr	r1, [pc, #180]	; (8006bb0 <_strtod_l+0x588>)
 8006afc:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8006b00:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8006b04:	4642      	mov	r2, r8
 8006b06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b0a:	464b      	mov	r3, r9
 8006b0c:	f7f9 fce4 	bl	80004d8 <__aeabi_dmul>
 8006b10:	4b24      	ldr	r3, [pc, #144]	; (8006ba4 <_strtod_l+0x57c>)
 8006b12:	460a      	mov	r2, r1
 8006b14:	400b      	ands	r3, r1
 8006b16:	4927      	ldr	r1, [pc, #156]	; (8006bb4 <_strtod_l+0x58c>)
 8006b18:	4680      	mov	r8, r0
 8006b1a:	428b      	cmp	r3, r1
 8006b1c:	d8be      	bhi.n	8006a9c <_strtod_l+0x474>
 8006b1e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006b22:	428b      	cmp	r3, r1
 8006b24:	bf86      	itte	hi
 8006b26:	f04f 38ff 	movhi.w	r8, #4294967295
 8006b2a:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8006bb8 <_strtod_l+0x590>
 8006b2e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8006b32:	2300      	movs	r3, #0
 8006b34:	9305      	str	r3, [sp, #20]
 8006b36:	e07b      	b.n	8006c30 <_strtod_l+0x608>
 8006b38:	07ea      	lsls	r2, r5, #31
 8006b3a:	d505      	bpl.n	8006b48 <_strtod_l+0x520>
 8006b3c:	9b05      	ldr	r3, [sp, #20]
 8006b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b42:	f7f9 fcc9 	bl	80004d8 <__aeabi_dmul>
 8006b46:	2301      	movs	r3, #1
 8006b48:	9a05      	ldr	r2, [sp, #20]
 8006b4a:	f10a 0a01 	add.w	sl, sl, #1
 8006b4e:	3208      	adds	r2, #8
 8006b50:	106d      	asrs	r5, r5, #1
 8006b52:	9205      	str	r2, [sp, #20]
 8006b54:	e7cc      	b.n	8006af0 <_strtod_l+0x4c8>
 8006b56:	d0ec      	beq.n	8006b32 <_strtod_l+0x50a>
 8006b58:	426d      	negs	r5, r5
 8006b5a:	f015 020f 	ands.w	r2, r5, #15
 8006b5e:	d00a      	beq.n	8006b76 <_strtod_l+0x54e>
 8006b60:	4b12      	ldr	r3, [pc, #72]	; (8006bac <_strtod_l+0x584>)
 8006b62:	4640      	mov	r0, r8
 8006b64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b68:	4649      	mov	r1, r9
 8006b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b6e:	f7f9 fddd 	bl	800072c <__aeabi_ddiv>
 8006b72:	4680      	mov	r8, r0
 8006b74:	4689      	mov	r9, r1
 8006b76:	112d      	asrs	r5, r5, #4
 8006b78:	d0db      	beq.n	8006b32 <_strtod_l+0x50a>
 8006b7a:	2d1f      	cmp	r5, #31
 8006b7c:	dd1e      	ble.n	8006bbc <_strtod_l+0x594>
 8006b7e:	2600      	movs	r6, #0
 8006b80:	46b3      	mov	fp, r6
 8006b82:	960b      	str	r6, [sp, #44]	; 0x2c
 8006b84:	9608      	str	r6, [sp, #32]
 8006b86:	2322      	movs	r3, #34	; 0x22
 8006b88:	f04f 0800 	mov.w	r8, #0
 8006b8c:	f04f 0900 	mov.w	r9, #0
 8006b90:	6023      	str	r3, [r4, #0]
 8006b92:	e78d      	b.n	8006ab0 <_strtod_l+0x488>
 8006b94:	0800855b 	.word	0x0800855b
 8006b98:	08008784 	.word	0x08008784
 8006b9c:	08008553 	.word	0x08008553
 8006ba0:	0800858a 	.word	0x0800858a
 8006ba4:	7ff00000 	.word	0x7ff00000
 8006ba8:	08008915 	.word	0x08008915
 8006bac:	08008698 	.word	0x08008698
 8006bb0:	08008670 	.word	0x08008670
 8006bb4:	7ca00000 	.word	0x7ca00000
 8006bb8:	7fefffff 	.word	0x7fefffff
 8006bbc:	f015 0310 	ands.w	r3, r5, #16
 8006bc0:	bf18      	it	ne
 8006bc2:	236a      	movne	r3, #106	; 0x6a
 8006bc4:	4640      	mov	r0, r8
 8006bc6:	9305      	str	r3, [sp, #20]
 8006bc8:	4649      	mov	r1, r9
 8006bca:	2300      	movs	r3, #0
 8006bcc:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8006e98 <_strtod_l+0x870>
 8006bd0:	07ea      	lsls	r2, r5, #31
 8006bd2:	d504      	bpl.n	8006bde <_strtod_l+0x5b6>
 8006bd4:	e9da 2300 	ldrd	r2, r3, [sl]
 8006bd8:	f7f9 fc7e 	bl	80004d8 <__aeabi_dmul>
 8006bdc:	2301      	movs	r3, #1
 8006bde:	106d      	asrs	r5, r5, #1
 8006be0:	f10a 0a08 	add.w	sl, sl, #8
 8006be4:	d1f4      	bne.n	8006bd0 <_strtod_l+0x5a8>
 8006be6:	b10b      	cbz	r3, 8006bec <_strtod_l+0x5c4>
 8006be8:	4680      	mov	r8, r0
 8006bea:	4689      	mov	r9, r1
 8006bec:	9b05      	ldr	r3, [sp, #20]
 8006bee:	b1bb      	cbz	r3, 8006c20 <_strtod_l+0x5f8>
 8006bf0:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8006bf4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	4649      	mov	r1, r9
 8006bfc:	dd10      	ble.n	8006c20 <_strtod_l+0x5f8>
 8006bfe:	2b1f      	cmp	r3, #31
 8006c00:	f340 8128 	ble.w	8006e54 <_strtod_l+0x82c>
 8006c04:	2b34      	cmp	r3, #52	; 0x34
 8006c06:	bfd8      	it	le
 8006c08:	f04f 33ff 	movle.w	r3, #4294967295
 8006c0c:	f04f 0800 	mov.w	r8, #0
 8006c10:	bfcf      	iteee	gt
 8006c12:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8006c16:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8006c1a:	4093      	lslle	r3, r2
 8006c1c:	ea03 0901 	andle.w	r9, r3, r1
 8006c20:	2200      	movs	r2, #0
 8006c22:	2300      	movs	r3, #0
 8006c24:	4640      	mov	r0, r8
 8006c26:	4649      	mov	r1, r9
 8006c28:	f7f9 febe 	bl	80009a8 <__aeabi_dcmpeq>
 8006c2c:	2800      	cmp	r0, #0
 8006c2e:	d1a6      	bne.n	8006b7e <_strtod_l+0x556>
 8006c30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c32:	465a      	mov	r2, fp
 8006c34:	9300      	str	r3, [sp, #0]
 8006c36:	4620      	mov	r0, r4
 8006c38:	4633      	mov	r3, r6
 8006c3a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006c3c:	f7ff f8dc 	bl	8005df8 <__s2b>
 8006c40:	900b      	str	r0, [sp, #44]	; 0x2c
 8006c42:	2800      	cmp	r0, #0
 8006c44:	f43f af2a 	beq.w	8006a9c <_strtod_l+0x474>
 8006c48:	2600      	movs	r6, #0
 8006c4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c4c:	9b08      	ldr	r3, [sp, #32]
 8006c4e:	2a00      	cmp	r2, #0
 8006c50:	eba3 0307 	sub.w	r3, r3, r7
 8006c54:	bfa8      	it	ge
 8006c56:	2300      	movge	r3, #0
 8006c58:	46b3      	mov	fp, r6
 8006c5a:	9312      	str	r3, [sp, #72]	; 0x48
 8006c5c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006c60:	9316      	str	r3, [sp, #88]	; 0x58
 8006c62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c64:	4620      	mov	r0, r4
 8006c66:	6859      	ldr	r1, [r3, #4]
 8006c68:	f7ff f81e 	bl	8005ca8 <_Balloc>
 8006c6c:	9008      	str	r0, [sp, #32]
 8006c6e:	2800      	cmp	r0, #0
 8006c70:	f43f af18 	beq.w	8006aa4 <_strtod_l+0x47c>
 8006c74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c76:	300c      	adds	r0, #12
 8006c78:	691a      	ldr	r2, [r3, #16]
 8006c7a:	f103 010c 	add.w	r1, r3, #12
 8006c7e:	3202      	adds	r2, #2
 8006c80:	0092      	lsls	r2, r2, #2
 8006c82:	f000 fd89 	bl	8007798 <memcpy>
 8006c86:	ab1c      	add	r3, sp, #112	; 0x70
 8006c88:	9301      	str	r3, [sp, #4]
 8006c8a:	ab1b      	add	r3, sp, #108	; 0x6c
 8006c8c:	9300      	str	r3, [sp, #0]
 8006c8e:	4642      	mov	r2, r8
 8006c90:	464b      	mov	r3, r9
 8006c92:	4620      	mov	r0, r4
 8006c94:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8006c98:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8006c9c:	f7ff fbd8 	bl	8006450 <__d2b>
 8006ca0:	901a      	str	r0, [sp, #104]	; 0x68
 8006ca2:	2800      	cmp	r0, #0
 8006ca4:	f43f aefe 	beq.w	8006aa4 <_strtod_l+0x47c>
 8006ca8:	2101      	movs	r1, #1
 8006caa:	4620      	mov	r0, r4
 8006cac:	f7ff f93c 	bl	8005f28 <__i2b>
 8006cb0:	4683      	mov	fp, r0
 8006cb2:	2800      	cmp	r0, #0
 8006cb4:	f43f aef6 	beq.w	8006aa4 <_strtod_l+0x47c>
 8006cb8:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8006cba:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006cbc:	2f00      	cmp	r7, #0
 8006cbe:	bfab      	itete	ge
 8006cc0:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 8006cc2:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8006cc4:	eb07 0a03 	addge.w	sl, r7, r3
 8006cc8:	1bdd      	sublt	r5, r3, r7
 8006cca:	9b05      	ldr	r3, [sp, #20]
 8006ccc:	bfa8      	it	ge
 8006cce:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8006cd0:	eba7 0703 	sub.w	r7, r7, r3
 8006cd4:	4417      	add	r7, r2
 8006cd6:	4b71      	ldr	r3, [pc, #452]	; (8006e9c <_strtod_l+0x874>)
 8006cd8:	f107 37ff 	add.w	r7, r7, #4294967295
 8006cdc:	bfb8      	it	lt
 8006cde:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 8006ce2:	429f      	cmp	r7, r3
 8006ce4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006ce8:	f280 80c7 	bge.w	8006e7a <_strtod_l+0x852>
 8006cec:	1bdb      	subs	r3, r3, r7
 8006cee:	2b1f      	cmp	r3, #31
 8006cf0:	f04f 0101 	mov.w	r1, #1
 8006cf4:	eba2 0203 	sub.w	r2, r2, r3
 8006cf8:	f300 80b3 	bgt.w	8006e62 <_strtod_l+0x83a>
 8006cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8006d00:	9313      	str	r3, [sp, #76]	; 0x4c
 8006d02:	2300      	movs	r3, #0
 8006d04:	9310      	str	r3, [sp, #64]	; 0x40
 8006d06:	eb0a 0702 	add.w	r7, sl, r2
 8006d0a:	9b05      	ldr	r3, [sp, #20]
 8006d0c:	45ba      	cmp	sl, r7
 8006d0e:	4415      	add	r5, r2
 8006d10:	441d      	add	r5, r3
 8006d12:	4653      	mov	r3, sl
 8006d14:	bfa8      	it	ge
 8006d16:	463b      	movge	r3, r7
 8006d18:	42ab      	cmp	r3, r5
 8006d1a:	bfa8      	it	ge
 8006d1c:	462b      	movge	r3, r5
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	bfc2      	ittt	gt
 8006d22:	1aff      	subgt	r7, r7, r3
 8006d24:	1aed      	subgt	r5, r5, r3
 8006d26:	ebaa 0a03 	subgt.w	sl, sl, r3
 8006d2a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	dd17      	ble.n	8006d60 <_strtod_l+0x738>
 8006d30:	4659      	mov	r1, fp
 8006d32:	461a      	mov	r2, r3
 8006d34:	4620      	mov	r0, r4
 8006d36:	f7ff f9b5 	bl	80060a4 <__pow5mult>
 8006d3a:	4683      	mov	fp, r0
 8006d3c:	2800      	cmp	r0, #0
 8006d3e:	f43f aeb1 	beq.w	8006aa4 <_strtod_l+0x47c>
 8006d42:	4601      	mov	r1, r0
 8006d44:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006d46:	4620      	mov	r0, r4
 8006d48:	f7ff f904 	bl	8005f54 <__multiply>
 8006d4c:	900a      	str	r0, [sp, #40]	; 0x28
 8006d4e:	2800      	cmp	r0, #0
 8006d50:	f43f aea8 	beq.w	8006aa4 <_strtod_l+0x47c>
 8006d54:	4620      	mov	r0, r4
 8006d56:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006d58:	f7fe ffe6 	bl	8005d28 <_Bfree>
 8006d5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d5e:	931a      	str	r3, [sp, #104]	; 0x68
 8006d60:	2f00      	cmp	r7, #0
 8006d62:	f300 808f 	bgt.w	8006e84 <_strtod_l+0x85c>
 8006d66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	dd08      	ble.n	8006d7e <_strtod_l+0x756>
 8006d6c:	4620      	mov	r0, r4
 8006d6e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006d70:	9908      	ldr	r1, [sp, #32]
 8006d72:	f7ff f997 	bl	80060a4 <__pow5mult>
 8006d76:	9008      	str	r0, [sp, #32]
 8006d78:	2800      	cmp	r0, #0
 8006d7a:	f43f ae93 	beq.w	8006aa4 <_strtod_l+0x47c>
 8006d7e:	2d00      	cmp	r5, #0
 8006d80:	dd08      	ble.n	8006d94 <_strtod_l+0x76c>
 8006d82:	462a      	mov	r2, r5
 8006d84:	4620      	mov	r0, r4
 8006d86:	9908      	ldr	r1, [sp, #32]
 8006d88:	f7ff f9e6 	bl	8006158 <__lshift>
 8006d8c:	9008      	str	r0, [sp, #32]
 8006d8e:	2800      	cmp	r0, #0
 8006d90:	f43f ae88 	beq.w	8006aa4 <_strtod_l+0x47c>
 8006d94:	f1ba 0f00 	cmp.w	sl, #0
 8006d98:	dd08      	ble.n	8006dac <_strtod_l+0x784>
 8006d9a:	4659      	mov	r1, fp
 8006d9c:	4652      	mov	r2, sl
 8006d9e:	4620      	mov	r0, r4
 8006da0:	f7ff f9da 	bl	8006158 <__lshift>
 8006da4:	4683      	mov	fp, r0
 8006da6:	2800      	cmp	r0, #0
 8006da8:	f43f ae7c 	beq.w	8006aa4 <_strtod_l+0x47c>
 8006dac:	4620      	mov	r0, r4
 8006dae:	9a08      	ldr	r2, [sp, #32]
 8006db0:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006db2:	f7ff fa59 	bl	8006268 <__mdiff>
 8006db6:	4606      	mov	r6, r0
 8006db8:	2800      	cmp	r0, #0
 8006dba:	f43f ae73 	beq.w	8006aa4 <_strtod_l+0x47c>
 8006dbe:	2500      	movs	r5, #0
 8006dc0:	68c3      	ldr	r3, [r0, #12]
 8006dc2:	4659      	mov	r1, fp
 8006dc4:	60c5      	str	r5, [r0, #12]
 8006dc6:	930a      	str	r3, [sp, #40]	; 0x28
 8006dc8:	f7ff fa32 	bl	8006230 <__mcmp>
 8006dcc:	42a8      	cmp	r0, r5
 8006dce:	da6b      	bge.n	8006ea8 <_strtod_l+0x880>
 8006dd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dd2:	ea53 0308 	orrs.w	r3, r3, r8
 8006dd6:	f040 808f 	bne.w	8006ef8 <_strtod_l+0x8d0>
 8006dda:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	f040 808a 	bne.w	8006ef8 <_strtod_l+0x8d0>
 8006de4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006de8:	0d1b      	lsrs	r3, r3, #20
 8006dea:	051b      	lsls	r3, r3, #20
 8006dec:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006df0:	f240 8082 	bls.w	8006ef8 <_strtod_l+0x8d0>
 8006df4:	6973      	ldr	r3, [r6, #20]
 8006df6:	b913      	cbnz	r3, 8006dfe <_strtod_l+0x7d6>
 8006df8:	6933      	ldr	r3, [r6, #16]
 8006dfa:	2b01      	cmp	r3, #1
 8006dfc:	dd7c      	ble.n	8006ef8 <_strtod_l+0x8d0>
 8006dfe:	4631      	mov	r1, r6
 8006e00:	2201      	movs	r2, #1
 8006e02:	4620      	mov	r0, r4
 8006e04:	f7ff f9a8 	bl	8006158 <__lshift>
 8006e08:	4659      	mov	r1, fp
 8006e0a:	4606      	mov	r6, r0
 8006e0c:	f7ff fa10 	bl	8006230 <__mcmp>
 8006e10:	2800      	cmp	r0, #0
 8006e12:	dd71      	ble.n	8006ef8 <_strtod_l+0x8d0>
 8006e14:	9905      	ldr	r1, [sp, #20]
 8006e16:	464b      	mov	r3, r9
 8006e18:	4a21      	ldr	r2, [pc, #132]	; (8006ea0 <_strtod_l+0x878>)
 8006e1a:	2900      	cmp	r1, #0
 8006e1c:	f000 808d 	beq.w	8006f3a <_strtod_l+0x912>
 8006e20:	ea02 0109 	and.w	r1, r2, r9
 8006e24:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006e28:	f300 8087 	bgt.w	8006f3a <_strtod_l+0x912>
 8006e2c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006e30:	f77f aea9 	ble.w	8006b86 <_strtod_l+0x55e>
 8006e34:	4640      	mov	r0, r8
 8006e36:	4649      	mov	r1, r9
 8006e38:	4b1a      	ldr	r3, [pc, #104]	; (8006ea4 <_strtod_l+0x87c>)
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	f7f9 fb4c 	bl	80004d8 <__aeabi_dmul>
 8006e40:	4b17      	ldr	r3, [pc, #92]	; (8006ea0 <_strtod_l+0x878>)
 8006e42:	4680      	mov	r8, r0
 8006e44:	400b      	ands	r3, r1
 8006e46:	4689      	mov	r9, r1
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	f47f ae35 	bne.w	8006ab8 <_strtod_l+0x490>
 8006e4e:	2322      	movs	r3, #34	; 0x22
 8006e50:	6023      	str	r3, [r4, #0]
 8006e52:	e631      	b.n	8006ab8 <_strtod_l+0x490>
 8006e54:	f04f 32ff 	mov.w	r2, #4294967295
 8006e58:	fa02 f303 	lsl.w	r3, r2, r3
 8006e5c:	ea03 0808 	and.w	r8, r3, r8
 8006e60:	e6de      	b.n	8006c20 <_strtod_l+0x5f8>
 8006e62:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 8006e66:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 8006e6a:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 8006e6e:	37e2      	adds	r7, #226	; 0xe2
 8006e70:	fa01 f307 	lsl.w	r3, r1, r7
 8006e74:	9310      	str	r3, [sp, #64]	; 0x40
 8006e76:	9113      	str	r1, [sp, #76]	; 0x4c
 8006e78:	e745      	b.n	8006d06 <_strtod_l+0x6de>
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	9310      	str	r3, [sp, #64]	; 0x40
 8006e7e:	2301      	movs	r3, #1
 8006e80:	9313      	str	r3, [sp, #76]	; 0x4c
 8006e82:	e740      	b.n	8006d06 <_strtod_l+0x6de>
 8006e84:	463a      	mov	r2, r7
 8006e86:	4620      	mov	r0, r4
 8006e88:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006e8a:	f7ff f965 	bl	8006158 <__lshift>
 8006e8e:	901a      	str	r0, [sp, #104]	; 0x68
 8006e90:	2800      	cmp	r0, #0
 8006e92:	f47f af68 	bne.w	8006d66 <_strtod_l+0x73e>
 8006e96:	e605      	b.n	8006aa4 <_strtod_l+0x47c>
 8006e98:	08008798 	.word	0x08008798
 8006e9c:	fffffc02 	.word	0xfffffc02
 8006ea0:	7ff00000 	.word	0x7ff00000
 8006ea4:	39500000 	.word	0x39500000
 8006ea8:	46ca      	mov	sl, r9
 8006eaa:	d165      	bne.n	8006f78 <_strtod_l+0x950>
 8006eac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006eae:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006eb2:	b352      	cbz	r2, 8006f0a <_strtod_l+0x8e2>
 8006eb4:	4a9e      	ldr	r2, [pc, #632]	; (8007130 <_strtod_l+0xb08>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d12a      	bne.n	8006f10 <_strtod_l+0x8e8>
 8006eba:	9b05      	ldr	r3, [sp, #20]
 8006ebc:	4641      	mov	r1, r8
 8006ebe:	b1fb      	cbz	r3, 8006f00 <_strtod_l+0x8d8>
 8006ec0:	4b9c      	ldr	r3, [pc, #624]	; (8007134 <_strtod_l+0xb0c>)
 8006ec2:	f04f 32ff 	mov.w	r2, #4294967295
 8006ec6:	ea09 0303 	and.w	r3, r9, r3
 8006eca:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006ece:	d81a      	bhi.n	8006f06 <_strtod_l+0x8de>
 8006ed0:	0d1b      	lsrs	r3, r3, #20
 8006ed2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8006eda:	4299      	cmp	r1, r3
 8006edc:	d118      	bne.n	8006f10 <_strtod_l+0x8e8>
 8006ede:	4b96      	ldr	r3, [pc, #600]	; (8007138 <_strtod_l+0xb10>)
 8006ee0:	459a      	cmp	sl, r3
 8006ee2:	d102      	bne.n	8006eea <_strtod_l+0x8c2>
 8006ee4:	3101      	adds	r1, #1
 8006ee6:	f43f addd 	beq.w	8006aa4 <_strtod_l+0x47c>
 8006eea:	f04f 0800 	mov.w	r8, #0
 8006eee:	4b91      	ldr	r3, [pc, #580]	; (8007134 <_strtod_l+0xb0c>)
 8006ef0:	ea0a 0303 	and.w	r3, sl, r3
 8006ef4:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8006ef8:	9b05      	ldr	r3, [sp, #20]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d19a      	bne.n	8006e34 <_strtod_l+0x80c>
 8006efe:	e5db      	b.n	8006ab8 <_strtod_l+0x490>
 8006f00:	f04f 33ff 	mov.w	r3, #4294967295
 8006f04:	e7e9      	b.n	8006eda <_strtod_l+0x8b2>
 8006f06:	4613      	mov	r3, r2
 8006f08:	e7e7      	b.n	8006eda <_strtod_l+0x8b2>
 8006f0a:	ea53 0308 	orrs.w	r3, r3, r8
 8006f0e:	d081      	beq.n	8006e14 <_strtod_l+0x7ec>
 8006f10:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006f12:	b1e3      	cbz	r3, 8006f4e <_strtod_l+0x926>
 8006f14:	ea13 0f0a 	tst.w	r3, sl
 8006f18:	d0ee      	beq.n	8006ef8 <_strtod_l+0x8d0>
 8006f1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f1c:	4640      	mov	r0, r8
 8006f1e:	4649      	mov	r1, r9
 8006f20:	9a05      	ldr	r2, [sp, #20]
 8006f22:	b1c3      	cbz	r3, 8006f56 <_strtod_l+0x92e>
 8006f24:	f7ff fb5c 	bl	80065e0 <sulp>
 8006f28:	4602      	mov	r2, r0
 8006f2a:	460b      	mov	r3, r1
 8006f2c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006f2e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006f30:	f7f9 f91c 	bl	800016c <__adddf3>
 8006f34:	4680      	mov	r8, r0
 8006f36:	4689      	mov	r9, r1
 8006f38:	e7de      	b.n	8006ef8 <_strtod_l+0x8d0>
 8006f3a:	4013      	ands	r3, r2
 8006f3c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006f40:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8006f44:	f04f 38ff 	mov.w	r8, #4294967295
 8006f48:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8006f4c:	e7d4      	b.n	8006ef8 <_strtod_l+0x8d0>
 8006f4e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006f50:	ea13 0f08 	tst.w	r3, r8
 8006f54:	e7e0      	b.n	8006f18 <_strtod_l+0x8f0>
 8006f56:	f7ff fb43 	bl	80065e0 <sulp>
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	460b      	mov	r3, r1
 8006f5e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006f60:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006f62:	f7f9 f901 	bl	8000168 <__aeabi_dsub>
 8006f66:	2200      	movs	r2, #0
 8006f68:	2300      	movs	r3, #0
 8006f6a:	4680      	mov	r8, r0
 8006f6c:	4689      	mov	r9, r1
 8006f6e:	f7f9 fd1b 	bl	80009a8 <__aeabi_dcmpeq>
 8006f72:	2800      	cmp	r0, #0
 8006f74:	d0c0      	beq.n	8006ef8 <_strtod_l+0x8d0>
 8006f76:	e606      	b.n	8006b86 <_strtod_l+0x55e>
 8006f78:	4659      	mov	r1, fp
 8006f7a:	4630      	mov	r0, r6
 8006f7c:	f7ff fabe 	bl	80064fc <__ratio>
 8006f80:	4602      	mov	r2, r0
 8006f82:	460b      	mov	r3, r1
 8006f84:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8006f88:	2200      	movs	r2, #0
 8006f8a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006f8e:	f7f9 fd1f 	bl	80009d0 <__aeabi_dcmple>
 8006f92:	2800      	cmp	r0, #0
 8006f94:	d06f      	beq.n	8007076 <_strtod_l+0xa4e>
 8006f96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d17c      	bne.n	8007096 <_strtod_l+0xa6e>
 8006f9c:	f1b8 0f00 	cmp.w	r8, #0
 8006fa0:	d159      	bne.n	8007056 <_strtod_l+0xa2e>
 8006fa2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d17b      	bne.n	80070a2 <_strtod_l+0xa7a>
 8006faa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006fae:	2200      	movs	r2, #0
 8006fb0:	4b62      	ldr	r3, [pc, #392]	; (800713c <_strtod_l+0xb14>)
 8006fb2:	f7f9 fd03 	bl	80009bc <__aeabi_dcmplt>
 8006fb6:	2800      	cmp	r0, #0
 8006fb8:	d15a      	bne.n	8007070 <_strtod_l+0xa48>
 8006fba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	4b5f      	ldr	r3, [pc, #380]	; (8007140 <_strtod_l+0xb18>)
 8006fc2:	f7f9 fa89 	bl	80004d8 <__aeabi_dmul>
 8006fc6:	4605      	mov	r5, r0
 8006fc8:	460f      	mov	r7, r1
 8006fca:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8006fce:	9506      	str	r5, [sp, #24]
 8006fd0:	9307      	str	r3, [sp, #28]
 8006fd2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006fd6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8006fda:	4b56      	ldr	r3, [pc, #344]	; (8007134 <_strtod_l+0xb0c>)
 8006fdc:	4a55      	ldr	r2, [pc, #340]	; (8007134 <_strtod_l+0xb0c>)
 8006fde:	ea0a 0303 	and.w	r3, sl, r3
 8006fe2:	9313      	str	r3, [sp, #76]	; 0x4c
 8006fe4:	4b57      	ldr	r3, [pc, #348]	; (8007144 <_strtod_l+0xb1c>)
 8006fe6:	ea0a 0202 	and.w	r2, sl, r2
 8006fea:	429a      	cmp	r2, r3
 8006fec:	f040 80b0 	bne.w	8007150 <_strtod_l+0xb28>
 8006ff0:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8006ff4:	4640      	mov	r0, r8
 8006ff6:	4649      	mov	r1, r9
 8006ff8:	f7ff f9c2 	bl	8006380 <__ulp>
 8006ffc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007000:	f7f9 fa6a 	bl	80004d8 <__aeabi_dmul>
 8007004:	4642      	mov	r2, r8
 8007006:	464b      	mov	r3, r9
 8007008:	f7f9 f8b0 	bl	800016c <__adddf3>
 800700c:	f8df a124 	ldr.w	sl, [pc, #292]	; 8007134 <_strtod_l+0xb0c>
 8007010:	4a4d      	ldr	r2, [pc, #308]	; (8007148 <_strtod_l+0xb20>)
 8007012:	ea01 0a0a 	and.w	sl, r1, sl
 8007016:	4592      	cmp	sl, r2
 8007018:	4680      	mov	r8, r0
 800701a:	d948      	bls.n	80070ae <_strtod_l+0xa86>
 800701c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800701e:	4b46      	ldr	r3, [pc, #280]	; (8007138 <_strtod_l+0xb10>)
 8007020:	429a      	cmp	r2, r3
 8007022:	d103      	bne.n	800702c <_strtod_l+0xa04>
 8007024:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007026:	3301      	adds	r3, #1
 8007028:	f43f ad3c 	beq.w	8006aa4 <_strtod_l+0x47c>
 800702c:	f04f 38ff 	mov.w	r8, #4294967295
 8007030:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8007138 <_strtod_l+0xb10>
 8007034:	4620      	mov	r0, r4
 8007036:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007038:	f7fe fe76 	bl	8005d28 <_Bfree>
 800703c:	4620      	mov	r0, r4
 800703e:	9908      	ldr	r1, [sp, #32]
 8007040:	f7fe fe72 	bl	8005d28 <_Bfree>
 8007044:	4659      	mov	r1, fp
 8007046:	4620      	mov	r0, r4
 8007048:	f7fe fe6e 	bl	8005d28 <_Bfree>
 800704c:	4631      	mov	r1, r6
 800704e:	4620      	mov	r0, r4
 8007050:	f7fe fe6a 	bl	8005d28 <_Bfree>
 8007054:	e605      	b.n	8006c62 <_strtod_l+0x63a>
 8007056:	f1b8 0f01 	cmp.w	r8, #1
 800705a:	d103      	bne.n	8007064 <_strtod_l+0xa3c>
 800705c:	f1b9 0f00 	cmp.w	r9, #0
 8007060:	f43f ad91 	beq.w	8006b86 <_strtod_l+0x55e>
 8007064:	2200      	movs	r2, #0
 8007066:	4b39      	ldr	r3, [pc, #228]	; (800714c <_strtod_l+0xb24>)
 8007068:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800706a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800706e:	e016      	b.n	800709e <_strtod_l+0xa76>
 8007070:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007072:	4f33      	ldr	r7, [pc, #204]	; (8007140 <_strtod_l+0xb18>)
 8007074:	e7a9      	b.n	8006fca <_strtod_l+0x9a2>
 8007076:	4b32      	ldr	r3, [pc, #200]	; (8007140 <_strtod_l+0xb18>)
 8007078:	2200      	movs	r2, #0
 800707a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800707e:	f7f9 fa2b 	bl	80004d8 <__aeabi_dmul>
 8007082:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007084:	4605      	mov	r5, r0
 8007086:	460f      	mov	r7, r1
 8007088:	2b00      	cmp	r3, #0
 800708a:	d09e      	beq.n	8006fca <_strtod_l+0x9a2>
 800708c:	4602      	mov	r2, r0
 800708e:	460b      	mov	r3, r1
 8007090:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007094:	e79d      	b.n	8006fd2 <_strtod_l+0x9aa>
 8007096:	2200      	movs	r2, #0
 8007098:	4b28      	ldr	r3, [pc, #160]	; (800713c <_strtod_l+0xb14>)
 800709a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800709e:	4f27      	ldr	r7, [pc, #156]	; (800713c <_strtod_l+0xb14>)
 80070a0:	e797      	b.n	8006fd2 <_strtod_l+0x9aa>
 80070a2:	2200      	movs	r2, #0
 80070a4:	4b29      	ldr	r3, [pc, #164]	; (800714c <_strtod_l+0xb24>)
 80070a6:	4645      	mov	r5, r8
 80070a8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80070ac:	e7f7      	b.n	800709e <_strtod_l+0xa76>
 80070ae:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 80070b2:	9b05      	ldr	r3, [sp, #20]
 80070b4:	46ca      	mov	sl, r9
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d1bc      	bne.n	8007034 <_strtod_l+0xa0c>
 80070ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80070be:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80070c0:	0d1b      	lsrs	r3, r3, #20
 80070c2:	051b      	lsls	r3, r3, #20
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d1b5      	bne.n	8007034 <_strtod_l+0xa0c>
 80070c8:	4628      	mov	r0, r5
 80070ca:	4639      	mov	r1, r7
 80070cc:	f7f9 fd4c 	bl	8000b68 <__aeabi_d2lz>
 80070d0:	f7f9 f9d4 	bl	800047c <__aeabi_l2d>
 80070d4:	4602      	mov	r2, r0
 80070d6:	460b      	mov	r3, r1
 80070d8:	4628      	mov	r0, r5
 80070da:	4639      	mov	r1, r7
 80070dc:	f7f9 f844 	bl	8000168 <__aeabi_dsub>
 80070e0:	460b      	mov	r3, r1
 80070e2:	4602      	mov	r2, r0
 80070e4:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 80070e8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80070ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070ee:	ea4a 0a08 	orr.w	sl, sl, r8
 80070f2:	ea5a 0a03 	orrs.w	sl, sl, r3
 80070f6:	d06c      	beq.n	80071d2 <_strtod_l+0xbaa>
 80070f8:	a309      	add	r3, pc, #36	; (adr r3, 8007120 <_strtod_l+0xaf8>)
 80070fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070fe:	f7f9 fc5d 	bl	80009bc <__aeabi_dcmplt>
 8007102:	2800      	cmp	r0, #0
 8007104:	f47f acd8 	bne.w	8006ab8 <_strtod_l+0x490>
 8007108:	a307      	add	r3, pc, #28	; (adr r3, 8007128 <_strtod_l+0xb00>)
 800710a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800710e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007112:	f7f9 fc71 	bl	80009f8 <__aeabi_dcmpgt>
 8007116:	2800      	cmp	r0, #0
 8007118:	d08c      	beq.n	8007034 <_strtod_l+0xa0c>
 800711a:	e4cd      	b.n	8006ab8 <_strtod_l+0x490>
 800711c:	f3af 8000 	nop.w
 8007120:	94a03595 	.word	0x94a03595
 8007124:	3fdfffff 	.word	0x3fdfffff
 8007128:	35afe535 	.word	0x35afe535
 800712c:	3fe00000 	.word	0x3fe00000
 8007130:	000fffff 	.word	0x000fffff
 8007134:	7ff00000 	.word	0x7ff00000
 8007138:	7fefffff 	.word	0x7fefffff
 800713c:	3ff00000 	.word	0x3ff00000
 8007140:	3fe00000 	.word	0x3fe00000
 8007144:	7fe00000 	.word	0x7fe00000
 8007148:	7c9fffff 	.word	0x7c9fffff
 800714c:	bff00000 	.word	0xbff00000
 8007150:	9b05      	ldr	r3, [sp, #20]
 8007152:	b333      	cbz	r3, 80071a2 <_strtod_l+0xb7a>
 8007154:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007156:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800715a:	d822      	bhi.n	80071a2 <_strtod_l+0xb7a>
 800715c:	a328      	add	r3, pc, #160	; (adr r3, 8007200 <_strtod_l+0xbd8>)
 800715e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007162:	4628      	mov	r0, r5
 8007164:	4639      	mov	r1, r7
 8007166:	f7f9 fc33 	bl	80009d0 <__aeabi_dcmple>
 800716a:	b1a0      	cbz	r0, 8007196 <_strtod_l+0xb6e>
 800716c:	4639      	mov	r1, r7
 800716e:	4628      	mov	r0, r5
 8007170:	f7f9 fc8a 	bl	8000a88 <__aeabi_d2uiz>
 8007174:	2801      	cmp	r0, #1
 8007176:	bf38      	it	cc
 8007178:	2001      	movcc	r0, #1
 800717a:	f7f9 f933 	bl	80003e4 <__aeabi_ui2d>
 800717e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007180:	4605      	mov	r5, r0
 8007182:	460f      	mov	r7, r1
 8007184:	bb03      	cbnz	r3, 80071c8 <_strtod_l+0xba0>
 8007186:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800718a:	9014      	str	r0, [sp, #80]	; 0x50
 800718c:	9315      	str	r3, [sp, #84]	; 0x54
 800718e:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007192:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007196:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007198:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800719a:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800719e:	1a9b      	subs	r3, r3, r2
 80071a0:	9311      	str	r3, [sp, #68]	; 0x44
 80071a2:	980c      	ldr	r0, [sp, #48]	; 0x30
 80071a4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80071a6:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 80071aa:	f7ff f8e9 	bl	8006380 <__ulp>
 80071ae:	4602      	mov	r2, r0
 80071b0:	460b      	mov	r3, r1
 80071b2:	4640      	mov	r0, r8
 80071b4:	4649      	mov	r1, r9
 80071b6:	f7f9 f98f 	bl	80004d8 <__aeabi_dmul>
 80071ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80071bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80071be:	f7f8 ffd5 	bl	800016c <__adddf3>
 80071c2:	4680      	mov	r8, r0
 80071c4:	4689      	mov	r9, r1
 80071c6:	e774      	b.n	80070b2 <_strtod_l+0xa8a>
 80071c8:	4602      	mov	r2, r0
 80071ca:	460b      	mov	r3, r1
 80071cc:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80071d0:	e7dd      	b.n	800718e <_strtod_l+0xb66>
 80071d2:	a30d      	add	r3, pc, #52	; (adr r3, 8007208 <_strtod_l+0xbe0>)
 80071d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d8:	f7f9 fbf0 	bl	80009bc <__aeabi_dcmplt>
 80071dc:	e79b      	b.n	8007116 <_strtod_l+0xaee>
 80071de:	2300      	movs	r3, #0
 80071e0:	930e      	str	r3, [sp, #56]	; 0x38
 80071e2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80071e4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80071e6:	6013      	str	r3, [r2, #0]
 80071e8:	f7ff ba5b 	b.w	80066a2 <_strtod_l+0x7a>
 80071ec:	2a65      	cmp	r2, #101	; 0x65
 80071ee:	f43f ab52 	beq.w	8006896 <_strtod_l+0x26e>
 80071f2:	2a45      	cmp	r2, #69	; 0x45
 80071f4:	f43f ab4f 	beq.w	8006896 <_strtod_l+0x26e>
 80071f8:	2301      	movs	r3, #1
 80071fa:	f7ff bb87 	b.w	800690c <_strtod_l+0x2e4>
 80071fe:	bf00      	nop
 8007200:	ffc00000 	.word	0xffc00000
 8007204:	41dfffff 	.word	0x41dfffff
 8007208:	94a03595 	.word	0x94a03595
 800720c:	3fcfffff 	.word	0x3fcfffff

08007210 <_strtod_r>:
 8007210:	4b01      	ldr	r3, [pc, #4]	; (8007218 <_strtod_r+0x8>)
 8007212:	f7ff ba09 	b.w	8006628 <_strtod_l>
 8007216:	bf00      	nop
 8007218:	20000070 	.word	0x20000070

0800721c <_strtol_l.constprop.0>:
 800721c:	2b01      	cmp	r3, #1
 800721e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007222:	4686      	mov	lr, r0
 8007224:	4690      	mov	r8, r2
 8007226:	d001      	beq.n	800722c <_strtol_l.constprop.0+0x10>
 8007228:	2b24      	cmp	r3, #36	; 0x24
 800722a:	d906      	bls.n	800723a <_strtol_l.constprop.0+0x1e>
 800722c:	f7fd fd92 	bl	8004d54 <__errno>
 8007230:	2316      	movs	r3, #22
 8007232:	6003      	str	r3, [r0, #0]
 8007234:	2000      	movs	r0, #0
 8007236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800723a:	460d      	mov	r5, r1
 800723c:	4835      	ldr	r0, [pc, #212]	; (8007314 <_strtol_l.constprop.0+0xf8>)
 800723e:	462a      	mov	r2, r5
 8007240:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007244:	5d06      	ldrb	r6, [r0, r4]
 8007246:	f016 0608 	ands.w	r6, r6, #8
 800724a:	d1f8      	bne.n	800723e <_strtol_l.constprop.0+0x22>
 800724c:	2c2d      	cmp	r4, #45	; 0x2d
 800724e:	d12e      	bne.n	80072ae <_strtol_l.constprop.0+0x92>
 8007250:	2601      	movs	r6, #1
 8007252:	782c      	ldrb	r4, [r5, #0]
 8007254:	1c95      	adds	r5, r2, #2
 8007256:	2b00      	cmp	r3, #0
 8007258:	d057      	beq.n	800730a <_strtol_l.constprop.0+0xee>
 800725a:	2b10      	cmp	r3, #16
 800725c:	d109      	bne.n	8007272 <_strtol_l.constprop.0+0x56>
 800725e:	2c30      	cmp	r4, #48	; 0x30
 8007260:	d107      	bne.n	8007272 <_strtol_l.constprop.0+0x56>
 8007262:	782a      	ldrb	r2, [r5, #0]
 8007264:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007268:	2a58      	cmp	r2, #88	; 0x58
 800726a:	d149      	bne.n	8007300 <_strtol_l.constprop.0+0xe4>
 800726c:	2310      	movs	r3, #16
 800726e:	786c      	ldrb	r4, [r5, #1]
 8007270:	3502      	adds	r5, #2
 8007272:	2200      	movs	r2, #0
 8007274:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8007278:	f10c 3cff 	add.w	ip, ip, #4294967295
 800727c:	fbbc f9f3 	udiv	r9, ip, r3
 8007280:	4610      	mov	r0, r2
 8007282:	fb03 ca19 	mls	sl, r3, r9, ip
 8007286:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800728a:	2f09      	cmp	r7, #9
 800728c:	d814      	bhi.n	80072b8 <_strtol_l.constprop.0+0x9c>
 800728e:	463c      	mov	r4, r7
 8007290:	42a3      	cmp	r3, r4
 8007292:	dd20      	ble.n	80072d6 <_strtol_l.constprop.0+0xba>
 8007294:	1c57      	adds	r7, r2, #1
 8007296:	d007      	beq.n	80072a8 <_strtol_l.constprop.0+0x8c>
 8007298:	4581      	cmp	r9, r0
 800729a:	d319      	bcc.n	80072d0 <_strtol_l.constprop.0+0xb4>
 800729c:	d101      	bne.n	80072a2 <_strtol_l.constprop.0+0x86>
 800729e:	45a2      	cmp	sl, r4
 80072a0:	db16      	blt.n	80072d0 <_strtol_l.constprop.0+0xb4>
 80072a2:	2201      	movs	r2, #1
 80072a4:	fb00 4003 	mla	r0, r0, r3, r4
 80072a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80072ac:	e7eb      	b.n	8007286 <_strtol_l.constprop.0+0x6a>
 80072ae:	2c2b      	cmp	r4, #43	; 0x2b
 80072b0:	bf04      	itt	eq
 80072b2:	782c      	ldrbeq	r4, [r5, #0]
 80072b4:	1c95      	addeq	r5, r2, #2
 80072b6:	e7ce      	b.n	8007256 <_strtol_l.constprop.0+0x3a>
 80072b8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80072bc:	2f19      	cmp	r7, #25
 80072be:	d801      	bhi.n	80072c4 <_strtol_l.constprop.0+0xa8>
 80072c0:	3c37      	subs	r4, #55	; 0x37
 80072c2:	e7e5      	b.n	8007290 <_strtol_l.constprop.0+0x74>
 80072c4:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80072c8:	2f19      	cmp	r7, #25
 80072ca:	d804      	bhi.n	80072d6 <_strtol_l.constprop.0+0xba>
 80072cc:	3c57      	subs	r4, #87	; 0x57
 80072ce:	e7df      	b.n	8007290 <_strtol_l.constprop.0+0x74>
 80072d0:	f04f 32ff 	mov.w	r2, #4294967295
 80072d4:	e7e8      	b.n	80072a8 <_strtol_l.constprop.0+0x8c>
 80072d6:	1c53      	adds	r3, r2, #1
 80072d8:	d108      	bne.n	80072ec <_strtol_l.constprop.0+0xd0>
 80072da:	2322      	movs	r3, #34	; 0x22
 80072dc:	4660      	mov	r0, ip
 80072de:	f8ce 3000 	str.w	r3, [lr]
 80072e2:	f1b8 0f00 	cmp.w	r8, #0
 80072e6:	d0a6      	beq.n	8007236 <_strtol_l.constprop.0+0x1a>
 80072e8:	1e69      	subs	r1, r5, #1
 80072ea:	e006      	b.n	80072fa <_strtol_l.constprop.0+0xde>
 80072ec:	b106      	cbz	r6, 80072f0 <_strtol_l.constprop.0+0xd4>
 80072ee:	4240      	negs	r0, r0
 80072f0:	f1b8 0f00 	cmp.w	r8, #0
 80072f4:	d09f      	beq.n	8007236 <_strtol_l.constprop.0+0x1a>
 80072f6:	2a00      	cmp	r2, #0
 80072f8:	d1f6      	bne.n	80072e8 <_strtol_l.constprop.0+0xcc>
 80072fa:	f8c8 1000 	str.w	r1, [r8]
 80072fe:	e79a      	b.n	8007236 <_strtol_l.constprop.0+0x1a>
 8007300:	2430      	movs	r4, #48	; 0x30
 8007302:	2b00      	cmp	r3, #0
 8007304:	d1b5      	bne.n	8007272 <_strtol_l.constprop.0+0x56>
 8007306:	2308      	movs	r3, #8
 8007308:	e7b3      	b.n	8007272 <_strtol_l.constprop.0+0x56>
 800730a:	2c30      	cmp	r4, #48	; 0x30
 800730c:	d0a9      	beq.n	8007262 <_strtol_l.constprop.0+0x46>
 800730e:	230a      	movs	r3, #10
 8007310:	e7af      	b.n	8007272 <_strtol_l.constprop.0+0x56>
 8007312:	bf00      	nop
 8007314:	080087c1 	.word	0x080087c1

08007318 <_strtol_r>:
 8007318:	f7ff bf80 	b.w	800721c <_strtol_l.constprop.0>

0800731c <__ssputs_r>:
 800731c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007320:	461f      	mov	r7, r3
 8007322:	688e      	ldr	r6, [r1, #8]
 8007324:	4682      	mov	sl, r0
 8007326:	42be      	cmp	r6, r7
 8007328:	460c      	mov	r4, r1
 800732a:	4690      	mov	r8, r2
 800732c:	680b      	ldr	r3, [r1, #0]
 800732e:	d82c      	bhi.n	800738a <__ssputs_r+0x6e>
 8007330:	898a      	ldrh	r2, [r1, #12]
 8007332:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007336:	d026      	beq.n	8007386 <__ssputs_r+0x6a>
 8007338:	6965      	ldr	r5, [r4, #20]
 800733a:	6909      	ldr	r1, [r1, #16]
 800733c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007340:	eba3 0901 	sub.w	r9, r3, r1
 8007344:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007348:	1c7b      	adds	r3, r7, #1
 800734a:	444b      	add	r3, r9
 800734c:	106d      	asrs	r5, r5, #1
 800734e:	429d      	cmp	r5, r3
 8007350:	bf38      	it	cc
 8007352:	461d      	movcc	r5, r3
 8007354:	0553      	lsls	r3, r2, #21
 8007356:	d527      	bpl.n	80073a8 <__ssputs_r+0x8c>
 8007358:	4629      	mov	r1, r5
 800735a:	f7fe fc19 	bl	8005b90 <_malloc_r>
 800735e:	4606      	mov	r6, r0
 8007360:	b360      	cbz	r0, 80073bc <__ssputs_r+0xa0>
 8007362:	464a      	mov	r2, r9
 8007364:	6921      	ldr	r1, [r4, #16]
 8007366:	f000 fa17 	bl	8007798 <memcpy>
 800736a:	89a3      	ldrh	r3, [r4, #12]
 800736c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007370:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007374:	81a3      	strh	r3, [r4, #12]
 8007376:	6126      	str	r6, [r4, #16]
 8007378:	444e      	add	r6, r9
 800737a:	6026      	str	r6, [r4, #0]
 800737c:	463e      	mov	r6, r7
 800737e:	6165      	str	r5, [r4, #20]
 8007380:	eba5 0509 	sub.w	r5, r5, r9
 8007384:	60a5      	str	r5, [r4, #8]
 8007386:	42be      	cmp	r6, r7
 8007388:	d900      	bls.n	800738c <__ssputs_r+0x70>
 800738a:	463e      	mov	r6, r7
 800738c:	4632      	mov	r2, r6
 800738e:	4641      	mov	r1, r8
 8007390:	6820      	ldr	r0, [r4, #0]
 8007392:	f000 f9c5 	bl	8007720 <memmove>
 8007396:	2000      	movs	r0, #0
 8007398:	68a3      	ldr	r3, [r4, #8]
 800739a:	1b9b      	subs	r3, r3, r6
 800739c:	60a3      	str	r3, [r4, #8]
 800739e:	6823      	ldr	r3, [r4, #0]
 80073a0:	4433      	add	r3, r6
 80073a2:	6023      	str	r3, [r4, #0]
 80073a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073a8:	462a      	mov	r2, r5
 80073aa:	f000 fda6 	bl	8007efa <_realloc_r>
 80073ae:	4606      	mov	r6, r0
 80073b0:	2800      	cmp	r0, #0
 80073b2:	d1e0      	bne.n	8007376 <__ssputs_r+0x5a>
 80073b4:	4650      	mov	r0, sl
 80073b6:	6921      	ldr	r1, [r4, #16]
 80073b8:	f7fe fb7a 	bl	8005ab0 <_free_r>
 80073bc:	230c      	movs	r3, #12
 80073be:	f8ca 3000 	str.w	r3, [sl]
 80073c2:	89a3      	ldrh	r3, [r4, #12]
 80073c4:	f04f 30ff 	mov.w	r0, #4294967295
 80073c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073cc:	81a3      	strh	r3, [r4, #12]
 80073ce:	e7e9      	b.n	80073a4 <__ssputs_r+0x88>

080073d0 <_svfiprintf_r>:
 80073d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073d4:	4698      	mov	r8, r3
 80073d6:	898b      	ldrh	r3, [r1, #12]
 80073d8:	4607      	mov	r7, r0
 80073da:	061b      	lsls	r3, r3, #24
 80073dc:	460d      	mov	r5, r1
 80073de:	4614      	mov	r4, r2
 80073e0:	b09d      	sub	sp, #116	; 0x74
 80073e2:	d50e      	bpl.n	8007402 <_svfiprintf_r+0x32>
 80073e4:	690b      	ldr	r3, [r1, #16]
 80073e6:	b963      	cbnz	r3, 8007402 <_svfiprintf_r+0x32>
 80073e8:	2140      	movs	r1, #64	; 0x40
 80073ea:	f7fe fbd1 	bl	8005b90 <_malloc_r>
 80073ee:	6028      	str	r0, [r5, #0]
 80073f0:	6128      	str	r0, [r5, #16]
 80073f2:	b920      	cbnz	r0, 80073fe <_svfiprintf_r+0x2e>
 80073f4:	230c      	movs	r3, #12
 80073f6:	603b      	str	r3, [r7, #0]
 80073f8:	f04f 30ff 	mov.w	r0, #4294967295
 80073fc:	e0d0      	b.n	80075a0 <_svfiprintf_r+0x1d0>
 80073fe:	2340      	movs	r3, #64	; 0x40
 8007400:	616b      	str	r3, [r5, #20]
 8007402:	2300      	movs	r3, #0
 8007404:	9309      	str	r3, [sp, #36]	; 0x24
 8007406:	2320      	movs	r3, #32
 8007408:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800740c:	2330      	movs	r3, #48	; 0x30
 800740e:	f04f 0901 	mov.w	r9, #1
 8007412:	f8cd 800c 	str.w	r8, [sp, #12]
 8007416:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80075b8 <_svfiprintf_r+0x1e8>
 800741a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800741e:	4623      	mov	r3, r4
 8007420:	469a      	mov	sl, r3
 8007422:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007426:	b10a      	cbz	r2, 800742c <_svfiprintf_r+0x5c>
 8007428:	2a25      	cmp	r2, #37	; 0x25
 800742a:	d1f9      	bne.n	8007420 <_svfiprintf_r+0x50>
 800742c:	ebba 0b04 	subs.w	fp, sl, r4
 8007430:	d00b      	beq.n	800744a <_svfiprintf_r+0x7a>
 8007432:	465b      	mov	r3, fp
 8007434:	4622      	mov	r2, r4
 8007436:	4629      	mov	r1, r5
 8007438:	4638      	mov	r0, r7
 800743a:	f7ff ff6f 	bl	800731c <__ssputs_r>
 800743e:	3001      	adds	r0, #1
 8007440:	f000 80a9 	beq.w	8007596 <_svfiprintf_r+0x1c6>
 8007444:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007446:	445a      	add	r2, fp
 8007448:	9209      	str	r2, [sp, #36]	; 0x24
 800744a:	f89a 3000 	ldrb.w	r3, [sl]
 800744e:	2b00      	cmp	r3, #0
 8007450:	f000 80a1 	beq.w	8007596 <_svfiprintf_r+0x1c6>
 8007454:	2300      	movs	r3, #0
 8007456:	f04f 32ff 	mov.w	r2, #4294967295
 800745a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800745e:	f10a 0a01 	add.w	sl, sl, #1
 8007462:	9304      	str	r3, [sp, #16]
 8007464:	9307      	str	r3, [sp, #28]
 8007466:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800746a:	931a      	str	r3, [sp, #104]	; 0x68
 800746c:	4654      	mov	r4, sl
 800746e:	2205      	movs	r2, #5
 8007470:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007474:	4850      	ldr	r0, [pc, #320]	; (80075b8 <_svfiprintf_r+0x1e8>)
 8007476:	f7fd fc99 	bl	8004dac <memchr>
 800747a:	9a04      	ldr	r2, [sp, #16]
 800747c:	b9d8      	cbnz	r0, 80074b6 <_svfiprintf_r+0xe6>
 800747e:	06d0      	lsls	r0, r2, #27
 8007480:	bf44      	itt	mi
 8007482:	2320      	movmi	r3, #32
 8007484:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007488:	0711      	lsls	r1, r2, #28
 800748a:	bf44      	itt	mi
 800748c:	232b      	movmi	r3, #43	; 0x2b
 800748e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007492:	f89a 3000 	ldrb.w	r3, [sl]
 8007496:	2b2a      	cmp	r3, #42	; 0x2a
 8007498:	d015      	beq.n	80074c6 <_svfiprintf_r+0xf6>
 800749a:	4654      	mov	r4, sl
 800749c:	2000      	movs	r0, #0
 800749e:	f04f 0c0a 	mov.w	ip, #10
 80074a2:	9a07      	ldr	r2, [sp, #28]
 80074a4:	4621      	mov	r1, r4
 80074a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074aa:	3b30      	subs	r3, #48	; 0x30
 80074ac:	2b09      	cmp	r3, #9
 80074ae:	d94d      	bls.n	800754c <_svfiprintf_r+0x17c>
 80074b0:	b1b0      	cbz	r0, 80074e0 <_svfiprintf_r+0x110>
 80074b2:	9207      	str	r2, [sp, #28]
 80074b4:	e014      	b.n	80074e0 <_svfiprintf_r+0x110>
 80074b6:	eba0 0308 	sub.w	r3, r0, r8
 80074ba:	fa09 f303 	lsl.w	r3, r9, r3
 80074be:	4313      	orrs	r3, r2
 80074c0:	46a2      	mov	sl, r4
 80074c2:	9304      	str	r3, [sp, #16]
 80074c4:	e7d2      	b.n	800746c <_svfiprintf_r+0x9c>
 80074c6:	9b03      	ldr	r3, [sp, #12]
 80074c8:	1d19      	adds	r1, r3, #4
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	9103      	str	r1, [sp, #12]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	bfbb      	ittet	lt
 80074d2:	425b      	neglt	r3, r3
 80074d4:	f042 0202 	orrlt.w	r2, r2, #2
 80074d8:	9307      	strge	r3, [sp, #28]
 80074da:	9307      	strlt	r3, [sp, #28]
 80074dc:	bfb8      	it	lt
 80074de:	9204      	strlt	r2, [sp, #16]
 80074e0:	7823      	ldrb	r3, [r4, #0]
 80074e2:	2b2e      	cmp	r3, #46	; 0x2e
 80074e4:	d10c      	bne.n	8007500 <_svfiprintf_r+0x130>
 80074e6:	7863      	ldrb	r3, [r4, #1]
 80074e8:	2b2a      	cmp	r3, #42	; 0x2a
 80074ea:	d134      	bne.n	8007556 <_svfiprintf_r+0x186>
 80074ec:	9b03      	ldr	r3, [sp, #12]
 80074ee:	3402      	adds	r4, #2
 80074f0:	1d1a      	adds	r2, r3, #4
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	9203      	str	r2, [sp, #12]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	bfb8      	it	lt
 80074fa:	f04f 33ff 	movlt.w	r3, #4294967295
 80074fe:	9305      	str	r3, [sp, #20]
 8007500:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80075bc <_svfiprintf_r+0x1ec>
 8007504:	2203      	movs	r2, #3
 8007506:	4650      	mov	r0, sl
 8007508:	7821      	ldrb	r1, [r4, #0]
 800750a:	f7fd fc4f 	bl	8004dac <memchr>
 800750e:	b138      	cbz	r0, 8007520 <_svfiprintf_r+0x150>
 8007510:	2240      	movs	r2, #64	; 0x40
 8007512:	9b04      	ldr	r3, [sp, #16]
 8007514:	eba0 000a 	sub.w	r0, r0, sl
 8007518:	4082      	lsls	r2, r0
 800751a:	4313      	orrs	r3, r2
 800751c:	3401      	adds	r4, #1
 800751e:	9304      	str	r3, [sp, #16]
 8007520:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007524:	2206      	movs	r2, #6
 8007526:	4826      	ldr	r0, [pc, #152]	; (80075c0 <_svfiprintf_r+0x1f0>)
 8007528:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800752c:	f7fd fc3e 	bl	8004dac <memchr>
 8007530:	2800      	cmp	r0, #0
 8007532:	d038      	beq.n	80075a6 <_svfiprintf_r+0x1d6>
 8007534:	4b23      	ldr	r3, [pc, #140]	; (80075c4 <_svfiprintf_r+0x1f4>)
 8007536:	bb1b      	cbnz	r3, 8007580 <_svfiprintf_r+0x1b0>
 8007538:	9b03      	ldr	r3, [sp, #12]
 800753a:	3307      	adds	r3, #7
 800753c:	f023 0307 	bic.w	r3, r3, #7
 8007540:	3308      	adds	r3, #8
 8007542:	9303      	str	r3, [sp, #12]
 8007544:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007546:	4433      	add	r3, r6
 8007548:	9309      	str	r3, [sp, #36]	; 0x24
 800754a:	e768      	b.n	800741e <_svfiprintf_r+0x4e>
 800754c:	460c      	mov	r4, r1
 800754e:	2001      	movs	r0, #1
 8007550:	fb0c 3202 	mla	r2, ip, r2, r3
 8007554:	e7a6      	b.n	80074a4 <_svfiprintf_r+0xd4>
 8007556:	2300      	movs	r3, #0
 8007558:	f04f 0c0a 	mov.w	ip, #10
 800755c:	4619      	mov	r1, r3
 800755e:	3401      	adds	r4, #1
 8007560:	9305      	str	r3, [sp, #20]
 8007562:	4620      	mov	r0, r4
 8007564:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007568:	3a30      	subs	r2, #48	; 0x30
 800756a:	2a09      	cmp	r2, #9
 800756c:	d903      	bls.n	8007576 <_svfiprintf_r+0x1a6>
 800756e:	2b00      	cmp	r3, #0
 8007570:	d0c6      	beq.n	8007500 <_svfiprintf_r+0x130>
 8007572:	9105      	str	r1, [sp, #20]
 8007574:	e7c4      	b.n	8007500 <_svfiprintf_r+0x130>
 8007576:	4604      	mov	r4, r0
 8007578:	2301      	movs	r3, #1
 800757a:	fb0c 2101 	mla	r1, ip, r1, r2
 800757e:	e7f0      	b.n	8007562 <_svfiprintf_r+0x192>
 8007580:	ab03      	add	r3, sp, #12
 8007582:	9300      	str	r3, [sp, #0]
 8007584:	462a      	mov	r2, r5
 8007586:	4638      	mov	r0, r7
 8007588:	4b0f      	ldr	r3, [pc, #60]	; (80075c8 <_svfiprintf_r+0x1f8>)
 800758a:	a904      	add	r1, sp, #16
 800758c:	f7fc fcac 	bl	8003ee8 <_printf_float>
 8007590:	1c42      	adds	r2, r0, #1
 8007592:	4606      	mov	r6, r0
 8007594:	d1d6      	bne.n	8007544 <_svfiprintf_r+0x174>
 8007596:	89ab      	ldrh	r3, [r5, #12]
 8007598:	065b      	lsls	r3, r3, #25
 800759a:	f53f af2d 	bmi.w	80073f8 <_svfiprintf_r+0x28>
 800759e:	9809      	ldr	r0, [sp, #36]	; 0x24
 80075a0:	b01d      	add	sp, #116	; 0x74
 80075a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075a6:	ab03      	add	r3, sp, #12
 80075a8:	9300      	str	r3, [sp, #0]
 80075aa:	462a      	mov	r2, r5
 80075ac:	4638      	mov	r0, r7
 80075ae:	4b06      	ldr	r3, [pc, #24]	; (80075c8 <_svfiprintf_r+0x1f8>)
 80075b0:	a904      	add	r1, sp, #16
 80075b2:	f7fc ff39 	bl	8004428 <_printf_i>
 80075b6:	e7eb      	b.n	8007590 <_svfiprintf_r+0x1c0>
 80075b8:	080088c1 	.word	0x080088c1
 80075bc:	080088c7 	.word	0x080088c7
 80075c0:	080088cb 	.word	0x080088cb
 80075c4:	08003ee9 	.word	0x08003ee9
 80075c8:	0800731d 	.word	0x0800731d

080075cc <__sflush_r>:
 80075cc:	898a      	ldrh	r2, [r1, #12]
 80075ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075d0:	4605      	mov	r5, r0
 80075d2:	0710      	lsls	r0, r2, #28
 80075d4:	460c      	mov	r4, r1
 80075d6:	d457      	bmi.n	8007688 <__sflush_r+0xbc>
 80075d8:	684b      	ldr	r3, [r1, #4]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	dc04      	bgt.n	80075e8 <__sflush_r+0x1c>
 80075de:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	dc01      	bgt.n	80075e8 <__sflush_r+0x1c>
 80075e4:	2000      	movs	r0, #0
 80075e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80075ea:	2e00      	cmp	r6, #0
 80075ec:	d0fa      	beq.n	80075e4 <__sflush_r+0x18>
 80075ee:	2300      	movs	r3, #0
 80075f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80075f4:	682f      	ldr	r7, [r5, #0]
 80075f6:	6a21      	ldr	r1, [r4, #32]
 80075f8:	602b      	str	r3, [r5, #0]
 80075fa:	d032      	beq.n	8007662 <__sflush_r+0x96>
 80075fc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80075fe:	89a3      	ldrh	r3, [r4, #12]
 8007600:	075a      	lsls	r2, r3, #29
 8007602:	d505      	bpl.n	8007610 <__sflush_r+0x44>
 8007604:	6863      	ldr	r3, [r4, #4]
 8007606:	1ac0      	subs	r0, r0, r3
 8007608:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800760a:	b10b      	cbz	r3, 8007610 <__sflush_r+0x44>
 800760c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800760e:	1ac0      	subs	r0, r0, r3
 8007610:	2300      	movs	r3, #0
 8007612:	4602      	mov	r2, r0
 8007614:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007616:	4628      	mov	r0, r5
 8007618:	6a21      	ldr	r1, [r4, #32]
 800761a:	47b0      	blx	r6
 800761c:	1c43      	adds	r3, r0, #1
 800761e:	89a3      	ldrh	r3, [r4, #12]
 8007620:	d106      	bne.n	8007630 <__sflush_r+0x64>
 8007622:	6829      	ldr	r1, [r5, #0]
 8007624:	291d      	cmp	r1, #29
 8007626:	d82b      	bhi.n	8007680 <__sflush_r+0xb4>
 8007628:	4a28      	ldr	r2, [pc, #160]	; (80076cc <__sflush_r+0x100>)
 800762a:	410a      	asrs	r2, r1
 800762c:	07d6      	lsls	r6, r2, #31
 800762e:	d427      	bmi.n	8007680 <__sflush_r+0xb4>
 8007630:	2200      	movs	r2, #0
 8007632:	6062      	str	r2, [r4, #4]
 8007634:	6922      	ldr	r2, [r4, #16]
 8007636:	04d9      	lsls	r1, r3, #19
 8007638:	6022      	str	r2, [r4, #0]
 800763a:	d504      	bpl.n	8007646 <__sflush_r+0x7a>
 800763c:	1c42      	adds	r2, r0, #1
 800763e:	d101      	bne.n	8007644 <__sflush_r+0x78>
 8007640:	682b      	ldr	r3, [r5, #0]
 8007642:	b903      	cbnz	r3, 8007646 <__sflush_r+0x7a>
 8007644:	6560      	str	r0, [r4, #84]	; 0x54
 8007646:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007648:	602f      	str	r7, [r5, #0]
 800764a:	2900      	cmp	r1, #0
 800764c:	d0ca      	beq.n	80075e4 <__sflush_r+0x18>
 800764e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007652:	4299      	cmp	r1, r3
 8007654:	d002      	beq.n	800765c <__sflush_r+0x90>
 8007656:	4628      	mov	r0, r5
 8007658:	f7fe fa2a 	bl	8005ab0 <_free_r>
 800765c:	2000      	movs	r0, #0
 800765e:	6360      	str	r0, [r4, #52]	; 0x34
 8007660:	e7c1      	b.n	80075e6 <__sflush_r+0x1a>
 8007662:	2301      	movs	r3, #1
 8007664:	4628      	mov	r0, r5
 8007666:	47b0      	blx	r6
 8007668:	1c41      	adds	r1, r0, #1
 800766a:	d1c8      	bne.n	80075fe <__sflush_r+0x32>
 800766c:	682b      	ldr	r3, [r5, #0]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d0c5      	beq.n	80075fe <__sflush_r+0x32>
 8007672:	2b1d      	cmp	r3, #29
 8007674:	d001      	beq.n	800767a <__sflush_r+0xae>
 8007676:	2b16      	cmp	r3, #22
 8007678:	d101      	bne.n	800767e <__sflush_r+0xb2>
 800767a:	602f      	str	r7, [r5, #0]
 800767c:	e7b2      	b.n	80075e4 <__sflush_r+0x18>
 800767e:	89a3      	ldrh	r3, [r4, #12]
 8007680:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007684:	81a3      	strh	r3, [r4, #12]
 8007686:	e7ae      	b.n	80075e6 <__sflush_r+0x1a>
 8007688:	690f      	ldr	r7, [r1, #16]
 800768a:	2f00      	cmp	r7, #0
 800768c:	d0aa      	beq.n	80075e4 <__sflush_r+0x18>
 800768e:	0793      	lsls	r3, r2, #30
 8007690:	bf18      	it	ne
 8007692:	2300      	movne	r3, #0
 8007694:	680e      	ldr	r6, [r1, #0]
 8007696:	bf08      	it	eq
 8007698:	694b      	ldreq	r3, [r1, #20]
 800769a:	1bf6      	subs	r6, r6, r7
 800769c:	600f      	str	r7, [r1, #0]
 800769e:	608b      	str	r3, [r1, #8]
 80076a0:	2e00      	cmp	r6, #0
 80076a2:	dd9f      	ble.n	80075e4 <__sflush_r+0x18>
 80076a4:	4633      	mov	r3, r6
 80076a6:	463a      	mov	r2, r7
 80076a8:	4628      	mov	r0, r5
 80076aa:	6a21      	ldr	r1, [r4, #32]
 80076ac:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80076b0:	47e0      	blx	ip
 80076b2:	2800      	cmp	r0, #0
 80076b4:	dc06      	bgt.n	80076c4 <__sflush_r+0xf8>
 80076b6:	89a3      	ldrh	r3, [r4, #12]
 80076b8:	f04f 30ff 	mov.w	r0, #4294967295
 80076bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076c0:	81a3      	strh	r3, [r4, #12]
 80076c2:	e790      	b.n	80075e6 <__sflush_r+0x1a>
 80076c4:	4407      	add	r7, r0
 80076c6:	1a36      	subs	r6, r6, r0
 80076c8:	e7ea      	b.n	80076a0 <__sflush_r+0xd4>
 80076ca:	bf00      	nop
 80076cc:	dfbffffe 	.word	0xdfbffffe

080076d0 <_fflush_r>:
 80076d0:	b538      	push	{r3, r4, r5, lr}
 80076d2:	690b      	ldr	r3, [r1, #16]
 80076d4:	4605      	mov	r5, r0
 80076d6:	460c      	mov	r4, r1
 80076d8:	b913      	cbnz	r3, 80076e0 <_fflush_r+0x10>
 80076da:	2500      	movs	r5, #0
 80076dc:	4628      	mov	r0, r5
 80076de:	bd38      	pop	{r3, r4, r5, pc}
 80076e0:	b118      	cbz	r0, 80076ea <_fflush_r+0x1a>
 80076e2:	6a03      	ldr	r3, [r0, #32]
 80076e4:	b90b      	cbnz	r3, 80076ea <_fflush_r+0x1a>
 80076e6:	f7fd fa49 	bl	8004b7c <__sinit>
 80076ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d0f3      	beq.n	80076da <_fflush_r+0xa>
 80076f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80076f4:	07d0      	lsls	r0, r2, #31
 80076f6:	d404      	bmi.n	8007702 <_fflush_r+0x32>
 80076f8:	0599      	lsls	r1, r3, #22
 80076fa:	d402      	bmi.n	8007702 <_fflush_r+0x32>
 80076fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80076fe:	f7fd fb53 	bl	8004da8 <__retarget_lock_acquire_recursive>
 8007702:	4628      	mov	r0, r5
 8007704:	4621      	mov	r1, r4
 8007706:	f7ff ff61 	bl	80075cc <__sflush_r>
 800770a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800770c:	4605      	mov	r5, r0
 800770e:	07da      	lsls	r2, r3, #31
 8007710:	d4e4      	bmi.n	80076dc <_fflush_r+0xc>
 8007712:	89a3      	ldrh	r3, [r4, #12]
 8007714:	059b      	lsls	r3, r3, #22
 8007716:	d4e1      	bmi.n	80076dc <_fflush_r+0xc>
 8007718:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800771a:	f7fd fb46 	bl	8004daa <__retarget_lock_release_recursive>
 800771e:	e7dd      	b.n	80076dc <_fflush_r+0xc>

08007720 <memmove>:
 8007720:	4288      	cmp	r0, r1
 8007722:	b510      	push	{r4, lr}
 8007724:	eb01 0402 	add.w	r4, r1, r2
 8007728:	d902      	bls.n	8007730 <memmove+0x10>
 800772a:	4284      	cmp	r4, r0
 800772c:	4623      	mov	r3, r4
 800772e:	d807      	bhi.n	8007740 <memmove+0x20>
 8007730:	1e43      	subs	r3, r0, #1
 8007732:	42a1      	cmp	r1, r4
 8007734:	d008      	beq.n	8007748 <memmove+0x28>
 8007736:	f811 2b01 	ldrb.w	r2, [r1], #1
 800773a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800773e:	e7f8      	b.n	8007732 <memmove+0x12>
 8007740:	4601      	mov	r1, r0
 8007742:	4402      	add	r2, r0
 8007744:	428a      	cmp	r2, r1
 8007746:	d100      	bne.n	800774a <memmove+0x2a>
 8007748:	bd10      	pop	{r4, pc}
 800774a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800774e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007752:	e7f7      	b.n	8007744 <memmove+0x24>

08007754 <strncmp>:
 8007754:	b510      	push	{r4, lr}
 8007756:	b16a      	cbz	r2, 8007774 <strncmp+0x20>
 8007758:	3901      	subs	r1, #1
 800775a:	1884      	adds	r4, r0, r2
 800775c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007760:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007764:	429a      	cmp	r2, r3
 8007766:	d103      	bne.n	8007770 <strncmp+0x1c>
 8007768:	42a0      	cmp	r0, r4
 800776a:	d001      	beq.n	8007770 <strncmp+0x1c>
 800776c:	2a00      	cmp	r2, #0
 800776e:	d1f5      	bne.n	800775c <strncmp+0x8>
 8007770:	1ad0      	subs	r0, r2, r3
 8007772:	bd10      	pop	{r4, pc}
 8007774:	4610      	mov	r0, r2
 8007776:	e7fc      	b.n	8007772 <strncmp+0x1e>

08007778 <_sbrk_r>:
 8007778:	b538      	push	{r3, r4, r5, lr}
 800777a:	2300      	movs	r3, #0
 800777c:	4d05      	ldr	r5, [pc, #20]	; (8007794 <_sbrk_r+0x1c>)
 800777e:	4604      	mov	r4, r0
 8007780:	4608      	mov	r0, r1
 8007782:	602b      	str	r3, [r5, #0]
 8007784:	f7f9 fd60 	bl	8001248 <_sbrk>
 8007788:	1c43      	adds	r3, r0, #1
 800778a:	d102      	bne.n	8007792 <_sbrk_r+0x1a>
 800778c:	682b      	ldr	r3, [r5, #0]
 800778e:	b103      	cbz	r3, 8007792 <_sbrk_r+0x1a>
 8007790:	6023      	str	r3, [r4, #0]
 8007792:	bd38      	pop	{r3, r4, r5, pc}
 8007794:	200003e8 	.word	0x200003e8

08007798 <memcpy>:
 8007798:	440a      	add	r2, r1
 800779a:	4291      	cmp	r1, r2
 800779c:	f100 33ff 	add.w	r3, r0, #4294967295
 80077a0:	d100      	bne.n	80077a4 <memcpy+0xc>
 80077a2:	4770      	bx	lr
 80077a4:	b510      	push	{r4, lr}
 80077a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077aa:	4291      	cmp	r1, r2
 80077ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80077b0:	d1f9      	bne.n	80077a6 <memcpy+0xe>
 80077b2:	bd10      	pop	{r4, pc}

080077b4 <nan>:
 80077b4:	2000      	movs	r0, #0
 80077b6:	4901      	ldr	r1, [pc, #4]	; (80077bc <nan+0x8>)
 80077b8:	4770      	bx	lr
 80077ba:	bf00      	nop
 80077bc:	7ff80000 	.word	0x7ff80000

080077c0 <__assert_func>:
 80077c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80077c2:	4614      	mov	r4, r2
 80077c4:	461a      	mov	r2, r3
 80077c6:	4b09      	ldr	r3, [pc, #36]	; (80077ec <__assert_func+0x2c>)
 80077c8:	4605      	mov	r5, r0
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	68d8      	ldr	r0, [r3, #12]
 80077ce:	b14c      	cbz	r4, 80077e4 <__assert_func+0x24>
 80077d0:	4b07      	ldr	r3, [pc, #28]	; (80077f0 <__assert_func+0x30>)
 80077d2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80077d6:	9100      	str	r1, [sp, #0]
 80077d8:	462b      	mov	r3, r5
 80077da:	4906      	ldr	r1, [pc, #24]	; (80077f4 <__assert_func+0x34>)
 80077dc:	f000 fbca 	bl	8007f74 <fiprintf>
 80077e0:	f000 fbda 	bl	8007f98 <abort>
 80077e4:	4b04      	ldr	r3, [pc, #16]	; (80077f8 <__assert_func+0x38>)
 80077e6:	461c      	mov	r4, r3
 80077e8:	e7f3      	b.n	80077d2 <__assert_func+0x12>
 80077ea:	bf00      	nop
 80077ec:	2000006c 	.word	0x2000006c
 80077f0:	080088da 	.word	0x080088da
 80077f4:	080088e7 	.word	0x080088e7
 80077f8:	08008915 	.word	0x08008915

080077fc <_calloc_r>:
 80077fc:	b570      	push	{r4, r5, r6, lr}
 80077fe:	fba1 5402 	umull	r5, r4, r1, r2
 8007802:	b934      	cbnz	r4, 8007812 <_calloc_r+0x16>
 8007804:	4629      	mov	r1, r5
 8007806:	f7fe f9c3 	bl	8005b90 <_malloc_r>
 800780a:	4606      	mov	r6, r0
 800780c:	b928      	cbnz	r0, 800781a <_calloc_r+0x1e>
 800780e:	4630      	mov	r0, r6
 8007810:	bd70      	pop	{r4, r5, r6, pc}
 8007812:	220c      	movs	r2, #12
 8007814:	2600      	movs	r6, #0
 8007816:	6002      	str	r2, [r0, #0]
 8007818:	e7f9      	b.n	800780e <_calloc_r+0x12>
 800781a:	462a      	mov	r2, r5
 800781c:	4621      	mov	r1, r4
 800781e:	f7fd fa46 	bl	8004cae <memset>
 8007822:	e7f4      	b.n	800780e <_calloc_r+0x12>

08007824 <rshift>:
 8007824:	6903      	ldr	r3, [r0, #16]
 8007826:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800782a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800782e:	f100 0414 	add.w	r4, r0, #20
 8007832:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007836:	dd46      	ble.n	80078c6 <rshift+0xa2>
 8007838:	f011 011f 	ands.w	r1, r1, #31
 800783c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007840:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007844:	d10c      	bne.n	8007860 <rshift+0x3c>
 8007846:	4629      	mov	r1, r5
 8007848:	f100 0710 	add.w	r7, r0, #16
 800784c:	42b1      	cmp	r1, r6
 800784e:	d335      	bcc.n	80078bc <rshift+0x98>
 8007850:	1a9b      	subs	r3, r3, r2
 8007852:	009b      	lsls	r3, r3, #2
 8007854:	1eea      	subs	r2, r5, #3
 8007856:	4296      	cmp	r6, r2
 8007858:	bf38      	it	cc
 800785a:	2300      	movcc	r3, #0
 800785c:	4423      	add	r3, r4
 800785e:	e015      	b.n	800788c <rshift+0x68>
 8007860:	46a1      	mov	r9, r4
 8007862:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007866:	f1c1 0820 	rsb	r8, r1, #32
 800786a:	40cf      	lsrs	r7, r1
 800786c:	f105 0e04 	add.w	lr, r5, #4
 8007870:	4576      	cmp	r6, lr
 8007872:	46f4      	mov	ip, lr
 8007874:	d816      	bhi.n	80078a4 <rshift+0x80>
 8007876:	1a9a      	subs	r2, r3, r2
 8007878:	0092      	lsls	r2, r2, #2
 800787a:	3a04      	subs	r2, #4
 800787c:	3501      	adds	r5, #1
 800787e:	42ae      	cmp	r6, r5
 8007880:	bf38      	it	cc
 8007882:	2200      	movcc	r2, #0
 8007884:	18a3      	adds	r3, r4, r2
 8007886:	50a7      	str	r7, [r4, r2]
 8007888:	b107      	cbz	r7, 800788c <rshift+0x68>
 800788a:	3304      	adds	r3, #4
 800788c:	42a3      	cmp	r3, r4
 800788e:	eba3 0204 	sub.w	r2, r3, r4
 8007892:	bf08      	it	eq
 8007894:	2300      	moveq	r3, #0
 8007896:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800789a:	6102      	str	r2, [r0, #16]
 800789c:	bf08      	it	eq
 800789e:	6143      	streq	r3, [r0, #20]
 80078a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80078a4:	f8dc c000 	ldr.w	ip, [ip]
 80078a8:	fa0c fc08 	lsl.w	ip, ip, r8
 80078ac:	ea4c 0707 	orr.w	r7, ip, r7
 80078b0:	f849 7b04 	str.w	r7, [r9], #4
 80078b4:	f85e 7b04 	ldr.w	r7, [lr], #4
 80078b8:	40cf      	lsrs	r7, r1
 80078ba:	e7d9      	b.n	8007870 <rshift+0x4c>
 80078bc:	f851 cb04 	ldr.w	ip, [r1], #4
 80078c0:	f847 cf04 	str.w	ip, [r7, #4]!
 80078c4:	e7c2      	b.n	800784c <rshift+0x28>
 80078c6:	4623      	mov	r3, r4
 80078c8:	e7e0      	b.n	800788c <rshift+0x68>

080078ca <__hexdig_fun>:
 80078ca:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80078ce:	2b09      	cmp	r3, #9
 80078d0:	d802      	bhi.n	80078d8 <__hexdig_fun+0xe>
 80078d2:	3820      	subs	r0, #32
 80078d4:	b2c0      	uxtb	r0, r0
 80078d6:	4770      	bx	lr
 80078d8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80078dc:	2b05      	cmp	r3, #5
 80078de:	d801      	bhi.n	80078e4 <__hexdig_fun+0x1a>
 80078e0:	3847      	subs	r0, #71	; 0x47
 80078e2:	e7f7      	b.n	80078d4 <__hexdig_fun+0xa>
 80078e4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80078e8:	2b05      	cmp	r3, #5
 80078ea:	d801      	bhi.n	80078f0 <__hexdig_fun+0x26>
 80078ec:	3827      	subs	r0, #39	; 0x27
 80078ee:	e7f1      	b.n	80078d4 <__hexdig_fun+0xa>
 80078f0:	2000      	movs	r0, #0
 80078f2:	4770      	bx	lr

080078f4 <__gethex>:
 80078f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078f8:	4681      	mov	r9, r0
 80078fa:	468a      	mov	sl, r1
 80078fc:	4617      	mov	r7, r2
 80078fe:	680a      	ldr	r2, [r1, #0]
 8007900:	b085      	sub	sp, #20
 8007902:	f102 0b02 	add.w	fp, r2, #2
 8007906:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800790a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800790e:	9302      	str	r3, [sp, #8]
 8007910:	32fe      	adds	r2, #254	; 0xfe
 8007912:	eb02 030b 	add.w	r3, r2, fp
 8007916:	46d8      	mov	r8, fp
 8007918:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800791c:	9301      	str	r3, [sp, #4]
 800791e:	2830      	cmp	r0, #48	; 0x30
 8007920:	d0f7      	beq.n	8007912 <__gethex+0x1e>
 8007922:	f7ff ffd2 	bl	80078ca <__hexdig_fun>
 8007926:	4604      	mov	r4, r0
 8007928:	2800      	cmp	r0, #0
 800792a:	d138      	bne.n	800799e <__gethex+0xaa>
 800792c:	2201      	movs	r2, #1
 800792e:	4640      	mov	r0, r8
 8007930:	49a7      	ldr	r1, [pc, #668]	; (8007bd0 <__gethex+0x2dc>)
 8007932:	f7ff ff0f 	bl	8007754 <strncmp>
 8007936:	4606      	mov	r6, r0
 8007938:	2800      	cmp	r0, #0
 800793a:	d169      	bne.n	8007a10 <__gethex+0x11c>
 800793c:	f898 0001 	ldrb.w	r0, [r8, #1]
 8007940:	465d      	mov	r5, fp
 8007942:	f7ff ffc2 	bl	80078ca <__hexdig_fun>
 8007946:	2800      	cmp	r0, #0
 8007948:	d064      	beq.n	8007a14 <__gethex+0x120>
 800794a:	465a      	mov	r2, fp
 800794c:	7810      	ldrb	r0, [r2, #0]
 800794e:	4690      	mov	r8, r2
 8007950:	2830      	cmp	r0, #48	; 0x30
 8007952:	f102 0201 	add.w	r2, r2, #1
 8007956:	d0f9      	beq.n	800794c <__gethex+0x58>
 8007958:	f7ff ffb7 	bl	80078ca <__hexdig_fun>
 800795c:	2301      	movs	r3, #1
 800795e:	fab0 f480 	clz	r4, r0
 8007962:	465e      	mov	r6, fp
 8007964:	0964      	lsrs	r4, r4, #5
 8007966:	9301      	str	r3, [sp, #4]
 8007968:	4642      	mov	r2, r8
 800796a:	4615      	mov	r5, r2
 800796c:	7828      	ldrb	r0, [r5, #0]
 800796e:	3201      	adds	r2, #1
 8007970:	f7ff ffab 	bl	80078ca <__hexdig_fun>
 8007974:	2800      	cmp	r0, #0
 8007976:	d1f8      	bne.n	800796a <__gethex+0x76>
 8007978:	2201      	movs	r2, #1
 800797a:	4628      	mov	r0, r5
 800797c:	4994      	ldr	r1, [pc, #592]	; (8007bd0 <__gethex+0x2dc>)
 800797e:	f7ff fee9 	bl	8007754 <strncmp>
 8007982:	b978      	cbnz	r0, 80079a4 <__gethex+0xb0>
 8007984:	b946      	cbnz	r6, 8007998 <__gethex+0xa4>
 8007986:	1c6e      	adds	r6, r5, #1
 8007988:	4632      	mov	r2, r6
 800798a:	4615      	mov	r5, r2
 800798c:	7828      	ldrb	r0, [r5, #0]
 800798e:	3201      	adds	r2, #1
 8007990:	f7ff ff9b 	bl	80078ca <__hexdig_fun>
 8007994:	2800      	cmp	r0, #0
 8007996:	d1f8      	bne.n	800798a <__gethex+0x96>
 8007998:	1b73      	subs	r3, r6, r5
 800799a:	009e      	lsls	r6, r3, #2
 800799c:	e004      	b.n	80079a8 <__gethex+0xb4>
 800799e:	2400      	movs	r4, #0
 80079a0:	4626      	mov	r6, r4
 80079a2:	e7e1      	b.n	8007968 <__gethex+0x74>
 80079a4:	2e00      	cmp	r6, #0
 80079a6:	d1f7      	bne.n	8007998 <__gethex+0xa4>
 80079a8:	782b      	ldrb	r3, [r5, #0]
 80079aa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80079ae:	2b50      	cmp	r3, #80	; 0x50
 80079b0:	d13d      	bne.n	8007a2e <__gethex+0x13a>
 80079b2:	786b      	ldrb	r3, [r5, #1]
 80079b4:	2b2b      	cmp	r3, #43	; 0x2b
 80079b6:	d02f      	beq.n	8007a18 <__gethex+0x124>
 80079b8:	2b2d      	cmp	r3, #45	; 0x2d
 80079ba:	d031      	beq.n	8007a20 <__gethex+0x12c>
 80079bc:	f04f 0b00 	mov.w	fp, #0
 80079c0:	1c69      	adds	r1, r5, #1
 80079c2:	7808      	ldrb	r0, [r1, #0]
 80079c4:	f7ff ff81 	bl	80078ca <__hexdig_fun>
 80079c8:	1e42      	subs	r2, r0, #1
 80079ca:	b2d2      	uxtb	r2, r2
 80079cc:	2a18      	cmp	r2, #24
 80079ce:	d82e      	bhi.n	8007a2e <__gethex+0x13a>
 80079d0:	f1a0 0210 	sub.w	r2, r0, #16
 80079d4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80079d8:	f7ff ff77 	bl	80078ca <__hexdig_fun>
 80079dc:	f100 3cff 	add.w	ip, r0, #4294967295
 80079e0:	fa5f fc8c 	uxtb.w	ip, ip
 80079e4:	f1bc 0f18 	cmp.w	ip, #24
 80079e8:	d91d      	bls.n	8007a26 <__gethex+0x132>
 80079ea:	f1bb 0f00 	cmp.w	fp, #0
 80079ee:	d000      	beq.n	80079f2 <__gethex+0xfe>
 80079f0:	4252      	negs	r2, r2
 80079f2:	4416      	add	r6, r2
 80079f4:	f8ca 1000 	str.w	r1, [sl]
 80079f8:	b1dc      	cbz	r4, 8007a32 <__gethex+0x13e>
 80079fa:	9b01      	ldr	r3, [sp, #4]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	bf14      	ite	ne
 8007a00:	f04f 0800 	movne.w	r8, #0
 8007a04:	f04f 0806 	moveq.w	r8, #6
 8007a08:	4640      	mov	r0, r8
 8007a0a:	b005      	add	sp, #20
 8007a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a10:	4645      	mov	r5, r8
 8007a12:	4626      	mov	r6, r4
 8007a14:	2401      	movs	r4, #1
 8007a16:	e7c7      	b.n	80079a8 <__gethex+0xb4>
 8007a18:	f04f 0b00 	mov.w	fp, #0
 8007a1c:	1ca9      	adds	r1, r5, #2
 8007a1e:	e7d0      	b.n	80079c2 <__gethex+0xce>
 8007a20:	f04f 0b01 	mov.w	fp, #1
 8007a24:	e7fa      	b.n	8007a1c <__gethex+0x128>
 8007a26:	230a      	movs	r3, #10
 8007a28:	fb03 0002 	mla	r0, r3, r2, r0
 8007a2c:	e7d0      	b.n	80079d0 <__gethex+0xdc>
 8007a2e:	4629      	mov	r1, r5
 8007a30:	e7e0      	b.n	80079f4 <__gethex+0x100>
 8007a32:	4621      	mov	r1, r4
 8007a34:	eba5 0308 	sub.w	r3, r5, r8
 8007a38:	3b01      	subs	r3, #1
 8007a3a:	2b07      	cmp	r3, #7
 8007a3c:	dc0a      	bgt.n	8007a54 <__gethex+0x160>
 8007a3e:	4648      	mov	r0, r9
 8007a40:	f7fe f932 	bl	8005ca8 <_Balloc>
 8007a44:	4604      	mov	r4, r0
 8007a46:	b940      	cbnz	r0, 8007a5a <__gethex+0x166>
 8007a48:	4602      	mov	r2, r0
 8007a4a:	21e4      	movs	r1, #228	; 0xe4
 8007a4c:	4b61      	ldr	r3, [pc, #388]	; (8007bd4 <__gethex+0x2e0>)
 8007a4e:	4862      	ldr	r0, [pc, #392]	; (8007bd8 <__gethex+0x2e4>)
 8007a50:	f7ff feb6 	bl	80077c0 <__assert_func>
 8007a54:	3101      	adds	r1, #1
 8007a56:	105b      	asrs	r3, r3, #1
 8007a58:	e7ef      	b.n	8007a3a <__gethex+0x146>
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	469b      	mov	fp, r3
 8007a5e:	f100 0a14 	add.w	sl, r0, #20
 8007a62:	f8cd a004 	str.w	sl, [sp, #4]
 8007a66:	45a8      	cmp	r8, r5
 8007a68:	d344      	bcc.n	8007af4 <__gethex+0x200>
 8007a6a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007a6e:	4658      	mov	r0, fp
 8007a70:	f848 bb04 	str.w	fp, [r8], #4
 8007a74:	eba8 080a 	sub.w	r8, r8, sl
 8007a78:	ea4f 02a8 	mov.w	r2, r8, asr #2
 8007a7c:	6122      	str	r2, [r4, #16]
 8007a7e:	ea4f 1842 	mov.w	r8, r2, lsl #5
 8007a82:	f7fe fa03 	bl	8005e8c <__hi0bits>
 8007a86:	683d      	ldr	r5, [r7, #0]
 8007a88:	eba8 0800 	sub.w	r8, r8, r0
 8007a8c:	45a8      	cmp	r8, r5
 8007a8e:	dd59      	ble.n	8007b44 <__gethex+0x250>
 8007a90:	eba8 0805 	sub.w	r8, r8, r5
 8007a94:	4641      	mov	r1, r8
 8007a96:	4620      	mov	r0, r4
 8007a98:	f7fe fd81 	bl	800659e <__any_on>
 8007a9c:	4683      	mov	fp, r0
 8007a9e:	b1b8      	cbz	r0, 8007ad0 <__gethex+0x1dc>
 8007aa0:	f04f 0b01 	mov.w	fp, #1
 8007aa4:	f108 33ff 	add.w	r3, r8, #4294967295
 8007aa8:	1159      	asrs	r1, r3, #5
 8007aaa:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007aae:	f003 021f 	and.w	r2, r3, #31
 8007ab2:	fa0b f202 	lsl.w	r2, fp, r2
 8007ab6:	420a      	tst	r2, r1
 8007ab8:	d00a      	beq.n	8007ad0 <__gethex+0x1dc>
 8007aba:	455b      	cmp	r3, fp
 8007abc:	dd06      	ble.n	8007acc <__gethex+0x1d8>
 8007abe:	4620      	mov	r0, r4
 8007ac0:	f1a8 0102 	sub.w	r1, r8, #2
 8007ac4:	f7fe fd6b 	bl	800659e <__any_on>
 8007ac8:	2800      	cmp	r0, #0
 8007aca:	d138      	bne.n	8007b3e <__gethex+0x24a>
 8007acc:	f04f 0b02 	mov.w	fp, #2
 8007ad0:	4641      	mov	r1, r8
 8007ad2:	4620      	mov	r0, r4
 8007ad4:	f7ff fea6 	bl	8007824 <rshift>
 8007ad8:	4446      	add	r6, r8
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	42b3      	cmp	r3, r6
 8007ade:	da41      	bge.n	8007b64 <__gethex+0x270>
 8007ae0:	4621      	mov	r1, r4
 8007ae2:	4648      	mov	r0, r9
 8007ae4:	f7fe f920 	bl	8005d28 <_Bfree>
 8007ae8:	2300      	movs	r3, #0
 8007aea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007aec:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8007af0:	6013      	str	r3, [r2, #0]
 8007af2:	e789      	b.n	8007a08 <__gethex+0x114>
 8007af4:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8007af8:	2a2e      	cmp	r2, #46	; 0x2e
 8007afa:	d014      	beq.n	8007b26 <__gethex+0x232>
 8007afc:	2b20      	cmp	r3, #32
 8007afe:	d106      	bne.n	8007b0e <__gethex+0x21a>
 8007b00:	9b01      	ldr	r3, [sp, #4]
 8007b02:	f843 bb04 	str.w	fp, [r3], #4
 8007b06:	f04f 0b00 	mov.w	fp, #0
 8007b0a:	9301      	str	r3, [sp, #4]
 8007b0c:	465b      	mov	r3, fp
 8007b0e:	7828      	ldrb	r0, [r5, #0]
 8007b10:	9303      	str	r3, [sp, #12]
 8007b12:	f7ff feda 	bl	80078ca <__hexdig_fun>
 8007b16:	9b03      	ldr	r3, [sp, #12]
 8007b18:	f000 000f 	and.w	r0, r0, #15
 8007b1c:	4098      	lsls	r0, r3
 8007b1e:	ea4b 0b00 	orr.w	fp, fp, r0
 8007b22:	3304      	adds	r3, #4
 8007b24:	e79f      	b.n	8007a66 <__gethex+0x172>
 8007b26:	45a8      	cmp	r8, r5
 8007b28:	d8e8      	bhi.n	8007afc <__gethex+0x208>
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	4628      	mov	r0, r5
 8007b2e:	4928      	ldr	r1, [pc, #160]	; (8007bd0 <__gethex+0x2dc>)
 8007b30:	9303      	str	r3, [sp, #12]
 8007b32:	f7ff fe0f 	bl	8007754 <strncmp>
 8007b36:	9b03      	ldr	r3, [sp, #12]
 8007b38:	2800      	cmp	r0, #0
 8007b3a:	d1df      	bne.n	8007afc <__gethex+0x208>
 8007b3c:	e793      	b.n	8007a66 <__gethex+0x172>
 8007b3e:	f04f 0b03 	mov.w	fp, #3
 8007b42:	e7c5      	b.n	8007ad0 <__gethex+0x1dc>
 8007b44:	da0b      	bge.n	8007b5e <__gethex+0x26a>
 8007b46:	eba5 0808 	sub.w	r8, r5, r8
 8007b4a:	4621      	mov	r1, r4
 8007b4c:	4642      	mov	r2, r8
 8007b4e:	4648      	mov	r0, r9
 8007b50:	f7fe fb02 	bl	8006158 <__lshift>
 8007b54:	4604      	mov	r4, r0
 8007b56:	eba6 0608 	sub.w	r6, r6, r8
 8007b5a:	f100 0a14 	add.w	sl, r0, #20
 8007b5e:	f04f 0b00 	mov.w	fp, #0
 8007b62:	e7ba      	b.n	8007ada <__gethex+0x1e6>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	42b3      	cmp	r3, r6
 8007b68:	dd74      	ble.n	8007c54 <__gethex+0x360>
 8007b6a:	1b9e      	subs	r6, r3, r6
 8007b6c:	42b5      	cmp	r5, r6
 8007b6e:	dc35      	bgt.n	8007bdc <__gethex+0x2e8>
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	2b02      	cmp	r3, #2
 8007b74:	d023      	beq.n	8007bbe <__gethex+0x2ca>
 8007b76:	2b03      	cmp	r3, #3
 8007b78:	d025      	beq.n	8007bc6 <__gethex+0x2d2>
 8007b7a:	2b01      	cmp	r3, #1
 8007b7c:	d115      	bne.n	8007baa <__gethex+0x2b6>
 8007b7e:	42b5      	cmp	r5, r6
 8007b80:	d113      	bne.n	8007baa <__gethex+0x2b6>
 8007b82:	2d01      	cmp	r5, #1
 8007b84:	d10b      	bne.n	8007b9e <__gethex+0x2aa>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	9a02      	ldr	r2, [sp, #8]
 8007b8a:	f04f 0862 	mov.w	r8, #98	; 0x62
 8007b8e:	6013      	str	r3, [r2, #0]
 8007b90:	2301      	movs	r3, #1
 8007b92:	6123      	str	r3, [r4, #16]
 8007b94:	f8ca 3000 	str.w	r3, [sl]
 8007b98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007b9a:	601c      	str	r4, [r3, #0]
 8007b9c:	e734      	b.n	8007a08 <__gethex+0x114>
 8007b9e:	4620      	mov	r0, r4
 8007ba0:	1e69      	subs	r1, r5, #1
 8007ba2:	f7fe fcfc 	bl	800659e <__any_on>
 8007ba6:	2800      	cmp	r0, #0
 8007ba8:	d1ed      	bne.n	8007b86 <__gethex+0x292>
 8007baa:	4621      	mov	r1, r4
 8007bac:	4648      	mov	r0, r9
 8007bae:	f7fe f8bb 	bl	8005d28 <_Bfree>
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007bb6:	f04f 0850 	mov.w	r8, #80	; 0x50
 8007bba:	6013      	str	r3, [r2, #0]
 8007bbc:	e724      	b.n	8007a08 <__gethex+0x114>
 8007bbe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d1f2      	bne.n	8007baa <__gethex+0x2b6>
 8007bc4:	e7df      	b.n	8007b86 <__gethex+0x292>
 8007bc6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d1dc      	bne.n	8007b86 <__gethex+0x292>
 8007bcc:	e7ed      	b.n	8007baa <__gethex+0x2b6>
 8007bce:	bf00      	nop
 8007bd0:	0800876c 	.word	0x0800876c
 8007bd4:	08008603 	.word	0x08008603
 8007bd8:	08008916 	.word	0x08008916
 8007bdc:	f106 38ff 	add.w	r8, r6, #4294967295
 8007be0:	f1bb 0f00 	cmp.w	fp, #0
 8007be4:	d133      	bne.n	8007c4e <__gethex+0x35a>
 8007be6:	f1b8 0f00 	cmp.w	r8, #0
 8007bea:	d004      	beq.n	8007bf6 <__gethex+0x302>
 8007bec:	4641      	mov	r1, r8
 8007bee:	4620      	mov	r0, r4
 8007bf0:	f7fe fcd5 	bl	800659e <__any_on>
 8007bf4:	4683      	mov	fp, r0
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	ea4f 1268 	mov.w	r2, r8, asr #5
 8007bfc:	f008 081f 	and.w	r8, r8, #31
 8007c00:	fa03 f308 	lsl.w	r3, r3, r8
 8007c04:	f04f 0802 	mov.w	r8, #2
 8007c08:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8007c0c:	4631      	mov	r1, r6
 8007c0e:	4213      	tst	r3, r2
 8007c10:	4620      	mov	r0, r4
 8007c12:	bf18      	it	ne
 8007c14:	f04b 0b02 	orrne.w	fp, fp, #2
 8007c18:	1bad      	subs	r5, r5, r6
 8007c1a:	f7ff fe03 	bl	8007824 <rshift>
 8007c1e:	687e      	ldr	r6, [r7, #4]
 8007c20:	f1bb 0f00 	cmp.w	fp, #0
 8007c24:	d04a      	beq.n	8007cbc <__gethex+0x3c8>
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	2b02      	cmp	r3, #2
 8007c2a:	d016      	beq.n	8007c5a <__gethex+0x366>
 8007c2c:	2b03      	cmp	r3, #3
 8007c2e:	d018      	beq.n	8007c62 <__gethex+0x36e>
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d109      	bne.n	8007c48 <__gethex+0x354>
 8007c34:	f01b 0f02 	tst.w	fp, #2
 8007c38:	d006      	beq.n	8007c48 <__gethex+0x354>
 8007c3a:	f8da 3000 	ldr.w	r3, [sl]
 8007c3e:	ea4b 0b03 	orr.w	fp, fp, r3
 8007c42:	f01b 0f01 	tst.w	fp, #1
 8007c46:	d10f      	bne.n	8007c68 <__gethex+0x374>
 8007c48:	f048 0810 	orr.w	r8, r8, #16
 8007c4c:	e036      	b.n	8007cbc <__gethex+0x3c8>
 8007c4e:	f04f 0b01 	mov.w	fp, #1
 8007c52:	e7d0      	b.n	8007bf6 <__gethex+0x302>
 8007c54:	f04f 0801 	mov.w	r8, #1
 8007c58:	e7e2      	b.n	8007c20 <__gethex+0x32c>
 8007c5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007c5c:	f1c3 0301 	rsb	r3, r3, #1
 8007c60:	930f      	str	r3, [sp, #60]	; 0x3c
 8007c62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d0ef      	beq.n	8007c48 <__gethex+0x354>
 8007c68:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007c6c:	f104 0214 	add.w	r2, r4, #20
 8007c70:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8007c74:	9301      	str	r3, [sp, #4]
 8007c76:	2300      	movs	r3, #0
 8007c78:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8007c7c:	4694      	mov	ip, r2
 8007c7e:	f852 1b04 	ldr.w	r1, [r2], #4
 8007c82:	f1b1 3fff 	cmp.w	r1, #4294967295
 8007c86:	d01e      	beq.n	8007cc6 <__gethex+0x3d2>
 8007c88:	3101      	adds	r1, #1
 8007c8a:	f8cc 1000 	str.w	r1, [ip]
 8007c8e:	f1b8 0f02 	cmp.w	r8, #2
 8007c92:	f104 0214 	add.w	r2, r4, #20
 8007c96:	d13d      	bne.n	8007d14 <__gethex+0x420>
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	3b01      	subs	r3, #1
 8007c9c:	42ab      	cmp	r3, r5
 8007c9e:	d10b      	bne.n	8007cb8 <__gethex+0x3c4>
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	1169      	asrs	r1, r5, #5
 8007ca4:	f005 051f 	and.w	r5, r5, #31
 8007ca8:	fa03 f505 	lsl.w	r5, r3, r5
 8007cac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007cb0:	421d      	tst	r5, r3
 8007cb2:	bf18      	it	ne
 8007cb4:	f04f 0801 	movne.w	r8, #1
 8007cb8:	f048 0820 	orr.w	r8, r8, #32
 8007cbc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007cbe:	601c      	str	r4, [r3, #0]
 8007cc0:	9b02      	ldr	r3, [sp, #8]
 8007cc2:	601e      	str	r6, [r3, #0]
 8007cc4:	e6a0      	b.n	8007a08 <__gethex+0x114>
 8007cc6:	4290      	cmp	r0, r2
 8007cc8:	f842 3c04 	str.w	r3, [r2, #-4]
 8007ccc:	d8d6      	bhi.n	8007c7c <__gethex+0x388>
 8007cce:	68a2      	ldr	r2, [r4, #8]
 8007cd0:	4593      	cmp	fp, r2
 8007cd2:	db17      	blt.n	8007d04 <__gethex+0x410>
 8007cd4:	6861      	ldr	r1, [r4, #4]
 8007cd6:	4648      	mov	r0, r9
 8007cd8:	3101      	adds	r1, #1
 8007cda:	f7fd ffe5 	bl	8005ca8 <_Balloc>
 8007cde:	4682      	mov	sl, r0
 8007ce0:	b918      	cbnz	r0, 8007cea <__gethex+0x3f6>
 8007ce2:	4602      	mov	r2, r0
 8007ce4:	2184      	movs	r1, #132	; 0x84
 8007ce6:	4b1a      	ldr	r3, [pc, #104]	; (8007d50 <__gethex+0x45c>)
 8007ce8:	e6b1      	b.n	8007a4e <__gethex+0x15a>
 8007cea:	6922      	ldr	r2, [r4, #16]
 8007cec:	f104 010c 	add.w	r1, r4, #12
 8007cf0:	3202      	adds	r2, #2
 8007cf2:	0092      	lsls	r2, r2, #2
 8007cf4:	300c      	adds	r0, #12
 8007cf6:	f7ff fd4f 	bl	8007798 <memcpy>
 8007cfa:	4621      	mov	r1, r4
 8007cfc:	4648      	mov	r0, r9
 8007cfe:	f7fe f813 	bl	8005d28 <_Bfree>
 8007d02:	4654      	mov	r4, sl
 8007d04:	6922      	ldr	r2, [r4, #16]
 8007d06:	1c51      	adds	r1, r2, #1
 8007d08:	6121      	str	r1, [r4, #16]
 8007d0a:	2101      	movs	r1, #1
 8007d0c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007d10:	6151      	str	r1, [r2, #20]
 8007d12:	e7bc      	b.n	8007c8e <__gethex+0x39a>
 8007d14:	6921      	ldr	r1, [r4, #16]
 8007d16:	4559      	cmp	r1, fp
 8007d18:	dd0b      	ble.n	8007d32 <__gethex+0x43e>
 8007d1a:	2101      	movs	r1, #1
 8007d1c:	4620      	mov	r0, r4
 8007d1e:	f7ff fd81 	bl	8007824 <rshift>
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	3601      	adds	r6, #1
 8007d26:	42b3      	cmp	r3, r6
 8007d28:	f6ff aeda 	blt.w	8007ae0 <__gethex+0x1ec>
 8007d2c:	f04f 0801 	mov.w	r8, #1
 8007d30:	e7c2      	b.n	8007cb8 <__gethex+0x3c4>
 8007d32:	f015 051f 	ands.w	r5, r5, #31
 8007d36:	d0f9      	beq.n	8007d2c <__gethex+0x438>
 8007d38:	9b01      	ldr	r3, [sp, #4]
 8007d3a:	f1c5 0520 	rsb	r5, r5, #32
 8007d3e:	441a      	add	r2, r3
 8007d40:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8007d44:	f7fe f8a2 	bl	8005e8c <__hi0bits>
 8007d48:	42a8      	cmp	r0, r5
 8007d4a:	dbe6      	blt.n	8007d1a <__gethex+0x426>
 8007d4c:	e7ee      	b.n	8007d2c <__gethex+0x438>
 8007d4e:	bf00      	nop
 8007d50:	08008603 	.word	0x08008603

08007d54 <L_shift>:
 8007d54:	f1c2 0208 	rsb	r2, r2, #8
 8007d58:	0092      	lsls	r2, r2, #2
 8007d5a:	b570      	push	{r4, r5, r6, lr}
 8007d5c:	f1c2 0620 	rsb	r6, r2, #32
 8007d60:	6843      	ldr	r3, [r0, #4]
 8007d62:	6804      	ldr	r4, [r0, #0]
 8007d64:	fa03 f506 	lsl.w	r5, r3, r6
 8007d68:	432c      	orrs	r4, r5
 8007d6a:	40d3      	lsrs	r3, r2
 8007d6c:	6004      	str	r4, [r0, #0]
 8007d6e:	f840 3f04 	str.w	r3, [r0, #4]!
 8007d72:	4288      	cmp	r0, r1
 8007d74:	d3f4      	bcc.n	8007d60 <L_shift+0xc>
 8007d76:	bd70      	pop	{r4, r5, r6, pc}

08007d78 <__match>:
 8007d78:	b530      	push	{r4, r5, lr}
 8007d7a:	6803      	ldr	r3, [r0, #0]
 8007d7c:	3301      	adds	r3, #1
 8007d7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d82:	b914      	cbnz	r4, 8007d8a <__match+0x12>
 8007d84:	6003      	str	r3, [r0, #0]
 8007d86:	2001      	movs	r0, #1
 8007d88:	bd30      	pop	{r4, r5, pc}
 8007d8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d8e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007d92:	2d19      	cmp	r5, #25
 8007d94:	bf98      	it	ls
 8007d96:	3220      	addls	r2, #32
 8007d98:	42a2      	cmp	r2, r4
 8007d9a:	d0f0      	beq.n	8007d7e <__match+0x6>
 8007d9c:	2000      	movs	r0, #0
 8007d9e:	e7f3      	b.n	8007d88 <__match+0x10>

08007da0 <__hexnan>:
 8007da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007da4:	2500      	movs	r5, #0
 8007da6:	680b      	ldr	r3, [r1, #0]
 8007da8:	4682      	mov	sl, r0
 8007daa:	115e      	asrs	r6, r3, #5
 8007dac:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007db0:	f013 031f 	ands.w	r3, r3, #31
 8007db4:	bf18      	it	ne
 8007db6:	3604      	addne	r6, #4
 8007db8:	1f37      	subs	r7, r6, #4
 8007dba:	4690      	mov	r8, r2
 8007dbc:	46b9      	mov	r9, r7
 8007dbe:	463c      	mov	r4, r7
 8007dc0:	46ab      	mov	fp, r5
 8007dc2:	b087      	sub	sp, #28
 8007dc4:	6801      	ldr	r1, [r0, #0]
 8007dc6:	9301      	str	r3, [sp, #4]
 8007dc8:	f846 5c04 	str.w	r5, [r6, #-4]
 8007dcc:	9502      	str	r5, [sp, #8]
 8007dce:	784a      	ldrb	r2, [r1, #1]
 8007dd0:	1c4b      	adds	r3, r1, #1
 8007dd2:	9303      	str	r3, [sp, #12]
 8007dd4:	b342      	cbz	r2, 8007e28 <__hexnan+0x88>
 8007dd6:	4610      	mov	r0, r2
 8007dd8:	9105      	str	r1, [sp, #20]
 8007dda:	9204      	str	r2, [sp, #16]
 8007ddc:	f7ff fd75 	bl	80078ca <__hexdig_fun>
 8007de0:	2800      	cmp	r0, #0
 8007de2:	d14f      	bne.n	8007e84 <__hexnan+0xe4>
 8007de4:	9a04      	ldr	r2, [sp, #16]
 8007de6:	9905      	ldr	r1, [sp, #20]
 8007de8:	2a20      	cmp	r2, #32
 8007dea:	d818      	bhi.n	8007e1e <__hexnan+0x7e>
 8007dec:	9b02      	ldr	r3, [sp, #8]
 8007dee:	459b      	cmp	fp, r3
 8007df0:	dd13      	ble.n	8007e1a <__hexnan+0x7a>
 8007df2:	454c      	cmp	r4, r9
 8007df4:	d206      	bcs.n	8007e04 <__hexnan+0x64>
 8007df6:	2d07      	cmp	r5, #7
 8007df8:	dc04      	bgt.n	8007e04 <__hexnan+0x64>
 8007dfa:	462a      	mov	r2, r5
 8007dfc:	4649      	mov	r1, r9
 8007dfe:	4620      	mov	r0, r4
 8007e00:	f7ff ffa8 	bl	8007d54 <L_shift>
 8007e04:	4544      	cmp	r4, r8
 8007e06:	d950      	bls.n	8007eaa <__hexnan+0x10a>
 8007e08:	2300      	movs	r3, #0
 8007e0a:	f1a4 0904 	sub.w	r9, r4, #4
 8007e0e:	f844 3c04 	str.w	r3, [r4, #-4]
 8007e12:	461d      	mov	r5, r3
 8007e14:	464c      	mov	r4, r9
 8007e16:	f8cd b008 	str.w	fp, [sp, #8]
 8007e1a:	9903      	ldr	r1, [sp, #12]
 8007e1c:	e7d7      	b.n	8007dce <__hexnan+0x2e>
 8007e1e:	2a29      	cmp	r2, #41	; 0x29
 8007e20:	d155      	bne.n	8007ece <__hexnan+0x12e>
 8007e22:	3102      	adds	r1, #2
 8007e24:	f8ca 1000 	str.w	r1, [sl]
 8007e28:	f1bb 0f00 	cmp.w	fp, #0
 8007e2c:	d04f      	beq.n	8007ece <__hexnan+0x12e>
 8007e2e:	454c      	cmp	r4, r9
 8007e30:	d206      	bcs.n	8007e40 <__hexnan+0xa0>
 8007e32:	2d07      	cmp	r5, #7
 8007e34:	dc04      	bgt.n	8007e40 <__hexnan+0xa0>
 8007e36:	462a      	mov	r2, r5
 8007e38:	4649      	mov	r1, r9
 8007e3a:	4620      	mov	r0, r4
 8007e3c:	f7ff ff8a 	bl	8007d54 <L_shift>
 8007e40:	4544      	cmp	r4, r8
 8007e42:	d934      	bls.n	8007eae <__hexnan+0x10e>
 8007e44:	4623      	mov	r3, r4
 8007e46:	f1a8 0204 	sub.w	r2, r8, #4
 8007e4a:	f853 1b04 	ldr.w	r1, [r3], #4
 8007e4e:	429f      	cmp	r7, r3
 8007e50:	f842 1f04 	str.w	r1, [r2, #4]!
 8007e54:	d2f9      	bcs.n	8007e4a <__hexnan+0xaa>
 8007e56:	1b3b      	subs	r3, r7, r4
 8007e58:	f023 0303 	bic.w	r3, r3, #3
 8007e5c:	3304      	adds	r3, #4
 8007e5e:	3e03      	subs	r6, #3
 8007e60:	3401      	adds	r4, #1
 8007e62:	42a6      	cmp	r6, r4
 8007e64:	bf38      	it	cc
 8007e66:	2304      	movcc	r3, #4
 8007e68:	2200      	movs	r2, #0
 8007e6a:	4443      	add	r3, r8
 8007e6c:	f843 2b04 	str.w	r2, [r3], #4
 8007e70:	429f      	cmp	r7, r3
 8007e72:	d2fb      	bcs.n	8007e6c <__hexnan+0xcc>
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	b91b      	cbnz	r3, 8007e80 <__hexnan+0xe0>
 8007e78:	4547      	cmp	r7, r8
 8007e7a:	d126      	bne.n	8007eca <__hexnan+0x12a>
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	603b      	str	r3, [r7, #0]
 8007e80:	2005      	movs	r0, #5
 8007e82:	e025      	b.n	8007ed0 <__hexnan+0x130>
 8007e84:	3501      	adds	r5, #1
 8007e86:	2d08      	cmp	r5, #8
 8007e88:	f10b 0b01 	add.w	fp, fp, #1
 8007e8c:	dd06      	ble.n	8007e9c <__hexnan+0xfc>
 8007e8e:	4544      	cmp	r4, r8
 8007e90:	d9c3      	bls.n	8007e1a <__hexnan+0x7a>
 8007e92:	2300      	movs	r3, #0
 8007e94:	2501      	movs	r5, #1
 8007e96:	f844 3c04 	str.w	r3, [r4, #-4]
 8007e9a:	3c04      	subs	r4, #4
 8007e9c:	6822      	ldr	r2, [r4, #0]
 8007e9e:	f000 000f 	and.w	r0, r0, #15
 8007ea2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007ea6:	6020      	str	r0, [r4, #0]
 8007ea8:	e7b7      	b.n	8007e1a <__hexnan+0x7a>
 8007eaa:	2508      	movs	r5, #8
 8007eac:	e7b5      	b.n	8007e1a <__hexnan+0x7a>
 8007eae:	9b01      	ldr	r3, [sp, #4]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d0df      	beq.n	8007e74 <__hexnan+0xd4>
 8007eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8007eb8:	f1c3 0320 	rsb	r3, r3, #32
 8007ebc:	40da      	lsrs	r2, r3
 8007ebe:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007ec2:	4013      	ands	r3, r2
 8007ec4:	f846 3c04 	str.w	r3, [r6, #-4]
 8007ec8:	e7d4      	b.n	8007e74 <__hexnan+0xd4>
 8007eca:	3f04      	subs	r7, #4
 8007ecc:	e7d2      	b.n	8007e74 <__hexnan+0xd4>
 8007ece:	2004      	movs	r0, #4
 8007ed0:	b007      	add	sp, #28
 8007ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007ed6 <__ascii_mbtowc>:
 8007ed6:	b082      	sub	sp, #8
 8007ed8:	b901      	cbnz	r1, 8007edc <__ascii_mbtowc+0x6>
 8007eda:	a901      	add	r1, sp, #4
 8007edc:	b142      	cbz	r2, 8007ef0 <__ascii_mbtowc+0x1a>
 8007ede:	b14b      	cbz	r3, 8007ef4 <__ascii_mbtowc+0x1e>
 8007ee0:	7813      	ldrb	r3, [r2, #0]
 8007ee2:	600b      	str	r3, [r1, #0]
 8007ee4:	7812      	ldrb	r2, [r2, #0]
 8007ee6:	1e10      	subs	r0, r2, #0
 8007ee8:	bf18      	it	ne
 8007eea:	2001      	movne	r0, #1
 8007eec:	b002      	add	sp, #8
 8007eee:	4770      	bx	lr
 8007ef0:	4610      	mov	r0, r2
 8007ef2:	e7fb      	b.n	8007eec <__ascii_mbtowc+0x16>
 8007ef4:	f06f 0001 	mvn.w	r0, #1
 8007ef8:	e7f8      	b.n	8007eec <__ascii_mbtowc+0x16>

08007efa <_realloc_r>:
 8007efa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007efe:	4680      	mov	r8, r0
 8007f00:	4614      	mov	r4, r2
 8007f02:	460e      	mov	r6, r1
 8007f04:	b921      	cbnz	r1, 8007f10 <_realloc_r+0x16>
 8007f06:	4611      	mov	r1, r2
 8007f08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f0c:	f7fd be40 	b.w	8005b90 <_malloc_r>
 8007f10:	b92a      	cbnz	r2, 8007f1e <_realloc_r+0x24>
 8007f12:	f7fd fdcd 	bl	8005ab0 <_free_r>
 8007f16:	4625      	mov	r5, r4
 8007f18:	4628      	mov	r0, r5
 8007f1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f1e:	f000 f842 	bl	8007fa6 <_malloc_usable_size_r>
 8007f22:	4284      	cmp	r4, r0
 8007f24:	4607      	mov	r7, r0
 8007f26:	d802      	bhi.n	8007f2e <_realloc_r+0x34>
 8007f28:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007f2c:	d812      	bhi.n	8007f54 <_realloc_r+0x5a>
 8007f2e:	4621      	mov	r1, r4
 8007f30:	4640      	mov	r0, r8
 8007f32:	f7fd fe2d 	bl	8005b90 <_malloc_r>
 8007f36:	4605      	mov	r5, r0
 8007f38:	2800      	cmp	r0, #0
 8007f3a:	d0ed      	beq.n	8007f18 <_realloc_r+0x1e>
 8007f3c:	42bc      	cmp	r4, r7
 8007f3e:	4622      	mov	r2, r4
 8007f40:	4631      	mov	r1, r6
 8007f42:	bf28      	it	cs
 8007f44:	463a      	movcs	r2, r7
 8007f46:	f7ff fc27 	bl	8007798 <memcpy>
 8007f4a:	4631      	mov	r1, r6
 8007f4c:	4640      	mov	r0, r8
 8007f4e:	f7fd fdaf 	bl	8005ab0 <_free_r>
 8007f52:	e7e1      	b.n	8007f18 <_realloc_r+0x1e>
 8007f54:	4635      	mov	r5, r6
 8007f56:	e7df      	b.n	8007f18 <_realloc_r+0x1e>

08007f58 <__ascii_wctomb>:
 8007f58:	4603      	mov	r3, r0
 8007f5a:	4608      	mov	r0, r1
 8007f5c:	b141      	cbz	r1, 8007f70 <__ascii_wctomb+0x18>
 8007f5e:	2aff      	cmp	r2, #255	; 0xff
 8007f60:	d904      	bls.n	8007f6c <__ascii_wctomb+0x14>
 8007f62:	228a      	movs	r2, #138	; 0x8a
 8007f64:	f04f 30ff 	mov.w	r0, #4294967295
 8007f68:	601a      	str	r2, [r3, #0]
 8007f6a:	4770      	bx	lr
 8007f6c:	2001      	movs	r0, #1
 8007f6e:	700a      	strb	r2, [r1, #0]
 8007f70:	4770      	bx	lr
	...

08007f74 <fiprintf>:
 8007f74:	b40e      	push	{r1, r2, r3}
 8007f76:	b503      	push	{r0, r1, lr}
 8007f78:	4601      	mov	r1, r0
 8007f7a:	ab03      	add	r3, sp, #12
 8007f7c:	4805      	ldr	r0, [pc, #20]	; (8007f94 <fiprintf+0x20>)
 8007f7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f82:	6800      	ldr	r0, [r0, #0]
 8007f84:	9301      	str	r3, [sp, #4]
 8007f86:	f000 f83d 	bl	8008004 <_vfiprintf_r>
 8007f8a:	b002      	add	sp, #8
 8007f8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f90:	b003      	add	sp, #12
 8007f92:	4770      	bx	lr
 8007f94:	2000006c 	.word	0x2000006c

08007f98 <abort>:
 8007f98:	2006      	movs	r0, #6
 8007f9a:	b508      	push	{r3, lr}
 8007f9c:	f000 fa0a 	bl	80083b4 <raise>
 8007fa0:	2001      	movs	r0, #1
 8007fa2:	f7f9 f8dd 	bl	8001160 <_exit>

08007fa6 <_malloc_usable_size_r>:
 8007fa6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007faa:	1f18      	subs	r0, r3, #4
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	bfbc      	itt	lt
 8007fb0:	580b      	ldrlt	r3, [r1, r0]
 8007fb2:	18c0      	addlt	r0, r0, r3
 8007fb4:	4770      	bx	lr

08007fb6 <__sfputc_r>:
 8007fb6:	6893      	ldr	r3, [r2, #8]
 8007fb8:	b410      	push	{r4}
 8007fba:	3b01      	subs	r3, #1
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	6093      	str	r3, [r2, #8]
 8007fc0:	da07      	bge.n	8007fd2 <__sfputc_r+0x1c>
 8007fc2:	6994      	ldr	r4, [r2, #24]
 8007fc4:	42a3      	cmp	r3, r4
 8007fc6:	db01      	blt.n	8007fcc <__sfputc_r+0x16>
 8007fc8:	290a      	cmp	r1, #10
 8007fca:	d102      	bne.n	8007fd2 <__sfputc_r+0x1c>
 8007fcc:	bc10      	pop	{r4}
 8007fce:	f000 b933 	b.w	8008238 <__swbuf_r>
 8007fd2:	6813      	ldr	r3, [r2, #0]
 8007fd4:	1c58      	adds	r0, r3, #1
 8007fd6:	6010      	str	r0, [r2, #0]
 8007fd8:	7019      	strb	r1, [r3, #0]
 8007fda:	4608      	mov	r0, r1
 8007fdc:	bc10      	pop	{r4}
 8007fde:	4770      	bx	lr

08007fe0 <__sfputs_r>:
 8007fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fe2:	4606      	mov	r6, r0
 8007fe4:	460f      	mov	r7, r1
 8007fe6:	4614      	mov	r4, r2
 8007fe8:	18d5      	adds	r5, r2, r3
 8007fea:	42ac      	cmp	r4, r5
 8007fec:	d101      	bne.n	8007ff2 <__sfputs_r+0x12>
 8007fee:	2000      	movs	r0, #0
 8007ff0:	e007      	b.n	8008002 <__sfputs_r+0x22>
 8007ff2:	463a      	mov	r2, r7
 8007ff4:	4630      	mov	r0, r6
 8007ff6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ffa:	f7ff ffdc 	bl	8007fb6 <__sfputc_r>
 8007ffe:	1c43      	adds	r3, r0, #1
 8008000:	d1f3      	bne.n	8007fea <__sfputs_r+0xa>
 8008002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008004 <_vfiprintf_r>:
 8008004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008008:	460d      	mov	r5, r1
 800800a:	4614      	mov	r4, r2
 800800c:	4698      	mov	r8, r3
 800800e:	4606      	mov	r6, r0
 8008010:	b09d      	sub	sp, #116	; 0x74
 8008012:	b118      	cbz	r0, 800801c <_vfiprintf_r+0x18>
 8008014:	6a03      	ldr	r3, [r0, #32]
 8008016:	b90b      	cbnz	r3, 800801c <_vfiprintf_r+0x18>
 8008018:	f7fc fdb0 	bl	8004b7c <__sinit>
 800801c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800801e:	07d9      	lsls	r1, r3, #31
 8008020:	d405      	bmi.n	800802e <_vfiprintf_r+0x2a>
 8008022:	89ab      	ldrh	r3, [r5, #12]
 8008024:	059a      	lsls	r2, r3, #22
 8008026:	d402      	bmi.n	800802e <_vfiprintf_r+0x2a>
 8008028:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800802a:	f7fc febd 	bl	8004da8 <__retarget_lock_acquire_recursive>
 800802e:	89ab      	ldrh	r3, [r5, #12]
 8008030:	071b      	lsls	r3, r3, #28
 8008032:	d501      	bpl.n	8008038 <_vfiprintf_r+0x34>
 8008034:	692b      	ldr	r3, [r5, #16]
 8008036:	b99b      	cbnz	r3, 8008060 <_vfiprintf_r+0x5c>
 8008038:	4629      	mov	r1, r5
 800803a:	4630      	mov	r0, r6
 800803c:	f000 f93a 	bl	80082b4 <__swsetup_r>
 8008040:	b170      	cbz	r0, 8008060 <_vfiprintf_r+0x5c>
 8008042:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008044:	07dc      	lsls	r4, r3, #31
 8008046:	d504      	bpl.n	8008052 <_vfiprintf_r+0x4e>
 8008048:	f04f 30ff 	mov.w	r0, #4294967295
 800804c:	b01d      	add	sp, #116	; 0x74
 800804e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008052:	89ab      	ldrh	r3, [r5, #12]
 8008054:	0598      	lsls	r0, r3, #22
 8008056:	d4f7      	bmi.n	8008048 <_vfiprintf_r+0x44>
 8008058:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800805a:	f7fc fea6 	bl	8004daa <__retarget_lock_release_recursive>
 800805e:	e7f3      	b.n	8008048 <_vfiprintf_r+0x44>
 8008060:	2300      	movs	r3, #0
 8008062:	9309      	str	r3, [sp, #36]	; 0x24
 8008064:	2320      	movs	r3, #32
 8008066:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800806a:	2330      	movs	r3, #48	; 0x30
 800806c:	f04f 0901 	mov.w	r9, #1
 8008070:	f8cd 800c 	str.w	r8, [sp, #12]
 8008074:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8008224 <_vfiprintf_r+0x220>
 8008078:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800807c:	4623      	mov	r3, r4
 800807e:	469a      	mov	sl, r3
 8008080:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008084:	b10a      	cbz	r2, 800808a <_vfiprintf_r+0x86>
 8008086:	2a25      	cmp	r2, #37	; 0x25
 8008088:	d1f9      	bne.n	800807e <_vfiprintf_r+0x7a>
 800808a:	ebba 0b04 	subs.w	fp, sl, r4
 800808e:	d00b      	beq.n	80080a8 <_vfiprintf_r+0xa4>
 8008090:	465b      	mov	r3, fp
 8008092:	4622      	mov	r2, r4
 8008094:	4629      	mov	r1, r5
 8008096:	4630      	mov	r0, r6
 8008098:	f7ff ffa2 	bl	8007fe0 <__sfputs_r>
 800809c:	3001      	adds	r0, #1
 800809e:	f000 80a9 	beq.w	80081f4 <_vfiprintf_r+0x1f0>
 80080a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080a4:	445a      	add	r2, fp
 80080a6:	9209      	str	r2, [sp, #36]	; 0x24
 80080a8:	f89a 3000 	ldrb.w	r3, [sl]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	f000 80a1 	beq.w	80081f4 <_vfiprintf_r+0x1f0>
 80080b2:	2300      	movs	r3, #0
 80080b4:	f04f 32ff 	mov.w	r2, #4294967295
 80080b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080bc:	f10a 0a01 	add.w	sl, sl, #1
 80080c0:	9304      	str	r3, [sp, #16]
 80080c2:	9307      	str	r3, [sp, #28]
 80080c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80080c8:	931a      	str	r3, [sp, #104]	; 0x68
 80080ca:	4654      	mov	r4, sl
 80080cc:	2205      	movs	r2, #5
 80080ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080d2:	4854      	ldr	r0, [pc, #336]	; (8008224 <_vfiprintf_r+0x220>)
 80080d4:	f7fc fe6a 	bl	8004dac <memchr>
 80080d8:	9a04      	ldr	r2, [sp, #16]
 80080da:	b9d8      	cbnz	r0, 8008114 <_vfiprintf_r+0x110>
 80080dc:	06d1      	lsls	r1, r2, #27
 80080de:	bf44      	itt	mi
 80080e0:	2320      	movmi	r3, #32
 80080e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080e6:	0713      	lsls	r3, r2, #28
 80080e8:	bf44      	itt	mi
 80080ea:	232b      	movmi	r3, #43	; 0x2b
 80080ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080f0:	f89a 3000 	ldrb.w	r3, [sl]
 80080f4:	2b2a      	cmp	r3, #42	; 0x2a
 80080f6:	d015      	beq.n	8008124 <_vfiprintf_r+0x120>
 80080f8:	4654      	mov	r4, sl
 80080fa:	2000      	movs	r0, #0
 80080fc:	f04f 0c0a 	mov.w	ip, #10
 8008100:	9a07      	ldr	r2, [sp, #28]
 8008102:	4621      	mov	r1, r4
 8008104:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008108:	3b30      	subs	r3, #48	; 0x30
 800810a:	2b09      	cmp	r3, #9
 800810c:	d94d      	bls.n	80081aa <_vfiprintf_r+0x1a6>
 800810e:	b1b0      	cbz	r0, 800813e <_vfiprintf_r+0x13a>
 8008110:	9207      	str	r2, [sp, #28]
 8008112:	e014      	b.n	800813e <_vfiprintf_r+0x13a>
 8008114:	eba0 0308 	sub.w	r3, r0, r8
 8008118:	fa09 f303 	lsl.w	r3, r9, r3
 800811c:	4313      	orrs	r3, r2
 800811e:	46a2      	mov	sl, r4
 8008120:	9304      	str	r3, [sp, #16]
 8008122:	e7d2      	b.n	80080ca <_vfiprintf_r+0xc6>
 8008124:	9b03      	ldr	r3, [sp, #12]
 8008126:	1d19      	adds	r1, r3, #4
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	9103      	str	r1, [sp, #12]
 800812c:	2b00      	cmp	r3, #0
 800812e:	bfbb      	ittet	lt
 8008130:	425b      	neglt	r3, r3
 8008132:	f042 0202 	orrlt.w	r2, r2, #2
 8008136:	9307      	strge	r3, [sp, #28]
 8008138:	9307      	strlt	r3, [sp, #28]
 800813a:	bfb8      	it	lt
 800813c:	9204      	strlt	r2, [sp, #16]
 800813e:	7823      	ldrb	r3, [r4, #0]
 8008140:	2b2e      	cmp	r3, #46	; 0x2e
 8008142:	d10c      	bne.n	800815e <_vfiprintf_r+0x15a>
 8008144:	7863      	ldrb	r3, [r4, #1]
 8008146:	2b2a      	cmp	r3, #42	; 0x2a
 8008148:	d134      	bne.n	80081b4 <_vfiprintf_r+0x1b0>
 800814a:	9b03      	ldr	r3, [sp, #12]
 800814c:	3402      	adds	r4, #2
 800814e:	1d1a      	adds	r2, r3, #4
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	9203      	str	r2, [sp, #12]
 8008154:	2b00      	cmp	r3, #0
 8008156:	bfb8      	it	lt
 8008158:	f04f 33ff 	movlt.w	r3, #4294967295
 800815c:	9305      	str	r3, [sp, #20]
 800815e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008228 <_vfiprintf_r+0x224>
 8008162:	2203      	movs	r2, #3
 8008164:	4650      	mov	r0, sl
 8008166:	7821      	ldrb	r1, [r4, #0]
 8008168:	f7fc fe20 	bl	8004dac <memchr>
 800816c:	b138      	cbz	r0, 800817e <_vfiprintf_r+0x17a>
 800816e:	2240      	movs	r2, #64	; 0x40
 8008170:	9b04      	ldr	r3, [sp, #16]
 8008172:	eba0 000a 	sub.w	r0, r0, sl
 8008176:	4082      	lsls	r2, r0
 8008178:	4313      	orrs	r3, r2
 800817a:	3401      	adds	r4, #1
 800817c:	9304      	str	r3, [sp, #16]
 800817e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008182:	2206      	movs	r2, #6
 8008184:	4829      	ldr	r0, [pc, #164]	; (800822c <_vfiprintf_r+0x228>)
 8008186:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800818a:	f7fc fe0f 	bl	8004dac <memchr>
 800818e:	2800      	cmp	r0, #0
 8008190:	d03f      	beq.n	8008212 <_vfiprintf_r+0x20e>
 8008192:	4b27      	ldr	r3, [pc, #156]	; (8008230 <_vfiprintf_r+0x22c>)
 8008194:	bb1b      	cbnz	r3, 80081de <_vfiprintf_r+0x1da>
 8008196:	9b03      	ldr	r3, [sp, #12]
 8008198:	3307      	adds	r3, #7
 800819a:	f023 0307 	bic.w	r3, r3, #7
 800819e:	3308      	adds	r3, #8
 80081a0:	9303      	str	r3, [sp, #12]
 80081a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081a4:	443b      	add	r3, r7
 80081a6:	9309      	str	r3, [sp, #36]	; 0x24
 80081a8:	e768      	b.n	800807c <_vfiprintf_r+0x78>
 80081aa:	460c      	mov	r4, r1
 80081ac:	2001      	movs	r0, #1
 80081ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80081b2:	e7a6      	b.n	8008102 <_vfiprintf_r+0xfe>
 80081b4:	2300      	movs	r3, #0
 80081b6:	f04f 0c0a 	mov.w	ip, #10
 80081ba:	4619      	mov	r1, r3
 80081bc:	3401      	adds	r4, #1
 80081be:	9305      	str	r3, [sp, #20]
 80081c0:	4620      	mov	r0, r4
 80081c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081c6:	3a30      	subs	r2, #48	; 0x30
 80081c8:	2a09      	cmp	r2, #9
 80081ca:	d903      	bls.n	80081d4 <_vfiprintf_r+0x1d0>
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d0c6      	beq.n	800815e <_vfiprintf_r+0x15a>
 80081d0:	9105      	str	r1, [sp, #20]
 80081d2:	e7c4      	b.n	800815e <_vfiprintf_r+0x15a>
 80081d4:	4604      	mov	r4, r0
 80081d6:	2301      	movs	r3, #1
 80081d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80081dc:	e7f0      	b.n	80081c0 <_vfiprintf_r+0x1bc>
 80081de:	ab03      	add	r3, sp, #12
 80081e0:	9300      	str	r3, [sp, #0]
 80081e2:	462a      	mov	r2, r5
 80081e4:	4630      	mov	r0, r6
 80081e6:	4b13      	ldr	r3, [pc, #76]	; (8008234 <_vfiprintf_r+0x230>)
 80081e8:	a904      	add	r1, sp, #16
 80081ea:	f7fb fe7d 	bl	8003ee8 <_printf_float>
 80081ee:	4607      	mov	r7, r0
 80081f0:	1c78      	adds	r0, r7, #1
 80081f2:	d1d6      	bne.n	80081a2 <_vfiprintf_r+0x19e>
 80081f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80081f6:	07d9      	lsls	r1, r3, #31
 80081f8:	d405      	bmi.n	8008206 <_vfiprintf_r+0x202>
 80081fa:	89ab      	ldrh	r3, [r5, #12]
 80081fc:	059a      	lsls	r2, r3, #22
 80081fe:	d402      	bmi.n	8008206 <_vfiprintf_r+0x202>
 8008200:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008202:	f7fc fdd2 	bl	8004daa <__retarget_lock_release_recursive>
 8008206:	89ab      	ldrh	r3, [r5, #12]
 8008208:	065b      	lsls	r3, r3, #25
 800820a:	f53f af1d 	bmi.w	8008048 <_vfiprintf_r+0x44>
 800820e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008210:	e71c      	b.n	800804c <_vfiprintf_r+0x48>
 8008212:	ab03      	add	r3, sp, #12
 8008214:	9300      	str	r3, [sp, #0]
 8008216:	462a      	mov	r2, r5
 8008218:	4630      	mov	r0, r6
 800821a:	4b06      	ldr	r3, [pc, #24]	; (8008234 <_vfiprintf_r+0x230>)
 800821c:	a904      	add	r1, sp, #16
 800821e:	f7fc f903 	bl	8004428 <_printf_i>
 8008222:	e7e4      	b.n	80081ee <_vfiprintf_r+0x1ea>
 8008224:	080088c1 	.word	0x080088c1
 8008228:	080088c7 	.word	0x080088c7
 800822c:	080088cb 	.word	0x080088cb
 8008230:	08003ee9 	.word	0x08003ee9
 8008234:	08007fe1 	.word	0x08007fe1

08008238 <__swbuf_r>:
 8008238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800823a:	460e      	mov	r6, r1
 800823c:	4614      	mov	r4, r2
 800823e:	4605      	mov	r5, r0
 8008240:	b118      	cbz	r0, 800824a <__swbuf_r+0x12>
 8008242:	6a03      	ldr	r3, [r0, #32]
 8008244:	b90b      	cbnz	r3, 800824a <__swbuf_r+0x12>
 8008246:	f7fc fc99 	bl	8004b7c <__sinit>
 800824a:	69a3      	ldr	r3, [r4, #24]
 800824c:	60a3      	str	r3, [r4, #8]
 800824e:	89a3      	ldrh	r3, [r4, #12]
 8008250:	071a      	lsls	r2, r3, #28
 8008252:	d525      	bpl.n	80082a0 <__swbuf_r+0x68>
 8008254:	6923      	ldr	r3, [r4, #16]
 8008256:	b31b      	cbz	r3, 80082a0 <__swbuf_r+0x68>
 8008258:	6823      	ldr	r3, [r4, #0]
 800825a:	6922      	ldr	r2, [r4, #16]
 800825c:	b2f6      	uxtb	r6, r6
 800825e:	1a98      	subs	r0, r3, r2
 8008260:	6963      	ldr	r3, [r4, #20]
 8008262:	4637      	mov	r7, r6
 8008264:	4283      	cmp	r3, r0
 8008266:	dc04      	bgt.n	8008272 <__swbuf_r+0x3a>
 8008268:	4621      	mov	r1, r4
 800826a:	4628      	mov	r0, r5
 800826c:	f7ff fa30 	bl	80076d0 <_fflush_r>
 8008270:	b9e0      	cbnz	r0, 80082ac <__swbuf_r+0x74>
 8008272:	68a3      	ldr	r3, [r4, #8]
 8008274:	3b01      	subs	r3, #1
 8008276:	60a3      	str	r3, [r4, #8]
 8008278:	6823      	ldr	r3, [r4, #0]
 800827a:	1c5a      	adds	r2, r3, #1
 800827c:	6022      	str	r2, [r4, #0]
 800827e:	701e      	strb	r6, [r3, #0]
 8008280:	6962      	ldr	r2, [r4, #20]
 8008282:	1c43      	adds	r3, r0, #1
 8008284:	429a      	cmp	r2, r3
 8008286:	d004      	beq.n	8008292 <__swbuf_r+0x5a>
 8008288:	89a3      	ldrh	r3, [r4, #12]
 800828a:	07db      	lsls	r3, r3, #31
 800828c:	d506      	bpl.n	800829c <__swbuf_r+0x64>
 800828e:	2e0a      	cmp	r6, #10
 8008290:	d104      	bne.n	800829c <__swbuf_r+0x64>
 8008292:	4621      	mov	r1, r4
 8008294:	4628      	mov	r0, r5
 8008296:	f7ff fa1b 	bl	80076d0 <_fflush_r>
 800829a:	b938      	cbnz	r0, 80082ac <__swbuf_r+0x74>
 800829c:	4638      	mov	r0, r7
 800829e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082a0:	4621      	mov	r1, r4
 80082a2:	4628      	mov	r0, r5
 80082a4:	f000 f806 	bl	80082b4 <__swsetup_r>
 80082a8:	2800      	cmp	r0, #0
 80082aa:	d0d5      	beq.n	8008258 <__swbuf_r+0x20>
 80082ac:	f04f 37ff 	mov.w	r7, #4294967295
 80082b0:	e7f4      	b.n	800829c <__swbuf_r+0x64>
	...

080082b4 <__swsetup_r>:
 80082b4:	b538      	push	{r3, r4, r5, lr}
 80082b6:	4b2a      	ldr	r3, [pc, #168]	; (8008360 <__swsetup_r+0xac>)
 80082b8:	4605      	mov	r5, r0
 80082ba:	6818      	ldr	r0, [r3, #0]
 80082bc:	460c      	mov	r4, r1
 80082be:	b118      	cbz	r0, 80082c8 <__swsetup_r+0x14>
 80082c0:	6a03      	ldr	r3, [r0, #32]
 80082c2:	b90b      	cbnz	r3, 80082c8 <__swsetup_r+0x14>
 80082c4:	f7fc fc5a 	bl	8004b7c <__sinit>
 80082c8:	89a3      	ldrh	r3, [r4, #12]
 80082ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80082ce:	0718      	lsls	r0, r3, #28
 80082d0:	d422      	bmi.n	8008318 <__swsetup_r+0x64>
 80082d2:	06d9      	lsls	r1, r3, #27
 80082d4:	d407      	bmi.n	80082e6 <__swsetup_r+0x32>
 80082d6:	2309      	movs	r3, #9
 80082d8:	602b      	str	r3, [r5, #0]
 80082da:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80082de:	f04f 30ff 	mov.w	r0, #4294967295
 80082e2:	81a3      	strh	r3, [r4, #12]
 80082e4:	e034      	b.n	8008350 <__swsetup_r+0x9c>
 80082e6:	0758      	lsls	r0, r3, #29
 80082e8:	d512      	bpl.n	8008310 <__swsetup_r+0x5c>
 80082ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80082ec:	b141      	cbz	r1, 8008300 <__swsetup_r+0x4c>
 80082ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80082f2:	4299      	cmp	r1, r3
 80082f4:	d002      	beq.n	80082fc <__swsetup_r+0x48>
 80082f6:	4628      	mov	r0, r5
 80082f8:	f7fd fbda 	bl	8005ab0 <_free_r>
 80082fc:	2300      	movs	r3, #0
 80082fe:	6363      	str	r3, [r4, #52]	; 0x34
 8008300:	89a3      	ldrh	r3, [r4, #12]
 8008302:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008306:	81a3      	strh	r3, [r4, #12]
 8008308:	2300      	movs	r3, #0
 800830a:	6063      	str	r3, [r4, #4]
 800830c:	6923      	ldr	r3, [r4, #16]
 800830e:	6023      	str	r3, [r4, #0]
 8008310:	89a3      	ldrh	r3, [r4, #12]
 8008312:	f043 0308 	orr.w	r3, r3, #8
 8008316:	81a3      	strh	r3, [r4, #12]
 8008318:	6923      	ldr	r3, [r4, #16]
 800831a:	b94b      	cbnz	r3, 8008330 <__swsetup_r+0x7c>
 800831c:	89a3      	ldrh	r3, [r4, #12]
 800831e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008322:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008326:	d003      	beq.n	8008330 <__swsetup_r+0x7c>
 8008328:	4621      	mov	r1, r4
 800832a:	4628      	mov	r0, r5
 800832c:	f000 f883 	bl	8008436 <__smakebuf_r>
 8008330:	89a0      	ldrh	r0, [r4, #12]
 8008332:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008336:	f010 0301 	ands.w	r3, r0, #1
 800833a:	d00a      	beq.n	8008352 <__swsetup_r+0x9e>
 800833c:	2300      	movs	r3, #0
 800833e:	60a3      	str	r3, [r4, #8]
 8008340:	6963      	ldr	r3, [r4, #20]
 8008342:	425b      	negs	r3, r3
 8008344:	61a3      	str	r3, [r4, #24]
 8008346:	6923      	ldr	r3, [r4, #16]
 8008348:	b943      	cbnz	r3, 800835c <__swsetup_r+0xa8>
 800834a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800834e:	d1c4      	bne.n	80082da <__swsetup_r+0x26>
 8008350:	bd38      	pop	{r3, r4, r5, pc}
 8008352:	0781      	lsls	r1, r0, #30
 8008354:	bf58      	it	pl
 8008356:	6963      	ldrpl	r3, [r4, #20]
 8008358:	60a3      	str	r3, [r4, #8]
 800835a:	e7f4      	b.n	8008346 <__swsetup_r+0x92>
 800835c:	2000      	movs	r0, #0
 800835e:	e7f7      	b.n	8008350 <__swsetup_r+0x9c>
 8008360:	2000006c 	.word	0x2000006c

08008364 <_raise_r>:
 8008364:	291f      	cmp	r1, #31
 8008366:	b538      	push	{r3, r4, r5, lr}
 8008368:	4604      	mov	r4, r0
 800836a:	460d      	mov	r5, r1
 800836c:	d904      	bls.n	8008378 <_raise_r+0x14>
 800836e:	2316      	movs	r3, #22
 8008370:	6003      	str	r3, [r0, #0]
 8008372:	f04f 30ff 	mov.w	r0, #4294967295
 8008376:	bd38      	pop	{r3, r4, r5, pc}
 8008378:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800837a:	b112      	cbz	r2, 8008382 <_raise_r+0x1e>
 800837c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008380:	b94b      	cbnz	r3, 8008396 <_raise_r+0x32>
 8008382:	4620      	mov	r0, r4
 8008384:	f000 f830 	bl	80083e8 <_getpid_r>
 8008388:	462a      	mov	r2, r5
 800838a:	4601      	mov	r1, r0
 800838c:	4620      	mov	r0, r4
 800838e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008392:	f000 b817 	b.w	80083c4 <_kill_r>
 8008396:	2b01      	cmp	r3, #1
 8008398:	d00a      	beq.n	80083b0 <_raise_r+0x4c>
 800839a:	1c59      	adds	r1, r3, #1
 800839c:	d103      	bne.n	80083a6 <_raise_r+0x42>
 800839e:	2316      	movs	r3, #22
 80083a0:	6003      	str	r3, [r0, #0]
 80083a2:	2001      	movs	r0, #1
 80083a4:	e7e7      	b.n	8008376 <_raise_r+0x12>
 80083a6:	2400      	movs	r4, #0
 80083a8:	4628      	mov	r0, r5
 80083aa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80083ae:	4798      	blx	r3
 80083b0:	2000      	movs	r0, #0
 80083b2:	e7e0      	b.n	8008376 <_raise_r+0x12>

080083b4 <raise>:
 80083b4:	4b02      	ldr	r3, [pc, #8]	; (80083c0 <raise+0xc>)
 80083b6:	4601      	mov	r1, r0
 80083b8:	6818      	ldr	r0, [r3, #0]
 80083ba:	f7ff bfd3 	b.w	8008364 <_raise_r>
 80083be:	bf00      	nop
 80083c0:	2000006c 	.word	0x2000006c

080083c4 <_kill_r>:
 80083c4:	b538      	push	{r3, r4, r5, lr}
 80083c6:	2300      	movs	r3, #0
 80083c8:	4d06      	ldr	r5, [pc, #24]	; (80083e4 <_kill_r+0x20>)
 80083ca:	4604      	mov	r4, r0
 80083cc:	4608      	mov	r0, r1
 80083ce:	4611      	mov	r1, r2
 80083d0:	602b      	str	r3, [r5, #0]
 80083d2:	f7f8 feb5 	bl	8001140 <_kill>
 80083d6:	1c43      	adds	r3, r0, #1
 80083d8:	d102      	bne.n	80083e0 <_kill_r+0x1c>
 80083da:	682b      	ldr	r3, [r5, #0]
 80083dc:	b103      	cbz	r3, 80083e0 <_kill_r+0x1c>
 80083de:	6023      	str	r3, [r4, #0]
 80083e0:	bd38      	pop	{r3, r4, r5, pc}
 80083e2:	bf00      	nop
 80083e4:	200003e8 	.word	0x200003e8

080083e8 <_getpid_r>:
 80083e8:	f7f8 bea3 	b.w	8001132 <_getpid>

080083ec <__swhatbuf_r>:
 80083ec:	b570      	push	{r4, r5, r6, lr}
 80083ee:	460c      	mov	r4, r1
 80083f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083f4:	4615      	mov	r5, r2
 80083f6:	2900      	cmp	r1, #0
 80083f8:	461e      	mov	r6, r3
 80083fa:	b096      	sub	sp, #88	; 0x58
 80083fc:	da0c      	bge.n	8008418 <__swhatbuf_r+0x2c>
 80083fe:	89a3      	ldrh	r3, [r4, #12]
 8008400:	2100      	movs	r1, #0
 8008402:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008406:	bf0c      	ite	eq
 8008408:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800840c:	2340      	movne	r3, #64	; 0x40
 800840e:	2000      	movs	r0, #0
 8008410:	6031      	str	r1, [r6, #0]
 8008412:	602b      	str	r3, [r5, #0]
 8008414:	b016      	add	sp, #88	; 0x58
 8008416:	bd70      	pop	{r4, r5, r6, pc}
 8008418:	466a      	mov	r2, sp
 800841a:	f000 f849 	bl	80084b0 <_fstat_r>
 800841e:	2800      	cmp	r0, #0
 8008420:	dbed      	blt.n	80083fe <__swhatbuf_r+0x12>
 8008422:	9901      	ldr	r1, [sp, #4]
 8008424:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008428:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800842c:	4259      	negs	r1, r3
 800842e:	4159      	adcs	r1, r3
 8008430:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008434:	e7eb      	b.n	800840e <__swhatbuf_r+0x22>

08008436 <__smakebuf_r>:
 8008436:	898b      	ldrh	r3, [r1, #12]
 8008438:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800843a:	079d      	lsls	r5, r3, #30
 800843c:	4606      	mov	r6, r0
 800843e:	460c      	mov	r4, r1
 8008440:	d507      	bpl.n	8008452 <__smakebuf_r+0x1c>
 8008442:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008446:	6023      	str	r3, [r4, #0]
 8008448:	6123      	str	r3, [r4, #16]
 800844a:	2301      	movs	r3, #1
 800844c:	6163      	str	r3, [r4, #20]
 800844e:	b002      	add	sp, #8
 8008450:	bd70      	pop	{r4, r5, r6, pc}
 8008452:	466a      	mov	r2, sp
 8008454:	ab01      	add	r3, sp, #4
 8008456:	f7ff ffc9 	bl	80083ec <__swhatbuf_r>
 800845a:	9900      	ldr	r1, [sp, #0]
 800845c:	4605      	mov	r5, r0
 800845e:	4630      	mov	r0, r6
 8008460:	f7fd fb96 	bl	8005b90 <_malloc_r>
 8008464:	b948      	cbnz	r0, 800847a <__smakebuf_r+0x44>
 8008466:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800846a:	059a      	lsls	r2, r3, #22
 800846c:	d4ef      	bmi.n	800844e <__smakebuf_r+0x18>
 800846e:	f023 0303 	bic.w	r3, r3, #3
 8008472:	f043 0302 	orr.w	r3, r3, #2
 8008476:	81a3      	strh	r3, [r4, #12]
 8008478:	e7e3      	b.n	8008442 <__smakebuf_r+0xc>
 800847a:	89a3      	ldrh	r3, [r4, #12]
 800847c:	6020      	str	r0, [r4, #0]
 800847e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008482:	81a3      	strh	r3, [r4, #12]
 8008484:	9b00      	ldr	r3, [sp, #0]
 8008486:	6120      	str	r0, [r4, #16]
 8008488:	6163      	str	r3, [r4, #20]
 800848a:	9b01      	ldr	r3, [sp, #4]
 800848c:	b15b      	cbz	r3, 80084a6 <__smakebuf_r+0x70>
 800848e:	4630      	mov	r0, r6
 8008490:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008494:	f000 f81e 	bl	80084d4 <_isatty_r>
 8008498:	b128      	cbz	r0, 80084a6 <__smakebuf_r+0x70>
 800849a:	89a3      	ldrh	r3, [r4, #12]
 800849c:	f023 0303 	bic.w	r3, r3, #3
 80084a0:	f043 0301 	orr.w	r3, r3, #1
 80084a4:	81a3      	strh	r3, [r4, #12]
 80084a6:	89a3      	ldrh	r3, [r4, #12]
 80084a8:	431d      	orrs	r5, r3
 80084aa:	81a5      	strh	r5, [r4, #12]
 80084ac:	e7cf      	b.n	800844e <__smakebuf_r+0x18>
	...

080084b0 <_fstat_r>:
 80084b0:	b538      	push	{r3, r4, r5, lr}
 80084b2:	2300      	movs	r3, #0
 80084b4:	4d06      	ldr	r5, [pc, #24]	; (80084d0 <_fstat_r+0x20>)
 80084b6:	4604      	mov	r4, r0
 80084b8:	4608      	mov	r0, r1
 80084ba:	4611      	mov	r1, r2
 80084bc:	602b      	str	r3, [r5, #0]
 80084be:	f7f8 fe9d 	bl	80011fc <_fstat>
 80084c2:	1c43      	adds	r3, r0, #1
 80084c4:	d102      	bne.n	80084cc <_fstat_r+0x1c>
 80084c6:	682b      	ldr	r3, [r5, #0]
 80084c8:	b103      	cbz	r3, 80084cc <_fstat_r+0x1c>
 80084ca:	6023      	str	r3, [r4, #0]
 80084cc:	bd38      	pop	{r3, r4, r5, pc}
 80084ce:	bf00      	nop
 80084d0:	200003e8 	.word	0x200003e8

080084d4 <_isatty_r>:
 80084d4:	b538      	push	{r3, r4, r5, lr}
 80084d6:	2300      	movs	r3, #0
 80084d8:	4d05      	ldr	r5, [pc, #20]	; (80084f0 <_isatty_r+0x1c>)
 80084da:	4604      	mov	r4, r0
 80084dc:	4608      	mov	r0, r1
 80084de:	602b      	str	r3, [r5, #0]
 80084e0:	f7f8 fe9b 	bl	800121a <_isatty>
 80084e4:	1c43      	adds	r3, r0, #1
 80084e6:	d102      	bne.n	80084ee <_isatty_r+0x1a>
 80084e8:	682b      	ldr	r3, [r5, #0]
 80084ea:	b103      	cbz	r3, 80084ee <_isatty_r+0x1a>
 80084ec:	6023      	str	r3, [r4, #0]
 80084ee:	bd38      	pop	{r3, r4, r5, pc}
 80084f0:	200003e8 	.word	0x200003e8

080084f4 <_init>:
 80084f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084f6:	bf00      	nop
 80084f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084fa:	bc08      	pop	{r3}
 80084fc:	469e      	mov	lr, r3
 80084fe:	4770      	bx	lr

08008500 <_fini>:
 8008500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008502:	bf00      	nop
 8008504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008506:	bc08      	pop	{r3}
 8008508:	469e      	mov	lr, r3
 800850a:	4770      	bx	lr
