
NRF24L01P_P0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003690  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  0800379c  0800379c  0001379c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037c8  080037c8  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  080037c8  080037c8  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080037c8  080037c8  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037c8  080037c8  000137c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037cc  080037cc  000137cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080037d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  2000001c  080037ec  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000019c  080037ec  0002019c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ac4b  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001def  00000000  00000000  0002acd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009e0  00000000  00000000  0002cac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000078b  00000000  00000000  0002d4a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001831b  00000000  00000000  0002dc33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b79d  00000000  00000000  00045f4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008897c  00000000  00000000  000516eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000275c  00000000  00000000  000da068  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000dc7c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000001c 	.word	0x2000001c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003784 	.word	0x08003784

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000020 	.word	0x20000020
 8000148:	08003784 	.word	0x08003784

0800014c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000152:	f000 fc0b 	bl	800096c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000156:	f000 f887 	bl	8000268 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800015a:	f000 f961 	bl	8000420 <MX_GPIO_Init>
	MX_SPI1_Init();
 800015e:	f000 f8c9 	bl	80002f4 <MX_SPI1_Init>
	MX_USART1_UART_Init();
 8000162:	f000 f933 	bl	80003cc <MX_USART1_UART_Init>
	MX_SPI2_Init();
 8000166:	f000 f8fb 	bl	8000360 <MX_SPI2_Init>
	 u8g2_SetFont(&u8g2, u8g2_font_inb16_mr);

	 //u8g2_SetDisplayRotation(&u8g2, U8G2_R2);
	 */

	nrf24l01p_rx_init(2500, _1Mbps, P0_address, P1_address);
 800016a:	4b38      	ldr	r3, [pc, #224]	; (800024c <main+0x100>)
 800016c:	4a38      	ldr	r2, [pc, #224]	; (8000250 <main+0x104>)
 800016e:	2100      	movs	r1, #0
 8000170:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8000174:	f003 f86e 	bl	8003254 <nrf24l01p_rx_init>

	rxBufferInit(&uart_rx);
 8000178:	4836      	ldr	r0, [pc, #216]	; (8000254 <main+0x108>)
 800017a:	f000 fb33 	bl	80007e4 <rxBufferInit>

	/* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_ERR);
 800017e:	4b36      	ldr	r3, [pc, #216]	; (8000258 <main+0x10c>)
 8000180:	681b      	ldr	r3, [r3, #0]
 8000182:	695a      	ldr	r2, [r3, #20]
 8000184:	4b34      	ldr	r3, [pc, #208]	; (8000258 <main+0x10c>)
 8000186:	681b      	ldr	r3, [r3, #0]
 8000188:	f042 0201 	orr.w	r2, r2, #1
 800018c:	615a      	str	r2, [r3, #20]

	/* Enable the UART Data Register not empty Interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 800018e:	4b32      	ldr	r3, [pc, #200]	; (8000258 <main+0x10c>)
 8000190:	681b      	ldr	r3, [r3, #0]
 8000192:	68da      	ldr	r2, [r3, #12]
 8000194:	4b30      	ldr	r3, [pc, #192]	; (8000258 <main+0x10c>)
 8000196:	681b      	ldr	r3, [r3, #0]
 8000198:	f042 0220 	orr.w	r2, r2, #32
 800019c:	60da      	str	r2, [r3, #12]
		 do {
		 u8g2_DrawStr(&u8g2, 5, 21, rx_data);
		 } while (u8g2_NextPage(&u8g2));
		 */

		if (nrf24l01p_rx_flag == 1) {
 800019e:	4b2f      	ldr	r3, [pc, #188]	; (800025c <main+0x110>)
 80001a0:	781b      	ldrb	r3, [r3, #0]
 80001a2:	2b01      	cmp	r3, #1
 80001a4:	d118      	bne.n	80001d8 <main+0x8c>
			nrf24l01p_rx_flag =0;
 80001a6:	4b2d      	ldr	r3, [pc, #180]	; (800025c <main+0x110>)
 80001a8:	2200      	movs	r2, #0
 80001aa:	701a      	strb	r2, [r3, #0]
			uint8_t stat = read_register(NRF24L01P_REG_CONFIG);
 80001ac:	2000      	movs	r0, #0
 80001ae:	f002 ffc3 	bl	8003138 <read_register>
 80001b2:	4603      	mov	r3, r0
 80001b4:	72fb      	strb	r3, [r7, #11]
			if (!(stat & (1 << 0))) {
 80001b6:	7afb      	ldrb	r3, [r7, #11]
 80001b8:	f003 0301 	and.w	r3, r3, #1
 80001bc:	2b00      	cmp	r3, #0
 80001be:	d101      	bne.n	80001c4 <main+0x78>

				nrf24l01p_prx_mode();
 80001c0:	f003 f8e7 	bl	8003392 <nrf24l01p_prx_mode>

			}

			//nrf24l01p_flush_rx_fifo();
			nrf24l01p_rx_receive(rx_data);
 80001c4:	4826      	ldr	r0, [pc, #152]	; (8000260 <main+0x114>)
 80001c6:	f003 f87c 	bl	80032c2 <nrf24l01p_rx_receive>
			HAL_UART_Transmit(&huart1, rx_data, sizeof(rx_data), 500);
 80001ca:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80001ce:	2220      	movs	r2, #32
 80001d0:	4923      	ldr	r1, [pc, #140]	; (8000260 <main+0x114>)
 80001d2:	4821      	ldr	r0, [pc, #132]	; (8000258 <main+0x10c>)
 80001d4:	f002 f9ac 	bl	8002530 <HAL_UART_Transmit>
		}

		memset(tx_data, 0, sizeof(tx_data));
 80001d8:	2220      	movs	r2, #32
 80001da:	2100      	movs	r1, #0
 80001dc:	4821      	ldr	r0, [pc, #132]	; (8000264 <main+0x118>)
 80001de:	f003 faa4 	bl	800372a <memset>
		int num = 0;
 80001e2:	2300      	movs	r3, #0
 80001e4:	607b      	str	r3, [r7, #4]
		if (num = uart_available(&uart_rx)) {
 80001e6:	481b      	ldr	r0, [pc, #108]	; (8000254 <main+0x108>)
 80001e8:	f000 fb58 	bl	800089c <uart_available>
 80001ec:	4603      	mov	r3, r0
 80001ee:	607b      	str	r3, [r7, #4]
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d025      	beq.n	8000242 <main+0xf6>

			nrf24l01p_ptx_mode();
 80001f6:	f003 f8e5 	bl	80033c4 <nrf24l01p_ptx_mode>

			for (int i = 0; i < num; i++) {
 80001fa:	2300      	movs	r3, #0
 80001fc:	60fb      	str	r3, [r7, #12]
 80001fe:	e012      	b.n	8000226 <main+0xda>

				int ch = pop(&uart_rx);
 8000200:	4814      	ldr	r0, [pc, #80]	; (8000254 <main+0x108>)
 8000202:	f000 fb26 	bl	8000852 <pop>
 8000206:	4603      	mov	r3, r0
 8000208:	603b      	str	r3, [r7, #0]
				if (ch != -1) {
 800020a:	683b      	ldr	r3, [r7, #0]
 800020c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000210:	d006      	beq.n	8000220 <main+0xd4>
					tx_data[i] = ch;
 8000212:	683b      	ldr	r3, [r7, #0]
 8000214:	b2d9      	uxtb	r1, r3
 8000216:	4a13      	ldr	r2, [pc, #76]	; (8000264 <main+0x118>)
 8000218:	68fb      	ldr	r3, [r7, #12]
 800021a:	4413      	add	r3, r2
 800021c:	460a      	mov	r2, r1
 800021e:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < num; i++) {
 8000220:	68fb      	ldr	r3, [r7, #12]
 8000222:	3301      	adds	r3, #1
 8000224:	60fb      	str	r3, [r7, #12]
 8000226:	68fa      	ldr	r2, [r7, #12]
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	429a      	cmp	r2, r3
 800022c:	dbe8      	blt.n	8000200 <main+0xb4>
				}
			}

			nrf24l01p_flush_tx_fifo();
 800022e:	f003 f943 	bl	80034b8 <nrf24l01p_flush_tx_fifo>
			nrf24l01p_tx_transmit(tx_data);
 8000232:	480c      	ldr	r0, [pc, #48]	; (8000264 <main+0x118>)
 8000234:	f003 f852 	bl	80032dc <nrf24l01p_tx_transmit>
			HAL_Delay(100);
 8000238:	2064      	movs	r0, #100	; 0x64
 800023a:	f000 fbf9 	bl	8000a30 <HAL_Delay>
			//HAL_UART_Transmit(&huart1, tx_data, sizeof(tx_data), 500);
			nrf24l01p_prx_mode();
 800023e:	f003 f8a8 	bl	8003392 <nrf24l01p_prx_mode>
		}

		HAL_Delay(100);
 8000242:	2064      	movs	r0, #100	; 0x64
 8000244:	f000 fbf4 	bl	8000a30 <HAL_Delay>
	while (1) {
 8000248:	e7a9      	b.n	800019e <main+0x52>
 800024a:	bf00      	nop
 800024c:	20000008 	.word	0x20000008
 8000250:	20000000 	.word	0x20000000
 8000254:	20000174 	.word	0x20000174
 8000258:	200000e8 	.word	0x200000e8
 800025c:	20000130 	.word	0x20000130
 8000260:	20000134 	.word	0x20000134
 8000264:	20000154 	.word	0x20000154

08000268 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000268:	b580      	push	{r7, lr}
 800026a:	b090      	sub	sp, #64	; 0x40
 800026c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800026e:	f107 0318 	add.w	r3, r7, #24
 8000272:	2228      	movs	r2, #40	; 0x28
 8000274:	2100      	movs	r1, #0
 8000276:	4618      	mov	r0, r3
 8000278:	f003 fa57 	bl	800372a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800027c:	1d3b      	adds	r3, r7, #4
 800027e:	2200      	movs	r2, #0
 8000280:	601a      	str	r2, [r3, #0]
 8000282:	605a      	str	r2, [r3, #4]
 8000284:	609a      	str	r2, [r3, #8]
 8000286:	60da      	str	r2, [r3, #12]
 8000288:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800028a:	2301      	movs	r3, #1
 800028c:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800028e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000292:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000294:	2300      	movs	r3, #0
 8000296:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000298:	2301      	movs	r3, #1
 800029a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800029c:	2302      	movs	r3, #2
 800029e:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002a4:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002a6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002aa:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80002ac:	f107 0318 	add.w	r3, r7, #24
 80002b0:	4618      	mov	r0, r3
 80002b2:	f000 ff55 	bl	8001160 <HAL_RCC_OscConfig>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d001      	beq.n	80002c0 <SystemClock_Config+0x58>
		Error_Handler();
 80002bc:	f000 f94c 	bl	8000558 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80002c0:	230f      	movs	r3, #15
 80002c2:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002c4:	2302      	movs	r3, #2
 80002c6:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c8:	2300      	movs	r3, #0
 80002ca:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002d0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002d2:	2300      	movs	r3, #0
 80002d4:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80002d6:	1d3b      	adds	r3, r7, #4
 80002d8:	2102      	movs	r1, #2
 80002da:	4618      	mov	r0, r3
 80002dc:	f001 f9c2 	bl	8001664 <HAL_RCC_ClockConfig>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <SystemClock_Config+0x82>
		Error_Handler();
 80002e6:	f000 f937 	bl	8000558 <Error_Handler>
	}
}
 80002ea:	bf00      	nop
 80002ec:	3740      	adds	r7, #64	; 0x40
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
	...

080002f4 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80002f8:	4b17      	ldr	r3, [pc, #92]	; (8000358 <MX_SPI1_Init+0x64>)
 80002fa:	4a18      	ldr	r2, [pc, #96]	; (800035c <MX_SPI1_Init+0x68>)
 80002fc:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80002fe:	4b16      	ldr	r3, [pc, #88]	; (8000358 <MX_SPI1_Init+0x64>)
 8000300:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000304:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000306:	4b14      	ldr	r3, [pc, #80]	; (8000358 <MX_SPI1_Init+0x64>)
 8000308:	2200      	movs	r2, #0
 800030a:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800030c:	4b12      	ldr	r3, [pc, #72]	; (8000358 <MX_SPI1_Init+0x64>)
 800030e:	2200      	movs	r2, #0
 8000310:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000312:	4b11      	ldr	r3, [pc, #68]	; (8000358 <MX_SPI1_Init+0x64>)
 8000314:	2200      	movs	r2, #0
 8000316:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000318:	4b0f      	ldr	r3, [pc, #60]	; (8000358 <MX_SPI1_Init+0x64>)
 800031a:	2200      	movs	r2, #0
 800031c:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800031e:	4b0e      	ldr	r3, [pc, #56]	; (8000358 <MX_SPI1_Init+0x64>)
 8000320:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000324:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000326:	4b0c      	ldr	r3, [pc, #48]	; (8000358 <MX_SPI1_Init+0x64>)
 8000328:	2218      	movs	r2, #24
 800032a:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800032c:	4b0a      	ldr	r3, [pc, #40]	; (8000358 <MX_SPI1_Init+0x64>)
 800032e:	2200      	movs	r2, #0
 8000330:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000332:	4b09      	ldr	r3, [pc, #36]	; (8000358 <MX_SPI1_Init+0x64>)
 8000334:	2200      	movs	r2, #0
 8000336:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000338:	4b07      	ldr	r3, [pc, #28]	; (8000358 <MX_SPI1_Init+0x64>)
 800033a:	2200      	movs	r2, #0
 800033c:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 800033e:	4b06      	ldr	r3, [pc, #24]	; (8000358 <MX_SPI1_Init+0x64>)
 8000340:	220a      	movs	r2, #10
 8000342:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000344:	4804      	ldr	r0, [pc, #16]	; (8000358 <MX_SPI1_Init+0x64>)
 8000346:	f001 fb1b 	bl	8001980 <HAL_SPI_Init>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d001      	beq.n	8000354 <MX_SPI1_Init+0x60>
		Error_Handler();
 8000350:	f000 f902 	bl	8000558 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000354:	bf00      	nop
 8000356:	bd80      	pop	{r7, pc}
 8000358:	20000038 	.word	0x20000038
 800035c:	40013000 	.word	0x40013000

08000360 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8000364:	4b17      	ldr	r3, [pc, #92]	; (80003c4 <MX_SPI2_Init+0x64>)
 8000366:	4a18      	ldr	r2, [pc, #96]	; (80003c8 <MX_SPI2_Init+0x68>)
 8000368:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 800036a:	4b16      	ldr	r3, [pc, #88]	; (80003c4 <MX_SPI2_Init+0x64>)
 800036c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000370:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000372:	4b14      	ldr	r3, [pc, #80]	; (80003c4 <MX_SPI2_Init+0x64>)
 8000374:	2200      	movs	r2, #0
 8000376:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000378:	4b12      	ldr	r3, [pc, #72]	; (80003c4 <MX_SPI2_Init+0x64>)
 800037a:	2200      	movs	r2, #0
 800037c:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800037e:	4b11      	ldr	r3, [pc, #68]	; (80003c4 <MX_SPI2_Init+0x64>)
 8000380:	2200      	movs	r2, #0
 8000382:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000384:	4b0f      	ldr	r3, [pc, #60]	; (80003c4 <MX_SPI2_Init+0x64>)
 8000386:	2200      	movs	r2, #0
 8000388:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 800038a:	4b0e      	ldr	r3, [pc, #56]	; (80003c4 <MX_SPI2_Init+0x64>)
 800038c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000390:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000392:	4b0c      	ldr	r3, [pc, #48]	; (80003c4 <MX_SPI2_Init+0x64>)
 8000394:	2218      	movs	r2, #24
 8000396:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000398:	4b0a      	ldr	r3, [pc, #40]	; (80003c4 <MX_SPI2_Init+0x64>)
 800039a:	2200      	movs	r2, #0
 800039c:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800039e:	4b09      	ldr	r3, [pc, #36]	; (80003c4 <MX_SPI2_Init+0x64>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003a4:	4b07      	ldr	r3, [pc, #28]	; (80003c4 <MX_SPI2_Init+0x64>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 80003aa:	4b06      	ldr	r3, [pc, #24]	; (80003c4 <MX_SPI2_Init+0x64>)
 80003ac:	220a      	movs	r2, #10
 80003ae:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 80003b0:	4804      	ldr	r0, [pc, #16]	; (80003c4 <MX_SPI2_Init+0x64>)
 80003b2:	f001 fae5 	bl	8001980 <HAL_SPI_Init>
 80003b6:	4603      	mov	r3, r0
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d001      	beq.n	80003c0 <MX_SPI2_Init+0x60>
		Error_Handler();
 80003bc:	f000 f8cc 	bl	8000558 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 80003c0:	bf00      	nop
 80003c2:	bd80      	pop	{r7, pc}
 80003c4:	20000090 	.word	0x20000090
 80003c8:	40003800 	.word	0x40003800

080003cc <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80003d0:	4b11      	ldr	r3, [pc, #68]	; (8000418 <MX_USART1_UART_Init+0x4c>)
 80003d2:	4a12      	ldr	r2, [pc, #72]	; (800041c <MX_USART1_UART_Init+0x50>)
 80003d4:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80003d6:	4b10      	ldr	r3, [pc, #64]	; (8000418 <MX_USART1_UART_Init+0x4c>)
 80003d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003dc:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003de:	4b0e      	ldr	r3, [pc, #56]	; (8000418 <MX_USART1_UART_Init+0x4c>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80003e4:	4b0c      	ldr	r3, [pc, #48]	; (8000418 <MX_USART1_UART_Init+0x4c>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80003ea:	4b0b      	ldr	r3, [pc, #44]	; (8000418 <MX_USART1_UART_Init+0x4c>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80003f0:	4b09      	ldr	r3, [pc, #36]	; (8000418 <MX_USART1_UART_Init+0x4c>)
 80003f2:	220c      	movs	r2, #12
 80003f4:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003f6:	4b08      	ldr	r3, [pc, #32]	; (8000418 <MX_USART1_UART_Init+0x4c>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003fc:	4b06      	ldr	r3, [pc, #24]	; (8000418 <MX_USART1_UART_Init+0x4c>)
 80003fe:	2200      	movs	r2, #0
 8000400:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000402:	4805      	ldr	r0, [pc, #20]	; (8000418 <MX_USART1_UART_Init+0x4c>)
 8000404:	f002 f844 	bl	8002490 <HAL_UART_Init>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 800040e:	f000 f8a3 	bl	8000558 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000412:	bf00      	nop
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	200000e8 	.word	0x200000e8
 800041c:	40013800 	.word	0x40013800

08000420 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000420:	b580      	push	{r7, lr}
 8000422:	b088      	sub	sp, #32
 8000424:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000426:	f107 0310 	add.w	r3, r7, #16
 800042a:	2200      	movs	r2, #0
 800042c:	601a      	str	r2, [r3, #0]
 800042e:	605a      	str	r2, [r3, #4]
 8000430:	609a      	str	r2, [r3, #8]
 8000432:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000434:	4b3b      	ldr	r3, [pc, #236]	; (8000524 <MX_GPIO_Init+0x104>)
 8000436:	699b      	ldr	r3, [r3, #24]
 8000438:	4a3a      	ldr	r2, [pc, #232]	; (8000524 <MX_GPIO_Init+0x104>)
 800043a:	f043 0320 	orr.w	r3, r3, #32
 800043e:	6193      	str	r3, [r2, #24]
 8000440:	4b38      	ldr	r3, [pc, #224]	; (8000524 <MX_GPIO_Init+0x104>)
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	f003 0320 	and.w	r3, r3, #32
 8000448:	60fb      	str	r3, [r7, #12]
 800044a:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800044c:	4b35      	ldr	r3, [pc, #212]	; (8000524 <MX_GPIO_Init+0x104>)
 800044e:	699b      	ldr	r3, [r3, #24]
 8000450:	4a34      	ldr	r2, [pc, #208]	; (8000524 <MX_GPIO_Init+0x104>)
 8000452:	f043 0304 	orr.w	r3, r3, #4
 8000456:	6193      	str	r3, [r2, #24]
 8000458:	4b32      	ldr	r3, [pc, #200]	; (8000524 <MX_GPIO_Init+0x104>)
 800045a:	699b      	ldr	r3, [r3, #24]
 800045c:	f003 0304 	and.w	r3, r3, #4
 8000460:	60bb      	str	r3, [r7, #8]
 8000462:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000464:	4b2f      	ldr	r3, [pc, #188]	; (8000524 <MX_GPIO_Init+0x104>)
 8000466:	699b      	ldr	r3, [r3, #24]
 8000468:	4a2e      	ldr	r2, [pc, #184]	; (8000524 <MX_GPIO_Init+0x104>)
 800046a:	f043 0308 	orr.w	r3, r3, #8
 800046e:	6193      	str	r3, [r2, #24]
 8000470:	4b2c      	ldr	r3, [pc, #176]	; (8000524 <MX_GPIO_Init+0x104>)
 8000472:	699b      	ldr	r3, [r3, #24]
 8000474:	f003 0308 	and.w	r3, r3, #8
 8000478:	607b      	str	r3, [r7, #4]
 800047a:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_SET);
 800047c:	2201      	movs	r2, #1
 800047e:	2108      	movs	r1, #8
 8000480:	4829      	ldr	r0, [pc, #164]	; (8000528 <MX_GPIO_Init+0x108>)
 8000482:	f000 fe3d 	bl	8001100 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 8000486:	2200      	movs	r2, #0
 8000488:	2110      	movs	r1, #16
 800048a:	4827      	ldr	r0, [pc, #156]	; (8000528 <MX_GPIO_Init+0x108>)
 800048c:	f000 fe38 	bl	8001100 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, OLED_RST_Pin | OLED_DC_Pin | OLED_CS_Pin,
 8000490:	2201      	movs	r2, #1
 8000492:	f44f 41b0 	mov.w	r1, #22528	; 0x5800
 8000496:	4825      	ldr	r0, [pc, #148]	; (800052c <MX_GPIO_Init+0x10c>)
 8000498:	f000 fe32 	bl	8001100 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin : IRQ_Pin */
	GPIO_InitStruct.Pin = IRQ_Pin;
 800049c:	2304      	movs	r3, #4
 800049e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004a0:	4b23      	ldr	r3, [pc, #140]	; (8000530 <MX_GPIO_Init+0x110>)
 80004a2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004a4:	2301      	movs	r3, #1
 80004a6:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 80004a8:	f107 0310 	add.w	r3, r7, #16
 80004ac:	4619      	mov	r1, r3
 80004ae:	481e      	ldr	r0, [pc, #120]	; (8000528 <MX_GPIO_Init+0x108>)
 80004b0:	f000 fca2 	bl	8000df8 <HAL_GPIO_Init>

	/*Configure GPIO pin : CSN_Pin */
	GPIO_InitStruct.Pin = CSN_Pin;
 80004b4:	2308      	movs	r3, #8
 80004b6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004b8:	2301      	movs	r3, #1
 80004ba:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004bc:	2301      	movs	r3, #1
 80004be:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004c0:	2303      	movs	r3, #3
 80004c2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(CSN_GPIO_Port, &GPIO_InitStruct);
 80004c4:	f107 0310 	add.w	r3, r7, #16
 80004c8:	4619      	mov	r1, r3
 80004ca:	4817      	ldr	r0, [pc, #92]	; (8000528 <MX_GPIO_Init+0x108>)
 80004cc:	f000 fc94 	bl	8000df8 <HAL_GPIO_Init>

	/*Configure GPIO pin : CE_Pin */
	GPIO_InitStruct.Pin = CE_Pin;
 80004d0:	2310      	movs	r3, #16
 80004d2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d4:	2301      	movs	r3, #1
 80004d6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80004d8:	2302      	movs	r3, #2
 80004da:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004dc:	2303      	movs	r3, #3
 80004de:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(CE_GPIO_Port, &GPIO_InitStruct);
 80004e0:	f107 0310 	add.w	r3, r7, #16
 80004e4:	4619      	mov	r1, r3
 80004e6:	4810      	ldr	r0, [pc, #64]	; (8000528 <MX_GPIO_Init+0x108>)
 80004e8:	f000 fc86 	bl	8000df8 <HAL_GPIO_Init>

	/*Configure GPIO pins : OLED_RST_Pin OLED_DC_Pin OLED_CS_Pin */
	GPIO_InitStruct.Pin = OLED_RST_Pin | OLED_DC_Pin | OLED_CS_Pin;
 80004ec:	f44f 43b0 	mov.w	r3, #22528	; 0x5800
 80004f0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004f2:	2301      	movs	r3, #1
 80004f4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004f6:	2301      	movs	r3, #1
 80004f8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004fa:	2303      	movs	r3, #3
 80004fc:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004fe:	f107 0310 	add.w	r3, r7, #16
 8000502:	4619      	mov	r1, r3
 8000504:	4809      	ldr	r0, [pc, #36]	; (800052c <MX_GPIO_Init+0x10c>)
 8000506:	f000 fc77 	bl	8000df8 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800050a:	2200      	movs	r2, #0
 800050c:	2100      	movs	r1, #0
 800050e:	2008      	movs	r0, #8
 8000510:	f000 fb89 	bl	8000c26 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000514:	2008      	movs	r0, #8
 8000516:	f000 fba2 	bl	8000c5e <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800051a:	bf00      	nop
 800051c:	3720      	adds	r7, #32
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	40021000 	.word	0x40021000
 8000528:	40010800 	.word	0x40010800
 800052c:	40010c00 	.word	0x40010c00
 8000530:	10210000 	.word	0x10210000

08000534 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000534:	b480      	push	{r7}
 8000536:	b083      	sub	sp, #12
 8000538:	af00      	add	r7, sp, #0
 800053a:	4603      	mov	r3, r0
 800053c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == NRF24L01P_IRQ_PIN_NUMBER) {
 800053e:	88fb      	ldrh	r3, [r7, #6]
 8000540:	2b04      	cmp	r3, #4
 8000542:	d102      	bne.n	800054a <HAL_GPIO_EXTI_Callback+0x16>
		nrf24l01p_rx_flag=1;
 8000544:	4b03      	ldr	r3, [pc, #12]	; (8000554 <HAL_GPIO_EXTI_Callback+0x20>)
 8000546:	2201      	movs	r2, #1
 8000548:	701a      	strb	r2, [r3, #0]
	}

}
 800054a:	bf00      	nop
 800054c:	370c      	adds	r7, #12
 800054e:	46bd      	mov	sp, r7
 8000550:	bc80      	pop	{r7}
 8000552:	4770      	bx	lr
 8000554:	20000130 	.word	0x20000130

08000558 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800055c:	b672      	cpsid	i
}
 800055e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000560:	e7fe      	b.n	8000560 <Error_Handler+0x8>
	...

08000564 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000564:	b480      	push	{r7}
 8000566:	b085      	sub	sp, #20
 8000568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800056a:	4b15      	ldr	r3, [pc, #84]	; (80005c0 <HAL_MspInit+0x5c>)
 800056c:	699b      	ldr	r3, [r3, #24]
 800056e:	4a14      	ldr	r2, [pc, #80]	; (80005c0 <HAL_MspInit+0x5c>)
 8000570:	f043 0301 	orr.w	r3, r3, #1
 8000574:	6193      	str	r3, [r2, #24]
 8000576:	4b12      	ldr	r3, [pc, #72]	; (80005c0 <HAL_MspInit+0x5c>)
 8000578:	699b      	ldr	r3, [r3, #24]
 800057a:	f003 0301 	and.w	r3, r3, #1
 800057e:	60bb      	str	r3, [r7, #8]
 8000580:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000582:	4b0f      	ldr	r3, [pc, #60]	; (80005c0 <HAL_MspInit+0x5c>)
 8000584:	69db      	ldr	r3, [r3, #28]
 8000586:	4a0e      	ldr	r2, [pc, #56]	; (80005c0 <HAL_MspInit+0x5c>)
 8000588:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800058c:	61d3      	str	r3, [r2, #28]
 800058e:	4b0c      	ldr	r3, [pc, #48]	; (80005c0 <HAL_MspInit+0x5c>)
 8000590:	69db      	ldr	r3, [r3, #28]
 8000592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800059a:	4b0a      	ldr	r3, [pc, #40]	; (80005c4 <HAL_MspInit+0x60>)
 800059c:	685b      	ldr	r3, [r3, #4]
 800059e:	60fb      	str	r3, [r7, #12]
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005a6:	60fb      	str	r3, [r7, #12]
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005ae:	60fb      	str	r3, [r7, #12]
 80005b0:	4a04      	ldr	r2, [pc, #16]	; (80005c4 <HAL_MspInit+0x60>)
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005b6:	bf00      	nop
 80005b8:	3714      	adds	r7, #20
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bc80      	pop	{r7}
 80005be:	4770      	bx	lr
 80005c0:	40021000 	.word	0x40021000
 80005c4:	40010000 	.word	0x40010000

080005c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b08a      	sub	sp, #40	; 0x28
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d0:	f107 0318 	add.w	r3, r7, #24
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4a31      	ldr	r2, [pc, #196]	; (80006a8 <HAL_SPI_MspInit+0xe0>)
 80005e4:	4293      	cmp	r3, r2
 80005e6:	d130      	bne.n	800064a <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80005e8:	4b30      	ldr	r3, [pc, #192]	; (80006ac <HAL_SPI_MspInit+0xe4>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	4a2f      	ldr	r2, [pc, #188]	; (80006ac <HAL_SPI_MspInit+0xe4>)
 80005ee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005f2:	6193      	str	r3, [r2, #24]
 80005f4:	4b2d      	ldr	r3, [pc, #180]	; (80006ac <HAL_SPI_MspInit+0xe4>)
 80005f6:	699b      	ldr	r3, [r3, #24]
 80005f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80005fc:	617b      	str	r3, [r7, #20]
 80005fe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000600:	4b2a      	ldr	r3, [pc, #168]	; (80006ac <HAL_SPI_MspInit+0xe4>)
 8000602:	699b      	ldr	r3, [r3, #24]
 8000604:	4a29      	ldr	r2, [pc, #164]	; (80006ac <HAL_SPI_MspInit+0xe4>)
 8000606:	f043 0304 	orr.w	r3, r3, #4
 800060a:	6193      	str	r3, [r2, #24]
 800060c:	4b27      	ldr	r3, [pc, #156]	; (80006ac <HAL_SPI_MspInit+0xe4>)
 800060e:	699b      	ldr	r3, [r3, #24]
 8000610:	f003 0304 	and.w	r3, r3, #4
 8000614:	613b      	str	r3, [r7, #16]
 8000616:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000618:	23a0      	movs	r3, #160	; 0xa0
 800061a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800061c:	2302      	movs	r3, #2
 800061e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000620:	2303      	movs	r3, #3
 8000622:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000624:	f107 0318 	add.w	r3, r7, #24
 8000628:	4619      	mov	r1, r3
 800062a:	4821      	ldr	r0, [pc, #132]	; (80006b0 <HAL_SPI_MspInit+0xe8>)
 800062c:	f000 fbe4 	bl	8000df8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000630:	2340      	movs	r3, #64	; 0x40
 8000632:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000634:	2300      	movs	r3, #0
 8000636:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000638:	2300      	movs	r3, #0
 800063a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800063c:	f107 0318 	add.w	r3, r7, #24
 8000640:	4619      	mov	r1, r3
 8000642:	481b      	ldr	r0, [pc, #108]	; (80006b0 <HAL_SPI_MspInit+0xe8>)
 8000644:	f000 fbd8 	bl	8000df8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000648:	e029      	b.n	800069e <HAL_SPI_MspInit+0xd6>
  else if(hspi->Instance==SPI2)
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	4a19      	ldr	r2, [pc, #100]	; (80006b4 <HAL_SPI_MspInit+0xec>)
 8000650:	4293      	cmp	r3, r2
 8000652:	d124      	bne.n	800069e <HAL_SPI_MspInit+0xd6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000654:	4b15      	ldr	r3, [pc, #84]	; (80006ac <HAL_SPI_MspInit+0xe4>)
 8000656:	69db      	ldr	r3, [r3, #28]
 8000658:	4a14      	ldr	r2, [pc, #80]	; (80006ac <HAL_SPI_MspInit+0xe4>)
 800065a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800065e:	61d3      	str	r3, [r2, #28]
 8000660:	4b12      	ldr	r3, [pc, #72]	; (80006ac <HAL_SPI_MspInit+0xe4>)
 8000662:	69db      	ldr	r3, [r3, #28]
 8000664:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000668:	60fb      	str	r3, [r7, #12]
 800066a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800066c:	4b0f      	ldr	r3, [pc, #60]	; (80006ac <HAL_SPI_MspInit+0xe4>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	4a0e      	ldr	r2, [pc, #56]	; (80006ac <HAL_SPI_MspInit+0xe4>)
 8000672:	f043 0308 	orr.w	r3, r3, #8
 8000676:	6193      	str	r3, [r2, #24]
 8000678:	4b0c      	ldr	r3, [pc, #48]	; (80006ac <HAL_SPI_MspInit+0xe4>)
 800067a:	699b      	ldr	r3, [r3, #24]
 800067c:	f003 0308 	and.w	r3, r3, #8
 8000680:	60bb      	str	r3, [r7, #8]
 8000682:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000684:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000688:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800068a:	2302      	movs	r3, #2
 800068c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800068e:	2303      	movs	r3, #3
 8000690:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000692:	f107 0318 	add.w	r3, r7, #24
 8000696:	4619      	mov	r1, r3
 8000698:	4807      	ldr	r0, [pc, #28]	; (80006b8 <HAL_SPI_MspInit+0xf0>)
 800069a:	f000 fbad 	bl	8000df8 <HAL_GPIO_Init>
}
 800069e:	bf00      	nop
 80006a0:	3728      	adds	r7, #40	; 0x28
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40013000 	.word	0x40013000
 80006ac:	40021000 	.word	0x40021000
 80006b0:	40010800 	.word	0x40010800
 80006b4:	40003800 	.word	0x40003800
 80006b8:	40010c00 	.word	0x40010c00

080006bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b088      	sub	sp, #32
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c4:	f107 0310 	add.w	r3, r7, #16
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4a20      	ldr	r2, [pc, #128]	; (8000758 <HAL_UART_MspInit+0x9c>)
 80006d8:	4293      	cmp	r3, r2
 80006da:	d139      	bne.n	8000750 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006dc:	4b1f      	ldr	r3, [pc, #124]	; (800075c <HAL_UART_MspInit+0xa0>)
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	4a1e      	ldr	r2, [pc, #120]	; (800075c <HAL_UART_MspInit+0xa0>)
 80006e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006e6:	6193      	str	r3, [r2, #24]
 80006e8:	4b1c      	ldr	r3, [pc, #112]	; (800075c <HAL_UART_MspInit+0xa0>)
 80006ea:	699b      	ldr	r3, [r3, #24]
 80006ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006f0:	60fb      	str	r3, [r7, #12]
 80006f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f4:	4b19      	ldr	r3, [pc, #100]	; (800075c <HAL_UART_MspInit+0xa0>)
 80006f6:	699b      	ldr	r3, [r3, #24]
 80006f8:	4a18      	ldr	r2, [pc, #96]	; (800075c <HAL_UART_MspInit+0xa0>)
 80006fa:	f043 0304 	orr.w	r3, r3, #4
 80006fe:	6193      	str	r3, [r2, #24]
 8000700:	4b16      	ldr	r3, [pc, #88]	; (800075c <HAL_UART_MspInit+0xa0>)
 8000702:	699b      	ldr	r3, [r3, #24]
 8000704:	f003 0304 	and.w	r3, r3, #4
 8000708:	60bb      	str	r3, [r7, #8]
 800070a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800070c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000710:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000712:	2302      	movs	r3, #2
 8000714:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000716:	2303      	movs	r3, #3
 8000718:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800071a:	f107 0310 	add.w	r3, r7, #16
 800071e:	4619      	mov	r1, r3
 8000720:	480f      	ldr	r0, [pc, #60]	; (8000760 <HAL_UART_MspInit+0xa4>)
 8000722:	f000 fb69 	bl	8000df8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000726:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800072a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800072c:	2300      	movs	r3, #0
 800072e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000730:	2300      	movs	r3, #0
 8000732:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000734:	f107 0310 	add.w	r3, r7, #16
 8000738:	4619      	mov	r1, r3
 800073a:	4809      	ldr	r0, [pc, #36]	; (8000760 <HAL_UART_MspInit+0xa4>)
 800073c:	f000 fb5c 	bl	8000df8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000740:	2200      	movs	r2, #0
 8000742:	2100      	movs	r1, #0
 8000744:	2025      	movs	r0, #37	; 0x25
 8000746:	f000 fa6e 	bl	8000c26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800074a:	2025      	movs	r0, #37	; 0x25
 800074c:	f000 fa87 	bl	8000c5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000750:	bf00      	nop
 8000752:	3720      	adds	r7, #32
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	40013800 	.word	0x40013800
 800075c:	40021000 	.word	0x40021000
 8000760:	40010800 	.word	0x40010800

08000764 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000768:	e7fe      	b.n	8000768 <NMI_Handler+0x4>

0800076a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800076a:	b480      	push	{r7}
 800076c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800076e:	e7fe      	b.n	800076e <HardFault_Handler+0x4>

08000770 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000774:	e7fe      	b.n	8000774 <MemManage_Handler+0x4>

08000776 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000776:	b480      	push	{r7}
 8000778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800077a:	e7fe      	b.n	800077a <BusFault_Handler+0x4>

0800077c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000780:	e7fe      	b.n	8000780 <UsageFault_Handler+0x4>

08000782 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000782:	b480      	push	{r7}
 8000784:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	bc80      	pop	{r7}
 800078c:	4770      	bx	lr

0800078e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800078e:	b480      	push	{r7}
 8000790:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000792:	bf00      	nop
 8000794:	46bd      	mov	sp, r7
 8000796:	bc80      	pop	{r7}
 8000798:	4770      	bx	lr

0800079a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800079a:	b480      	push	{r7}
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800079e:	bf00      	nop
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bc80      	pop	{r7}
 80007a4:	4770      	bx	lr

080007a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007a6:	b580      	push	{r7, lr}
 80007a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007aa:	f000 f925 	bl	80009f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80007b2:	b580      	push	{r7, lr}
 80007b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRQ_Pin);
 80007b6:	2004      	movs	r0, #4
 80007b8:	f000 fcba 	bl	8001130 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}

080007c0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr(&huart1);
 80007c4:	4803      	ldr	r0, [pc, #12]	; (80007d4 <USART1_IRQHandler+0x14>)
 80007c6:	f000 f883 	bl	80008d0 <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80007ca:	4802      	ldr	r0, [pc, #8]	; (80007d4 <USART1_IRQHandler+0x14>)
 80007cc:	f001 ff34 	bl	8002638 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80007d0:	bf00      	nop
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	200000e8 	.word	0x200000e8

080007d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007dc:	bf00      	nop
 80007de:	46bd      	mov	sp, r7
 80007e0:	bc80      	pop	{r7}
 80007e2:	4770      	bx	lr

080007e4 <rxBufferInit>:
#include "uart.h"

ring_buffer_t uart_rx={{0},0,0};
extern UART_HandleTypeDef huart1;

void rxBufferInit(ring_buffer_t *uart) {
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
	uart->head = 0;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	2200      	movs	r2, #0
 80007f0:	841a      	strh	r2, [r3, #32]
	uart->tail = 0;
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	2200      	movs	r2, #0
 80007f6:	845a      	strh	r2, [r3, #34]	; 0x22
	memset(uart->buffer, 0, sizeof(RX_BUFFER_SIZE));
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	2204      	movs	r2, #4
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f002 ff93 	bl	800372a <memset>
}
 8000804:	bf00      	nop
 8000806:	3708      	adds	r7, #8
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}

0800080c <push>:

void push(ring_buffer_t *uart, uint8_t ch) {
 800080c:	b480      	push	{r7}
 800080e:	b085      	sub	sp, #20
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
 8000814:	460b      	mov	r3, r1
 8000816:	70fb      	strb	r3, [r7, #3]
	uint16_t i = (unsigned int) (uart->head + 1) % RX_BUFFER_SIZE;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	8c1b      	ldrh	r3, [r3, #32]
 800081c:	b29b      	uxth	r3, r3
 800081e:	3301      	adds	r3, #1
 8000820:	b29b      	uxth	r3, r3
 8000822:	f003 031f 	and.w	r3, r3, #31
 8000826:	81fb      	strh	r3, [r7, #14]
	if (i != uart->tail) {
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800082c:	b29b      	uxth	r3, r3
 800082e:	89fa      	ldrh	r2, [r7, #14]
 8000830:	429a      	cmp	r2, r3
 8000832:	d009      	beq.n	8000848 <push+0x3c>
		uart->buffer[uart->head] = ch;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	8c1b      	ldrh	r3, [r3, #32]
 8000838:	b29b      	uxth	r3, r3
 800083a:	4619      	mov	r1, r3
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	78fa      	ldrb	r2, [r7, #3]
 8000840:	545a      	strb	r2, [r3, r1]
		uart->head = i;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	89fa      	ldrh	r2, [r7, #14]
 8000846:	841a      	strh	r2, [r3, #32]
	}
}
 8000848:	bf00      	nop
 800084a:	3714      	adds	r7, #20
 800084c:	46bd      	mov	sp, r7
 800084e:	bc80      	pop	{r7}
 8000850:	4770      	bx	lr

08000852 <pop>:

uint8_t pop(ring_buffer_t *uart) {
 8000852:	b480      	push	{r7}
 8000854:	b085      	sub	sp, #20
 8000856:	af00      	add	r7, sp, #0
 8000858:	6078      	str	r0, [r7, #4]

	if (uart->head == uart->tail) {
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	8c1b      	ldrh	r3, [r3, #32]
 800085e:	b29a      	uxth	r2, r3
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8000864:	b29b      	uxth	r3, r3
 8000866:	429a      	cmp	r2, r3
 8000868:	d101      	bne.n	800086e <pop+0x1c>
		return -1;
 800086a:	23ff      	movs	r3, #255	; 0xff
 800086c:	e011      	b.n	8000892 <pop+0x40>
	} else {

		unsigned char cpop = uart->buffer[uart->tail];
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8000872:	b29b      	uxth	r3, r3
 8000874:	461a      	mov	r2, r3
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	5c9b      	ldrb	r3, [r3, r2]
 800087a:	73fb      	strb	r3, [r7, #15]
		uart->tail = (uint16_t) (uart->tail + 1) % RX_BUFFER_SIZE;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8000880:	b29b      	uxth	r3, r3
 8000882:	3301      	adds	r3, #1
 8000884:	b29b      	uxth	r3, r3
 8000886:	f003 031f 	and.w	r3, r3, #31
 800088a:	b29a      	uxth	r2, r3
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	845a      	strh	r2, [r3, #34]	; 0x22

		return cpop;
 8000890:	7bfb      	ldrb	r3, [r7, #15]

	}
}
 8000892:	4618      	mov	r0, r3
 8000894:	3714      	adds	r7, #20
 8000896:	46bd      	mov	sp, r7
 8000898:	bc80      	pop	{r7}
 800089a:	4770      	bx	lr

0800089c <uart_available>:

int8_t uart_available(ring_buffer_t *uart) {
 800089c:	b480      	push	{r7}
 800089e:	b085      	sub	sp, #20
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]

	uint8_t n = (unsigned int) (RX_BUFFER_SIZE + (uart->head) - (uart->tail))
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	8c1b      	ldrh	r3, [r3, #32]
 80008a8:	b29b      	uxth	r3, r3
 80008aa:	b2da      	uxtb	r2, r3
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80008b0:	b29b      	uxth	r3, r3
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	1ad3      	subs	r3, r2, r3
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	3320      	adds	r3, #32
 80008ba:	b2db      	uxtb	r3, r3
 80008bc:	f003 031f 	and.w	r3, r3, #31
 80008c0:	73fb      	strb	r3, [r7, #15]
			% RX_BUFFER_SIZE;
	return n;
 80008c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3714      	adds	r7, #20
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bc80      	pop	{r7}
 80008ce:	4770      	bx	lr

080008d0 <Uart_isr>:

void Uart_isr(UART_HandleTypeDef *huart) {
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
	uint32_t isrflags = READ_REG(huart->Instance->SR);
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	617b      	str	r3, [r7, #20]
	uint32_t cr1its = READ_REG(huart->Instance->CR1);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	68db      	ldr	r3, [r3, #12]
 80008e6:	613b      	str	r3, [r7, #16]

	/* if DR is not empty and the Rx Int is enabled */
	if (((isrflags & USART_SR_RXNE) != RESET)
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	f003 0320 	and.w	r3, r3, #32
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d011      	beq.n	8000916 <Uart_isr+0x46>
			&& ((cr1its & USART_CR1_RXNEIE) != RESET)) {
 80008f2:	693b      	ldr	r3, [r7, #16]
 80008f4:	f003 0320 	and.w	r3, r3, #32
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d00c      	beq.n	8000916 <Uart_isr+0x46>
		 * @note   RXNE flag can be also cleared by a read to the USART_DR register.
		 * @note   TC flag can be also cleared by software sequence: a read operation to
		 *          USART_SR register followed by a write operation to USART_DR register.
		 * @note   TXE flag is cleared only by a write to the USART_DR register.
		 *********************/
		huart->Instance->SR; /* Read status register */
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	681b      	ldr	r3, [r3, #0]
		unsigned char c = huart->Instance->DR; /* Read data register */
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	685b      	ldr	r3, [r3, #4]
 8000908:	73fb      	strb	r3, [r7, #15]
		push(&uart_rx, c);  // store data in buffer
 800090a:	7bfb      	ldrb	r3, [r7, #15]
 800090c:	4619      	mov	r1, r3
 800090e:	4803      	ldr	r0, [pc, #12]	; (800091c <Uart_isr+0x4c>)
 8000910:	f7ff ff7c 	bl	800080c <push>
		return;
 8000914:	bf00      	nop
	}
}
 8000916:	3718      	adds	r7, #24
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	20000174 	.word	0x20000174

08000920 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000920:	f7ff ff5a 	bl	80007d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000924:	480b      	ldr	r0, [pc, #44]	; (8000954 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000926:	490c      	ldr	r1, [pc, #48]	; (8000958 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000928:	4a0c      	ldr	r2, [pc, #48]	; (800095c <LoopFillZerobss+0x16>)
  movs r3, #0
 800092a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800092c:	e002      	b.n	8000934 <LoopCopyDataInit>

0800092e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800092e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000930:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000932:	3304      	adds	r3, #4

08000934 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000934:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000936:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000938:	d3f9      	bcc.n	800092e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800093a:	4a09      	ldr	r2, [pc, #36]	; (8000960 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800093c:	4c09      	ldr	r4, [pc, #36]	; (8000964 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800093e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000940:	e001      	b.n	8000946 <LoopFillZerobss>

08000942 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000942:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000944:	3204      	adds	r2, #4

08000946 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000946:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000948:	d3fb      	bcc.n	8000942 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800094a:	f002 fef7 	bl	800373c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800094e:	f7ff fbfd 	bl	800014c <main>
  bx lr
 8000952:	4770      	bx	lr
  ldr r0, =_sdata
 8000954:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000958:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 800095c:	080037d0 	.word	0x080037d0
  ldr r2, =_sbss
 8000960:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000964:	2000019c 	.word	0x2000019c

08000968 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000968:	e7fe      	b.n	8000968 <ADC1_2_IRQHandler>
	...

0800096c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000970:	4b08      	ldr	r3, [pc, #32]	; (8000994 <HAL_Init+0x28>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a07      	ldr	r2, [pc, #28]	; (8000994 <HAL_Init+0x28>)
 8000976:	f043 0310 	orr.w	r3, r3, #16
 800097a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800097c:	2003      	movs	r0, #3
 800097e:	f000 f947 	bl	8000c10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000982:	200f      	movs	r0, #15
 8000984:	f000 f808 	bl	8000998 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000988:	f7ff fdec 	bl	8000564 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800098c:	2300      	movs	r3, #0
}
 800098e:	4618      	mov	r0, r3
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40022000 	.word	0x40022000

08000998 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009a0:	4b12      	ldr	r3, [pc, #72]	; (80009ec <HAL_InitTick+0x54>)
 80009a2:	681a      	ldr	r2, [r3, #0]
 80009a4:	4b12      	ldr	r3, [pc, #72]	; (80009f0 <HAL_InitTick+0x58>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	4619      	mov	r1, r3
 80009aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80009b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009b6:	4618      	mov	r0, r3
 80009b8:	f000 f95f 	bl	8000c7a <HAL_SYSTICK_Config>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009c2:	2301      	movs	r3, #1
 80009c4:	e00e      	b.n	80009e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	2b0f      	cmp	r3, #15
 80009ca:	d80a      	bhi.n	80009e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009cc:	2200      	movs	r2, #0
 80009ce:	6879      	ldr	r1, [r7, #4]
 80009d0:	f04f 30ff 	mov.w	r0, #4294967295
 80009d4:	f000 f927 	bl	8000c26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009d8:	4a06      	ldr	r2, [pc, #24]	; (80009f4 <HAL_InitTick+0x5c>)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009de:	2300      	movs	r3, #0
 80009e0:	e000      	b.n	80009e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009e2:	2301      	movs	r3, #1
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	3708      	adds	r7, #8
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	20000010 	.word	0x20000010
 80009f0:	20000018 	.word	0x20000018
 80009f4:	20000014 	.word	0x20000014

080009f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009fc:	4b05      	ldr	r3, [pc, #20]	; (8000a14 <HAL_IncTick+0x1c>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	461a      	mov	r2, r3
 8000a02:	4b05      	ldr	r3, [pc, #20]	; (8000a18 <HAL_IncTick+0x20>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4413      	add	r3, r2
 8000a08:	4a03      	ldr	r2, [pc, #12]	; (8000a18 <HAL_IncTick+0x20>)
 8000a0a:	6013      	str	r3, [r2, #0]
}
 8000a0c:	bf00      	nop
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bc80      	pop	{r7}
 8000a12:	4770      	bx	lr
 8000a14:	20000018 	.word	0x20000018
 8000a18:	20000198 	.word	0x20000198

08000a1c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a20:	4b02      	ldr	r3, [pc, #8]	; (8000a2c <HAL_GetTick+0x10>)
 8000a22:	681b      	ldr	r3, [r3, #0]
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bc80      	pop	{r7}
 8000a2a:	4770      	bx	lr
 8000a2c:	20000198 	.word	0x20000198

08000a30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a38:	f7ff fff0 	bl	8000a1c <HAL_GetTick>
 8000a3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a48:	d005      	beq.n	8000a56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a4a:	4b0a      	ldr	r3, [pc, #40]	; (8000a74 <HAL_Delay+0x44>)
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	461a      	mov	r2, r3
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	4413      	add	r3, r2
 8000a54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a56:	bf00      	nop
 8000a58:	f7ff ffe0 	bl	8000a1c <HAL_GetTick>
 8000a5c:	4602      	mov	r2, r0
 8000a5e:	68bb      	ldr	r3, [r7, #8]
 8000a60:	1ad3      	subs	r3, r2, r3
 8000a62:	68fa      	ldr	r2, [r7, #12]
 8000a64:	429a      	cmp	r2, r3
 8000a66:	d8f7      	bhi.n	8000a58 <HAL_Delay+0x28>
  {
  }
}
 8000a68:	bf00      	nop
 8000a6a:	bf00      	nop
 8000a6c:	3710      	adds	r7, #16
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20000018 	.word	0x20000018

08000a78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b085      	sub	sp, #20
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	f003 0307 	and.w	r3, r3, #7
 8000a86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a88:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <__NVIC_SetPriorityGrouping+0x44>)
 8000a8a:	68db      	ldr	r3, [r3, #12]
 8000a8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a8e:	68ba      	ldr	r2, [r7, #8]
 8000a90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a94:	4013      	ands	r3, r2
 8000a96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aa0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000aa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aaa:	4a04      	ldr	r2, [pc, #16]	; (8000abc <__NVIC_SetPriorityGrouping+0x44>)
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	60d3      	str	r3, [r2, #12]
}
 8000ab0:	bf00      	nop
 8000ab2:	3714      	adds	r7, #20
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bc80      	pop	{r7}
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	e000ed00 	.word	0xe000ed00

08000ac0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ac4:	4b04      	ldr	r3, [pc, #16]	; (8000ad8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ac6:	68db      	ldr	r3, [r3, #12]
 8000ac8:	0a1b      	lsrs	r3, r3, #8
 8000aca:	f003 0307 	and.w	r3, r3, #7
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bc80      	pop	{r7}
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	e000ed00 	.word	0xe000ed00

08000adc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	db0b      	blt.n	8000b06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aee:	79fb      	ldrb	r3, [r7, #7]
 8000af0:	f003 021f 	and.w	r2, r3, #31
 8000af4:	4906      	ldr	r1, [pc, #24]	; (8000b10 <__NVIC_EnableIRQ+0x34>)
 8000af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afa:	095b      	lsrs	r3, r3, #5
 8000afc:	2001      	movs	r0, #1
 8000afe:	fa00 f202 	lsl.w	r2, r0, r2
 8000b02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b06:	bf00      	nop
 8000b08:	370c      	adds	r7, #12
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bc80      	pop	{r7}
 8000b0e:	4770      	bx	lr
 8000b10:	e000e100 	.word	0xe000e100

08000b14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	6039      	str	r1, [r7, #0]
 8000b1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	db0a      	blt.n	8000b3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	b2da      	uxtb	r2, r3
 8000b2c:	490c      	ldr	r1, [pc, #48]	; (8000b60 <__NVIC_SetPriority+0x4c>)
 8000b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b32:	0112      	lsls	r2, r2, #4
 8000b34:	b2d2      	uxtb	r2, r2
 8000b36:	440b      	add	r3, r1
 8000b38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b3c:	e00a      	b.n	8000b54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	b2da      	uxtb	r2, r3
 8000b42:	4908      	ldr	r1, [pc, #32]	; (8000b64 <__NVIC_SetPriority+0x50>)
 8000b44:	79fb      	ldrb	r3, [r7, #7]
 8000b46:	f003 030f 	and.w	r3, r3, #15
 8000b4a:	3b04      	subs	r3, #4
 8000b4c:	0112      	lsls	r2, r2, #4
 8000b4e:	b2d2      	uxtb	r2, r2
 8000b50:	440b      	add	r3, r1
 8000b52:	761a      	strb	r2, [r3, #24]
}
 8000b54:	bf00      	nop
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bc80      	pop	{r7}
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	e000e100 	.word	0xe000e100
 8000b64:	e000ed00 	.word	0xe000ed00

08000b68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b089      	sub	sp, #36	; 0x24
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	60f8      	str	r0, [r7, #12]
 8000b70:	60b9      	str	r1, [r7, #8]
 8000b72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	f003 0307 	and.w	r3, r3, #7
 8000b7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b7c:	69fb      	ldr	r3, [r7, #28]
 8000b7e:	f1c3 0307 	rsb	r3, r3, #7
 8000b82:	2b04      	cmp	r3, #4
 8000b84:	bf28      	it	cs
 8000b86:	2304      	movcs	r3, #4
 8000b88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b8a:	69fb      	ldr	r3, [r7, #28]
 8000b8c:	3304      	adds	r3, #4
 8000b8e:	2b06      	cmp	r3, #6
 8000b90:	d902      	bls.n	8000b98 <NVIC_EncodePriority+0x30>
 8000b92:	69fb      	ldr	r3, [r7, #28]
 8000b94:	3b03      	subs	r3, #3
 8000b96:	e000      	b.n	8000b9a <NVIC_EncodePriority+0x32>
 8000b98:	2300      	movs	r3, #0
 8000b9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000ba0:	69bb      	ldr	r3, [r7, #24]
 8000ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba6:	43da      	mvns	r2, r3
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	401a      	ands	r2, r3
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bb0:	f04f 31ff 	mov.w	r1, #4294967295
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bba:	43d9      	mvns	r1, r3
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc0:	4313      	orrs	r3, r2
         );
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3724      	adds	r7, #36	; 0x24
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bc80      	pop	{r7}
 8000bca:	4770      	bx	lr

08000bcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	3b01      	subs	r3, #1
 8000bd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bdc:	d301      	bcc.n	8000be2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bde:	2301      	movs	r3, #1
 8000be0:	e00f      	b.n	8000c02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000be2:	4a0a      	ldr	r2, [pc, #40]	; (8000c0c <SysTick_Config+0x40>)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	3b01      	subs	r3, #1
 8000be8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bea:	210f      	movs	r1, #15
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	f7ff ff90 	bl	8000b14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bf4:	4b05      	ldr	r3, [pc, #20]	; (8000c0c <SysTick_Config+0x40>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bfa:	4b04      	ldr	r3, [pc, #16]	; (8000c0c <SysTick_Config+0x40>)
 8000bfc:	2207      	movs	r2, #7
 8000bfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c00:	2300      	movs	r3, #0
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	e000e010 	.word	0xe000e010

08000c10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c18:	6878      	ldr	r0, [r7, #4]
 8000c1a:	f7ff ff2d 	bl	8000a78 <__NVIC_SetPriorityGrouping>
}
 8000c1e:	bf00      	nop
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b086      	sub	sp, #24
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	60b9      	str	r1, [r7, #8]
 8000c30:	607a      	str	r2, [r7, #4]
 8000c32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c34:	2300      	movs	r3, #0
 8000c36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c38:	f7ff ff42 	bl	8000ac0 <__NVIC_GetPriorityGrouping>
 8000c3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c3e:	687a      	ldr	r2, [r7, #4]
 8000c40:	68b9      	ldr	r1, [r7, #8]
 8000c42:	6978      	ldr	r0, [r7, #20]
 8000c44:	f7ff ff90 	bl	8000b68 <NVIC_EncodePriority>
 8000c48:	4602      	mov	r2, r0
 8000c4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c4e:	4611      	mov	r1, r2
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff ff5f 	bl	8000b14 <__NVIC_SetPriority>
}
 8000c56:	bf00      	nop
 8000c58:	3718      	adds	r7, #24
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}

08000c5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	b082      	sub	sp, #8
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	4603      	mov	r3, r0
 8000c66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff ff35 	bl	8000adc <__NVIC_EnableIRQ>
}
 8000c72:	bf00      	nop
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	b082      	sub	sp, #8
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c82:	6878      	ldr	r0, [r7, #4]
 8000c84:	f7ff ffa2 	bl	8000bcc <SysTick_Config>
 8000c88:	4603      	mov	r3, r0
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000c92:	b480      	push	{r7}
 8000c94:	b085      	sub	sp, #20
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	2b02      	cmp	r3, #2
 8000ca8:	d008      	beq.n	8000cbc <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2204      	movs	r2, #4
 8000cae:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	e020      	b.n	8000cfe <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f022 020e 	bic.w	r2, r2, #14
 8000cca:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f022 0201 	bic.w	r2, r2, #1
 8000cda:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	fa01 f202 	lsl.w	r2, r1, r2
 8000cea:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2201      	movs	r2, #1
 8000cf0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3714      	adds	r7, #20
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bc80      	pop	{r7}
 8000d06:	4770      	bx	lr

08000d08 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d10:	2300      	movs	r3, #0
 8000d12:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	2b02      	cmp	r3, #2
 8000d1e:	d005      	beq.n	8000d2c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2204      	movs	r2, #4
 8000d24:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
 8000d28:	73fb      	strb	r3, [r7, #15]
 8000d2a:	e051      	b.n	8000dd0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f022 020e 	bic.w	r2, r2, #14
 8000d3a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f022 0201 	bic.w	r2, r2, #1
 8000d4a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a22      	ldr	r2, [pc, #136]	; (8000ddc <HAL_DMA_Abort_IT+0xd4>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d029      	beq.n	8000daa <HAL_DMA_Abort_IT+0xa2>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a21      	ldr	r2, [pc, #132]	; (8000de0 <HAL_DMA_Abort_IT+0xd8>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d022      	beq.n	8000da6 <HAL_DMA_Abort_IT+0x9e>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a1f      	ldr	r2, [pc, #124]	; (8000de4 <HAL_DMA_Abort_IT+0xdc>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d01a      	beq.n	8000da0 <HAL_DMA_Abort_IT+0x98>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a1e      	ldr	r2, [pc, #120]	; (8000de8 <HAL_DMA_Abort_IT+0xe0>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d012      	beq.n	8000d9a <HAL_DMA_Abort_IT+0x92>
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a1c      	ldr	r2, [pc, #112]	; (8000dec <HAL_DMA_Abort_IT+0xe4>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d00a      	beq.n	8000d94 <HAL_DMA_Abort_IT+0x8c>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a1b      	ldr	r2, [pc, #108]	; (8000df0 <HAL_DMA_Abort_IT+0xe8>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d102      	bne.n	8000d8e <HAL_DMA_Abort_IT+0x86>
 8000d88:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000d8c:	e00e      	b.n	8000dac <HAL_DMA_Abort_IT+0xa4>
 8000d8e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d92:	e00b      	b.n	8000dac <HAL_DMA_Abort_IT+0xa4>
 8000d94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d98:	e008      	b.n	8000dac <HAL_DMA_Abort_IT+0xa4>
 8000d9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d9e:	e005      	b.n	8000dac <HAL_DMA_Abort_IT+0xa4>
 8000da0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000da4:	e002      	b.n	8000dac <HAL_DMA_Abort_IT+0xa4>
 8000da6:	2310      	movs	r3, #16
 8000da8:	e000      	b.n	8000dac <HAL_DMA_Abort_IT+0xa4>
 8000daa:	2301      	movs	r3, #1
 8000dac:	4a11      	ldr	r2, [pc, #68]	; (8000df4 <HAL_DMA_Abort_IT+0xec>)
 8000dae:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2201      	movs	r2, #1
 8000db4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2200      	movs	r2, #0
 8000dbc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d003      	beq.n	8000dd0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	4798      	blx	r3
    } 
  }
  return status;
 8000dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3710      	adds	r7, #16
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40020008 	.word	0x40020008
 8000de0:	4002001c 	.word	0x4002001c
 8000de4:	40020030 	.word	0x40020030
 8000de8:	40020044 	.word	0x40020044
 8000dec:	40020058 	.word	0x40020058
 8000df0:	4002006c 	.word	0x4002006c
 8000df4:	40020000 	.word	0x40020000

08000df8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b08b      	sub	sp, #44	; 0x2c
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e02:	2300      	movs	r3, #0
 8000e04:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e06:	2300      	movs	r3, #0
 8000e08:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e0a:	e169      	b.n	80010e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	69fa      	ldr	r2, [r7, #28]
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	f040 8158 	bne.w	80010da <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	4a9a      	ldr	r2, [pc, #616]	; (8001098 <HAL_GPIO_Init+0x2a0>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d05e      	beq.n	8000ef2 <HAL_GPIO_Init+0xfa>
 8000e34:	4a98      	ldr	r2, [pc, #608]	; (8001098 <HAL_GPIO_Init+0x2a0>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d875      	bhi.n	8000f26 <HAL_GPIO_Init+0x12e>
 8000e3a:	4a98      	ldr	r2, [pc, #608]	; (800109c <HAL_GPIO_Init+0x2a4>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d058      	beq.n	8000ef2 <HAL_GPIO_Init+0xfa>
 8000e40:	4a96      	ldr	r2, [pc, #600]	; (800109c <HAL_GPIO_Init+0x2a4>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d86f      	bhi.n	8000f26 <HAL_GPIO_Init+0x12e>
 8000e46:	4a96      	ldr	r2, [pc, #600]	; (80010a0 <HAL_GPIO_Init+0x2a8>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d052      	beq.n	8000ef2 <HAL_GPIO_Init+0xfa>
 8000e4c:	4a94      	ldr	r2, [pc, #592]	; (80010a0 <HAL_GPIO_Init+0x2a8>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d869      	bhi.n	8000f26 <HAL_GPIO_Init+0x12e>
 8000e52:	4a94      	ldr	r2, [pc, #592]	; (80010a4 <HAL_GPIO_Init+0x2ac>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d04c      	beq.n	8000ef2 <HAL_GPIO_Init+0xfa>
 8000e58:	4a92      	ldr	r2, [pc, #584]	; (80010a4 <HAL_GPIO_Init+0x2ac>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d863      	bhi.n	8000f26 <HAL_GPIO_Init+0x12e>
 8000e5e:	4a92      	ldr	r2, [pc, #584]	; (80010a8 <HAL_GPIO_Init+0x2b0>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d046      	beq.n	8000ef2 <HAL_GPIO_Init+0xfa>
 8000e64:	4a90      	ldr	r2, [pc, #576]	; (80010a8 <HAL_GPIO_Init+0x2b0>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d85d      	bhi.n	8000f26 <HAL_GPIO_Init+0x12e>
 8000e6a:	2b12      	cmp	r3, #18
 8000e6c:	d82a      	bhi.n	8000ec4 <HAL_GPIO_Init+0xcc>
 8000e6e:	2b12      	cmp	r3, #18
 8000e70:	d859      	bhi.n	8000f26 <HAL_GPIO_Init+0x12e>
 8000e72:	a201      	add	r2, pc, #4	; (adr r2, 8000e78 <HAL_GPIO_Init+0x80>)
 8000e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e78:	08000ef3 	.word	0x08000ef3
 8000e7c:	08000ecd 	.word	0x08000ecd
 8000e80:	08000edf 	.word	0x08000edf
 8000e84:	08000f21 	.word	0x08000f21
 8000e88:	08000f27 	.word	0x08000f27
 8000e8c:	08000f27 	.word	0x08000f27
 8000e90:	08000f27 	.word	0x08000f27
 8000e94:	08000f27 	.word	0x08000f27
 8000e98:	08000f27 	.word	0x08000f27
 8000e9c:	08000f27 	.word	0x08000f27
 8000ea0:	08000f27 	.word	0x08000f27
 8000ea4:	08000f27 	.word	0x08000f27
 8000ea8:	08000f27 	.word	0x08000f27
 8000eac:	08000f27 	.word	0x08000f27
 8000eb0:	08000f27 	.word	0x08000f27
 8000eb4:	08000f27 	.word	0x08000f27
 8000eb8:	08000f27 	.word	0x08000f27
 8000ebc:	08000ed5 	.word	0x08000ed5
 8000ec0:	08000ee9 	.word	0x08000ee9
 8000ec4:	4a79      	ldr	r2, [pc, #484]	; (80010ac <HAL_GPIO_Init+0x2b4>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d013      	beq.n	8000ef2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000eca:	e02c      	b.n	8000f26 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	623b      	str	r3, [r7, #32]
          break;
 8000ed2:	e029      	b.n	8000f28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	3304      	adds	r3, #4
 8000eda:	623b      	str	r3, [r7, #32]
          break;
 8000edc:	e024      	b.n	8000f28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	68db      	ldr	r3, [r3, #12]
 8000ee2:	3308      	adds	r3, #8
 8000ee4:	623b      	str	r3, [r7, #32]
          break;
 8000ee6:	e01f      	b.n	8000f28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	330c      	adds	r3, #12
 8000eee:	623b      	str	r3, [r7, #32]
          break;
 8000ef0:	e01a      	b.n	8000f28 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d102      	bne.n	8000f00 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000efa:	2304      	movs	r3, #4
 8000efc:	623b      	str	r3, [r7, #32]
          break;
 8000efe:	e013      	b.n	8000f28 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	689b      	ldr	r3, [r3, #8]
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d105      	bne.n	8000f14 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f08:	2308      	movs	r3, #8
 8000f0a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	69fa      	ldr	r2, [r7, #28]
 8000f10:	611a      	str	r2, [r3, #16]
          break;
 8000f12:	e009      	b.n	8000f28 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f14:	2308      	movs	r3, #8
 8000f16:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	69fa      	ldr	r2, [r7, #28]
 8000f1c:	615a      	str	r2, [r3, #20]
          break;
 8000f1e:	e003      	b.n	8000f28 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f20:	2300      	movs	r3, #0
 8000f22:	623b      	str	r3, [r7, #32]
          break;
 8000f24:	e000      	b.n	8000f28 <HAL_GPIO_Init+0x130>
          break;
 8000f26:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f28:	69bb      	ldr	r3, [r7, #24]
 8000f2a:	2bff      	cmp	r3, #255	; 0xff
 8000f2c:	d801      	bhi.n	8000f32 <HAL_GPIO_Init+0x13a>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	e001      	b.n	8000f36 <HAL_GPIO_Init+0x13e>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	3304      	adds	r3, #4
 8000f36:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f38:	69bb      	ldr	r3, [r7, #24]
 8000f3a:	2bff      	cmp	r3, #255	; 0xff
 8000f3c:	d802      	bhi.n	8000f44 <HAL_GPIO_Init+0x14c>
 8000f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	e002      	b.n	8000f4a <HAL_GPIO_Init+0x152>
 8000f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f46:	3b08      	subs	r3, #8
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	210f      	movs	r1, #15
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	fa01 f303 	lsl.w	r3, r1, r3
 8000f58:	43db      	mvns	r3, r3
 8000f5a:	401a      	ands	r2, r3
 8000f5c:	6a39      	ldr	r1, [r7, #32]
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	fa01 f303 	lsl.w	r3, r1, r3
 8000f64:	431a      	orrs	r2, r3
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	f000 80b1 	beq.w	80010da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f78:	4b4d      	ldr	r3, [pc, #308]	; (80010b0 <HAL_GPIO_Init+0x2b8>)
 8000f7a:	699b      	ldr	r3, [r3, #24]
 8000f7c:	4a4c      	ldr	r2, [pc, #304]	; (80010b0 <HAL_GPIO_Init+0x2b8>)
 8000f7e:	f043 0301 	orr.w	r3, r3, #1
 8000f82:	6193      	str	r3, [r2, #24]
 8000f84:	4b4a      	ldr	r3, [pc, #296]	; (80010b0 <HAL_GPIO_Init+0x2b8>)
 8000f86:	699b      	ldr	r3, [r3, #24]
 8000f88:	f003 0301 	and.w	r3, r3, #1
 8000f8c:	60bb      	str	r3, [r7, #8]
 8000f8e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f90:	4a48      	ldr	r2, [pc, #288]	; (80010b4 <HAL_GPIO_Init+0x2bc>)
 8000f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f94:	089b      	lsrs	r3, r3, #2
 8000f96:	3302      	adds	r3, #2
 8000f98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f9c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa0:	f003 0303 	and.w	r3, r3, #3
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	220f      	movs	r2, #15
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	43db      	mvns	r3, r3
 8000fae:	68fa      	ldr	r2, [r7, #12]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	4a40      	ldr	r2, [pc, #256]	; (80010b8 <HAL_GPIO_Init+0x2c0>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d013      	beq.n	8000fe4 <HAL_GPIO_Init+0x1ec>
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	4a3f      	ldr	r2, [pc, #252]	; (80010bc <HAL_GPIO_Init+0x2c4>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d00d      	beq.n	8000fe0 <HAL_GPIO_Init+0x1e8>
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	4a3e      	ldr	r2, [pc, #248]	; (80010c0 <HAL_GPIO_Init+0x2c8>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d007      	beq.n	8000fdc <HAL_GPIO_Init+0x1e4>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	4a3d      	ldr	r2, [pc, #244]	; (80010c4 <HAL_GPIO_Init+0x2cc>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d101      	bne.n	8000fd8 <HAL_GPIO_Init+0x1e0>
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	e006      	b.n	8000fe6 <HAL_GPIO_Init+0x1ee>
 8000fd8:	2304      	movs	r3, #4
 8000fda:	e004      	b.n	8000fe6 <HAL_GPIO_Init+0x1ee>
 8000fdc:	2302      	movs	r3, #2
 8000fde:	e002      	b.n	8000fe6 <HAL_GPIO_Init+0x1ee>
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	e000      	b.n	8000fe6 <HAL_GPIO_Init+0x1ee>
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fe8:	f002 0203 	and.w	r2, r2, #3
 8000fec:	0092      	lsls	r2, r2, #2
 8000fee:	4093      	lsls	r3, r2
 8000ff0:	68fa      	ldr	r2, [r7, #12]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ff6:	492f      	ldr	r1, [pc, #188]	; (80010b4 <HAL_GPIO_Init+0x2bc>)
 8000ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ffa:	089b      	lsrs	r3, r3, #2
 8000ffc:	3302      	adds	r3, #2
 8000ffe:	68fa      	ldr	r2, [r7, #12]
 8001000:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800100c:	2b00      	cmp	r3, #0
 800100e:	d006      	beq.n	800101e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001010:	4b2d      	ldr	r3, [pc, #180]	; (80010c8 <HAL_GPIO_Init+0x2d0>)
 8001012:	689a      	ldr	r2, [r3, #8]
 8001014:	492c      	ldr	r1, [pc, #176]	; (80010c8 <HAL_GPIO_Init+0x2d0>)
 8001016:	69bb      	ldr	r3, [r7, #24]
 8001018:	4313      	orrs	r3, r2
 800101a:	608b      	str	r3, [r1, #8]
 800101c:	e006      	b.n	800102c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800101e:	4b2a      	ldr	r3, [pc, #168]	; (80010c8 <HAL_GPIO_Init+0x2d0>)
 8001020:	689a      	ldr	r2, [r3, #8]
 8001022:	69bb      	ldr	r3, [r7, #24]
 8001024:	43db      	mvns	r3, r3
 8001026:	4928      	ldr	r1, [pc, #160]	; (80010c8 <HAL_GPIO_Init+0x2d0>)
 8001028:	4013      	ands	r3, r2
 800102a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001034:	2b00      	cmp	r3, #0
 8001036:	d006      	beq.n	8001046 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001038:	4b23      	ldr	r3, [pc, #140]	; (80010c8 <HAL_GPIO_Init+0x2d0>)
 800103a:	68da      	ldr	r2, [r3, #12]
 800103c:	4922      	ldr	r1, [pc, #136]	; (80010c8 <HAL_GPIO_Init+0x2d0>)
 800103e:	69bb      	ldr	r3, [r7, #24]
 8001040:	4313      	orrs	r3, r2
 8001042:	60cb      	str	r3, [r1, #12]
 8001044:	e006      	b.n	8001054 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001046:	4b20      	ldr	r3, [pc, #128]	; (80010c8 <HAL_GPIO_Init+0x2d0>)
 8001048:	68da      	ldr	r2, [r3, #12]
 800104a:	69bb      	ldr	r3, [r7, #24]
 800104c:	43db      	mvns	r3, r3
 800104e:	491e      	ldr	r1, [pc, #120]	; (80010c8 <HAL_GPIO_Init+0x2d0>)
 8001050:	4013      	ands	r3, r2
 8001052:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800105c:	2b00      	cmp	r3, #0
 800105e:	d006      	beq.n	800106e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001060:	4b19      	ldr	r3, [pc, #100]	; (80010c8 <HAL_GPIO_Init+0x2d0>)
 8001062:	685a      	ldr	r2, [r3, #4]
 8001064:	4918      	ldr	r1, [pc, #96]	; (80010c8 <HAL_GPIO_Init+0x2d0>)
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	4313      	orrs	r3, r2
 800106a:	604b      	str	r3, [r1, #4]
 800106c:	e006      	b.n	800107c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800106e:	4b16      	ldr	r3, [pc, #88]	; (80010c8 <HAL_GPIO_Init+0x2d0>)
 8001070:	685a      	ldr	r2, [r3, #4]
 8001072:	69bb      	ldr	r3, [r7, #24]
 8001074:	43db      	mvns	r3, r3
 8001076:	4914      	ldr	r1, [pc, #80]	; (80010c8 <HAL_GPIO_Init+0x2d0>)
 8001078:	4013      	ands	r3, r2
 800107a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001084:	2b00      	cmp	r3, #0
 8001086:	d021      	beq.n	80010cc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001088:	4b0f      	ldr	r3, [pc, #60]	; (80010c8 <HAL_GPIO_Init+0x2d0>)
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	490e      	ldr	r1, [pc, #56]	; (80010c8 <HAL_GPIO_Init+0x2d0>)
 800108e:	69bb      	ldr	r3, [r7, #24]
 8001090:	4313      	orrs	r3, r2
 8001092:	600b      	str	r3, [r1, #0]
 8001094:	e021      	b.n	80010da <HAL_GPIO_Init+0x2e2>
 8001096:	bf00      	nop
 8001098:	10320000 	.word	0x10320000
 800109c:	10310000 	.word	0x10310000
 80010a0:	10220000 	.word	0x10220000
 80010a4:	10210000 	.word	0x10210000
 80010a8:	10120000 	.word	0x10120000
 80010ac:	10110000 	.word	0x10110000
 80010b0:	40021000 	.word	0x40021000
 80010b4:	40010000 	.word	0x40010000
 80010b8:	40010800 	.word	0x40010800
 80010bc:	40010c00 	.word	0x40010c00
 80010c0:	40011000 	.word	0x40011000
 80010c4:	40011400 	.word	0x40011400
 80010c8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010cc:	4b0b      	ldr	r3, [pc, #44]	; (80010fc <HAL_GPIO_Init+0x304>)
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	43db      	mvns	r3, r3
 80010d4:	4909      	ldr	r1, [pc, #36]	; (80010fc <HAL_GPIO_Init+0x304>)
 80010d6:	4013      	ands	r3, r2
 80010d8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80010da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010dc:	3301      	adds	r3, #1
 80010de:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e6:	fa22 f303 	lsr.w	r3, r2, r3
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	f47f ae8e 	bne.w	8000e0c <HAL_GPIO_Init+0x14>
  }
}
 80010f0:	bf00      	nop
 80010f2:	bf00      	nop
 80010f4:	372c      	adds	r7, #44	; 0x2c
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bc80      	pop	{r7}
 80010fa:	4770      	bx	lr
 80010fc:	40010400 	.word	0x40010400

08001100 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	460b      	mov	r3, r1
 800110a:	807b      	strh	r3, [r7, #2]
 800110c:	4613      	mov	r3, r2
 800110e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001110:	787b      	ldrb	r3, [r7, #1]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d003      	beq.n	800111e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001116:	887a      	ldrh	r2, [r7, #2]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800111c:	e003      	b.n	8001126 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800111e:	887b      	ldrh	r3, [r7, #2]
 8001120:	041a      	lsls	r2, r3, #16
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	611a      	str	r2, [r3, #16]
}
 8001126:	bf00      	nop
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	bc80      	pop	{r7}
 800112e:	4770      	bx	lr

08001130 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800113a:	4b08      	ldr	r3, [pc, #32]	; (800115c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800113c:	695a      	ldr	r2, [r3, #20]
 800113e:	88fb      	ldrh	r3, [r7, #6]
 8001140:	4013      	ands	r3, r2
 8001142:	2b00      	cmp	r3, #0
 8001144:	d006      	beq.n	8001154 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001146:	4a05      	ldr	r2, [pc, #20]	; (800115c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001148:	88fb      	ldrh	r3, [r7, #6]
 800114a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800114c:	88fb      	ldrh	r3, [r7, #6]
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff f9f0 	bl	8000534 <HAL_GPIO_EXTI_Callback>
  }
}
 8001154:	bf00      	nop
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	40010400 	.word	0x40010400

08001160 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d101      	bne.n	8001172 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e272      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	2b00      	cmp	r3, #0
 800117c:	f000 8087 	beq.w	800128e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001180:	4b92      	ldr	r3, [pc, #584]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f003 030c 	and.w	r3, r3, #12
 8001188:	2b04      	cmp	r3, #4
 800118a:	d00c      	beq.n	80011a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800118c:	4b8f      	ldr	r3, [pc, #572]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f003 030c 	and.w	r3, r3, #12
 8001194:	2b08      	cmp	r3, #8
 8001196:	d112      	bne.n	80011be <HAL_RCC_OscConfig+0x5e>
 8001198:	4b8c      	ldr	r3, [pc, #560]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011a4:	d10b      	bne.n	80011be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011a6:	4b89      	ldr	r3, [pc, #548]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d06c      	beq.n	800128c <HAL_RCC_OscConfig+0x12c>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d168      	bne.n	800128c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e24c      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011c6:	d106      	bne.n	80011d6 <HAL_RCC_OscConfig+0x76>
 80011c8:	4b80      	ldr	r3, [pc, #512]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a7f      	ldr	r2, [pc, #508]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 80011ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011d2:	6013      	str	r3, [r2, #0]
 80011d4:	e02e      	b.n	8001234 <HAL_RCC_OscConfig+0xd4>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d10c      	bne.n	80011f8 <HAL_RCC_OscConfig+0x98>
 80011de:	4b7b      	ldr	r3, [pc, #492]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a7a      	ldr	r2, [pc, #488]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 80011e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011e8:	6013      	str	r3, [r2, #0]
 80011ea:	4b78      	ldr	r3, [pc, #480]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a77      	ldr	r2, [pc, #476]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 80011f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011f4:	6013      	str	r3, [r2, #0]
 80011f6:	e01d      	b.n	8001234 <HAL_RCC_OscConfig+0xd4>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001200:	d10c      	bne.n	800121c <HAL_RCC_OscConfig+0xbc>
 8001202:	4b72      	ldr	r3, [pc, #456]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a71      	ldr	r2, [pc, #452]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 8001208:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800120c:	6013      	str	r3, [r2, #0]
 800120e:	4b6f      	ldr	r3, [pc, #444]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a6e      	ldr	r2, [pc, #440]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 8001214:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001218:	6013      	str	r3, [r2, #0]
 800121a:	e00b      	b.n	8001234 <HAL_RCC_OscConfig+0xd4>
 800121c:	4b6b      	ldr	r3, [pc, #428]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a6a      	ldr	r2, [pc, #424]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 8001222:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001226:	6013      	str	r3, [r2, #0]
 8001228:	4b68      	ldr	r3, [pc, #416]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a67      	ldr	r2, [pc, #412]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 800122e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001232:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d013      	beq.n	8001264 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800123c:	f7ff fbee 	bl	8000a1c <HAL_GetTick>
 8001240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001242:	e008      	b.n	8001256 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001244:	f7ff fbea 	bl	8000a1c <HAL_GetTick>
 8001248:	4602      	mov	r2, r0
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	2b64      	cmp	r3, #100	; 0x64
 8001250:	d901      	bls.n	8001256 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001252:	2303      	movs	r3, #3
 8001254:	e200      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001256:	4b5d      	ldr	r3, [pc, #372]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125e:	2b00      	cmp	r3, #0
 8001260:	d0f0      	beq.n	8001244 <HAL_RCC_OscConfig+0xe4>
 8001262:	e014      	b.n	800128e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001264:	f7ff fbda 	bl	8000a1c <HAL_GetTick>
 8001268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800126a:	e008      	b.n	800127e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800126c:	f7ff fbd6 	bl	8000a1c <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	2b64      	cmp	r3, #100	; 0x64
 8001278:	d901      	bls.n	800127e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800127a:	2303      	movs	r3, #3
 800127c:	e1ec      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800127e:	4b53      	ldr	r3, [pc, #332]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d1f0      	bne.n	800126c <HAL_RCC_OscConfig+0x10c>
 800128a:	e000      	b.n	800128e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800128c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	2b00      	cmp	r3, #0
 8001298:	d063      	beq.n	8001362 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800129a:	4b4c      	ldr	r3, [pc, #304]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f003 030c 	and.w	r3, r3, #12
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d00b      	beq.n	80012be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80012a6:	4b49      	ldr	r3, [pc, #292]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f003 030c 	and.w	r3, r3, #12
 80012ae:	2b08      	cmp	r3, #8
 80012b0:	d11c      	bne.n	80012ec <HAL_RCC_OscConfig+0x18c>
 80012b2:	4b46      	ldr	r3, [pc, #280]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d116      	bne.n	80012ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012be:	4b43      	ldr	r3, [pc, #268]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 0302 	and.w	r3, r3, #2
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d005      	beq.n	80012d6 <HAL_RCC_OscConfig+0x176>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	691b      	ldr	r3, [r3, #16]
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d001      	beq.n	80012d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e1c0      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012d6:	4b3d      	ldr	r3, [pc, #244]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	695b      	ldr	r3, [r3, #20]
 80012e2:	00db      	lsls	r3, r3, #3
 80012e4:	4939      	ldr	r1, [pc, #228]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 80012e6:	4313      	orrs	r3, r2
 80012e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ea:	e03a      	b.n	8001362 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	691b      	ldr	r3, [r3, #16]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d020      	beq.n	8001336 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012f4:	4b36      	ldr	r3, [pc, #216]	; (80013d0 <HAL_RCC_OscConfig+0x270>)
 80012f6:	2201      	movs	r2, #1
 80012f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012fa:	f7ff fb8f 	bl	8000a1c <HAL_GetTick>
 80012fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001300:	e008      	b.n	8001314 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001302:	f7ff fb8b 	bl	8000a1c <HAL_GetTick>
 8001306:	4602      	mov	r2, r0
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	2b02      	cmp	r3, #2
 800130e:	d901      	bls.n	8001314 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001310:	2303      	movs	r3, #3
 8001312:	e1a1      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001314:	4b2d      	ldr	r3, [pc, #180]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f003 0302 	and.w	r3, r3, #2
 800131c:	2b00      	cmp	r3, #0
 800131e:	d0f0      	beq.n	8001302 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001320:	4b2a      	ldr	r3, [pc, #168]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	695b      	ldr	r3, [r3, #20]
 800132c:	00db      	lsls	r3, r3, #3
 800132e:	4927      	ldr	r1, [pc, #156]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 8001330:	4313      	orrs	r3, r2
 8001332:	600b      	str	r3, [r1, #0]
 8001334:	e015      	b.n	8001362 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001336:	4b26      	ldr	r3, [pc, #152]	; (80013d0 <HAL_RCC_OscConfig+0x270>)
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800133c:	f7ff fb6e 	bl	8000a1c <HAL_GetTick>
 8001340:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001342:	e008      	b.n	8001356 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001344:	f7ff fb6a 	bl	8000a1c <HAL_GetTick>
 8001348:	4602      	mov	r2, r0
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	2b02      	cmp	r3, #2
 8001350:	d901      	bls.n	8001356 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001352:	2303      	movs	r3, #3
 8001354:	e180      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001356:	4b1d      	ldr	r3, [pc, #116]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	2b00      	cmp	r3, #0
 8001360:	d1f0      	bne.n	8001344 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 0308 	and.w	r3, r3, #8
 800136a:	2b00      	cmp	r3, #0
 800136c:	d03a      	beq.n	80013e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	699b      	ldr	r3, [r3, #24]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d019      	beq.n	80013aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001376:	4b17      	ldr	r3, [pc, #92]	; (80013d4 <HAL_RCC_OscConfig+0x274>)
 8001378:	2201      	movs	r2, #1
 800137a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800137c:	f7ff fb4e 	bl	8000a1c <HAL_GetTick>
 8001380:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001382:	e008      	b.n	8001396 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001384:	f7ff fb4a 	bl	8000a1c <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	2b02      	cmp	r3, #2
 8001390:	d901      	bls.n	8001396 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001392:	2303      	movs	r3, #3
 8001394:	e160      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001396:	4b0d      	ldr	r3, [pc, #52]	; (80013cc <HAL_RCC_OscConfig+0x26c>)
 8001398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800139a:	f003 0302 	and.w	r3, r3, #2
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d0f0      	beq.n	8001384 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80013a2:	2001      	movs	r0, #1
 80013a4:	f000 face 	bl	8001944 <RCC_Delay>
 80013a8:	e01c      	b.n	80013e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013aa:	4b0a      	ldr	r3, [pc, #40]	; (80013d4 <HAL_RCC_OscConfig+0x274>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013b0:	f7ff fb34 	bl	8000a1c <HAL_GetTick>
 80013b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013b6:	e00f      	b.n	80013d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013b8:	f7ff fb30 	bl	8000a1c <HAL_GetTick>
 80013bc:	4602      	mov	r2, r0
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d908      	bls.n	80013d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80013c6:	2303      	movs	r3, #3
 80013c8:	e146      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
 80013ca:	bf00      	nop
 80013cc:	40021000 	.word	0x40021000
 80013d0:	42420000 	.word	0x42420000
 80013d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013d8:	4b92      	ldr	r3, [pc, #584]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 80013da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013dc:	f003 0302 	and.w	r3, r3, #2
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d1e9      	bne.n	80013b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0304 	and.w	r3, r3, #4
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	f000 80a6 	beq.w	800153e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013f2:	2300      	movs	r3, #0
 80013f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013f6:	4b8b      	ldr	r3, [pc, #556]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 80013f8:	69db      	ldr	r3, [r3, #28]
 80013fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d10d      	bne.n	800141e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001402:	4b88      	ldr	r3, [pc, #544]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 8001404:	69db      	ldr	r3, [r3, #28]
 8001406:	4a87      	ldr	r2, [pc, #540]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 8001408:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800140c:	61d3      	str	r3, [r2, #28]
 800140e:	4b85      	ldr	r3, [pc, #532]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 8001410:	69db      	ldr	r3, [r3, #28]
 8001412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001416:	60bb      	str	r3, [r7, #8]
 8001418:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800141a:	2301      	movs	r3, #1
 800141c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800141e:	4b82      	ldr	r3, [pc, #520]	; (8001628 <HAL_RCC_OscConfig+0x4c8>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001426:	2b00      	cmp	r3, #0
 8001428:	d118      	bne.n	800145c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800142a:	4b7f      	ldr	r3, [pc, #508]	; (8001628 <HAL_RCC_OscConfig+0x4c8>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a7e      	ldr	r2, [pc, #504]	; (8001628 <HAL_RCC_OscConfig+0x4c8>)
 8001430:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001434:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001436:	f7ff faf1 	bl	8000a1c <HAL_GetTick>
 800143a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800143c:	e008      	b.n	8001450 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800143e:	f7ff faed 	bl	8000a1c <HAL_GetTick>
 8001442:	4602      	mov	r2, r0
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	2b64      	cmp	r3, #100	; 0x64
 800144a:	d901      	bls.n	8001450 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800144c:	2303      	movs	r3, #3
 800144e:	e103      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001450:	4b75      	ldr	r3, [pc, #468]	; (8001628 <HAL_RCC_OscConfig+0x4c8>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001458:	2b00      	cmp	r3, #0
 800145a:	d0f0      	beq.n	800143e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d106      	bne.n	8001472 <HAL_RCC_OscConfig+0x312>
 8001464:	4b6f      	ldr	r3, [pc, #444]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 8001466:	6a1b      	ldr	r3, [r3, #32]
 8001468:	4a6e      	ldr	r2, [pc, #440]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 800146a:	f043 0301 	orr.w	r3, r3, #1
 800146e:	6213      	str	r3, [r2, #32]
 8001470:	e02d      	b.n	80014ce <HAL_RCC_OscConfig+0x36e>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	68db      	ldr	r3, [r3, #12]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d10c      	bne.n	8001494 <HAL_RCC_OscConfig+0x334>
 800147a:	4b6a      	ldr	r3, [pc, #424]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 800147c:	6a1b      	ldr	r3, [r3, #32]
 800147e:	4a69      	ldr	r2, [pc, #420]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 8001480:	f023 0301 	bic.w	r3, r3, #1
 8001484:	6213      	str	r3, [r2, #32]
 8001486:	4b67      	ldr	r3, [pc, #412]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 8001488:	6a1b      	ldr	r3, [r3, #32]
 800148a:	4a66      	ldr	r2, [pc, #408]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 800148c:	f023 0304 	bic.w	r3, r3, #4
 8001490:	6213      	str	r3, [r2, #32]
 8001492:	e01c      	b.n	80014ce <HAL_RCC_OscConfig+0x36e>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	2b05      	cmp	r3, #5
 800149a:	d10c      	bne.n	80014b6 <HAL_RCC_OscConfig+0x356>
 800149c:	4b61      	ldr	r3, [pc, #388]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 800149e:	6a1b      	ldr	r3, [r3, #32]
 80014a0:	4a60      	ldr	r2, [pc, #384]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 80014a2:	f043 0304 	orr.w	r3, r3, #4
 80014a6:	6213      	str	r3, [r2, #32]
 80014a8:	4b5e      	ldr	r3, [pc, #376]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 80014aa:	6a1b      	ldr	r3, [r3, #32]
 80014ac:	4a5d      	ldr	r2, [pc, #372]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 80014ae:	f043 0301 	orr.w	r3, r3, #1
 80014b2:	6213      	str	r3, [r2, #32]
 80014b4:	e00b      	b.n	80014ce <HAL_RCC_OscConfig+0x36e>
 80014b6:	4b5b      	ldr	r3, [pc, #364]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 80014b8:	6a1b      	ldr	r3, [r3, #32]
 80014ba:	4a5a      	ldr	r2, [pc, #360]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 80014bc:	f023 0301 	bic.w	r3, r3, #1
 80014c0:	6213      	str	r3, [r2, #32]
 80014c2:	4b58      	ldr	r3, [pc, #352]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 80014c4:	6a1b      	ldr	r3, [r3, #32]
 80014c6:	4a57      	ldr	r2, [pc, #348]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 80014c8:	f023 0304 	bic.w	r3, r3, #4
 80014cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	68db      	ldr	r3, [r3, #12]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d015      	beq.n	8001502 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014d6:	f7ff faa1 	bl	8000a1c <HAL_GetTick>
 80014da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014dc:	e00a      	b.n	80014f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014de:	f7ff fa9d 	bl	8000a1c <HAL_GetTick>
 80014e2:	4602      	mov	r2, r0
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d901      	bls.n	80014f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80014f0:	2303      	movs	r3, #3
 80014f2:	e0b1      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014f4:	4b4b      	ldr	r3, [pc, #300]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 80014f6:	6a1b      	ldr	r3, [r3, #32]
 80014f8:	f003 0302 	and.w	r3, r3, #2
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d0ee      	beq.n	80014de <HAL_RCC_OscConfig+0x37e>
 8001500:	e014      	b.n	800152c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001502:	f7ff fa8b 	bl	8000a1c <HAL_GetTick>
 8001506:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001508:	e00a      	b.n	8001520 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800150a:	f7ff fa87 	bl	8000a1c <HAL_GetTick>
 800150e:	4602      	mov	r2, r0
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	f241 3288 	movw	r2, #5000	; 0x1388
 8001518:	4293      	cmp	r3, r2
 800151a:	d901      	bls.n	8001520 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800151c:	2303      	movs	r3, #3
 800151e:	e09b      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001520:	4b40      	ldr	r3, [pc, #256]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 8001522:	6a1b      	ldr	r3, [r3, #32]
 8001524:	f003 0302 	and.w	r3, r3, #2
 8001528:	2b00      	cmp	r3, #0
 800152a:	d1ee      	bne.n	800150a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800152c:	7dfb      	ldrb	r3, [r7, #23]
 800152e:	2b01      	cmp	r3, #1
 8001530:	d105      	bne.n	800153e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001532:	4b3c      	ldr	r3, [pc, #240]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 8001534:	69db      	ldr	r3, [r3, #28]
 8001536:	4a3b      	ldr	r2, [pc, #236]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 8001538:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800153c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	69db      	ldr	r3, [r3, #28]
 8001542:	2b00      	cmp	r3, #0
 8001544:	f000 8087 	beq.w	8001656 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001548:	4b36      	ldr	r3, [pc, #216]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f003 030c 	and.w	r3, r3, #12
 8001550:	2b08      	cmp	r3, #8
 8001552:	d061      	beq.n	8001618 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	69db      	ldr	r3, [r3, #28]
 8001558:	2b02      	cmp	r3, #2
 800155a:	d146      	bne.n	80015ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800155c:	4b33      	ldr	r3, [pc, #204]	; (800162c <HAL_RCC_OscConfig+0x4cc>)
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001562:	f7ff fa5b 	bl	8000a1c <HAL_GetTick>
 8001566:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001568:	e008      	b.n	800157c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800156a:	f7ff fa57 	bl	8000a1c <HAL_GetTick>
 800156e:	4602      	mov	r2, r0
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	2b02      	cmp	r3, #2
 8001576:	d901      	bls.n	800157c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001578:	2303      	movs	r3, #3
 800157a:	e06d      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800157c:	4b29      	ldr	r3, [pc, #164]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001584:	2b00      	cmp	r3, #0
 8001586:	d1f0      	bne.n	800156a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6a1b      	ldr	r3, [r3, #32]
 800158c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001590:	d108      	bne.n	80015a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001592:	4b24      	ldr	r3, [pc, #144]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	4921      	ldr	r1, [pc, #132]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 80015a0:	4313      	orrs	r3, r2
 80015a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015a4:	4b1f      	ldr	r3, [pc, #124]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6a19      	ldr	r1, [r3, #32]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b4:	430b      	orrs	r3, r1
 80015b6:	491b      	ldr	r1, [pc, #108]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 80015b8:	4313      	orrs	r3, r2
 80015ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015bc:	4b1b      	ldr	r3, [pc, #108]	; (800162c <HAL_RCC_OscConfig+0x4cc>)
 80015be:	2201      	movs	r2, #1
 80015c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c2:	f7ff fa2b 	bl	8000a1c <HAL_GetTick>
 80015c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015c8:	e008      	b.n	80015dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015ca:	f7ff fa27 	bl	8000a1c <HAL_GetTick>
 80015ce:	4602      	mov	r2, r0
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d901      	bls.n	80015dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e03d      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015dc:	4b11      	ldr	r3, [pc, #68]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d0f0      	beq.n	80015ca <HAL_RCC_OscConfig+0x46a>
 80015e8:	e035      	b.n	8001656 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ea:	4b10      	ldr	r3, [pc, #64]	; (800162c <HAL_RCC_OscConfig+0x4cc>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f0:	f7ff fa14 	bl	8000a1c <HAL_GetTick>
 80015f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015f6:	e008      	b.n	800160a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015f8:	f7ff fa10 	bl	8000a1c <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b02      	cmp	r3, #2
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e026      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800160a:	4b06      	ldr	r3, [pc, #24]	; (8001624 <HAL_RCC_OscConfig+0x4c4>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1f0      	bne.n	80015f8 <HAL_RCC_OscConfig+0x498>
 8001616:	e01e      	b.n	8001656 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	69db      	ldr	r3, [r3, #28]
 800161c:	2b01      	cmp	r3, #1
 800161e:	d107      	bne.n	8001630 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e019      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
 8001624:	40021000 	.word	0x40021000
 8001628:	40007000 	.word	0x40007000
 800162c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001630:	4b0b      	ldr	r3, [pc, #44]	; (8001660 <HAL_RCC_OscConfig+0x500>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6a1b      	ldr	r3, [r3, #32]
 8001640:	429a      	cmp	r2, r3
 8001642:	d106      	bne.n	8001652 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800164e:	429a      	cmp	r2, r3
 8001650:	d001      	beq.n	8001656 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e000      	b.n	8001658 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001656:	2300      	movs	r3, #0
}
 8001658:	4618      	mov	r0, r3
 800165a:	3718      	adds	r7, #24
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	40021000 	.word	0x40021000

08001664 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d101      	bne.n	8001678 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e0d0      	b.n	800181a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001678:	4b6a      	ldr	r3, [pc, #424]	; (8001824 <HAL_RCC_ClockConfig+0x1c0>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0307 	and.w	r3, r3, #7
 8001680:	683a      	ldr	r2, [r7, #0]
 8001682:	429a      	cmp	r2, r3
 8001684:	d910      	bls.n	80016a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001686:	4b67      	ldr	r3, [pc, #412]	; (8001824 <HAL_RCC_ClockConfig+0x1c0>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f023 0207 	bic.w	r2, r3, #7
 800168e:	4965      	ldr	r1, [pc, #404]	; (8001824 <HAL_RCC_ClockConfig+0x1c0>)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	4313      	orrs	r3, r2
 8001694:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001696:	4b63      	ldr	r3, [pc, #396]	; (8001824 <HAL_RCC_ClockConfig+0x1c0>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0307 	and.w	r3, r3, #7
 800169e:	683a      	ldr	r2, [r7, #0]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d001      	beq.n	80016a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e0b8      	b.n	800181a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0302 	and.w	r3, r3, #2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d020      	beq.n	80016f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0304 	and.w	r3, r3, #4
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d005      	beq.n	80016cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016c0:	4b59      	ldr	r3, [pc, #356]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	4a58      	ldr	r2, [pc, #352]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80016c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80016ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0308 	and.w	r3, r3, #8
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d005      	beq.n	80016e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016d8:	4b53      	ldr	r3, [pc, #332]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	4a52      	ldr	r2, [pc, #328]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80016de:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80016e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016e4:	4b50      	ldr	r3, [pc, #320]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	494d      	ldr	r1, [pc, #308]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80016f2:	4313      	orrs	r3, r2
 80016f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d040      	beq.n	8001784 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d107      	bne.n	800171a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800170a:	4b47      	ldr	r3, [pc, #284]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d115      	bne.n	8001742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e07f      	b.n	800181a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	2b02      	cmp	r3, #2
 8001720:	d107      	bne.n	8001732 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001722:	4b41      	ldr	r3, [pc, #260]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d109      	bne.n	8001742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e073      	b.n	800181a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001732:	4b3d      	ldr	r3, [pc, #244]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	2b00      	cmp	r3, #0
 800173c:	d101      	bne.n	8001742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e06b      	b.n	800181a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001742:	4b39      	ldr	r3, [pc, #228]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f023 0203 	bic.w	r2, r3, #3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	4936      	ldr	r1, [pc, #216]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 8001750:	4313      	orrs	r3, r2
 8001752:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001754:	f7ff f962 	bl	8000a1c <HAL_GetTick>
 8001758:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800175a:	e00a      	b.n	8001772 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800175c:	f7ff f95e 	bl	8000a1c <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	f241 3288 	movw	r2, #5000	; 0x1388
 800176a:	4293      	cmp	r3, r2
 800176c:	d901      	bls.n	8001772 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e053      	b.n	800181a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001772:	4b2d      	ldr	r3, [pc, #180]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f003 020c 	and.w	r2, r3, #12
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	429a      	cmp	r2, r3
 8001782:	d1eb      	bne.n	800175c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001784:	4b27      	ldr	r3, [pc, #156]	; (8001824 <HAL_RCC_ClockConfig+0x1c0>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0307 	and.w	r3, r3, #7
 800178c:	683a      	ldr	r2, [r7, #0]
 800178e:	429a      	cmp	r2, r3
 8001790:	d210      	bcs.n	80017b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001792:	4b24      	ldr	r3, [pc, #144]	; (8001824 <HAL_RCC_ClockConfig+0x1c0>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f023 0207 	bic.w	r2, r3, #7
 800179a:	4922      	ldr	r1, [pc, #136]	; (8001824 <HAL_RCC_ClockConfig+0x1c0>)
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	4313      	orrs	r3, r2
 80017a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017a2:	4b20      	ldr	r3, [pc, #128]	; (8001824 <HAL_RCC_ClockConfig+0x1c0>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0307 	and.w	r3, r3, #7
 80017aa:	683a      	ldr	r2, [r7, #0]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d001      	beq.n	80017b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e032      	b.n	800181a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0304 	and.w	r3, r3, #4
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d008      	beq.n	80017d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017c0:	4b19      	ldr	r3, [pc, #100]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	4916      	ldr	r1, [pc, #88]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80017ce:	4313      	orrs	r3, r2
 80017d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0308 	and.w	r3, r3, #8
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d009      	beq.n	80017f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017de:	4b12      	ldr	r3, [pc, #72]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	691b      	ldr	r3, [r3, #16]
 80017ea:	00db      	lsls	r3, r3, #3
 80017ec:	490e      	ldr	r1, [pc, #56]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80017ee:	4313      	orrs	r3, r2
 80017f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017f2:	f000 f821 	bl	8001838 <HAL_RCC_GetSysClockFreq>
 80017f6:	4602      	mov	r2, r0
 80017f8:	4b0b      	ldr	r3, [pc, #44]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	091b      	lsrs	r3, r3, #4
 80017fe:	f003 030f 	and.w	r3, r3, #15
 8001802:	490a      	ldr	r1, [pc, #40]	; (800182c <HAL_RCC_ClockConfig+0x1c8>)
 8001804:	5ccb      	ldrb	r3, [r1, r3]
 8001806:	fa22 f303 	lsr.w	r3, r2, r3
 800180a:	4a09      	ldr	r2, [pc, #36]	; (8001830 <HAL_RCC_ClockConfig+0x1cc>)
 800180c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800180e:	4b09      	ldr	r3, [pc, #36]	; (8001834 <HAL_RCC_ClockConfig+0x1d0>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff f8c0 	bl	8000998 <HAL_InitTick>

  return HAL_OK;
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	3710      	adds	r7, #16
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40022000 	.word	0x40022000
 8001828:	40021000 	.word	0x40021000
 800182c:	0800379c 	.word	0x0800379c
 8001830:	20000010 	.word	0x20000010
 8001834:	20000014 	.word	0x20000014

08001838 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001838:	b480      	push	{r7}
 800183a:	b087      	sub	sp, #28
 800183c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800183e:	2300      	movs	r3, #0
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	2300      	movs	r3, #0
 8001844:	60bb      	str	r3, [r7, #8]
 8001846:	2300      	movs	r3, #0
 8001848:	617b      	str	r3, [r7, #20]
 800184a:	2300      	movs	r3, #0
 800184c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800184e:	2300      	movs	r3, #0
 8001850:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001852:	4b1e      	ldr	r3, [pc, #120]	; (80018cc <HAL_RCC_GetSysClockFreq+0x94>)
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f003 030c 	and.w	r3, r3, #12
 800185e:	2b04      	cmp	r3, #4
 8001860:	d002      	beq.n	8001868 <HAL_RCC_GetSysClockFreq+0x30>
 8001862:	2b08      	cmp	r3, #8
 8001864:	d003      	beq.n	800186e <HAL_RCC_GetSysClockFreq+0x36>
 8001866:	e027      	b.n	80018b8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001868:	4b19      	ldr	r3, [pc, #100]	; (80018d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800186a:	613b      	str	r3, [r7, #16]
      break;
 800186c:	e027      	b.n	80018be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	0c9b      	lsrs	r3, r3, #18
 8001872:	f003 030f 	and.w	r3, r3, #15
 8001876:	4a17      	ldr	r2, [pc, #92]	; (80018d4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001878:	5cd3      	ldrb	r3, [r2, r3]
 800187a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d010      	beq.n	80018a8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001886:	4b11      	ldr	r3, [pc, #68]	; (80018cc <HAL_RCC_GetSysClockFreq+0x94>)
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	0c5b      	lsrs	r3, r3, #17
 800188c:	f003 0301 	and.w	r3, r3, #1
 8001890:	4a11      	ldr	r2, [pc, #68]	; (80018d8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001892:	5cd3      	ldrb	r3, [r2, r3]
 8001894:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a0d      	ldr	r2, [pc, #52]	; (80018d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800189a:	fb03 f202 	mul.w	r2, r3, r2
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80018a4:	617b      	str	r3, [r7, #20]
 80018a6:	e004      	b.n	80018b2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4a0c      	ldr	r2, [pc, #48]	; (80018dc <HAL_RCC_GetSysClockFreq+0xa4>)
 80018ac:	fb02 f303 	mul.w	r3, r2, r3
 80018b0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	613b      	str	r3, [r7, #16]
      break;
 80018b6:	e002      	b.n	80018be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80018b8:	4b05      	ldr	r3, [pc, #20]	; (80018d0 <HAL_RCC_GetSysClockFreq+0x98>)
 80018ba:	613b      	str	r3, [r7, #16]
      break;
 80018bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018be:	693b      	ldr	r3, [r7, #16]
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	371c      	adds	r7, #28
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bc80      	pop	{r7}
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	40021000 	.word	0x40021000
 80018d0:	007a1200 	.word	0x007a1200
 80018d4:	080037b4 	.word	0x080037b4
 80018d8:	080037c4 	.word	0x080037c4
 80018dc:	003d0900 	.word	0x003d0900

080018e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018e4:	4b02      	ldr	r3, [pc, #8]	; (80018f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80018e6:	681b      	ldr	r3, [r3, #0]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bc80      	pop	{r7}
 80018ee:	4770      	bx	lr
 80018f0:	20000010 	.word	0x20000010

080018f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80018f8:	f7ff fff2 	bl	80018e0 <HAL_RCC_GetHCLKFreq>
 80018fc:	4602      	mov	r2, r0
 80018fe:	4b05      	ldr	r3, [pc, #20]	; (8001914 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	0a1b      	lsrs	r3, r3, #8
 8001904:	f003 0307 	and.w	r3, r3, #7
 8001908:	4903      	ldr	r1, [pc, #12]	; (8001918 <HAL_RCC_GetPCLK1Freq+0x24>)
 800190a:	5ccb      	ldrb	r3, [r1, r3]
 800190c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001910:	4618      	mov	r0, r3
 8001912:	bd80      	pop	{r7, pc}
 8001914:	40021000 	.word	0x40021000
 8001918:	080037ac 	.word	0x080037ac

0800191c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001920:	f7ff ffde 	bl	80018e0 <HAL_RCC_GetHCLKFreq>
 8001924:	4602      	mov	r2, r0
 8001926:	4b05      	ldr	r3, [pc, #20]	; (800193c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	0adb      	lsrs	r3, r3, #11
 800192c:	f003 0307 	and.w	r3, r3, #7
 8001930:	4903      	ldr	r1, [pc, #12]	; (8001940 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001932:	5ccb      	ldrb	r3, [r1, r3]
 8001934:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001938:	4618      	mov	r0, r3
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40021000 	.word	0x40021000
 8001940:	080037ac 	.word	0x080037ac

08001944 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001944:	b480      	push	{r7}
 8001946:	b085      	sub	sp, #20
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800194c:	4b0a      	ldr	r3, [pc, #40]	; (8001978 <RCC_Delay+0x34>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a0a      	ldr	r2, [pc, #40]	; (800197c <RCC_Delay+0x38>)
 8001952:	fba2 2303 	umull	r2, r3, r2, r3
 8001956:	0a5b      	lsrs	r3, r3, #9
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	fb02 f303 	mul.w	r3, r2, r3
 800195e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001960:	bf00      	nop
  }
  while (Delay --);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	1e5a      	subs	r2, r3, #1
 8001966:	60fa      	str	r2, [r7, #12]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d1f9      	bne.n	8001960 <RCC_Delay+0x1c>
}
 800196c:	bf00      	nop
 800196e:	bf00      	nop
 8001970:	3714      	adds	r7, #20
 8001972:	46bd      	mov	sp, r7
 8001974:	bc80      	pop	{r7}
 8001976:	4770      	bx	lr
 8001978:	20000010 	.word	0x20000010
 800197c:	10624dd3 	.word	0x10624dd3

08001980 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d101      	bne.n	8001992 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e076      	b.n	8001a80 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001996:	2b00      	cmp	r3, #0
 8001998:	d108      	bne.n	80019ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80019a2:	d009      	beq.n	80019b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2200      	movs	r2, #0
 80019a8:	61da      	str	r2, [r3, #28]
 80019aa:	e005      	b.n	80019b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2200      	movs	r2, #0
 80019b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d106      	bne.n	80019d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f7fe fdf8 	bl	80005c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2202      	movs	r2, #2
 80019dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80019ee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001a00:	431a      	orrs	r2, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	68db      	ldr	r3, [r3, #12]
 8001a06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a0a:	431a      	orrs	r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	691b      	ldr	r3, [r3, #16]
 8001a10:	f003 0302 	and.w	r3, r3, #2
 8001a14:	431a      	orrs	r2, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	695b      	ldr	r3, [r3, #20]
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	431a      	orrs	r2, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	699b      	ldr	r3, [r3, #24]
 8001a24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a28:	431a      	orrs	r2, r3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	69db      	ldr	r3, [r3, #28]
 8001a2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a32:	431a      	orrs	r2, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6a1b      	ldr	r3, [r3, #32]
 8001a38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a3c:	ea42 0103 	orr.w	r1, r2, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a44:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	0c1a      	lsrs	r2, r3, #16
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f002 0204 	and.w	r2, r2, #4
 8001a5e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	69da      	ldr	r2, [r3, #28]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a6e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2200      	movs	r2, #0
 8001a74:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2201      	movs	r2, #1
 8001a7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001a7e:	2300      	movs	r3, #0
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b088      	sub	sp, #32
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	603b      	str	r3, [r7, #0]
 8001a94:	4613      	mov	r3, r2
 8001a96:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d101      	bne.n	8001aaa <HAL_SPI_Transmit+0x22>
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	e12d      	b.n	8001d06 <HAL_SPI_Transmit+0x27e>
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	2201      	movs	r2, #1
 8001aae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001ab2:	f7fe ffb3 	bl	8000a1c <HAL_GetTick>
 8001ab6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001ab8:	88fb      	ldrh	r3, [r7, #6]
 8001aba:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d002      	beq.n	8001ace <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001ac8:	2302      	movs	r3, #2
 8001aca:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001acc:	e116      	b.n	8001cfc <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d002      	beq.n	8001ada <HAL_SPI_Transmit+0x52>
 8001ad4:	88fb      	ldrh	r3, [r7, #6]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d102      	bne.n	8001ae0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001ade:	e10d      	b.n	8001cfc <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2203      	movs	r2, #3
 8001ae4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2200      	movs	r2, #0
 8001aec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	68ba      	ldr	r2, [r7, #8]
 8001af2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	88fa      	ldrh	r2, [r7, #6]
 8001af8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	88fa      	ldrh	r2, [r7, #6]
 8001afe:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2200      	movs	r2, #0
 8001b04:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2200      	movs	r2, #0
 8001b16:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b26:	d10f      	bne.n	8001b48 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b36:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b46:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b52:	2b40      	cmp	r3, #64	; 0x40
 8001b54:	d007      	beq.n	8001b66 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b64:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b6e:	d14f      	bne.n	8001c10 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d002      	beq.n	8001b7e <HAL_SPI_Transmit+0xf6>
 8001b78:	8afb      	ldrh	r3, [r7, #22]
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d142      	bne.n	8001c04 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	881a      	ldrh	r2, [r3, #0]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	1c9a      	adds	r2, r3, #2
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	b29a      	uxth	r2, r3
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001ba2:	e02f      	b.n	8001c04 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d112      	bne.n	8001bd8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb6:	881a      	ldrh	r2, [r3, #0]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	1c9a      	adds	r2, r3, #2
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	b29a      	uxth	r2, r3
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	86da      	strh	r2, [r3, #54]	; 0x36
 8001bd6:	e015      	b.n	8001c04 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001bd8:	f7fe ff20 	bl	8000a1c <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	683a      	ldr	r2, [r7, #0]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d803      	bhi.n	8001bf0 <HAL_SPI_Transmit+0x168>
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bee:	d102      	bne.n	8001bf6 <HAL_SPI_Transmit+0x16e>
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d106      	bne.n	8001c04 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8001c02:	e07b      	b.n	8001cfc <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d1ca      	bne.n	8001ba4 <HAL_SPI_Transmit+0x11c>
 8001c0e:	e050      	b.n	8001cb2 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d002      	beq.n	8001c1e <HAL_SPI_Transmit+0x196>
 8001c18:	8afb      	ldrh	r3, [r7, #22]
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d144      	bne.n	8001ca8 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	330c      	adds	r3, #12
 8001c28:	7812      	ldrb	r2, [r2, #0]
 8001c2a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c30:	1c5a      	adds	r2, r3, #1
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	3b01      	subs	r3, #1
 8001c3e:	b29a      	uxth	r2, r3
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001c44:	e030      	b.n	8001ca8 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f003 0302 	and.w	r3, r3, #2
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d113      	bne.n	8001c7c <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	330c      	adds	r3, #12
 8001c5e:	7812      	ldrb	r2, [r2, #0]
 8001c60:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	1c5a      	adds	r2, r3, #1
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c70:	b29b      	uxth	r3, r3
 8001c72:	3b01      	subs	r3, #1
 8001c74:	b29a      	uxth	r2, r3
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	86da      	strh	r2, [r3, #54]	; 0x36
 8001c7a:	e015      	b.n	8001ca8 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001c7c:	f7fe fece 	bl	8000a1c <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	683a      	ldr	r2, [r7, #0]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d803      	bhi.n	8001c94 <HAL_SPI_Transmit+0x20c>
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c92:	d102      	bne.n	8001c9a <HAL_SPI_Transmit+0x212>
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d106      	bne.n	8001ca8 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8001ca6:	e029      	b.n	8001cfc <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d1c9      	bne.n	8001c46 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	6839      	ldr	r1, [r7, #0]
 8001cb6:	68f8      	ldr	r0, [r7, #12]
 8001cb8:	f000 fbcc 	bl	8002454 <SPI_EndRxTxTransaction>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d002      	beq.n	8001cc8 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2220      	movs	r2, #32
 8001cc6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d10a      	bne.n	8001ce6 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	613b      	str	r3, [r7, #16]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	613b      	str	r3, [r7, #16]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	613b      	str	r3, [r7, #16]
 8001ce4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d002      	beq.n	8001cf4 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	77fb      	strb	r3, [r7, #31]
 8001cf2:	e003      	b.n	8001cfc <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001d04:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3720      	adds	r7, #32
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b088      	sub	sp, #32
 8001d12:	af02      	add	r7, sp, #8
 8001d14:	60f8      	str	r0, [r7, #12]
 8001d16:	60b9      	str	r1, [r7, #8]
 8001d18:	603b      	str	r3, [r7, #0]
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d002      	beq.n	8001d34 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8001d2e:	2302      	movs	r3, #2
 8001d30:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001d32:	e0fb      	b.n	8001f2c <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001d3c:	d112      	bne.n	8001d64 <HAL_SPI_Receive+0x56>
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d10e      	bne.n	8001d64 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2204      	movs	r2, #4
 8001d4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001d4e:	88fa      	ldrh	r2, [r7, #6]
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	9300      	str	r3, [sp, #0]
 8001d54:	4613      	mov	r3, r2
 8001d56:	68ba      	ldr	r2, [r7, #8]
 8001d58:	68b9      	ldr	r1, [r7, #8]
 8001d5a:	68f8      	ldr	r0, [r7, #12]
 8001d5c:	f000 f8ef 	bl	8001f3e <HAL_SPI_TransmitReceive>
 8001d60:	4603      	mov	r3, r0
 8001d62:	e0e8      	b.n	8001f36 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d101      	bne.n	8001d72 <HAL_SPI_Receive+0x64>
 8001d6e:	2302      	movs	r3, #2
 8001d70:	e0e1      	b.n	8001f36 <HAL_SPI_Receive+0x228>
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2201      	movs	r2, #1
 8001d76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001d7a:	f7fe fe4f 	bl	8000a1c <HAL_GetTick>
 8001d7e:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d002      	beq.n	8001d8c <HAL_SPI_Receive+0x7e>
 8001d86:	88fb      	ldrh	r3, [r7, #6]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d102      	bne.n	8001d92 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001d90:	e0cc      	b.n	8001f2c <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2204      	movs	r2, #4
 8001d96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	68ba      	ldr	r2, [r7, #8]
 8001da4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	88fa      	ldrh	r2, [r7, #6]
 8001daa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	88fa      	ldrh	r2, [r7, #6]
 8001db0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2200      	movs	r2, #0
 8001db6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001dd8:	d10f      	bne.n	8001dfa <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001de8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001df8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e04:	2b40      	cmp	r3, #64	; 0x40
 8001e06:	d007      	beq.n	8001e18 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e16:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d16a      	bne.n	8001ef6 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001e20:	e032      	b.n	8001e88 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	f003 0301 	and.w	r3, r3, #1
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d115      	bne.n	8001e5c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f103 020c 	add.w	r2, r3, #12
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e3c:	7812      	ldrb	r2, [r2, #0]
 8001e3e:	b2d2      	uxtb	r2, r2
 8001e40:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e46:	1c5a      	adds	r2, r3, #1
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	3b01      	subs	r3, #1
 8001e54:	b29a      	uxth	r2, r3
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001e5a:	e015      	b.n	8001e88 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e5c:	f7fe fdde 	bl	8000a1c <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	683a      	ldr	r2, [r7, #0]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d803      	bhi.n	8001e74 <HAL_SPI_Receive+0x166>
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e72:	d102      	bne.n	8001e7a <HAL_SPI_Receive+0x16c>
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d106      	bne.n	8001e88 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2201      	movs	r2, #1
 8001e82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8001e86:	e051      	b.n	8001f2c <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d1c7      	bne.n	8001e22 <HAL_SPI_Receive+0x114>
 8001e92:	e035      	b.n	8001f00 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d113      	bne.n	8001eca <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	68da      	ldr	r2, [r3, #12]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eac:	b292      	uxth	r2, r2
 8001eae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eb4:	1c9a      	adds	r2, r3, #2
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	3b01      	subs	r3, #1
 8001ec2:	b29a      	uxth	r2, r3
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001ec8:	e015      	b.n	8001ef6 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001eca:	f7fe fda7 	bl	8000a1c <HAL_GetTick>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	683a      	ldr	r2, [r7, #0]
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d803      	bhi.n	8001ee2 <HAL_SPI_Receive+0x1d4>
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ee0:	d102      	bne.n	8001ee8 <HAL_SPI_Receive+0x1da>
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d106      	bne.n	8001ef6 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8001ef4:	e01a      	b.n	8001f2c <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d1c9      	bne.n	8001e94 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	6839      	ldr	r1, [r7, #0]
 8001f04:	68f8      	ldr	r0, [r7, #12]
 8001f06:	f000 fa53 	bl	80023b0 <SPI_EndRxTransaction>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d002      	beq.n	8001f16 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2220      	movs	r2, #32
 8001f14:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d002      	beq.n	8001f24 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	75fb      	strb	r3, [r7, #23]
 8001f22:	e003      	b.n	8001f2c <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2201      	movs	r2, #1
 8001f28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001f34:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3718      	adds	r7, #24
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b08c      	sub	sp, #48	; 0x30
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	60f8      	str	r0, [r7, #12]
 8001f46:	60b9      	str	r1, [r7, #8]
 8001f48:	607a      	str	r2, [r7, #4]
 8001f4a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001f50:	2300      	movs	r3, #0
 8001f52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d101      	bne.n	8001f64 <HAL_SPI_TransmitReceive+0x26>
 8001f60:	2302      	movs	r3, #2
 8001f62:	e198      	b.n	8002296 <HAL_SPI_TransmitReceive+0x358>
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2201      	movs	r2, #1
 8001f68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001f6c:	f7fe fd56 	bl	8000a1c <HAL_GetTick>
 8001f70:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001f82:	887b      	ldrh	r3, [r7, #2]
 8001f84:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001f86:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d00f      	beq.n	8001fae <HAL_SPI_TransmitReceive+0x70>
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f94:	d107      	bne.n	8001fa6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d103      	bne.n	8001fa6 <HAL_SPI_TransmitReceive+0x68>
 8001f9e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001fa2:	2b04      	cmp	r3, #4
 8001fa4:	d003      	beq.n	8001fae <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001fac:	e16d      	b.n	800228a <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d005      	beq.n	8001fc0 <HAL_SPI_TransmitReceive+0x82>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d002      	beq.n	8001fc0 <HAL_SPI_TransmitReceive+0x82>
 8001fba:	887b      	ldrh	r3, [r7, #2]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d103      	bne.n	8001fc8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001fc6:	e160      	b.n	800228a <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	2b04      	cmp	r3, #4
 8001fd2:	d003      	beq.n	8001fdc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2205      	movs	r2, #5
 8001fd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	887a      	ldrh	r2, [r7, #2]
 8001fec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	887a      	ldrh	r2, [r7, #2]
 8001ff2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	68ba      	ldr	r2, [r7, #8]
 8001ff8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	887a      	ldrh	r2, [r7, #2]
 8001ffe:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	887a      	ldrh	r2, [r7, #2]
 8002004:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2200      	movs	r2, #0
 800200a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2200      	movs	r2, #0
 8002010:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800201c:	2b40      	cmp	r3, #64	; 0x40
 800201e:	d007      	beq.n	8002030 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800202e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002038:	d17c      	bne.n	8002134 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d002      	beq.n	8002048 <HAL_SPI_TransmitReceive+0x10a>
 8002042:	8b7b      	ldrh	r3, [r7, #26]
 8002044:	2b01      	cmp	r3, #1
 8002046:	d16a      	bne.n	800211e <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204c:	881a      	ldrh	r2, [r3, #0]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002058:	1c9a      	adds	r2, r3, #2
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002062:	b29b      	uxth	r3, r3
 8002064:	3b01      	subs	r3, #1
 8002066:	b29a      	uxth	r2, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800206c:	e057      	b.n	800211e <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f003 0302 	and.w	r3, r3, #2
 8002078:	2b02      	cmp	r3, #2
 800207a:	d11b      	bne.n	80020b4 <HAL_SPI_TransmitReceive+0x176>
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002080:	b29b      	uxth	r3, r3
 8002082:	2b00      	cmp	r3, #0
 8002084:	d016      	beq.n	80020b4 <HAL_SPI_TransmitReceive+0x176>
 8002086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002088:	2b01      	cmp	r3, #1
 800208a:	d113      	bne.n	80020b4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002090:	881a      	ldrh	r2, [r3, #0]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209c:	1c9a      	adds	r2, r3, #2
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	3b01      	subs	r3, #1
 80020aa:	b29a      	uxth	r2, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80020b0:	2300      	movs	r3, #0
 80020b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d119      	bne.n	80020f6 <HAL_SPI_TransmitReceive+0x1b8>
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d014      	beq.n	80020f6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68da      	ldr	r2, [r3, #12]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020d6:	b292      	uxth	r2, r2
 80020d8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020de:	1c9a      	adds	r2, r3, #2
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020e8:	b29b      	uxth	r3, r3
 80020ea:	3b01      	subs	r3, #1
 80020ec:	b29a      	uxth	r2, r3
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80020f2:	2301      	movs	r3, #1
 80020f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80020f6:	f7fe fc91 	bl	8000a1c <HAL_GetTick>
 80020fa:	4602      	mov	r2, r0
 80020fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002102:	429a      	cmp	r2, r3
 8002104:	d80b      	bhi.n	800211e <HAL_SPI_TransmitReceive+0x1e0>
 8002106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800210c:	d007      	beq.n	800211e <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800211c:	e0b5      	b.n	800228a <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002122:	b29b      	uxth	r3, r3
 8002124:	2b00      	cmp	r3, #0
 8002126:	d1a2      	bne.n	800206e <HAL_SPI_TransmitReceive+0x130>
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800212c:	b29b      	uxth	r3, r3
 800212e:	2b00      	cmp	r3, #0
 8002130:	d19d      	bne.n	800206e <HAL_SPI_TransmitReceive+0x130>
 8002132:	e080      	b.n	8002236 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d002      	beq.n	8002142 <HAL_SPI_TransmitReceive+0x204>
 800213c:	8b7b      	ldrh	r3, [r7, #26]
 800213e:	2b01      	cmp	r3, #1
 8002140:	d16f      	bne.n	8002222 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	330c      	adds	r3, #12
 800214c:	7812      	ldrb	r2, [r2, #0]
 800214e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002154:	1c5a      	adds	r2, r3, #1
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800215e:	b29b      	uxth	r3, r3
 8002160:	3b01      	subs	r3, #1
 8002162:	b29a      	uxth	r2, r3
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002168:	e05b      	b.n	8002222 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f003 0302 	and.w	r3, r3, #2
 8002174:	2b02      	cmp	r3, #2
 8002176:	d11c      	bne.n	80021b2 <HAL_SPI_TransmitReceive+0x274>
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800217c:	b29b      	uxth	r3, r3
 800217e:	2b00      	cmp	r3, #0
 8002180:	d017      	beq.n	80021b2 <HAL_SPI_TransmitReceive+0x274>
 8002182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002184:	2b01      	cmp	r3, #1
 8002186:	d114      	bne.n	80021b2 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	330c      	adds	r3, #12
 8002192:	7812      	ldrb	r2, [r2, #0]
 8002194:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219a:	1c5a      	adds	r2, r3, #1
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	3b01      	subs	r3, #1
 80021a8:	b29a      	uxth	r2, r3
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80021ae:	2300      	movs	r3, #0
 80021b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f003 0301 	and.w	r3, r3, #1
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d119      	bne.n	80021f4 <HAL_SPI_TransmitReceive+0x2b6>
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d014      	beq.n	80021f4 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	68da      	ldr	r2, [r3, #12]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021d4:	b2d2      	uxtb	r2, r2
 80021d6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021dc:	1c5a      	adds	r2, r3, #1
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	3b01      	subs	r3, #1
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80021f0:	2301      	movs	r3, #1
 80021f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80021f4:	f7fe fc12 	bl	8000a1c <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002200:	429a      	cmp	r2, r3
 8002202:	d803      	bhi.n	800220c <HAL_SPI_TransmitReceive+0x2ce>
 8002204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800220a:	d102      	bne.n	8002212 <HAL_SPI_TransmitReceive+0x2d4>
 800220c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800220e:	2b00      	cmp	r3, #0
 8002210:	d107      	bne.n	8002222 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8002220:	e033      	b.n	800228a <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002226:	b29b      	uxth	r3, r3
 8002228:	2b00      	cmp	r3, #0
 800222a:	d19e      	bne.n	800216a <HAL_SPI_TransmitReceive+0x22c>
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002230:	b29b      	uxth	r3, r3
 8002232:	2b00      	cmp	r3, #0
 8002234:	d199      	bne.n	800216a <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002236:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002238:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800223a:	68f8      	ldr	r0, [r7, #12]
 800223c:	f000 f90a 	bl	8002454 <SPI_EndRxTxTransaction>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d006      	beq.n	8002254 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2220      	movs	r2, #32
 8002250:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002252:	e01a      	b.n	800228a <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d10a      	bne.n	8002272 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800225c:	2300      	movs	r3, #0
 800225e:	617b      	str	r3, [r7, #20]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	617b      	str	r3, [r7, #20]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	617b      	str	r3, [r7, #20]
 8002270:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002276:	2b00      	cmp	r3, #0
 8002278:	d003      	beq.n	8002282 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002280:	e003      	b.n	800228a <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2201      	movs	r2, #1
 8002286:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2200      	movs	r2, #0
 800228e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002292:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002296:	4618      	mov	r0, r3
 8002298:	3730      	adds	r7, #48	; 0x30
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
	...

080022a0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b088      	sub	sp, #32
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	603b      	str	r3, [r7, #0]
 80022ac:	4613      	mov	r3, r2
 80022ae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80022b0:	f7fe fbb4 	bl	8000a1c <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022b8:	1a9b      	subs	r3, r3, r2
 80022ba:	683a      	ldr	r2, [r7, #0]
 80022bc:	4413      	add	r3, r2
 80022be:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80022c0:	f7fe fbac 	bl	8000a1c <HAL_GetTick>
 80022c4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80022c6:	4b39      	ldr	r3, [pc, #228]	; (80023ac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	015b      	lsls	r3, r3, #5
 80022cc:	0d1b      	lsrs	r3, r3, #20
 80022ce:	69fa      	ldr	r2, [r7, #28]
 80022d0:	fb02 f303 	mul.w	r3, r2, r3
 80022d4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80022d6:	e054      	b.n	8002382 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022de:	d050      	beq.n	8002382 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80022e0:	f7fe fb9c 	bl	8000a1c <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	69fa      	ldr	r2, [r7, #28]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d902      	bls.n	80022f6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d13d      	bne.n	8002372 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	685a      	ldr	r2, [r3, #4]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002304:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800230e:	d111      	bne.n	8002334 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002318:	d004      	beq.n	8002324 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002322:	d107      	bne.n	8002334 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002332:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002338:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800233c:	d10f      	bne.n	800235e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800234c:	601a      	str	r2, [r3, #0]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800235c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2201      	movs	r2, #1
 8002362:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e017      	b.n	80023a2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d101      	bne.n	800237c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002378:	2300      	movs	r3, #0
 800237a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	3b01      	subs	r3, #1
 8002380:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	689a      	ldr	r2, [r3, #8]
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	4013      	ands	r3, r2
 800238c:	68ba      	ldr	r2, [r7, #8]
 800238e:	429a      	cmp	r2, r3
 8002390:	bf0c      	ite	eq
 8002392:	2301      	moveq	r3, #1
 8002394:	2300      	movne	r3, #0
 8002396:	b2db      	uxtb	r3, r3
 8002398:	461a      	mov	r2, r3
 800239a:	79fb      	ldrb	r3, [r7, #7]
 800239c:	429a      	cmp	r2, r3
 800239e:	d19b      	bne.n	80022d8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3720      	adds	r7, #32
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	20000010 	.word	0x20000010

080023b0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b086      	sub	sp, #24
 80023b4:	af02      	add	r7, sp, #8
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023c4:	d111      	bne.n	80023ea <SPI_EndRxTransaction+0x3a>
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023ce:	d004      	beq.n	80023da <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023d8:	d107      	bne.n	80023ea <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023e8:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023f2:	d117      	bne.n	8002424 <SPI_EndRxTransaction+0x74>
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023fc:	d112      	bne.n	8002424 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	9300      	str	r3, [sp, #0]
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	2200      	movs	r2, #0
 8002406:	2101      	movs	r1, #1
 8002408:	68f8      	ldr	r0, [r7, #12]
 800240a:	f7ff ff49 	bl	80022a0 <SPI_WaitFlagStateUntilTimeout>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d01a      	beq.n	800244a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002418:	f043 0220 	orr.w	r2, r3, #32
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e013      	b.n	800244c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	9300      	str	r3, [sp, #0]
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	2200      	movs	r2, #0
 800242c:	2180      	movs	r1, #128	; 0x80
 800242e:	68f8      	ldr	r0, [r7, #12]
 8002430:	f7ff ff36 	bl	80022a0 <SPI_WaitFlagStateUntilTimeout>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d007      	beq.n	800244a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800243e:	f043 0220 	orr.w	r2, r3, #32
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e000      	b.n	800244c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800244a:	2300      	movs	r3, #0
}
 800244c:	4618      	mov	r0, r3
 800244e:	3710      	adds	r7, #16
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b086      	sub	sp, #24
 8002458:	af02      	add	r7, sp, #8
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	9300      	str	r3, [sp, #0]
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	2200      	movs	r2, #0
 8002468:	2180      	movs	r1, #128	; 0x80
 800246a:	68f8      	ldr	r0, [r7, #12]
 800246c:	f7ff ff18 	bl	80022a0 <SPI_WaitFlagStateUntilTimeout>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d007      	beq.n	8002486 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800247a:	f043 0220 	orr.w	r2, r3, #32
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e000      	b.n	8002488 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002486:	2300      	movs	r3, #0
}
 8002488:	4618      	mov	r0, r3
 800248a:	3710      	adds	r7, #16
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d101      	bne.n	80024a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e042      	b.n	8002528 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d106      	bne.n	80024bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f7fe f900 	bl	80006bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2224      	movs	r2, #36	; 0x24
 80024c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68da      	ldr	r2, [r3, #12]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f000 fd71 	bl	8002fbc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	691a      	ldr	r2, [r3, #16]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	695a      	ldr	r2, [r3, #20]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	68da      	ldr	r2, [r3, #12]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002508:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2220      	movs	r2, #32
 8002514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2220      	movs	r2, #32
 800251c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002526:	2300      	movs	r3, #0
}
 8002528:	4618      	mov	r0, r3
 800252a:	3708      	adds	r7, #8
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b08a      	sub	sp, #40	; 0x28
 8002534:	af02      	add	r7, sp, #8
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	603b      	str	r3, [r7, #0]
 800253c:	4613      	mov	r3, r2
 800253e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002540:	2300      	movs	r3, #0
 8002542:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800254a:	b2db      	uxtb	r3, r3
 800254c:	2b20      	cmp	r3, #32
 800254e:	d16d      	bne.n	800262c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d002      	beq.n	800255c <HAL_UART_Transmit+0x2c>
 8002556:	88fb      	ldrh	r3, [r7, #6]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d101      	bne.n	8002560 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e066      	b.n	800262e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2200      	movs	r2, #0
 8002564:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2221      	movs	r2, #33	; 0x21
 800256a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800256e:	f7fe fa55 	bl	8000a1c <HAL_GetTick>
 8002572:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	88fa      	ldrh	r2, [r7, #6]
 8002578:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	88fa      	ldrh	r2, [r7, #6]
 800257e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002588:	d108      	bne.n	800259c <HAL_UART_Transmit+0x6c>
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d104      	bne.n	800259c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002592:	2300      	movs	r3, #0
 8002594:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	61bb      	str	r3, [r7, #24]
 800259a:	e003      	b.n	80025a4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025a0:	2300      	movs	r3, #0
 80025a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80025a4:	e02a      	b.n	80025fc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	9300      	str	r3, [sp, #0]
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	2200      	movs	r2, #0
 80025ae:	2180      	movs	r1, #128	; 0x80
 80025b0:	68f8      	ldr	r0, [r7, #12]
 80025b2:	f000 faf9 	bl	8002ba8 <UART_WaitOnFlagUntilTimeout>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e036      	b.n	800262e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d10b      	bne.n	80025de <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	881b      	ldrh	r3, [r3, #0]
 80025ca:	461a      	mov	r2, r3
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	3302      	adds	r3, #2
 80025da:	61bb      	str	r3, [r7, #24]
 80025dc:	e007      	b.n	80025ee <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	781a      	ldrb	r2, [r3, #0]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	3301      	adds	r3, #1
 80025ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	3b01      	subs	r3, #1
 80025f6:	b29a      	uxth	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002600:	b29b      	uxth	r3, r3
 8002602:	2b00      	cmp	r3, #0
 8002604:	d1cf      	bne.n	80025a6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	9300      	str	r3, [sp, #0]
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	2200      	movs	r2, #0
 800260e:	2140      	movs	r1, #64	; 0x40
 8002610:	68f8      	ldr	r0, [r7, #12]
 8002612:	f000 fac9 	bl	8002ba8 <UART_WaitOnFlagUntilTimeout>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d001      	beq.n	8002620 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e006      	b.n	800262e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2220      	movs	r2, #32
 8002624:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002628:	2300      	movs	r3, #0
 800262a:	e000      	b.n	800262e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800262c:	2302      	movs	r3, #2
  }
}
 800262e:	4618      	mov	r0, r3
 8002630:	3720      	adds	r7, #32
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
	...

08002638 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b0ba      	sub	sp, #232	; 0xe8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	695b      	ldr	r3, [r3, #20]
 800265a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800265e:	2300      	movs	r3, #0
 8002660:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002664:	2300      	movs	r3, #0
 8002666:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800266a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800266e:	f003 030f 	and.w	r3, r3, #15
 8002672:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002676:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800267a:	2b00      	cmp	r3, #0
 800267c:	d10f      	bne.n	800269e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800267e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002682:	f003 0320 	and.w	r3, r3, #32
 8002686:	2b00      	cmp	r3, #0
 8002688:	d009      	beq.n	800269e <HAL_UART_IRQHandler+0x66>
 800268a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800268e:	f003 0320 	and.w	r3, r3, #32
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 fbd1 	bl	8002e3e <UART_Receive_IT>
      return;
 800269c:	e25b      	b.n	8002b56 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800269e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f000 80de 	beq.w	8002864 <HAL_UART_IRQHandler+0x22c>
 80026a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80026ac:	f003 0301 	and.w	r3, r3, #1
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d106      	bne.n	80026c2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80026b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026b8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80026bc:	2b00      	cmp	r3, #0
 80026be:	f000 80d1 	beq.w	8002864 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80026c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d00b      	beq.n	80026e6 <HAL_UART_IRQHandler+0xae>
 80026ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d005      	beq.n	80026e6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026de:	f043 0201 	orr.w	r2, r3, #1
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026ea:	f003 0304 	and.w	r3, r3, #4
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d00b      	beq.n	800270a <HAL_UART_IRQHandler+0xd2>
 80026f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d005      	beq.n	800270a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002702:	f043 0202 	orr.w	r2, r3, #2
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800270a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d00b      	beq.n	800272e <HAL_UART_IRQHandler+0xf6>
 8002716:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	2b00      	cmp	r3, #0
 8002720:	d005      	beq.n	800272e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002726:	f043 0204 	orr.w	r2, r3, #4
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800272e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002732:	f003 0308 	and.w	r3, r3, #8
 8002736:	2b00      	cmp	r3, #0
 8002738:	d011      	beq.n	800275e <HAL_UART_IRQHandler+0x126>
 800273a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800273e:	f003 0320 	and.w	r3, r3, #32
 8002742:	2b00      	cmp	r3, #0
 8002744:	d105      	bne.n	8002752 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002746:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	2b00      	cmp	r3, #0
 8002750:	d005      	beq.n	800275e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002756:	f043 0208 	orr.w	r2, r3, #8
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002762:	2b00      	cmp	r3, #0
 8002764:	f000 81f2 	beq.w	8002b4c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002768:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800276c:	f003 0320 	and.w	r3, r3, #32
 8002770:	2b00      	cmp	r3, #0
 8002772:	d008      	beq.n	8002786 <HAL_UART_IRQHandler+0x14e>
 8002774:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002778:	f003 0320 	and.w	r3, r3, #32
 800277c:	2b00      	cmp	r3, #0
 800277e:	d002      	beq.n	8002786 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f000 fb5c 	bl	8002e3e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	695b      	ldr	r3, [r3, #20]
 800278c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002790:	2b00      	cmp	r3, #0
 8002792:	bf14      	ite	ne
 8002794:	2301      	movne	r3, #1
 8002796:	2300      	moveq	r3, #0
 8002798:	b2db      	uxtb	r3, r3
 800279a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a2:	f003 0308 	and.w	r3, r3, #8
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d103      	bne.n	80027b2 <HAL_UART_IRQHandler+0x17a>
 80027aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d04f      	beq.n	8002852 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f000 fa66 	bl	8002c84 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	695b      	ldr	r3, [r3, #20]
 80027be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d041      	beq.n	800284a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	3314      	adds	r3, #20
 80027cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80027d4:	e853 3f00 	ldrex	r3, [r3]
 80027d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80027dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80027e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80027e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	3314      	adds	r3, #20
 80027ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80027f2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80027f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80027fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002802:	e841 2300 	strex	r3, r2, [r1]
 8002806:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800280a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d1d9      	bne.n	80027c6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002816:	2b00      	cmp	r3, #0
 8002818:	d013      	beq.n	8002842 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800281e:	4a7e      	ldr	r2, [pc, #504]	; (8002a18 <HAL_UART_IRQHandler+0x3e0>)
 8002820:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002826:	4618      	mov	r0, r3
 8002828:	f7fe fa6e 	bl	8000d08 <HAL_DMA_Abort_IT>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d016      	beq.n	8002860 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800283c:	4610      	mov	r0, r2
 800283e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002840:	e00e      	b.n	8002860 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f000 f99c 	bl	8002b80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002848:	e00a      	b.n	8002860 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 f998 	bl	8002b80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002850:	e006      	b.n	8002860 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f000 f994 	bl	8002b80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800285e:	e175      	b.n	8002b4c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002860:	bf00      	nop
    return;
 8002862:	e173      	b.n	8002b4c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002868:	2b01      	cmp	r3, #1
 800286a:	f040 814f 	bne.w	8002b0c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800286e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002872:	f003 0310 	and.w	r3, r3, #16
 8002876:	2b00      	cmp	r3, #0
 8002878:	f000 8148 	beq.w	8002b0c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800287c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002880:	f003 0310 	and.w	r3, r3, #16
 8002884:	2b00      	cmp	r3, #0
 8002886:	f000 8141 	beq.w	8002b0c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800288a:	2300      	movs	r3, #0
 800288c:	60bb      	str	r3, [r7, #8]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	60bb      	str	r3, [r7, #8]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	60bb      	str	r3, [r7, #8]
 800289e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	f000 80b6 	beq.w	8002a1c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80028bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	f000 8145 	beq.w	8002b50 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80028ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80028ce:	429a      	cmp	r2, r3
 80028d0:	f080 813e 	bcs.w	8002b50 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80028da:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028e0:	699b      	ldr	r3, [r3, #24]
 80028e2:	2b20      	cmp	r3, #32
 80028e4:	f000 8088 	beq.w	80029f8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	330c      	adds	r3, #12
 80028ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80028f6:	e853 3f00 	ldrex	r3, [r3]
 80028fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80028fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002902:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002906:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	330c      	adds	r3, #12
 8002910:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002914:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002918:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800291c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002920:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002924:	e841 2300 	strex	r3, r2, [r1]
 8002928:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800292c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002930:	2b00      	cmp	r3, #0
 8002932:	d1d9      	bne.n	80028e8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	3314      	adds	r3, #20
 800293a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800293c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800293e:	e853 3f00 	ldrex	r3, [r3]
 8002942:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002944:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002946:	f023 0301 	bic.w	r3, r3, #1
 800294a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	3314      	adds	r3, #20
 8002954:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002958:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800295c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800295e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002960:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002964:	e841 2300 	strex	r3, r2, [r1]
 8002968:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800296a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800296c:	2b00      	cmp	r3, #0
 800296e:	d1e1      	bne.n	8002934 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	3314      	adds	r3, #20
 8002976:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002978:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800297a:	e853 3f00 	ldrex	r3, [r3]
 800297e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002980:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002982:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002986:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	3314      	adds	r3, #20
 8002990:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002994:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002996:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002998:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800299a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800299c:	e841 2300 	strex	r3, r2, [r1]
 80029a0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80029a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d1e3      	bne.n	8002970 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2220      	movs	r2, #32
 80029ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	330c      	adds	r3, #12
 80029bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029c0:	e853 3f00 	ldrex	r3, [r3]
 80029c4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80029c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029c8:	f023 0310 	bic.w	r3, r3, #16
 80029cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	330c      	adds	r3, #12
 80029d6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80029da:	65ba      	str	r2, [r7, #88]	; 0x58
 80029dc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029de:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80029e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80029e2:	e841 2300 	strex	r3, r2, [r1]
 80029e6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80029e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d1e3      	bne.n	80029b6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7fe f94d 	bl	8000c92 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2202      	movs	r2, #2
 80029fc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f000 f8bf 	bl	8002b92 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002a14:	e09c      	b.n	8002b50 <HAL_UART_IRQHandler+0x518>
 8002a16:	bf00      	nop
 8002a18:	08002d49 	.word	0x08002d49
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	f000 808e 	beq.w	8002b54 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002a38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	f000 8089 	beq.w	8002b54 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	330c      	adds	r3, #12
 8002a48:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a4c:	e853 3f00 	ldrex	r3, [r3]
 8002a50:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002a58:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	330c      	adds	r3, #12
 8002a62:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002a66:	647a      	str	r2, [r7, #68]	; 0x44
 8002a68:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a6a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002a6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a6e:	e841 2300 	strex	r3, r2, [r1]
 8002a72:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002a74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d1e3      	bne.n	8002a42 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	3314      	adds	r3, #20
 8002a80:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a84:	e853 3f00 	ldrex	r3, [r3]
 8002a88:	623b      	str	r3, [r7, #32]
   return(result);
 8002a8a:	6a3b      	ldr	r3, [r7, #32]
 8002a8c:	f023 0301 	bic.w	r3, r3, #1
 8002a90:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	3314      	adds	r3, #20
 8002a9a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002a9e:	633a      	str	r2, [r7, #48]	; 0x30
 8002aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aa2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002aa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002aa6:	e841 2300 	strex	r3, r2, [r1]
 8002aaa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1e3      	bne.n	8002a7a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2220      	movs	r2, #32
 8002ab6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	330c      	adds	r3, #12
 8002ac6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	e853 3f00 	ldrex	r3, [r3]
 8002ace:	60fb      	str	r3, [r7, #12]
   return(result);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f023 0310 	bic.w	r3, r3, #16
 8002ad6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	330c      	adds	r3, #12
 8002ae0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002ae4:	61fa      	str	r2, [r7, #28]
 8002ae6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ae8:	69b9      	ldr	r1, [r7, #24]
 8002aea:	69fa      	ldr	r2, [r7, #28]
 8002aec:	e841 2300 	strex	r3, r2, [r1]
 8002af0:	617b      	str	r3, [r7, #20]
   return(result);
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d1e3      	bne.n	8002ac0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2202      	movs	r2, #2
 8002afc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002afe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002b02:	4619      	mov	r1, r3
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f000 f844 	bl	8002b92 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002b0a:	e023      	b.n	8002b54 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002b0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d009      	beq.n	8002b2c <HAL_UART_IRQHandler+0x4f4>
 8002b18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d003      	beq.n	8002b2c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f000 f923 	bl	8002d70 <UART_Transmit_IT>
    return;
 8002b2a:	e014      	b.n	8002b56 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002b2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d00e      	beq.n	8002b56 <HAL_UART_IRQHandler+0x51e>
 8002b38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d008      	beq.n	8002b56 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f000 f962 	bl	8002e0e <UART_EndTransmit_IT>
    return;
 8002b4a:	e004      	b.n	8002b56 <HAL_UART_IRQHandler+0x51e>
    return;
 8002b4c:	bf00      	nop
 8002b4e:	e002      	b.n	8002b56 <HAL_UART_IRQHandler+0x51e>
      return;
 8002b50:	bf00      	nop
 8002b52:	e000      	b.n	8002b56 <HAL_UART_IRQHandler+0x51e>
      return;
 8002b54:	bf00      	nop
  }
}
 8002b56:	37e8      	adds	r7, #232	; 0xe8
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002b64:	bf00      	nop
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bc80      	pop	{r7}
 8002b6c:	4770      	bx	lr

08002b6e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	b083      	sub	sp, #12
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002b76:	bf00      	nop
 8002b78:	370c      	adds	r7, #12
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bc80      	pop	{r7}
 8002b7e:	4770      	bx	lr

08002b80 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002b88:	bf00      	nop
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bc80      	pop	{r7}
 8002b90:	4770      	bx	lr

08002b92 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002b92:	b480      	push	{r7}
 8002b94:	b083      	sub	sp, #12
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
 8002b9a:	460b      	mov	r3, r1
 8002b9c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002b9e:	bf00      	nop
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bc80      	pop	{r7}
 8002ba6:	4770      	bx	lr

08002ba8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b090      	sub	sp, #64	; 0x40
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	603b      	str	r3, [r7, #0]
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bb8:	e050      	b.n	8002c5c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc0:	d04c      	beq.n	8002c5c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002bc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d007      	beq.n	8002bd8 <UART_WaitOnFlagUntilTimeout+0x30>
 8002bc8:	f7fd ff28 	bl	8000a1c <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d241      	bcs.n	8002c5c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	330c      	adds	r3, #12
 8002bde:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be2:	e853 3f00 	ldrex	r3, [r3]
 8002be6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002bee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	330c      	adds	r3, #12
 8002bf6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002bf8:	637a      	str	r2, [r7, #52]	; 0x34
 8002bfa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bfc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002bfe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c00:	e841 2300 	strex	r3, r2, [r1]
 8002c04:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d1e5      	bne.n	8002bd8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	3314      	adds	r3, #20
 8002c12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	e853 3f00 	ldrex	r3, [r3]
 8002c1a:	613b      	str	r3, [r7, #16]
   return(result);
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	f023 0301 	bic.w	r3, r3, #1
 8002c22:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	3314      	adds	r3, #20
 8002c2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c2c:	623a      	str	r2, [r7, #32]
 8002c2e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c30:	69f9      	ldr	r1, [r7, #28]
 8002c32:	6a3a      	ldr	r2, [r7, #32]
 8002c34:	e841 2300 	strex	r3, r2, [r1]
 8002c38:	61bb      	str	r3, [r7, #24]
   return(result);
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d1e5      	bne.n	8002c0c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2220      	movs	r2, #32
 8002c44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2220      	movs	r2, #32
 8002c4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e00f      	b.n	8002c7c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	4013      	ands	r3, r2
 8002c66:	68ba      	ldr	r2, [r7, #8]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	bf0c      	ite	eq
 8002c6c:	2301      	moveq	r3, #1
 8002c6e:	2300      	movne	r3, #0
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	461a      	mov	r2, r3
 8002c74:	79fb      	ldrb	r3, [r7, #7]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d09f      	beq.n	8002bba <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c7a:	2300      	movs	r3, #0
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3740      	adds	r7, #64	; 0x40
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b095      	sub	sp, #84	; 0x54
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	330c      	adds	r3, #12
 8002c92:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c96:	e853 3f00 	ldrex	r3, [r3]
 8002c9a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c9e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002ca2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	330c      	adds	r3, #12
 8002caa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002cac:	643a      	str	r2, [r7, #64]	; 0x40
 8002cae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cb0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002cb2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002cb4:	e841 2300 	strex	r3, r2, [r1]
 8002cb8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d1e5      	bne.n	8002c8c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	3314      	adds	r3, #20
 8002cc6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cc8:	6a3b      	ldr	r3, [r7, #32]
 8002cca:	e853 3f00 	ldrex	r3, [r3]
 8002cce:	61fb      	str	r3, [r7, #28]
   return(result);
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	f023 0301 	bic.w	r3, r3, #1
 8002cd6:	64bb      	str	r3, [r7, #72]	; 0x48
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	3314      	adds	r3, #20
 8002cde:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ce0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ce2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ce4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ce6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ce8:	e841 2300 	strex	r3, r2, [r1]
 8002cec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d1e5      	bne.n	8002cc0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d119      	bne.n	8002d30 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	330c      	adds	r3, #12
 8002d02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	e853 3f00 	ldrex	r3, [r3]
 8002d0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	f023 0310 	bic.w	r3, r3, #16
 8002d12:	647b      	str	r3, [r7, #68]	; 0x44
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	330c      	adds	r3, #12
 8002d1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d1c:	61ba      	str	r2, [r7, #24]
 8002d1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d20:	6979      	ldr	r1, [r7, #20]
 8002d22:	69ba      	ldr	r2, [r7, #24]
 8002d24:	e841 2300 	strex	r3, r2, [r1]
 8002d28:	613b      	str	r3, [r7, #16]
   return(result);
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d1e5      	bne.n	8002cfc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2220      	movs	r2, #32
 8002d34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002d3e:	bf00      	nop
 8002d40:	3754      	adds	r7, #84	; 0x54
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bc80      	pop	{r7}
 8002d46:	4770      	bx	lr

08002d48 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d54:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002d62:	68f8      	ldr	r0, [r7, #12]
 8002d64:	f7ff ff0c 	bl	8002b80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d68:	bf00      	nop
 8002d6a:	3710      	adds	r7, #16
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b085      	sub	sp, #20
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	2b21      	cmp	r3, #33	; 0x21
 8002d82:	d13e      	bne.n	8002e02 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d8c:	d114      	bne.n	8002db8 <UART_Transmit_IT+0x48>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	691b      	ldr	r3, [r3, #16]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d110      	bne.n	8002db8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a1b      	ldr	r3, [r3, #32]
 8002d9a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	881b      	ldrh	r3, [r3, #0]
 8002da0:	461a      	mov	r2, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002daa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a1b      	ldr	r3, [r3, #32]
 8002db0:	1c9a      	adds	r2, r3, #2
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	621a      	str	r2, [r3, #32]
 8002db6:	e008      	b.n	8002dca <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6a1b      	ldr	r3, [r3, #32]
 8002dbc:	1c59      	adds	r1, r3, #1
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	6211      	str	r1, [r2, #32]
 8002dc2:	781a      	ldrb	r2, [r3, #0]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	3b01      	subs	r3, #1
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d10f      	bne.n	8002dfe <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68da      	ldr	r2, [r3, #12]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002dec:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	68da      	ldr	r2, [r3, #12]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002dfc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	e000      	b.n	8002e04 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002e02:	2302      	movs	r3, #2
  }
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3714      	adds	r7, #20
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bc80      	pop	{r7}
 8002e0c:	4770      	bx	lr

08002e0e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b082      	sub	sp, #8
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	68da      	ldr	r2, [r3, #12]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e24:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2220      	movs	r2, #32
 8002e2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f7ff fe94 	bl	8002b5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3708      	adds	r7, #8
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002e3e:	b580      	push	{r7, lr}
 8002e40:	b08c      	sub	sp, #48	; 0x30
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	2b22      	cmp	r3, #34	; 0x22
 8002e50:	f040 80ae 	bne.w	8002fb0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e5c:	d117      	bne.n	8002e8e <UART_Receive_IT+0x50>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d113      	bne.n	8002e8e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002e66:	2300      	movs	r3, #0
 8002e68:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e6e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e7c:	b29a      	uxth	r2, r3
 8002e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e80:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e86:	1c9a      	adds	r2, r3, #2
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	629a      	str	r2, [r3, #40]	; 0x28
 8002e8c:	e026      	b.n	8002edc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e92:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002e94:	2300      	movs	r3, #0
 8002e96:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ea0:	d007      	beq.n	8002eb2 <UART_Receive_IT+0x74>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d10a      	bne.n	8002ec0 <UART_Receive_IT+0x82>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d106      	bne.n	8002ec0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	b2da      	uxtb	r2, r3
 8002eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ebc:	701a      	strb	r2, [r3, #0]
 8002ebe:	e008      	b.n	8002ed2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ecc:	b2da      	uxtb	r2, r3
 8002ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed6:	1c5a      	adds	r2, r3, #1
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	4619      	mov	r1, r3
 8002eea:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d15d      	bne.n	8002fac <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68da      	ldr	r2, [r3, #12]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 0220 	bic.w	r2, r2, #32
 8002efe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68da      	ldr	r2, [r3, #12]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f0e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	695a      	ldr	r2, [r3, #20]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f022 0201 	bic.w	r2, r2, #1
 8002f1e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2220      	movs	r2, #32
 8002f24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d135      	bne.n	8002fa2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	330c      	adds	r3, #12
 8002f42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	e853 3f00 	ldrex	r3, [r3]
 8002f4a:	613b      	str	r3, [r7, #16]
   return(result);
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	f023 0310 	bic.w	r3, r3, #16
 8002f52:	627b      	str	r3, [r7, #36]	; 0x24
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	330c      	adds	r3, #12
 8002f5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f5c:	623a      	str	r2, [r7, #32]
 8002f5e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f60:	69f9      	ldr	r1, [r7, #28]
 8002f62:	6a3a      	ldr	r2, [r7, #32]
 8002f64:	e841 2300 	strex	r3, r2, [r1]
 8002f68:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d1e5      	bne.n	8002f3c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0310 	and.w	r3, r3, #16
 8002f7a:	2b10      	cmp	r3, #16
 8002f7c:	d10a      	bne.n	8002f94 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f7e:	2300      	movs	r3, #0
 8002f80:	60fb      	str	r3, [r7, #12]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	60fb      	str	r3, [r7, #12]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	60fb      	str	r3, [r7, #12]
 8002f92:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002f98:	4619      	mov	r1, r3
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f7ff fdf9 	bl	8002b92 <HAL_UARTEx_RxEventCallback>
 8002fa0:	e002      	b.n	8002fa8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f7ff fde3 	bl	8002b6e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	e002      	b.n	8002fb2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002fac:	2300      	movs	r3, #0
 8002fae:	e000      	b.n	8002fb2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002fb0:	2302      	movs	r3, #2
  }
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3730      	adds	r7, #48	; 0x30
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
	...

08002fbc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	68da      	ldr	r2, [r3, #12]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	689a      	ldr	r2, [r3, #8]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	431a      	orrs	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	695b      	ldr	r3, [r3, #20]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002ff6:	f023 030c 	bic.w	r3, r3, #12
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	6812      	ldr	r2, [r2, #0]
 8002ffe:	68b9      	ldr	r1, [r7, #8]
 8003000:	430b      	orrs	r3, r1
 8003002:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	695b      	ldr	r3, [r3, #20]
 800300a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	699a      	ldr	r2, [r3, #24]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	430a      	orrs	r2, r1
 8003018:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a2c      	ldr	r2, [pc, #176]	; (80030d0 <UART_SetConfig+0x114>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d103      	bne.n	800302c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003024:	f7fe fc7a 	bl	800191c <HAL_RCC_GetPCLK2Freq>
 8003028:	60f8      	str	r0, [r7, #12]
 800302a:	e002      	b.n	8003032 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800302c:	f7fe fc62 	bl	80018f4 <HAL_RCC_GetPCLK1Freq>
 8003030:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003032:	68fa      	ldr	r2, [r7, #12]
 8003034:	4613      	mov	r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	4413      	add	r3, r2
 800303a:	009a      	lsls	r2, r3, #2
 800303c:	441a      	add	r2, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	fbb2 f3f3 	udiv	r3, r2, r3
 8003048:	4a22      	ldr	r2, [pc, #136]	; (80030d4 <UART_SetConfig+0x118>)
 800304a:	fba2 2303 	umull	r2, r3, r2, r3
 800304e:	095b      	lsrs	r3, r3, #5
 8003050:	0119      	lsls	r1, r3, #4
 8003052:	68fa      	ldr	r2, [r7, #12]
 8003054:	4613      	mov	r3, r2
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	4413      	add	r3, r2
 800305a:	009a      	lsls	r2, r3, #2
 800305c:	441a      	add	r2, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	fbb2 f2f3 	udiv	r2, r2, r3
 8003068:	4b1a      	ldr	r3, [pc, #104]	; (80030d4 <UART_SetConfig+0x118>)
 800306a:	fba3 0302 	umull	r0, r3, r3, r2
 800306e:	095b      	lsrs	r3, r3, #5
 8003070:	2064      	movs	r0, #100	; 0x64
 8003072:	fb00 f303 	mul.w	r3, r0, r3
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	011b      	lsls	r3, r3, #4
 800307a:	3332      	adds	r3, #50	; 0x32
 800307c:	4a15      	ldr	r2, [pc, #84]	; (80030d4 <UART_SetConfig+0x118>)
 800307e:	fba2 2303 	umull	r2, r3, r2, r3
 8003082:	095b      	lsrs	r3, r3, #5
 8003084:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003088:	4419      	add	r1, r3
 800308a:	68fa      	ldr	r2, [r7, #12]
 800308c:	4613      	mov	r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	4413      	add	r3, r2
 8003092:	009a      	lsls	r2, r3, #2
 8003094:	441a      	add	r2, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	fbb2 f2f3 	udiv	r2, r2, r3
 80030a0:	4b0c      	ldr	r3, [pc, #48]	; (80030d4 <UART_SetConfig+0x118>)
 80030a2:	fba3 0302 	umull	r0, r3, r3, r2
 80030a6:	095b      	lsrs	r3, r3, #5
 80030a8:	2064      	movs	r0, #100	; 0x64
 80030aa:	fb00 f303 	mul.w	r3, r0, r3
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	011b      	lsls	r3, r3, #4
 80030b2:	3332      	adds	r3, #50	; 0x32
 80030b4:	4a07      	ldr	r2, [pc, #28]	; (80030d4 <UART_SetConfig+0x118>)
 80030b6:	fba2 2303 	umull	r2, r3, r2, r3
 80030ba:	095b      	lsrs	r3, r3, #5
 80030bc:	f003 020f 	and.w	r2, r3, #15
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	440a      	add	r2, r1
 80030c6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80030c8:	bf00      	nop
 80030ca:	3710      	adds	r7, #16
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	40013800 	.word	0x40013800
 80030d4:	51eb851f 	.word	0x51eb851f

080030d8 <cs_high>:
 * 
 */

#include "nrf24l01p.h"

static void cs_high() {
 80030d8:	b580      	push	{r7, lr}
 80030da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER,
 80030dc:	2201      	movs	r2, #1
 80030de:	2108      	movs	r1, #8
 80030e0:	4802      	ldr	r0, [pc, #8]	; (80030ec <cs_high+0x14>)
 80030e2:	f7fe f80d 	bl	8001100 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
}
 80030e6:	bf00      	nop
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	40010800 	.word	0x40010800

080030f0 <cs_low>:

static void cs_low() {
 80030f0:	b580      	push	{r7, lr}
 80030f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER,
 80030f4:	2200      	movs	r2, #0
 80030f6:	2108      	movs	r1, #8
 80030f8:	4802      	ldr	r0, [pc, #8]	; (8003104 <cs_low+0x14>)
 80030fa:	f7fe f801 	bl	8001100 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
}
 80030fe:	bf00      	nop
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	40010800 	.word	0x40010800

08003108 <ce_high>:

static void ce_high() {
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER,
 800310c:	2201      	movs	r2, #1
 800310e:	2110      	movs	r1, #16
 8003110:	4802      	ldr	r0, [pc, #8]	; (800311c <ce_high+0x14>)
 8003112:	f7fd fff5 	bl	8001100 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
}
 8003116:	bf00      	nop
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	40010800 	.word	0x40010800

08003120 <ce_low>:

static void ce_low() {
 8003120:	b580      	push	{r7, lr}
 8003122:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER,
 8003124:	2200      	movs	r2, #0
 8003126:	2110      	movs	r1, #16
 8003128:	4802      	ldr	r0, [pc, #8]	; (8003134 <ce_low+0x14>)
 800312a:	f7fd ffe9 	bl	8001100 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
}
 800312e:	bf00      	nop
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	40010800 	.word	0x40010800

08003138 <read_register>:

uint8_t read_register(uint8_t reg) {
 8003138:	b580      	push	{r7, lr}
 800313a:	b086      	sub	sp, #24
 800313c:	af02      	add	r7, sp, #8
 800313e:	4603      	mov	r3, r0
 8003140:	71fb      	strb	r3, [r7, #7]
	uint8_t command = NRF24L01P_CMD_R_REGISTER | reg;
 8003142:	79fb      	ldrb	r3, [r7, #7]
 8003144:	73fb      	strb	r3, [r7, #15]
	uint8_t status;
	uint8_t read_val;

	cs_low();
 8003146:	f7ff ffd3 	bl	80030f0 <cs_low>
	HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 800314a:	f107 020e 	add.w	r2, r7, #14
 800314e:	f107 010f 	add.w	r1, r7, #15
 8003152:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003156:	9300      	str	r3, [sp, #0]
 8003158:	2301      	movs	r3, #1
 800315a:	4809      	ldr	r0, [pc, #36]	; (8003180 <read_register+0x48>)
 800315c:	f7fe feef 	bl	8001f3e <HAL_SPI_TransmitReceive>
	HAL_SPI_Receive(NRF24L01P_SPI, &read_val, 1, 2000);
 8003160:	f107 010d 	add.w	r1, r7, #13
 8003164:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003168:	2201      	movs	r2, #1
 800316a:	4805      	ldr	r0, [pc, #20]	; (8003180 <read_register+0x48>)
 800316c:	f7fe fdcf 	bl	8001d0e <HAL_SPI_Receive>
	cs_high();
 8003170:	f7ff ffb2 	bl	80030d8 <cs_high>

	return read_val;
 8003174:	7b7b      	ldrb	r3, [r7, #13]
}
 8003176:	4618      	mov	r0, r3
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	20000038 	.word	0x20000038

08003184 <write_register>:

static uint8_t write_register(uint8_t reg, uint8_t value) {
 8003184:	b580      	push	{r7, lr}
 8003186:	b086      	sub	sp, #24
 8003188:	af02      	add	r7, sp, #8
 800318a:	4603      	mov	r3, r0
 800318c:	460a      	mov	r2, r1
 800318e:	71fb      	strb	r3, [r7, #7]
 8003190:	4613      	mov	r3, r2
 8003192:	71bb      	strb	r3, [r7, #6]
	uint8_t command = NRF24L01P_CMD_W_REGISTER | reg;
 8003194:	79fb      	ldrb	r3, [r7, #7]
 8003196:	f043 0320 	orr.w	r3, r3, #32
 800319a:	b2db      	uxtb	r3, r3
 800319c:	73fb      	strb	r3, [r7, #15]
	uint8_t status;
	uint8_t write_val = value;
 800319e:	79bb      	ldrb	r3, [r7, #6]
 80031a0:	737b      	strb	r3, [r7, #13]

	cs_low();
 80031a2:	f7ff ffa5 	bl	80030f0 <cs_low>
	HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 80031a6:	f107 020e 	add.w	r2, r7, #14
 80031aa:	f107 010f 	add.w	r1, r7, #15
 80031ae:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80031b2:	9300      	str	r3, [sp, #0]
 80031b4:	2301      	movs	r3, #1
 80031b6:	4809      	ldr	r0, [pc, #36]	; (80031dc <write_register+0x58>)
 80031b8:	f7fe fec1 	bl	8001f3e <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(NRF24L01P_SPI, &write_val, 1, 2000);
 80031bc:	f107 010d 	add.w	r1, r7, #13
 80031c0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80031c4:	2201      	movs	r2, #1
 80031c6:	4805      	ldr	r0, [pc, #20]	; (80031dc <write_register+0x58>)
 80031c8:	f7fe fc5e 	bl	8001a88 <HAL_SPI_Transmit>
	cs_high();
 80031cc:	f7ff ff84 	bl	80030d8 <cs_high>

	return write_val;
 80031d0:	7b7b      	ldrb	r3, [r7, #13]
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3710      	adds	r7, #16
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	20000038 	.word	0x20000038

080031e0 <write_register_multi>:

void write_register_multi(uint8_t reg, uint8_t *address) {
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b086      	sub	sp, #24
 80031e4:	af02      	add	r7, sp, #8
 80031e6:	4603      	mov	r3, r0
 80031e8:	6039      	str	r1, [r7, #0]
 80031ea:	71fb      	strb	r3, [r7, #7]
	uint8_t command = NRF24L01P_CMD_W_REGISTER | reg;
 80031ec:	79fb      	ldrb	r3, [r7, #7]
 80031ee:	f043 0320 	orr.w	r3, r3, #32
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	73bb      	strb	r3, [r7, #14]
	uint8_t status;
	uint8_t bytes[5];
	for (uint8_t i = 0; i < 5; i++) {
 80031f6:	2300      	movs	r3, #0
 80031f8:	73fb      	strb	r3, [r7, #15]
 80031fa:	e00b      	b.n	8003214 <write_register_multi+0x34>
		bytes[i] = address [i];
 80031fc:	7bfb      	ldrb	r3, [r7, #15]
 80031fe:	683a      	ldr	r2, [r7, #0]
 8003200:	441a      	add	r2, r3
 8003202:	7bfb      	ldrb	r3, [r7, #15]
 8003204:	7812      	ldrb	r2, [r2, #0]
 8003206:	3310      	adds	r3, #16
 8003208:	443b      	add	r3, r7
 800320a:	f803 2c08 	strb.w	r2, [r3, #-8]
	for (uint8_t i = 0; i < 5; i++) {
 800320e:	7bfb      	ldrb	r3, [r7, #15]
 8003210:	3301      	adds	r3, #1
 8003212:	73fb      	strb	r3, [r7, #15]
 8003214:	7bfb      	ldrb	r3, [r7, #15]
 8003216:	2b04      	cmp	r3, #4
 8003218:	d9f0      	bls.n	80031fc <write_register_multi+0x1c>
	}
	cs_low();
 800321a:	f7ff ff69 	bl	80030f0 <cs_low>
	HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 800321e:	f107 020d 	add.w	r2, r7, #13
 8003222:	f107 010e 	add.w	r1, r7, #14
 8003226:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800322a:	9300      	str	r3, [sp, #0]
 800322c:	2301      	movs	r3, #1
 800322e:	4808      	ldr	r0, [pc, #32]	; (8003250 <write_register_multi+0x70>)
 8003230:	f7fe fe85 	bl	8001f3e <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(NRF24L01P_SPI, bytes, 5, 2000);
 8003234:	f107 0108 	add.w	r1, r7, #8
 8003238:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800323c:	2205      	movs	r2, #5
 800323e:	4804      	ldr	r0, [pc, #16]	; (8003250 <write_register_multi+0x70>)
 8003240:	f7fe fc22 	bl	8001a88 <HAL_SPI_Transmit>
	cs_high();
 8003244:	f7ff ff48 	bl	80030d8 <cs_high>

	// return address;
}
 8003248:	bf00      	nop
 800324a:	3710      	adds	r7, #16
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	20000038 	.word	0x20000038

08003254 <nrf24l01p_rx_init>:

/* nRF24L01+ Main Functions */
void nrf24l01p_rx_init(channel MHz, air_data_rate bps,uint8_t* address1,uint8_t* address2) {
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	60ba      	str	r2, [r7, #8]
 800325c:	607b      	str	r3, [r7, #4]
 800325e:	4603      	mov	r3, r0
 8003260:	81fb      	strh	r3, [r7, #14]
 8003262:	460b      	mov	r3, r1
 8003264:	737b      	strb	r3, [r7, #13]
	nrf24l01p_reset();
 8003266:	f000 f844 	bl	80032f2 <nrf24l01p_reset>

	nrf24l01p_prx_mode();
 800326a:	f000 f892 	bl	8003392 <nrf24l01p_prx_mode>
	nrf24l01p_power_up();
 800326e:	f000 f977 	bl	8003560 <nrf24l01p_power_up>

	nrf24l01p_rx_set_payload_widths(NRF24L01P_PAYLOAD_LENGTH);
 8003272:	2020      	movs	r0, #32
 8003274:	f000 f952 	bl	800351c <nrf24l01p_rx_set_payload_widths>

	nrf24l01p_set_rf_channel(MHz);
 8003278:	89fb      	ldrh	r3, [r7, #14]
 800327a:	4618      	mov	r0, r3
 800327c:	f000 f9fc 	bl	8003678 <nrf24l01p_set_rf_channel>
	nrf24l01p_set_rf_air_data_rate(bps);
 8003280:	7b7b      	ldrb	r3, [r7, #13]
 8003282:	4618      	mov	r0, r3
 8003284:	f000 fa28 	bl	80036d8 <nrf24l01p_set_rf_air_data_rate>
	nrf24l01p_set_rf_tx_output_power(_0dBm);
 8003288:	2003      	movs	r0, #3
 800328a:	f000 fa08 	bl	800369e <nrf24l01p_set_rf_tx_output_power>

	nrf24l01p_set_crc_length(1);
 800328e:	2001      	movs	r0, #1
 8003290:	f000 f97b 	bl	800358a <nrf24l01p_set_crc_length>
	nrf24l01p_set_address_widths(5);
 8003294:	2005      	movs	r0, #5
 8003296:	f000 f99b 	bl	80035d0 <nrf24l01p_set_address_widths>

	write_register_multi(NRF24L01P_REG_RX_ADDR_P0,address1);
 800329a:	68b9      	ldr	r1, [r7, #8]
 800329c:	200a      	movs	r0, #10
 800329e:	f7ff ff9f 	bl	80031e0 <write_register_multi>
	write_register_multi(NRF24L01P_REG_TX_ADDR,address2);
 80032a2:	6879      	ldr	r1, [r7, #4]
 80032a4:	2010      	movs	r0, #16
 80032a6:	f7ff ff9b 	bl	80031e0 <write_register_multi>

	nrf24l01p_auto_retransmit_count(3);
 80032aa:	2003      	movs	r0, #3
 80032ac:	f000 f9a0 	bl	80035f0 <nrf24l01p_auto_retransmit_count>
	nrf24l01p_auto_retransmit_delay(250);
 80032b0:	20fa      	movs	r0, #250	; 0xfa
 80032b2:	f000 f9b9 	bl	8003628 <nrf24l01p_auto_retransmit_delay>

	ce_high();
 80032b6:	f7ff ff27 	bl	8003108 <ce_high>
}
 80032ba:	bf00      	nop
 80032bc:	3710      	adds	r7, #16
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <nrf24l01p_rx_receive>:
	nrf24l01p_auto_retransmit_delay(250);

	ce_high();
}

void nrf24l01p_rx_receive(uint8_t *rx_payload) {
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b082      	sub	sp, #8
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
	nrf24l01p_read_rx_fifo(rx_payload);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f000 f894 	bl	80033f8 <nrf24l01p_read_rx_fifo>
	nrf24l01p_clear_rx_dr();
 80032d0:	f000 f932 	bl	8003538 <nrf24l01p_clear_rx_dr>

	//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
}
 80032d4:	bf00      	nop
 80032d6:	3708      	adds	r7, #8
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <nrf24l01p_tx_transmit>:

void nrf24l01p_tx_transmit(uint8_t *tx_payload) {
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
	nrf24l01p_write_tx_fifo(tx_payload);
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f000 f8ab 	bl	8003440 <nrf24l01p_write_tx_fifo>
}
 80032ea:	bf00      	nop
 80032ec:	3708      	adds	r7, #8
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}

080032f2 <nrf24l01p_reset>:
		nrf24l01p_clear_max_rt();
	}
}

/* nRF24L01+ Sub Functions */
void nrf24l01p_reset() {
 80032f2:	b580      	push	{r7, lr}
 80032f4:	af00      	add	r7, sp, #0
	// Reset pins
	cs_high();
 80032f6:	f7ff feef 	bl	80030d8 <cs_high>
	ce_low();
 80032fa:	f7ff ff11 	bl	8003120 <ce_low>

	// Reset registers
	write_register(NRF24L01P_REG_CONFIG, 0x08);
 80032fe:	2108      	movs	r1, #8
 8003300:	2000      	movs	r0, #0
 8003302:	f7ff ff3f 	bl	8003184 <write_register>
	write_register(NRF24L01P_REG_EN_AA, 0x3F);
 8003306:	213f      	movs	r1, #63	; 0x3f
 8003308:	2001      	movs	r0, #1
 800330a:	f7ff ff3b 	bl	8003184 <write_register>
	write_register(NRF24L01P_REG_EN_RXADDR, 0x03);
 800330e:	2103      	movs	r1, #3
 8003310:	2002      	movs	r0, #2
 8003312:	f7ff ff37 	bl	8003184 <write_register>
	write_register(NRF24L01P_REG_SETUP_AW, 0x03);
 8003316:	2103      	movs	r1, #3
 8003318:	2003      	movs	r0, #3
 800331a:	f7ff ff33 	bl	8003184 <write_register>
	write_register(NRF24L01P_REG_SETUP_RETR, 0x03);
 800331e:	2103      	movs	r1, #3
 8003320:	2004      	movs	r0, #4
 8003322:	f7ff ff2f 	bl	8003184 <write_register>
	write_register(NRF24L01P_REG_RF_CH, 0x02);
 8003326:	2102      	movs	r1, #2
 8003328:	2005      	movs	r0, #5
 800332a:	f7ff ff2b 	bl	8003184 <write_register>
	write_register(NRF24L01P_REG_RF_SETUP, 0x07);
 800332e:	2107      	movs	r1, #7
 8003330:	2006      	movs	r0, #6
 8003332:	f7ff ff27 	bl	8003184 <write_register>
	write_register(NRF24L01P_REG_STATUS, 0x7E);
 8003336:	217e      	movs	r1, #126	; 0x7e
 8003338:	2007      	movs	r0, #7
 800333a:	f7ff ff23 	bl	8003184 <write_register>
	write_register(NRF24L01P_REG_RX_PW_P0, 0x20);
 800333e:	2120      	movs	r1, #32
 8003340:	2011      	movs	r0, #17
 8003342:	f7ff ff1f 	bl	8003184 <write_register>
	write_register(NRF24L01P_REG_RX_PW_P1, 0x20);
 8003346:	2120      	movs	r1, #32
 8003348:	2012      	movs	r0, #18
 800334a:	f7ff ff1b 	bl	8003184 <write_register>
	write_register(NRF24L01P_REG_RX_PW_P2, 0x00);
 800334e:	2100      	movs	r1, #0
 8003350:	2013      	movs	r0, #19
 8003352:	f7ff ff17 	bl	8003184 <write_register>
	write_register(NRF24L01P_REG_RX_PW_P3, 0x00);
 8003356:	2100      	movs	r1, #0
 8003358:	2014      	movs	r0, #20
 800335a:	f7ff ff13 	bl	8003184 <write_register>
	write_register(NRF24L01P_REG_RX_PW_P4, 0x00);
 800335e:	2100      	movs	r1, #0
 8003360:	2015      	movs	r0, #21
 8003362:	f7ff ff0f 	bl	8003184 <write_register>
	write_register(NRF24L01P_REG_RX_PW_P5, 0x00);
 8003366:	2100      	movs	r1, #0
 8003368:	2016      	movs	r0, #22
 800336a:	f7ff ff0b 	bl	8003184 <write_register>
	write_register(NRF24L01P_REG_FIFO_STATUS, 0x11);
 800336e:	2111      	movs	r1, #17
 8003370:	2017      	movs	r0, #23
 8003372:	f7ff ff07 	bl	8003184 <write_register>
	write_register(NRF24L01P_REG_DYNPD, 0x00);
 8003376:	2100      	movs	r1, #0
 8003378:	201c      	movs	r0, #28
 800337a:	f7ff ff03 	bl	8003184 <write_register>
	write_register(NRF24L01P_REG_FEATURE, 0x00);
 800337e:	2100      	movs	r1, #0
 8003380:	201d      	movs	r0, #29
 8003382:	f7ff feff 	bl	8003184 <write_register>

	// Reset FIFO
	nrf24l01p_flush_rx_fifo();
 8003386:	f000 f87f 	bl	8003488 <nrf24l01p_flush_rx_fifo>
	nrf24l01p_flush_tx_fifo();
 800338a:	f000 f895 	bl	80034b8 <nrf24l01p_flush_tx_fifo>
}
 800338e:	bf00      	nop
 8003390:	bd80      	pop	{r7, pc}

08003392 <nrf24l01p_prx_mode>:

void nrf24l01p_prx_mode() {
 8003392:	b580      	push	{r7, lr}
 8003394:	b082      	sub	sp, #8
 8003396:	af00      	add	r7, sp, #0
	ce_low();
 8003398:	f7ff fec2 	bl	8003120 <ce_low>

	uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 800339c:	2000      	movs	r0, #0
 800339e:	f7ff fecb 	bl	8003138 <read_register>
 80033a2:	4603      	mov	r3, r0
 80033a4:	71fb      	strb	r3, [r7, #7]
	new_config |= 1 << 0;
 80033a6:	79fb      	ldrb	r3, [r7, #7]
 80033a8:	f043 0301 	orr.w	r3, r3, #1
 80033ac:	71fb      	strb	r3, [r7, #7]

	write_register(NRF24L01P_REG_CONFIG, new_config);
 80033ae:	79fb      	ldrb	r3, [r7, #7]
 80033b0:	4619      	mov	r1, r3
 80033b2:	2000      	movs	r0, #0
 80033b4:	f7ff fee6 	bl	8003184 <write_register>

	ce_high();
 80033b8:	f7ff fea6 	bl	8003108 <ce_high>
}
 80033bc:	bf00      	nop
 80033be:	3708      	adds	r7, #8
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <nrf24l01p_ptx_mode>:

void nrf24l01p_ptx_mode() {
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
	ce_low();
 80033ca:	f7ff fea9 	bl	8003120 <ce_low>

	uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 80033ce:	2000      	movs	r0, #0
 80033d0:	f7ff feb2 	bl	8003138 <read_register>
 80033d4:	4603      	mov	r3, r0
 80033d6:	71fb      	strb	r3, [r7, #7]
	new_config &= 0xFE;
 80033d8:	79fb      	ldrb	r3, [r7, #7]
 80033da:	f023 0301 	bic.w	r3, r3, #1
 80033de:	71fb      	strb	r3, [r7, #7]

	write_register(NRF24L01P_REG_CONFIG, new_config);
 80033e0:	79fb      	ldrb	r3, [r7, #7]
 80033e2:	4619      	mov	r1, r3
 80033e4:	2000      	movs	r0, #0
 80033e6:	f7ff fecd 	bl	8003184 <write_register>

	ce_high();
 80033ea:	f7ff fe8d 	bl	8003108 <ce_high>
}
 80033ee:	bf00      	nop
 80033f0:	3708      	adds	r7, #8
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
	...

080033f8 <nrf24l01p_read_rx_fifo>:

uint8_t nrf24l01p_read_rx_fifo(uint8_t *rx_payload) {
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b086      	sub	sp, #24
 80033fc:	af02      	add	r7, sp, #8
 80033fe:	6078      	str	r0, [r7, #4]
	uint8_t command = NRF24L01P_CMD_R_RX_PAYLOAD;
 8003400:	2361      	movs	r3, #97	; 0x61
 8003402:	73fb      	strb	r3, [r7, #15]
	uint8_t status;

	cs_low();
 8003404:	f7ff fe74 	bl	80030f0 <cs_low>
	HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8003408:	f107 020e 	add.w	r2, r7, #14
 800340c:	f107 010f 	add.w	r1, r7, #15
 8003410:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003414:	9300      	str	r3, [sp, #0]
 8003416:	2301      	movs	r3, #1
 8003418:	4808      	ldr	r0, [pc, #32]	; (800343c <nrf24l01p_read_rx_fifo+0x44>)
 800341a:	f7fe fd90 	bl	8001f3e <HAL_SPI_TransmitReceive>
	HAL_SPI_Receive(NRF24L01P_SPI, rx_payload, NRF24L01P_PAYLOAD_LENGTH, 2000);
 800341e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003422:	2220      	movs	r2, #32
 8003424:	6879      	ldr	r1, [r7, #4]
 8003426:	4805      	ldr	r0, [pc, #20]	; (800343c <nrf24l01p_read_rx_fifo+0x44>)
 8003428:	f7fe fc71 	bl	8001d0e <HAL_SPI_Receive>
	cs_high();
 800342c:	f7ff fe54 	bl	80030d8 <cs_high>

	return status;
 8003430:	7bbb      	ldrb	r3, [r7, #14]
}
 8003432:	4618      	mov	r0, r3
 8003434:	3710      	adds	r7, #16
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	20000038 	.word	0x20000038

08003440 <nrf24l01p_write_tx_fifo>:

uint8_t nrf24l01p_write_tx_fifo(uint8_t *tx_payload) {
 8003440:	b580      	push	{r7, lr}
 8003442:	b086      	sub	sp, #24
 8003444:	af02      	add	r7, sp, #8
 8003446:	6078      	str	r0, [r7, #4]
	uint8_t command = NRF24L01P_CMD_W_TX_PAYLOAD;
 8003448:	23a0      	movs	r3, #160	; 0xa0
 800344a:	73fb      	strb	r3, [r7, #15]
	uint8_t status;

	cs_low();
 800344c:	f7ff fe50 	bl	80030f0 <cs_low>
	HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8003450:	f107 020e 	add.w	r2, r7, #14
 8003454:	f107 010f 	add.w	r1, r7, #15
 8003458:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800345c:	9300      	str	r3, [sp, #0]
 800345e:	2301      	movs	r3, #1
 8003460:	4808      	ldr	r0, [pc, #32]	; (8003484 <nrf24l01p_write_tx_fifo+0x44>)
 8003462:	f7fe fd6c 	bl	8001f3e <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(NRF24L01P_SPI, tx_payload, NRF24L01P_PAYLOAD_LENGTH, 2000);
 8003466:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800346a:	2220      	movs	r2, #32
 800346c:	6879      	ldr	r1, [r7, #4]
 800346e:	4805      	ldr	r0, [pc, #20]	; (8003484 <nrf24l01p_write_tx_fifo+0x44>)
 8003470:	f7fe fb0a 	bl	8001a88 <HAL_SPI_Transmit>
	cs_high();
 8003474:	f7ff fe30 	bl	80030d8 <cs_high>

	return status;
 8003478:	7bbb      	ldrb	r3, [r7, #14]
}
 800347a:	4618      	mov	r0, r3
 800347c:	3710      	adds	r7, #16
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	20000038 	.word	0x20000038

08003488 <nrf24l01p_flush_rx_fifo>:

void nrf24l01p_flush_rx_fifo() {
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af02      	add	r7, sp, #8
	uint8_t command = NRF24L01P_CMD_FLUSH_RX;
 800348e:	23e2      	movs	r3, #226	; 0xe2
 8003490:	71fb      	strb	r3, [r7, #7]
	uint8_t status;

	cs_low();
 8003492:	f7ff fe2d 	bl	80030f0 <cs_low>
	HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8003496:	1dba      	adds	r2, r7, #6
 8003498:	1df9      	adds	r1, r7, #7
 800349a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800349e:	9300      	str	r3, [sp, #0]
 80034a0:	2301      	movs	r3, #1
 80034a2:	4804      	ldr	r0, [pc, #16]	; (80034b4 <nrf24l01p_flush_rx_fifo+0x2c>)
 80034a4:	f7fe fd4b 	bl	8001f3e <HAL_SPI_TransmitReceive>
	cs_high();
 80034a8:	f7ff fe16 	bl	80030d8 <cs_high>
}
 80034ac:	bf00      	nop
 80034ae:	3708      	adds	r7, #8
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	20000038 	.word	0x20000038

080034b8 <nrf24l01p_flush_tx_fifo>:

void nrf24l01p_flush_tx_fifo() {
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af02      	add	r7, sp, #8
	uint8_t command = NRF24L01P_CMD_FLUSH_TX;
 80034be:	23e1      	movs	r3, #225	; 0xe1
 80034c0:	71fb      	strb	r3, [r7, #7]
	uint8_t status;

	cs_low();
 80034c2:	f7ff fe15 	bl	80030f0 <cs_low>
	HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 80034c6:	1dba      	adds	r2, r7, #6
 80034c8:	1df9      	adds	r1, r7, #7
 80034ca:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80034ce:	9300      	str	r3, [sp, #0]
 80034d0:	2301      	movs	r3, #1
 80034d2:	4804      	ldr	r0, [pc, #16]	; (80034e4 <nrf24l01p_flush_tx_fifo+0x2c>)
 80034d4:	f7fe fd33 	bl	8001f3e <HAL_SPI_TransmitReceive>
	cs_high();
 80034d8:	f7ff fdfe 	bl	80030d8 <cs_high>
}
 80034dc:	bf00      	nop
 80034de:	3708      	adds	r7, #8
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	20000038 	.word	0x20000038

080034e8 <nrf24l01p_get_status>:

uint8_t nrf24l01p_get_status() {
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af02      	add	r7, sp, #8
	uint8_t command = NRF24L01P_CMD_NOP;
 80034ee:	23ff      	movs	r3, #255	; 0xff
 80034f0:	71fb      	strb	r3, [r7, #7]
	uint8_t status;

	cs_low();
 80034f2:	f7ff fdfd 	bl	80030f0 <cs_low>
	HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 80034f6:	1dba      	adds	r2, r7, #6
 80034f8:	1df9      	adds	r1, r7, #7
 80034fa:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80034fe:	9300      	str	r3, [sp, #0]
 8003500:	2301      	movs	r3, #1
 8003502:	4805      	ldr	r0, [pc, #20]	; (8003518 <nrf24l01p_get_status+0x30>)
 8003504:	f7fe fd1b 	bl	8001f3e <HAL_SPI_TransmitReceive>
	cs_high();
 8003508:	f7ff fde6 	bl	80030d8 <cs_high>

	return status;
 800350c:	79bb      	ldrb	r3, [r7, #6]
}
 800350e:	4618      	mov	r0, r3
 8003510:	3708      	adds	r7, #8
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	20000038 	.word	0x20000038

0800351c <nrf24l01p_rx_set_payload_widths>:

uint8_t nrf24l01p_get_fifo_status() {
	return read_register(NRF24L01P_REG_FIFO_STATUS);
}

void nrf24l01p_rx_set_payload_widths(widths bytes) {
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
 8003522:	4603      	mov	r3, r0
 8003524:	71fb      	strb	r3, [r7, #7]
	write_register(NRF24L01P_REG_RX_PW_P0, bytes);
 8003526:	79fb      	ldrb	r3, [r7, #7]
 8003528:	4619      	mov	r1, r3
 800352a:	2011      	movs	r0, #17
 800352c:	f7ff fe2a 	bl	8003184 <write_register>
}
 8003530:	bf00      	nop
 8003532:	3708      	adds	r7, #8
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <nrf24l01p_clear_rx_dr>:

void nrf24l01p_clear_rx_dr() {
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
	uint8_t new_status = nrf24l01p_get_status();
 800353e:	f7ff ffd3 	bl	80034e8 <nrf24l01p_get_status>
 8003542:	4603      	mov	r3, r0
 8003544:	71fb      	strb	r3, [r7, #7]
	new_status |= 0x40;
 8003546:	79fb      	ldrb	r3, [r7, #7]
 8003548:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800354c:	71fb      	strb	r3, [r7, #7]

	write_register(NRF24L01P_REG_STATUS, new_status);
 800354e:	79fb      	ldrb	r3, [r7, #7]
 8003550:	4619      	mov	r1, r3
 8003552:	2007      	movs	r0, #7
 8003554:	f7ff fe16 	bl	8003184 <write_register>
}
 8003558:	bf00      	nop
 800355a:	3708      	adds	r7, #8
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <nrf24l01p_power_up>:
	new_status |= 0x10;

	write_register(NRF24L01P_REG_STATUS, new_status);
}

void nrf24l01p_power_up() {
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
	uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8003566:	2000      	movs	r0, #0
 8003568:	f7ff fde6 	bl	8003138 <read_register>
 800356c:	4603      	mov	r3, r0
 800356e:	71fb      	strb	r3, [r7, #7]
	new_config |= 1 << 1;
 8003570:	79fb      	ldrb	r3, [r7, #7]
 8003572:	f043 0302 	orr.w	r3, r3, #2
 8003576:	71fb      	strb	r3, [r7, #7]

	write_register(NRF24L01P_REG_CONFIG, new_config);
 8003578:	79fb      	ldrb	r3, [r7, #7]
 800357a:	4619      	mov	r1, r3
 800357c:	2000      	movs	r0, #0
 800357e:	f7ff fe01 	bl	8003184 <write_register>
}
 8003582:	bf00      	nop
 8003584:	3708      	adds	r7, #8
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}

0800358a <nrf24l01p_set_crc_length>:
	new_config &= 0xFD;

	write_register(NRF24L01P_REG_CONFIG, new_config);
}

void nrf24l01p_set_crc_length(length bytes) {
 800358a:	b580      	push	{r7, lr}
 800358c:	b084      	sub	sp, #16
 800358e:	af00      	add	r7, sp, #0
 8003590:	4603      	mov	r3, r0
 8003592:	71fb      	strb	r3, [r7, #7]
	uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8003594:	2000      	movs	r0, #0
 8003596:	f7ff fdcf 	bl	8003138 <read_register>
 800359a:	4603      	mov	r3, r0
 800359c:	73fb      	strb	r3, [r7, #15]

	switch (bytes) {
 800359e:	79fb      	ldrb	r3, [r7, #7]
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d002      	beq.n	80035aa <nrf24l01p_set_crc_length+0x20>
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d005      	beq.n	80035b4 <nrf24l01p_set_crc_length+0x2a>
 80035a8:	e009      	b.n	80035be <nrf24l01p_set_crc_length+0x34>
	// CRCO bit in CONFIG resiger set 0
	case 1:
		new_config &= 0xFB;
 80035aa:	7bfb      	ldrb	r3, [r7, #15]
 80035ac:	f023 0304 	bic.w	r3, r3, #4
 80035b0:	73fb      	strb	r3, [r7, #15]
		break;
 80035b2:	e004      	b.n	80035be <nrf24l01p_set_crc_length+0x34>
		// CRCO bit in CONFIG resiger set 1
	case 2:
		new_config |= 1 << 2;
 80035b4:	7bfb      	ldrb	r3, [r7, #15]
 80035b6:	f043 0304 	orr.w	r3, r3, #4
 80035ba:	73fb      	strb	r3, [r7, #15]
		break;
 80035bc:	bf00      	nop
	}

	write_register(NRF24L01P_REG_CONFIG, new_config);
 80035be:	7bfb      	ldrb	r3, [r7, #15]
 80035c0:	4619      	mov	r1, r3
 80035c2:	2000      	movs	r0, #0
 80035c4:	f7ff fdde 	bl	8003184 <write_register>
}
 80035c8:	bf00      	nop
 80035ca:	3710      	adds	r7, #16
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <nrf24l01p_set_address_widths>:

void nrf24l01p_set_address_widths(widths bytes) {
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	4603      	mov	r3, r0
 80035d8:	71fb      	strb	r3, [r7, #7]
	write_register(NRF24L01P_REG_SETUP_AW, bytes - 2);
 80035da:	79fb      	ldrb	r3, [r7, #7]
 80035dc:	3b02      	subs	r3, #2
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	4619      	mov	r1, r3
 80035e2:	2003      	movs	r0, #3
 80035e4:	f7ff fdce 	bl	8003184 <write_register>
}
 80035e8:	bf00      	nop
 80035ea:	3708      	adds	r7, #8
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <nrf24l01p_auto_retransmit_count>:

void nrf24l01p_auto_retransmit_count(count cnt) {
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	4603      	mov	r3, r0
 80035f8:	71fb      	strb	r3, [r7, #7]
	uint8_t new_setup_retr = read_register(NRF24L01P_REG_SETUP_RETR);
 80035fa:	2004      	movs	r0, #4
 80035fc:	f7ff fd9c 	bl	8003138 <read_register>
 8003600:	4603      	mov	r3, r0
 8003602:	73fb      	strb	r3, [r7, #15]

	// Reset ARC register 0
	new_setup_retr |= 0xF0;
 8003604:	7bfb      	ldrb	r3, [r7, #15]
 8003606:	f063 030f 	orn	r3, r3, #15
 800360a:	73fb      	strb	r3, [r7, #15]
	new_setup_retr |= cnt;
 800360c:	7bfa      	ldrb	r2, [r7, #15]
 800360e:	79fb      	ldrb	r3, [r7, #7]
 8003610:	4313      	orrs	r3, r2
 8003612:	73fb      	strb	r3, [r7, #15]
	write_register(NRF24L01P_REG_SETUP_RETR, new_setup_retr);
 8003614:	7bfb      	ldrb	r3, [r7, #15]
 8003616:	4619      	mov	r1, r3
 8003618:	2004      	movs	r0, #4
 800361a:	f7ff fdb3 	bl	8003184 <write_register>
}
 800361e:	bf00      	nop
 8003620:	3710      	adds	r7, #16
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
	...

08003628 <nrf24l01p_auto_retransmit_delay>:

void nrf24l01p_auto_retransmit_delay(delay us) {
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	4603      	mov	r3, r0
 8003630:	80fb      	strh	r3, [r7, #6]
	uint8_t new_setup_retr = read_register(NRF24L01P_REG_SETUP_RETR);
 8003632:	2004      	movs	r0, #4
 8003634:	f7ff fd80 	bl	8003138 <read_register>
 8003638:	4603      	mov	r3, r0
 800363a:	73fb      	strb	r3, [r7, #15]

	// Reset ARD register 0
	new_setup_retr |= 0x0F;
 800363c:	7bfb      	ldrb	r3, [r7, #15]
 800363e:	f043 030f 	orr.w	r3, r3, #15
 8003642:	73fb      	strb	r3, [r7, #15]
	new_setup_retr |= ((us / 250) - 1) << 4;
 8003644:	88fb      	ldrh	r3, [r7, #6]
 8003646:	4a0b      	ldr	r2, [pc, #44]	; (8003674 <nrf24l01p_auto_retransmit_delay+0x4c>)
 8003648:	fba2 2303 	umull	r2, r3, r2, r3
 800364c:	091b      	lsrs	r3, r3, #4
 800364e:	b29b      	uxth	r3, r3
 8003650:	3b01      	subs	r3, #1
 8003652:	011b      	lsls	r3, r3, #4
 8003654:	b25a      	sxtb	r2, r3
 8003656:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800365a:	4313      	orrs	r3, r2
 800365c:	b25b      	sxtb	r3, r3
 800365e:	73fb      	strb	r3, [r7, #15]
	write_register(NRF24L01P_REG_SETUP_RETR, new_setup_retr);
 8003660:	7bfb      	ldrb	r3, [r7, #15]
 8003662:	4619      	mov	r1, r3
 8003664:	2004      	movs	r0, #4
 8003666:	f7ff fd8d 	bl	8003184 <write_register>
}
 800366a:	bf00      	nop
 800366c:	3710      	adds	r7, #16
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	10624dd3 	.word	0x10624dd3

08003678 <nrf24l01p_set_rf_channel>:

void nrf24l01p_set_rf_channel(channel MHz) {
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	4603      	mov	r3, r0
 8003680:	80fb      	strh	r3, [r7, #6]
	uint16_t new_rf_ch = MHz - 2400;
 8003682:	88fb      	ldrh	r3, [r7, #6]
 8003684:	f5a3 6316 	sub.w	r3, r3, #2400	; 0x960
 8003688:	81fb      	strh	r3, [r7, #14]
	write_register(NRF24L01P_REG_RF_CH, new_rf_ch);
 800368a:	89fb      	ldrh	r3, [r7, #14]
 800368c:	b2db      	uxtb	r3, r3
 800368e:	4619      	mov	r1, r3
 8003690:	2005      	movs	r0, #5
 8003692:	f7ff fd77 	bl	8003184 <write_register>
}
 8003696:	bf00      	nop
 8003698:	3710      	adds	r7, #16
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}

0800369e <nrf24l01p_set_rf_tx_output_power>:

void nrf24l01p_set_rf_tx_output_power(output_power dBm) {
 800369e:	b580      	push	{r7, lr}
 80036a0:	b084      	sub	sp, #16
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	4603      	mov	r3, r0
 80036a6:	71fb      	strb	r3, [r7, #7]
	uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xF9;
 80036a8:	2006      	movs	r0, #6
 80036aa:	f7ff fd45 	bl	8003138 <read_register>
 80036ae:	4603      	mov	r3, r0
 80036b0:	f023 0306 	bic.w	r3, r3, #6
 80036b4:	73fb      	strb	r3, [r7, #15]
	new_rf_setup |= (dBm << 1);
 80036b6:	79fb      	ldrb	r3, [r7, #7]
 80036b8:	005b      	lsls	r3, r3, #1
 80036ba:	b25a      	sxtb	r2, r3
 80036bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	b25b      	sxtb	r3, r3
 80036c4:	73fb      	strb	r3, [r7, #15]

	write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 80036c6:	7bfb      	ldrb	r3, [r7, #15]
 80036c8:	4619      	mov	r1, r3
 80036ca:	2006      	movs	r0, #6
 80036cc:	f7ff fd5a 	bl	8003184 <write_register>
}
 80036d0:	bf00      	nop
 80036d2:	3710      	adds	r7, #16
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <nrf24l01p_set_rf_air_data_rate>:

void nrf24l01p_set_rf_air_data_rate(air_data_rate bps) {
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	4603      	mov	r3, r0
 80036e0:	71fb      	strb	r3, [r7, #7]
	// Set value to 0
	uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xD7;
 80036e2:	2006      	movs	r0, #6
 80036e4:	f7ff fd28 	bl	8003138 <read_register>
 80036e8:	4603      	mov	r3, r0
 80036ea:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80036ee:	73fb      	strb	r3, [r7, #15]

	switch (bps) {
 80036f0:	79fb      	ldrb	r3, [r7, #7]
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d00a      	beq.n	800370c <nrf24l01p_set_rf_air_data_rate+0x34>
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	dc0e      	bgt.n	8003718 <nrf24l01p_set_rf_air_data_rate+0x40>
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00b      	beq.n	8003716 <nrf24l01p_set_rf_air_data_rate+0x3e>
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d10a      	bne.n	8003718 <nrf24l01p_set_rf_air_data_rate+0x40>
	case _1Mbps:
		break;
	case _2Mbps:
		new_rf_setup |= 1 << 3;
 8003702:	7bfb      	ldrb	r3, [r7, #15]
 8003704:	f043 0308 	orr.w	r3, r3, #8
 8003708:	73fb      	strb	r3, [r7, #15]
		break;
 800370a:	e005      	b.n	8003718 <nrf24l01p_set_rf_air_data_rate+0x40>
	case _250kbps:
		new_rf_setup |= 1 << 5;
 800370c:	7bfb      	ldrb	r3, [r7, #15]
 800370e:	f043 0320 	orr.w	r3, r3, #32
 8003712:	73fb      	strb	r3, [r7, #15]
		break;
 8003714:	e000      	b.n	8003718 <nrf24l01p_set_rf_air_data_rate+0x40>
		break;
 8003716:	bf00      	nop
	}
	write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 8003718:	7bfb      	ldrb	r3, [r7, #15]
 800371a:	4619      	mov	r1, r3
 800371c:	2006      	movs	r0, #6
 800371e:	f7ff fd31 	bl	8003184 <write_register>
}
 8003722:	bf00      	nop
 8003724:	3710      	adds	r7, #16
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}

0800372a <memset>:
 800372a:	4603      	mov	r3, r0
 800372c:	4402      	add	r2, r0
 800372e:	4293      	cmp	r3, r2
 8003730:	d100      	bne.n	8003734 <memset+0xa>
 8003732:	4770      	bx	lr
 8003734:	f803 1b01 	strb.w	r1, [r3], #1
 8003738:	e7f9      	b.n	800372e <memset+0x4>
	...

0800373c <__libc_init_array>:
 800373c:	b570      	push	{r4, r5, r6, lr}
 800373e:	2600      	movs	r6, #0
 8003740:	4d0c      	ldr	r5, [pc, #48]	; (8003774 <__libc_init_array+0x38>)
 8003742:	4c0d      	ldr	r4, [pc, #52]	; (8003778 <__libc_init_array+0x3c>)
 8003744:	1b64      	subs	r4, r4, r5
 8003746:	10a4      	asrs	r4, r4, #2
 8003748:	42a6      	cmp	r6, r4
 800374a:	d109      	bne.n	8003760 <__libc_init_array+0x24>
 800374c:	f000 f81a 	bl	8003784 <_init>
 8003750:	2600      	movs	r6, #0
 8003752:	4d0a      	ldr	r5, [pc, #40]	; (800377c <__libc_init_array+0x40>)
 8003754:	4c0a      	ldr	r4, [pc, #40]	; (8003780 <__libc_init_array+0x44>)
 8003756:	1b64      	subs	r4, r4, r5
 8003758:	10a4      	asrs	r4, r4, #2
 800375a:	42a6      	cmp	r6, r4
 800375c:	d105      	bne.n	800376a <__libc_init_array+0x2e>
 800375e:	bd70      	pop	{r4, r5, r6, pc}
 8003760:	f855 3b04 	ldr.w	r3, [r5], #4
 8003764:	4798      	blx	r3
 8003766:	3601      	adds	r6, #1
 8003768:	e7ee      	b.n	8003748 <__libc_init_array+0xc>
 800376a:	f855 3b04 	ldr.w	r3, [r5], #4
 800376e:	4798      	blx	r3
 8003770:	3601      	adds	r6, #1
 8003772:	e7f2      	b.n	800375a <__libc_init_array+0x1e>
 8003774:	080037c8 	.word	0x080037c8
 8003778:	080037c8 	.word	0x080037c8
 800377c:	080037c8 	.word	0x080037c8
 8003780:	080037cc 	.word	0x080037cc

08003784 <_init>:
 8003784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003786:	bf00      	nop
 8003788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800378a:	bc08      	pop	{r3}
 800378c:	469e      	mov	lr, r3
 800378e:	4770      	bx	lr

08003790 <_fini>:
 8003790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003792:	bf00      	nop
 8003794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003796:	bc08      	pop	{r3}
 8003798:	469e      	mov	lr, r3
 800379a:	4770      	bx	lr
