
blue_pill_gps_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc2c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b70  0800bd40  0800bd40  0001bd40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c8b0  0800c8b0  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800c8b0  0800c8b0  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c8b0  0800c8b0  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c8b0  0800c8b0  0001c8b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c8b4  0800c8b4  0001c8b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800c8b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f8c  200001e0  0800ca98  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000116c  0800ca98  0002116c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004a5e0  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000383e  00000000  00000000  0006a7e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000031b8  00000000  00000000  0006e028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003000  00000000  00000000  000711e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a384  00000000  00000000  000741e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001aaa3  00000000  00000000  0008e564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e112  00000000  00000000  000a9007  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00147119  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000f36c  00000000  00000000  0014716c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800bd24 	.word	0x0800bd24

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	0800bd24 	.word	0x0800bd24

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmpun>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001118:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800111c:	d102      	bne.n	8001124 <__aeabi_fcmpun+0x14>
 800111e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001122:	d108      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001124:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001128:	d102      	bne.n	8001130 <__aeabi_fcmpun+0x20>
 800112a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800112e:	d102      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001130:	f04f 0000 	mov.w	r0, #0
 8001134:	4770      	bx	lr
 8001136:	f04f 0001 	mov.w	r0, #1
 800113a:	4770      	bx	lr

0800113c <__aeabi_d2lz>:
 800113c:	b538      	push	{r3, r4, r5, lr}
 800113e:	4605      	mov	r5, r0
 8001140:	460c      	mov	r4, r1
 8001142:	2200      	movs	r2, #0
 8001144:	2300      	movs	r3, #0
 8001146:	4628      	mov	r0, r5
 8001148:	4621      	mov	r1, r4
 800114a:	f7ff fc37 	bl	80009bc <__aeabi_dcmplt>
 800114e:	b928      	cbnz	r0, 800115c <__aeabi_d2lz+0x20>
 8001150:	4628      	mov	r0, r5
 8001152:	4621      	mov	r1, r4
 8001154:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001158:	f000 b80a 	b.w	8001170 <__aeabi_d2ulz>
 800115c:	4628      	mov	r0, r5
 800115e:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001162:	f000 f805 	bl	8001170 <__aeabi_d2ulz>
 8001166:	4240      	negs	r0, r0
 8001168:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800116c:	bd38      	pop	{r3, r4, r5, pc}
 800116e:	bf00      	nop

08001170 <__aeabi_d2ulz>:
 8001170:	b5d0      	push	{r4, r6, r7, lr}
 8001172:	2200      	movs	r2, #0
 8001174:	4b0b      	ldr	r3, [pc, #44]	; (80011a4 <__aeabi_d2ulz+0x34>)
 8001176:	4606      	mov	r6, r0
 8001178:	460f      	mov	r7, r1
 800117a:	f7ff f9ad 	bl	80004d8 <__aeabi_dmul>
 800117e:	f7ff fc83 	bl	8000a88 <__aeabi_d2uiz>
 8001182:	4604      	mov	r4, r0
 8001184:	f7ff f92e 	bl	80003e4 <__aeabi_ui2d>
 8001188:	2200      	movs	r2, #0
 800118a:	4b07      	ldr	r3, [pc, #28]	; (80011a8 <__aeabi_d2ulz+0x38>)
 800118c:	f7ff f9a4 	bl	80004d8 <__aeabi_dmul>
 8001190:	4602      	mov	r2, r0
 8001192:	460b      	mov	r3, r1
 8001194:	4630      	mov	r0, r6
 8001196:	4639      	mov	r1, r7
 8001198:	f7fe ffe6 	bl	8000168 <__aeabi_dsub>
 800119c:	f7ff fc74 	bl	8000a88 <__aeabi_d2uiz>
 80011a0:	4621      	mov	r1, r4
 80011a2:	bdd0      	pop	{r4, r6, r7, pc}
 80011a4:	3df00000 	.word	0x3df00000
 80011a8:	41f00000 	.word	0x41f00000

080011ac <__io_putchar>:
extern uint8_t u8x8_byte_stm32_hw_spi(u8x8_t *u8x8, uint8_t msg,
		uint8_t arg_int, void *arg_ptr);

static u8g2_t u8g2;

int __io_putchar(int ch) {
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
	(void) HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, 100);
 80011b4:	1d39      	adds	r1, r7, #4
 80011b6:	2364      	movs	r3, #100	; 0x64
 80011b8:	2201      	movs	r2, #1
 80011ba:	4804      	ldr	r0, [pc, #16]	; (80011cc <__io_putchar+0x20>)
 80011bc:	f002 fdbb 	bl	8003d36 <HAL_UART_Transmit>
	return ch;
 80011c0:	687b      	ldr	r3, [r7, #4]
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000254 	.word	0x20000254

080011d0 <deg2rad>:

double deg2rad(double deg) {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	e9c7 0100 	strd	r0, r1, [r7]
	return (deg * pi / 180);
 80011da:	a30b      	add	r3, pc, #44	; (adr r3, 8001208 <deg2rad+0x38>)
 80011dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80011e4:	f7ff f978 	bl	80004d8 <__aeabi_dmul>
 80011e8:	4602      	mov	r2, r0
 80011ea:	460b      	mov	r3, r1
 80011ec:	4610      	mov	r0, r2
 80011ee:	4619      	mov	r1, r3
 80011f0:	f04f 0200 	mov.w	r2, #0
 80011f4:	4b06      	ldr	r3, [pc, #24]	; (8001210 <deg2rad+0x40>)
 80011f6:	f7ff fa99 	bl	800072c <__aeabi_ddiv>
 80011fa:	4602      	mov	r2, r0
 80011fc:	460b      	mov	r3, r1
}
 80011fe:	4610      	mov	r0, r2
 8001200:	4619      	mov	r1, r3
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	54442d18 	.word	0x54442d18
 800120c:	400921fb 	.word	0x400921fb
 8001210:	40668000 	.word	0x40668000
 8001214:	00000000 	.word	0x00000000

08001218 <calc_distance>:

double rad2deg(double rad) {
	return (rad * 180 / pi);
}

double calc_distance(double lat1, double lon1, double lat2, double lon2) {
 8001218:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800121c:	b090      	sub	sp, #64	; 0x40
 800121e:	af00      	add	r7, sp, #0
 8001220:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001224:	e9c7 2300 	strd	r2, r3, [r7]

	double radius = 6371.0;
 8001228:	a373      	add	r3, pc, #460	; (adr r3, 80013f8 <calc_distance+0x1e0>)
 800122a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

	if ((lat1 == lat2) && (lon1 == lon2)) {
 8001232:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001236:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800123a:	f7ff fbb5 	bl	80009a8 <__aeabi_dcmpeq>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d00d      	beq.n	8001260 <calc_distance+0x48>
 8001244:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001248:	e9d7 0100 	ldrd	r0, r1, [r7]
 800124c:	f7ff fbac 	bl	80009a8 <__aeabi_dcmpeq>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d004      	beq.n	8001260 <calc_distance+0x48>
		return 0;
 8001256:	f04f 0200 	mov.w	r2, #0
 800125a:	f04f 0300 	mov.w	r3, #0
 800125e:	e0c4      	b.n	80013ea <calc_distance+0x1d2>
	} else {

		double dLat = deg2rad((lat2 - lat1)) / 2.0;
 8001260:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001264:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001268:	f7fe ff7e 	bl	8000168 <__aeabi_dsub>
 800126c:	4602      	mov	r2, r0
 800126e:	460b      	mov	r3, r1
 8001270:	4610      	mov	r0, r2
 8001272:	4619      	mov	r1, r3
 8001274:	f7ff ffac 	bl	80011d0 <deg2rad>
 8001278:	f04f 0200 	mov.w	r2, #0
 800127c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001280:	f7ff fa54 	bl	800072c <__aeabi_ddiv>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		double dLon = deg2rad((lon2 - lon1)) / 2.0;
 800128c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001290:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001294:	f7fe ff68 	bl	8000168 <__aeabi_dsub>
 8001298:	4602      	mov	r2, r0
 800129a:	460b      	mov	r3, r1
 800129c:	4610      	mov	r0, r2
 800129e:	4619      	mov	r1, r3
 80012a0:	f7ff ff96 	bl	80011d0 <deg2rad>
 80012a4:	f04f 0200 	mov.w	r2, #0
 80012a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012ac:	f7ff fa3e 	bl	800072c <__aeabi_ddiv>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

		lat1 = deg2rad(lat1);
 80012b8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80012bc:	f7ff ff88 	bl	80011d0 <deg2rad>
 80012c0:	e9c7 0102 	strd	r0, r1, [r7, #8]
		lat2 = deg2rad(lat2);
 80012c4:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80012c8:	f7ff ff82 	bl	80011d0 <deg2rad>
 80012cc:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58

		double a = sin(dLat) * sin(dLat)
 80012d0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80012d4:	f009 fb2a 	bl	800a92c <sin>
 80012d8:	4604      	mov	r4, r0
 80012da:	460d      	mov	r5, r1
 80012dc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80012e0:	f009 fb24 	bl	800a92c <sin>
 80012e4:	4602      	mov	r2, r0
 80012e6:	460b      	mov	r3, r1
 80012e8:	4620      	mov	r0, r4
 80012ea:	4629      	mov	r1, r5
 80012ec:	f7ff f8f4 	bl	80004d8 <__aeabi_dmul>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	4690      	mov	r8, r2
 80012f6:	4699      	mov	r9, r3
				+ sin(dLon) * sin(dLon) * cos(lat1) * cos(lat2);
 80012f8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80012fc:	f009 fb16 	bl	800a92c <sin>
 8001300:	4604      	mov	r4, r0
 8001302:	460d      	mov	r5, r1
 8001304:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001308:	f009 fb10 	bl	800a92c <sin>
 800130c:	4602      	mov	r2, r0
 800130e:	460b      	mov	r3, r1
 8001310:	4620      	mov	r0, r4
 8001312:	4629      	mov	r1, r5
 8001314:	f7ff f8e0 	bl	80004d8 <__aeabi_dmul>
 8001318:	4602      	mov	r2, r0
 800131a:	460b      	mov	r3, r1
 800131c:	4614      	mov	r4, r2
 800131e:	461d      	mov	r5, r3
 8001320:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001324:	f009 fabc 	bl	800a8a0 <cos>
 8001328:	4602      	mov	r2, r0
 800132a:	460b      	mov	r3, r1
 800132c:	4620      	mov	r0, r4
 800132e:	4629      	mov	r1, r5
 8001330:	f7ff f8d2 	bl	80004d8 <__aeabi_dmul>
 8001334:	4602      	mov	r2, r0
 8001336:	460b      	mov	r3, r1
 8001338:	4614      	mov	r4, r2
 800133a:	461d      	mov	r5, r3
 800133c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001340:	f009 faae 	bl	800a8a0 <cos>
 8001344:	4602      	mov	r2, r0
 8001346:	460b      	mov	r3, r1
 8001348:	4620      	mov	r0, r4
 800134a:	4629      	mov	r1, r5
 800134c:	f7ff f8c4 	bl	80004d8 <__aeabi_dmul>
 8001350:	4602      	mov	r2, r0
 8001352:	460b      	mov	r3, r1
		double a = sin(dLat) * sin(dLat)
 8001354:	4640      	mov	r0, r8
 8001356:	4649      	mov	r1, r9
 8001358:	f7fe ff08 	bl	800016c <__adddf3>
 800135c:	4602      	mov	r2, r0
 800135e:	460b      	mov	r3, r1
 8001360:	e9c7 2308 	strd	r2, r3, [r7, #32]
		double c = 2 * atan2f(sqrtf(a), sqrtf(1 - a));
 8001364:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001368:	f7ff fbae 	bl	8000ac8 <__aeabi_d2f>
 800136c:	4603      	mov	r3, r0
 800136e:	4618      	mov	r0, r3
 8001370:	f009 fb24 	bl	800a9bc <sqrtf>
 8001374:	4604      	mov	r4, r0
 8001376:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800137a:	f04f 0000 	mov.w	r0, #0
 800137e:	4920      	ldr	r1, [pc, #128]	; (8001400 <calc_distance+0x1e8>)
 8001380:	f7fe fef2 	bl	8000168 <__aeabi_dsub>
 8001384:	4602      	mov	r2, r0
 8001386:	460b      	mov	r3, r1
 8001388:	4610      	mov	r0, r2
 800138a:	4619      	mov	r1, r3
 800138c:	f7ff fb9c 	bl	8000ac8 <__aeabi_d2f>
 8001390:	4603      	mov	r3, r0
 8001392:	4618      	mov	r0, r3
 8001394:	f009 fb12 	bl	800a9bc <sqrtf>
 8001398:	4603      	mov	r3, r0
 800139a:	4619      	mov	r1, r3
 800139c:	4620      	mov	r0, r4
 800139e:	f009 fb0b 	bl	800a9b8 <atan2f>
 80013a2:	4603      	mov	r3, r0
 80013a4:	4619      	mov	r1, r3
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff fbe4 	bl	8000b74 <__addsf3>
 80013ac:	4603      	mov	r3, r0
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff f83a 	bl	8000428 <__aeabi_f2d>
 80013b4:	4602      	mov	r2, r0
 80013b6:	460b      	mov	r3, r1
 80013b8:	e9c7 2306 	strd	r2, r3, [r7, #24]
		double dDistance = radius * c;
 80013bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80013c0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80013c4:	f7ff f888 	bl	80004d8 <__aeabi_dmul>
 80013c8:	4602      	mov	r2, r0
 80013ca:	460b      	mov	r3, r1
 80013cc:	e9c7 2304 	strd	r2, r3, [r7, #16]

		dDistance *= 1000.0;
 80013d0:	f04f 0200 	mov.w	r2, #0
 80013d4:	4b0b      	ldr	r3, [pc, #44]	; (8001404 <calc_distance+0x1ec>)
 80013d6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80013da:	f7ff f87d 	bl	80004d8 <__aeabi_dmul>
 80013de:	4602      	mov	r2, r0
 80013e0:	460b      	mov	r3, r1
 80013e2:	e9c7 2304 	strd	r2, r3, [r7, #16]

		return dDistance;
 80013e6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
	 dist = dist * 1.609344;
	 return (dist);
	 }
	 */

}
 80013ea:	4610      	mov	r0, r2
 80013ec:	4619      	mov	r1, r3
 80013ee:	3740      	adds	r7, #64	; 0x40
 80013f0:	46bd      	mov	sp, r7
 80013f2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80013f6:	bf00      	nop
 80013f8:	00000000 	.word	0x00000000
 80013fc:	40b8e300 	.word	0x40b8e300
 8001400:	3ff00000 	.word	0x3ff00000
 8001404:	408f4000 	.word	0x408f4000

08001408 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001408:	b5b0      	push	{r4, r5, r7, lr}
 800140a:	b0c6      	sub	sp, #280	; 0x118
 800140c:	af04      	add	r7, sp, #16
	/* USER CODE BEGIN 1 */
	static double f_latitude1 = 0.0;
	static double f_longitude1 = 0.0;
	double f_latitude2 = 0.0;
 800140e:	f04f 0200 	mov.w	r2, #0
 8001412:	f04f 0300 	mov.w	r3, #0
 8001416:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100
	double f_longitude2 = 0.0;
 800141a:	f04f 0200 	mov.w	r2, #0
 800141e:	f04f 0300 	mov.w	r3, #0
 8001422:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8

	double distance = 0.0;
 8001426:	f04f 0200 	mov.w	r2, #0
 800142a:	f04f 0300 	mov.w	r3, #0
 800142e:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
	static double pre_time = 0.0;
	double f_seconds = 0.0;
 8001432:	f04f 0200 	mov.w	r2, #0
 8001436:	f04f 0300 	mov.w	r3, #0
 800143a:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
	double time_interval = 0.0;
 800143e:	f04f 0200 	mov.w	r2, #0
 8001442:	f04f 0300 	mov.w	r3, #0
 8001446:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
	double speed = 0.0;
 800144a:	f04f 0200 	mov.w	r2, #0
 800144e:	f04f 0300 	mov.w	r3, #0
 8001452:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001456:	f001 f9b5 	bl	80027c4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800145a:	f000 fcdb 	bl	8001e14 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800145e:	f000 fdab 	bl	8001fb8 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8001462:	f000 fd55 	bl	8001f10 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8001466:	f000 fd7d 	bl	8001f64 <MX_USART2_UART_Init>
	MX_SPI1_Init();
 800146a:	f000 fd19 	bl	8001ea0 <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */
	u8g2_Setup_ssd1306_128x64_noname_f(&u8g2, U8G2_R0, u8x8_byte_stm32_hw_spi,
 800146e:	4b96      	ldr	r3, [pc, #600]	; (80016c8 <main+0x2c0>)
 8001470:	4a96      	ldr	r2, [pc, #600]	; (80016cc <main+0x2c4>)
 8001472:	4997      	ldr	r1, [pc, #604]	; (80016d0 <main+0x2c8>)
 8001474:	4897      	ldr	r0, [pc, #604]	; (80016d4 <main+0x2cc>)
 8001476:	f003 f9c7 	bl	8004808 <u8g2_Setup_ssd1306_128x64_noname_f>
			u8x8_stm32_gpio_and_delay);

	u8g2_InitDisplay(&u8g2);
 800147a:	4896      	ldr	r0, [pc, #600]	; (80016d4 <main+0x2cc>)
 800147c:	f004 fc75 	bl	8005d6a <u8x8_InitDisplay>
	u8g2_SetPowerSave(&u8g2, 0);
 8001480:	2100      	movs	r1, #0
 8001482:	4894      	ldr	r0, [pc, #592]	; (80016d4 <main+0x2cc>)
 8001484:	f004 fc80 	bl	8005d88 <u8x8_SetPowerSave>

	u8g2_SetFont(&u8g2, u8g2_font_5x7_tr);
 8001488:	4993      	ldr	r1, [pc, #588]	; (80016d8 <main+0x2d0>)
 800148a:	4892      	ldr	r0, [pc, #584]	; (80016d4 <main+0x2cc>)
 800148c:	f003 fe56 	bl	800513c <u8g2_SetFont>
//  	u8g2_SetDisplayRotation(&u8g2, U8G2_R2);

	/* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
	__HAL_UART_ENABLE_IT(&huart2, UART_IT_ERR);
 8001490:	4b92      	ldr	r3, [pc, #584]	; (80016dc <main+0x2d4>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	695a      	ldr	r2, [r3, #20]
 8001496:	4b91      	ldr	r3, [pc, #580]	; (80016dc <main+0x2d4>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f042 0201 	orr.w	r2, r2, #1
 800149e:	615a      	str	r2, [r3, #20]
	/* Enable the UART Data Register not empty Interrupt */
	__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 80014a0:	4b8e      	ldr	r3, [pc, #568]	; (80016dc <main+0x2d4>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	68da      	ldr	r2, [r3, #12]
 80014a6:	4b8d      	ldr	r3, [pc, #564]	; (80016dc <main+0x2d4>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f042 0220 	orr.w	r2, r2, #32
 80014ae:	60da      	str	r2, [r3, #12]

	rxBufferInit(&uart_rx);
 80014b0:	488b      	ldr	r0, [pc, #556]	; (80016e0 <main+0x2d8>)
 80014b2:	f001 f8bb 	bl	800262c <rxBufferInit>

	printf("this is MAIN code, not WHILE\r\n");
 80014b6:	488b      	ldr	r0, [pc, #556]	; (80016e4 <main+0x2dc>)
 80014b8:	f005 fc2a 	bl	8006d10 <puts>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		uint32_t tick = HAL_GetTick();
 80014bc:	f001 f9da 	bl	8002874 <HAL_GetTick>
 80014c0:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
		while ((HAL_GetTick() - tick) < 500)
 80014c4:	bf00      	nop
 80014c6:	f001 f9d5 	bl	8002874 <HAL_GetTick>
 80014ca:	4602      	mov	r2, r0
 80014cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80014d6:	d3f6      	bcc.n	80014c6 <main+0xbe>
			;

		uint8_t num = uart_available(&uart_rx);
 80014d8:	4881      	ldr	r0, [pc, #516]	; (80016e0 <main+0x2d8>)
 80014da:	f001 f90e 	bl	80026fa <uart_available>
 80014de:	4603      	mov	r3, r0
 80014e0:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		uint8_t i;
		for (i = 0; i < num; i++) {
 80014e4:	2300      	movs	r3, #0
 80014e6:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 80014ea:	e013      	b.n	8001514 <main+0x10c>
			int ch = pop(&uart_rx);
 80014ec:	487c      	ldr	r0, [pc, #496]	; (80016e0 <main+0x2d8>)
 80014ee:	f001 f8da 	bl	80026a6 <pop>
 80014f2:	4603      	mov	r3, r0
 80014f4:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (ch != -1) {
 80014f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014fc:	d005      	beq.n	800150a <main+0x102>
				buff[i] = ch;
 80014fe:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 8001502:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001504:	b2d1      	uxtb	r1, r2
 8001506:	4a78      	ldr	r2, [pc, #480]	; (80016e8 <main+0x2e0>)
 8001508:	54d1      	strb	r1, [r2, r3]
		for (i = 0; i < num; i++) {
 800150a:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 800150e:	3301      	adds	r3, #1
 8001510:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 8001514:	f897 20e7 	ldrb.w	r2, [r7, #231]	; 0xe7
 8001518:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800151c:	429a      	cmp	r2, r3
 800151e:	d3e5      	bcc.n	80014ec <main+0xe4>
			}
		}

		//		HAL_UART_Transmit(&huart1, buff, sizeof(buff), 500);

		int k = 0;
 8001520:	2300      	movs	r3, #0
 8001522:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
		char *ptr = buff;
 8001526:	4b70      	ldr	r3, [pc, #448]	; (80016e8 <main+0x2e0>)
 8001528:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

		while (((*ptr) != '$') && (k < sizeof(buff))) {
 800152c:	e009      	b.n	8001542 <main+0x13a>
			k++;
 800152e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001532:	3301      	adds	r3, #1
 8001534:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
			ptr++;
 8001538:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800153c:	3301      	adds	r3, #1
 800153e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		while (((*ptr) != '$') && (k < sizeof(buff))) {
 8001542:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	2b24      	cmp	r3, #36	; 0x24
 800154a:	d004      	beq.n	8001556 <main+0x14e>
 800154c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001550:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001554:	d3eb      	bcc.n	800152e <main+0x126>
		}

		if ((*ptr) == '$') {
 8001556:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	2b24      	cmp	r3, #36	; 0x24
 800155e:	f040 843b 	bne.w	8001dd8 <main+0x9d0>
			int n = 0;
 8001562:	2300      	movs	r3, #0
 8001564:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
			char *ptr1 = sentence;
 8001568:	4b60      	ldr	r3, [pc, #384]	; (80016ec <main+0x2e4>)
 800156a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

			while (((*ptr) != '*') && (n < sizeof(buff) - k - 1)) {
 800156e:	e014      	b.n	800159a <main+0x192>
 8001570:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001574:	781a      	ldrb	r2, [r3, #0]
				memcpy(ptr1, ptr, 1);
 8001576:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800157a:	701a      	strb	r2, [r3, #0]
				//HAL_UART_Transmit(&huart1,ptr1,1,500);
				ptr1++;
 800157c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001580:	3301      	adds	r3, #1
 8001582:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
				ptr++;
 8001586:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800158a:	3301      	adds	r3, #1
 800158c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
				n++;
 8001590:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001594:	3301      	adds	r3, #1
 8001596:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
			while (((*ptr) != '*') && (n < sizeof(buff) - k - 1)) {
 800159a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	2b2a      	cmp	r3, #42	; 0x2a
 80015a2:	d008      	beq.n	80015b6 <main+0x1ae>
 80015a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80015a8:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 80015ac:	3303      	adds	r3, #3
 80015ae:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d8dc      	bhi.n	8001570 <main+0x168>
			}

			memcpy(ptr1, "\n", 1);
 80015b6:	2201      	movs	r2, #1
 80015b8:	494d      	ldr	r1, [pc, #308]	; (80016f0 <main+0x2e8>)
 80015ba:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 80015be:	f004 fc9d 	bl	8005efc <memcpy>

			HAL_UART_Transmit(&huart1, (uint8_t*) sentence, n + 1, 500);
 80015c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	3301      	adds	r3, #1
 80015ca:	b29a      	uxth	r2, r3
 80015cc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80015d0:	4946      	ldr	r1, [pc, #280]	; (80016ec <main+0x2e4>)
 80015d2:	4848      	ldr	r0, [pc, #288]	; (80016f4 <main+0x2ec>)
 80015d4:	f002 fbaf 	bl	8003d36 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, (uint8_t*) "sentence\r\n", 11, 500);
 80015d8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80015dc:	220b      	movs	r2, #11
 80015de:	4946      	ldr	r1, [pc, #280]	; (80016f8 <main+0x2f0>)
 80015e0:	4844      	ldr	r0, [pc, #272]	; (80016f4 <main+0x2ec>)
 80015e2:	f002 fba8 	bl	8003d36 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, (uint8_t*) "\r", 1, 500);
 80015e6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80015ea:	2201      	movs	r2, #1
 80015ec:	4943      	ldr	r1, [pc, #268]	; (80016fc <main+0x2f4>)
 80015ee:	4841      	ldr	r0, [pc, #260]	; (80016f4 <main+0x2ec>)
 80015f0:	f002 fba1 	bl	8003d36 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, (uint8_t*) "\n", 1, 500);
 80015f4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80015f8:	2201      	movs	r2, #1
 80015fa:	493d      	ldr	r1, [pc, #244]	; (80016f0 <main+0x2e8>)
 80015fc:	483d      	ldr	r0, [pc, #244]	; (80016f4 <main+0x2ec>)
 80015fe:	f002 fb9a 	bl	8003d36 <HAL_UART_Transmit>
			//printf("\r\n");

			if ((sentence[1] == 'G') && (sentence[2] == 'P')) {
 8001602:	4b3a      	ldr	r3, [pc, #232]	; (80016ec <main+0x2e4>)
 8001604:	785b      	ldrb	r3, [r3, #1]
 8001606:	2b47      	cmp	r3, #71	; 0x47
 8001608:	f040 83ab 	bne.w	8001d62 <main+0x95a>
 800160c:	4b37      	ldr	r3, [pc, #220]	; (80016ec <main+0x2e4>)
 800160e:	789b      	ldrb	r3, [r3, #2]
 8001610:	2b50      	cmp	r3, #80	; 0x50
 8001612:	f040 83a6 	bne.w	8001d62 <main+0x95a>
				if ((sentence[3] == 'R') && (sentence[4] == 'M')) {
 8001616:	4b35      	ldr	r3, [pc, #212]	; (80016ec <main+0x2e4>)
 8001618:	78db      	ldrb	r3, [r3, #3]
 800161a:	2b52      	cmp	r3, #82	; 0x52
 800161c:	f040 83a1 	bne.w	8001d62 <main+0x95a>
 8001620:	4b32      	ldr	r3, [pc, #200]	; (80016ec <main+0x2e4>)
 8001622:	791b      	ldrb	r3, [r3, #4]
 8001624:	2b4d      	cmp	r3, #77	; 0x4d
 8001626:	f040 839c 	bne.w	8001d62 <main+0x95a>

					char *ptr2 = type;
 800162a:	4b35      	ldr	r3, [pc, #212]	; (8001700 <main+0x2f8>)
 800162c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
					ptr1 = sentence;
 8001630:	4b2e      	ldr	r3, [pc, #184]	; (80016ec <main+0x2e4>)
 8001632:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
					int n2 = 0;
 8001636:	2300      	movs	r3, #0
 8001638:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
					while ((*ptr1) != ',') {
 800163c:	e014      	b.n	8001668 <main+0x260>
 800163e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001642:	781a      	ldrb	r2, [r3, #0]
						memcpy(ptr2, ptr1, 1);
 8001644:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001648:	701a      	strb	r2, [r3, #0]
						ptr2++;
 800164a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800164e:	3301      	adds	r3, #1
 8001650:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
						ptr1++;
 8001654:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001658:	3301      	adds	r3, #1
 800165a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
						n2++;
 800165e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001662:	3301      	adds	r3, #1
 8001664:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
					while ((*ptr1) != ',') {
 8001668:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	2b2c      	cmp	r3, #44	; 0x2c
 8001670:	d1e5      	bne.n	800163e <main+0x236>
					}

					memcpy(ptr2, "\0", 1);
 8001672:	2201      	movs	r2, #1
 8001674:	4923      	ldr	r1, [pc, #140]	; (8001704 <main+0x2fc>)
 8001676:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 800167a:	f004 fc3f 	bl	8005efc <memcpy>

					HAL_UART_Transmit(&huart1, (uint8_t*) type, n2 + 1, 500);
 800167e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001682:	b29b      	uxth	r3, r3
 8001684:	3301      	adds	r3, #1
 8001686:	b29a      	uxth	r2, r3
 8001688:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800168c:	491c      	ldr	r1, [pc, #112]	; (8001700 <main+0x2f8>)
 800168e:	4819      	ldr	r0, [pc, #100]	; (80016f4 <main+0x2ec>)
 8001690:	f002 fb51 	bl	8003d36 <HAL_UART_Transmit>

					HAL_UART_Transmit(&huart1, (uint8_t*) "\r", 1, 500);
 8001694:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001698:	2201      	movs	r2, #1
 800169a:	4918      	ldr	r1, [pc, #96]	; (80016fc <main+0x2f4>)
 800169c:	4815      	ldr	r0, [pc, #84]	; (80016f4 <main+0x2ec>)
 800169e:	f002 fb4a 	bl	8003d36 <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart1, (uint8_t*) "\n", 1, 500);
 80016a2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80016a6:	2201      	movs	r2, #1
 80016a8:	4911      	ldr	r1, [pc, #68]	; (80016f0 <main+0x2e8>)
 80016aa:	4812      	ldr	r0, [pc, #72]	; (80016f4 <main+0x2ec>)
 80016ac:	f002 fb43 	bl	8003d36 <HAL_UART_Transmit>

					ptr1++;
 80016b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80016b4:	3301      	adds	r3, #1
 80016b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

					char *ptr3 = time;
 80016ba:	4b13      	ldr	r3, [pc, #76]	; (8001708 <main+0x300>)
 80016bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

					int n3 = 0;
 80016c0:	2300      	movs	r3, #0
 80016c2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
					while ((*ptr1) != ',') {
 80016c6:	e036      	b.n	8001736 <main+0x32e>
 80016c8:	08002471 	.word	0x08002471
 80016cc:	08002569 	.word	0x08002569
 80016d0:	0800c174 	.word	0x0800c174
 80016d4:	200008a4 	.word	0x200008a4
 80016d8:	0800be50 	.word	0x0800be50
 80016dc:	20000298 	.word	0x20000298
 80016e0:	20000954 	.word	0x20000954
 80016e4:	0800bd40 	.word	0x0800bd40
 80016e8:	200002dc 	.word	0x200002dc
 80016ec:	200006dc 	.word	0x200006dc
 80016f0:	0800bd60 	.word	0x0800bd60
 80016f4:	20000254 	.word	0x20000254
 80016f8:	0800bd64 	.word	0x0800bd64
 80016fc:	0800bd70 	.word	0x0800bd70
 8001700:	200007dc 	.word	0x200007dc
 8001704:	0800bd74 	.word	0x0800bd74
 8001708:	200007fc 	.word	0x200007fc
 800170c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001710:	781a      	ldrb	r2, [r3, #0]
						memcpy(ptr3, ptr1, 1);
 8001712:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001716:	701a      	strb	r2, [r3, #0]

						ptr3++;
 8001718:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800171c:	3301      	adds	r3, #1
 800171e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
						ptr1++;
 8001722:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001726:	3301      	adds	r3, #1
 8001728:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
						n3++;
 800172c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001730:	3301      	adds	r3, #1
 8001732:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
					while ((*ptr1) != ',') {
 8001736:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	2b2c      	cmp	r3, #44	; 0x2c
 800173e:	d1e5      	bne.n	800170c <main+0x304>
					}

					memcpy(ptr3, "\0", 1);
 8001740:	2201      	movs	r2, #1
 8001742:	49bc      	ldr	r1, [pc, #752]	; (8001a34 <main+0x62c>)
 8001744:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8001748:	f004 fbd8 	bl	8005efc <memcpy>

					if (n3 == 9) {
 800174c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001750:	2b09      	cmp	r3, #9
 8001752:	f040 809a 	bne.w	800188a <main+0x482>
						char hour[5] = { 0, };
 8001756:	2300      	movs	r3, #0
 8001758:	617b      	str	r3, [r7, #20]
 800175a:	2300      	movs	r3, #0
 800175c:	763b      	strb	r3, [r7, #24]
						char minute[5] = { 0, };
 800175e:	2300      	movs	r3, #0
 8001760:	60fb      	str	r3, [r7, #12]
 8001762:	2300      	movs	r3, #0
 8001764:	743b      	strb	r3, [r7, #16]
						char second[10] = { 0, };
 8001766:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800176a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800176e:	2200      	movs	r2, #0
 8001770:	601a      	str	r2, [r3, #0]
 8001772:	3304      	adds	r3, #4
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	809a      	strh	r2, [r3, #4]
 800177a:	4baf      	ldr	r3, [pc, #700]	; (8001a38 <main+0x630>)
 800177c:	881b      	ldrh	r3, [r3, #0]

						memcpy(hour, time, 2);
 800177e:	82bb      	strh	r3, [r7, #20]
						memcpy(&hour[2], "\0", 1);
 8001780:	2300      	movs	r3, #0
 8001782:	75bb      	strb	r3, [r7, #22]
 8001784:	4bac      	ldr	r3, [pc, #688]	; (8001a38 <main+0x630>)
 8001786:	885b      	ldrh	r3, [r3, #2]

						memcpy(minute, &time[2], 2);
 8001788:	81bb      	strh	r3, [r7, #12]
						memcpy(&minute[2], "\0", 1);
 800178a:	2300      	movs	r3, #0
 800178c:	73bb      	strb	r3, [r7, #14]

						memcpy(second, &time[4], 5);
 800178e:	463b      	mov	r3, r7
 8001790:	2205      	movs	r2, #5
 8001792:	49aa      	ldr	r1, [pc, #680]	; (8001a3c <main+0x634>)
 8001794:	4618      	mov	r0, r3
 8001796:	f004 fbb1 	bl	8005efc <memcpy>
						memcpy(&second[5], "\0", 1);
 800179a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800179e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80017a2:	2200      	movs	r2, #0
 80017a4:	715a      	strb	r2, [r3, #5]

						f_seconds = (atof(hour) * 60.0 * 60.0)
 80017a6:	f107 0314 	add.w	r3, r7, #20
 80017aa:	4618      	mov	r0, r3
 80017ac:	f004 fb79 	bl	8005ea2 <atof>
 80017b0:	f04f 0200 	mov.w	r2, #0
 80017b4:	4ba2      	ldr	r3, [pc, #648]	; (8001a40 <main+0x638>)
 80017b6:	f7fe fe8f 	bl	80004d8 <__aeabi_dmul>
 80017ba:	4602      	mov	r2, r0
 80017bc:	460b      	mov	r3, r1
 80017be:	4610      	mov	r0, r2
 80017c0:	4619      	mov	r1, r3
 80017c2:	f04f 0200 	mov.w	r2, #0
 80017c6:	4b9e      	ldr	r3, [pc, #632]	; (8001a40 <main+0x638>)
 80017c8:	f7fe fe86 	bl	80004d8 <__aeabi_dmul>
 80017cc:	4602      	mov	r2, r0
 80017ce:	460b      	mov	r3, r1
 80017d0:	4614      	mov	r4, r2
 80017d2:	461d      	mov	r5, r3
								+ (atof(minute) * 60.0) + (atof(second));
 80017d4:	f107 030c 	add.w	r3, r7, #12
 80017d8:	4618      	mov	r0, r3
 80017da:	f004 fb62 	bl	8005ea2 <atof>
 80017de:	f04f 0200 	mov.w	r2, #0
 80017e2:	4b97      	ldr	r3, [pc, #604]	; (8001a40 <main+0x638>)
 80017e4:	f7fe fe78 	bl	80004d8 <__aeabi_dmul>
 80017e8:	4602      	mov	r2, r0
 80017ea:	460b      	mov	r3, r1
 80017ec:	4620      	mov	r0, r4
 80017ee:	4629      	mov	r1, r5
 80017f0:	f7fe fcbc 	bl	800016c <__adddf3>
 80017f4:	4602      	mov	r2, r0
 80017f6:	460b      	mov	r3, r1
 80017f8:	4614      	mov	r4, r2
 80017fa:	461d      	mov	r5, r3
 80017fc:	463b      	mov	r3, r7
 80017fe:	4618      	mov	r0, r3
 8001800:	f004 fb4f 	bl	8005ea2 <atof>
 8001804:	4602      	mov	r2, r0
 8001806:	460b      	mov	r3, r1
						f_seconds = (atof(hour) * 60.0 * 60.0)
 8001808:	4620      	mov	r0, r4
 800180a:	4629      	mov	r1, r5
 800180c:	f7fe fcae 	bl	800016c <__adddf3>
 8001810:	4602      	mov	r2, r0
 8001812:	460b      	mov	r3, r1
 8001814:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88

						printf("pre_time : %.2f\r\n", pre_time);
 8001818:	4b8a      	ldr	r3, [pc, #552]	; (8001a44 <main+0x63c>)
 800181a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800181e:	488a      	ldr	r0, [pc, #552]	; (8001a48 <main+0x640>)
 8001820:	f005 f9f0 	bl	8006c04 <iprintf>

						printf("f_seconds : %.2f\r\n", f_seconds);
 8001824:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001828:	4888      	ldr	r0, [pc, #544]	; (8001a4c <main+0x644>)
 800182a:	f005 f9eb 	bl	8006c04 <iprintf>

						if (pre_time == 0) {
 800182e:	4b85      	ldr	r3, [pc, #532]	; (8001a44 <main+0x63c>)
 8001830:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001834:	f04f 0200 	mov.w	r2, #0
 8001838:	f04f 0300 	mov.w	r3, #0
 800183c:	f7ff f8b4 	bl	80009a8 <__aeabi_dcmpeq>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d006      	beq.n	8001854 <main+0x44c>
							time_interval = 0.0;
 8001846:	f04f 0200 	mov.w	r2, #0
 800184a:	f04f 0300 	mov.w	r3, #0
 800184e:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8001852:	e00a      	b.n	800186a <main+0x462>
						} else {
							time_interval = f_seconds - pre_time;
 8001854:	4b7b      	ldr	r3, [pc, #492]	; (8001a44 <main+0x63c>)
 8001856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800185a:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800185e:	f7fe fc83 	bl	8000168 <__aeabi_dsub>
 8001862:	4602      	mov	r2, r0
 8001864:	460b      	mov	r3, r1
 8001866:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
						}
						printf("time_interval : %.2f\r\n", time_interval);
 800186a:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 800186e:	4878      	ldr	r0, [pc, #480]	; (8001a50 <main+0x648>)
 8001870:	f005 f9c8 	bl	8006c04 <iprintf>

						pre_time = f_seconds;
 8001874:	4973      	ldr	r1, [pc, #460]	; (8001a44 <main+0x63c>)
 8001876:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800187a:	e9c1 2300 	strd	r2, r3, [r1]
						printf("pre_time 2 : %.2f\r\n", pre_time);
 800187e:	4b71      	ldr	r3, [pc, #452]	; (8001a44 <main+0x63c>)
 8001880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001884:	4873      	ldr	r0, [pc, #460]	; (8001a54 <main+0x64c>)
 8001886:	f005 f9bd 	bl	8006c04 <iprintf>
					}

					HAL_UART_Transmit(&huart1, (uint8_t*) time, n3 + 1, 500);
 800188a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800188e:	b29b      	uxth	r3, r3
 8001890:	3301      	adds	r3, #1
 8001892:	b29a      	uxth	r2, r3
 8001894:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001898:	4967      	ldr	r1, [pc, #412]	; (8001a38 <main+0x630>)
 800189a:	486f      	ldr	r0, [pc, #444]	; (8001a58 <main+0x650>)
 800189c:	f002 fa4b 	bl	8003d36 <HAL_UART_Transmit>

					HAL_UART_Transmit(&huart1, (uint8_t*) "\r", 1, 500);
 80018a0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80018a4:	2201      	movs	r2, #1
 80018a6:	496d      	ldr	r1, [pc, #436]	; (8001a5c <main+0x654>)
 80018a8:	486b      	ldr	r0, [pc, #428]	; (8001a58 <main+0x650>)
 80018aa:	f002 fa44 	bl	8003d36 <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart1, (uint8_t*) "\n", 1, 500);
 80018ae:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80018b2:	2201      	movs	r2, #1
 80018b4:	496a      	ldr	r1, [pc, #424]	; (8001a60 <main+0x658>)
 80018b6:	4868      	ldr	r0, [pc, #416]	; (8001a58 <main+0x650>)
 80018b8:	f002 fa3d 	bl	8003d36 <HAL_UART_Transmit>

					ptr1++;
 80018bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80018c0:	3301      	adds	r3, #1
 80018c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

					char *ptr4 = valid;
 80018c6:	4b67      	ldr	r3, [pc, #412]	; (8001a64 <main+0x65c>)
 80018c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

					int n4 = 0;
 80018cc:	2300      	movs	r3, #0
 80018ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
					while ((*ptr1) != ',') {
 80018d2:	e014      	b.n	80018fe <main+0x4f6>
 80018d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80018d8:	781a      	ldrb	r2, [r3, #0]
						memcpy(ptr4, ptr1, 1);
 80018da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80018de:	701a      	strb	r2, [r3, #0]
						ptr4++;
 80018e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80018e4:	3301      	adds	r3, #1
 80018e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
						ptr1++;
 80018ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80018ee:	3301      	adds	r3, #1
 80018f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
						n4++;
 80018f4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80018f8:	3301      	adds	r3, #1
 80018fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
					while ((*ptr1) != ',') {
 80018fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	2b2c      	cmp	r3, #44	; 0x2c
 8001906:	d1e5      	bne.n	80018d4 <main+0x4cc>
					}

					memcpy(ptr4, "\0", 1);
 8001908:	2201      	movs	r2, #1
 800190a:	494a      	ldr	r1, [pc, #296]	; (8001a34 <main+0x62c>)
 800190c:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8001910:	f004 faf4 	bl	8005efc <memcpy>

					HAL_UART_Transmit(&huart1, (uint8_t*) valid, n4 + 1, 500);
 8001914:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001918:	b29b      	uxth	r3, r3
 800191a:	3301      	adds	r3, #1
 800191c:	b29a      	uxth	r2, r3
 800191e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001922:	4950      	ldr	r1, [pc, #320]	; (8001a64 <main+0x65c>)
 8001924:	484c      	ldr	r0, [pc, #304]	; (8001a58 <main+0x650>)
 8001926:	f002 fa06 	bl	8003d36 <HAL_UART_Transmit>

					printf("\r\n");
 800192a:	484c      	ldr	r0, [pc, #304]	; (8001a5c <main+0x654>)
 800192c:	f005 f9f0 	bl	8006d10 <puts>

					ptr1++;
 8001930:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001934:	3301      	adds	r3, #1
 8001936:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

					char *ptr5 = latitude;
 800193a:	4b4b      	ldr	r3, [pc, #300]	; (8001a68 <main+0x660>)
 800193c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

					int n5 = 0;
 8001940:	2300      	movs	r3, #0
 8001942:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
					while ((*ptr1) != ',') {
 8001946:	e014      	b.n	8001972 <main+0x56a>
 8001948:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800194c:	781a      	ldrb	r2, [r3, #0]
						memcpy(ptr5, ptr1, 1);
 800194e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001952:	701a      	strb	r2, [r3, #0]

						ptr5++;
 8001954:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001958:	3301      	adds	r3, #1
 800195a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
						ptr1++;
 800195e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001962:	3301      	adds	r3, #1
 8001964:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
						n5++;
 8001968:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800196c:	3301      	adds	r3, #1
 800196e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
					while ((*ptr1) != ',') {
 8001972:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	2b2c      	cmp	r3, #44	; 0x2c
 800197a:	d1e5      	bne.n	8001948 <main+0x540>
					}

					memcpy(ptr5, "\0", 1);
 800197c:	2201      	movs	r2, #1
 800197e:	492d      	ldr	r1, [pc, #180]	; (8001a34 <main+0x62c>)
 8001980:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8001984:	f004 faba 	bl	8005efc <memcpy>

					if (n5 == 10) {
 8001988:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800198c:	2b0a      	cmp	r3, #10
 800198e:	d145      	bne.n	8001a1c <main+0x614>
						double f_latitude = atof(latitude);
 8001990:	4835      	ldr	r0, [pc, #212]	; (8001a68 <main+0x660>)
 8001992:	f004 fa86 	bl	8005ea2 <atof>
 8001996:	e9c7 011e 	strd	r0, r1, [r7, #120]	; 0x78
						if (f_latitude > 0) {
 800199a:	f04f 0200 	mov.w	r2, #0
 800199e:	f04f 0300 	mov.w	r3, #0
 80019a2:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80019a6:	f7ff f827 	bl	80009f8 <__aeabi_dcmpgt>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d035      	beq.n	8001a1c <main+0x614>
							double degree_latitude = (f_latitude / 100.0);
 80019b0:	f04f 0200 	mov.w	r2, #0
 80019b4:	4b2d      	ldr	r3, [pc, #180]	; (8001a6c <main+0x664>)
 80019b6:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80019ba:	f7fe feb7 	bl	800072c <__aeabi_ddiv>
 80019be:	4602      	mov	r2, r0
 80019c0:	460b      	mov	r3, r1
 80019c2:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

							double minute_latitude = f_latitude
									- ((degree_latitude) * 100.0);
 80019c6:	f04f 0200 	mov.w	r2, #0
 80019ca:	4b28      	ldr	r3, [pc, #160]	; (8001a6c <main+0x664>)
 80019cc:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80019d0:	f7fe fd82 	bl	80004d8 <__aeabi_dmul>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
							double minute_latitude = f_latitude
 80019d8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80019dc:	f7fe fbc4 	bl	8000168 <__aeabi_dsub>
 80019e0:	4602      	mov	r2, r0
 80019e2:	460b      	mov	r3, r1
 80019e4:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
							double minute2degree_latitude = minute_latitude
 80019e8:	f04f 0200 	mov.w	r2, #0
 80019ec:	4b14      	ldr	r3, [pc, #80]	; (8001a40 <main+0x638>)
 80019ee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80019f2:	f7fe fe9b 	bl	800072c <__aeabi_ddiv>
 80019f6:	4602      	mov	r2, r0
 80019f8:	460b      	mov	r3, r1
 80019fa:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
									/ 60.000;
							f_latitude2 = degree_latitude
 80019fe:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001a02:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001a06:	f7fe fbb1 	bl	800016c <__adddf3>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100
									+ minute2degree_latitude;

							printf("latitude: %.7f\r\n", f_latitude2);
 8001a12:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 8001a16:	4816      	ldr	r0, [pc, #88]	; (8001a70 <main+0x668>)
 8001a18:	f005 f8f4 	bl	8006c04 <iprintf>
						}
					}

					//HAL_UART_Transmit(&huart1, (uint8_t*)latitude, n5+1, 500);

					ptr1++;
 8001a1c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001a20:	3301      	adds	r3, #1
 8001a22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

					char *ptr6 = NS;
 8001a26:	4b13      	ldr	r3, [pc, #76]	; (8001a74 <main+0x66c>)
 8001a28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

					int n6 = 0;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
					while ((*ptr1) != ',') {
 8001a32:	e036      	b.n	8001aa2 <main+0x69a>
 8001a34:	0800bd74 	.word	0x0800bd74
 8001a38:	200007fc 	.word	0x200007fc
 8001a3c:	20000800 	.word	0x20000800
 8001a40:	404e0000 	.word	0x404e0000
 8001a44:	20000938 	.word	0x20000938
 8001a48:	0800bd78 	.word	0x0800bd78
 8001a4c:	0800bd8c 	.word	0x0800bd8c
 8001a50:	0800bda0 	.word	0x0800bda0
 8001a54:	0800bdb8 	.word	0x0800bdb8
 8001a58:	20000254 	.word	0x20000254
 8001a5c:	0800bd70 	.word	0x0800bd70
 8001a60:	0800bd60 	.word	0x0800bd60
 8001a64:	2000081c 	.word	0x2000081c
 8001a68:	20000824 	.word	0x20000824
 8001a6c:	40590000 	.word	0x40590000
 8001a70:	0800bdcc 	.word	0x0800bdcc
 8001a74:	20000844 	.word	0x20000844
 8001a78:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001a7c:	781a      	ldrb	r2, [r3, #0]
						memcpy(ptr6, ptr1, 1);
 8001a7e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001a82:	701a      	strb	r2, [r3, #0]
						ptr6++;
 8001a84:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001a88:	3301      	adds	r3, #1
 8001a8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
						ptr1++;
 8001a8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001a92:	3301      	adds	r3, #1
 8001a94:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
						n6++;
 8001a98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
					while ((*ptr1) != ',') {
 8001aa2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	2b2c      	cmp	r3, #44	; 0x2c
 8001aaa:	d1e5      	bne.n	8001a78 <main+0x670>
					}

					memcpy(ptr6, "\0", 1);
 8001aac:	2201      	movs	r2, #1
 8001aae:	4998      	ldr	r1, [pc, #608]	; (8001d10 <main+0x908>)
 8001ab0:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8001ab4:	f004 fa22 	bl	8005efc <memcpy>

					HAL_UART_Transmit(&huart1, (uint8_t*) NS, n6 + 1, 500);
 8001ab8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	3301      	adds	r3, #1
 8001ac0:	b29a      	uxth	r2, r3
 8001ac2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001ac6:	4993      	ldr	r1, [pc, #588]	; (8001d14 <main+0x90c>)
 8001ac8:	4893      	ldr	r0, [pc, #588]	; (8001d18 <main+0x910>)
 8001aca:	f002 f934 	bl	8003d36 <HAL_UART_Transmit>

					printf("\r\n");
 8001ace:	4893      	ldr	r0, [pc, #588]	; (8001d1c <main+0x914>)
 8001ad0:	f005 f91e 	bl	8006d10 <puts>
					ptr1++;
 8001ad4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001ad8:	3301      	adds	r3, #1
 8001ada:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

					char *ptr7 = longitude;
 8001ade:	4b90      	ldr	r3, [pc, #576]	; (8001d20 <main+0x918>)
 8001ae0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

					int n7 = 0;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
					while ((*ptr1) != ',') {
 8001aea:	e014      	b.n	8001b16 <main+0x70e>
 8001aec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001af0:	781a      	ldrb	r2, [r3, #0]
						memcpy(ptr7, ptr1, 1);
 8001af2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001af6:	701a      	strb	r2, [r3, #0]
						ptr7++;
 8001af8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001afc:	3301      	adds	r3, #1
 8001afe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
						ptr1++;
 8001b02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001b06:	3301      	adds	r3, #1
 8001b08:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
						n7++;
 8001b0c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001b10:	3301      	adds	r3, #1
 8001b12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
					while ((*ptr1) != ',') {
 8001b16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	2b2c      	cmp	r3, #44	; 0x2c
 8001b1e:	d1e5      	bne.n	8001aec <main+0x6e4>
					}

					memcpy(ptr7, "\0", 1);
 8001b20:	2201      	movs	r2, #1
 8001b22:	497b      	ldr	r1, [pc, #492]	; (8001d10 <main+0x908>)
 8001b24:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8001b28:	f004 f9e8 	bl	8005efc <memcpy>

					if (n7 == 11) {
 8001b2c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001b30:	2b0b      	cmp	r3, #11
 8001b32:	d145      	bne.n	8001bc0 <main+0x7b8>
						double f_longitude = atof(longitude);
 8001b34:	487a      	ldr	r0, [pc, #488]	; (8001d20 <main+0x918>)
 8001b36:	f004 f9b4 	bl	8005ea2 <atof>
 8001b3a:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
						if (f_longitude > 0) {
 8001b3e:	f04f 0200 	mov.w	r2, #0
 8001b42:	f04f 0300 	mov.w	r3, #0
 8001b46:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001b4a:	f7fe ff55 	bl	80009f8 <__aeabi_dcmpgt>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d035      	beq.n	8001bc0 <main+0x7b8>
							double degree_longitude = (f_longitude / 100.0);
 8001b54:	f04f 0200 	mov.w	r2, #0
 8001b58:	4b72      	ldr	r3, [pc, #456]	; (8001d24 <main+0x91c>)
 8001b5a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001b5e:	f7fe fde5 	bl	800072c <__aeabi_ddiv>
 8001b62:	4602      	mov	r2, r0
 8001b64:	460b      	mov	r3, r1
 8001b66:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
							double minute_longitude = f_longitude
									- ((degree_longitude) * 100.0);
 8001b6a:	f04f 0200 	mov.w	r2, #0
 8001b6e:	4b6d      	ldr	r3, [pc, #436]	; (8001d24 <main+0x91c>)
 8001b70:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001b74:	f7fe fcb0 	bl	80004d8 <__aeabi_dmul>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	460b      	mov	r3, r1
							double minute_longitude = f_longitude
 8001b7c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001b80:	f7fe faf2 	bl	8000168 <__aeabi_dsub>
 8001b84:	4602      	mov	r2, r0
 8001b86:	460b      	mov	r3, r1
 8001b88:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
							double minute2degree_longitude = minute_longitude
 8001b8c:	f04f 0200 	mov.w	r2, #0
 8001b90:	4b65      	ldr	r3, [pc, #404]	; (8001d28 <main+0x920>)
 8001b92:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001b96:	f7fe fdc9 	bl	800072c <__aeabi_ddiv>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
									/ 60.0;
							f_longitude2 = degree_longitude
 8001ba2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001ba6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001baa:	f7fe fadf 	bl	800016c <__adddf3>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
									+ minute2degree_longitude;

							printf("longitude: %.7f\r\n", f_longitude2);
 8001bb6:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 8001bba:	485c      	ldr	r0, [pc, #368]	; (8001d2c <main+0x924>)
 8001bbc:	f005 f822 	bl	8006c04 <iprintf>
						}
					}

					//HAL_UART_Transmit(&huart1, (uint8_t*)longitude, n7+1, 500);

					ptr1++;
 8001bc0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

					char *ptr8 = EW;
 8001bca:	4b59      	ldr	r3, [pc, #356]	; (8001d30 <main+0x928>)
 8001bcc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

					int n8 = 0;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
					while ((*ptr1) != ',') {
 8001bd6:	e014      	b.n	8001c02 <main+0x7fa>
 8001bd8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001bdc:	781a      	ldrb	r2, [r3, #0]
						memcpy(ptr8, ptr1, 1);
 8001bde:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001be2:	701a      	strb	r2, [r3, #0]
						ptr8++;
 8001be4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001be8:	3301      	adds	r3, #1
 8001bea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
						ptr1++;
 8001bee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
						n8++;
 8001bf8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
					while ((*ptr1) != ',') {
 8001c02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	2b2c      	cmp	r3, #44	; 0x2c
 8001c0a:	d1e5      	bne.n	8001bd8 <main+0x7d0>
					}

					memcpy(ptr8, "\0", 1);
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	4940      	ldr	r1, [pc, #256]	; (8001d10 <main+0x908>)
 8001c10:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8001c14:	f004 f972 	bl	8005efc <memcpy>

					HAL_UART_Transmit(&huart1, (uint8_t*) EW, n8 + 1, 500);
 8001c18:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	3301      	adds	r3, #1
 8001c20:	b29a      	uxth	r2, r3
 8001c22:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001c26:	4942      	ldr	r1, [pc, #264]	; (8001d30 <main+0x928>)
 8001c28:	483b      	ldr	r0, [pc, #236]	; (8001d18 <main+0x910>)
 8001c2a:	f002 f884 	bl	8003d36 <HAL_UART_Transmit>

					printf("\r\n");
 8001c2e:	483b      	ldr	r0, [pc, #236]	; (8001d1c <main+0x914>)
 8001c30:	f005 f86e 	bl	8006d10 <puts>


					if ((f_latitude1 == 0) && (f_longitude1 == 0)) {
 8001c34:	4b3f      	ldr	r3, [pc, #252]	; (8001d34 <main+0x92c>)
 8001c36:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c3a:	f04f 0200 	mov.w	r2, #0
 8001c3e:	f04f 0300 	mov.w	r3, #0
 8001c42:	f7fe feb1 	bl	80009a8 <__aeabi_dcmpeq>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d015      	beq.n	8001c78 <main+0x870>
 8001c4c:	4b3a      	ldr	r3, [pc, #232]	; (8001d38 <main+0x930>)
 8001c4e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c52:	f04f 0200 	mov.w	r2, #0
 8001c56:	f04f 0300 	mov.w	r3, #0
 8001c5a:	f7fe fea5 	bl	80009a8 <__aeabi_dcmpeq>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d009      	beq.n	8001c78 <main+0x870>
						f_latitude1 = f_latitude2;
 8001c64:	4933      	ldr	r1, [pc, #204]	; (8001d34 <main+0x92c>)
 8001c66:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 8001c6a:	e9c1 2300 	strd	r2, r3, [r1]
						f_longitude1 = f_longitude2;
 8001c6e:	4932      	ldr	r1, [pc, #200]	; (8001d38 <main+0x930>)
 8001c70:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 8001c74:	e9c1 2300 	strd	r2, r3, [r1]
					}

					if (time_interval >= 0.500 && f_latitude1 > 0) {
 8001c78:	f04f 0200 	mov.w	r2, #0
 8001c7c:	4b2f      	ldr	r3, [pc, #188]	; (8001d3c <main+0x934>)
 8001c7e:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8001c82:	f7fe feaf 	bl	80009e4 <__aeabi_dcmpge>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d065      	beq.n	8001d58 <main+0x950>
 8001c8c:	4b29      	ldr	r3, [pc, #164]	; (8001d34 <main+0x92c>)
 8001c8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c92:	f04f 0200 	mov.w	r2, #0
 8001c96:	f04f 0300 	mov.w	r3, #0
 8001c9a:	f7fe fead 	bl	80009f8 <__aeabi_dcmpgt>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d059      	beq.n	8001d58 <main+0x950>

							distance = calc_distance(f_latitude1, f_longitude1,
 8001ca4:	4b23      	ldr	r3, [pc, #140]	; (8001d34 <main+0x92c>)
 8001ca6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001caa:	4b23      	ldr	r3, [pc, #140]	; (8001d38 <main+0x930>)
 8001cac:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001cb0:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 8001cb4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001cb8:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 8001cbc:	e9cd 2300 	strd	r2, r3, [sp]
 8001cc0:	4622      	mov	r2, r4
 8001cc2:	462b      	mov	r3, r5
 8001cc4:	f7ff faa8 	bl	8001218 <calc_distance>
 8001cc8:	e9c7 0124 	strd	r0, r1, [r7, #144]	; 0x90
									f_latitude2, f_longitude2);

						printf("distance : %.7f\r\n", distance);
 8001ccc:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8001cd0:	481b      	ldr	r0, [pc, #108]	; (8001d40 <main+0x938>)
 8001cd2:	f004 ff97 	bl	8006c04 <iprintf>

						f_latitude1 = f_latitude2;
 8001cd6:	4917      	ldr	r1, [pc, #92]	; (8001d34 <main+0x92c>)
 8001cd8:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 8001cdc:	e9c1 2300 	strd	r2, r3, [r1]
						f_longitude1 = f_longitude2;
 8001ce0:	4915      	ldr	r1, [pc, #84]	; (8001d38 <main+0x930>)
 8001ce2:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 8001ce6:	e9c1 2300 	strd	r2, r3, [r1]
						if (distance == 0) {
 8001cea:	f04f 0200 	mov.w	r2, #0
 8001cee:	f04f 0300 	mov.w	r3, #0
 8001cf2:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8001cf6:	f7fe fe57 	bl	80009a8 <__aeabi_dcmpeq>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d021      	beq.n	8001d44 <main+0x93c>
							speed = 0.0;
 8001d00:	f04f 0200 	mov.w	r2, #0
 8001d04:	f04f 0300 	mov.w	r3, #0
 8001d08:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
 8001d0c:	e024      	b.n	8001d58 <main+0x950>
 8001d0e:	bf00      	nop
 8001d10:	0800bd74 	.word	0x0800bd74
 8001d14:	20000844 	.word	0x20000844
 8001d18:	20000254 	.word	0x20000254
 8001d1c:	0800bd70 	.word	0x0800bd70
 8001d20:	20000864 	.word	0x20000864
 8001d24:	40590000 	.word	0x40590000
 8001d28:	404e0000 	.word	0x404e0000
 8001d2c:	0800bde0 	.word	0x0800bde0
 8001d30:	20000884 	.word	0x20000884
 8001d34:	20000940 	.word	0x20000940
 8001d38:	20000948 	.word	0x20000948
 8001d3c:	3fe00000 	.word	0x3fe00000
 8001d40:	0800bdf4 	.word	0x0800bdf4
						} else {
							speed = distance / time_interval;
 8001d44:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8001d48:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8001d4c:	f7fe fcee 	bl	800072c <__aeabi_ddiv>
 8001d50:	4602      	mov	r2, r0
 8001d52:	460b      	mov	r3, r1
 8001d54:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
						}

					}
					printf("speed : %.7f\r\n", speed);
 8001d58:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8001d5c:	4822      	ldr	r0, [pc, #136]	; (8001de8 <main+0x9e0>)
 8001d5e:	f004 ff51 	bl	8006c04 <iprintf>
				}
			}
			sprintf(str_buff, "SPEED : %.3f", speed);
 8001d62:	f107 001c 	add.w	r0, r7, #28
 8001d66:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8001d6a:	4920      	ldr	r1, [pc, #128]	; (8001dec <main+0x9e4>)
 8001d6c:	f004 ffdc 	bl	8006d28 <siprintf>
			u8g2_FirstPage(&u8g2);
 8001d70:	481f      	ldr	r0, [pc, #124]	; (8001df0 <main+0x9e8>)
 8001d72:	f002 fcf6 	bl	8004762 <u8g2_FirstPage>
			do {
				u8g2_DrawStrX2(&u8g2, 5, 30, str_buff);
 8001d76:	f107 031c 	add.w	r3, r7, #28
 8001d7a:	221e      	movs	r2, #30
 8001d7c:	2105      	movs	r1, #5
 8001d7e:	481c      	ldr	r0, [pc, #112]	; (8001df0 <main+0x9e8>)
 8001d80:	f003 f93e 	bl	8005000 <u8g2_DrawStrX2>

			} while (u8g2_NextPage(&u8g2));
 8001d84:	481a      	ldr	r0, [pc, #104]	; (8001df0 <main+0x9e8>)
 8001d86:	f002 fd00 	bl	800478a <u8g2_NextPage>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d1f2      	bne.n	8001d76 <main+0x96e>

			memset(sentence, 0, sizeof(sentence));
 8001d90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d94:	2100      	movs	r1, #0
 8001d96:	4817      	ldr	r0, [pc, #92]	; (8001df4 <main+0x9ec>)
 8001d98:	f004 f8be 	bl	8005f18 <memset>

			memset(type, 0, sizeof(type));
 8001d9c:	2220      	movs	r2, #32
 8001d9e:	2100      	movs	r1, #0
 8001da0:	4815      	ldr	r0, [pc, #84]	; (8001df8 <main+0x9f0>)
 8001da2:	f004 f8b9 	bl	8005f18 <memset>
			memset(time, 0, sizeof(time));
 8001da6:	2220      	movs	r2, #32
 8001da8:	2100      	movs	r1, #0
 8001daa:	4814      	ldr	r0, [pc, #80]	; (8001dfc <main+0x9f4>)
 8001dac:	f004 f8b4 	bl	8005f18 <memset>
			memset(latitude, 0, sizeof(latitude));
 8001db0:	2220      	movs	r2, #32
 8001db2:	2100      	movs	r1, #0
 8001db4:	4812      	ldr	r0, [pc, #72]	; (8001e00 <main+0x9f8>)
 8001db6:	f004 f8af 	bl	8005f18 <memset>
			memset(NS, 0, sizeof(NS));
 8001dba:	2220      	movs	r2, #32
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	4811      	ldr	r0, [pc, #68]	; (8001e04 <main+0x9fc>)
 8001dc0:	f004 f8aa 	bl	8005f18 <memset>
			memset(longitude, 0, sizeof(longitude));
 8001dc4:	2220      	movs	r2, #32
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	480f      	ldr	r0, [pc, #60]	; (8001e08 <main+0xa00>)
 8001dca:	f004 f8a5 	bl	8005f18 <memset>
			memset(EW, 0, sizeof(EW));
 8001dce:	2220      	movs	r2, #32
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	480e      	ldr	r0, [pc, #56]	; (8001e0c <main+0xa04>)
 8001dd4:	f004 f8a0 	bl	8005f18 <memset>

		}
		memset(buff, 0, sizeof(buff));
 8001dd8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ddc:	2100      	movs	r1, #0
 8001dde:	480c      	ldr	r0, [pc, #48]	; (8001e10 <main+0xa08>)
 8001de0:	f004 f89a 	bl	8005f18 <memset>
	while (1) {
 8001de4:	f7ff bb6a 	b.w	80014bc <main+0xb4>
 8001de8:	0800be08 	.word	0x0800be08
 8001dec:	0800be18 	.word	0x0800be18
 8001df0:	200008a4 	.word	0x200008a4
 8001df4:	200006dc 	.word	0x200006dc
 8001df8:	200007dc 	.word	0x200007dc
 8001dfc:	200007fc 	.word	0x200007fc
 8001e00:	20000824 	.word	0x20000824
 8001e04:	20000844 	.word	0x20000844
 8001e08:	20000864 	.word	0x20000864
 8001e0c:	20000884 	.word	0x20000884
 8001e10:	200002dc 	.word	0x200002dc

08001e14 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b090      	sub	sp, #64	; 0x40
 8001e18:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001e1a:	f107 0318 	add.w	r3, r7, #24
 8001e1e:	2228      	movs	r2, #40	; 0x28
 8001e20:	2100      	movs	r1, #0
 8001e22:	4618      	mov	r0, r3
 8001e24:	f004 f878 	bl	8005f18 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001e28:	1d3b      	adds	r3, r7, #4
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	601a      	str	r2, [r3, #0]
 8001e2e:	605a      	str	r2, [r3, #4]
 8001e30:	609a      	str	r2, [r3, #8]
 8001e32:	60da      	str	r2, [r3, #12]
 8001e34:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e36:	2301      	movs	r3, #1
 8001e38:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e3e:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001e40:	2300      	movs	r3, #0
 8001e42:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e44:	2301      	movs	r3, #1
 8001e46:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e48:	2302      	movs	r3, #2
 8001e4a:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e50:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001e52:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001e56:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001e58:	f107 0318 	add.w	r3, r7, #24
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f001 f89d 	bl	8002f9c <HAL_RCC_OscConfig>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <SystemClock_Config+0x58>
		Error_Handler();
 8001e68:	f000 f904 	bl	8002074 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001e6c:	230f      	movs	r3, #15
 8001e6e:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e70:	2302      	movs	r3, #2
 8001e72:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e74:	2300      	movs	r3, #0
 8001e76:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e7c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001e82:	1d3b      	adds	r3, r7, #4
 8001e84:	2102      	movs	r1, #2
 8001e86:	4618      	mov	r0, r3
 8001e88:	f001 fb0a 	bl	80034a0 <HAL_RCC_ClockConfig>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <SystemClock_Config+0x82>
		Error_Handler();
 8001e92:	f000 f8ef 	bl	8002074 <Error_Handler>
	}
}
 8001e96:	bf00      	nop
 8001e98:	3740      	adds	r7, #64	; 0x40
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
	...

08001ea0 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001ea4:	4b18      	ldr	r3, [pc, #96]	; (8001f08 <MX_SPI1_Init+0x68>)
 8001ea6:	4a19      	ldr	r2, [pc, #100]	; (8001f0c <MX_SPI1_Init+0x6c>)
 8001ea8:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001eaa:	4b17      	ldr	r3, [pc, #92]	; (8001f08 <MX_SPI1_Init+0x68>)
 8001eac:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001eb0:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8001eb2:	4b15      	ldr	r3, [pc, #84]	; (8001f08 <MX_SPI1_Init+0x68>)
 8001eb4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001eb8:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001eba:	4b13      	ldr	r3, [pc, #76]	; (8001f08 <MX_SPI1_Init+0x68>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ec0:	4b11      	ldr	r3, [pc, #68]	; (8001f08 <MX_SPI1_Init+0x68>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ec6:	4b10      	ldr	r3, [pc, #64]	; (8001f08 <MX_SPI1_Init+0x68>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ecc:	4b0e      	ldr	r3, [pc, #56]	; (8001f08 <MX_SPI1_Init+0x68>)
 8001ece:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ed2:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001ed4:	4b0c      	ldr	r3, [pc, #48]	; (8001f08 <MX_SPI1_Init+0x68>)
 8001ed6:	2210      	movs	r2, #16
 8001ed8:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001eda:	4b0b      	ldr	r3, [pc, #44]	; (8001f08 <MX_SPI1_Init+0x68>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ee0:	4b09      	ldr	r3, [pc, #36]	; (8001f08 <MX_SPI1_Init+0x68>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ee6:	4b08      	ldr	r3, [pc, #32]	; (8001f08 <MX_SPI1_Init+0x68>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8001eec:	4b06      	ldr	r3, [pc, #24]	; (8001f08 <MX_SPI1_Init+0x68>)
 8001eee:	220a      	movs	r2, #10
 8001ef0:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8001ef2:	4805      	ldr	r0, [pc, #20]	; (8001f08 <MX_SPI1_Init+0x68>)
 8001ef4:	f001 fc6c 	bl	80037d0 <HAL_SPI_Init>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <MX_SPI1_Init+0x62>
		Error_Handler();
 8001efe:	f000 f8b9 	bl	8002074 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001f02:	bf00      	nop
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	200001fc 	.word	0x200001fc
 8001f0c:	40013000 	.word	0x40013000

08001f10 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001f14:	4b11      	ldr	r3, [pc, #68]	; (8001f5c <MX_USART1_UART_Init+0x4c>)
 8001f16:	4a12      	ldr	r2, [pc, #72]	; (8001f60 <MX_USART1_UART_Init+0x50>)
 8001f18:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 8001f1a:	4b10      	ldr	r3, [pc, #64]	; (8001f5c <MX_USART1_UART_Init+0x4c>)
 8001f1c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001f20:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f22:	4b0e      	ldr	r3, [pc, #56]	; (8001f5c <MX_USART1_UART_Init+0x4c>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001f28:	4b0c      	ldr	r3, [pc, #48]	; (8001f5c <MX_USART1_UART_Init+0x4c>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001f2e:	4b0b      	ldr	r3, [pc, #44]	; (8001f5c <MX_USART1_UART_Init+0x4c>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001f34:	4b09      	ldr	r3, [pc, #36]	; (8001f5c <MX_USART1_UART_Init+0x4c>)
 8001f36:	220c      	movs	r2, #12
 8001f38:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f3a:	4b08      	ldr	r3, [pc, #32]	; (8001f5c <MX_USART1_UART_Init+0x4c>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f40:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <MX_USART1_UART_Init+0x4c>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001f46:	4805      	ldr	r0, [pc, #20]	; (8001f5c <MX_USART1_UART_Init+0x4c>)
 8001f48:	f001 fea8 	bl	8003c9c <HAL_UART_Init>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8001f52:	f000 f88f 	bl	8002074 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001f56:	bf00      	nop
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	20000254 	.word	0x20000254
 8001f60:	40013800 	.word	0x40013800

08001f64 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001f68:	4b11      	ldr	r3, [pc, #68]	; (8001fb0 <MX_USART2_UART_Init+0x4c>)
 8001f6a:	4a12      	ldr	r2, [pc, #72]	; (8001fb4 <MX_USART2_UART_Init+0x50>)
 8001f6c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 8001f6e:	4b10      	ldr	r3, [pc, #64]	; (8001fb0 <MX_USART2_UART_Init+0x4c>)
 8001f70:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001f74:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f76:	4b0e      	ldr	r3, [pc, #56]	; (8001fb0 <MX_USART2_UART_Init+0x4c>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001f7c:	4b0c      	ldr	r3, [pc, #48]	; (8001fb0 <MX_USART2_UART_Init+0x4c>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001f82:	4b0b      	ldr	r3, [pc, #44]	; (8001fb0 <MX_USART2_UART_Init+0x4c>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001f88:	4b09      	ldr	r3, [pc, #36]	; (8001fb0 <MX_USART2_UART_Init+0x4c>)
 8001f8a:	220c      	movs	r2, #12
 8001f8c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f8e:	4b08      	ldr	r3, [pc, #32]	; (8001fb0 <MX_USART2_UART_Init+0x4c>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f94:	4b06      	ldr	r3, [pc, #24]	; (8001fb0 <MX_USART2_UART_Init+0x4c>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001f9a:	4805      	ldr	r0, [pc, #20]	; (8001fb0 <MX_USART2_UART_Init+0x4c>)
 8001f9c:	f001 fe7e 	bl	8003c9c <HAL_UART_Init>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8001fa6:	f000 f865 	bl	8002074 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001faa:	bf00      	nop
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	20000298 	.word	0x20000298
 8001fb4:	40004400 	.word	0x40004400

08001fb8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b088      	sub	sp, #32
 8001fbc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001fbe:	f107 0310 	add.w	r3, r7, #16
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	601a      	str	r2, [r3, #0]
 8001fc6:	605a      	str	r2, [r3, #4]
 8001fc8:	609a      	str	r2, [r3, #8]
 8001fca:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001fcc:	4b26      	ldr	r3, [pc, #152]	; (8002068 <MX_GPIO_Init+0xb0>)
 8001fce:	699b      	ldr	r3, [r3, #24]
 8001fd0:	4a25      	ldr	r2, [pc, #148]	; (8002068 <MX_GPIO_Init+0xb0>)
 8001fd2:	f043 0320 	orr.w	r3, r3, #32
 8001fd6:	6193      	str	r3, [r2, #24]
 8001fd8:	4b23      	ldr	r3, [pc, #140]	; (8002068 <MX_GPIO_Init+0xb0>)
 8001fda:	699b      	ldr	r3, [r3, #24]
 8001fdc:	f003 0320 	and.w	r3, r3, #32
 8001fe0:	60fb      	str	r3, [r7, #12]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe4:	4b20      	ldr	r3, [pc, #128]	; (8002068 <MX_GPIO_Init+0xb0>)
 8001fe6:	699b      	ldr	r3, [r3, #24]
 8001fe8:	4a1f      	ldr	r2, [pc, #124]	; (8002068 <MX_GPIO_Init+0xb0>)
 8001fea:	f043 0304 	orr.w	r3, r3, #4
 8001fee:	6193      	str	r3, [r2, #24]
 8001ff0:	4b1d      	ldr	r3, [pc, #116]	; (8002068 <MX_GPIO_Init+0xb0>)
 8001ff2:	699b      	ldr	r3, [r3, #24]
 8001ff4:	f003 0304 	and.w	r3, r3, #4
 8001ff8:	60bb      	str	r3, [r7, #8]
 8001ffa:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001ffc:	4b1a      	ldr	r3, [pc, #104]	; (8002068 <MX_GPIO_Init+0xb0>)
 8001ffe:	699b      	ldr	r3, [r3, #24]
 8002000:	4a19      	ldr	r2, [pc, #100]	; (8002068 <MX_GPIO_Init+0xb0>)
 8002002:	f043 0308 	orr.w	r3, r3, #8
 8002006:	6193      	str	r3, [r2, #24]
 8002008:	4b17      	ldr	r3, [pc, #92]	; (8002068 <MX_GPIO_Init+0xb0>)
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	f003 0308 	and.w	r3, r3, #8
 8002010:	607b      	str	r3, [r7, #4]
 8002012:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, OLED_RST_Pin | OLED_DC_Pin, GPIO_PIN_SET);
 8002014:	2201      	movs	r2, #1
 8002016:	2150      	movs	r1, #80	; 0x50
 8002018:	4814      	ldr	r0, [pc, #80]	; (800206c <MX_GPIO_Init+0xb4>)
 800201a:	f000 ffa7 	bl	8002f6c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_SET);
 800201e:	2201      	movs	r2, #1
 8002020:	2101      	movs	r1, #1
 8002022:	4813      	ldr	r0, [pc, #76]	; (8002070 <MX_GPIO_Init+0xb8>)
 8002024:	f000 ffa2 	bl	8002f6c <HAL_GPIO_WritePin>

	/*Configure GPIO pins : OLED_RST_Pin OLED_DC_Pin */
	GPIO_InitStruct.Pin = OLED_RST_Pin | OLED_DC_Pin;
 8002028:	2350      	movs	r3, #80	; 0x50
 800202a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800202c:	2301      	movs	r3, #1
 800202e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002030:	2301      	movs	r3, #1
 8002032:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002034:	2303      	movs	r3, #3
 8002036:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002038:	f107 0310 	add.w	r3, r7, #16
 800203c:	4619      	mov	r1, r3
 800203e:	480b      	ldr	r0, [pc, #44]	; (800206c <MX_GPIO_Init+0xb4>)
 8002040:	f000 fe10 	bl	8002c64 <HAL_GPIO_Init>

	/*Configure GPIO pin : OLED_CS_Pin */
	GPIO_InitStruct.Pin = OLED_CS_Pin;
 8002044:	2301      	movs	r3, #1
 8002046:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002048:	2301      	movs	r3, #1
 800204a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800204c:	2301      	movs	r3, #1
 800204e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002050:	2303      	movs	r3, #3
 8002052:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(OLED_CS_GPIO_Port, &GPIO_InitStruct);
 8002054:	f107 0310 	add.w	r3, r7, #16
 8002058:	4619      	mov	r1, r3
 800205a:	4805      	ldr	r0, [pc, #20]	; (8002070 <MX_GPIO_Init+0xb8>)
 800205c:	f000 fe02 	bl	8002c64 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8002060:	bf00      	nop
 8002062:	3720      	adds	r7, #32
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	40021000 	.word	0x40021000
 800206c:	40010800 	.word	0x40010800
 8002070:	40010c00 	.word	0x40010c00

08002074 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002078:	b672      	cpsid	i
}
 800207a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800207c:	e7fe      	b.n	800207c <Error_Handler+0x8>
	...

08002080 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002086:	4b15      	ldr	r3, [pc, #84]	; (80020dc <HAL_MspInit+0x5c>)
 8002088:	699b      	ldr	r3, [r3, #24]
 800208a:	4a14      	ldr	r2, [pc, #80]	; (80020dc <HAL_MspInit+0x5c>)
 800208c:	f043 0301 	orr.w	r3, r3, #1
 8002090:	6193      	str	r3, [r2, #24]
 8002092:	4b12      	ldr	r3, [pc, #72]	; (80020dc <HAL_MspInit+0x5c>)
 8002094:	699b      	ldr	r3, [r3, #24]
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	60bb      	str	r3, [r7, #8]
 800209c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800209e:	4b0f      	ldr	r3, [pc, #60]	; (80020dc <HAL_MspInit+0x5c>)
 80020a0:	69db      	ldr	r3, [r3, #28]
 80020a2:	4a0e      	ldr	r2, [pc, #56]	; (80020dc <HAL_MspInit+0x5c>)
 80020a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020a8:	61d3      	str	r3, [r2, #28]
 80020aa:	4b0c      	ldr	r3, [pc, #48]	; (80020dc <HAL_MspInit+0x5c>)
 80020ac:	69db      	ldr	r3, [r3, #28]
 80020ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b2:	607b      	str	r3, [r7, #4]
 80020b4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80020b6:	4b0a      	ldr	r3, [pc, #40]	; (80020e0 <HAL_MspInit+0x60>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	60fb      	str	r3, [r7, #12]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80020c2:	60fb      	str	r3, [r7, #12]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80020ca:	60fb      	str	r3, [r7, #12]
 80020cc:	4a04      	ldr	r2, [pc, #16]	; (80020e0 <HAL_MspInit+0x60>)
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020d2:	bf00      	nop
 80020d4:	3714      	adds	r7, #20
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bc80      	pop	{r7}
 80020da:	4770      	bx	lr
 80020dc:	40021000 	.word	0x40021000
 80020e0:	40010000 	.word	0x40010000

080020e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b088      	sub	sp, #32
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ec:	f107 0310 	add.w	r3, r7, #16
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]
 80020f4:	605a      	str	r2, [r3, #4]
 80020f6:	609a      	str	r2, [r3, #8]
 80020f8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a15      	ldr	r2, [pc, #84]	; (8002154 <HAL_SPI_MspInit+0x70>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d123      	bne.n	800214c <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002104:	4b14      	ldr	r3, [pc, #80]	; (8002158 <HAL_SPI_MspInit+0x74>)
 8002106:	699b      	ldr	r3, [r3, #24]
 8002108:	4a13      	ldr	r2, [pc, #76]	; (8002158 <HAL_SPI_MspInit+0x74>)
 800210a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800210e:	6193      	str	r3, [r2, #24]
 8002110:	4b11      	ldr	r3, [pc, #68]	; (8002158 <HAL_SPI_MspInit+0x74>)
 8002112:	699b      	ldr	r3, [r3, #24]
 8002114:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002118:	60fb      	str	r3, [r7, #12]
 800211a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800211c:	4b0e      	ldr	r3, [pc, #56]	; (8002158 <HAL_SPI_MspInit+0x74>)
 800211e:	699b      	ldr	r3, [r3, #24]
 8002120:	4a0d      	ldr	r2, [pc, #52]	; (8002158 <HAL_SPI_MspInit+0x74>)
 8002122:	f043 0304 	orr.w	r3, r3, #4
 8002126:	6193      	str	r3, [r2, #24]
 8002128:	4b0b      	ldr	r3, [pc, #44]	; (8002158 <HAL_SPI_MspInit+0x74>)
 800212a:	699b      	ldr	r3, [r3, #24]
 800212c:	f003 0304 	and.w	r3, r3, #4
 8002130:	60bb      	str	r3, [r7, #8]
 8002132:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002134:	23a0      	movs	r3, #160	; 0xa0
 8002136:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002138:	2302      	movs	r3, #2
 800213a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800213c:	2303      	movs	r3, #3
 800213e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002140:	f107 0310 	add.w	r3, r7, #16
 8002144:	4619      	mov	r1, r3
 8002146:	4805      	ldr	r0, [pc, #20]	; (800215c <HAL_SPI_MspInit+0x78>)
 8002148:	f000 fd8c 	bl	8002c64 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800214c:	bf00      	nop
 800214e:	3720      	adds	r7, #32
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	40013000 	.word	0x40013000
 8002158:	40021000 	.word	0x40021000
 800215c:	40010800 	.word	0x40010800

08002160 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b08a      	sub	sp, #40	; 0x28
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002168:	f107 0318 	add.w	r3, r7, #24
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	605a      	str	r2, [r3, #4]
 8002172:	609a      	str	r2, [r3, #8]
 8002174:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a3b      	ldr	r2, [pc, #236]	; (8002268 <HAL_UART_MspInit+0x108>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d132      	bne.n	80021e6 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002180:	4b3a      	ldr	r3, [pc, #232]	; (800226c <HAL_UART_MspInit+0x10c>)
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	4a39      	ldr	r2, [pc, #228]	; (800226c <HAL_UART_MspInit+0x10c>)
 8002186:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800218a:	6193      	str	r3, [r2, #24]
 800218c:	4b37      	ldr	r3, [pc, #220]	; (800226c <HAL_UART_MspInit+0x10c>)
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002194:	617b      	str	r3, [r7, #20]
 8002196:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002198:	4b34      	ldr	r3, [pc, #208]	; (800226c <HAL_UART_MspInit+0x10c>)
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	4a33      	ldr	r2, [pc, #204]	; (800226c <HAL_UART_MspInit+0x10c>)
 800219e:	f043 0304 	orr.w	r3, r3, #4
 80021a2:	6193      	str	r3, [r2, #24]
 80021a4:	4b31      	ldr	r3, [pc, #196]	; (800226c <HAL_UART_MspInit+0x10c>)
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	f003 0304 	and.w	r3, r3, #4
 80021ac:	613b      	str	r3, [r7, #16]
 80021ae:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80021b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b6:	2302      	movs	r3, #2
 80021b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021ba:	2303      	movs	r3, #3
 80021bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021be:	f107 0318 	add.w	r3, r7, #24
 80021c2:	4619      	mov	r1, r3
 80021c4:	482a      	ldr	r0, [pc, #168]	; (8002270 <HAL_UART_MspInit+0x110>)
 80021c6:	f000 fd4d 	bl	8002c64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80021ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021d0:	2300      	movs	r3, #0
 80021d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d4:	2300      	movs	r3, #0
 80021d6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021d8:	f107 0318 	add.w	r3, r7, #24
 80021dc:	4619      	mov	r1, r3
 80021de:	4824      	ldr	r0, [pc, #144]	; (8002270 <HAL_UART_MspInit+0x110>)
 80021e0:	f000 fd40 	bl	8002c64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80021e4:	e03c      	b.n	8002260 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a22      	ldr	r2, [pc, #136]	; (8002274 <HAL_UART_MspInit+0x114>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d137      	bne.n	8002260 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 80021f0:	4b1e      	ldr	r3, [pc, #120]	; (800226c <HAL_UART_MspInit+0x10c>)
 80021f2:	69db      	ldr	r3, [r3, #28]
 80021f4:	4a1d      	ldr	r2, [pc, #116]	; (800226c <HAL_UART_MspInit+0x10c>)
 80021f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021fa:	61d3      	str	r3, [r2, #28]
 80021fc:	4b1b      	ldr	r3, [pc, #108]	; (800226c <HAL_UART_MspInit+0x10c>)
 80021fe:	69db      	ldr	r3, [r3, #28]
 8002200:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002204:	60fb      	str	r3, [r7, #12]
 8002206:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002208:	4b18      	ldr	r3, [pc, #96]	; (800226c <HAL_UART_MspInit+0x10c>)
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	4a17      	ldr	r2, [pc, #92]	; (800226c <HAL_UART_MspInit+0x10c>)
 800220e:	f043 0304 	orr.w	r3, r3, #4
 8002212:	6193      	str	r3, [r2, #24]
 8002214:	4b15      	ldr	r3, [pc, #84]	; (800226c <HAL_UART_MspInit+0x10c>)
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	f003 0304 	and.w	r3, r3, #4
 800221c:	60bb      	str	r3, [r7, #8]
 800221e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002220:	2304      	movs	r3, #4
 8002222:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002224:	2302      	movs	r3, #2
 8002226:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002228:	2303      	movs	r3, #3
 800222a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800222c:	f107 0318 	add.w	r3, r7, #24
 8002230:	4619      	mov	r1, r3
 8002232:	480f      	ldr	r0, [pc, #60]	; (8002270 <HAL_UART_MspInit+0x110>)
 8002234:	f000 fd16 	bl	8002c64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002238:	2308      	movs	r3, #8
 800223a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800223c:	2300      	movs	r3, #0
 800223e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002240:	2300      	movs	r3, #0
 8002242:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002244:	f107 0318 	add.w	r3, r7, #24
 8002248:	4619      	mov	r1, r3
 800224a:	4809      	ldr	r0, [pc, #36]	; (8002270 <HAL_UART_MspInit+0x110>)
 800224c:	f000 fd0a 	bl	8002c64 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002250:	2200      	movs	r2, #0
 8002252:	2100      	movs	r1, #0
 8002254:	2026      	movs	r0, #38	; 0x26
 8002256:	f000 fc12 	bl	8002a7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800225a:	2026      	movs	r0, #38	; 0x26
 800225c:	f000 fc2b 	bl	8002ab6 <HAL_NVIC_EnableIRQ>
}
 8002260:	bf00      	nop
 8002262:	3728      	adds	r7, #40	; 0x28
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	40013800 	.word	0x40013800
 800226c:	40021000 	.word	0x40021000
 8002270:	40010800 	.word	0x40010800
 8002274:	40004400 	.word	0x40004400

08002278 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800227c:	e7fe      	b.n	800227c <NMI_Handler+0x4>

0800227e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800227e:	b480      	push	{r7}
 8002280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002282:	e7fe      	b.n	8002282 <HardFault_Handler+0x4>

08002284 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002288:	e7fe      	b.n	8002288 <MemManage_Handler+0x4>

0800228a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800228a:	b480      	push	{r7}
 800228c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800228e:	e7fe      	b.n	800228e <BusFault_Handler+0x4>

08002290 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002294:	e7fe      	b.n	8002294 <UsageFault_Handler+0x4>

08002296 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002296:	b480      	push	{r7}
 8002298:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800229a:	bf00      	nop
 800229c:	46bd      	mov	sp, r7
 800229e:	bc80      	pop	{r7}
 80022a0:	4770      	bx	lr

080022a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022a2:	b480      	push	{r7}
 80022a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022a6:	bf00      	nop
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bc80      	pop	{r7}
 80022ac:	4770      	bx	lr

080022ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022ae:	b480      	push	{r7}
 80022b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022b2:	bf00      	nop
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bc80      	pop	{r7}
 80022b8:	4770      	bx	lr

080022ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022ba:	b580      	push	{r7, lr}
 80022bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022be:	f000 fac7 	bl	8002850 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 80022c2:	f000 fc12 	bl	8002aea <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 80022c6:	bf00      	nop
 80022c8:	bd80      	pop	{r7, pc}
	...

080022cc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	Uart_isr(&huart2);
 80022d0:	4803      	ldr	r0, [pc, #12]	; (80022e0 <USART2_IRQHandler+0x14>)
 80022d2:	f000 fa29 	bl	8002728 <Uart_isr>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80022d6:	4802      	ldr	r0, [pc, #8]	; (80022e0 <USART2_IRQHandler+0x14>)
 80022d8:	f001 fdc0 	bl	8003e5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80022dc:	bf00      	nop
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	20000298 	.word	0x20000298

080022e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  return 1;
 80022e8:	2301      	movs	r3, #1
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bc80      	pop	{r7}
 80022f0:	4770      	bx	lr

080022f2 <_kill>:

int _kill(int pid, int sig)
{
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b082      	sub	sp, #8
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
 80022fa:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80022fc:	f003 fdd4 	bl	8005ea8 <__errno>
 8002300:	4603      	mov	r3, r0
 8002302:	2216      	movs	r2, #22
 8002304:	601a      	str	r2, [r3, #0]
  return -1;
 8002306:	f04f 33ff 	mov.w	r3, #4294967295
}
 800230a:	4618      	mov	r0, r3
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <_exit>:

void _exit (int status)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b082      	sub	sp, #8
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800231a:	f04f 31ff 	mov.w	r1, #4294967295
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f7ff ffe7 	bl	80022f2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002324:	e7fe      	b.n	8002324 <_exit+0x12>

08002326 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002326:	b580      	push	{r7, lr}
 8002328:	b086      	sub	sp, #24
 800232a:	af00      	add	r7, sp, #0
 800232c:	60f8      	str	r0, [r7, #12]
 800232e:	60b9      	str	r1, [r7, #8]
 8002330:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002332:	2300      	movs	r3, #0
 8002334:	617b      	str	r3, [r7, #20]
 8002336:	e00a      	b.n	800234e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002338:	f3af 8000 	nop.w
 800233c:	4601      	mov	r1, r0
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	1c5a      	adds	r2, r3, #1
 8002342:	60ba      	str	r2, [r7, #8]
 8002344:	b2ca      	uxtb	r2, r1
 8002346:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	3301      	adds	r3, #1
 800234c:	617b      	str	r3, [r7, #20]
 800234e:	697a      	ldr	r2, [r7, #20]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	429a      	cmp	r2, r3
 8002354:	dbf0      	blt.n	8002338 <_read+0x12>
  }

  return len;
 8002356:	687b      	ldr	r3, [r7, #4]
}
 8002358:	4618      	mov	r0, r3
 800235a:	3718      	adds	r7, #24
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b086      	sub	sp, #24
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800236c:	2300      	movs	r3, #0
 800236e:	617b      	str	r3, [r7, #20]
 8002370:	e009      	b.n	8002386 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	1c5a      	adds	r2, r3, #1
 8002376:	60ba      	str	r2, [r7, #8]
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	4618      	mov	r0, r3
 800237c:	f7fe ff16 	bl	80011ac <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	3301      	adds	r3, #1
 8002384:	617b      	str	r3, [r7, #20]
 8002386:	697a      	ldr	r2, [r7, #20]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	429a      	cmp	r2, r3
 800238c:	dbf1      	blt.n	8002372 <_write+0x12>
  }
  return len;
 800238e:	687b      	ldr	r3, [r7, #4]
}
 8002390:	4618      	mov	r0, r3
 8002392:	3718      	adds	r7, #24
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <_close>:

int _close(int file)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80023a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bc80      	pop	{r7}
 80023ac:	4770      	bx	lr

080023ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023ae:	b480      	push	{r7}
 80023b0:	b083      	sub	sp, #12
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
 80023b6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023be:	605a      	str	r2, [r3, #4]
  return 0;
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bc80      	pop	{r7}
 80023ca:	4770      	bx	lr

080023cc <_isatty>:

int _isatty(int file)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80023d4:	2301      	movs	r3, #1
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	bc80      	pop	{r7}
 80023de:	4770      	bx	lr

080023e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b085      	sub	sp, #20
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	60b9      	str	r1, [r7, #8]
 80023ea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3714      	adds	r7, #20
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bc80      	pop	{r7}
 80023f6:	4770      	bx	lr

080023f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b086      	sub	sp, #24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002400:	4a14      	ldr	r2, [pc, #80]	; (8002454 <_sbrk+0x5c>)
 8002402:	4b15      	ldr	r3, [pc, #84]	; (8002458 <_sbrk+0x60>)
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800240c:	4b13      	ldr	r3, [pc, #76]	; (800245c <_sbrk+0x64>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d102      	bne.n	800241a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002414:	4b11      	ldr	r3, [pc, #68]	; (800245c <_sbrk+0x64>)
 8002416:	4a12      	ldr	r2, [pc, #72]	; (8002460 <_sbrk+0x68>)
 8002418:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800241a:	4b10      	ldr	r3, [pc, #64]	; (800245c <_sbrk+0x64>)
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4413      	add	r3, r2
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	429a      	cmp	r2, r3
 8002426:	d207      	bcs.n	8002438 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002428:	f003 fd3e 	bl	8005ea8 <__errno>
 800242c:	4603      	mov	r3, r0
 800242e:	220c      	movs	r2, #12
 8002430:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002432:	f04f 33ff 	mov.w	r3, #4294967295
 8002436:	e009      	b.n	800244c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002438:	4b08      	ldr	r3, [pc, #32]	; (800245c <_sbrk+0x64>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800243e:	4b07      	ldr	r3, [pc, #28]	; (800245c <_sbrk+0x64>)
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4413      	add	r3, r2
 8002446:	4a05      	ldr	r2, [pc, #20]	; (800245c <_sbrk+0x64>)
 8002448:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800244a:	68fb      	ldr	r3, [r7, #12]
}
 800244c:	4618      	mov	r0, r3
 800244e:	3718      	adds	r7, #24
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	20005000 	.word	0x20005000
 8002458:	00000400 	.word	0x00000400
 800245c:	20000950 	.word	0x20000950
 8002460:	20001170 	.word	0x20001170

08002464 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002468:	bf00      	nop
 800246a:	46bd      	mov	sp, r7
 800246c:	bc80      	pop	{r7}
 800246e:	4770      	bx	lr

08002470 <u8x8_stm32_gpio_and_delay>:
#define TX_TIMEOUT		100

extern SPI_HandleTypeDef hspi1;

uint8_t u8x8_stm32_gpio_and_delay(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	607b      	str	r3, [r7, #4]
 800247a:	460b      	mov	r3, r1
 800247c:	72fb      	strb	r3, [r7, #11]
 800247e:	4613      	mov	r3, r2
 8002480:	72bb      	strb	r3, [r7, #10]
	/* STM32 supports HW SPI, Remove unused cases like U8X8_MSG_DELAY_XXX & U8X8_MSG_GPIO_XXX */
	switch(msg)
 8002482:	7afb      	ldrb	r3, [r7, #11]
 8002484:	3b28      	subs	r3, #40	; 0x28
 8002486:	2b23      	cmp	r3, #35	; 0x23
 8002488:	d864      	bhi.n	8002554 <u8x8_stm32_gpio_and_delay+0xe4>
 800248a:	a201      	add	r2, pc, #4	; (adr r2, 8002490 <u8x8_stm32_gpio_and_delay+0x20>)
 800248c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002490:	08002555 	.word	0x08002555
 8002494:	08002521 	.word	0x08002521
 8002498:	08002555 	.word	0x08002555
 800249c:	08002555 	.word	0x08002555
 80024a0:	08002555 	.word	0x08002555
 80024a4:	08002555 	.word	0x08002555
 80024a8:	08002555 	.word	0x08002555
 80024ac:	08002555 	.word	0x08002555
 80024b0:	08002555 	.word	0x08002555
 80024b4:	08002555 	.word	0x08002555
 80024b8:	08002555 	.word	0x08002555
 80024bc:	08002555 	.word	0x08002555
 80024c0:	08002555 	.word	0x08002555
 80024c4:	08002555 	.word	0x08002555
 80024c8:	08002555 	.word	0x08002555
 80024cc:	08002555 	.word	0x08002555
 80024d0:	08002555 	.word	0x08002555
 80024d4:	08002555 	.word	0x08002555
 80024d8:	08002555 	.word	0x08002555
 80024dc:	08002555 	.word	0x08002555
 80024e0:	08002555 	.word	0x08002555
 80024e4:	08002555 	.word	0x08002555
 80024e8:	08002555 	.word	0x08002555
 80024ec:	08002555 	.word	0x08002555
 80024f0:	08002555 	.word	0x08002555
 80024f4:	08002555 	.word	0x08002555
 80024f8:	08002555 	.word	0x08002555
 80024fc:	08002555 	.word	0x08002555
 8002500:	08002555 	.word	0x08002555
 8002504:	08002555 	.word	0x08002555
 8002508:	08002555 	.word	0x08002555
 800250c:	08002555 	.word	0x08002555
 8002510:	08002555 	.word	0x08002555
 8002514:	0800252b 	.word	0x0800252b
 8002518:	08002539 	.word	0x08002539
 800251c:	08002547 	.word	0x08002547
	case U8X8_MSG_GPIO_AND_DELAY_INIT:
		/* Insert codes for initialization */
		break;
	case U8X8_MSG_DELAY_MILLI:
		/* ms Delay */
		HAL_Delay(arg_int);
 8002520:	7abb      	ldrb	r3, [r7, #10]
 8002522:	4618      	mov	r0, r3
 8002524:	f000 f9b0 	bl	8002888 <HAL_Delay>
		break;
 8002528:	e014      	b.n	8002554 <u8x8_stm32_gpio_and_delay+0xe4>
	case U8X8_MSG_GPIO_CS:
		/* Insert codes for SS pin control */
		HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, arg_int);
 800252a:	7abb      	ldrb	r3, [r7, #10]
 800252c:	461a      	mov	r2, r3
 800252e:	2101      	movs	r1, #1
 8002530:	480b      	ldr	r0, [pc, #44]	; (8002560 <u8x8_stm32_gpio_and_delay+0xf0>)
 8002532:	f000 fd1b 	bl	8002f6c <HAL_GPIO_WritePin>
		break;
 8002536:	e00d      	b.n	8002554 <u8x8_stm32_gpio_and_delay+0xe4>
	case U8X8_MSG_GPIO_DC:
		/* Insert codes for DC pin control */
		HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, arg_int);
 8002538:	7abb      	ldrb	r3, [r7, #10]
 800253a:	461a      	mov	r2, r3
 800253c:	2140      	movs	r1, #64	; 0x40
 800253e:	4809      	ldr	r0, [pc, #36]	; (8002564 <u8x8_stm32_gpio_and_delay+0xf4>)
 8002540:	f000 fd14 	bl	8002f6c <HAL_GPIO_WritePin>
		break;
 8002544:	e006      	b.n	8002554 <u8x8_stm32_gpio_and_delay+0xe4>
	case U8X8_MSG_GPIO_RESET:
		/* Insert codes for RST pin control */
		HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, arg_int);
 8002546:	7abb      	ldrb	r3, [r7, #10]
 8002548:	461a      	mov	r2, r3
 800254a:	2110      	movs	r1, #16
 800254c:	4805      	ldr	r0, [pc, #20]	; (8002564 <u8x8_stm32_gpio_and_delay+0xf4>)
 800254e:	f000 fd0d 	bl	8002f6c <HAL_GPIO_WritePin>
		break;
 8002552:	bf00      	nop
	}
	return 1;
 8002554:	2301      	movs	r3, #1
}
 8002556:	4618      	mov	r0, r3
 8002558:	3710      	adds	r7, #16
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	40010c00 	.word	0x40010c00
 8002564:	40010800 	.word	0x40010800

08002568 <u8x8_byte_stm32_hw_spi>:

uint8_t u8x8_byte_stm32_hw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	607b      	str	r3, [r7, #4]
 8002572:	460b      	mov	r3, r1
 8002574:	72fb      	strb	r3, [r7, #11]
 8002576:	4613      	mov	r3, r2
 8002578:	72bb      	strb	r3, [r7, #10]
	switch(msg) {
 800257a:	7afb      	ldrb	r3, [r7, #11]
 800257c:	3b14      	subs	r3, #20
 800257e:	2b0c      	cmp	r3, #12
 8002580:	d847      	bhi.n	8002612 <u8x8_byte_stm32_hw_spi+0xaa>
 8002582:	a201      	add	r2, pc, #4	; (adr r2, 8002588 <u8x8_byte_stm32_hw_spi+0x20>)
 8002584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002588:	08002617 	.word	0x08002617
 800258c:	08002613 	.word	0x08002613
 8002590:	08002613 	.word	0x08002613
 8002594:	080025bd 	.word	0x080025bd
 8002598:	080025e3 	.word	0x080025e3
 800259c:	080025fb 	.word	0x080025fb
 80025a0:	08002613 	.word	0x08002613
 80025a4:	08002613 	.word	0x08002613
 80025a8:	08002613 	.word	0x08002613
 80025ac:	08002613 	.word	0x08002613
 80025b0:	08002613 	.word	0x08002613
 80025b4:	08002613 	.word	0x08002613
 80025b8:	080025d5 	.word	0x080025d5
	case U8X8_MSG_BYTE_SEND:
		/* Insert codes to transmit data */
		if(HAL_SPI_Transmit(&hspi1, arg_ptr, arg_int, TX_TIMEOUT) != HAL_OK) return 0;
 80025bc:	7abb      	ldrb	r3, [r7, #10]
 80025be:	b29a      	uxth	r2, r3
 80025c0:	2364      	movs	r3, #100	; 0x64
 80025c2:	6879      	ldr	r1, [r7, #4]
 80025c4:	4818      	ldr	r0, [pc, #96]	; (8002628 <u8x8_byte_stm32_hw_spi+0xc0>)
 80025c6:	f001 f987 	bl	80038d8 <HAL_SPI_Transmit>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d024      	beq.n	800261a <u8x8_byte_stm32_hw_spi+0xb2>
 80025d0:	2300      	movs	r3, #0
 80025d2:	e024      	b.n	800261e <u8x8_byte_stm32_hw_spi+0xb6>
	case U8X8_MSG_BYTE_INIT:
		/* Insert codes to begin SPI transmission */
		break;
	case U8X8_MSG_BYTE_SET_DC:
		/* Control DC pin, U8X8_MSG_GPIO_DC will be called */
		u8x8_gpio_SetDC(u8x8, arg_int);
 80025d4:	7abb      	ldrb	r3, [r7, #10]
 80025d6:	461a      	mov	r2, r3
 80025d8:	214a      	movs	r1, #74	; 0x4a
 80025da:	68f8      	ldr	r0, [r7, #12]
 80025dc:	f003 fbf4 	bl	8005dc8 <u8x8_gpio_call>
		break;
 80025e0:	e01c      	b.n	800261c <u8x8_byte_stm32_hw_spi+0xb4>
	case U8X8_MSG_BYTE_START_TRANSFER:
		/* Select slave, U8X8_MSG_GPIO_CS will be called */
		u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_enable_level);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	461a      	mov	r2, r3
 80025ea:	2149      	movs	r1, #73	; 0x49
 80025ec:	68f8      	ldr	r0, [r7, #12]
 80025ee:	f003 fbeb 	bl	8005dc8 <u8x8_gpio_call>
		HAL_Delay(1);
 80025f2:	2001      	movs	r0, #1
 80025f4:	f000 f948 	bl	8002888 <HAL_Delay>
		break;
 80025f8:	e010      	b.n	800261c <u8x8_byte_stm32_hw_spi+0xb4>
	case U8X8_MSG_BYTE_END_TRANSFER:
		HAL_Delay(1);
 80025fa:	2001      	movs	r0, #1
 80025fc:	f000 f944 	bl	8002888 <HAL_Delay>
		/* Insert codes to end SPI transmission */
		u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	785b      	ldrb	r3, [r3, #1]
 8002606:	461a      	mov	r2, r3
 8002608:	2149      	movs	r1, #73	; 0x49
 800260a:	68f8      	ldr	r0, [r7, #12]
 800260c:	f003 fbdc 	bl	8005dc8 <u8x8_gpio_call>
		break;
 8002610:	e004      	b.n	800261c <u8x8_byte_stm32_hw_spi+0xb4>
	default:
		return 0;
 8002612:	2300      	movs	r3, #0
 8002614:	e003      	b.n	800261e <u8x8_byte_stm32_hw_spi+0xb6>
		break;
 8002616:	bf00      	nop
 8002618:	e000      	b.n	800261c <u8x8_byte_stm32_hw_spi+0xb4>
		break;
 800261a:	bf00      	nop
	}
	return 1;
 800261c:	2301      	movs	r3, #1
}
 800261e:	4618      	mov	r0, r3
 8002620:	3710      	adds	r7, #16
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	200001fc 	.word	0x200001fc

0800262c <rxBufferInit>:
#include "uart.h"

ring_buffer_t uart_rx={{0},0,0};
extern UART_HandleTypeDef huart2;

void rxBufferInit(ring_buffer_t *uart) {
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
	uart->head = 0;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
	uart->tail = 0;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
	memset(uart->buffer, 0, sizeof(RX_BUFFER_SIZE));
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2204      	movs	r2, #4
 8002648:	2100      	movs	r1, #0
 800264a:	4618      	mov	r0, r3
 800264c:	f003 fc64 	bl	8005f18 <memset>
}
 8002650:	bf00      	nop
 8002652:	3708      	adds	r7, #8
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <push>:

void push(ring_buffer_t *uart, uint8_t ch) {
 8002658:	b480      	push	{r7}
 800265a:	b085      	sub	sp, #20
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	460b      	mov	r3, r1
 8002662:	70fb      	strb	r3, [r7, #3]
	uint16_t i = (unsigned int) (uart->head + 1) % RX_BUFFER_SIZE;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 800266a:	b29b      	uxth	r3, r3
 800266c:	3301      	adds	r3, #1
 800266e:	b29b      	uxth	r3, r3
 8002670:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002674:	81fb      	strh	r3, [r7, #14]
	if (i != uart->tail) {
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 800267c:	b29b      	uxth	r3, r3
 800267e:	89fa      	ldrh	r2, [r7, #14]
 8002680:	429a      	cmp	r2, r3
 8002682:	d00b      	beq.n	800269c <push+0x44>
		uart->buffer[uart->head] = ch;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 800268a:	b29b      	uxth	r3, r3
 800268c:	4619      	mov	r1, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	78fa      	ldrb	r2, [r7, #3]
 8002692:	545a      	strb	r2, [r3, r1]
		uart->head = i;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	89fa      	ldrh	r2, [r7, #14]
 8002698:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
	}
}
 800269c:	bf00      	nop
 800269e:	3714      	adds	r7, #20
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bc80      	pop	{r7}
 80026a4:	4770      	bx	lr

080026a6 <pop>:

uint8_t pop(ring_buffer_t *uart) {
 80026a6:	b480      	push	{r7}
 80026a8:	b085      	sub	sp, #20
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]

	if (uart->head == uart->tail) {
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 80026b4:	b29a      	uxth	r2, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 80026bc:	b29b      	uxth	r3, r3
 80026be:	429a      	cmp	r2, r3
 80026c0:	d101      	bne.n	80026c6 <pop+0x20>
		return -1;
 80026c2:	23ff      	movs	r3, #255	; 0xff
 80026c4:	e014      	b.n	80026f0 <pop+0x4a>
	} else {

		unsigned char cpop = uart->buffer[uart->tail];
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	461a      	mov	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	5c9b      	ldrb	r3, [r3, r2]
 80026d4:	73fb      	strb	r3, [r7, #15]
		uart->tail = (uint16_t) (uart->tail + 1) % RX_BUFFER_SIZE;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 80026dc:	b29b      	uxth	r3, r3
 80026de:	3301      	adds	r3, #1
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026e6:	b29a      	uxth	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402

		return cpop;
 80026ee:	7bfb      	ldrb	r3, [r7, #15]

	}
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3714      	adds	r7, #20
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bc80      	pop	{r7}
 80026f8:	4770      	bx	lr

080026fa <uart_available>:

int8_t uart_available(ring_buffer_t *uart) {
 80026fa:	b480      	push	{r7}
 80026fc:	b085      	sub	sp, #20
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]

	uint8_t n = (unsigned int) (RX_BUFFER_SIZE + (uart->head) - (uart->tail))
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8002708:	b29b      	uxth	r3, r3
 800270a:	b2da      	uxtb	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8002712:	b29b      	uxth	r3, r3
 8002714:	b2db      	uxtb	r3, r3
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	73fb      	strb	r3, [r7, #15]
			% RX_BUFFER_SIZE;
	return n;
 800271a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800271e:	4618      	mov	r0, r3
 8002720:	3714      	adds	r7, #20
 8002722:	46bd      	mov	sp, r7
 8002724:	bc80      	pop	{r7}
 8002726:	4770      	bx	lr

08002728 <Uart_isr>:

void Uart_isr(UART_HandleTypeDef *huart) {
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
	uint32_t isrflags = READ_REG(huart->Instance->SR);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	617b      	str	r3, [r7, #20]
	uint32_t cr1its = READ_REG(huart->Instance->CR1);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	613b      	str	r3, [r7, #16]

	/* if DR is not empty and the Rx Int is enabled */
	if (((isrflags & USART_SR_RXNE) != RESET)
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	f003 0320 	and.w	r3, r3, #32
 8002746:	2b00      	cmp	r3, #0
 8002748:	d011      	beq.n	800276e <Uart_isr+0x46>
			&& ((cr1its & USART_CR1_RXNEIE) != RESET)) {
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	f003 0320 	and.w	r3, r3, #32
 8002750:	2b00      	cmp	r3, #0
 8002752:	d00c      	beq.n	800276e <Uart_isr+0x46>
		 * @note   RXNE flag can be also cleared by a read to the USART_DR register.
		 * @note   TC flag can be also cleared by software sequence: a read operation to
		 *          USART_SR register followed by a write operation to USART_DR register.
		 * @note   TXE flag is cleared only by a write to the USART_DR register.
		 *********************/
		huart->Instance->SR; /* Read status register */
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
		unsigned char c = huart->Instance->DR; /* Read data register */
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	73fb      	strb	r3, [r7, #15]
		push(&uart_rx, c);  // store data in buffer
 8002762:	7bfb      	ldrb	r3, [r7, #15]
 8002764:	4619      	mov	r1, r3
 8002766:	4803      	ldr	r0, [pc, #12]	; (8002774 <Uart_isr+0x4c>)
 8002768:	f7ff ff76 	bl	8002658 <push>
		return;
 800276c:	bf00      	nop
	}
}
 800276e:	3718      	adds	r7, #24
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	20000954 	.word	0x20000954

08002778 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002778:	480c      	ldr	r0, [pc, #48]	; (80027ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800277a:	490d      	ldr	r1, [pc, #52]	; (80027b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800277c:	4a0d      	ldr	r2, [pc, #52]	; (80027b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800277e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002780:	e002      	b.n	8002788 <LoopCopyDataInit>

08002782 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002782:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002784:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002786:	3304      	adds	r3, #4

08002788 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002788:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800278a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800278c:	d3f9      	bcc.n	8002782 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800278e:	4a0a      	ldr	r2, [pc, #40]	; (80027b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002790:	4c0a      	ldr	r4, [pc, #40]	; (80027bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8002792:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002794:	e001      	b.n	800279a <LoopFillZerobss>

08002796 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002796:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002798:	3204      	adds	r2, #4

0800279a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800279a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800279c:	d3fb      	bcc.n	8002796 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800279e:	f7ff fe61 	bl	8002464 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027a2:	f003 fb87 	bl	8005eb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80027a6:	f7fe fe2f 	bl	8001408 <main>
  bx lr
 80027aa:	4770      	bx	lr
  ldr r0, =_sdata
 80027ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027b0:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80027b4:	0800c8b8 	.word	0x0800c8b8
  ldr r2, =_sbss
 80027b8:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80027bc:	2000116c 	.word	0x2000116c

080027c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80027c0:	e7fe      	b.n	80027c0 <ADC1_2_IRQHandler>
	...

080027c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027c8:	4b08      	ldr	r3, [pc, #32]	; (80027ec <HAL_Init+0x28>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a07      	ldr	r2, [pc, #28]	; (80027ec <HAL_Init+0x28>)
 80027ce:	f043 0310 	orr.w	r3, r3, #16
 80027d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027d4:	2003      	movs	r0, #3
 80027d6:	f000 f947 	bl	8002a68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027da:	200f      	movs	r0, #15
 80027dc:	f000 f808 	bl	80027f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027e0:	f7ff fc4e 	bl	8002080 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	40022000 	.word	0x40022000

080027f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027f8:	4b12      	ldr	r3, [pc, #72]	; (8002844 <HAL_InitTick+0x54>)
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	4b12      	ldr	r3, [pc, #72]	; (8002848 <HAL_InitTick+0x58>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	4619      	mov	r1, r3
 8002802:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002806:	fbb3 f3f1 	udiv	r3, r3, r1
 800280a:	fbb2 f3f3 	udiv	r3, r2, r3
 800280e:	4618      	mov	r0, r3
 8002810:	f000 f95f 	bl	8002ad2 <HAL_SYSTICK_Config>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e00e      	b.n	800283c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2b0f      	cmp	r3, #15
 8002822:	d80a      	bhi.n	800283a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002824:	2200      	movs	r2, #0
 8002826:	6879      	ldr	r1, [r7, #4]
 8002828:	f04f 30ff 	mov.w	r0, #4294967295
 800282c:	f000 f927 	bl	8002a7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002830:	4a06      	ldr	r2, [pc, #24]	; (800284c <HAL_InitTick+0x5c>)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002836:	2300      	movs	r3, #0
 8002838:	e000      	b.n	800283c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
}
 800283c:	4618      	mov	r0, r3
 800283e:	3708      	adds	r7, #8
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	20000000 	.word	0x20000000
 8002848:	20000008 	.word	0x20000008
 800284c:	20000004 	.word	0x20000004

08002850 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002854:	4b05      	ldr	r3, [pc, #20]	; (800286c <HAL_IncTick+0x1c>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	461a      	mov	r2, r3
 800285a:	4b05      	ldr	r3, [pc, #20]	; (8002870 <HAL_IncTick+0x20>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4413      	add	r3, r2
 8002860:	4a03      	ldr	r2, [pc, #12]	; (8002870 <HAL_IncTick+0x20>)
 8002862:	6013      	str	r3, [r2, #0]
}
 8002864:	bf00      	nop
 8002866:	46bd      	mov	sp, r7
 8002868:	bc80      	pop	{r7}
 800286a:	4770      	bx	lr
 800286c:	20000008 	.word	0x20000008
 8002870:	20000d58 	.word	0x20000d58

08002874 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
  return uwTick;
 8002878:	4b02      	ldr	r3, [pc, #8]	; (8002884 <HAL_GetTick+0x10>)
 800287a:	681b      	ldr	r3, [r3, #0]
}
 800287c:	4618      	mov	r0, r3
 800287e:	46bd      	mov	sp, r7
 8002880:	bc80      	pop	{r7}
 8002882:	4770      	bx	lr
 8002884:	20000d58 	.word	0x20000d58

08002888 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002890:	f7ff fff0 	bl	8002874 <HAL_GetTick>
 8002894:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028a0:	d005      	beq.n	80028ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028a2:	4b0a      	ldr	r3, [pc, #40]	; (80028cc <HAL_Delay+0x44>)
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	461a      	mov	r2, r3
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	4413      	add	r3, r2
 80028ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028ae:	bf00      	nop
 80028b0:	f7ff ffe0 	bl	8002874 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	68fa      	ldr	r2, [r7, #12]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d8f7      	bhi.n	80028b0 <HAL_Delay+0x28>
  {
  }
}
 80028c0:	bf00      	nop
 80028c2:	bf00      	nop
 80028c4:	3710      	adds	r7, #16
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	20000008 	.word	0x20000008

080028d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b085      	sub	sp, #20
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f003 0307 	and.w	r3, r3, #7
 80028de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028e0:	4b0c      	ldr	r3, [pc, #48]	; (8002914 <__NVIC_SetPriorityGrouping+0x44>)
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028e6:	68ba      	ldr	r2, [r7, #8]
 80028e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028ec:	4013      	ands	r3, r2
 80028ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002900:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002902:	4a04      	ldr	r2, [pc, #16]	; (8002914 <__NVIC_SetPriorityGrouping+0x44>)
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	60d3      	str	r3, [r2, #12]
}
 8002908:	bf00      	nop
 800290a:	3714      	adds	r7, #20
 800290c:	46bd      	mov	sp, r7
 800290e:	bc80      	pop	{r7}
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	e000ed00 	.word	0xe000ed00

08002918 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800291c:	4b04      	ldr	r3, [pc, #16]	; (8002930 <__NVIC_GetPriorityGrouping+0x18>)
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	0a1b      	lsrs	r3, r3, #8
 8002922:	f003 0307 	and.w	r3, r3, #7
}
 8002926:	4618      	mov	r0, r3
 8002928:	46bd      	mov	sp, r7
 800292a:	bc80      	pop	{r7}
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	e000ed00 	.word	0xe000ed00

08002934 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	4603      	mov	r3, r0
 800293c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800293e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002942:	2b00      	cmp	r3, #0
 8002944:	db0b      	blt.n	800295e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002946:	79fb      	ldrb	r3, [r7, #7]
 8002948:	f003 021f 	and.w	r2, r3, #31
 800294c:	4906      	ldr	r1, [pc, #24]	; (8002968 <__NVIC_EnableIRQ+0x34>)
 800294e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002952:	095b      	lsrs	r3, r3, #5
 8002954:	2001      	movs	r0, #1
 8002956:	fa00 f202 	lsl.w	r2, r0, r2
 800295a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800295e:	bf00      	nop
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	bc80      	pop	{r7}
 8002966:	4770      	bx	lr
 8002968:	e000e100 	.word	0xe000e100

0800296c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	4603      	mov	r3, r0
 8002974:	6039      	str	r1, [r7, #0]
 8002976:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800297c:	2b00      	cmp	r3, #0
 800297e:	db0a      	blt.n	8002996 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	b2da      	uxtb	r2, r3
 8002984:	490c      	ldr	r1, [pc, #48]	; (80029b8 <__NVIC_SetPriority+0x4c>)
 8002986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800298a:	0112      	lsls	r2, r2, #4
 800298c:	b2d2      	uxtb	r2, r2
 800298e:	440b      	add	r3, r1
 8002990:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002994:	e00a      	b.n	80029ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	b2da      	uxtb	r2, r3
 800299a:	4908      	ldr	r1, [pc, #32]	; (80029bc <__NVIC_SetPriority+0x50>)
 800299c:	79fb      	ldrb	r3, [r7, #7]
 800299e:	f003 030f 	and.w	r3, r3, #15
 80029a2:	3b04      	subs	r3, #4
 80029a4:	0112      	lsls	r2, r2, #4
 80029a6:	b2d2      	uxtb	r2, r2
 80029a8:	440b      	add	r3, r1
 80029aa:	761a      	strb	r2, [r3, #24]
}
 80029ac:	bf00      	nop
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bc80      	pop	{r7}
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	e000e100 	.word	0xe000e100
 80029bc:	e000ed00 	.word	0xe000ed00

080029c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b089      	sub	sp, #36	; 0x24
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f003 0307 	and.w	r3, r3, #7
 80029d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	f1c3 0307 	rsb	r3, r3, #7
 80029da:	2b04      	cmp	r3, #4
 80029dc:	bf28      	it	cs
 80029de:	2304      	movcs	r3, #4
 80029e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	3304      	adds	r3, #4
 80029e6:	2b06      	cmp	r3, #6
 80029e8:	d902      	bls.n	80029f0 <NVIC_EncodePriority+0x30>
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	3b03      	subs	r3, #3
 80029ee:	e000      	b.n	80029f2 <NVIC_EncodePriority+0x32>
 80029f0:	2300      	movs	r3, #0
 80029f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029f4:	f04f 32ff 	mov.w	r2, #4294967295
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	fa02 f303 	lsl.w	r3, r2, r3
 80029fe:	43da      	mvns	r2, r3
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	401a      	ands	r2, r3
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a08:	f04f 31ff 	mov.w	r1, #4294967295
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a12:	43d9      	mvns	r1, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a18:	4313      	orrs	r3, r2
         );
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3724      	adds	r7, #36	; 0x24
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bc80      	pop	{r7}
 8002a22:	4770      	bx	lr

08002a24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a34:	d301      	bcc.n	8002a3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a36:	2301      	movs	r3, #1
 8002a38:	e00f      	b.n	8002a5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a3a:	4a0a      	ldr	r2, [pc, #40]	; (8002a64 <SysTick_Config+0x40>)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a42:	210f      	movs	r1, #15
 8002a44:	f04f 30ff 	mov.w	r0, #4294967295
 8002a48:	f7ff ff90 	bl	800296c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a4c:	4b05      	ldr	r3, [pc, #20]	; (8002a64 <SysTick_Config+0x40>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a52:	4b04      	ldr	r3, [pc, #16]	; (8002a64 <SysTick_Config+0x40>)
 8002a54:	2207      	movs	r2, #7
 8002a56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	e000e010 	.word	0xe000e010

08002a68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f7ff ff2d 	bl	80028d0 <__NVIC_SetPriorityGrouping>
}
 8002a76:	bf00      	nop
 8002a78:	3708      	adds	r7, #8
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b086      	sub	sp, #24
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	4603      	mov	r3, r0
 8002a86:	60b9      	str	r1, [r7, #8]
 8002a88:	607a      	str	r2, [r7, #4]
 8002a8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a90:	f7ff ff42 	bl	8002918 <__NVIC_GetPriorityGrouping>
 8002a94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	68b9      	ldr	r1, [r7, #8]
 8002a9a:	6978      	ldr	r0, [r7, #20]
 8002a9c:	f7ff ff90 	bl	80029c0 <NVIC_EncodePriority>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aa6:	4611      	mov	r1, r2
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7ff ff5f 	bl	800296c <__NVIC_SetPriority>
}
 8002aae:	bf00      	nop
 8002ab0:	3718      	adds	r7, #24
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b082      	sub	sp, #8
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	4603      	mov	r3, r0
 8002abe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7ff ff35 	bl	8002934 <__NVIC_EnableIRQ>
}
 8002aca:	bf00      	nop
 8002acc:	3708      	adds	r7, #8
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b082      	sub	sp, #8
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f7ff ffa2 	bl	8002a24 <SysTick_Config>
 8002ae0:	4603      	mov	r3, r0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8002aea:	b580      	push	{r7, lr}
 8002aec:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8002aee:	f000 f802 	bl	8002af6 <HAL_SYSTICK_Callback>
}
 8002af2:	bf00      	nop
 8002af4:	bd80      	pop	{r7, pc}

08002af6 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8002af6:	b480      	push	{r7}
 8002af8:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8002afa:	bf00      	nop
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bc80      	pop	{r7}
 8002b00:	4770      	bx	lr

08002b02 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b02:	b480      	push	{r7}
 8002b04:	b085      	sub	sp, #20
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d008      	beq.n	8002b2a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2204      	movs	r2, #4
 8002b1c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e020      	b.n	8002b6c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f022 020e 	bic.w	r2, r2, #14
 8002b38:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f022 0201 	bic.w	r2, r2, #1
 8002b48:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b52:	2101      	movs	r1, #1
 8002b54:	fa01 f202 	lsl.w	r2, r1, r2
 8002b58:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3714      	adds	r7, #20
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bc80      	pop	{r7}
 8002b74:	4770      	bx	lr
	...

08002b78 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b80:	2300      	movs	r3, #0
 8002b82:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d005      	beq.n	8002b9a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2204      	movs	r2, #4
 8002b92:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	73fb      	strb	r3, [r7, #15]
 8002b98:	e051      	b.n	8002c3e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f022 020e 	bic.w	r2, r2, #14
 8002ba8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f022 0201 	bic.w	r2, r2, #1
 8002bb8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a22      	ldr	r2, [pc, #136]	; (8002c48 <HAL_DMA_Abort_IT+0xd0>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d029      	beq.n	8002c18 <HAL_DMA_Abort_IT+0xa0>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a20      	ldr	r2, [pc, #128]	; (8002c4c <HAL_DMA_Abort_IT+0xd4>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d022      	beq.n	8002c14 <HAL_DMA_Abort_IT+0x9c>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a1f      	ldr	r2, [pc, #124]	; (8002c50 <HAL_DMA_Abort_IT+0xd8>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d01a      	beq.n	8002c0e <HAL_DMA_Abort_IT+0x96>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a1d      	ldr	r2, [pc, #116]	; (8002c54 <HAL_DMA_Abort_IT+0xdc>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d012      	beq.n	8002c08 <HAL_DMA_Abort_IT+0x90>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a1c      	ldr	r2, [pc, #112]	; (8002c58 <HAL_DMA_Abort_IT+0xe0>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d00a      	beq.n	8002c02 <HAL_DMA_Abort_IT+0x8a>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a1a      	ldr	r2, [pc, #104]	; (8002c5c <HAL_DMA_Abort_IT+0xe4>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d102      	bne.n	8002bfc <HAL_DMA_Abort_IT+0x84>
 8002bf6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002bfa:	e00e      	b.n	8002c1a <HAL_DMA_Abort_IT+0xa2>
 8002bfc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c00:	e00b      	b.n	8002c1a <HAL_DMA_Abort_IT+0xa2>
 8002c02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c06:	e008      	b.n	8002c1a <HAL_DMA_Abort_IT+0xa2>
 8002c08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c0c:	e005      	b.n	8002c1a <HAL_DMA_Abort_IT+0xa2>
 8002c0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c12:	e002      	b.n	8002c1a <HAL_DMA_Abort_IT+0xa2>
 8002c14:	2310      	movs	r3, #16
 8002c16:	e000      	b.n	8002c1a <HAL_DMA_Abort_IT+0xa2>
 8002c18:	2301      	movs	r3, #1
 8002c1a:	4a11      	ldr	r2, [pc, #68]	; (8002c60 <HAL_DMA_Abort_IT+0xe8>)
 8002c1c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2201      	movs	r2, #1
 8002c22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d003      	beq.n	8002c3e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	4798      	blx	r3
    } 
  }
  return status;
 8002c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3710      	adds	r7, #16
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	40020008 	.word	0x40020008
 8002c4c:	4002001c 	.word	0x4002001c
 8002c50:	40020030 	.word	0x40020030
 8002c54:	40020044 	.word	0x40020044
 8002c58:	40020058 	.word	0x40020058
 8002c5c:	4002006c 	.word	0x4002006c
 8002c60:	40020000 	.word	0x40020000

08002c64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b08b      	sub	sp, #44	; 0x2c
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002c72:	2300      	movs	r3, #0
 8002c74:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c76:	e169      	b.n	8002f4c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002c78:	2201      	movs	r2, #1
 8002c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c80:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	69fa      	ldr	r2, [r7, #28]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	f040 8158 	bne.w	8002f46 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	4a9a      	ldr	r2, [pc, #616]	; (8002f04 <HAL_GPIO_Init+0x2a0>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d05e      	beq.n	8002d5e <HAL_GPIO_Init+0xfa>
 8002ca0:	4a98      	ldr	r2, [pc, #608]	; (8002f04 <HAL_GPIO_Init+0x2a0>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d875      	bhi.n	8002d92 <HAL_GPIO_Init+0x12e>
 8002ca6:	4a98      	ldr	r2, [pc, #608]	; (8002f08 <HAL_GPIO_Init+0x2a4>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d058      	beq.n	8002d5e <HAL_GPIO_Init+0xfa>
 8002cac:	4a96      	ldr	r2, [pc, #600]	; (8002f08 <HAL_GPIO_Init+0x2a4>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d86f      	bhi.n	8002d92 <HAL_GPIO_Init+0x12e>
 8002cb2:	4a96      	ldr	r2, [pc, #600]	; (8002f0c <HAL_GPIO_Init+0x2a8>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d052      	beq.n	8002d5e <HAL_GPIO_Init+0xfa>
 8002cb8:	4a94      	ldr	r2, [pc, #592]	; (8002f0c <HAL_GPIO_Init+0x2a8>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d869      	bhi.n	8002d92 <HAL_GPIO_Init+0x12e>
 8002cbe:	4a94      	ldr	r2, [pc, #592]	; (8002f10 <HAL_GPIO_Init+0x2ac>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d04c      	beq.n	8002d5e <HAL_GPIO_Init+0xfa>
 8002cc4:	4a92      	ldr	r2, [pc, #584]	; (8002f10 <HAL_GPIO_Init+0x2ac>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d863      	bhi.n	8002d92 <HAL_GPIO_Init+0x12e>
 8002cca:	4a92      	ldr	r2, [pc, #584]	; (8002f14 <HAL_GPIO_Init+0x2b0>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d046      	beq.n	8002d5e <HAL_GPIO_Init+0xfa>
 8002cd0:	4a90      	ldr	r2, [pc, #576]	; (8002f14 <HAL_GPIO_Init+0x2b0>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d85d      	bhi.n	8002d92 <HAL_GPIO_Init+0x12e>
 8002cd6:	2b12      	cmp	r3, #18
 8002cd8:	d82a      	bhi.n	8002d30 <HAL_GPIO_Init+0xcc>
 8002cda:	2b12      	cmp	r3, #18
 8002cdc:	d859      	bhi.n	8002d92 <HAL_GPIO_Init+0x12e>
 8002cde:	a201      	add	r2, pc, #4	; (adr r2, 8002ce4 <HAL_GPIO_Init+0x80>)
 8002ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ce4:	08002d5f 	.word	0x08002d5f
 8002ce8:	08002d39 	.word	0x08002d39
 8002cec:	08002d4b 	.word	0x08002d4b
 8002cf0:	08002d8d 	.word	0x08002d8d
 8002cf4:	08002d93 	.word	0x08002d93
 8002cf8:	08002d93 	.word	0x08002d93
 8002cfc:	08002d93 	.word	0x08002d93
 8002d00:	08002d93 	.word	0x08002d93
 8002d04:	08002d93 	.word	0x08002d93
 8002d08:	08002d93 	.word	0x08002d93
 8002d0c:	08002d93 	.word	0x08002d93
 8002d10:	08002d93 	.word	0x08002d93
 8002d14:	08002d93 	.word	0x08002d93
 8002d18:	08002d93 	.word	0x08002d93
 8002d1c:	08002d93 	.word	0x08002d93
 8002d20:	08002d93 	.word	0x08002d93
 8002d24:	08002d93 	.word	0x08002d93
 8002d28:	08002d41 	.word	0x08002d41
 8002d2c:	08002d55 	.word	0x08002d55
 8002d30:	4a79      	ldr	r2, [pc, #484]	; (8002f18 <HAL_GPIO_Init+0x2b4>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d013      	beq.n	8002d5e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002d36:	e02c      	b.n	8002d92 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	623b      	str	r3, [r7, #32]
          break;
 8002d3e:	e029      	b.n	8002d94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	3304      	adds	r3, #4
 8002d46:	623b      	str	r3, [r7, #32]
          break;
 8002d48:	e024      	b.n	8002d94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	3308      	adds	r3, #8
 8002d50:	623b      	str	r3, [r7, #32]
          break;
 8002d52:	e01f      	b.n	8002d94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	330c      	adds	r3, #12
 8002d5a:	623b      	str	r3, [r7, #32]
          break;
 8002d5c:	e01a      	b.n	8002d94 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d102      	bne.n	8002d6c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002d66:	2304      	movs	r3, #4
 8002d68:	623b      	str	r3, [r7, #32]
          break;
 8002d6a:	e013      	b.n	8002d94 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d105      	bne.n	8002d80 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d74:	2308      	movs	r3, #8
 8002d76:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	69fa      	ldr	r2, [r7, #28]
 8002d7c:	611a      	str	r2, [r3, #16]
          break;
 8002d7e:	e009      	b.n	8002d94 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d80:	2308      	movs	r3, #8
 8002d82:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	69fa      	ldr	r2, [r7, #28]
 8002d88:	615a      	str	r2, [r3, #20]
          break;
 8002d8a:	e003      	b.n	8002d94 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	623b      	str	r3, [r7, #32]
          break;
 8002d90:	e000      	b.n	8002d94 <HAL_GPIO_Init+0x130>
          break;
 8002d92:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	2bff      	cmp	r3, #255	; 0xff
 8002d98:	d801      	bhi.n	8002d9e <HAL_GPIO_Init+0x13a>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	e001      	b.n	8002da2 <HAL_GPIO_Init+0x13e>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	3304      	adds	r3, #4
 8002da2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	2bff      	cmp	r3, #255	; 0xff
 8002da8:	d802      	bhi.n	8002db0 <HAL_GPIO_Init+0x14c>
 8002daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	e002      	b.n	8002db6 <HAL_GPIO_Init+0x152>
 8002db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db2:	3b08      	subs	r3, #8
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	210f      	movs	r1, #15
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc4:	43db      	mvns	r3, r3
 8002dc6:	401a      	ands	r2, r3
 8002dc8:	6a39      	ldr	r1, [r7, #32]
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd0:	431a      	orrs	r2, r3
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	f000 80b1 	beq.w	8002f46 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002de4:	4b4d      	ldr	r3, [pc, #308]	; (8002f1c <HAL_GPIO_Init+0x2b8>)
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	4a4c      	ldr	r2, [pc, #304]	; (8002f1c <HAL_GPIO_Init+0x2b8>)
 8002dea:	f043 0301 	orr.w	r3, r3, #1
 8002dee:	6193      	str	r3, [r2, #24]
 8002df0:	4b4a      	ldr	r3, [pc, #296]	; (8002f1c <HAL_GPIO_Init+0x2b8>)
 8002df2:	699b      	ldr	r3, [r3, #24]
 8002df4:	f003 0301 	and.w	r3, r3, #1
 8002df8:	60bb      	str	r3, [r7, #8]
 8002dfa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002dfc:	4a48      	ldr	r2, [pc, #288]	; (8002f20 <HAL_GPIO_Init+0x2bc>)
 8002dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e00:	089b      	lsrs	r3, r3, #2
 8002e02:	3302      	adds	r3, #2
 8002e04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e08:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0c:	f003 0303 	and.w	r3, r3, #3
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	220f      	movs	r2, #15
 8002e14:	fa02 f303 	lsl.w	r3, r2, r3
 8002e18:	43db      	mvns	r3, r3
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	4a40      	ldr	r2, [pc, #256]	; (8002f24 <HAL_GPIO_Init+0x2c0>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d013      	beq.n	8002e50 <HAL_GPIO_Init+0x1ec>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4a3f      	ldr	r2, [pc, #252]	; (8002f28 <HAL_GPIO_Init+0x2c4>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d00d      	beq.n	8002e4c <HAL_GPIO_Init+0x1e8>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4a3e      	ldr	r2, [pc, #248]	; (8002f2c <HAL_GPIO_Init+0x2c8>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d007      	beq.n	8002e48 <HAL_GPIO_Init+0x1e4>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4a3d      	ldr	r2, [pc, #244]	; (8002f30 <HAL_GPIO_Init+0x2cc>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d101      	bne.n	8002e44 <HAL_GPIO_Init+0x1e0>
 8002e40:	2303      	movs	r3, #3
 8002e42:	e006      	b.n	8002e52 <HAL_GPIO_Init+0x1ee>
 8002e44:	2304      	movs	r3, #4
 8002e46:	e004      	b.n	8002e52 <HAL_GPIO_Init+0x1ee>
 8002e48:	2302      	movs	r3, #2
 8002e4a:	e002      	b.n	8002e52 <HAL_GPIO_Init+0x1ee>
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e000      	b.n	8002e52 <HAL_GPIO_Init+0x1ee>
 8002e50:	2300      	movs	r3, #0
 8002e52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e54:	f002 0203 	and.w	r2, r2, #3
 8002e58:	0092      	lsls	r2, r2, #2
 8002e5a:	4093      	lsls	r3, r2
 8002e5c:	68fa      	ldr	r2, [r7, #12]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002e62:	492f      	ldr	r1, [pc, #188]	; (8002f20 <HAL_GPIO_Init+0x2bc>)
 8002e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e66:	089b      	lsrs	r3, r3, #2
 8002e68:	3302      	adds	r3, #2
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d006      	beq.n	8002e8a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002e7c:	4b2d      	ldr	r3, [pc, #180]	; (8002f34 <HAL_GPIO_Init+0x2d0>)
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	492c      	ldr	r1, [pc, #176]	; (8002f34 <HAL_GPIO_Init+0x2d0>)
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	600b      	str	r3, [r1, #0]
 8002e88:	e006      	b.n	8002e98 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002e8a:	4b2a      	ldr	r3, [pc, #168]	; (8002f34 <HAL_GPIO_Init+0x2d0>)
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	43db      	mvns	r3, r3
 8002e92:	4928      	ldr	r1, [pc, #160]	; (8002f34 <HAL_GPIO_Init+0x2d0>)
 8002e94:	4013      	ands	r3, r2
 8002e96:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d006      	beq.n	8002eb2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ea4:	4b23      	ldr	r3, [pc, #140]	; (8002f34 <HAL_GPIO_Init+0x2d0>)
 8002ea6:	685a      	ldr	r2, [r3, #4]
 8002ea8:	4922      	ldr	r1, [pc, #136]	; (8002f34 <HAL_GPIO_Init+0x2d0>)
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	604b      	str	r3, [r1, #4]
 8002eb0:	e006      	b.n	8002ec0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002eb2:	4b20      	ldr	r3, [pc, #128]	; (8002f34 <HAL_GPIO_Init+0x2d0>)
 8002eb4:	685a      	ldr	r2, [r3, #4]
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	43db      	mvns	r3, r3
 8002eba:	491e      	ldr	r1, [pc, #120]	; (8002f34 <HAL_GPIO_Init+0x2d0>)
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d006      	beq.n	8002eda <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002ecc:	4b19      	ldr	r3, [pc, #100]	; (8002f34 <HAL_GPIO_Init+0x2d0>)
 8002ece:	689a      	ldr	r2, [r3, #8]
 8002ed0:	4918      	ldr	r1, [pc, #96]	; (8002f34 <HAL_GPIO_Init+0x2d0>)
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	608b      	str	r3, [r1, #8]
 8002ed8:	e006      	b.n	8002ee8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002eda:	4b16      	ldr	r3, [pc, #88]	; (8002f34 <HAL_GPIO_Init+0x2d0>)
 8002edc:	689a      	ldr	r2, [r3, #8]
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	43db      	mvns	r3, r3
 8002ee2:	4914      	ldr	r1, [pc, #80]	; (8002f34 <HAL_GPIO_Init+0x2d0>)
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d021      	beq.n	8002f38 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002ef4:	4b0f      	ldr	r3, [pc, #60]	; (8002f34 <HAL_GPIO_Init+0x2d0>)
 8002ef6:	68da      	ldr	r2, [r3, #12]
 8002ef8:	490e      	ldr	r1, [pc, #56]	; (8002f34 <HAL_GPIO_Init+0x2d0>)
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	60cb      	str	r3, [r1, #12]
 8002f00:	e021      	b.n	8002f46 <HAL_GPIO_Init+0x2e2>
 8002f02:	bf00      	nop
 8002f04:	10320000 	.word	0x10320000
 8002f08:	10310000 	.word	0x10310000
 8002f0c:	10220000 	.word	0x10220000
 8002f10:	10210000 	.word	0x10210000
 8002f14:	10120000 	.word	0x10120000
 8002f18:	10110000 	.word	0x10110000
 8002f1c:	40021000 	.word	0x40021000
 8002f20:	40010000 	.word	0x40010000
 8002f24:	40010800 	.word	0x40010800
 8002f28:	40010c00 	.word	0x40010c00
 8002f2c:	40011000 	.word	0x40011000
 8002f30:	40011400 	.word	0x40011400
 8002f34:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002f38:	4b0b      	ldr	r3, [pc, #44]	; (8002f68 <HAL_GPIO_Init+0x304>)
 8002f3a:	68da      	ldr	r2, [r3, #12]
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	43db      	mvns	r3, r3
 8002f40:	4909      	ldr	r1, [pc, #36]	; (8002f68 <HAL_GPIO_Init+0x304>)
 8002f42:	4013      	ands	r3, r2
 8002f44:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f48:	3301      	adds	r3, #1
 8002f4a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f52:	fa22 f303 	lsr.w	r3, r2, r3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	f47f ae8e 	bne.w	8002c78 <HAL_GPIO_Init+0x14>
  }
}
 8002f5c:	bf00      	nop
 8002f5e:	bf00      	nop
 8002f60:	372c      	adds	r7, #44	; 0x2c
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bc80      	pop	{r7}
 8002f66:	4770      	bx	lr
 8002f68:	40010400 	.word	0x40010400

08002f6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	460b      	mov	r3, r1
 8002f76:	807b      	strh	r3, [r7, #2]
 8002f78:	4613      	mov	r3, r2
 8002f7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f7c:	787b      	ldrb	r3, [r7, #1]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d003      	beq.n	8002f8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f82:	887a      	ldrh	r2, [r7, #2]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002f88:	e003      	b.n	8002f92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002f8a:	887b      	ldrh	r3, [r7, #2]
 8002f8c:	041a      	lsls	r2, r3, #16
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	611a      	str	r2, [r3, #16]
}
 8002f92:	bf00      	nop
 8002f94:	370c      	adds	r7, #12
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bc80      	pop	{r7}
 8002f9a:	4770      	bx	lr

08002f9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b086      	sub	sp, #24
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d101      	bne.n	8002fae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e272      	b.n	8003494 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0301 	and.w	r3, r3, #1
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	f000 8087 	beq.w	80030ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fbc:	4b92      	ldr	r3, [pc, #584]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f003 030c 	and.w	r3, r3, #12
 8002fc4:	2b04      	cmp	r3, #4
 8002fc6:	d00c      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002fc8:	4b8f      	ldr	r3, [pc, #572]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f003 030c 	and.w	r3, r3, #12
 8002fd0:	2b08      	cmp	r3, #8
 8002fd2:	d112      	bne.n	8002ffa <HAL_RCC_OscConfig+0x5e>
 8002fd4:	4b8c      	ldr	r3, [pc, #560]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fe0:	d10b      	bne.n	8002ffa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fe2:	4b89      	ldr	r3, [pc, #548]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d06c      	beq.n	80030c8 <HAL_RCC_OscConfig+0x12c>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d168      	bne.n	80030c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e24c      	b.n	8003494 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003002:	d106      	bne.n	8003012 <HAL_RCC_OscConfig+0x76>
 8003004:	4b80      	ldr	r3, [pc, #512]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a7f      	ldr	r2, [pc, #508]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 800300a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800300e:	6013      	str	r3, [r2, #0]
 8003010:	e02e      	b.n	8003070 <HAL_RCC_OscConfig+0xd4>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d10c      	bne.n	8003034 <HAL_RCC_OscConfig+0x98>
 800301a:	4b7b      	ldr	r3, [pc, #492]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a7a      	ldr	r2, [pc, #488]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 8003020:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003024:	6013      	str	r3, [r2, #0]
 8003026:	4b78      	ldr	r3, [pc, #480]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a77      	ldr	r2, [pc, #476]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 800302c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003030:	6013      	str	r3, [r2, #0]
 8003032:	e01d      	b.n	8003070 <HAL_RCC_OscConfig+0xd4>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800303c:	d10c      	bne.n	8003058 <HAL_RCC_OscConfig+0xbc>
 800303e:	4b72      	ldr	r3, [pc, #456]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a71      	ldr	r2, [pc, #452]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 8003044:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003048:	6013      	str	r3, [r2, #0]
 800304a:	4b6f      	ldr	r3, [pc, #444]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a6e      	ldr	r2, [pc, #440]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 8003050:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003054:	6013      	str	r3, [r2, #0]
 8003056:	e00b      	b.n	8003070 <HAL_RCC_OscConfig+0xd4>
 8003058:	4b6b      	ldr	r3, [pc, #428]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a6a      	ldr	r2, [pc, #424]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 800305e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003062:	6013      	str	r3, [r2, #0]
 8003064:	4b68      	ldr	r3, [pc, #416]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a67      	ldr	r2, [pc, #412]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 800306a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800306e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d013      	beq.n	80030a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003078:	f7ff fbfc 	bl	8002874 <HAL_GetTick>
 800307c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800307e:	e008      	b.n	8003092 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003080:	f7ff fbf8 	bl	8002874 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	2b64      	cmp	r3, #100	; 0x64
 800308c:	d901      	bls.n	8003092 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e200      	b.n	8003494 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003092:	4b5d      	ldr	r3, [pc, #372]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d0f0      	beq.n	8003080 <HAL_RCC_OscConfig+0xe4>
 800309e:	e014      	b.n	80030ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a0:	f7ff fbe8 	bl	8002874 <HAL_GetTick>
 80030a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030a6:	e008      	b.n	80030ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030a8:	f7ff fbe4 	bl	8002874 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b64      	cmp	r3, #100	; 0x64
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e1ec      	b.n	8003494 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ba:	4b53      	ldr	r3, [pc, #332]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d1f0      	bne.n	80030a8 <HAL_RCC_OscConfig+0x10c>
 80030c6:	e000      	b.n	80030ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0302 	and.w	r3, r3, #2
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d063      	beq.n	800319e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80030d6:	4b4c      	ldr	r3, [pc, #304]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f003 030c 	and.w	r3, r3, #12
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d00b      	beq.n	80030fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80030e2:	4b49      	ldr	r3, [pc, #292]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f003 030c 	and.w	r3, r3, #12
 80030ea:	2b08      	cmp	r3, #8
 80030ec:	d11c      	bne.n	8003128 <HAL_RCC_OscConfig+0x18c>
 80030ee:	4b46      	ldr	r3, [pc, #280]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d116      	bne.n	8003128 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030fa:	4b43      	ldr	r3, [pc, #268]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	2b00      	cmp	r3, #0
 8003104:	d005      	beq.n	8003112 <HAL_RCC_OscConfig+0x176>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	2b01      	cmp	r3, #1
 800310c:	d001      	beq.n	8003112 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e1c0      	b.n	8003494 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003112:	4b3d      	ldr	r3, [pc, #244]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	695b      	ldr	r3, [r3, #20]
 800311e:	00db      	lsls	r3, r3, #3
 8003120:	4939      	ldr	r1, [pc, #228]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 8003122:	4313      	orrs	r3, r2
 8003124:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003126:	e03a      	b.n	800319e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	691b      	ldr	r3, [r3, #16]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d020      	beq.n	8003172 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003130:	4b36      	ldr	r3, [pc, #216]	; (800320c <HAL_RCC_OscConfig+0x270>)
 8003132:	2201      	movs	r2, #1
 8003134:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003136:	f7ff fb9d 	bl	8002874 <HAL_GetTick>
 800313a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800313c:	e008      	b.n	8003150 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800313e:	f7ff fb99 	bl	8002874 <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	2b02      	cmp	r3, #2
 800314a:	d901      	bls.n	8003150 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e1a1      	b.n	8003494 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003150:	4b2d      	ldr	r3, [pc, #180]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0302 	and.w	r3, r3, #2
 8003158:	2b00      	cmp	r3, #0
 800315a:	d0f0      	beq.n	800313e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800315c:	4b2a      	ldr	r3, [pc, #168]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	695b      	ldr	r3, [r3, #20]
 8003168:	00db      	lsls	r3, r3, #3
 800316a:	4927      	ldr	r1, [pc, #156]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 800316c:	4313      	orrs	r3, r2
 800316e:	600b      	str	r3, [r1, #0]
 8003170:	e015      	b.n	800319e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003172:	4b26      	ldr	r3, [pc, #152]	; (800320c <HAL_RCC_OscConfig+0x270>)
 8003174:	2200      	movs	r2, #0
 8003176:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003178:	f7ff fb7c 	bl	8002874 <HAL_GetTick>
 800317c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800317e:	e008      	b.n	8003192 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003180:	f7ff fb78 	bl	8002874 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	2b02      	cmp	r3, #2
 800318c:	d901      	bls.n	8003192 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e180      	b.n	8003494 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003192:	4b1d      	ldr	r3, [pc, #116]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0302 	and.w	r3, r3, #2
 800319a:	2b00      	cmp	r3, #0
 800319c:	d1f0      	bne.n	8003180 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0308 	and.w	r3, r3, #8
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d03a      	beq.n	8003220 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	699b      	ldr	r3, [r3, #24]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d019      	beq.n	80031e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031b2:	4b17      	ldr	r3, [pc, #92]	; (8003210 <HAL_RCC_OscConfig+0x274>)
 80031b4:	2201      	movs	r2, #1
 80031b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031b8:	f7ff fb5c 	bl	8002874 <HAL_GetTick>
 80031bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031be:	e008      	b.n	80031d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031c0:	f7ff fb58 	bl	8002874 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e160      	b.n	8003494 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031d2:	4b0d      	ldr	r3, [pc, #52]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 80031d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d0f0      	beq.n	80031c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80031de:	2001      	movs	r0, #1
 80031e0:	f000 fad8 	bl	8003794 <RCC_Delay>
 80031e4:	e01c      	b.n	8003220 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031e6:	4b0a      	ldr	r3, [pc, #40]	; (8003210 <HAL_RCC_OscConfig+0x274>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031ec:	f7ff fb42 	bl	8002874 <HAL_GetTick>
 80031f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031f2:	e00f      	b.n	8003214 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031f4:	f7ff fb3e 	bl	8002874 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d908      	bls.n	8003214 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e146      	b.n	8003494 <HAL_RCC_OscConfig+0x4f8>
 8003206:	bf00      	nop
 8003208:	40021000 	.word	0x40021000
 800320c:	42420000 	.word	0x42420000
 8003210:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003214:	4b92      	ldr	r3, [pc, #584]	; (8003460 <HAL_RCC_OscConfig+0x4c4>)
 8003216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003218:	f003 0302 	and.w	r3, r3, #2
 800321c:	2b00      	cmp	r3, #0
 800321e:	d1e9      	bne.n	80031f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0304 	and.w	r3, r3, #4
 8003228:	2b00      	cmp	r3, #0
 800322a:	f000 80a6 	beq.w	800337a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800322e:	2300      	movs	r3, #0
 8003230:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003232:	4b8b      	ldr	r3, [pc, #556]	; (8003460 <HAL_RCC_OscConfig+0x4c4>)
 8003234:	69db      	ldr	r3, [r3, #28]
 8003236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d10d      	bne.n	800325a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800323e:	4b88      	ldr	r3, [pc, #544]	; (8003460 <HAL_RCC_OscConfig+0x4c4>)
 8003240:	69db      	ldr	r3, [r3, #28]
 8003242:	4a87      	ldr	r2, [pc, #540]	; (8003460 <HAL_RCC_OscConfig+0x4c4>)
 8003244:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003248:	61d3      	str	r3, [r2, #28]
 800324a:	4b85      	ldr	r3, [pc, #532]	; (8003460 <HAL_RCC_OscConfig+0x4c4>)
 800324c:	69db      	ldr	r3, [r3, #28]
 800324e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003252:	60bb      	str	r3, [r7, #8]
 8003254:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003256:	2301      	movs	r3, #1
 8003258:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800325a:	4b82      	ldr	r3, [pc, #520]	; (8003464 <HAL_RCC_OscConfig+0x4c8>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003262:	2b00      	cmp	r3, #0
 8003264:	d118      	bne.n	8003298 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003266:	4b7f      	ldr	r3, [pc, #508]	; (8003464 <HAL_RCC_OscConfig+0x4c8>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a7e      	ldr	r2, [pc, #504]	; (8003464 <HAL_RCC_OscConfig+0x4c8>)
 800326c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003270:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003272:	f7ff faff 	bl	8002874 <HAL_GetTick>
 8003276:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003278:	e008      	b.n	800328c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800327a:	f7ff fafb 	bl	8002874 <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	2b64      	cmp	r3, #100	; 0x64
 8003286:	d901      	bls.n	800328c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e103      	b.n	8003494 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800328c:	4b75      	ldr	r3, [pc, #468]	; (8003464 <HAL_RCC_OscConfig+0x4c8>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003294:	2b00      	cmp	r3, #0
 8003296:	d0f0      	beq.n	800327a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	2b01      	cmp	r3, #1
 800329e:	d106      	bne.n	80032ae <HAL_RCC_OscConfig+0x312>
 80032a0:	4b6f      	ldr	r3, [pc, #444]	; (8003460 <HAL_RCC_OscConfig+0x4c4>)
 80032a2:	6a1b      	ldr	r3, [r3, #32]
 80032a4:	4a6e      	ldr	r2, [pc, #440]	; (8003460 <HAL_RCC_OscConfig+0x4c4>)
 80032a6:	f043 0301 	orr.w	r3, r3, #1
 80032aa:	6213      	str	r3, [r2, #32]
 80032ac:	e02d      	b.n	800330a <HAL_RCC_OscConfig+0x36e>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d10c      	bne.n	80032d0 <HAL_RCC_OscConfig+0x334>
 80032b6:	4b6a      	ldr	r3, [pc, #424]	; (8003460 <HAL_RCC_OscConfig+0x4c4>)
 80032b8:	6a1b      	ldr	r3, [r3, #32]
 80032ba:	4a69      	ldr	r2, [pc, #420]	; (8003460 <HAL_RCC_OscConfig+0x4c4>)
 80032bc:	f023 0301 	bic.w	r3, r3, #1
 80032c0:	6213      	str	r3, [r2, #32]
 80032c2:	4b67      	ldr	r3, [pc, #412]	; (8003460 <HAL_RCC_OscConfig+0x4c4>)
 80032c4:	6a1b      	ldr	r3, [r3, #32]
 80032c6:	4a66      	ldr	r2, [pc, #408]	; (8003460 <HAL_RCC_OscConfig+0x4c4>)
 80032c8:	f023 0304 	bic.w	r3, r3, #4
 80032cc:	6213      	str	r3, [r2, #32]
 80032ce:	e01c      	b.n	800330a <HAL_RCC_OscConfig+0x36e>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	2b05      	cmp	r3, #5
 80032d6:	d10c      	bne.n	80032f2 <HAL_RCC_OscConfig+0x356>
 80032d8:	4b61      	ldr	r3, [pc, #388]	; (8003460 <HAL_RCC_OscConfig+0x4c4>)
 80032da:	6a1b      	ldr	r3, [r3, #32]
 80032dc:	4a60      	ldr	r2, [pc, #384]	; (8003460 <HAL_RCC_OscConfig+0x4c4>)
 80032de:	f043 0304 	orr.w	r3, r3, #4
 80032e2:	6213      	str	r3, [r2, #32]
 80032e4:	4b5e      	ldr	r3, [pc, #376]	; (8003460 <HAL_RCC_OscConfig+0x4c4>)
 80032e6:	6a1b      	ldr	r3, [r3, #32]
 80032e8:	4a5d      	ldr	r2, [pc, #372]	; (8003460 <HAL_RCC_OscConfig+0x4c4>)
 80032ea:	f043 0301 	orr.w	r3, r3, #1
 80032ee:	6213      	str	r3, [r2, #32]
 80032f0:	e00b      	b.n	800330a <HAL_RCC_OscConfig+0x36e>
 80032f2:	4b5b      	ldr	r3, [pc, #364]	; (8003460 <HAL_RCC_OscConfig+0x4c4>)
 80032f4:	6a1b      	ldr	r3, [r3, #32]
 80032f6:	4a5a      	ldr	r2, [pc, #360]	; (8003460 <HAL_RCC_OscConfig+0x4c4>)
 80032f8:	f023 0301 	bic.w	r3, r3, #1
 80032fc:	6213      	str	r3, [r2, #32]
 80032fe:	4b58      	ldr	r3, [pc, #352]	; (8003460 <HAL_RCC_OscConfig+0x4c4>)
 8003300:	6a1b      	ldr	r3, [r3, #32]
 8003302:	4a57      	ldr	r2, [pc, #348]	; (8003460 <HAL_RCC_OscConfig+0x4c4>)
 8003304:	f023 0304 	bic.w	r3, r3, #4
 8003308:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d015      	beq.n	800333e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003312:	f7ff faaf 	bl	8002874 <HAL_GetTick>
 8003316:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003318:	e00a      	b.n	8003330 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800331a:	f7ff faab 	bl	8002874 <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	f241 3288 	movw	r2, #5000	; 0x1388
 8003328:	4293      	cmp	r3, r2
 800332a:	d901      	bls.n	8003330 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e0b1      	b.n	8003494 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003330:	4b4b      	ldr	r3, [pc, #300]	; (8003460 <HAL_RCC_OscConfig+0x4c4>)
 8003332:	6a1b      	ldr	r3, [r3, #32]
 8003334:	f003 0302 	and.w	r3, r3, #2
 8003338:	2b00      	cmp	r3, #0
 800333a:	d0ee      	beq.n	800331a <HAL_RCC_OscConfig+0x37e>
 800333c:	e014      	b.n	8003368 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800333e:	f7ff fa99 	bl	8002874 <HAL_GetTick>
 8003342:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003344:	e00a      	b.n	800335c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003346:	f7ff fa95 	bl	8002874 <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	f241 3288 	movw	r2, #5000	; 0x1388
 8003354:	4293      	cmp	r3, r2
 8003356:	d901      	bls.n	800335c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e09b      	b.n	8003494 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800335c:	4b40      	ldr	r3, [pc, #256]	; (8003460 <HAL_RCC_OscConfig+0x4c4>)
 800335e:	6a1b      	ldr	r3, [r3, #32]
 8003360:	f003 0302 	and.w	r3, r3, #2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d1ee      	bne.n	8003346 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003368:	7dfb      	ldrb	r3, [r7, #23]
 800336a:	2b01      	cmp	r3, #1
 800336c:	d105      	bne.n	800337a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800336e:	4b3c      	ldr	r3, [pc, #240]	; (8003460 <HAL_RCC_OscConfig+0x4c4>)
 8003370:	69db      	ldr	r3, [r3, #28]
 8003372:	4a3b      	ldr	r2, [pc, #236]	; (8003460 <HAL_RCC_OscConfig+0x4c4>)
 8003374:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003378:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	69db      	ldr	r3, [r3, #28]
 800337e:	2b00      	cmp	r3, #0
 8003380:	f000 8087 	beq.w	8003492 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003384:	4b36      	ldr	r3, [pc, #216]	; (8003460 <HAL_RCC_OscConfig+0x4c4>)
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f003 030c 	and.w	r3, r3, #12
 800338c:	2b08      	cmp	r3, #8
 800338e:	d061      	beq.n	8003454 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	69db      	ldr	r3, [r3, #28]
 8003394:	2b02      	cmp	r3, #2
 8003396:	d146      	bne.n	8003426 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003398:	4b33      	ldr	r3, [pc, #204]	; (8003468 <HAL_RCC_OscConfig+0x4cc>)
 800339a:	2200      	movs	r2, #0
 800339c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800339e:	f7ff fa69 	bl	8002874 <HAL_GetTick>
 80033a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033a4:	e008      	b.n	80033b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033a6:	f7ff fa65 	bl	8002874 <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d901      	bls.n	80033b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	e06d      	b.n	8003494 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033b8:	4b29      	ldr	r3, [pc, #164]	; (8003460 <HAL_RCC_OscConfig+0x4c4>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d1f0      	bne.n	80033a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a1b      	ldr	r3, [r3, #32]
 80033c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033cc:	d108      	bne.n	80033e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80033ce:	4b24      	ldr	r3, [pc, #144]	; (8003460 <HAL_RCC_OscConfig+0x4c4>)
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	4921      	ldr	r1, [pc, #132]	; (8003460 <HAL_RCC_OscConfig+0x4c4>)
 80033dc:	4313      	orrs	r3, r2
 80033de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033e0:	4b1f      	ldr	r3, [pc, #124]	; (8003460 <HAL_RCC_OscConfig+0x4c4>)
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a19      	ldr	r1, [r3, #32]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f0:	430b      	orrs	r3, r1
 80033f2:	491b      	ldr	r1, [pc, #108]	; (8003460 <HAL_RCC_OscConfig+0x4c4>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033f8:	4b1b      	ldr	r3, [pc, #108]	; (8003468 <HAL_RCC_OscConfig+0x4cc>)
 80033fa:	2201      	movs	r2, #1
 80033fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033fe:	f7ff fa39 	bl	8002874 <HAL_GetTick>
 8003402:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003404:	e008      	b.n	8003418 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003406:	f7ff fa35 	bl	8002874 <HAL_GetTick>
 800340a:	4602      	mov	r2, r0
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	2b02      	cmp	r3, #2
 8003412:	d901      	bls.n	8003418 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e03d      	b.n	8003494 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003418:	4b11      	ldr	r3, [pc, #68]	; (8003460 <HAL_RCC_OscConfig+0x4c4>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d0f0      	beq.n	8003406 <HAL_RCC_OscConfig+0x46a>
 8003424:	e035      	b.n	8003492 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003426:	4b10      	ldr	r3, [pc, #64]	; (8003468 <HAL_RCC_OscConfig+0x4cc>)
 8003428:	2200      	movs	r2, #0
 800342a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800342c:	f7ff fa22 	bl	8002874 <HAL_GetTick>
 8003430:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003432:	e008      	b.n	8003446 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003434:	f7ff fa1e 	bl	8002874 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b02      	cmp	r3, #2
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e026      	b.n	8003494 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003446:	4b06      	ldr	r3, [pc, #24]	; (8003460 <HAL_RCC_OscConfig+0x4c4>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d1f0      	bne.n	8003434 <HAL_RCC_OscConfig+0x498>
 8003452:	e01e      	b.n	8003492 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	69db      	ldr	r3, [r3, #28]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d107      	bne.n	800346c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e019      	b.n	8003494 <HAL_RCC_OscConfig+0x4f8>
 8003460:	40021000 	.word	0x40021000
 8003464:	40007000 	.word	0x40007000
 8003468:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800346c:	4b0b      	ldr	r3, [pc, #44]	; (800349c <HAL_RCC_OscConfig+0x500>)
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a1b      	ldr	r3, [r3, #32]
 800347c:	429a      	cmp	r2, r3
 800347e:	d106      	bne.n	800348e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800348a:	429a      	cmp	r2, r3
 800348c:	d001      	beq.n	8003492 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e000      	b.n	8003494 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003492:	2300      	movs	r3, #0
}
 8003494:	4618      	mov	r0, r3
 8003496:	3718      	adds	r7, #24
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	40021000 	.word	0x40021000

080034a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d101      	bne.n	80034b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e0d0      	b.n	8003656 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034b4:	4b6a      	ldr	r3, [pc, #424]	; (8003660 <HAL_RCC_ClockConfig+0x1c0>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0307 	and.w	r3, r3, #7
 80034bc:	683a      	ldr	r2, [r7, #0]
 80034be:	429a      	cmp	r2, r3
 80034c0:	d910      	bls.n	80034e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034c2:	4b67      	ldr	r3, [pc, #412]	; (8003660 <HAL_RCC_ClockConfig+0x1c0>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f023 0207 	bic.w	r2, r3, #7
 80034ca:	4965      	ldr	r1, [pc, #404]	; (8003660 <HAL_RCC_ClockConfig+0x1c0>)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034d2:	4b63      	ldr	r3, [pc, #396]	; (8003660 <HAL_RCC_ClockConfig+0x1c0>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0307 	and.w	r3, r3, #7
 80034da:	683a      	ldr	r2, [r7, #0]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d001      	beq.n	80034e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e0b8      	b.n	8003656 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0302 	and.w	r3, r3, #2
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d020      	beq.n	8003532 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0304 	and.w	r3, r3, #4
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d005      	beq.n	8003508 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034fc:	4b59      	ldr	r3, [pc, #356]	; (8003664 <HAL_RCC_ClockConfig+0x1c4>)
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	4a58      	ldr	r2, [pc, #352]	; (8003664 <HAL_RCC_ClockConfig+0x1c4>)
 8003502:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003506:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0308 	and.w	r3, r3, #8
 8003510:	2b00      	cmp	r3, #0
 8003512:	d005      	beq.n	8003520 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003514:	4b53      	ldr	r3, [pc, #332]	; (8003664 <HAL_RCC_ClockConfig+0x1c4>)
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	4a52      	ldr	r2, [pc, #328]	; (8003664 <HAL_RCC_ClockConfig+0x1c4>)
 800351a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800351e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003520:	4b50      	ldr	r3, [pc, #320]	; (8003664 <HAL_RCC_ClockConfig+0x1c4>)
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	494d      	ldr	r1, [pc, #308]	; (8003664 <HAL_RCC_ClockConfig+0x1c4>)
 800352e:	4313      	orrs	r3, r2
 8003530:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0301 	and.w	r3, r3, #1
 800353a:	2b00      	cmp	r3, #0
 800353c:	d040      	beq.n	80035c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	2b01      	cmp	r3, #1
 8003544:	d107      	bne.n	8003556 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003546:	4b47      	ldr	r3, [pc, #284]	; (8003664 <HAL_RCC_ClockConfig+0x1c4>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d115      	bne.n	800357e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e07f      	b.n	8003656 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	2b02      	cmp	r3, #2
 800355c:	d107      	bne.n	800356e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800355e:	4b41      	ldr	r3, [pc, #260]	; (8003664 <HAL_RCC_ClockConfig+0x1c4>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d109      	bne.n	800357e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e073      	b.n	8003656 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800356e:	4b3d      	ldr	r3, [pc, #244]	; (8003664 <HAL_RCC_ClockConfig+0x1c4>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0302 	and.w	r3, r3, #2
 8003576:	2b00      	cmp	r3, #0
 8003578:	d101      	bne.n	800357e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e06b      	b.n	8003656 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800357e:	4b39      	ldr	r3, [pc, #228]	; (8003664 <HAL_RCC_ClockConfig+0x1c4>)
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	f023 0203 	bic.w	r2, r3, #3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	4936      	ldr	r1, [pc, #216]	; (8003664 <HAL_RCC_ClockConfig+0x1c4>)
 800358c:	4313      	orrs	r3, r2
 800358e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003590:	f7ff f970 	bl	8002874 <HAL_GetTick>
 8003594:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003596:	e00a      	b.n	80035ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003598:	f7ff f96c 	bl	8002874 <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d901      	bls.n	80035ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e053      	b.n	8003656 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ae:	4b2d      	ldr	r3, [pc, #180]	; (8003664 <HAL_RCC_ClockConfig+0x1c4>)
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f003 020c 	and.w	r2, r3, #12
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	429a      	cmp	r2, r3
 80035be:	d1eb      	bne.n	8003598 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035c0:	4b27      	ldr	r3, [pc, #156]	; (8003660 <HAL_RCC_ClockConfig+0x1c0>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0307 	and.w	r3, r3, #7
 80035c8:	683a      	ldr	r2, [r7, #0]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d210      	bcs.n	80035f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ce:	4b24      	ldr	r3, [pc, #144]	; (8003660 <HAL_RCC_ClockConfig+0x1c0>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f023 0207 	bic.w	r2, r3, #7
 80035d6:	4922      	ldr	r1, [pc, #136]	; (8003660 <HAL_RCC_ClockConfig+0x1c0>)
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	4313      	orrs	r3, r2
 80035dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035de:	4b20      	ldr	r3, [pc, #128]	; (8003660 <HAL_RCC_ClockConfig+0x1c0>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0307 	and.w	r3, r3, #7
 80035e6:	683a      	ldr	r2, [r7, #0]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d001      	beq.n	80035f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e032      	b.n	8003656 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0304 	and.w	r3, r3, #4
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d008      	beq.n	800360e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035fc:	4b19      	ldr	r3, [pc, #100]	; (8003664 <HAL_RCC_ClockConfig+0x1c4>)
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	4916      	ldr	r1, [pc, #88]	; (8003664 <HAL_RCC_ClockConfig+0x1c4>)
 800360a:	4313      	orrs	r3, r2
 800360c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0308 	and.w	r3, r3, #8
 8003616:	2b00      	cmp	r3, #0
 8003618:	d009      	beq.n	800362e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800361a:	4b12      	ldr	r3, [pc, #72]	; (8003664 <HAL_RCC_ClockConfig+0x1c4>)
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	00db      	lsls	r3, r3, #3
 8003628:	490e      	ldr	r1, [pc, #56]	; (8003664 <HAL_RCC_ClockConfig+0x1c4>)
 800362a:	4313      	orrs	r3, r2
 800362c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800362e:	f000 f821 	bl	8003674 <HAL_RCC_GetSysClockFreq>
 8003632:	4602      	mov	r2, r0
 8003634:	4b0b      	ldr	r3, [pc, #44]	; (8003664 <HAL_RCC_ClockConfig+0x1c4>)
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	091b      	lsrs	r3, r3, #4
 800363a:	f003 030f 	and.w	r3, r3, #15
 800363e:	490a      	ldr	r1, [pc, #40]	; (8003668 <HAL_RCC_ClockConfig+0x1c8>)
 8003640:	5ccb      	ldrb	r3, [r1, r3]
 8003642:	fa22 f303 	lsr.w	r3, r2, r3
 8003646:	4a09      	ldr	r2, [pc, #36]	; (800366c <HAL_RCC_ClockConfig+0x1cc>)
 8003648:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800364a:	4b09      	ldr	r3, [pc, #36]	; (8003670 <HAL_RCC_ClockConfig+0x1d0>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4618      	mov	r0, r3
 8003650:	f7ff f8ce 	bl	80027f0 <HAL_InitTick>

  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3710      	adds	r7, #16
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	40022000 	.word	0x40022000
 8003664:	40021000 	.word	0x40021000
 8003668:	0800be38 	.word	0x0800be38
 800366c:	20000000 	.word	0x20000000
 8003670:	20000004 	.word	0x20000004

08003674 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003674:	b490      	push	{r4, r7}
 8003676:	b08a      	sub	sp, #40	; 0x28
 8003678:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800367a:	4b29      	ldr	r3, [pc, #164]	; (8003720 <HAL_RCC_GetSysClockFreq+0xac>)
 800367c:	1d3c      	adds	r4, r7, #4
 800367e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003680:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003684:	f240 2301 	movw	r3, #513	; 0x201
 8003688:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800368a:	2300      	movs	r3, #0
 800368c:	61fb      	str	r3, [r7, #28]
 800368e:	2300      	movs	r3, #0
 8003690:	61bb      	str	r3, [r7, #24]
 8003692:	2300      	movs	r3, #0
 8003694:	627b      	str	r3, [r7, #36]	; 0x24
 8003696:	2300      	movs	r3, #0
 8003698:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800369a:	2300      	movs	r3, #0
 800369c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800369e:	4b21      	ldr	r3, [pc, #132]	; (8003724 <HAL_RCC_GetSysClockFreq+0xb0>)
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	f003 030c 	and.w	r3, r3, #12
 80036aa:	2b04      	cmp	r3, #4
 80036ac:	d002      	beq.n	80036b4 <HAL_RCC_GetSysClockFreq+0x40>
 80036ae:	2b08      	cmp	r3, #8
 80036b0:	d003      	beq.n	80036ba <HAL_RCC_GetSysClockFreq+0x46>
 80036b2:	e02b      	b.n	800370c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80036b4:	4b1c      	ldr	r3, [pc, #112]	; (8003728 <HAL_RCC_GetSysClockFreq+0xb4>)
 80036b6:	623b      	str	r3, [r7, #32]
      break;
 80036b8:	e02b      	b.n	8003712 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	0c9b      	lsrs	r3, r3, #18
 80036be:	f003 030f 	and.w	r3, r3, #15
 80036c2:	3328      	adds	r3, #40	; 0x28
 80036c4:	443b      	add	r3, r7
 80036c6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80036ca:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d012      	beq.n	80036fc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80036d6:	4b13      	ldr	r3, [pc, #76]	; (8003724 <HAL_RCC_GetSysClockFreq+0xb0>)
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	0c5b      	lsrs	r3, r3, #17
 80036dc:	f003 0301 	and.w	r3, r3, #1
 80036e0:	3328      	adds	r3, #40	; 0x28
 80036e2:	443b      	add	r3, r7
 80036e4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80036e8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	4a0e      	ldr	r2, [pc, #56]	; (8003728 <HAL_RCC_GetSysClockFreq+0xb4>)
 80036ee:	fb03 f202 	mul.w	r2, r3, r2
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f8:	627b      	str	r3, [r7, #36]	; 0x24
 80036fa:	e004      	b.n	8003706 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	4a0b      	ldr	r2, [pc, #44]	; (800372c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003700:	fb02 f303 	mul.w	r3, r2, r3
 8003704:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003708:	623b      	str	r3, [r7, #32]
      break;
 800370a:	e002      	b.n	8003712 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800370c:	4b06      	ldr	r3, [pc, #24]	; (8003728 <HAL_RCC_GetSysClockFreq+0xb4>)
 800370e:	623b      	str	r3, [r7, #32]
      break;
 8003710:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003712:	6a3b      	ldr	r3, [r7, #32]
}
 8003714:	4618      	mov	r0, r3
 8003716:	3728      	adds	r7, #40	; 0x28
 8003718:	46bd      	mov	sp, r7
 800371a:	bc90      	pop	{r4, r7}
 800371c:	4770      	bx	lr
 800371e:	bf00      	nop
 8003720:	0800be28 	.word	0x0800be28
 8003724:	40021000 	.word	0x40021000
 8003728:	007a1200 	.word	0x007a1200
 800372c:	003d0900 	.word	0x003d0900

08003730 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003730:	b480      	push	{r7}
 8003732:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003734:	4b02      	ldr	r3, [pc, #8]	; (8003740 <HAL_RCC_GetHCLKFreq+0x10>)
 8003736:	681b      	ldr	r3, [r3, #0]
}
 8003738:	4618      	mov	r0, r3
 800373a:	46bd      	mov	sp, r7
 800373c:	bc80      	pop	{r7}
 800373e:	4770      	bx	lr
 8003740:	20000000 	.word	0x20000000

08003744 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003748:	f7ff fff2 	bl	8003730 <HAL_RCC_GetHCLKFreq>
 800374c:	4602      	mov	r2, r0
 800374e:	4b05      	ldr	r3, [pc, #20]	; (8003764 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	0a1b      	lsrs	r3, r3, #8
 8003754:	f003 0307 	and.w	r3, r3, #7
 8003758:	4903      	ldr	r1, [pc, #12]	; (8003768 <HAL_RCC_GetPCLK1Freq+0x24>)
 800375a:	5ccb      	ldrb	r3, [r1, r3]
 800375c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003760:	4618      	mov	r0, r3
 8003762:	bd80      	pop	{r7, pc}
 8003764:	40021000 	.word	0x40021000
 8003768:	0800be48 	.word	0x0800be48

0800376c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003770:	f7ff ffde 	bl	8003730 <HAL_RCC_GetHCLKFreq>
 8003774:	4602      	mov	r2, r0
 8003776:	4b05      	ldr	r3, [pc, #20]	; (800378c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	0adb      	lsrs	r3, r3, #11
 800377c:	f003 0307 	and.w	r3, r3, #7
 8003780:	4903      	ldr	r1, [pc, #12]	; (8003790 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003782:	5ccb      	ldrb	r3, [r1, r3]
 8003784:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003788:	4618      	mov	r0, r3
 800378a:	bd80      	pop	{r7, pc}
 800378c:	40021000 	.word	0x40021000
 8003790:	0800be48 	.word	0x0800be48

08003794 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003794:	b480      	push	{r7}
 8003796:	b085      	sub	sp, #20
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800379c:	4b0a      	ldr	r3, [pc, #40]	; (80037c8 <RCC_Delay+0x34>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a0a      	ldr	r2, [pc, #40]	; (80037cc <RCC_Delay+0x38>)
 80037a2:	fba2 2303 	umull	r2, r3, r2, r3
 80037a6:	0a5b      	lsrs	r3, r3, #9
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	fb02 f303 	mul.w	r3, r2, r3
 80037ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80037b0:	bf00      	nop
  }
  while (Delay --);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	1e5a      	subs	r2, r3, #1
 80037b6:	60fa      	str	r2, [r7, #12]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d1f9      	bne.n	80037b0 <RCC_Delay+0x1c>
}
 80037bc:	bf00      	nop
 80037be:	bf00      	nop
 80037c0:	3714      	adds	r7, #20
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bc80      	pop	{r7}
 80037c6:	4770      	bx	lr
 80037c8:	20000000 	.word	0x20000000
 80037cc:	10624dd3 	.word	0x10624dd3

080037d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d101      	bne.n	80037e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e076      	b.n	80038d0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d108      	bne.n	80037fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037f2:	d009      	beq.n	8003808 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	61da      	str	r2, [r3, #28]
 80037fa:	e005      	b.n	8003808 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003814:	b2db      	uxtb	r3, r3
 8003816:	2b00      	cmp	r3, #0
 8003818:	d106      	bne.n	8003828 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f7fe fc5e 	bl	80020e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2202      	movs	r2, #2
 800382c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800383e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003850:	431a      	orrs	r2, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800385a:	431a      	orrs	r2, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	691b      	ldr	r3, [r3, #16]
 8003860:	f003 0302 	and.w	r3, r3, #2
 8003864:	431a      	orrs	r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	695b      	ldr	r3, [r3, #20]
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	431a      	orrs	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	699b      	ldr	r3, [r3, #24]
 8003874:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003878:	431a      	orrs	r2, r3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	69db      	ldr	r3, [r3, #28]
 800387e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003882:	431a      	orrs	r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a1b      	ldr	r3, [r3, #32]
 8003888:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800388c:	ea42 0103 	orr.w	r1, r2, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003894:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	430a      	orrs	r2, r1
 800389e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	699b      	ldr	r3, [r3, #24]
 80038a4:	0c1a      	lsrs	r2, r3, #16
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f002 0204 	and.w	r2, r2, #4
 80038ae:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	69da      	ldr	r2, [r3, #28]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038be:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2201      	movs	r2, #1
 80038ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80038ce:	2300      	movs	r3, #0
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3708      	adds	r7, #8
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b088      	sub	sp, #32
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	603b      	str	r3, [r7, #0]
 80038e4:	4613      	mov	r3, r2
 80038e6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80038e8:	2300      	movs	r3, #0
 80038ea:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d101      	bne.n	80038fa <HAL_SPI_Transmit+0x22>
 80038f6:	2302      	movs	r3, #2
 80038f8:	e126      	b.n	8003b48 <HAL_SPI_Transmit+0x270>
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2201      	movs	r2, #1
 80038fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003902:	f7fe ffb7 	bl	8002874 <HAL_GetTick>
 8003906:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003908:	88fb      	ldrh	r3, [r7, #6]
 800390a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003912:	b2db      	uxtb	r3, r3
 8003914:	2b01      	cmp	r3, #1
 8003916:	d002      	beq.n	800391e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003918:	2302      	movs	r3, #2
 800391a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800391c:	e10b      	b.n	8003b36 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d002      	beq.n	800392a <HAL_SPI_Transmit+0x52>
 8003924:	88fb      	ldrh	r3, [r7, #6]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d102      	bne.n	8003930 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800392e:	e102      	b.n	8003b36 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2203      	movs	r2, #3
 8003934:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2200      	movs	r2, #0
 800393c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	68ba      	ldr	r2, [r7, #8]
 8003942:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	88fa      	ldrh	r2, [r7, #6]
 8003948:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	88fa      	ldrh	r2, [r7, #6]
 800394e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2200      	movs	r2, #0
 8003954:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2200      	movs	r2, #0
 800395a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2200      	movs	r2, #0
 8003960:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2200      	movs	r2, #0
 8003966:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003976:	d10f      	bne.n	8003998 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003986:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003996:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a2:	2b40      	cmp	r3, #64	; 0x40
 80039a4:	d007      	beq.n	80039b6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039b4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039be:	d14b      	bne.n	8003a58 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d002      	beq.n	80039ce <HAL_SPI_Transmit+0xf6>
 80039c8:	8afb      	ldrh	r3, [r7, #22]
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d13e      	bne.n	8003a4c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d2:	881a      	ldrh	r2, [r3, #0]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039de:	1c9a      	adds	r2, r3, #2
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	3b01      	subs	r3, #1
 80039ec:	b29a      	uxth	r2, r3
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80039f2:	e02b      	b.n	8003a4c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f003 0302 	and.w	r3, r3, #2
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	d112      	bne.n	8003a28 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a06:	881a      	ldrh	r2, [r3, #0]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a12:	1c9a      	adds	r2, r3, #2
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	b29a      	uxth	r2, r3
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	86da      	strh	r2, [r3, #54]	; 0x36
 8003a26:	e011      	b.n	8003a4c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a28:	f7fe ff24 	bl	8002874 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	683a      	ldr	r2, [r7, #0]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d803      	bhi.n	8003a40 <HAL_SPI_Transmit+0x168>
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a3e:	d102      	bne.n	8003a46 <HAL_SPI_Transmit+0x16e>
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d102      	bne.n	8003a4c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003a4a:	e074      	b.n	8003b36 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d1ce      	bne.n	80039f4 <HAL_SPI_Transmit+0x11c>
 8003a56:	e04c      	b.n	8003af2 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d002      	beq.n	8003a66 <HAL_SPI_Transmit+0x18e>
 8003a60:	8afb      	ldrh	r3, [r7, #22]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d140      	bne.n	8003ae8 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	330c      	adds	r3, #12
 8003a70:	7812      	ldrb	r2, [r2, #0]
 8003a72:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a78:	1c5a      	adds	r2, r3, #1
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	3b01      	subs	r3, #1
 8003a86:	b29a      	uxth	r2, r3
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003a8c:	e02c      	b.n	8003ae8 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f003 0302 	and.w	r3, r3, #2
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d113      	bne.n	8003ac4 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	330c      	adds	r3, #12
 8003aa6:	7812      	ldrb	r2, [r2, #0]
 8003aa8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aae:	1c5a      	adds	r2, r3, #1
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	3b01      	subs	r3, #1
 8003abc:	b29a      	uxth	r2, r3
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	86da      	strh	r2, [r3, #54]	; 0x36
 8003ac2:	e011      	b.n	8003ae8 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ac4:	f7fe fed6 	bl	8002874 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	683a      	ldr	r2, [r7, #0]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d803      	bhi.n	8003adc <HAL_SPI_Transmit+0x204>
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ada:	d102      	bne.n	8003ae2 <HAL_SPI_Transmit+0x20a>
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d102      	bne.n	8003ae8 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003ae6:	e026      	b.n	8003b36 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1cd      	bne.n	8003a8e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003af2:	69ba      	ldr	r2, [r7, #24]
 8003af4:	6839      	ldr	r1, [r7, #0]
 8003af6:	68f8      	ldr	r0, [r7, #12]
 8003af8:	f000 f8b2 	bl	8003c60 <SPI_EndRxTxTransaction>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d002      	beq.n	8003b08 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2220      	movs	r2, #32
 8003b06:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d10a      	bne.n	8003b26 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b10:	2300      	movs	r3, #0
 8003b12:	613b      	str	r3, [r7, #16]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	613b      	str	r3, [r7, #16]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	613b      	str	r3, [r7, #16]
 8003b24:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d002      	beq.n	8003b34 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	77fb      	strb	r3, [r7, #31]
 8003b32:	e000      	b.n	8003b36 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003b34:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2201      	movs	r2, #1
 8003b3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003b46:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3720      	adds	r7, #32
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b088      	sub	sp, #32
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	60b9      	str	r1, [r7, #8]
 8003b5a:	603b      	str	r3, [r7, #0]
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003b60:	f7fe fe88 	bl	8002874 <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b68:	1a9b      	subs	r3, r3, r2
 8003b6a:	683a      	ldr	r2, [r7, #0]
 8003b6c:	4413      	add	r3, r2
 8003b6e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003b70:	f7fe fe80 	bl	8002874 <HAL_GetTick>
 8003b74:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003b76:	4b39      	ldr	r3, [pc, #228]	; (8003c5c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	015b      	lsls	r3, r3, #5
 8003b7c:	0d1b      	lsrs	r3, r3, #20
 8003b7e:	69fa      	ldr	r2, [r7, #28]
 8003b80:	fb02 f303 	mul.w	r3, r2, r3
 8003b84:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b86:	e054      	b.n	8003c32 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b8e:	d050      	beq.n	8003c32 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b90:	f7fe fe70 	bl	8002874 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	69fa      	ldr	r2, [r7, #28]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d902      	bls.n	8003ba6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d13d      	bne.n	8003c22 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	685a      	ldr	r2, [r3, #4]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003bb4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bbe:	d111      	bne.n	8003be4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bc8:	d004      	beq.n	8003bd4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bd2:	d107      	bne.n	8003be4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003be2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bec:	d10f      	bne.n	8003c0e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003bfc:	601a      	str	r2, [r3, #0]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c0c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2201      	movs	r2, #1
 8003c12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e017      	b.n	8003c52 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d101      	bne.n	8003c2c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	689a      	ldr	r2, [r3, #8]
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	68ba      	ldr	r2, [r7, #8]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	bf0c      	ite	eq
 8003c42:	2301      	moveq	r3, #1
 8003c44:	2300      	movne	r3, #0
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	461a      	mov	r2, r3
 8003c4a:	79fb      	ldrb	r3, [r7, #7]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d19b      	bne.n	8003b88 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3720      	adds	r7, #32
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	20000000 	.word	0x20000000

08003c60 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b086      	sub	sp, #24
 8003c64:	af02      	add	r7, sp, #8
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	9300      	str	r3, [sp, #0]
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	2200      	movs	r2, #0
 8003c74:	2180      	movs	r1, #128	; 0x80
 8003c76:	68f8      	ldr	r0, [r7, #12]
 8003c78:	f7ff ff6a 	bl	8003b50 <SPI_WaitFlagStateUntilTimeout>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d007      	beq.n	8003c92 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c86:	f043 0220 	orr.w	r2, r3, #32
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e000      	b.n	8003c94 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3710      	adds	r7, #16
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b082      	sub	sp, #8
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d101      	bne.n	8003cae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e03f      	b.n	8003d2e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d106      	bne.n	8003cc8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f7fe fa4c 	bl	8002160 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2224      	movs	r2, #36	; 0x24
 8003ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68da      	ldr	r2, [r3, #12]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cde:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f000 fc25 	bl	8004530 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	691a      	ldr	r2, [r3, #16]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003cf4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	695a      	ldr	r2, [r3, #20]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	68da      	ldr	r2, [r3, #12]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2220      	movs	r2, #32
 8003d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2220      	movs	r2, #32
 8003d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3708      	adds	r7, #8
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}

08003d36 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d36:	b580      	push	{r7, lr}
 8003d38:	b08a      	sub	sp, #40	; 0x28
 8003d3a:	af02      	add	r7, sp, #8
 8003d3c:	60f8      	str	r0, [r7, #12]
 8003d3e:	60b9      	str	r1, [r7, #8]
 8003d40:	603b      	str	r3, [r7, #0]
 8003d42:	4613      	mov	r3, r2
 8003d44:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d46:	2300      	movs	r3, #0
 8003d48:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	2b20      	cmp	r3, #32
 8003d54:	d17c      	bne.n	8003e50 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d002      	beq.n	8003d62 <HAL_UART_Transmit+0x2c>
 8003d5c:	88fb      	ldrh	r3, [r7, #6]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d101      	bne.n	8003d66 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e075      	b.n	8003e52 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d101      	bne.n	8003d74 <HAL_UART_Transmit+0x3e>
 8003d70:	2302      	movs	r3, #2
 8003d72:	e06e      	b.n	8003e52 <HAL_UART_Transmit+0x11c>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2221      	movs	r2, #33	; 0x21
 8003d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d8a:	f7fe fd73 	bl	8002874 <HAL_GetTick>
 8003d8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	88fa      	ldrh	r2, [r7, #6]
 8003d94:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	88fa      	ldrh	r2, [r7, #6]
 8003d9a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003da4:	d108      	bne.n	8003db8 <HAL_UART_Transmit+0x82>
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d104      	bne.n	8003db8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003dae:	2300      	movs	r3, #0
 8003db0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	61bb      	str	r3, [r7, #24]
 8003db6:	e003      	b.n	8003dc0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003dc8:	e02a      	b.n	8003e20 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	9300      	str	r3, [sp, #0]
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	2180      	movs	r1, #128	; 0x80
 8003dd4:	68f8      	ldr	r0, [r7, #12]
 8003dd6:	f000 fa11 	bl	80041fc <UART_WaitOnFlagUntilTimeout>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d001      	beq.n	8003de4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e036      	b.n	8003e52 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003de4:	69fb      	ldr	r3, [r7, #28]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d10b      	bne.n	8003e02 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	881b      	ldrh	r3, [r3, #0]
 8003dee:	461a      	mov	r2, r3
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003df8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	3302      	adds	r3, #2
 8003dfe:	61bb      	str	r3, [r7, #24]
 8003e00:	e007      	b.n	8003e12 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	781a      	ldrb	r2, [r3, #0]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	3301      	adds	r3, #1
 8003e10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	3b01      	subs	r3, #1
 8003e1a:	b29a      	uxth	r2, r3
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1cf      	bne.n	8003dca <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	9300      	str	r3, [sp, #0]
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	2200      	movs	r2, #0
 8003e32:	2140      	movs	r1, #64	; 0x40
 8003e34:	68f8      	ldr	r0, [r7, #12]
 8003e36:	f000 f9e1 	bl	80041fc <UART_WaitOnFlagUntilTimeout>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d001      	beq.n	8003e44 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003e40:	2303      	movs	r3, #3
 8003e42:	e006      	b.n	8003e52 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2220      	movs	r2, #32
 8003e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	e000      	b.n	8003e52 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003e50:	2302      	movs	r3, #2
  }
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3720      	adds	r7, #32
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
	...

08003e5c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b08a      	sub	sp, #40	; 0x28
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	695b      	ldr	r3, [r3, #20]
 8003e7a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003e80:	2300      	movs	r3, #0
 8003e82:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e86:	f003 030f 	and.w	r3, r3, #15
 8003e8a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d10d      	bne.n	8003eae <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e94:	f003 0320 	and.w	r3, r3, #32
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d008      	beq.n	8003eae <HAL_UART_IRQHandler+0x52>
 8003e9c:	6a3b      	ldr	r3, [r7, #32]
 8003e9e:	f003 0320 	and.w	r3, r3, #32
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d003      	beq.n	8003eae <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 fa99 	bl	80043de <UART_Receive_IT>
      return;
 8003eac:	e17b      	b.n	80041a6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	f000 80b1 	beq.w	8004018 <HAL_UART_IRQHandler+0x1bc>
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	f003 0301 	and.w	r3, r3, #1
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d105      	bne.n	8003ecc <HAL_UART_IRQHandler+0x70>
 8003ec0:	6a3b      	ldr	r3, [r7, #32]
 8003ec2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	f000 80a6 	beq.w	8004018 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00a      	beq.n	8003eec <HAL_UART_IRQHandler+0x90>
 8003ed6:	6a3b      	ldr	r3, [r7, #32]
 8003ed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d005      	beq.n	8003eec <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee4:	f043 0201 	orr.w	r2, r3, #1
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eee:	f003 0304 	and.w	r3, r3, #4
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d00a      	beq.n	8003f0c <HAL_UART_IRQHandler+0xb0>
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	f003 0301 	and.w	r3, r3, #1
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d005      	beq.n	8003f0c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f04:	f043 0202 	orr.w	r2, r3, #2
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0e:	f003 0302 	and.w	r3, r3, #2
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00a      	beq.n	8003f2c <HAL_UART_IRQHandler+0xd0>
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	f003 0301 	and.w	r3, r3, #1
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d005      	beq.n	8003f2c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f24:	f043 0204 	orr.w	r2, r3, #4
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2e:	f003 0308 	and.w	r3, r3, #8
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d00f      	beq.n	8003f56 <HAL_UART_IRQHandler+0xfa>
 8003f36:	6a3b      	ldr	r3, [r7, #32]
 8003f38:	f003 0320 	and.w	r3, r3, #32
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d104      	bne.n	8003f4a <HAL_UART_IRQHandler+0xee>
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	f003 0301 	and.w	r3, r3, #1
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d005      	beq.n	8003f56 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4e:	f043 0208 	orr.w	r2, r3, #8
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	f000 811e 	beq.w	800419c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f62:	f003 0320 	and.w	r3, r3, #32
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d007      	beq.n	8003f7a <HAL_UART_IRQHandler+0x11e>
 8003f6a:	6a3b      	ldr	r3, [r7, #32]
 8003f6c:	f003 0320 	and.w	r3, r3, #32
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d002      	beq.n	8003f7a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f000 fa32 	bl	80043de <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	695b      	ldr	r3, [r3, #20]
 8003f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	bf14      	ite	ne
 8003f88:	2301      	movne	r3, #1
 8003f8a:	2300      	moveq	r3, #0
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f94:	f003 0308 	and.w	r3, r3, #8
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d102      	bne.n	8003fa2 <HAL_UART_IRQHandler+0x146>
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d031      	beq.n	8004006 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 f974 	bl	8004290 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	695b      	ldr	r3, [r3, #20]
 8003fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d023      	beq.n	8003ffe <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	695a      	ldr	r2, [r3, #20]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fc4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d013      	beq.n	8003ff6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd2:	4a76      	ldr	r2, [pc, #472]	; (80041ac <HAL_UART_IRQHandler+0x350>)
 8003fd4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7fe fdcc 	bl	8002b78 <HAL_DMA_Abort_IT>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d016      	beq.n	8004014 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ff0:	4610      	mov	r0, r2
 8003ff2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ff4:	e00e      	b.n	8004014 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 f8ec 	bl	80041d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ffc:	e00a      	b.n	8004014 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 f8e8 	bl	80041d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004004:	e006      	b.n	8004014 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f000 f8e4 	bl	80041d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004012:	e0c3      	b.n	800419c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004014:	bf00      	nop
    return;
 8004016:	e0c1      	b.n	800419c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800401c:	2b01      	cmp	r3, #1
 800401e:	f040 80a1 	bne.w	8004164 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004024:	f003 0310 	and.w	r3, r3, #16
 8004028:	2b00      	cmp	r3, #0
 800402a:	f000 809b 	beq.w	8004164 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800402e:	6a3b      	ldr	r3, [r7, #32]
 8004030:	f003 0310 	and.w	r3, r3, #16
 8004034:	2b00      	cmp	r3, #0
 8004036:	f000 8095 	beq.w	8004164 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800403a:	2300      	movs	r3, #0
 800403c:	60fb      	str	r3, [r7, #12]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	60fb      	str	r3, [r7, #12]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	60fb      	str	r3, [r7, #12]
 800404e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	695b      	ldr	r3, [r3, #20]
 8004056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800405a:	2b00      	cmp	r3, #0
 800405c:	d04e      	beq.n	80040fc <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004068:	8a3b      	ldrh	r3, [r7, #16]
 800406a:	2b00      	cmp	r3, #0
 800406c:	f000 8098 	beq.w	80041a0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004074:	8a3a      	ldrh	r2, [r7, #16]
 8004076:	429a      	cmp	r2, r3
 8004078:	f080 8092 	bcs.w	80041a0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	8a3a      	ldrh	r2, [r7, #16]
 8004080:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004086:	699b      	ldr	r3, [r3, #24]
 8004088:	2b20      	cmp	r3, #32
 800408a:	d02b      	beq.n	80040e4 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68da      	ldr	r2, [r3, #12]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800409a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	695a      	ldr	r2, [r3, #20]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f022 0201 	bic.w	r2, r2, #1
 80040aa:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	695a      	ldr	r2, [r3, #20]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040ba:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2220      	movs	r2, #32
 80040c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68da      	ldr	r2, [r3, #12]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f022 0210 	bic.w	r2, r2, #16
 80040d8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040de:	4618      	mov	r0, r3
 80040e0:	f7fe fd0f 	bl	8002b02 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	4619      	mov	r1, r3
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f000 f876 	bl	80041e6 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80040fa:	e051      	b.n	80041a0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004104:	b29b      	uxth	r3, r3
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800410e:	b29b      	uxth	r3, r3
 8004110:	2b00      	cmp	r3, #0
 8004112:	d047      	beq.n	80041a4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004114:	8a7b      	ldrh	r3, [r7, #18]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d044      	beq.n	80041a4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	68da      	ldr	r2, [r3, #12]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004128:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	695a      	ldr	r2, [r3, #20]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f022 0201 	bic.w	r2, r2, #1
 8004138:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2220      	movs	r2, #32
 800413e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	68da      	ldr	r2, [r3, #12]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f022 0210 	bic.w	r2, r2, #16
 8004156:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004158:	8a7b      	ldrh	r3, [r7, #18]
 800415a:	4619      	mov	r1, r3
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f000 f842 	bl	80041e6 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004162:	e01f      	b.n	80041a4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800416a:	2b00      	cmp	r3, #0
 800416c:	d008      	beq.n	8004180 <HAL_UART_IRQHandler+0x324>
 800416e:	6a3b      	ldr	r3, [r7, #32]
 8004170:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004174:	2b00      	cmp	r3, #0
 8004176:	d003      	beq.n	8004180 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f000 f8c9 	bl	8004310 <UART_Transmit_IT>
    return;
 800417e:	e012      	b.n	80041a6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004186:	2b00      	cmp	r3, #0
 8004188:	d00d      	beq.n	80041a6 <HAL_UART_IRQHandler+0x34a>
 800418a:	6a3b      	ldr	r3, [r7, #32]
 800418c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004190:	2b00      	cmp	r3, #0
 8004192:	d008      	beq.n	80041a6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f000 f90a 	bl	80043ae <UART_EndTransmit_IT>
    return;
 800419a:	e004      	b.n	80041a6 <HAL_UART_IRQHandler+0x34a>
    return;
 800419c:	bf00      	nop
 800419e:	e002      	b.n	80041a6 <HAL_UART_IRQHandler+0x34a>
      return;
 80041a0:	bf00      	nop
 80041a2:	e000      	b.n	80041a6 <HAL_UART_IRQHandler+0x34a>
      return;
 80041a4:	bf00      	nop
  }
}
 80041a6:	3728      	adds	r7, #40	; 0x28
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	080042e9 	.word	0x080042e9

080041b0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80041b8:	bf00      	nop
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	bc80      	pop	{r7}
 80041c0:	4770      	bx	lr

080041c2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80041c2:	b480      	push	{r7}
 80041c4:	b083      	sub	sp, #12
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80041ca:	bf00      	nop
 80041cc:	370c      	adds	r7, #12
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bc80      	pop	{r7}
 80041d2:	4770      	bx	lr

080041d4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80041dc:	bf00      	nop
 80041de:	370c      	adds	r7, #12
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bc80      	pop	{r7}
 80041e4:	4770      	bx	lr

080041e6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80041e6:	b480      	push	{r7}
 80041e8:	b083      	sub	sp, #12
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
 80041ee:	460b      	mov	r3, r1
 80041f0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80041f2:	bf00      	nop
 80041f4:	370c      	adds	r7, #12
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bc80      	pop	{r7}
 80041fa:	4770      	bx	lr

080041fc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	60b9      	str	r1, [r7, #8]
 8004206:	603b      	str	r3, [r7, #0]
 8004208:	4613      	mov	r3, r2
 800420a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800420c:	e02c      	b.n	8004268 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004214:	d028      	beq.n	8004268 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004216:	69bb      	ldr	r3, [r7, #24]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d007      	beq.n	800422c <UART_WaitOnFlagUntilTimeout+0x30>
 800421c:	f7fe fb2a 	bl	8002874 <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	69ba      	ldr	r2, [r7, #24]
 8004228:	429a      	cmp	r2, r3
 800422a:	d21d      	bcs.n	8004268 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68da      	ldr	r2, [r3, #12]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800423a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	695a      	ldr	r2, [r3, #20]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f022 0201 	bic.w	r2, r2, #1
 800424a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2220      	movs	r2, #32
 8004250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2220      	movs	r2, #32
 8004258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2200      	movs	r2, #0
 8004260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004264:	2303      	movs	r3, #3
 8004266:	e00f      	b.n	8004288 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	4013      	ands	r3, r2
 8004272:	68ba      	ldr	r2, [r7, #8]
 8004274:	429a      	cmp	r2, r3
 8004276:	bf0c      	ite	eq
 8004278:	2301      	moveq	r3, #1
 800427a:	2300      	movne	r3, #0
 800427c:	b2db      	uxtb	r3, r3
 800427e:	461a      	mov	r2, r3
 8004280:	79fb      	ldrb	r3, [r7, #7]
 8004282:	429a      	cmp	r2, r3
 8004284:	d0c3      	beq.n	800420e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004286:	2300      	movs	r3, #0
}
 8004288:	4618      	mov	r0, r3
 800428a:	3710      	adds	r7, #16
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68da      	ldr	r2, [r3, #12]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80042a6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	695a      	ldr	r2, [r3, #20]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f022 0201 	bic.w	r2, r2, #1
 80042b6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d107      	bne.n	80042d0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68da      	ldr	r2, [r3, #12]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f022 0210 	bic.w	r2, r2, #16
 80042ce:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2220      	movs	r2, #32
 80042d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80042de:	bf00      	nop
 80042e0:	370c      	adds	r7, #12
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bc80      	pop	{r7}
 80042e6:	4770      	bx	lr

080042e8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2200      	movs	r2, #0
 80042fa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2200      	movs	r2, #0
 8004300:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004302:	68f8      	ldr	r0, [r7, #12]
 8004304:	f7ff ff66 	bl	80041d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004308:	bf00      	nop
 800430a:	3710      	adds	r7, #16
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}

08004310 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004310:	b480      	push	{r7}
 8004312:	b085      	sub	sp, #20
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800431e:	b2db      	uxtb	r3, r3
 8004320:	2b21      	cmp	r3, #33	; 0x21
 8004322:	d13e      	bne.n	80043a2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800432c:	d114      	bne.n	8004358 <UART_Transmit_IT+0x48>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d110      	bne.n	8004358 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a1b      	ldr	r3, [r3, #32]
 800433a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	881b      	ldrh	r3, [r3, #0]
 8004340:	461a      	mov	r2, r3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800434a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6a1b      	ldr	r3, [r3, #32]
 8004350:	1c9a      	adds	r2, r3, #2
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	621a      	str	r2, [r3, #32]
 8004356:	e008      	b.n	800436a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a1b      	ldr	r3, [r3, #32]
 800435c:	1c59      	adds	r1, r3, #1
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	6211      	str	r1, [r2, #32]
 8004362:	781a      	ldrb	r2, [r3, #0]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800436e:	b29b      	uxth	r3, r3
 8004370:	3b01      	subs	r3, #1
 8004372:	b29b      	uxth	r3, r3
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	4619      	mov	r1, r3
 8004378:	84d1      	strh	r1, [r2, #38]	; 0x26
 800437a:	2b00      	cmp	r3, #0
 800437c:	d10f      	bne.n	800439e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	68da      	ldr	r2, [r3, #12]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800438c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68da      	ldr	r2, [r3, #12]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800439c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800439e:	2300      	movs	r3, #0
 80043a0:	e000      	b.n	80043a4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80043a2:	2302      	movs	r3, #2
  }
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3714      	adds	r7, #20
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bc80      	pop	{r7}
 80043ac:	4770      	bx	lr

080043ae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80043ae:	b580      	push	{r7, lr}
 80043b0:	b082      	sub	sp, #8
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	68da      	ldr	r2, [r3, #12]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043c4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2220      	movs	r2, #32
 80043ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f7ff feee 	bl	80041b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3708      	adds	r7, #8
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}

080043de <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80043de:	b580      	push	{r7, lr}
 80043e0:	b086      	sub	sp, #24
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	2b22      	cmp	r3, #34	; 0x22
 80043f0:	f040 8099 	bne.w	8004526 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043fc:	d117      	bne.n	800442e <UART_Receive_IT+0x50>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d113      	bne.n	800442e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004406:	2300      	movs	r3, #0
 8004408:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800440e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	b29b      	uxth	r3, r3
 8004418:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800441c:	b29a      	uxth	r2, r3
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004426:	1c9a      	adds	r2, r3, #2
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	629a      	str	r2, [r3, #40]	; 0x28
 800442c:	e026      	b.n	800447c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004432:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004434:	2300      	movs	r3, #0
 8004436:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004440:	d007      	beq.n	8004452 <UART_Receive_IT+0x74>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d10a      	bne.n	8004460 <UART_Receive_IT+0x82>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d106      	bne.n	8004460 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	b2da      	uxtb	r2, r3
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	701a      	strb	r2, [r3, #0]
 800445e:	e008      	b.n	8004472 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	b2db      	uxtb	r3, r3
 8004468:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800446c:	b2da      	uxtb	r2, r3
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004476:	1c5a      	adds	r2, r3, #1
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004480:	b29b      	uxth	r3, r3
 8004482:	3b01      	subs	r3, #1
 8004484:	b29b      	uxth	r3, r3
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	4619      	mov	r1, r3
 800448a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800448c:	2b00      	cmp	r3, #0
 800448e:	d148      	bne.n	8004522 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68da      	ldr	r2, [r3, #12]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f022 0220 	bic.w	r2, r2, #32
 800449e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68da      	ldr	r2, [r3, #12]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	695a      	ldr	r2, [r3, #20]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f022 0201 	bic.w	r2, r2, #1
 80044be:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2220      	movs	r2, #32
 80044c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d123      	bne.n	8004518 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68da      	ldr	r2, [r3, #12]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f022 0210 	bic.w	r2, r2, #16
 80044e4:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0310 	and.w	r3, r3, #16
 80044f0:	2b10      	cmp	r3, #16
 80044f2:	d10a      	bne.n	800450a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80044f4:	2300      	movs	r3, #0
 80044f6:	60fb      	str	r3, [r7, #12]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	60fb      	str	r3, [r7, #12]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	60fb      	str	r3, [r7, #12]
 8004508:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800450e:	4619      	mov	r1, r3
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f7ff fe68 	bl	80041e6 <HAL_UARTEx_RxEventCallback>
 8004516:	e002      	b.n	800451e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f7ff fe52 	bl	80041c2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800451e:	2300      	movs	r3, #0
 8004520:	e002      	b.n	8004528 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004522:	2300      	movs	r3, #0
 8004524:	e000      	b.n	8004528 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004526:	2302      	movs	r3, #2
  }
}
 8004528:	4618      	mov	r0, r3
 800452a:	3718      	adds	r7, #24
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b084      	sub	sp, #16
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	68da      	ldr	r2, [r3, #12]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	430a      	orrs	r2, r1
 800454c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	689a      	ldr	r2, [r3, #8]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	431a      	orrs	r2, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	695b      	ldr	r3, [r3, #20]
 800455c:	4313      	orrs	r3, r2
 800455e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800456a:	f023 030c 	bic.w	r3, r3, #12
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	6812      	ldr	r2, [r2, #0]
 8004572:	68b9      	ldr	r1, [r7, #8]
 8004574:	430b      	orrs	r3, r1
 8004576:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	695b      	ldr	r3, [r3, #20]
 800457e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	699a      	ldr	r2, [r3, #24]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	430a      	orrs	r2, r1
 800458c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a2c      	ldr	r2, [pc, #176]	; (8004644 <UART_SetConfig+0x114>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d103      	bne.n	80045a0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004598:	f7ff f8e8 	bl	800376c <HAL_RCC_GetPCLK2Freq>
 800459c:	60f8      	str	r0, [r7, #12]
 800459e:	e002      	b.n	80045a6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80045a0:	f7ff f8d0 	bl	8003744 <HAL_RCC_GetPCLK1Freq>
 80045a4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80045a6:	68fa      	ldr	r2, [r7, #12]
 80045a8:	4613      	mov	r3, r2
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	4413      	add	r3, r2
 80045ae:	009a      	lsls	r2, r3, #2
 80045b0:	441a      	add	r2, r3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045bc:	4a22      	ldr	r2, [pc, #136]	; (8004648 <UART_SetConfig+0x118>)
 80045be:	fba2 2303 	umull	r2, r3, r2, r3
 80045c2:	095b      	lsrs	r3, r3, #5
 80045c4:	0119      	lsls	r1, r3, #4
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	4613      	mov	r3, r2
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	4413      	add	r3, r2
 80045ce:	009a      	lsls	r2, r3, #2
 80045d0:	441a      	add	r2, r3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80045dc:	4b1a      	ldr	r3, [pc, #104]	; (8004648 <UART_SetConfig+0x118>)
 80045de:	fba3 0302 	umull	r0, r3, r3, r2
 80045e2:	095b      	lsrs	r3, r3, #5
 80045e4:	2064      	movs	r0, #100	; 0x64
 80045e6:	fb00 f303 	mul.w	r3, r0, r3
 80045ea:	1ad3      	subs	r3, r2, r3
 80045ec:	011b      	lsls	r3, r3, #4
 80045ee:	3332      	adds	r3, #50	; 0x32
 80045f0:	4a15      	ldr	r2, [pc, #84]	; (8004648 <UART_SetConfig+0x118>)
 80045f2:	fba2 2303 	umull	r2, r3, r2, r3
 80045f6:	095b      	lsrs	r3, r3, #5
 80045f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045fc:	4419      	add	r1, r3
 80045fe:	68fa      	ldr	r2, [r7, #12]
 8004600:	4613      	mov	r3, r2
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	4413      	add	r3, r2
 8004606:	009a      	lsls	r2, r3, #2
 8004608:	441a      	add	r2, r3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	fbb2 f2f3 	udiv	r2, r2, r3
 8004614:	4b0c      	ldr	r3, [pc, #48]	; (8004648 <UART_SetConfig+0x118>)
 8004616:	fba3 0302 	umull	r0, r3, r3, r2
 800461a:	095b      	lsrs	r3, r3, #5
 800461c:	2064      	movs	r0, #100	; 0x64
 800461e:	fb00 f303 	mul.w	r3, r0, r3
 8004622:	1ad3      	subs	r3, r2, r3
 8004624:	011b      	lsls	r3, r3, #4
 8004626:	3332      	adds	r3, #50	; 0x32
 8004628:	4a07      	ldr	r2, [pc, #28]	; (8004648 <UART_SetConfig+0x118>)
 800462a:	fba2 2303 	umull	r2, r3, r2, r3
 800462e:	095b      	lsrs	r3, r3, #5
 8004630:	f003 020f 	and.w	r2, r3, #15
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	440a      	add	r2, r1
 800463a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800463c:	bf00      	nop
 800463e:	3710      	adds	r7, #16
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}
 8004644:	40013800 	.word	0x40013800
 8004648:	51eb851f 	.word	0x51eb851f

0800464c <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b084      	sub	sp, #16
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	7c1b      	ldrb	r3, [r3, #16]
 800465a:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004662:	461a      	mov	r2, r3
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	fb02 f303 	mul.w	r3, r2, r3
 800466a:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	00db      	lsls	r3, r3, #3
 8004670:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004676:	68fa      	ldr	r2, [r7, #12]
 8004678:	2100      	movs	r1, #0
 800467a:	4618      	mov	r0, r3
 800467c:	f001 fc4c 	bl	8005f18 <memset>
}
 8004680:	bf00      	nop
 8004682:	3710      	adds	r7, #16
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b086      	sub	sp, #24
 800468c:	af02      	add	r7, sp, #8
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	460b      	mov	r3, r1
 8004692:	70fb      	strb	r3, [r7, #3]
 8004694:	4613      	mov	r3, r2
 8004696:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	7c1b      	ldrb	r3, [r3, #16]
 800469e:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 80046a0:	78fb      	ldrb	r3, [r7, #3]
 80046a2:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046a8:	60bb      	str	r3, [r7, #8]
  offset *= w;
 80046aa:	7bfb      	ldrb	r3, [r7, #15]
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	89ba      	ldrh	r2, [r7, #12]
 80046b0:	fb02 f303 	mul.w	r3, r2, r3
 80046b4:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 80046b6:	89bb      	ldrh	r3, [r7, #12]
 80046b8:	00db      	lsls	r3, r3, #3
 80046ba:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 80046bc:	89bb      	ldrh	r3, [r7, #12]
 80046be:	68ba      	ldr	r2, [r7, #8]
 80046c0:	4413      	add	r3, r2
 80046c2:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 80046c4:	7bf9      	ldrb	r1, [r7, #15]
 80046c6:	78ba      	ldrb	r2, [r7, #2]
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	9300      	str	r3, [sp, #0]
 80046cc:	460b      	mov	r3, r1
 80046ce:	2100      	movs	r1, #0
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f001 fb19 	bl	8005d08 <u8x8_DrawTile>
}
 80046d6:	bf00      	nop
 80046d8:	3710      	adds	r7, #16
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}

080046de <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 80046de:	b580      	push	{r7, lr}
 80046e0:	b084      	sub	sp, #16
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 80046e6:	2300      	movs	r3, #0
 80046e8:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80046f0:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80046f8:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	7c5b      	ldrb	r3, [r3, #17]
 8004700:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8004702:	7bba      	ldrb	r2, [r7, #14]
 8004704:	7bfb      	ldrb	r3, [r7, #15]
 8004706:	4619      	mov	r1, r3
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f7ff ffbd 	bl	8004688 <u8g2_send_tile_row>
    src_row++;
 800470e:	7bfb      	ldrb	r3, [r7, #15]
 8004710:	3301      	adds	r3, #1
 8004712:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8004714:	7bbb      	ldrb	r3, [r7, #14]
 8004716:	3301      	adds	r3, #1
 8004718:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 800471a:	7bfa      	ldrb	r2, [r7, #15]
 800471c:	7b7b      	ldrb	r3, [r7, #13]
 800471e:	429a      	cmp	r2, r3
 8004720:	d203      	bcs.n	800472a <u8g2_send_buffer+0x4c>
 8004722:	7bba      	ldrb	r2, [r7, #14]
 8004724:	7b3b      	ldrb	r3, [r7, #12]
 8004726:	429a      	cmp	r2, r3
 8004728:	d3eb      	bcc.n	8004702 <u8g2_send_buffer+0x24>
}
 800472a:	bf00      	nop
 800472c:	3710      	adds	r7, #16
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}

08004732 <u8g2_SetBufferCurrTileRow>:
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
}

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 8004732:	b580      	push	{r7, lr}
 8004734:	b082      	sub	sp, #8
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]
 800473a:	460b      	mov	r3, r1
 800473c:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	78fa      	ldrb	r2, [r7, #3]
 8004742:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  u8g2->cb->update_dimension(u8g2);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	4798      	blx	r3
}
 800475a:	bf00      	nop
 800475c:	3708      	adds	r7, #8
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}

08004762 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 8004762:	b580      	push	{r7, lr}
 8004764:	b082      	sub	sp, #8
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8004770:	2b00      	cmp	r3, #0
 8004772:	d002      	beq.n	800477a <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f7ff ff69 	bl	800464c <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 800477a:	2100      	movs	r1, #0
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f7ff ffd8 	bl	8004732 <u8g2_SetBufferCurrTileRow>
}
 8004782:	bf00      	nop
 8004784:	3708      	adds	r7, #8
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}

0800478a <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 800478a:	b580      	push	{r7, lr}
 800478c:	b084      	sub	sp, #16
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f7ff ffa3 	bl	80046de <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800479e:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 80047a6:	7bfb      	ldrb	r3, [r7, #15]
 80047a8:	4413      	add	r3, r2
 80047aa:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	7c5b      	ldrb	r3, [r3, #17]
 80047b2:	7bfa      	ldrb	r2, [r7, #15]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d304      	bcc.n	80047c2 <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f001 faf6 	bl	8005daa <u8x8_RefreshDisplay>
    return 0;
 80047be:	2300      	movs	r3, #0
 80047c0:	e00d      	b.n	80047de <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d002      	beq.n	80047d2 <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f7ff ff3d 	bl	800464c <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 80047d2:	7bfb      	ldrb	r3, [r7, #15]
 80047d4:	4619      	mov	r1, r3
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f7ff ffab 	bl	8004732 <u8g2_SetBufferCurrTileRow>
  return 1;
 80047dc:	2301      	movs	r3, #1
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3710      	adds	r7, #16
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
	...

080047e8 <u8g2_m_16_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2208      	movs	r2, #8
 80047f4:	701a      	strb	r2, [r3, #0]
  return buf;
 80047f6:	4b03      	ldr	r3, [pc, #12]	; (8004804 <u8g2_m_16_8_f+0x1c>)
  #endif
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	370c      	adds	r7, #12
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bc80      	pop	{r7}
 8004800:	4770      	bx	lr
 8004802:	bf00      	nop
 8004804:	20000d5c 	.word	0x20000d5c

08004808 <u8g2_Setup_ssd1306_128x64_noname_f>:
  buf = u8g2_m_16_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 f */
void u8g2_Setup_ssd1306_128x64_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b088      	sub	sp, #32
 800480c:	af02      	add	r7, sp, #8
 800480e:	60f8      	str	r0, [r7, #12]
 8004810:	60b9      	str	r1, [r7, #8]
 8004812:	607a      	str	r2, [r7, #4]
 8004814:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	9300      	str	r3, [sp, #0]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a0b      	ldr	r2, [pc, #44]	; (800484c <u8g2_Setup_ssd1306_128x64_noname_f+0x44>)
 800481e:	490c      	ldr	r1, [pc, #48]	; (8004850 <u8g2_Setup_ssd1306_128x64_noname_f+0x48>)
 8004820:	68f8      	ldr	r0, [r7, #12]
 8004822:	f001 fb21 	bl	8005e68 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 8004826:	f107 0313 	add.w	r3, r7, #19
 800482a:	4618      	mov	r0, r3
 800482c:	f7ff ffdc 	bl	80047e8 <u8g2_m_16_8_f>
 8004830:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8004832:	7cfa      	ldrb	r2, [r7, #19]
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	9300      	str	r3, [sp, #0]
 8004838:	4b06      	ldr	r3, [pc, #24]	; (8004854 <u8g2_Setup_ssd1306_128x64_noname_f+0x4c>)
 800483a:	6979      	ldr	r1, [r7, #20]
 800483c:	68f8      	ldr	r0, [r7, #12]
 800483e:	f000 feac 	bl	800559a <u8g2_SetupBuffer>
}
 8004842:	bf00      	nop
 8004844:	3718      	adds	r7, #24
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	08005a2d 	.word	0x08005a2d
 8004850:	08005c05 	.word	0x08005c05
 8004854:	0800541f 	.word	0x0800541f

08004858 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 8004858:	b480      	push	{r7}
 800485a:	b083      	sub	sp, #12
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	460b      	mov	r3, r1
 8004862:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8004864:	78fb      	ldrb	r3, [r7, #3]
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	4413      	add	r3, r2
 800486a:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	781b      	ldrb	r3, [r3, #0]
}
 8004870:	4618      	mov	r0, r3
 8004872:	370c      	adds	r7, #12
 8004874:	46bd      	mov	sp, r7
 8004876:	bc80      	pop	{r7}
 8004878:	4770      	bx	lr

0800487a <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 800487a:	b480      	push	{r7}
 800487c:	b085      	sub	sp, #20
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
 8004882:	460b      	mov	r3, r1
 8004884:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8004886:	78fb      	ldrb	r3, [r7, #3]
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	4413      	add	r3, r2
 800488c:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	81fb      	strh	r3, [r7, #14]
    font++;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	3301      	adds	r3, #1
 8004898:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 800489a:	89fb      	ldrh	r3, [r7, #14]
 800489c:	021b      	lsls	r3, r3, #8
 800489e:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	b29a      	uxth	r2, r3
 80048a6:	89fb      	ldrh	r3, [r7, #14]
 80048a8:	4413      	add	r3, r2
 80048aa:	81fb      	strh	r3, [r7, #14]
    return pos;
 80048ac:	89fb      	ldrh	r3, [r7, #14]
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3714      	adds	r7, #20
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bc80      	pop	{r7}
 80048b6:	4770      	bx	lr

080048b8 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b082      	sub	sp, #8
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 80048c2:	2100      	movs	r1, #0
 80048c4:	6838      	ldr	r0, [r7, #0]
 80048c6:	f7ff ffc7 	bl	8004858 <u8g2_font_get_byte>
 80048ca:	4603      	mov	r3, r0
 80048cc:	461a      	mov	r2, r3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 80048d2:	2101      	movs	r1, #1
 80048d4:	6838      	ldr	r0, [r7, #0]
 80048d6:	f7ff ffbf 	bl	8004858 <u8g2_font_get_byte>
 80048da:	4603      	mov	r3, r0
 80048dc:	461a      	mov	r2, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 80048e2:	2102      	movs	r1, #2
 80048e4:	6838      	ldr	r0, [r7, #0]
 80048e6:	f7ff ffb7 	bl	8004858 <u8g2_font_get_byte>
 80048ea:	4603      	mov	r3, r0
 80048ec:	461a      	mov	r2, r3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 80048f2:	2103      	movs	r1, #3
 80048f4:	6838      	ldr	r0, [r7, #0]
 80048f6:	f7ff ffaf 	bl	8004858 <u8g2_font_get_byte>
 80048fa:	4603      	mov	r3, r0
 80048fc:	461a      	mov	r2, r3
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8004902:	2104      	movs	r1, #4
 8004904:	6838      	ldr	r0, [r7, #0]
 8004906:	f7ff ffa7 	bl	8004858 <u8g2_font_get_byte>
 800490a:	4603      	mov	r3, r0
 800490c:	461a      	mov	r2, r3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 8004912:	2105      	movs	r1, #5
 8004914:	6838      	ldr	r0, [r7, #0]
 8004916:	f7ff ff9f 	bl	8004858 <u8g2_font_get_byte>
 800491a:	4603      	mov	r3, r0
 800491c:	461a      	mov	r2, r3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8004922:	2106      	movs	r1, #6
 8004924:	6838      	ldr	r0, [r7, #0]
 8004926:	f7ff ff97 	bl	8004858 <u8g2_font_get_byte>
 800492a:	4603      	mov	r3, r0
 800492c:	461a      	mov	r2, r3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8004932:	2107      	movs	r1, #7
 8004934:	6838      	ldr	r0, [r7, #0]
 8004936:	f7ff ff8f 	bl	8004858 <u8g2_font_get_byte>
 800493a:	4603      	mov	r3, r0
 800493c:	461a      	mov	r2, r3
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 8004942:	2108      	movs	r1, #8
 8004944:	6838      	ldr	r0, [r7, #0]
 8004946:	f7ff ff87 	bl	8004858 <u8g2_font_get_byte>
 800494a:	4603      	mov	r3, r0
 800494c:	461a      	mov	r2, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 8004952:	2109      	movs	r1, #9
 8004954:	6838      	ldr	r0, [r7, #0]
 8004956:	f7ff ff7f 	bl	8004858 <u8g2_font_get_byte>
 800495a:	4603      	mov	r3, r0
 800495c:	b25a      	sxtb	r2, r3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8004962:	210a      	movs	r1, #10
 8004964:	6838      	ldr	r0, [r7, #0]
 8004966:	f7ff ff77 	bl	8004858 <u8g2_font_get_byte>
 800496a:	4603      	mov	r3, r0
 800496c:	b25a      	sxtb	r2, r3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 8004972:	210b      	movs	r1, #11
 8004974:	6838      	ldr	r0, [r7, #0]
 8004976:	f7ff ff6f 	bl	8004858 <u8g2_font_get_byte>
 800497a:	4603      	mov	r3, r0
 800497c:	b25a      	sxtb	r2, r3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 8004982:	210c      	movs	r1, #12
 8004984:	6838      	ldr	r0, [r7, #0]
 8004986:	f7ff ff67 	bl	8004858 <u8g2_font_get_byte>
 800498a:	4603      	mov	r3, r0
 800498c:	b25a      	sxtb	r2, r3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8004992:	210d      	movs	r1, #13
 8004994:	6838      	ldr	r0, [r7, #0]
 8004996:	f7ff ff5f 	bl	8004858 <u8g2_font_get_byte>
 800499a:	4603      	mov	r3, r0
 800499c:	b25a      	sxtb	r2, r3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 80049a2:	210e      	movs	r1, #14
 80049a4:	6838      	ldr	r0, [r7, #0]
 80049a6:	f7ff ff57 	bl	8004858 <u8g2_font_get_byte>
 80049aa:	4603      	mov	r3, r0
 80049ac:	b25a      	sxtb	r2, r3
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 80049b2:	210f      	movs	r1, #15
 80049b4:	6838      	ldr	r0, [r7, #0]
 80049b6:	f7ff ff4f 	bl	8004858 <u8g2_font_get_byte>
 80049ba:	4603      	mov	r3, r0
 80049bc:	b25a      	sxtb	r2, r3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 80049c2:	2110      	movs	r1, #16
 80049c4:	6838      	ldr	r0, [r7, #0]
 80049c6:	f7ff ff47 	bl	8004858 <u8g2_font_get_byte>
 80049ca:	4603      	mov	r3, r0
 80049cc:	b25a      	sxtb	r2, r3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 80049d2:	2111      	movs	r1, #17
 80049d4:	6838      	ldr	r0, [r7, #0]
 80049d6:	f7ff ff50 	bl	800487a <u8g2_font_get_word>
 80049da:	4603      	mov	r3, r0
 80049dc:	461a      	mov	r2, r3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 80049e2:	2113      	movs	r1, #19
 80049e4:	6838      	ldr	r0, [r7, #0]
 80049e6:	f7ff ff48 	bl	800487a <u8g2_font_get_word>
 80049ea:	4603      	mov	r3, r0
 80049ec:	461a      	mov	r2, r3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 80049f2:	2115      	movs	r1, #21
 80049f4:	6838      	ldr	r0, [r7, #0]
 80049f6:	f7ff ff40 	bl	800487a <u8g2_font_get_word>
 80049fa:	4603      	mov	r3, r0
 80049fc:	461a      	mov	r2, r3
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	82da      	strh	r2, [r3, #22]
#endif
}
 8004a02:	bf00      	nop
 8004a04:	3708      	adds	r7, #8
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}

08004a0a <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 8004a0a:	b480      	push	{r7}
 8004a0c:	b085      	sub	sp, #20
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
 8004a12:	460b      	mov	r3, r1
 8004a14:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	7b1b      	ldrb	r3, [r3, #12]
 8004a1a:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	781b      	ldrb	r3, [r3, #0]
 8004a22:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 8004a24:	7bfa      	ldrb	r2, [r7, #15]
 8004a26:	7b7b      	ldrb	r3, [r7, #13]
 8004a28:	fa42 f303 	asr.w	r3, r2, r3
 8004a2c:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 8004a2e:	7b7b      	ldrb	r3, [r7, #13]
 8004a30:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 8004a32:	7bba      	ldrb	r2, [r7, #14]
 8004a34:	78fb      	ldrb	r3, [r7, #3]
 8004a36:	4413      	add	r3, r2
 8004a38:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 8004a3a:	7bbb      	ldrb	r3, [r7, #14]
 8004a3c:	2b07      	cmp	r3, #7
 8004a3e:	d91a      	bls.n	8004a76 <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8004a40:	2308      	movs	r3, #8
 8004a42:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 8004a44:	7b3a      	ldrb	r2, [r7, #12]
 8004a46:	7b7b      	ldrb	r3, [r7, #13]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	1c5a      	adds	r2, r3, #1
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	7b3b      	ldrb	r3, [r7, #12]
 8004a60:	fa02 f303 	lsl.w	r3, r2, r3
 8004a64:	b25a      	sxtb	r2, r3
 8004a66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	b25b      	sxtb	r3, r3
 8004a6e:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8004a70:	7bbb      	ldrb	r3, [r7, #14]
 8004a72:	3b08      	subs	r3, #8
 8004a74:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 8004a76:	78fb      	ldrb	r3, [r7, #3]
 8004a78:	f04f 32ff 	mov.w	r2, #4294967295
 8004a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	43db      	mvns	r3, r3
 8004a84:	b2da      	uxtb	r2, r3
 8004a86:	7bfb      	ldrb	r3, [r7, #15]
 8004a88:	4013      	ands	r3, r2
 8004a8a:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	7bba      	ldrb	r2, [r7, #14]
 8004a90:	731a      	strb	r2, [r3, #12]
  return val;
 8004a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3714      	adds	r7, #20
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bc80      	pop	{r7}
 8004a9c:	4770      	bx	lr

08004a9e <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 8004a9e:	b580      	push	{r7, lr}
 8004aa0:	b084      	sub	sp, #16
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
 8004aa6:	460b      	mov	r3, r1
 8004aa8:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8004aaa:	78fb      	ldrb	r3, [r7, #3]
 8004aac:	4619      	mov	r1, r3
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f7ff ffab 	bl	8004a0a <u8g2_font_decode_get_unsigned_bits>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	73fb      	strb	r3, [r7, #15]
  d = 1;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	73bb      	strb	r3, [r7, #14]
  cnt--;
 8004abc:	78fb      	ldrb	r3, [r7, #3]
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 8004ac2:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8004ac6:	78fb      	ldrb	r3, [r7, #3]
 8004ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8004acc:	73bb      	strb	r3, [r7, #14]
  v -= d;
 8004ace:	7bfa      	ldrb	r2, [r7, #15]
 8004ad0:	7bbb      	ldrb	r3, [r7, #14]
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	73fb      	strb	r3, [r7, #15]
  return v;
 8004ad8:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3710      	adds	r7, #16
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}

08004ae4 <u8g2_font_2x_decode_len>:
  decode->y = ly;  
}


void u8g2_font_2x_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b088      	sub	sp, #32
 8004ae8:	af02      	add	r7, sp, #8
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	460b      	mov	r3, r1
 8004aee:	70fb      	strb	r3, [r7, #3]
 8004af0:	4613      	mov	r3, r2
 8004af2:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	3360      	adds	r3, #96	; 0x60
 8004af8:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 8004afa:	78fb      	ldrb	r3, [r7, #3]
 8004afc:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8004b04:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8004b0c:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8004b14:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 8004b16:	7bfa      	ldrb	r2, [r7, #15]
 8004b18:	7d7b      	ldrb	r3, [r7, #21]
 8004b1a:	1ad3      	subs	r3, r2, r3
 8004b1c:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8004b1e:	7bfb      	ldrb	r3, [r7, #15]
 8004b20:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 8004b22:	7dfa      	ldrb	r2, [r7, #23]
 8004b24:	7bfb      	ldrb	r3, [r7, #15]
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d201      	bcs.n	8004b2e <u8g2_font_2x_decode_len+0x4a>
      current = cnt;
 8004b2a:	7dfb      	ldrb	r3, [r7, #23]
 8004b2c:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	889b      	ldrh	r3, [r3, #4]
 8004b32:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	88db      	ldrh	r3, [r3, #6]
 8004b38:	817b      	strh	r3, [r7, #10]

    x += lx*2;
 8004b3a:	7d7b      	ldrb	r3, [r7, #21]
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	005b      	lsls	r3, r3, #1
 8004b40:	b29a      	uxth	r2, r3
 8004b42:	89bb      	ldrh	r3, [r7, #12]
 8004b44:	4413      	add	r3, r2
 8004b46:	81bb      	strh	r3, [r7, #12]
    y += ly*2;
 8004b48:	7d3b      	ldrb	r3, [r7, #20]
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	005b      	lsls	r3, r3, #1
 8004b4e:	b29a      	uxth	r2, r3
 8004b50:	897b      	ldrh	r3, [r7, #10]
 8004b52:	4413      	add	r3, r2
 8004b54:	817b      	strh	r3, [r7, #10]
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 8004b56:	78bb      	ldrb	r3, [r7, #2]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d01d      	beq.n	8004b98 <u8g2_font_2x_decode_len+0xb4>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	7b9a      	ldrb	r2, [r3, #14]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 8004b66:	7dbb      	ldrb	r3, [r7, #22]
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	005b      	lsls	r3, r3, #1
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	897a      	ldrh	r2, [r7, #10]
 8004b70:	89b9      	ldrh	r1, [r7, #12]
 8004b72:	2000      	movs	r0, #0
 8004b74:	9000      	str	r0, [sp, #0]
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 fb68 	bl	800524c <u8g2_DrawHVLine>
	x, 
	y, 
	current*2, 
	0
      );
      u8g2_DrawHVLine(u8g2, 
 8004b7c:	897b      	ldrh	r3, [r7, #10]
 8004b7e:	3301      	adds	r3, #1
 8004b80:	b29a      	uxth	r2, r3
 8004b82:	7dbb      	ldrb	r3, [r7, #22]
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	005b      	lsls	r3, r3, #1
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	89b9      	ldrh	r1, [r7, #12]
 8004b8c:	2000      	movs	r0, #0
 8004b8e:	9000      	str	r0, [sp, #0]
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f000 fb5b 	bl	800524c <u8g2_DrawHVLine>
 8004b96:	e020      	b.n	8004bda <u8g2_font_2x_decode_len+0xf6>
	y+1, 
	current*2, 
	0
      );
    }
    else if ( decode->is_transparent == 0 )    
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	7b5b      	ldrb	r3, [r3, #13]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d11c      	bne.n	8004bda <u8g2_font_2x_decode_len+0xf6>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	7bda      	ldrb	r2, [r3, #15]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 8004baa:	7dbb      	ldrb	r3, [r7, #22]
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	005b      	lsls	r3, r3, #1
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	897a      	ldrh	r2, [r7, #10]
 8004bb4:	89b9      	ldrh	r1, [r7, #12]
 8004bb6:	2000      	movs	r0, #0
 8004bb8:	9000      	str	r0, [sp, #0]
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 fb46 	bl	800524c <u8g2_DrawHVLine>
	x, 
	y, 
	current*2, 
	0
      );   
      u8g2_DrawHVLine(u8g2, 
 8004bc0:	897b      	ldrh	r3, [r7, #10]
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	b29a      	uxth	r2, r3
 8004bc6:	7dbb      	ldrb	r3, [r7, #22]
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	005b      	lsls	r3, r3, #1
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	89b9      	ldrh	r1, [r7, #12]
 8004bd0:	2000      	movs	r0, #0
 8004bd2:	9000      	str	r0, [sp, #0]
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f000 fb39 	bl	800524c <u8g2_DrawHVLine>
	0
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8004bda:	7dfa      	ldrb	r2, [r7, #23]
 8004bdc:	7bfb      	ldrb	r3, [r7, #15]
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d309      	bcc.n	8004bf6 <u8g2_font_2x_decode_len+0x112>
      break;
    cnt -= rem;
 8004be2:	7dfa      	ldrb	r2, [r7, #23]
 8004be4:	7bfb      	ldrb	r3, [r7, #15]
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8004bea:	2300      	movs	r3, #0
 8004bec:	757b      	strb	r3, [r7, #21]
    ly++;
 8004bee:	7d3b      	ldrb	r3, [r7, #20]
 8004bf0:	3301      	adds	r3, #1
 8004bf2:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8004bf4:	e78b      	b.n	8004b0e <u8g2_font_2x_decode_len+0x2a>
      break;
 8004bf6:	bf00      	nop
  }
  lx += cnt;
 8004bf8:	7d7a      	ldrb	r2, [r7, #21]
 8004bfa:	7dfb      	ldrb	r3, [r7, #23]
 8004bfc:	4413      	add	r3, r2
 8004bfe:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 8004c00:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	721a      	strb	r2, [r3, #8]
  decode->y = ly;
 8004c08:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	725a      	strb	r2, [r3, #9]
  
}
 8004c10:	bf00      	nop
 8004c12:	3718      	adds	r7, #24
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <u8g2_font_setup_decode>:


static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	3360      	adds	r3, #96	; 0x60
 8004c26:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	683a      	ldr	r2, [r7, #0]
 8004c2c:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2200      	movs	r2, #0
 8004c32:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8004c3a:	4619      	mov	r1, r3
 8004c3c:	68f8      	ldr	r0, [r7, #12]
 8004c3e:	f7ff fee4 	bl	8004a0a <u8g2_font_decode_get_unsigned_bits>
 8004c42:	4603      	mov	r3, r0
 8004c44:	b25a      	sxtb	r2, r3
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8004c50:	4619      	mov	r1, r3
 8004c52:	68f8      	ldr	r0, [r7, #12]
 8004c54:	f7ff fed9 	bl	8004a0a <u8g2_font_decode_get_unsigned_bits>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	b25a      	sxtb	r2, r3
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	7b9b      	ldrb	r3, [r3, #14]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	bf0c      	ite	eq
 8004c72:	2301      	moveq	r3, #1
 8004c74:	2300      	movne	r3, #0
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	461a      	mov	r2, r3
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	73da      	strb	r2, [r3, #15]
}
 8004c7e:	bf00      	nop
 8004c80:	3710      	adds	r7, #16
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}

08004c86 <u8g2_font_2x_decode_glyph>:
  return d;
}


int8_t u8g2_font_2x_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8004c86:	b580      	push	{r7, lr}
 8004c88:	b08a      	sub	sp, #40	; 0x28
 8004c8a:	af02      	add	r7, sp, #8
 8004c8c:	6078      	str	r0, [r7, #4]
 8004c8e:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	3360      	adds	r3, #96	; 0x60
 8004c94:	61fb      	str	r3, [r7, #28]
    
  u8g2_font_setup_decode(u8g2, glyph_data);     /* set values in u8g2->font_decode data structure */
 8004c96:	6839      	ldr	r1, [r7, #0]
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f7ff ffbd 	bl	8004c18 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8004ca4:	76fb      	strb	r3, [r7, #27]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8004cac:	4619      	mov	r1, r3
 8004cae:	69f8      	ldr	r0, [r7, #28]
 8004cb0:	f7ff fef5 	bl	8004a9e <u8g2_font_decode_get_signed_bits>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	76bb      	strb	r3, [r7, #26]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8004cbe:	4619      	mov	r1, r3
 8004cc0:	69f8      	ldr	r0, [r7, #28]
 8004cc2:	f7ff feec 	bl	8004a9e <u8g2_font_decode_get_signed_bits>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	767b      	strb	r3, [r7, #25]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004cd0:	4619      	mov	r1, r3
 8004cd2:	69f8      	ldr	r0, [r7, #28]
 8004cd4:	f7ff fee3 	bl	8004a9e <u8g2_font_decode_get_signed_bits>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	763b      	strb	r3, [r7, #24]
  
  if ( decode->glyph_width > 0 )
 8004cdc:	69fb      	ldr	r3, [r7, #28]
 8004cde:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	dd7b      	ble.n	8004dde <u8g2_font_2x_decode_glyph+0x158>
  {
    decode->target_x += x;
 8004ce6:	69fb      	ldr	r3, [r7, #28]
 8004ce8:	889a      	ldrh	r2, [r3, #4]
 8004cea:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	4413      	add	r3, r2
 8004cf2:	b29a      	uxth	r2, r3
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	809a      	strh	r2, [r3, #4]
    decode->target_y -= 2*h+y;
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	88da      	ldrh	r2, [r3, #6]
 8004cfc:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	005b      	lsls	r3, r3, #1
 8004d04:	b299      	uxth	r1, r3
 8004d06:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	440b      	add	r3, r1
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	b29a      	uxth	r2, r3
 8004d14:	69fb      	ldr	r3, [r7, #28]
 8004d16:	80da      	strh	r2, [r3, #6]

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 8004d18:	69fb      	ldr	r3, [r7, #28]
 8004d1a:	889b      	ldrh	r3, [r3, #4]
 8004d1c:	82fb      	strh	r3, [r7, #22]
      y0 = decode->target_y;
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	88db      	ldrh	r3, [r3, #6]
 8004d22:	82bb      	strh	r3, [r7, #20]
      x1 = x0;
 8004d24:	8afb      	ldrh	r3, [r7, #22]
 8004d26:	827b      	strh	r3, [r7, #18]
      y1 = y0;
 8004d28:	8abb      	ldrh	r3, [r7, #20]
 8004d2a:	823b      	strh	r3, [r7, #16]
      
      x1 += 2*decode->glyph_width;
 8004d2c:	69fb      	ldr	r3, [r7, #28]
 8004d2e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	005b      	lsls	r3, r3, #1
 8004d36:	b29a      	uxth	r2, r3
 8004d38:	8a7b      	ldrh	r3, [r7, #18]
 8004d3a:	4413      	add	r3, r2
 8004d3c:	827b      	strh	r3, [r7, #18]
      y1 += 2*h;      
 8004d3e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	005b      	lsls	r3, r3, #1
 8004d46:	b29a      	uxth	r2, r3
 8004d48:	8a3b      	ldrh	r3, [r7, #16]
 8004d4a:	4413      	add	r3, r2
 8004d4c:	823b      	strh	r3, [r7, #16]
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8004d4e:	8a78      	ldrh	r0, [r7, #18]
 8004d50:	8aba      	ldrh	r2, [r7, #20]
 8004d52:	8af9      	ldrh	r1, [r7, #22]
 8004d54:	8a3b      	ldrh	r3, [r7, #16]
 8004d56:	9300      	str	r3, [sp, #0]
 8004d58:	4603      	mov	r3, r0
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 fb34 	bl	80053c8 <u8g2_IsIntersection>
 8004d60:	4603      	mov	r3, r0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d102      	bne.n	8004d6c <u8g2_font_2x_decode_glyph+0xe6>
	return d;
 8004d66:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8004d6a:	e03c      	b.n	8004de6 <u8g2_font_2x_decode_glyph+0x160>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8004d6c:	69fb      	ldr	r3, [r7, #28]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 8004d72:	69fb      	ldr	r3, [r7, #28]
 8004d74:	2200      	movs	r2, #0
 8004d76:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8004d7e:	4619      	mov	r1, r3
 8004d80:	69f8      	ldr	r0, [r7, #28]
 8004d82:	f7ff fe42 	bl	8004a0a <u8g2_font_decode_get_unsigned_bits>
 8004d86:	4603      	mov	r3, r0
 8004d88:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8004d90:	4619      	mov	r1, r3
 8004d92:	69f8      	ldr	r0, [r7, #28]
 8004d94:	f7ff fe39 	bl	8004a0a <u8g2_font_decode_get_unsigned_bits>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_2x_decode_len(u8g2, a, 0);
 8004d9c:	7bfb      	ldrb	r3, [r7, #15]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	4619      	mov	r1, r3
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f7ff fe9e 	bl	8004ae4 <u8g2_font_2x_decode_len>
	u8g2_font_2x_decode_len(u8g2, b, 1);
 8004da8:	7bbb      	ldrb	r3, [r7, #14]
 8004daa:	2201      	movs	r2, #1
 8004dac:	4619      	mov	r1, r3
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f7ff fe98 	bl	8004ae4 <u8g2_font_2x_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8004db4:	2101      	movs	r1, #1
 8004db6:	69f8      	ldr	r0, [r7, #28]
 8004db8:	f7ff fe27 	bl	8004a0a <u8g2_font_decode_get_unsigned_bits>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d1ec      	bne.n	8004d9c <u8g2_font_2x_decode_glyph+0x116>

      if ( decode->y >= h )
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8004dc8:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	dd00      	ble.n	8004dd2 <u8g2_font_2x_decode_glyph+0x14c>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8004dd0:	e7d2      	b.n	8004d78 <u8g2_font_2x_decode_glyph+0xf2>
	break;
 8004dd2:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 8004dd4:	69fb      	ldr	r3, [r7, #28]
 8004dd6:	7b9a      	ldrb	r2, [r3, #14]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  }
  return d*2;
 8004dde:	7e3b      	ldrb	r3, [r7, #24]
 8004de0:	005b      	lsls	r3, r3, #1
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	b25b      	sxtb	r3, r3
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3720      	adds	r7, #32
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}

08004dee <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8004dee:	b580      	push	{r7, lr}
 8004df0:	b086      	sub	sp, #24
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	6078      	str	r0, [r7, #4]
 8004df6:	460b      	mov	r3, r1
 8004df8:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dfe:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	3317      	adds	r3, #23
 8004e04:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 8004e06:	887b      	ldrh	r3, [r7, #2]
 8004e08:	2bff      	cmp	r3, #255	; 0xff
 8004e0a:	d82a      	bhi.n	8004e62 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 8004e0c:	887b      	ldrh	r3, [r7, #2]
 8004e0e:	2b60      	cmp	r3, #96	; 0x60
 8004e10:	d907      	bls.n	8004e22 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8004e18:	461a      	mov	r2, r3
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	617b      	str	r3, [r7, #20]
 8004e20:	e009      	b.n	8004e36 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8004e22:	887b      	ldrh	r3, [r7, #2]
 8004e24:	2b40      	cmp	r3, #64	; 0x40
 8004e26:	d906      	bls.n	8004e36 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8004e2e:	461a      	mov	r2, r3
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	4413      	add	r3, r2
 8004e34:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	3301      	adds	r3, #1
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d04e      	beq.n	8004ede <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	887a      	ldrh	r2, [r7, #2]
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d102      	bne.n	8004e52 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	3302      	adds	r3, #2
 8004e50:	e049      	b.n	8004ee6 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	3301      	adds	r3, #1
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	461a      	mov	r2, r3
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8004e60:	e7e9      	b.n	8004e36 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8004e68:	461a      	mov	r2, r3
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	4413      	add	r3, r2
 8004e6e:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8004e74:	2100      	movs	r1, #0
 8004e76:	6938      	ldr	r0, [r7, #16]
 8004e78:	f7ff fcff 	bl	800487a <u8g2_font_get_word>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	461a      	mov	r2, r3
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	4413      	add	r3, r2
 8004e84:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8004e86:	2102      	movs	r1, #2
 8004e88:	6938      	ldr	r0, [r7, #16]
 8004e8a:	f7ff fcf6 	bl	800487a <u8g2_font_get_word>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	3304      	adds	r3, #4
 8004e96:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 8004e98:	89fa      	ldrh	r2, [r7, #14]
 8004e9a:	887b      	ldrh	r3, [r7, #2]
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d3e9      	bcc.n	8004e74 <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 8004ea6:	89fb      	ldrh	r3, [r7, #14]
 8004ea8:	021b      	lsls	r3, r3, #8
 8004eaa:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	3301      	adds	r3, #1
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	b29a      	uxth	r2, r3
 8004eb4:	89fb      	ldrh	r3, [r7, #14]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 8004eba:	89fb      	ldrh	r3, [r7, #14]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d010      	beq.n	8004ee2 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 8004ec0:	89fa      	ldrh	r2, [r7, #14]
 8004ec2:	887b      	ldrh	r3, [r7, #2]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d102      	bne.n	8004ece <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	3303      	adds	r3, #3
 8004ecc:	e00b      	b.n	8004ee6 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	3302      	adds	r3, #2
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	4413      	add	r3, r2
 8004eda:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 8004edc:	e7e0      	b.n	8004ea0 <u8g2_font_get_glyph_data+0xb2>
	break;
 8004ede:	bf00      	nop
 8004ee0:	e000      	b.n	8004ee4 <u8g2_font_get_glyph_data+0xf6>
	break;
 8004ee2:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3718      	adds	r7, #24
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}

08004eee <u8g2_font_2x_draw_glyph>:
  }
  return dx;
}

static u8g2_uint_t u8g2_font_2x_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8004eee:	b580      	push	{r7, lr}
 8004ef0:	b086      	sub	sp, #24
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	60f8      	str	r0, [r7, #12]
 8004ef6:	4608      	mov	r0, r1
 8004ef8:	4611      	mov	r1, r2
 8004efa:	461a      	mov	r2, r3
 8004efc:	4603      	mov	r3, r0
 8004efe:	817b      	strh	r3, [r7, #10]
 8004f00:	460b      	mov	r3, r1
 8004f02:	813b      	strh	r3, [r7, #8]
 8004f04:	4613      	mov	r3, r2
 8004f06:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t dx = 0;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	82fb      	strh	r3, [r7, #22]
  u8g2->font_decode.target_x = x;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	897a      	ldrh	r2, [r7, #10]
 8004f10:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  u8g2->font_decode.target_y = y;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	893a      	ldrh	r2, [r7, #8]
 8004f18:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8004f1c:	88fb      	ldrh	r3, [r7, #6]
 8004f1e:	4619      	mov	r1, r3
 8004f20:	68f8      	ldr	r0, [r7, #12]
 8004f22:	f7ff ff64 	bl	8004dee <u8g2_font_get_glyph_data>
 8004f26:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d005      	beq.n	8004f3a <u8g2_font_2x_draw_glyph+0x4c>
  {
    dx = u8g2_font_2x_decode_glyph(u8g2, glyph_data);
 8004f2e:	6939      	ldr	r1, [r7, #16]
 8004f30:	68f8      	ldr	r0, [r7, #12]
 8004f32:	f7ff fea8 	bl	8004c86 <u8g2_font_2x_decode_glyph>
 8004f36:	4603      	mov	r3, r0
 8004f38:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 8004f3a:	8afb      	ldrh	r3, [r7, #22]
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3718      	adds	r7, #24
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <u8g2_DrawGlyphX2>:
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
}

u8g2_uint_t u8g2_DrawGlyphX2(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	60f8      	str	r0, [r7, #12]
 8004f4c:	4608      	mov	r0, r1
 8004f4e:	4611      	mov	r1, r2
 8004f50:	461a      	mov	r2, r3
 8004f52:	4603      	mov	r3, r0
 8004f54:	817b      	strh	r3, [r7, #10]
 8004f56:	460b      	mov	r3, r1
 8004f58:	813b      	strh	r3, [r7, #8]
 8004f5a:	4613      	mov	r3, r2
 8004f5c:	80fb      	strh	r3, [r7, #6]
  y += 2*u8g2->font_calc_vref(u8g2);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f62:	68f8      	ldr	r0, [r7, #12]
 8004f64:	4798      	blx	r3
 8004f66:	4603      	mov	r3, r0
 8004f68:	005b      	lsls	r3, r3, #1
 8004f6a:	b29a      	uxth	r2, r3
 8004f6c:	893b      	ldrh	r3, [r7, #8]
 8004f6e:	4413      	add	r3, r2
 8004f70:	813b      	strh	r3, [r7, #8]
  return u8g2_font_2x_draw_glyph(u8g2, x, y, encoding);
 8004f72:	88fb      	ldrh	r3, [r7, #6]
 8004f74:	893a      	ldrh	r2, [r7, #8]
 8004f76:	8979      	ldrh	r1, [r7, #10]
 8004f78:	68f8      	ldr	r0, [r7, #12]
 8004f7a:	f7ff ffb8 	bl	8004eee <u8g2_font_2x_draw_glyph>
 8004f7e:	4603      	mov	r3, r0
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3710      	adds	r7, #16
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <u8g2_draw_string_2x>:
  return sum;
}

static u8g2_uint_t u8g2_draw_string_2x(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string_2x(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b086      	sub	sp, #24
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	60f8      	str	r0, [r7, #12]
 8004f90:	607b      	str	r3, [r7, #4]
 8004f92:	460b      	mov	r3, r1
 8004f94:	817b      	strh	r3, [r7, #10]
 8004f96:	4613      	mov	r3, r2
 8004f98:	813b      	strh	r3, [r7, #8]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8004f9a:	68f8      	ldr	r0, [r7, #12]
 8004f9c:	f000 fc43 	bl	8005826 <u8x8_utf8_init>
  sum = 0;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	82fb      	strh	r3, [r7, #22]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	7812      	ldrb	r2, [r2, #0]
 8004fac:	4611      	mov	r1, r2
 8004fae:	68f8      	ldr	r0, [r7, #12]
 8004fb0:	4798      	blx	r3
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 8004fb6:	8abb      	ldrh	r3, [r7, #20]
 8004fb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d018      	beq.n	8004ff2 <u8g2_draw_string_2x+0x6a>
      break;
    str++;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	3301      	adds	r3, #1
 8004fc4:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 8004fc6:	8abb      	ldrh	r3, [r7, #20]
 8004fc8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d0e9      	beq.n	8004fa4 <u8g2_draw_string_2x+0x1c>
    {
      delta = u8g2_DrawGlyphX2(u8g2, x, y, e);
 8004fd0:	8abb      	ldrh	r3, [r7, #20]
 8004fd2:	893a      	ldrh	r2, [r7, #8]
 8004fd4:	8979      	ldrh	r1, [r7, #10]
 8004fd6:	68f8      	ldr	r0, [r7, #12]
 8004fd8:	f7ff ffb4 	bl	8004f44 <u8g2_DrawGlyphX2>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	827b      	strh	r3, [r7, #18]
      x += delta;
 8004fe0:	897a      	ldrh	r2, [r7, #10]
 8004fe2:	8a7b      	ldrh	r3, [r7, #18]
 8004fe4:	4413      	add	r3, r2
 8004fe6:	817b      	strh	r3, [r7, #10]
      sum += delta;    
 8004fe8:	8afa      	ldrh	r2, [r7, #22]
 8004fea:	8a7b      	ldrh	r3, [r7, #18]
 8004fec:	4413      	add	r3, r2
 8004fee:	82fb      	strh	r3, [r7, #22]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8004ff0:	e7d8      	b.n	8004fa4 <u8g2_draw_string_2x+0x1c>
      break;
 8004ff2:	bf00      	nop
    }
  }
  return sum;
 8004ff4:	8afb      	ldrh	r3, [r7, #22]
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3718      	adds	r7, #24
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
	...

08005000 <u8g2_DrawStrX2>:
  u8g2->u8x8.next_cb = u8x8_ascii_next;
  return u8g2_draw_string(u8g2, x, y, str);
}

u8g2_uint_t u8g2_DrawStrX2(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b084      	sub	sp, #16
 8005004:	af00      	add	r7, sp, #0
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	607b      	str	r3, [r7, #4]
 800500a:	460b      	mov	r3, r1
 800500c:	817b      	strh	r3, [r7, #10]
 800500e:	4613      	mov	r3, r2
 8005010:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	4a06      	ldr	r2, [pc, #24]	; (8005030 <u8g2_DrawStrX2+0x30>)
 8005016:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string_2x(u8g2, x, y, str);
 8005018:	893a      	ldrh	r2, [r7, #8]
 800501a:	8979      	ldrh	r1, [r7, #10]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	68f8      	ldr	r0, [r7, #12]
 8005020:	f7ff ffb2 	bl	8004f88 <u8g2_draw_string_2x>
 8005024:	4603      	mov	r3, r0
}
 8005026:	4618      	mov	r0, r3
 8005028:	3710      	adds	r7, #16
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	08005841 	.word	0x08005841

08005034 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 8005034:	b480      	push	{r7}
 8005036:	b083      	sub	sp, #12
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005040:	2b00      	cmp	r3, #0
 8005042:	d05d      	beq.n	8005100 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f993 2081 	ldrsb.w	r2, [r3, #129]	; 0x81
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f993 2082 	ldrsb.w	r2, [r3, #130]	; 0x82
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8005062:	2b00      	cmp	r3, #0
 8005064:	d04d      	beq.n	8005102 <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800506c:	2b01      	cmp	r3, #1
 800506e:	d11c      	bne.n	80050aa <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f993 208e 	ldrsb.w	r2, [r3, #142]	; 0x8e
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f993 3083 	ldrsb.w	r3, [r3, #131]	; 0x83
 800507c:	429a      	cmp	r2, r3
 800507e:	da05      	bge.n	800508c <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f993 3084 	ldrsb.w	r3, [r3, #132]	; 0x84
 8005098:	429a      	cmp	r2, r3
 800509a:	dd32      	ble.n	8005102 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f993 2084 	ldrsb.w	r2, [r3, #132]	; 0x84
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 80050a8:	e02b      	b.n	8005102 <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 80050b0:	461a      	mov	r2, r3
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 80050b8:	4619      	mov	r1, r3
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 80050c0:	440b      	add	r3, r1
 80050c2:	429a      	cmp	r2, r3
 80050c4:	da0d      	bge.n	80050e2 <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 80050cc:	b2da      	uxtb	r2, r3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	4413      	add	r3, r2
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	b25a      	sxtb	r2, r3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 80050ee:	429a      	cmp	r2, r3
 80050f0:	dd07      	ble.n	8005102 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f993 2080 	ldrsb.w	r2, [r3, #128]	; 0x80
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 80050fe:	e000      	b.n	8005102 <u8g2_UpdateRefHeight+0xce>
    return;
 8005100:	bf00      	nop
  }  
}
 8005102:	370c      	adds	r7, #12
 8005104:	46bd      	mov	sp, r7
 8005106:	bc80      	pop	{r7}
 8005108:	4770      	bx	lr

0800510a <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 800510a:	b480      	push	{r7}
 800510c:	b083      	sub	sp, #12
 800510e:	af00      	add	r7, sp, #0
 8005110:	6078      	str	r0, [r7, #4]
  return 0;
 8005112:	2300      	movs	r3, #0
}
 8005114:	4618      	mov	r0, r3
 8005116:	370c      	adds	r7, #12
 8005118:	46bd      	mov	sp, r7
 800511a:	bc80      	pop	{r7}
 800511c:	4770      	bx	lr
	...

08005120 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8005120:	b480      	push	{r7}
 8005122:	b083      	sub	sp, #12
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a03      	ldr	r2, [pc, #12]	; (8005138 <u8g2_SetFontPosBaseline+0x18>)
 800512c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800512e:	bf00      	nop
 8005130:	370c      	adds	r7, #12
 8005132:	46bd      	mov	sp, r7
 8005134:	bc80      	pop	{r7}
 8005136:	4770      	bx	lr
 8005138:	0800510b 	.word	0x0800510b

0800513c <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b082      	sub	sp, #8
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800514a:	683a      	ldr	r2, [r7, #0]
 800514c:	429a      	cmp	r2, r3
 800514e:	d00b      	beq.n	8005168 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	683a      	ldr	r2, [r7, #0]
 8005154:	659a      	str	r2, [r3, #88]	; 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	3374      	adds	r3, #116	; 0x74
 800515a:	6839      	ldr	r1, [r7, #0]
 800515c:	4618      	mov	r0, r3
 800515e:	f7ff fbab 	bl	80048b8 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f7ff ff66 	bl	8005034 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8005168:	bf00      	nop
 800516a:	3708      	adds	r7, #8
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}

08005170 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 8005170:	b480      	push	{r7}
 8005172:	b087      	sub	sp, #28
 8005174:	af00      	add	r7, sp, #0
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	60b9      	str	r1, [r7, #8]
 800517a:	4611      	mov	r1, r2
 800517c:	461a      	mov	r2, r3
 800517e:	460b      	mov	r3, r1
 8005180:	80fb      	strh	r3, [r7, #6]
 8005182:	4613      	mov	r3, r2
 8005184:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	881b      	ldrh	r3, [r3, #0]
 800518a:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 800518c:	8afb      	ldrh	r3, [r7, #22]
 800518e:	82bb      	strh	r3, [r7, #20]
  b += *len;
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	881a      	ldrh	r2, [r3, #0]
 8005194:	8abb      	ldrh	r3, [r7, #20]
 8005196:	4413      	add	r3, r2
 8005198:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 800519a:	8afa      	ldrh	r2, [r7, #22]
 800519c:	8abb      	ldrh	r3, [r7, #20]
 800519e:	429a      	cmp	r2, r3
 80051a0:	d90b      	bls.n	80051ba <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 80051a2:	8afa      	ldrh	r2, [r7, #22]
 80051a4:	88bb      	ldrh	r3, [r7, #4]
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d205      	bcs.n	80051b6 <u8g2_clip_intersection2+0x46>
    {
      b = d;
 80051aa:	88bb      	ldrh	r3, [r7, #4]
 80051ac:	82bb      	strh	r3, [r7, #20]
      b--;
 80051ae:	8abb      	ldrh	r3, [r7, #20]
 80051b0:	3b01      	subs	r3, #1
 80051b2:	82bb      	strh	r3, [r7, #20]
 80051b4:	e001      	b.n	80051ba <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 80051b6:	88fb      	ldrh	r3, [r7, #6]
 80051b8:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 80051ba:	8afa      	ldrh	r2, [r7, #22]
 80051bc:	88bb      	ldrh	r3, [r7, #4]
 80051be:	429a      	cmp	r2, r3
 80051c0:	d301      	bcc.n	80051c6 <u8g2_clip_intersection2+0x56>
    return 0;
 80051c2:	2300      	movs	r3, #0
 80051c4:	e01c      	b.n	8005200 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 80051c6:	8aba      	ldrh	r2, [r7, #20]
 80051c8:	88fb      	ldrh	r3, [r7, #6]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d801      	bhi.n	80051d2 <u8g2_clip_intersection2+0x62>
    return 0;
 80051ce:	2300      	movs	r3, #0
 80051d0:	e016      	b.n	8005200 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 80051d2:	8afa      	ldrh	r2, [r7, #22]
 80051d4:	88fb      	ldrh	r3, [r7, #6]
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d201      	bcs.n	80051de <u8g2_clip_intersection2+0x6e>
    a = c;
 80051da:	88fb      	ldrh	r3, [r7, #6]
 80051dc:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 80051de:	8aba      	ldrh	r2, [r7, #20]
 80051e0:	88bb      	ldrh	r3, [r7, #4]
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d901      	bls.n	80051ea <u8g2_clip_intersection2+0x7a>
    b = d;
 80051e6:	88bb      	ldrh	r3, [r7, #4]
 80051e8:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	8afa      	ldrh	r2, [r7, #22]
 80051ee:	801a      	strh	r2, [r3, #0]
  b -= a;
 80051f0:	8aba      	ldrh	r2, [r7, #20]
 80051f2:	8afb      	ldrh	r3, [r7, #22]
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	82bb      	strh	r3, [r7, #20]
  *len = b;
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	8aba      	ldrh	r2, [r7, #20]
 80051fc:	801a      	strh	r2, [r3, #0]
  return 1;
 80051fe:	2301      	movs	r3, #1
}
 8005200:	4618      	mov	r0, r3
 8005202:	371c      	adds	r7, #28
 8005204:	46bd      	mov	sp, r7
 8005206:	bc80      	pop	{r7}
 8005208:	4770      	bx	lr

0800520a <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800520a:	b590      	push	{r4, r7, lr}
 800520c:	b087      	sub	sp, #28
 800520e:	af02      	add	r7, sp, #8
 8005210:	60f8      	str	r0, [r7, #12]
 8005212:	4608      	mov	r0, r1
 8005214:	4611      	mov	r1, r2
 8005216:	461a      	mov	r2, r3
 8005218:	4603      	mov	r3, r0
 800521a:	817b      	strh	r3, [r7, #10]
 800521c:	460b      	mov	r3, r1
 800521e:	813b      	strh	r3, [r7, #8]
 8005220:	4613      	mov	r3, r2
 8005222:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005228:	893a      	ldrh	r2, [r7, #8]
 800522a:	1ad3      	subs	r3, r2, r3
 800522c:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8005232:	88f8      	ldrh	r0, [r7, #6]
 8005234:	893a      	ldrh	r2, [r7, #8]
 8005236:	8979      	ldrh	r1, [r7, #10]
 8005238:	f897 3020 	ldrb.w	r3, [r7, #32]
 800523c:	9300      	str	r3, [sp, #0]
 800523e:	4603      	mov	r3, r0
 8005240:	68f8      	ldr	r0, [r7, #12]
 8005242:	47a0      	blx	r4
}
 8005244:	bf00      	nop
 8005246:	3714      	adds	r7, #20
 8005248:	46bd      	mov	sp, r7
 800524a:	bd90      	pop	{r4, r7, pc}

0800524c <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800524c:	b590      	push	{r4, r7, lr}
 800524e:	b087      	sub	sp, #28
 8005250:	af02      	add	r7, sp, #8
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	4608      	mov	r0, r1
 8005256:	4611      	mov	r1, r2
 8005258:	461a      	mov	r2, r3
 800525a:	4603      	mov	r3, r0
 800525c:	817b      	strh	r3, [r7, #10]
 800525e:	460b      	mov	r3, r1
 8005260:	813b      	strh	r3, [r7, #8]
 8005262:	4613      	mov	r3, r2
 8005264:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800526c:	2b00      	cmp	r3, #0
 800526e:	d075      	beq.n	800535c <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8005270:	88fb      	ldrh	r3, [r7, #6]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d072      	beq.n	800535c <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8005276:	88fb      	ldrh	r3, [r7, #6]
 8005278:	2b01      	cmp	r3, #1
 800527a:	d91a      	bls.n	80052b2 <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 800527c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005280:	2b02      	cmp	r3, #2
 8005282:	d109      	bne.n	8005298 <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 8005284:	897a      	ldrh	r2, [r7, #10]
 8005286:	88fb      	ldrh	r3, [r7, #6]
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	b29b      	uxth	r3, r3
 800528c:	817b      	strh	r3, [r7, #10]
	  x++;
 800528e:	897b      	ldrh	r3, [r7, #10]
 8005290:	3301      	adds	r3, #1
 8005292:	b29b      	uxth	r3, r3
 8005294:	817b      	strh	r3, [r7, #10]
 8005296:	e00c      	b.n	80052b2 <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 8005298:	f897 3020 	ldrb.w	r3, [r7, #32]
 800529c:	2b03      	cmp	r3, #3
 800529e:	d108      	bne.n	80052b2 <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 80052a0:	893a      	ldrh	r2, [r7, #8]
 80052a2:	88fb      	ldrh	r3, [r7, #6]
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	813b      	strh	r3, [r7, #8]
	  y++;
 80052aa:	893b      	ldrh	r3, [r7, #8]
 80052ac:	3301      	adds	r3, #1
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 80052b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80052b6:	f003 0301 	and.w	r3, r3, #1
 80052ba:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 80052be:	f897 3020 	ldrb.w	r3, [r7, #32]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d11a      	bne.n	80052fc <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 80052cc:	893b      	ldrh	r3, [r7, #8]
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d83b      	bhi.n	800534a <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 80052d8:	893b      	ldrh	r3, [r7, #8]
 80052da:	429a      	cmp	r2, r3
 80052dc:	d937      	bls.n	800534e <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80052ea:	1db9      	adds	r1, r7, #6
 80052ec:	f107 000a 	add.w	r0, r7, #10
 80052f0:	f7ff ff3e 	bl	8005170 <u8g2_clip_intersection2>
 80052f4:	4603      	mov	r3, r0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d11a      	bne.n	8005330 <u8g2_DrawHVLine+0xe4>
	  return;
 80052fa:	e02f      	b.n	800535c <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8005302:	897b      	ldrh	r3, [r7, #10]
 8005304:	429a      	cmp	r2, r3
 8005306:	d824      	bhi.n	8005352 <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800530e:	897b      	ldrh	r3, [r7, #10]
 8005310:	429a      	cmp	r2, r3
 8005312:	d920      	bls.n	8005356 <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8005320:	1db9      	adds	r1, r7, #6
 8005322:	f107 0008 	add.w	r0, r7, #8
 8005326:	f7ff ff23 	bl	8005170 <u8g2_clip_intersection2>
 800532a:	4603      	mov	r3, r0
 800532c:	2b00      	cmp	r3, #0
 800532e:	d014      	beq.n	800535a <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005334:	689c      	ldr	r4, [r3, #8]
 8005336:	8979      	ldrh	r1, [r7, #10]
 8005338:	893a      	ldrh	r2, [r7, #8]
 800533a:	88f8      	ldrh	r0, [r7, #6]
 800533c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005340:	9300      	str	r3, [sp, #0]
 8005342:	4603      	mov	r3, r0
 8005344:	68f8      	ldr	r0, [r7, #12]
 8005346:	47a0      	blx	r4
 8005348:	e008      	b.n	800535c <u8g2_DrawHVLine+0x110>
	  return;
 800534a:	bf00      	nop
 800534c:	e006      	b.n	800535c <u8g2_DrawHVLine+0x110>
	  return;
 800534e:	bf00      	nop
 8005350:	e004      	b.n	800535c <u8g2_DrawHVLine+0x110>
	  return;
 8005352:	bf00      	nop
 8005354:	e002      	b.n	800535c <u8g2_DrawHVLine+0x110>
	  return;
 8005356:	bf00      	nop
 8005358:	e000      	b.n	800535c <u8g2_DrawHVLine+0x110>
	  return;
 800535a:	bf00      	nop
    }
}
 800535c:	3714      	adds	r7, #20
 800535e:	46bd      	mov	sp, r7
 8005360:	bd90      	pop	{r4, r7, pc}

08005362 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8005362:	b490      	push	{r4, r7}
 8005364:	b082      	sub	sp, #8
 8005366:	af00      	add	r7, sp, #0
 8005368:	4604      	mov	r4, r0
 800536a:	4608      	mov	r0, r1
 800536c:	4611      	mov	r1, r2
 800536e:	461a      	mov	r2, r3
 8005370:	4623      	mov	r3, r4
 8005372:	80fb      	strh	r3, [r7, #6]
 8005374:	4603      	mov	r3, r0
 8005376:	80bb      	strh	r3, [r7, #4]
 8005378:	460b      	mov	r3, r1
 800537a:	807b      	strh	r3, [r7, #2]
 800537c:	4613      	mov	r3, r2
 800537e:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 8005380:	887a      	ldrh	r2, [r7, #2]
 8005382:	88bb      	ldrh	r3, [r7, #4]
 8005384:	429a      	cmp	r2, r3
 8005386:	d20d      	bcs.n	80053a4 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8005388:	883a      	ldrh	r2, [r7, #0]
 800538a:	88fb      	ldrh	r3, [r7, #6]
 800538c:	429a      	cmp	r2, r3
 800538e:	d901      	bls.n	8005394 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8005390:	2301      	movs	r3, #1
 8005392:	e014      	b.n	80053be <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8005394:	887a      	ldrh	r2, [r7, #2]
 8005396:	883b      	ldrh	r3, [r7, #0]
 8005398:	429a      	cmp	r2, r3
 800539a:	d901      	bls.n	80053a0 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 800539c:	2301      	movs	r3, #1
 800539e:	e00e      	b.n	80053be <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 80053a0:	2300      	movs	r3, #0
 80053a2:	e00c      	b.n	80053be <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 80053a4:	883a      	ldrh	r2, [r7, #0]
 80053a6:	88fb      	ldrh	r3, [r7, #6]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d907      	bls.n	80053bc <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 80053ac:	887a      	ldrh	r2, [r7, #2]
 80053ae:	883b      	ldrh	r3, [r7, #0]
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d901      	bls.n	80053b8 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 80053b4:	2301      	movs	r3, #1
 80053b6:	e002      	b.n	80053be <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 80053b8:	2300      	movs	r3, #0
 80053ba:	e000      	b.n	80053be <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 80053bc:	2300      	movs	r3, #0
    }
  }
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3708      	adds	r7, #8
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bc90      	pop	{r4, r7}
 80053c6:	4770      	bx	lr

080053c8 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b084      	sub	sp, #16
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	4608      	mov	r0, r1
 80053d2:	4611      	mov	r1, r2
 80053d4:	461a      	mov	r2, r3
 80053d6:	4603      	mov	r3, r0
 80053d8:	817b      	strh	r3, [r7, #10]
 80053da:	460b      	mov	r3, r1
 80053dc:	813b      	strh	r3, [r7, #8]
 80053de:	4613      	mov	r3, r2
 80053e0:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f8b3 104e 	ldrh.w	r1, [r3, #78]	; 0x4e
 80053ee:	8b3b      	ldrh	r3, [r7, #24]
 80053f0:	893a      	ldrh	r2, [r7, #8]
 80053f2:	f7ff ffb6 	bl	8005362 <u8g2_is_intersection_decision_tree>
 80053f6:	4603      	mov	r3, r0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d101      	bne.n	8005400 <u8g2_IsIntersection+0x38>
    return 0; 
 80053fc:	2300      	movs	r3, #0
 80053fe:	e00a      	b.n	8005416 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
 800540c:	88fb      	ldrh	r3, [r7, #6]
 800540e:	897a      	ldrh	r2, [r7, #10]
 8005410:	f7ff ffa7 	bl	8005362 <u8g2_is_intersection_decision_tree>
 8005414:	4603      	mov	r3, r0
}
 8005416:	4618      	mov	r0, r3
 8005418:	3710      	adds	r7, #16
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}

0800541e <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800541e:	b480      	push	{r7}
 8005420:	b089      	sub	sp, #36	; 0x24
 8005422:	af00      	add	r7, sp, #0
 8005424:	60f8      	str	r0, [r7, #12]
 8005426:	4608      	mov	r0, r1
 8005428:	4611      	mov	r1, r2
 800542a:	461a      	mov	r2, r3
 800542c:	4603      	mov	r3, r0
 800542e:	817b      	strh	r3, [r7, #10]
 8005430:	460b      	mov	r3, r1
 8005432:	813b      	strh	r3, [r7, #8]
 8005434:	4613      	mov	r3, r2
 8005436:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8005438:	893b      	ldrh	r3, [r7, #8]
 800543a:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 800543c:	7efb      	ldrb	r3, [r7, #27]
 800543e:	f003 0307 	and.w	r3, r3, #7
 8005442:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 8005444:	2301      	movs	r3, #1
 8005446:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 8005448:	7e3a      	ldrb	r2, [r7, #24]
 800544a:	7efb      	ldrb	r3, [r7, #27]
 800544c:	fa02 f303 	lsl.w	r3, r2, r3
 8005450:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 8005452:	2300      	movs	r3, #0
 8005454:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 8005456:	2300      	movs	r3, #0
 8005458:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8005460:	2b01      	cmp	r3, #1
 8005462:	d801      	bhi.n	8005468 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8005464:	7e3b      	ldrb	r3, [r7, #24]
 8005466:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 800546e:	2b01      	cmp	r3, #1
 8005470:	d001      	beq.n	8005476 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8005472:	7e3b      	ldrb	r3, [r7, #24]
 8005474:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8005476:	893b      	ldrh	r3, [r7, #8]
 8005478:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 800547a:	8afb      	ldrh	r3, [r7, #22]
 800547c:	f023 0307 	bic.w	r3, r3, #7
 8005480:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	7c1b      	ldrb	r3, [r3, #16]
 8005488:	b29b      	uxth	r3, r3
 800548a:	8afa      	ldrh	r2, [r7, #22]
 800548c:	fb02 f303 	mul.w	r3, r2, r3
 8005490:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005496:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 8005498:	8afb      	ldrh	r3, [r7, #22]
 800549a:	69fa      	ldr	r2, [r7, #28]
 800549c:	4413      	add	r3, r2
 800549e:	61fb      	str	r3, [r7, #28]
  ptr += x;
 80054a0:	897b      	ldrh	r3, [r7, #10]
 80054a2:	69fa      	ldr	r2, [r7, #28]
 80054a4:	4413      	add	r3, r2
 80054a6:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 80054a8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d117      	bne.n	80054e0 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	781a      	ldrb	r2, [r3, #0]
 80054b4:	7ebb      	ldrb	r3, [r7, #26]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	b2da      	uxtb	r2, r3
 80054ba:	69fb      	ldr	r3, [r7, #28]
 80054bc:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	781a      	ldrb	r2, [r3, #0]
 80054c2:	7e7b      	ldrb	r3, [r7, #25]
 80054c4:	4053      	eors	r3, r2
 80054c6:	b2da      	uxtb	r2, r3
 80054c8:	69fb      	ldr	r3, [r7, #28]
 80054ca:	701a      	strb	r2, [r3, #0]
	ptr++;
 80054cc:	69fb      	ldr	r3, [r7, #28]
 80054ce:	3301      	adds	r3, #1
 80054d0:	61fb      	str	r3, [r7, #28]
	len--;
 80054d2:	88fb      	ldrh	r3, [r7, #6]
 80054d4:	3b01      	subs	r3, #1
 80054d6:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 80054d8:	88fb      	ldrh	r3, [r7, #6]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d1e8      	bne.n	80054b0 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 80054de:	e038      	b.n	8005552 <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 80054e0:	69fb      	ldr	r3, [r7, #28]
 80054e2:	781a      	ldrb	r2, [r3, #0]
 80054e4:	7ebb      	ldrb	r3, [r7, #26]
 80054e6:	4313      	orrs	r3, r2
 80054e8:	b2da      	uxtb	r2, r3
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 80054ee:	69fb      	ldr	r3, [r7, #28]
 80054f0:	781a      	ldrb	r2, [r3, #0]
 80054f2:	7e7b      	ldrb	r3, [r7, #25]
 80054f4:	4053      	eors	r3, r2
 80054f6:	b2da      	uxtb	r2, r3
 80054f8:	69fb      	ldr	r3, [r7, #28]
 80054fa:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 80054fc:	7efb      	ldrb	r3, [r7, #27]
 80054fe:	3301      	adds	r3, #1
 8005500:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 8005502:	7efb      	ldrb	r3, [r7, #27]
 8005504:	f003 0307 	and.w	r3, r3, #7
 8005508:	76fb      	strb	r3, [r7, #27]
      len--;
 800550a:	88fb      	ldrh	r3, [r7, #6]
 800550c:	3b01      	subs	r3, #1
 800550e:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 8005510:	7efb      	ldrb	r3, [r7, #27]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d114      	bne.n	8005540 <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800551a:	461a      	mov	r2, r3
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	4413      	add	r3, r2
 8005520:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8005528:	2b01      	cmp	r3, #1
 800552a:	d801      	bhi.n	8005530 <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 800552c:	2301      	movs	r3, #1
 800552e:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8005536:	2b01      	cmp	r3, #1
 8005538:	d008      	beq.n	800554c <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 800553a:	2301      	movs	r3, #1
 800553c:	767b      	strb	r3, [r7, #25]
 800553e:	e005      	b.n	800554c <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 8005540:	7ebb      	ldrb	r3, [r7, #26]
 8005542:	005b      	lsls	r3, r3, #1
 8005544:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 8005546:	7e7b      	ldrb	r3, [r7, #25]
 8005548:	005b      	lsls	r3, r3, #1
 800554a:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 800554c:	88fb      	ldrh	r3, [r7, #6]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d1c6      	bne.n	80054e0 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8005552:	bf00      	nop
 8005554:	3724      	adds	r7, #36	; 0x24
 8005556:	46bd      	mov	sp, r7
 8005558:	bc80      	pop	{r7}
 800555a:	4770      	bx	lr

0800555c <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b082      	sub	sp, #8
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  u8g2->clip_y0 = 0;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800557a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005584:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  
  u8g2->cb->update_page_win(u8g2);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	4798      	blx	r3
}
 8005592:	bf00      	nop
 8005594:	3708      	adds	r7, #8
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}

0800559a <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 800559a:	b580      	push	{r7, lr}
 800559c:	b084      	sub	sp, #16
 800559e:	af00      	add	r7, sp, #0
 80055a0:	60f8      	str	r0, [r7, #12]
 80055a2:	60b9      	str	r1, [r7, #8]
 80055a4:	603b      	str	r3, [r7, #0]
 80055a6:	4613      	mov	r3, r2
 80055a8:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2200      	movs	r2, #0
 80055ae:	659a      	str	r2, [r3, #88]	; 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	683a      	ldr	r2, [r7, #0]
 80055b4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	68ba      	ldr	r2, [r7, #8]
 80055ba:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	79fa      	ldrb	r2, [r7, #7]
 80055c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2200      	movs	r2, #0
 80055d0:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  u8g2->bitmap_transparency = 0;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2200      	movs	r2, #0
 80055d8:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  
  u8g2->font_height_mode = 0; /* issue 2046 */
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2200      	movs	r2, #0
 80055e0:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
  u8g2->draw_color = 1;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  u8g2->is_auto_page_clear = 1;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
  
  u8g2->cb = u8g2_cb;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	69ba      	ldr	r2, [r7, #24]
 80055f8:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	68f8      	ldr	r0, [r7, #12]
 8005602:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8005604:	68f8      	ldr	r0, [r7, #12]
 8005606:	f7ff ffa9 	bl	800555c <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 800560a:	68f8      	ldr	r0, [r7, #12]
 800560c:	f7ff fd88 	bl	8005120 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2200      	movs	r2, #0
 8005614:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
#endif
}
 8005618:	bf00      	nop
 800561a:	3710      	adds	r7, #16
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}

08005620 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8005620:	b480      	push	{r7}
 8005622:	b085      	sub	sp, #20
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005634:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8005636:	89fb      	ldrh	r3, [r7, #14]
 8005638:	00db      	lsls	r3, r3, #3
 800563a:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	89fa      	ldrh	r2, [r7, #14]
 8005640:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  t = display_info->tile_width;
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	7c1b      	ldrb	r3, [r3, #16]
 8005646:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 8005648:	89fb      	ldrh	r3, [r7, #14]
 800564a:	00db      	lsls	r3, r3, #3
 800564c:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	89fa      	ldrh	r2, [r7, #14]
 8005652:	875a      	strh	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800565a:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 800565c:	89fb      	ldrh	r3, [r7, #14]
 800565e:	00db      	lsls	r3, r3, #3
 8005660:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	89fa      	ldrh	r2, [r7, #14]
 8005666:	87da      	strh	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_buf_height;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800566e:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8005670:	89fb      	ldrh	r3, [r7, #14]
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 8005678:	4413      	add	r3, r2
 800567a:	68ba      	ldr	r2, [r7, #8]
 800567c:	7c52      	ldrb	r2, [r2, #17]
 800567e:	4293      	cmp	r3, r2
 8005680:	dd08      	ble.n	8005694 <u8g2_update_dimension_common+0x74>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	7c5b      	ldrb	r3, [r3, #17]
 8005686:	b29a      	uxth	r2, r3
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800568e:	b29b      	uxth	r3, r3
 8005690:	1ad3      	subs	r3, r2, r3
 8005692:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8005694:	89fb      	ldrh	r3, [r7, #14]
 8005696:	00db      	lsls	r3, r3, #3
 8005698:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 80056b6:	89fb      	ldrh	r3, [r7, #14]
 80056b8:	4413      	add	r3, r2
 80056ba:	b29a      	uxth	r2, r3
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	8a9a      	ldrh	r2, [r3, #20]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  u8g2->height = display_info->pixel_height;
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	8ada      	ldrh	r2, [r3, #22]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 80056d6:	bf00      	nop
 80056d8:	3714      	adds	r7, #20
 80056da:	46bd      	mov	sp, r7
 80056dc:	bc80      	pop	{r7}
 80056de:	4770      	bx	lr

080056e0 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b084      	sub	sp, #16
 80056e4:	af02      	add	r7, sp, #8
 80056e6:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f8b3 0052 	ldrh.w	r0, [r3, #82]	; 0x52
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005700:	9300      	str	r3, [sp, #0]
 8005702:	4603      	mov	r3, r0
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f7ff fe5f 	bl	80053c8 <u8g2_IsIntersection>
 800570a:	4603      	mov	r3, r0
 800570c:	2b00      	cmp	r3, #0
 800570e:	d104      	bne.n	800571a <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2200      	movs	r2, #0
 8005714:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 8005718:	e03b      	b.n	8005792 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2201      	movs	r2, #1
 800571e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800572e:	429a      	cmp	r2, r3
 8005730:	d205      	bcs.n	800573e <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800574a:	429a      	cmp	r2, r3
 800574c:	d905      	bls.n	800575a <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005766:	429a      	cmp	r2, r3
 8005768:	d205      	bcs.n	8005776 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005782:	429a      	cmp	r2, r3
 8005784:	d905      	bls.n	8005792 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 8005792:	bf00      	nop
 8005794:	3708      	adds	r7, #8
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}

0800579a <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 800579a:	b580      	push	{r7, lr}
 800579c:	b082      	sub	sp, #8
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f7ff ff3c 	bl	8005620 <u8g2_update_dimension_common>
}
 80057a8:	bf00      	nop
 80057aa:	3708      	adds	r7, #8
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}

080057b0 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b082      	sub	sp, #8
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  
  u8g2->user_y0 = u8g2->buf_y0;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  u8g2->user_y1 = u8g2->buf_y1;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f7ff ff7b 	bl	80056e0 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 80057ea:	bf00      	nop
 80057ec:	3708      	adds	r7, #8
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}

080057f2 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80057f2:	b580      	push	{r7, lr}
 80057f4:	b086      	sub	sp, #24
 80057f6:	af02      	add	r7, sp, #8
 80057f8:	60f8      	str	r0, [r7, #12]
 80057fa:	4608      	mov	r0, r1
 80057fc:	4611      	mov	r1, r2
 80057fe:	461a      	mov	r2, r3
 8005800:	4603      	mov	r3, r0
 8005802:	817b      	strh	r3, [r7, #10]
 8005804:	460b      	mov	r3, r1
 8005806:	813b      	strh	r3, [r7, #8]
 8005808:	4613      	mov	r3, r2
 800580a:	80fb      	strh	r3, [r7, #6]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 800580c:	88f8      	ldrh	r0, [r7, #6]
 800580e:	893a      	ldrh	r2, [r7, #8]
 8005810:	8979      	ldrh	r1, [r7, #10]
 8005812:	7e3b      	ldrb	r3, [r7, #24]
 8005814:	9300      	str	r3, [sp, #0]
 8005816:	4603      	mov	r3, r0
 8005818:	68f8      	ldr	r0, [r7, #12]
 800581a:	f7ff fcf6 	bl	800520a <u8g2_draw_hv_line_2dir>
}
 800581e:	bf00      	nop
 8005820:	3710      	adds	r7, #16
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}

08005826 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8005826:	b480      	push	{r7}
 8005828:	b083      	sub	sp, #12
 800582a:	af00      	add	r7, sp, #0
 800582c:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8005836:	bf00      	nop
 8005838:	370c      	adds	r7, #12
 800583a:	46bd      	mov	sp, r7
 800583c:	bc80      	pop	{r7}
 800583e:	4770      	bx	lr

08005840 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8005840:	b480      	push	{r7}
 8005842:	b083      	sub	sp, #12
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	460b      	mov	r3, r1
 800584a:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 800584c:	78fb      	ldrb	r3, [r7, #3]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d002      	beq.n	8005858 <u8x8_ascii_next+0x18>
 8005852:	78fb      	ldrb	r3, [r7, #3]
 8005854:	2b0a      	cmp	r3, #10
 8005856:	d102      	bne.n	800585e <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 8005858:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800585c:	e001      	b.n	8005862 <u8x8_ascii_next+0x22>
  return b;
 800585e:	78fb      	ldrb	r3, [r7, #3]
 8005860:	b29b      	uxth	r3, r3
}
 8005862:	4618      	mov	r0, r3
 8005864:	370c      	adds	r7, #12
 8005866:	46bd      	mov	sp, r7
 8005868:	bc80      	pop	{r7}
 800586a:	4770      	bx	lr

0800586c <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 800586c:	b590      	push	{r4, r7, lr}
 800586e:	b083      	sub	sp, #12
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	460b      	mov	r3, r1
 8005876:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	691c      	ldr	r4, [r3, #16]
 800587c:	78fa      	ldrb	r2, [r7, #3]
 800587e:	2300      	movs	r3, #0
 8005880:	2120      	movs	r1, #32
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	47a0      	blx	r4
 8005886:	4603      	mov	r3, r0
}
 8005888:	4618      	mov	r0, r3
 800588a:	370c      	adds	r7, #12
 800588c:	46bd      	mov	sp, r7
 800588e:	bd90      	pop	{r4, r7, pc}

08005890 <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8005890:	b590      	push	{r4, r7, lr}
 8005892:	b085      	sub	sp, #20
 8005894:	af00      	add	r7, sp, #0
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	460b      	mov	r3, r1
 800589a:	607a      	str	r2, [r7, #4]
 800589c:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	691c      	ldr	r4, [r3, #16]
 80058a2:	7afa      	ldrb	r2, [r7, #11]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2117      	movs	r1, #23
 80058a8:	68f8      	ldr	r0, [r7, #12]
 80058aa:	47a0      	blx	r4
 80058ac:	4603      	mov	r3, r0
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3714      	adds	r7, #20
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd90      	pop	{r4, r7, pc}

080058b6 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 80058b6:	b580      	push	{r7, lr}
 80058b8:	b082      	sub	sp, #8
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
 80058be:	460b      	mov	r3, r1
 80058c0:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 80058c2:	1cfb      	adds	r3, r7, #3
 80058c4:	461a      	mov	r2, r3
 80058c6:	2101      	movs	r1, #1
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f7ff ffe1 	bl	8005890 <u8x8_byte_SendBytes>
 80058ce:	4603      	mov	r3, r0
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3708      	adds	r7, #8
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}

080058d8 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 80058d8:	b590      	push	{r4, r7, lr}
 80058da:	b083      	sub	sp, #12
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	460b      	mov	r3, r1
 80058e2:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	68dc      	ldr	r4, [r3, #12]
 80058e8:	78fa      	ldrb	r2, [r7, #3]
 80058ea:	2300      	movs	r3, #0
 80058ec:	2115      	movs	r1, #21
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	47a0      	blx	r4
 80058f2:	4603      	mov	r3, r0
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	370c      	adds	r7, #12
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd90      	pop	{r4, r7, pc}

080058fc <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 80058fc:	b590      	push	{r4, r7, lr}
 80058fe:	b083      	sub	sp, #12
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	460b      	mov	r3, r1
 8005906:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	68dc      	ldr	r4, [r3, #12]
 800590c:	78fa      	ldrb	r2, [r7, #3]
 800590e:	2300      	movs	r3, #0
 8005910:	2116      	movs	r1, #22
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	47a0      	blx	r4
 8005916:	4603      	mov	r3, r0
}
 8005918:	4618      	mov	r0, r3
 800591a:	370c      	adds	r7, #12
 800591c:	46bd      	mov	sp, r7
 800591e:	bd90      	pop	{r4, r7, pc}

08005920 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8005920:	b590      	push	{r4, r7, lr}
 8005922:	b085      	sub	sp, #20
 8005924:	af00      	add	r7, sp, #0
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	460b      	mov	r3, r1
 800592a:	607a      	str	r2, [r7, #4]
 800592c:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	68dc      	ldr	r4, [r3, #12]
 8005932:	7afa      	ldrb	r2, [r7, #11]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2117      	movs	r1, #23
 8005938:	68f8      	ldr	r0, [r7, #12]
 800593a:	47a0      	blx	r4
 800593c:	4603      	mov	r3, r0
}
 800593e:	4618      	mov	r0, r3
 8005940:	3714      	adds	r7, #20
 8005942:	46bd      	mov	sp, r7
 8005944:	bd90      	pop	{r4, r7, pc}

08005946 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8005946:	b590      	push	{r4, r7, lr}
 8005948:	b083      	sub	sp, #12
 800594a:	af00      	add	r7, sp, #0
 800594c:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	68dc      	ldr	r4, [r3, #12]
 8005952:	2300      	movs	r3, #0
 8005954:	2200      	movs	r2, #0
 8005956:	2118      	movs	r1, #24
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	47a0      	blx	r4
 800595c:	4603      	mov	r3, r0
}
 800595e:	4618      	mov	r0, r3
 8005960:	370c      	adds	r7, #12
 8005962:	46bd      	mov	sp, r7
 8005964:	bd90      	pop	{r4, r7, pc}

08005966 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8005966:	b590      	push	{r4, r7, lr}
 8005968:	b083      	sub	sp, #12
 800596a:	af00      	add	r7, sp, #0
 800596c:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	68dc      	ldr	r4, [r3, #12]
 8005972:	2300      	movs	r3, #0
 8005974:	2200      	movs	r2, #0
 8005976:	2119      	movs	r1, #25
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	47a0      	blx	r4
 800597c:	4603      	mov	r3, r0
}
 800597e:	4618      	mov	r0, r3
 8005980:	370c      	adds	r7, #12
 8005982:	46bd      	mov	sp, r7
 8005984:	bd90      	pop	{r4, r7, pc}

08005986 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8005986:	b590      	push	{r4, r7, lr}
 8005988:	b085      	sub	sp, #20
 800598a:	af00      	add	r7, sp, #0
 800598c:	6078      	str	r0, [r7, #4]
 800598e:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	73fb      	strb	r3, [r7, #15]
    data++;
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	3301      	adds	r3, #1
 800599a:	603b      	str	r3, [r7, #0]
    switch( cmd )
 800599c:	7bfb      	ldrb	r3, [r7, #15]
 800599e:	2bfe      	cmp	r3, #254	; 0xfe
 80059a0:	d031      	beq.n	8005a06 <u8x8_cad_SendSequence+0x80>
 80059a2:	2bfe      	cmp	r3, #254	; 0xfe
 80059a4:	dc3d      	bgt.n	8005a22 <u8x8_cad_SendSequence+0x9c>
 80059a6:	2b19      	cmp	r3, #25
 80059a8:	dc3b      	bgt.n	8005a22 <u8x8_cad_SendSequence+0x9c>
 80059aa:	2b18      	cmp	r3, #24
 80059ac:	da23      	bge.n	80059f6 <u8x8_cad_SendSequence+0x70>
 80059ae:	2b16      	cmp	r3, #22
 80059b0:	dc02      	bgt.n	80059b8 <u8x8_cad_SendSequence+0x32>
 80059b2:	2b15      	cmp	r3, #21
 80059b4:	da03      	bge.n	80059be <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 80059b6:	e034      	b.n	8005a22 <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 80059b8:	2b17      	cmp	r3, #23
 80059ba:	d00e      	beq.n	80059da <u8x8_cad_SendSequence+0x54>
	return;
 80059bc:	e031      	b.n	8005a22 <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	68dc      	ldr	r4, [r3, #12]
 80059c8:	7bba      	ldrb	r2, [r7, #14]
 80059ca:	7bf9      	ldrb	r1, [r7, #15]
 80059cc:	2300      	movs	r3, #0
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	47a0      	blx	r4
	  data++;
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	3301      	adds	r3, #1
 80059d6:	603b      	str	r3, [r7, #0]
	  break;
 80059d8:	e022      	b.n	8005a20 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 80059e0:	f107 030e 	add.w	r3, r7, #14
 80059e4:	461a      	mov	r2, r3
 80059e6:	2101      	movs	r1, #1
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f7ff ff99 	bl	8005920 <u8x8_cad_SendData>
	  data++;
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	3301      	adds	r3, #1
 80059f2:	603b      	str	r3, [r7, #0]
	  break;
 80059f4:	e014      	b.n	8005a20 <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	68dc      	ldr	r4, [r3, #12]
 80059fa:	7bf9      	ldrb	r1, [r7, #15]
 80059fc:	2300      	movs	r3, #0
 80059fe:	2200      	movs	r2, #0
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	47a0      	blx	r4
	  break;
 8005a04:	e00c      	b.n	8005a20 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8005a0c:	7bbb      	ldrb	r3, [r7, #14]
 8005a0e:	461a      	mov	r2, r3
 8005a10:	2129      	movs	r1, #41	; 0x29
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 f9d8 	bl	8005dc8 <u8x8_gpio_call>
	  data++;
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	603b      	str	r3, [r7, #0]
	  break;
 8005a1e:	bf00      	nop
    cmd = *data;
 8005a20:	e7b6      	b.n	8005990 <u8x8_cad_SendSequence+0xa>
	return;
 8005a22:	bf00      	nop
    }
  }
}
 8005a24:	3714      	adds	r7, #20
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd90      	pop	{r4, r7, pc}
	...

08005a2c <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8005a2c:	b590      	push	{r4, r7, lr}
 8005a2e:	b085      	sub	sp, #20
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	607b      	str	r3, [r7, #4]
 8005a36:	460b      	mov	r3, r1
 8005a38:	72fb      	strb	r3, [r7, #11]
 8005a3a:	4613      	mov	r3, r2
 8005a3c:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 8005a3e:	7afb      	ldrb	r3, [r7, #11]
 8005a40:	3b14      	subs	r3, #20
 8005a42:	2b05      	cmp	r3, #5
 8005a44:	d82f      	bhi.n	8005aa6 <u8x8_cad_001+0x7a>
 8005a46:	a201      	add	r2, pc, #4	; (adr r2, 8005a4c <u8x8_cad_001+0x20>)
 8005a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a4c:	08005a95 	.word	0x08005a95
 8005a50:	08005a65 	.word	0x08005a65
 8005a54:	08005a79 	.word	0x08005a79
 8005a58:	08005a8d 	.word	0x08005a8d
 8005a5c:	08005a95 	.word	0x08005a95
 8005a60:	08005a95 	.word	0x08005a95
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 8005a64:	2100      	movs	r1, #0
 8005a66:	68f8      	ldr	r0, [r7, #12]
 8005a68:	f7ff ff00 	bl	800586c <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8005a6c:	7abb      	ldrb	r3, [r7, #10]
 8005a6e:	4619      	mov	r1, r3
 8005a70:	68f8      	ldr	r0, [r7, #12]
 8005a72:	f7ff ff20 	bl	80058b6 <u8x8_byte_SendByte>
      break;
 8005a76:	e018      	b.n	8005aaa <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 8005a78:	2100      	movs	r1, #0
 8005a7a:	68f8      	ldr	r0, [r7, #12]
 8005a7c:	f7ff fef6 	bl	800586c <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8005a80:	7abb      	ldrb	r3, [r7, #10]
 8005a82:	4619      	mov	r1, r3
 8005a84:	68f8      	ldr	r0, [r7, #12]
 8005a86:	f7ff ff16 	bl	80058b6 <u8x8_byte_SendByte>
      break;
 8005a8a:	e00e      	b.n	8005aaa <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 8005a8c:	2101      	movs	r1, #1
 8005a8e:	68f8      	ldr	r0, [r7, #12]
 8005a90:	f7ff feec 	bl	800586c <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	691c      	ldr	r4, [r3, #16]
 8005a98:	7aba      	ldrb	r2, [r7, #10]
 8005a9a:	7af9      	ldrb	r1, [r7, #11]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	68f8      	ldr	r0, [r7, #12]
 8005aa0:	47a0      	blx	r4
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	e002      	b.n	8005aac <u8x8_cad_001+0x80>
    default:
      return 0;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	e000      	b.n	8005aac <u8x8_cad_001+0x80>
  }
  return 1;
 8005aaa:	2301      	movs	r3, #1
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3714      	adds	r7, #20
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd90      	pop	{r4, r7, pc}

08005ab4 <u8x8_d_ssd1306_sh1106_generic>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b086      	sub	sp, #24
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	60f8      	str	r0, [r7, #12]
 8005abc:	607b      	str	r3, [r7, #4]
 8005abe:	460b      	mov	r3, r1
 8005ac0:	72fb      	strb	r3, [r7, #11]
 8005ac2:	4613      	mov	r3, r2
 8005ac4:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 8005ac6:	7afb      	ldrb	r3, [r7, #11]
 8005ac8:	3b0b      	subs	r3, #11
 8005aca:	2b04      	cmp	r3, #4
 8005acc:	f200 808a 	bhi.w	8005be4 <u8x8_d_ssd1306_sh1106_generic+0x130>
 8005ad0:	a201      	add	r2, pc, #4	; (adr r2, 8005ad8 <u8x8_d_ssd1306_sh1106_generic+0x24>)
 8005ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ad6:	bf00      	nop
 8005ad8:	08005aed 	.word	0x08005aed
 8005adc:	08005be5 	.word	0x08005be5
 8005ae0:	08005b07 	.word	0x08005b07
 8005ae4:	08005b39 	.word	0x08005b39
 8005ae8:	08005b59 	.word	0x08005b59
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8005aec:	7abb      	ldrb	r3, [r7, #10]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d104      	bne.n	8005afc <u8x8_d_ssd1306_sh1106_generic+0x48>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
 8005af2:	4940      	ldr	r1, [pc, #256]	; (8005bf4 <u8x8_d_ssd1306_sh1106_generic+0x140>)
 8005af4:	68f8      	ldr	r0, [r7, #12]
 8005af6:	f7ff ff46 	bl	8005986 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
      break;
 8005afa:	e075      	b.n	8005be8 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
 8005afc:	493e      	ldr	r1, [pc, #248]	; (8005bf8 <u8x8_d_ssd1306_sh1106_generic+0x144>)
 8005afe:	68f8      	ldr	r0, [r7, #12]
 8005b00:	f7ff ff41 	bl	8005986 <u8x8_cad_SendSequence>
      break;
 8005b04:	e070      	b.n	8005be8 <u8x8_d_ssd1306_sh1106_generic+0x134>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 8005b06:	7abb      	ldrb	r3, [r7, #10]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d10a      	bne.n	8005b22 <u8x8_d_ssd1306_sh1106_generic+0x6e>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
 8005b0c:	493b      	ldr	r1, [pc, #236]	; (8005bfc <u8x8_d_ssd1306_sh1106_generic+0x148>)
 8005b0e:	68f8      	ldr	r0, [r7, #12]
 8005b10:	f7ff ff39 	bl	8005986 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	7c9a      	ldrb	r2, [r3, #18]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 8005b20:	e062      	b.n	8005be8 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
 8005b22:	4937      	ldr	r1, [pc, #220]	; (8005c00 <u8x8_d_ssd1306_sh1106_generic+0x14c>)
 8005b24:	68f8      	ldr	r0, [r7, #12]
 8005b26:	f7ff ff2e 	bl	8005986 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	7cda      	ldrb	r2, [r3, #19]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 8005b36:	e057      	b.n	8005be8 <u8x8_d_ssd1306_sh1106_generic+0x134>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8005b38:	68f8      	ldr	r0, [r7, #12]
 8005b3a:	f7ff ff04 	bl	8005946 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8005b3e:	2181      	movs	r1, #129	; 0x81
 8005b40:	68f8      	ldr	r0, [r7, #12]
 8005b42:	f7ff fec9 	bl	80058d8 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
 8005b46:	7abb      	ldrb	r3, [r7, #10]
 8005b48:	4619      	mov	r1, r3
 8005b4a:	68f8      	ldr	r0, [r7, #12]
 8005b4c:	f7ff fed6 	bl	80058fc <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8005b50:	68f8      	ldr	r0, [r7, #12]
 8005b52:	f7ff ff08 	bl	8005966 <u8x8_cad_EndTransfer>
      break;
 8005b56:	e047      	b.n	8005be8 <u8x8_d_ssd1306_sh1106_generic+0x134>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8005b58:	68f8      	ldr	r0, [r7, #12]
 8005b5a:	f7ff fef4 	bl	8005946 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	795b      	ldrb	r3, [r3, #5]
 8005b62:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 8005b64:	7dfb      	ldrb	r3, [r7, #23]
 8005b66:	00db      	lsls	r3, r3, #3
 8005b68:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8005b70:	7dfb      	ldrb	r3, [r7, #23]
 8005b72:	4413      	add	r3, r2
 8005b74:	75fb      	strb	r3, [r7, #23]
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 8005b76:	2140      	movs	r1, #64	; 0x40
 8005b78:	68f8      	ldr	r0, [r7, #12]
 8005b7a:	f7ff fead 	bl	80058d8 <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8005b7e:	7dfb      	ldrb	r3, [r7, #23]
 8005b80:	091b      	lsrs	r3, r3, #4
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	f043 0310 	orr.w	r3, r3, #16
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	4619      	mov	r1, r3
 8005b8c:	68f8      	ldr	r0, [r7, #12]
 8005b8e:	f7ff fea3 	bl	80058d8 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
 8005b92:	7dfb      	ldrb	r3, [r7, #23]
 8005b94:	f003 030f 	and.w	r3, r3, #15
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	4619      	mov	r1, r3
 8005b9c:	68f8      	ldr	r0, [r7, #12]
 8005b9e:	f7ff fead 	bl	80058fc <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	799b      	ldrb	r3, [r3, #6]
 8005ba6:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	4619      	mov	r1, r3
 8005bae:	68f8      	ldr	r0, [r7, #12]
 8005bb0:	f7ff fea4 	bl	80058fc <u8x8_cad_SendArg>

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	791b      	ldrb	r3, [r3, #4]
 8005bb8:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 8005bc0:	7dbb      	ldrb	r3, [r7, #22]
 8005bc2:	00db      	lsls	r3, r3, #3
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	693a      	ldr	r2, [r7, #16]
 8005bc8:	4619      	mov	r1, r3
 8005bca:	68f8      	ldr	r0, [r7, #12]
 8005bcc:	f7ff fea8 	bl	8005920 <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 8005bd0:	7abb      	ldrb	r3, [r7, #10]
 8005bd2:	3b01      	subs	r3, #1
 8005bd4:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8005bd6:	7abb      	ldrb	r3, [r7, #10]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d1eb      	bne.n	8005bb4 <u8x8_d_ssd1306_sh1106_generic+0x100>
      
      u8x8_cad_EndTransfer(u8x8);
 8005bdc:	68f8      	ldr	r0, [r7, #12]
 8005bde:	f7ff fec2 	bl	8005966 <u8x8_cad_EndTransfer>
      break;
 8005be2:	e001      	b.n	8005be8 <u8x8_d_ssd1306_sh1106_generic+0x134>
    default:
      return 0;
 8005be4:	2300      	movs	r3, #0
 8005be6:	e000      	b.n	8005bea <u8x8_d_ssd1306_sh1106_generic+0x136>
  }
  return 1;
 8005be8:	2301      	movs	r3, #1
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3718      	adds	r7, #24
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	0800c1b8 	.word	0x0800c1b8
 8005bf8:	0800c1c0 	.word	0x0800c1c0
 8005bfc:	0800c1c8 	.word	0x0800c1c8
 8005c00:	0800c1d0 	.word	0x0800c1d0

08005c04 <u8x8_d_ssd1306_128x64_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b084      	sub	sp, #16
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	60f8      	str	r0, [r7, #12]
 8005c0c:	607b      	str	r3, [r7, #4]
 8005c0e:	460b      	mov	r3, r1
 8005c10:	72fb      	strb	r3, [r7, #11]
 8005c12:	4613      	mov	r3, r2
 8005c14:	72bb      	strb	r3, [r7, #10]
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 8005c16:	7aba      	ldrb	r2, [r7, #10]
 8005c18:	7af9      	ldrb	r1, [r7, #11]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	68f8      	ldr	r0, [r7, #12]
 8005c1e:	f7ff ff49 	bl	8005ab4 <u8x8_d_ssd1306_sh1106_generic>
 8005c22:	4603      	mov	r3, r0
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d001      	beq.n	8005c2c <u8x8_d_ssd1306_128x64_noname+0x28>
    return 1;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	e014      	b.n	8005c56 <u8x8_d_ssd1306_128x64_noname+0x52>
  
  switch(msg)
 8005c2c:	7afb      	ldrb	r3, [r7, #11]
 8005c2e:	2b09      	cmp	r3, #9
 8005c30:	d009      	beq.n	8005c46 <u8x8_d_ssd1306_128x64_noname+0x42>
 8005c32:	2b0a      	cmp	r3, #10
 8005c34:	d10c      	bne.n	8005c50 <u8x8_d_ssd1306_128x64_noname+0x4c>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 8005c36:	68f8      	ldr	r0, [r7, #12]
 8005c38:	f000 f829 	bl	8005c8e <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
 8005c3c:	4908      	ldr	r1, [pc, #32]	; (8005c60 <u8x8_d_ssd1306_128x64_noname+0x5c>)
 8005c3e:	68f8      	ldr	r0, [r7, #12]
 8005c40:	f7ff fea1 	bl	8005986 <u8x8_cad_SendSequence>
      break;
 8005c44:	e006      	b.n	8005c54 <u8x8_d_ssd1306_128x64_noname+0x50>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
 8005c46:	4907      	ldr	r1, [pc, #28]	; (8005c64 <u8x8_d_ssd1306_128x64_noname+0x60>)
 8005c48:	68f8      	ldr	r0, [r7, #12]
 8005c4a:	f000 f80d 	bl	8005c68 <u8x8_d_helper_display_setup_memory>
      break;
 8005c4e:	e001      	b.n	8005c54 <u8x8_d_ssd1306_128x64_noname+0x50>
    default:
      return 0;
 8005c50:	2300      	movs	r3, #0
 8005c52:	e000      	b.n	8005c56 <u8x8_d_ssd1306_128x64_noname+0x52>
  }
  return 1;
 8005c54:	2301      	movs	r3, #1
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3710      	adds	r7, #16
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
 8005c5e:	bf00      	nop
 8005c60:	0800c180 	.word	0x0800c180
 8005c64:	0800c1d8 	.word	0x0800c1d8

08005c68 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b083      	sub	sp, #12
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	683a      	ldr	r2, [r7, #0]
 8005c76:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	7c9a      	ldrb	r2, [r3, #18]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8005c84:	bf00      	nop
 8005c86:	370c      	adds	r7, #12
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bc80      	pop	{r7}
 8005c8c:	4770      	bx	lr

08005c8e <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8005c8e:	b590      	push	{r4, r7, lr}
 8005c90:	b083      	sub	sp, #12
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	695c      	ldr	r4, [r3, #20]
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	2128      	movs	r1, #40	; 0x28
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	68dc      	ldr	r4, [r3, #12]
 8005ca8:	2300      	movs	r3, #0
 8005caa:	2200      	movs	r2, #0
 8005cac:	2114      	movs	r1, #20
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	214b      	movs	r1, #75	; 0x4b
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f000 f886 	bl	8005dc8 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	791b      	ldrb	r3, [r3, #4]
 8005cc2:	461a      	mov	r2, r3
 8005cc4:	2129      	movs	r1, #41	; 0x29
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f000 f87e 	bl	8005dc8 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8005ccc:	2200      	movs	r2, #0
 8005cce:	214b      	movs	r1, #75	; 0x4b
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f000 f879 	bl	8005dc8 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	791b      	ldrb	r3, [r3, #4]
 8005cdc:	461a      	mov	r2, r3
 8005cde:	2129      	movs	r1, #41	; 0x29
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f000 f871 	bl	8005dc8 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	214b      	movs	r1, #75	; 0x4b
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f000 f86c 	bl	8005dc8 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	795b      	ldrb	r3, [r3, #5]
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	2129      	movs	r1, #41	; 0x29
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f000 f864 	bl	8005dc8 <u8x8_gpio_call>
}    
 8005d00:	bf00      	nop
 8005d02:	370c      	adds	r7, #12
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd90      	pop	{r4, r7, pc}

08005d08 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8005d08:	b590      	push	{r4, r7, lr}
 8005d0a:	b085      	sub	sp, #20
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	4608      	mov	r0, r1
 8005d12:	4611      	mov	r1, r2
 8005d14:	461a      	mov	r2, r3
 8005d16:	4603      	mov	r3, r0
 8005d18:	70fb      	strb	r3, [r7, #3]
 8005d1a:	460b      	mov	r3, r1
 8005d1c:	70bb      	strb	r3, [r7, #2]
 8005d1e:	4613      	mov	r3, r2
 8005d20:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 8005d22:	78fb      	ldrb	r3, [r7, #3]
 8005d24:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8005d26:	78bb      	ldrb	r3, [r7, #2]
 8005d28:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8005d2a:	787b      	ldrb	r3, [r7, #1]
 8005d2c:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8005d2e:	6a3b      	ldr	r3, [r7, #32]
 8005d30:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	689c      	ldr	r4, [r3, #8]
 8005d36:	f107 0308 	add.w	r3, r7, #8
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	210f      	movs	r1, #15
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	47a0      	blx	r4
 8005d42:	4603      	mov	r3, r0
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3714      	adds	r7, #20
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd90      	pop	{r4, r7, pc}

08005d4c <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8005d4c:	b590      	push	{r4, r7, lr}
 8005d4e:	b083      	sub	sp, #12
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	689c      	ldr	r4, [r3, #8]
 8005d58:	2300      	movs	r3, #0
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	2109      	movs	r1, #9
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	47a0      	blx	r4
}
 8005d62:	bf00      	nop
 8005d64:	370c      	adds	r7, #12
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd90      	pop	{r4, r7, pc}

08005d6a <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8005d6a:	b590      	push	{r4, r7, lr}
 8005d6c:	b083      	sub	sp, #12
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	689c      	ldr	r4, [r3, #8]
 8005d76:	2300      	movs	r3, #0
 8005d78:	2200      	movs	r2, #0
 8005d7a:	210a      	movs	r1, #10
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	47a0      	blx	r4
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}
 8005d80:	bf00      	nop
 8005d82:	370c      	adds	r7, #12
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd90      	pop	{r4, r7, pc}

08005d88 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8005d88:	b590      	push	{r4, r7, lr}
 8005d8a:	b083      	sub	sp, #12
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	460b      	mov	r3, r1
 8005d92:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	689c      	ldr	r4, [r3, #8]
 8005d98:	78fa      	ldrb	r2, [r7, #3]
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	210b      	movs	r1, #11
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	47a0      	blx	r4
}
 8005da2:	bf00      	nop
 8005da4:	370c      	adds	r7, #12
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd90      	pop	{r4, r7, pc}

08005daa <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8005daa:	b590      	push	{r4, r7, lr}
 8005dac:	b083      	sub	sp, #12
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	689c      	ldr	r4, [r3, #8]
 8005db6:	2300      	movs	r3, #0
 8005db8:	2200      	movs	r2, #0
 8005dba:	2110      	movs	r1, #16
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	47a0      	blx	r4
}
 8005dc0:	bf00      	nop
 8005dc2:	370c      	adds	r7, #12
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd90      	pop	{r4, r7, pc}

08005dc8 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8005dc8:	b590      	push	{r4, r7, lr}
 8005dca:	b083      	sub	sp, #12
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
 8005dd0:	460b      	mov	r3, r1
 8005dd2:	70fb      	strb	r3, [r7, #3]
 8005dd4:	4613      	mov	r3, r2
 8005dd6:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	695c      	ldr	r4, [r3, #20]
 8005ddc:	78ba      	ldrb	r2, [r7, #2]
 8005dde:	78f9      	ldrb	r1, [r7, #3]
 8005de0:	2300      	movs	r3, #0
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	47a0      	blx	r4
}
 8005de6:	bf00      	nop
 8005de8:	370c      	adds	r7, #12
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd90      	pop	{r4, r7, pc}

08005dee <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8005dee:	b480      	push	{r7}
 8005df0:	b085      	sub	sp, #20
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	60f8      	str	r0, [r7, #12]
 8005df6:	607b      	str	r3, [r7, #4]
 8005df8:	460b      	mov	r3, r1
 8005dfa:	72fb      	strb	r3, [r7, #11]
 8005dfc:	4613      	mov	r3, r2
 8005dfe:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3714      	adds	r7, #20
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bc80      	pop	{r7}
 8005e0a:	4770      	bx	lr

08005e0c <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b083      	sub	sp, #12
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a11      	ldr	r2, [pc, #68]	; (8005e64 <u8x8_SetupDefaults+0x58>)
 8005e1e:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	4a10      	ldr	r2, [pc, #64]	; (8005e64 <u8x8_SetupDefaults+0x58>)
 8005e24:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	4a0e      	ldr	r2, [pc, #56]	; (8005e64 <u8x8_SetupDefaults+0x58>)
 8005e2a:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	4a0d      	ldr	r2, [pc, #52]	; (8005e64 <u8x8_SetupDefaults+0x58>)
 8005e30:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2200      	movs	r2, #0
 8005e36:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	22ff      	movs	r2, #255	; 0xff
 8005e4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	22ff      	movs	r2, #255	; 0xff
 8005e54:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8005e58:	bf00      	nop
 8005e5a:	370c      	adds	r7, #12
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bc80      	pop	{r7}
 8005e60:	4770      	bx	lr
 8005e62:	bf00      	nop
 8005e64:	08005def 	.word	0x08005def

08005e68 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b084      	sub	sp, #16
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	60b9      	str	r1, [r7, #8]
 8005e72:	607a      	str	r2, [r7, #4]
 8005e74:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8005e76:	68f8      	ldr	r0, [r7, #12]
 8005e78:	f7ff ffc8 	bl	8005e0c <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	68ba      	ldr	r2, [r7, #8]
 8005e80:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	683a      	ldr	r2, [r7, #0]
 8005e8c:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	69ba      	ldr	r2, [r7, #24]
 8005e92:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8005e94:	68f8      	ldr	r0, [r7, #12]
 8005e96:	f7ff ff59 	bl	8005d4c <u8x8_SetupMemory>
}
 8005e9a:	bf00      	nop
 8005e9c:	3710      	adds	r7, #16
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}

08005ea2 <atof>:
 8005ea2:	2100      	movs	r1, #0
 8005ea4:	f001 bd72 	b.w	800798c <strtod>

08005ea8 <__errno>:
 8005ea8:	4b01      	ldr	r3, [pc, #4]	; (8005eb0 <__errno+0x8>)
 8005eaa:	6818      	ldr	r0, [r3, #0]
 8005eac:	4770      	bx	lr
 8005eae:	bf00      	nop
 8005eb0:	2000000c 	.word	0x2000000c

08005eb4 <__libc_init_array>:
 8005eb4:	b570      	push	{r4, r5, r6, lr}
 8005eb6:	2600      	movs	r6, #0
 8005eb8:	4d0c      	ldr	r5, [pc, #48]	; (8005eec <__libc_init_array+0x38>)
 8005eba:	4c0d      	ldr	r4, [pc, #52]	; (8005ef0 <__libc_init_array+0x3c>)
 8005ebc:	1b64      	subs	r4, r4, r5
 8005ebe:	10a4      	asrs	r4, r4, #2
 8005ec0:	42a6      	cmp	r6, r4
 8005ec2:	d109      	bne.n	8005ed8 <__libc_init_array+0x24>
 8005ec4:	f005 ff2e 	bl	800bd24 <_init>
 8005ec8:	2600      	movs	r6, #0
 8005eca:	4d0a      	ldr	r5, [pc, #40]	; (8005ef4 <__libc_init_array+0x40>)
 8005ecc:	4c0a      	ldr	r4, [pc, #40]	; (8005ef8 <__libc_init_array+0x44>)
 8005ece:	1b64      	subs	r4, r4, r5
 8005ed0:	10a4      	asrs	r4, r4, #2
 8005ed2:	42a6      	cmp	r6, r4
 8005ed4:	d105      	bne.n	8005ee2 <__libc_init_array+0x2e>
 8005ed6:	bd70      	pop	{r4, r5, r6, pc}
 8005ed8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005edc:	4798      	blx	r3
 8005ede:	3601      	adds	r6, #1
 8005ee0:	e7ee      	b.n	8005ec0 <__libc_init_array+0xc>
 8005ee2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ee6:	4798      	blx	r3
 8005ee8:	3601      	adds	r6, #1
 8005eea:	e7f2      	b.n	8005ed2 <__libc_init_array+0x1e>
 8005eec:	0800c8b0 	.word	0x0800c8b0
 8005ef0:	0800c8b0 	.word	0x0800c8b0
 8005ef4:	0800c8b0 	.word	0x0800c8b0
 8005ef8:	0800c8b4 	.word	0x0800c8b4

08005efc <memcpy>:
 8005efc:	440a      	add	r2, r1
 8005efe:	4291      	cmp	r1, r2
 8005f00:	f100 33ff 	add.w	r3, r0, #4294967295
 8005f04:	d100      	bne.n	8005f08 <memcpy+0xc>
 8005f06:	4770      	bx	lr
 8005f08:	b510      	push	{r4, lr}
 8005f0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f0e:	4291      	cmp	r1, r2
 8005f10:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f14:	d1f9      	bne.n	8005f0a <memcpy+0xe>
 8005f16:	bd10      	pop	{r4, pc}

08005f18 <memset>:
 8005f18:	4603      	mov	r3, r0
 8005f1a:	4402      	add	r2, r0
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d100      	bne.n	8005f22 <memset+0xa>
 8005f20:	4770      	bx	lr
 8005f22:	f803 1b01 	strb.w	r1, [r3], #1
 8005f26:	e7f9      	b.n	8005f1c <memset+0x4>

08005f28 <__cvt>:
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f2e:	461f      	mov	r7, r3
 8005f30:	bfbb      	ittet	lt
 8005f32:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005f36:	461f      	movlt	r7, r3
 8005f38:	2300      	movge	r3, #0
 8005f3a:	232d      	movlt	r3, #45	; 0x2d
 8005f3c:	b088      	sub	sp, #32
 8005f3e:	4614      	mov	r4, r2
 8005f40:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005f42:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005f44:	7013      	strb	r3, [r2, #0]
 8005f46:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005f48:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005f4c:	f023 0820 	bic.w	r8, r3, #32
 8005f50:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005f54:	d005      	beq.n	8005f62 <__cvt+0x3a>
 8005f56:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005f5a:	d100      	bne.n	8005f5e <__cvt+0x36>
 8005f5c:	3501      	adds	r5, #1
 8005f5e:	2302      	movs	r3, #2
 8005f60:	e000      	b.n	8005f64 <__cvt+0x3c>
 8005f62:	2303      	movs	r3, #3
 8005f64:	aa07      	add	r2, sp, #28
 8005f66:	9204      	str	r2, [sp, #16]
 8005f68:	aa06      	add	r2, sp, #24
 8005f6a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005f6e:	e9cd 3500 	strd	r3, r5, [sp]
 8005f72:	4622      	mov	r2, r4
 8005f74:	463b      	mov	r3, r7
 8005f76:	f001 fedf 	bl	8007d38 <_dtoa_r>
 8005f7a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005f7e:	4606      	mov	r6, r0
 8005f80:	d102      	bne.n	8005f88 <__cvt+0x60>
 8005f82:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005f84:	07db      	lsls	r3, r3, #31
 8005f86:	d522      	bpl.n	8005fce <__cvt+0xa6>
 8005f88:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005f8c:	eb06 0905 	add.w	r9, r6, r5
 8005f90:	d110      	bne.n	8005fb4 <__cvt+0x8c>
 8005f92:	7833      	ldrb	r3, [r6, #0]
 8005f94:	2b30      	cmp	r3, #48	; 0x30
 8005f96:	d10a      	bne.n	8005fae <__cvt+0x86>
 8005f98:	2200      	movs	r2, #0
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	4620      	mov	r0, r4
 8005f9e:	4639      	mov	r1, r7
 8005fa0:	f7fa fd02 	bl	80009a8 <__aeabi_dcmpeq>
 8005fa4:	b918      	cbnz	r0, 8005fae <__cvt+0x86>
 8005fa6:	f1c5 0501 	rsb	r5, r5, #1
 8005faa:	f8ca 5000 	str.w	r5, [sl]
 8005fae:	f8da 3000 	ldr.w	r3, [sl]
 8005fb2:	4499      	add	r9, r3
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	4620      	mov	r0, r4
 8005fba:	4639      	mov	r1, r7
 8005fbc:	f7fa fcf4 	bl	80009a8 <__aeabi_dcmpeq>
 8005fc0:	b108      	cbz	r0, 8005fc6 <__cvt+0x9e>
 8005fc2:	f8cd 901c 	str.w	r9, [sp, #28]
 8005fc6:	2230      	movs	r2, #48	; 0x30
 8005fc8:	9b07      	ldr	r3, [sp, #28]
 8005fca:	454b      	cmp	r3, r9
 8005fcc:	d307      	bcc.n	8005fde <__cvt+0xb6>
 8005fce:	4630      	mov	r0, r6
 8005fd0:	9b07      	ldr	r3, [sp, #28]
 8005fd2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005fd4:	1b9b      	subs	r3, r3, r6
 8005fd6:	6013      	str	r3, [r2, #0]
 8005fd8:	b008      	add	sp, #32
 8005fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fde:	1c59      	adds	r1, r3, #1
 8005fe0:	9107      	str	r1, [sp, #28]
 8005fe2:	701a      	strb	r2, [r3, #0]
 8005fe4:	e7f0      	b.n	8005fc8 <__cvt+0xa0>

08005fe6 <__exponent>:
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005fea:	2900      	cmp	r1, #0
 8005fec:	f803 2b02 	strb.w	r2, [r3], #2
 8005ff0:	bfb6      	itet	lt
 8005ff2:	222d      	movlt	r2, #45	; 0x2d
 8005ff4:	222b      	movge	r2, #43	; 0x2b
 8005ff6:	4249      	neglt	r1, r1
 8005ff8:	2909      	cmp	r1, #9
 8005ffa:	7042      	strb	r2, [r0, #1]
 8005ffc:	dd2b      	ble.n	8006056 <__exponent+0x70>
 8005ffe:	f10d 0407 	add.w	r4, sp, #7
 8006002:	46a4      	mov	ip, r4
 8006004:	270a      	movs	r7, #10
 8006006:	fb91 f6f7 	sdiv	r6, r1, r7
 800600a:	460a      	mov	r2, r1
 800600c:	46a6      	mov	lr, r4
 800600e:	fb07 1516 	mls	r5, r7, r6, r1
 8006012:	2a63      	cmp	r2, #99	; 0x63
 8006014:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8006018:	4631      	mov	r1, r6
 800601a:	f104 34ff 	add.w	r4, r4, #4294967295
 800601e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006022:	dcf0      	bgt.n	8006006 <__exponent+0x20>
 8006024:	3130      	adds	r1, #48	; 0x30
 8006026:	f1ae 0502 	sub.w	r5, lr, #2
 800602a:	f804 1c01 	strb.w	r1, [r4, #-1]
 800602e:	4629      	mov	r1, r5
 8006030:	1c44      	adds	r4, r0, #1
 8006032:	4561      	cmp	r1, ip
 8006034:	d30a      	bcc.n	800604c <__exponent+0x66>
 8006036:	f10d 0209 	add.w	r2, sp, #9
 800603a:	eba2 020e 	sub.w	r2, r2, lr
 800603e:	4565      	cmp	r5, ip
 8006040:	bf88      	it	hi
 8006042:	2200      	movhi	r2, #0
 8006044:	4413      	add	r3, r2
 8006046:	1a18      	subs	r0, r3, r0
 8006048:	b003      	add	sp, #12
 800604a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800604c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006050:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006054:	e7ed      	b.n	8006032 <__exponent+0x4c>
 8006056:	2330      	movs	r3, #48	; 0x30
 8006058:	3130      	adds	r1, #48	; 0x30
 800605a:	7083      	strb	r3, [r0, #2]
 800605c:	70c1      	strb	r1, [r0, #3]
 800605e:	1d03      	adds	r3, r0, #4
 8006060:	e7f1      	b.n	8006046 <__exponent+0x60>
	...

08006064 <_printf_float>:
 8006064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006068:	b091      	sub	sp, #68	; 0x44
 800606a:	460c      	mov	r4, r1
 800606c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006070:	4616      	mov	r6, r2
 8006072:	461f      	mov	r7, r3
 8006074:	4605      	mov	r5, r0
 8006076:	f003 f967 	bl	8009348 <_localeconv_r>
 800607a:	6803      	ldr	r3, [r0, #0]
 800607c:	4618      	mov	r0, r3
 800607e:	9309      	str	r3, [sp, #36]	; 0x24
 8006080:	f7fa f866 	bl	8000150 <strlen>
 8006084:	2300      	movs	r3, #0
 8006086:	930e      	str	r3, [sp, #56]	; 0x38
 8006088:	f8d8 3000 	ldr.w	r3, [r8]
 800608c:	900a      	str	r0, [sp, #40]	; 0x28
 800608e:	3307      	adds	r3, #7
 8006090:	f023 0307 	bic.w	r3, r3, #7
 8006094:	f103 0208 	add.w	r2, r3, #8
 8006098:	f894 9018 	ldrb.w	r9, [r4, #24]
 800609c:	f8d4 b000 	ldr.w	fp, [r4]
 80060a0:	f8c8 2000 	str.w	r2, [r8]
 80060a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80060ac:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80060b0:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80060b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80060b6:	f04f 32ff 	mov.w	r2, #4294967295
 80060ba:	4640      	mov	r0, r8
 80060bc:	4b9c      	ldr	r3, [pc, #624]	; (8006330 <_printf_float+0x2cc>)
 80060be:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80060c0:	f7fa fca4 	bl	8000a0c <__aeabi_dcmpun>
 80060c4:	bb70      	cbnz	r0, 8006124 <_printf_float+0xc0>
 80060c6:	f04f 32ff 	mov.w	r2, #4294967295
 80060ca:	4640      	mov	r0, r8
 80060cc:	4b98      	ldr	r3, [pc, #608]	; (8006330 <_printf_float+0x2cc>)
 80060ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80060d0:	f7fa fc7e 	bl	80009d0 <__aeabi_dcmple>
 80060d4:	bb30      	cbnz	r0, 8006124 <_printf_float+0xc0>
 80060d6:	2200      	movs	r2, #0
 80060d8:	2300      	movs	r3, #0
 80060da:	4640      	mov	r0, r8
 80060dc:	4651      	mov	r1, sl
 80060de:	f7fa fc6d 	bl	80009bc <__aeabi_dcmplt>
 80060e2:	b110      	cbz	r0, 80060ea <_printf_float+0x86>
 80060e4:	232d      	movs	r3, #45	; 0x2d
 80060e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060ea:	4b92      	ldr	r3, [pc, #584]	; (8006334 <_printf_float+0x2d0>)
 80060ec:	4892      	ldr	r0, [pc, #584]	; (8006338 <_printf_float+0x2d4>)
 80060ee:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80060f2:	bf94      	ite	ls
 80060f4:	4698      	movls	r8, r3
 80060f6:	4680      	movhi	r8, r0
 80060f8:	2303      	movs	r3, #3
 80060fa:	f04f 0a00 	mov.w	sl, #0
 80060fe:	6123      	str	r3, [r4, #16]
 8006100:	f02b 0304 	bic.w	r3, fp, #4
 8006104:	6023      	str	r3, [r4, #0]
 8006106:	4633      	mov	r3, r6
 8006108:	4621      	mov	r1, r4
 800610a:	4628      	mov	r0, r5
 800610c:	9700      	str	r7, [sp, #0]
 800610e:	aa0f      	add	r2, sp, #60	; 0x3c
 8006110:	f000 f9d4 	bl	80064bc <_printf_common>
 8006114:	3001      	adds	r0, #1
 8006116:	f040 8090 	bne.w	800623a <_printf_float+0x1d6>
 800611a:	f04f 30ff 	mov.w	r0, #4294967295
 800611e:	b011      	add	sp, #68	; 0x44
 8006120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006124:	4642      	mov	r2, r8
 8006126:	4653      	mov	r3, sl
 8006128:	4640      	mov	r0, r8
 800612a:	4651      	mov	r1, sl
 800612c:	f7fa fc6e 	bl	8000a0c <__aeabi_dcmpun>
 8006130:	b148      	cbz	r0, 8006146 <_printf_float+0xe2>
 8006132:	f1ba 0f00 	cmp.w	sl, #0
 8006136:	bfb8      	it	lt
 8006138:	232d      	movlt	r3, #45	; 0x2d
 800613a:	4880      	ldr	r0, [pc, #512]	; (800633c <_printf_float+0x2d8>)
 800613c:	bfb8      	it	lt
 800613e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006142:	4b7f      	ldr	r3, [pc, #508]	; (8006340 <_printf_float+0x2dc>)
 8006144:	e7d3      	b.n	80060ee <_printf_float+0x8a>
 8006146:	6863      	ldr	r3, [r4, #4]
 8006148:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800614c:	1c5a      	adds	r2, r3, #1
 800614e:	d142      	bne.n	80061d6 <_printf_float+0x172>
 8006150:	2306      	movs	r3, #6
 8006152:	6063      	str	r3, [r4, #4]
 8006154:	2200      	movs	r2, #0
 8006156:	9206      	str	r2, [sp, #24]
 8006158:	aa0e      	add	r2, sp, #56	; 0x38
 800615a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800615e:	aa0d      	add	r2, sp, #52	; 0x34
 8006160:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006164:	9203      	str	r2, [sp, #12]
 8006166:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800616a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800616e:	6023      	str	r3, [r4, #0]
 8006170:	6863      	ldr	r3, [r4, #4]
 8006172:	4642      	mov	r2, r8
 8006174:	9300      	str	r3, [sp, #0]
 8006176:	4628      	mov	r0, r5
 8006178:	4653      	mov	r3, sl
 800617a:	910b      	str	r1, [sp, #44]	; 0x2c
 800617c:	f7ff fed4 	bl	8005f28 <__cvt>
 8006180:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006182:	4680      	mov	r8, r0
 8006184:	2947      	cmp	r1, #71	; 0x47
 8006186:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006188:	d108      	bne.n	800619c <_printf_float+0x138>
 800618a:	1cc8      	adds	r0, r1, #3
 800618c:	db02      	blt.n	8006194 <_printf_float+0x130>
 800618e:	6863      	ldr	r3, [r4, #4]
 8006190:	4299      	cmp	r1, r3
 8006192:	dd40      	ble.n	8006216 <_printf_float+0x1b2>
 8006194:	f1a9 0902 	sub.w	r9, r9, #2
 8006198:	fa5f f989 	uxtb.w	r9, r9
 800619c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80061a0:	d81f      	bhi.n	80061e2 <_printf_float+0x17e>
 80061a2:	464a      	mov	r2, r9
 80061a4:	3901      	subs	r1, #1
 80061a6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80061aa:	910d      	str	r1, [sp, #52]	; 0x34
 80061ac:	f7ff ff1b 	bl	8005fe6 <__exponent>
 80061b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80061b2:	4682      	mov	sl, r0
 80061b4:	1813      	adds	r3, r2, r0
 80061b6:	2a01      	cmp	r2, #1
 80061b8:	6123      	str	r3, [r4, #16]
 80061ba:	dc02      	bgt.n	80061c2 <_printf_float+0x15e>
 80061bc:	6822      	ldr	r2, [r4, #0]
 80061be:	07d2      	lsls	r2, r2, #31
 80061c0:	d501      	bpl.n	80061c6 <_printf_float+0x162>
 80061c2:	3301      	adds	r3, #1
 80061c4:	6123      	str	r3, [r4, #16]
 80061c6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d09b      	beq.n	8006106 <_printf_float+0xa2>
 80061ce:	232d      	movs	r3, #45	; 0x2d
 80061d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061d4:	e797      	b.n	8006106 <_printf_float+0xa2>
 80061d6:	2947      	cmp	r1, #71	; 0x47
 80061d8:	d1bc      	bne.n	8006154 <_printf_float+0xf0>
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d1ba      	bne.n	8006154 <_printf_float+0xf0>
 80061de:	2301      	movs	r3, #1
 80061e0:	e7b7      	b.n	8006152 <_printf_float+0xee>
 80061e2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80061e6:	d118      	bne.n	800621a <_printf_float+0x1b6>
 80061e8:	2900      	cmp	r1, #0
 80061ea:	6863      	ldr	r3, [r4, #4]
 80061ec:	dd0b      	ble.n	8006206 <_printf_float+0x1a2>
 80061ee:	6121      	str	r1, [r4, #16]
 80061f0:	b913      	cbnz	r3, 80061f8 <_printf_float+0x194>
 80061f2:	6822      	ldr	r2, [r4, #0]
 80061f4:	07d0      	lsls	r0, r2, #31
 80061f6:	d502      	bpl.n	80061fe <_printf_float+0x19a>
 80061f8:	3301      	adds	r3, #1
 80061fa:	440b      	add	r3, r1
 80061fc:	6123      	str	r3, [r4, #16]
 80061fe:	f04f 0a00 	mov.w	sl, #0
 8006202:	65a1      	str	r1, [r4, #88]	; 0x58
 8006204:	e7df      	b.n	80061c6 <_printf_float+0x162>
 8006206:	b913      	cbnz	r3, 800620e <_printf_float+0x1aa>
 8006208:	6822      	ldr	r2, [r4, #0]
 800620a:	07d2      	lsls	r2, r2, #31
 800620c:	d501      	bpl.n	8006212 <_printf_float+0x1ae>
 800620e:	3302      	adds	r3, #2
 8006210:	e7f4      	b.n	80061fc <_printf_float+0x198>
 8006212:	2301      	movs	r3, #1
 8006214:	e7f2      	b.n	80061fc <_printf_float+0x198>
 8006216:	f04f 0967 	mov.w	r9, #103	; 0x67
 800621a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800621c:	4299      	cmp	r1, r3
 800621e:	db05      	blt.n	800622c <_printf_float+0x1c8>
 8006220:	6823      	ldr	r3, [r4, #0]
 8006222:	6121      	str	r1, [r4, #16]
 8006224:	07d8      	lsls	r0, r3, #31
 8006226:	d5ea      	bpl.n	80061fe <_printf_float+0x19a>
 8006228:	1c4b      	adds	r3, r1, #1
 800622a:	e7e7      	b.n	80061fc <_printf_float+0x198>
 800622c:	2900      	cmp	r1, #0
 800622e:	bfcc      	ite	gt
 8006230:	2201      	movgt	r2, #1
 8006232:	f1c1 0202 	rsble	r2, r1, #2
 8006236:	4413      	add	r3, r2
 8006238:	e7e0      	b.n	80061fc <_printf_float+0x198>
 800623a:	6823      	ldr	r3, [r4, #0]
 800623c:	055a      	lsls	r2, r3, #21
 800623e:	d407      	bmi.n	8006250 <_printf_float+0x1ec>
 8006240:	6923      	ldr	r3, [r4, #16]
 8006242:	4642      	mov	r2, r8
 8006244:	4631      	mov	r1, r6
 8006246:	4628      	mov	r0, r5
 8006248:	47b8      	blx	r7
 800624a:	3001      	adds	r0, #1
 800624c:	d12b      	bne.n	80062a6 <_printf_float+0x242>
 800624e:	e764      	b.n	800611a <_printf_float+0xb6>
 8006250:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006254:	f240 80dd 	bls.w	8006412 <_printf_float+0x3ae>
 8006258:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800625c:	2200      	movs	r2, #0
 800625e:	2300      	movs	r3, #0
 8006260:	f7fa fba2 	bl	80009a8 <__aeabi_dcmpeq>
 8006264:	2800      	cmp	r0, #0
 8006266:	d033      	beq.n	80062d0 <_printf_float+0x26c>
 8006268:	2301      	movs	r3, #1
 800626a:	4631      	mov	r1, r6
 800626c:	4628      	mov	r0, r5
 800626e:	4a35      	ldr	r2, [pc, #212]	; (8006344 <_printf_float+0x2e0>)
 8006270:	47b8      	blx	r7
 8006272:	3001      	adds	r0, #1
 8006274:	f43f af51 	beq.w	800611a <_printf_float+0xb6>
 8006278:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800627c:	429a      	cmp	r2, r3
 800627e:	db02      	blt.n	8006286 <_printf_float+0x222>
 8006280:	6823      	ldr	r3, [r4, #0]
 8006282:	07d8      	lsls	r0, r3, #31
 8006284:	d50f      	bpl.n	80062a6 <_printf_float+0x242>
 8006286:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800628a:	4631      	mov	r1, r6
 800628c:	4628      	mov	r0, r5
 800628e:	47b8      	blx	r7
 8006290:	3001      	adds	r0, #1
 8006292:	f43f af42 	beq.w	800611a <_printf_float+0xb6>
 8006296:	f04f 0800 	mov.w	r8, #0
 800629a:	f104 091a 	add.w	r9, r4, #26
 800629e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80062a0:	3b01      	subs	r3, #1
 80062a2:	4543      	cmp	r3, r8
 80062a4:	dc09      	bgt.n	80062ba <_printf_float+0x256>
 80062a6:	6823      	ldr	r3, [r4, #0]
 80062a8:	079b      	lsls	r3, r3, #30
 80062aa:	f100 8102 	bmi.w	80064b2 <_printf_float+0x44e>
 80062ae:	68e0      	ldr	r0, [r4, #12]
 80062b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80062b2:	4298      	cmp	r0, r3
 80062b4:	bfb8      	it	lt
 80062b6:	4618      	movlt	r0, r3
 80062b8:	e731      	b.n	800611e <_printf_float+0xba>
 80062ba:	2301      	movs	r3, #1
 80062bc:	464a      	mov	r2, r9
 80062be:	4631      	mov	r1, r6
 80062c0:	4628      	mov	r0, r5
 80062c2:	47b8      	blx	r7
 80062c4:	3001      	adds	r0, #1
 80062c6:	f43f af28 	beq.w	800611a <_printf_float+0xb6>
 80062ca:	f108 0801 	add.w	r8, r8, #1
 80062ce:	e7e6      	b.n	800629e <_printf_float+0x23a>
 80062d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	dc38      	bgt.n	8006348 <_printf_float+0x2e4>
 80062d6:	2301      	movs	r3, #1
 80062d8:	4631      	mov	r1, r6
 80062da:	4628      	mov	r0, r5
 80062dc:	4a19      	ldr	r2, [pc, #100]	; (8006344 <_printf_float+0x2e0>)
 80062de:	47b8      	blx	r7
 80062e0:	3001      	adds	r0, #1
 80062e2:	f43f af1a 	beq.w	800611a <_printf_float+0xb6>
 80062e6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80062ea:	4313      	orrs	r3, r2
 80062ec:	d102      	bne.n	80062f4 <_printf_float+0x290>
 80062ee:	6823      	ldr	r3, [r4, #0]
 80062f0:	07d9      	lsls	r1, r3, #31
 80062f2:	d5d8      	bpl.n	80062a6 <_printf_float+0x242>
 80062f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80062f8:	4631      	mov	r1, r6
 80062fa:	4628      	mov	r0, r5
 80062fc:	47b8      	blx	r7
 80062fe:	3001      	adds	r0, #1
 8006300:	f43f af0b 	beq.w	800611a <_printf_float+0xb6>
 8006304:	f04f 0900 	mov.w	r9, #0
 8006308:	f104 0a1a 	add.w	sl, r4, #26
 800630c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800630e:	425b      	negs	r3, r3
 8006310:	454b      	cmp	r3, r9
 8006312:	dc01      	bgt.n	8006318 <_printf_float+0x2b4>
 8006314:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006316:	e794      	b.n	8006242 <_printf_float+0x1de>
 8006318:	2301      	movs	r3, #1
 800631a:	4652      	mov	r2, sl
 800631c:	4631      	mov	r1, r6
 800631e:	4628      	mov	r0, r5
 8006320:	47b8      	blx	r7
 8006322:	3001      	adds	r0, #1
 8006324:	f43f aef9 	beq.w	800611a <_printf_float+0xb6>
 8006328:	f109 0901 	add.w	r9, r9, #1
 800632c:	e7ee      	b.n	800630c <_printf_float+0x2a8>
 800632e:	bf00      	nop
 8006330:	7fefffff 	.word	0x7fefffff
 8006334:	0800c1f4 	.word	0x0800c1f4
 8006338:	0800c1f8 	.word	0x0800c1f8
 800633c:	0800c200 	.word	0x0800c200
 8006340:	0800c1fc 	.word	0x0800c1fc
 8006344:	0800c204 	.word	0x0800c204
 8006348:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800634a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800634c:	429a      	cmp	r2, r3
 800634e:	bfa8      	it	ge
 8006350:	461a      	movge	r2, r3
 8006352:	2a00      	cmp	r2, #0
 8006354:	4691      	mov	r9, r2
 8006356:	dc37      	bgt.n	80063c8 <_printf_float+0x364>
 8006358:	f04f 0b00 	mov.w	fp, #0
 800635c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006360:	f104 021a 	add.w	r2, r4, #26
 8006364:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006368:	ebaa 0309 	sub.w	r3, sl, r9
 800636c:	455b      	cmp	r3, fp
 800636e:	dc33      	bgt.n	80063d8 <_printf_float+0x374>
 8006370:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006374:	429a      	cmp	r2, r3
 8006376:	db3b      	blt.n	80063f0 <_printf_float+0x38c>
 8006378:	6823      	ldr	r3, [r4, #0]
 800637a:	07da      	lsls	r2, r3, #31
 800637c:	d438      	bmi.n	80063f0 <_printf_float+0x38c>
 800637e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006380:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006382:	eba3 020a 	sub.w	r2, r3, sl
 8006386:	eba3 0901 	sub.w	r9, r3, r1
 800638a:	4591      	cmp	r9, r2
 800638c:	bfa8      	it	ge
 800638e:	4691      	movge	r9, r2
 8006390:	f1b9 0f00 	cmp.w	r9, #0
 8006394:	dc34      	bgt.n	8006400 <_printf_float+0x39c>
 8006396:	f04f 0800 	mov.w	r8, #0
 800639a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800639e:	f104 0a1a 	add.w	sl, r4, #26
 80063a2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80063a6:	1a9b      	subs	r3, r3, r2
 80063a8:	eba3 0309 	sub.w	r3, r3, r9
 80063ac:	4543      	cmp	r3, r8
 80063ae:	f77f af7a 	ble.w	80062a6 <_printf_float+0x242>
 80063b2:	2301      	movs	r3, #1
 80063b4:	4652      	mov	r2, sl
 80063b6:	4631      	mov	r1, r6
 80063b8:	4628      	mov	r0, r5
 80063ba:	47b8      	blx	r7
 80063bc:	3001      	adds	r0, #1
 80063be:	f43f aeac 	beq.w	800611a <_printf_float+0xb6>
 80063c2:	f108 0801 	add.w	r8, r8, #1
 80063c6:	e7ec      	b.n	80063a2 <_printf_float+0x33e>
 80063c8:	4613      	mov	r3, r2
 80063ca:	4631      	mov	r1, r6
 80063cc:	4642      	mov	r2, r8
 80063ce:	4628      	mov	r0, r5
 80063d0:	47b8      	blx	r7
 80063d2:	3001      	adds	r0, #1
 80063d4:	d1c0      	bne.n	8006358 <_printf_float+0x2f4>
 80063d6:	e6a0      	b.n	800611a <_printf_float+0xb6>
 80063d8:	2301      	movs	r3, #1
 80063da:	4631      	mov	r1, r6
 80063dc:	4628      	mov	r0, r5
 80063de:	920b      	str	r2, [sp, #44]	; 0x2c
 80063e0:	47b8      	blx	r7
 80063e2:	3001      	adds	r0, #1
 80063e4:	f43f ae99 	beq.w	800611a <_printf_float+0xb6>
 80063e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80063ea:	f10b 0b01 	add.w	fp, fp, #1
 80063ee:	e7b9      	b.n	8006364 <_printf_float+0x300>
 80063f0:	4631      	mov	r1, r6
 80063f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80063f6:	4628      	mov	r0, r5
 80063f8:	47b8      	blx	r7
 80063fa:	3001      	adds	r0, #1
 80063fc:	d1bf      	bne.n	800637e <_printf_float+0x31a>
 80063fe:	e68c      	b.n	800611a <_printf_float+0xb6>
 8006400:	464b      	mov	r3, r9
 8006402:	4631      	mov	r1, r6
 8006404:	4628      	mov	r0, r5
 8006406:	eb08 020a 	add.w	r2, r8, sl
 800640a:	47b8      	blx	r7
 800640c:	3001      	adds	r0, #1
 800640e:	d1c2      	bne.n	8006396 <_printf_float+0x332>
 8006410:	e683      	b.n	800611a <_printf_float+0xb6>
 8006412:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006414:	2a01      	cmp	r2, #1
 8006416:	dc01      	bgt.n	800641c <_printf_float+0x3b8>
 8006418:	07db      	lsls	r3, r3, #31
 800641a:	d537      	bpl.n	800648c <_printf_float+0x428>
 800641c:	2301      	movs	r3, #1
 800641e:	4642      	mov	r2, r8
 8006420:	4631      	mov	r1, r6
 8006422:	4628      	mov	r0, r5
 8006424:	47b8      	blx	r7
 8006426:	3001      	adds	r0, #1
 8006428:	f43f ae77 	beq.w	800611a <_printf_float+0xb6>
 800642c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006430:	4631      	mov	r1, r6
 8006432:	4628      	mov	r0, r5
 8006434:	47b8      	blx	r7
 8006436:	3001      	adds	r0, #1
 8006438:	f43f ae6f 	beq.w	800611a <_printf_float+0xb6>
 800643c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006440:	2200      	movs	r2, #0
 8006442:	2300      	movs	r3, #0
 8006444:	f7fa fab0 	bl	80009a8 <__aeabi_dcmpeq>
 8006448:	b9d8      	cbnz	r0, 8006482 <_printf_float+0x41e>
 800644a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800644c:	f108 0201 	add.w	r2, r8, #1
 8006450:	3b01      	subs	r3, #1
 8006452:	4631      	mov	r1, r6
 8006454:	4628      	mov	r0, r5
 8006456:	47b8      	blx	r7
 8006458:	3001      	adds	r0, #1
 800645a:	d10e      	bne.n	800647a <_printf_float+0x416>
 800645c:	e65d      	b.n	800611a <_printf_float+0xb6>
 800645e:	2301      	movs	r3, #1
 8006460:	464a      	mov	r2, r9
 8006462:	4631      	mov	r1, r6
 8006464:	4628      	mov	r0, r5
 8006466:	47b8      	blx	r7
 8006468:	3001      	adds	r0, #1
 800646a:	f43f ae56 	beq.w	800611a <_printf_float+0xb6>
 800646e:	f108 0801 	add.w	r8, r8, #1
 8006472:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006474:	3b01      	subs	r3, #1
 8006476:	4543      	cmp	r3, r8
 8006478:	dcf1      	bgt.n	800645e <_printf_float+0x3fa>
 800647a:	4653      	mov	r3, sl
 800647c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006480:	e6e0      	b.n	8006244 <_printf_float+0x1e0>
 8006482:	f04f 0800 	mov.w	r8, #0
 8006486:	f104 091a 	add.w	r9, r4, #26
 800648a:	e7f2      	b.n	8006472 <_printf_float+0x40e>
 800648c:	2301      	movs	r3, #1
 800648e:	4642      	mov	r2, r8
 8006490:	e7df      	b.n	8006452 <_printf_float+0x3ee>
 8006492:	2301      	movs	r3, #1
 8006494:	464a      	mov	r2, r9
 8006496:	4631      	mov	r1, r6
 8006498:	4628      	mov	r0, r5
 800649a:	47b8      	blx	r7
 800649c:	3001      	adds	r0, #1
 800649e:	f43f ae3c 	beq.w	800611a <_printf_float+0xb6>
 80064a2:	f108 0801 	add.w	r8, r8, #1
 80064a6:	68e3      	ldr	r3, [r4, #12]
 80064a8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80064aa:	1a5b      	subs	r3, r3, r1
 80064ac:	4543      	cmp	r3, r8
 80064ae:	dcf0      	bgt.n	8006492 <_printf_float+0x42e>
 80064b0:	e6fd      	b.n	80062ae <_printf_float+0x24a>
 80064b2:	f04f 0800 	mov.w	r8, #0
 80064b6:	f104 0919 	add.w	r9, r4, #25
 80064ba:	e7f4      	b.n	80064a6 <_printf_float+0x442>

080064bc <_printf_common>:
 80064bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064c0:	4616      	mov	r6, r2
 80064c2:	4699      	mov	r9, r3
 80064c4:	688a      	ldr	r2, [r1, #8]
 80064c6:	690b      	ldr	r3, [r1, #16]
 80064c8:	4607      	mov	r7, r0
 80064ca:	4293      	cmp	r3, r2
 80064cc:	bfb8      	it	lt
 80064ce:	4613      	movlt	r3, r2
 80064d0:	6033      	str	r3, [r6, #0]
 80064d2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80064d6:	460c      	mov	r4, r1
 80064d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80064dc:	b10a      	cbz	r2, 80064e2 <_printf_common+0x26>
 80064de:	3301      	adds	r3, #1
 80064e0:	6033      	str	r3, [r6, #0]
 80064e2:	6823      	ldr	r3, [r4, #0]
 80064e4:	0699      	lsls	r1, r3, #26
 80064e6:	bf42      	ittt	mi
 80064e8:	6833      	ldrmi	r3, [r6, #0]
 80064ea:	3302      	addmi	r3, #2
 80064ec:	6033      	strmi	r3, [r6, #0]
 80064ee:	6825      	ldr	r5, [r4, #0]
 80064f0:	f015 0506 	ands.w	r5, r5, #6
 80064f4:	d106      	bne.n	8006504 <_printf_common+0x48>
 80064f6:	f104 0a19 	add.w	sl, r4, #25
 80064fa:	68e3      	ldr	r3, [r4, #12]
 80064fc:	6832      	ldr	r2, [r6, #0]
 80064fe:	1a9b      	subs	r3, r3, r2
 8006500:	42ab      	cmp	r3, r5
 8006502:	dc28      	bgt.n	8006556 <_printf_common+0x9a>
 8006504:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006508:	1e13      	subs	r3, r2, #0
 800650a:	6822      	ldr	r2, [r4, #0]
 800650c:	bf18      	it	ne
 800650e:	2301      	movne	r3, #1
 8006510:	0692      	lsls	r2, r2, #26
 8006512:	d42d      	bmi.n	8006570 <_printf_common+0xb4>
 8006514:	4649      	mov	r1, r9
 8006516:	4638      	mov	r0, r7
 8006518:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800651c:	47c0      	blx	r8
 800651e:	3001      	adds	r0, #1
 8006520:	d020      	beq.n	8006564 <_printf_common+0xa8>
 8006522:	6823      	ldr	r3, [r4, #0]
 8006524:	68e5      	ldr	r5, [r4, #12]
 8006526:	f003 0306 	and.w	r3, r3, #6
 800652a:	2b04      	cmp	r3, #4
 800652c:	bf18      	it	ne
 800652e:	2500      	movne	r5, #0
 8006530:	6832      	ldr	r2, [r6, #0]
 8006532:	f04f 0600 	mov.w	r6, #0
 8006536:	68a3      	ldr	r3, [r4, #8]
 8006538:	bf08      	it	eq
 800653a:	1aad      	subeq	r5, r5, r2
 800653c:	6922      	ldr	r2, [r4, #16]
 800653e:	bf08      	it	eq
 8006540:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006544:	4293      	cmp	r3, r2
 8006546:	bfc4      	itt	gt
 8006548:	1a9b      	subgt	r3, r3, r2
 800654a:	18ed      	addgt	r5, r5, r3
 800654c:	341a      	adds	r4, #26
 800654e:	42b5      	cmp	r5, r6
 8006550:	d11a      	bne.n	8006588 <_printf_common+0xcc>
 8006552:	2000      	movs	r0, #0
 8006554:	e008      	b.n	8006568 <_printf_common+0xac>
 8006556:	2301      	movs	r3, #1
 8006558:	4652      	mov	r2, sl
 800655a:	4649      	mov	r1, r9
 800655c:	4638      	mov	r0, r7
 800655e:	47c0      	blx	r8
 8006560:	3001      	adds	r0, #1
 8006562:	d103      	bne.n	800656c <_printf_common+0xb0>
 8006564:	f04f 30ff 	mov.w	r0, #4294967295
 8006568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800656c:	3501      	adds	r5, #1
 800656e:	e7c4      	b.n	80064fa <_printf_common+0x3e>
 8006570:	2030      	movs	r0, #48	; 0x30
 8006572:	18e1      	adds	r1, r4, r3
 8006574:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006578:	1c5a      	adds	r2, r3, #1
 800657a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800657e:	4422      	add	r2, r4
 8006580:	3302      	adds	r3, #2
 8006582:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006586:	e7c5      	b.n	8006514 <_printf_common+0x58>
 8006588:	2301      	movs	r3, #1
 800658a:	4622      	mov	r2, r4
 800658c:	4649      	mov	r1, r9
 800658e:	4638      	mov	r0, r7
 8006590:	47c0      	blx	r8
 8006592:	3001      	adds	r0, #1
 8006594:	d0e6      	beq.n	8006564 <_printf_common+0xa8>
 8006596:	3601      	adds	r6, #1
 8006598:	e7d9      	b.n	800654e <_printf_common+0x92>
	...

0800659c <_printf_i>:
 800659c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80065a0:	7e0f      	ldrb	r7, [r1, #24]
 80065a2:	4691      	mov	r9, r2
 80065a4:	2f78      	cmp	r7, #120	; 0x78
 80065a6:	4680      	mov	r8, r0
 80065a8:	460c      	mov	r4, r1
 80065aa:	469a      	mov	sl, r3
 80065ac:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80065ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80065b2:	d807      	bhi.n	80065c4 <_printf_i+0x28>
 80065b4:	2f62      	cmp	r7, #98	; 0x62
 80065b6:	d80a      	bhi.n	80065ce <_printf_i+0x32>
 80065b8:	2f00      	cmp	r7, #0
 80065ba:	f000 80d9 	beq.w	8006770 <_printf_i+0x1d4>
 80065be:	2f58      	cmp	r7, #88	; 0x58
 80065c0:	f000 80a4 	beq.w	800670c <_printf_i+0x170>
 80065c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80065c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80065cc:	e03a      	b.n	8006644 <_printf_i+0xa8>
 80065ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80065d2:	2b15      	cmp	r3, #21
 80065d4:	d8f6      	bhi.n	80065c4 <_printf_i+0x28>
 80065d6:	a101      	add	r1, pc, #4	; (adr r1, 80065dc <_printf_i+0x40>)
 80065d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80065dc:	08006635 	.word	0x08006635
 80065e0:	08006649 	.word	0x08006649
 80065e4:	080065c5 	.word	0x080065c5
 80065e8:	080065c5 	.word	0x080065c5
 80065ec:	080065c5 	.word	0x080065c5
 80065f0:	080065c5 	.word	0x080065c5
 80065f4:	08006649 	.word	0x08006649
 80065f8:	080065c5 	.word	0x080065c5
 80065fc:	080065c5 	.word	0x080065c5
 8006600:	080065c5 	.word	0x080065c5
 8006604:	080065c5 	.word	0x080065c5
 8006608:	08006757 	.word	0x08006757
 800660c:	08006679 	.word	0x08006679
 8006610:	08006739 	.word	0x08006739
 8006614:	080065c5 	.word	0x080065c5
 8006618:	080065c5 	.word	0x080065c5
 800661c:	08006779 	.word	0x08006779
 8006620:	080065c5 	.word	0x080065c5
 8006624:	08006679 	.word	0x08006679
 8006628:	080065c5 	.word	0x080065c5
 800662c:	080065c5 	.word	0x080065c5
 8006630:	08006741 	.word	0x08006741
 8006634:	682b      	ldr	r3, [r5, #0]
 8006636:	1d1a      	adds	r2, r3, #4
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	602a      	str	r2, [r5, #0]
 800663c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006640:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006644:	2301      	movs	r3, #1
 8006646:	e0a4      	b.n	8006792 <_printf_i+0x1f6>
 8006648:	6820      	ldr	r0, [r4, #0]
 800664a:	6829      	ldr	r1, [r5, #0]
 800664c:	0606      	lsls	r6, r0, #24
 800664e:	f101 0304 	add.w	r3, r1, #4
 8006652:	d50a      	bpl.n	800666a <_printf_i+0xce>
 8006654:	680e      	ldr	r6, [r1, #0]
 8006656:	602b      	str	r3, [r5, #0]
 8006658:	2e00      	cmp	r6, #0
 800665a:	da03      	bge.n	8006664 <_printf_i+0xc8>
 800665c:	232d      	movs	r3, #45	; 0x2d
 800665e:	4276      	negs	r6, r6
 8006660:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006664:	230a      	movs	r3, #10
 8006666:	485e      	ldr	r0, [pc, #376]	; (80067e0 <_printf_i+0x244>)
 8006668:	e019      	b.n	800669e <_printf_i+0x102>
 800666a:	680e      	ldr	r6, [r1, #0]
 800666c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006670:	602b      	str	r3, [r5, #0]
 8006672:	bf18      	it	ne
 8006674:	b236      	sxthne	r6, r6
 8006676:	e7ef      	b.n	8006658 <_printf_i+0xbc>
 8006678:	682b      	ldr	r3, [r5, #0]
 800667a:	6820      	ldr	r0, [r4, #0]
 800667c:	1d19      	adds	r1, r3, #4
 800667e:	6029      	str	r1, [r5, #0]
 8006680:	0601      	lsls	r1, r0, #24
 8006682:	d501      	bpl.n	8006688 <_printf_i+0xec>
 8006684:	681e      	ldr	r6, [r3, #0]
 8006686:	e002      	b.n	800668e <_printf_i+0xf2>
 8006688:	0646      	lsls	r6, r0, #25
 800668a:	d5fb      	bpl.n	8006684 <_printf_i+0xe8>
 800668c:	881e      	ldrh	r6, [r3, #0]
 800668e:	2f6f      	cmp	r7, #111	; 0x6f
 8006690:	bf0c      	ite	eq
 8006692:	2308      	moveq	r3, #8
 8006694:	230a      	movne	r3, #10
 8006696:	4852      	ldr	r0, [pc, #328]	; (80067e0 <_printf_i+0x244>)
 8006698:	2100      	movs	r1, #0
 800669a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800669e:	6865      	ldr	r5, [r4, #4]
 80066a0:	2d00      	cmp	r5, #0
 80066a2:	bfa8      	it	ge
 80066a4:	6821      	ldrge	r1, [r4, #0]
 80066a6:	60a5      	str	r5, [r4, #8]
 80066a8:	bfa4      	itt	ge
 80066aa:	f021 0104 	bicge.w	r1, r1, #4
 80066ae:	6021      	strge	r1, [r4, #0]
 80066b0:	b90e      	cbnz	r6, 80066b6 <_printf_i+0x11a>
 80066b2:	2d00      	cmp	r5, #0
 80066b4:	d04d      	beq.n	8006752 <_printf_i+0x1b6>
 80066b6:	4615      	mov	r5, r2
 80066b8:	fbb6 f1f3 	udiv	r1, r6, r3
 80066bc:	fb03 6711 	mls	r7, r3, r1, r6
 80066c0:	5dc7      	ldrb	r7, [r0, r7]
 80066c2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80066c6:	4637      	mov	r7, r6
 80066c8:	42bb      	cmp	r3, r7
 80066ca:	460e      	mov	r6, r1
 80066cc:	d9f4      	bls.n	80066b8 <_printf_i+0x11c>
 80066ce:	2b08      	cmp	r3, #8
 80066d0:	d10b      	bne.n	80066ea <_printf_i+0x14e>
 80066d2:	6823      	ldr	r3, [r4, #0]
 80066d4:	07de      	lsls	r6, r3, #31
 80066d6:	d508      	bpl.n	80066ea <_printf_i+0x14e>
 80066d8:	6923      	ldr	r3, [r4, #16]
 80066da:	6861      	ldr	r1, [r4, #4]
 80066dc:	4299      	cmp	r1, r3
 80066de:	bfde      	ittt	le
 80066e0:	2330      	movle	r3, #48	; 0x30
 80066e2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80066e6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80066ea:	1b52      	subs	r2, r2, r5
 80066ec:	6122      	str	r2, [r4, #16]
 80066ee:	464b      	mov	r3, r9
 80066f0:	4621      	mov	r1, r4
 80066f2:	4640      	mov	r0, r8
 80066f4:	f8cd a000 	str.w	sl, [sp]
 80066f8:	aa03      	add	r2, sp, #12
 80066fa:	f7ff fedf 	bl	80064bc <_printf_common>
 80066fe:	3001      	adds	r0, #1
 8006700:	d14c      	bne.n	800679c <_printf_i+0x200>
 8006702:	f04f 30ff 	mov.w	r0, #4294967295
 8006706:	b004      	add	sp, #16
 8006708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800670c:	4834      	ldr	r0, [pc, #208]	; (80067e0 <_printf_i+0x244>)
 800670e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006712:	6829      	ldr	r1, [r5, #0]
 8006714:	6823      	ldr	r3, [r4, #0]
 8006716:	f851 6b04 	ldr.w	r6, [r1], #4
 800671a:	6029      	str	r1, [r5, #0]
 800671c:	061d      	lsls	r5, r3, #24
 800671e:	d514      	bpl.n	800674a <_printf_i+0x1ae>
 8006720:	07df      	lsls	r7, r3, #31
 8006722:	bf44      	itt	mi
 8006724:	f043 0320 	orrmi.w	r3, r3, #32
 8006728:	6023      	strmi	r3, [r4, #0]
 800672a:	b91e      	cbnz	r6, 8006734 <_printf_i+0x198>
 800672c:	6823      	ldr	r3, [r4, #0]
 800672e:	f023 0320 	bic.w	r3, r3, #32
 8006732:	6023      	str	r3, [r4, #0]
 8006734:	2310      	movs	r3, #16
 8006736:	e7af      	b.n	8006698 <_printf_i+0xfc>
 8006738:	6823      	ldr	r3, [r4, #0]
 800673a:	f043 0320 	orr.w	r3, r3, #32
 800673e:	6023      	str	r3, [r4, #0]
 8006740:	2378      	movs	r3, #120	; 0x78
 8006742:	4828      	ldr	r0, [pc, #160]	; (80067e4 <_printf_i+0x248>)
 8006744:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006748:	e7e3      	b.n	8006712 <_printf_i+0x176>
 800674a:	0659      	lsls	r1, r3, #25
 800674c:	bf48      	it	mi
 800674e:	b2b6      	uxthmi	r6, r6
 8006750:	e7e6      	b.n	8006720 <_printf_i+0x184>
 8006752:	4615      	mov	r5, r2
 8006754:	e7bb      	b.n	80066ce <_printf_i+0x132>
 8006756:	682b      	ldr	r3, [r5, #0]
 8006758:	6826      	ldr	r6, [r4, #0]
 800675a:	1d18      	adds	r0, r3, #4
 800675c:	6961      	ldr	r1, [r4, #20]
 800675e:	6028      	str	r0, [r5, #0]
 8006760:	0635      	lsls	r5, r6, #24
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	d501      	bpl.n	800676a <_printf_i+0x1ce>
 8006766:	6019      	str	r1, [r3, #0]
 8006768:	e002      	b.n	8006770 <_printf_i+0x1d4>
 800676a:	0670      	lsls	r0, r6, #25
 800676c:	d5fb      	bpl.n	8006766 <_printf_i+0x1ca>
 800676e:	8019      	strh	r1, [r3, #0]
 8006770:	2300      	movs	r3, #0
 8006772:	4615      	mov	r5, r2
 8006774:	6123      	str	r3, [r4, #16]
 8006776:	e7ba      	b.n	80066ee <_printf_i+0x152>
 8006778:	682b      	ldr	r3, [r5, #0]
 800677a:	2100      	movs	r1, #0
 800677c:	1d1a      	adds	r2, r3, #4
 800677e:	602a      	str	r2, [r5, #0]
 8006780:	681d      	ldr	r5, [r3, #0]
 8006782:	6862      	ldr	r2, [r4, #4]
 8006784:	4628      	mov	r0, r5
 8006786:	f002 fe65 	bl	8009454 <memchr>
 800678a:	b108      	cbz	r0, 8006790 <_printf_i+0x1f4>
 800678c:	1b40      	subs	r0, r0, r5
 800678e:	6060      	str	r0, [r4, #4]
 8006790:	6863      	ldr	r3, [r4, #4]
 8006792:	6123      	str	r3, [r4, #16]
 8006794:	2300      	movs	r3, #0
 8006796:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800679a:	e7a8      	b.n	80066ee <_printf_i+0x152>
 800679c:	462a      	mov	r2, r5
 800679e:	4649      	mov	r1, r9
 80067a0:	4640      	mov	r0, r8
 80067a2:	6923      	ldr	r3, [r4, #16]
 80067a4:	47d0      	blx	sl
 80067a6:	3001      	adds	r0, #1
 80067a8:	d0ab      	beq.n	8006702 <_printf_i+0x166>
 80067aa:	6823      	ldr	r3, [r4, #0]
 80067ac:	079b      	lsls	r3, r3, #30
 80067ae:	d413      	bmi.n	80067d8 <_printf_i+0x23c>
 80067b0:	68e0      	ldr	r0, [r4, #12]
 80067b2:	9b03      	ldr	r3, [sp, #12]
 80067b4:	4298      	cmp	r0, r3
 80067b6:	bfb8      	it	lt
 80067b8:	4618      	movlt	r0, r3
 80067ba:	e7a4      	b.n	8006706 <_printf_i+0x16a>
 80067bc:	2301      	movs	r3, #1
 80067be:	4632      	mov	r2, r6
 80067c0:	4649      	mov	r1, r9
 80067c2:	4640      	mov	r0, r8
 80067c4:	47d0      	blx	sl
 80067c6:	3001      	adds	r0, #1
 80067c8:	d09b      	beq.n	8006702 <_printf_i+0x166>
 80067ca:	3501      	adds	r5, #1
 80067cc:	68e3      	ldr	r3, [r4, #12]
 80067ce:	9903      	ldr	r1, [sp, #12]
 80067d0:	1a5b      	subs	r3, r3, r1
 80067d2:	42ab      	cmp	r3, r5
 80067d4:	dcf2      	bgt.n	80067bc <_printf_i+0x220>
 80067d6:	e7eb      	b.n	80067b0 <_printf_i+0x214>
 80067d8:	2500      	movs	r5, #0
 80067da:	f104 0619 	add.w	r6, r4, #25
 80067de:	e7f5      	b.n	80067cc <_printf_i+0x230>
 80067e0:	0800c206 	.word	0x0800c206
 80067e4:	0800c217 	.word	0x0800c217

080067e8 <_scanf_float>:
 80067e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067ec:	b087      	sub	sp, #28
 80067ee:	9303      	str	r3, [sp, #12]
 80067f0:	688b      	ldr	r3, [r1, #8]
 80067f2:	4617      	mov	r7, r2
 80067f4:	1e5a      	subs	r2, r3, #1
 80067f6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80067fa:	bf85      	ittet	hi
 80067fc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006800:	195b      	addhi	r3, r3, r5
 8006802:	2300      	movls	r3, #0
 8006804:	9302      	strhi	r3, [sp, #8]
 8006806:	bf88      	it	hi
 8006808:	f240 135d 	movwhi	r3, #349	; 0x15d
 800680c:	468b      	mov	fp, r1
 800680e:	f04f 0500 	mov.w	r5, #0
 8006812:	bf8c      	ite	hi
 8006814:	608b      	strhi	r3, [r1, #8]
 8006816:	9302      	strls	r3, [sp, #8]
 8006818:	680b      	ldr	r3, [r1, #0]
 800681a:	4680      	mov	r8, r0
 800681c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006820:	f84b 3b1c 	str.w	r3, [fp], #28
 8006824:	460c      	mov	r4, r1
 8006826:	465e      	mov	r6, fp
 8006828:	46aa      	mov	sl, r5
 800682a:	46a9      	mov	r9, r5
 800682c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006830:	9501      	str	r5, [sp, #4]
 8006832:	68a2      	ldr	r2, [r4, #8]
 8006834:	b152      	cbz	r2, 800684c <_scanf_float+0x64>
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	781b      	ldrb	r3, [r3, #0]
 800683a:	2b4e      	cmp	r3, #78	; 0x4e
 800683c:	d864      	bhi.n	8006908 <_scanf_float+0x120>
 800683e:	2b40      	cmp	r3, #64	; 0x40
 8006840:	d83c      	bhi.n	80068bc <_scanf_float+0xd4>
 8006842:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006846:	b2c8      	uxtb	r0, r1
 8006848:	280e      	cmp	r0, #14
 800684a:	d93a      	bls.n	80068c2 <_scanf_float+0xda>
 800684c:	f1b9 0f00 	cmp.w	r9, #0
 8006850:	d003      	beq.n	800685a <_scanf_float+0x72>
 8006852:	6823      	ldr	r3, [r4, #0]
 8006854:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006858:	6023      	str	r3, [r4, #0]
 800685a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800685e:	f1ba 0f01 	cmp.w	sl, #1
 8006862:	f200 8113 	bhi.w	8006a8c <_scanf_float+0x2a4>
 8006866:	455e      	cmp	r6, fp
 8006868:	f200 8105 	bhi.w	8006a76 <_scanf_float+0x28e>
 800686c:	2501      	movs	r5, #1
 800686e:	4628      	mov	r0, r5
 8006870:	b007      	add	sp, #28
 8006872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006876:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800687a:	2a0d      	cmp	r2, #13
 800687c:	d8e6      	bhi.n	800684c <_scanf_float+0x64>
 800687e:	a101      	add	r1, pc, #4	; (adr r1, 8006884 <_scanf_float+0x9c>)
 8006880:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006884:	080069c3 	.word	0x080069c3
 8006888:	0800684d 	.word	0x0800684d
 800688c:	0800684d 	.word	0x0800684d
 8006890:	0800684d 	.word	0x0800684d
 8006894:	08006a23 	.word	0x08006a23
 8006898:	080069fb 	.word	0x080069fb
 800689c:	0800684d 	.word	0x0800684d
 80068a0:	0800684d 	.word	0x0800684d
 80068a4:	080069d1 	.word	0x080069d1
 80068a8:	0800684d 	.word	0x0800684d
 80068ac:	0800684d 	.word	0x0800684d
 80068b0:	0800684d 	.word	0x0800684d
 80068b4:	0800684d 	.word	0x0800684d
 80068b8:	08006989 	.word	0x08006989
 80068bc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80068c0:	e7db      	b.n	800687a <_scanf_float+0x92>
 80068c2:	290e      	cmp	r1, #14
 80068c4:	d8c2      	bhi.n	800684c <_scanf_float+0x64>
 80068c6:	a001      	add	r0, pc, #4	; (adr r0, 80068cc <_scanf_float+0xe4>)
 80068c8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80068cc:	0800697b 	.word	0x0800697b
 80068d0:	0800684d 	.word	0x0800684d
 80068d4:	0800697b 	.word	0x0800697b
 80068d8:	08006a0f 	.word	0x08006a0f
 80068dc:	0800684d 	.word	0x0800684d
 80068e0:	08006929 	.word	0x08006929
 80068e4:	08006965 	.word	0x08006965
 80068e8:	08006965 	.word	0x08006965
 80068ec:	08006965 	.word	0x08006965
 80068f0:	08006965 	.word	0x08006965
 80068f4:	08006965 	.word	0x08006965
 80068f8:	08006965 	.word	0x08006965
 80068fc:	08006965 	.word	0x08006965
 8006900:	08006965 	.word	0x08006965
 8006904:	08006965 	.word	0x08006965
 8006908:	2b6e      	cmp	r3, #110	; 0x6e
 800690a:	d809      	bhi.n	8006920 <_scanf_float+0x138>
 800690c:	2b60      	cmp	r3, #96	; 0x60
 800690e:	d8b2      	bhi.n	8006876 <_scanf_float+0x8e>
 8006910:	2b54      	cmp	r3, #84	; 0x54
 8006912:	d077      	beq.n	8006a04 <_scanf_float+0x21c>
 8006914:	2b59      	cmp	r3, #89	; 0x59
 8006916:	d199      	bne.n	800684c <_scanf_float+0x64>
 8006918:	2d07      	cmp	r5, #7
 800691a:	d197      	bne.n	800684c <_scanf_float+0x64>
 800691c:	2508      	movs	r5, #8
 800691e:	e029      	b.n	8006974 <_scanf_float+0x18c>
 8006920:	2b74      	cmp	r3, #116	; 0x74
 8006922:	d06f      	beq.n	8006a04 <_scanf_float+0x21c>
 8006924:	2b79      	cmp	r3, #121	; 0x79
 8006926:	e7f6      	b.n	8006916 <_scanf_float+0x12e>
 8006928:	6821      	ldr	r1, [r4, #0]
 800692a:	05c8      	lsls	r0, r1, #23
 800692c:	d51a      	bpl.n	8006964 <_scanf_float+0x17c>
 800692e:	9b02      	ldr	r3, [sp, #8]
 8006930:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006934:	6021      	str	r1, [r4, #0]
 8006936:	f109 0901 	add.w	r9, r9, #1
 800693a:	b11b      	cbz	r3, 8006944 <_scanf_float+0x15c>
 800693c:	3b01      	subs	r3, #1
 800693e:	3201      	adds	r2, #1
 8006940:	9302      	str	r3, [sp, #8]
 8006942:	60a2      	str	r2, [r4, #8]
 8006944:	68a3      	ldr	r3, [r4, #8]
 8006946:	3b01      	subs	r3, #1
 8006948:	60a3      	str	r3, [r4, #8]
 800694a:	6923      	ldr	r3, [r4, #16]
 800694c:	3301      	adds	r3, #1
 800694e:	6123      	str	r3, [r4, #16]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	3b01      	subs	r3, #1
 8006954:	2b00      	cmp	r3, #0
 8006956:	607b      	str	r3, [r7, #4]
 8006958:	f340 8084 	ble.w	8006a64 <_scanf_float+0x27c>
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	3301      	adds	r3, #1
 8006960:	603b      	str	r3, [r7, #0]
 8006962:	e766      	b.n	8006832 <_scanf_float+0x4a>
 8006964:	eb1a 0f05 	cmn.w	sl, r5
 8006968:	f47f af70 	bne.w	800684c <_scanf_float+0x64>
 800696c:	6822      	ldr	r2, [r4, #0]
 800696e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006972:	6022      	str	r2, [r4, #0]
 8006974:	f806 3b01 	strb.w	r3, [r6], #1
 8006978:	e7e4      	b.n	8006944 <_scanf_float+0x15c>
 800697a:	6822      	ldr	r2, [r4, #0]
 800697c:	0610      	lsls	r0, r2, #24
 800697e:	f57f af65 	bpl.w	800684c <_scanf_float+0x64>
 8006982:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006986:	e7f4      	b.n	8006972 <_scanf_float+0x18a>
 8006988:	f1ba 0f00 	cmp.w	sl, #0
 800698c:	d10e      	bne.n	80069ac <_scanf_float+0x1c4>
 800698e:	f1b9 0f00 	cmp.w	r9, #0
 8006992:	d10e      	bne.n	80069b2 <_scanf_float+0x1ca>
 8006994:	6822      	ldr	r2, [r4, #0]
 8006996:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800699a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800699e:	d108      	bne.n	80069b2 <_scanf_float+0x1ca>
 80069a0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80069a4:	f04f 0a01 	mov.w	sl, #1
 80069a8:	6022      	str	r2, [r4, #0]
 80069aa:	e7e3      	b.n	8006974 <_scanf_float+0x18c>
 80069ac:	f1ba 0f02 	cmp.w	sl, #2
 80069b0:	d055      	beq.n	8006a5e <_scanf_float+0x276>
 80069b2:	2d01      	cmp	r5, #1
 80069b4:	d002      	beq.n	80069bc <_scanf_float+0x1d4>
 80069b6:	2d04      	cmp	r5, #4
 80069b8:	f47f af48 	bne.w	800684c <_scanf_float+0x64>
 80069bc:	3501      	adds	r5, #1
 80069be:	b2ed      	uxtb	r5, r5
 80069c0:	e7d8      	b.n	8006974 <_scanf_float+0x18c>
 80069c2:	f1ba 0f01 	cmp.w	sl, #1
 80069c6:	f47f af41 	bne.w	800684c <_scanf_float+0x64>
 80069ca:	f04f 0a02 	mov.w	sl, #2
 80069ce:	e7d1      	b.n	8006974 <_scanf_float+0x18c>
 80069d0:	b97d      	cbnz	r5, 80069f2 <_scanf_float+0x20a>
 80069d2:	f1b9 0f00 	cmp.w	r9, #0
 80069d6:	f47f af3c 	bne.w	8006852 <_scanf_float+0x6a>
 80069da:	6822      	ldr	r2, [r4, #0]
 80069dc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80069e0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80069e4:	f47f af39 	bne.w	800685a <_scanf_float+0x72>
 80069e8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80069ec:	2501      	movs	r5, #1
 80069ee:	6022      	str	r2, [r4, #0]
 80069f0:	e7c0      	b.n	8006974 <_scanf_float+0x18c>
 80069f2:	2d03      	cmp	r5, #3
 80069f4:	d0e2      	beq.n	80069bc <_scanf_float+0x1d4>
 80069f6:	2d05      	cmp	r5, #5
 80069f8:	e7de      	b.n	80069b8 <_scanf_float+0x1d0>
 80069fa:	2d02      	cmp	r5, #2
 80069fc:	f47f af26 	bne.w	800684c <_scanf_float+0x64>
 8006a00:	2503      	movs	r5, #3
 8006a02:	e7b7      	b.n	8006974 <_scanf_float+0x18c>
 8006a04:	2d06      	cmp	r5, #6
 8006a06:	f47f af21 	bne.w	800684c <_scanf_float+0x64>
 8006a0a:	2507      	movs	r5, #7
 8006a0c:	e7b2      	b.n	8006974 <_scanf_float+0x18c>
 8006a0e:	6822      	ldr	r2, [r4, #0]
 8006a10:	0591      	lsls	r1, r2, #22
 8006a12:	f57f af1b 	bpl.w	800684c <_scanf_float+0x64>
 8006a16:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006a1a:	6022      	str	r2, [r4, #0]
 8006a1c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006a20:	e7a8      	b.n	8006974 <_scanf_float+0x18c>
 8006a22:	6822      	ldr	r2, [r4, #0]
 8006a24:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006a28:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006a2c:	d006      	beq.n	8006a3c <_scanf_float+0x254>
 8006a2e:	0550      	lsls	r0, r2, #21
 8006a30:	f57f af0c 	bpl.w	800684c <_scanf_float+0x64>
 8006a34:	f1b9 0f00 	cmp.w	r9, #0
 8006a38:	f43f af0f 	beq.w	800685a <_scanf_float+0x72>
 8006a3c:	0591      	lsls	r1, r2, #22
 8006a3e:	bf58      	it	pl
 8006a40:	9901      	ldrpl	r1, [sp, #4]
 8006a42:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006a46:	bf58      	it	pl
 8006a48:	eba9 0101 	subpl.w	r1, r9, r1
 8006a4c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006a50:	f04f 0900 	mov.w	r9, #0
 8006a54:	bf58      	it	pl
 8006a56:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006a5a:	6022      	str	r2, [r4, #0]
 8006a5c:	e78a      	b.n	8006974 <_scanf_float+0x18c>
 8006a5e:	f04f 0a03 	mov.w	sl, #3
 8006a62:	e787      	b.n	8006974 <_scanf_float+0x18c>
 8006a64:	4639      	mov	r1, r7
 8006a66:	4640      	mov	r0, r8
 8006a68:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006a6c:	4798      	blx	r3
 8006a6e:	2800      	cmp	r0, #0
 8006a70:	f43f aedf 	beq.w	8006832 <_scanf_float+0x4a>
 8006a74:	e6ea      	b.n	800684c <_scanf_float+0x64>
 8006a76:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006a7a:	463a      	mov	r2, r7
 8006a7c:	4640      	mov	r0, r8
 8006a7e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006a82:	4798      	blx	r3
 8006a84:	6923      	ldr	r3, [r4, #16]
 8006a86:	3b01      	subs	r3, #1
 8006a88:	6123      	str	r3, [r4, #16]
 8006a8a:	e6ec      	b.n	8006866 <_scanf_float+0x7e>
 8006a8c:	1e6b      	subs	r3, r5, #1
 8006a8e:	2b06      	cmp	r3, #6
 8006a90:	d825      	bhi.n	8006ade <_scanf_float+0x2f6>
 8006a92:	2d02      	cmp	r5, #2
 8006a94:	d836      	bhi.n	8006b04 <_scanf_float+0x31c>
 8006a96:	455e      	cmp	r6, fp
 8006a98:	f67f aee8 	bls.w	800686c <_scanf_float+0x84>
 8006a9c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006aa0:	463a      	mov	r2, r7
 8006aa2:	4640      	mov	r0, r8
 8006aa4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006aa8:	4798      	blx	r3
 8006aaa:	6923      	ldr	r3, [r4, #16]
 8006aac:	3b01      	subs	r3, #1
 8006aae:	6123      	str	r3, [r4, #16]
 8006ab0:	e7f1      	b.n	8006a96 <_scanf_float+0x2ae>
 8006ab2:	9802      	ldr	r0, [sp, #8]
 8006ab4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006ab8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006abc:	463a      	mov	r2, r7
 8006abe:	9002      	str	r0, [sp, #8]
 8006ac0:	4640      	mov	r0, r8
 8006ac2:	4798      	blx	r3
 8006ac4:	6923      	ldr	r3, [r4, #16]
 8006ac6:	3b01      	subs	r3, #1
 8006ac8:	6123      	str	r3, [r4, #16]
 8006aca:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006ace:	fa5f fa8a 	uxtb.w	sl, sl
 8006ad2:	f1ba 0f02 	cmp.w	sl, #2
 8006ad6:	d1ec      	bne.n	8006ab2 <_scanf_float+0x2ca>
 8006ad8:	3d03      	subs	r5, #3
 8006ada:	b2ed      	uxtb	r5, r5
 8006adc:	1b76      	subs	r6, r6, r5
 8006ade:	6823      	ldr	r3, [r4, #0]
 8006ae0:	05da      	lsls	r2, r3, #23
 8006ae2:	d52f      	bpl.n	8006b44 <_scanf_float+0x35c>
 8006ae4:	055b      	lsls	r3, r3, #21
 8006ae6:	d510      	bpl.n	8006b0a <_scanf_float+0x322>
 8006ae8:	455e      	cmp	r6, fp
 8006aea:	f67f aebf 	bls.w	800686c <_scanf_float+0x84>
 8006aee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006af2:	463a      	mov	r2, r7
 8006af4:	4640      	mov	r0, r8
 8006af6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006afa:	4798      	blx	r3
 8006afc:	6923      	ldr	r3, [r4, #16]
 8006afe:	3b01      	subs	r3, #1
 8006b00:	6123      	str	r3, [r4, #16]
 8006b02:	e7f1      	b.n	8006ae8 <_scanf_float+0x300>
 8006b04:	46aa      	mov	sl, r5
 8006b06:	9602      	str	r6, [sp, #8]
 8006b08:	e7df      	b.n	8006aca <_scanf_float+0x2e2>
 8006b0a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006b0e:	6923      	ldr	r3, [r4, #16]
 8006b10:	2965      	cmp	r1, #101	; 0x65
 8006b12:	f103 33ff 	add.w	r3, r3, #4294967295
 8006b16:	f106 35ff 	add.w	r5, r6, #4294967295
 8006b1a:	6123      	str	r3, [r4, #16]
 8006b1c:	d00c      	beq.n	8006b38 <_scanf_float+0x350>
 8006b1e:	2945      	cmp	r1, #69	; 0x45
 8006b20:	d00a      	beq.n	8006b38 <_scanf_float+0x350>
 8006b22:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006b26:	463a      	mov	r2, r7
 8006b28:	4640      	mov	r0, r8
 8006b2a:	4798      	blx	r3
 8006b2c:	6923      	ldr	r3, [r4, #16]
 8006b2e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006b32:	3b01      	subs	r3, #1
 8006b34:	1eb5      	subs	r5, r6, #2
 8006b36:	6123      	str	r3, [r4, #16]
 8006b38:	463a      	mov	r2, r7
 8006b3a:	4640      	mov	r0, r8
 8006b3c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006b40:	4798      	blx	r3
 8006b42:	462e      	mov	r6, r5
 8006b44:	6825      	ldr	r5, [r4, #0]
 8006b46:	f015 0510 	ands.w	r5, r5, #16
 8006b4a:	d155      	bne.n	8006bf8 <_scanf_float+0x410>
 8006b4c:	7035      	strb	r5, [r6, #0]
 8006b4e:	6823      	ldr	r3, [r4, #0]
 8006b50:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006b54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b58:	d11b      	bne.n	8006b92 <_scanf_float+0x3aa>
 8006b5a:	9b01      	ldr	r3, [sp, #4]
 8006b5c:	454b      	cmp	r3, r9
 8006b5e:	eba3 0209 	sub.w	r2, r3, r9
 8006b62:	d123      	bne.n	8006bac <_scanf_float+0x3c4>
 8006b64:	2200      	movs	r2, #0
 8006b66:	4659      	mov	r1, fp
 8006b68:	4640      	mov	r0, r8
 8006b6a:	f000 ff09 	bl	8007980 <_strtod_r>
 8006b6e:	6822      	ldr	r2, [r4, #0]
 8006b70:	9b03      	ldr	r3, [sp, #12]
 8006b72:	f012 0f02 	tst.w	r2, #2
 8006b76:	4606      	mov	r6, r0
 8006b78:	460f      	mov	r7, r1
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	d021      	beq.n	8006bc2 <_scanf_float+0x3da>
 8006b7e:	1d1a      	adds	r2, r3, #4
 8006b80:	9903      	ldr	r1, [sp, #12]
 8006b82:	600a      	str	r2, [r1, #0]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	e9c3 6700 	strd	r6, r7, [r3]
 8006b8a:	68e3      	ldr	r3, [r4, #12]
 8006b8c:	3301      	adds	r3, #1
 8006b8e:	60e3      	str	r3, [r4, #12]
 8006b90:	e66d      	b.n	800686e <_scanf_float+0x86>
 8006b92:	9b04      	ldr	r3, [sp, #16]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d0e5      	beq.n	8006b64 <_scanf_float+0x37c>
 8006b98:	9905      	ldr	r1, [sp, #20]
 8006b9a:	230a      	movs	r3, #10
 8006b9c:	462a      	mov	r2, r5
 8006b9e:	4640      	mov	r0, r8
 8006ba0:	3101      	adds	r1, #1
 8006ba2:	f000 ff7b 	bl	8007a9c <_strtol_r>
 8006ba6:	9b04      	ldr	r3, [sp, #16]
 8006ba8:	9e05      	ldr	r6, [sp, #20]
 8006baa:	1ac2      	subs	r2, r0, r3
 8006bac:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006bb0:	429e      	cmp	r6, r3
 8006bb2:	bf28      	it	cs
 8006bb4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006bb8:	4630      	mov	r0, r6
 8006bba:	4910      	ldr	r1, [pc, #64]	; (8006bfc <_scanf_float+0x414>)
 8006bbc:	f000 f8b4 	bl	8006d28 <siprintf>
 8006bc0:	e7d0      	b.n	8006b64 <_scanf_float+0x37c>
 8006bc2:	f012 0f04 	tst.w	r2, #4
 8006bc6:	f103 0204 	add.w	r2, r3, #4
 8006bca:	d1d9      	bne.n	8006b80 <_scanf_float+0x398>
 8006bcc:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8006bd0:	f8cc 2000 	str.w	r2, [ip]
 8006bd4:	f8d3 8000 	ldr.w	r8, [r3]
 8006bd8:	4602      	mov	r2, r0
 8006bda:	460b      	mov	r3, r1
 8006bdc:	f7f9 ff16 	bl	8000a0c <__aeabi_dcmpun>
 8006be0:	b128      	cbz	r0, 8006bee <_scanf_float+0x406>
 8006be2:	4807      	ldr	r0, [pc, #28]	; (8006c00 <_scanf_float+0x418>)
 8006be4:	f000 f89c 	bl	8006d20 <nanf>
 8006be8:	f8c8 0000 	str.w	r0, [r8]
 8006bec:	e7cd      	b.n	8006b8a <_scanf_float+0x3a2>
 8006bee:	4630      	mov	r0, r6
 8006bf0:	4639      	mov	r1, r7
 8006bf2:	f7f9 ff69 	bl	8000ac8 <__aeabi_d2f>
 8006bf6:	e7f7      	b.n	8006be8 <_scanf_float+0x400>
 8006bf8:	2500      	movs	r5, #0
 8006bfa:	e638      	b.n	800686e <_scanf_float+0x86>
 8006bfc:	0800c228 	.word	0x0800c228
 8006c00:	0800c698 	.word	0x0800c698

08006c04 <iprintf>:
 8006c04:	b40f      	push	{r0, r1, r2, r3}
 8006c06:	4b0a      	ldr	r3, [pc, #40]	; (8006c30 <iprintf+0x2c>)
 8006c08:	b513      	push	{r0, r1, r4, lr}
 8006c0a:	681c      	ldr	r4, [r3, #0]
 8006c0c:	b124      	cbz	r4, 8006c18 <iprintf+0x14>
 8006c0e:	69a3      	ldr	r3, [r4, #24]
 8006c10:	b913      	cbnz	r3, 8006c18 <iprintf+0x14>
 8006c12:	4620      	mov	r0, r4
 8006c14:	f001 ff94 	bl	8008b40 <__sinit>
 8006c18:	ab05      	add	r3, sp, #20
 8006c1a:	4620      	mov	r0, r4
 8006c1c:	9a04      	ldr	r2, [sp, #16]
 8006c1e:	68a1      	ldr	r1, [r4, #8]
 8006c20:	9301      	str	r3, [sp, #4]
 8006c22:	f003 fb51 	bl	800a2c8 <_vfiprintf_r>
 8006c26:	b002      	add	sp, #8
 8006c28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c2c:	b004      	add	sp, #16
 8006c2e:	4770      	bx	lr
 8006c30:	2000000c 	.word	0x2000000c

08006c34 <_puts_r>:
 8006c34:	b570      	push	{r4, r5, r6, lr}
 8006c36:	460e      	mov	r6, r1
 8006c38:	4605      	mov	r5, r0
 8006c3a:	b118      	cbz	r0, 8006c44 <_puts_r+0x10>
 8006c3c:	6983      	ldr	r3, [r0, #24]
 8006c3e:	b90b      	cbnz	r3, 8006c44 <_puts_r+0x10>
 8006c40:	f001 ff7e 	bl	8008b40 <__sinit>
 8006c44:	69ab      	ldr	r3, [r5, #24]
 8006c46:	68ac      	ldr	r4, [r5, #8]
 8006c48:	b913      	cbnz	r3, 8006c50 <_puts_r+0x1c>
 8006c4a:	4628      	mov	r0, r5
 8006c4c:	f001 ff78 	bl	8008b40 <__sinit>
 8006c50:	4b2c      	ldr	r3, [pc, #176]	; (8006d04 <_puts_r+0xd0>)
 8006c52:	429c      	cmp	r4, r3
 8006c54:	d120      	bne.n	8006c98 <_puts_r+0x64>
 8006c56:	686c      	ldr	r4, [r5, #4]
 8006c58:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c5a:	07db      	lsls	r3, r3, #31
 8006c5c:	d405      	bmi.n	8006c6a <_puts_r+0x36>
 8006c5e:	89a3      	ldrh	r3, [r4, #12]
 8006c60:	0598      	lsls	r0, r3, #22
 8006c62:	d402      	bmi.n	8006c6a <_puts_r+0x36>
 8006c64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c66:	f002 fb74 	bl	8009352 <__retarget_lock_acquire_recursive>
 8006c6a:	89a3      	ldrh	r3, [r4, #12]
 8006c6c:	0719      	lsls	r1, r3, #28
 8006c6e:	d51d      	bpl.n	8006cac <_puts_r+0x78>
 8006c70:	6923      	ldr	r3, [r4, #16]
 8006c72:	b1db      	cbz	r3, 8006cac <_puts_r+0x78>
 8006c74:	3e01      	subs	r6, #1
 8006c76:	68a3      	ldr	r3, [r4, #8]
 8006c78:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006c7c:	3b01      	subs	r3, #1
 8006c7e:	60a3      	str	r3, [r4, #8]
 8006c80:	bb39      	cbnz	r1, 8006cd2 <_puts_r+0x9e>
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	da38      	bge.n	8006cf8 <_puts_r+0xc4>
 8006c86:	4622      	mov	r2, r4
 8006c88:	210a      	movs	r1, #10
 8006c8a:	4628      	mov	r0, r5
 8006c8c:	f000 ff08 	bl	8007aa0 <__swbuf_r>
 8006c90:	3001      	adds	r0, #1
 8006c92:	d011      	beq.n	8006cb8 <_puts_r+0x84>
 8006c94:	250a      	movs	r5, #10
 8006c96:	e011      	b.n	8006cbc <_puts_r+0x88>
 8006c98:	4b1b      	ldr	r3, [pc, #108]	; (8006d08 <_puts_r+0xd4>)
 8006c9a:	429c      	cmp	r4, r3
 8006c9c:	d101      	bne.n	8006ca2 <_puts_r+0x6e>
 8006c9e:	68ac      	ldr	r4, [r5, #8]
 8006ca0:	e7da      	b.n	8006c58 <_puts_r+0x24>
 8006ca2:	4b1a      	ldr	r3, [pc, #104]	; (8006d0c <_puts_r+0xd8>)
 8006ca4:	429c      	cmp	r4, r3
 8006ca6:	bf08      	it	eq
 8006ca8:	68ec      	ldreq	r4, [r5, #12]
 8006caa:	e7d5      	b.n	8006c58 <_puts_r+0x24>
 8006cac:	4621      	mov	r1, r4
 8006cae:	4628      	mov	r0, r5
 8006cb0:	f000 ff48 	bl	8007b44 <__swsetup_r>
 8006cb4:	2800      	cmp	r0, #0
 8006cb6:	d0dd      	beq.n	8006c74 <_puts_r+0x40>
 8006cb8:	f04f 35ff 	mov.w	r5, #4294967295
 8006cbc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006cbe:	07da      	lsls	r2, r3, #31
 8006cc0:	d405      	bmi.n	8006cce <_puts_r+0x9a>
 8006cc2:	89a3      	ldrh	r3, [r4, #12]
 8006cc4:	059b      	lsls	r3, r3, #22
 8006cc6:	d402      	bmi.n	8006cce <_puts_r+0x9a>
 8006cc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006cca:	f002 fb43 	bl	8009354 <__retarget_lock_release_recursive>
 8006cce:	4628      	mov	r0, r5
 8006cd0:	bd70      	pop	{r4, r5, r6, pc}
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	da04      	bge.n	8006ce0 <_puts_r+0xac>
 8006cd6:	69a2      	ldr	r2, [r4, #24]
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	dc06      	bgt.n	8006cea <_puts_r+0xb6>
 8006cdc:	290a      	cmp	r1, #10
 8006cde:	d004      	beq.n	8006cea <_puts_r+0xb6>
 8006ce0:	6823      	ldr	r3, [r4, #0]
 8006ce2:	1c5a      	adds	r2, r3, #1
 8006ce4:	6022      	str	r2, [r4, #0]
 8006ce6:	7019      	strb	r1, [r3, #0]
 8006ce8:	e7c5      	b.n	8006c76 <_puts_r+0x42>
 8006cea:	4622      	mov	r2, r4
 8006cec:	4628      	mov	r0, r5
 8006cee:	f000 fed7 	bl	8007aa0 <__swbuf_r>
 8006cf2:	3001      	adds	r0, #1
 8006cf4:	d1bf      	bne.n	8006c76 <_puts_r+0x42>
 8006cf6:	e7df      	b.n	8006cb8 <_puts_r+0x84>
 8006cf8:	250a      	movs	r5, #10
 8006cfa:	6823      	ldr	r3, [r4, #0]
 8006cfc:	1c5a      	adds	r2, r3, #1
 8006cfe:	6022      	str	r2, [r4, #0]
 8006d00:	701d      	strb	r5, [r3, #0]
 8006d02:	e7db      	b.n	8006cbc <_puts_r+0x88>
 8006d04:	0800c434 	.word	0x0800c434
 8006d08:	0800c454 	.word	0x0800c454
 8006d0c:	0800c414 	.word	0x0800c414

08006d10 <puts>:
 8006d10:	4b02      	ldr	r3, [pc, #8]	; (8006d1c <puts+0xc>)
 8006d12:	4601      	mov	r1, r0
 8006d14:	6818      	ldr	r0, [r3, #0]
 8006d16:	f7ff bf8d 	b.w	8006c34 <_puts_r>
 8006d1a:	bf00      	nop
 8006d1c:	2000000c 	.word	0x2000000c

08006d20 <nanf>:
 8006d20:	4800      	ldr	r0, [pc, #0]	; (8006d24 <nanf+0x4>)
 8006d22:	4770      	bx	lr
 8006d24:	7fc00000 	.word	0x7fc00000

08006d28 <siprintf>:
 8006d28:	b40e      	push	{r1, r2, r3}
 8006d2a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006d2e:	b500      	push	{lr}
 8006d30:	b09c      	sub	sp, #112	; 0x70
 8006d32:	ab1d      	add	r3, sp, #116	; 0x74
 8006d34:	9002      	str	r0, [sp, #8]
 8006d36:	9006      	str	r0, [sp, #24]
 8006d38:	9107      	str	r1, [sp, #28]
 8006d3a:	9104      	str	r1, [sp, #16]
 8006d3c:	4808      	ldr	r0, [pc, #32]	; (8006d60 <siprintf+0x38>)
 8006d3e:	4909      	ldr	r1, [pc, #36]	; (8006d64 <siprintf+0x3c>)
 8006d40:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d44:	9105      	str	r1, [sp, #20]
 8006d46:	6800      	ldr	r0, [r0, #0]
 8006d48:	a902      	add	r1, sp, #8
 8006d4a:	9301      	str	r3, [sp, #4]
 8006d4c:	f003 f994 	bl	800a078 <_svfiprintf_r>
 8006d50:	2200      	movs	r2, #0
 8006d52:	9b02      	ldr	r3, [sp, #8]
 8006d54:	701a      	strb	r2, [r3, #0]
 8006d56:	b01c      	add	sp, #112	; 0x70
 8006d58:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d5c:	b003      	add	sp, #12
 8006d5e:	4770      	bx	lr
 8006d60:	2000000c 	.word	0x2000000c
 8006d64:	ffff0208 	.word	0xffff0208

08006d68 <sulp>:
 8006d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d6c:	460f      	mov	r7, r1
 8006d6e:	4690      	mov	r8, r2
 8006d70:	f002 feee 	bl	8009b50 <__ulp>
 8006d74:	4604      	mov	r4, r0
 8006d76:	460d      	mov	r5, r1
 8006d78:	f1b8 0f00 	cmp.w	r8, #0
 8006d7c:	d011      	beq.n	8006da2 <sulp+0x3a>
 8006d7e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8006d82:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	dd0b      	ble.n	8006da2 <sulp+0x3a>
 8006d8a:	2400      	movs	r4, #0
 8006d8c:	051b      	lsls	r3, r3, #20
 8006d8e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006d92:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006d96:	4622      	mov	r2, r4
 8006d98:	462b      	mov	r3, r5
 8006d9a:	f7f9 fb9d 	bl	80004d8 <__aeabi_dmul>
 8006d9e:	4604      	mov	r4, r0
 8006da0:	460d      	mov	r5, r1
 8006da2:	4620      	mov	r0, r4
 8006da4:	4629      	mov	r1, r5
 8006da6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006daa:	0000      	movs	r0, r0
 8006dac:	0000      	movs	r0, r0
	...

08006db0 <_strtod_l>:
 8006db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006db4:	469b      	mov	fp, r3
 8006db6:	2300      	movs	r3, #0
 8006db8:	b09f      	sub	sp, #124	; 0x7c
 8006dba:	931a      	str	r3, [sp, #104]	; 0x68
 8006dbc:	4b9e      	ldr	r3, [pc, #632]	; (8007038 <_strtod_l+0x288>)
 8006dbe:	4682      	mov	sl, r0
 8006dc0:	681f      	ldr	r7, [r3, #0]
 8006dc2:	460e      	mov	r6, r1
 8006dc4:	4638      	mov	r0, r7
 8006dc6:	9215      	str	r2, [sp, #84]	; 0x54
 8006dc8:	f7f9 f9c2 	bl	8000150 <strlen>
 8006dcc:	f04f 0800 	mov.w	r8, #0
 8006dd0:	4604      	mov	r4, r0
 8006dd2:	f04f 0900 	mov.w	r9, #0
 8006dd6:	9619      	str	r6, [sp, #100]	; 0x64
 8006dd8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006dda:	781a      	ldrb	r2, [r3, #0]
 8006ddc:	2a2b      	cmp	r2, #43	; 0x2b
 8006dde:	d04c      	beq.n	8006e7a <_strtod_l+0xca>
 8006de0:	d83a      	bhi.n	8006e58 <_strtod_l+0xa8>
 8006de2:	2a0d      	cmp	r2, #13
 8006de4:	d833      	bhi.n	8006e4e <_strtod_l+0x9e>
 8006de6:	2a08      	cmp	r2, #8
 8006de8:	d833      	bhi.n	8006e52 <_strtod_l+0xa2>
 8006dea:	2a00      	cmp	r2, #0
 8006dec:	d03d      	beq.n	8006e6a <_strtod_l+0xba>
 8006dee:	2300      	movs	r3, #0
 8006df0:	930a      	str	r3, [sp, #40]	; 0x28
 8006df2:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8006df4:	782b      	ldrb	r3, [r5, #0]
 8006df6:	2b30      	cmp	r3, #48	; 0x30
 8006df8:	f040 80aa 	bne.w	8006f50 <_strtod_l+0x1a0>
 8006dfc:	786b      	ldrb	r3, [r5, #1]
 8006dfe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006e02:	2b58      	cmp	r3, #88	; 0x58
 8006e04:	d166      	bne.n	8006ed4 <_strtod_l+0x124>
 8006e06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e08:	4650      	mov	r0, sl
 8006e0a:	9301      	str	r3, [sp, #4]
 8006e0c:	ab1a      	add	r3, sp, #104	; 0x68
 8006e0e:	9300      	str	r3, [sp, #0]
 8006e10:	4a8a      	ldr	r2, [pc, #552]	; (800703c <_strtod_l+0x28c>)
 8006e12:	f8cd b008 	str.w	fp, [sp, #8]
 8006e16:	ab1b      	add	r3, sp, #108	; 0x6c
 8006e18:	a919      	add	r1, sp, #100	; 0x64
 8006e1a:	f001 ff97 	bl	8008d4c <__gethex>
 8006e1e:	f010 0607 	ands.w	r6, r0, #7
 8006e22:	4604      	mov	r4, r0
 8006e24:	d005      	beq.n	8006e32 <_strtod_l+0x82>
 8006e26:	2e06      	cmp	r6, #6
 8006e28:	d129      	bne.n	8006e7e <_strtod_l+0xce>
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	3501      	adds	r5, #1
 8006e2e:	9519      	str	r5, [sp, #100]	; 0x64
 8006e30:	930a      	str	r3, [sp, #40]	; 0x28
 8006e32:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	f040 858a 	bne.w	800794e <_strtod_l+0xb9e>
 8006e3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e3c:	b1d3      	cbz	r3, 8006e74 <_strtod_l+0xc4>
 8006e3e:	4642      	mov	r2, r8
 8006e40:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006e44:	4610      	mov	r0, r2
 8006e46:	4619      	mov	r1, r3
 8006e48:	b01f      	add	sp, #124	; 0x7c
 8006e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e4e:	2a20      	cmp	r2, #32
 8006e50:	d1cd      	bne.n	8006dee <_strtod_l+0x3e>
 8006e52:	3301      	adds	r3, #1
 8006e54:	9319      	str	r3, [sp, #100]	; 0x64
 8006e56:	e7bf      	b.n	8006dd8 <_strtod_l+0x28>
 8006e58:	2a2d      	cmp	r2, #45	; 0x2d
 8006e5a:	d1c8      	bne.n	8006dee <_strtod_l+0x3e>
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	920a      	str	r2, [sp, #40]	; 0x28
 8006e60:	1c5a      	adds	r2, r3, #1
 8006e62:	9219      	str	r2, [sp, #100]	; 0x64
 8006e64:	785b      	ldrb	r3, [r3, #1]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d1c3      	bne.n	8006df2 <_strtod_l+0x42>
 8006e6a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006e6c:	9619      	str	r6, [sp, #100]	; 0x64
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	f040 856b 	bne.w	800794a <_strtod_l+0xb9a>
 8006e74:	4642      	mov	r2, r8
 8006e76:	464b      	mov	r3, r9
 8006e78:	e7e4      	b.n	8006e44 <_strtod_l+0x94>
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	e7ef      	b.n	8006e5e <_strtod_l+0xae>
 8006e7e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006e80:	b13a      	cbz	r2, 8006e92 <_strtod_l+0xe2>
 8006e82:	2135      	movs	r1, #53	; 0x35
 8006e84:	a81c      	add	r0, sp, #112	; 0x70
 8006e86:	f002 ff67 	bl	8009d58 <__copybits>
 8006e8a:	4650      	mov	r0, sl
 8006e8c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006e8e:	f002 fb2f 	bl	80094f0 <_Bfree>
 8006e92:	3e01      	subs	r6, #1
 8006e94:	2e04      	cmp	r6, #4
 8006e96:	d806      	bhi.n	8006ea6 <_strtod_l+0xf6>
 8006e98:	e8df f006 	tbb	[pc, r6]
 8006e9c:	1714030a 	.word	0x1714030a
 8006ea0:	0a          	.byte	0x0a
 8006ea1:	00          	.byte	0x00
 8006ea2:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8006ea6:	0721      	lsls	r1, r4, #28
 8006ea8:	d5c3      	bpl.n	8006e32 <_strtod_l+0x82>
 8006eaa:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8006eae:	e7c0      	b.n	8006e32 <_strtod_l+0x82>
 8006eb0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006eb2:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8006eb6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006eba:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006ebe:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8006ec2:	e7f0      	b.n	8006ea6 <_strtod_l+0xf6>
 8006ec4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007040 <_strtod_l+0x290>
 8006ec8:	e7ed      	b.n	8006ea6 <_strtod_l+0xf6>
 8006eca:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8006ece:	f04f 38ff 	mov.w	r8, #4294967295
 8006ed2:	e7e8      	b.n	8006ea6 <_strtod_l+0xf6>
 8006ed4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006ed6:	1c5a      	adds	r2, r3, #1
 8006ed8:	9219      	str	r2, [sp, #100]	; 0x64
 8006eda:	785b      	ldrb	r3, [r3, #1]
 8006edc:	2b30      	cmp	r3, #48	; 0x30
 8006ede:	d0f9      	beq.n	8006ed4 <_strtod_l+0x124>
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d0a6      	beq.n	8006e32 <_strtod_l+0x82>
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	9307      	str	r3, [sp, #28]
 8006ee8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006eea:	220a      	movs	r2, #10
 8006eec:	9308      	str	r3, [sp, #32]
 8006eee:	2300      	movs	r3, #0
 8006ef0:	469b      	mov	fp, r3
 8006ef2:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8006ef6:	9819      	ldr	r0, [sp, #100]	; 0x64
 8006ef8:	7805      	ldrb	r5, [r0, #0]
 8006efa:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8006efe:	b2d9      	uxtb	r1, r3
 8006f00:	2909      	cmp	r1, #9
 8006f02:	d927      	bls.n	8006f54 <_strtod_l+0x1a4>
 8006f04:	4622      	mov	r2, r4
 8006f06:	4639      	mov	r1, r7
 8006f08:	f003 fb67 	bl	800a5da <strncmp>
 8006f0c:	2800      	cmp	r0, #0
 8006f0e:	d033      	beq.n	8006f78 <_strtod_l+0x1c8>
 8006f10:	2000      	movs	r0, #0
 8006f12:	462a      	mov	r2, r5
 8006f14:	465c      	mov	r4, fp
 8006f16:	4603      	mov	r3, r0
 8006f18:	9004      	str	r0, [sp, #16]
 8006f1a:	2a65      	cmp	r2, #101	; 0x65
 8006f1c:	d001      	beq.n	8006f22 <_strtod_l+0x172>
 8006f1e:	2a45      	cmp	r2, #69	; 0x45
 8006f20:	d114      	bne.n	8006f4c <_strtod_l+0x19c>
 8006f22:	b91c      	cbnz	r4, 8006f2c <_strtod_l+0x17c>
 8006f24:	9a07      	ldr	r2, [sp, #28]
 8006f26:	4302      	orrs	r2, r0
 8006f28:	d09f      	beq.n	8006e6a <_strtod_l+0xba>
 8006f2a:	2400      	movs	r4, #0
 8006f2c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8006f2e:	1c72      	adds	r2, r6, #1
 8006f30:	9219      	str	r2, [sp, #100]	; 0x64
 8006f32:	7872      	ldrb	r2, [r6, #1]
 8006f34:	2a2b      	cmp	r2, #43	; 0x2b
 8006f36:	d079      	beq.n	800702c <_strtod_l+0x27c>
 8006f38:	2a2d      	cmp	r2, #45	; 0x2d
 8006f3a:	f000 8083 	beq.w	8007044 <_strtod_l+0x294>
 8006f3e:	2700      	movs	r7, #0
 8006f40:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006f44:	2909      	cmp	r1, #9
 8006f46:	f240 8083 	bls.w	8007050 <_strtod_l+0x2a0>
 8006f4a:	9619      	str	r6, [sp, #100]	; 0x64
 8006f4c:	2500      	movs	r5, #0
 8006f4e:	e09f      	b.n	8007090 <_strtod_l+0x2e0>
 8006f50:	2300      	movs	r3, #0
 8006f52:	e7c8      	b.n	8006ee6 <_strtod_l+0x136>
 8006f54:	f1bb 0f08 	cmp.w	fp, #8
 8006f58:	bfd5      	itete	le
 8006f5a:	9906      	ldrle	r1, [sp, #24]
 8006f5c:	9905      	ldrgt	r1, [sp, #20]
 8006f5e:	fb02 3301 	mlale	r3, r2, r1, r3
 8006f62:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006f66:	f100 0001 	add.w	r0, r0, #1
 8006f6a:	bfd4      	ite	le
 8006f6c:	9306      	strle	r3, [sp, #24]
 8006f6e:	9305      	strgt	r3, [sp, #20]
 8006f70:	f10b 0b01 	add.w	fp, fp, #1
 8006f74:	9019      	str	r0, [sp, #100]	; 0x64
 8006f76:	e7be      	b.n	8006ef6 <_strtod_l+0x146>
 8006f78:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006f7a:	191a      	adds	r2, r3, r4
 8006f7c:	9219      	str	r2, [sp, #100]	; 0x64
 8006f7e:	5d1a      	ldrb	r2, [r3, r4]
 8006f80:	f1bb 0f00 	cmp.w	fp, #0
 8006f84:	d036      	beq.n	8006ff4 <_strtod_l+0x244>
 8006f86:	465c      	mov	r4, fp
 8006f88:	9004      	str	r0, [sp, #16]
 8006f8a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006f8e:	2b09      	cmp	r3, #9
 8006f90:	d912      	bls.n	8006fb8 <_strtod_l+0x208>
 8006f92:	2301      	movs	r3, #1
 8006f94:	e7c1      	b.n	8006f1a <_strtod_l+0x16a>
 8006f96:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006f98:	3001      	adds	r0, #1
 8006f9a:	1c5a      	adds	r2, r3, #1
 8006f9c:	9219      	str	r2, [sp, #100]	; 0x64
 8006f9e:	785a      	ldrb	r2, [r3, #1]
 8006fa0:	2a30      	cmp	r2, #48	; 0x30
 8006fa2:	d0f8      	beq.n	8006f96 <_strtod_l+0x1e6>
 8006fa4:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006fa8:	2b08      	cmp	r3, #8
 8006faa:	f200 84d5 	bhi.w	8007958 <_strtod_l+0xba8>
 8006fae:	9004      	str	r0, [sp, #16]
 8006fb0:	2000      	movs	r0, #0
 8006fb2:	4604      	mov	r4, r0
 8006fb4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006fb6:	9308      	str	r3, [sp, #32]
 8006fb8:	3a30      	subs	r2, #48	; 0x30
 8006fba:	f100 0301 	add.w	r3, r0, #1
 8006fbe:	d013      	beq.n	8006fe8 <_strtod_l+0x238>
 8006fc0:	9904      	ldr	r1, [sp, #16]
 8006fc2:	1905      	adds	r5, r0, r4
 8006fc4:	4419      	add	r1, r3
 8006fc6:	9104      	str	r1, [sp, #16]
 8006fc8:	4623      	mov	r3, r4
 8006fca:	210a      	movs	r1, #10
 8006fcc:	42ab      	cmp	r3, r5
 8006fce:	d113      	bne.n	8006ff8 <_strtod_l+0x248>
 8006fd0:	1823      	adds	r3, r4, r0
 8006fd2:	2b08      	cmp	r3, #8
 8006fd4:	f104 0401 	add.w	r4, r4, #1
 8006fd8:	4404      	add	r4, r0
 8006fda:	dc1b      	bgt.n	8007014 <_strtod_l+0x264>
 8006fdc:	230a      	movs	r3, #10
 8006fde:	9906      	ldr	r1, [sp, #24]
 8006fe0:	fb03 2301 	mla	r3, r3, r1, r2
 8006fe4:	9306      	str	r3, [sp, #24]
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006fea:	4618      	mov	r0, r3
 8006fec:	1c51      	adds	r1, r2, #1
 8006fee:	9119      	str	r1, [sp, #100]	; 0x64
 8006ff0:	7852      	ldrb	r2, [r2, #1]
 8006ff2:	e7ca      	b.n	8006f8a <_strtod_l+0x1da>
 8006ff4:	4658      	mov	r0, fp
 8006ff6:	e7d3      	b.n	8006fa0 <_strtod_l+0x1f0>
 8006ff8:	2b08      	cmp	r3, #8
 8006ffa:	dc04      	bgt.n	8007006 <_strtod_l+0x256>
 8006ffc:	9f06      	ldr	r7, [sp, #24]
 8006ffe:	434f      	muls	r7, r1
 8007000:	9706      	str	r7, [sp, #24]
 8007002:	3301      	adds	r3, #1
 8007004:	e7e2      	b.n	8006fcc <_strtod_l+0x21c>
 8007006:	1c5f      	adds	r7, r3, #1
 8007008:	2f10      	cmp	r7, #16
 800700a:	bfde      	ittt	le
 800700c:	9f05      	ldrle	r7, [sp, #20]
 800700e:	434f      	mulle	r7, r1
 8007010:	9705      	strle	r7, [sp, #20]
 8007012:	e7f6      	b.n	8007002 <_strtod_l+0x252>
 8007014:	2c10      	cmp	r4, #16
 8007016:	bfdf      	itttt	le
 8007018:	230a      	movle	r3, #10
 800701a:	9905      	ldrle	r1, [sp, #20]
 800701c:	fb03 2301 	mlale	r3, r3, r1, r2
 8007020:	9305      	strle	r3, [sp, #20]
 8007022:	e7e0      	b.n	8006fe6 <_strtod_l+0x236>
 8007024:	2300      	movs	r3, #0
 8007026:	9304      	str	r3, [sp, #16]
 8007028:	2301      	movs	r3, #1
 800702a:	e77b      	b.n	8006f24 <_strtod_l+0x174>
 800702c:	2700      	movs	r7, #0
 800702e:	1cb2      	adds	r2, r6, #2
 8007030:	9219      	str	r2, [sp, #100]	; 0x64
 8007032:	78b2      	ldrb	r2, [r6, #2]
 8007034:	e784      	b.n	8006f40 <_strtod_l+0x190>
 8007036:	bf00      	nop
 8007038:	0800c4dc 	.word	0x0800c4dc
 800703c:	0800c230 	.word	0x0800c230
 8007040:	7ff00000 	.word	0x7ff00000
 8007044:	2701      	movs	r7, #1
 8007046:	e7f2      	b.n	800702e <_strtod_l+0x27e>
 8007048:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800704a:	1c51      	adds	r1, r2, #1
 800704c:	9119      	str	r1, [sp, #100]	; 0x64
 800704e:	7852      	ldrb	r2, [r2, #1]
 8007050:	2a30      	cmp	r2, #48	; 0x30
 8007052:	d0f9      	beq.n	8007048 <_strtod_l+0x298>
 8007054:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007058:	2908      	cmp	r1, #8
 800705a:	f63f af77 	bhi.w	8006f4c <_strtod_l+0x19c>
 800705e:	f04f 0e0a 	mov.w	lr, #10
 8007062:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8007066:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007068:	9209      	str	r2, [sp, #36]	; 0x24
 800706a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800706c:	1c51      	adds	r1, r2, #1
 800706e:	9119      	str	r1, [sp, #100]	; 0x64
 8007070:	7852      	ldrb	r2, [r2, #1]
 8007072:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8007076:	2d09      	cmp	r5, #9
 8007078:	d935      	bls.n	80070e6 <_strtod_l+0x336>
 800707a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800707c:	1b49      	subs	r1, r1, r5
 800707e:	2908      	cmp	r1, #8
 8007080:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8007084:	dc02      	bgt.n	800708c <_strtod_l+0x2dc>
 8007086:	4565      	cmp	r5, ip
 8007088:	bfa8      	it	ge
 800708a:	4665      	movge	r5, ip
 800708c:	b107      	cbz	r7, 8007090 <_strtod_l+0x2e0>
 800708e:	426d      	negs	r5, r5
 8007090:	2c00      	cmp	r4, #0
 8007092:	d14c      	bne.n	800712e <_strtod_l+0x37e>
 8007094:	9907      	ldr	r1, [sp, #28]
 8007096:	4301      	orrs	r1, r0
 8007098:	f47f aecb 	bne.w	8006e32 <_strtod_l+0x82>
 800709c:	2b00      	cmp	r3, #0
 800709e:	f47f aee4 	bne.w	8006e6a <_strtod_l+0xba>
 80070a2:	2a69      	cmp	r2, #105	; 0x69
 80070a4:	d026      	beq.n	80070f4 <_strtod_l+0x344>
 80070a6:	dc23      	bgt.n	80070f0 <_strtod_l+0x340>
 80070a8:	2a49      	cmp	r2, #73	; 0x49
 80070aa:	d023      	beq.n	80070f4 <_strtod_l+0x344>
 80070ac:	2a4e      	cmp	r2, #78	; 0x4e
 80070ae:	f47f aedc 	bne.w	8006e6a <_strtod_l+0xba>
 80070b2:	499d      	ldr	r1, [pc, #628]	; (8007328 <_strtod_l+0x578>)
 80070b4:	a819      	add	r0, sp, #100	; 0x64
 80070b6:	f002 f897 	bl	80091e8 <__match>
 80070ba:	2800      	cmp	r0, #0
 80070bc:	f43f aed5 	beq.w	8006e6a <_strtod_l+0xba>
 80070c0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80070c2:	781b      	ldrb	r3, [r3, #0]
 80070c4:	2b28      	cmp	r3, #40	; 0x28
 80070c6:	d12c      	bne.n	8007122 <_strtod_l+0x372>
 80070c8:	4998      	ldr	r1, [pc, #608]	; (800732c <_strtod_l+0x57c>)
 80070ca:	aa1c      	add	r2, sp, #112	; 0x70
 80070cc:	a819      	add	r0, sp, #100	; 0x64
 80070ce:	f002 f89f 	bl	8009210 <__hexnan>
 80070d2:	2805      	cmp	r0, #5
 80070d4:	d125      	bne.n	8007122 <_strtod_l+0x372>
 80070d6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80070d8:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 80070dc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80070e0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80070e4:	e6a5      	b.n	8006e32 <_strtod_l+0x82>
 80070e6:	fb0e 2c0c 	mla	ip, lr, ip, r2
 80070ea:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80070ee:	e7bc      	b.n	800706a <_strtod_l+0x2ba>
 80070f0:	2a6e      	cmp	r2, #110	; 0x6e
 80070f2:	e7dc      	b.n	80070ae <_strtod_l+0x2fe>
 80070f4:	498e      	ldr	r1, [pc, #568]	; (8007330 <_strtod_l+0x580>)
 80070f6:	a819      	add	r0, sp, #100	; 0x64
 80070f8:	f002 f876 	bl	80091e8 <__match>
 80070fc:	2800      	cmp	r0, #0
 80070fe:	f43f aeb4 	beq.w	8006e6a <_strtod_l+0xba>
 8007102:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007104:	498b      	ldr	r1, [pc, #556]	; (8007334 <_strtod_l+0x584>)
 8007106:	3b01      	subs	r3, #1
 8007108:	a819      	add	r0, sp, #100	; 0x64
 800710a:	9319      	str	r3, [sp, #100]	; 0x64
 800710c:	f002 f86c 	bl	80091e8 <__match>
 8007110:	b910      	cbnz	r0, 8007118 <_strtod_l+0x368>
 8007112:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007114:	3301      	adds	r3, #1
 8007116:	9319      	str	r3, [sp, #100]	; 0x64
 8007118:	f04f 0800 	mov.w	r8, #0
 800711c:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8007338 <_strtod_l+0x588>
 8007120:	e687      	b.n	8006e32 <_strtod_l+0x82>
 8007122:	4886      	ldr	r0, [pc, #536]	; (800733c <_strtod_l+0x58c>)
 8007124:	f003 fa00 	bl	800a528 <nan>
 8007128:	4680      	mov	r8, r0
 800712a:	4689      	mov	r9, r1
 800712c:	e681      	b.n	8006e32 <_strtod_l+0x82>
 800712e:	9b04      	ldr	r3, [sp, #16]
 8007130:	f1bb 0f00 	cmp.w	fp, #0
 8007134:	bf08      	it	eq
 8007136:	46a3      	moveq	fp, r4
 8007138:	1aeb      	subs	r3, r5, r3
 800713a:	2c10      	cmp	r4, #16
 800713c:	9806      	ldr	r0, [sp, #24]
 800713e:	4626      	mov	r6, r4
 8007140:	9307      	str	r3, [sp, #28]
 8007142:	bfa8      	it	ge
 8007144:	2610      	movge	r6, #16
 8007146:	f7f9 f94d 	bl	80003e4 <__aeabi_ui2d>
 800714a:	2c09      	cmp	r4, #9
 800714c:	4680      	mov	r8, r0
 800714e:	4689      	mov	r9, r1
 8007150:	dd13      	ble.n	800717a <_strtod_l+0x3ca>
 8007152:	4b7b      	ldr	r3, [pc, #492]	; (8007340 <_strtod_l+0x590>)
 8007154:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007158:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800715c:	f7f9 f9bc 	bl	80004d8 <__aeabi_dmul>
 8007160:	4680      	mov	r8, r0
 8007162:	9805      	ldr	r0, [sp, #20]
 8007164:	4689      	mov	r9, r1
 8007166:	f7f9 f93d 	bl	80003e4 <__aeabi_ui2d>
 800716a:	4602      	mov	r2, r0
 800716c:	460b      	mov	r3, r1
 800716e:	4640      	mov	r0, r8
 8007170:	4649      	mov	r1, r9
 8007172:	f7f8 fffb 	bl	800016c <__adddf3>
 8007176:	4680      	mov	r8, r0
 8007178:	4689      	mov	r9, r1
 800717a:	2c0f      	cmp	r4, #15
 800717c:	dc36      	bgt.n	80071ec <_strtod_l+0x43c>
 800717e:	9b07      	ldr	r3, [sp, #28]
 8007180:	2b00      	cmp	r3, #0
 8007182:	f43f ae56 	beq.w	8006e32 <_strtod_l+0x82>
 8007186:	dd22      	ble.n	80071ce <_strtod_l+0x41e>
 8007188:	2b16      	cmp	r3, #22
 800718a:	dc09      	bgt.n	80071a0 <_strtod_l+0x3f0>
 800718c:	496c      	ldr	r1, [pc, #432]	; (8007340 <_strtod_l+0x590>)
 800718e:	4642      	mov	r2, r8
 8007190:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007194:	464b      	mov	r3, r9
 8007196:	e9d1 0100 	ldrd	r0, r1, [r1]
 800719a:	f7f9 f99d 	bl	80004d8 <__aeabi_dmul>
 800719e:	e7c3      	b.n	8007128 <_strtod_l+0x378>
 80071a0:	9a07      	ldr	r2, [sp, #28]
 80071a2:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80071a6:	4293      	cmp	r3, r2
 80071a8:	db20      	blt.n	80071ec <_strtod_l+0x43c>
 80071aa:	4d65      	ldr	r5, [pc, #404]	; (8007340 <_strtod_l+0x590>)
 80071ac:	f1c4 040f 	rsb	r4, r4, #15
 80071b0:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80071b4:	4642      	mov	r2, r8
 80071b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80071ba:	464b      	mov	r3, r9
 80071bc:	f7f9 f98c 	bl	80004d8 <__aeabi_dmul>
 80071c0:	9b07      	ldr	r3, [sp, #28]
 80071c2:	1b1c      	subs	r4, r3, r4
 80071c4:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80071c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80071cc:	e7e5      	b.n	800719a <_strtod_l+0x3ea>
 80071ce:	9b07      	ldr	r3, [sp, #28]
 80071d0:	3316      	adds	r3, #22
 80071d2:	db0b      	blt.n	80071ec <_strtod_l+0x43c>
 80071d4:	9b04      	ldr	r3, [sp, #16]
 80071d6:	4640      	mov	r0, r8
 80071d8:	1b5d      	subs	r5, r3, r5
 80071da:	4b59      	ldr	r3, [pc, #356]	; (8007340 <_strtod_l+0x590>)
 80071dc:	4649      	mov	r1, r9
 80071de:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80071e2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80071e6:	f7f9 faa1 	bl	800072c <__aeabi_ddiv>
 80071ea:	e79d      	b.n	8007128 <_strtod_l+0x378>
 80071ec:	9b07      	ldr	r3, [sp, #28]
 80071ee:	1ba6      	subs	r6, r4, r6
 80071f0:	441e      	add	r6, r3
 80071f2:	2e00      	cmp	r6, #0
 80071f4:	dd74      	ble.n	80072e0 <_strtod_l+0x530>
 80071f6:	f016 030f 	ands.w	r3, r6, #15
 80071fa:	d00a      	beq.n	8007212 <_strtod_l+0x462>
 80071fc:	4950      	ldr	r1, [pc, #320]	; (8007340 <_strtod_l+0x590>)
 80071fe:	4642      	mov	r2, r8
 8007200:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007204:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007208:	464b      	mov	r3, r9
 800720a:	f7f9 f965 	bl	80004d8 <__aeabi_dmul>
 800720e:	4680      	mov	r8, r0
 8007210:	4689      	mov	r9, r1
 8007212:	f036 060f 	bics.w	r6, r6, #15
 8007216:	d052      	beq.n	80072be <_strtod_l+0x50e>
 8007218:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800721c:	dd27      	ble.n	800726e <_strtod_l+0x4be>
 800721e:	f04f 0b00 	mov.w	fp, #0
 8007222:	f8cd b010 	str.w	fp, [sp, #16]
 8007226:	f8cd b020 	str.w	fp, [sp, #32]
 800722a:	f8cd b018 	str.w	fp, [sp, #24]
 800722e:	2322      	movs	r3, #34	; 0x22
 8007230:	f04f 0800 	mov.w	r8, #0
 8007234:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8007338 <_strtod_l+0x588>
 8007238:	f8ca 3000 	str.w	r3, [sl]
 800723c:	9b08      	ldr	r3, [sp, #32]
 800723e:	2b00      	cmp	r3, #0
 8007240:	f43f adf7 	beq.w	8006e32 <_strtod_l+0x82>
 8007244:	4650      	mov	r0, sl
 8007246:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007248:	f002 f952 	bl	80094f0 <_Bfree>
 800724c:	4650      	mov	r0, sl
 800724e:	9906      	ldr	r1, [sp, #24]
 8007250:	f002 f94e 	bl	80094f0 <_Bfree>
 8007254:	4650      	mov	r0, sl
 8007256:	9904      	ldr	r1, [sp, #16]
 8007258:	f002 f94a 	bl	80094f0 <_Bfree>
 800725c:	4650      	mov	r0, sl
 800725e:	9908      	ldr	r1, [sp, #32]
 8007260:	f002 f946 	bl	80094f0 <_Bfree>
 8007264:	4659      	mov	r1, fp
 8007266:	4650      	mov	r0, sl
 8007268:	f002 f942 	bl	80094f0 <_Bfree>
 800726c:	e5e1      	b.n	8006e32 <_strtod_l+0x82>
 800726e:	4b35      	ldr	r3, [pc, #212]	; (8007344 <_strtod_l+0x594>)
 8007270:	4640      	mov	r0, r8
 8007272:	9305      	str	r3, [sp, #20]
 8007274:	2300      	movs	r3, #0
 8007276:	4649      	mov	r1, r9
 8007278:	461f      	mov	r7, r3
 800727a:	1136      	asrs	r6, r6, #4
 800727c:	2e01      	cmp	r6, #1
 800727e:	dc21      	bgt.n	80072c4 <_strtod_l+0x514>
 8007280:	b10b      	cbz	r3, 8007286 <_strtod_l+0x4d6>
 8007282:	4680      	mov	r8, r0
 8007284:	4689      	mov	r9, r1
 8007286:	4b2f      	ldr	r3, [pc, #188]	; (8007344 <_strtod_l+0x594>)
 8007288:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800728c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007290:	4642      	mov	r2, r8
 8007292:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007296:	464b      	mov	r3, r9
 8007298:	f7f9 f91e 	bl	80004d8 <__aeabi_dmul>
 800729c:	4b26      	ldr	r3, [pc, #152]	; (8007338 <_strtod_l+0x588>)
 800729e:	460a      	mov	r2, r1
 80072a0:	400b      	ands	r3, r1
 80072a2:	4929      	ldr	r1, [pc, #164]	; (8007348 <_strtod_l+0x598>)
 80072a4:	4680      	mov	r8, r0
 80072a6:	428b      	cmp	r3, r1
 80072a8:	d8b9      	bhi.n	800721e <_strtod_l+0x46e>
 80072aa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80072ae:	428b      	cmp	r3, r1
 80072b0:	bf86      	itte	hi
 80072b2:	f04f 38ff 	movhi.w	r8, #4294967295
 80072b6:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800734c <_strtod_l+0x59c>
 80072ba:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80072be:	2300      	movs	r3, #0
 80072c0:	9305      	str	r3, [sp, #20]
 80072c2:	e07f      	b.n	80073c4 <_strtod_l+0x614>
 80072c4:	07f2      	lsls	r2, r6, #31
 80072c6:	d505      	bpl.n	80072d4 <_strtod_l+0x524>
 80072c8:	9b05      	ldr	r3, [sp, #20]
 80072ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ce:	f7f9 f903 	bl	80004d8 <__aeabi_dmul>
 80072d2:	2301      	movs	r3, #1
 80072d4:	9a05      	ldr	r2, [sp, #20]
 80072d6:	3701      	adds	r7, #1
 80072d8:	3208      	adds	r2, #8
 80072da:	1076      	asrs	r6, r6, #1
 80072dc:	9205      	str	r2, [sp, #20]
 80072de:	e7cd      	b.n	800727c <_strtod_l+0x4cc>
 80072e0:	d0ed      	beq.n	80072be <_strtod_l+0x50e>
 80072e2:	4276      	negs	r6, r6
 80072e4:	f016 020f 	ands.w	r2, r6, #15
 80072e8:	d00a      	beq.n	8007300 <_strtod_l+0x550>
 80072ea:	4b15      	ldr	r3, [pc, #84]	; (8007340 <_strtod_l+0x590>)
 80072ec:	4640      	mov	r0, r8
 80072ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80072f2:	4649      	mov	r1, r9
 80072f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072f8:	f7f9 fa18 	bl	800072c <__aeabi_ddiv>
 80072fc:	4680      	mov	r8, r0
 80072fe:	4689      	mov	r9, r1
 8007300:	1136      	asrs	r6, r6, #4
 8007302:	d0dc      	beq.n	80072be <_strtod_l+0x50e>
 8007304:	2e1f      	cmp	r6, #31
 8007306:	dd23      	ble.n	8007350 <_strtod_l+0x5a0>
 8007308:	f04f 0b00 	mov.w	fp, #0
 800730c:	f8cd b010 	str.w	fp, [sp, #16]
 8007310:	f8cd b020 	str.w	fp, [sp, #32]
 8007314:	f8cd b018 	str.w	fp, [sp, #24]
 8007318:	2322      	movs	r3, #34	; 0x22
 800731a:	f04f 0800 	mov.w	r8, #0
 800731e:	f04f 0900 	mov.w	r9, #0
 8007322:	f8ca 3000 	str.w	r3, [sl]
 8007326:	e789      	b.n	800723c <_strtod_l+0x48c>
 8007328:	0800c201 	.word	0x0800c201
 800732c:	0800c244 	.word	0x0800c244
 8007330:	0800c1f9 	.word	0x0800c1f9
 8007334:	0800c384 	.word	0x0800c384
 8007338:	7ff00000 	.word	0x7ff00000
 800733c:	0800c698 	.word	0x0800c698
 8007340:	0800c578 	.word	0x0800c578
 8007344:	0800c550 	.word	0x0800c550
 8007348:	7ca00000 	.word	0x7ca00000
 800734c:	7fefffff 	.word	0x7fefffff
 8007350:	f016 0310 	ands.w	r3, r6, #16
 8007354:	bf18      	it	ne
 8007356:	236a      	movne	r3, #106	; 0x6a
 8007358:	4640      	mov	r0, r8
 800735a:	9305      	str	r3, [sp, #20]
 800735c:	4649      	mov	r1, r9
 800735e:	2300      	movs	r3, #0
 8007360:	4fb0      	ldr	r7, [pc, #704]	; (8007624 <_strtod_l+0x874>)
 8007362:	07f2      	lsls	r2, r6, #31
 8007364:	d504      	bpl.n	8007370 <_strtod_l+0x5c0>
 8007366:	e9d7 2300 	ldrd	r2, r3, [r7]
 800736a:	f7f9 f8b5 	bl	80004d8 <__aeabi_dmul>
 800736e:	2301      	movs	r3, #1
 8007370:	1076      	asrs	r6, r6, #1
 8007372:	f107 0708 	add.w	r7, r7, #8
 8007376:	d1f4      	bne.n	8007362 <_strtod_l+0x5b2>
 8007378:	b10b      	cbz	r3, 800737e <_strtod_l+0x5ce>
 800737a:	4680      	mov	r8, r0
 800737c:	4689      	mov	r9, r1
 800737e:	9b05      	ldr	r3, [sp, #20]
 8007380:	b1c3      	cbz	r3, 80073b4 <_strtod_l+0x604>
 8007382:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007386:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800738a:	2b00      	cmp	r3, #0
 800738c:	4649      	mov	r1, r9
 800738e:	dd11      	ble.n	80073b4 <_strtod_l+0x604>
 8007390:	2b1f      	cmp	r3, #31
 8007392:	f340 8127 	ble.w	80075e4 <_strtod_l+0x834>
 8007396:	2b34      	cmp	r3, #52	; 0x34
 8007398:	bfd8      	it	le
 800739a:	f04f 33ff 	movle.w	r3, #4294967295
 800739e:	f04f 0800 	mov.w	r8, #0
 80073a2:	bfcf      	iteee	gt
 80073a4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80073a8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80073ac:	fa03 f202 	lslle.w	r2, r3, r2
 80073b0:	ea02 0901 	andle.w	r9, r2, r1
 80073b4:	2200      	movs	r2, #0
 80073b6:	2300      	movs	r3, #0
 80073b8:	4640      	mov	r0, r8
 80073ba:	4649      	mov	r1, r9
 80073bc:	f7f9 faf4 	bl	80009a8 <__aeabi_dcmpeq>
 80073c0:	2800      	cmp	r0, #0
 80073c2:	d1a1      	bne.n	8007308 <_strtod_l+0x558>
 80073c4:	9b06      	ldr	r3, [sp, #24]
 80073c6:	465a      	mov	r2, fp
 80073c8:	9300      	str	r3, [sp, #0]
 80073ca:	4650      	mov	r0, sl
 80073cc:	4623      	mov	r3, r4
 80073ce:	9908      	ldr	r1, [sp, #32]
 80073d0:	f002 f8f6 	bl	80095c0 <__s2b>
 80073d4:	9008      	str	r0, [sp, #32]
 80073d6:	2800      	cmp	r0, #0
 80073d8:	f43f af21 	beq.w	800721e <_strtod_l+0x46e>
 80073dc:	9b04      	ldr	r3, [sp, #16]
 80073de:	f04f 0b00 	mov.w	fp, #0
 80073e2:	1b5d      	subs	r5, r3, r5
 80073e4:	9b07      	ldr	r3, [sp, #28]
 80073e6:	f8cd b010 	str.w	fp, [sp, #16]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	bfb4      	ite	lt
 80073ee:	462b      	movlt	r3, r5
 80073f0:	2300      	movge	r3, #0
 80073f2:	930e      	str	r3, [sp, #56]	; 0x38
 80073f4:	9b07      	ldr	r3, [sp, #28]
 80073f6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80073fa:	9314      	str	r3, [sp, #80]	; 0x50
 80073fc:	9b08      	ldr	r3, [sp, #32]
 80073fe:	4650      	mov	r0, sl
 8007400:	6859      	ldr	r1, [r3, #4]
 8007402:	f002 f835 	bl	8009470 <_Balloc>
 8007406:	9006      	str	r0, [sp, #24]
 8007408:	2800      	cmp	r0, #0
 800740a:	f43f af10 	beq.w	800722e <_strtod_l+0x47e>
 800740e:	9b08      	ldr	r3, [sp, #32]
 8007410:	300c      	adds	r0, #12
 8007412:	691a      	ldr	r2, [r3, #16]
 8007414:	f103 010c 	add.w	r1, r3, #12
 8007418:	3202      	adds	r2, #2
 800741a:	0092      	lsls	r2, r2, #2
 800741c:	f7fe fd6e 	bl	8005efc <memcpy>
 8007420:	ab1c      	add	r3, sp, #112	; 0x70
 8007422:	9301      	str	r3, [sp, #4]
 8007424:	ab1b      	add	r3, sp, #108	; 0x6c
 8007426:	9300      	str	r3, [sp, #0]
 8007428:	4642      	mov	r2, r8
 800742a:	464b      	mov	r3, r9
 800742c:	4650      	mov	r0, sl
 800742e:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8007432:	f002 fc07 	bl	8009c44 <__d2b>
 8007436:	901a      	str	r0, [sp, #104]	; 0x68
 8007438:	2800      	cmp	r0, #0
 800743a:	f43f aef8 	beq.w	800722e <_strtod_l+0x47e>
 800743e:	2101      	movs	r1, #1
 8007440:	4650      	mov	r0, sl
 8007442:	f002 f955 	bl	80096f0 <__i2b>
 8007446:	4603      	mov	r3, r0
 8007448:	9004      	str	r0, [sp, #16]
 800744a:	2800      	cmp	r0, #0
 800744c:	f43f aeef 	beq.w	800722e <_strtod_l+0x47e>
 8007450:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8007452:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007454:	2d00      	cmp	r5, #0
 8007456:	bfab      	itete	ge
 8007458:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800745a:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 800745c:	18ee      	addge	r6, r5, r3
 800745e:	1b5c      	sublt	r4, r3, r5
 8007460:	9b05      	ldr	r3, [sp, #20]
 8007462:	bfa8      	it	ge
 8007464:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8007466:	eba5 0503 	sub.w	r5, r5, r3
 800746a:	4415      	add	r5, r2
 800746c:	4b6e      	ldr	r3, [pc, #440]	; (8007628 <_strtod_l+0x878>)
 800746e:	f105 35ff 	add.w	r5, r5, #4294967295
 8007472:	bfb8      	it	lt
 8007474:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8007476:	429d      	cmp	r5, r3
 8007478:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800747c:	f280 80c4 	bge.w	8007608 <_strtod_l+0x858>
 8007480:	1b5b      	subs	r3, r3, r5
 8007482:	2b1f      	cmp	r3, #31
 8007484:	f04f 0701 	mov.w	r7, #1
 8007488:	eba2 0203 	sub.w	r2, r2, r3
 800748c:	f300 80b1 	bgt.w	80075f2 <_strtod_l+0x842>
 8007490:	2500      	movs	r5, #0
 8007492:	fa07 f303 	lsl.w	r3, r7, r3
 8007496:	930f      	str	r3, [sp, #60]	; 0x3c
 8007498:	18b7      	adds	r7, r6, r2
 800749a:	9b05      	ldr	r3, [sp, #20]
 800749c:	42be      	cmp	r6, r7
 800749e:	4414      	add	r4, r2
 80074a0:	441c      	add	r4, r3
 80074a2:	4633      	mov	r3, r6
 80074a4:	bfa8      	it	ge
 80074a6:	463b      	movge	r3, r7
 80074a8:	42a3      	cmp	r3, r4
 80074aa:	bfa8      	it	ge
 80074ac:	4623      	movge	r3, r4
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	bfc2      	ittt	gt
 80074b2:	1aff      	subgt	r7, r7, r3
 80074b4:	1ae4      	subgt	r4, r4, r3
 80074b6:	1af6      	subgt	r6, r6, r3
 80074b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	dd17      	ble.n	80074ee <_strtod_l+0x73e>
 80074be:	461a      	mov	r2, r3
 80074c0:	4650      	mov	r0, sl
 80074c2:	9904      	ldr	r1, [sp, #16]
 80074c4:	f002 f9d2 	bl	800986c <__pow5mult>
 80074c8:	9004      	str	r0, [sp, #16]
 80074ca:	2800      	cmp	r0, #0
 80074cc:	f43f aeaf 	beq.w	800722e <_strtod_l+0x47e>
 80074d0:	4601      	mov	r1, r0
 80074d2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80074d4:	4650      	mov	r0, sl
 80074d6:	f002 f921 	bl	800971c <__multiply>
 80074da:	9009      	str	r0, [sp, #36]	; 0x24
 80074dc:	2800      	cmp	r0, #0
 80074de:	f43f aea6 	beq.w	800722e <_strtod_l+0x47e>
 80074e2:	4650      	mov	r0, sl
 80074e4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80074e6:	f002 f803 	bl	80094f0 <_Bfree>
 80074ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074ec:	931a      	str	r3, [sp, #104]	; 0x68
 80074ee:	2f00      	cmp	r7, #0
 80074f0:	f300 808e 	bgt.w	8007610 <_strtod_l+0x860>
 80074f4:	9b07      	ldr	r3, [sp, #28]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	dd08      	ble.n	800750c <_strtod_l+0x75c>
 80074fa:	4650      	mov	r0, sl
 80074fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80074fe:	9906      	ldr	r1, [sp, #24]
 8007500:	f002 f9b4 	bl	800986c <__pow5mult>
 8007504:	9006      	str	r0, [sp, #24]
 8007506:	2800      	cmp	r0, #0
 8007508:	f43f ae91 	beq.w	800722e <_strtod_l+0x47e>
 800750c:	2c00      	cmp	r4, #0
 800750e:	dd08      	ble.n	8007522 <_strtod_l+0x772>
 8007510:	4622      	mov	r2, r4
 8007512:	4650      	mov	r0, sl
 8007514:	9906      	ldr	r1, [sp, #24]
 8007516:	f002 fa03 	bl	8009920 <__lshift>
 800751a:	9006      	str	r0, [sp, #24]
 800751c:	2800      	cmp	r0, #0
 800751e:	f43f ae86 	beq.w	800722e <_strtod_l+0x47e>
 8007522:	2e00      	cmp	r6, #0
 8007524:	dd08      	ble.n	8007538 <_strtod_l+0x788>
 8007526:	4632      	mov	r2, r6
 8007528:	4650      	mov	r0, sl
 800752a:	9904      	ldr	r1, [sp, #16]
 800752c:	f002 f9f8 	bl	8009920 <__lshift>
 8007530:	9004      	str	r0, [sp, #16]
 8007532:	2800      	cmp	r0, #0
 8007534:	f43f ae7b 	beq.w	800722e <_strtod_l+0x47e>
 8007538:	4650      	mov	r0, sl
 800753a:	9a06      	ldr	r2, [sp, #24]
 800753c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800753e:	f002 fa7b 	bl	8009a38 <__mdiff>
 8007542:	4683      	mov	fp, r0
 8007544:	2800      	cmp	r0, #0
 8007546:	f43f ae72 	beq.w	800722e <_strtod_l+0x47e>
 800754a:	2400      	movs	r4, #0
 800754c:	68c3      	ldr	r3, [r0, #12]
 800754e:	9904      	ldr	r1, [sp, #16]
 8007550:	60c4      	str	r4, [r0, #12]
 8007552:	930b      	str	r3, [sp, #44]	; 0x2c
 8007554:	f002 fa54 	bl	8009a00 <__mcmp>
 8007558:	42a0      	cmp	r0, r4
 800755a:	da6b      	bge.n	8007634 <_strtod_l+0x884>
 800755c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800755e:	ea53 0308 	orrs.w	r3, r3, r8
 8007562:	f040 8091 	bne.w	8007688 <_strtod_l+0x8d8>
 8007566:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800756a:	2b00      	cmp	r3, #0
 800756c:	f040 808c 	bne.w	8007688 <_strtod_l+0x8d8>
 8007570:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007574:	0d1b      	lsrs	r3, r3, #20
 8007576:	051b      	lsls	r3, r3, #20
 8007578:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800757c:	f240 8084 	bls.w	8007688 <_strtod_l+0x8d8>
 8007580:	f8db 3014 	ldr.w	r3, [fp, #20]
 8007584:	b91b      	cbnz	r3, 800758e <_strtod_l+0x7de>
 8007586:	f8db 3010 	ldr.w	r3, [fp, #16]
 800758a:	2b01      	cmp	r3, #1
 800758c:	dd7c      	ble.n	8007688 <_strtod_l+0x8d8>
 800758e:	4659      	mov	r1, fp
 8007590:	2201      	movs	r2, #1
 8007592:	4650      	mov	r0, sl
 8007594:	f002 f9c4 	bl	8009920 <__lshift>
 8007598:	9904      	ldr	r1, [sp, #16]
 800759a:	4683      	mov	fp, r0
 800759c:	f002 fa30 	bl	8009a00 <__mcmp>
 80075a0:	2800      	cmp	r0, #0
 80075a2:	dd71      	ble.n	8007688 <_strtod_l+0x8d8>
 80075a4:	9905      	ldr	r1, [sp, #20]
 80075a6:	464b      	mov	r3, r9
 80075a8:	4a20      	ldr	r2, [pc, #128]	; (800762c <_strtod_l+0x87c>)
 80075aa:	2900      	cmp	r1, #0
 80075ac:	f000 808c 	beq.w	80076c8 <_strtod_l+0x918>
 80075b0:	ea02 0109 	and.w	r1, r2, r9
 80075b4:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80075b8:	f300 8086 	bgt.w	80076c8 <_strtod_l+0x918>
 80075bc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80075c0:	f77f aeaa 	ble.w	8007318 <_strtod_l+0x568>
 80075c4:	4640      	mov	r0, r8
 80075c6:	4649      	mov	r1, r9
 80075c8:	4b19      	ldr	r3, [pc, #100]	; (8007630 <_strtod_l+0x880>)
 80075ca:	2200      	movs	r2, #0
 80075cc:	f7f8 ff84 	bl	80004d8 <__aeabi_dmul>
 80075d0:	460b      	mov	r3, r1
 80075d2:	4303      	orrs	r3, r0
 80075d4:	bf08      	it	eq
 80075d6:	2322      	moveq	r3, #34	; 0x22
 80075d8:	4680      	mov	r8, r0
 80075da:	4689      	mov	r9, r1
 80075dc:	bf08      	it	eq
 80075de:	f8ca 3000 	streq.w	r3, [sl]
 80075e2:	e62f      	b.n	8007244 <_strtod_l+0x494>
 80075e4:	f04f 32ff 	mov.w	r2, #4294967295
 80075e8:	fa02 f303 	lsl.w	r3, r2, r3
 80075ec:	ea03 0808 	and.w	r8, r3, r8
 80075f0:	e6e0      	b.n	80073b4 <_strtod_l+0x604>
 80075f2:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80075f6:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80075fa:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80075fe:	35e2      	adds	r5, #226	; 0xe2
 8007600:	fa07 f505 	lsl.w	r5, r7, r5
 8007604:	970f      	str	r7, [sp, #60]	; 0x3c
 8007606:	e747      	b.n	8007498 <_strtod_l+0x6e8>
 8007608:	2301      	movs	r3, #1
 800760a:	2500      	movs	r5, #0
 800760c:	930f      	str	r3, [sp, #60]	; 0x3c
 800760e:	e743      	b.n	8007498 <_strtod_l+0x6e8>
 8007610:	463a      	mov	r2, r7
 8007612:	4650      	mov	r0, sl
 8007614:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007616:	f002 f983 	bl	8009920 <__lshift>
 800761a:	901a      	str	r0, [sp, #104]	; 0x68
 800761c:	2800      	cmp	r0, #0
 800761e:	f47f af69 	bne.w	80074f4 <_strtod_l+0x744>
 8007622:	e604      	b.n	800722e <_strtod_l+0x47e>
 8007624:	0800c258 	.word	0x0800c258
 8007628:	fffffc02 	.word	0xfffffc02
 800762c:	7ff00000 	.word	0x7ff00000
 8007630:	39500000 	.word	0x39500000
 8007634:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007638:	d165      	bne.n	8007706 <_strtod_l+0x956>
 800763a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800763c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007640:	b35a      	cbz	r2, 800769a <_strtod_l+0x8ea>
 8007642:	4a99      	ldr	r2, [pc, #612]	; (80078a8 <_strtod_l+0xaf8>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d12b      	bne.n	80076a0 <_strtod_l+0x8f0>
 8007648:	9b05      	ldr	r3, [sp, #20]
 800764a:	4641      	mov	r1, r8
 800764c:	b303      	cbz	r3, 8007690 <_strtod_l+0x8e0>
 800764e:	464a      	mov	r2, r9
 8007650:	4b96      	ldr	r3, [pc, #600]	; (80078ac <_strtod_l+0xafc>)
 8007652:	4013      	ands	r3, r2
 8007654:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007658:	f04f 32ff 	mov.w	r2, #4294967295
 800765c:	d81b      	bhi.n	8007696 <_strtod_l+0x8e6>
 800765e:	0d1b      	lsrs	r3, r3, #20
 8007660:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007664:	fa02 f303 	lsl.w	r3, r2, r3
 8007668:	4299      	cmp	r1, r3
 800766a:	d119      	bne.n	80076a0 <_strtod_l+0x8f0>
 800766c:	4b90      	ldr	r3, [pc, #576]	; (80078b0 <_strtod_l+0xb00>)
 800766e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007670:	429a      	cmp	r2, r3
 8007672:	d102      	bne.n	800767a <_strtod_l+0x8ca>
 8007674:	3101      	adds	r1, #1
 8007676:	f43f adda 	beq.w	800722e <_strtod_l+0x47e>
 800767a:	f04f 0800 	mov.w	r8, #0
 800767e:	4b8b      	ldr	r3, [pc, #556]	; (80078ac <_strtod_l+0xafc>)
 8007680:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007682:	401a      	ands	r2, r3
 8007684:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8007688:	9b05      	ldr	r3, [sp, #20]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d19a      	bne.n	80075c4 <_strtod_l+0x814>
 800768e:	e5d9      	b.n	8007244 <_strtod_l+0x494>
 8007690:	f04f 33ff 	mov.w	r3, #4294967295
 8007694:	e7e8      	b.n	8007668 <_strtod_l+0x8b8>
 8007696:	4613      	mov	r3, r2
 8007698:	e7e6      	b.n	8007668 <_strtod_l+0x8b8>
 800769a:	ea53 0308 	orrs.w	r3, r3, r8
 800769e:	d081      	beq.n	80075a4 <_strtod_l+0x7f4>
 80076a0:	b1e5      	cbz	r5, 80076dc <_strtod_l+0x92c>
 80076a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076a4:	421d      	tst	r5, r3
 80076a6:	d0ef      	beq.n	8007688 <_strtod_l+0x8d8>
 80076a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076aa:	4640      	mov	r0, r8
 80076ac:	4649      	mov	r1, r9
 80076ae:	9a05      	ldr	r2, [sp, #20]
 80076b0:	b1c3      	cbz	r3, 80076e4 <_strtod_l+0x934>
 80076b2:	f7ff fb59 	bl	8006d68 <sulp>
 80076b6:	4602      	mov	r2, r0
 80076b8:	460b      	mov	r3, r1
 80076ba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80076be:	f7f8 fd55 	bl	800016c <__adddf3>
 80076c2:	4680      	mov	r8, r0
 80076c4:	4689      	mov	r9, r1
 80076c6:	e7df      	b.n	8007688 <_strtod_l+0x8d8>
 80076c8:	4013      	ands	r3, r2
 80076ca:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80076ce:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80076d2:	f04f 38ff 	mov.w	r8, #4294967295
 80076d6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80076da:	e7d5      	b.n	8007688 <_strtod_l+0x8d8>
 80076dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80076de:	ea13 0f08 	tst.w	r3, r8
 80076e2:	e7e0      	b.n	80076a6 <_strtod_l+0x8f6>
 80076e4:	f7ff fb40 	bl	8006d68 <sulp>
 80076e8:	4602      	mov	r2, r0
 80076ea:	460b      	mov	r3, r1
 80076ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80076f0:	f7f8 fd3a 	bl	8000168 <__aeabi_dsub>
 80076f4:	2200      	movs	r2, #0
 80076f6:	2300      	movs	r3, #0
 80076f8:	4680      	mov	r8, r0
 80076fa:	4689      	mov	r9, r1
 80076fc:	f7f9 f954 	bl	80009a8 <__aeabi_dcmpeq>
 8007700:	2800      	cmp	r0, #0
 8007702:	d0c1      	beq.n	8007688 <_strtod_l+0x8d8>
 8007704:	e608      	b.n	8007318 <_strtod_l+0x568>
 8007706:	4658      	mov	r0, fp
 8007708:	9904      	ldr	r1, [sp, #16]
 800770a:	f002 faf7 	bl	8009cfc <__ratio>
 800770e:	2200      	movs	r2, #0
 8007710:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007714:	4606      	mov	r6, r0
 8007716:	460f      	mov	r7, r1
 8007718:	f7f9 f95a 	bl	80009d0 <__aeabi_dcmple>
 800771c:	2800      	cmp	r0, #0
 800771e:	d070      	beq.n	8007802 <_strtod_l+0xa52>
 8007720:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007722:	2b00      	cmp	r3, #0
 8007724:	d042      	beq.n	80077ac <_strtod_l+0x9fc>
 8007726:	2600      	movs	r6, #0
 8007728:	4f62      	ldr	r7, [pc, #392]	; (80078b4 <_strtod_l+0xb04>)
 800772a:	4d62      	ldr	r5, [pc, #392]	; (80078b4 <_strtod_l+0xb04>)
 800772c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800772e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007732:	0d1b      	lsrs	r3, r3, #20
 8007734:	051b      	lsls	r3, r3, #20
 8007736:	930f      	str	r3, [sp, #60]	; 0x3c
 8007738:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800773a:	4b5f      	ldr	r3, [pc, #380]	; (80078b8 <_strtod_l+0xb08>)
 800773c:	429a      	cmp	r2, r3
 800773e:	f040 80c3 	bne.w	80078c8 <_strtod_l+0xb18>
 8007742:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007744:	4640      	mov	r0, r8
 8007746:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800774a:	4649      	mov	r1, r9
 800774c:	f002 fa00 	bl	8009b50 <__ulp>
 8007750:	4602      	mov	r2, r0
 8007752:	460b      	mov	r3, r1
 8007754:	4630      	mov	r0, r6
 8007756:	4639      	mov	r1, r7
 8007758:	f7f8 febe 	bl	80004d8 <__aeabi_dmul>
 800775c:	4642      	mov	r2, r8
 800775e:	464b      	mov	r3, r9
 8007760:	f7f8 fd04 	bl	800016c <__adddf3>
 8007764:	460b      	mov	r3, r1
 8007766:	4951      	ldr	r1, [pc, #324]	; (80078ac <_strtod_l+0xafc>)
 8007768:	4a54      	ldr	r2, [pc, #336]	; (80078bc <_strtod_l+0xb0c>)
 800776a:	4019      	ands	r1, r3
 800776c:	4291      	cmp	r1, r2
 800776e:	4680      	mov	r8, r0
 8007770:	d95d      	bls.n	800782e <_strtod_l+0xa7e>
 8007772:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007774:	4b4e      	ldr	r3, [pc, #312]	; (80078b0 <_strtod_l+0xb00>)
 8007776:	429a      	cmp	r2, r3
 8007778:	d103      	bne.n	8007782 <_strtod_l+0x9d2>
 800777a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800777c:	3301      	adds	r3, #1
 800777e:	f43f ad56 	beq.w	800722e <_strtod_l+0x47e>
 8007782:	f04f 38ff 	mov.w	r8, #4294967295
 8007786:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80078b0 <_strtod_l+0xb00>
 800778a:	4650      	mov	r0, sl
 800778c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800778e:	f001 feaf 	bl	80094f0 <_Bfree>
 8007792:	4650      	mov	r0, sl
 8007794:	9906      	ldr	r1, [sp, #24]
 8007796:	f001 feab 	bl	80094f0 <_Bfree>
 800779a:	4650      	mov	r0, sl
 800779c:	9904      	ldr	r1, [sp, #16]
 800779e:	f001 fea7 	bl	80094f0 <_Bfree>
 80077a2:	4659      	mov	r1, fp
 80077a4:	4650      	mov	r0, sl
 80077a6:	f001 fea3 	bl	80094f0 <_Bfree>
 80077aa:	e627      	b.n	80073fc <_strtod_l+0x64c>
 80077ac:	f1b8 0f00 	cmp.w	r8, #0
 80077b0:	d119      	bne.n	80077e6 <_strtod_l+0xa36>
 80077b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80077b8:	b9e3      	cbnz	r3, 80077f4 <_strtod_l+0xa44>
 80077ba:	2200      	movs	r2, #0
 80077bc:	4630      	mov	r0, r6
 80077be:	4639      	mov	r1, r7
 80077c0:	4b3c      	ldr	r3, [pc, #240]	; (80078b4 <_strtod_l+0xb04>)
 80077c2:	f7f9 f8fb 	bl	80009bc <__aeabi_dcmplt>
 80077c6:	b9c8      	cbnz	r0, 80077fc <_strtod_l+0xa4c>
 80077c8:	2200      	movs	r2, #0
 80077ca:	4630      	mov	r0, r6
 80077cc:	4639      	mov	r1, r7
 80077ce:	4b3c      	ldr	r3, [pc, #240]	; (80078c0 <_strtod_l+0xb10>)
 80077d0:	f7f8 fe82 	bl	80004d8 <__aeabi_dmul>
 80077d4:	4604      	mov	r4, r0
 80077d6:	460d      	mov	r5, r1
 80077d8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80077dc:	9416      	str	r4, [sp, #88]	; 0x58
 80077de:	9317      	str	r3, [sp, #92]	; 0x5c
 80077e0:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 80077e4:	e7a2      	b.n	800772c <_strtod_l+0x97c>
 80077e6:	f1b8 0f01 	cmp.w	r8, #1
 80077ea:	d103      	bne.n	80077f4 <_strtod_l+0xa44>
 80077ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	f43f ad92 	beq.w	8007318 <_strtod_l+0x568>
 80077f4:	2600      	movs	r6, #0
 80077f6:	2400      	movs	r4, #0
 80077f8:	4f32      	ldr	r7, [pc, #200]	; (80078c4 <_strtod_l+0xb14>)
 80077fa:	e796      	b.n	800772a <_strtod_l+0x97a>
 80077fc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80077fe:	4d30      	ldr	r5, [pc, #192]	; (80078c0 <_strtod_l+0xb10>)
 8007800:	e7ea      	b.n	80077d8 <_strtod_l+0xa28>
 8007802:	4b2f      	ldr	r3, [pc, #188]	; (80078c0 <_strtod_l+0xb10>)
 8007804:	2200      	movs	r2, #0
 8007806:	4630      	mov	r0, r6
 8007808:	4639      	mov	r1, r7
 800780a:	f7f8 fe65 	bl	80004d8 <__aeabi_dmul>
 800780e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007810:	4604      	mov	r4, r0
 8007812:	460d      	mov	r5, r1
 8007814:	b933      	cbnz	r3, 8007824 <_strtod_l+0xa74>
 8007816:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800781a:	9010      	str	r0, [sp, #64]	; 0x40
 800781c:	9311      	str	r3, [sp, #68]	; 0x44
 800781e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007822:	e783      	b.n	800772c <_strtod_l+0x97c>
 8007824:	4602      	mov	r2, r0
 8007826:	460b      	mov	r3, r1
 8007828:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800782c:	e7f7      	b.n	800781e <_strtod_l+0xa6e>
 800782e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8007832:	9b05      	ldr	r3, [sp, #20]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d1a8      	bne.n	800778a <_strtod_l+0x9da>
 8007838:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800783c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800783e:	0d1b      	lsrs	r3, r3, #20
 8007840:	051b      	lsls	r3, r3, #20
 8007842:	429a      	cmp	r2, r3
 8007844:	d1a1      	bne.n	800778a <_strtod_l+0x9da>
 8007846:	4620      	mov	r0, r4
 8007848:	4629      	mov	r1, r5
 800784a:	f7f9 fc77 	bl	800113c <__aeabi_d2lz>
 800784e:	f7f8 fe15 	bl	800047c <__aeabi_l2d>
 8007852:	4602      	mov	r2, r0
 8007854:	460b      	mov	r3, r1
 8007856:	4620      	mov	r0, r4
 8007858:	4629      	mov	r1, r5
 800785a:	f7f8 fc85 	bl	8000168 <__aeabi_dsub>
 800785e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007860:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007864:	ea43 0308 	orr.w	r3, r3, r8
 8007868:	4313      	orrs	r3, r2
 800786a:	4604      	mov	r4, r0
 800786c:	460d      	mov	r5, r1
 800786e:	d066      	beq.n	800793e <_strtod_l+0xb8e>
 8007870:	a309      	add	r3, pc, #36	; (adr r3, 8007898 <_strtod_l+0xae8>)
 8007872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007876:	f7f9 f8a1 	bl	80009bc <__aeabi_dcmplt>
 800787a:	2800      	cmp	r0, #0
 800787c:	f47f ace2 	bne.w	8007244 <_strtod_l+0x494>
 8007880:	a307      	add	r3, pc, #28	; (adr r3, 80078a0 <_strtod_l+0xaf0>)
 8007882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007886:	4620      	mov	r0, r4
 8007888:	4629      	mov	r1, r5
 800788a:	f7f9 f8b5 	bl	80009f8 <__aeabi_dcmpgt>
 800788e:	2800      	cmp	r0, #0
 8007890:	f43f af7b 	beq.w	800778a <_strtod_l+0x9da>
 8007894:	e4d6      	b.n	8007244 <_strtod_l+0x494>
 8007896:	bf00      	nop
 8007898:	94a03595 	.word	0x94a03595
 800789c:	3fdfffff 	.word	0x3fdfffff
 80078a0:	35afe535 	.word	0x35afe535
 80078a4:	3fe00000 	.word	0x3fe00000
 80078a8:	000fffff 	.word	0x000fffff
 80078ac:	7ff00000 	.word	0x7ff00000
 80078b0:	7fefffff 	.word	0x7fefffff
 80078b4:	3ff00000 	.word	0x3ff00000
 80078b8:	7fe00000 	.word	0x7fe00000
 80078bc:	7c9fffff 	.word	0x7c9fffff
 80078c0:	3fe00000 	.word	0x3fe00000
 80078c4:	bff00000 	.word	0xbff00000
 80078c8:	9b05      	ldr	r3, [sp, #20]
 80078ca:	b313      	cbz	r3, 8007912 <_strtod_l+0xb62>
 80078cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80078ce:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80078d2:	d81e      	bhi.n	8007912 <_strtod_l+0xb62>
 80078d4:	a326      	add	r3, pc, #152	; (adr r3, 8007970 <_strtod_l+0xbc0>)
 80078d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078da:	4620      	mov	r0, r4
 80078dc:	4629      	mov	r1, r5
 80078de:	f7f9 f877 	bl	80009d0 <__aeabi_dcmple>
 80078e2:	b190      	cbz	r0, 800790a <_strtod_l+0xb5a>
 80078e4:	4629      	mov	r1, r5
 80078e6:	4620      	mov	r0, r4
 80078e8:	f7f9 f8ce 	bl	8000a88 <__aeabi_d2uiz>
 80078ec:	2801      	cmp	r0, #1
 80078ee:	bf38      	it	cc
 80078f0:	2001      	movcc	r0, #1
 80078f2:	f7f8 fd77 	bl	80003e4 <__aeabi_ui2d>
 80078f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078f8:	4604      	mov	r4, r0
 80078fa:	460d      	mov	r5, r1
 80078fc:	b9d3      	cbnz	r3, 8007934 <_strtod_l+0xb84>
 80078fe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007902:	9012      	str	r0, [sp, #72]	; 0x48
 8007904:	9313      	str	r3, [sp, #76]	; 0x4c
 8007906:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800790a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800790c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8007910:	1a9f      	subs	r7, r3, r2
 8007912:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007916:	f002 f91b 	bl	8009b50 <__ulp>
 800791a:	4602      	mov	r2, r0
 800791c:	460b      	mov	r3, r1
 800791e:	4630      	mov	r0, r6
 8007920:	4639      	mov	r1, r7
 8007922:	f7f8 fdd9 	bl	80004d8 <__aeabi_dmul>
 8007926:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800792a:	f7f8 fc1f 	bl	800016c <__adddf3>
 800792e:	4680      	mov	r8, r0
 8007930:	4689      	mov	r9, r1
 8007932:	e77e      	b.n	8007832 <_strtod_l+0xa82>
 8007934:	4602      	mov	r2, r0
 8007936:	460b      	mov	r3, r1
 8007938:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800793c:	e7e3      	b.n	8007906 <_strtod_l+0xb56>
 800793e:	a30e      	add	r3, pc, #56	; (adr r3, 8007978 <_strtod_l+0xbc8>)
 8007940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007944:	f7f9 f83a 	bl	80009bc <__aeabi_dcmplt>
 8007948:	e7a1      	b.n	800788e <_strtod_l+0xade>
 800794a:	2300      	movs	r3, #0
 800794c:	930a      	str	r3, [sp, #40]	; 0x28
 800794e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007950:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007952:	6013      	str	r3, [r2, #0]
 8007954:	f7ff ba71 	b.w	8006e3a <_strtod_l+0x8a>
 8007958:	2a65      	cmp	r2, #101	; 0x65
 800795a:	f43f ab63 	beq.w	8007024 <_strtod_l+0x274>
 800795e:	2a45      	cmp	r2, #69	; 0x45
 8007960:	f43f ab60 	beq.w	8007024 <_strtod_l+0x274>
 8007964:	2301      	movs	r3, #1
 8007966:	f7ff bb95 	b.w	8007094 <_strtod_l+0x2e4>
 800796a:	bf00      	nop
 800796c:	f3af 8000 	nop.w
 8007970:	ffc00000 	.word	0xffc00000
 8007974:	41dfffff 	.word	0x41dfffff
 8007978:	94a03595 	.word	0x94a03595
 800797c:	3fcfffff 	.word	0x3fcfffff

08007980 <_strtod_r>:
 8007980:	4b01      	ldr	r3, [pc, #4]	; (8007988 <_strtod_r+0x8>)
 8007982:	f7ff ba15 	b.w	8006db0 <_strtod_l>
 8007986:	bf00      	nop
 8007988:	20000074 	.word	0x20000074

0800798c <strtod>:
 800798c:	460a      	mov	r2, r1
 800798e:	4601      	mov	r1, r0
 8007990:	4802      	ldr	r0, [pc, #8]	; (800799c <strtod+0x10>)
 8007992:	4b03      	ldr	r3, [pc, #12]	; (80079a0 <strtod+0x14>)
 8007994:	6800      	ldr	r0, [r0, #0]
 8007996:	f7ff ba0b 	b.w	8006db0 <_strtod_l>
 800799a:	bf00      	nop
 800799c:	2000000c 	.word	0x2000000c
 80079a0:	20000074 	.word	0x20000074

080079a4 <_strtol_l.constprop.0>:
 80079a4:	2b01      	cmp	r3, #1
 80079a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079aa:	4680      	mov	r8, r0
 80079ac:	d001      	beq.n	80079b2 <_strtol_l.constprop.0+0xe>
 80079ae:	2b24      	cmp	r3, #36	; 0x24
 80079b0:	d906      	bls.n	80079c0 <_strtol_l.constprop.0+0x1c>
 80079b2:	f7fe fa79 	bl	8005ea8 <__errno>
 80079b6:	2316      	movs	r3, #22
 80079b8:	6003      	str	r3, [r0, #0]
 80079ba:	2000      	movs	r0, #0
 80079bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079c0:	460d      	mov	r5, r1
 80079c2:	4f35      	ldr	r7, [pc, #212]	; (8007a98 <_strtol_l.constprop.0+0xf4>)
 80079c4:	4628      	mov	r0, r5
 80079c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80079ca:	5de6      	ldrb	r6, [r4, r7]
 80079cc:	f016 0608 	ands.w	r6, r6, #8
 80079d0:	d1f8      	bne.n	80079c4 <_strtol_l.constprop.0+0x20>
 80079d2:	2c2d      	cmp	r4, #45	; 0x2d
 80079d4:	d12f      	bne.n	8007a36 <_strtol_l.constprop.0+0x92>
 80079d6:	2601      	movs	r6, #1
 80079d8:	782c      	ldrb	r4, [r5, #0]
 80079da:	1c85      	adds	r5, r0, #2
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d057      	beq.n	8007a90 <_strtol_l.constprop.0+0xec>
 80079e0:	2b10      	cmp	r3, #16
 80079e2:	d109      	bne.n	80079f8 <_strtol_l.constprop.0+0x54>
 80079e4:	2c30      	cmp	r4, #48	; 0x30
 80079e6:	d107      	bne.n	80079f8 <_strtol_l.constprop.0+0x54>
 80079e8:	7828      	ldrb	r0, [r5, #0]
 80079ea:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80079ee:	2858      	cmp	r0, #88	; 0x58
 80079f0:	d149      	bne.n	8007a86 <_strtol_l.constprop.0+0xe2>
 80079f2:	2310      	movs	r3, #16
 80079f4:	786c      	ldrb	r4, [r5, #1]
 80079f6:	3502      	adds	r5, #2
 80079f8:	2700      	movs	r7, #0
 80079fa:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 80079fe:	f10e 3eff 	add.w	lr, lr, #4294967295
 8007a02:	fbbe f9f3 	udiv	r9, lr, r3
 8007a06:	4638      	mov	r0, r7
 8007a08:	fb03 ea19 	mls	sl, r3, r9, lr
 8007a0c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007a10:	f1bc 0f09 	cmp.w	ip, #9
 8007a14:	d814      	bhi.n	8007a40 <_strtol_l.constprop.0+0x9c>
 8007a16:	4664      	mov	r4, ip
 8007a18:	42a3      	cmp	r3, r4
 8007a1a:	dd22      	ble.n	8007a62 <_strtol_l.constprop.0+0xbe>
 8007a1c:	2f00      	cmp	r7, #0
 8007a1e:	db1d      	blt.n	8007a5c <_strtol_l.constprop.0+0xb8>
 8007a20:	4581      	cmp	r9, r0
 8007a22:	d31b      	bcc.n	8007a5c <_strtol_l.constprop.0+0xb8>
 8007a24:	d101      	bne.n	8007a2a <_strtol_l.constprop.0+0x86>
 8007a26:	45a2      	cmp	sl, r4
 8007a28:	db18      	blt.n	8007a5c <_strtol_l.constprop.0+0xb8>
 8007a2a:	2701      	movs	r7, #1
 8007a2c:	fb00 4003 	mla	r0, r0, r3, r4
 8007a30:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007a34:	e7ea      	b.n	8007a0c <_strtol_l.constprop.0+0x68>
 8007a36:	2c2b      	cmp	r4, #43	; 0x2b
 8007a38:	bf04      	itt	eq
 8007a3a:	782c      	ldrbeq	r4, [r5, #0]
 8007a3c:	1c85      	addeq	r5, r0, #2
 8007a3e:	e7cd      	b.n	80079dc <_strtol_l.constprop.0+0x38>
 8007a40:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007a44:	f1bc 0f19 	cmp.w	ip, #25
 8007a48:	d801      	bhi.n	8007a4e <_strtol_l.constprop.0+0xaa>
 8007a4a:	3c37      	subs	r4, #55	; 0x37
 8007a4c:	e7e4      	b.n	8007a18 <_strtol_l.constprop.0+0x74>
 8007a4e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007a52:	f1bc 0f19 	cmp.w	ip, #25
 8007a56:	d804      	bhi.n	8007a62 <_strtol_l.constprop.0+0xbe>
 8007a58:	3c57      	subs	r4, #87	; 0x57
 8007a5a:	e7dd      	b.n	8007a18 <_strtol_l.constprop.0+0x74>
 8007a5c:	f04f 37ff 	mov.w	r7, #4294967295
 8007a60:	e7e6      	b.n	8007a30 <_strtol_l.constprop.0+0x8c>
 8007a62:	2f00      	cmp	r7, #0
 8007a64:	da07      	bge.n	8007a76 <_strtol_l.constprop.0+0xd2>
 8007a66:	2322      	movs	r3, #34	; 0x22
 8007a68:	4670      	mov	r0, lr
 8007a6a:	f8c8 3000 	str.w	r3, [r8]
 8007a6e:	2a00      	cmp	r2, #0
 8007a70:	d0a4      	beq.n	80079bc <_strtol_l.constprop.0+0x18>
 8007a72:	1e69      	subs	r1, r5, #1
 8007a74:	e005      	b.n	8007a82 <_strtol_l.constprop.0+0xde>
 8007a76:	b106      	cbz	r6, 8007a7a <_strtol_l.constprop.0+0xd6>
 8007a78:	4240      	negs	r0, r0
 8007a7a:	2a00      	cmp	r2, #0
 8007a7c:	d09e      	beq.n	80079bc <_strtol_l.constprop.0+0x18>
 8007a7e:	2f00      	cmp	r7, #0
 8007a80:	d1f7      	bne.n	8007a72 <_strtol_l.constprop.0+0xce>
 8007a82:	6011      	str	r1, [r2, #0]
 8007a84:	e79a      	b.n	80079bc <_strtol_l.constprop.0+0x18>
 8007a86:	2430      	movs	r4, #48	; 0x30
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d1b5      	bne.n	80079f8 <_strtol_l.constprop.0+0x54>
 8007a8c:	2308      	movs	r3, #8
 8007a8e:	e7b3      	b.n	80079f8 <_strtol_l.constprop.0+0x54>
 8007a90:	2c30      	cmp	r4, #48	; 0x30
 8007a92:	d0a9      	beq.n	80079e8 <_strtol_l.constprop.0+0x44>
 8007a94:	230a      	movs	r3, #10
 8007a96:	e7af      	b.n	80079f8 <_strtol_l.constprop.0+0x54>
 8007a98:	0800c281 	.word	0x0800c281

08007a9c <_strtol_r>:
 8007a9c:	f7ff bf82 	b.w	80079a4 <_strtol_l.constprop.0>

08007aa0 <__swbuf_r>:
 8007aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aa2:	460e      	mov	r6, r1
 8007aa4:	4614      	mov	r4, r2
 8007aa6:	4605      	mov	r5, r0
 8007aa8:	b118      	cbz	r0, 8007ab2 <__swbuf_r+0x12>
 8007aaa:	6983      	ldr	r3, [r0, #24]
 8007aac:	b90b      	cbnz	r3, 8007ab2 <__swbuf_r+0x12>
 8007aae:	f001 f847 	bl	8008b40 <__sinit>
 8007ab2:	4b21      	ldr	r3, [pc, #132]	; (8007b38 <__swbuf_r+0x98>)
 8007ab4:	429c      	cmp	r4, r3
 8007ab6:	d12b      	bne.n	8007b10 <__swbuf_r+0x70>
 8007ab8:	686c      	ldr	r4, [r5, #4]
 8007aba:	69a3      	ldr	r3, [r4, #24]
 8007abc:	60a3      	str	r3, [r4, #8]
 8007abe:	89a3      	ldrh	r3, [r4, #12]
 8007ac0:	071a      	lsls	r2, r3, #28
 8007ac2:	d52f      	bpl.n	8007b24 <__swbuf_r+0x84>
 8007ac4:	6923      	ldr	r3, [r4, #16]
 8007ac6:	b36b      	cbz	r3, 8007b24 <__swbuf_r+0x84>
 8007ac8:	6923      	ldr	r3, [r4, #16]
 8007aca:	6820      	ldr	r0, [r4, #0]
 8007acc:	b2f6      	uxtb	r6, r6
 8007ace:	1ac0      	subs	r0, r0, r3
 8007ad0:	6963      	ldr	r3, [r4, #20]
 8007ad2:	4637      	mov	r7, r6
 8007ad4:	4283      	cmp	r3, r0
 8007ad6:	dc04      	bgt.n	8007ae2 <__swbuf_r+0x42>
 8007ad8:	4621      	mov	r1, r4
 8007ada:	4628      	mov	r0, r5
 8007adc:	f000 ff9c 	bl	8008a18 <_fflush_r>
 8007ae0:	bb30      	cbnz	r0, 8007b30 <__swbuf_r+0x90>
 8007ae2:	68a3      	ldr	r3, [r4, #8]
 8007ae4:	3001      	adds	r0, #1
 8007ae6:	3b01      	subs	r3, #1
 8007ae8:	60a3      	str	r3, [r4, #8]
 8007aea:	6823      	ldr	r3, [r4, #0]
 8007aec:	1c5a      	adds	r2, r3, #1
 8007aee:	6022      	str	r2, [r4, #0]
 8007af0:	701e      	strb	r6, [r3, #0]
 8007af2:	6963      	ldr	r3, [r4, #20]
 8007af4:	4283      	cmp	r3, r0
 8007af6:	d004      	beq.n	8007b02 <__swbuf_r+0x62>
 8007af8:	89a3      	ldrh	r3, [r4, #12]
 8007afa:	07db      	lsls	r3, r3, #31
 8007afc:	d506      	bpl.n	8007b0c <__swbuf_r+0x6c>
 8007afe:	2e0a      	cmp	r6, #10
 8007b00:	d104      	bne.n	8007b0c <__swbuf_r+0x6c>
 8007b02:	4621      	mov	r1, r4
 8007b04:	4628      	mov	r0, r5
 8007b06:	f000 ff87 	bl	8008a18 <_fflush_r>
 8007b0a:	b988      	cbnz	r0, 8007b30 <__swbuf_r+0x90>
 8007b0c:	4638      	mov	r0, r7
 8007b0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b10:	4b0a      	ldr	r3, [pc, #40]	; (8007b3c <__swbuf_r+0x9c>)
 8007b12:	429c      	cmp	r4, r3
 8007b14:	d101      	bne.n	8007b1a <__swbuf_r+0x7a>
 8007b16:	68ac      	ldr	r4, [r5, #8]
 8007b18:	e7cf      	b.n	8007aba <__swbuf_r+0x1a>
 8007b1a:	4b09      	ldr	r3, [pc, #36]	; (8007b40 <__swbuf_r+0xa0>)
 8007b1c:	429c      	cmp	r4, r3
 8007b1e:	bf08      	it	eq
 8007b20:	68ec      	ldreq	r4, [r5, #12]
 8007b22:	e7ca      	b.n	8007aba <__swbuf_r+0x1a>
 8007b24:	4621      	mov	r1, r4
 8007b26:	4628      	mov	r0, r5
 8007b28:	f000 f80c 	bl	8007b44 <__swsetup_r>
 8007b2c:	2800      	cmp	r0, #0
 8007b2e:	d0cb      	beq.n	8007ac8 <__swbuf_r+0x28>
 8007b30:	f04f 37ff 	mov.w	r7, #4294967295
 8007b34:	e7ea      	b.n	8007b0c <__swbuf_r+0x6c>
 8007b36:	bf00      	nop
 8007b38:	0800c434 	.word	0x0800c434
 8007b3c:	0800c454 	.word	0x0800c454
 8007b40:	0800c414 	.word	0x0800c414

08007b44 <__swsetup_r>:
 8007b44:	4b32      	ldr	r3, [pc, #200]	; (8007c10 <__swsetup_r+0xcc>)
 8007b46:	b570      	push	{r4, r5, r6, lr}
 8007b48:	681d      	ldr	r5, [r3, #0]
 8007b4a:	4606      	mov	r6, r0
 8007b4c:	460c      	mov	r4, r1
 8007b4e:	b125      	cbz	r5, 8007b5a <__swsetup_r+0x16>
 8007b50:	69ab      	ldr	r3, [r5, #24]
 8007b52:	b913      	cbnz	r3, 8007b5a <__swsetup_r+0x16>
 8007b54:	4628      	mov	r0, r5
 8007b56:	f000 fff3 	bl	8008b40 <__sinit>
 8007b5a:	4b2e      	ldr	r3, [pc, #184]	; (8007c14 <__swsetup_r+0xd0>)
 8007b5c:	429c      	cmp	r4, r3
 8007b5e:	d10f      	bne.n	8007b80 <__swsetup_r+0x3c>
 8007b60:	686c      	ldr	r4, [r5, #4]
 8007b62:	89a3      	ldrh	r3, [r4, #12]
 8007b64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007b68:	0719      	lsls	r1, r3, #28
 8007b6a:	d42c      	bmi.n	8007bc6 <__swsetup_r+0x82>
 8007b6c:	06dd      	lsls	r5, r3, #27
 8007b6e:	d411      	bmi.n	8007b94 <__swsetup_r+0x50>
 8007b70:	2309      	movs	r3, #9
 8007b72:	6033      	str	r3, [r6, #0]
 8007b74:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007b78:	f04f 30ff 	mov.w	r0, #4294967295
 8007b7c:	81a3      	strh	r3, [r4, #12]
 8007b7e:	e03e      	b.n	8007bfe <__swsetup_r+0xba>
 8007b80:	4b25      	ldr	r3, [pc, #148]	; (8007c18 <__swsetup_r+0xd4>)
 8007b82:	429c      	cmp	r4, r3
 8007b84:	d101      	bne.n	8007b8a <__swsetup_r+0x46>
 8007b86:	68ac      	ldr	r4, [r5, #8]
 8007b88:	e7eb      	b.n	8007b62 <__swsetup_r+0x1e>
 8007b8a:	4b24      	ldr	r3, [pc, #144]	; (8007c1c <__swsetup_r+0xd8>)
 8007b8c:	429c      	cmp	r4, r3
 8007b8e:	bf08      	it	eq
 8007b90:	68ec      	ldreq	r4, [r5, #12]
 8007b92:	e7e6      	b.n	8007b62 <__swsetup_r+0x1e>
 8007b94:	0758      	lsls	r0, r3, #29
 8007b96:	d512      	bpl.n	8007bbe <__swsetup_r+0x7a>
 8007b98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b9a:	b141      	cbz	r1, 8007bae <__swsetup_r+0x6a>
 8007b9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ba0:	4299      	cmp	r1, r3
 8007ba2:	d002      	beq.n	8007baa <__swsetup_r+0x66>
 8007ba4:	4630      	mov	r0, r6
 8007ba6:	f002 f92f 	bl	8009e08 <_free_r>
 8007baa:	2300      	movs	r3, #0
 8007bac:	6363      	str	r3, [r4, #52]	; 0x34
 8007bae:	89a3      	ldrh	r3, [r4, #12]
 8007bb0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007bb4:	81a3      	strh	r3, [r4, #12]
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	6063      	str	r3, [r4, #4]
 8007bba:	6923      	ldr	r3, [r4, #16]
 8007bbc:	6023      	str	r3, [r4, #0]
 8007bbe:	89a3      	ldrh	r3, [r4, #12]
 8007bc0:	f043 0308 	orr.w	r3, r3, #8
 8007bc4:	81a3      	strh	r3, [r4, #12]
 8007bc6:	6923      	ldr	r3, [r4, #16]
 8007bc8:	b94b      	cbnz	r3, 8007bde <__swsetup_r+0x9a>
 8007bca:	89a3      	ldrh	r3, [r4, #12]
 8007bcc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007bd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bd4:	d003      	beq.n	8007bde <__swsetup_r+0x9a>
 8007bd6:	4621      	mov	r1, r4
 8007bd8:	4630      	mov	r0, r6
 8007bda:	f001 fbe1 	bl	80093a0 <__smakebuf_r>
 8007bde:	89a0      	ldrh	r0, [r4, #12]
 8007be0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007be4:	f010 0301 	ands.w	r3, r0, #1
 8007be8:	d00a      	beq.n	8007c00 <__swsetup_r+0xbc>
 8007bea:	2300      	movs	r3, #0
 8007bec:	60a3      	str	r3, [r4, #8]
 8007bee:	6963      	ldr	r3, [r4, #20]
 8007bf0:	425b      	negs	r3, r3
 8007bf2:	61a3      	str	r3, [r4, #24]
 8007bf4:	6923      	ldr	r3, [r4, #16]
 8007bf6:	b943      	cbnz	r3, 8007c0a <__swsetup_r+0xc6>
 8007bf8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007bfc:	d1ba      	bne.n	8007b74 <__swsetup_r+0x30>
 8007bfe:	bd70      	pop	{r4, r5, r6, pc}
 8007c00:	0781      	lsls	r1, r0, #30
 8007c02:	bf58      	it	pl
 8007c04:	6963      	ldrpl	r3, [r4, #20]
 8007c06:	60a3      	str	r3, [r4, #8]
 8007c08:	e7f4      	b.n	8007bf4 <__swsetup_r+0xb0>
 8007c0a:	2000      	movs	r0, #0
 8007c0c:	e7f7      	b.n	8007bfe <__swsetup_r+0xba>
 8007c0e:	bf00      	nop
 8007c10:	2000000c 	.word	0x2000000c
 8007c14:	0800c434 	.word	0x0800c434
 8007c18:	0800c454 	.word	0x0800c454
 8007c1c:	0800c414 	.word	0x0800c414

08007c20 <quorem>:
 8007c20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c24:	6903      	ldr	r3, [r0, #16]
 8007c26:	690c      	ldr	r4, [r1, #16]
 8007c28:	4607      	mov	r7, r0
 8007c2a:	42a3      	cmp	r3, r4
 8007c2c:	f2c0 8082 	blt.w	8007d34 <quorem+0x114>
 8007c30:	3c01      	subs	r4, #1
 8007c32:	f100 0514 	add.w	r5, r0, #20
 8007c36:	f101 0814 	add.w	r8, r1, #20
 8007c3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c3e:	9301      	str	r3, [sp, #4]
 8007c40:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007c44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c48:	3301      	adds	r3, #1
 8007c4a:	429a      	cmp	r2, r3
 8007c4c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007c50:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007c54:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007c58:	d331      	bcc.n	8007cbe <quorem+0x9e>
 8007c5a:	f04f 0e00 	mov.w	lr, #0
 8007c5e:	4640      	mov	r0, r8
 8007c60:	46ac      	mov	ip, r5
 8007c62:	46f2      	mov	sl, lr
 8007c64:	f850 2b04 	ldr.w	r2, [r0], #4
 8007c68:	b293      	uxth	r3, r2
 8007c6a:	fb06 e303 	mla	r3, r6, r3, lr
 8007c6e:	0c12      	lsrs	r2, r2, #16
 8007c70:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007c74:	b29b      	uxth	r3, r3
 8007c76:	fb06 e202 	mla	r2, r6, r2, lr
 8007c7a:	ebaa 0303 	sub.w	r3, sl, r3
 8007c7e:	f8dc a000 	ldr.w	sl, [ip]
 8007c82:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007c86:	fa1f fa8a 	uxth.w	sl, sl
 8007c8a:	4453      	add	r3, sl
 8007c8c:	f8dc a000 	ldr.w	sl, [ip]
 8007c90:	b292      	uxth	r2, r2
 8007c92:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007c96:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007c9a:	b29b      	uxth	r3, r3
 8007c9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ca0:	4581      	cmp	r9, r0
 8007ca2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007ca6:	f84c 3b04 	str.w	r3, [ip], #4
 8007caa:	d2db      	bcs.n	8007c64 <quorem+0x44>
 8007cac:	f855 300b 	ldr.w	r3, [r5, fp]
 8007cb0:	b92b      	cbnz	r3, 8007cbe <quorem+0x9e>
 8007cb2:	9b01      	ldr	r3, [sp, #4]
 8007cb4:	3b04      	subs	r3, #4
 8007cb6:	429d      	cmp	r5, r3
 8007cb8:	461a      	mov	r2, r3
 8007cba:	d32f      	bcc.n	8007d1c <quorem+0xfc>
 8007cbc:	613c      	str	r4, [r7, #16]
 8007cbe:	4638      	mov	r0, r7
 8007cc0:	f001 fe9e 	bl	8009a00 <__mcmp>
 8007cc4:	2800      	cmp	r0, #0
 8007cc6:	db25      	blt.n	8007d14 <quorem+0xf4>
 8007cc8:	4628      	mov	r0, r5
 8007cca:	f04f 0c00 	mov.w	ip, #0
 8007cce:	3601      	adds	r6, #1
 8007cd0:	f858 1b04 	ldr.w	r1, [r8], #4
 8007cd4:	f8d0 e000 	ldr.w	lr, [r0]
 8007cd8:	b28b      	uxth	r3, r1
 8007cda:	ebac 0303 	sub.w	r3, ip, r3
 8007cde:	fa1f f28e 	uxth.w	r2, lr
 8007ce2:	4413      	add	r3, r2
 8007ce4:	0c0a      	lsrs	r2, r1, #16
 8007ce6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007cea:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007cee:	b29b      	uxth	r3, r3
 8007cf0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007cf4:	45c1      	cmp	r9, r8
 8007cf6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007cfa:	f840 3b04 	str.w	r3, [r0], #4
 8007cfe:	d2e7      	bcs.n	8007cd0 <quorem+0xb0>
 8007d00:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d04:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d08:	b922      	cbnz	r2, 8007d14 <quorem+0xf4>
 8007d0a:	3b04      	subs	r3, #4
 8007d0c:	429d      	cmp	r5, r3
 8007d0e:	461a      	mov	r2, r3
 8007d10:	d30a      	bcc.n	8007d28 <quorem+0x108>
 8007d12:	613c      	str	r4, [r7, #16]
 8007d14:	4630      	mov	r0, r6
 8007d16:	b003      	add	sp, #12
 8007d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d1c:	6812      	ldr	r2, [r2, #0]
 8007d1e:	3b04      	subs	r3, #4
 8007d20:	2a00      	cmp	r2, #0
 8007d22:	d1cb      	bne.n	8007cbc <quorem+0x9c>
 8007d24:	3c01      	subs	r4, #1
 8007d26:	e7c6      	b.n	8007cb6 <quorem+0x96>
 8007d28:	6812      	ldr	r2, [r2, #0]
 8007d2a:	3b04      	subs	r3, #4
 8007d2c:	2a00      	cmp	r2, #0
 8007d2e:	d1f0      	bne.n	8007d12 <quorem+0xf2>
 8007d30:	3c01      	subs	r4, #1
 8007d32:	e7eb      	b.n	8007d0c <quorem+0xec>
 8007d34:	2000      	movs	r0, #0
 8007d36:	e7ee      	b.n	8007d16 <quorem+0xf6>

08007d38 <_dtoa_r>:
 8007d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d3c:	4616      	mov	r6, r2
 8007d3e:	461f      	mov	r7, r3
 8007d40:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007d42:	b099      	sub	sp, #100	; 0x64
 8007d44:	4605      	mov	r5, r0
 8007d46:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007d4a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8007d4e:	b974      	cbnz	r4, 8007d6e <_dtoa_r+0x36>
 8007d50:	2010      	movs	r0, #16
 8007d52:	f001 fb65 	bl	8009420 <malloc>
 8007d56:	4602      	mov	r2, r0
 8007d58:	6268      	str	r0, [r5, #36]	; 0x24
 8007d5a:	b920      	cbnz	r0, 8007d66 <_dtoa_r+0x2e>
 8007d5c:	21ea      	movs	r1, #234	; 0xea
 8007d5e:	4ba8      	ldr	r3, [pc, #672]	; (8008000 <_dtoa_r+0x2c8>)
 8007d60:	48a8      	ldr	r0, [pc, #672]	; (8008004 <_dtoa_r+0x2cc>)
 8007d62:	f002 fc6d 	bl	800a640 <__assert_func>
 8007d66:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007d6a:	6004      	str	r4, [r0, #0]
 8007d6c:	60c4      	str	r4, [r0, #12]
 8007d6e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007d70:	6819      	ldr	r1, [r3, #0]
 8007d72:	b151      	cbz	r1, 8007d8a <_dtoa_r+0x52>
 8007d74:	685a      	ldr	r2, [r3, #4]
 8007d76:	2301      	movs	r3, #1
 8007d78:	4093      	lsls	r3, r2
 8007d7a:	604a      	str	r2, [r1, #4]
 8007d7c:	608b      	str	r3, [r1, #8]
 8007d7e:	4628      	mov	r0, r5
 8007d80:	f001 fbb6 	bl	80094f0 <_Bfree>
 8007d84:	2200      	movs	r2, #0
 8007d86:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007d88:	601a      	str	r2, [r3, #0]
 8007d8a:	1e3b      	subs	r3, r7, #0
 8007d8c:	bfaf      	iteee	ge
 8007d8e:	2300      	movge	r3, #0
 8007d90:	2201      	movlt	r2, #1
 8007d92:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007d96:	9305      	strlt	r3, [sp, #20]
 8007d98:	bfa8      	it	ge
 8007d9a:	f8c8 3000 	strge.w	r3, [r8]
 8007d9e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007da2:	4b99      	ldr	r3, [pc, #612]	; (8008008 <_dtoa_r+0x2d0>)
 8007da4:	bfb8      	it	lt
 8007da6:	f8c8 2000 	strlt.w	r2, [r8]
 8007daa:	ea33 0309 	bics.w	r3, r3, r9
 8007dae:	d119      	bne.n	8007de4 <_dtoa_r+0xac>
 8007db0:	f242 730f 	movw	r3, #9999	; 0x270f
 8007db4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007db6:	6013      	str	r3, [r2, #0]
 8007db8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007dbc:	4333      	orrs	r3, r6
 8007dbe:	f000 857f 	beq.w	80088c0 <_dtoa_r+0xb88>
 8007dc2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007dc4:	b953      	cbnz	r3, 8007ddc <_dtoa_r+0xa4>
 8007dc6:	4b91      	ldr	r3, [pc, #580]	; (800800c <_dtoa_r+0x2d4>)
 8007dc8:	e022      	b.n	8007e10 <_dtoa_r+0xd8>
 8007dca:	4b91      	ldr	r3, [pc, #580]	; (8008010 <_dtoa_r+0x2d8>)
 8007dcc:	9303      	str	r3, [sp, #12]
 8007dce:	3308      	adds	r3, #8
 8007dd0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007dd2:	6013      	str	r3, [r2, #0]
 8007dd4:	9803      	ldr	r0, [sp, #12]
 8007dd6:	b019      	add	sp, #100	; 0x64
 8007dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ddc:	4b8b      	ldr	r3, [pc, #556]	; (800800c <_dtoa_r+0x2d4>)
 8007dde:	9303      	str	r3, [sp, #12]
 8007de0:	3303      	adds	r3, #3
 8007de2:	e7f5      	b.n	8007dd0 <_dtoa_r+0x98>
 8007de4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007de8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8007dec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007df0:	2200      	movs	r2, #0
 8007df2:	2300      	movs	r3, #0
 8007df4:	f7f8 fdd8 	bl	80009a8 <__aeabi_dcmpeq>
 8007df8:	4680      	mov	r8, r0
 8007dfa:	b158      	cbz	r0, 8007e14 <_dtoa_r+0xdc>
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007e00:	6013      	str	r3, [r2, #0]
 8007e02:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	f000 8558 	beq.w	80088ba <_dtoa_r+0xb82>
 8007e0a:	4882      	ldr	r0, [pc, #520]	; (8008014 <_dtoa_r+0x2dc>)
 8007e0c:	6018      	str	r0, [r3, #0]
 8007e0e:	1e43      	subs	r3, r0, #1
 8007e10:	9303      	str	r3, [sp, #12]
 8007e12:	e7df      	b.n	8007dd4 <_dtoa_r+0x9c>
 8007e14:	ab16      	add	r3, sp, #88	; 0x58
 8007e16:	9301      	str	r3, [sp, #4]
 8007e18:	ab17      	add	r3, sp, #92	; 0x5c
 8007e1a:	9300      	str	r3, [sp, #0]
 8007e1c:	4628      	mov	r0, r5
 8007e1e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007e22:	f001 ff0f 	bl	8009c44 <__d2b>
 8007e26:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007e2a:	4683      	mov	fp, r0
 8007e2c:	2c00      	cmp	r4, #0
 8007e2e:	d07f      	beq.n	8007f30 <_dtoa_r+0x1f8>
 8007e30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007e34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e36:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007e3a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007e3e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8007e42:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007e46:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	4b72      	ldr	r3, [pc, #456]	; (8008018 <_dtoa_r+0x2e0>)
 8007e4e:	f7f8 f98b 	bl	8000168 <__aeabi_dsub>
 8007e52:	a365      	add	r3, pc, #404	; (adr r3, 8007fe8 <_dtoa_r+0x2b0>)
 8007e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e58:	f7f8 fb3e 	bl	80004d8 <__aeabi_dmul>
 8007e5c:	a364      	add	r3, pc, #400	; (adr r3, 8007ff0 <_dtoa_r+0x2b8>)
 8007e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e62:	f7f8 f983 	bl	800016c <__adddf3>
 8007e66:	4606      	mov	r6, r0
 8007e68:	4620      	mov	r0, r4
 8007e6a:	460f      	mov	r7, r1
 8007e6c:	f7f8 faca 	bl	8000404 <__aeabi_i2d>
 8007e70:	a361      	add	r3, pc, #388	; (adr r3, 8007ff8 <_dtoa_r+0x2c0>)
 8007e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e76:	f7f8 fb2f 	bl	80004d8 <__aeabi_dmul>
 8007e7a:	4602      	mov	r2, r0
 8007e7c:	460b      	mov	r3, r1
 8007e7e:	4630      	mov	r0, r6
 8007e80:	4639      	mov	r1, r7
 8007e82:	f7f8 f973 	bl	800016c <__adddf3>
 8007e86:	4606      	mov	r6, r0
 8007e88:	460f      	mov	r7, r1
 8007e8a:	f7f8 fdd5 	bl	8000a38 <__aeabi_d2iz>
 8007e8e:	2200      	movs	r2, #0
 8007e90:	4682      	mov	sl, r0
 8007e92:	2300      	movs	r3, #0
 8007e94:	4630      	mov	r0, r6
 8007e96:	4639      	mov	r1, r7
 8007e98:	f7f8 fd90 	bl	80009bc <__aeabi_dcmplt>
 8007e9c:	b148      	cbz	r0, 8007eb2 <_dtoa_r+0x17a>
 8007e9e:	4650      	mov	r0, sl
 8007ea0:	f7f8 fab0 	bl	8000404 <__aeabi_i2d>
 8007ea4:	4632      	mov	r2, r6
 8007ea6:	463b      	mov	r3, r7
 8007ea8:	f7f8 fd7e 	bl	80009a8 <__aeabi_dcmpeq>
 8007eac:	b908      	cbnz	r0, 8007eb2 <_dtoa_r+0x17a>
 8007eae:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007eb2:	f1ba 0f16 	cmp.w	sl, #22
 8007eb6:	d858      	bhi.n	8007f6a <_dtoa_r+0x232>
 8007eb8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007ebc:	4b57      	ldr	r3, [pc, #348]	; (800801c <_dtoa_r+0x2e4>)
 8007ebe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec6:	f7f8 fd79 	bl	80009bc <__aeabi_dcmplt>
 8007eca:	2800      	cmp	r0, #0
 8007ecc:	d04f      	beq.n	8007f6e <_dtoa_r+0x236>
 8007ece:	2300      	movs	r3, #0
 8007ed0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007ed4:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ed6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007ed8:	1b1c      	subs	r4, r3, r4
 8007eda:	1e63      	subs	r3, r4, #1
 8007edc:	9309      	str	r3, [sp, #36]	; 0x24
 8007ede:	bf49      	itett	mi
 8007ee0:	f1c4 0301 	rsbmi	r3, r4, #1
 8007ee4:	2300      	movpl	r3, #0
 8007ee6:	9306      	strmi	r3, [sp, #24]
 8007ee8:	2300      	movmi	r3, #0
 8007eea:	bf54      	ite	pl
 8007eec:	9306      	strpl	r3, [sp, #24]
 8007eee:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007ef0:	f1ba 0f00 	cmp.w	sl, #0
 8007ef4:	db3d      	blt.n	8007f72 <_dtoa_r+0x23a>
 8007ef6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ef8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007efc:	4453      	add	r3, sl
 8007efe:	9309      	str	r3, [sp, #36]	; 0x24
 8007f00:	2300      	movs	r3, #0
 8007f02:	930a      	str	r3, [sp, #40]	; 0x28
 8007f04:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007f06:	2b09      	cmp	r3, #9
 8007f08:	f200 808c 	bhi.w	8008024 <_dtoa_r+0x2ec>
 8007f0c:	2b05      	cmp	r3, #5
 8007f0e:	bfc4      	itt	gt
 8007f10:	3b04      	subgt	r3, #4
 8007f12:	9322      	strgt	r3, [sp, #136]	; 0x88
 8007f14:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007f16:	bfc8      	it	gt
 8007f18:	2400      	movgt	r4, #0
 8007f1a:	f1a3 0302 	sub.w	r3, r3, #2
 8007f1e:	bfd8      	it	le
 8007f20:	2401      	movle	r4, #1
 8007f22:	2b03      	cmp	r3, #3
 8007f24:	f200 808a 	bhi.w	800803c <_dtoa_r+0x304>
 8007f28:	e8df f003 	tbb	[pc, r3]
 8007f2c:	5b4d4f2d 	.word	0x5b4d4f2d
 8007f30:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8007f34:	441c      	add	r4, r3
 8007f36:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007f3a:	2b20      	cmp	r3, #32
 8007f3c:	bfc3      	ittte	gt
 8007f3e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007f42:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8007f46:	fa09 f303 	lslgt.w	r3, r9, r3
 8007f4a:	f1c3 0320 	rsble	r3, r3, #32
 8007f4e:	bfc6      	itte	gt
 8007f50:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007f54:	4318      	orrgt	r0, r3
 8007f56:	fa06 f003 	lslle.w	r0, r6, r3
 8007f5a:	f7f8 fa43 	bl	80003e4 <__aeabi_ui2d>
 8007f5e:	2301      	movs	r3, #1
 8007f60:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007f64:	3c01      	subs	r4, #1
 8007f66:	9313      	str	r3, [sp, #76]	; 0x4c
 8007f68:	e76f      	b.n	8007e4a <_dtoa_r+0x112>
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	e7b2      	b.n	8007ed4 <_dtoa_r+0x19c>
 8007f6e:	900f      	str	r0, [sp, #60]	; 0x3c
 8007f70:	e7b1      	b.n	8007ed6 <_dtoa_r+0x19e>
 8007f72:	9b06      	ldr	r3, [sp, #24]
 8007f74:	eba3 030a 	sub.w	r3, r3, sl
 8007f78:	9306      	str	r3, [sp, #24]
 8007f7a:	f1ca 0300 	rsb	r3, sl, #0
 8007f7e:	930a      	str	r3, [sp, #40]	; 0x28
 8007f80:	2300      	movs	r3, #0
 8007f82:	930e      	str	r3, [sp, #56]	; 0x38
 8007f84:	e7be      	b.n	8007f04 <_dtoa_r+0x1cc>
 8007f86:	2300      	movs	r3, #0
 8007f88:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f8a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	dc58      	bgt.n	8008042 <_dtoa_r+0x30a>
 8007f90:	f04f 0901 	mov.w	r9, #1
 8007f94:	464b      	mov	r3, r9
 8007f96:	f8cd 9020 	str.w	r9, [sp, #32]
 8007f9a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8007fa2:	6042      	str	r2, [r0, #4]
 8007fa4:	2204      	movs	r2, #4
 8007fa6:	f102 0614 	add.w	r6, r2, #20
 8007faa:	429e      	cmp	r6, r3
 8007fac:	6841      	ldr	r1, [r0, #4]
 8007fae:	d94e      	bls.n	800804e <_dtoa_r+0x316>
 8007fb0:	4628      	mov	r0, r5
 8007fb2:	f001 fa5d 	bl	8009470 <_Balloc>
 8007fb6:	9003      	str	r0, [sp, #12]
 8007fb8:	2800      	cmp	r0, #0
 8007fba:	d14c      	bne.n	8008056 <_dtoa_r+0x31e>
 8007fbc:	4602      	mov	r2, r0
 8007fbe:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007fc2:	4b17      	ldr	r3, [pc, #92]	; (8008020 <_dtoa_r+0x2e8>)
 8007fc4:	e6cc      	b.n	8007d60 <_dtoa_r+0x28>
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	e7de      	b.n	8007f88 <_dtoa_r+0x250>
 8007fca:	2300      	movs	r3, #0
 8007fcc:	930b      	str	r3, [sp, #44]	; 0x2c
 8007fce:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007fd0:	eb0a 0903 	add.w	r9, sl, r3
 8007fd4:	f109 0301 	add.w	r3, r9, #1
 8007fd8:	2b01      	cmp	r3, #1
 8007fda:	9308      	str	r3, [sp, #32]
 8007fdc:	bfb8      	it	lt
 8007fde:	2301      	movlt	r3, #1
 8007fe0:	e7dd      	b.n	8007f9e <_dtoa_r+0x266>
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	e7f2      	b.n	8007fcc <_dtoa_r+0x294>
 8007fe6:	bf00      	nop
 8007fe8:	636f4361 	.word	0x636f4361
 8007fec:	3fd287a7 	.word	0x3fd287a7
 8007ff0:	8b60c8b3 	.word	0x8b60c8b3
 8007ff4:	3fc68a28 	.word	0x3fc68a28
 8007ff8:	509f79fb 	.word	0x509f79fb
 8007ffc:	3fd34413 	.word	0x3fd34413
 8008000:	0800c38e 	.word	0x0800c38e
 8008004:	0800c3a5 	.word	0x0800c3a5
 8008008:	7ff00000 	.word	0x7ff00000
 800800c:	0800c38a 	.word	0x0800c38a
 8008010:	0800c381 	.word	0x0800c381
 8008014:	0800c205 	.word	0x0800c205
 8008018:	3ff80000 	.word	0x3ff80000
 800801c:	0800c578 	.word	0x0800c578
 8008020:	0800c400 	.word	0x0800c400
 8008024:	2401      	movs	r4, #1
 8008026:	2300      	movs	r3, #0
 8008028:	940b      	str	r4, [sp, #44]	; 0x2c
 800802a:	9322      	str	r3, [sp, #136]	; 0x88
 800802c:	f04f 39ff 	mov.w	r9, #4294967295
 8008030:	2200      	movs	r2, #0
 8008032:	2312      	movs	r3, #18
 8008034:	f8cd 9020 	str.w	r9, [sp, #32]
 8008038:	9223      	str	r2, [sp, #140]	; 0x8c
 800803a:	e7b0      	b.n	8007f9e <_dtoa_r+0x266>
 800803c:	2301      	movs	r3, #1
 800803e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008040:	e7f4      	b.n	800802c <_dtoa_r+0x2f4>
 8008042:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8008046:	464b      	mov	r3, r9
 8008048:	f8cd 9020 	str.w	r9, [sp, #32]
 800804c:	e7a7      	b.n	8007f9e <_dtoa_r+0x266>
 800804e:	3101      	adds	r1, #1
 8008050:	6041      	str	r1, [r0, #4]
 8008052:	0052      	lsls	r2, r2, #1
 8008054:	e7a7      	b.n	8007fa6 <_dtoa_r+0x26e>
 8008056:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008058:	9a03      	ldr	r2, [sp, #12]
 800805a:	601a      	str	r2, [r3, #0]
 800805c:	9b08      	ldr	r3, [sp, #32]
 800805e:	2b0e      	cmp	r3, #14
 8008060:	f200 80a8 	bhi.w	80081b4 <_dtoa_r+0x47c>
 8008064:	2c00      	cmp	r4, #0
 8008066:	f000 80a5 	beq.w	80081b4 <_dtoa_r+0x47c>
 800806a:	f1ba 0f00 	cmp.w	sl, #0
 800806e:	dd34      	ble.n	80080da <_dtoa_r+0x3a2>
 8008070:	4a9a      	ldr	r2, [pc, #616]	; (80082dc <_dtoa_r+0x5a4>)
 8008072:	f00a 030f 	and.w	r3, sl, #15
 8008076:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800807a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800807e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008082:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008086:	ea4f 142a 	mov.w	r4, sl, asr #4
 800808a:	d016      	beq.n	80080ba <_dtoa_r+0x382>
 800808c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008090:	4b93      	ldr	r3, [pc, #588]	; (80082e0 <_dtoa_r+0x5a8>)
 8008092:	2703      	movs	r7, #3
 8008094:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008098:	f7f8 fb48 	bl	800072c <__aeabi_ddiv>
 800809c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80080a0:	f004 040f 	and.w	r4, r4, #15
 80080a4:	4e8e      	ldr	r6, [pc, #568]	; (80082e0 <_dtoa_r+0x5a8>)
 80080a6:	b954      	cbnz	r4, 80080be <_dtoa_r+0x386>
 80080a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80080ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80080b0:	f7f8 fb3c 	bl	800072c <__aeabi_ddiv>
 80080b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80080b8:	e029      	b.n	800810e <_dtoa_r+0x3d6>
 80080ba:	2702      	movs	r7, #2
 80080bc:	e7f2      	b.n	80080a4 <_dtoa_r+0x36c>
 80080be:	07e1      	lsls	r1, r4, #31
 80080c0:	d508      	bpl.n	80080d4 <_dtoa_r+0x39c>
 80080c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80080c6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80080ca:	f7f8 fa05 	bl	80004d8 <__aeabi_dmul>
 80080ce:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80080d2:	3701      	adds	r7, #1
 80080d4:	1064      	asrs	r4, r4, #1
 80080d6:	3608      	adds	r6, #8
 80080d8:	e7e5      	b.n	80080a6 <_dtoa_r+0x36e>
 80080da:	f000 80a5 	beq.w	8008228 <_dtoa_r+0x4f0>
 80080de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80080e2:	f1ca 0400 	rsb	r4, sl, #0
 80080e6:	4b7d      	ldr	r3, [pc, #500]	; (80082dc <_dtoa_r+0x5a4>)
 80080e8:	f004 020f 	and.w	r2, r4, #15
 80080ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80080f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080f4:	f7f8 f9f0 	bl	80004d8 <__aeabi_dmul>
 80080f8:	2702      	movs	r7, #2
 80080fa:	2300      	movs	r3, #0
 80080fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008100:	4e77      	ldr	r6, [pc, #476]	; (80082e0 <_dtoa_r+0x5a8>)
 8008102:	1124      	asrs	r4, r4, #4
 8008104:	2c00      	cmp	r4, #0
 8008106:	f040 8084 	bne.w	8008212 <_dtoa_r+0x4da>
 800810a:	2b00      	cmp	r3, #0
 800810c:	d1d2      	bne.n	80080b4 <_dtoa_r+0x37c>
 800810e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008110:	2b00      	cmp	r3, #0
 8008112:	f000 808b 	beq.w	800822c <_dtoa_r+0x4f4>
 8008116:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800811a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800811e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008122:	2200      	movs	r2, #0
 8008124:	4b6f      	ldr	r3, [pc, #444]	; (80082e4 <_dtoa_r+0x5ac>)
 8008126:	f7f8 fc49 	bl	80009bc <__aeabi_dcmplt>
 800812a:	2800      	cmp	r0, #0
 800812c:	d07e      	beq.n	800822c <_dtoa_r+0x4f4>
 800812e:	9b08      	ldr	r3, [sp, #32]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d07b      	beq.n	800822c <_dtoa_r+0x4f4>
 8008134:	f1b9 0f00 	cmp.w	r9, #0
 8008138:	dd38      	ble.n	80081ac <_dtoa_r+0x474>
 800813a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800813e:	2200      	movs	r2, #0
 8008140:	4b69      	ldr	r3, [pc, #420]	; (80082e8 <_dtoa_r+0x5b0>)
 8008142:	f7f8 f9c9 	bl	80004d8 <__aeabi_dmul>
 8008146:	464c      	mov	r4, r9
 8008148:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800814c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8008150:	3701      	adds	r7, #1
 8008152:	4638      	mov	r0, r7
 8008154:	f7f8 f956 	bl	8000404 <__aeabi_i2d>
 8008158:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800815c:	f7f8 f9bc 	bl	80004d8 <__aeabi_dmul>
 8008160:	2200      	movs	r2, #0
 8008162:	4b62      	ldr	r3, [pc, #392]	; (80082ec <_dtoa_r+0x5b4>)
 8008164:	f7f8 f802 	bl	800016c <__adddf3>
 8008168:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800816c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008170:	9611      	str	r6, [sp, #68]	; 0x44
 8008172:	2c00      	cmp	r4, #0
 8008174:	d15d      	bne.n	8008232 <_dtoa_r+0x4fa>
 8008176:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800817a:	2200      	movs	r2, #0
 800817c:	4b5c      	ldr	r3, [pc, #368]	; (80082f0 <_dtoa_r+0x5b8>)
 800817e:	f7f7 fff3 	bl	8000168 <__aeabi_dsub>
 8008182:	4602      	mov	r2, r0
 8008184:	460b      	mov	r3, r1
 8008186:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800818a:	4633      	mov	r3, r6
 800818c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800818e:	f7f8 fc33 	bl	80009f8 <__aeabi_dcmpgt>
 8008192:	2800      	cmp	r0, #0
 8008194:	f040 829c 	bne.w	80086d0 <_dtoa_r+0x998>
 8008198:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800819c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800819e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80081a2:	f7f8 fc0b 	bl	80009bc <__aeabi_dcmplt>
 80081a6:	2800      	cmp	r0, #0
 80081a8:	f040 8290 	bne.w	80086cc <_dtoa_r+0x994>
 80081ac:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80081b0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80081b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	f2c0 8152 	blt.w	8008460 <_dtoa_r+0x728>
 80081bc:	f1ba 0f0e 	cmp.w	sl, #14
 80081c0:	f300 814e 	bgt.w	8008460 <_dtoa_r+0x728>
 80081c4:	4b45      	ldr	r3, [pc, #276]	; (80082dc <_dtoa_r+0x5a4>)
 80081c6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80081ca:	e9d3 3400 	ldrd	r3, r4, [r3]
 80081ce:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80081d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	f280 80db 	bge.w	8008390 <_dtoa_r+0x658>
 80081da:	9b08      	ldr	r3, [sp, #32]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	f300 80d7 	bgt.w	8008390 <_dtoa_r+0x658>
 80081e2:	f040 8272 	bne.w	80086ca <_dtoa_r+0x992>
 80081e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80081ea:	2200      	movs	r2, #0
 80081ec:	4b40      	ldr	r3, [pc, #256]	; (80082f0 <_dtoa_r+0x5b8>)
 80081ee:	f7f8 f973 	bl	80004d8 <__aeabi_dmul>
 80081f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80081f6:	f7f8 fbf5 	bl	80009e4 <__aeabi_dcmpge>
 80081fa:	9c08      	ldr	r4, [sp, #32]
 80081fc:	4626      	mov	r6, r4
 80081fe:	2800      	cmp	r0, #0
 8008200:	f040 8248 	bne.w	8008694 <_dtoa_r+0x95c>
 8008204:	2331      	movs	r3, #49	; 0x31
 8008206:	9f03      	ldr	r7, [sp, #12]
 8008208:	f10a 0a01 	add.w	sl, sl, #1
 800820c:	f807 3b01 	strb.w	r3, [r7], #1
 8008210:	e244      	b.n	800869c <_dtoa_r+0x964>
 8008212:	07e2      	lsls	r2, r4, #31
 8008214:	d505      	bpl.n	8008222 <_dtoa_r+0x4ea>
 8008216:	e9d6 2300 	ldrd	r2, r3, [r6]
 800821a:	f7f8 f95d 	bl	80004d8 <__aeabi_dmul>
 800821e:	2301      	movs	r3, #1
 8008220:	3701      	adds	r7, #1
 8008222:	1064      	asrs	r4, r4, #1
 8008224:	3608      	adds	r6, #8
 8008226:	e76d      	b.n	8008104 <_dtoa_r+0x3cc>
 8008228:	2702      	movs	r7, #2
 800822a:	e770      	b.n	800810e <_dtoa_r+0x3d6>
 800822c:	46d0      	mov	r8, sl
 800822e:	9c08      	ldr	r4, [sp, #32]
 8008230:	e78f      	b.n	8008152 <_dtoa_r+0x41a>
 8008232:	9903      	ldr	r1, [sp, #12]
 8008234:	4b29      	ldr	r3, [pc, #164]	; (80082dc <_dtoa_r+0x5a4>)
 8008236:	4421      	add	r1, r4
 8008238:	9112      	str	r1, [sp, #72]	; 0x48
 800823a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800823c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008240:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008244:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008248:	2900      	cmp	r1, #0
 800824a:	d055      	beq.n	80082f8 <_dtoa_r+0x5c0>
 800824c:	2000      	movs	r0, #0
 800824e:	4929      	ldr	r1, [pc, #164]	; (80082f4 <_dtoa_r+0x5bc>)
 8008250:	f7f8 fa6c 	bl	800072c <__aeabi_ddiv>
 8008254:	463b      	mov	r3, r7
 8008256:	4632      	mov	r2, r6
 8008258:	f7f7 ff86 	bl	8000168 <__aeabi_dsub>
 800825c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008260:	9f03      	ldr	r7, [sp, #12]
 8008262:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008266:	f7f8 fbe7 	bl	8000a38 <__aeabi_d2iz>
 800826a:	4604      	mov	r4, r0
 800826c:	f7f8 f8ca 	bl	8000404 <__aeabi_i2d>
 8008270:	4602      	mov	r2, r0
 8008272:	460b      	mov	r3, r1
 8008274:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008278:	f7f7 ff76 	bl	8000168 <__aeabi_dsub>
 800827c:	4602      	mov	r2, r0
 800827e:	460b      	mov	r3, r1
 8008280:	3430      	adds	r4, #48	; 0x30
 8008282:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008286:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800828a:	f807 4b01 	strb.w	r4, [r7], #1
 800828e:	f7f8 fb95 	bl	80009bc <__aeabi_dcmplt>
 8008292:	2800      	cmp	r0, #0
 8008294:	d174      	bne.n	8008380 <_dtoa_r+0x648>
 8008296:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800829a:	2000      	movs	r0, #0
 800829c:	4911      	ldr	r1, [pc, #68]	; (80082e4 <_dtoa_r+0x5ac>)
 800829e:	f7f7 ff63 	bl	8000168 <__aeabi_dsub>
 80082a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80082a6:	f7f8 fb89 	bl	80009bc <__aeabi_dcmplt>
 80082aa:	2800      	cmp	r0, #0
 80082ac:	f040 80b7 	bne.w	800841e <_dtoa_r+0x6e6>
 80082b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80082b2:	429f      	cmp	r7, r3
 80082b4:	f43f af7a 	beq.w	80081ac <_dtoa_r+0x474>
 80082b8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80082bc:	2200      	movs	r2, #0
 80082be:	4b0a      	ldr	r3, [pc, #40]	; (80082e8 <_dtoa_r+0x5b0>)
 80082c0:	f7f8 f90a 	bl	80004d8 <__aeabi_dmul>
 80082c4:	2200      	movs	r2, #0
 80082c6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80082ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80082ce:	4b06      	ldr	r3, [pc, #24]	; (80082e8 <_dtoa_r+0x5b0>)
 80082d0:	f7f8 f902 	bl	80004d8 <__aeabi_dmul>
 80082d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80082d8:	e7c3      	b.n	8008262 <_dtoa_r+0x52a>
 80082da:	bf00      	nop
 80082dc:	0800c578 	.word	0x0800c578
 80082e0:	0800c550 	.word	0x0800c550
 80082e4:	3ff00000 	.word	0x3ff00000
 80082e8:	40240000 	.word	0x40240000
 80082ec:	401c0000 	.word	0x401c0000
 80082f0:	40140000 	.word	0x40140000
 80082f4:	3fe00000 	.word	0x3fe00000
 80082f8:	4630      	mov	r0, r6
 80082fa:	4639      	mov	r1, r7
 80082fc:	f7f8 f8ec 	bl	80004d8 <__aeabi_dmul>
 8008300:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008302:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008306:	9c03      	ldr	r4, [sp, #12]
 8008308:	9314      	str	r3, [sp, #80]	; 0x50
 800830a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800830e:	f7f8 fb93 	bl	8000a38 <__aeabi_d2iz>
 8008312:	9015      	str	r0, [sp, #84]	; 0x54
 8008314:	f7f8 f876 	bl	8000404 <__aeabi_i2d>
 8008318:	4602      	mov	r2, r0
 800831a:	460b      	mov	r3, r1
 800831c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008320:	f7f7 ff22 	bl	8000168 <__aeabi_dsub>
 8008324:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008326:	4606      	mov	r6, r0
 8008328:	3330      	adds	r3, #48	; 0x30
 800832a:	f804 3b01 	strb.w	r3, [r4], #1
 800832e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008330:	460f      	mov	r7, r1
 8008332:	429c      	cmp	r4, r3
 8008334:	f04f 0200 	mov.w	r2, #0
 8008338:	d124      	bne.n	8008384 <_dtoa_r+0x64c>
 800833a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800833e:	4bb0      	ldr	r3, [pc, #704]	; (8008600 <_dtoa_r+0x8c8>)
 8008340:	f7f7 ff14 	bl	800016c <__adddf3>
 8008344:	4602      	mov	r2, r0
 8008346:	460b      	mov	r3, r1
 8008348:	4630      	mov	r0, r6
 800834a:	4639      	mov	r1, r7
 800834c:	f7f8 fb54 	bl	80009f8 <__aeabi_dcmpgt>
 8008350:	2800      	cmp	r0, #0
 8008352:	d163      	bne.n	800841c <_dtoa_r+0x6e4>
 8008354:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008358:	2000      	movs	r0, #0
 800835a:	49a9      	ldr	r1, [pc, #676]	; (8008600 <_dtoa_r+0x8c8>)
 800835c:	f7f7 ff04 	bl	8000168 <__aeabi_dsub>
 8008360:	4602      	mov	r2, r0
 8008362:	460b      	mov	r3, r1
 8008364:	4630      	mov	r0, r6
 8008366:	4639      	mov	r1, r7
 8008368:	f7f8 fb28 	bl	80009bc <__aeabi_dcmplt>
 800836c:	2800      	cmp	r0, #0
 800836e:	f43f af1d 	beq.w	80081ac <_dtoa_r+0x474>
 8008372:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008374:	1e7b      	subs	r3, r7, #1
 8008376:	9314      	str	r3, [sp, #80]	; 0x50
 8008378:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800837c:	2b30      	cmp	r3, #48	; 0x30
 800837e:	d0f8      	beq.n	8008372 <_dtoa_r+0x63a>
 8008380:	46c2      	mov	sl, r8
 8008382:	e03b      	b.n	80083fc <_dtoa_r+0x6c4>
 8008384:	4b9f      	ldr	r3, [pc, #636]	; (8008604 <_dtoa_r+0x8cc>)
 8008386:	f7f8 f8a7 	bl	80004d8 <__aeabi_dmul>
 800838a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800838e:	e7bc      	b.n	800830a <_dtoa_r+0x5d2>
 8008390:	9f03      	ldr	r7, [sp, #12]
 8008392:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008396:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800839a:	4640      	mov	r0, r8
 800839c:	4649      	mov	r1, r9
 800839e:	f7f8 f9c5 	bl	800072c <__aeabi_ddiv>
 80083a2:	f7f8 fb49 	bl	8000a38 <__aeabi_d2iz>
 80083a6:	4604      	mov	r4, r0
 80083a8:	f7f8 f82c 	bl	8000404 <__aeabi_i2d>
 80083ac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80083b0:	f7f8 f892 	bl	80004d8 <__aeabi_dmul>
 80083b4:	4602      	mov	r2, r0
 80083b6:	460b      	mov	r3, r1
 80083b8:	4640      	mov	r0, r8
 80083ba:	4649      	mov	r1, r9
 80083bc:	f7f7 fed4 	bl	8000168 <__aeabi_dsub>
 80083c0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80083c4:	f807 6b01 	strb.w	r6, [r7], #1
 80083c8:	9e03      	ldr	r6, [sp, #12]
 80083ca:	f8dd c020 	ldr.w	ip, [sp, #32]
 80083ce:	1bbe      	subs	r6, r7, r6
 80083d0:	45b4      	cmp	ip, r6
 80083d2:	4602      	mov	r2, r0
 80083d4:	460b      	mov	r3, r1
 80083d6:	d136      	bne.n	8008446 <_dtoa_r+0x70e>
 80083d8:	f7f7 fec8 	bl	800016c <__adddf3>
 80083dc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80083e0:	4680      	mov	r8, r0
 80083e2:	4689      	mov	r9, r1
 80083e4:	f7f8 fb08 	bl	80009f8 <__aeabi_dcmpgt>
 80083e8:	bb58      	cbnz	r0, 8008442 <_dtoa_r+0x70a>
 80083ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80083ee:	4640      	mov	r0, r8
 80083f0:	4649      	mov	r1, r9
 80083f2:	f7f8 fad9 	bl	80009a8 <__aeabi_dcmpeq>
 80083f6:	b108      	cbz	r0, 80083fc <_dtoa_r+0x6c4>
 80083f8:	07e1      	lsls	r1, r4, #31
 80083fa:	d422      	bmi.n	8008442 <_dtoa_r+0x70a>
 80083fc:	4628      	mov	r0, r5
 80083fe:	4659      	mov	r1, fp
 8008400:	f001 f876 	bl	80094f0 <_Bfree>
 8008404:	2300      	movs	r3, #0
 8008406:	703b      	strb	r3, [r7, #0]
 8008408:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800840a:	f10a 0001 	add.w	r0, sl, #1
 800840e:	6018      	str	r0, [r3, #0]
 8008410:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008412:	2b00      	cmp	r3, #0
 8008414:	f43f acde 	beq.w	8007dd4 <_dtoa_r+0x9c>
 8008418:	601f      	str	r7, [r3, #0]
 800841a:	e4db      	b.n	8007dd4 <_dtoa_r+0x9c>
 800841c:	4627      	mov	r7, r4
 800841e:	463b      	mov	r3, r7
 8008420:	461f      	mov	r7, r3
 8008422:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008426:	2a39      	cmp	r2, #57	; 0x39
 8008428:	d107      	bne.n	800843a <_dtoa_r+0x702>
 800842a:	9a03      	ldr	r2, [sp, #12]
 800842c:	429a      	cmp	r2, r3
 800842e:	d1f7      	bne.n	8008420 <_dtoa_r+0x6e8>
 8008430:	2230      	movs	r2, #48	; 0x30
 8008432:	9903      	ldr	r1, [sp, #12]
 8008434:	f108 0801 	add.w	r8, r8, #1
 8008438:	700a      	strb	r2, [r1, #0]
 800843a:	781a      	ldrb	r2, [r3, #0]
 800843c:	3201      	adds	r2, #1
 800843e:	701a      	strb	r2, [r3, #0]
 8008440:	e79e      	b.n	8008380 <_dtoa_r+0x648>
 8008442:	46d0      	mov	r8, sl
 8008444:	e7eb      	b.n	800841e <_dtoa_r+0x6e6>
 8008446:	2200      	movs	r2, #0
 8008448:	4b6e      	ldr	r3, [pc, #440]	; (8008604 <_dtoa_r+0x8cc>)
 800844a:	f7f8 f845 	bl	80004d8 <__aeabi_dmul>
 800844e:	2200      	movs	r2, #0
 8008450:	2300      	movs	r3, #0
 8008452:	4680      	mov	r8, r0
 8008454:	4689      	mov	r9, r1
 8008456:	f7f8 faa7 	bl	80009a8 <__aeabi_dcmpeq>
 800845a:	2800      	cmp	r0, #0
 800845c:	d09b      	beq.n	8008396 <_dtoa_r+0x65e>
 800845e:	e7cd      	b.n	80083fc <_dtoa_r+0x6c4>
 8008460:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008462:	2a00      	cmp	r2, #0
 8008464:	f000 80d0 	beq.w	8008608 <_dtoa_r+0x8d0>
 8008468:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800846a:	2a01      	cmp	r2, #1
 800846c:	f300 80ae 	bgt.w	80085cc <_dtoa_r+0x894>
 8008470:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008472:	2a00      	cmp	r2, #0
 8008474:	f000 80a6 	beq.w	80085c4 <_dtoa_r+0x88c>
 8008478:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800847c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800847e:	9f06      	ldr	r7, [sp, #24]
 8008480:	9a06      	ldr	r2, [sp, #24]
 8008482:	2101      	movs	r1, #1
 8008484:	441a      	add	r2, r3
 8008486:	9206      	str	r2, [sp, #24]
 8008488:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800848a:	4628      	mov	r0, r5
 800848c:	441a      	add	r2, r3
 800848e:	9209      	str	r2, [sp, #36]	; 0x24
 8008490:	f001 f92e 	bl	80096f0 <__i2b>
 8008494:	4606      	mov	r6, r0
 8008496:	2f00      	cmp	r7, #0
 8008498:	dd0c      	ble.n	80084b4 <_dtoa_r+0x77c>
 800849a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800849c:	2b00      	cmp	r3, #0
 800849e:	dd09      	ble.n	80084b4 <_dtoa_r+0x77c>
 80084a0:	42bb      	cmp	r3, r7
 80084a2:	bfa8      	it	ge
 80084a4:	463b      	movge	r3, r7
 80084a6:	9a06      	ldr	r2, [sp, #24]
 80084a8:	1aff      	subs	r7, r7, r3
 80084aa:	1ad2      	subs	r2, r2, r3
 80084ac:	9206      	str	r2, [sp, #24]
 80084ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084b0:	1ad3      	subs	r3, r2, r3
 80084b2:	9309      	str	r3, [sp, #36]	; 0x24
 80084b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084b6:	b1f3      	cbz	r3, 80084f6 <_dtoa_r+0x7be>
 80084b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	f000 80a8 	beq.w	8008610 <_dtoa_r+0x8d8>
 80084c0:	2c00      	cmp	r4, #0
 80084c2:	dd10      	ble.n	80084e6 <_dtoa_r+0x7ae>
 80084c4:	4631      	mov	r1, r6
 80084c6:	4622      	mov	r2, r4
 80084c8:	4628      	mov	r0, r5
 80084ca:	f001 f9cf 	bl	800986c <__pow5mult>
 80084ce:	465a      	mov	r2, fp
 80084d0:	4601      	mov	r1, r0
 80084d2:	4606      	mov	r6, r0
 80084d4:	4628      	mov	r0, r5
 80084d6:	f001 f921 	bl	800971c <__multiply>
 80084da:	4680      	mov	r8, r0
 80084dc:	4659      	mov	r1, fp
 80084de:	4628      	mov	r0, r5
 80084e0:	f001 f806 	bl	80094f0 <_Bfree>
 80084e4:	46c3      	mov	fp, r8
 80084e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084e8:	1b1a      	subs	r2, r3, r4
 80084ea:	d004      	beq.n	80084f6 <_dtoa_r+0x7be>
 80084ec:	4659      	mov	r1, fp
 80084ee:	4628      	mov	r0, r5
 80084f0:	f001 f9bc 	bl	800986c <__pow5mult>
 80084f4:	4683      	mov	fp, r0
 80084f6:	2101      	movs	r1, #1
 80084f8:	4628      	mov	r0, r5
 80084fa:	f001 f8f9 	bl	80096f0 <__i2b>
 80084fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008500:	4604      	mov	r4, r0
 8008502:	2b00      	cmp	r3, #0
 8008504:	f340 8086 	ble.w	8008614 <_dtoa_r+0x8dc>
 8008508:	461a      	mov	r2, r3
 800850a:	4601      	mov	r1, r0
 800850c:	4628      	mov	r0, r5
 800850e:	f001 f9ad 	bl	800986c <__pow5mult>
 8008512:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008514:	4604      	mov	r4, r0
 8008516:	2b01      	cmp	r3, #1
 8008518:	dd7f      	ble.n	800861a <_dtoa_r+0x8e2>
 800851a:	f04f 0800 	mov.w	r8, #0
 800851e:	6923      	ldr	r3, [r4, #16]
 8008520:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008524:	6918      	ldr	r0, [r3, #16]
 8008526:	f001 f895 	bl	8009654 <__hi0bits>
 800852a:	f1c0 0020 	rsb	r0, r0, #32
 800852e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008530:	4418      	add	r0, r3
 8008532:	f010 001f 	ands.w	r0, r0, #31
 8008536:	f000 8092 	beq.w	800865e <_dtoa_r+0x926>
 800853a:	f1c0 0320 	rsb	r3, r0, #32
 800853e:	2b04      	cmp	r3, #4
 8008540:	f340 808a 	ble.w	8008658 <_dtoa_r+0x920>
 8008544:	f1c0 001c 	rsb	r0, r0, #28
 8008548:	9b06      	ldr	r3, [sp, #24]
 800854a:	4407      	add	r7, r0
 800854c:	4403      	add	r3, r0
 800854e:	9306      	str	r3, [sp, #24]
 8008550:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008552:	4403      	add	r3, r0
 8008554:	9309      	str	r3, [sp, #36]	; 0x24
 8008556:	9b06      	ldr	r3, [sp, #24]
 8008558:	2b00      	cmp	r3, #0
 800855a:	dd05      	ble.n	8008568 <_dtoa_r+0x830>
 800855c:	4659      	mov	r1, fp
 800855e:	461a      	mov	r2, r3
 8008560:	4628      	mov	r0, r5
 8008562:	f001 f9dd 	bl	8009920 <__lshift>
 8008566:	4683      	mov	fp, r0
 8008568:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800856a:	2b00      	cmp	r3, #0
 800856c:	dd05      	ble.n	800857a <_dtoa_r+0x842>
 800856e:	4621      	mov	r1, r4
 8008570:	461a      	mov	r2, r3
 8008572:	4628      	mov	r0, r5
 8008574:	f001 f9d4 	bl	8009920 <__lshift>
 8008578:	4604      	mov	r4, r0
 800857a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800857c:	2b00      	cmp	r3, #0
 800857e:	d070      	beq.n	8008662 <_dtoa_r+0x92a>
 8008580:	4621      	mov	r1, r4
 8008582:	4658      	mov	r0, fp
 8008584:	f001 fa3c 	bl	8009a00 <__mcmp>
 8008588:	2800      	cmp	r0, #0
 800858a:	da6a      	bge.n	8008662 <_dtoa_r+0x92a>
 800858c:	2300      	movs	r3, #0
 800858e:	4659      	mov	r1, fp
 8008590:	220a      	movs	r2, #10
 8008592:	4628      	mov	r0, r5
 8008594:	f000 ffce 	bl	8009534 <__multadd>
 8008598:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800859a:	4683      	mov	fp, r0
 800859c:	f10a 3aff 	add.w	sl, sl, #4294967295
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	f000 8194 	beq.w	80088ce <_dtoa_r+0xb96>
 80085a6:	4631      	mov	r1, r6
 80085a8:	2300      	movs	r3, #0
 80085aa:	220a      	movs	r2, #10
 80085ac:	4628      	mov	r0, r5
 80085ae:	f000 ffc1 	bl	8009534 <__multadd>
 80085b2:	f1b9 0f00 	cmp.w	r9, #0
 80085b6:	4606      	mov	r6, r0
 80085b8:	f300 8093 	bgt.w	80086e2 <_dtoa_r+0x9aa>
 80085bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80085be:	2b02      	cmp	r3, #2
 80085c0:	dc57      	bgt.n	8008672 <_dtoa_r+0x93a>
 80085c2:	e08e      	b.n	80086e2 <_dtoa_r+0x9aa>
 80085c4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80085c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80085ca:	e757      	b.n	800847c <_dtoa_r+0x744>
 80085cc:	9b08      	ldr	r3, [sp, #32]
 80085ce:	1e5c      	subs	r4, r3, #1
 80085d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085d2:	42a3      	cmp	r3, r4
 80085d4:	bfb7      	itett	lt
 80085d6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80085d8:	1b1c      	subge	r4, r3, r4
 80085da:	1ae2      	sublt	r2, r4, r3
 80085dc:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80085de:	bfbe      	ittt	lt
 80085e0:	940a      	strlt	r4, [sp, #40]	; 0x28
 80085e2:	189b      	addlt	r3, r3, r2
 80085e4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80085e6:	9b08      	ldr	r3, [sp, #32]
 80085e8:	bfb8      	it	lt
 80085ea:	2400      	movlt	r4, #0
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	bfbb      	ittet	lt
 80085f0:	9b06      	ldrlt	r3, [sp, #24]
 80085f2:	9a08      	ldrlt	r2, [sp, #32]
 80085f4:	9f06      	ldrge	r7, [sp, #24]
 80085f6:	1a9f      	sublt	r7, r3, r2
 80085f8:	bfac      	ite	ge
 80085fa:	9b08      	ldrge	r3, [sp, #32]
 80085fc:	2300      	movlt	r3, #0
 80085fe:	e73f      	b.n	8008480 <_dtoa_r+0x748>
 8008600:	3fe00000 	.word	0x3fe00000
 8008604:	40240000 	.word	0x40240000
 8008608:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800860a:	9f06      	ldr	r7, [sp, #24]
 800860c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800860e:	e742      	b.n	8008496 <_dtoa_r+0x75e>
 8008610:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008612:	e76b      	b.n	80084ec <_dtoa_r+0x7b4>
 8008614:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008616:	2b01      	cmp	r3, #1
 8008618:	dc19      	bgt.n	800864e <_dtoa_r+0x916>
 800861a:	9b04      	ldr	r3, [sp, #16]
 800861c:	b9bb      	cbnz	r3, 800864e <_dtoa_r+0x916>
 800861e:	9b05      	ldr	r3, [sp, #20]
 8008620:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008624:	b99b      	cbnz	r3, 800864e <_dtoa_r+0x916>
 8008626:	9b05      	ldr	r3, [sp, #20]
 8008628:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800862c:	0d1b      	lsrs	r3, r3, #20
 800862e:	051b      	lsls	r3, r3, #20
 8008630:	b183      	cbz	r3, 8008654 <_dtoa_r+0x91c>
 8008632:	f04f 0801 	mov.w	r8, #1
 8008636:	9b06      	ldr	r3, [sp, #24]
 8008638:	3301      	adds	r3, #1
 800863a:	9306      	str	r3, [sp, #24]
 800863c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800863e:	3301      	adds	r3, #1
 8008640:	9309      	str	r3, [sp, #36]	; 0x24
 8008642:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008644:	2b00      	cmp	r3, #0
 8008646:	f47f af6a 	bne.w	800851e <_dtoa_r+0x7e6>
 800864a:	2001      	movs	r0, #1
 800864c:	e76f      	b.n	800852e <_dtoa_r+0x7f6>
 800864e:	f04f 0800 	mov.w	r8, #0
 8008652:	e7f6      	b.n	8008642 <_dtoa_r+0x90a>
 8008654:	4698      	mov	r8, r3
 8008656:	e7f4      	b.n	8008642 <_dtoa_r+0x90a>
 8008658:	f43f af7d 	beq.w	8008556 <_dtoa_r+0x81e>
 800865c:	4618      	mov	r0, r3
 800865e:	301c      	adds	r0, #28
 8008660:	e772      	b.n	8008548 <_dtoa_r+0x810>
 8008662:	9b08      	ldr	r3, [sp, #32]
 8008664:	2b00      	cmp	r3, #0
 8008666:	dc36      	bgt.n	80086d6 <_dtoa_r+0x99e>
 8008668:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800866a:	2b02      	cmp	r3, #2
 800866c:	dd33      	ble.n	80086d6 <_dtoa_r+0x99e>
 800866e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008672:	f1b9 0f00 	cmp.w	r9, #0
 8008676:	d10d      	bne.n	8008694 <_dtoa_r+0x95c>
 8008678:	4621      	mov	r1, r4
 800867a:	464b      	mov	r3, r9
 800867c:	2205      	movs	r2, #5
 800867e:	4628      	mov	r0, r5
 8008680:	f000 ff58 	bl	8009534 <__multadd>
 8008684:	4601      	mov	r1, r0
 8008686:	4604      	mov	r4, r0
 8008688:	4658      	mov	r0, fp
 800868a:	f001 f9b9 	bl	8009a00 <__mcmp>
 800868e:	2800      	cmp	r0, #0
 8008690:	f73f adb8 	bgt.w	8008204 <_dtoa_r+0x4cc>
 8008694:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008696:	9f03      	ldr	r7, [sp, #12]
 8008698:	ea6f 0a03 	mvn.w	sl, r3
 800869c:	f04f 0800 	mov.w	r8, #0
 80086a0:	4621      	mov	r1, r4
 80086a2:	4628      	mov	r0, r5
 80086a4:	f000 ff24 	bl	80094f0 <_Bfree>
 80086a8:	2e00      	cmp	r6, #0
 80086aa:	f43f aea7 	beq.w	80083fc <_dtoa_r+0x6c4>
 80086ae:	f1b8 0f00 	cmp.w	r8, #0
 80086b2:	d005      	beq.n	80086c0 <_dtoa_r+0x988>
 80086b4:	45b0      	cmp	r8, r6
 80086b6:	d003      	beq.n	80086c0 <_dtoa_r+0x988>
 80086b8:	4641      	mov	r1, r8
 80086ba:	4628      	mov	r0, r5
 80086bc:	f000 ff18 	bl	80094f0 <_Bfree>
 80086c0:	4631      	mov	r1, r6
 80086c2:	4628      	mov	r0, r5
 80086c4:	f000 ff14 	bl	80094f0 <_Bfree>
 80086c8:	e698      	b.n	80083fc <_dtoa_r+0x6c4>
 80086ca:	2400      	movs	r4, #0
 80086cc:	4626      	mov	r6, r4
 80086ce:	e7e1      	b.n	8008694 <_dtoa_r+0x95c>
 80086d0:	46c2      	mov	sl, r8
 80086d2:	4626      	mov	r6, r4
 80086d4:	e596      	b.n	8008204 <_dtoa_r+0x4cc>
 80086d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	f000 80fd 	beq.w	80088dc <_dtoa_r+0xba4>
 80086e2:	2f00      	cmp	r7, #0
 80086e4:	dd05      	ble.n	80086f2 <_dtoa_r+0x9ba>
 80086e6:	4631      	mov	r1, r6
 80086e8:	463a      	mov	r2, r7
 80086ea:	4628      	mov	r0, r5
 80086ec:	f001 f918 	bl	8009920 <__lshift>
 80086f0:	4606      	mov	r6, r0
 80086f2:	f1b8 0f00 	cmp.w	r8, #0
 80086f6:	d05c      	beq.n	80087b2 <_dtoa_r+0xa7a>
 80086f8:	4628      	mov	r0, r5
 80086fa:	6871      	ldr	r1, [r6, #4]
 80086fc:	f000 feb8 	bl	8009470 <_Balloc>
 8008700:	4607      	mov	r7, r0
 8008702:	b928      	cbnz	r0, 8008710 <_dtoa_r+0x9d8>
 8008704:	4602      	mov	r2, r0
 8008706:	f240 21ea 	movw	r1, #746	; 0x2ea
 800870a:	4b7f      	ldr	r3, [pc, #508]	; (8008908 <_dtoa_r+0xbd0>)
 800870c:	f7ff bb28 	b.w	8007d60 <_dtoa_r+0x28>
 8008710:	6932      	ldr	r2, [r6, #16]
 8008712:	f106 010c 	add.w	r1, r6, #12
 8008716:	3202      	adds	r2, #2
 8008718:	0092      	lsls	r2, r2, #2
 800871a:	300c      	adds	r0, #12
 800871c:	f7fd fbee 	bl	8005efc <memcpy>
 8008720:	2201      	movs	r2, #1
 8008722:	4639      	mov	r1, r7
 8008724:	4628      	mov	r0, r5
 8008726:	f001 f8fb 	bl	8009920 <__lshift>
 800872a:	46b0      	mov	r8, r6
 800872c:	4606      	mov	r6, r0
 800872e:	9b03      	ldr	r3, [sp, #12]
 8008730:	3301      	adds	r3, #1
 8008732:	9308      	str	r3, [sp, #32]
 8008734:	9b03      	ldr	r3, [sp, #12]
 8008736:	444b      	add	r3, r9
 8008738:	930a      	str	r3, [sp, #40]	; 0x28
 800873a:	9b04      	ldr	r3, [sp, #16]
 800873c:	f003 0301 	and.w	r3, r3, #1
 8008740:	9309      	str	r3, [sp, #36]	; 0x24
 8008742:	9b08      	ldr	r3, [sp, #32]
 8008744:	4621      	mov	r1, r4
 8008746:	3b01      	subs	r3, #1
 8008748:	4658      	mov	r0, fp
 800874a:	9304      	str	r3, [sp, #16]
 800874c:	f7ff fa68 	bl	8007c20 <quorem>
 8008750:	4603      	mov	r3, r0
 8008752:	4641      	mov	r1, r8
 8008754:	3330      	adds	r3, #48	; 0x30
 8008756:	9006      	str	r0, [sp, #24]
 8008758:	4658      	mov	r0, fp
 800875a:	930b      	str	r3, [sp, #44]	; 0x2c
 800875c:	f001 f950 	bl	8009a00 <__mcmp>
 8008760:	4632      	mov	r2, r6
 8008762:	4681      	mov	r9, r0
 8008764:	4621      	mov	r1, r4
 8008766:	4628      	mov	r0, r5
 8008768:	f001 f966 	bl	8009a38 <__mdiff>
 800876c:	68c2      	ldr	r2, [r0, #12]
 800876e:	4607      	mov	r7, r0
 8008770:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008772:	bb02      	cbnz	r2, 80087b6 <_dtoa_r+0xa7e>
 8008774:	4601      	mov	r1, r0
 8008776:	4658      	mov	r0, fp
 8008778:	f001 f942 	bl	8009a00 <__mcmp>
 800877c:	4602      	mov	r2, r0
 800877e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008780:	4639      	mov	r1, r7
 8008782:	4628      	mov	r0, r5
 8008784:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8008788:	f000 feb2 	bl	80094f0 <_Bfree>
 800878c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800878e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008790:	9f08      	ldr	r7, [sp, #32]
 8008792:	ea43 0102 	orr.w	r1, r3, r2
 8008796:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008798:	430b      	orrs	r3, r1
 800879a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800879c:	d10d      	bne.n	80087ba <_dtoa_r+0xa82>
 800879e:	2b39      	cmp	r3, #57	; 0x39
 80087a0:	d029      	beq.n	80087f6 <_dtoa_r+0xabe>
 80087a2:	f1b9 0f00 	cmp.w	r9, #0
 80087a6:	dd01      	ble.n	80087ac <_dtoa_r+0xa74>
 80087a8:	9b06      	ldr	r3, [sp, #24]
 80087aa:	3331      	adds	r3, #49	; 0x31
 80087ac:	9a04      	ldr	r2, [sp, #16]
 80087ae:	7013      	strb	r3, [r2, #0]
 80087b0:	e776      	b.n	80086a0 <_dtoa_r+0x968>
 80087b2:	4630      	mov	r0, r6
 80087b4:	e7b9      	b.n	800872a <_dtoa_r+0x9f2>
 80087b6:	2201      	movs	r2, #1
 80087b8:	e7e2      	b.n	8008780 <_dtoa_r+0xa48>
 80087ba:	f1b9 0f00 	cmp.w	r9, #0
 80087be:	db06      	blt.n	80087ce <_dtoa_r+0xa96>
 80087c0:	9922      	ldr	r1, [sp, #136]	; 0x88
 80087c2:	ea41 0909 	orr.w	r9, r1, r9
 80087c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80087c8:	ea59 0101 	orrs.w	r1, r9, r1
 80087cc:	d120      	bne.n	8008810 <_dtoa_r+0xad8>
 80087ce:	2a00      	cmp	r2, #0
 80087d0:	ddec      	ble.n	80087ac <_dtoa_r+0xa74>
 80087d2:	4659      	mov	r1, fp
 80087d4:	2201      	movs	r2, #1
 80087d6:	4628      	mov	r0, r5
 80087d8:	9308      	str	r3, [sp, #32]
 80087da:	f001 f8a1 	bl	8009920 <__lshift>
 80087de:	4621      	mov	r1, r4
 80087e0:	4683      	mov	fp, r0
 80087e2:	f001 f90d 	bl	8009a00 <__mcmp>
 80087e6:	2800      	cmp	r0, #0
 80087e8:	9b08      	ldr	r3, [sp, #32]
 80087ea:	dc02      	bgt.n	80087f2 <_dtoa_r+0xaba>
 80087ec:	d1de      	bne.n	80087ac <_dtoa_r+0xa74>
 80087ee:	07da      	lsls	r2, r3, #31
 80087f0:	d5dc      	bpl.n	80087ac <_dtoa_r+0xa74>
 80087f2:	2b39      	cmp	r3, #57	; 0x39
 80087f4:	d1d8      	bne.n	80087a8 <_dtoa_r+0xa70>
 80087f6:	2339      	movs	r3, #57	; 0x39
 80087f8:	9a04      	ldr	r2, [sp, #16]
 80087fa:	7013      	strb	r3, [r2, #0]
 80087fc:	463b      	mov	r3, r7
 80087fe:	461f      	mov	r7, r3
 8008800:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8008804:	3b01      	subs	r3, #1
 8008806:	2a39      	cmp	r2, #57	; 0x39
 8008808:	d050      	beq.n	80088ac <_dtoa_r+0xb74>
 800880a:	3201      	adds	r2, #1
 800880c:	701a      	strb	r2, [r3, #0]
 800880e:	e747      	b.n	80086a0 <_dtoa_r+0x968>
 8008810:	2a00      	cmp	r2, #0
 8008812:	dd03      	ble.n	800881c <_dtoa_r+0xae4>
 8008814:	2b39      	cmp	r3, #57	; 0x39
 8008816:	d0ee      	beq.n	80087f6 <_dtoa_r+0xabe>
 8008818:	3301      	adds	r3, #1
 800881a:	e7c7      	b.n	80087ac <_dtoa_r+0xa74>
 800881c:	9a08      	ldr	r2, [sp, #32]
 800881e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008820:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008824:	428a      	cmp	r2, r1
 8008826:	d02a      	beq.n	800887e <_dtoa_r+0xb46>
 8008828:	4659      	mov	r1, fp
 800882a:	2300      	movs	r3, #0
 800882c:	220a      	movs	r2, #10
 800882e:	4628      	mov	r0, r5
 8008830:	f000 fe80 	bl	8009534 <__multadd>
 8008834:	45b0      	cmp	r8, r6
 8008836:	4683      	mov	fp, r0
 8008838:	f04f 0300 	mov.w	r3, #0
 800883c:	f04f 020a 	mov.w	r2, #10
 8008840:	4641      	mov	r1, r8
 8008842:	4628      	mov	r0, r5
 8008844:	d107      	bne.n	8008856 <_dtoa_r+0xb1e>
 8008846:	f000 fe75 	bl	8009534 <__multadd>
 800884a:	4680      	mov	r8, r0
 800884c:	4606      	mov	r6, r0
 800884e:	9b08      	ldr	r3, [sp, #32]
 8008850:	3301      	adds	r3, #1
 8008852:	9308      	str	r3, [sp, #32]
 8008854:	e775      	b.n	8008742 <_dtoa_r+0xa0a>
 8008856:	f000 fe6d 	bl	8009534 <__multadd>
 800885a:	4631      	mov	r1, r6
 800885c:	4680      	mov	r8, r0
 800885e:	2300      	movs	r3, #0
 8008860:	220a      	movs	r2, #10
 8008862:	4628      	mov	r0, r5
 8008864:	f000 fe66 	bl	8009534 <__multadd>
 8008868:	4606      	mov	r6, r0
 800886a:	e7f0      	b.n	800884e <_dtoa_r+0xb16>
 800886c:	f1b9 0f00 	cmp.w	r9, #0
 8008870:	bfcc      	ite	gt
 8008872:	464f      	movgt	r7, r9
 8008874:	2701      	movle	r7, #1
 8008876:	f04f 0800 	mov.w	r8, #0
 800887a:	9a03      	ldr	r2, [sp, #12]
 800887c:	4417      	add	r7, r2
 800887e:	4659      	mov	r1, fp
 8008880:	2201      	movs	r2, #1
 8008882:	4628      	mov	r0, r5
 8008884:	9308      	str	r3, [sp, #32]
 8008886:	f001 f84b 	bl	8009920 <__lshift>
 800888a:	4621      	mov	r1, r4
 800888c:	4683      	mov	fp, r0
 800888e:	f001 f8b7 	bl	8009a00 <__mcmp>
 8008892:	2800      	cmp	r0, #0
 8008894:	dcb2      	bgt.n	80087fc <_dtoa_r+0xac4>
 8008896:	d102      	bne.n	800889e <_dtoa_r+0xb66>
 8008898:	9b08      	ldr	r3, [sp, #32]
 800889a:	07db      	lsls	r3, r3, #31
 800889c:	d4ae      	bmi.n	80087fc <_dtoa_r+0xac4>
 800889e:	463b      	mov	r3, r7
 80088a0:	461f      	mov	r7, r3
 80088a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80088a6:	2a30      	cmp	r2, #48	; 0x30
 80088a8:	d0fa      	beq.n	80088a0 <_dtoa_r+0xb68>
 80088aa:	e6f9      	b.n	80086a0 <_dtoa_r+0x968>
 80088ac:	9a03      	ldr	r2, [sp, #12]
 80088ae:	429a      	cmp	r2, r3
 80088b0:	d1a5      	bne.n	80087fe <_dtoa_r+0xac6>
 80088b2:	2331      	movs	r3, #49	; 0x31
 80088b4:	f10a 0a01 	add.w	sl, sl, #1
 80088b8:	e779      	b.n	80087ae <_dtoa_r+0xa76>
 80088ba:	4b14      	ldr	r3, [pc, #80]	; (800890c <_dtoa_r+0xbd4>)
 80088bc:	f7ff baa8 	b.w	8007e10 <_dtoa_r+0xd8>
 80088c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	f47f aa81 	bne.w	8007dca <_dtoa_r+0x92>
 80088c8:	4b11      	ldr	r3, [pc, #68]	; (8008910 <_dtoa_r+0xbd8>)
 80088ca:	f7ff baa1 	b.w	8007e10 <_dtoa_r+0xd8>
 80088ce:	f1b9 0f00 	cmp.w	r9, #0
 80088d2:	dc03      	bgt.n	80088dc <_dtoa_r+0xba4>
 80088d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80088d6:	2b02      	cmp	r3, #2
 80088d8:	f73f aecb 	bgt.w	8008672 <_dtoa_r+0x93a>
 80088dc:	9f03      	ldr	r7, [sp, #12]
 80088de:	4621      	mov	r1, r4
 80088e0:	4658      	mov	r0, fp
 80088e2:	f7ff f99d 	bl	8007c20 <quorem>
 80088e6:	9a03      	ldr	r2, [sp, #12]
 80088e8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80088ec:	f807 3b01 	strb.w	r3, [r7], #1
 80088f0:	1aba      	subs	r2, r7, r2
 80088f2:	4591      	cmp	r9, r2
 80088f4:	ddba      	ble.n	800886c <_dtoa_r+0xb34>
 80088f6:	4659      	mov	r1, fp
 80088f8:	2300      	movs	r3, #0
 80088fa:	220a      	movs	r2, #10
 80088fc:	4628      	mov	r0, r5
 80088fe:	f000 fe19 	bl	8009534 <__multadd>
 8008902:	4683      	mov	fp, r0
 8008904:	e7eb      	b.n	80088de <_dtoa_r+0xba6>
 8008906:	bf00      	nop
 8008908:	0800c400 	.word	0x0800c400
 800890c:	0800c204 	.word	0x0800c204
 8008910:	0800c381 	.word	0x0800c381

08008914 <__sflush_r>:
 8008914:	898a      	ldrh	r2, [r1, #12]
 8008916:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008918:	4605      	mov	r5, r0
 800891a:	0710      	lsls	r0, r2, #28
 800891c:	460c      	mov	r4, r1
 800891e:	d457      	bmi.n	80089d0 <__sflush_r+0xbc>
 8008920:	684b      	ldr	r3, [r1, #4]
 8008922:	2b00      	cmp	r3, #0
 8008924:	dc04      	bgt.n	8008930 <__sflush_r+0x1c>
 8008926:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008928:	2b00      	cmp	r3, #0
 800892a:	dc01      	bgt.n	8008930 <__sflush_r+0x1c>
 800892c:	2000      	movs	r0, #0
 800892e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008930:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008932:	2e00      	cmp	r6, #0
 8008934:	d0fa      	beq.n	800892c <__sflush_r+0x18>
 8008936:	2300      	movs	r3, #0
 8008938:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800893c:	682f      	ldr	r7, [r5, #0]
 800893e:	602b      	str	r3, [r5, #0]
 8008940:	d032      	beq.n	80089a8 <__sflush_r+0x94>
 8008942:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008944:	89a3      	ldrh	r3, [r4, #12]
 8008946:	075a      	lsls	r2, r3, #29
 8008948:	d505      	bpl.n	8008956 <__sflush_r+0x42>
 800894a:	6863      	ldr	r3, [r4, #4]
 800894c:	1ac0      	subs	r0, r0, r3
 800894e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008950:	b10b      	cbz	r3, 8008956 <__sflush_r+0x42>
 8008952:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008954:	1ac0      	subs	r0, r0, r3
 8008956:	2300      	movs	r3, #0
 8008958:	4602      	mov	r2, r0
 800895a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800895c:	4628      	mov	r0, r5
 800895e:	6a21      	ldr	r1, [r4, #32]
 8008960:	47b0      	blx	r6
 8008962:	1c43      	adds	r3, r0, #1
 8008964:	89a3      	ldrh	r3, [r4, #12]
 8008966:	d106      	bne.n	8008976 <__sflush_r+0x62>
 8008968:	6829      	ldr	r1, [r5, #0]
 800896a:	291d      	cmp	r1, #29
 800896c:	d82c      	bhi.n	80089c8 <__sflush_r+0xb4>
 800896e:	4a29      	ldr	r2, [pc, #164]	; (8008a14 <__sflush_r+0x100>)
 8008970:	40ca      	lsrs	r2, r1
 8008972:	07d6      	lsls	r6, r2, #31
 8008974:	d528      	bpl.n	80089c8 <__sflush_r+0xb4>
 8008976:	2200      	movs	r2, #0
 8008978:	6062      	str	r2, [r4, #4]
 800897a:	6922      	ldr	r2, [r4, #16]
 800897c:	04d9      	lsls	r1, r3, #19
 800897e:	6022      	str	r2, [r4, #0]
 8008980:	d504      	bpl.n	800898c <__sflush_r+0x78>
 8008982:	1c42      	adds	r2, r0, #1
 8008984:	d101      	bne.n	800898a <__sflush_r+0x76>
 8008986:	682b      	ldr	r3, [r5, #0]
 8008988:	b903      	cbnz	r3, 800898c <__sflush_r+0x78>
 800898a:	6560      	str	r0, [r4, #84]	; 0x54
 800898c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800898e:	602f      	str	r7, [r5, #0]
 8008990:	2900      	cmp	r1, #0
 8008992:	d0cb      	beq.n	800892c <__sflush_r+0x18>
 8008994:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008998:	4299      	cmp	r1, r3
 800899a:	d002      	beq.n	80089a2 <__sflush_r+0x8e>
 800899c:	4628      	mov	r0, r5
 800899e:	f001 fa33 	bl	8009e08 <_free_r>
 80089a2:	2000      	movs	r0, #0
 80089a4:	6360      	str	r0, [r4, #52]	; 0x34
 80089a6:	e7c2      	b.n	800892e <__sflush_r+0x1a>
 80089a8:	6a21      	ldr	r1, [r4, #32]
 80089aa:	2301      	movs	r3, #1
 80089ac:	4628      	mov	r0, r5
 80089ae:	47b0      	blx	r6
 80089b0:	1c41      	adds	r1, r0, #1
 80089b2:	d1c7      	bne.n	8008944 <__sflush_r+0x30>
 80089b4:	682b      	ldr	r3, [r5, #0]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d0c4      	beq.n	8008944 <__sflush_r+0x30>
 80089ba:	2b1d      	cmp	r3, #29
 80089bc:	d001      	beq.n	80089c2 <__sflush_r+0xae>
 80089be:	2b16      	cmp	r3, #22
 80089c0:	d101      	bne.n	80089c6 <__sflush_r+0xb2>
 80089c2:	602f      	str	r7, [r5, #0]
 80089c4:	e7b2      	b.n	800892c <__sflush_r+0x18>
 80089c6:	89a3      	ldrh	r3, [r4, #12]
 80089c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089cc:	81a3      	strh	r3, [r4, #12]
 80089ce:	e7ae      	b.n	800892e <__sflush_r+0x1a>
 80089d0:	690f      	ldr	r7, [r1, #16]
 80089d2:	2f00      	cmp	r7, #0
 80089d4:	d0aa      	beq.n	800892c <__sflush_r+0x18>
 80089d6:	0793      	lsls	r3, r2, #30
 80089d8:	bf18      	it	ne
 80089da:	2300      	movne	r3, #0
 80089dc:	680e      	ldr	r6, [r1, #0]
 80089de:	bf08      	it	eq
 80089e0:	694b      	ldreq	r3, [r1, #20]
 80089e2:	1bf6      	subs	r6, r6, r7
 80089e4:	600f      	str	r7, [r1, #0]
 80089e6:	608b      	str	r3, [r1, #8]
 80089e8:	2e00      	cmp	r6, #0
 80089ea:	dd9f      	ble.n	800892c <__sflush_r+0x18>
 80089ec:	4633      	mov	r3, r6
 80089ee:	463a      	mov	r2, r7
 80089f0:	4628      	mov	r0, r5
 80089f2:	6a21      	ldr	r1, [r4, #32]
 80089f4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80089f8:	47e0      	blx	ip
 80089fa:	2800      	cmp	r0, #0
 80089fc:	dc06      	bgt.n	8008a0c <__sflush_r+0xf8>
 80089fe:	89a3      	ldrh	r3, [r4, #12]
 8008a00:	f04f 30ff 	mov.w	r0, #4294967295
 8008a04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a08:	81a3      	strh	r3, [r4, #12]
 8008a0a:	e790      	b.n	800892e <__sflush_r+0x1a>
 8008a0c:	4407      	add	r7, r0
 8008a0e:	1a36      	subs	r6, r6, r0
 8008a10:	e7ea      	b.n	80089e8 <__sflush_r+0xd4>
 8008a12:	bf00      	nop
 8008a14:	20400001 	.word	0x20400001

08008a18 <_fflush_r>:
 8008a18:	b538      	push	{r3, r4, r5, lr}
 8008a1a:	690b      	ldr	r3, [r1, #16]
 8008a1c:	4605      	mov	r5, r0
 8008a1e:	460c      	mov	r4, r1
 8008a20:	b913      	cbnz	r3, 8008a28 <_fflush_r+0x10>
 8008a22:	2500      	movs	r5, #0
 8008a24:	4628      	mov	r0, r5
 8008a26:	bd38      	pop	{r3, r4, r5, pc}
 8008a28:	b118      	cbz	r0, 8008a32 <_fflush_r+0x1a>
 8008a2a:	6983      	ldr	r3, [r0, #24]
 8008a2c:	b90b      	cbnz	r3, 8008a32 <_fflush_r+0x1a>
 8008a2e:	f000 f887 	bl	8008b40 <__sinit>
 8008a32:	4b14      	ldr	r3, [pc, #80]	; (8008a84 <_fflush_r+0x6c>)
 8008a34:	429c      	cmp	r4, r3
 8008a36:	d11b      	bne.n	8008a70 <_fflush_r+0x58>
 8008a38:	686c      	ldr	r4, [r5, #4]
 8008a3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d0ef      	beq.n	8008a22 <_fflush_r+0xa>
 8008a42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008a44:	07d0      	lsls	r0, r2, #31
 8008a46:	d404      	bmi.n	8008a52 <_fflush_r+0x3a>
 8008a48:	0599      	lsls	r1, r3, #22
 8008a4a:	d402      	bmi.n	8008a52 <_fflush_r+0x3a>
 8008a4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a4e:	f000 fc80 	bl	8009352 <__retarget_lock_acquire_recursive>
 8008a52:	4628      	mov	r0, r5
 8008a54:	4621      	mov	r1, r4
 8008a56:	f7ff ff5d 	bl	8008914 <__sflush_r>
 8008a5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a5c:	4605      	mov	r5, r0
 8008a5e:	07da      	lsls	r2, r3, #31
 8008a60:	d4e0      	bmi.n	8008a24 <_fflush_r+0xc>
 8008a62:	89a3      	ldrh	r3, [r4, #12]
 8008a64:	059b      	lsls	r3, r3, #22
 8008a66:	d4dd      	bmi.n	8008a24 <_fflush_r+0xc>
 8008a68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a6a:	f000 fc73 	bl	8009354 <__retarget_lock_release_recursive>
 8008a6e:	e7d9      	b.n	8008a24 <_fflush_r+0xc>
 8008a70:	4b05      	ldr	r3, [pc, #20]	; (8008a88 <_fflush_r+0x70>)
 8008a72:	429c      	cmp	r4, r3
 8008a74:	d101      	bne.n	8008a7a <_fflush_r+0x62>
 8008a76:	68ac      	ldr	r4, [r5, #8]
 8008a78:	e7df      	b.n	8008a3a <_fflush_r+0x22>
 8008a7a:	4b04      	ldr	r3, [pc, #16]	; (8008a8c <_fflush_r+0x74>)
 8008a7c:	429c      	cmp	r4, r3
 8008a7e:	bf08      	it	eq
 8008a80:	68ec      	ldreq	r4, [r5, #12]
 8008a82:	e7da      	b.n	8008a3a <_fflush_r+0x22>
 8008a84:	0800c434 	.word	0x0800c434
 8008a88:	0800c454 	.word	0x0800c454
 8008a8c:	0800c414 	.word	0x0800c414

08008a90 <std>:
 8008a90:	2300      	movs	r3, #0
 8008a92:	b510      	push	{r4, lr}
 8008a94:	4604      	mov	r4, r0
 8008a96:	e9c0 3300 	strd	r3, r3, [r0]
 8008a9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008a9e:	6083      	str	r3, [r0, #8]
 8008aa0:	8181      	strh	r1, [r0, #12]
 8008aa2:	6643      	str	r3, [r0, #100]	; 0x64
 8008aa4:	81c2      	strh	r2, [r0, #14]
 8008aa6:	6183      	str	r3, [r0, #24]
 8008aa8:	4619      	mov	r1, r3
 8008aaa:	2208      	movs	r2, #8
 8008aac:	305c      	adds	r0, #92	; 0x5c
 8008aae:	f7fd fa33 	bl	8005f18 <memset>
 8008ab2:	4b05      	ldr	r3, [pc, #20]	; (8008ac8 <std+0x38>)
 8008ab4:	6224      	str	r4, [r4, #32]
 8008ab6:	6263      	str	r3, [r4, #36]	; 0x24
 8008ab8:	4b04      	ldr	r3, [pc, #16]	; (8008acc <std+0x3c>)
 8008aba:	62a3      	str	r3, [r4, #40]	; 0x28
 8008abc:	4b04      	ldr	r3, [pc, #16]	; (8008ad0 <std+0x40>)
 8008abe:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008ac0:	4b04      	ldr	r3, [pc, #16]	; (8008ad4 <std+0x44>)
 8008ac2:	6323      	str	r3, [r4, #48]	; 0x30
 8008ac4:	bd10      	pop	{r4, pc}
 8008ac6:	bf00      	nop
 8008ac8:	0800a555 	.word	0x0800a555
 8008acc:	0800a577 	.word	0x0800a577
 8008ad0:	0800a5af 	.word	0x0800a5af
 8008ad4:	0800a5d3 	.word	0x0800a5d3

08008ad8 <_cleanup_r>:
 8008ad8:	4901      	ldr	r1, [pc, #4]	; (8008ae0 <_cleanup_r+0x8>)
 8008ada:	f000 b8af 	b.w	8008c3c <_fwalk_reent>
 8008ade:	bf00      	nop
 8008ae0:	08008a19 	.word	0x08008a19

08008ae4 <__sfmoreglue>:
 8008ae4:	2268      	movs	r2, #104	; 0x68
 8008ae6:	b570      	push	{r4, r5, r6, lr}
 8008ae8:	1e4d      	subs	r5, r1, #1
 8008aea:	4355      	muls	r5, r2
 8008aec:	460e      	mov	r6, r1
 8008aee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008af2:	f001 f9f1 	bl	8009ed8 <_malloc_r>
 8008af6:	4604      	mov	r4, r0
 8008af8:	b140      	cbz	r0, 8008b0c <__sfmoreglue+0x28>
 8008afa:	2100      	movs	r1, #0
 8008afc:	e9c0 1600 	strd	r1, r6, [r0]
 8008b00:	300c      	adds	r0, #12
 8008b02:	60a0      	str	r0, [r4, #8]
 8008b04:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008b08:	f7fd fa06 	bl	8005f18 <memset>
 8008b0c:	4620      	mov	r0, r4
 8008b0e:	bd70      	pop	{r4, r5, r6, pc}

08008b10 <__sfp_lock_acquire>:
 8008b10:	4801      	ldr	r0, [pc, #4]	; (8008b18 <__sfp_lock_acquire+0x8>)
 8008b12:	f000 bc1e 	b.w	8009352 <__retarget_lock_acquire_recursive>
 8008b16:	bf00      	nop
 8008b18:	2000115d 	.word	0x2000115d

08008b1c <__sfp_lock_release>:
 8008b1c:	4801      	ldr	r0, [pc, #4]	; (8008b24 <__sfp_lock_release+0x8>)
 8008b1e:	f000 bc19 	b.w	8009354 <__retarget_lock_release_recursive>
 8008b22:	bf00      	nop
 8008b24:	2000115d 	.word	0x2000115d

08008b28 <__sinit_lock_acquire>:
 8008b28:	4801      	ldr	r0, [pc, #4]	; (8008b30 <__sinit_lock_acquire+0x8>)
 8008b2a:	f000 bc12 	b.w	8009352 <__retarget_lock_acquire_recursive>
 8008b2e:	bf00      	nop
 8008b30:	2000115e 	.word	0x2000115e

08008b34 <__sinit_lock_release>:
 8008b34:	4801      	ldr	r0, [pc, #4]	; (8008b3c <__sinit_lock_release+0x8>)
 8008b36:	f000 bc0d 	b.w	8009354 <__retarget_lock_release_recursive>
 8008b3a:	bf00      	nop
 8008b3c:	2000115e 	.word	0x2000115e

08008b40 <__sinit>:
 8008b40:	b510      	push	{r4, lr}
 8008b42:	4604      	mov	r4, r0
 8008b44:	f7ff fff0 	bl	8008b28 <__sinit_lock_acquire>
 8008b48:	69a3      	ldr	r3, [r4, #24]
 8008b4a:	b11b      	cbz	r3, 8008b54 <__sinit+0x14>
 8008b4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b50:	f7ff bff0 	b.w	8008b34 <__sinit_lock_release>
 8008b54:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008b58:	6523      	str	r3, [r4, #80]	; 0x50
 8008b5a:	4b13      	ldr	r3, [pc, #76]	; (8008ba8 <__sinit+0x68>)
 8008b5c:	4a13      	ldr	r2, [pc, #76]	; (8008bac <__sinit+0x6c>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	62a2      	str	r2, [r4, #40]	; 0x28
 8008b62:	42a3      	cmp	r3, r4
 8008b64:	bf08      	it	eq
 8008b66:	2301      	moveq	r3, #1
 8008b68:	4620      	mov	r0, r4
 8008b6a:	bf08      	it	eq
 8008b6c:	61a3      	streq	r3, [r4, #24]
 8008b6e:	f000 f81f 	bl	8008bb0 <__sfp>
 8008b72:	6060      	str	r0, [r4, #4]
 8008b74:	4620      	mov	r0, r4
 8008b76:	f000 f81b 	bl	8008bb0 <__sfp>
 8008b7a:	60a0      	str	r0, [r4, #8]
 8008b7c:	4620      	mov	r0, r4
 8008b7e:	f000 f817 	bl	8008bb0 <__sfp>
 8008b82:	2200      	movs	r2, #0
 8008b84:	2104      	movs	r1, #4
 8008b86:	60e0      	str	r0, [r4, #12]
 8008b88:	6860      	ldr	r0, [r4, #4]
 8008b8a:	f7ff ff81 	bl	8008a90 <std>
 8008b8e:	2201      	movs	r2, #1
 8008b90:	2109      	movs	r1, #9
 8008b92:	68a0      	ldr	r0, [r4, #8]
 8008b94:	f7ff ff7c 	bl	8008a90 <std>
 8008b98:	2202      	movs	r2, #2
 8008b9a:	2112      	movs	r1, #18
 8008b9c:	68e0      	ldr	r0, [r4, #12]
 8008b9e:	f7ff ff77 	bl	8008a90 <std>
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	61a3      	str	r3, [r4, #24]
 8008ba6:	e7d1      	b.n	8008b4c <__sinit+0xc>
 8008ba8:	0800c1f0 	.word	0x0800c1f0
 8008bac:	08008ad9 	.word	0x08008ad9

08008bb0 <__sfp>:
 8008bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bb2:	4607      	mov	r7, r0
 8008bb4:	f7ff ffac 	bl	8008b10 <__sfp_lock_acquire>
 8008bb8:	4b1e      	ldr	r3, [pc, #120]	; (8008c34 <__sfp+0x84>)
 8008bba:	681e      	ldr	r6, [r3, #0]
 8008bbc:	69b3      	ldr	r3, [r6, #24]
 8008bbe:	b913      	cbnz	r3, 8008bc6 <__sfp+0x16>
 8008bc0:	4630      	mov	r0, r6
 8008bc2:	f7ff ffbd 	bl	8008b40 <__sinit>
 8008bc6:	3648      	adds	r6, #72	; 0x48
 8008bc8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008bcc:	3b01      	subs	r3, #1
 8008bce:	d503      	bpl.n	8008bd8 <__sfp+0x28>
 8008bd0:	6833      	ldr	r3, [r6, #0]
 8008bd2:	b30b      	cbz	r3, 8008c18 <__sfp+0x68>
 8008bd4:	6836      	ldr	r6, [r6, #0]
 8008bd6:	e7f7      	b.n	8008bc8 <__sfp+0x18>
 8008bd8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008bdc:	b9d5      	cbnz	r5, 8008c14 <__sfp+0x64>
 8008bde:	4b16      	ldr	r3, [pc, #88]	; (8008c38 <__sfp+0x88>)
 8008be0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008be4:	60e3      	str	r3, [r4, #12]
 8008be6:	6665      	str	r5, [r4, #100]	; 0x64
 8008be8:	f000 fbb2 	bl	8009350 <__retarget_lock_init_recursive>
 8008bec:	f7ff ff96 	bl	8008b1c <__sfp_lock_release>
 8008bf0:	2208      	movs	r2, #8
 8008bf2:	4629      	mov	r1, r5
 8008bf4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008bf8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008bfc:	6025      	str	r5, [r4, #0]
 8008bfe:	61a5      	str	r5, [r4, #24]
 8008c00:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008c04:	f7fd f988 	bl	8005f18 <memset>
 8008c08:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008c0c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008c10:	4620      	mov	r0, r4
 8008c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c14:	3468      	adds	r4, #104	; 0x68
 8008c16:	e7d9      	b.n	8008bcc <__sfp+0x1c>
 8008c18:	2104      	movs	r1, #4
 8008c1a:	4638      	mov	r0, r7
 8008c1c:	f7ff ff62 	bl	8008ae4 <__sfmoreglue>
 8008c20:	4604      	mov	r4, r0
 8008c22:	6030      	str	r0, [r6, #0]
 8008c24:	2800      	cmp	r0, #0
 8008c26:	d1d5      	bne.n	8008bd4 <__sfp+0x24>
 8008c28:	f7ff ff78 	bl	8008b1c <__sfp_lock_release>
 8008c2c:	230c      	movs	r3, #12
 8008c2e:	603b      	str	r3, [r7, #0]
 8008c30:	e7ee      	b.n	8008c10 <__sfp+0x60>
 8008c32:	bf00      	nop
 8008c34:	0800c1f0 	.word	0x0800c1f0
 8008c38:	ffff0001 	.word	0xffff0001

08008c3c <_fwalk_reent>:
 8008c3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c40:	4606      	mov	r6, r0
 8008c42:	4688      	mov	r8, r1
 8008c44:	2700      	movs	r7, #0
 8008c46:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008c4a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008c4e:	f1b9 0901 	subs.w	r9, r9, #1
 8008c52:	d505      	bpl.n	8008c60 <_fwalk_reent+0x24>
 8008c54:	6824      	ldr	r4, [r4, #0]
 8008c56:	2c00      	cmp	r4, #0
 8008c58:	d1f7      	bne.n	8008c4a <_fwalk_reent+0xe>
 8008c5a:	4638      	mov	r0, r7
 8008c5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c60:	89ab      	ldrh	r3, [r5, #12]
 8008c62:	2b01      	cmp	r3, #1
 8008c64:	d907      	bls.n	8008c76 <_fwalk_reent+0x3a>
 8008c66:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008c6a:	3301      	adds	r3, #1
 8008c6c:	d003      	beq.n	8008c76 <_fwalk_reent+0x3a>
 8008c6e:	4629      	mov	r1, r5
 8008c70:	4630      	mov	r0, r6
 8008c72:	47c0      	blx	r8
 8008c74:	4307      	orrs	r7, r0
 8008c76:	3568      	adds	r5, #104	; 0x68
 8008c78:	e7e9      	b.n	8008c4e <_fwalk_reent+0x12>

08008c7a <rshift>:
 8008c7a:	6903      	ldr	r3, [r0, #16]
 8008c7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008c80:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008c84:	f100 0414 	add.w	r4, r0, #20
 8008c88:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008c8c:	dd46      	ble.n	8008d1c <rshift+0xa2>
 8008c8e:	f011 011f 	ands.w	r1, r1, #31
 8008c92:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008c96:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008c9a:	d10c      	bne.n	8008cb6 <rshift+0x3c>
 8008c9c:	4629      	mov	r1, r5
 8008c9e:	f100 0710 	add.w	r7, r0, #16
 8008ca2:	42b1      	cmp	r1, r6
 8008ca4:	d335      	bcc.n	8008d12 <rshift+0x98>
 8008ca6:	1a9b      	subs	r3, r3, r2
 8008ca8:	009b      	lsls	r3, r3, #2
 8008caa:	1eea      	subs	r2, r5, #3
 8008cac:	4296      	cmp	r6, r2
 8008cae:	bf38      	it	cc
 8008cb0:	2300      	movcc	r3, #0
 8008cb2:	4423      	add	r3, r4
 8008cb4:	e015      	b.n	8008ce2 <rshift+0x68>
 8008cb6:	46a1      	mov	r9, r4
 8008cb8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008cbc:	f1c1 0820 	rsb	r8, r1, #32
 8008cc0:	40cf      	lsrs	r7, r1
 8008cc2:	f105 0e04 	add.w	lr, r5, #4
 8008cc6:	4576      	cmp	r6, lr
 8008cc8:	46f4      	mov	ip, lr
 8008cca:	d816      	bhi.n	8008cfa <rshift+0x80>
 8008ccc:	1a9a      	subs	r2, r3, r2
 8008cce:	0092      	lsls	r2, r2, #2
 8008cd0:	3a04      	subs	r2, #4
 8008cd2:	3501      	adds	r5, #1
 8008cd4:	42ae      	cmp	r6, r5
 8008cd6:	bf38      	it	cc
 8008cd8:	2200      	movcc	r2, #0
 8008cda:	18a3      	adds	r3, r4, r2
 8008cdc:	50a7      	str	r7, [r4, r2]
 8008cde:	b107      	cbz	r7, 8008ce2 <rshift+0x68>
 8008ce0:	3304      	adds	r3, #4
 8008ce2:	42a3      	cmp	r3, r4
 8008ce4:	eba3 0204 	sub.w	r2, r3, r4
 8008ce8:	bf08      	it	eq
 8008cea:	2300      	moveq	r3, #0
 8008cec:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008cf0:	6102      	str	r2, [r0, #16]
 8008cf2:	bf08      	it	eq
 8008cf4:	6143      	streq	r3, [r0, #20]
 8008cf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008cfa:	f8dc c000 	ldr.w	ip, [ip]
 8008cfe:	fa0c fc08 	lsl.w	ip, ip, r8
 8008d02:	ea4c 0707 	orr.w	r7, ip, r7
 8008d06:	f849 7b04 	str.w	r7, [r9], #4
 8008d0a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008d0e:	40cf      	lsrs	r7, r1
 8008d10:	e7d9      	b.n	8008cc6 <rshift+0x4c>
 8008d12:	f851 cb04 	ldr.w	ip, [r1], #4
 8008d16:	f847 cf04 	str.w	ip, [r7, #4]!
 8008d1a:	e7c2      	b.n	8008ca2 <rshift+0x28>
 8008d1c:	4623      	mov	r3, r4
 8008d1e:	e7e0      	b.n	8008ce2 <rshift+0x68>

08008d20 <__hexdig_fun>:
 8008d20:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008d24:	2b09      	cmp	r3, #9
 8008d26:	d802      	bhi.n	8008d2e <__hexdig_fun+0xe>
 8008d28:	3820      	subs	r0, #32
 8008d2a:	b2c0      	uxtb	r0, r0
 8008d2c:	4770      	bx	lr
 8008d2e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008d32:	2b05      	cmp	r3, #5
 8008d34:	d801      	bhi.n	8008d3a <__hexdig_fun+0x1a>
 8008d36:	3847      	subs	r0, #71	; 0x47
 8008d38:	e7f7      	b.n	8008d2a <__hexdig_fun+0xa>
 8008d3a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008d3e:	2b05      	cmp	r3, #5
 8008d40:	d801      	bhi.n	8008d46 <__hexdig_fun+0x26>
 8008d42:	3827      	subs	r0, #39	; 0x27
 8008d44:	e7f1      	b.n	8008d2a <__hexdig_fun+0xa>
 8008d46:	2000      	movs	r0, #0
 8008d48:	4770      	bx	lr
	...

08008d4c <__gethex>:
 8008d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d50:	b08b      	sub	sp, #44	; 0x2c
 8008d52:	9305      	str	r3, [sp, #20]
 8008d54:	4bb2      	ldr	r3, [pc, #712]	; (8009020 <__gethex+0x2d4>)
 8008d56:	9002      	str	r0, [sp, #8]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	468b      	mov	fp, r1
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	4690      	mov	r8, r2
 8008d60:	9303      	str	r3, [sp, #12]
 8008d62:	f7f7 f9f5 	bl	8000150 <strlen>
 8008d66:	4682      	mov	sl, r0
 8008d68:	9b03      	ldr	r3, [sp, #12]
 8008d6a:	f8db 2000 	ldr.w	r2, [fp]
 8008d6e:	4403      	add	r3, r0
 8008d70:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008d74:	9306      	str	r3, [sp, #24]
 8008d76:	1c93      	adds	r3, r2, #2
 8008d78:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008d7c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008d80:	32fe      	adds	r2, #254	; 0xfe
 8008d82:	18d1      	adds	r1, r2, r3
 8008d84:	461f      	mov	r7, r3
 8008d86:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008d8a:	9101      	str	r1, [sp, #4]
 8008d8c:	2830      	cmp	r0, #48	; 0x30
 8008d8e:	d0f8      	beq.n	8008d82 <__gethex+0x36>
 8008d90:	f7ff ffc6 	bl	8008d20 <__hexdig_fun>
 8008d94:	4604      	mov	r4, r0
 8008d96:	2800      	cmp	r0, #0
 8008d98:	d13a      	bne.n	8008e10 <__gethex+0xc4>
 8008d9a:	4652      	mov	r2, sl
 8008d9c:	4638      	mov	r0, r7
 8008d9e:	9903      	ldr	r1, [sp, #12]
 8008da0:	f001 fc1b 	bl	800a5da <strncmp>
 8008da4:	4605      	mov	r5, r0
 8008da6:	2800      	cmp	r0, #0
 8008da8:	d166      	bne.n	8008e78 <__gethex+0x12c>
 8008daa:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008dae:	eb07 060a 	add.w	r6, r7, sl
 8008db2:	f7ff ffb5 	bl	8008d20 <__hexdig_fun>
 8008db6:	2800      	cmp	r0, #0
 8008db8:	d060      	beq.n	8008e7c <__gethex+0x130>
 8008dba:	4633      	mov	r3, r6
 8008dbc:	7818      	ldrb	r0, [r3, #0]
 8008dbe:	461f      	mov	r7, r3
 8008dc0:	2830      	cmp	r0, #48	; 0x30
 8008dc2:	f103 0301 	add.w	r3, r3, #1
 8008dc6:	d0f9      	beq.n	8008dbc <__gethex+0x70>
 8008dc8:	f7ff ffaa 	bl	8008d20 <__hexdig_fun>
 8008dcc:	2301      	movs	r3, #1
 8008dce:	fab0 f480 	clz	r4, r0
 8008dd2:	4635      	mov	r5, r6
 8008dd4:	0964      	lsrs	r4, r4, #5
 8008dd6:	9301      	str	r3, [sp, #4]
 8008dd8:	463a      	mov	r2, r7
 8008dda:	4616      	mov	r6, r2
 8008ddc:	7830      	ldrb	r0, [r6, #0]
 8008dde:	3201      	adds	r2, #1
 8008de0:	f7ff ff9e 	bl	8008d20 <__hexdig_fun>
 8008de4:	2800      	cmp	r0, #0
 8008de6:	d1f8      	bne.n	8008dda <__gethex+0x8e>
 8008de8:	4652      	mov	r2, sl
 8008dea:	4630      	mov	r0, r6
 8008dec:	9903      	ldr	r1, [sp, #12]
 8008dee:	f001 fbf4 	bl	800a5da <strncmp>
 8008df2:	b980      	cbnz	r0, 8008e16 <__gethex+0xca>
 8008df4:	b94d      	cbnz	r5, 8008e0a <__gethex+0xbe>
 8008df6:	eb06 050a 	add.w	r5, r6, sl
 8008dfa:	462a      	mov	r2, r5
 8008dfc:	4616      	mov	r6, r2
 8008dfe:	7830      	ldrb	r0, [r6, #0]
 8008e00:	3201      	adds	r2, #1
 8008e02:	f7ff ff8d 	bl	8008d20 <__hexdig_fun>
 8008e06:	2800      	cmp	r0, #0
 8008e08:	d1f8      	bne.n	8008dfc <__gethex+0xb0>
 8008e0a:	1bad      	subs	r5, r5, r6
 8008e0c:	00ad      	lsls	r5, r5, #2
 8008e0e:	e004      	b.n	8008e1a <__gethex+0xce>
 8008e10:	2400      	movs	r4, #0
 8008e12:	4625      	mov	r5, r4
 8008e14:	e7e0      	b.n	8008dd8 <__gethex+0x8c>
 8008e16:	2d00      	cmp	r5, #0
 8008e18:	d1f7      	bne.n	8008e0a <__gethex+0xbe>
 8008e1a:	7833      	ldrb	r3, [r6, #0]
 8008e1c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008e20:	2b50      	cmp	r3, #80	; 0x50
 8008e22:	d139      	bne.n	8008e98 <__gethex+0x14c>
 8008e24:	7873      	ldrb	r3, [r6, #1]
 8008e26:	2b2b      	cmp	r3, #43	; 0x2b
 8008e28:	d02a      	beq.n	8008e80 <__gethex+0x134>
 8008e2a:	2b2d      	cmp	r3, #45	; 0x2d
 8008e2c:	d02c      	beq.n	8008e88 <__gethex+0x13c>
 8008e2e:	f04f 0900 	mov.w	r9, #0
 8008e32:	1c71      	adds	r1, r6, #1
 8008e34:	7808      	ldrb	r0, [r1, #0]
 8008e36:	f7ff ff73 	bl	8008d20 <__hexdig_fun>
 8008e3a:	1e43      	subs	r3, r0, #1
 8008e3c:	b2db      	uxtb	r3, r3
 8008e3e:	2b18      	cmp	r3, #24
 8008e40:	d82a      	bhi.n	8008e98 <__gethex+0x14c>
 8008e42:	f1a0 0210 	sub.w	r2, r0, #16
 8008e46:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008e4a:	f7ff ff69 	bl	8008d20 <__hexdig_fun>
 8008e4e:	1e43      	subs	r3, r0, #1
 8008e50:	b2db      	uxtb	r3, r3
 8008e52:	2b18      	cmp	r3, #24
 8008e54:	d91b      	bls.n	8008e8e <__gethex+0x142>
 8008e56:	f1b9 0f00 	cmp.w	r9, #0
 8008e5a:	d000      	beq.n	8008e5e <__gethex+0x112>
 8008e5c:	4252      	negs	r2, r2
 8008e5e:	4415      	add	r5, r2
 8008e60:	f8cb 1000 	str.w	r1, [fp]
 8008e64:	b1d4      	cbz	r4, 8008e9c <__gethex+0x150>
 8008e66:	9b01      	ldr	r3, [sp, #4]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	bf14      	ite	ne
 8008e6c:	2700      	movne	r7, #0
 8008e6e:	2706      	moveq	r7, #6
 8008e70:	4638      	mov	r0, r7
 8008e72:	b00b      	add	sp, #44	; 0x2c
 8008e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e78:	463e      	mov	r6, r7
 8008e7a:	4625      	mov	r5, r4
 8008e7c:	2401      	movs	r4, #1
 8008e7e:	e7cc      	b.n	8008e1a <__gethex+0xce>
 8008e80:	f04f 0900 	mov.w	r9, #0
 8008e84:	1cb1      	adds	r1, r6, #2
 8008e86:	e7d5      	b.n	8008e34 <__gethex+0xe8>
 8008e88:	f04f 0901 	mov.w	r9, #1
 8008e8c:	e7fa      	b.n	8008e84 <__gethex+0x138>
 8008e8e:	230a      	movs	r3, #10
 8008e90:	fb03 0202 	mla	r2, r3, r2, r0
 8008e94:	3a10      	subs	r2, #16
 8008e96:	e7d6      	b.n	8008e46 <__gethex+0xfa>
 8008e98:	4631      	mov	r1, r6
 8008e9a:	e7e1      	b.n	8008e60 <__gethex+0x114>
 8008e9c:	4621      	mov	r1, r4
 8008e9e:	1bf3      	subs	r3, r6, r7
 8008ea0:	3b01      	subs	r3, #1
 8008ea2:	2b07      	cmp	r3, #7
 8008ea4:	dc0a      	bgt.n	8008ebc <__gethex+0x170>
 8008ea6:	9802      	ldr	r0, [sp, #8]
 8008ea8:	f000 fae2 	bl	8009470 <_Balloc>
 8008eac:	4604      	mov	r4, r0
 8008eae:	b940      	cbnz	r0, 8008ec2 <__gethex+0x176>
 8008eb0:	4602      	mov	r2, r0
 8008eb2:	21de      	movs	r1, #222	; 0xde
 8008eb4:	4b5b      	ldr	r3, [pc, #364]	; (8009024 <__gethex+0x2d8>)
 8008eb6:	485c      	ldr	r0, [pc, #368]	; (8009028 <__gethex+0x2dc>)
 8008eb8:	f001 fbc2 	bl	800a640 <__assert_func>
 8008ebc:	3101      	adds	r1, #1
 8008ebe:	105b      	asrs	r3, r3, #1
 8008ec0:	e7ef      	b.n	8008ea2 <__gethex+0x156>
 8008ec2:	f04f 0b00 	mov.w	fp, #0
 8008ec6:	f100 0914 	add.w	r9, r0, #20
 8008eca:	f1ca 0301 	rsb	r3, sl, #1
 8008ece:	f8cd 9010 	str.w	r9, [sp, #16]
 8008ed2:	f8cd b004 	str.w	fp, [sp, #4]
 8008ed6:	9308      	str	r3, [sp, #32]
 8008ed8:	42b7      	cmp	r7, r6
 8008eda:	d33f      	bcc.n	8008f5c <__gethex+0x210>
 8008edc:	9f04      	ldr	r7, [sp, #16]
 8008ede:	9b01      	ldr	r3, [sp, #4]
 8008ee0:	f847 3b04 	str.w	r3, [r7], #4
 8008ee4:	eba7 0709 	sub.w	r7, r7, r9
 8008ee8:	10bf      	asrs	r7, r7, #2
 8008eea:	6127      	str	r7, [r4, #16]
 8008eec:	4618      	mov	r0, r3
 8008eee:	f000 fbb1 	bl	8009654 <__hi0bits>
 8008ef2:	017f      	lsls	r7, r7, #5
 8008ef4:	f8d8 6000 	ldr.w	r6, [r8]
 8008ef8:	1a3f      	subs	r7, r7, r0
 8008efa:	42b7      	cmp	r7, r6
 8008efc:	dd62      	ble.n	8008fc4 <__gethex+0x278>
 8008efe:	1bbf      	subs	r7, r7, r6
 8008f00:	4639      	mov	r1, r7
 8008f02:	4620      	mov	r0, r4
 8008f04:	f000 ff4b 	bl	8009d9e <__any_on>
 8008f08:	4682      	mov	sl, r0
 8008f0a:	b1a8      	cbz	r0, 8008f38 <__gethex+0x1ec>
 8008f0c:	f04f 0a01 	mov.w	sl, #1
 8008f10:	1e7b      	subs	r3, r7, #1
 8008f12:	1159      	asrs	r1, r3, #5
 8008f14:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008f18:	f003 021f 	and.w	r2, r3, #31
 8008f1c:	fa0a f202 	lsl.w	r2, sl, r2
 8008f20:	420a      	tst	r2, r1
 8008f22:	d009      	beq.n	8008f38 <__gethex+0x1ec>
 8008f24:	4553      	cmp	r3, sl
 8008f26:	dd05      	ble.n	8008f34 <__gethex+0x1e8>
 8008f28:	4620      	mov	r0, r4
 8008f2a:	1eb9      	subs	r1, r7, #2
 8008f2c:	f000 ff37 	bl	8009d9e <__any_on>
 8008f30:	2800      	cmp	r0, #0
 8008f32:	d144      	bne.n	8008fbe <__gethex+0x272>
 8008f34:	f04f 0a02 	mov.w	sl, #2
 8008f38:	4639      	mov	r1, r7
 8008f3a:	4620      	mov	r0, r4
 8008f3c:	f7ff fe9d 	bl	8008c7a <rshift>
 8008f40:	443d      	add	r5, r7
 8008f42:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008f46:	42ab      	cmp	r3, r5
 8008f48:	da4a      	bge.n	8008fe0 <__gethex+0x294>
 8008f4a:	4621      	mov	r1, r4
 8008f4c:	9802      	ldr	r0, [sp, #8]
 8008f4e:	f000 facf 	bl	80094f0 <_Bfree>
 8008f52:	2300      	movs	r3, #0
 8008f54:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008f56:	27a3      	movs	r7, #163	; 0xa3
 8008f58:	6013      	str	r3, [r2, #0]
 8008f5a:	e789      	b.n	8008e70 <__gethex+0x124>
 8008f5c:	1e73      	subs	r3, r6, #1
 8008f5e:	9a06      	ldr	r2, [sp, #24]
 8008f60:	9307      	str	r3, [sp, #28]
 8008f62:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d019      	beq.n	8008f9e <__gethex+0x252>
 8008f6a:	f1bb 0f20 	cmp.w	fp, #32
 8008f6e:	d107      	bne.n	8008f80 <__gethex+0x234>
 8008f70:	9b04      	ldr	r3, [sp, #16]
 8008f72:	9a01      	ldr	r2, [sp, #4]
 8008f74:	f843 2b04 	str.w	r2, [r3], #4
 8008f78:	9304      	str	r3, [sp, #16]
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	469b      	mov	fp, r3
 8008f7e:	9301      	str	r3, [sp, #4]
 8008f80:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008f84:	f7ff fecc 	bl	8008d20 <__hexdig_fun>
 8008f88:	9b01      	ldr	r3, [sp, #4]
 8008f8a:	f000 000f 	and.w	r0, r0, #15
 8008f8e:	fa00 f00b 	lsl.w	r0, r0, fp
 8008f92:	4303      	orrs	r3, r0
 8008f94:	9301      	str	r3, [sp, #4]
 8008f96:	f10b 0b04 	add.w	fp, fp, #4
 8008f9a:	9b07      	ldr	r3, [sp, #28]
 8008f9c:	e00d      	b.n	8008fba <__gethex+0x26e>
 8008f9e:	9a08      	ldr	r2, [sp, #32]
 8008fa0:	1e73      	subs	r3, r6, #1
 8008fa2:	4413      	add	r3, r2
 8008fa4:	42bb      	cmp	r3, r7
 8008fa6:	d3e0      	bcc.n	8008f6a <__gethex+0x21e>
 8008fa8:	4618      	mov	r0, r3
 8008faa:	4652      	mov	r2, sl
 8008fac:	9903      	ldr	r1, [sp, #12]
 8008fae:	9309      	str	r3, [sp, #36]	; 0x24
 8008fb0:	f001 fb13 	bl	800a5da <strncmp>
 8008fb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fb6:	2800      	cmp	r0, #0
 8008fb8:	d1d7      	bne.n	8008f6a <__gethex+0x21e>
 8008fba:	461e      	mov	r6, r3
 8008fbc:	e78c      	b.n	8008ed8 <__gethex+0x18c>
 8008fbe:	f04f 0a03 	mov.w	sl, #3
 8008fc2:	e7b9      	b.n	8008f38 <__gethex+0x1ec>
 8008fc4:	da09      	bge.n	8008fda <__gethex+0x28e>
 8008fc6:	1bf7      	subs	r7, r6, r7
 8008fc8:	4621      	mov	r1, r4
 8008fca:	463a      	mov	r2, r7
 8008fcc:	9802      	ldr	r0, [sp, #8]
 8008fce:	f000 fca7 	bl	8009920 <__lshift>
 8008fd2:	4604      	mov	r4, r0
 8008fd4:	1bed      	subs	r5, r5, r7
 8008fd6:	f100 0914 	add.w	r9, r0, #20
 8008fda:	f04f 0a00 	mov.w	sl, #0
 8008fde:	e7b0      	b.n	8008f42 <__gethex+0x1f6>
 8008fe0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008fe4:	42a8      	cmp	r0, r5
 8008fe6:	dd72      	ble.n	80090ce <__gethex+0x382>
 8008fe8:	1b45      	subs	r5, r0, r5
 8008fea:	42ae      	cmp	r6, r5
 8008fec:	dc35      	bgt.n	800905a <__gethex+0x30e>
 8008fee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008ff2:	2b02      	cmp	r3, #2
 8008ff4:	d029      	beq.n	800904a <__gethex+0x2fe>
 8008ff6:	2b03      	cmp	r3, #3
 8008ff8:	d02b      	beq.n	8009052 <__gethex+0x306>
 8008ffa:	2b01      	cmp	r3, #1
 8008ffc:	d11c      	bne.n	8009038 <__gethex+0x2ec>
 8008ffe:	42ae      	cmp	r6, r5
 8009000:	d11a      	bne.n	8009038 <__gethex+0x2ec>
 8009002:	2e01      	cmp	r6, #1
 8009004:	d112      	bne.n	800902c <__gethex+0x2e0>
 8009006:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800900a:	9a05      	ldr	r2, [sp, #20]
 800900c:	2762      	movs	r7, #98	; 0x62
 800900e:	6013      	str	r3, [r2, #0]
 8009010:	2301      	movs	r3, #1
 8009012:	6123      	str	r3, [r4, #16]
 8009014:	f8c9 3000 	str.w	r3, [r9]
 8009018:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800901a:	601c      	str	r4, [r3, #0]
 800901c:	e728      	b.n	8008e70 <__gethex+0x124>
 800901e:	bf00      	nop
 8009020:	0800c4dc 	.word	0x0800c4dc
 8009024:	0800c400 	.word	0x0800c400
 8009028:	0800c474 	.word	0x0800c474
 800902c:	4620      	mov	r0, r4
 800902e:	1e71      	subs	r1, r6, #1
 8009030:	f000 feb5 	bl	8009d9e <__any_on>
 8009034:	2800      	cmp	r0, #0
 8009036:	d1e6      	bne.n	8009006 <__gethex+0x2ba>
 8009038:	4621      	mov	r1, r4
 800903a:	9802      	ldr	r0, [sp, #8]
 800903c:	f000 fa58 	bl	80094f0 <_Bfree>
 8009040:	2300      	movs	r3, #0
 8009042:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009044:	2750      	movs	r7, #80	; 0x50
 8009046:	6013      	str	r3, [r2, #0]
 8009048:	e712      	b.n	8008e70 <__gethex+0x124>
 800904a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800904c:	2b00      	cmp	r3, #0
 800904e:	d1f3      	bne.n	8009038 <__gethex+0x2ec>
 8009050:	e7d9      	b.n	8009006 <__gethex+0x2ba>
 8009052:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009054:	2b00      	cmp	r3, #0
 8009056:	d1d6      	bne.n	8009006 <__gethex+0x2ba>
 8009058:	e7ee      	b.n	8009038 <__gethex+0x2ec>
 800905a:	1e6f      	subs	r7, r5, #1
 800905c:	f1ba 0f00 	cmp.w	sl, #0
 8009060:	d132      	bne.n	80090c8 <__gethex+0x37c>
 8009062:	b127      	cbz	r7, 800906e <__gethex+0x322>
 8009064:	4639      	mov	r1, r7
 8009066:	4620      	mov	r0, r4
 8009068:	f000 fe99 	bl	8009d9e <__any_on>
 800906c:	4682      	mov	sl, r0
 800906e:	2101      	movs	r1, #1
 8009070:	117b      	asrs	r3, r7, #5
 8009072:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009076:	f007 071f 	and.w	r7, r7, #31
 800907a:	fa01 f707 	lsl.w	r7, r1, r7
 800907e:	421f      	tst	r7, r3
 8009080:	f04f 0702 	mov.w	r7, #2
 8009084:	4629      	mov	r1, r5
 8009086:	4620      	mov	r0, r4
 8009088:	bf18      	it	ne
 800908a:	f04a 0a02 	orrne.w	sl, sl, #2
 800908e:	1b76      	subs	r6, r6, r5
 8009090:	f7ff fdf3 	bl	8008c7a <rshift>
 8009094:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009098:	f1ba 0f00 	cmp.w	sl, #0
 800909c:	d048      	beq.n	8009130 <__gethex+0x3e4>
 800909e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80090a2:	2b02      	cmp	r3, #2
 80090a4:	d015      	beq.n	80090d2 <__gethex+0x386>
 80090a6:	2b03      	cmp	r3, #3
 80090a8:	d017      	beq.n	80090da <__gethex+0x38e>
 80090aa:	2b01      	cmp	r3, #1
 80090ac:	d109      	bne.n	80090c2 <__gethex+0x376>
 80090ae:	f01a 0f02 	tst.w	sl, #2
 80090b2:	d006      	beq.n	80090c2 <__gethex+0x376>
 80090b4:	f8d9 0000 	ldr.w	r0, [r9]
 80090b8:	ea4a 0a00 	orr.w	sl, sl, r0
 80090bc:	f01a 0f01 	tst.w	sl, #1
 80090c0:	d10e      	bne.n	80090e0 <__gethex+0x394>
 80090c2:	f047 0710 	orr.w	r7, r7, #16
 80090c6:	e033      	b.n	8009130 <__gethex+0x3e4>
 80090c8:	f04f 0a01 	mov.w	sl, #1
 80090cc:	e7cf      	b.n	800906e <__gethex+0x322>
 80090ce:	2701      	movs	r7, #1
 80090d0:	e7e2      	b.n	8009098 <__gethex+0x34c>
 80090d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80090d4:	f1c3 0301 	rsb	r3, r3, #1
 80090d8:	9315      	str	r3, [sp, #84]	; 0x54
 80090da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d0f0      	beq.n	80090c2 <__gethex+0x376>
 80090e0:	f04f 0c00 	mov.w	ip, #0
 80090e4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80090e8:	f104 0314 	add.w	r3, r4, #20
 80090ec:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80090f0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80090f4:	4618      	mov	r0, r3
 80090f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80090fa:	f1b2 3fff 	cmp.w	r2, #4294967295
 80090fe:	d01c      	beq.n	800913a <__gethex+0x3ee>
 8009100:	3201      	adds	r2, #1
 8009102:	6002      	str	r2, [r0, #0]
 8009104:	2f02      	cmp	r7, #2
 8009106:	f104 0314 	add.w	r3, r4, #20
 800910a:	d13d      	bne.n	8009188 <__gethex+0x43c>
 800910c:	f8d8 2000 	ldr.w	r2, [r8]
 8009110:	3a01      	subs	r2, #1
 8009112:	42b2      	cmp	r2, r6
 8009114:	d10a      	bne.n	800912c <__gethex+0x3e0>
 8009116:	2201      	movs	r2, #1
 8009118:	1171      	asrs	r1, r6, #5
 800911a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800911e:	f006 061f 	and.w	r6, r6, #31
 8009122:	fa02 f606 	lsl.w	r6, r2, r6
 8009126:	421e      	tst	r6, r3
 8009128:	bf18      	it	ne
 800912a:	4617      	movne	r7, r2
 800912c:	f047 0720 	orr.w	r7, r7, #32
 8009130:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009132:	601c      	str	r4, [r3, #0]
 8009134:	9b05      	ldr	r3, [sp, #20]
 8009136:	601d      	str	r5, [r3, #0]
 8009138:	e69a      	b.n	8008e70 <__gethex+0x124>
 800913a:	4299      	cmp	r1, r3
 800913c:	f843 cc04 	str.w	ip, [r3, #-4]
 8009140:	d8d8      	bhi.n	80090f4 <__gethex+0x3a8>
 8009142:	68a3      	ldr	r3, [r4, #8]
 8009144:	459b      	cmp	fp, r3
 8009146:	db17      	blt.n	8009178 <__gethex+0x42c>
 8009148:	6861      	ldr	r1, [r4, #4]
 800914a:	9802      	ldr	r0, [sp, #8]
 800914c:	3101      	adds	r1, #1
 800914e:	f000 f98f 	bl	8009470 <_Balloc>
 8009152:	4681      	mov	r9, r0
 8009154:	b918      	cbnz	r0, 800915e <__gethex+0x412>
 8009156:	4602      	mov	r2, r0
 8009158:	2184      	movs	r1, #132	; 0x84
 800915a:	4b19      	ldr	r3, [pc, #100]	; (80091c0 <__gethex+0x474>)
 800915c:	e6ab      	b.n	8008eb6 <__gethex+0x16a>
 800915e:	6922      	ldr	r2, [r4, #16]
 8009160:	f104 010c 	add.w	r1, r4, #12
 8009164:	3202      	adds	r2, #2
 8009166:	0092      	lsls	r2, r2, #2
 8009168:	300c      	adds	r0, #12
 800916a:	f7fc fec7 	bl	8005efc <memcpy>
 800916e:	4621      	mov	r1, r4
 8009170:	9802      	ldr	r0, [sp, #8]
 8009172:	f000 f9bd 	bl	80094f0 <_Bfree>
 8009176:	464c      	mov	r4, r9
 8009178:	6923      	ldr	r3, [r4, #16]
 800917a:	1c5a      	adds	r2, r3, #1
 800917c:	6122      	str	r2, [r4, #16]
 800917e:	2201      	movs	r2, #1
 8009180:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009184:	615a      	str	r2, [r3, #20]
 8009186:	e7bd      	b.n	8009104 <__gethex+0x3b8>
 8009188:	6922      	ldr	r2, [r4, #16]
 800918a:	455a      	cmp	r2, fp
 800918c:	dd0b      	ble.n	80091a6 <__gethex+0x45a>
 800918e:	2101      	movs	r1, #1
 8009190:	4620      	mov	r0, r4
 8009192:	f7ff fd72 	bl	8008c7a <rshift>
 8009196:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800919a:	3501      	adds	r5, #1
 800919c:	42ab      	cmp	r3, r5
 800919e:	f6ff aed4 	blt.w	8008f4a <__gethex+0x1fe>
 80091a2:	2701      	movs	r7, #1
 80091a4:	e7c2      	b.n	800912c <__gethex+0x3e0>
 80091a6:	f016 061f 	ands.w	r6, r6, #31
 80091aa:	d0fa      	beq.n	80091a2 <__gethex+0x456>
 80091ac:	4453      	add	r3, sl
 80091ae:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80091b2:	f000 fa4f 	bl	8009654 <__hi0bits>
 80091b6:	f1c6 0620 	rsb	r6, r6, #32
 80091ba:	42b0      	cmp	r0, r6
 80091bc:	dbe7      	blt.n	800918e <__gethex+0x442>
 80091be:	e7f0      	b.n	80091a2 <__gethex+0x456>
 80091c0:	0800c400 	.word	0x0800c400

080091c4 <L_shift>:
 80091c4:	f1c2 0208 	rsb	r2, r2, #8
 80091c8:	0092      	lsls	r2, r2, #2
 80091ca:	b570      	push	{r4, r5, r6, lr}
 80091cc:	f1c2 0620 	rsb	r6, r2, #32
 80091d0:	6843      	ldr	r3, [r0, #4]
 80091d2:	6804      	ldr	r4, [r0, #0]
 80091d4:	fa03 f506 	lsl.w	r5, r3, r6
 80091d8:	432c      	orrs	r4, r5
 80091da:	40d3      	lsrs	r3, r2
 80091dc:	6004      	str	r4, [r0, #0]
 80091de:	f840 3f04 	str.w	r3, [r0, #4]!
 80091e2:	4288      	cmp	r0, r1
 80091e4:	d3f4      	bcc.n	80091d0 <L_shift+0xc>
 80091e6:	bd70      	pop	{r4, r5, r6, pc}

080091e8 <__match>:
 80091e8:	b530      	push	{r4, r5, lr}
 80091ea:	6803      	ldr	r3, [r0, #0]
 80091ec:	3301      	adds	r3, #1
 80091ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091f2:	b914      	cbnz	r4, 80091fa <__match+0x12>
 80091f4:	6003      	str	r3, [r0, #0]
 80091f6:	2001      	movs	r0, #1
 80091f8:	bd30      	pop	{r4, r5, pc}
 80091fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80091fe:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009202:	2d19      	cmp	r5, #25
 8009204:	bf98      	it	ls
 8009206:	3220      	addls	r2, #32
 8009208:	42a2      	cmp	r2, r4
 800920a:	d0f0      	beq.n	80091ee <__match+0x6>
 800920c:	2000      	movs	r0, #0
 800920e:	e7f3      	b.n	80091f8 <__match+0x10>

08009210 <__hexnan>:
 8009210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009214:	2500      	movs	r5, #0
 8009216:	680b      	ldr	r3, [r1, #0]
 8009218:	4682      	mov	sl, r0
 800921a:	115e      	asrs	r6, r3, #5
 800921c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009220:	f013 031f 	ands.w	r3, r3, #31
 8009224:	bf18      	it	ne
 8009226:	3604      	addne	r6, #4
 8009228:	1f37      	subs	r7, r6, #4
 800922a:	46b9      	mov	r9, r7
 800922c:	463c      	mov	r4, r7
 800922e:	46ab      	mov	fp, r5
 8009230:	b087      	sub	sp, #28
 8009232:	4690      	mov	r8, r2
 8009234:	6802      	ldr	r2, [r0, #0]
 8009236:	9301      	str	r3, [sp, #4]
 8009238:	f846 5c04 	str.w	r5, [r6, #-4]
 800923c:	9502      	str	r5, [sp, #8]
 800923e:	7851      	ldrb	r1, [r2, #1]
 8009240:	1c53      	adds	r3, r2, #1
 8009242:	9303      	str	r3, [sp, #12]
 8009244:	b341      	cbz	r1, 8009298 <__hexnan+0x88>
 8009246:	4608      	mov	r0, r1
 8009248:	9205      	str	r2, [sp, #20]
 800924a:	9104      	str	r1, [sp, #16]
 800924c:	f7ff fd68 	bl	8008d20 <__hexdig_fun>
 8009250:	2800      	cmp	r0, #0
 8009252:	d14f      	bne.n	80092f4 <__hexnan+0xe4>
 8009254:	9904      	ldr	r1, [sp, #16]
 8009256:	9a05      	ldr	r2, [sp, #20]
 8009258:	2920      	cmp	r1, #32
 800925a:	d818      	bhi.n	800928e <__hexnan+0x7e>
 800925c:	9b02      	ldr	r3, [sp, #8]
 800925e:	459b      	cmp	fp, r3
 8009260:	dd13      	ble.n	800928a <__hexnan+0x7a>
 8009262:	454c      	cmp	r4, r9
 8009264:	d206      	bcs.n	8009274 <__hexnan+0x64>
 8009266:	2d07      	cmp	r5, #7
 8009268:	dc04      	bgt.n	8009274 <__hexnan+0x64>
 800926a:	462a      	mov	r2, r5
 800926c:	4649      	mov	r1, r9
 800926e:	4620      	mov	r0, r4
 8009270:	f7ff ffa8 	bl	80091c4 <L_shift>
 8009274:	4544      	cmp	r4, r8
 8009276:	d950      	bls.n	800931a <__hexnan+0x10a>
 8009278:	2300      	movs	r3, #0
 800927a:	f1a4 0904 	sub.w	r9, r4, #4
 800927e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009282:	461d      	mov	r5, r3
 8009284:	464c      	mov	r4, r9
 8009286:	f8cd b008 	str.w	fp, [sp, #8]
 800928a:	9a03      	ldr	r2, [sp, #12]
 800928c:	e7d7      	b.n	800923e <__hexnan+0x2e>
 800928e:	2929      	cmp	r1, #41	; 0x29
 8009290:	d156      	bne.n	8009340 <__hexnan+0x130>
 8009292:	3202      	adds	r2, #2
 8009294:	f8ca 2000 	str.w	r2, [sl]
 8009298:	f1bb 0f00 	cmp.w	fp, #0
 800929c:	d050      	beq.n	8009340 <__hexnan+0x130>
 800929e:	454c      	cmp	r4, r9
 80092a0:	d206      	bcs.n	80092b0 <__hexnan+0xa0>
 80092a2:	2d07      	cmp	r5, #7
 80092a4:	dc04      	bgt.n	80092b0 <__hexnan+0xa0>
 80092a6:	462a      	mov	r2, r5
 80092a8:	4649      	mov	r1, r9
 80092aa:	4620      	mov	r0, r4
 80092ac:	f7ff ff8a 	bl	80091c4 <L_shift>
 80092b0:	4544      	cmp	r4, r8
 80092b2:	d934      	bls.n	800931e <__hexnan+0x10e>
 80092b4:	4623      	mov	r3, r4
 80092b6:	f1a8 0204 	sub.w	r2, r8, #4
 80092ba:	f853 1b04 	ldr.w	r1, [r3], #4
 80092be:	429f      	cmp	r7, r3
 80092c0:	f842 1f04 	str.w	r1, [r2, #4]!
 80092c4:	d2f9      	bcs.n	80092ba <__hexnan+0xaa>
 80092c6:	1b3b      	subs	r3, r7, r4
 80092c8:	f023 0303 	bic.w	r3, r3, #3
 80092cc:	3304      	adds	r3, #4
 80092ce:	3401      	adds	r4, #1
 80092d0:	3e03      	subs	r6, #3
 80092d2:	42b4      	cmp	r4, r6
 80092d4:	bf88      	it	hi
 80092d6:	2304      	movhi	r3, #4
 80092d8:	2200      	movs	r2, #0
 80092da:	4443      	add	r3, r8
 80092dc:	f843 2b04 	str.w	r2, [r3], #4
 80092e0:	429f      	cmp	r7, r3
 80092e2:	d2fb      	bcs.n	80092dc <__hexnan+0xcc>
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	b91b      	cbnz	r3, 80092f0 <__hexnan+0xe0>
 80092e8:	4547      	cmp	r7, r8
 80092ea:	d127      	bne.n	800933c <__hexnan+0x12c>
 80092ec:	2301      	movs	r3, #1
 80092ee:	603b      	str	r3, [r7, #0]
 80092f0:	2005      	movs	r0, #5
 80092f2:	e026      	b.n	8009342 <__hexnan+0x132>
 80092f4:	3501      	adds	r5, #1
 80092f6:	2d08      	cmp	r5, #8
 80092f8:	f10b 0b01 	add.w	fp, fp, #1
 80092fc:	dd06      	ble.n	800930c <__hexnan+0xfc>
 80092fe:	4544      	cmp	r4, r8
 8009300:	d9c3      	bls.n	800928a <__hexnan+0x7a>
 8009302:	2300      	movs	r3, #0
 8009304:	2501      	movs	r5, #1
 8009306:	f844 3c04 	str.w	r3, [r4, #-4]
 800930a:	3c04      	subs	r4, #4
 800930c:	6822      	ldr	r2, [r4, #0]
 800930e:	f000 000f 	and.w	r0, r0, #15
 8009312:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009316:	6022      	str	r2, [r4, #0]
 8009318:	e7b7      	b.n	800928a <__hexnan+0x7a>
 800931a:	2508      	movs	r5, #8
 800931c:	e7b5      	b.n	800928a <__hexnan+0x7a>
 800931e:	9b01      	ldr	r3, [sp, #4]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d0df      	beq.n	80092e4 <__hexnan+0xd4>
 8009324:	f04f 32ff 	mov.w	r2, #4294967295
 8009328:	f1c3 0320 	rsb	r3, r3, #32
 800932c:	fa22 f303 	lsr.w	r3, r2, r3
 8009330:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009334:	401a      	ands	r2, r3
 8009336:	f846 2c04 	str.w	r2, [r6, #-4]
 800933a:	e7d3      	b.n	80092e4 <__hexnan+0xd4>
 800933c:	3f04      	subs	r7, #4
 800933e:	e7d1      	b.n	80092e4 <__hexnan+0xd4>
 8009340:	2004      	movs	r0, #4
 8009342:	b007      	add	sp, #28
 8009344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009348 <_localeconv_r>:
 8009348:	4800      	ldr	r0, [pc, #0]	; (800934c <_localeconv_r+0x4>)
 800934a:	4770      	bx	lr
 800934c:	20000164 	.word	0x20000164

08009350 <__retarget_lock_init_recursive>:
 8009350:	4770      	bx	lr

08009352 <__retarget_lock_acquire_recursive>:
 8009352:	4770      	bx	lr

08009354 <__retarget_lock_release_recursive>:
 8009354:	4770      	bx	lr

08009356 <__swhatbuf_r>:
 8009356:	b570      	push	{r4, r5, r6, lr}
 8009358:	460e      	mov	r6, r1
 800935a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800935e:	4614      	mov	r4, r2
 8009360:	2900      	cmp	r1, #0
 8009362:	461d      	mov	r5, r3
 8009364:	b096      	sub	sp, #88	; 0x58
 8009366:	da08      	bge.n	800937a <__swhatbuf_r+0x24>
 8009368:	2200      	movs	r2, #0
 800936a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800936e:	602a      	str	r2, [r5, #0]
 8009370:	061a      	lsls	r2, r3, #24
 8009372:	d410      	bmi.n	8009396 <__swhatbuf_r+0x40>
 8009374:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009378:	e00e      	b.n	8009398 <__swhatbuf_r+0x42>
 800937a:	466a      	mov	r2, sp
 800937c:	f001 f9a0 	bl	800a6c0 <_fstat_r>
 8009380:	2800      	cmp	r0, #0
 8009382:	dbf1      	blt.n	8009368 <__swhatbuf_r+0x12>
 8009384:	9a01      	ldr	r2, [sp, #4]
 8009386:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800938a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800938e:	425a      	negs	r2, r3
 8009390:	415a      	adcs	r2, r3
 8009392:	602a      	str	r2, [r5, #0]
 8009394:	e7ee      	b.n	8009374 <__swhatbuf_r+0x1e>
 8009396:	2340      	movs	r3, #64	; 0x40
 8009398:	2000      	movs	r0, #0
 800939a:	6023      	str	r3, [r4, #0]
 800939c:	b016      	add	sp, #88	; 0x58
 800939e:	bd70      	pop	{r4, r5, r6, pc}

080093a0 <__smakebuf_r>:
 80093a0:	898b      	ldrh	r3, [r1, #12]
 80093a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80093a4:	079d      	lsls	r5, r3, #30
 80093a6:	4606      	mov	r6, r0
 80093a8:	460c      	mov	r4, r1
 80093aa:	d507      	bpl.n	80093bc <__smakebuf_r+0x1c>
 80093ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80093b0:	6023      	str	r3, [r4, #0]
 80093b2:	6123      	str	r3, [r4, #16]
 80093b4:	2301      	movs	r3, #1
 80093b6:	6163      	str	r3, [r4, #20]
 80093b8:	b002      	add	sp, #8
 80093ba:	bd70      	pop	{r4, r5, r6, pc}
 80093bc:	466a      	mov	r2, sp
 80093be:	ab01      	add	r3, sp, #4
 80093c0:	f7ff ffc9 	bl	8009356 <__swhatbuf_r>
 80093c4:	9900      	ldr	r1, [sp, #0]
 80093c6:	4605      	mov	r5, r0
 80093c8:	4630      	mov	r0, r6
 80093ca:	f000 fd85 	bl	8009ed8 <_malloc_r>
 80093ce:	b948      	cbnz	r0, 80093e4 <__smakebuf_r+0x44>
 80093d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093d4:	059a      	lsls	r2, r3, #22
 80093d6:	d4ef      	bmi.n	80093b8 <__smakebuf_r+0x18>
 80093d8:	f023 0303 	bic.w	r3, r3, #3
 80093dc:	f043 0302 	orr.w	r3, r3, #2
 80093e0:	81a3      	strh	r3, [r4, #12]
 80093e2:	e7e3      	b.n	80093ac <__smakebuf_r+0xc>
 80093e4:	4b0d      	ldr	r3, [pc, #52]	; (800941c <__smakebuf_r+0x7c>)
 80093e6:	62b3      	str	r3, [r6, #40]	; 0x28
 80093e8:	89a3      	ldrh	r3, [r4, #12]
 80093ea:	6020      	str	r0, [r4, #0]
 80093ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093f0:	81a3      	strh	r3, [r4, #12]
 80093f2:	9b00      	ldr	r3, [sp, #0]
 80093f4:	6120      	str	r0, [r4, #16]
 80093f6:	6163      	str	r3, [r4, #20]
 80093f8:	9b01      	ldr	r3, [sp, #4]
 80093fa:	b15b      	cbz	r3, 8009414 <__smakebuf_r+0x74>
 80093fc:	4630      	mov	r0, r6
 80093fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009402:	f001 f96f 	bl	800a6e4 <_isatty_r>
 8009406:	b128      	cbz	r0, 8009414 <__smakebuf_r+0x74>
 8009408:	89a3      	ldrh	r3, [r4, #12]
 800940a:	f023 0303 	bic.w	r3, r3, #3
 800940e:	f043 0301 	orr.w	r3, r3, #1
 8009412:	81a3      	strh	r3, [r4, #12]
 8009414:	89a0      	ldrh	r0, [r4, #12]
 8009416:	4305      	orrs	r5, r0
 8009418:	81a5      	strh	r5, [r4, #12]
 800941a:	e7cd      	b.n	80093b8 <__smakebuf_r+0x18>
 800941c:	08008ad9 	.word	0x08008ad9

08009420 <malloc>:
 8009420:	4b02      	ldr	r3, [pc, #8]	; (800942c <malloc+0xc>)
 8009422:	4601      	mov	r1, r0
 8009424:	6818      	ldr	r0, [r3, #0]
 8009426:	f000 bd57 	b.w	8009ed8 <_malloc_r>
 800942a:	bf00      	nop
 800942c:	2000000c 	.word	0x2000000c

08009430 <__ascii_mbtowc>:
 8009430:	b082      	sub	sp, #8
 8009432:	b901      	cbnz	r1, 8009436 <__ascii_mbtowc+0x6>
 8009434:	a901      	add	r1, sp, #4
 8009436:	b142      	cbz	r2, 800944a <__ascii_mbtowc+0x1a>
 8009438:	b14b      	cbz	r3, 800944e <__ascii_mbtowc+0x1e>
 800943a:	7813      	ldrb	r3, [r2, #0]
 800943c:	600b      	str	r3, [r1, #0]
 800943e:	7812      	ldrb	r2, [r2, #0]
 8009440:	1e10      	subs	r0, r2, #0
 8009442:	bf18      	it	ne
 8009444:	2001      	movne	r0, #1
 8009446:	b002      	add	sp, #8
 8009448:	4770      	bx	lr
 800944a:	4610      	mov	r0, r2
 800944c:	e7fb      	b.n	8009446 <__ascii_mbtowc+0x16>
 800944e:	f06f 0001 	mvn.w	r0, #1
 8009452:	e7f8      	b.n	8009446 <__ascii_mbtowc+0x16>

08009454 <memchr>:
 8009454:	4603      	mov	r3, r0
 8009456:	b510      	push	{r4, lr}
 8009458:	b2c9      	uxtb	r1, r1
 800945a:	4402      	add	r2, r0
 800945c:	4293      	cmp	r3, r2
 800945e:	4618      	mov	r0, r3
 8009460:	d101      	bne.n	8009466 <memchr+0x12>
 8009462:	2000      	movs	r0, #0
 8009464:	e003      	b.n	800946e <memchr+0x1a>
 8009466:	7804      	ldrb	r4, [r0, #0]
 8009468:	3301      	adds	r3, #1
 800946a:	428c      	cmp	r4, r1
 800946c:	d1f6      	bne.n	800945c <memchr+0x8>
 800946e:	bd10      	pop	{r4, pc}

08009470 <_Balloc>:
 8009470:	b570      	push	{r4, r5, r6, lr}
 8009472:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009474:	4604      	mov	r4, r0
 8009476:	460d      	mov	r5, r1
 8009478:	b976      	cbnz	r6, 8009498 <_Balloc+0x28>
 800947a:	2010      	movs	r0, #16
 800947c:	f7ff ffd0 	bl	8009420 <malloc>
 8009480:	4602      	mov	r2, r0
 8009482:	6260      	str	r0, [r4, #36]	; 0x24
 8009484:	b920      	cbnz	r0, 8009490 <_Balloc+0x20>
 8009486:	2166      	movs	r1, #102	; 0x66
 8009488:	4b17      	ldr	r3, [pc, #92]	; (80094e8 <_Balloc+0x78>)
 800948a:	4818      	ldr	r0, [pc, #96]	; (80094ec <_Balloc+0x7c>)
 800948c:	f001 f8d8 	bl	800a640 <__assert_func>
 8009490:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009494:	6006      	str	r6, [r0, #0]
 8009496:	60c6      	str	r6, [r0, #12]
 8009498:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800949a:	68f3      	ldr	r3, [r6, #12]
 800949c:	b183      	cbz	r3, 80094c0 <_Balloc+0x50>
 800949e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80094a0:	68db      	ldr	r3, [r3, #12]
 80094a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80094a6:	b9b8      	cbnz	r0, 80094d8 <_Balloc+0x68>
 80094a8:	2101      	movs	r1, #1
 80094aa:	fa01 f605 	lsl.w	r6, r1, r5
 80094ae:	1d72      	adds	r2, r6, #5
 80094b0:	4620      	mov	r0, r4
 80094b2:	0092      	lsls	r2, r2, #2
 80094b4:	f000 fc94 	bl	8009de0 <_calloc_r>
 80094b8:	b160      	cbz	r0, 80094d4 <_Balloc+0x64>
 80094ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80094be:	e00e      	b.n	80094de <_Balloc+0x6e>
 80094c0:	2221      	movs	r2, #33	; 0x21
 80094c2:	2104      	movs	r1, #4
 80094c4:	4620      	mov	r0, r4
 80094c6:	f000 fc8b 	bl	8009de0 <_calloc_r>
 80094ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80094cc:	60f0      	str	r0, [r6, #12]
 80094ce:	68db      	ldr	r3, [r3, #12]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d1e4      	bne.n	800949e <_Balloc+0x2e>
 80094d4:	2000      	movs	r0, #0
 80094d6:	bd70      	pop	{r4, r5, r6, pc}
 80094d8:	6802      	ldr	r2, [r0, #0]
 80094da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80094de:	2300      	movs	r3, #0
 80094e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80094e4:	e7f7      	b.n	80094d6 <_Balloc+0x66>
 80094e6:	bf00      	nop
 80094e8:	0800c38e 	.word	0x0800c38e
 80094ec:	0800c4f0 	.word	0x0800c4f0

080094f0 <_Bfree>:
 80094f0:	b570      	push	{r4, r5, r6, lr}
 80094f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80094f4:	4605      	mov	r5, r0
 80094f6:	460c      	mov	r4, r1
 80094f8:	b976      	cbnz	r6, 8009518 <_Bfree+0x28>
 80094fa:	2010      	movs	r0, #16
 80094fc:	f7ff ff90 	bl	8009420 <malloc>
 8009500:	4602      	mov	r2, r0
 8009502:	6268      	str	r0, [r5, #36]	; 0x24
 8009504:	b920      	cbnz	r0, 8009510 <_Bfree+0x20>
 8009506:	218a      	movs	r1, #138	; 0x8a
 8009508:	4b08      	ldr	r3, [pc, #32]	; (800952c <_Bfree+0x3c>)
 800950a:	4809      	ldr	r0, [pc, #36]	; (8009530 <_Bfree+0x40>)
 800950c:	f001 f898 	bl	800a640 <__assert_func>
 8009510:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009514:	6006      	str	r6, [r0, #0]
 8009516:	60c6      	str	r6, [r0, #12]
 8009518:	b13c      	cbz	r4, 800952a <_Bfree+0x3a>
 800951a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800951c:	6862      	ldr	r2, [r4, #4]
 800951e:	68db      	ldr	r3, [r3, #12]
 8009520:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009524:	6021      	str	r1, [r4, #0]
 8009526:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800952a:	bd70      	pop	{r4, r5, r6, pc}
 800952c:	0800c38e 	.word	0x0800c38e
 8009530:	0800c4f0 	.word	0x0800c4f0

08009534 <__multadd>:
 8009534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009538:	4607      	mov	r7, r0
 800953a:	460c      	mov	r4, r1
 800953c:	461e      	mov	r6, r3
 800953e:	2000      	movs	r0, #0
 8009540:	690d      	ldr	r5, [r1, #16]
 8009542:	f101 0c14 	add.w	ip, r1, #20
 8009546:	f8dc 3000 	ldr.w	r3, [ip]
 800954a:	3001      	adds	r0, #1
 800954c:	b299      	uxth	r1, r3
 800954e:	fb02 6101 	mla	r1, r2, r1, r6
 8009552:	0c1e      	lsrs	r6, r3, #16
 8009554:	0c0b      	lsrs	r3, r1, #16
 8009556:	fb02 3306 	mla	r3, r2, r6, r3
 800955a:	b289      	uxth	r1, r1
 800955c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009560:	4285      	cmp	r5, r0
 8009562:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009566:	f84c 1b04 	str.w	r1, [ip], #4
 800956a:	dcec      	bgt.n	8009546 <__multadd+0x12>
 800956c:	b30e      	cbz	r6, 80095b2 <__multadd+0x7e>
 800956e:	68a3      	ldr	r3, [r4, #8]
 8009570:	42ab      	cmp	r3, r5
 8009572:	dc19      	bgt.n	80095a8 <__multadd+0x74>
 8009574:	6861      	ldr	r1, [r4, #4]
 8009576:	4638      	mov	r0, r7
 8009578:	3101      	adds	r1, #1
 800957a:	f7ff ff79 	bl	8009470 <_Balloc>
 800957e:	4680      	mov	r8, r0
 8009580:	b928      	cbnz	r0, 800958e <__multadd+0x5a>
 8009582:	4602      	mov	r2, r0
 8009584:	21b5      	movs	r1, #181	; 0xb5
 8009586:	4b0c      	ldr	r3, [pc, #48]	; (80095b8 <__multadd+0x84>)
 8009588:	480c      	ldr	r0, [pc, #48]	; (80095bc <__multadd+0x88>)
 800958a:	f001 f859 	bl	800a640 <__assert_func>
 800958e:	6922      	ldr	r2, [r4, #16]
 8009590:	f104 010c 	add.w	r1, r4, #12
 8009594:	3202      	adds	r2, #2
 8009596:	0092      	lsls	r2, r2, #2
 8009598:	300c      	adds	r0, #12
 800959a:	f7fc fcaf 	bl	8005efc <memcpy>
 800959e:	4621      	mov	r1, r4
 80095a0:	4638      	mov	r0, r7
 80095a2:	f7ff ffa5 	bl	80094f0 <_Bfree>
 80095a6:	4644      	mov	r4, r8
 80095a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80095ac:	3501      	adds	r5, #1
 80095ae:	615e      	str	r6, [r3, #20]
 80095b0:	6125      	str	r5, [r4, #16]
 80095b2:	4620      	mov	r0, r4
 80095b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095b8:	0800c400 	.word	0x0800c400
 80095bc:	0800c4f0 	.word	0x0800c4f0

080095c0 <__s2b>:
 80095c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095c4:	4615      	mov	r5, r2
 80095c6:	2209      	movs	r2, #9
 80095c8:	461f      	mov	r7, r3
 80095ca:	3308      	adds	r3, #8
 80095cc:	460c      	mov	r4, r1
 80095ce:	fb93 f3f2 	sdiv	r3, r3, r2
 80095d2:	4606      	mov	r6, r0
 80095d4:	2201      	movs	r2, #1
 80095d6:	2100      	movs	r1, #0
 80095d8:	429a      	cmp	r2, r3
 80095da:	db09      	blt.n	80095f0 <__s2b+0x30>
 80095dc:	4630      	mov	r0, r6
 80095de:	f7ff ff47 	bl	8009470 <_Balloc>
 80095e2:	b940      	cbnz	r0, 80095f6 <__s2b+0x36>
 80095e4:	4602      	mov	r2, r0
 80095e6:	21ce      	movs	r1, #206	; 0xce
 80095e8:	4b18      	ldr	r3, [pc, #96]	; (800964c <__s2b+0x8c>)
 80095ea:	4819      	ldr	r0, [pc, #100]	; (8009650 <__s2b+0x90>)
 80095ec:	f001 f828 	bl	800a640 <__assert_func>
 80095f0:	0052      	lsls	r2, r2, #1
 80095f2:	3101      	adds	r1, #1
 80095f4:	e7f0      	b.n	80095d8 <__s2b+0x18>
 80095f6:	9b08      	ldr	r3, [sp, #32]
 80095f8:	2d09      	cmp	r5, #9
 80095fa:	6143      	str	r3, [r0, #20]
 80095fc:	f04f 0301 	mov.w	r3, #1
 8009600:	6103      	str	r3, [r0, #16]
 8009602:	dd16      	ble.n	8009632 <__s2b+0x72>
 8009604:	f104 0909 	add.w	r9, r4, #9
 8009608:	46c8      	mov	r8, r9
 800960a:	442c      	add	r4, r5
 800960c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009610:	4601      	mov	r1, r0
 8009612:	220a      	movs	r2, #10
 8009614:	4630      	mov	r0, r6
 8009616:	3b30      	subs	r3, #48	; 0x30
 8009618:	f7ff ff8c 	bl	8009534 <__multadd>
 800961c:	45a0      	cmp	r8, r4
 800961e:	d1f5      	bne.n	800960c <__s2b+0x4c>
 8009620:	f1a5 0408 	sub.w	r4, r5, #8
 8009624:	444c      	add	r4, r9
 8009626:	1b2d      	subs	r5, r5, r4
 8009628:	1963      	adds	r3, r4, r5
 800962a:	42bb      	cmp	r3, r7
 800962c:	db04      	blt.n	8009638 <__s2b+0x78>
 800962e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009632:	2509      	movs	r5, #9
 8009634:	340a      	adds	r4, #10
 8009636:	e7f6      	b.n	8009626 <__s2b+0x66>
 8009638:	f814 3b01 	ldrb.w	r3, [r4], #1
 800963c:	4601      	mov	r1, r0
 800963e:	220a      	movs	r2, #10
 8009640:	4630      	mov	r0, r6
 8009642:	3b30      	subs	r3, #48	; 0x30
 8009644:	f7ff ff76 	bl	8009534 <__multadd>
 8009648:	e7ee      	b.n	8009628 <__s2b+0x68>
 800964a:	bf00      	nop
 800964c:	0800c400 	.word	0x0800c400
 8009650:	0800c4f0 	.word	0x0800c4f0

08009654 <__hi0bits>:
 8009654:	0c02      	lsrs	r2, r0, #16
 8009656:	0412      	lsls	r2, r2, #16
 8009658:	4603      	mov	r3, r0
 800965a:	b9ca      	cbnz	r2, 8009690 <__hi0bits+0x3c>
 800965c:	0403      	lsls	r3, r0, #16
 800965e:	2010      	movs	r0, #16
 8009660:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009664:	bf04      	itt	eq
 8009666:	021b      	lsleq	r3, r3, #8
 8009668:	3008      	addeq	r0, #8
 800966a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800966e:	bf04      	itt	eq
 8009670:	011b      	lsleq	r3, r3, #4
 8009672:	3004      	addeq	r0, #4
 8009674:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009678:	bf04      	itt	eq
 800967a:	009b      	lsleq	r3, r3, #2
 800967c:	3002      	addeq	r0, #2
 800967e:	2b00      	cmp	r3, #0
 8009680:	db05      	blt.n	800968e <__hi0bits+0x3a>
 8009682:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8009686:	f100 0001 	add.w	r0, r0, #1
 800968a:	bf08      	it	eq
 800968c:	2020      	moveq	r0, #32
 800968e:	4770      	bx	lr
 8009690:	2000      	movs	r0, #0
 8009692:	e7e5      	b.n	8009660 <__hi0bits+0xc>

08009694 <__lo0bits>:
 8009694:	6803      	ldr	r3, [r0, #0]
 8009696:	4602      	mov	r2, r0
 8009698:	f013 0007 	ands.w	r0, r3, #7
 800969c:	d00b      	beq.n	80096b6 <__lo0bits+0x22>
 800969e:	07d9      	lsls	r1, r3, #31
 80096a0:	d421      	bmi.n	80096e6 <__lo0bits+0x52>
 80096a2:	0798      	lsls	r0, r3, #30
 80096a4:	bf49      	itett	mi
 80096a6:	085b      	lsrmi	r3, r3, #1
 80096a8:	089b      	lsrpl	r3, r3, #2
 80096aa:	2001      	movmi	r0, #1
 80096ac:	6013      	strmi	r3, [r2, #0]
 80096ae:	bf5c      	itt	pl
 80096b0:	2002      	movpl	r0, #2
 80096b2:	6013      	strpl	r3, [r2, #0]
 80096b4:	4770      	bx	lr
 80096b6:	b299      	uxth	r1, r3
 80096b8:	b909      	cbnz	r1, 80096be <__lo0bits+0x2a>
 80096ba:	2010      	movs	r0, #16
 80096bc:	0c1b      	lsrs	r3, r3, #16
 80096be:	b2d9      	uxtb	r1, r3
 80096c0:	b909      	cbnz	r1, 80096c6 <__lo0bits+0x32>
 80096c2:	3008      	adds	r0, #8
 80096c4:	0a1b      	lsrs	r3, r3, #8
 80096c6:	0719      	lsls	r1, r3, #28
 80096c8:	bf04      	itt	eq
 80096ca:	091b      	lsreq	r3, r3, #4
 80096cc:	3004      	addeq	r0, #4
 80096ce:	0799      	lsls	r1, r3, #30
 80096d0:	bf04      	itt	eq
 80096d2:	089b      	lsreq	r3, r3, #2
 80096d4:	3002      	addeq	r0, #2
 80096d6:	07d9      	lsls	r1, r3, #31
 80096d8:	d403      	bmi.n	80096e2 <__lo0bits+0x4e>
 80096da:	085b      	lsrs	r3, r3, #1
 80096dc:	f100 0001 	add.w	r0, r0, #1
 80096e0:	d003      	beq.n	80096ea <__lo0bits+0x56>
 80096e2:	6013      	str	r3, [r2, #0]
 80096e4:	4770      	bx	lr
 80096e6:	2000      	movs	r0, #0
 80096e8:	4770      	bx	lr
 80096ea:	2020      	movs	r0, #32
 80096ec:	4770      	bx	lr
	...

080096f0 <__i2b>:
 80096f0:	b510      	push	{r4, lr}
 80096f2:	460c      	mov	r4, r1
 80096f4:	2101      	movs	r1, #1
 80096f6:	f7ff febb 	bl	8009470 <_Balloc>
 80096fa:	4602      	mov	r2, r0
 80096fc:	b928      	cbnz	r0, 800970a <__i2b+0x1a>
 80096fe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009702:	4b04      	ldr	r3, [pc, #16]	; (8009714 <__i2b+0x24>)
 8009704:	4804      	ldr	r0, [pc, #16]	; (8009718 <__i2b+0x28>)
 8009706:	f000 ff9b 	bl	800a640 <__assert_func>
 800970a:	2301      	movs	r3, #1
 800970c:	6144      	str	r4, [r0, #20]
 800970e:	6103      	str	r3, [r0, #16]
 8009710:	bd10      	pop	{r4, pc}
 8009712:	bf00      	nop
 8009714:	0800c400 	.word	0x0800c400
 8009718:	0800c4f0 	.word	0x0800c4f0

0800971c <__multiply>:
 800971c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009720:	4691      	mov	r9, r2
 8009722:	690a      	ldr	r2, [r1, #16]
 8009724:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009728:	460c      	mov	r4, r1
 800972a:	429a      	cmp	r2, r3
 800972c:	bfbe      	ittt	lt
 800972e:	460b      	movlt	r3, r1
 8009730:	464c      	movlt	r4, r9
 8009732:	4699      	movlt	r9, r3
 8009734:	6927      	ldr	r7, [r4, #16]
 8009736:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800973a:	68a3      	ldr	r3, [r4, #8]
 800973c:	6861      	ldr	r1, [r4, #4]
 800973e:	eb07 060a 	add.w	r6, r7, sl
 8009742:	42b3      	cmp	r3, r6
 8009744:	b085      	sub	sp, #20
 8009746:	bfb8      	it	lt
 8009748:	3101      	addlt	r1, #1
 800974a:	f7ff fe91 	bl	8009470 <_Balloc>
 800974e:	b930      	cbnz	r0, 800975e <__multiply+0x42>
 8009750:	4602      	mov	r2, r0
 8009752:	f240 115d 	movw	r1, #349	; 0x15d
 8009756:	4b43      	ldr	r3, [pc, #268]	; (8009864 <__multiply+0x148>)
 8009758:	4843      	ldr	r0, [pc, #268]	; (8009868 <__multiply+0x14c>)
 800975a:	f000 ff71 	bl	800a640 <__assert_func>
 800975e:	f100 0514 	add.w	r5, r0, #20
 8009762:	462b      	mov	r3, r5
 8009764:	2200      	movs	r2, #0
 8009766:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800976a:	4543      	cmp	r3, r8
 800976c:	d321      	bcc.n	80097b2 <__multiply+0x96>
 800976e:	f104 0314 	add.w	r3, r4, #20
 8009772:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009776:	f109 0314 	add.w	r3, r9, #20
 800977a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800977e:	9202      	str	r2, [sp, #8]
 8009780:	1b3a      	subs	r2, r7, r4
 8009782:	3a15      	subs	r2, #21
 8009784:	f022 0203 	bic.w	r2, r2, #3
 8009788:	3204      	adds	r2, #4
 800978a:	f104 0115 	add.w	r1, r4, #21
 800978e:	428f      	cmp	r7, r1
 8009790:	bf38      	it	cc
 8009792:	2204      	movcc	r2, #4
 8009794:	9201      	str	r2, [sp, #4]
 8009796:	9a02      	ldr	r2, [sp, #8]
 8009798:	9303      	str	r3, [sp, #12]
 800979a:	429a      	cmp	r2, r3
 800979c:	d80c      	bhi.n	80097b8 <__multiply+0x9c>
 800979e:	2e00      	cmp	r6, #0
 80097a0:	dd03      	ble.n	80097aa <__multiply+0x8e>
 80097a2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d059      	beq.n	800985e <__multiply+0x142>
 80097aa:	6106      	str	r6, [r0, #16]
 80097ac:	b005      	add	sp, #20
 80097ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097b2:	f843 2b04 	str.w	r2, [r3], #4
 80097b6:	e7d8      	b.n	800976a <__multiply+0x4e>
 80097b8:	f8b3 a000 	ldrh.w	sl, [r3]
 80097bc:	f1ba 0f00 	cmp.w	sl, #0
 80097c0:	d023      	beq.n	800980a <__multiply+0xee>
 80097c2:	46a9      	mov	r9, r5
 80097c4:	f04f 0c00 	mov.w	ip, #0
 80097c8:	f104 0e14 	add.w	lr, r4, #20
 80097cc:	f85e 2b04 	ldr.w	r2, [lr], #4
 80097d0:	f8d9 1000 	ldr.w	r1, [r9]
 80097d4:	fa1f fb82 	uxth.w	fp, r2
 80097d8:	b289      	uxth	r1, r1
 80097da:	fb0a 110b 	mla	r1, sl, fp, r1
 80097de:	4461      	add	r1, ip
 80097e0:	f8d9 c000 	ldr.w	ip, [r9]
 80097e4:	0c12      	lsrs	r2, r2, #16
 80097e6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80097ea:	fb0a c202 	mla	r2, sl, r2, ip
 80097ee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80097f2:	b289      	uxth	r1, r1
 80097f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80097f8:	4577      	cmp	r7, lr
 80097fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80097fe:	f849 1b04 	str.w	r1, [r9], #4
 8009802:	d8e3      	bhi.n	80097cc <__multiply+0xb0>
 8009804:	9a01      	ldr	r2, [sp, #4]
 8009806:	f845 c002 	str.w	ip, [r5, r2]
 800980a:	9a03      	ldr	r2, [sp, #12]
 800980c:	3304      	adds	r3, #4
 800980e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009812:	f1b9 0f00 	cmp.w	r9, #0
 8009816:	d020      	beq.n	800985a <__multiply+0x13e>
 8009818:	46ae      	mov	lr, r5
 800981a:	f04f 0a00 	mov.w	sl, #0
 800981e:	6829      	ldr	r1, [r5, #0]
 8009820:	f104 0c14 	add.w	ip, r4, #20
 8009824:	f8bc b000 	ldrh.w	fp, [ip]
 8009828:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800982c:	b289      	uxth	r1, r1
 800982e:	fb09 220b 	mla	r2, r9, fp, r2
 8009832:	4492      	add	sl, r2
 8009834:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009838:	f84e 1b04 	str.w	r1, [lr], #4
 800983c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009840:	f8be 1000 	ldrh.w	r1, [lr]
 8009844:	0c12      	lsrs	r2, r2, #16
 8009846:	fb09 1102 	mla	r1, r9, r2, r1
 800984a:	4567      	cmp	r7, ip
 800984c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009850:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009854:	d8e6      	bhi.n	8009824 <__multiply+0x108>
 8009856:	9a01      	ldr	r2, [sp, #4]
 8009858:	50a9      	str	r1, [r5, r2]
 800985a:	3504      	adds	r5, #4
 800985c:	e79b      	b.n	8009796 <__multiply+0x7a>
 800985e:	3e01      	subs	r6, #1
 8009860:	e79d      	b.n	800979e <__multiply+0x82>
 8009862:	bf00      	nop
 8009864:	0800c400 	.word	0x0800c400
 8009868:	0800c4f0 	.word	0x0800c4f0

0800986c <__pow5mult>:
 800986c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009870:	4615      	mov	r5, r2
 8009872:	f012 0203 	ands.w	r2, r2, #3
 8009876:	4606      	mov	r6, r0
 8009878:	460f      	mov	r7, r1
 800987a:	d007      	beq.n	800988c <__pow5mult+0x20>
 800987c:	4c25      	ldr	r4, [pc, #148]	; (8009914 <__pow5mult+0xa8>)
 800987e:	3a01      	subs	r2, #1
 8009880:	2300      	movs	r3, #0
 8009882:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009886:	f7ff fe55 	bl	8009534 <__multadd>
 800988a:	4607      	mov	r7, r0
 800988c:	10ad      	asrs	r5, r5, #2
 800988e:	d03d      	beq.n	800990c <__pow5mult+0xa0>
 8009890:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009892:	b97c      	cbnz	r4, 80098b4 <__pow5mult+0x48>
 8009894:	2010      	movs	r0, #16
 8009896:	f7ff fdc3 	bl	8009420 <malloc>
 800989a:	4602      	mov	r2, r0
 800989c:	6270      	str	r0, [r6, #36]	; 0x24
 800989e:	b928      	cbnz	r0, 80098ac <__pow5mult+0x40>
 80098a0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80098a4:	4b1c      	ldr	r3, [pc, #112]	; (8009918 <__pow5mult+0xac>)
 80098a6:	481d      	ldr	r0, [pc, #116]	; (800991c <__pow5mult+0xb0>)
 80098a8:	f000 feca 	bl	800a640 <__assert_func>
 80098ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80098b0:	6004      	str	r4, [r0, #0]
 80098b2:	60c4      	str	r4, [r0, #12]
 80098b4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80098b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80098bc:	b94c      	cbnz	r4, 80098d2 <__pow5mult+0x66>
 80098be:	f240 2171 	movw	r1, #625	; 0x271
 80098c2:	4630      	mov	r0, r6
 80098c4:	f7ff ff14 	bl	80096f0 <__i2b>
 80098c8:	2300      	movs	r3, #0
 80098ca:	4604      	mov	r4, r0
 80098cc:	f8c8 0008 	str.w	r0, [r8, #8]
 80098d0:	6003      	str	r3, [r0, #0]
 80098d2:	f04f 0900 	mov.w	r9, #0
 80098d6:	07eb      	lsls	r3, r5, #31
 80098d8:	d50a      	bpl.n	80098f0 <__pow5mult+0x84>
 80098da:	4639      	mov	r1, r7
 80098dc:	4622      	mov	r2, r4
 80098de:	4630      	mov	r0, r6
 80098e0:	f7ff ff1c 	bl	800971c <__multiply>
 80098e4:	4680      	mov	r8, r0
 80098e6:	4639      	mov	r1, r7
 80098e8:	4630      	mov	r0, r6
 80098ea:	f7ff fe01 	bl	80094f0 <_Bfree>
 80098ee:	4647      	mov	r7, r8
 80098f0:	106d      	asrs	r5, r5, #1
 80098f2:	d00b      	beq.n	800990c <__pow5mult+0xa0>
 80098f4:	6820      	ldr	r0, [r4, #0]
 80098f6:	b938      	cbnz	r0, 8009908 <__pow5mult+0x9c>
 80098f8:	4622      	mov	r2, r4
 80098fa:	4621      	mov	r1, r4
 80098fc:	4630      	mov	r0, r6
 80098fe:	f7ff ff0d 	bl	800971c <__multiply>
 8009902:	6020      	str	r0, [r4, #0]
 8009904:	f8c0 9000 	str.w	r9, [r0]
 8009908:	4604      	mov	r4, r0
 800990a:	e7e4      	b.n	80098d6 <__pow5mult+0x6a>
 800990c:	4638      	mov	r0, r7
 800990e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009912:	bf00      	nop
 8009914:	0800c640 	.word	0x0800c640
 8009918:	0800c38e 	.word	0x0800c38e
 800991c:	0800c4f0 	.word	0x0800c4f0

08009920 <__lshift>:
 8009920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009924:	460c      	mov	r4, r1
 8009926:	4607      	mov	r7, r0
 8009928:	4691      	mov	r9, r2
 800992a:	6923      	ldr	r3, [r4, #16]
 800992c:	6849      	ldr	r1, [r1, #4]
 800992e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009932:	68a3      	ldr	r3, [r4, #8]
 8009934:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009938:	f108 0601 	add.w	r6, r8, #1
 800993c:	42b3      	cmp	r3, r6
 800993e:	db0b      	blt.n	8009958 <__lshift+0x38>
 8009940:	4638      	mov	r0, r7
 8009942:	f7ff fd95 	bl	8009470 <_Balloc>
 8009946:	4605      	mov	r5, r0
 8009948:	b948      	cbnz	r0, 800995e <__lshift+0x3e>
 800994a:	4602      	mov	r2, r0
 800994c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009950:	4b29      	ldr	r3, [pc, #164]	; (80099f8 <__lshift+0xd8>)
 8009952:	482a      	ldr	r0, [pc, #168]	; (80099fc <__lshift+0xdc>)
 8009954:	f000 fe74 	bl	800a640 <__assert_func>
 8009958:	3101      	adds	r1, #1
 800995a:	005b      	lsls	r3, r3, #1
 800995c:	e7ee      	b.n	800993c <__lshift+0x1c>
 800995e:	2300      	movs	r3, #0
 8009960:	f100 0114 	add.w	r1, r0, #20
 8009964:	f100 0210 	add.w	r2, r0, #16
 8009968:	4618      	mov	r0, r3
 800996a:	4553      	cmp	r3, sl
 800996c:	db37      	blt.n	80099de <__lshift+0xbe>
 800996e:	6920      	ldr	r0, [r4, #16]
 8009970:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009974:	f104 0314 	add.w	r3, r4, #20
 8009978:	f019 091f 	ands.w	r9, r9, #31
 800997c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009980:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009984:	d02f      	beq.n	80099e6 <__lshift+0xc6>
 8009986:	468a      	mov	sl, r1
 8009988:	f04f 0c00 	mov.w	ip, #0
 800998c:	f1c9 0e20 	rsb	lr, r9, #32
 8009990:	681a      	ldr	r2, [r3, #0]
 8009992:	fa02 f209 	lsl.w	r2, r2, r9
 8009996:	ea42 020c 	orr.w	r2, r2, ip
 800999a:	f84a 2b04 	str.w	r2, [sl], #4
 800999e:	f853 2b04 	ldr.w	r2, [r3], #4
 80099a2:	4298      	cmp	r0, r3
 80099a4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80099a8:	d8f2      	bhi.n	8009990 <__lshift+0x70>
 80099aa:	1b03      	subs	r3, r0, r4
 80099ac:	3b15      	subs	r3, #21
 80099ae:	f023 0303 	bic.w	r3, r3, #3
 80099b2:	3304      	adds	r3, #4
 80099b4:	f104 0215 	add.w	r2, r4, #21
 80099b8:	4290      	cmp	r0, r2
 80099ba:	bf38      	it	cc
 80099bc:	2304      	movcc	r3, #4
 80099be:	f841 c003 	str.w	ip, [r1, r3]
 80099c2:	f1bc 0f00 	cmp.w	ip, #0
 80099c6:	d001      	beq.n	80099cc <__lshift+0xac>
 80099c8:	f108 0602 	add.w	r6, r8, #2
 80099cc:	3e01      	subs	r6, #1
 80099ce:	4638      	mov	r0, r7
 80099d0:	4621      	mov	r1, r4
 80099d2:	612e      	str	r6, [r5, #16]
 80099d4:	f7ff fd8c 	bl	80094f0 <_Bfree>
 80099d8:	4628      	mov	r0, r5
 80099da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099de:	f842 0f04 	str.w	r0, [r2, #4]!
 80099e2:	3301      	adds	r3, #1
 80099e4:	e7c1      	b.n	800996a <__lshift+0x4a>
 80099e6:	3904      	subs	r1, #4
 80099e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80099ec:	4298      	cmp	r0, r3
 80099ee:	f841 2f04 	str.w	r2, [r1, #4]!
 80099f2:	d8f9      	bhi.n	80099e8 <__lshift+0xc8>
 80099f4:	e7ea      	b.n	80099cc <__lshift+0xac>
 80099f6:	bf00      	nop
 80099f8:	0800c400 	.word	0x0800c400
 80099fc:	0800c4f0 	.word	0x0800c4f0

08009a00 <__mcmp>:
 8009a00:	4603      	mov	r3, r0
 8009a02:	690a      	ldr	r2, [r1, #16]
 8009a04:	6900      	ldr	r0, [r0, #16]
 8009a06:	b530      	push	{r4, r5, lr}
 8009a08:	1a80      	subs	r0, r0, r2
 8009a0a:	d10d      	bne.n	8009a28 <__mcmp+0x28>
 8009a0c:	3314      	adds	r3, #20
 8009a0e:	3114      	adds	r1, #20
 8009a10:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009a14:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009a18:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009a1c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009a20:	4295      	cmp	r5, r2
 8009a22:	d002      	beq.n	8009a2a <__mcmp+0x2a>
 8009a24:	d304      	bcc.n	8009a30 <__mcmp+0x30>
 8009a26:	2001      	movs	r0, #1
 8009a28:	bd30      	pop	{r4, r5, pc}
 8009a2a:	42a3      	cmp	r3, r4
 8009a2c:	d3f4      	bcc.n	8009a18 <__mcmp+0x18>
 8009a2e:	e7fb      	b.n	8009a28 <__mcmp+0x28>
 8009a30:	f04f 30ff 	mov.w	r0, #4294967295
 8009a34:	e7f8      	b.n	8009a28 <__mcmp+0x28>
	...

08009a38 <__mdiff>:
 8009a38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a3c:	460d      	mov	r5, r1
 8009a3e:	4607      	mov	r7, r0
 8009a40:	4611      	mov	r1, r2
 8009a42:	4628      	mov	r0, r5
 8009a44:	4614      	mov	r4, r2
 8009a46:	f7ff ffdb 	bl	8009a00 <__mcmp>
 8009a4a:	1e06      	subs	r6, r0, #0
 8009a4c:	d111      	bne.n	8009a72 <__mdiff+0x3a>
 8009a4e:	4631      	mov	r1, r6
 8009a50:	4638      	mov	r0, r7
 8009a52:	f7ff fd0d 	bl	8009470 <_Balloc>
 8009a56:	4602      	mov	r2, r0
 8009a58:	b928      	cbnz	r0, 8009a66 <__mdiff+0x2e>
 8009a5a:	f240 2132 	movw	r1, #562	; 0x232
 8009a5e:	4b3a      	ldr	r3, [pc, #232]	; (8009b48 <__mdiff+0x110>)
 8009a60:	483a      	ldr	r0, [pc, #232]	; (8009b4c <__mdiff+0x114>)
 8009a62:	f000 fded 	bl	800a640 <__assert_func>
 8009a66:	2301      	movs	r3, #1
 8009a68:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009a6c:	4610      	mov	r0, r2
 8009a6e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a72:	bfa4      	itt	ge
 8009a74:	4623      	movge	r3, r4
 8009a76:	462c      	movge	r4, r5
 8009a78:	4638      	mov	r0, r7
 8009a7a:	6861      	ldr	r1, [r4, #4]
 8009a7c:	bfa6      	itte	ge
 8009a7e:	461d      	movge	r5, r3
 8009a80:	2600      	movge	r6, #0
 8009a82:	2601      	movlt	r6, #1
 8009a84:	f7ff fcf4 	bl	8009470 <_Balloc>
 8009a88:	4602      	mov	r2, r0
 8009a8a:	b918      	cbnz	r0, 8009a94 <__mdiff+0x5c>
 8009a8c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009a90:	4b2d      	ldr	r3, [pc, #180]	; (8009b48 <__mdiff+0x110>)
 8009a92:	e7e5      	b.n	8009a60 <__mdiff+0x28>
 8009a94:	f102 0814 	add.w	r8, r2, #20
 8009a98:	46c2      	mov	sl, r8
 8009a9a:	f04f 0c00 	mov.w	ip, #0
 8009a9e:	6927      	ldr	r7, [r4, #16]
 8009aa0:	60c6      	str	r6, [r0, #12]
 8009aa2:	692e      	ldr	r6, [r5, #16]
 8009aa4:	f104 0014 	add.w	r0, r4, #20
 8009aa8:	f105 0914 	add.w	r9, r5, #20
 8009aac:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8009ab0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009ab4:	3410      	adds	r4, #16
 8009ab6:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8009aba:	f859 3b04 	ldr.w	r3, [r9], #4
 8009abe:	fa1f f18b 	uxth.w	r1, fp
 8009ac2:	448c      	add	ip, r1
 8009ac4:	b299      	uxth	r1, r3
 8009ac6:	0c1b      	lsrs	r3, r3, #16
 8009ac8:	ebac 0101 	sub.w	r1, ip, r1
 8009acc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009ad0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009ad4:	b289      	uxth	r1, r1
 8009ad6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8009ada:	454e      	cmp	r6, r9
 8009adc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009ae0:	f84a 3b04 	str.w	r3, [sl], #4
 8009ae4:	d8e7      	bhi.n	8009ab6 <__mdiff+0x7e>
 8009ae6:	1b73      	subs	r3, r6, r5
 8009ae8:	3b15      	subs	r3, #21
 8009aea:	f023 0303 	bic.w	r3, r3, #3
 8009aee:	3515      	adds	r5, #21
 8009af0:	3304      	adds	r3, #4
 8009af2:	42ae      	cmp	r6, r5
 8009af4:	bf38      	it	cc
 8009af6:	2304      	movcc	r3, #4
 8009af8:	4418      	add	r0, r3
 8009afa:	4443      	add	r3, r8
 8009afc:	461e      	mov	r6, r3
 8009afe:	4605      	mov	r5, r0
 8009b00:	4575      	cmp	r5, lr
 8009b02:	d30e      	bcc.n	8009b22 <__mdiff+0xea>
 8009b04:	f10e 0103 	add.w	r1, lr, #3
 8009b08:	1a09      	subs	r1, r1, r0
 8009b0a:	f021 0103 	bic.w	r1, r1, #3
 8009b0e:	3803      	subs	r0, #3
 8009b10:	4586      	cmp	lr, r0
 8009b12:	bf38      	it	cc
 8009b14:	2100      	movcc	r1, #0
 8009b16:	4419      	add	r1, r3
 8009b18:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009b1c:	b18b      	cbz	r3, 8009b42 <__mdiff+0x10a>
 8009b1e:	6117      	str	r7, [r2, #16]
 8009b20:	e7a4      	b.n	8009a6c <__mdiff+0x34>
 8009b22:	f855 8b04 	ldr.w	r8, [r5], #4
 8009b26:	fa1f f188 	uxth.w	r1, r8
 8009b2a:	4461      	add	r1, ip
 8009b2c:	140c      	asrs	r4, r1, #16
 8009b2e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009b32:	b289      	uxth	r1, r1
 8009b34:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009b38:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8009b3c:	f846 1b04 	str.w	r1, [r6], #4
 8009b40:	e7de      	b.n	8009b00 <__mdiff+0xc8>
 8009b42:	3f01      	subs	r7, #1
 8009b44:	e7e8      	b.n	8009b18 <__mdiff+0xe0>
 8009b46:	bf00      	nop
 8009b48:	0800c400 	.word	0x0800c400
 8009b4c:	0800c4f0 	.word	0x0800c4f0

08009b50 <__ulp>:
 8009b50:	4b11      	ldr	r3, [pc, #68]	; (8009b98 <__ulp+0x48>)
 8009b52:	400b      	ands	r3, r1
 8009b54:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	dd02      	ble.n	8009b62 <__ulp+0x12>
 8009b5c:	2000      	movs	r0, #0
 8009b5e:	4619      	mov	r1, r3
 8009b60:	4770      	bx	lr
 8009b62:	425b      	negs	r3, r3
 8009b64:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8009b68:	f04f 0000 	mov.w	r0, #0
 8009b6c:	f04f 0100 	mov.w	r1, #0
 8009b70:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009b74:	da04      	bge.n	8009b80 <__ulp+0x30>
 8009b76:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009b7a:	fa43 f102 	asr.w	r1, r3, r2
 8009b7e:	4770      	bx	lr
 8009b80:	f1a2 0314 	sub.w	r3, r2, #20
 8009b84:	2b1e      	cmp	r3, #30
 8009b86:	bfd6      	itet	le
 8009b88:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8009b8c:	2301      	movgt	r3, #1
 8009b8e:	fa22 f303 	lsrle.w	r3, r2, r3
 8009b92:	4618      	mov	r0, r3
 8009b94:	4770      	bx	lr
 8009b96:	bf00      	nop
 8009b98:	7ff00000 	.word	0x7ff00000

08009b9c <__b2d>:
 8009b9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ba0:	6907      	ldr	r7, [r0, #16]
 8009ba2:	f100 0914 	add.w	r9, r0, #20
 8009ba6:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8009baa:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8009bae:	f1a7 0804 	sub.w	r8, r7, #4
 8009bb2:	4630      	mov	r0, r6
 8009bb4:	f7ff fd4e 	bl	8009654 <__hi0bits>
 8009bb8:	f1c0 0320 	rsb	r3, r0, #32
 8009bbc:	280a      	cmp	r0, #10
 8009bbe:	600b      	str	r3, [r1, #0]
 8009bc0:	491f      	ldr	r1, [pc, #124]	; (8009c40 <__b2d+0xa4>)
 8009bc2:	dc17      	bgt.n	8009bf4 <__b2d+0x58>
 8009bc4:	45c1      	cmp	r9, r8
 8009bc6:	bf28      	it	cs
 8009bc8:	2200      	movcs	r2, #0
 8009bca:	f1c0 0c0b 	rsb	ip, r0, #11
 8009bce:	fa26 f30c 	lsr.w	r3, r6, ip
 8009bd2:	bf38      	it	cc
 8009bd4:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009bd8:	ea43 0501 	orr.w	r5, r3, r1
 8009bdc:	f100 0315 	add.w	r3, r0, #21
 8009be0:	fa06 f303 	lsl.w	r3, r6, r3
 8009be4:	fa22 f20c 	lsr.w	r2, r2, ip
 8009be8:	ea43 0402 	orr.w	r4, r3, r2
 8009bec:	4620      	mov	r0, r4
 8009bee:	4629      	mov	r1, r5
 8009bf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bf4:	45c1      	cmp	r9, r8
 8009bf6:	bf2e      	itee	cs
 8009bf8:	2200      	movcs	r2, #0
 8009bfa:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009bfe:	f1a7 0808 	subcc.w	r8, r7, #8
 8009c02:	f1b0 030b 	subs.w	r3, r0, #11
 8009c06:	d016      	beq.n	8009c36 <__b2d+0x9a>
 8009c08:	f1c3 0720 	rsb	r7, r3, #32
 8009c0c:	fa22 f107 	lsr.w	r1, r2, r7
 8009c10:	45c8      	cmp	r8, r9
 8009c12:	fa06 f603 	lsl.w	r6, r6, r3
 8009c16:	ea46 0601 	orr.w	r6, r6, r1
 8009c1a:	bf94      	ite	ls
 8009c1c:	2100      	movls	r1, #0
 8009c1e:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8009c22:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8009c26:	fa02 f003 	lsl.w	r0, r2, r3
 8009c2a:	40f9      	lsrs	r1, r7
 8009c2c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009c30:	ea40 0401 	orr.w	r4, r0, r1
 8009c34:	e7da      	b.n	8009bec <__b2d+0x50>
 8009c36:	4614      	mov	r4, r2
 8009c38:	ea46 0501 	orr.w	r5, r6, r1
 8009c3c:	e7d6      	b.n	8009bec <__b2d+0x50>
 8009c3e:	bf00      	nop
 8009c40:	3ff00000 	.word	0x3ff00000

08009c44 <__d2b>:
 8009c44:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009c48:	2101      	movs	r1, #1
 8009c4a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8009c4e:	4690      	mov	r8, r2
 8009c50:	461d      	mov	r5, r3
 8009c52:	f7ff fc0d 	bl	8009470 <_Balloc>
 8009c56:	4604      	mov	r4, r0
 8009c58:	b930      	cbnz	r0, 8009c68 <__d2b+0x24>
 8009c5a:	4602      	mov	r2, r0
 8009c5c:	f240 310a 	movw	r1, #778	; 0x30a
 8009c60:	4b24      	ldr	r3, [pc, #144]	; (8009cf4 <__d2b+0xb0>)
 8009c62:	4825      	ldr	r0, [pc, #148]	; (8009cf8 <__d2b+0xb4>)
 8009c64:	f000 fcec 	bl	800a640 <__assert_func>
 8009c68:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8009c6c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8009c70:	bb2d      	cbnz	r5, 8009cbe <__d2b+0x7a>
 8009c72:	9301      	str	r3, [sp, #4]
 8009c74:	f1b8 0300 	subs.w	r3, r8, #0
 8009c78:	d026      	beq.n	8009cc8 <__d2b+0x84>
 8009c7a:	4668      	mov	r0, sp
 8009c7c:	9300      	str	r3, [sp, #0]
 8009c7e:	f7ff fd09 	bl	8009694 <__lo0bits>
 8009c82:	9900      	ldr	r1, [sp, #0]
 8009c84:	b1f0      	cbz	r0, 8009cc4 <__d2b+0x80>
 8009c86:	9a01      	ldr	r2, [sp, #4]
 8009c88:	f1c0 0320 	rsb	r3, r0, #32
 8009c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8009c90:	430b      	orrs	r3, r1
 8009c92:	40c2      	lsrs	r2, r0
 8009c94:	6163      	str	r3, [r4, #20]
 8009c96:	9201      	str	r2, [sp, #4]
 8009c98:	9b01      	ldr	r3, [sp, #4]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	bf14      	ite	ne
 8009c9e:	2102      	movne	r1, #2
 8009ca0:	2101      	moveq	r1, #1
 8009ca2:	61a3      	str	r3, [r4, #24]
 8009ca4:	6121      	str	r1, [r4, #16]
 8009ca6:	b1c5      	cbz	r5, 8009cda <__d2b+0x96>
 8009ca8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009cac:	4405      	add	r5, r0
 8009cae:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009cb2:	603d      	str	r5, [r7, #0]
 8009cb4:	6030      	str	r0, [r6, #0]
 8009cb6:	4620      	mov	r0, r4
 8009cb8:	b002      	add	sp, #8
 8009cba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009cc2:	e7d6      	b.n	8009c72 <__d2b+0x2e>
 8009cc4:	6161      	str	r1, [r4, #20]
 8009cc6:	e7e7      	b.n	8009c98 <__d2b+0x54>
 8009cc8:	a801      	add	r0, sp, #4
 8009cca:	f7ff fce3 	bl	8009694 <__lo0bits>
 8009cce:	2101      	movs	r1, #1
 8009cd0:	9b01      	ldr	r3, [sp, #4]
 8009cd2:	6121      	str	r1, [r4, #16]
 8009cd4:	6163      	str	r3, [r4, #20]
 8009cd6:	3020      	adds	r0, #32
 8009cd8:	e7e5      	b.n	8009ca6 <__d2b+0x62>
 8009cda:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8009cde:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009ce2:	6038      	str	r0, [r7, #0]
 8009ce4:	6918      	ldr	r0, [r3, #16]
 8009ce6:	f7ff fcb5 	bl	8009654 <__hi0bits>
 8009cea:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8009cee:	6031      	str	r1, [r6, #0]
 8009cf0:	e7e1      	b.n	8009cb6 <__d2b+0x72>
 8009cf2:	bf00      	nop
 8009cf4:	0800c400 	.word	0x0800c400
 8009cf8:	0800c4f0 	.word	0x0800c4f0

08009cfc <__ratio>:
 8009cfc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d00:	4688      	mov	r8, r1
 8009d02:	4669      	mov	r1, sp
 8009d04:	4681      	mov	r9, r0
 8009d06:	f7ff ff49 	bl	8009b9c <__b2d>
 8009d0a:	460f      	mov	r7, r1
 8009d0c:	4604      	mov	r4, r0
 8009d0e:	460d      	mov	r5, r1
 8009d10:	4640      	mov	r0, r8
 8009d12:	a901      	add	r1, sp, #4
 8009d14:	f7ff ff42 	bl	8009b9c <__b2d>
 8009d18:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009d1c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009d20:	468b      	mov	fp, r1
 8009d22:	eba3 0c02 	sub.w	ip, r3, r2
 8009d26:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009d2a:	1a9b      	subs	r3, r3, r2
 8009d2c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	bfd5      	itete	le
 8009d34:	460a      	movle	r2, r1
 8009d36:	462a      	movgt	r2, r5
 8009d38:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009d3c:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009d40:	bfd8      	it	le
 8009d42:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009d46:	465b      	mov	r3, fp
 8009d48:	4602      	mov	r2, r0
 8009d4a:	4639      	mov	r1, r7
 8009d4c:	4620      	mov	r0, r4
 8009d4e:	f7f6 fced 	bl	800072c <__aeabi_ddiv>
 8009d52:	b003      	add	sp, #12
 8009d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009d58 <__copybits>:
 8009d58:	3901      	subs	r1, #1
 8009d5a:	b570      	push	{r4, r5, r6, lr}
 8009d5c:	1149      	asrs	r1, r1, #5
 8009d5e:	6914      	ldr	r4, [r2, #16]
 8009d60:	3101      	adds	r1, #1
 8009d62:	f102 0314 	add.w	r3, r2, #20
 8009d66:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009d6a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009d6e:	1f05      	subs	r5, r0, #4
 8009d70:	42a3      	cmp	r3, r4
 8009d72:	d30c      	bcc.n	8009d8e <__copybits+0x36>
 8009d74:	1aa3      	subs	r3, r4, r2
 8009d76:	3b11      	subs	r3, #17
 8009d78:	f023 0303 	bic.w	r3, r3, #3
 8009d7c:	3211      	adds	r2, #17
 8009d7e:	42a2      	cmp	r2, r4
 8009d80:	bf88      	it	hi
 8009d82:	2300      	movhi	r3, #0
 8009d84:	4418      	add	r0, r3
 8009d86:	2300      	movs	r3, #0
 8009d88:	4288      	cmp	r0, r1
 8009d8a:	d305      	bcc.n	8009d98 <__copybits+0x40>
 8009d8c:	bd70      	pop	{r4, r5, r6, pc}
 8009d8e:	f853 6b04 	ldr.w	r6, [r3], #4
 8009d92:	f845 6f04 	str.w	r6, [r5, #4]!
 8009d96:	e7eb      	b.n	8009d70 <__copybits+0x18>
 8009d98:	f840 3b04 	str.w	r3, [r0], #4
 8009d9c:	e7f4      	b.n	8009d88 <__copybits+0x30>

08009d9e <__any_on>:
 8009d9e:	f100 0214 	add.w	r2, r0, #20
 8009da2:	6900      	ldr	r0, [r0, #16]
 8009da4:	114b      	asrs	r3, r1, #5
 8009da6:	4298      	cmp	r0, r3
 8009da8:	b510      	push	{r4, lr}
 8009daa:	db11      	blt.n	8009dd0 <__any_on+0x32>
 8009dac:	dd0a      	ble.n	8009dc4 <__any_on+0x26>
 8009dae:	f011 011f 	ands.w	r1, r1, #31
 8009db2:	d007      	beq.n	8009dc4 <__any_on+0x26>
 8009db4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009db8:	fa24 f001 	lsr.w	r0, r4, r1
 8009dbc:	fa00 f101 	lsl.w	r1, r0, r1
 8009dc0:	428c      	cmp	r4, r1
 8009dc2:	d10b      	bne.n	8009ddc <__any_on+0x3e>
 8009dc4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009dc8:	4293      	cmp	r3, r2
 8009dca:	d803      	bhi.n	8009dd4 <__any_on+0x36>
 8009dcc:	2000      	movs	r0, #0
 8009dce:	bd10      	pop	{r4, pc}
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	e7f7      	b.n	8009dc4 <__any_on+0x26>
 8009dd4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009dd8:	2900      	cmp	r1, #0
 8009dda:	d0f5      	beq.n	8009dc8 <__any_on+0x2a>
 8009ddc:	2001      	movs	r0, #1
 8009dde:	e7f6      	b.n	8009dce <__any_on+0x30>

08009de0 <_calloc_r>:
 8009de0:	b570      	push	{r4, r5, r6, lr}
 8009de2:	fba1 5402 	umull	r5, r4, r1, r2
 8009de6:	b934      	cbnz	r4, 8009df6 <_calloc_r+0x16>
 8009de8:	4629      	mov	r1, r5
 8009dea:	f000 f875 	bl	8009ed8 <_malloc_r>
 8009dee:	4606      	mov	r6, r0
 8009df0:	b928      	cbnz	r0, 8009dfe <_calloc_r+0x1e>
 8009df2:	4630      	mov	r0, r6
 8009df4:	bd70      	pop	{r4, r5, r6, pc}
 8009df6:	220c      	movs	r2, #12
 8009df8:	2600      	movs	r6, #0
 8009dfa:	6002      	str	r2, [r0, #0]
 8009dfc:	e7f9      	b.n	8009df2 <_calloc_r+0x12>
 8009dfe:	462a      	mov	r2, r5
 8009e00:	4621      	mov	r1, r4
 8009e02:	f7fc f889 	bl	8005f18 <memset>
 8009e06:	e7f4      	b.n	8009df2 <_calloc_r+0x12>

08009e08 <_free_r>:
 8009e08:	b538      	push	{r3, r4, r5, lr}
 8009e0a:	4605      	mov	r5, r0
 8009e0c:	2900      	cmp	r1, #0
 8009e0e:	d040      	beq.n	8009e92 <_free_r+0x8a>
 8009e10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e14:	1f0c      	subs	r4, r1, #4
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	bfb8      	it	lt
 8009e1a:	18e4      	addlt	r4, r4, r3
 8009e1c:	f000 fc9e 	bl	800a75c <__malloc_lock>
 8009e20:	4a1c      	ldr	r2, [pc, #112]	; (8009e94 <_free_r+0x8c>)
 8009e22:	6813      	ldr	r3, [r2, #0]
 8009e24:	b933      	cbnz	r3, 8009e34 <_free_r+0x2c>
 8009e26:	6063      	str	r3, [r4, #4]
 8009e28:	6014      	str	r4, [r2, #0]
 8009e2a:	4628      	mov	r0, r5
 8009e2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e30:	f000 bc9a 	b.w	800a768 <__malloc_unlock>
 8009e34:	42a3      	cmp	r3, r4
 8009e36:	d908      	bls.n	8009e4a <_free_r+0x42>
 8009e38:	6820      	ldr	r0, [r4, #0]
 8009e3a:	1821      	adds	r1, r4, r0
 8009e3c:	428b      	cmp	r3, r1
 8009e3e:	bf01      	itttt	eq
 8009e40:	6819      	ldreq	r1, [r3, #0]
 8009e42:	685b      	ldreq	r3, [r3, #4]
 8009e44:	1809      	addeq	r1, r1, r0
 8009e46:	6021      	streq	r1, [r4, #0]
 8009e48:	e7ed      	b.n	8009e26 <_free_r+0x1e>
 8009e4a:	461a      	mov	r2, r3
 8009e4c:	685b      	ldr	r3, [r3, #4]
 8009e4e:	b10b      	cbz	r3, 8009e54 <_free_r+0x4c>
 8009e50:	42a3      	cmp	r3, r4
 8009e52:	d9fa      	bls.n	8009e4a <_free_r+0x42>
 8009e54:	6811      	ldr	r1, [r2, #0]
 8009e56:	1850      	adds	r0, r2, r1
 8009e58:	42a0      	cmp	r0, r4
 8009e5a:	d10b      	bne.n	8009e74 <_free_r+0x6c>
 8009e5c:	6820      	ldr	r0, [r4, #0]
 8009e5e:	4401      	add	r1, r0
 8009e60:	1850      	adds	r0, r2, r1
 8009e62:	4283      	cmp	r3, r0
 8009e64:	6011      	str	r1, [r2, #0]
 8009e66:	d1e0      	bne.n	8009e2a <_free_r+0x22>
 8009e68:	6818      	ldr	r0, [r3, #0]
 8009e6a:	685b      	ldr	r3, [r3, #4]
 8009e6c:	4401      	add	r1, r0
 8009e6e:	6011      	str	r1, [r2, #0]
 8009e70:	6053      	str	r3, [r2, #4]
 8009e72:	e7da      	b.n	8009e2a <_free_r+0x22>
 8009e74:	d902      	bls.n	8009e7c <_free_r+0x74>
 8009e76:	230c      	movs	r3, #12
 8009e78:	602b      	str	r3, [r5, #0]
 8009e7a:	e7d6      	b.n	8009e2a <_free_r+0x22>
 8009e7c:	6820      	ldr	r0, [r4, #0]
 8009e7e:	1821      	adds	r1, r4, r0
 8009e80:	428b      	cmp	r3, r1
 8009e82:	bf01      	itttt	eq
 8009e84:	6819      	ldreq	r1, [r3, #0]
 8009e86:	685b      	ldreq	r3, [r3, #4]
 8009e88:	1809      	addeq	r1, r1, r0
 8009e8a:	6021      	streq	r1, [r4, #0]
 8009e8c:	6063      	str	r3, [r4, #4]
 8009e8e:	6054      	str	r4, [r2, #4]
 8009e90:	e7cb      	b.n	8009e2a <_free_r+0x22>
 8009e92:	bd38      	pop	{r3, r4, r5, pc}
 8009e94:	20001160 	.word	0x20001160

08009e98 <sbrk_aligned>:
 8009e98:	b570      	push	{r4, r5, r6, lr}
 8009e9a:	4e0e      	ldr	r6, [pc, #56]	; (8009ed4 <sbrk_aligned+0x3c>)
 8009e9c:	460c      	mov	r4, r1
 8009e9e:	6831      	ldr	r1, [r6, #0]
 8009ea0:	4605      	mov	r5, r0
 8009ea2:	b911      	cbnz	r1, 8009eaa <sbrk_aligned+0x12>
 8009ea4:	f000 fb46 	bl	800a534 <_sbrk_r>
 8009ea8:	6030      	str	r0, [r6, #0]
 8009eaa:	4621      	mov	r1, r4
 8009eac:	4628      	mov	r0, r5
 8009eae:	f000 fb41 	bl	800a534 <_sbrk_r>
 8009eb2:	1c43      	adds	r3, r0, #1
 8009eb4:	d00a      	beq.n	8009ecc <sbrk_aligned+0x34>
 8009eb6:	1cc4      	adds	r4, r0, #3
 8009eb8:	f024 0403 	bic.w	r4, r4, #3
 8009ebc:	42a0      	cmp	r0, r4
 8009ebe:	d007      	beq.n	8009ed0 <sbrk_aligned+0x38>
 8009ec0:	1a21      	subs	r1, r4, r0
 8009ec2:	4628      	mov	r0, r5
 8009ec4:	f000 fb36 	bl	800a534 <_sbrk_r>
 8009ec8:	3001      	adds	r0, #1
 8009eca:	d101      	bne.n	8009ed0 <sbrk_aligned+0x38>
 8009ecc:	f04f 34ff 	mov.w	r4, #4294967295
 8009ed0:	4620      	mov	r0, r4
 8009ed2:	bd70      	pop	{r4, r5, r6, pc}
 8009ed4:	20001164 	.word	0x20001164

08009ed8 <_malloc_r>:
 8009ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009edc:	1ccd      	adds	r5, r1, #3
 8009ede:	f025 0503 	bic.w	r5, r5, #3
 8009ee2:	3508      	adds	r5, #8
 8009ee4:	2d0c      	cmp	r5, #12
 8009ee6:	bf38      	it	cc
 8009ee8:	250c      	movcc	r5, #12
 8009eea:	2d00      	cmp	r5, #0
 8009eec:	4607      	mov	r7, r0
 8009eee:	db01      	blt.n	8009ef4 <_malloc_r+0x1c>
 8009ef0:	42a9      	cmp	r1, r5
 8009ef2:	d905      	bls.n	8009f00 <_malloc_r+0x28>
 8009ef4:	230c      	movs	r3, #12
 8009ef6:	2600      	movs	r6, #0
 8009ef8:	603b      	str	r3, [r7, #0]
 8009efa:	4630      	mov	r0, r6
 8009efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f00:	4e2e      	ldr	r6, [pc, #184]	; (8009fbc <_malloc_r+0xe4>)
 8009f02:	f000 fc2b 	bl	800a75c <__malloc_lock>
 8009f06:	6833      	ldr	r3, [r6, #0]
 8009f08:	461c      	mov	r4, r3
 8009f0a:	bb34      	cbnz	r4, 8009f5a <_malloc_r+0x82>
 8009f0c:	4629      	mov	r1, r5
 8009f0e:	4638      	mov	r0, r7
 8009f10:	f7ff ffc2 	bl	8009e98 <sbrk_aligned>
 8009f14:	1c43      	adds	r3, r0, #1
 8009f16:	4604      	mov	r4, r0
 8009f18:	d14d      	bne.n	8009fb6 <_malloc_r+0xde>
 8009f1a:	6834      	ldr	r4, [r6, #0]
 8009f1c:	4626      	mov	r6, r4
 8009f1e:	2e00      	cmp	r6, #0
 8009f20:	d140      	bne.n	8009fa4 <_malloc_r+0xcc>
 8009f22:	6823      	ldr	r3, [r4, #0]
 8009f24:	4631      	mov	r1, r6
 8009f26:	4638      	mov	r0, r7
 8009f28:	eb04 0803 	add.w	r8, r4, r3
 8009f2c:	f000 fb02 	bl	800a534 <_sbrk_r>
 8009f30:	4580      	cmp	r8, r0
 8009f32:	d13a      	bne.n	8009faa <_malloc_r+0xd2>
 8009f34:	6821      	ldr	r1, [r4, #0]
 8009f36:	3503      	adds	r5, #3
 8009f38:	1a6d      	subs	r5, r5, r1
 8009f3a:	f025 0503 	bic.w	r5, r5, #3
 8009f3e:	3508      	adds	r5, #8
 8009f40:	2d0c      	cmp	r5, #12
 8009f42:	bf38      	it	cc
 8009f44:	250c      	movcc	r5, #12
 8009f46:	4638      	mov	r0, r7
 8009f48:	4629      	mov	r1, r5
 8009f4a:	f7ff ffa5 	bl	8009e98 <sbrk_aligned>
 8009f4e:	3001      	adds	r0, #1
 8009f50:	d02b      	beq.n	8009faa <_malloc_r+0xd2>
 8009f52:	6823      	ldr	r3, [r4, #0]
 8009f54:	442b      	add	r3, r5
 8009f56:	6023      	str	r3, [r4, #0]
 8009f58:	e00e      	b.n	8009f78 <_malloc_r+0xa0>
 8009f5a:	6822      	ldr	r2, [r4, #0]
 8009f5c:	1b52      	subs	r2, r2, r5
 8009f5e:	d41e      	bmi.n	8009f9e <_malloc_r+0xc6>
 8009f60:	2a0b      	cmp	r2, #11
 8009f62:	d916      	bls.n	8009f92 <_malloc_r+0xba>
 8009f64:	1961      	adds	r1, r4, r5
 8009f66:	42a3      	cmp	r3, r4
 8009f68:	6025      	str	r5, [r4, #0]
 8009f6a:	bf18      	it	ne
 8009f6c:	6059      	strne	r1, [r3, #4]
 8009f6e:	6863      	ldr	r3, [r4, #4]
 8009f70:	bf08      	it	eq
 8009f72:	6031      	streq	r1, [r6, #0]
 8009f74:	5162      	str	r2, [r4, r5]
 8009f76:	604b      	str	r3, [r1, #4]
 8009f78:	4638      	mov	r0, r7
 8009f7a:	f104 060b 	add.w	r6, r4, #11
 8009f7e:	f000 fbf3 	bl	800a768 <__malloc_unlock>
 8009f82:	f026 0607 	bic.w	r6, r6, #7
 8009f86:	1d23      	adds	r3, r4, #4
 8009f88:	1af2      	subs	r2, r6, r3
 8009f8a:	d0b6      	beq.n	8009efa <_malloc_r+0x22>
 8009f8c:	1b9b      	subs	r3, r3, r6
 8009f8e:	50a3      	str	r3, [r4, r2]
 8009f90:	e7b3      	b.n	8009efa <_malloc_r+0x22>
 8009f92:	6862      	ldr	r2, [r4, #4]
 8009f94:	42a3      	cmp	r3, r4
 8009f96:	bf0c      	ite	eq
 8009f98:	6032      	streq	r2, [r6, #0]
 8009f9a:	605a      	strne	r2, [r3, #4]
 8009f9c:	e7ec      	b.n	8009f78 <_malloc_r+0xa0>
 8009f9e:	4623      	mov	r3, r4
 8009fa0:	6864      	ldr	r4, [r4, #4]
 8009fa2:	e7b2      	b.n	8009f0a <_malloc_r+0x32>
 8009fa4:	4634      	mov	r4, r6
 8009fa6:	6876      	ldr	r6, [r6, #4]
 8009fa8:	e7b9      	b.n	8009f1e <_malloc_r+0x46>
 8009faa:	230c      	movs	r3, #12
 8009fac:	4638      	mov	r0, r7
 8009fae:	603b      	str	r3, [r7, #0]
 8009fb0:	f000 fbda 	bl	800a768 <__malloc_unlock>
 8009fb4:	e7a1      	b.n	8009efa <_malloc_r+0x22>
 8009fb6:	6025      	str	r5, [r4, #0]
 8009fb8:	e7de      	b.n	8009f78 <_malloc_r+0xa0>
 8009fba:	bf00      	nop
 8009fbc:	20001160 	.word	0x20001160

08009fc0 <__ssputs_r>:
 8009fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fc4:	688e      	ldr	r6, [r1, #8]
 8009fc6:	4682      	mov	sl, r0
 8009fc8:	429e      	cmp	r6, r3
 8009fca:	460c      	mov	r4, r1
 8009fcc:	4690      	mov	r8, r2
 8009fce:	461f      	mov	r7, r3
 8009fd0:	d838      	bhi.n	800a044 <__ssputs_r+0x84>
 8009fd2:	898a      	ldrh	r2, [r1, #12]
 8009fd4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009fd8:	d032      	beq.n	800a040 <__ssputs_r+0x80>
 8009fda:	6825      	ldr	r5, [r4, #0]
 8009fdc:	6909      	ldr	r1, [r1, #16]
 8009fde:	3301      	adds	r3, #1
 8009fe0:	eba5 0901 	sub.w	r9, r5, r1
 8009fe4:	6965      	ldr	r5, [r4, #20]
 8009fe6:	444b      	add	r3, r9
 8009fe8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009fec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009ff0:	106d      	asrs	r5, r5, #1
 8009ff2:	429d      	cmp	r5, r3
 8009ff4:	bf38      	it	cc
 8009ff6:	461d      	movcc	r5, r3
 8009ff8:	0553      	lsls	r3, r2, #21
 8009ffa:	d531      	bpl.n	800a060 <__ssputs_r+0xa0>
 8009ffc:	4629      	mov	r1, r5
 8009ffe:	f7ff ff6b 	bl	8009ed8 <_malloc_r>
 800a002:	4606      	mov	r6, r0
 800a004:	b950      	cbnz	r0, 800a01c <__ssputs_r+0x5c>
 800a006:	230c      	movs	r3, #12
 800a008:	f04f 30ff 	mov.w	r0, #4294967295
 800a00c:	f8ca 3000 	str.w	r3, [sl]
 800a010:	89a3      	ldrh	r3, [r4, #12]
 800a012:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a016:	81a3      	strh	r3, [r4, #12]
 800a018:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a01c:	464a      	mov	r2, r9
 800a01e:	6921      	ldr	r1, [r4, #16]
 800a020:	f7fb ff6c 	bl	8005efc <memcpy>
 800a024:	89a3      	ldrh	r3, [r4, #12]
 800a026:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a02a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a02e:	81a3      	strh	r3, [r4, #12]
 800a030:	6126      	str	r6, [r4, #16]
 800a032:	444e      	add	r6, r9
 800a034:	6026      	str	r6, [r4, #0]
 800a036:	463e      	mov	r6, r7
 800a038:	6165      	str	r5, [r4, #20]
 800a03a:	eba5 0509 	sub.w	r5, r5, r9
 800a03e:	60a5      	str	r5, [r4, #8]
 800a040:	42be      	cmp	r6, r7
 800a042:	d900      	bls.n	800a046 <__ssputs_r+0x86>
 800a044:	463e      	mov	r6, r7
 800a046:	4632      	mov	r2, r6
 800a048:	4641      	mov	r1, r8
 800a04a:	6820      	ldr	r0, [r4, #0]
 800a04c:	f000 fb6c 	bl	800a728 <memmove>
 800a050:	68a3      	ldr	r3, [r4, #8]
 800a052:	2000      	movs	r0, #0
 800a054:	1b9b      	subs	r3, r3, r6
 800a056:	60a3      	str	r3, [r4, #8]
 800a058:	6823      	ldr	r3, [r4, #0]
 800a05a:	4433      	add	r3, r6
 800a05c:	6023      	str	r3, [r4, #0]
 800a05e:	e7db      	b.n	800a018 <__ssputs_r+0x58>
 800a060:	462a      	mov	r2, r5
 800a062:	f000 fb87 	bl	800a774 <_realloc_r>
 800a066:	4606      	mov	r6, r0
 800a068:	2800      	cmp	r0, #0
 800a06a:	d1e1      	bne.n	800a030 <__ssputs_r+0x70>
 800a06c:	4650      	mov	r0, sl
 800a06e:	6921      	ldr	r1, [r4, #16]
 800a070:	f7ff feca 	bl	8009e08 <_free_r>
 800a074:	e7c7      	b.n	800a006 <__ssputs_r+0x46>
	...

0800a078 <_svfiprintf_r>:
 800a078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a07c:	4698      	mov	r8, r3
 800a07e:	898b      	ldrh	r3, [r1, #12]
 800a080:	4607      	mov	r7, r0
 800a082:	061b      	lsls	r3, r3, #24
 800a084:	460d      	mov	r5, r1
 800a086:	4614      	mov	r4, r2
 800a088:	b09d      	sub	sp, #116	; 0x74
 800a08a:	d50e      	bpl.n	800a0aa <_svfiprintf_r+0x32>
 800a08c:	690b      	ldr	r3, [r1, #16]
 800a08e:	b963      	cbnz	r3, 800a0aa <_svfiprintf_r+0x32>
 800a090:	2140      	movs	r1, #64	; 0x40
 800a092:	f7ff ff21 	bl	8009ed8 <_malloc_r>
 800a096:	6028      	str	r0, [r5, #0]
 800a098:	6128      	str	r0, [r5, #16]
 800a09a:	b920      	cbnz	r0, 800a0a6 <_svfiprintf_r+0x2e>
 800a09c:	230c      	movs	r3, #12
 800a09e:	603b      	str	r3, [r7, #0]
 800a0a0:	f04f 30ff 	mov.w	r0, #4294967295
 800a0a4:	e0d1      	b.n	800a24a <_svfiprintf_r+0x1d2>
 800a0a6:	2340      	movs	r3, #64	; 0x40
 800a0a8:	616b      	str	r3, [r5, #20]
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	9309      	str	r3, [sp, #36]	; 0x24
 800a0ae:	2320      	movs	r3, #32
 800a0b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a0b4:	2330      	movs	r3, #48	; 0x30
 800a0b6:	f04f 0901 	mov.w	r9, #1
 800a0ba:	f8cd 800c 	str.w	r8, [sp, #12]
 800a0be:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a264 <_svfiprintf_r+0x1ec>
 800a0c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a0c6:	4623      	mov	r3, r4
 800a0c8:	469a      	mov	sl, r3
 800a0ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a0ce:	b10a      	cbz	r2, 800a0d4 <_svfiprintf_r+0x5c>
 800a0d0:	2a25      	cmp	r2, #37	; 0x25
 800a0d2:	d1f9      	bne.n	800a0c8 <_svfiprintf_r+0x50>
 800a0d4:	ebba 0b04 	subs.w	fp, sl, r4
 800a0d8:	d00b      	beq.n	800a0f2 <_svfiprintf_r+0x7a>
 800a0da:	465b      	mov	r3, fp
 800a0dc:	4622      	mov	r2, r4
 800a0de:	4629      	mov	r1, r5
 800a0e0:	4638      	mov	r0, r7
 800a0e2:	f7ff ff6d 	bl	8009fc0 <__ssputs_r>
 800a0e6:	3001      	adds	r0, #1
 800a0e8:	f000 80aa 	beq.w	800a240 <_svfiprintf_r+0x1c8>
 800a0ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0ee:	445a      	add	r2, fp
 800a0f0:	9209      	str	r2, [sp, #36]	; 0x24
 800a0f2:	f89a 3000 	ldrb.w	r3, [sl]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	f000 80a2 	beq.w	800a240 <_svfiprintf_r+0x1c8>
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	f04f 32ff 	mov.w	r2, #4294967295
 800a102:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a106:	f10a 0a01 	add.w	sl, sl, #1
 800a10a:	9304      	str	r3, [sp, #16]
 800a10c:	9307      	str	r3, [sp, #28]
 800a10e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a112:	931a      	str	r3, [sp, #104]	; 0x68
 800a114:	4654      	mov	r4, sl
 800a116:	2205      	movs	r2, #5
 800a118:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a11c:	4851      	ldr	r0, [pc, #324]	; (800a264 <_svfiprintf_r+0x1ec>)
 800a11e:	f7ff f999 	bl	8009454 <memchr>
 800a122:	9a04      	ldr	r2, [sp, #16]
 800a124:	b9d8      	cbnz	r0, 800a15e <_svfiprintf_r+0xe6>
 800a126:	06d0      	lsls	r0, r2, #27
 800a128:	bf44      	itt	mi
 800a12a:	2320      	movmi	r3, #32
 800a12c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a130:	0711      	lsls	r1, r2, #28
 800a132:	bf44      	itt	mi
 800a134:	232b      	movmi	r3, #43	; 0x2b
 800a136:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a13a:	f89a 3000 	ldrb.w	r3, [sl]
 800a13e:	2b2a      	cmp	r3, #42	; 0x2a
 800a140:	d015      	beq.n	800a16e <_svfiprintf_r+0xf6>
 800a142:	4654      	mov	r4, sl
 800a144:	2000      	movs	r0, #0
 800a146:	f04f 0c0a 	mov.w	ip, #10
 800a14a:	9a07      	ldr	r2, [sp, #28]
 800a14c:	4621      	mov	r1, r4
 800a14e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a152:	3b30      	subs	r3, #48	; 0x30
 800a154:	2b09      	cmp	r3, #9
 800a156:	d94e      	bls.n	800a1f6 <_svfiprintf_r+0x17e>
 800a158:	b1b0      	cbz	r0, 800a188 <_svfiprintf_r+0x110>
 800a15a:	9207      	str	r2, [sp, #28]
 800a15c:	e014      	b.n	800a188 <_svfiprintf_r+0x110>
 800a15e:	eba0 0308 	sub.w	r3, r0, r8
 800a162:	fa09 f303 	lsl.w	r3, r9, r3
 800a166:	4313      	orrs	r3, r2
 800a168:	46a2      	mov	sl, r4
 800a16a:	9304      	str	r3, [sp, #16]
 800a16c:	e7d2      	b.n	800a114 <_svfiprintf_r+0x9c>
 800a16e:	9b03      	ldr	r3, [sp, #12]
 800a170:	1d19      	adds	r1, r3, #4
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	9103      	str	r1, [sp, #12]
 800a176:	2b00      	cmp	r3, #0
 800a178:	bfbb      	ittet	lt
 800a17a:	425b      	neglt	r3, r3
 800a17c:	f042 0202 	orrlt.w	r2, r2, #2
 800a180:	9307      	strge	r3, [sp, #28]
 800a182:	9307      	strlt	r3, [sp, #28]
 800a184:	bfb8      	it	lt
 800a186:	9204      	strlt	r2, [sp, #16]
 800a188:	7823      	ldrb	r3, [r4, #0]
 800a18a:	2b2e      	cmp	r3, #46	; 0x2e
 800a18c:	d10c      	bne.n	800a1a8 <_svfiprintf_r+0x130>
 800a18e:	7863      	ldrb	r3, [r4, #1]
 800a190:	2b2a      	cmp	r3, #42	; 0x2a
 800a192:	d135      	bne.n	800a200 <_svfiprintf_r+0x188>
 800a194:	9b03      	ldr	r3, [sp, #12]
 800a196:	3402      	adds	r4, #2
 800a198:	1d1a      	adds	r2, r3, #4
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	9203      	str	r2, [sp, #12]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	bfb8      	it	lt
 800a1a2:	f04f 33ff 	movlt.w	r3, #4294967295
 800a1a6:	9305      	str	r3, [sp, #20]
 800a1a8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800a268 <_svfiprintf_r+0x1f0>
 800a1ac:	2203      	movs	r2, #3
 800a1ae:	4650      	mov	r0, sl
 800a1b0:	7821      	ldrb	r1, [r4, #0]
 800a1b2:	f7ff f94f 	bl	8009454 <memchr>
 800a1b6:	b140      	cbz	r0, 800a1ca <_svfiprintf_r+0x152>
 800a1b8:	2340      	movs	r3, #64	; 0x40
 800a1ba:	eba0 000a 	sub.w	r0, r0, sl
 800a1be:	fa03 f000 	lsl.w	r0, r3, r0
 800a1c2:	9b04      	ldr	r3, [sp, #16]
 800a1c4:	3401      	adds	r4, #1
 800a1c6:	4303      	orrs	r3, r0
 800a1c8:	9304      	str	r3, [sp, #16]
 800a1ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1ce:	2206      	movs	r2, #6
 800a1d0:	4826      	ldr	r0, [pc, #152]	; (800a26c <_svfiprintf_r+0x1f4>)
 800a1d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a1d6:	f7ff f93d 	bl	8009454 <memchr>
 800a1da:	2800      	cmp	r0, #0
 800a1dc:	d038      	beq.n	800a250 <_svfiprintf_r+0x1d8>
 800a1de:	4b24      	ldr	r3, [pc, #144]	; (800a270 <_svfiprintf_r+0x1f8>)
 800a1e0:	bb1b      	cbnz	r3, 800a22a <_svfiprintf_r+0x1b2>
 800a1e2:	9b03      	ldr	r3, [sp, #12]
 800a1e4:	3307      	adds	r3, #7
 800a1e6:	f023 0307 	bic.w	r3, r3, #7
 800a1ea:	3308      	adds	r3, #8
 800a1ec:	9303      	str	r3, [sp, #12]
 800a1ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1f0:	4433      	add	r3, r6
 800a1f2:	9309      	str	r3, [sp, #36]	; 0x24
 800a1f4:	e767      	b.n	800a0c6 <_svfiprintf_r+0x4e>
 800a1f6:	460c      	mov	r4, r1
 800a1f8:	2001      	movs	r0, #1
 800a1fa:	fb0c 3202 	mla	r2, ip, r2, r3
 800a1fe:	e7a5      	b.n	800a14c <_svfiprintf_r+0xd4>
 800a200:	2300      	movs	r3, #0
 800a202:	f04f 0c0a 	mov.w	ip, #10
 800a206:	4619      	mov	r1, r3
 800a208:	3401      	adds	r4, #1
 800a20a:	9305      	str	r3, [sp, #20]
 800a20c:	4620      	mov	r0, r4
 800a20e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a212:	3a30      	subs	r2, #48	; 0x30
 800a214:	2a09      	cmp	r2, #9
 800a216:	d903      	bls.n	800a220 <_svfiprintf_r+0x1a8>
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d0c5      	beq.n	800a1a8 <_svfiprintf_r+0x130>
 800a21c:	9105      	str	r1, [sp, #20]
 800a21e:	e7c3      	b.n	800a1a8 <_svfiprintf_r+0x130>
 800a220:	4604      	mov	r4, r0
 800a222:	2301      	movs	r3, #1
 800a224:	fb0c 2101 	mla	r1, ip, r1, r2
 800a228:	e7f0      	b.n	800a20c <_svfiprintf_r+0x194>
 800a22a:	ab03      	add	r3, sp, #12
 800a22c:	9300      	str	r3, [sp, #0]
 800a22e:	462a      	mov	r2, r5
 800a230:	4638      	mov	r0, r7
 800a232:	4b10      	ldr	r3, [pc, #64]	; (800a274 <_svfiprintf_r+0x1fc>)
 800a234:	a904      	add	r1, sp, #16
 800a236:	f7fb ff15 	bl	8006064 <_printf_float>
 800a23a:	1c42      	adds	r2, r0, #1
 800a23c:	4606      	mov	r6, r0
 800a23e:	d1d6      	bne.n	800a1ee <_svfiprintf_r+0x176>
 800a240:	89ab      	ldrh	r3, [r5, #12]
 800a242:	065b      	lsls	r3, r3, #25
 800a244:	f53f af2c 	bmi.w	800a0a0 <_svfiprintf_r+0x28>
 800a248:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a24a:	b01d      	add	sp, #116	; 0x74
 800a24c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a250:	ab03      	add	r3, sp, #12
 800a252:	9300      	str	r3, [sp, #0]
 800a254:	462a      	mov	r2, r5
 800a256:	4638      	mov	r0, r7
 800a258:	4b06      	ldr	r3, [pc, #24]	; (800a274 <_svfiprintf_r+0x1fc>)
 800a25a:	a904      	add	r1, sp, #16
 800a25c:	f7fc f99e 	bl	800659c <_printf_i>
 800a260:	e7eb      	b.n	800a23a <_svfiprintf_r+0x1c2>
 800a262:	bf00      	nop
 800a264:	0800c64c 	.word	0x0800c64c
 800a268:	0800c652 	.word	0x0800c652
 800a26c:	0800c656 	.word	0x0800c656
 800a270:	08006065 	.word	0x08006065
 800a274:	08009fc1 	.word	0x08009fc1

0800a278 <__sfputc_r>:
 800a278:	6893      	ldr	r3, [r2, #8]
 800a27a:	b410      	push	{r4}
 800a27c:	3b01      	subs	r3, #1
 800a27e:	2b00      	cmp	r3, #0
 800a280:	6093      	str	r3, [r2, #8]
 800a282:	da07      	bge.n	800a294 <__sfputc_r+0x1c>
 800a284:	6994      	ldr	r4, [r2, #24]
 800a286:	42a3      	cmp	r3, r4
 800a288:	db01      	blt.n	800a28e <__sfputc_r+0x16>
 800a28a:	290a      	cmp	r1, #10
 800a28c:	d102      	bne.n	800a294 <__sfputc_r+0x1c>
 800a28e:	bc10      	pop	{r4}
 800a290:	f7fd bc06 	b.w	8007aa0 <__swbuf_r>
 800a294:	6813      	ldr	r3, [r2, #0]
 800a296:	1c58      	adds	r0, r3, #1
 800a298:	6010      	str	r0, [r2, #0]
 800a29a:	7019      	strb	r1, [r3, #0]
 800a29c:	4608      	mov	r0, r1
 800a29e:	bc10      	pop	{r4}
 800a2a0:	4770      	bx	lr

0800a2a2 <__sfputs_r>:
 800a2a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2a4:	4606      	mov	r6, r0
 800a2a6:	460f      	mov	r7, r1
 800a2a8:	4614      	mov	r4, r2
 800a2aa:	18d5      	adds	r5, r2, r3
 800a2ac:	42ac      	cmp	r4, r5
 800a2ae:	d101      	bne.n	800a2b4 <__sfputs_r+0x12>
 800a2b0:	2000      	movs	r0, #0
 800a2b2:	e007      	b.n	800a2c4 <__sfputs_r+0x22>
 800a2b4:	463a      	mov	r2, r7
 800a2b6:	4630      	mov	r0, r6
 800a2b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2bc:	f7ff ffdc 	bl	800a278 <__sfputc_r>
 800a2c0:	1c43      	adds	r3, r0, #1
 800a2c2:	d1f3      	bne.n	800a2ac <__sfputs_r+0xa>
 800a2c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a2c8 <_vfiprintf_r>:
 800a2c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2cc:	460d      	mov	r5, r1
 800a2ce:	4614      	mov	r4, r2
 800a2d0:	4698      	mov	r8, r3
 800a2d2:	4606      	mov	r6, r0
 800a2d4:	b09d      	sub	sp, #116	; 0x74
 800a2d6:	b118      	cbz	r0, 800a2e0 <_vfiprintf_r+0x18>
 800a2d8:	6983      	ldr	r3, [r0, #24]
 800a2da:	b90b      	cbnz	r3, 800a2e0 <_vfiprintf_r+0x18>
 800a2dc:	f7fe fc30 	bl	8008b40 <__sinit>
 800a2e0:	4b89      	ldr	r3, [pc, #548]	; (800a508 <_vfiprintf_r+0x240>)
 800a2e2:	429d      	cmp	r5, r3
 800a2e4:	d11b      	bne.n	800a31e <_vfiprintf_r+0x56>
 800a2e6:	6875      	ldr	r5, [r6, #4]
 800a2e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a2ea:	07d9      	lsls	r1, r3, #31
 800a2ec:	d405      	bmi.n	800a2fa <_vfiprintf_r+0x32>
 800a2ee:	89ab      	ldrh	r3, [r5, #12]
 800a2f0:	059a      	lsls	r2, r3, #22
 800a2f2:	d402      	bmi.n	800a2fa <_vfiprintf_r+0x32>
 800a2f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a2f6:	f7ff f82c 	bl	8009352 <__retarget_lock_acquire_recursive>
 800a2fa:	89ab      	ldrh	r3, [r5, #12]
 800a2fc:	071b      	lsls	r3, r3, #28
 800a2fe:	d501      	bpl.n	800a304 <_vfiprintf_r+0x3c>
 800a300:	692b      	ldr	r3, [r5, #16]
 800a302:	b9eb      	cbnz	r3, 800a340 <_vfiprintf_r+0x78>
 800a304:	4629      	mov	r1, r5
 800a306:	4630      	mov	r0, r6
 800a308:	f7fd fc1c 	bl	8007b44 <__swsetup_r>
 800a30c:	b1c0      	cbz	r0, 800a340 <_vfiprintf_r+0x78>
 800a30e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a310:	07dc      	lsls	r4, r3, #31
 800a312:	d50e      	bpl.n	800a332 <_vfiprintf_r+0x6a>
 800a314:	f04f 30ff 	mov.w	r0, #4294967295
 800a318:	b01d      	add	sp, #116	; 0x74
 800a31a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a31e:	4b7b      	ldr	r3, [pc, #492]	; (800a50c <_vfiprintf_r+0x244>)
 800a320:	429d      	cmp	r5, r3
 800a322:	d101      	bne.n	800a328 <_vfiprintf_r+0x60>
 800a324:	68b5      	ldr	r5, [r6, #8]
 800a326:	e7df      	b.n	800a2e8 <_vfiprintf_r+0x20>
 800a328:	4b79      	ldr	r3, [pc, #484]	; (800a510 <_vfiprintf_r+0x248>)
 800a32a:	429d      	cmp	r5, r3
 800a32c:	bf08      	it	eq
 800a32e:	68f5      	ldreq	r5, [r6, #12]
 800a330:	e7da      	b.n	800a2e8 <_vfiprintf_r+0x20>
 800a332:	89ab      	ldrh	r3, [r5, #12]
 800a334:	0598      	lsls	r0, r3, #22
 800a336:	d4ed      	bmi.n	800a314 <_vfiprintf_r+0x4c>
 800a338:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a33a:	f7ff f80b 	bl	8009354 <__retarget_lock_release_recursive>
 800a33e:	e7e9      	b.n	800a314 <_vfiprintf_r+0x4c>
 800a340:	2300      	movs	r3, #0
 800a342:	9309      	str	r3, [sp, #36]	; 0x24
 800a344:	2320      	movs	r3, #32
 800a346:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a34a:	2330      	movs	r3, #48	; 0x30
 800a34c:	f04f 0901 	mov.w	r9, #1
 800a350:	f8cd 800c 	str.w	r8, [sp, #12]
 800a354:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a514 <_vfiprintf_r+0x24c>
 800a358:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a35c:	4623      	mov	r3, r4
 800a35e:	469a      	mov	sl, r3
 800a360:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a364:	b10a      	cbz	r2, 800a36a <_vfiprintf_r+0xa2>
 800a366:	2a25      	cmp	r2, #37	; 0x25
 800a368:	d1f9      	bne.n	800a35e <_vfiprintf_r+0x96>
 800a36a:	ebba 0b04 	subs.w	fp, sl, r4
 800a36e:	d00b      	beq.n	800a388 <_vfiprintf_r+0xc0>
 800a370:	465b      	mov	r3, fp
 800a372:	4622      	mov	r2, r4
 800a374:	4629      	mov	r1, r5
 800a376:	4630      	mov	r0, r6
 800a378:	f7ff ff93 	bl	800a2a2 <__sfputs_r>
 800a37c:	3001      	adds	r0, #1
 800a37e:	f000 80aa 	beq.w	800a4d6 <_vfiprintf_r+0x20e>
 800a382:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a384:	445a      	add	r2, fp
 800a386:	9209      	str	r2, [sp, #36]	; 0x24
 800a388:	f89a 3000 	ldrb.w	r3, [sl]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	f000 80a2 	beq.w	800a4d6 <_vfiprintf_r+0x20e>
 800a392:	2300      	movs	r3, #0
 800a394:	f04f 32ff 	mov.w	r2, #4294967295
 800a398:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a39c:	f10a 0a01 	add.w	sl, sl, #1
 800a3a0:	9304      	str	r3, [sp, #16]
 800a3a2:	9307      	str	r3, [sp, #28]
 800a3a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a3a8:	931a      	str	r3, [sp, #104]	; 0x68
 800a3aa:	4654      	mov	r4, sl
 800a3ac:	2205      	movs	r2, #5
 800a3ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3b2:	4858      	ldr	r0, [pc, #352]	; (800a514 <_vfiprintf_r+0x24c>)
 800a3b4:	f7ff f84e 	bl	8009454 <memchr>
 800a3b8:	9a04      	ldr	r2, [sp, #16]
 800a3ba:	b9d8      	cbnz	r0, 800a3f4 <_vfiprintf_r+0x12c>
 800a3bc:	06d1      	lsls	r1, r2, #27
 800a3be:	bf44      	itt	mi
 800a3c0:	2320      	movmi	r3, #32
 800a3c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a3c6:	0713      	lsls	r3, r2, #28
 800a3c8:	bf44      	itt	mi
 800a3ca:	232b      	movmi	r3, #43	; 0x2b
 800a3cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a3d0:	f89a 3000 	ldrb.w	r3, [sl]
 800a3d4:	2b2a      	cmp	r3, #42	; 0x2a
 800a3d6:	d015      	beq.n	800a404 <_vfiprintf_r+0x13c>
 800a3d8:	4654      	mov	r4, sl
 800a3da:	2000      	movs	r0, #0
 800a3dc:	f04f 0c0a 	mov.w	ip, #10
 800a3e0:	9a07      	ldr	r2, [sp, #28]
 800a3e2:	4621      	mov	r1, r4
 800a3e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a3e8:	3b30      	subs	r3, #48	; 0x30
 800a3ea:	2b09      	cmp	r3, #9
 800a3ec:	d94e      	bls.n	800a48c <_vfiprintf_r+0x1c4>
 800a3ee:	b1b0      	cbz	r0, 800a41e <_vfiprintf_r+0x156>
 800a3f0:	9207      	str	r2, [sp, #28]
 800a3f2:	e014      	b.n	800a41e <_vfiprintf_r+0x156>
 800a3f4:	eba0 0308 	sub.w	r3, r0, r8
 800a3f8:	fa09 f303 	lsl.w	r3, r9, r3
 800a3fc:	4313      	orrs	r3, r2
 800a3fe:	46a2      	mov	sl, r4
 800a400:	9304      	str	r3, [sp, #16]
 800a402:	e7d2      	b.n	800a3aa <_vfiprintf_r+0xe2>
 800a404:	9b03      	ldr	r3, [sp, #12]
 800a406:	1d19      	adds	r1, r3, #4
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	9103      	str	r1, [sp, #12]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	bfbb      	ittet	lt
 800a410:	425b      	neglt	r3, r3
 800a412:	f042 0202 	orrlt.w	r2, r2, #2
 800a416:	9307      	strge	r3, [sp, #28]
 800a418:	9307      	strlt	r3, [sp, #28]
 800a41a:	bfb8      	it	lt
 800a41c:	9204      	strlt	r2, [sp, #16]
 800a41e:	7823      	ldrb	r3, [r4, #0]
 800a420:	2b2e      	cmp	r3, #46	; 0x2e
 800a422:	d10c      	bne.n	800a43e <_vfiprintf_r+0x176>
 800a424:	7863      	ldrb	r3, [r4, #1]
 800a426:	2b2a      	cmp	r3, #42	; 0x2a
 800a428:	d135      	bne.n	800a496 <_vfiprintf_r+0x1ce>
 800a42a:	9b03      	ldr	r3, [sp, #12]
 800a42c:	3402      	adds	r4, #2
 800a42e:	1d1a      	adds	r2, r3, #4
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	9203      	str	r2, [sp, #12]
 800a434:	2b00      	cmp	r3, #0
 800a436:	bfb8      	it	lt
 800a438:	f04f 33ff 	movlt.w	r3, #4294967295
 800a43c:	9305      	str	r3, [sp, #20]
 800a43e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800a518 <_vfiprintf_r+0x250>
 800a442:	2203      	movs	r2, #3
 800a444:	4650      	mov	r0, sl
 800a446:	7821      	ldrb	r1, [r4, #0]
 800a448:	f7ff f804 	bl	8009454 <memchr>
 800a44c:	b140      	cbz	r0, 800a460 <_vfiprintf_r+0x198>
 800a44e:	2340      	movs	r3, #64	; 0x40
 800a450:	eba0 000a 	sub.w	r0, r0, sl
 800a454:	fa03 f000 	lsl.w	r0, r3, r0
 800a458:	9b04      	ldr	r3, [sp, #16]
 800a45a:	3401      	adds	r4, #1
 800a45c:	4303      	orrs	r3, r0
 800a45e:	9304      	str	r3, [sp, #16]
 800a460:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a464:	2206      	movs	r2, #6
 800a466:	482d      	ldr	r0, [pc, #180]	; (800a51c <_vfiprintf_r+0x254>)
 800a468:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a46c:	f7fe fff2 	bl	8009454 <memchr>
 800a470:	2800      	cmp	r0, #0
 800a472:	d03f      	beq.n	800a4f4 <_vfiprintf_r+0x22c>
 800a474:	4b2a      	ldr	r3, [pc, #168]	; (800a520 <_vfiprintf_r+0x258>)
 800a476:	bb1b      	cbnz	r3, 800a4c0 <_vfiprintf_r+0x1f8>
 800a478:	9b03      	ldr	r3, [sp, #12]
 800a47a:	3307      	adds	r3, #7
 800a47c:	f023 0307 	bic.w	r3, r3, #7
 800a480:	3308      	adds	r3, #8
 800a482:	9303      	str	r3, [sp, #12]
 800a484:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a486:	443b      	add	r3, r7
 800a488:	9309      	str	r3, [sp, #36]	; 0x24
 800a48a:	e767      	b.n	800a35c <_vfiprintf_r+0x94>
 800a48c:	460c      	mov	r4, r1
 800a48e:	2001      	movs	r0, #1
 800a490:	fb0c 3202 	mla	r2, ip, r2, r3
 800a494:	e7a5      	b.n	800a3e2 <_vfiprintf_r+0x11a>
 800a496:	2300      	movs	r3, #0
 800a498:	f04f 0c0a 	mov.w	ip, #10
 800a49c:	4619      	mov	r1, r3
 800a49e:	3401      	adds	r4, #1
 800a4a0:	9305      	str	r3, [sp, #20]
 800a4a2:	4620      	mov	r0, r4
 800a4a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a4a8:	3a30      	subs	r2, #48	; 0x30
 800a4aa:	2a09      	cmp	r2, #9
 800a4ac:	d903      	bls.n	800a4b6 <_vfiprintf_r+0x1ee>
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d0c5      	beq.n	800a43e <_vfiprintf_r+0x176>
 800a4b2:	9105      	str	r1, [sp, #20]
 800a4b4:	e7c3      	b.n	800a43e <_vfiprintf_r+0x176>
 800a4b6:	4604      	mov	r4, r0
 800a4b8:	2301      	movs	r3, #1
 800a4ba:	fb0c 2101 	mla	r1, ip, r1, r2
 800a4be:	e7f0      	b.n	800a4a2 <_vfiprintf_r+0x1da>
 800a4c0:	ab03      	add	r3, sp, #12
 800a4c2:	9300      	str	r3, [sp, #0]
 800a4c4:	462a      	mov	r2, r5
 800a4c6:	4630      	mov	r0, r6
 800a4c8:	4b16      	ldr	r3, [pc, #88]	; (800a524 <_vfiprintf_r+0x25c>)
 800a4ca:	a904      	add	r1, sp, #16
 800a4cc:	f7fb fdca 	bl	8006064 <_printf_float>
 800a4d0:	4607      	mov	r7, r0
 800a4d2:	1c78      	adds	r0, r7, #1
 800a4d4:	d1d6      	bne.n	800a484 <_vfiprintf_r+0x1bc>
 800a4d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a4d8:	07d9      	lsls	r1, r3, #31
 800a4da:	d405      	bmi.n	800a4e8 <_vfiprintf_r+0x220>
 800a4dc:	89ab      	ldrh	r3, [r5, #12]
 800a4de:	059a      	lsls	r2, r3, #22
 800a4e0:	d402      	bmi.n	800a4e8 <_vfiprintf_r+0x220>
 800a4e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a4e4:	f7fe ff36 	bl	8009354 <__retarget_lock_release_recursive>
 800a4e8:	89ab      	ldrh	r3, [r5, #12]
 800a4ea:	065b      	lsls	r3, r3, #25
 800a4ec:	f53f af12 	bmi.w	800a314 <_vfiprintf_r+0x4c>
 800a4f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a4f2:	e711      	b.n	800a318 <_vfiprintf_r+0x50>
 800a4f4:	ab03      	add	r3, sp, #12
 800a4f6:	9300      	str	r3, [sp, #0]
 800a4f8:	462a      	mov	r2, r5
 800a4fa:	4630      	mov	r0, r6
 800a4fc:	4b09      	ldr	r3, [pc, #36]	; (800a524 <_vfiprintf_r+0x25c>)
 800a4fe:	a904      	add	r1, sp, #16
 800a500:	f7fc f84c 	bl	800659c <_printf_i>
 800a504:	e7e4      	b.n	800a4d0 <_vfiprintf_r+0x208>
 800a506:	bf00      	nop
 800a508:	0800c434 	.word	0x0800c434
 800a50c:	0800c454 	.word	0x0800c454
 800a510:	0800c414 	.word	0x0800c414
 800a514:	0800c64c 	.word	0x0800c64c
 800a518:	0800c652 	.word	0x0800c652
 800a51c:	0800c656 	.word	0x0800c656
 800a520:	08006065 	.word	0x08006065
 800a524:	0800a2a3 	.word	0x0800a2a3

0800a528 <nan>:
 800a528:	2000      	movs	r0, #0
 800a52a:	4901      	ldr	r1, [pc, #4]	; (800a530 <nan+0x8>)
 800a52c:	4770      	bx	lr
 800a52e:	bf00      	nop
 800a530:	7ff80000 	.word	0x7ff80000

0800a534 <_sbrk_r>:
 800a534:	b538      	push	{r3, r4, r5, lr}
 800a536:	2300      	movs	r3, #0
 800a538:	4d05      	ldr	r5, [pc, #20]	; (800a550 <_sbrk_r+0x1c>)
 800a53a:	4604      	mov	r4, r0
 800a53c:	4608      	mov	r0, r1
 800a53e:	602b      	str	r3, [r5, #0]
 800a540:	f7f7 ff5a 	bl	80023f8 <_sbrk>
 800a544:	1c43      	adds	r3, r0, #1
 800a546:	d102      	bne.n	800a54e <_sbrk_r+0x1a>
 800a548:	682b      	ldr	r3, [r5, #0]
 800a54a:	b103      	cbz	r3, 800a54e <_sbrk_r+0x1a>
 800a54c:	6023      	str	r3, [r4, #0]
 800a54e:	bd38      	pop	{r3, r4, r5, pc}
 800a550:	20001168 	.word	0x20001168

0800a554 <__sread>:
 800a554:	b510      	push	{r4, lr}
 800a556:	460c      	mov	r4, r1
 800a558:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a55c:	f000 f93a 	bl	800a7d4 <_read_r>
 800a560:	2800      	cmp	r0, #0
 800a562:	bfab      	itete	ge
 800a564:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a566:	89a3      	ldrhlt	r3, [r4, #12]
 800a568:	181b      	addge	r3, r3, r0
 800a56a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a56e:	bfac      	ite	ge
 800a570:	6563      	strge	r3, [r4, #84]	; 0x54
 800a572:	81a3      	strhlt	r3, [r4, #12]
 800a574:	bd10      	pop	{r4, pc}

0800a576 <__swrite>:
 800a576:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a57a:	461f      	mov	r7, r3
 800a57c:	898b      	ldrh	r3, [r1, #12]
 800a57e:	4605      	mov	r5, r0
 800a580:	05db      	lsls	r3, r3, #23
 800a582:	460c      	mov	r4, r1
 800a584:	4616      	mov	r6, r2
 800a586:	d505      	bpl.n	800a594 <__swrite+0x1e>
 800a588:	2302      	movs	r3, #2
 800a58a:	2200      	movs	r2, #0
 800a58c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a590:	f000 f8b8 	bl	800a704 <_lseek_r>
 800a594:	89a3      	ldrh	r3, [r4, #12]
 800a596:	4632      	mov	r2, r6
 800a598:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a59c:	81a3      	strh	r3, [r4, #12]
 800a59e:	4628      	mov	r0, r5
 800a5a0:	463b      	mov	r3, r7
 800a5a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a5a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a5aa:	f000 b837 	b.w	800a61c <_write_r>

0800a5ae <__sseek>:
 800a5ae:	b510      	push	{r4, lr}
 800a5b0:	460c      	mov	r4, r1
 800a5b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5b6:	f000 f8a5 	bl	800a704 <_lseek_r>
 800a5ba:	1c43      	adds	r3, r0, #1
 800a5bc:	89a3      	ldrh	r3, [r4, #12]
 800a5be:	bf15      	itete	ne
 800a5c0:	6560      	strne	r0, [r4, #84]	; 0x54
 800a5c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a5c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a5ca:	81a3      	strheq	r3, [r4, #12]
 800a5cc:	bf18      	it	ne
 800a5ce:	81a3      	strhne	r3, [r4, #12]
 800a5d0:	bd10      	pop	{r4, pc}

0800a5d2 <__sclose>:
 800a5d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5d6:	f000 b851 	b.w	800a67c <_close_r>

0800a5da <strncmp>:
 800a5da:	4603      	mov	r3, r0
 800a5dc:	b510      	push	{r4, lr}
 800a5de:	b172      	cbz	r2, 800a5fe <strncmp+0x24>
 800a5e0:	3901      	subs	r1, #1
 800a5e2:	1884      	adds	r4, r0, r2
 800a5e4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a5e8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a5ec:	4290      	cmp	r0, r2
 800a5ee:	d101      	bne.n	800a5f4 <strncmp+0x1a>
 800a5f0:	42a3      	cmp	r3, r4
 800a5f2:	d101      	bne.n	800a5f8 <strncmp+0x1e>
 800a5f4:	1a80      	subs	r0, r0, r2
 800a5f6:	bd10      	pop	{r4, pc}
 800a5f8:	2800      	cmp	r0, #0
 800a5fa:	d1f3      	bne.n	800a5e4 <strncmp+0xa>
 800a5fc:	e7fa      	b.n	800a5f4 <strncmp+0x1a>
 800a5fe:	4610      	mov	r0, r2
 800a600:	e7f9      	b.n	800a5f6 <strncmp+0x1c>

0800a602 <__ascii_wctomb>:
 800a602:	4603      	mov	r3, r0
 800a604:	4608      	mov	r0, r1
 800a606:	b141      	cbz	r1, 800a61a <__ascii_wctomb+0x18>
 800a608:	2aff      	cmp	r2, #255	; 0xff
 800a60a:	d904      	bls.n	800a616 <__ascii_wctomb+0x14>
 800a60c:	228a      	movs	r2, #138	; 0x8a
 800a60e:	f04f 30ff 	mov.w	r0, #4294967295
 800a612:	601a      	str	r2, [r3, #0]
 800a614:	4770      	bx	lr
 800a616:	2001      	movs	r0, #1
 800a618:	700a      	strb	r2, [r1, #0]
 800a61a:	4770      	bx	lr

0800a61c <_write_r>:
 800a61c:	b538      	push	{r3, r4, r5, lr}
 800a61e:	4604      	mov	r4, r0
 800a620:	4608      	mov	r0, r1
 800a622:	4611      	mov	r1, r2
 800a624:	2200      	movs	r2, #0
 800a626:	4d05      	ldr	r5, [pc, #20]	; (800a63c <_write_r+0x20>)
 800a628:	602a      	str	r2, [r5, #0]
 800a62a:	461a      	mov	r2, r3
 800a62c:	f7f7 fe98 	bl	8002360 <_write>
 800a630:	1c43      	adds	r3, r0, #1
 800a632:	d102      	bne.n	800a63a <_write_r+0x1e>
 800a634:	682b      	ldr	r3, [r5, #0]
 800a636:	b103      	cbz	r3, 800a63a <_write_r+0x1e>
 800a638:	6023      	str	r3, [r4, #0]
 800a63a:	bd38      	pop	{r3, r4, r5, pc}
 800a63c:	20001168 	.word	0x20001168

0800a640 <__assert_func>:
 800a640:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a642:	4614      	mov	r4, r2
 800a644:	461a      	mov	r2, r3
 800a646:	4b09      	ldr	r3, [pc, #36]	; (800a66c <__assert_func+0x2c>)
 800a648:	4605      	mov	r5, r0
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	68d8      	ldr	r0, [r3, #12]
 800a64e:	b14c      	cbz	r4, 800a664 <__assert_func+0x24>
 800a650:	4b07      	ldr	r3, [pc, #28]	; (800a670 <__assert_func+0x30>)
 800a652:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a656:	9100      	str	r1, [sp, #0]
 800a658:	462b      	mov	r3, r5
 800a65a:	4906      	ldr	r1, [pc, #24]	; (800a674 <__assert_func+0x34>)
 800a65c:	f000 f81e 	bl	800a69c <fiprintf>
 800a660:	f000 f8ca 	bl	800a7f8 <abort>
 800a664:	4b04      	ldr	r3, [pc, #16]	; (800a678 <__assert_func+0x38>)
 800a666:	461c      	mov	r4, r3
 800a668:	e7f3      	b.n	800a652 <__assert_func+0x12>
 800a66a:	bf00      	nop
 800a66c:	2000000c 	.word	0x2000000c
 800a670:	0800c65d 	.word	0x0800c65d
 800a674:	0800c66a 	.word	0x0800c66a
 800a678:	0800c698 	.word	0x0800c698

0800a67c <_close_r>:
 800a67c:	b538      	push	{r3, r4, r5, lr}
 800a67e:	2300      	movs	r3, #0
 800a680:	4d05      	ldr	r5, [pc, #20]	; (800a698 <_close_r+0x1c>)
 800a682:	4604      	mov	r4, r0
 800a684:	4608      	mov	r0, r1
 800a686:	602b      	str	r3, [r5, #0]
 800a688:	f7f7 fe86 	bl	8002398 <_close>
 800a68c:	1c43      	adds	r3, r0, #1
 800a68e:	d102      	bne.n	800a696 <_close_r+0x1a>
 800a690:	682b      	ldr	r3, [r5, #0]
 800a692:	b103      	cbz	r3, 800a696 <_close_r+0x1a>
 800a694:	6023      	str	r3, [r4, #0]
 800a696:	bd38      	pop	{r3, r4, r5, pc}
 800a698:	20001168 	.word	0x20001168

0800a69c <fiprintf>:
 800a69c:	b40e      	push	{r1, r2, r3}
 800a69e:	b503      	push	{r0, r1, lr}
 800a6a0:	4601      	mov	r1, r0
 800a6a2:	ab03      	add	r3, sp, #12
 800a6a4:	4805      	ldr	r0, [pc, #20]	; (800a6bc <fiprintf+0x20>)
 800a6a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6aa:	6800      	ldr	r0, [r0, #0]
 800a6ac:	9301      	str	r3, [sp, #4]
 800a6ae:	f7ff fe0b 	bl	800a2c8 <_vfiprintf_r>
 800a6b2:	b002      	add	sp, #8
 800a6b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a6b8:	b003      	add	sp, #12
 800a6ba:	4770      	bx	lr
 800a6bc:	2000000c 	.word	0x2000000c

0800a6c0 <_fstat_r>:
 800a6c0:	b538      	push	{r3, r4, r5, lr}
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	4d06      	ldr	r5, [pc, #24]	; (800a6e0 <_fstat_r+0x20>)
 800a6c6:	4604      	mov	r4, r0
 800a6c8:	4608      	mov	r0, r1
 800a6ca:	4611      	mov	r1, r2
 800a6cc:	602b      	str	r3, [r5, #0]
 800a6ce:	f7f7 fe6e 	bl	80023ae <_fstat>
 800a6d2:	1c43      	adds	r3, r0, #1
 800a6d4:	d102      	bne.n	800a6dc <_fstat_r+0x1c>
 800a6d6:	682b      	ldr	r3, [r5, #0]
 800a6d8:	b103      	cbz	r3, 800a6dc <_fstat_r+0x1c>
 800a6da:	6023      	str	r3, [r4, #0]
 800a6dc:	bd38      	pop	{r3, r4, r5, pc}
 800a6de:	bf00      	nop
 800a6e0:	20001168 	.word	0x20001168

0800a6e4 <_isatty_r>:
 800a6e4:	b538      	push	{r3, r4, r5, lr}
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	4d05      	ldr	r5, [pc, #20]	; (800a700 <_isatty_r+0x1c>)
 800a6ea:	4604      	mov	r4, r0
 800a6ec:	4608      	mov	r0, r1
 800a6ee:	602b      	str	r3, [r5, #0]
 800a6f0:	f7f7 fe6c 	bl	80023cc <_isatty>
 800a6f4:	1c43      	adds	r3, r0, #1
 800a6f6:	d102      	bne.n	800a6fe <_isatty_r+0x1a>
 800a6f8:	682b      	ldr	r3, [r5, #0]
 800a6fa:	b103      	cbz	r3, 800a6fe <_isatty_r+0x1a>
 800a6fc:	6023      	str	r3, [r4, #0]
 800a6fe:	bd38      	pop	{r3, r4, r5, pc}
 800a700:	20001168 	.word	0x20001168

0800a704 <_lseek_r>:
 800a704:	b538      	push	{r3, r4, r5, lr}
 800a706:	4604      	mov	r4, r0
 800a708:	4608      	mov	r0, r1
 800a70a:	4611      	mov	r1, r2
 800a70c:	2200      	movs	r2, #0
 800a70e:	4d05      	ldr	r5, [pc, #20]	; (800a724 <_lseek_r+0x20>)
 800a710:	602a      	str	r2, [r5, #0]
 800a712:	461a      	mov	r2, r3
 800a714:	f7f7 fe64 	bl	80023e0 <_lseek>
 800a718:	1c43      	adds	r3, r0, #1
 800a71a:	d102      	bne.n	800a722 <_lseek_r+0x1e>
 800a71c:	682b      	ldr	r3, [r5, #0]
 800a71e:	b103      	cbz	r3, 800a722 <_lseek_r+0x1e>
 800a720:	6023      	str	r3, [r4, #0]
 800a722:	bd38      	pop	{r3, r4, r5, pc}
 800a724:	20001168 	.word	0x20001168

0800a728 <memmove>:
 800a728:	4288      	cmp	r0, r1
 800a72a:	b510      	push	{r4, lr}
 800a72c:	eb01 0402 	add.w	r4, r1, r2
 800a730:	d902      	bls.n	800a738 <memmove+0x10>
 800a732:	4284      	cmp	r4, r0
 800a734:	4623      	mov	r3, r4
 800a736:	d807      	bhi.n	800a748 <memmove+0x20>
 800a738:	1e43      	subs	r3, r0, #1
 800a73a:	42a1      	cmp	r1, r4
 800a73c:	d008      	beq.n	800a750 <memmove+0x28>
 800a73e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a742:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a746:	e7f8      	b.n	800a73a <memmove+0x12>
 800a748:	4601      	mov	r1, r0
 800a74a:	4402      	add	r2, r0
 800a74c:	428a      	cmp	r2, r1
 800a74e:	d100      	bne.n	800a752 <memmove+0x2a>
 800a750:	bd10      	pop	{r4, pc}
 800a752:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a756:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a75a:	e7f7      	b.n	800a74c <memmove+0x24>

0800a75c <__malloc_lock>:
 800a75c:	4801      	ldr	r0, [pc, #4]	; (800a764 <__malloc_lock+0x8>)
 800a75e:	f7fe bdf8 	b.w	8009352 <__retarget_lock_acquire_recursive>
 800a762:	bf00      	nop
 800a764:	2000115c 	.word	0x2000115c

0800a768 <__malloc_unlock>:
 800a768:	4801      	ldr	r0, [pc, #4]	; (800a770 <__malloc_unlock+0x8>)
 800a76a:	f7fe bdf3 	b.w	8009354 <__retarget_lock_release_recursive>
 800a76e:	bf00      	nop
 800a770:	2000115c 	.word	0x2000115c

0800a774 <_realloc_r>:
 800a774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a778:	4680      	mov	r8, r0
 800a77a:	4614      	mov	r4, r2
 800a77c:	460e      	mov	r6, r1
 800a77e:	b921      	cbnz	r1, 800a78a <_realloc_r+0x16>
 800a780:	4611      	mov	r1, r2
 800a782:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a786:	f7ff bba7 	b.w	8009ed8 <_malloc_r>
 800a78a:	b92a      	cbnz	r2, 800a798 <_realloc_r+0x24>
 800a78c:	f7ff fb3c 	bl	8009e08 <_free_r>
 800a790:	4625      	mov	r5, r4
 800a792:	4628      	mov	r0, r5
 800a794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a798:	f000 f835 	bl	800a806 <_malloc_usable_size_r>
 800a79c:	4284      	cmp	r4, r0
 800a79e:	4607      	mov	r7, r0
 800a7a0:	d802      	bhi.n	800a7a8 <_realloc_r+0x34>
 800a7a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a7a6:	d812      	bhi.n	800a7ce <_realloc_r+0x5a>
 800a7a8:	4621      	mov	r1, r4
 800a7aa:	4640      	mov	r0, r8
 800a7ac:	f7ff fb94 	bl	8009ed8 <_malloc_r>
 800a7b0:	4605      	mov	r5, r0
 800a7b2:	2800      	cmp	r0, #0
 800a7b4:	d0ed      	beq.n	800a792 <_realloc_r+0x1e>
 800a7b6:	42bc      	cmp	r4, r7
 800a7b8:	4622      	mov	r2, r4
 800a7ba:	4631      	mov	r1, r6
 800a7bc:	bf28      	it	cs
 800a7be:	463a      	movcs	r2, r7
 800a7c0:	f7fb fb9c 	bl	8005efc <memcpy>
 800a7c4:	4631      	mov	r1, r6
 800a7c6:	4640      	mov	r0, r8
 800a7c8:	f7ff fb1e 	bl	8009e08 <_free_r>
 800a7cc:	e7e1      	b.n	800a792 <_realloc_r+0x1e>
 800a7ce:	4635      	mov	r5, r6
 800a7d0:	e7df      	b.n	800a792 <_realloc_r+0x1e>
	...

0800a7d4 <_read_r>:
 800a7d4:	b538      	push	{r3, r4, r5, lr}
 800a7d6:	4604      	mov	r4, r0
 800a7d8:	4608      	mov	r0, r1
 800a7da:	4611      	mov	r1, r2
 800a7dc:	2200      	movs	r2, #0
 800a7de:	4d05      	ldr	r5, [pc, #20]	; (800a7f4 <_read_r+0x20>)
 800a7e0:	602a      	str	r2, [r5, #0]
 800a7e2:	461a      	mov	r2, r3
 800a7e4:	f7f7 fd9f 	bl	8002326 <_read>
 800a7e8:	1c43      	adds	r3, r0, #1
 800a7ea:	d102      	bne.n	800a7f2 <_read_r+0x1e>
 800a7ec:	682b      	ldr	r3, [r5, #0]
 800a7ee:	b103      	cbz	r3, 800a7f2 <_read_r+0x1e>
 800a7f0:	6023      	str	r3, [r4, #0]
 800a7f2:	bd38      	pop	{r3, r4, r5, pc}
 800a7f4:	20001168 	.word	0x20001168

0800a7f8 <abort>:
 800a7f8:	2006      	movs	r0, #6
 800a7fa:	b508      	push	{r3, lr}
 800a7fc:	f000 f834 	bl	800a868 <raise>
 800a800:	2001      	movs	r0, #1
 800a802:	f7f7 fd86 	bl	8002312 <_exit>

0800a806 <_malloc_usable_size_r>:
 800a806:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a80a:	1f18      	subs	r0, r3, #4
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	bfbc      	itt	lt
 800a810:	580b      	ldrlt	r3, [r1, r0]
 800a812:	18c0      	addlt	r0, r0, r3
 800a814:	4770      	bx	lr

0800a816 <_raise_r>:
 800a816:	291f      	cmp	r1, #31
 800a818:	b538      	push	{r3, r4, r5, lr}
 800a81a:	4604      	mov	r4, r0
 800a81c:	460d      	mov	r5, r1
 800a81e:	d904      	bls.n	800a82a <_raise_r+0x14>
 800a820:	2316      	movs	r3, #22
 800a822:	6003      	str	r3, [r0, #0]
 800a824:	f04f 30ff 	mov.w	r0, #4294967295
 800a828:	bd38      	pop	{r3, r4, r5, pc}
 800a82a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a82c:	b112      	cbz	r2, 800a834 <_raise_r+0x1e>
 800a82e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a832:	b94b      	cbnz	r3, 800a848 <_raise_r+0x32>
 800a834:	4620      	mov	r0, r4
 800a836:	f000 f831 	bl	800a89c <_getpid_r>
 800a83a:	462a      	mov	r2, r5
 800a83c:	4601      	mov	r1, r0
 800a83e:	4620      	mov	r0, r4
 800a840:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a844:	f000 b818 	b.w	800a878 <_kill_r>
 800a848:	2b01      	cmp	r3, #1
 800a84a:	d00a      	beq.n	800a862 <_raise_r+0x4c>
 800a84c:	1c59      	adds	r1, r3, #1
 800a84e:	d103      	bne.n	800a858 <_raise_r+0x42>
 800a850:	2316      	movs	r3, #22
 800a852:	6003      	str	r3, [r0, #0]
 800a854:	2001      	movs	r0, #1
 800a856:	e7e7      	b.n	800a828 <_raise_r+0x12>
 800a858:	2400      	movs	r4, #0
 800a85a:	4628      	mov	r0, r5
 800a85c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a860:	4798      	blx	r3
 800a862:	2000      	movs	r0, #0
 800a864:	e7e0      	b.n	800a828 <_raise_r+0x12>
	...

0800a868 <raise>:
 800a868:	4b02      	ldr	r3, [pc, #8]	; (800a874 <raise+0xc>)
 800a86a:	4601      	mov	r1, r0
 800a86c:	6818      	ldr	r0, [r3, #0]
 800a86e:	f7ff bfd2 	b.w	800a816 <_raise_r>
 800a872:	bf00      	nop
 800a874:	2000000c 	.word	0x2000000c

0800a878 <_kill_r>:
 800a878:	b538      	push	{r3, r4, r5, lr}
 800a87a:	2300      	movs	r3, #0
 800a87c:	4d06      	ldr	r5, [pc, #24]	; (800a898 <_kill_r+0x20>)
 800a87e:	4604      	mov	r4, r0
 800a880:	4608      	mov	r0, r1
 800a882:	4611      	mov	r1, r2
 800a884:	602b      	str	r3, [r5, #0]
 800a886:	f7f7 fd34 	bl	80022f2 <_kill>
 800a88a:	1c43      	adds	r3, r0, #1
 800a88c:	d102      	bne.n	800a894 <_kill_r+0x1c>
 800a88e:	682b      	ldr	r3, [r5, #0]
 800a890:	b103      	cbz	r3, 800a894 <_kill_r+0x1c>
 800a892:	6023      	str	r3, [r4, #0]
 800a894:	bd38      	pop	{r3, r4, r5, pc}
 800a896:	bf00      	nop
 800a898:	20001168 	.word	0x20001168

0800a89c <_getpid_r>:
 800a89c:	f7f7 bd22 	b.w	80022e4 <_getpid>

0800a8a0 <cos>:
 800a8a0:	b530      	push	{r4, r5, lr}
 800a8a2:	4a20      	ldr	r2, [pc, #128]	; (800a924 <cos+0x84>)
 800a8a4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a8a8:	4293      	cmp	r3, r2
 800a8aa:	b087      	sub	sp, #28
 800a8ac:	dc06      	bgt.n	800a8bc <cos+0x1c>
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	b007      	add	sp, #28
 800a8b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a8b8:	f000 bb6a 	b.w	800af90 <__kernel_cos>
 800a8bc:	4a1a      	ldr	r2, [pc, #104]	; (800a928 <cos+0x88>)
 800a8be:	4293      	cmp	r3, r2
 800a8c0:	dd05      	ble.n	800a8ce <cos+0x2e>
 800a8c2:	4602      	mov	r2, r0
 800a8c4:	460b      	mov	r3, r1
 800a8c6:	f7f5 fc4f 	bl	8000168 <__aeabi_dsub>
 800a8ca:	b007      	add	sp, #28
 800a8cc:	bd30      	pop	{r4, r5, pc}
 800a8ce:	aa02      	add	r2, sp, #8
 800a8d0:	f000 f88e 	bl	800a9f0 <__ieee754_rem_pio2>
 800a8d4:	f000 0003 	and.w	r0, r0, #3
 800a8d8:	2801      	cmp	r0, #1
 800a8da:	d009      	beq.n	800a8f0 <cos+0x50>
 800a8dc:	2802      	cmp	r0, #2
 800a8de:	d011      	beq.n	800a904 <cos+0x64>
 800a8e0:	b9b8      	cbnz	r0, 800a912 <cos+0x72>
 800a8e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a8e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a8ea:	f000 fb51 	bl	800af90 <__kernel_cos>
 800a8ee:	e7ec      	b.n	800a8ca <cos+0x2a>
 800a8f0:	9000      	str	r0, [sp, #0]
 800a8f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a8f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a8fa:	f000 ff49 	bl	800b790 <__kernel_sin>
 800a8fe:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800a902:	e7e2      	b.n	800a8ca <cos+0x2a>
 800a904:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a908:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a90c:	f000 fb40 	bl	800af90 <__kernel_cos>
 800a910:	e7f5      	b.n	800a8fe <cos+0x5e>
 800a912:	2301      	movs	r3, #1
 800a914:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a918:	9300      	str	r3, [sp, #0]
 800a91a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a91e:	f000 ff37 	bl	800b790 <__kernel_sin>
 800a922:	e7d2      	b.n	800a8ca <cos+0x2a>
 800a924:	3fe921fb 	.word	0x3fe921fb
 800a928:	7fefffff 	.word	0x7fefffff

0800a92c <sin>:
 800a92c:	b530      	push	{r4, r5, lr}
 800a92e:	4a20      	ldr	r2, [pc, #128]	; (800a9b0 <sin+0x84>)
 800a930:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a934:	4293      	cmp	r3, r2
 800a936:	b087      	sub	sp, #28
 800a938:	dc06      	bgt.n	800a948 <sin+0x1c>
 800a93a:	2300      	movs	r3, #0
 800a93c:	2200      	movs	r2, #0
 800a93e:	9300      	str	r3, [sp, #0]
 800a940:	2300      	movs	r3, #0
 800a942:	f000 ff25 	bl	800b790 <__kernel_sin>
 800a946:	e006      	b.n	800a956 <sin+0x2a>
 800a948:	4a1a      	ldr	r2, [pc, #104]	; (800a9b4 <sin+0x88>)
 800a94a:	4293      	cmp	r3, r2
 800a94c:	dd05      	ble.n	800a95a <sin+0x2e>
 800a94e:	4602      	mov	r2, r0
 800a950:	460b      	mov	r3, r1
 800a952:	f7f5 fc09 	bl	8000168 <__aeabi_dsub>
 800a956:	b007      	add	sp, #28
 800a958:	bd30      	pop	{r4, r5, pc}
 800a95a:	aa02      	add	r2, sp, #8
 800a95c:	f000 f848 	bl	800a9f0 <__ieee754_rem_pio2>
 800a960:	f000 0003 	and.w	r0, r0, #3
 800a964:	2801      	cmp	r0, #1
 800a966:	d009      	beq.n	800a97c <sin+0x50>
 800a968:	2802      	cmp	r0, #2
 800a96a:	d00e      	beq.n	800a98a <sin+0x5e>
 800a96c:	b9c0      	cbnz	r0, 800a9a0 <sin+0x74>
 800a96e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a972:	2301      	movs	r3, #1
 800a974:	9300      	str	r3, [sp, #0]
 800a976:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a97a:	e7e2      	b.n	800a942 <sin+0x16>
 800a97c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a980:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a984:	f000 fb04 	bl	800af90 <__kernel_cos>
 800a988:	e7e5      	b.n	800a956 <sin+0x2a>
 800a98a:	2301      	movs	r3, #1
 800a98c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a990:	9300      	str	r3, [sp, #0]
 800a992:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a996:	f000 fefb 	bl	800b790 <__kernel_sin>
 800a99a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800a99e:	e7da      	b.n	800a956 <sin+0x2a>
 800a9a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a9a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a9a8:	f000 faf2 	bl	800af90 <__kernel_cos>
 800a9ac:	e7f5      	b.n	800a99a <sin+0x6e>
 800a9ae:	bf00      	nop
 800a9b0:	3fe921fb 	.word	0x3fe921fb
 800a9b4:	7fefffff 	.word	0x7fefffff

0800a9b8 <atan2f>:
 800a9b8:	f000 ba12 	b.w	800ade0 <__ieee754_atan2f>

0800a9bc <sqrtf>:
 800a9bc:	b538      	push	{r3, r4, r5, lr}
 800a9be:	4605      	mov	r5, r0
 800a9c0:	f000 fa94 	bl	800aeec <__ieee754_sqrtf>
 800a9c4:	4629      	mov	r1, r5
 800a9c6:	4604      	mov	r4, r0
 800a9c8:	4628      	mov	r0, r5
 800a9ca:	f7f6 fba1 	bl	8001110 <__aeabi_fcmpun>
 800a9ce:	b968      	cbnz	r0, 800a9ec <sqrtf+0x30>
 800a9d0:	2100      	movs	r1, #0
 800a9d2:	4628      	mov	r0, r5
 800a9d4:	f7f6 fb74 	bl	80010c0 <__aeabi_fcmplt>
 800a9d8:	b140      	cbz	r0, 800a9ec <sqrtf+0x30>
 800a9da:	f7fb fa65 	bl	8005ea8 <__errno>
 800a9de:	2321      	movs	r3, #33	; 0x21
 800a9e0:	2100      	movs	r1, #0
 800a9e2:	6003      	str	r3, [r0, #0]
 800a9e4:	4608      	mov	r0, r1
 800a9e6:	f7f6 fa81 	bl	8000eec <__aeabi_fdiv>
 800a9ea:	4604      	mov	r4, r0
 800a9ec:	4620      	mov	r0, r4
 800a9ee:	bd38      	pop	{r3, r4, r5, pc}

0800a9f0 <__ieee754_rem_pio2>:
 800a9f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9f4:	4614      	mov	r4, r2
 800a9f6:	4ac4      	ldr	r2, [pc, #784]	; (800ad08 <__ieee754_rem_pio2+0x318>)
 800a9f8:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800a9fc:	b08d      	sub	sp, #52	; 0x34
 800a9fe:	4592      	cmp	sl, r2
 800aa00:	9104      	str	r1, [sp, #16]
 800aa02:	dc07      	bgt.n	800aa14 <__ieee754_rem_pio2+0x24>
 800aa04:	2200      	movs	r2, #0
 800aa06:	2300      	movs	r3, #0
 800aa08:	e9c4 0100 	strd	r0, r1, [r4]
 800aa0c:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800aa10:	2500      	movs	r5, #0
 800aa12:	e024      	b.n	800aa5e <__ieee754_rem_pio2+0x6e>
 800aa14:	4abd      	ldr	r2, [pc, #756]	; (800ad0c <__ieee754_rem_pio2+0x31c>)
 800aa16:	4592      	cmp	sl, r2
 800aa18:	dc72      	bgt.n	800ab00 <__ieee754_rem_pio2+0x110>
 800aa1a:	9b04      	ldr	r3, [sp, #16]
 800aa1c:	4dbc      	ldr	r5, [pc, #752]	; (800ad10 <__ieee754_rem_pio2+0x320>)
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	a3ab      	add	r3, pc, #684	; (adr r3, 800acd0 <__ieee754_rem_pio2+0x2e0>)
 800aa22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa26:	dd36      	ble.n	800aa96 <__ieee754_rem_pio2+0xa6>
 800aa28:	f7f5 fb9e 	bl	8000168 <__aeabi_dsub>
 800aa2c:	45aa      	cmp	sl, r5
 800aa2e:	4606      	mov	r6, r0
 800aa30:	460f      	mov	r7, r1
 800aa32:	d018      	beq.n	800aa66 <__ieee754_rem_pio2+0x76>
 800aa34:	a3a8      	add	r3, pc, #672	; (adr r3, 800acd8 <__ieee754_rem_pio2+0x2e8>)
 800aa36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa3a:	f7f5 fb95 	bl	8000168 <__aeabi_dsub>
 800aa3e:	4602      	mov	r2, r0
 800aa40:	460b      	mov	r3, r1
 800aa42:	4630      	mov	r0, r6
 800aa44:	e9c4 2300 	strd	r2, r3, [r4]
 800aa48:	4639      	mov	r1, r7
 800aa4a:	f7f5 fb8d 	bl	8000168 <__aeabi_dsub>
 800aa4e:	a3a2      	add	r3, pc, #648	; (adr r3, 800acd8 <__ieee754_rem_pio2+0x2e8>)
 800aa50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa54:	f7f5 fb88 	bl	8000168 <__aeabi_dsub>
 800aa58:	2501      	movs	r5, #1
 800aa5a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800aa5e:	4628      	mov	r0, r5
 800aa60:	b00d      	add	sp, #52	; 0x34
 800aa62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa66:	a39e      	add	r3, pc, #632	; (adr r3, 800ace0 <__ieee754_rem_pio2+0x2f0>)
 800aa68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa6c:	f7f5 fb7c 	bl	8000168 <__aeabi_dsub>
 800aa70:	a39d      	add	r3, pc, #628	; (adr r3, 800ace8 <__ieee754_rem_pio2+0x2f8>)
 800aa72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa76:	4606      	mov	r6, r0
 800aa78:	460f      	mov	r7, r1
 800aa7a:	f7f5 fb75 	bl	8000168 <__aeabi_dsub>
 800aa7e:	4602      	mov	r2, r0
 800aa80:	460b      	mov	r3, r1
 800aa82:	4630      	mov	r0, r6
 800aa84:	e9c4 2300 	strd	r2, r3, [r4]
 800aa88:	4639      	mov	r1, r7
 800aa8a:	f7f5 fb6d 	bl	8000168 <__aeabi_dsub>
 800aa8e:	a396      	add	r3, pc, #600	; (adr r3, 800ace8 <__ieee754_rem_pio2+0x2f8>)
 800aa90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa94:	e7de      	b.n	800aa54 <__ieee754_rem_pio2+0x64>
 800aa96:	f7f5 fb69 	bl	800016c <__adddf3>
 800aa9a:	45aa      	cmp	sl, r5
 800aa9c:	4606      	mov	r6, r0
 800aa9e:	460f      	mov	r7, r1
 800aaa0:	d016      	beq.n	800aad0 <__ieee754_rem_pio2+0xe0>
 800aaa2:	a38d      	add	r3, pc, #564	; (adr r3, 800acd8 <__ieee754_rem_pio2+0x2e8>)
 800aaa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaa8:	f7f5 fb60 	bl	800016c <__adddf3>
 800aaac:	4602      	mov	r2, r0
 800aaae:	460b      	mov	r3, r1
 800aab0:	4630      	mov	r0, r6
 800aab2:	e9c4 2300 	strd	r2, r3, [r4]
 800aab6:	4639      	mov	r1, r7
 800aab8:	f7f5 fb56 	bl	8000168 <__aeabi_dsub>
 800aabc:	a386      	add	r3, pc, #536	; (adr r3, 800acd8 <__ieee754_rem_pio2+0x2e8>)
 800aabe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aac2:	f7f5 fb53 	bl	800016c <__adddf3>
 800aac6:	f04f 35ff 	mov.w	r5, #4294967295
 800aaca:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800aace:	e7c6      	b.n	800aa5e <__ieee754_rem_pio2+0x6e>
 800aad0:	a383      	add	r3, pc, #524	; (adr r3, 800ace0 <__ieee754_rem_pio2+0x2f0>)
 800aad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aad6:	f7f5 fb49 	bl	800016c <__adddf3>
 800aada:	a383      	add	r3, pc, #524	; (adr r3, 800ace8 <__ieee754_rem_pio2+0x2f8>)
 800aadc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aae0:	4606      	mov	r6, r0
 800aae2:	460f      	mov	r7, r1
 800aae4:	f7f5 fb42 	bl	800016c <__adddf3>
 800aae8:	4602      	mov	r2, r0
 800aaea:	460b      	mov	r3, r1
 800aaec:	4630      	mov	r0, r6
 800aaee:	e9c4 2300 	strd	r2, r3, [r4]
 800aaf2:	4639      	mov	r1, r7
 800aaf4:	f7f5 fb38 	bl	8000168 <__aeabi_dsub>
 800aaf8:	a37b      	add	r3, pc, #492	; (adr r3, 800ace8 <__ieee754_rem_pio2+0x2f8>)
 800aafa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aafe:	e7e0      	b.n	800aac2 <__ieee754_rem_pio2+0xd2>
 800ab00:	4a84      	ldr	r2, [pc, #528]	; (800ad14 <__ieee754_rem_pio2+0x324>)
 800ab02:	4592      	cmp	sl, r2
 800ab04:	f300 80d5 	bgt.w	800acb2 <__ieee754_rem_pio2+0x2c2>
 800ab08:	f000 fef8 	bl	800b8fc <fabs>
 800ab0c:	a378      	add	r3, pc, #480	; (adr r3, 800acf0 <__ieee754_rem_pio2+0x300>)
 800ab0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab12:	4606      	mov	r6, r0
 800ab14:	460f      	mov	r7, r1
 800ab16:	f7f5 fcdf 	bl	80004d8 <__aeabi_dmul>
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	4b7e      	ldr	r3, [pc, #504]	; (800ad18 <__ieee754_rem_pio2+0x328>)
 800ab1e:	f7f5 fb25 	bl	800016c <__adddf3>
 800ab22:	f7f5 ff89 	bl	8000a38 <__aeabi_d2iz>
 800ab26:	4605      	mov	r5, r0
 800ab28:	f7f5 fc6c 	bl	8000404 <__aeabi_i2d>
 800ab2c:	4602      	mov	r2, r0
 800ab2e:	460b      	mov	r3, r1
 800ab30:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ab34:	a366      	add	r3, pc, #408	; (adr r3, 800acd0 <__ieee754_rem_pio2+0x2e0>)
 800ab36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab3a:	f7f5 fccd 	bl	80004d8 <__aeabi_dmul>
 800ab3e:	4602      	mov	r2, r0
 800ab40:	460b      	mov	r3, r1
 800ab42:	4630      	mov	r0, r6
 800ab44:	4639      	mov	r1, r7
 800ab46:	f7f5 fb0f 	bl	8000168 <__aeabi_dsub>
 800ab4a:	a363      	add	r3, pc, #396	; (adr r3, 800acd8 <__ieee754_rem_pio2+0x2e8>)
 800ab4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab50:	4680      	mov	r8, r0
 800ab52:	4689      	mov	r9, r1
 800ab54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab58:	f7f5 fcbe 	bl	80004d8 <__aeabi_dmul>
 800ab5c:	2d1f      	cmp	r5, #31
 800ab5e:	4606      	mov	r6, r0
 800ab60:	460f      	mov	r7, r1
 800ab62:	dc0e      	bgt.n	800ab82 <__ieee754_rem_pio2+0x192>
 800ab64:	4b6d      	ldr	r3, [pc, #436]	; (800ad1c <__ieee754_rem_pio2+0x32c>)
 800ab66:	1e6a      	subs	r2, r5, #1
 800ab68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab6c:	4553      	cmp	r3, sl
 800ab6e:	d008      	beq.n	800ab82 <__ieee754_rem_pio2+0x192>
 800ab70:	4632      	mov	r2, r6
 800ab72:	463b      	mov	r3, r7
 800ab74:	4640      	mov	r0, r8
 800ab76:	4649      	mov	r1, r9
 800ab78:	f7f5 faf6 	bl	8000168 <__aeabi_dsub>
 800ab7c:	e9c4 0100 	strd	r0, r1, [r4]
 800ab80:	e013      	b.n	800abaa <__ieee754_rem_pio2+0x1ba>
 800ab82:	463b      	mov	r3, r7
 800ab84:	4632      	mov	r2, r6
 800ab86:	4640      	mov	r0, r8
 800ab88:	4649      	mov	r1, r9
 800ab8a:	f7f5 faed 	bl	8000168 <__aeabi_dsub>
 800ab8e:	ea4f 532a 	mov.w	r3, sl, asr #20
 800ab92:	9305      	str	r3, [sp, #20]
 800ab94:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ab98:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 800ab9c:	f1ba 0f10 	cmp.w	sl, #16
 800aba0:	dc1f      	bgt.n	800abe2 <__ieee754_rem_pio2+0x1f2>
 800aba2:	4602      	mov	r2, r0
 800aba4:	460b      	mov	r3, r1
 800aba6:	e9c4 2300 	strd	r2, r3, [r4]
 800abaa:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800abae:	4640      	mov	r0, r8
 800abb0:	4653      	mov	r3, sl
 800abb2:	4649      	mov	r1, r9
 800abb4:	f7f5 fad8 	bl	8000168 <__aeabi_dsub>
 800abb8:	4632      	mov	r2, r6
 800abba:	463b      	mov	r3, r7
 800abbc:	f7f5 fad4 	bl	8000168 <__aeabi_dsub>
 800abc0:	460b      	mov	r3, r1
 800abc2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800abc6:	9904      	ldr	r1, [sp, #16]
 800abc8:	4602      	mov	r2, r0
 800abca:	2900      	cmp	r1, #0
 800abcc:	f6bf af47 	bge.w	800aa5e <__ieee754_rem_pio2+0x6e>
 800abd0:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 800abd4:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800abd8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800abdc:	60e3      	str	r3, [r4, #12]
 800abde:	426d      	negs	r5, r5
 800abe0:	e73d      	b.n	800aa5e <__ieee754_rem_pio2+0x6e>
 800abe2:	a33f      	add	r3, pc, #252	; (adr r3, 800ace0 <__ieee754_rem_pio2+0x2f0>)
 800abe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abe8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800abec:	f7f5 fc74 	bl	80004d8 <__aeabi_dmul>
 800abf0:	4606      	mov	r6, r0
 800abf2:	460f      	mov	r7, r1
 800abf4:	4602      	mov	r2, r0
 800abf6:	460b      	mov	r3, r1
 800abf8:	4640      	mov	r0, r8
 800abfa:	4649      	mov	r1, r9
 800abfc:	f7f5 fab4 	bl	8000168 <__aeabi_dsub>
 800ac00:	4602      	mov	r2, r0
 800ac02:	460b      	mov	r3, r1
 800ac04:	4682      	mov	sl, r0
 800ac06:	468b      	mov	fp, r1
 800ac08:	4640      	mov	r0, r8
 800ac0a:	4649      	mov	r1, r9
 800ac0c:	f7f5 faac 	bl	8000168 <__aeabi_dsub>
 800ac10:	4632      	mov	r2, r6
 800ac12:	463b      	mov	r3, r7
 800ac14:	f7f5 faa8 	bl	8000168 <__aeabi_dsub>
 800ac18:	a333      	add	r3, pc, #204	; (adr r3, 800ace8 <__ieee754_rem_pio2+0x2f8>)
 800ac1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac1e:	4606      	mov	r6, r0
 800ac20:	460f      	mov	r7, r1
 800ac22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac26:	f7f5 fc57 	bl	80004d8 <__aeabi_dmul>
 800ac2a:	4632      	mov	r2, r6
 800ac2c:	463b      	mov	r3, r7
 800ac2e:	f7f5 fa9b 	bl	8000168 <__aeabi_dsub>
 800ac32:	4602      	mov	r2, r0
 800ac34:	460b      	mov	r3, r1
 800ac36:	4606      	mov	r6, r0
 800ac38:	460f      	mov	r7, r1
 800ac3a:	4650      	mov	r0, sl
 800ac3c:	4659      	mov	r1, fp
 800ac3e:	f7f5 fa93 	bl	8000168 <__aeabi_dsub>
 800ac42:	9a05      	ldr	r2, [sp, #20]
 800ac44:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ac48:	1ad3      	subs	r3, r2, r3
 800ac4a:	2b31      	cmp	r3, #49	; 0x31
 800ac4c:	dc06      	bgt.n	800ac5c <__ieee754_rem_pio2+0x26c>
 800ac4e:	4602      	mov	r2, r0
 800ac50:	460b      	mov	r3, r1
 800ac52:	46d0      	mov	r8, sl
 800ac54:	46d9      	mov	r9, fp
 800ac56:	e9c4 2300 	strd	r2, r3, [r4]
 800ac5a:	e7a6      	b.n	800abaa <__ieee754_rem_pio2+0x1ba>
 800ac5c:	a326      	add	r3, pc, #152	; (adr r3, 800acf8 <__ieee754_rem_pio2+0x308>)
 800ac5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac66:	f7f5 fc37 	bl	80004d8 <__aeabi_dmul>
 800ac6a:	4606      	mov	r6, r0
 800ac6c:	460f      	mov	r7, r1
 800ac6e:	4602      	mov	r2, r0
 800ac70:	460b      	mov	r3, r1
 800ac72:	4650      	mov	r0, sl
 800ac74:	4659      	mov	r1, fp
 800ac76:	f7f5 fa77 	bl	8000168 <__aeabi_dsub>
 800ac7a:	4602      	mov	r2, r0
 800ac7c:	460b      	mov	r3, r1
 800ac7e:	4680      	mov	r8, r0
 800ac80:	4689      	mov	r9, r1
 800ac82:	4650      	mov	r0, sl
 800ac84:	4659      	mov	r1, fp
 800ac86:	f7f5 fa6f 	bl	8000168 <__aeabi_dsub>
 800ac8a:	4632      	mov	r2, r6
 800ac8c:	463b      	mov	r3, r7
 800ac8e:	f7f5 fa6b 	bl	8000168 <__aeabi_dsub>
 800ac92:	a31b      	add	r3, pc, #108	; (adr r3, 800ad00 <__ieee754_rem_pio2+0x310>)
 800ac94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac98:	4606      	mov	r6, r0
 800ac9a:	460f      	mov	r7, r1
 800ac9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aca0:	f7f5 fc1a 	bl	80004d8 <__aeabi_dmul>
 800aca4:	4632      	mov	r2, r6
 800aca6:	463b      	mov	r3, r7
 800aca8:	f7f5 fa5e 	bl	8000168 <__aeabi_dsub>
 800acac:	4606      	mov	r6, r0
 800acae:	460f      	mov	r7, r1
 800acb0:	e75e      	b.n	800ab70 <__ieee754_rem_pio2+0x180>
 800acb2:	4a1b      	ldr	r2, [pc, #108]	; (800ad20 <__ieee754_rem_pio2+0x330>)
 800acb4:	4592      	cmp	sl, r2
 800acb6:	dd35      	ble.n	800ad24 <__ieee754_rem_pio2+0x334>
 800acb8:	4602      	mov	r2, r0
 800acba:	460b      	mov	r3, r1
 800acbc:	f7f5 fa54 	bl	8000168 <__aeabi_dsub>
 800acc0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800acc4:	e9c4 0100 	strd	r0, r1, [r4]
 800acc8:	e6a2      	b.n	800aa10 <__ieee754_rem_pio2+0x20>
 800acca:	bf00      	nop
 800accc:	f3af 8000 	nop.w
 800acd0:	54400000 	.word	0x54400000
 800acd4:	3ff921fb 	.word	0x3ff921fb
 800acd8:	1a626331 	.word	0x1a626331
 800acdc:	3dd0b461 	.word	0x3dd0b461
 800ace0:	1a600000 	.word	0x1a600000
 800ace4:	3dd0b461 	.word	0x3dd0b461
 800ace8:	2e037073 	.word	0x2e037073
 800acec:	3ba3198a 	.word	0x3ba3198a
 800acf0:	6dc9c883 	.word	0x6dc9c883
 800acf4:	3fe45f30 	.word	0x3fe45f30
 800acf8:	2e000000 	.word	0x2e000000
 800acfc:	3ba3198a 	.word	0x3ba3198a
 800ad00:	252049c1 	.word	0x252049c1
 800ad04:	397b839a 	.word	0x397b839a
 800ad08:	3fe921fb 	.word	0x3fe921fb
 800ad0c:	4002d97b 	.word	0x4002d97b
 800ad10:	3ff921fb 	.word	0x3ff921fb
 800ad14:	413921fb 	.word	0x413921fb
 800ad18:	3fe00000 	.word	0x3fe00000
 800ad1c:	0800c69c 	.word	0x0800c69c
 800ad20:	7fefffff 	.word	0x7fefffff
 800ad24:	ea4f 552a 	mov.w	r5, sl, asr #20
 800ad28:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800ad2c:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800ad30:	460f      	mov	r7, r1
 800ad32:	4606      	mov	r6, r0
 800ad34:	f7f5 fe80 	bl	8000a38 <__aeabi_d2iz>
 800ad38:	f7f5 fb64 	bl	8000404 <__aeabi_i2d>
 800ad3c:	4602      	mov	r2, r0
 800ad3e:	460b      	mov	r3, r1
 800ad40:	4630      	mov	r0, r6
 800ad42:	4639      	mov	r1, r7
 800ad44:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ad48:	f7f5 fa0e 	bl	8000168 <__aeabi_dsub>
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	4b22      	ldr	r3, [pc, #136]	; (800add8 <__ieee754_rem_pio2+0x3e8>)
 800ad50:	f7f5 fbc2 	bl	80004d8 <__aeabi_dmul>
 800ad54:	460f      	mov	r7, r1
 800ad56:	4606      	mov	r6, r0
 800ad58:	f7f5 fe6e 	bl	8000a38 <__aeabi_d2iz>
 800ad5c:	f7f5 fb52 	bl	8000404 <__aeabi_i2d>
 800ad60:	4602      	mov	r2, r0
 800ad62:	460b      	mov	r3, r1
 800ad64:	4630      	mov	r0, r6
 800ad66:	4639      	mov	r1, r7
 800ad68:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ad6c:	f7f5 f9fc 	bl	8000168 <__aeabi_dsub>
 800ad70:	2200      	movs	r2, #0
 800ad72:	4b19      	ldr	r3, [pc, #100]	; (800add8 <__ieee754_rem_pio2+0x3e8>)
 800ad74:	f7f5 fbb0 	bl	80004d8 <__aeabi_dmul>
 800ad78:	f04f 0803 	mov.w	r8, #3
 800ad7c:	2600      	movs	r6, #0
 800ad7e:	2700      	movs	r7, #0
 800ad80:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800ad84:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 800ad88:	4632      	mov	r2, r6
 800ad8a:	e879 0102 	ldrd	r0, r1, [r9], #-8
 800ad8e:	463b      	mov	r3, r7
 800ad90:	46c2      	mov	sl, r8
 800ad92:	f108 38ff 	add.w	r8, r8, #4294967295
 800ad96:	f7f5 fe07 	bl	80009a8 <__aeabi_dcmpeq>
 800ad9a:	2800      	cmp	r0, #0
 800ad9c:	d1f4      	bne.n	800ad88 <__ieee754_rem_pio2+0x398>
 800ad9e:	4b0f      	ldr	r3, [pc, #60]	; (800addc <__ieee754_rem_pio2+0x3ec>)
 800ada0:	462a      	mov	r2, r5
 800ada2:	9301      	str	r3, [sp, #4]
 800ada4:	2302      	movs	r3, #2
 800ada6:	4621      	mov	r1, r4
 800ada8:	9300      	str	r3, [sp, #0]
 800adaa:	a806      	add	r0, sp, #24
 800adac:	4653      	mov	r3, sl
 800adae:	f000 f9ad 	bl	800b10c <__kernel_rem_pio2>
 800adb2:	9b04      	ldr	r3, [sp, #16]
 800adb4:	4605      	mov	r5, r0
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	f6bf ae51 	bge.w	800aa5e <__ieee754_rem_pio2+0x6e>
 800adbc:	e9d4 2100 	ldrd	r2, r1, [r4]
 800adc0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800adc4:	e9c4 2300 	strd	r2, r3, [r4]
 800adc8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800adcc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800add0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800add4:	e703      	b.n	800abde <__ieee754_rem_pio2+0x1ee>
 800add6:	bf00      	nop
 800add8:	41700000 	.word	0x41700000
 800addc:	0800c71c 	.word	0x0800c71c

0800ade0 <__ieee754_atan2f>:
 800ade0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ade2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800ade6:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800adea:	4603      	mov	r3, r0
 800adec:	dc05      	bgt.n	800adfa <__ieee754_atan2f+0x1a>
 800adee:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800adf2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800adf6:	4607      	mov	r7, r0
 800adf8:	dd04      	ble.n	800ae04 <__ieee754_atan2f+0x24>
 800adfa:	4618      	mov	r0, r3
 800adfc:	f7f5 feba 	bl	8000b74 <__addsf3>
 800ae00:	4603      	mov	r3, r0
 800ae02:	e011      	b.n	800ae28 <__ieee754_atan2f+0x48>
 800ae04:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800ae08:	d103      	bne.n	800ae12 <__ieee754_atan2f+0x32>
 800ae0a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ae0e:	f000 be79 	b.w	800bb04 <atanf>
 800ae12:	178c      	asrs	r4, r1, #30
 800ae14:	f004 0402 	and.w	r4, r4, #2
 800ae18:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800ae1c:	b932      	cbnz	r2, 800ae2c <__ieee754_atan2f+0x4c>
 800ae1e:	2c02      	cmp	r4, #2
 800ae20:	d04c      	beq.n	800aebc <__ieee754_atan2f+0xdc>
 800ae22:	2c03      	cmp	r4, #3
 800ae24:	d100      	bne.n	800ae28 <__ieee754_atan2f+0x48>
 800ae26:	4b29      	ldr	r3, [pc, #164]	; (800aecc <__ieee754_atan2f+0xec>)
 800ae28:	4618      	mov	r0, r3
 800ae2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae2c:	b91e      	cbnz	r6, 800ae36 <__ieee754_atan2f+0x56>
 800ae2e:	2f00      	cmp	r7, #0
 800ae30:	da4a      	bge.n	800aec8 <__ieee754_atan2f+0xe8>
 800ae32:	4b27      	ldr	r3, [pc, #156]	; (800aed0 <__ieee754_atan2f+0xf0>)
 800ae34:	e7f8      	b.n	800ae28 <__ieee754_atan2f+0x48>
 800ae36:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800ae3a:	d10e      	bne.n	800ae5a <__ieee754_atan2f+0x7a>
 800ae3c:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800ae40:	f104 34ff 	add.w	r4, r4, #4294967295
 800ae44:	d105      	bne.n	800ae52 <__ieee754_atan2f+0x72>
 800ae46:	2c02      	cmp	r4, #2
 800ae48:	d83a      	bhi.n	800aec0 <__ieee754_atan2f+0xe0>
 800ae4a:	4b22      	ldr	r3, [pc, #136]	; (800aed4 <__ieee754_atan2f+0xf4>)
 800ae4c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800ae50:	e7ea      	b.n	800ae28 <__ieee754_atan2f+0x48>
 800ae52:	2c02      	cmp	r4, #2
 800ae54:	d836      	bhi.n	800aec4 <__ieee754_atan2f+0xe4>
 800ae56:	4b20      	ldr	r3, [pc, #128]	; (800aed8 <__ieee754_atan2f+0xf8>)
 800ae58:	e7f8      	b.n	800ae4c <__ieee754_atan2f+0x6c>
 800ae5a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800ae5e:	d0e6      	beq.n	800ae2e <__ieee754_atan2f+0x4e>
 800ae60:	1b92      	subs	r2, r2, r6
 800ae62:	f1b2 5ff4 	cmp.w	r2, #511705088	; 0x1e800000
 800ae66:	ea4f 50e2 	mov.w	r0, r2, asr #23
 800ae6a:	da17      	bge.n	800ae9c <__ieee754_atan2f+0xbc>
 800ae6c:	2900      	cmp	r1, #0
 800ae6e:	da01      	bge.n	800ae74 <__ieee754_atan2f+0x94>
 800ae70:	303c      	adds	r0, #60	; 0x3c
 800ae72:	db15      	blt.n	800aea0 <__ieee754_atan2f+0xc0>
 800ae74:	4618      	mov	r0, r3
 800ae76:	f7f6 f839 	bl	8000eec <__aeabi_fdiv>
 800ae7a:	f000 ff4f 	bl	800bd1c <fabsf>
 800ae7e:	f000 fe41 	bl	800bb04 <atanf>
 800ae82:	4603      	mov	r3, r0
 800ae84:	2c01      	cmp	r4, #1
 800ae86:	d00d      	beq.n	800aea4 <__ieee754_atan2f+0xc4>
 800ae88:	2c02      	cmp	r4, #2
 800ae8a:	d00e      	beq.n	800aeaa <__ieee754_atan2f+0xca>
 800ae8c:	2c00      	cmp	r4, #0
 800ae8e:	d0cb      	beq.n	800ae28 <__ieee754_atan2f+0x48>
 800ae90:	4912      	ldr	r1, [pc, #72]	; (800aedc <__ieee754_atan2f+0xfc>)
 800ae92:	4618      	mov	r0, r3
 800ae94:	f7f5 fe6e 	bl	8000b74 <__addsf3>
 800ae98:	4911      	ldr	r1, [pc, #68]	; (800aee0 <__ieee754_atan2f+0x100>)
 800ae9a:	e00c      	b.n	800aeb6 <__ieee754_atan2f+0xd6>
 800ae9c:	4b11      	ldr	r3, [pc, #68]	; (800aee4 <__ieee754_atan2f+0x104>)
 800ae9e:	e7f1      	b.n	800ae84 <__ieee754_atan2f+0xa4>
 800aea0:	2300      	movs	r3, #0
 800aea2:	e7ef      	b.n	800ae84 <__ieee754_atan2f+0xa4>
 800aea4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800aea8:	e7be      	b.n	800ae28 <__ieee754_atan2f+0x48>
 800aeaa:	490c      	ldr	r1, [pc, #48]	; (800aedc <__ieee754_atan2f+0xfc>)
 800aeac:	4618      	mov	r0, r3
 800aeae:	f7f5 fe61 	bl	8000b74 <__addsf3>
 800aeb2:	4601      	mov	r1, r0
 800aeb4:	480a      	ldr	r0, [pc, #40]	; (800aee0 <__ieee754_atan2f+0x100>)
 800aeb6:	f7f5 fe5b 	bl	8000b70 <__aeabi_fsub>
 800aeba:	e7a1      	b.n	800ae00 <__ieee754_atan2f+0x20>
 800aebc:	4b08      	ldr	r3, [pc, #32]	; (800aee0 <__ieee754_atan2f+0x100>)
 800aebe:	e7b3      	b.n	800ae28 <__ieee754_atan2f+0x48>
 800aec0:	4b09      	ldr	r3, [pc, #36]	; (800aee8 <__ieee754_atan2f+0x108>)
 800aec2:	e7b1      	b.n	800ae28 <__ieee754_atan2f+0x48>
 800aec4:	2300      	movs	r3, #0
 800aec6:	e7af      	b.n	800ae28 <__ieee754_atan2f+0x48>
 800aec8:	4b06      	ldr	r3, [pc, #24]	; (800aee4 <__ieee754_atan2f+0x104>)
 800aeca:	e7ad      	b.n	800ae28 <__ieee754_atan2f+0x48>
 800aecc:	c0490fdb 	.word	0xc0490fdb
 800aed0:	bfc90fdb 	.word	0xbfc90fdb
 800aed4:	0800c824 	.word	0x0800c824
 800aed8:	0800c830 	.word	0x0800c830
 800aedc:	33bbbd2e 	.word	0x33bbbd2e
 800aee0:	40490fdb 	.word	0x40490fdb
 800aee4:	3fc90fdb 	.word	0x3fc90fdb
 800aee8:	3f490fdb 	.word	0x3f490fdb

0800aeec <__ieee754_sqrtf>:
 800aeec:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800aef0:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800aef4:	b570      	push	{r4, r5, r6, lr}
 800aef6:	4603      	mov	r3, r0
 800aef8:	4604      	mov	r4, r0
 800aefa:	d309      	bcc.n	800af10 <__ieee754_sqrtf+0x24>
 800aefc:	4601      	mov	r1, r0
 800aefe:	f7f5 ff41 	bl	8000d84 <__aeabi_fmul>
 800af02:	4601      	mov	r1, r0
 800af04:	4620      	mov	r0, r4
 800af06:	f7f5 fe35 	bl	8000b74 <__addsf3>
 800af0a:	4604      	mov	r4, r0
 800af0c:	4620      	mov	r0, r4
 800af0e:	bd70      	pop	{r4, r5, r6, pc}
 800af10:	2a00      	cmp	r2, #0
 800af12:	d0fb      	beq.n	800af0c <__ieee754_sqrtf+0x20>
 800af14:	2800      	cmp	r0, #0
 800af16:	da06      	bge.n	800af26 <__ieee754_sqrtf+0x3a>
 800af18:	4601      	mov	r1, r0
 800af1a:	f7f5 fe29 	bl	8000b70 <__aeabi_fsub>
 800af1e:	4601      	mov	r1, r0
 800af20:	f7f5 ffe4 	bl	8000eec <__aeabi_fdiv>
 800af24:	e7f1      	b.n	800af0a <__ieee754_sqrtf+0x1e>
 800af26:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 800af2a:	ea4f 51e0 	mov.w	r1, r0, asr #23
 800af2e:	d029      	beq.n	800af84 <__ieee754_sqrtf+0x98>
 800af30:	f3c3 0216 	ubfx	r2, r3, #0, #23
 800af34:	07cb      	lsls	r3, r1, #31
 800af36:	f04f 0300 	mov.w	r3, #0
 800af3a:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 800af3e:	f04f 0419 	mov.w	r4, #25
 800af42:	461e      	mov	r6, r3
 800af44:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800af48:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800af4c:	bf58      	it	pl
 800af4e:	0052      	lslpl	r2, r2, #1
 800af50:	1040      	asrs	r0, r0, #1
 800af52:	0052      	lsls	r2, r2, #1
 800af54:	1875      	adds	r5, r6, r1
 800af56:	4295      	cmp	r5, r2
 800af58:	bfde      	ittt	le
 800af5a:	186e      	addle	r6, r5, r1
 800af5c:	1b52      	suble	r2, r2, r5
 800af5e:	185b      	addle	r3, r3, r1
 800af60:	3c01      	subs	r4, #1
 800af62:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800af66:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800af6a:	d1f3      	bne.n	800af54 <__ieee754_sqrtf+0x68>
 800af6c:	b112      	cbz	r2, 800af74 <__ieee754_sqrtf+0x88>
 800af6e:	3301      	adds	r3, #1
 800af70:	f023 0301 	bic.w	r3, r3, #1
 800af74:	105c      	asrs	r4, r3, #1
 800af76:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 800af7a:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 800af7e:	e7c5      	b.n	800af0c <__ieee754_sqrtf+0x20>
 800af80:	005b      	lsls	r3, r3, #1
 800af82:	3201      	adds	r2, #1
 800af84:	0218      	lsls	r0, r3, #8
 800af86:	d5fb      	bpl.n	800af80 <__ieee754_sqrtf+0x94>
 800af88:	3a01      	subs	r2, #1
 800af8a:	1a89      	subs	r1, r1, r2
 800af8c:	e7d0      	b.n	800af30 <__ieee754_sqrtf+0x44>
	...

0800af90 <__kernel_cos>:
 800af90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af94:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800af98:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800af9c:	4680      	mov	r8, r0
 800af9e:	460f      	mov	r7, r1
 800afa0:	e9cd 2300 	strd	r2, r3, [sp]
 800afa4:	da04      	bge.n	800afb0 <__kernel_cos+0x20>
 800afa6:	f7f5 fd47 	bl	8000a38 <__aeabi_d2iz>
 800afaa:	2800      	cmp	r0, #0
 800afac:	f000 8086 	beq.w	800b0bc <__kernel_cos+0x12c>
 800afb0:	4642      	mov	r2, r8
 800afb2:	463b      	mov	r3, r7
 800afb4:	4640      	mov	r0, r8
 800afb6:	4639      	mov	r1, r7
 800afb8:	f7f5 fa8e 	bl	80004d8 <__aeabi_dmul>
 800afbc:	2200      	movs	r2, #0
 800afbe:	4b4e      	ldr	r3, [pc, #312]	; (800b0f8 <__kernel_cos+0x168>)
 800afc0:	4604      	mov	r4, r0
 800afc2:	460d      	mov	r5, r1
 800afc4:	f7f5 fa88 	bl	80004d8 <__aeabi_dmul>
 800afc8:	a33f      	add	r3, pc, #252	; (adr r3, 800b0c8 <__kernel_cos+0x138>)
 800afca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afce:	4682      	mov	sl, r0
 800afd0:	468b      	mov	fp, r1
 800afd2:	4620      	mov	r0, r4
 800afd4:	4629      	mov	r1, r5
 800afd6:	f7f5 fa7f 	bl	80004d8 <__aeabi_dmul>
 800afda:	a33d      	add	r3, pc, #244	; (adr r3, 800b0d0 <__kernel_cos+0x140>)
 800afdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afe0:	f7f5 f8c4 	bl	800016c <__adddf3>
 800afe4:	4622      	mov	r2, r4
 800afe6:	462b      	mov	r3, r5
 800afe8:	f7f5 fa76 	bl	80004d8 <__aeabi_dmul>
 800afec:	a33a      	add	r3, pc, #232	; (adr r3, 800b0d8 <__kernel_cos+0x148>)
 800afee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aff2:	f7f5 f8b9 	bl	8000168 <__aeabi_dsub>
 800aff6:	4622      	mov	r2, r4
 800aff8:	462b      	mov	r3, r5
 800affa:	f7f5 fa6d 	bl	80004d8 <__aeabi_dmul>
 800affe:	a338      	add	r3, pc, #224	; (adr r3, 800b0e0 <__kernel_cos+0x150>)
 800b000:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b004:	f7f5 f8b2 	bl	800016c <__adddf3>
 800b008:	4622      	mov	r2, r4
 800b00a:	462b      	mov	r3, r5
 800b00c:	f7f5 fa64 	bl	80004d8 <__aeabi_dmul>
 800b010:	a335      	add	r3, pc, #212	; (adr r3, 800b0e8 <__kernel_cos+0x158>)
 800b012:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b016:	f7f5 f8a7 	bl	8000168 <__aeabi_dsub>
 800b01a:	4622      	mov	r2, r4
 800b01c:	462b      	mov	r3, r5
 800b01e:	f7f5 fa5b 	bl	80004d8 <__aeabi_dmul>
 800b022:	a333      	add	r3, pc, #204	; (adr r3, 800b0f0 <__kernel_cos+0x160>)
 800b024:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b028:	f7f5 f8a0 	bl	800016c <__adddf3>
 800b02c:	4622      	mov	r2, r4
 800b02e:	462b      	mov	r3, r5
 800b030:	f7f5 fa52 	bl	80004d8 <__aeabi_dmul>
 800b034:	4622      	mov	r2, r4
 800b036:	462b      	mov	r3, r5
 800b038:	f7f5 fa4e 	bl	80004d8 <__aeabi_dmul>
 800b03c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b040:	4604      	mov	r4, r0
 800b042:	460d      	mov	r5, r1
 800b044:	4640      	mov	r0, r8
 800b046:	4639      	mov	r1, r7
 800b048:	f7f5 fa46 	bl	80004d8 <__aeabi_dmul>
 800b04c:	460b      	mov	r3, r1
 800b04e:	4602      	mov	r2, r0
 800b050:	4629      	mov	r1, r5
 800b052:	4620      	mov	r0, r4
 800b054:	f7f5 f888 	bl	8000168 <__aeabi_dsub>
 800b058:	4b28      	ldr	r3, [pc, #160]	; (800b0fc <__kernel_cos+0x16c>)
 800b05a:	4680      	mov	r8, r0
 800b05c:	429e      	cmp	r6, r3
 800b05e:	4689      	mov	r9, r1
 800b060:	dc0e      	bgt.n	800b080 <__kernel_cos+0xf0>
 800b062:	4602      	mov	r2, r0
 800b064:	460b      	mov	r3, r1
 800b066:	4650      	mov	r0, sl
 800b068:	4659      	mov	r1, fp
 800b06a:	f7f5 f87d 	bl	8000168 <__aeabi_dsub>
 800b06e:	4602      	mov	r2, r0
 800b070:	2000      	movs	r0, #0
 800b072:	460b      	mov	r3, r1
 800b074:	4922      	ldr	r1, [pc, #136]	; (800b100 <__kernel_cos+0x170>)
 800b076:	f7f5 f877 	bl	8000168 <__aeabi_dsub>
 800b07a:	b003      	add	sp, #12
 800b07c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b080:	2400      	movs	r4, #0
 800b082:	4b20      	ldr	r3, [pc, #128]	; (800b104 <__kernel_cos+0x174>)
 800b084:	4622      	mov	r2, r4
 800b086:	429e      	cmp	r6, r3
 800b088:	bfcc      	ite	gt
 800b08a:	4d1f      	ldrgt	r5, [pc, #124]	; (800b108 <__kernel_cos+0x178>)
 800b08c:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800b090:	462b      	mov	r3, r5
 800b092:	2000      	movs	r0, #0
 800b094:	491a      	ldr	r1, [pc, #104]	; (800b100 <__kernel_cos+0x170>)
 800b096:	f7f5 f867 	bl	8000168 <__aeabi_dsub>
 800b09a:	4622      	mov	r2, r4
 800b09c:	4606      	mov	r6, r0
 800b09e:	460f      	mov	r7, r1
 800b0a0:	462b      	mov	r3, r5
 800b0a2:	4650      	mov	r0, sl
 800b0a4:	4659      	mov	r1, fp
 800b0a6:	f7f5 f85f 	bl	8000168 <__aeabi_dsub>
 800b0aa:	4642      	mov	r2, r8
 800b0ac:	464b      	mov	r3, r9
 800b0ae:	f7f5 f85b 	bl	8000168 <__aeabi_dsub>
 800b0b2:	4602      	mov	r2, r0
 800b0b4:	460b      	mov	r3, r1
 800b0b6:	4630      	mov	r0, r6
 800b0b8:	4639      	mov	r1, r7
 800b0ba:	e7dc      	b.n	800b076 <__kernel_cos+0xe6>
 800b0bc:	2000      	movs	r0, #0
 800b0be:	4910      	ldr	r1, [pc, #64]	; (800b100 <__kernel_cos+0x170>)
 800b0c0:	e7db      	b.n	800b07a <__kernel_cos+0xea>
 800b0c2:	bf00      	nop
 800b0c4:	f3af 8000 	nop.w
 800b0c8:	be8838d4 	.word	0xbe8838d4
 800b0cc:	bda8fae9 	.word	0xbda8fae9
 800b0d0:	bdb4b1c4 	.word	0xbdb4b1c4
 800b0d4:	3e21ee9e 	.word	0x3e21ee9e
 800b0d8:	809c52ad 	.word	0x809c52ad
 800b0dc:	3e927e4f 	.word	0x3e927e4f
 800b0e0:	19cb1590 	.word	0x19cb1590
 800b0e4:	3efa01a0 	.word	0x3efa01a0
 800b0e8:	16c15177 	.word	0x16c15177
 800b0ec:	3f56c16c 	.word	0x3f56c16c
 800b0f0:	5555554c 	.word	0x5555554c
 800b0f4:	3fa55555 	.word	0x3fa55555
 800b0f8:	3fe00000 	.word	0x3fe00000
 800b0fc:	3fd33332 	.word	0x3fd33332
 800b100:	3ff00000 	.word	0x3ff00000
 800b104:	3fe90000 	.word	0x3fe90000
 800b108:	3fd20000 	.word	0x3fd20000

0800b10c <__kernel_rem_pio2>:
 800b10c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b110:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800b114:	9308      	str	r3, [sp, #32]
 800b116:	9106      	str	r1, [sp, #24]
 800b118:	4bb6      	ldr	r3, [pc, #728]	; (800b3f4 <__kernel_rem_pio2+0x2e8>)
 800b11a:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800b11c:	f112 0f14 	cmn.w	r2, #20
 800b120:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b124:	bfa8      	it	ge
 800b126:	1ed4      	subge	r4, r2, #3
 800b128:	9302      	str	r3, [sp, #8]
 800b12a:	9b08      	ldr	r3, [sp, #32]
 800b12c:	bfb8      	it	lt
 800b12e:	2400      	movlt	r4, #0
 800b130:	f103 33ff 	add.w	r3, r3, #4294967295
 800b134:	9307      	str	r3, [sp, #28]
 800b136:	bfa4      	itt	ge
 800b138:	2318      	movge	r3, #24
 800b13a:	fb94 f4f3 	sdivge	r4, r4, r3
 800b13e:	f06f 0317 	mvn.w	r3, #23
 800b142:	fb04 3303 	mla	r3, r4, r3, r3
 800b146:	eb03 0b02 	add.w	fp, r3, r2
 800b14a:	9a07      	ldr	r2, [sp, #28]
 800b14c:	9b02      	ldr	r3, [sp, #8]
 800b14e:	1aa7      	subs	r7, r4, r2
 800b150:	eb03 0802 	add.w	r8, r3, r2
 800b154:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800b156:	2500      	movs	r5, #0
 800b158:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b15c:	2200      	movs	r2, #0
 800b15e:	2300      	movs	r3, #0
 800b160:	9009      	str	r0, [sp, #36]	; 0x24
 800b162:	ae20      	add	r6, sp, #128	; 0x80
 800b164:	4545      	cmp	r5, r8
 800b166:	dd14      	ble.n	800b192 <__kernel_rem_pio2+0x86>
 800b168:	f04f 0800 	mov.w	r8, #0
 800b16c:	9a08      	ldr	r2, [sp, #32]
 800b16e:	ab20      	add	r3, sp, #128	; 0x80
 800b170:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 800b174:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 800b178:	9b02      	ldr	r3, [sp, #8]
 800b17a:	4598      	cmp	r8, r3
 800b17c:	dc35      	bgt.n	800b1ea <__kernel_rem_pio2+0xde>
 800b17e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b180:	2200      	movs	r2, #0
 800b182:	f1a3 0908 	sub.w	r9, r3, #8
 800b186:	2300      	movs	r3, #0
 800b188:	462f      	mov	r7, r5
 800b18a:	2600      	movs	r6, #0
 800b18c:	e9cd 2300 	strd	r2, r3, [sp]
 800b190:	e01f      	b.n	800b1d2 <__kernel_rem_pio2+0xc6>
 800b192:	42ef      	cmn	r7, r5
 800b194:	d40b      	bmi.n	800b1ae <__kernel_rem_pio2+0xa2>
 800b196:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b19a:	e9cd 2300 	strd	r2, r3, [sp]
 800b19e:	f7f5 f931 	bl	8000404 <__aeabi_i2d>
 800b1a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b1a6:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b1aa:	3501      	adds	r5, #1
 800b1ac:	e7da      	b.n	800b164 <__kernel_rem_pio2+0x58>
 800b1ae:	4610      	mov	r0, r2
 800b1b0:	4619      	mov	r1, r3
 800b1b2:	e7f8      	b.n	800b1a6 <__kernel_rem_pio2+0x9a>
 800b1b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b1b8:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800b1bc:	f7f5 f98c 	bl	80004d8 <__aeabi_dmul>
 800b1c0:	4602      	mov	r2, r0
 800b1c2:	460b      	mov	r3, r1
 800b1c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b1c8:	f7f4 ffd0 	bl	800016c <__adddf3>
 800b1cc:	e9cd 0100 	strd	r0, r1, [sp]
 800b1d0:	3601      	adds	r6, #1
 800b1d2:	9b07      	ldr	r3, [sp, #28]
 800b1d4:	3f08      	subs	r7, #8
 800b1d6:	429e      	cmp	r6, r3
 800b1d8:	ddec      	ble.n	800b1b4 <__kernel_rem_pio2+0xa8>
 800b1da:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b1de:	f108 0801 	add.w	r8, r8, #1
 800b1e2:	e8ea 2302 	strd	r2, r3, [sl], #8
 800b1e6:	3508      	adds	r5, #8
 800b1e8:	e7c6      	b.n	800b178 <__kernel_rem_pio2+0x6c>
 800b1ea:	9b02      	ldr	r3, [sp, #8]
 800b1ec:	aa0c      	add	r2, sp, #48	; 0x30
 800b1ee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b1f2:	930b      	str	r3, [sp, #44]	; 0x2c
 800b1f4:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800b1f6:	9e02      	ldr	r6, [sp, #8]
 800b1f8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b1fc:	930a      	str	r3, [sp, #40]	; 0x28
 800b1fe:	ab98      	add	r3, sp, #608	; 0x260
 800b200:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b204:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 800b208:	ab70      	add	r3, sp, #448	; 0x1c0
 800b20a:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 800b20e:	46d0      	mov	r8, sl
 800b210:	46b1      	mov	r9, r6
 800b212:	af0c      	add	r7, sp, #48	; 0x30
 800b214:	9700      	str	r7, [sp, #0]
 800b216:	f1b9 0f00 	cmp.w	r9, #0
 800b21a:	f1a8 0808 	sub.w	r8, r8, #8
 800b21e:	dc71      	bgt.n	800b304 <__kernel_rem_pio2+0x1f8>
 800b220:	465a      	mov	r2, fp
 800b222:	4620      	mov	r0, r4
 800b224:	4629      	mov	r1, r5
 800b226:	f000 fbef 	bl	800ba08 <scalbn>
 800b22a:	2200      	movs	r2, #0
 800b22c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800b230:	4604      	mov	r4, r0
 800b232:	460d      	mov	r5, r1
 800b234:	f7f5 f950 	bl	80004d8 <__aeabi_dmul>
 800b238:	f000 fb66 	bl	800b908 <floor>
 800b23c:	2200      	movs	r2, #0
 800b23e:	4b6e      	ldr	r3, [pc, #440]	; (800b3f8 <__kernel_rem_pio2+0x2ec>)
 800b240:	f7f5 f94a 	bl	80004d8 <__aeabi_dmul>
 800b244:	4602      	mov	r2, r0
 800b246:	460b      	mov	r3, r1
 800b248:	4620      	mov	r0, r4
 800b24a:	4629      	mov	r1, r5
 800b24c:	f7f4 ff8c 	bl	8000168 <__aeabi_dsub>
 800b250:	460d      	mov	r5, r1
 800b252:	4604      	mov	r4, r0
 800b254:	f7f5 fbf0 	bl	8000a38 <__aeabi_d2iz>
 800b258:	9004      	str	r0, [sp, #16]
 800b25a:	f7f5 f8d3 	bl	8000404 <__aeabi_i2d>
 800b25e:	4602      	mov	r2, r0
 800b260:	460b      	mov	r3, r1
 800b262:	4620      	mov	r0, r4
 800b264:	4629      	mov	r1, r5
 800b266:	f7f4 ff7f 	bl	8000168 <__aeabi_dsub>
 800b26a:	f1bb 0f00 	cmp.w	fp, #0
 800b26e:	4680      	mov	r8, r0
 800b270:	4689      	mov	r9, r1
 800b272:	dd70      	ble.n	800b356 <__kernel_rem_pio2+0x24a>
 800b274:	1e72      	subs	r2, r6, #1
 800b276:	ab0c      	add	r3, sp, #48	; 0x30
 800b278:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800b27c:	9c04      	ldr	r4, [sp, #16]
 800b27e:	f1cb 0118 	rsb	r1, fp, #24
 800b282:	fa40 f301 	asr.w	r3, r0, r1
 800b286:	441c      	add	r4, r3
 800b288:	408b      	lsls	r3, r1
 800b28a:	1ac0      	subs	r0, r0, r3
 800b28c:	ab0c      	add	r3, sp, #48	; 0x30
 800b28e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800b292:	f1cb 0317 	rsb	r3, fp, #23
 800b296:	9404      	str	r4, [sp, #16]
 800b298:	fa40 f303 	asr.w	r3, r0, r3
 800b29c:	9300      	str	r3, [sp, #0]
 800b29e:	9b00      	ldr	r3, [sp, #0]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	dd66      	ble.n	800b372 <__kernel_rem_pio2+0x266>
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800b2aa:	4614      	mov	r4, r2
 800b2ac:	9b04      	ldr	r3, [sp, #16]
 800b2ae:	3301      	adds	r3, #1
 800b2b0:	9304      	str	r3, [sp, #16]
 800b2b2:	4296      	cmp	r6, r2
 800b2b4:	f300 80ac 	bgt.w	800b410 <__kernel_rem_pio2+0x304>
 800b2b8:	f1bb 0f00 	cmp.w	fp, #0
 800b2bc:	dd07      	ble.n	800b2ce <__kernel_rem_pio2+0x1c2>
 800b2be:	f1bb 0f01 	cmp.w	fp, #1
 800b2c2:	f000 80b4 	beq.w	800b42e <__kernel_rem_pio2+0x322>
 800b2c6:	f1bb 0f02 	cmp.w	fp, #2
 800b2ca:	f000 80ba 	beq.w	800b442 <__kernel_rem_pio2+0x336>
 800b2ce:	9b00      	ldr	r3, [sp, #0]
 800b2d0:	2b02      	cmp	r3, #2
 800b2d2:	d14e      	bne.n	800b372 <__kernel_rem_pio2+0x266>
 800b2d4:	4642      	mov	r2, r8
 800b2d6:	464b      	mov	r3, r9
 800b2d8:	2000      	movs	r0, #0
 800b2da:	4948      	ldr	r1, [pc, #288]	; (800b3fc <__kernel_rem_pio2+0x2f0>)
 800b2dc:	f7f4 ff44 	bl	8000168 <__aeabi_dsub>
 800b2e0:	4680      	mov	r8, r0
 800b2e2:	4689      	mov	r9, r1
 800b2e4:	2c00      	cmp	r4, #0
 800b2e6:	d044      	beq.n	800b372 <__kernel_rem_pio2+0x266>
 800b2e8:	465a      	mov	r2, fp
 800b2ea:	2000      	movs	r0, #0
 800b2ec:	4943      	ldr	r1, [pc, #268]	; (800b3fc <__kernel_rem_pio2+0x2f0>)
 800b2ee:	f000 fb8b 	bl	800ba08 <scalbn>
 800b2f2:	4602      	mov	r2, r0
 800b2f4:	460b      	mov	r3, r1
 800b2f6:	4640      	mov	r0, r8
 800b2f8:	4649      	mov	r1, r9
 800b2fa:	f7f4 ff35 	bl	8000168 <__aeabi_dsub>
 800b2fe:	4680      	mov	r8, r0
 800b300:	4689      	mov	r9, r1
 800b302:	e036      	b.n	800b372 <__kernel_rem_pio2+0x266>
 800b304:	2200      	movs	r2, #0
 800b306:	4b3e      	ldr	r3, [pc, #248]	; (800b400 <__kernel_rem_pio2+0x2f4>)
 800b308:	4620      	mov	r0, r4
 800b30a:	4629      	mov	r1, r5
 800b30c:	f7f5 f8e4 	bl	80004d8 <__aeabi_dmul>
 800b310:	f7f5 fb92 	bl	8000a38 <__aeabi_d2iz>
 800b314:	f7f5 f876 	bl	8000404 <__aeabi_i2d>
 800b318:	4602      	mov	r2, r0
 800b31a:	460b      	mov	r3, r1
 800b31c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b320:	2200      	movs	r2, #0
 800b322:	4b38      	ldr	r3, [pc, #224]	; (800b404 <__kernel_rem_pio2+0x2f8>)
 800b324:	f7f5 f8d8 	bl	80004d8 <__aeabi_dmul>
 800b328:	4602      	mov	r2, r0
 800b32a:	460b      	mov	r3, r1
 800b32c:	4620      	mov	r0, r4
 800b32e:	4629      	mov	r1, r5
 800b330:	f7f4 ff1a 	bl	8000168 <__aeabi_dsub>
 800b334:	f7f5 fb80 	bl	8000a38 <__aeabi_d2iz>
 800b338:	9b00      	ldr	r3, [sp, #0]
 800b33a:	f109 39ff 	add.w	r9, r9, #4294967295
 800b33e:	f843 0b04 	str.w	r0, [r3], #4
 800b342:	9300      	str	r3, [sp, #0]
 800b344:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b348:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b34c:	f7f4 ff0e 	bl	800016c <__adddf3>
 800b350:	4604      	mov	r4, r0
 800b352:	460d      	mov	r5, r1
 800b354:	e75f      	b.n	800b216 <__kernel_rem_pio2+0x10a>
 800b356:	d105      	bne.n	800b364 <__kernel_rem_pio2+0x258>
 800b358:	1e73      	subs	r3, r6, #1
 800b35a:	aa0c      	add	r2, sp, #48	; 0x30
 800b35c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800b360:	15c3      	asrs	r3, r0, #23
 800b362:	e79b      	b.n	800b29c <__kernel_rem_pio2+0x190>
 800b364:	2200      	movs	r2, #0
 800b366:	4b28      	ldr	r3, [pc, #160]	; (800b408 <__kernel_rem_pio2+0x2fc>)
 800b368:	f7f5 fb3c 	bl	80009e4 <__aeabi_dcmpge>
 800b36c:	2800      	cmp	r0, #0
 800b36e:	d13e      	bne.n	800b3ee <__kernel_rem_pio2+0x2e2>
 800b370:	9000      	str	r0, [sp, #0]
 800b372:	2200      	movs	r2, #0
 800b374:	2300      	movs	r3, #0
 800b376:	4640      	mov	r0, r8
 800b378:	4649      	mov	r1, r9
 800b37a:	f7f5 fb15 	bl	80009a8 <__aeabi_dcmpeq>
 800b37e:	2800      	cmp	r0, #0
 800b380:	f000 80b1 	beq.w	800b4e6 <__kernel_rem_pio2+0x3da>
 800b384:	1e74      	subs	r4, r6, #1
 800b386:	4623      	mov	r3, r4
 800b388:	2200      	movs	r2, #0
 800b38a:	9902      	ldr	r1, [sp, #8]
 800b38c:	428b      	cmp	r3, r1
 800b38e:	da5f      	bge.n	800b450 <__kernel_rem_pio2+0x344>
 800b390:	2a00      	cmp	r2, #0
 800b392:	d074      	beq.n	800b47e <__kernel_rem_pio2+0x372>
 800b394:	ab0c      	add	r3, sp, #48	; 0x30
 800b396:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800b39a:	f1ab 0b18 	sub.w	fp, fp, #24
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	f000 809f 	beq.w	800b4e2 <__kernel_rem_pio2+0x3d6>
 800b3a4:	465a      	mov	r2, fp
 800b3a6:	2000      	movs	r0, #0
 800b3a8:	4914      	ldr	r1, [pc, #80]	; (800b3fc <__kernel_rem_pio2+0x2f0>)
 800b3aa:	f000 fb2d 	bl	800ba08 <scalbn>
 800b3ae:	46a2      	mov	sl, r4
 800b3b0:	4606      	mov	r6, r0
 800b3b2:	460f      	mov	r7, r1
 800b3b4:	f04f 0800 	mov.w	r8, #0
 800b3b8:	ab70      	add	r3, sp, #448	; 0x1c0
 800b3ba:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800b400 <__kernel_rem_pio2+0x2f4>
 800b3be:	00e5      	lsls	r5, r4, #3
 800b3c0:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 800b3c4:	f1ba 0f00 	cmp.w	sl, #0
 800b3c8:	f280 80c3 	bge.w	800b552 <__kernel_rem_pio2+0x446>
 800b3cc:	4626      	mov	r6, r4
 800b3ce:	2e00      	cmp	r6, #0
 800b3d0:	f2c0 80f5 	blt.w	800b5be <__kernel_rem_pio2+0x4b2>
 800b3d4:	4b0d      	ldr	r3, [pc, #52]	; (800b40c <__kernel_rem_pio2+0x300>)
 800b3d6:	f04f 0a00 	mov.w	sl, #0
 800b3da:	9307      	str	r3, [sp, #28]
 800b3dc:	ab70      	add	r3, sp, #448	; 0x1c0
 800b3de:	f04f 0b00 	mov.w	fp, #0
 800b3e2:	f04f 0800 	mov.w	r8, #0
 800b3e6:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800b3ea:	1ba7      	subs	r7, r4, r6
 800b3ec:	e0db      	b.n	800b5a6 <__kernel_rem_pio2+0x49a>
 800b3ee:	2302      	movs	r3, #2
 800b3f0:	9300      	str	r3, [sp, #0]
 800b3f2:	e757      	b.n	800b2a4 <__kernel_rem_pio2+0x198>
 800b3f4:	0800c880 	.word	0x0800c880
 800b3f8:	40200000 	.word	0x40200000
 800b3fc:	3ff00000 	.word	0x3ff00000
 800b400:	3e700000 	.word	0x3e700000
 800b404:	41700000 	.word	0x41700000
 800b408:	3fe00000 	.word	0x3fe00000
 800b40c:	0800c840 	.word	0x0800c840
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	b944      	cbnz	r4, 800b426 <__kernel_rem_pio2+0x31a>
 800b414:	b11b      	cbz	r3, 800b41e <__kernel_rem_pio2+0x312>
 800b416:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800b41a:	603b      	str	r3, [r7, #0]
 800b41c:	2301      	movs	r3, #1
 800b41e:	461c      	mov	r4, r3
 800b420:	3201      	adds	r2, #1
 800b422:	3704      	adds	r7, #4
 800b424:	e745      	b.n	800b2b2 <__kernel_rem_pio2+0x1a6>
 800b426:	1acb      	subs	r3, r1, r3
 800b428:	603b      	str	r3, [r7, #0]
 800b42a:	4623      	mov	r3, r4
 800b42c:	e7f7      	b.n	800b41e <__kernel_rem_pio2+0x312>
 800b42e:	1e72      	subs	r2, r6, #1
 800b430:	ab0c      	add	r3, sp, #48	; 0x30
 800b432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b436:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b43a:	a90c      	add	r1, sp, #48	; 0x30
 800b43c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b440:	e745      	b.n	800b2ce <__kernel_rem_pio2+0x1c2>
 800b442:	1e72      	subs	r2, r6, #1
 800b444:	ab0c      	add	r3, sp, #48	; 0x30
 800b446:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b44a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b44e:	e7f4      	b.n	800b43a <__kernel_rem_pio2+0x32e>
 800b450:	a90c      	add	r1, sp, #48	; 0x30
 800b452:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b456:	3b01      	subs	r3, #1
 800b458:	430a      	orrs	r2, r1
 800b45a:	e796      	b.n	800b38a <__kernel_rem_pio2+0x27e>
 800b45c:	3401      	adds	r4, #1
 800b45e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b462:	2a00      	cmp	r2, #0
 800b464:	d0fa      	beq.n	800b45c <__kernel_rem_pio2+0x350>
 800b466:	9b08      	ldr	r3, [sp, #32]
 800b468:	f106 0801 	add.w	r8, r6, #1
 800b46c:	18f5      	adds	r5, r6, r3
 800b46e:	ab20      	add	r3, sp, #128	; 0x80
 800b470:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800b474:	4434      	add	r4, r6
 800b476:	4544      	cmp	r4, r8
 800b478:	da04      	bge.n	800b484 <__kernel_rem_pio2+0x378>
 800b47a:	4626      	mov	r6, r4
 800b47c:	e6bf      	b.n	800b1fe <__kernel_rem_pio2+0xf2>
 800b47e:	2401      	movs	r4, #1
 800b480:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b482:	e7ec      	b.n	800b45e <__kernel_rem_pio2+0x352>
 800b484:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b486:	f04f 0900 	mov.w	r9, #0
 800b48a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800b48e:	f7f4 ffb9 	bl	8000404 <__aeabi_i2d>
 800b492:	2600      	movs	r6, #0
 800b494:	2700      	movs	r7, #0
 800b496:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b498:	e9c5 0100 	strd	r0, r1, [r5]
 800b49c:	3b08      	subs	r3, #8
 800b49e:	9300      	str	r3, [sp, #0]
 800b4a0:	9504      	str	r5, [sp, #16]
 800b4a2:	9b07      	ldr	r3, [sp, #28]
 800b4a4:	4599      	cmp	r9, r3
 800b4a6:	dd05      	ble.n	800b4b4 <__kernel_rem_pio2+0x3a8>
 800b4a8:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 800b4ac:	f108 0801 	add.w	r8, r8, #1
 800b4b0:	3508      	adds	r5, #8
 800b4b2:	e7e0      	b.n	800b476 <__kernel_rem_pio2+0x36a>
 800b4b4:	f8dd c010 	ldr.w	ip, [sp, #16]
 800b4b8:	9900      	ldr	r1, [sp, #0]
 800b4ba:	f109 0901 	add.w	r9, r9, #1
 800b4be:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800b4c2:	9100      	str	r1, [sp, #0]
 800b4c4:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 800b4c8:	f8cd c010 	str.w	ip, [sp, #16]
 800b4cc:	f7f5 f804 	bl	80004d8 <__aeabi_dmul>
 800b4d0:	4602      	mov	r2, r0
 800b4d2:	460b      	mov	r3, r1
 800b4d4:	4630      	mov	r0, r6
 800b4d6:	4639      	mov	r1, r7
 800b4d8:	f7f4 fe48 	bl	800016c <__adddf3>
 800b4dc:	4606      	mov	r6, r0
 800b4de:	460f      	mov	r7, r1
 800b4e0:	e7df      	b.n	800b4a2 <__kernel_rem_pio2+0x396>
 800b4e2:	3c01      	subs	r4, #1
 800b4e4:	e756      	b.n	800b394 <__kernel_rem_pio2+0x288>
 800b4e6:	f1cb 0200 	rsb	r2, fp, #0
 800b4ea:	4640      	mov	r0, r8
 800b4ec:	4649      	mov	r1, r9
 800b4ee:	f000 fa8b 	bl	800ba08 <scalbn>
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	4ba4      	ldr	r3, [pc, #656]	; (800b788 <__kernel_rem_pio2+0x67c>)
 800b4f6:	4604      	mov	r4, r0
 800b4f8:	460d      	mov	r5, r1
 800b4fa:	f7f5 fa73 	bl	80009e4 <__aeabi_dcmpge>
 800b4fe:	b1f8      	cbz	r0, 800b540 <__kernel_rem_pio2+0x434>
 800b500:	2200      	movs	r2, #0
 800b502:	4ba2      	ldr	r3, [pc, #648]	; (800b78c <__kernel_rem_pio2+0x680>)
 800b504:	4620      	mov	r0, r4
 800b506:	4629      	mov	r1, r5
 800b508:	f7f4 ffe6 	bl	80004d8 <__aeabi_dmul>
 800b50c:	f7f5 fa94 	bl	8000a38 <__aeabi_d2iz>
 800b510:	4607      	mov	r7, r0
 800b512:	f7f4 ff77 	bl	8000404 <__aeabi_i2d>
 800b516:	2200      	movs	r2, #0
 800b518:	4b9b      	ldr	r3, [pc, #620]	; (800b788 <__kernel_rem_pio2+0x67c>)
 800b51a:	f7f4 ffdd 	bl	80004d8 <__aeabi_dmul>
 800b51e:	460b      	mov	r3, r1
 800b520:	4602      	mov	r2, r0
 800b522:	4629      	mov	r1, r5
 800b524:	4620      	mov	r0, r4
 800b526:	f7f4 fe1f 	bl	8000168 <__aeabi_dsub>
 800b52a:	f7f5 fa85 	bl	8000a38 <__aeabi_d2iz>
 800b52e:	1c74      	adds	r4, r6, #1
 800b530:	ab0c      	add	r3, sp, #48	; 0x30
 800b532:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800b536:	f10b 0b18 	add.w	fp, fp, #24
 800b53a:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 800b53e:	e731      	b.n	800b3a4 <__kernel_rem_pio2+0x298>
 800b540:	4620      	mov	r0, r4
 800b542:	4629      	mov	r1, r5
 800b544:	f7f5 fa78 	bl	8000a38 <__aeabi_d2iz>
 800b548:	ab0c      	add	r3, sp, #48	; 0x30
 800b54a:	4634      	mov	r4, r6
 800b54c:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800b550:	e728      	b.n	800b3a4 <__kernel_rem_pio2+0x298>
 800b552:	ab0c      	add	r3, sp, #48	; 0x30
 800b554:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800b558:	f7f4 ff54 	bl	8000404 <__aeabi_i2d>
 800b55c:	4632      	mov	r2, r6
 800b55e:	463b      	mov	r3, r7
 800b560:	f7f4 ffba 	bl	80004d8 <__aeabi_dmul>
 800b564:	4642      	mov	r2, r8
 800b566:	e86b 0102 	strd	r0, r1, [fp], #-8
 800b56a:	464b      	mov	r3, r9
 800b56c:	4630      	mov	r0, r6
 800b56e:	4639      	mov	r1, r7
 800b570:	f7f4 ffb2 	bl	80004d8 <__aeabi_dmul>
 800b574:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b578:	4606      	mov	r6, r0
 800b57a:	460f      	mov	r7, r1
 800b57c:	e722      	b.n	800b3c4 <__kernel_rem_pio2+0x2b8>
 800b57e:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800b582:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800b586:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 800b58a:	f8cd c01c 	str.w	ip, [sp, #28]
 800b58e:	f7f4 ffa3 	bl	80004d8 <__aeabi_dmul>
 800b592:	4602      	mov	r2, r0
 800b594:	460b      	mov	r3, r1
 800b596:	4650      	mov	r0, sl
 800b598:	4659      	mov	r1, fp
 800b59a:	f7f4 fde7 	bl	800016c <__adddf3>
 800b59e:	4682      	mov	sl, r0
 800b5a0:	468b      	mov	fp, r1
 800b5a2:	f108 0801 	add.w	r8, r8, #1
 800b5a6:	9b02      	ldr	r3, [sp, #8]
 800b5a8:	4598      	cmp	r8, r3
 800b5aa:	dc01      	bgt.n	800b5b0 <__kernel_rem_pio2+0x4a4>
 800b5ac:	45b8      	cmp	r8, r7
 800b5ae:	dde6      	ble.n	800b57e <__kernel_rem_pio2+0x472>
 800b5b0:	ab48      	add	r3, sp, #288	; 0x120
 800b5b2:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800b5b6:	e9c7 ab00 	strd	sl, fp, [r7]
 800b5ba:	3e01      	subs	r6, #1
 800b5bc:	e707      	b.n	800b3ce <__kernel_rem_pio2+0x2c2>
 800b5be:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800b5c0:	2b02      	cmp	r3, #2
 800b5c2:	dc09      	bgt.n	800b5d8 <__kernel_rem_pio2+0x4cc>
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	dc32      	bgt.n	800b62e <__kernel_rem_pio2+0x522>
 800b5c8:	d05a      	beq.n	800b680 <__kernel_rem_pio2+0x574>
 800b5ca:	9b04      	ldr	r3, [sp, #16]
 800b5cc:	f003 0007 	and.w	r0, r3, #7
 800b5d0:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800b5d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5d8:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800b5da:	2b03      	cmp	r3, #3
 800b5dc:	d1f5      	bne.n	800b5ca <__kernel_rem_pio2+0x4be>
 800b5de:	ab48      	add	r3, sp, #288	; 0x120
 800b5e0:	441d      	add	r5, r3
 800b5e2:	46aa      	mov	sl, r5
 800b5e4:	46a3      	mov	fp, r4
 800b5e6:	f1bb 0f00 	cmp.w	fp, #0
 800b5ea:	dc76      	bgt.n	800b6da <__kernel_rem_pio2+0x5ce>
 800b5ec:	46aa      	mov	sl, r5
 800b5ee:	46a3      	mov	fp, r4
 800b5f0:	f1bb 0f01 	cmp.w	fp, #1
 800b5f4:	f300 8090 	bgt.w	800b718 <__kernel_rem_pio2+0x60c>
 800b5f8:	2700      	movs	r7, #0
 800b5fa:	463e      	mov	r6, r7
 800b5fc:	2c01      	cmp	r4, #1
 800b5fe:	f300 80aa 	bgt.w	800b756 <__kernel_rem_pio2+0x64a>
 800b602:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 800b606:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 800b60a:	9b00      	ldr	r3, [sp, #0]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	f040 80ac 	bne.w	800b76a <__kernel_rem_pio2+0x65e>
 800b612:	4603      	mov	r3, r0
 800b614:	462a      	mov	r2, r5
 800b616:	9806      	ldr	r0, [sp, #24]
 800b618:	e9c0 2300 	strd	r2, r3, [r0]
 800b61c:	4622      	mov	r2, r4
 800b61e:	460b      	mov	r3, r1
 800b620:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b624:	463a      	mov	r2, r7
 800b626:	4633      	mov	r3, r6
 800b628:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800b62c:	e7cd      	b.n	800b5ca <__kernel_rem_pio2+0x4be>
 800b62e:	2000      	movs	r0, #0
 800b630:	46a0      	mov	r8, r4
 800b632:	4601      	mov	r1, r0
 800b634:	ab48      	add	r3, sp, #288	; 0x120
 800b636:	441d      	add	r5, r3
 800b638:	f1b8 0f00 	cmp.w	r8, #0
 800b63c:	da3a      	bge.n	800b6b4 <__kernel_rem_pio2+0x5a8>
 800b63e:	9b00      	ldr	r3, [sp, #0]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d03e      	beq.n	800b6c2 <__kernel_rem_pio2+0x5b6>
 800b644:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 800b648:	4602      	mov	r2, r0
 800b64a:	462b      	mov	r3, r5
 800b64c:	9d06      	ldr	r5, [sp, #24]
 800b64e:	2601      	movs	r6, #1
 800b650:	e9c5 2300 	strd	r2, r3, [r5]
 800b654:	460b      	mov	r3, r1
 800b656:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800b65a:	f7f4 fd85 	bl	8000168 <__aeabi_dsub>
 800b65e:	4684      	mov	ip, r0
 800b660:	460f      	mov	r7, r1
 800b662:	ad48      	add	r5, sp, #288	; 0x120
 800b664:	42b4      	cmp	r4, r6
 800b666:	f105 0508 	add.w	r5, r5, #8
 800b66a:	da2c      	bge.n	800b6c6 <__kernel_rem_pio2+0x5ba>
 800b66c:	9b00      	ldr	r3, [sp, #0]
 800b66e:	b10b      	cbz	r3, 800b674 <__kernel_rem_pio2+0x568>
 800b670:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800b674:	4662      	mov	r2, ip
 800b676:	463b      	mov	r3, r7
 800b678:	9906      	ldr	r1, [sp, #24]
 800b67a:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800b67e:	e7a4      	b.n	800b5ca <__kernel_rem_pio2+0x4be>
 800b680:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 800b682:	ab48      	add	r3, sp, #288	; 0x120
 800b684:	4637      	mov	r7, r6
 800b686:	441d      	add	r5, r3
 800b688:	2c00      	cmp	r4, #0
 800b68a:	da09      	bge.n	800b6a0 <__kernel_rem_pio2+0x594>
 800b68c:	9b00      	ldr	r3, [sp, #0]
 800b68e:	b10b      	cbz	r3, 800b694 <__kernel_rem_pio2+0x588>
 800b690:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800b694:	4632      	mov	r2, r6
 800b696:	463b      	mov	r3, r7
 800b698:	9906      	ldr	r1, [sp, #24]
 800b69a:	e9c1 2300 	strd	r2, r3, [r1]
 800b69e:	e794      	b.n	800b5ca <__kernel_rem_pio2+0x4be>
 800b6a0:	4630      	mov	r0, r6
 800b6a2:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800b6a6:	4639      	mov	r1, r7
 800b6a8:	f7f4 fd60 	bl	800016c <__adddf3>
 800b6ac:	3c01      	subs	r4, #1
 800b6ae:	4606      	mov	r6, r0
 800b6b0:	460f      	mov	r7, r1
 800b6b2:	e7e9      	b.n	800b688 <__kernel_rem_pio2+0x57c>
 800b6b4:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800b6b8:	f7f4 fd58 	bl	800016c <__adddf3>
 800b6bc:	f108 38ff 	add.w	r8, r8, #4294967295
 800b6c0:	e7ba      	b.n	800b638 <__kernel_rem_pio2+0x52c>
 800b6c2:	460d      	mov	r5, r1
 800b6c4:	e7c0      	b.n	800b648 <__kernel_rem_pio2+0x53c>
 800b6c6:	4660      	mov	r0, ip
 800b6c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b6cc:	4639      	mov	r1, r7
 800b6ce:	f7f4 fd4d 	bl	800016c <__adddf3>
 800b6d2:	3601      	adds	r6, #1
 800b6d4:	4684      	mov	ip, r0
 800b6d6:	460f      	mov	r7, r1
 800b6d8:	e7c4      	b.n	800b664 <__kernel_rem_pio2+0x558>
 800b6da:	e9da 6700 	ldrd	r6, r7, [sl]
 800b6de:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 800b6e2:	4632      	mov	r2, r6
 800b6e4:	463b      	mov	r3, r7
 800b6e6:	4640      	mov	r0, r8
 800b6e8:	4649      	mov	r1, r9
 800b6ea:	f7f4 fd3f 	bl	800016c <__adddf3>
 800b6ee:	4602      	mov	r2, r0
 800b6f0:	460b      	mov	r3, r1
 800b6f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b6f6:	4640      	mov	r0, r8
 800b6f8:	4649      	mov	r1, r9
 800b6fa:	f7f4 fd35 	bl	8000168 <__aeabi_dsub>
 800b6fe:	4632      	mov	r2, r6
 800b700:	463b      	mov	r3, r7
 800b702:	f7f4 fd33 	bl	800016c <__adddf3>
 800b706:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b70a:	e86a 0102 	strd	r0, r1, [sl], #-8
 800b70e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b712:	e9ca 2300 	strd	r2, r3, [sl]
 800b716:	e766      	b.n	800b5e6 <__kernel_rem_pio2+0x4da>
 800b718:	e9da 8900 	ldrd	r8, r9, [sl]
 800b71c:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 800b720:	4642      	mov	r2, r8
 800b722:	464b      	mov	r3, r9
 800b724:	4630      	mov	r0, r6
 800b726:	4639      	mov	r1, r7
 800b728:	f7f4 fd20 	bl	800016c <__adddf3>
 800b72c:	4602      	mov	r2, r0
 800b72e:	460b      	mov	r3, r1
 800b730:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b734:	4630      	mov	r0, r6
 800b736:	4639      	mov	r1, r7
 800b738:	f7f4 fd16 	bl	8000168 <__aeabi_dsub>
 800b73c:	4642      	mov	r2, r8
 800b73e:	464b      	mov	r3, r9
 800b740:	f7f4 fd14 	bl	800016c <__adddf3>
 800b744:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b748:	e86a 0102 	strd	r0, r1, [sl], #-8
 800b74c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b750:	e9ca 2300 	strd	r2, r3, [sl]
 800b754:	e74c      	b.n	800b5f0 <__kernel_rem_pio2+0x4e4>
 800b756:	4638      	mov	r0, r7
 800b758:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800b75c:	4631      	mov	r1, r6
 800b75e:	f7f4 fd05 	bl	800016c <__adddf3>
 800b762:	3c01      	subs	r4, #1
 800b764:	4607      	mov	r7, r0
 800b766:	460e      	mov	r6, r1
 800b768:	e748      	b.n	800b5fc <__kernel_rem_pio2+0x4f0>
 800b76a:	9b06      	ldr	r3, [sp, #24]
 800b76c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800b770:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800b774:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800b778:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800b77c:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800b780:	601d      	str	r5, [r3, #0]
 800b782:	615e      	str	r6, [r3, #20]
 800b784:	e721      	b.n	800b5ca <__kernel_rem_pio2+0x4be>
 800b786:	bf00      	nop
 800b788:	41700000 	.word	0x41700000
 800b78c:	3e700000 	.word	0x3e700000

0800b790 <__kernel_sin>:
 800b790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b794:	b086      	sub	sp, #24
 800b796:	e9cd 2300 	strd	r2, r3, [sp]
 800b79a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b79e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800b7a2:	4682      	mov	sl, r0
 800b7a4:	460c      	mov	r4, r1
 800b7a6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800b7a8:	da03      	bge.n	800b7b2 <__kernel_sin+0x22>
 800b7aa:	f7f5 f945 	bl	8000a38 <__aeabi_d2iz>
 800b7ae:	2800      	cmp	r0, #0
 800b7b0:	d050      	beq.n	800b854 <__kernel_sin+0xc4>
 800b7b2:	4652      	mov	r2, sl
 800b7b4:	4623      	mov	r3, r4
 800b7b6:	4650      	mov	r0, sl
 800b7b8:	4621      	mov	r1, r4
 800b7ba:	f7f4 fe8d 	bl	80004d8 <__aeabi_dmul>
 800b7be:	4606      	mov	r6, r0
 800b7c0:	460f      	mov	r7, r1
 800b7c2:	4602      	mov	r2, r0
 800b7c4:	460b      	mov	r3, r1
 800b7c6:	4650      	mov	r0, sl
 800b7c8:	4621      	mov	r1, r4
 800b7ca:	f7f4 fe85 	bl	80004d8 <__aeabi_dmul>
 800b7ce:	a33e      	add	r3, pc, #248	; (adr r3, 800b8c8 <__kernel_sin+0x138>)
 800b7d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7d4:	4680      	mov	r8, r0
 800b7d6:	4689      	mov	r9, r1
 800b7d8:	4630      	mov	r0, r6
 800b7da:	4639      	mov	r1, r7
 800b7dc:	f7f4 fe7c 	bl	80004d8 <__aeabi_dmul>
 800b7e0:	a33b      	add	r3, pc, #236	; (adr r3, 800b8d0 <__kernel_sin+0x140>)
 800b7e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7e6:	f7f4 fcbf 	bl	8000168 <__aeabi_dsub>
 800b7ea:	4632      	mov	r2, r6
 800b7ec:	463b      	mov	r3, r7
 800b7ee:	f7f4 fe73 	bl	80004d8 <__aeabi_dmul>
 800b7f2:	a339      	add	r3, pc, #228	; (adr r3, 800b8d8 <__kernel_sin+0x148>)
 800b7f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f8:	f7f4 fcb8 	bl	800016c <__adddf3>
 800b7fc:	4632      	mov	r2, r6
 800b7fe:	463b      	mov	r3, r7
 800b800:	f7f4 fe6a 	bl	80004d8 <__aeabi_dmul>
 800b804:	a336      	add	r3, pc, #216	; (adr r3, 800b8e0 <__kernel_sin+0x150>)
 800b806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b80a:	f7f4 fcad 	bl	8000168 <__aeabi_dsub>
 800b80e:	4632      	mov	r2, r6
 800b810:	463b      	mov	r3, r7
 800b812:	f7f4 fe61 	bl	80004d8 <__aeabi_dmul>
 800b816:	a334      	add	r3, pc, #208	; (adr r3, 800b8e8 <__kernel_sin+0x158>)
 800b818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b81c:	f7f4 fca6 	bl	800016c <__adddf3>
 800b820:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b824:	b9dd      	cbnz	r5, 800b85e <__kernel_sin+0xce>
 800b826:	4602      	mov	r2, r0
 800b828:	460b      	mov	r3, r1
 800b82a:	4630      	mov	r0, r6
 800b82c:	4639      	mov	r1, r7
 800b82e:	f7f4 fe53 	bl	80004d8 <__aeabi_dmul>
 800b832:	a32f      	add	r3, pc, #188	; (adr r3, 800b8f0 <__kernel_sin+0x160>)
 800b834:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b838:	f7f4 fc96 	bl	8000168 <__aeabi_dsub>
 800b83c:	4642      	mov	r2, r8
 800b83e:	464b      	mov	r3, r9
 800b840:	f7f4 fe4a 	bl	80004d8 <__aeabi_dmul>
 800b844:	4602      	mov	r2, r0
 800b846:	460b      	mov	r3, r1
 800b848:	4650      	mov	r0, sl
 800b84a:	4621      	mov	r1, r4
 800b84c:	f7f4 fc8e 	bl	800016c <__adddf3>
 800b850:	4682      	mov	sl, r0
 800b852:	460c      	mov	r4, r1
 800b854:	4650      	mov	r0, sl
 800b856:	4621      	mov	r1, r4
 800b858:	b006      	add	sp, #24
 800b85a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b85e:	2200      	movs	r2, #0
 800b860:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b864:	4b24      	ldr	r3, [pc, #144]	; (800b8f8 <__kernel_sin+0x168>)
 800b866:	f7f4 fe37 	bl	80004d8 <__aeabi_dmul>
 800b86a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b86e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b872:	4640      	mov	r0, r8
 800b874:	4649      	mov	r1, r9
 800b876:	f7f4 fe2f 	bl	80004d8 <__aeabi_dmul>
 800b87a:	4602      	mov	r2, r0
 800b87c:	460b      	mov	r3, r1
 800b87e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b882:	f7f4 fc71 	bl	8000168 <__aeabi_dsub>
 800b886:	4632      	mov	r2, r6
 800b888:	463b      	mov	r3, r7
 800b88a:	f7f4 fe25 	bl	80004d8 <__aeabi_dmul>
 800b88e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b892:	f7f4 fc69 	bl	8000168 <__aeabi_dsub>
 800b896:	a316      	add	r3, pc, #88	; (adr r3, 800b8f0 <__kernel_sin+0x160>)
 800b898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b89c:	4606      	mov	r6, r0
 800b89e:	460f      	mov	r7, r1
 800b8a0:	4640      	mov	r0, r8
 800b8a2:	4649      	mov	r1, r9
 800b8a4:	f7f4 fe18 	bl	80004d8 <__aeabi_dmul>
 800b8a8:	4602      	mov	r2, r0
 800b8aa:	460b      	mov	r3, r1
 800b8ac:	4630      	mov	r0, r6
 800b8ae:	4639      	mov	r1, r7
 800b8b0:	f7f4 fc5c 	bl	800016c <__adddf3>
 800b8b4:	4602      	mov	r2, r0
 800b8b6:	460b      	mov	r3, r1
 800b8b8:	4650      	mov	r0, sl
 800b8ba:	4621      	mov	r1, r4
 800b8bc:	f7f4 fc54 	bl	8000168 <__aeabi_dsub>
 800b8c0:	e7c6      	b.n	800b850 <__kernel_sin+0xc0>
 800b8c2:	bf00      	nop
 800b8c4:	f3af 8000 	nop.w
 800b8c8:	5acfd57c 	.word	0x5acfd57c
 800b8cc:	3de5d93a 	.word	0x3de5d93a
 800b8d0:	8a2b9ceb 	.word	0x8a2b9ceb
 800b8d4:	3e5ae5e6 	.word	0x3e5ae5e6
 800b8d8:	57b1fe7d 	.word	0x57b1fe7d
 800b8dc:	3ec71de3 	.word	0x3ec71de3
 800b8e0:	19c161d5 	.word	0x19c161d5
 800b8e4:	3f2a01a0 	.word	0x3f2a01a0
 800b8e8:	1110f8a6 	.word	0x1110f8a6
 800b8ec:	3f811111 	.word	0x3f811111
 800b8f0:	55555549 	.word	0x55555549
 800b8f4:	3fc55555 	.word	0x3fc55555
 800b8f8:	3fe00000 	.word	0x3fe00000

0800b8fc <fabs>:
 800b8fc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800b900:	4770      	bx	lr
 800b902:	0000      	movs	r0, r0
 800b904:	0000      	movs	r0, r0
	...

0800b908 <floor>:
 800b908:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b90c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800b910:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800b914:	2e13      	cmp	r6, #19
 800b916:	4602      	mov	r2, r0
 800b918:	460b      	mov	r3, r1
 800b91a:	4607      	mov	r7, r0
 800b91c:	460c      	mov	r4, r1
 800b91e:	4605      	mov	r5, r0
 800b920:	dc33      	bgt.n	800b98a <floor+0x82>
 800b922:	2e00      	cmp	r6, #0
 800b924:	da14      	bge.n	800b950 <floor+0x48>
 800b926:	a334      	add	r3, pc, #208	; (adr r3, 800b9f8 <floor+0xf0>)
 800b928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b92c:	f7f4 fc1e 	bl	800016c <__adddf3>
 800b930:	2200      	movs	r2, #0
 800b932:	2300      	movs	r3, #0
 800b934:	f7f5 f860 	bl	80009f8 <__aeabi_dcmpgt>
 800b938:	b138      	cbz	r0, 800b94a <floor+0x42>
 800b93a:	2c00      	cmp	r4, #0
 800b93c:	da58      	bge.n	800b9f0 <floor+0xe8>
 800b93e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800b942:	431d      	orrs	r5, r3
 800b944:	d001      	beq.n	800b94a <floor+0x42>
 800b946:	2500      	movs	r5, #0
 800b948:	4c2d      	ldr	r4, [pc, #180]	; (800ba00 <floor+0xf8>)
 800b94a:	4623      	mov	r3, r4
 800b94c:	462f      	mov	r7, r5
 800b94e:	e025      	b.n	800b99c <floor+0x94>
 800b950:	4a2c      	ldr	r2, [pc, #176]	; (800ba04 <floor+0xfc>)
 800b952:	fa42 f806 	asr.w	r8, r2, r6
 800b956:	ea01 0208 	and.w	r2, r1, r8
 800b95a:	4302      	orrs	r2, r0
 800b95c:	d01e      	beq.n	800b99c <floor+0x94>
 800b95e:	a326      	add	r3, pc, #152	; (adr r3, 800b9f8 <floor+0xf0>)
 800b960:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b964:	f7f4 fc02 	bl	800016c <__adddf3>
 800b968:	2200      	movs	r2, #0
 800b96a:	2300      	movs	r3, #0
 800b96c:	f7f5 f844 	bl	80009f8 <__aeabi_dcmpgt>
 800b970:	2800      	cmp	r0, #0
 800b972:	d0ea      	beq.n	800b94a <floor+0x42>
 800b974:	2c00      	cmp	r4, #0
 800b976:	bfbe      	ittt	lt
 800b978:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800b97c:	fa43 f606 	asrlt.w	r6, r3, r6
 800b980:	19a4      	addlt	r4, r4, r6
 800b982:	2500      	movs	r5, #0
 800b984:	ea24 0408 	bic.w	r4, r4, r8
 800b988:	e7df      	b.n	800b94a <floor+0x42>
 800b98a:	2e33      	cmp	r6, #51	; 0x33
 800b98c:	dd0a      	ble.n	800b9a4 <floor+0x9c>
 800b98e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b992:	d103      	bne.n	800b99c <floor+0x94>
 800b994:	f7f4 fbea 	bl	800016c <__adddf3>
 800b998:	4607      	mov	r7, r0
 800b99a:	460b      	mov	r3, r1
 800b99c:	4638      	mov	r0, r7
 800b99e:	4619      	mov	r1, r3
 800b9a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9a4:	f04f 32ff 	mov.w	r2, #4294967295
 800b9a8:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800b9ac:	fa22 f808 	lsr.w	r8, r2, r8
 800b9b0:	ea18 0f00 	tst.w	r8, r0
 800b9b4:	d0f2      	beq.n	800b99c <floor+0x94>
 800b9b6:	a310      	add	r3, pc, #64	; (adr r3, 800b9f8 <floor+0xf0>)
 800b9b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9bc:	f7f4 fbd6 	bl	800016c <__adddf3>
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	f7f5 f818 	bl	80009f8 <__aeabi_dcmpgt>
 800b9c8:	2800      	cmp	r0, #0
 800b9ca:	d0be      	beq.n	800b94a <floor+0x42>
 800b9cc:	2c00      	cmp	r4, #0
 800b9ce:	da02      	bge.n	800b9d6 <floor+0xce>
 800b9d0:	2e14      	cmp	r6, #20
 800b9d2:	d103      	bne.n	800b9dc <floor+0xd4>
 800b9d4:	3401      	adds	r4, #1
 800b9d6:	ea25 0508 	bic.w	r5, r5, r8
 800b9da:	e7b6      	b.n	800b94a <floor+0x42>
 800b9dc:	2301      	movs	r3, #1
 800b9de:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800b9e2:	fa03 f606 	lsl.w	r6, r3, r6
 800b9e6:	4435      	add	r5, r6
 800b9e8:	42bd      	cmp	r5, r7
 800b9ea:	bf38      	it	cc
 800b9ec:	18e4      	addcc	r4, r4, r3
 800b9ee:	e7f2      	b.n	800b9d6 <floor+0xce>
 800b9f0:	2500      	movs	r5, #0
 800b9f2:	462c      	mov	r4, r5
 800b9f4:	e7a9      	b.n	800b94a <floor+0x42>
 800b9f6:	bf00      	nop
 800b9f8:	8800759c 	.word	0x8800759c
 800b9fc:	7e37e43c 	.word	0x7e37e43c
 800ba00:	bff00000 	.word	0xbff00000
 800ba04:	000fffff 	.word	0x000fffff

0800ba08 <scalbn>:
 800ba08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba0a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800ba0e:	4604      	mov	r4, r0
 800ba10:	460d      	mov	r5, r1
 800ba12:	4617      	mov	r7, r2
 800ba14:	460b      	mov	r3, r1
 800ba16:	b996      	cbnz	r6, 800ba3e <scalbn+0x36>
 800ba18:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ba1c:	4303      	orrs	r3, r0
 800ba1e:	d039      	beq.n	800ba94 <scalbn+0x8c>
 800ba20:	4b33      	ldr	r3, [pc, #204]	; (800baf0 <scalbn+0xe8>)
 800ba22:	2200      	movs	r2, #0
 800ba24:	f7f4 fd58 	bl	80004d8 <__aeabi_dmul>
 800ba28:	4b32      	ldr	r3, [pc, #200]	; (800baf4 <scalbn+0xec>)
 800ba2a:	4604      	mov	r4, r0
 800ba2c:	429f      	cmp	r7, r3
 800ba2e:	460d      	mov	r5, r1
 800ba30:	da0f      	bge.n	800ba52 <scalbn+0x4a>
 800ba32:	a32b      	add	r3, pc, #172	; (adr r3, 800bae0 <scalbn+0xd8>)
 800ba34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba38:	f7f4 fd4e 	bl	80004d8 <__aeabi_dmul>
 800ba3c:	e006      	b.n	800ba4c <scalbn+0x44>
 800ba3e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800ba42:	4296      	cmp	r6, r2
 800ba44:	d10a      	bne.n	800ba5c <scalbn+0x54>
 800ba46:	4602      	mov	r2, r0
 800ba48:	f7f4 fb90 	bl	800016c <__adddf3>
 800ba4c:	4604      	mov	r4, r0
 800ba4e:	460d      	mov	r5, r1
 800ba50:	e020      	b.n	800ba94 <scalbn+0x8c>
 800ba52:	460b      	mov	r3, r1
 800ba54:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800ba58:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800ba5c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800ba60:	19b9      	adds	r1, r7, r6
 800ba62:	4291      	cmp	r1, r2
 800ba64:	dd0e      	ble.n	800ba84 <scalbn+0x7c>
 800ba66:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800ba6a:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800ba6e:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800ba72:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800ba76:	4820      	ldr	r0, [pc, #128]	; (800baf8 <scalbn+0xf0>)
 800ba78:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800ba7c:	a31a      	add	r3, pc, #104	; (adr r3, 800bae8 <scalbn+0xe0>)
 800ba7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba82:	e7d9      	b.n	800ba38 <scalbn+0x30>
 800ba84:	2900      	cmp	r1, #0
 800ba86:	dd08      	ble.n	800ba9a <scalbn+0x92>
 800ba88:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ba8c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ba90:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800ba94:	4620      	mov	r0, r4
 800ba96:	4629      	mov	r1, r5
 800ba98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba9a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800ba9e:	da12      	bge.n	800bac6 <scalbn+0xbe>
 800baa0:	f24c 3350 	movw	r3, #50000	; 0xc350
 800baa4:	429f      	cmp	r7, r3
 800baa6:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800baaa:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 800baae:	dcdc      	bgt.n	800ba6a <scalbn+0x62>
 800bab0:	a30b      	add	r3, pc, #44	; (adr r3, 800bae0 <scalbn+0xd8>)
 800bab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bab6:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800baba:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800babe:	480f      	ldr	r0, [pc, #60]	; (800bafc <scalbn+0xf4>)
 800bac0:	f041 011f 	orr.w	r1, r1, #31
 800bac4:	e7b8      	b.n	800ba38 <scalbn+0x30>
 800bac6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800baca:	3136      	adds	r1, #54	; 0x36
 800bacc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bad0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800bad4:	4620      	mov	r0, r4
 800bad6:	4629      	mov	r1, r5
 800bad8:	2200      	movs	r2, #0
 800bada:	4b09      	ldr	r3, [pc, #36]	; (800bb00 <scalbn+0xf8>)
 800badc:	e7ac      	b.n	800ba38 <scalbn+0x30>
 800bade:	bf00      	nop
 800bae0:	c2f8f359 	.word	0xc2f8f359
 800bae4:	01a56e1f 	.word	0x01a56e1f
 800bae8:	8800759c 	.word	0x8800759c
 800baec:	7e37e43c 	.word	0x7e37e43c
 800baf0:	43500000 	.word	0x43500000
 800baf4:	ffff3cb0 	.word	0xffff3cb0
 800baf8:	8800759c 	.word	0x8800759c
 800bafc:	c2f8f359 	.word	0xc2f8f359
 800bb00:	3c900000 	.word	0x3c900000

0800bb04 <atanf>:
 800bb04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb08:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800bb0c:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 800bb10:	4604      	mov	r4, r0
 800bb12:	4680      	mov	r8, r0
 800bb14:	db0e      	blt.n	800bb34 <atanf+0x30>
 800bb16:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800bb1a:	dd04      	ble.n	800bb26 <atanf+0x22>
 800bb1c:	4601      	mov	r1, r0
 800bb1e:	f7f5 f829 	bl	8000b74 <__addsf3>
 800bb22:	4604      	mov	r4, r0
 800bb24:	e003      	b.n	800bb2e <atanf+0x2a>
 800bb26:	2800      	cmp	r0, #0
 800bb28:	f300 80ce 	bgt.w	800bcc8 <atanf+0x1c4>
 800bb2c:	4c67      	ldr	r4, [pc, #412]	; (800bccc <atanf+0x1c8>)
 800bb2e:	4620      	mov	r0, r4
 800bb30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb34:	4b66      	ldr	r3, [pc, #408]	; (800bcd0 <atanf+0x1cc>)
 800bb36:	429d      	cmp	r5, r3
 800bb38:	dc0e      	bgt.n	800bb58 <atanf+0x54>
 800bb3a:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 800bb3e:	da08      	bge.n	800bb52 <atanf+0x4e>
 800bb40:	4964      	ldr	r1, [pc, #400]	; (800bcd4 <atanf+0x1d0>)
 800bb42:	f7f5 f817 	bl	8000b74 <__addsf3>
 800bb46:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800bb4a:	f7f5 fad7 	bl	80010fc <__aeabi_fcmpgt>
 800bb4e:	2800      	cmp	r0, #0
 800bb50:	d1ed      	bne.n	800bb2e <atanf+0x2a>
 800bb52:	f04f 36ff 	mov.w	r6, #4294967295
 800bb56:	e01c      	b.n	800bb92 <atanf+0x8e>
 800bb58:	f000 f8e0 	bl	800bd1c <fabsf>
 800bb5c:	4b5e      	ldr	r3, [pc, #376]	; (800bcd8 <atanf+0x1d4>)
 800bb5e:	4604      	mov	r4, r0
 800bb60:	429d      	cmp	r5, r3
 800bb62:	dc7c      	bgt.n	800bc5e <atanf+0x15a>
 800bb64:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800bb68:	429d      	cmp	r5, r3
 800bb6a:	dc67      	bgt.n	800bc3c <atanf+0x138>
 800bb6c:	4601      	mov	r1, r0
 800bb6e:	f7f5 f801 	bl	8000b74 <__addsf3>
 800bb72:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800bb76:	f7f4 fffb 	bl	8000b70 <__aeabi_fsub>
 800bb7a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800bb7e:	4605      	mov	r5, r0
 800bb80:	4620      	mov	r0, r4
 800bb82:	f7f4 fff7 	bl	8000b74 <__addsf3>
 800bb86:	4601      	mov	r1, r0
 800bb88:	4628      	mov	r0, r5
 800bb8a:	f7f5 f9af 	bl	8000eec <__aeabi_fdiv>
 800bb8e:	2600      	movs	r6, #0
 800bb90:	4604      	mov	r4, r0
 800bb92:	4621      	mov	r1, r4
 800bb94:	4620      	mov	r0, r4
 800bb96:	f7f5 f8f5 	bl	8000d84 <__aeabi_fmul>
 800bb9a:	4601      	mov	r1, r0
 800bb9c:	4607      	mov	r7, r0
 800bb9e:	f7f5 f8f1 	bl	8000d84 <__aeabi_fmul>
 800bba2:	4605      	mov	r5, r0
 800bba4:	494d      	ldr	r1, [pc, #308]	; (800bcdc <atanf+0x1d8>)
 800bba6:	f7f5 f8ed 	bl	8000d84 <__aeabi_fmul>
 800bbaa:	494d      	ldr	r1, [pc, #308]	; (800bce0 <atanf+0x1dc>)
 800bbac:	f7f4 ffe2 	bl	8000b74 <__addsf3>
 800bbb0:	4629      	mov	r1, r5
 800bbb2:	f7f5 f8e7 	bl	8000d84 <__aeabi_fmul>
 800bbb6:	494b      	ldr	r1, [pc, #300]	; (800bce4 <atanf+0x1e0>)
 800bbb8:	f7f4 ffdc 	bl	8000b74 <__addsf3>
 800bbbc:	4629      	mov	r1, r5
 800bbbe:	f7f5 f8e1 	bl	8000d84 <__aeabi_fmul>
 800bbc2:	4949      	ldr	r1, [pc, #292]	; (800bce8 <atanf+0x1e4>)
 800bbc4:	f7f4 ffd6 	bl	8000b74 <__addsf3>
 800bbc8:	4629      	mov	r1, r5
 800bbca:	f7f5 f8db 	bl	8000d84 <__aeabi_fmul>
 800bbce:	4947      	ldr	r1, [pc, #284]	; (800bcec <atanf+0x1e8>)
 800bbd0:	f7f4 ffd0 	bl	8000b74 <__addsf3>
 800bbd4:	4629      	mov	r1, r5
 800bbd6:	f7f5 f8d5 	bl	8000d84 <__aeabi_fmul>
 800bbda:	4945      	ldr	r1, [pc, #276]	; (800bcf0 <atanf+0x1ec>)
 800bbdc:	f7f4 ffca 	bl	8000b74 <__addsf3>
 800bbe0:	4639      	mov	r1, r7
 800bbe2:	f7f5 f8cf 	bl	8000d84 <__aeabi_fmul>
 800bbe6:	4943      	ldr	r1, [pc, #268]	; (800bcf4 <atanf+0x1f0>)
 800bbe8:	4607      	mov	r7, r0
 800bbea:	4628      	mov	r0, r5
 800bbec:	f7f5 f8ca 	bl	8000d84 <__aeabi_fmul>
 800bbf0:	4941      	ldr	r1, [pc, #260]	; (800bcf8 <atanf+0x1f4>)
 800bbf2:	f7f4 ffbd 	bl	8000b70 <__aeabi_fsub>
 800bbf6:	4629      	mov	r1, r5
 800bbf8:	f7f5 f8c4 	bl	8000d84 <__aeabi_fmul>
 800bbfc:	493f      	ldr	r1, [pc, #252]	; (800bcfc <atanf+0x1f8>)
 800bbfe:	f7f4 ffb7 	bl	8000b70 <__aeabi_fsub>
 800bc02:	4629      	mov	r1, r5
 800bc04:	f7f5 f8be 	bl	8000d84 <__aeabi_fmul>
 800bc08:	493d      	ldr	r1, [pc, #244]	; (800bd00 <atanf+0x1fc>)
 800bc0a:	f7f4 ffb1 	bl	8000b70 <__aeabi_fsub>
 800bc0e:	4629      	mov	r1, r5
 800bc10:	f7f5 f8b8 	bl	8000d84 <__aeabi_fmul>
 800bc14:	493b      	ldr	r1, [pc, #236]	; (800bd04 <atanf+0x200>)
 800bc16:	f7f4 ffab 	bl	8000b70 <__aeabi_fsub>
 800bc1a:	4629      	mov	r1, r5
 800bc1c:	f7f5 f8b2 	bl	8000d84 <__aeabi_fmul>
 800bc20:	4601      	mov	r1, r0
 800bc22:	4638      	mov	r0, r7
 800bc24:	f7f4 ffa6 	bl	8000b74 <__addsf3>
 800bc28:	4621      	mov	r1, r4
 800bc2a:	f7f5 f8ab 	bl	8000d84 <__aeabi_fmul>
 800bc2e:	1c73      	adds	r3, r6, #1
 800bc30:	4601      	mov	r1, r0
 800bc32:	d133      	bne.n	800bc9c <atanf+0x198>
 800bc34:	4620      	mov	r0, r4
 800bc36:	f7f4 ff9b 	bl	8000b70 <__aeabi_fsub>
 800bc3a:	e772      	b.n	800bb22 <atanf+0x1e>
 800bc3c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800bc40:	f7f4 ff96 	bl	8000b70 <__aeabi_fsub>
 800bc44:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800bc48:	4605      	mov	r5, r0
 800bc4a:	4620      	mov	r0, r4
 800bc4c:	f7f4 ff92 	bl	8000b74 <__addsf3>
 800bc50:	4601      	mov	r1, r0
 800bc52:	4628      	mov	r0, r5
 800bc54:	f7f5 f94a 	bl	8000eec <__aeabi_fdiv>
 800bc58:	2601      	movs	r6, #1
 800bc5a:	4604      	mov	r4, r0
 800bc5c:	e799      	b.n	800bb92 <atanf+0x8e>
 800bc5e:	4b2a      	ldr	r3, [pc, #168]	; (800bd08 <atanf+0x204>)
 800bc60:	429d      	cmp	r5, r3
 800bc62:	dc14      	bgt.n	800bc8e <atanf+0x18a>
 800bc64:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800bc68:	f7f4 ff82 	bl	8000b70 <__aeabi_fsub>
 800bc6c:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800bc70:	4605      	mov	r5, r0
 800bc72:	4620      	mov	r0, r4
 800bc74:	f7f5 f886 	bl	8000d84 <__aeabi_fmul>
 800bc78:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800bc7c:	f7f4 ff7a 	bl	8000b74 <__addsf3>
 800bc80:	4601      	mov	r1, r0
 800bc82:	4628      	mov	r0, r5
 800bc84:	f7f5 f932 	bl	8000eec <__aeabi_fdiv>
 800bc88:	2602      	movs	r6, #2
 800bc8a:	4604      	mov	r4, r0
 800bc8c:	e781      	b.n	800bb92 <atanf+0x8e>
 800bc8e:	4601      	mov	r1, r0
 800bc90:	481e      	ldr	r0, [pc, #120]	; (800bd0c <atanf+0x208>)
 800bc92:	f7f5 f92b 	bl	8000eec <__aeabi_fdiv>
 800bc96:	2603      	movs	r6, #3
 800bc98:	4604      	mov	r4, r0
 800bc9a:	e77a      	b.n	800bb92 <atanf+0x8e>
 800bc9c:	4b1c      	ldr	r3, [pc, #112]	; (800bd10 <atanf+0x20c>)
 800bc9e:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800bca2:	f7f4 ff65 	bl	8000b70 <__aeabi_fsub>
 800bca6:	4621      	mov	r1, r4
 800bca8:	f7f4 ff62 	bl	8000b70 <__aeabi_fsub>
 800bcac:	4b19      	ldr	r3, [pc, #100]	; (800bd14 <atanf+0x210>)
 800bcae:	4601      	mov	r1, r0
 800bcb0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800bcb4:	f7f4 ff5c 	bl	8000b70 <__aeabi_fsub>
 800bcb8:	f1b8 0f00 	cmp.w	r8, #0
 800bcbc:	4604      	mov	r4, r0
 800bcbe:	f6bf af36 	bge.w	800bb2e <atanf+0x2a>
 800bcc2:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800bcc6:	e72c      	b.n	800bb22 <atanf+0x1e>
 800bcc8:	4c13      	ldr	r4, [pc, #76]	; (800bd18 <atanf+0x214>)
 800bcca:	e730      	b.n	800bb2e <atanf+0x2a>
 800bccc:	bfc90fdb 	.word	0xbfc90fdb
 800bcd0:	3edfffff 	.word	0x3edfffff
 800bcd4:	7149f2ca 	.word	0x7149f2ca
 800bcd8:	3f97ffff 	.word	0x3f97ffff
 800bcdc:	3c8569d7 	.word	0x3c8569d7
 800bce0:	3d4bda59 	.word	0x3d4bda59
 800bce4:	3d886b35 	.word	0x3d886b35
 800bce8:	3dba2e6e 	.word	0x3dba2e6e
 800bcec:	3e124925 	.word	0x3e124925
 800bcf0:	3eaaaaab 	.word	0x3eaaaaab
 800bcf4:	bd15a221 	.word	0xbd15a221
 800bcf8:	3d6ef16b 	.word	0x3d6ef16b
 800bcfc:	3d9d8795 	.word	0x3d9d8795
 800bd00:	3de38e38 	.word	0x3de38e38
 800bd04:	3e4ccccd 	.word	0x3e4ccccd
 800bd08:	401bffff 	.word	0x401bffff
 800bd0c:	bf800000 	.word	0xbf800000
 800bd10:	0800c8a0 	.word	0x0800c8a0
 800bd14:	0800c890 	.word	0x0800c890
 800bd18:	3fc90fdb 	.word	0x3fc90fdb

0800bd1c <fabsf>:
 800bd1c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800bd20:	4770      	bx	lr
	...

0800bd24 <_init>:
 800bd24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd26:	bf00      	nop
 800bd28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd2a:	bc08      	pop	{r3}
 800bd2c:	469e      	mov	lr, r3
 800bd2e:	4770      	bx	lr

0800bd30 <_fini>:
 800bd30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd32:	bf00      	nop
 800bd34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd36:	bc08      	pop	{r3}
 800bd38:	469e      	mov	lr, r3
 800bd3a:	4770      	bx	lr
