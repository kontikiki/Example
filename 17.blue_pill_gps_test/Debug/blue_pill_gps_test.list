
blue_pill_gps_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c294  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000de8  0800c3a8  0800c3a8  0001c3a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d190  0800d190  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800d190  0800d190  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d190  0800d190  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d190  0800d190  0001d190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d194  0800d194  0001d194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800d198  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f24  200001e0  0800d378  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001104  0800d378  00021104  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004a854  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003858  00000000  00000000  0006aa5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000031d0  00000000  00000000  0006e2b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003018  00000000  00000000  00071488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a396  00000000  00000000  000744a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ab74  00000000  00000000  0008e836  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e18d  00000000  00000000  000a93aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00147537  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000f3cc  00000000  00000000  00147588  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c38c 	.word	0x0800c38c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	0800c38c 	.word	0x0800c38c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmpun>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001118:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800111c:	d102      	bne.n	8001124 <__aeabi_fcmpun+0x14>
 800111e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001122:	d108      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001124:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001128:	d102      	bne.n	8001130 <__aeabi_fcmpun+0x20>
 800112a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800112e:	d102      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001130:	f04f 0000 	mov.w	r0, #0
 8001134:	4770      	bx	lr
 8001136:	f04f 0001 	mov.w	r0, #1
 800113a:	4770      	bx	lr

0800113c <__aeabi_d2lz>:
 800113c:	b538      	push	{r3, r4, r5, lr}
 800113e:	4605      	mov	r5, r0
 8001140:	460c      	mov	r4, r1
 8001142:	2200      	movs	r2, #0
 8001144:	2300      	movs	r3, #0
 8001146:	4628      	mov	r0, r5
 8001148:	4621      	mov	r1, r4
 800114a:	f7ff fc37 	bl	80009bc <__aeabi_dcmplt>
 800114e:	b928      	cbnz	r0, 800115c <__aeabi_d2lz+0x20>
 8001150:	4628      	mov	r0, r5
 8001152:	4621      	mov	r1, r4
 8001154:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001158:	f000 b80a 	b.w	8001170 <__aeabi_d2ulz>
 800115c:	4628      	mov	r0, r5
 800115e:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001162:	f000 f805 	bl	8001170 <__aeabi_d2ulz>
 8001166:	4240      	negs	r0, r0
 8001168:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800116c:	bd38      	pop	{r3, r4, r5, pc}
 800116e:	bf00      	nop

08001170 <__aeabi_d2ulz>:
 8001170:	b5d0      	push	{r4, r6, r7, lr}
 8001172:	2200      	movs	r2, #0
 8001174:	4b0b      	ldr	r3, [pc, #44]	; (80011a4 <__aeabi_d2ulz+0x34>)
 8001176:	4606      	mov	r6, r0
 8001178:	460f      	mov	r7, r1
 800117a:	f7ff f9ad 	bl	80004d8 <__aeabi_dmul>
 800117e:	f7ff fc83 	bl	8000a88 <__aeabi_d2uiz>
 8001182:	4604      	mov	r4, r0
 8001184:	f7ff f92e 	bl	80003e4 <__aeabi_ui2d>
 8001188:	2200      	movs	r2, #0
 800118a:	4b07      	ldr	r3, [pc, #28]	; (80011a8 <__aeabi_d2ulz+0x38>)
 800118c:	f7ff f9a4 	bl	80004d8 <__aeabi_dmul>
 8001190:	4602      	mov	r2, r0
 8001192:	460b      	mov	r3, r1
 8001194:	4630      	mov	r0, r6
 8001196:	4639      	mov	r1, r7
 8001198:	f7fe ffe6 	bl	8000168 <__aeabi_dsub>
 800119c:	f7ff fc74 	bl	8000a88 <__aeabi_d2uiz>
 80011a0:	4621      	mov	r1, r4
 80011a2:	bdd0      	pop	{r4, r6, r7, pc}
 80011a4:	3df00000 	.word	0x3df00000
 80011a8:	41f00000 	.word	0x41f00000

080011ac <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch) {
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
	(void) HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, 100);
 80011b4:	1d39      	adds	r1, r7, #4
 80011b6:	2364      	movs	r3, #100	; 0x64
 80011b8:	2201      	movs	r2, #1
 80011ba:	4804      	ldr	r0, [pc, #16]	; (80011cc <__io_putchar+0x20>)
 80011bc:	f002 ff45 	bl	800404a <HAL_UART_Transmit>
	return ch;
 80011c0:	687b      	ldr	r3, [r7, #4]
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000254 	.word	0x20000254

080011d0 <deg2rad>:

double deg2rad(double deg) {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	e9c7 0100 	strd	r0, r1, [r7]
	return (deg * pi / 180);
 80011da:	a30b      	add	r3, pc, #44	; (adr r3, 8001208 <deg2rad+0x38>)
 80011dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80011e4:	f7ff f978 	bl	80004d8 <__aeabi_dmul>
 80011e8:	4602      	mov	r2, r0
 80011ea:	460b      	mov	r3, r1
 80011ec:	4610      	mov	r0, r2
 80011ee:	4619      	mov	r1, r3
 80011f0:	f04f 0200 	mov.w	r2, #0
 80011f4:	4b06      	ldr	r3, [pc, #24]	; (8001210 <deg2rad+0x40>)
 80011f6:	f7ff fa99 	bl	800072c <__aeabi_ddiv>
 80011fa:	4602      	mov	r2, r0
 80011fc:	460b      	mov	r3, r1
}
 80011fe:	4610      	mov	r0, r2
 8001200:	4619      	mov	r1, r3
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	54442d18 	.word	0x54442d18
 800120c:	400921fb 	.word	0x400921fb
 8001210:	40668000 	.word	0x40668000
 8001214:	00000000 	.word	0x00000000

08001218 <calc_distance>:

double rad2deg(double rad) {
	return (rad * 180 / pi);
}

double calc_distance(double lat1, double lon1, double lat2, double lon2) {
 8001218:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800121c:	b090      	sub	sp, #64	; 0x40
 800121e:	af00      	add	r7, sp, #0
 8001220:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001224:	e9c7 2300 	strd	r2, r3, [r7]

	double radius = 6371.0;
 8001228:	a373      	add	r3, pc, #460	; (adr r3, 80013f8 <calc_distance+0x1e0>)
 800122a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

	if ((lat1 == lat2) && (lon1 == lon2)) {
 8001232:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001236:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800123a:	f7ff fbb5 	bl	80009a8 <__aeabi_dcmpeq>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d00d      	beq.n	8001260 <calc_distance+0x48>
 8001244:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001248:	e9d7 0100 	ldrd	r0, r1, [r7]
 800124c:	f7ff fbac 	bl	80009a8 <__aeabi_dcmpeq>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d004      	beq.n	8001260 <calc_distance+0x48>
		return 0;
 8001256:	f04f 0200 	mov.w	r2, #0
 800125a:	f04f 0300 	mov.w	r3, #0
 800125e:	e0c4      	b.n	80013ea <calc_distance+0x1d2>
	} else {

		double dLat = deg2rad((lat2 - lat1)) / 2.0;
 8001260:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001264:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001268:	f7fe ff7e 	bl	8000168 <__aeabi_dsub>
 800126c:	4602      	mov	r2, r0
 800126e:	460b      	mov	r3, r1
 8001270:	4610      	mov	r0, r2
 8001272:	4619      	mov	r1, r3
 8001274:	f7ff ffac 	bl	80011d0 <deg2rad>
 8001278:	f04f 0200 	mov.w	r2, #0
 800127c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001280:	f7ff fa54 	bl	800072c <__aeabi_ddiv>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		double dLon = deg2rad((lon2 - lon1)) / 2.0;
 800128c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001290:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001294:	f7fe ff68 	bl	8000168 <__aeabi_dsub>
 8001298:	4602      	mov	r2, r0
 800129a:	460b      	mov	r3, r1
 800129c:	4610      	mov	r0, r2
 800129e:	4619      	mov	r1, r3
 80012a0:	f7ff ff96 	bl	80011d0 <deg2rad>
 80012a4:	f04f 0200 	mov.w	r2, #0
 80012a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012ac:	f7ff fa3e 	bl	800072c <__aeabi_ddiv>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

		lat1 = deg2rad(lat1);
 80012b8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80012bc:	f7ff ff88 	bl	80011d0 <deg2rad>
 80012c0:	e9c7 0102 	strd	r0, r1, [r7, #8]
		lat2 = deg2rad(lat2);
 80012c4:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80012c8:	f7ff ff82 	bl	80011d0 <deg2rad>
 80012cc:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58

		double a = sin(dLat) * sin(dLat)
 80012d0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80012d4:	f009 fe5e 	bl	800af94 <sin>
 80012d8:	4604      	mov	r4, r0
 80012da:	460d      	mov	r5, r1
 80012dc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80012e0:	f009 fe58 	bl	800af94 <sin>
 80012e4:	4602      	mov	r2, r0
 80012e6:	460b      	mov	r3, r1
 80012e8:	4620      	mov	r0, r4
 80012ea:	4629      	mov	r1, r5
 80012ec:	f7ff f8f4 	bl	80004d8 <__aeabi_dmul>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	4690      	mov	r8, r2
 80012f6:	4699      	mov	r9, r3
				+ sin(dLon) * sin(dLon) * cos(lat1) * cos(lat2);
 80012f8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80012fc:	f009 fe4a 	bl	800af94 <sin>
 8001300:	4604      	mov	r4, r0
 8001302:	460d      	mov	r5, r1
 8001304:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001308:	f009 fe44 	bl	800af94 <sin>
 800130c:	4602      	mov	r2, r0
 800130e:	460b      	mov	r3, r1
 8001310:	4620      	mov	r0, r4
 8001312:	4629      	mov	r1, r5
 8001314:	f7ff f8e0 	bl	80004d8 <__aeabi_dmul>
 8001318:	4602      	mov	r2, r0
 800131a:	460b      	mov	r3, r1
 800131c:	4614      	mov	r4, r2
 800131e:	461d      	mov	r5, r3
 8001320:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001324:	f009 fdf0 	bl	800af08 <cos>
 8001328:	4602      	mov	r2, r0
 800132a:	460b      	mov	r3, r1
 800132c:	4620      	mov	r0, r4
 800132e:	4629      	mov	r1, r5
 8001330:	f7ff f8d2 	bl	80004d8 <__aeabi_dmul>
 8001334:	4602      	mov	r2, r0
 8001336:	460b      	mov	r3, r1
 8001338:	4614      	mov	r4, r2
 800133a:	461d      	mov	r5, r3
 800133c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001340:	f009 fde2 	bl	800af08 <cos>
 8001344:	4602      	mov	r2, r0
 8001346:	460b      	mov	r3, r1
 8001348:	4620      	mov	r0, r4
 800134a:	4629      	mov	r1, r5
 800134c:	f7ff f8c4 	bl	80004d8 <__aeabi_dmul>
 8001350:	4602      	mov	r2, r0
 8001352:	460b      	mov	r3, r1
		double a = sin(dLat) * sin(dLat)
 8001354:	4640      	mov	r0, r8
 8001356:	4649      	mov	r1, r9
 8001358:	f7fe ff08 	bl	800016c <__adddf3>
 800135c:	4602      	mov	r2, r0
 800135e:	460b      	mov	r3, r1
 8001360:	e9c7 2308 	strd	r2, r3, [r7, #32]
		double c = 2 * atan2f(sqrtf(a), sqrtf(1 - a));
 8001364:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001368:	f7ff fbae 	bl	8000ac8 <__aeabi_d2f>
 800136c:	4603      	mov	r3, r0
 800136e:	4618      	mov	r0, r3
 8001370:	f009 fe58 	bl	800b024 <sqrtf>
 8001374:	4604      	mov	r4, r0
 8001376:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800137a:	f04f 0000 	mov.w	r0, #0
 800137e:	4920      	ldr	r1, [pc, #128]	; (8001400 <calc_distance+0x1e8>)
 8001380:	f7fe fef2 	bl	8000168 <__aeabi_dsub>
 8001384:	4602      	mov	r2, r0
 8001386:	460b      	mov	r3, r1
 8001388:	4610      	mov	r0, r2
 800138a:	4619      	mov	r1, r3
 800138c:	f7ff fb9c 	bl	8000ac8 <__aeabi_d2f>
 8001390:	4603      	mov	r3, r0
 8001392:	4618      	mov	r0, r3
 8001394:	f009 fe46 	bl	800b024 <sqrtf>
 8001398:	4603      	mov	r3, r0
 800139a:	4619      	mov	r1, r3
 800139c:	4620      	mov	r0, r4
 800139e:	f009 fe3f 	bl	800b020 <atan2f>
 80013a2:	4603      	mov	r3, r0
 80013a4:	4619      	mov	r1, r3
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff fbe4 	bl	8000b74 <__addsf3>
 80013ac:	4603      	mov	r3, r0
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff f83a 	bl	8000428 <__aeabi_f2d>
 80013b4:	4602      	mov	r2, r0
 80013b6:	460b      	mov	r3, r1
 80013b8:	e9c7 2306 	strd	r2, r3, [r7, #24]
		double dDistance = radius * c;
 80013bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80013c0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80013c4:	f7ff f888 	bl	80004d8 <__aeabi_dmul>
 80013c8:	4602      	mov	r2, r0
 80013ca:	460b      	mov	r3, r1
 80013cc:	e9c7 2304 	strd	r2, r3, [r7, #16]

		dDistance *= 1000.0;
 80013d0:	f04f 0200 	mov.w	r2, #0
 80013d4:	4b0b      	ldr	r3, [pc, #44]	; (8001404 <calc_distance+0x1ec>)
 80013d6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80013da:	f7ff f87d 	bl	80004d8 <__aeabi_dmul>
 80013de:	4602      	mov	r2, r0
 80013e0:	460b      	mov	r3, r1
 80013e2:	e9c7 2304 	strd	r2, r3, [r7, #16]

		return dDistance;
 80013e6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
	 dist = dist * 1.609344;
	 return (dist);
	 }
	 */

}
 80013ea:	4610      	mov	r0, r2
 80013ec:	4619      	mov	r1, r3
 80013ee:	3740      	adds	r7, #64	; 0x40
 80013f0:	46bd      	mov	sp, r7
 80013f2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80013f6:	bf00      	nop
 80013f8:	00000000 	.word	0x00000000
 80013fc:	40b8e300 	.word	0x40b8e300
 8001400:	3ff00000 	.word	0x3ff00000
 8001404:	408f4000 	.word	0x408f4000

08001408 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001408:	b5b0      	push	{r4, r5, r7, lr}
 800140a:	b0e2      	sub	sp, #392	; 0x188
 800140c:	af04      	add	r7, sp, #16
	/* USER CODE BEGIN 1 */
	static double f_latitude1 = 0.0;
	static double f_longitude1 = 0.0;
	double f_latitude2 = 0.0;
 800140e:	f04f 0200 	mov.w	r2, #0
 8001412:	f04f 0300 	mov.w	r3, #0
 8001416:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
	double f_longitude2 = 0.0;
 800141a:	f04f 0200 	mov.w	r2, #0
 800141e:	f04f 0300 	mov.w	r3, #0
 8001422:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168

	double distance = 0.0;
 8001426:	f04f 0200 	mov.w	r2, #0
 800142a:	f04f 0300 	mov.w	r3, #0
 800142e:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
	static double pre_time = 0.0;
	double f_seconds = 0.0;
 8001432:	f04f 0200 	mov.w	r2, #0
 8001436:	f04f 0300 	mov.w	r3, #0
 800143a:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
	double time_interval = 0.0;
 800143e:	f04f 0200 	mov.w	r2, #0
 8001442:	f04f 0300 	mov.w	r3, #0
 8001446:	e9c7 2356 	strd	r2, r3, [r7, #344]	; 0x158
	double speed = 0.0;
 800144a:	f04f 0200 	mov.w	r2, #0
 800144e:	f04f 0300 	mov.w	r3, #0
 8001452:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
	double ground_speed = 0.0;
 8001456:	f04f 0200 	mov.w	r2, #0
 800145a:	f04f 0300 	mov.w	r3, #0
 800145e:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001462:	f001 fb21 	bl	8002aa8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001466:	f000 fe0b 	bl	8002080 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800146a:	f000 feed 	bl	8002248 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 800146e:	f000 fe97 	bl	80021a0 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8001472:	f000 febf 	bl	80021f4 <MX_USART2_UART_Init>
	MX_SPI1_Init();
 8001476:	f000 fe5d 	bl	8002134 <MX_SPI1_Init>

	/* Initialize interrupts */
	MX_NVIC_Init();
 800147a:	f000 fe46 	bl	800210a <MX_NVIC_Init>
	/* USER CODE BEGIN 2 */
	u8g2_Setup_ssd1306_128x64_noname_f(&u8g2, U8G2_R0, u8x8_byte_stm32_hw_spi,
 800147e:	4b97      	ldr	r3, [pc, #604]	; (80016dc <main+0x2d4>)
 8001480:	4a97      	ldr	r2, [pc, #604]	; (80016e0 <main+0x2d8>)
 8001482:	4998      	ldr	r1, [pc, #608]	; (80016e4 <main+0x2dc>)
 8001484:	4898      	ldr	r0, [pc, #608]	; (80016e8 <main+0x2e0>)
 8001486:	f003 fb49 	bl	8004b1c <u8g2_Setup_ssd1306_128x64_noname_f>
			u8x8_stm32_gpio_and_delay);

	u8g2_InitDisplay(&u8g2);
 800148a:	4897      	ldr	r0, [pc, #604]	; (80016e8 <main+0x2e0>)
 800148c:	f004 ffa1 	bl	80063d2 <u8x8_InitDisplay>
	u8g2_SetPowerSave(&u8g2, 0);
 8001490:	2100      	movs	r1, #0
 8001492:	4895      	ldr	r0, [pc, #596]	; (80016e8 <main+0x2e0>)
 8001494:	f004 ffac 	bl	80063f0 <u8x8_SetPowerSave>

	//u8g2_SetFont(&u8g2, u8g2_font_5x7_tr);
	u8g2_SetFont(&u8g2, u8g2_font_6x13_mr);
 8001498:	4994      	ldr	r1, [pc, #592]	; (80016ec <main+0x2e4>)
 800149a:	4893      	ldr	r0, [pc, #588]	; (80016e8 <main+0x2e0>)
 800149c:	f004 f8e8 	bl	8005670 <u8g2_SetFont>

	u8g2_SetDisplayRotation(&u8g2, U8G2_R2);
 80014a0:	4993      	ldr	r1, [pc, #588]	; (80016f0 <main+0x2e8>)
 80014a2:	4891      	ldr	r0, [pc, #580]	; (80016e8 <main+0x2e0>)
 80014a4:	f004 fb56 	bl	8005b54 <u8g2_SetDisplayRotation>

	/* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
	__HAL_UART_ENABLE_IT(&huart2, UART_IT_ERR);
 80014a8:	4b92      	ldr	r3, [pc, #584]	; (80016f4 <main+0x2ec>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	695a      	ldr	r2, [r3, #20]
 80014ae:	4b91      	ldr	r3, [pc, #580]	; (80016f4 <main+0x2ec>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f042 0201 	orr.w	r2, r2, #1
 80014b6:	615a      	str	r2, [r3, #20]
	/* Enable the UART Data Register not empty Interrupt */
	__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 80014b8:	4b8e      	ldr	r3, [pc, #568]	; (80016f4 <main+0x2ec>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	68da      	ldr	r2, [r3, #12]
 80014be:	4b8d      	ldr	r3, [pc, #564]	; (80016f4 <main+0x2ec>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f042 0220 	orr.w	r2, r2, #32
 80014c6:	60da      	str	r2, [r3, #12]
	rxBufferInit(&uart_rx);
 80014c8:	488b      	ldr	r0, [pc, #556]	; (80016f8 <main+0x2f0>)
 80014ca:	f001 fa21 	bl	8002910 <rxBufferInit>

	printf("this is MAIN code, not WHILE\r\n");
 80014ce:	488b      	ldr	r0, [pc, #556]	; (80016fc <main+0x2f4>)
 80014d0:	f005 ff52 	bl	8007378 <puts>

	sprintf(str_buff, "Hello :)");
 80014d4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80014d8:	4989      	ldr	r1, [pc, #548]	; (8001700 <main+0x2f8>)
 80014da:	4618      	mov	r0, r3
 80014dc:	f005 ff58 	bl	8007390 <siprintf>
	sprintf(str_buff2, "Push button,");
 80014e0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80014e4:	4987      	ldr	r1, [pc, #540]	; (8001704 <main+0x2fc>)
 80014e6:	4618      	mov	r0, r3
 80014e8:	f005 ff52 	bl	8007390 <siprintf>
	sprintf(str_buff3, "Get speed.");
 80014ec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80014f0:	4985      	ldr	r1, [pc, #532]	; (8001708 <main+0x300>)
 80014f2:	4618      	mov	r0, r3
 80014f4:	f005 ff4c 	bl	8007390 <siprintf>
	u8g2_FirstPage(&u8g2);
 80014f8:	487b      	ldr	r0, [pc, #492]	; (80016e8 <main+0x2e0>)
 80014fa:	f003 fabc 	bl	8004a76 <u8g2_FirstPage>
	do {

		u8g2_DrawStr(&u8g2, 2, 15, str_buff);
 80014fe:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001502:	220f      	movs	r2, #15
 8001504:	2102      	movs	r1, #2
 8001506:	4878      	ldr	r0, [pc, #480]	; (80016e8 <main+0x2e0>)
 8001508:	f004 f814 	bl	8005534 <u8g2_DrawStr>
		u8g2_DrawStr(&u8g2, 2, 30, str_buff2);
 800150c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001510:	221e      	movs	r2, #30
 8001512:	2102      	movs	r1, #2
 8001514:	4874      	ldr	r0, [pc, #464]	; (80016e8 <main+0x2e0>)
 8001516:	f004 f80d 	bl	8005534 <u8g2_DrawStr>
		u8g2_DrawStr(&u8g2, 2, 45, str_buff3);
 800151a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800151e:	222d      	movs	r2, #45	; 0x2d
 8001520:	2102      	movs	r1, #2
 8001522:	4871      	ldr	r0, [pc, #452]	; (80016e8 <main+0x2e0>)
 8001524:	f004 f806 	bl	8005534 <u8g2_DrawStr>

	} while (u8g2_NextPage(&u8g2));
 8001528:	486f      	ldr	r0, [pc, #444]	; (80016e8 <main+0x2e0>)
 800152a:	f003 fab8 	bl	8004a9e <u8g2_NextPage>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d1e4      	bne.n	80014fe <main+0xf6>

	memset(str_buff, 0, sizeof(str_buff));
 8001534:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001538:	2220      	movs	r2, #32
 800153a:	2100      	movs	r1, #0
 800153c:	4618      	mov	r0, r3
 800153e:	f005 f81f 	bl	8006580 <memset>
	memset(str_buff, 0, sizeof(str_buff2));
 8001542:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001546:	2220      	movs	r2, #32
 8001548:	2100      	movs	r1, #0
 800154a:	4618      	mov	r0, r3
 800154c:	f005 f818 	bl	8006580 <memset>
	memset(str_buff, 0, sizeof(str_buff3));
 8001550:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001554:	2220      	movs	r2, #32
 8001556:	2100      	movs	r1, #0
 8001558:	4618      	mov	r0, r3
 800155a:	f005 f811 	bl	8006580 <memset>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	while (1) {

		sprintf(str_buff, "Speed: %.3f km/h", speed);
 800155e:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 8001562:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8001566:	4969      	ldr	r1, [pc, #420]	; (800170c <main+0x304>)
 8001568:	f005 ff12 	bl	8007390 <siprintf>
		sprintf(str_buff2, "Distance: %.3f m", distance);
 800156c:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8001570:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 8001574:	4966      	ldr	r1, [pc, #408]	; (8001710 <main+0x308>)
 8001576:	f005 ff0b 	bl	8007390 <siprintf>
		sprintf(str_buff3, "Time interval: %.2f s", time_interval);
 800157a:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800157e:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 8001582:	4964      	ldr	r1, [pc, #400]	; (8001714 <main+0x30c>)
 8001584:	f005 ff04 	bl	8007390 <siprintf>
		sprintf(str_buff4, "Gnd Speed: %.3f km/h", ground_speed);
 8001588:	f107 001c 	add.w	r0, r7, #28
 800158c:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8001590:	4961      	ldr	r1, [pc, #388]	; (8001718 <main+0x310>)
 8001592:	f005 fefd 	bl	8007390 <siprintf>

		u8g2_FirstPage(&u8g2);
 8001596:	4854      	ldr	r0, [pc, #336]	; (80016e8 <main+0x2e0>)
 8001598:	f003 fa6d 	bl	8004a76 <u8g2_FirstPage>
		do {

			u8g2_DrawStr(&u8g2, 2, 15, str_buff);
 800159c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80015a0:	220f      	movs	r2, #15
 80015a2:	2102      	movs	r1, #2
 80015a4:	4850      	ldr	r0, [pc, #320]	; (80016e8 <main+0x2e0>)
 80015a6:	f003 ffc5 	bl	8005534 <u8g2_DrawStr>
			u8g2_DrawStr(&u8g2, 2, 30, str_buff2);
 80015aa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80015ae:	221e      	movs	r2, #30
 80015b0:	2102      	movs	r1, #2
 80015b2:	484d      	ldr	r0, [pc, #308]	; (80016e8 <main+0x2e0>)
 80015b4:	f003 ffbe 	bl	8005534 <u8g2_DrawStr>
			u8g2_DrawStr(&u8g2, 2, 45, str_buff3);
 80015b8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80015bc:	222d      	movs	r2, #45	; 0x2d
 80015be:	2102      	movs	r1, #2
 80015c0:	4849      	ldr	r0, [pc, #292]	; (80016e8 <main+0x2e0>)
 80015c2:	f003 ffb7 	bl	8005534 <u8g2_DrawStr>
			u8g2_DrawStr(&u8g2, 2, 60, str_buff4);
 80015c6:	f107 031c 	add.w	r3, r7, #28
 80015ca:	223c      	movs	r2, #60	; 0x3c
 80015cc:	2102      	movs	r1, #2
 80015ce:	4846      	ldr	r0, [pc, #280]	; (80016e8 <main+0x2e0>)
 80015d0:	f003 ffb0 	bl	8005534 <u8g2_DrawStr>

		} while (u8g2_NextPage(&u8g2));
 80015d4:	4844      	ldr	r0, [pc, #272]	; (80016e8 <main+0x2e0>)
 80015d6:	f003 fa62 	bl	8004a9e <u8g2_NextPage>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d1dd      	bne.n	800159c <main+0x194>

		memset(str_buff, 0, sizeof(str_buff));
 80015e0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80015e4:	2220      	movs	r2, #32
 80015e6:	2100      	movs	r1, #0
 80015e8:	4618      	mov	r0, r3
 80015ea:	f004 ffc9 	bl	8006580 <memset>
		memset(str_buff, 0, sizeof(str_buff2));
 80015ee:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80015f2:	2220      	movs	r2, #32
 80015f4:	2100      	movs	r1, #0
 80015f6:	4618      	mov	r0, r3
 80015f8:	f004 ffc2 	bl	8006580 <memset>
		memset(str_buff, 0, sizeof(str_buff3));
 80015fc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001600:	2220      	movs	r2, #32
 8001602:	2100      	movs	r1, #0
 8001604:	4618      	mov	r0, r3
 8001606:	f004 ffbb 	bl	8006580 <memset>
		memset(str_buff, 0, sizeof(str_buff4));
 800160a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800160e:	2220      	movs	r2, #32
 8001610:	2100      	movs	r1, #0
 8001612:	4618      	mov	r0, r3
 8001614:	f004 ffb4 	bl	8006580 <memset>

		uint32_t tick = HAL_GetTick();
 8001618:	f001 fa9e 	bl	8002b58 <HAL_GetTick>
 800161c:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
		while ((HAL_GetTick() - tick) < 500)
 8001620:	bf00      	nop
 8001622:	f001 fa99 	bl	8002b58 <HAL_GetTick>
 8001626:	4602      	mov	r2, r0
 8001628:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001632:	d3f6      	bcc.n	8001622 <main+0x21a>
			;

		int n = 0;
 8001634:	2300      	movs	r3, #0
 8001636:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
		char *ptr;
		char *ptr1;

//		while ((*ptr) != '\n') {
		uint8_t num = 0;
 800163a:	2300      	movs	r3, #0
 800163c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
		num = uart_available(&uart_rx);
 8001640:	482d      	ldr	r0, [pc, #180]	; (80016f8 <main+0x2f0>)
 8001642:	f001 f9cc 	bl	80029de <uart_available>
 8001646:	4603      	mov	r3, r0
 8001648:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
		for (int i = 0; i < num; i++) {
 800164c:	2300      	movs	r3, #0
 800164e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8001652:	e018      	b.n	8001686 <main+0x27e>
			int ch = pop(&uart_rx);
 8001654:	4828      	ldr	r0, [pc, #160]	; (80016f8 <main+0x2f0>)
 8001656:	f001 f998 	bl	800298a <pop>
 800165a:	4603      	mov	r3, r0
 800165c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			if (ch != -1) {
 8001660:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001668:	d008      	beq.n	800167c <main+0x274>
				buff[i] = ch;
 800166a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800166e:	b2d9      	uxtb	r1, r3
 8001670:	4a2a      	ldr	r2, [pc, #168]	; (800171c <main+0x314>)
 8001672:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001676:	4413      	add	r3, r2
 8001678:	460a      	mov	r2, r1
 800167a:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < num; i++) {
 800167c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001680:	3301      	adds	r3, #1
 8001682:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8001686:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800168a:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800168e:	429a      	cmp	r2, r3
 8001690:	dbe0      	blt.n	8001654 <main+0x24c>
			}
		}

		int k = 0;
 8001692:	2300      	movs	r3, #0
 8001694:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
		ptr = buff;
 8001698:	4b20      	ldr	r3, [pc, #128]	; (800171c <main+0x314>)
 800169a:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

		while (((*ptr) != '$') && (k < sizeof(buff))) {
 800169e:	e009      	b.n	80016b4 <main+0x2ac>
			k++;
 80016a0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80016a4:	3301      	adds	r3, #1
 80016a6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
			ptr++;
 80016aa:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80016ae:	3301      	adds	r3, #1
 80016b0:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
		while (((*ptr) != '$') && (k < sizeof(buff))) {
 80016b4:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	2b24      	cmp	r3, #36	; 0x24
 80016bc:	d004      	beq.n	80016c8 <main+0x2c0>
 80016be:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80016c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016c6:	d3eb      	bcc.n	80016a0 <main+0x298>
		}

		if ((*ptr) == '$') {
 80016c8:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	2b24      	cmp	r3, #36	; 0x24
 80016d0:	d14c      	bne.n	800176c <main+0x364>

			ptr1 = sentence;
 80016d2:	4b13      	ldr	r3, [pc, #76]	; (8001720 <main+0x318>)
 80016d4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
			while (((*ptr) != '\n') && (k < sizeof(buff))) {
 80016d8:	e03e      	b.n	8001758 <main+0x350>
 80016da:	bf00      	nop
 80016dc:	08002755 	.word	0x08002755
 80016e0:	0800284d 	.word	0x0800284d
 80016e4:	0800ca44 	.word	0x0800ca44
 80016e8:	2000083c 	.word	0x2000083c
 80016ec:	0800c52c 	.word	0x0800c52c
 80016f0:	0800ca50 	.word	0x0800ca50
 80016f4:	20000298 	.word	0x20000298
 80016f8:	200008ec 	.word	0x200008ec
 80016fc:	0800c3a8 	.word	0x0800c3a8
 8001700:	0800c3c8 	.word	0x0800c3c8
 8001704:	0800c3d4 	.word	0x0800c3d4
 8001708:	0800c3e4 	.word	0x0800c3e4
 800170c:	0800c3f0 	.word	0x0800c3f0
 8001710:	0800c404 	.word	0x0800c404
 8001714:	0800c418 	.word	0x0800c418
 8001718:	0800c430 	.word	0x0800c430
 800171c:	200002dc 	.word	0x200002dc
 8001720:	200006dc 	.word	0x200006dc
 8001724:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001728:	781a      	ldrb	r2, [r3, #0]
				memcpy(ptr1, ptr, 1);
 800172a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800172e:	701a      	strb	r2, [r3, #0]
				//HAL_UART_Transmit(&huart1,ptr1,1,500);
				ptr1++;
 8001730:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001734:	3301      	adds	r3, #1
 8001736:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
				ptr++;
 800173a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800173e:	3301      	adds	r3, #1
 8001740:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
				n++;
 8001744:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001748:	3301      	adds	r3, #1
 800174a:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
				k++;
 800174e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001752:	3301      	adds	r3, #1
 8001754:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
			while (((*ptr) != '\n') && (k < sizeof(buff))) {
 8001758:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	2b0a      	cmp	r3, #10
 8001760:	d004      	beq.n	800176c <main+0x364>
 8001762:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001766:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800176a:	d3db      	bcc.n	8001724 <main+0x31c>
			}
		}
		//	}
		memcpy(ptr1, "\0", 1);
 800176c:	2201      	movs	r2, #1
 800176e:	49c1      	ldr	r1, [pc, #772]	; (8001a74 <main+0x66c>)
 8001770:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8001774:	f004 fef6 	bl	8006564 <memcpy>

		HAL_UART_Transmit(&huart1, (uint8_t*) sentence, sizeof(sentence), 500);
 8001778:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800177c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001780:	49bd      	ldr	r1, [pc, #756]	; (8001a78 <main+0x670>)
 8001782:	48be      	ldr	r0, [pc, #760]	; (8001a7c <main+0x674>)
 8001784:	f002 fc61 	bl	800404a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t*) "\n", 1, 500);
 8001788:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800178c:	2201      	movs	r2, #1
 800178e:	49bc      	ldr	r1, [pc, #752]	; (8001a80 <main+0x678>)
 8001790:	48ba      	ldr	r0, [pc, #744]	; (8001a7c <main+0x674>)
 8001792:	f002 fc5a 	bl	800404a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t*) "sentence\r\n", 11, 500);
 8001796:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800179a:	220b      	movs	r2, #11
 800179c:	49b9      	ldr	r1, [pc, #740]	; (8001a84 <main+0x67c>)
 800179e:	48b7      	ldr	r0, [pc, #732]	; (8001a7c <main+0x674>)
 80017a0:	f002 fc53 	bl	800404a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t*) "\r", 1, 500);
 80017a4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80017a8:	2201      	movs	r2, #1
 80017aa:	49b7      	ldr	r1, [pc, #732]	; (8001a88 <main+0x680>)
 80017ac:	48b3      	ldr	r0, [pc, #716]	; (8001a7c <main+0x674>)
 80017ae:	f002 fc4c 	bl	800404a <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t*) "\n", 1, 500);
 80017b2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80017b6:	2201      	movs	r2, #1
 80017b8:	49b1      	ldr	r1, [pc, #708]	; (8001a80 <main+0x678>)
 80017ba:	48b0      	ldr	r0, [pc, #704]	; (8001a7c <main+0x674>)
 80017bc:	f002 fc45 	bl	800404a <HAL_UART_Transmit>
		//printf("\r\n");

		if ((sentence[1] == 'G') && (sentence[2] == 'P')) {
 80017c0:	4bad      	ldr	r3, [pc, #692]	; (8001a78 <main+0x670>)
 80017c2:	785b      	ldrb	r3, [r3, #1]
 80017c4:	2b47      	cmp	r3, #71	; 0x47
 80017c6:	f040 83f8 	bne.w	8001fba <main+0xbb2>
 80017ca:	4bab      	ldr	r3, [pc, #684]	; (8001a78 <main+0x670>)
 80017cc:	789b      	ldrb	r3, [r3, #2]
 80017ce:	2b50      	cmp	r3, #80	; 0x50
 80017d0:	f040 83f3 	bne.w	8001fba <main+0xbb2>
			if (((sentence[3] == 'R') && (sentence[4] == 'M'))) {
 80017d4:	4ba8      	ldr	r3, [pc, #672]	; (8001a78 <main+0x670>)
 80017d6:	78db      	ldrb	r3, [r3, #3]
 80017d8:	2b52      	cmp	r3, #82	; 0x52
 80017da:	f040 83ee 	bne.w	8001fba <main+0xbb2>
 80017de:	4ba6      	ldr	r3, [pc, #664]	; (8001a78 <main+0x670>)
 80017e0:	791b      	ldrb	r3, [r3, #4]
 80017e2:	2b4d      	cmp	r3, #77	; 0x4d
 80017e4:	f040 83e9 	bne.w	8001fba <main+0xbb2>
				char *ptr2 = type;
 80017e8:	4ba8      	ldr	r3, [pc, #672]	; (8001a8c <main+0x684>)
 80017ea:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
				ptr1 = sentence;
 80017ee:	4ba2      	ldr	r3, [pc, #648]	; (8001a78 <main+0x670>)
 80017f0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
				int n2 = 0;
 80017f4:	2300      	movs	r3, #0
 80017f6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
				while ((*ptr1) != ',') {
 80017fa:	e014      	b.n	8001826 <main+0x41e>
 80017fc:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001800:	781a      	ldrb	r2, [r3, #0]
					memcpy(ptr2, ptr1, 1);
 8001802:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001806:	701a      	strb	r2, [r3, #0]
					ptr2++;
 8001808:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800180c:	3301      	adds	r3, #1
 800180e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
					ptr1++;
 8001812:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001816:	3301      	adds	r3, #1
 8001818:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
					n2++;
 800181c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001820:	3301      	adds	r3, #1
 8001822:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
				while ((*ptr1) != ',') {
 8001826:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	2b2c      	cmp	r3, #44	; 0x2c
 800182e:	d1e5      	bne.n	80017fc <main+0x3f4>
				}

				memcpy(ptr2, "\0", 1);
 8001830:	2201      	movs	r2, #1
 8001832:	4990      	ldr	r1, [pc, #576]	; (8001a74 <main+0x66c>)
 8001834:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8001838:	f004 fe94 	bl	8006564 <memcpy>

				HAL_UART_Transmit(&huart1, (uint8_t*) type, n2 + 1, 500);
 800183c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001840:	b29b      	uxth	r3, r3
 8001842:	3301      	adds	r3, #1
 8001844:	b29a      	uxth	r2, r3
 8001846:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800184a:	4990      	ldr	r1, [pc, #576]	; (8001a8c <main+0x684>)
 800184c:	488b      	ldr	r0, [pc, #556]	; (8001a7c <main+0x674>)
 800184e:	f002 fbfc 	bl	800404a <HAL_UART_Transmit>

				HAL_UART_Transmit(&huart1, (uint8_t*) "\r", 1, 500);
 8001852:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001856:	2201      	movs	r2, #1
 8001858:	498b      	ldr	r1, [pc, #556]	; (8001a88 <main+0x680>)
 800185a:	4888      	ldr	r0, [pc, #544]	; (8001a7c <main+0x674>)
 800185c:	f002 fbf5 	bl	800404a <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart1, (uint8_t*) "\n", 1, 500);
 8001860:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001864:	2201      	movs	r2, #1
 8001866:	4986      	ldr	r1, [pc, #536]	; (8001a80 <main+0x678>)
 8001868:	4884      	ldr	r0, [pc, #528]	; (8001a7c <main+0x674>)
 800186a:	f002 fbee 	bl	800404a <HAL_UART_Transmit>

				ptr1++;
 800186e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001872:	3301      	adds	r3, #1
 8001874:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

				char *ptr3 = time;
 8001878:	4b85      	ldr	r3, [pc, #532]	; (8001a90 <main+0x688>)
 800187a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

				int n3 = 0;
 800187e:	2300      	movs	r3, #0
 8001880:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
				while ((*ptr1) != ',') {
 8001884:	e014      	b.n	80018b0 <main+0x4a8>
 8001886:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800188a:	781a      	ldrb	r2, [r3, #0]
					memcpy(ptr3, ptr1, 1);
 800188c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001890:	701a      	strb	r2, [r3, #0]

					ptr3++;
 8001892:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001896:	3301      	adds	r3, #1
 8001898:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
					ptr1++;
 800189c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80018a0:	3301      	adds	r3, #1
 80018a2:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
					n3++;
 80018a6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80018aa:	3301      	adds	r3, #1
 80018ac:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
				while ((*ptr1) != ',') {
 80018b0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	2b2c      	cmp	r3, #44	; 0x2c
 80018b8:	d1e5      	bne.n	8001886 <main+0x47e>
				}

				memcpy(ptr3, "\0", 1);
 80018ba:	2201      	movs	r2, #1
 80018bc:	496d      	ldr	r1, [pc, #436]	; (8001a74 <main+0x66c>)
 80018be:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 80018c2:	f004 fe4f 	bl	8006564 <memcpy>

				if (n3 == 9) {
 80018c6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80018ca:	2b09      	cmp	r3, #9
 80018cc:	f040 80ac 	bne.w	8001a28 <main+0x620>
					char hour[5] = { 0, };
 80018d0:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80018d4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	2200      	movs	r2, #0
 80018de:	711a      	strb	r2, [r3, #4]
					char minute[5] = { 0, };
 80018e0:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80018e4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	2200      	movs	r2, #0
 80018ee:	711a      	strb	r2, [r3, #4]
					char second[10] = { 0, };
 80018f0:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80018f4:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	3304      	adds	r3, #4
 80018fe:	2200      	movs	r2, #0
 8001900:	601a      	str	r2, [r3, #0]
 8001902:	809a      	strh	r2, [r3, #4]
 8001904:	4b62      	ldr	r3, [pc, #392]	; (8001a90 <main+0x688>)
 8001906:	881a      	ldrh	r2, [r3, #0]

					memcpy(hour, time, 2);
 8001908:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800190c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001910:	801a      	strh	r2, [r3, #0]
					memcpy(&hour[2], "\0", 1);
 8001912:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8001916:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800191a:	2200      	movs	r2, #0
 800191c:	709a      	strb	r2, [r3, #2]
 800191e:	4b5c      	ldr	r3, [pc, #368]	; (8001a90 <main+0x688>)
 8001920:	885a      	ldrh	r2, [r3, #2]

					memcpy(minute, &time[2], 2);
 8001922:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8001926:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800192a:	801a      	strh	r2, [r3, #0]
					memcpy(&minute[2], "\0", 1);
 800192c:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8001930:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001934:	2200      	movs	r2, #0
 8001936:	709a      	strb	r2, [r3, #2]

					memcpy(second, &time[4], 5);
 8001938:	463b      	mov	r3, r7
 800193a:	2205      	movs	r2, #5
 800193c:	4955      	ldr	r1, [pc, #340]	; (8001a94 <main+0x68c>)
 800193e:	4618      	mov	r0, r3
 8001940:	f004 fe10 	bl	8006564 <memcpy>
					memcpy(&second[5], "\0", 1);
 8001944:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8001948:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800194c:	2200      	movs	r2, #0
 800194e:	715a      	strb	r2, [r3, #5]

					f_seconds = (atof(hour) * 60.0 * 60.0)
 8001950:	f107 0314 	add.w	r3, r7, #20
 8001954:	4618      	mov	r0, r3
 8001956:	f004 fdd8 	bl	800650a <atof>
 800195a:	f04f 0200 	mov.w	r2, #0
 800195e:	4b4e      	ldr	r3, [pc, #312]	; (8001a98 <main+0x690>)
 8001960:	f7fe fdba 	bl	80004d8 <__aeabi_dmul>
 8001964:	4602      	mov	r2, r0
 8001966:	460b      	mov	r3, r1
 8001968:	4610      	mov	r0, r2
 800196a:	4619      	mov	r1, r3
 800196c:	f04f 0200 	mov.w	r2, #0
 8001970:	4b49      	ldr	r3, [pc, #292]	; (8001a98 <main+0x690>)
 8001972:	f7fe fdb1 	bl	80004d8 <__aeabi_dmul>
 8001976:	4602      	mov	r2, r0
 8001978:	460b      	mov	r3, r1
 800197a:	4614      	mov	r4, r2
 800197c:	461d      	mov	r5, r3
							+ (atof(minute) * 60.0) + (atof(second));
 800197e:	f107 030c 	add.w	r3, r7, #12
 8001982:	4618      	mov	r0, r3
 8001984:	f004 fdc1 	bl	800650a <atof>
 8001988:	f04f 0200 	mov.w	r2, #0
 800198c:	4b42      	ldr	r3, [pc, #264]	; (8001a98 <main+0x690>)
 800198e:	f7fe fda3 	bl	80004d8 <__aeabi_dmul>
 8001992:	4602      	mov	r2, r0
 8001994:	460b      	mov	r3, r1
 8001996:	4620      	mov	r0, r4
 8001998:	4629      	mov	r1, r5
 800199a:	f7fe fbe7 	bl	800016c <__adddf3>
 800199e:	4602      	mov	r2, r0
 80019a0:	460b      	mov	r3, r1
 80019a2:	4614      	mov	r4, r2
 80019a4:	461d      	mov	r5, r3
 80019a6:	463b      	mov	r3, r7
 80019a8:	4618      	mov	r0, r3
 80019aa:	f004 fdae 	bl	800650a <atof>
 80019ae:	4602      	mov	r2, r0
 80019b0:	460b      	mov	r3, r1
					f_seconds = (atof(hour) * 60.0 * 60.0)
 80019b2:	4620      	mov	r0, r4
 80019b4:	4629      	mov	r1, r5
 80019b6:	f7fe fbd9 	bl	800016c <__adddf3>
 80019ba:	4602      	mov	r2, r0
 80019bc:	460b      	mov	r3, r1
 80019be:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8

					printf("pre_time : %.2f\r\n", pre_time);
 80019c2:	4b36      	ldr	r3, [pc, #216]	; (8001a9c <main+0x694>)
 80019c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c8:	4835      	ldr	r0, [pc, #212]	; (8001aa0 <main+0x698>)
 80019ca:	f005 fc4f 	bl	800726c <iprintf>

					printf("f_seconds : %.2f\r\n", f_seconds);
 80019ce:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 80019d2:	4834      	ldr	r0, [pc, #208]	; (8001aa4 <main+0x69c>)
 80019d4:	f005 fc4a 	bl	800726c <iprintf>

					if (pre_time == 0) {
 80019d8:	4b30      	ldr	r3, [pc, #192]	; (8001a9c <main+0x694>)
 80019da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019de:	f04f 0200 	mov.w	r2, #0
 80019e2:	f04f 0300 	mov.w	r3, #0
 80019e6:	f7fe ffdf 	bl	80009a8 <__aeabi_dcmpeq>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d006      	beq.n	80019fe <main+0x5f6>
						time_interval = 0.0;
 80019f0:	f04f 0200 	mov.w	r2, #0
 80019f4:	f04f 0300 	mov.w	r3, #0
 80019f8:	e9c7 2356 	strd	r2, r3, [r7, #344]	; 0x158
 80019fc:	e00a      	b.n	8001a14 <main+0x60c>
					} else {
						time_interval = f_seconds - pre_time;
 80019fe:	4b27      	ldr	r3, [pc, #156]	; (8001a9c <main+0x694>)
 8001a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a04:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 8001a08:	f7fe fbae 	bl	8000168 <__aeabi_dsub>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	460b      	mov	r3, r1
 8001a10:	e9c7 2356 	strd	r2, r3, [r7, #344]	; 0x158
					}

					printf("time_interval : %.2f\r\n", time_interval);
 8001a14:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 8001a18:	4823      	ldr	r0, [pc, #140]	; (8001aa8 <main+0x6a0>)
 8001a1a:	f005 fc27 	bl	800726c <iprintf>

					pre_time = f_seconds;
 8001a1e:	491f      	ldr	r1, [pc, #124]	; (8001a9c <main+0x694>)
 8001a20:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8001a24:	e9c1 2300 	strd	r2, r3, [r1]
				}

				HAL_UART_Transmit(&huart1, (uint8_t*) time, n3 + 1, 500);
 8001a28:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	3301      	adds	r3, #1
 8001a30:	b29a      	uxth	r2, r3
 8001a32:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001a36:	4916      	ldr	r1, [pc, #88]	; (8001a90 <main+0x688>)
 8001a38:	4810      	ldr	r0, [pc, #64]	; (8001a7c <main+0x674>)
 8001a3a:	f002 fb06 	bl	800404a <HAL_UART_Transmit>

				HAL_UART_Transmit(&huart1, (uint8_t*) "\r", 1, 500);
 8001a3e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001a42:	2201      	movs	r2, #1
 8001a44:	4910      	ldr	r1, [pc, #64]	; (8001a88 <main+0x680>)
 8001a46:	480d      	ldr	r0, [pc, #52]	; (8001a7c <main+0x674>)
 8001a48:	f002 faff 	bl	800404a <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart1, (uint8_t*) "\n", 1, 500);
 8001a4c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001a50:	2201      	movs	r2, #1
 8001a52:	490b      	ldr	r1, [pc, #44]	; (8001a80 <main+0x678>)
 8001a54:	4809      	ldr	r0, [pc, #36]	; (8001a7c <main+0x674>)
 8001a56:	f002 faf8 	bl	800404a <HAL_UART_Transmit>

				ptr1++;
 8001a5a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001a5e:	3301      	adds	r3, #1
 8001a60:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

				char *ptr4 = valid;
 8001a64:	4b11      	ldr	r3, [pc, #68]	; (8001aac <main+0x6a4>)
 8001a66:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

				int n4 = 0;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
				while ((*ptr1) != ',') {
 8001a70:	e033      	b.n	8001ada <main+0x6d2>
 8001a72:	bf00      	nop
 8001a74:	0800c448 	.word	0x0800c448
 8001a78:	200006dc 	.word	0x200006dc
 8001a7c:	20000254 	.word	0x20000254
 8001a80:	0800c44c 	.word	0x0800c44c
 8001a84:	0800c450 	.word	0x0800c450
 8001a88:	0800c45c 	.word	0x0800c45c
 8001a8c:	200007dc 	.word	0x200007dc
 8001a90:	200007ec 	.word	0x200007ec
 8001a94:	200007f0 	.word	0x200007f0
 8001a98:	404e0000 	.word	0x404e0000
 8001a9c:	200008d0 	.word	0x200008d0
 8001aa0:	0800c460 	.word	0x0800c460
 8001aa4:	0800c474 	.word	0x0800c474
 8001aa8:	0800c488 	.word	0x0800c488
 8001aac:	200007fc 	.word	0x200007fc
 8001ab0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001ab4:	781a      	ldrb	r2, [r3, #0]
					memcpy(ptr4, ptr1, 1);
 8001ab6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001aba:	701a      	strb	r2, [r3, #0]
					ptr4++;
 8001abc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
					ptr1++;
 8001ac6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001aca:	3301      	adds	r3, #1
 8001acc:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
					n4++;
 8001ad0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
				while ((*ptr1) != ',') {
 8001ada:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	2b2c      	cmp	r3, #44	; 0x2c
 8001ae2:	d1e5      	bne.n	8001ab0 <main+0x6a8>
				}

				memcpy(ptr4, "\0", 1);
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	49bf      	ldr	r1, [pc, #764]	; (8001de4 <main+0x9dc>)
 8001ae8:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8001aec:	f004 fd3a 	bl	8006564 <memcpy>

				HAL_UART_Transmit(&huart1, (uint8_t*) valid, n4 + 1, 500);
 8001af0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	3301      	adds	r3, #1
 8001af8:	b29a      	uxth	r2, r3
 8001afa:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001afe:	49ba      	ldr	r1, [pc, #744]	; (8001de8 <main+0x9e0>)
 8001b00:	48ba      	ldr	r0, [pc, #744]	; (8001dec <main+0x9e4>)
 8001b02:	f002 faa2 	bl	800404a <HAL_UART_Transmit>

				printf("\r\n");
 8001b06:	48ba      	ldr	r0, [pc, #744]	; (8001df0 <main+0x9e8>)
 8001b08:	f005 fc36 	bl	8007378 <puts>

				ptr1++;
 8001b0c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001b10:	3301      	adds	r3, #1
 8001b12:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

				char *ptr5 = latitude;
 8001b16:	4bb7      	ldr	r3, [pc, #732]	; (8001df4 <main+0x9ec>)
 8001b18:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

				int n5 = 0;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
				while ((*ptr1) != ',') {
 8001b22:	e014      	b.n	8001b4e <main+0x746>
 8001b24:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001b28:	781a      	ldrb	r2, [r3, #0]
					memcpy(ptr5, ptr1, 1);
 8001b2a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001b2e:	701a      	strb	r2, [r3, #0]

					ptr5++;
 8001b30:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001b34:	3301      	adds	r3, #1
 8001b36:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
					ptr1++;
 8001b3a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001b3e:	3301      	adds	r3, #1
 8001b40:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
					n5++;
 8001b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001b48:	3301      	adds	r3, #1
 8001b4a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
				while ((*ptr1) != ',') {
 8001b4e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	2b2c      	cmp	r3, #44	; 0x2c
 8001b56:	d1e5      	bne.n	8001b24 <main+0x71c>
				}

				memcpy(ptr5, "\0", 1);
 8001b58:	2201      	movs	r2, #1
 8001b5a:	49a2      	ldr	r1, [pc, #648]	; (8001de4 <main+0x9dc>)
 8001b5c:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 8001b60:	f004 fd00 	bl	8006564 <memcpy>

				if (n5 == 10) {
 8001b64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001b68:	2b0a      	cmp	r3, #10
 8001b6a:	d145      	bne.n	8001bf8 <main+0x7f0>
					double f_latitude = atof(latitude);
 8001b6c:	48a1      	ldr	r0, [pc, #644]	; (8001df4 <main+0x9ec>)
 8001b6e:	f004 fccc 	bl	800650a <atof>
 8001b72:	e9c7 0136 	strd	r0, r1, [r7, #216]	; 0xd8
					if (f_latitude > 0) {
 8001b76:	f04f 0200 	mov.w	r2, #0
 8001b7a:	f04f 0300 	mov.w	r3, #0
 8001b7e:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8001b82:	f7fe ff39 	bl	80009f8 <__aeabi_dcmpgt>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d035      	beq.n	8001bf8 <main+0x7f0>
						double degree_latitude = (f_latitude / 100.0);
 8001b8c:	f04f 0200 	mov.w	r2, #0
 8001b90:	4b99      	ldr	r3, [pc, #612]	; (8001df8 <main+0x9f0>)
 8001b92:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8001b96:	f7fe fdc9 	bl	800072c <__aeabi_ddiv>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0

						double minute_latitude = f_latitude
								- ((degree_latitude) * 100.0);
 8001ba2:	f04f 0200 	mov.w	r2, #0
 8001ba6:	4b94      	ldr	r3, [pc, #592]	; (8001df8 <main+0x9f0>)
 8001ba8:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8001bac:	f7fe fc94 	bl	80004d8 <__aeabi_dmul>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	460b      	mov	r3, r1
						double minute_latitude = f_latitude
 8001bb4:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8001bb8:	f7fe fad6 	bl	8000168 <__aeabi_dsub>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
						double minute2degree_latitude = minute_latitude
 8001bc4:	f04f 0200 	mov.w	r2, #0
 8001bc8:	4b8c      	ldr	r3, [pc, #560]	; (8001dfc <main+0x9f4>)
 8001bca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001bce:	f7fe fdad 	bl	800072c <__aeabi_ddiv>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
								/ 60.000;
						f_latitude2 = degree_latitude + minute2degree_latitude;
 8001bda:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8001bde:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8001be2:	f7fe fac3 	bl	800016c <__adddf3>
 8001be6:	4602      	mov	r2, r0
 8001be8:	460b      	mov	r3, r1
 8001bea:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170

						printf("latitude: %.7f\r\n", f_latitude2);
 8001bee:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8001bf2:	4883      	ldr	r0, [pc, #524]	; (8001e00 <main+0x9f8>)
 8001bf4:	f005 fb3a 	bl	800726c <iprintf>
					}
				}

				//HAL_UART_Transmit(&huart1, (uint8_t*)latitude, n5+1, 500);

				ptr1++;
 8001bf8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

				char *ptr6 = NS;
 8001c02:	4b80      	ldr	r3, [pc, #512]	; (8001e04 <main+0x9fc>)
 8001c04:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

				int n6 = 0;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
				while ((*ptr1) != ',') {
 8001c0e:	e014      	b.n	8001c3a <main+0x832>
 8001c10:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001c14:	781a      	ldrb	r2, [r3, #0]
					memcpy(ptr6, ptr1, 1);
 8001c16:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001c1a:	701a      	strb	r2, [r3, #0]
					ptr6++;
 8001c1c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001c20:	3301      	adds	r3, #1
 8001c22:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
					ptr1++;
 8001c26:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
					n6++;
 8001c30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001c34:	3301      	adds	r3, #1
 8001c36:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
				while ((*ptr1) != ',') {
 8001c3a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	2b2c      	cmp	r3, #44	; 0x2c
 8001c42:	d1e5      	bne.n	8001c10 <main+0x808>
				}

				memcpy(ptr6, "\0", 1);
 8001c44:	2201      	movs	r2, #1
 8001c46:	4967      	ldr	r1, [pc, #412]	; (8001de4 <main+0x9dc>)
 8001c48:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8001c4c:	f004 fc8a 	bl	8006564 <memcpy>

				HAL_UART_Transmit(&huart1, (uint8_t*) NS, n6 + 1, 500);
 8001c50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	3301      	adds	r3, #1
 8001c58:	b29a      	uxth	r2, r3
 8001c5a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001c5e:	4969      	ldr	r1, [pc, #420]	; (8001e04 <main+0x9fc>)
 8001c60:	4862      	ldr	r0, [pc, #392]	; (8001dec <main+0x9e4>)
 8001c62:	f002 f9f2 	bl	800404a <HAL_UART_Transmit>

				printf("\r\n");
 8001c66:	4862      	ldr	r0, [pc, #392]	; (8001df0 <main+0x9e8>)
 8001c68:	f005 fb86 	bl	8007378 <puts>
				ptr1++;
 8001c6c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001c70:	3301      	adds	r3, #1
 8001c72:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

				char *ptr7 = longitude;
 8001c76:	4b64      	ldr	r3, [pc, #400]	; (8001e08 <main+0xa00>)
 8001c78:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

				int n7 = 0;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
				while ((*ptr1) != ',') {
 8001c82:	e014      	b.n	8001cae <main+0x8a6>
 8001c84:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001c88:	781a      	ldrb	r2, [r3, #0]
					memcpy(ptr7, ptr1, 1);
 8001c8a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001c8e:	701a      	strb	r2, [r3, #0]
					ptr7++;
 8001c90:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001c94:	3301      	adds	r3, #1
 8001c96:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
					ptr1++;
 8001c9a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
					n7++;
 8001ca4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001ca8:	3301      	adds	r3, #1
 8001caa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
				while ((*ptr1) != ',') {
 8001cae:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	2b2c      	cmp	r3, #44	; 0x2c
 8001cb6:	d1e5      	bne.n	8001c84 <main+0x87c>
				}

				memcpy(ptr7, "\0", 1);
 8001cb8:	2201      	movs	r2, #1
 8001cba:	494a      	ldr	r1, [pc, #296]	; (8001de4 <main+0x9dc>)
 8001cbc:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8001cc0:	f004 fc50 	bl	8006564 <memcpy>

				if (n7 == 11) {
 8001cc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001cc8:	2b0b      	cmp	r3, #11
 8001cca:	d145      	bne.n	8001d58 <main+0x950>
					double f_longitude = atof(longitude);
 8001ccc:	484e      	ldr	r0, [pc, #312]	; (8001e08 <main+0xa00>)
 8001cce:	f004 fc1c 	bl	800650a <atof>
 8001cd2:	e9c7 012e 	strd	r0, r1, [r7, #184]	; 0xb8
					if (f_longitude > 0) {
 8001cd6:	f04f 0200 	mov.w	r2, #0
 8001cda:	f04f 0300 	mov.w	r3, #0
 8001cde:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001ce2:	f7fe fe89 	bl	80009f8 <__aeabi_dcmpgt>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d035      	beq.n	8001d58 <main+0x950>
						double degree_longitude = (f_longitude / 100.0);
 8001cec:	f04f 0200 	mov.w	r2, #0
 8001cf0:	4b41      	ldr	r3, [pc, #260]	; (8001df8 <main+0x9f0>)
 8001cf2:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001cf6:	f7fe fd19 	bl	800072c <__aeabi_ddiv>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
						double minute_longitude = f_longitude
								- ((degree_longitude) * 100.0);
 8001d02:	f04f 0200 	mov.w	r2, #0
 8001d06:	4b3c      	ldr	r3, [pc, #240]	; (8001df8 <main+0x9f0>)
 8001d08:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8001d0c:	f7fe fbe4 	bl	80004d8 <__aeabi_dmul>
 8001d10:	4602      	mov	r2, r0
 8001d12:	460b      	mov	r3, r1
						double minute_longitude = f_longitude
 8001d14:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001d18:	f7fe fa26 	bl	8000168 <__aeabi_dsub>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	460b      	mov	r3, r1
 8001d20:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
						double minute2degree_longitude = minute_longitude
 8001d24:	f04f 0200 	mov.w	r2, #0
 8001d28:	4b34      	ldr	r3, [pc, #208]	; (8001dfc <main+0x9f4>)
 8001d2a:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8001d2e:	f7fe fcfd 	bl	800072c <__aeabi_ddiv>
 8001d32:	4602      	mov	r2, r0
 8001d34:	460b      	mov	r3, r1
 8001d36:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
								/ 60.0;
						f_longitude2 = degree_longitude
 8001d3a:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8001d3e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8001d42:	f7fe fa13 	bl	800016c <__adddf3>
 8001d46:	4602      	mov	r2, r0
 8001d48:	460b      	mov	r3, r1
 8001d4a:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
								+ minute2degree_longitude;

						printf("longitude: %.7f\r\n", f_longitude2);
 8001d4e:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 8001d52:	482e      	ldr	r0, [pc, #184]	; (8001e0c <main+0xa04>)
 8001d54:	f005 fa8a 	bl	800726c <iprintf>
					}
				}

				//HAL_UART_Transmit(&huart1, (uint8_t*)longitude, n7+1, 500);

				ptr1++;
 8001d58:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

				char *ptr8 = EW;
 8001d62:	4b2b      	ldr	r3, [pc, #172]	; (8001e10 <main+0xa08>)
 8001d64:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

				int n8 = 0;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
				while ((*ptr1) != ',') {
 8001d6e:	e014      	b.n	8001d9a <main+0x992>
 8001d70:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001d74:	781a      	ldrb	r2, [r3, #0]
					memcpy(ptr8, ptr1, 1);
 8001d76:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001d7a:	701a      	strb	r2, [r3, #0]
					ptr8++;
 8001d7c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001d80:	3301      	adds	r3, #1
 8001d82:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
					ptr1++;
 8001d86:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
					n8++;
 8001d90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001d94:	3301      	adds	r3, #1
 8001d96:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
				while ((*ptr1) != ',') {
 8001d9a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	2b2c      	cmp	r3, #44	; 0x2c
 8001da2:	d1e5      	bne.n	8001d70 <main+0x968>
				}

				memcpy(ptr8, "\0", 1);
 8001da4:	2201      	movs	r2, #1
 8001da6:	490f      	ldr	r1, [pc, #60]	; (8001de4 <main+0x9dc>)
 8001da8:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 8001dac:	f004 fbda 	bl	8006564 <memcpy>

				HAL_UART_Transmit(&huart1, (uint8_t*) EW, n8 + 1, 500);
 8001db0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	3301      	adds	r3, #1
 8001db8:	b29a      	uxth	r2, r3
 8001dba:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001dbe:	4914      	ldr	r1, [pc, #80]	; (8001e10 <main+0xa08>)
 8001dc0:	480a      	ldr	r0, [pc, #40]	; (8001dec <main+0x9e4>)
 8001dc2:	f002 f942 	bl	800404a <HAL_UART_Transmit>

				printf("\r\n");
 8001dc6:	480a      	ldr	r0, [pc, #40]	; (8001df0 <main+0x9e8>)
 8001dc8:	f005 fad6 	bl	8007378 <puts>

				ptr1++;
 8001dcc:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

				char *ptr9 = groundSpeed;
 8001dd6:	4b0f      	ldr	r3, [pc, #60]	; (8001e14 <main+0xa0c>)
 8001dd8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

				int n9 = 0;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
				while ((*ptr1) != ',') {
 8001de2:	e02e      	b.n	8001e42 <main+0xa3a>
 8001de4:	0800c448 	.word	0x0800c448
 8001de8:	200007fc 	.word	0x200007fc
 8001dec:	20000254 	.word	0x20000254
 8001df0:	0800c45c 	.word	0x0800c45c
 8001df4:	20000800 	.word	0x20000800
 8001df8:	40590000 	.word	0x40590000
 8001dfc:	404e0000 	.word	0x404e0000
 8001e00:	0800c4a0 	.word	0x0800c4a0
 8001e04:	20000810 	.word	0x20000810
 8001e08:	20000814 	.word	0x20000814
 8001e0c:	0800c4b4 	.word	0x0800c4b4
 8001e10:	20000824 	.word	0x20000824
 8001e14:	20000828 	.word	0x20000828
 8001e18:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001e1c:	781a      	ldrb	r2, [r3, #0]
					memcpy(ptr9, ptr1, 1);
 8001e1e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001e22:	701a      	strb	r2, [r3, #0]

					ptr9++;
 8001e24:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001e28:	3301      	adds	r3, #1
 8001e2a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
					ptr1++;
 8001e2e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001e32:	3301      	adds	r3, #1
 8001e34:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
					n9++;
 8001e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
				while ((*ptr1) != ',') {
 8001e42:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	2b2c      	cmp	r3, #44	; 0x2c
 8001e4a:	d1e5      	bne.n	8001e18 <main+0xa10>
				}

				memcpy(ptr9, "\0", 1);
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	497a      	ldr	r1, [pc, #488]	; (8002038 <main+0xc30>)
 8001e50:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 8001e54:	f004 fb86 	bl	8006564 <memcpy>

				if (n9 == 5) {
 8001e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e5c:	2b05      	cmp	r3, #5
 8001e5e:	d10b      	bne.n	8001e78 <main+0xa70>
					ground_speed = (atof(groundSpeed)) * 1.852;
 8001e60:	4876      	ldr	r0, [pc, #472]	; (800203c <main+0xc34>)
 8001e62:	f004 fb52 	bl	800650a <atof>
 8001e66:	a36e      	add	r3, pc, #440	; (adr r3, 8002020 <main+0xc18>)
 8001e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e6c:	f7fe fb34 	bl	80004d8 <__aeabi_dmul>
 8001e70:	4602      	mov	r2, r0
 8001e72:	460b      	mov	r3, r1
 8001e74:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
				}

				HAL_UART_Transmit(&huart1, (uint8_t*) groundSpeed, n9 + 1, 500);
 8001e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	3301      	adds	r3, #1
 8001e80:	b29a      	uxth	r2, r3
 8001e82:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001e86:	496d      	ldr	r1, [pc, #436]	; (800203c <main+0xc34>)
 8001e88:	486d      	ldr	r0, [pc, #436]	; (8002040 <main+0xc38>)
 8001e8a:	f002 f8de 	bl	800404a <HAL_UART_Transmit>

				printf("\r\n");
 8001e8e:	486d      	ldr	r0, [pc, #436]	; (8002044 <main+0xc3c>)
 8001e90:	f005 fa72 	bl	8007378 <puts>

				if ((f_latitude1 == 0) && (f_longitude1 == 0)) {
 8001e94:	4b6c      	ldr	r3, [pc, #432]	; (8002048 <main+0xc40>)
 8001e96:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e9a:	f04f 0200 	mov.w	r2, #0
 8001e9e:	f04f 0300 	mov.w	r3, #0
 8001ea2:	f7fe fd81 	bl	80009a8 <__aeabi_dcmpeq>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d015      	beq.n	8001ed8 <main+0xad0>
 8001eac:	4b67      	ldr	r3, [pc, #412]	; (800204c <main+0xc44>)
 8001eae:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001eb2:	f04f 0200 	mov.w	r2, #0
 8001eb6:	f04f 0300 	mov.w	r3, #0
 8001eba:	f7fe fd75 	bl	80009a8 <__aeabi_dcmpeq>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d009      	beq.n	8001ed8 <main+0xad0>
					f_latitude1 = f_latitude2;
 8001ec4:	4960      	ldr	r1, [pc, #384]	; (8002048 <main+0xc40>)
 8001ec6:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8001eca:	e9c1 2300 	strd	r2, r3, [r1]
					f_longitude1 = f_longitude2;
 8001ece:	495f      	ldr	r1, [pc, #380]	; (800204c <main+0xc44>)
 8001ed0:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 8001ed4:	e9c1 2300 	strd	r2, r3, [r1]
				}

				if (time_interval >= 0.500 && f_latitude1 > 0) {
 8001ed8:	f04f 0200 	mov.w	r2, #0
 8001edc:	4b5c      	ldr	r3, [pc, #368]	; (8002050 <main+0xc48>)
 8001ede:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 8001ee2:	f7fe fd7f 	bl	80009e4 <__aeabi_dcmpge>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d05c      	beq.n	8001fa6 <main+0xb9e>
 8001eec:	4b56      	ldr	r3, [pc, #344]	; (8002048 <main+0xc40>)
 8001eee:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ef2:	f04f 0200 	mov.w	r2, #0
 8001ef6:	f04f 0300 	mov.w	r3, #0
 8001efa:	f7fe fd7d 	bl	80009f8 <__aeabi_dcmpgt>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d050      	beq.n	8001fa6 <main+0xb9e>

					distance = calc_distance(f_latitude1, f_longitude1,
 8001f04:	4b50      	ldr	r3, [pc, #320]	; (8002048 <main+0xc40>)
 8001f06:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f0a:	4b50      	ldr	r3, [pc, #320]	; (800204c <main+0xc44>)
 8001f0c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001f10:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 8001f14:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001f18:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8001f1c:	e9cd 2300 	strd	r2, r3, [sp]
 8001f20:	4622      	mov	r2, r4
 8001f22:	462b      	mov	r3, r5
 8001f24:	f7ff f978 	bl	8001218 <calc_distance>
 8001f28:	e9c7 0158 	strd	r0, r1, [r7, #352]	; 0x160
							f_latitude2, f_longitude2);

					printf("distance : %.7f\r\n", distance);
 8001f2c:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 8001f30:	4848      	ldr	r0, [pc, #288]	; (8002054 <main+0xc4c>)
 8001f32:	f005 f99b 	bl	800726c <iprintf>

					f_latitude1 = f_latitude2;
 8001f36:	4944      	ldr	r1, [pc, #272]	; (8002048 <main+0xc40>)
 8001f38:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8001f3c:	e9c1 2300 	strd	r2, r3, [r1]
					f_longitude1 = f_longitude2;
 8001f40:	4942      	ldr	r1, [pc, #264]	; (800204c <main+0xc44>)
 8001f42:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 8001f46:	e9c1 2300 	strd	r2, r3, [r1]
					if (distance == 0) {
 8001f4a:	f04f 0200 	mov.w	r2, #0
 8001f4e:	f04f 0300 	mov.w	r3, #0
 8001f52:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 8001f56:	f7fe fd27 	bl	80009a8 <__aeabi_dcmpeq>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d006      	beq.n	8001f6e <main+0xb66>
						speed = 0.0;
 8001f60:	f04f 0200 	mov.w	r2, #0
 8001f64:	f04f 0300 	mov.w	r3, #0
 8001f68:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
 8001f6c:	e01b      	b.n	8001fa6 <main+0xb9e>
					} else {
						speed = (distance * 0.001 * 3600.0) / time_interval;
 8001f6e:	a32e      	add	r3, pc, #184	; (adr r3, 8002028 <main+0xc20>)
 8001f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f74:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 8001f78:	f7fe faae 	bl	80004d8 <__aeabi_dmul>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	460b      	mov	r3, r1
 8001f80:	4610      	mov	r0, r2
 8001f82:	4619      	mov	r1, r3
 8001f84:	a32a      	add	r3, pc, #168	; (adr r3, 8002030 <main+0xc28>)
 8001f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f8a:	f7fe faa5 	bl	80004d8 <__aeabi_dmul>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	460b      	mov	r3, r1
 8001f92:	4610      	mov	r0, r2
 8001f94:	4619      	mov	r1, r3
 8001f96:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 8001f9a:	f7fe fbc7 	bl	800072c <__aeabi_ddiv>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
					}

				}
				printf("speed : %.7f\r\n", speed);
 8001fa6:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8001faa:	482b      	ldr	r0, [pc, #172]	; (8002058 <main+0xc50>)
 8001fac:	f005 f95e 	bl	800726c <iprintf>
				printf("ground_speed : %.7f\r\n", ground_speed);
 8001fb0:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8001fb4:	4829      	ldr	r0, [pc, #164]	; (800205c <main+0xc54>)
 8001fb6:	f005 f959 	bl	800726c <iprintf>

			}

		}
		memset(sentence, 0, sizeof(sentence));
 8001fba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	4827      	ldr	r0, [pc, #156]	; (8002060 <main+0xc58>)
 8001fc2:	f004 fadd 	bl	8006580 <memset>

		memset(type, 0, sizeof(type));
 8001fc6:	2210      	movs	r2, #16
 8001fc8:	2100      	movs	r1, #0
 8001fca:	4826      	ldr	r0, [pc, #152]	; (8002064 <main+0xc5c>)
 8001fcc:	f004 fad8 	bl	8006580 <memset>
		memset(time, 0, sizeof(time));
 8001fd0:	2210      	movs	r2, #16
 8001fd2:	2100      	movs	r1, #0
 8001fd4:	4824      	ldr	r0, [pc, #144]	; (8002068 <main+0xc60>)
 8001fd6:	f004 fad3 	bl	8006580 <memset>
		memset(latitude, 0, sizeof(latitude));
 8001fda:	2210      	movs	r2, #16
 8001fdc:	2100      	movs	r1, #0
 8001fde:	4823      	ldr	r0, [pc, #140]	; (800206c <main+0xc64>)
 8001fe0:	f004 face 	bl	8006580 <memset>
		memset(NS, 0, sizeof(NS));
 8001fe4:	2204      	movs	r2, #4
 8001fe6:	2100      	movs	r1, #0
 8001fe8:	4821      	ldr	r0, [pc, #132]	; (8002070 <main+0xc68>)
 8001fea:	f004 fac9 	bl	8006580 <memset>
		memset(longitude, 0, sizeof(longitude));
 8001fee:	2210      	movs	r2, #16
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	4820      	ldr	r0, [pc, #128]	; (8002074 <main+0xc6c>)
 8001ff4:	f004 fac4 	bl	8006580 <memset>
		memset(EW, 0, sizeof(EW));
 8001ff8:	2204      	movs	r2, #4
 8001ffa:	2100      	movs	r1, #0
 8001ffc:	481e      	ldr	r0, [pc, #120]	; (8002078 <main+0xc70>)
 8001ffe:	f004 fabf 	bl	8006580 <memset>
		memset(groundSpeed, 0, sizeof(groundSpeed));
 8002002:	2210      	movs	r2, #16
 8002004:	2100      	movs	r1, #0
 8002006:	480d      	ldr	r0, [pc, #52]	; (800203c <main+0xc34>)
 8002008:	f004 faba 	bl	8006580 <memset>

//		}

		memset(buff, 0, sizeof(buff));
 800200c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002010:	2100      	movs	r1, #0
 8002012:	481a      	ldr	r0, [pc, #104]	; (800207c <main+0xc74>)
 8002014:	f004 fab4 	bl	8006580 <memset>
	while (1) {
 8002018:	f7ff baa1 	b.w	800155e <main+0x156>
 800201c:	f3af 8000 	nop.w
 8002020:	c083126f 	.word	0xc083126f
 8002024:	3ffda1ca 	.word	0x3ffda1ca
 8002028:	d2f1a9fc 	.word	0xd2f1a9fc
 800202c:	3f50624d 	.word	0x3f50624d
 8002030:	00000000 	.word	0x00000000
 8002034:	40ac2000 	.word	0x40ac2000
 8002038:	0800c448 	.word	0x0800c448
 800203c:	20000828 	.word	0x20000828
 8002040:	20000254 	.word	0x20000254
 8002044:	0800c45c 	.word	0x0800c45c
 8002048:	200008d8 	.word	0x200008d8
 800204c:	200008e0 	.word	0x200008e0
 8002050:	3fe00000 	.word	0x3fe00000
 8002054:	0800c4c8 	.word	0x0800c4c8
 8002058:	0800c4dc 	.word	0x0800c4dc
 800205c:	0800c4ec 	.word	0x0800c4ec
 8002060:	200006dc 	.word	0x200006dc
 8002064:	200007dc 	.word	0x200007dc
 8002068:	200007ec 	.word	0x200007ec
 800206c:	20000800 	.word	0x20000800
 8002070:	20000810 	.word	0x20000810
 8002074:	20000814 	.word	0x20000814
 8002078:	20000824 	.word	0x20000824
 800207c:	200002dc 	.word	0x200002dc

08002080 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002080:	b580      	push	{r7, lr}
 8002082:	b090      	sub	sp, #64	; 0x40
 8002084:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002086:	f107 0318 	add.w	r3, r7, #24
 800208a:	2228      	movs	r2, #40	; 0x28
 800208c:	2100      	movs	r1, #0
 800208e:	4618      	mov	r0, r3
 8002090:	f004 fa76 	bl	8006580 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002094:	1d3b      	adds	r3, r7, #4
 8002096:	2200      	movs	r2, #0
 8002098:	601a      	str	r2, [r3, #0]
 800209a:	605a      	str	r2, [r3, #4]
 800209c:	609a      	str	r2, [r3, #8]
 800209e:	60da      	str	r2, [r3, #12]
 80020a0:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80020a2:	2301      	movs	r3, #1
 80020a4:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80020a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020aa:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80020ac:	2300      	movs	r3, #0
 80020ae:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020b0:	2301      	movs	r3, #1
 80020b2:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020b4:	2302      	movs	r3, #2
 80020b6:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80020b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020bc:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80020be:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80020c2:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80020c4:	f107 0318 	add.w	r3, r7, #24
 80020c8:	4618      	mov	r0, r3
 80020ca:	f001 f8f1 	bl	80032b0 <HAL_RCC_OscConfig>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <SystemClock_Config+0x58>
		Error_Handler();
 80020d4:	f000 f942 	bl	800235c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80020d8:	230f      	movs	r3, #15
 80020da:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020dc:	2302      	movs	r3, #2
 80020de:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020e0:	2300      	movs	r3, #0
 80020e2:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80020e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020e8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020ea:	2300      	movs	r3, #0
 80020ec:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80020ee:	1d3b      	adds	r3, r7, #4
 80020f0:	2102      	movs	r1, #2
 80020f2:	4618      	mov	r0, r3
 80020f4:	f001 fb5e 	bl	80037b4 <HAL_RCC_ClockConfig>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <SystemClock_Config+0x82>
		Error_Handler();
 80020fe:	f000 f92d 	bl	800235c <Error_Handler>
	}
}
 8002102:	bf00      	nop
 8002104:	3740      	adds	r7, #64	; 0x40
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <MX_NVIC_Init>:

/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void) {
 800210a:	b580      	push	{r7, lr}
 800210c:	af00      	add	r7, sp, #0
	/* USART2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800210e:	2200      	movs	r2, #0
 8002110:	2100      	movs	r1, #0
 8002112:	2026      	movs	r0, #38	; 0x26
 8002114:	f000 fe25 	bl	8002d62 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002118:	2026      	movs	r0, #38	; 0x26
 800211a:	f000 fe3e 	bl	8002d9a <HAL_NVIC_EnableIRQ>
	/* EXTI0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800211e:	2200      	movs	r2, #0
 8002120:	2100      	movs	r1, #0
 8002122:	2006      	movs	r0, #6
 8002124:	f000 fe1d 	bl	8002d62 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002128:	2006      	movs	r0, #6
 800212a:	f000 fe36 	bl	8002d9a <HAL_NVIC_EnableIRQ>
}
 800212e:	bf00      	nop
 8002130:	bd80      	pop	{r7, pc}
	...

08002134 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8002138:	4b17      	ldr	r3, [pc, #92]	; (8002198 <MX_SPI1_Init+0x64>)
 800213a:	4a18      	ldr	r2, [pc, #96]	; (800219c <MX_SPI1_Init+0x68>)
 800213c:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800213e:	4b16      	ldr	r3, [pc, #88]	; (8002198 <MX_SPI1_Init+0x64>)
 8002140:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002144:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002146:	4b14      	ldr	r3, [pc, #80]	; (8002198 <MX_SPI1_Init+0x64>)
 8002148:	2200      	movs	r2, #0
 800214a:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800214c:	4b12      	ldr	r3, [pc, #72]	; (8002198 <MX_SPI1_Init+0x64>)
 800214e:	2200      	movs	r2, #0
 8002150:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002152:	4b11      	ldr	r3, [pc, #68]	; (8002198 <MX_SPI1_Init+0x64>)
 8002154:	2200      	movs	r2, #0
 8002156:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002158:	4b0f      	ldr	r3, [pc, #60]	; (8002198 <MX_SPI1_Init+0x64>)
 800215a:	2200      	movs	r2, #0
 800215c:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800215e:	4b0e      	ldr	r3, [pc, #56]	; (8002198 <MX_SPI1_Init+0x64>)
 8002160:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002164:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002166:	4b0c      	ldr	r3, [pc, #48]	; (8002198 <MX_SPI1_Init+0x64>)
 8002168:	2208      	movs	r2, #8
 800216a:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800216c:	4b0a      	ldr	r3, [pc, #40]	; (8002198 <MX_SPI1_Init+0x64>)
 800216e:	2200      	movs	r2, #0
 8002170:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002172:	4b09      	ldr	r3, [pc, #36]	; (8002198 <MX_SPI1_Init+0x64>)
 8002174:	2200      	movs	r2, #0
 8002176:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002178:	4b07      	ldr	r3, [pc, #28]	; (8002198 <MX_SPI1_Init+0x64>)
 800217a:	2200      	movs	r2, #0
 800217c:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 800217e:	4b06      	ldr	r3, [pc, #24]	; (8002198 <MX_SPI1_Init+0x64>)
 8002180:	220a      	movs	r2, #10
 8002182:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8002184:	4804      	ldr	r0, [pc, #16]	; (8002198 <MX_SPI1_Init+0x64>)
 8002186:	f001 fcad 	bl	8003ae4 <HAL_SPI_Init>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <MX_SPI1_Init+0x60>
		Error_Handler();
 8002190:	f000 f8e4 	bl	800235c <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8002194:	bf00      	nop
 8002196:	bd80      	pop	{r7, pc}
 8002198:	200001fc 	.word	0x200001fc
 800219c:	40013000 	.word	0x40013000

080021a0 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80021a4:	4b11      	ldr	r3, [pc, #68]	; (80021ec <MX_USART1_UART_Init+0x4c>)
 80021a6:	4a12      	ldr	r2, [pc, #72]	; (80021f0 <MX_USART1_UART_Init+0x50>)
 80021a8:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 80021aa:	4b10      	ldr	r3, [pc, #64]	; (80021ec <MX_USART1_UART_Init+0x4c>)
 80021ac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80021b0:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80021b2:	4b0e      	ldr	r3, [pc, #56]	; (80021ec <MX_USART1_UART_Init+0x4c>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80021b8:	4b0c      	ldr	r3, [pc, #48]	; (80021ec <MX_USART1_UART_Init+0x4c>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80021be:	4b0b      	ldr	r3, [pc, #44]	; (80021ec <MX_USART1_UART_Init+0x4c>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80021c4:	4b09      	ldr	r3, [pc, #36]	; (80021ec <MX_USART1_UART_Init+0x4c>)
 80021c6:	220c      	movs	r2, #12
 80021c8:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021ca:	4b08      	ldr	r3, [pc, #32]	; (80021ec <MX_USART1_UART_Init+0x4c>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021d0:	4b06      	ldr	r3, [pc, #24]	; (80021ec <MX_USART1_UART_Init+0x4c>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80021d6:	4805      	ldr	r0, [pc, #20]	; (80021ec <MX_USART1_UART_Init+0x4c>)
 80021d8:	f001 feea 	bl	8003fb0 <HAL_UART_Init>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 80021e2:	f000 f8bb 	bl	800235c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80021e6:	bf00      	nop
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	20000254 	.word	0x20000254
 80021f0:	40013800 	.word	0x40013800

080021f4 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80021f8:	4b11      	ldr	r3, [pc, #68]	; (8002240 <MX_USART2_UART_Init+0x4c>)
 80021fa:	4a12      	ldr	r2, [pc, #72]	; (8002244 <MX_USART2_UART_Init+0x50>)
 80021fc:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 80021fe:	4b10      	ldr	r3, [pc, #64]	; (8002240 <MX_USART2_UART_Init+0x4c>)
 8002200:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002204:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002206:	4b0e      	ldr	r3, [pc, #56]	; (8002240 <MX_USART2_UART_Init+0x4c>)
 8002208:	2200      	movs	r2, #0
 800220a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800220c:	4b0c      	ldr	r3, [pc, #48]	; (8002240 <MX_USART2_UART_Init+0x4c>)
 800220e:	2200      	movs	r2, #0
 8002210:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8002212:	4b0b      	ldr	r3, [pc, #44]	; (8002240 <MX_USART2_UART_Init+0x4c>)
 8002214:	2200      	movs	r2, #0
 8002216:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002218:	4b09      	ldr	r3, [pc, #36]	; (8002240 <MX_USART2_UART_Init+0x4c>)
 800221a:	220c      	movs	r2, #12
 800221c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800221e:	4b08      	ldr	r3, [pc, #32]	; (8002240 <MX_USART2_UART_Init+0x4c>)
 8002220:	2200      	movs	r2, #0
 8002222:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002224:	4b06      	ldr	r3, [pc, #24]	; (8002240 <MX_USART2_UART_Init+0x4c>)
 8002226:	2200      	movs	r2, #0
 8002228:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800222a:	4805      	ldr	r0, [pc, #20]	; (8002240 <MX_USART2_UART_Init+0x4c>)
 800222c:	f001 fec0 	bl	8003fb0 <HAL_UART_Init>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8002236:	f000 f891 	bl	800235c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800223a:	bf00      	nop
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	20000298 	.word	0x20000298
 8002244:	40004400 	.word	0x40004400

08002248 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002248:	b580      	push	{r7, lr}
 800224a:	b088      	sub	sp, #32
 800224c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800224e:	f107 0310 	add.w	r3, r7, #16
 8002252:	2200      	movs	r2, #0
 8002254:	601a      	str	r2, [r3, #0]
 8002256:	605a      	str	r2, [r3, #4]
 8002258:	609a      	str	r2, [r3, #8]
 800225a:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800225c:	4b2c      	ldr	r3, [pc, #176]	; (8002310 <MX_GPIO_Init+0xc8>)
 800225e:	699b      	ldr	r3, [r3, #24]
 8002260:	4a2b      	ldr	r2, [pc, #172]	; (8002310 <MX_GPIO_Init+0xc8>)
 8002262:	f043 0320 	orr.w	r3, r3, #32
 8002266:	6193      	str	r3, [r2, #24]
 8002268:	4b29      	ldr	r3, [pc, #164]	; (8002310 <MX_GPIO_Init+0xc8>)
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	f003 0320 	and.w	r3, r3, #32
 8002270:	60fb      	str	r3, [r7, #12]
 8002272:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002274:	4b26      	ldr	r3, [pc, #152]	; (8002310 <MX_GPIO_Init+0xc8>)
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	4a25      	ldr	r2, [pc, #148]	; (8002310 <MX_GPIO_Init+0xc8>)
 800227a:	f043 0304 	orr.w	r3, r3, #4
 800227e:	6193      	str	r3, [r2, #24]
 8002280:	4b23      	ldr	r3, [pc, #140]	; (8002310 <MX_GPIO_Init+0xc8>)
 8002282:	699b      	ldr	r3, [r3, #24]
 8002284:	f003 0304 	and.w	r3, r3, #4
 8002288:	60bb      	str	r3, [r7, #8]
 800228a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800228c:	4b20      	ldr	r3, [pc, #128]	; (8002310 <MX_GPIO_Init+0xc8>)
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	4a1f      	ldr	r2, [pc, #124]	; (8002310 <MX_GPIO_Init+0xc8>)
 8002292:	f043 0308 	orr.w	r3, r3, #8
 8002296:	6193      	str	r3, [r2, #24]
 8002298:	4b1d      	ldr	r3, [pc, #116]	; (8002310 <MX_GPIO_Init+0xc8>)
 800229a:	699b      	ldr	r3, [r3, #24]
 800229c:	f003 0308 	and.w	r3, r3, #8
 80022a0:	607b      	str	r3, [r7, #4]
 80022a2:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, OLED_RST_Pin | OLED_DC_Pin, GPIO_PIN_SET);
 80022a4:	2201      	movs	r2, #1
 80022a6:	2150      	movs	r1, #80	; 0x50
 80022a8:	481a      	ldr	r0, [pc, #104]	; (8002314 <MX_GPIO_Init+0xcc>)
 80022aa:	f000 ffd1 	bl	8003250 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_SET);
 80022ae:	2201      	movs	r2, #1
 80022b0:	2101      	movs	r1, #1
 80022b2:	4819      	ldr	r0, [pc, #100]	; (8002318 <MX_GPIO_Init+0xd0>)
 80022b4:	f000 ffcc 	bl	8003250 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : btn0_Pin */
	GPIO_InitStruct.Pin = btn0_Pin;
 80022b8:	2301      	movs	r3, #1
 80022ba:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80022bc:	4b17      	ldr	r3, [pc, #92]	; (800231c <MX_GPIO_Init+0xd4>)
 80022be:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022c0:	2301      	movs	r3, #1
 80022c2:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(btn0_GPIO_Port, &GPIO_InitStruct);
 80022c4:	f107 0310 	add.w	r3, r7, #16
 80022c8:	4619      	mov	r1, r3
 80022ca:	4812      	ldr	r0, [pc, #72]	; (8002314 <MX_GPIO_Init+0xcc>)
 80022cc:	f000 fe3c 	bl	8002f48 <HAL_GPIO_Init>

	/*Configure GPIO pins : OLED_RST_Pin OLED_DC_Pin */
	GPIO_InitStruct.Pin = OLED_RST_Pin | OLED_DC_Pin;
 80022d0:	2350      	movs	r3, #80	; 0x50
 80022d2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022d4:	2301      	movs	r3, #1
 80022d6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022d8:	2301      	movs	r3, #1
 80022da:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022dc:	2303      	movs	r3, #3
 80022de:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022e0:	f107 0310 	add.w	r3, r7, #16
 80022e4:	4619      	mov	r1, r3
 80022e6:	480b      	ldr	r0, [pc, #44]	; (8002314 <MX_GPIO_Init+0xcc>)
 80022e8:	f000 fe2e 	bl	8002f48 <HAL_GPIO_Init>

	/*Configure GPIO pin : OLED_CS_Pin */
	GPIO_InitStruct.Pin = OLED_CS_Pin;
 80022ec:	2301      	movs	r3, #1
 80022ee:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022f0:	2301      	movs	r3, #1
 80022f2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022f4:	2301      	movs	r3, #1
 80022f6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022f8:	2303      	movs	r3, #3
 80022fa:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(OLED_CS_GPIO_Port, &GPIO_InitStruct);
 80022fc:	f107 0310 	add.w	r3, r7, #16
 8002300:	4619      	mov	r1, r3
 8002302:	4805      	ldr	r0, [pc, #20]	; (8002318 <MX_GPIO_Init+0xd0>)
 8002304:	f000 fe20 	bl	8002f48 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8002308:	bf00      	nop
 800230a:	3720      	adds	r7, #32
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	40021000 	.word	0x40021000
 8002314:	40010800 	.word	0x40010800
 8002318:	40010c00 	.word	0x40010c00
 800231c:	10110000 	.word	0x10110000

08002320 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	4603      	mov	r3, r0
 8002328:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == btn0_Pin) {
 800232a:	88fb      	ldrh	r3, [r7, #6]
 800232c:	2b01      	cmp	r3, #1
 800232e:	d10e      	bne.n	800234e <HAL_GPIO_EXTI_Callback+0x2e>
		if (btnFlag == 0) {
 8002330:	4b09      	ldr	r3, [pc, #36]	; (8002358 <HAL_GPIO_EXTI_Callback+0x38>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d103      	bne.n	8002340 <HAL_GPIO_EXTI_Callback+0x20>
			btnFlag = 1;
 8002338:	4b07      	ldr	r3, [pc, #28]	; (8002358 <HAL_GPIO_EXTI_Callback+0x38>)
 800233a:	2201      	movs	r2, #1
 800233c:	601a      	str	r2, [r3, #0]
		} else if (btnFlag == 1) {
			btnFlag = 0;
		}

	}
}
 800233e:	e006      	b.n	800234e <HAL_GPIO_EXTI_Callback+0x2e>
		} else if (btnFlag == 1) {
 8002340:	4b05      	ldr	r3, [pc, #20]	; (8002358 <HAL_GPIO_EXTI_Callback+0x38>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2b01      	cmp	r3, #1
 8002346:	d102      	bne.n	800234e <HAL_GPIO_EXTI_Callback+0x2e>
			btnFlag = 0;
 8002348:	4b03      	ldr	r3, [pc, #12]	; (8002358 <HAL_GPIO_EXTI_Callback+0x38>)
 800234a:	2200      	movs	r2, #0
 800234c:	601a      	str	r2, [r3, #0]
}
 800234e:	bf00      	nop
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	bc80      	pop	{r7}
 8002356:	4770      	bx	lr
 8002358:	20000838 	.word	0x20000838

0800235c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002360:	b672      	cpsid	i
}
 8002362:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002364:	e7fe      	b.n	8002364 <Error_Handler+0x8>
	...

08002368 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002368:	b480      	push	{r7}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800236e:	4b15      	ldr	r3, [pc, #84]	; (80023c4 <HAL_MspInit+0x5c>)
 8002370:	699b      	ldr	r3, [r3, #24]
 8002372:	4a14      	ldr	r2, [pc, #80]	; (80023c4 <HAL_MspInit+0x5c>)
 8002374:	f043 0301 	orr.w	r3, r3, #1
 8002378:	6193      	str	r3, [r2, #24]
 800237a:	4b12      	ldr	r3, [pc, #72]	; (80023c4 <HAL_MspInit+0x5c>)
 800237c:	699b      	ldr	r3, [r3, #24]
 800237e:	f003 0301 	and.w	r3, r3, #1
 8002382:	60bb      	str	r3, [r7, #8]
 8002384:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002386:	4b0f      	ldr	r3, [pc, #60]	; (80023c4 <HAL_MspInit+0x5c>)
 8002388:	69db      	ldr	r3, [r3, #28]
 800238a:	4a0e      	ldr	r2, [pc, #56]	; (80023c4 <HAL_MspInit+0x5c>)
 800238c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002390:	61d3      	str	r3, [r2, #28]
 8002392:	4b0c      	ldr	r3, [pc, #48]	; (80023c4 <HAL_MspInit+0x5c>)
 8002394:	69db      	ldr	r3, [r3, #28]
 8002396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800239a:	607b      	str	r3, [r7, #4]
 800239c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800239e:	4b0a      	ldr	r3, [pc, #40]	; (80023c8 <HAL_MspInit+0x60>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	60fb      	str	r3, [r7, #12]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80023aa:	60fb      	str	r3, [r7, #12]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80023b2:	60fb      	str	r3, [r7, #12]
 80023b4:	4a04      	ldr	r2, [pc, #16]	; (80023c8 <HAL_MspInit+0x60>)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023ba:	bf00      	nop
 80023bc:	3714      	adds	r7, #20
 80023be:	46bd      	mov	sp, r7
 80023c0:	bc80      	pop	{r7}
 80023c2:	4770      	bx	lr
 80023c4:	40021000 	.word	0x40021000
 80023c8:	40010000 	.word	0x40010000

080023cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b088      	sub	sp, #32
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d4:	f107 0310 	add.w	r3, r7, #16
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]
 80023dc:	605a      	str	r2, [r3, #4]
 80023de:	609a      	str	r2, [r3, #8]
 80023e0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a15      	ldr	r2, [pc, #84]	; (800243c <HAL_SPI_MspInit+0x70>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d123      	bne.n	8002434 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80023ec:	4b14      	ldr	r3, [pc, #80]	; (8002440 <HAL_SPI_MspInit+0x74>)
 80023ee:	699b      	ldr	r3, [r3, #24]
 80023f0:	4a13      	ldr	r2, [pc, #76]	; (8002440 <HAL_SPI_MspInit+0x74>)
 80023f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80023f6:	6193      	str	r3, [r2, #24]
 80023f8:	4b11      	ldr	r3, [pc, #68]	; (8002440 <HAL_SPI_MspInit+0x74>)
 80023fa:	699b      	ldr	r3, [r3, #24]
 80023fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002400:	60fb      	str	r3, [r7, #12]
 8002402:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002404:	4b0e      	ldr	r3, [pc, #56]	; (8002440 <HAL_SPI_MspInit+0x74>)
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	4a0d      	ldr	r2, [pc, #52]	; (8002440 <HAL_SPI_MspInit+0x74>)
 800240a:	f043 0304 	orr.w	r3, r3, #4
 800240e:	6193      	str	r3, [r2, #24]
 8002410:	4b0b      	ldr	r3, [pc, #44]	; (8002440 <HAL_SPI_MspInit+0x74>)
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	f003 0304 	and.w	r3, r3, #4
 8002418:	60bb      	str	r3, [r7, #8]
 800241a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800241c:	23a0      	movs	r3, #160	; 0xa0
 800241e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002420:	2302      	movs	r3, #2
 8002422:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002424:	2303      	movs	r3, #3
 8002426:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002428:	f107 0310 	add.w	r3, r7, #16
 800242c:	4619      	mov	r1, r3
 800242e:	4805      	ldr	r0, [pc, #20]	; (8002444 <HAL_SPI_MspInit+0x78>)
 8002430:	f000 fd8a 	bl	8002f48 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002434:	bf00      	nop
 8002436:	3720      	adds	r7, #32
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	40013000 	.word	0x40013000
 8002440:	40021000 	.word	0x40021000
 8002444:	40010800 	.word	0x40010800

08002448 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b08a      	sub	sp, #40	; 0x28
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002450:	f107 0318 	add.w	r3, r7, #24
 8002454:	2200      	movs	r2, #0
 8002456:	601a      	str	r2, [r3, #0]
 8002458:	605a      	str	r2, [r3, #4]
 800245a:	609a      	str	r2, [r3, #8]
 800245c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a37      	ldr	r2, [pc, #220]	; (8002540 <HAL_UART_MspInit+0xf8>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d132      	bne.n	80024ce <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002468:	4b36      	ldr	r3, [pc, #216]	; (8002544 <HAL_UART_MspInit+0xfc>)
 800246a:	699b      	ldr	r3, [r3, #24]
 800246c:	4a35      	ldr	r2, [pc, #212]	; (8002544 <HAL_UART_MspInit+0xfc>)
 800246e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002472:	6193      	str	r3, [r2, #24]
 8002474:	4b33      	ldr	r3, [pc, #204]	; (8002544 <HAL_UART_MspInit+0xfc>)
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800247c:	617b      	str	r3, [r7, #20]
 800247e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002480:	4b30      	ldr	r3, [pc, #192]	; (8002544 <HAL_UART_MspInit+0xfc>)
 8002482:	699b      	ldr	r3, [r3, #24]
 8002484:	4a2f      	ldr	r2, [pc, #188]	; (8002544 <HAL_UART_MspInit+0xfc>)
 8002486:	f043 0304 	orr.w	r3, r3, #4
 800248a:	6193      	str	r3, [r2, #24]
 800248c:	4b2d      	ldr	r3, [pc, #180]	; (8002544 <HAL_UART_MspInit+0xfc>)
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	f003 0304 	and.w	r3, r3, #4
 8002494:	613b      	str	r3, [r7, #16]
 8002496:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002498:	f44f 7300 	mov.w	r3, #512	; 0x200
 800249c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800249e:	2302      	movs	r3, #2
 80024a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024a2:	2303      	movs	r3, #3
 80024a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024a6:	f107 0318 	add.w	r3, r7, #24
 80024aa:	4619      	mov	r1, r3
 80024ac:	4826      	ldr	r0, [pc, #152]	; (8002548 <HAL_UART_MspInit+0x100>)
 80024ae:	f000 fd4b 	bl	8002f48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80024b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024b8:	2300      	movs	r3, #0
 80024ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024bc:	2300      	movs	r3, #0
 80024be:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024c0:	f107 0318 	add.w	r3, r7, #24
 80024c4:	4619      	mov	r1, r3
 80024c6:	4820      	ldr	r0, [pc, #128]	; (8002548 <HAL_UART_MspInit+0x100>)
 80024c8:	f000 fd3e 	bl	8002f48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80024cc:	e034      	b.n	8002538 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a1e      	ldr	r2, [pc, #120]	; (800254c <HAL_UART_MspInit+0x104>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d12f      	bne.n	8002538 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80024d8:	4b1a      	ldr	r3, [pc, #104]	; (8002544 <HAL_UART_MspInit+0xfc>)
 80024da:	69db      	ldr	r3, [r3, #28]
 80024dc:	4a19      	ldr	r2, [pc, #100]	; (8002544 <HAL_UART_MspInit+0xfc>)
 80024de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024e2:	61d3      	str	r3, [r2, #28]
 80024e4:	4b17      	ldr	r3, [pc, #92]	; (8002544 <HAL_UART_MspInit+0xfc>)
 80024e6:	69db      	ldr	r3, [r3, #28]
 80024e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ec:	60fb      	str	r3, [r7, #12]
 80024ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024f0:	4b14      	ldr	r3, [pc, #80]	; (8002544 <HAL_UART_MspInit+0xfc>)
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	4a13      	ldr	r2, [pc, #76]	; (8002544 <HAL_UART_MspInit+0xfc>)
 80024f6:	f043 0304 	orr.w	r3, r3, #4
 80024fa:	6193      	str	r3, [r2, #24]
 80024fc:	4b11      	ldr	r3, [pc, #68]	; (8002544 <HAL_UART_MspInit+0xfc>)
 80024fe:	699b      	ldr	r3, [r3, #24]
 8002500:	f003 0304 	and.w	r3, r3, #4
 8002504:	60bb      	str	r3, [r7, #8]
 8002506:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002508:	2304      	movs	r3, #4
 800250a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800250c:	2302      	movs	r3, #2
 800250e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002510:	2303      	movs	r3, #3
 8002512:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002514:	f107 0318 	add.w	r3, r7, #24
 8002518:	4619      	mov	r1, r3
 800251a:	480b      	ldr	r0, [pc, #44]	; (8002548 <HAL_UART_MspInit+0x100>)
 800251c:	f000 fd14 	bl	8002f48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002520:	2308      	movs	r3, #8
 8002522:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002524:	2300      	movs	r3, #0
 8002526:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002528:	2300      	movs	r3, #0
 800252a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800252c:	f107 0318 	add.w	r3, r7, #24
 8002530:	4619      	mov	r1, r3
 8002532:	4805      	ldr	r0, [pc, #20]	; (8002548 <HAL_UART_MspInit+0x100>)
 8002534:	f000 fd08 	bl	8002f48 <HAL_GPIO_Init>
}
 8002538:	bf00      	nop
 800253a:	3728      	adds	r7, #40	; 0x28
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	40013800 	.word	0x40013800
 8002544:	40021000 	.word	0x40021000
 8002548:	40010800 	.word	0x40010800
 800254c:	40004400 	.word	0x40004400

08002550 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002554:	e7fe      	b.n	8002554 <NMI_Handler+0x4>

08002556 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002556:	b480      	push	{r7}
 8002558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800255a:	e7fe      	b.n	800255a <HardFault_Handler+0x4>

0800255c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002560:	e7fe      	b.n	8002560 <MemManage_Handler+0x4>

08002562 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002562:	b480      	push	{r7}
 8002564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002566:	e7fe      	b.n	8002566 <BusFault_Handler+0x4>

08002568 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800256c:	e7fe      	b.n	800256c <UsageFault_Handler+0x4>

0800256e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800256e:	b480      	push	{r7}
 8002570:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002572:	bf00      	nop
 8002574:	46bd      	mov	sp, r7
 8002576:	bc80      	pop	{r7}
 8002578:	4770      	bx	lr

0800257a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800257a:	b480      	push	{r7}
 800257c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800257e:	bf00      	nop
 8002580:	46bd      	mov	sp, r7
 8002582:	bc80      	pop	{r7}
 8002584:	4770      	bx	lr

08002586 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002586:	b480      	push	{r7}
 8002588:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800258a:	bf00      	nop
 800258c:	46bd      	mov	sp, r7
 800258e:	bc80      	pop	{r7}
 8002590:	4770      	bx	lr

08002592 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002592:	b580      	push	{r7, lr}
 8002594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002596:	f000 facd 	bl	8002b34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 800259a:	f000 fc18 	bl	8002dce <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 800259e:	bf00      	nop
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(btn0_Pin);
 80025a6:	2001      	movs	r0, #1
 80025a8:	f000 fe6a 	bl	8003280 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80025ac:	bf00      	nop
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	Uart_isr(&huart2);
 80025b4:	4803      	ldr	r0, [pc, #12]	; (80025c4 <USART2_IRQHandler+0x14>)
 80025b6:	f000 fa29 	bl	8002a0c <Uart_isr>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80025ba:	4802      	ldr	r0, [pc, #8]	; (80025c4 <USART2_IRQHandler+0x14>)
 80025bc:	f001 fdd8 	bl	8004170 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80025c0:	bf00      	nop
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	20000298 	.word	0x20000298

080025c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  return 1;
 80025cc:	2301      	movs	r3, #1
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bc80      	pop	{r7}
 80025d4:	4770      	bx	lr

080025d6 <_kill>:

int _kill(int pid, int sig)
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b082      	sub	sp, #8
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
 80025de:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80025e0:	f003 ff96 	bl	8006510 <__errno>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2216      	movs	r2, #22
 80025e8:	601a      	str	r2, [r3, #0]
  return -1;
 80025ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3708      	adds	r7, #8
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <_exit>:

void _exit (int status)
{
 80025f6:	b580      	push	{r7, lr}
 80025f8:	b082      	sub	sp, #8
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80025fe:	f04f 31ff 	mov.w	r1, #4294967295
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f7ff ffe7 	bl	80025d6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002608:	e7fe      	b.n	8002608 <_exit+0x12>

0800260a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800260a:	b580      	push	{r7, lr}
 800260c:	b086      	sub	sp, #24
 800260e:	af00      	add	r7, sp, #0
 8002610:	60f8      	str	r0, [r7, #12]
 8002612:	60b9      	str	r1, [r7, #8]
 8002614:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002616:	2300      	movs	r3, #0
 8002618:	617b      	str	r3, [r7, #20]
 800261a:	e00a      	b.n	8002632 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800261c:	f3af 8000 	nop.w
 8002620:	4601      	mov	r1, r0
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	1c5a      	adds	r2, r3, #1
 8002626:	60ba      	str	r2, [r7, #8]
 8002628:	b2ca      	uxtb	r2, r1
 800262a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	3301      	adds	r3, #1
 8002630:	617b      	str	r3, [r7, #20]
 8002632:	697a      	ldr	r2, [r7, #20]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	429a      	cmp	r2, r3
 8002638:	dbf0      	blt.n	800261c <_read+0x12>
  }

  return len;
 800263a:	687b      	ldr	r3, [r7, #4]
}
 800263c:	4618      	mov	r0, r3
 800263e:	3718      	adds	r7, #24
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b086      	sub	sp, #24
 8002648:	af00      	add	r7, sp, #0
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	60b9      	str	r1, [r7, #8]
 800264e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002650:	2300      	movs	r3, #0
 8002652:	617b      	str	r3, [r7, #20]
 8002654:	e009      	b.n	800266a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	1c5a      	adds	r2, r3, #1
 800265a:	60ba      	str	r2, [r7, #8]
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	4618      	mov	r0, r3
 8002660:	f7fe fda4 	bl	80011ac <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	3301      	adds	r3, #1
 8002668:	617b      	str	r3, [r7, #20]
 800266a:	697a      	ldr	r2, [r7, #20]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	429a      	cmp	r2, r3
 8002670:	dbf1      	blt.n	8002656 <_write+0x12>
  }
  return len;
 8002672:	687b      	ldr	r3, [r7, #4]
}
 8002674:	4618      	mov	r0, r3
 8002676:	3718      	adds	r7, #24
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <_close>:

int _close(int file)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002684:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002688:	4618      	mov	r0, r3
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	bc80      	pop	{r7}
 8002690:	4770      	bx	lr

08002692 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002692:	b480      	push	{r7}
 8002694:	b083      	sub	sp, #12
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
 800269a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80026a2:	605a      	str	r2, [r3, #4]
  return 0;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bc80      	pop	{r7}
 80026ae:	4770      	bx	lr

080026b0 <_isatty>:

int _isatty(int file)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80026b8:	2301      	movs	r3, #1
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	370c      	adds	r7, #12
 80026be:	46bd      	mov	sp, r7
 80026c0:	bc80      	pop	{r7}
 80026c2:	4770      	bx	lr

080026c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b085      	sub	sp, #20
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3714      	adds	r7, #20
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bc80      	pop	{r7}
 80026da:	4770      	bx	lr

080026dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b086      	sub	sp, #24
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026e4:	4a14      	ldr	r2, [pc, #80]	; (8002738 <_sbrk+0x5c>)
 80026e6:	4b15      	ldr	r3, [pc, #84]	; (800273c <_sbrk+0x60>)
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026f0:	4b13      	ldr	r3, [pc, #76]	; (8002740 <_sbrk+0x64>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d102      	bne.n	80026fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026f8:	4b11      	ldr	r3, [pc, #68]	; (8002740 <_sbrk+0x64>)
 80026fa:	4a12      	ldr	r2, [pc, #72]	; (8002744 <_sbrk+0x68>)
 80026fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026fe:	4b10      	ldr	r3, [pc, #64]	; (8002740 <_sbrk+0x64>)
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4413      	add	r3, r2
 8002706:	693a      	ldr	r2, [r7, #16]
 8002708:	429a      	cmp	r2, r3
 800270a:	d207      	bcs.n	800271c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800270c:	f003 ff00 	bl	8006510 <__errno>
 8002710:	4603      	mov	r3, r0
 8002712:	220c      	movs	r2, #12
 8002714:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002716:	f04f 33ff 	mov.w	r3, #4294967295
 800271a:	e009      	b.n	8002730 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800271c:	4b08      	ldr	r3, [pc, #32]	; (8002740 <_sbrk+0x64>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002722:	4b07      	ldr	r3, [pc, #28]	; (8002740 <_sbrk+0x64>)
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4413      	add	r3, r2
 800272a:	4a05      	ldr	r2, [pc, #20]	; (8002740 <_sbrk+0x64>)
 800272c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800272e:	68fb      	ldr	r3, [r7, #12]
}
 8002730:	4618      	mov	r0, r3
 8002732:	3718      	adds	r7, #24
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	20005000 	.word	0x20005000
 800273c:	00000400 	.word	0x00000400
 8002740:	200008e8 	.word	0x200008e8
 8002744:	20001108 	.word	0x20001108

08002748 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800274c:	bf00      	nop
 800274e:	46bd      	mov	sp, r7
 8002750:	bc80      	pop	{r7}
 8002752:	4770      	bx	lr

08002754 <u8x8_stm32_gpio_and_delay>:
#define TX_TIMEOUT		100

extern SPI_HandleTypeDef hspi1;

uint8_t u8x8_stm32_gpio_and_delay(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	607b      	str	r3, [r7, #4]
 800275e:	460b      	mov	r3, r1
 8002760:	72fb      	strb	r3, [r7, #11]
 8002762:	4613      	mov	r3, r2
 8002764:	72bb      	strb	r3, [r7, #10]
	/* STM32 supports HW SPI, Remove unused cases like U8X8_MSG_DELAY_XXX & U8X8_MSG_GPIO_XXX */
	switch(msg)
 8002766:	7afb      	ldrb	r3, [r7, #11]
 8002768:	3b28      	subs	r3, #40	; 0x28
 800276a:	2b23      	cmp	r3, #35	; 0x23
 800276c:	d864      	bhi.n	8002838 <u8x8_stm32_gpio_and_delay+0xe4>
 800276e:	a201      	add	r2, pc, #4	; (adr r2, 8002774 <u8x8_stm32_gpio_and_delay+0x20>)
 8002770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002774:	08002839 	.word	0x08002839
 8002778:	08002805 	.word	0x08002805
 800277c:	08002839 	.word	0x08002839
 8002780:	08002839 	.word	0x08002839
 8002784:	08002839 	.word	0x08002839
 8002788:	08002839 	.word	0x08002839
 800278c:	08002839 	.word	0x08002839
 8002790:	08002839 	.word	0x08002839
 8002794:	08002839 	.word	0x08002839
 8002798:	08002839 	.word	0x08002839
 800279c:	08002839 	.word	0x08002839
 80027a0:	08002839 	.word	0x08002839
 80027a4:	08002839 	.word	0x08002839
 80027a8:	08002839 	.word	0x08002839
 80027ac:	08002839 	.word	0x08002839
 80027b0:	08002839 	.word	0x08002839
 80027b4:	08002839 	.word	0x08002839
 80027b8:	08002839 	.word	0x08002839
 80027bc:	08002839 	.word	0x08002839
 80027c0:	08002839 	.word	0x08002839
 80027c4:	08002839 	.word	0x08002839
 80027c8:	08002839 	.word	0x08002839
 80027cc:	08002839 	.word	0x08002839
 80027d0:	08002839 	.word	0x08002839
 80027d4:	08002839 	.word	0x08002839
 80027d8:	08002839 	.word	0x08002839
 80027dc:	08002839 	.word	0x08002839
 80027e0:	08002839 	.word	0x08002839
 80027e4:	08002839 	.word	0x08002839
 80027e8:	08002839 	.word	0x08002839
 80027ec:	08002839 	.word	0x08002839
 80027f0:	08002839 	.word	0x08002839
 80027f4:	08002839 	.word	0x08002839
 80027f8:	0800280f 	.word	0x0800280f
 80027fc:	0800281d 	.word	0x0800281d
 8002800:	0800282b 	.word	0x0800282b
	case U8X8_MSG_GPIO_AND_DELAY_INIT:
		/* Insert codes for initialization */
		break;
	case U8X8_MSG_DELAY_MILLI:
		/* ms Delay */
		HAL_Delay(arg_int);
 8002804:	7abb      	ldrb	r3, [r7, #10]
 8002806:	4618      	mov	r0, r3
 8002808:	f000 f9b0 	bl	8002b6c <HAL_Delay>
		break;
 800280c:	e014      	b.n	8002838 <u8x8_stm32_gpio_and_delay+0xe4>
	case U8X8_MSG_GPIO_CS:
		/* Insert codes for SS pin control */
		HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, arg_int);
 800280e:	7abb      	ldrb	r3, [r7, #10]
 8002810:	461a      	mov	r2, r3
 8002812:	2101      	movs	r1, #1
 8002814:	480b      	ldr	r0, [pc, #44]	; (8002844 <u8x8_stm32_gpio_and_delay+0xf0>)
 8002816:	f000 fd1b 	bl	8003250 <HAL_GPIO_WritePin>
		break;
 800281a:	e00d      	b.n	8002838 <u8x8_stm32_gpio_and_delay+0xe4>
	case U8X8_MSG_GPIO_DC:
		/* Insert codes for DC pin control */
		HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, arg_int);
 800281c:	7abb      	ldrb	r3, [r7, #10]
 800281e:	461a      	mov	r2, r3
 8002820:	2140      	movs	r1, #64	; 0x40
 8002822:	4809      	ldr	r0, [pc, #36]	; (8002848 <u8x8_stm32_gpio_and_delay+0xf4>)
 8002824:	f000 fd14 	bl	8003250 <HAL_GPIO_WritePin>
		break;
 8002828:	e006      	b.n	8002838 <u8x8_stm32_gpio_and_delay+0xe4>
	case U8X8_MSG_GPIO_RESET:
		/* Insert codes for RST pin control */
		HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, arg_int);
 800282a:	7abb      	ldrb	r3, [r7, #10]
 800282c:	461a      	mov	r2, r3
 800282e:	2110      	movs	r1, #16
 8002830:	4805      	ldr	r0, [pc, #20]	; (8002848 <u8x8_stm32_gpio_and_delay+0xf4>)
 8002832:	f000 fd0d 	bl	8003250 <HAL_GPIO_WritePin>
		break;
 8002836:	bf00      	nop
	}
	return 1;
 8002838:	2301      	movs	r3, #1
}
 800283a:	4618      	mov	r0, r3
 800283c:	3710      	adds	r7, #16
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	40010c00 	.word	0x40010c00
 8002848:	40010800 	.word	0x40010800

0800284c <u8x8_byte_stm32_hw_spi>:

uint8_t u8x8_byte_stm32_hw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	607b      	str	r3, [r7, #4]
 8002856:	460b      	mov	r3, r1
 8002858:	72fb      	strb	r3, [r7, #11]
 800285a:	4613      	mov	r3, r2
 800285c:	72bb      	strb	r3, [r7, #10]
	switch(msg) {
 800285e:	7afb      	ldrb	r3, [r7, #11]
 8002860:	3b14      	subs	r3, #20
 8002862:	2b0c      	cmp	r3, #12
 8002864:	d847      	bhi.n	80028f6 <u8x8_byte_stm32_hw_spi+0xaa>
 8002866:	a201      	add	r2, pc, #4	; (adr r2, 800286c <u8x8_byte_stm32_hw_spi+0x20>)
 8002868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800286c:	080028fb 	.word	0x080028fb
 8002870:	080028f7 	.word	0x080028f7
 8002874:	080028f7 	.word	0x080028f7
 8002878:	080028a1 	.word	0x080028a1
 800287c:	080028c7 	.word	0x080028c7
 8002880:	080028df 	.word	0x080028df
 8002884:	080028f7 	.word	0x080028f7
 8002888:	080028f7 	.word	0x080028f7
 800288c:	080028f7 	.word	0x080028f7
 8002890:	080028f7 	.word	0x080028f7
 8002894:	080028f7 	.word	0x080028f7
 8002898:	080028f7 	.word	0x080028f7
 800289c:	080028b9 	.word	0x080028b9
	case U8X8_MSG_BYTE_SEND:
		/* Insert codes to transmit data */
		if(HAL_SPI_Transmit(&hspi1, arg_ptr, arg_int, TX_TIMEOUT) != HAL_OK) return 0;
 80028a0:	7abb      	ldrb	r3, [r7, #10]
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	2364      	movs	r3, #100	; 0x64
 80028a6:	6879      	ldr	r1, [r7, #4]
 80028a8:	4818      	ldr	r0, [pc, #96]	; (800290c <u8x8_byte_stm32_hw_spi+0xc0>)
 80028aa:	f001 f99f 	bl	8003bec <HAL_SPI_Transmit>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d024      	beq.n	80028fe <u8x8_byte_stm32_hw_spi+0xb2>
 80028b4:	2300      	movs	r3, #0
 80028b6:	e024      	b.n	8002902 <u8x8_byte_stm32_hw_spi+0xb6>
	case U8X8_MSG_BYTE_INIT:
		/* Insert codes to begin SPI transmission */
		break;
	case U8X8_MSG_BYTE_SET_DC:
		/* Control DC pin, U8X8_MSG_GPIO_DC will be called */
		u8x8_gpio_SetDC(u8x8, arg_int);
 80028b8:	7abb      	ldrb	r3, [r7, #10]
 80028ba:	461a      	mov	r2, r3
 80028bc:	214a      	movs	r1, #74	; 0x4a
 80028be:	68f8      	ldr	r0, [r7, #12]
 80028c0:	f003 fdb6 	bl	8006430 <u8x8_gpio_call>
		break;
 80028c4:	e01c      	b.n	8002900 <u8x8_byte_stm32_hw_spi+0xb4>
	case U8X8_MSG_BYTE_START_TRANSFER:
		/* Select slave, U8X8_MSG_GPIO_CS will be called */
		u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_enable_level);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	461a      	mov	r2, r3
 80028ce:	2149      	movs	r1, #73	; 0x49
 80028d0:	68f8      	ldr	r0, [r7, #12]
 80028d2:	f003 fdad 	bl	8006430 <u8x8_gpio_call>
		HAL_Delay(1);
 80028d6:	2001      	movs	r0, #1
 80028d8:	f000 f948 	bl	8002b6c <HAL_Delay>
		break;
 80028dc:	e010      	b.n	8002900 <u8x8_byte_stm32_hw_spi+0xb4>
	case U8X8_MSG_BYTE_END_TRANSFER:
		HAL_Delay(1);
 80028de:	2001      	movs	r0, #1
 80028e0:	f000 f944 	bl	8002b6c <HAL_Delay>
		/* Insert codes to end SPI transmission */
		u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	785b      	ldrb	r3, [r3, #1]
 80028ea:	461a      	mov	r2, r3
 80028ec:	2149      	movs	r1, #73	; 0x49
 80028ee:	68f8      	ldr	r0, [r7, #12]
 80028f0:	f003 fd9e 	bl	8006430 <u8x8_gpio_call>
		break;
 80028f4:	e004      	b.n	8002900 <u8x8_byte_stm32_hw_spi+0xb4>
	default:
		return 0;
 80028f6:	2300      	movs	r3, #0
 80028f8:	e003      	b.n	8002902 <u8x8_byte_stm32_hw_spi+0xb6>
		break;
 80028fa:	bf00      	nop
 80028fc:	e000      	b.n	8002900 <u8x8_byte_stm32_hw_spi+0xb4>
		break;
 80028fe:	bf00      	nop
	}
	return 1;
 8002900:	2301      	movs	r3, #1
}
 8002902:	4618      	mov	r0, r3
 8002904:	3710      	adds	r7, #16
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	200001fc 	.word	0x200001fc

08002910 <rxBufferInit>:
#include "uart.h"

ring_buffer_t uart_rx={{0},0,0};
//extern UART_HandleTypeDef huart2;

void rxBufferInit(ring_buffer_t *uart) {
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
	uart->head = 0;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
	uart->tail = 0;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
	memset(uart->buffer, 0, sizeof(RX_BUFFER_SIZE));
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2204      	movs	r2, #4
 800292c:	2100      	movs	r1, #0
 800292e:	4618      	mov	r0, r3
 8002930:	f003 fe26 	bl	8006580 <memset>
}
 8002934:	bf00      	nop
 8002936:	3708      	adds	r7, #8
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}

0800293c <push>:

void push(ring_buffer_t *uart, uint8_t ch) {
 800293c:	b480      	push	{r7}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	460b      	mov	r3, r1
 8002946:	70fb      	strb	r3, [r7, #3]
	uint16_t i = (unsigned int) (uart->head + 1) % RX_BUFFER_SIZE;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 800294e:	b29b      	uxth	r3, r3
 8002950:	3301      	adds	r3, #1
 8002952:	b29b      	uxth	r3, r3
 8002954:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002958:	81fb      	strh	r3, [r7, #14]
	if (i != uart->tail) {
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8002960:	b29b      	uxth	r3, r3
 8002962:	89fa      	ldrh	r2, [r7, #14]
 8002964:	429a      	cmp	r2, r3
 8002966:	d00b      	beq.n	8002980 <push+0x44>
		uart->buffer[uart->head] = ch;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 800296e:	b29b      	uxth	r3, r3
 8002970:	4619      	mov	r1, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	78fa      	ldrb	r2, [r7, #3]
 8002976:	545a      	strb	r2, [r3, r1]
		uart->head = i;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	89fa      	ldrh	r2, [r7, #14]
 800297c:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
	}
}
 8002980:	bf00      	nop
 8002982:	3714      	adds	r7, #20
 8002984:	46bd      	mov	sp, r7
 8002986:	bc80      	pop	{r7}
 8002988:	4770      	bx	lr

0800298a <pop>:

uint8_t pop(ring_buffer_t *uart) {
 800298a:	b480      	push	{r7}
 800298c:	b085      	sub	sp, #20
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]

	if (uart->head == uart->tail) {
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8002998:	b29a      	uxth	r2, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d101      	bne.n	80029aa <pop+0x20>
		return -1;
 80029a6:	23ff      	movs	r3, #255	; 0xff
 80029a8:	e014      	b.n	80029d4 <pop+0x4a>
	} else {

		unsigned char cpop = uart->buffer[uart->tail];
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	461a      	mov	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	5c9b      	ldrb	r3, [r3, r2]
 80029b8:	73fb      	strb	r3, [r7, #15]
		uart->tail = (uint16_t) (uart->tail + 1) % RX_BUFFER_SIZE;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	3301      	adds	r3, #1
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029ca:	b29a      	uxth	r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402

		return cpop;
 80029d2:	7bfb      	ldrb	r3, [r7, #15]

	}
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3714      	adds	r7, #20
 80029d8:	46bd      	mov	sp, r7
 80029da:	bc80      	pop	{r7}
 80029dc:	4770      	bx	lr

080029de <uart_available>:

int8_t uart_available(ring_buffer_t *uart) {
 80029de:	b480      	push	{r7}
 80029e0:	b085      	sub	sp, #20
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]

	uint8_t n = (unsigned int) (RX_BUFFER_SIZE + (uart->head) - (uart->tail))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	b2da      	uxtb	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	73fb      	strb	r3, [r7, #15]
			% RX_BUFFER_SIZE;
	return n;
 80029fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3714      	adds	r7, #20
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bc80      	pop	{r7}
 8002a0a:	4770      	bx	lr

08002a0c <Uart_isr>:

void Uart_isr(UART_HandleTypeDef *huart) {
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b086      	sub	sp, #24
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
	uint32_t isrflags = READ_REG(huart->Instance->SR);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	617b      	str	r3, [r7, #20]
	uint32_t cr1its = READ_REG(huart->Instance->CR1);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	613b      	str	r3, [r7, #16]

	/* if DR is not empty and the Rx Int is enabled */
	if (((isrflags & USART_SR_RXNE) != RESET)
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	f003 0320 	and.w	r3, r3, #32
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d011      	beq.n	8002a52 <Uart_isr+0x46>
			&& ((cr1its & USART_CR1_RXNEIE) != RESET)) {
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	f003 0320 	and.w	r3, r3, #32
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d00c      	beq.n	8002a52 <Uart_isr+0x46>
		 * @note   RXNE flag can be also cleared by a read to the USART_DR register.
		 * @note   TC flag can be also cleared by software sequence: a read operation to
		 *          USART_SR register followed by a write operation to USART_DR register.
		 * @note   TXE flag is cleared only by a write to the USART_DR register.
		 *********************/
		huart->Instance->SR; /* Read status register */
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
		unsigned char c = huart->Instance->DR; /* Read data register */
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	73fb      	strb	r3, [r7, #15]
		push(&uart_rx, c);  // store data in buffer
 8002a46:	7bfb      	ldrb	r3, [r7, #15]
 8002a48:	4619      	mov	r1, r3
 8002a4a:	4803      	ldr	r0, [pc, #12]	; (8002a58 <Uart_isr+0x4c>)
 8002a4c:	f7ff ff76 	bl	800293c <push>
		return;
 8002a50:	bf00      	nop
	}
}
 8002a52:	3718      	adds	r7, #24
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	200008ec 	.word	0x200008ec

08002a5c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a5c:	480c      	ldr	r0, [pc, #48]	; (8002a90 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002a5e:	490d      	ldr	r1, [pc, #52]	; (8002a94 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002a60:	4a0d      	ldr	r2, [pc, #52]	; (8002a98 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002a62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a64:	e002      	b.n	8002a6c <LoopCopyDataInit>

08002a66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a6a:	3304      	adds	r3, #4

08002a6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a70:	d3f9      	bcc.n	8002a66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a72:	4a0a      	ldr	r2, [pc, #40]	; (8002a9c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002a74:	4c0a      	ldr	r4, [pc, #40]	; (8002aa0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002a76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a78:	e001      	b.n	8002a7e <LoopFillZerobss>

08002a7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a7c:	3204      	adds	r2, #4

08002a7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a80:	d3fb      	bcc.n	8002a7a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002a82:	f7ff fe61 	bl	8002748 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a86:	f003 fd49 	bl	800651c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a8a:	f7fe fcbd 	bl	8001408 <main>
  bx lr
 8002a8e:	4770      	bx	lr
  ldr r0, =_sdata
 8002a90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a94:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002a98:	0800d198 	.word	0x0800d198
  ldr r2, =_sbss
 8002a9c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002aa0:	20001104 	.word	0x20001104

08002aa4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002aa4:	e7fe      	b.n	8002aa4 <ADC1_2_IRQHandler>
	...

08002aa8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002aac:	4b08      	ldr	r3, [pc, #32]	; (8002ad0 <HAL_Init+0x28>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a07      	ldr	r2, [pc, #28]	; (8002ad0 <HAL_Init+0x28>)
 8002ab2:	f043 0310 	orr.w	r3, r3, #16
 8002ab6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ab8:	2003      	movs	r0, #3
 8002aba:	f000 f947 	bl	8002d4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002abe:	200f      	movs	r0, #15
 8002ac0:	f000 f808 	bl	8002ad4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ac4:	f7ff fc50 	bl	8002368 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	40022000 	.word	0x40022000

08002ad4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002adc:	4b12      	ldr	r3, [pc, #72]	; (8002b28 <HAL_InitTick+0x54>)
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	4b12      	ldr	r3, [pc, #72]	; (8002b2c <HAL_InitTick+0x58>)
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002aea:	fbb3 f3f1 	udiv	r3, r3, r1
 8002aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002af2:	4618      	mov	r0, r3
 8002af4:	f000 f95f 	bl	8002db6 <HAL_SYSTICK_Config>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e00e      	b.n	8002b20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2b0f      	cmp	r3, #15
 8002b06:	d80a      	bhi.n	8002b1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b08:	2200      	movs	r2, #0
 8002b0a:	6879      	ldr	r1, [r7, #4]
 8002b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b10:	f000 f927 	bl	8002d62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b14:	4a06      	ldr	r2, [pc, #24]	; (8002b30 <HAL_InitTick+0x5c>)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	e000      	b.n	8002b20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3708      	adds	r7, #8
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	20000000 	.word	0x20000000
 8002b2c:	20000008 	.word	0x20000008
 8002b30:	20000004 	.word	0x20000004

08002b34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b38:	4b05      	ldr	r3, [pc, #20]	; (8002b50 <HAL_IncTick+0x1c>)
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	4b05      	ldr	r3, [pc, #20]	; (8002b54 <HAL_IncTick+0x20>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4413      	add	r3, r2
 8002b44:	4a03      	ldr	r2, [pc, #12]	; (8002b54 <HAL_IncTick+0x20>)
 8002b46:	6013      	str	r3, [r2, #0]
}
 8002b48:	bf00      	nop
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bc80      	pop	{r7}
 8002b4e:	4770      	bx	lr
 8002b50:	20000008 	.word	0x20000008
 8002b54:	20000cf0 	.word	0x20000cf0

08002b58 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
  return uwTick;
 8002b5c:	4b02      	ldr	r3, [pc, #8]	; (8002b68 <HAL_GetTick+0x10>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bc80      	pop	{r7}
 8002b66:	4770      	bx	lr
 8002b68:	20000cf0 	.word	0x20000cf0

08002b6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b74:	f7ff fff0 	bl	8002b58 <HAL_GetTick>
 8002b78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b84:	d005      	beq.n	8002b92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b86:	4b0a      	ldr	r3, [pc, #40]	; (8002bb0 <HAL_Delay+0x44>)
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	4413      	add	r3, r2
 8002b90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b92:	bf00      	nop
 8002b94:	f7ff ffe0 	bl	8002b58 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	68fa      	ldr	r2, [r7, #12]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d8f7      	bhi.n	8002b94 <HAL_Delay+0x28>
  {
  }
}
 8002ba4:	bf00      	nop
 8002ba6:	bf00      	nop
 8002ba8:	3710      	adds	r7, #16
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	20000008 	.word	0x20000008

08002bb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b085      	sub	sp, #20
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f003 0307 	and.w	r3, r3, #7
 8002bc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bc4:	4b0c      	ldr	r3, [pc, #48]	; (8002bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bca:	68ba      	ldr	r2, [r7, #8]
 8002bcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002be0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002be4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002be6:	4a04      	ldr	r2, [pc, #16]	; (8002bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	60d3      	str	r3, [r2, #12]
}
 8002bec:	bf00      	nop
 8002bee:	3714      	adds	r7, #20
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bc80      	pop	{r7}
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	e000ed00 	.word	0xe000ed00

08002bfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c00:	4b04      	ldr	r3, [pc, #16]	; (8002c14 <__NVIC_GetPriorityGrouping+0x18>)
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	0a1b      	lsrs	r3, r3, #8
 8002c06:	f003 0307 	and.w	r3, r3, #7
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bc80      	pop	{r7}
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	e000ed00 	.word	0xe000ed00

08002c18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	4603      	mov	r3, r0
 8002c20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	db0b      	blt.n	8002c42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c2a:	79fb      	ldrb	r3, [r7, #7]
 8002c2c:	f003 021f 	and.w	r2, r3, #31
 8002c30:	4906      	ldr	r1, [pc, #24]	; (8002c4c <__NVIC_EnableIRQ+0x34>)
 8002c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c36:	095b      	lsrs	r3, r3, #5
 8002c38:	2001      	movs	r0, #1
 8002c3a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c42:	bf00      	nop
 8002c44:	370c      	adds	r7, #12
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bc80      	pop	{r7}
 8002c4a:	4770      	bx	lr
 8002c4c:	e000e100 	.word	0xe000e100

08002c50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	4603      	mov	r3, r0
 8002c58:	6039      	str	r1, [r7, #0]
 8002c5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	db0a      	blt.n	8002c7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	b2da      	uxtb	r2, r3
 8002c68:	490c      	ldr	r1, [pc, #48]	; (8002c9c <__NVIC_SetPriority+0x4c>)
 8002c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c6e:	0112      	lsls	r2, r2, #4
 8002c70:	b2d2      	uxtb	r2, r2
 8002c72:	440b      	add	r3, r1
 8002c74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c78:	e00a      	b.n	8002c90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	b2da      	uxtb	r2, r3
 8002c7e:	4908      	ldr	r1, [pc, #32]	; (8002ca0 <__NVIC_SetPriority+0x50>)
 8002c80:	79fb      	ldrb	r3, [r7, #7]
 8002c82:	f003 030f 	and.w	r3, r3, #15
 8002c86:	3b04      	subs	r3, #4
 8002c88:	0112      	lsls	r2, r2, #4
 8002c8a:	b2d2      	uxtb	r2, r2
 8002c8c:	440b      	add	r3, r1
 8002c8e:	761a      	strb	r2, [r3, #24]
}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bc80      	pop	{r7}
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	e000e100 	.word	0xe000e100
 8002ca0:	e000ed00 	.word	0xe000ed00

08002ca4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b089      	sub	sp, #36	; 0x24
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f003 0307 	and.w	r3, r3, #7
 8002cb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	f1c3 0307 	rsb	r3, r3, #7
 8002cbe:	2b04      	cmp	r3, #4
 8002cc0:	bf28      	it	cs
 8002cc2:	2304      	movcs	r3, #4
 8002cc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	3304      	adds	r3, #4
 8002cca:	2b06      	cmp	r3, #6
 8002ccc:	d902      	bls.n	8002cd4 <NVIC_EncodePriority+0x30>
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	3b03      	subs	r3, #3
 8002cd2:	e000      	b.n	8002cd6 <NVIC_EncodePriority+0x32>
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce2:	43da      	mvns	r2, r3
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	401a      	ands	r2, r3
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cec:	f04f 31ff 	mov.w	r1, #4294967295
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8002cf6:	43d9      	mvns	r1, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cfc:	4313      	orrs	r3, r2
         );
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3724      	adds	r7, #36	; 0x24
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bc80      	pop	{r7}
 8002d06:	4770      	bx	lr

08002d08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	3b01      	subs	r3, #1
 8002d14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d18:	d301      	bcc.n	8002d1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e00f      	b.n	8002d3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d1e:	4a0a      	ldr	r2, [pc, #40]	; (8002d48 <SysTick_Config+0x40>)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	3b01      	subs	r3, #1
 8002d24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d26:	210f      	movs	r1, #15
 8002d28:	f04f 30ff 	mov.w	r0, #4294967295
 8002d2c:	f7ff ff90 	bl	8002c50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d30:	4b05      	ldr	r3, [pc, #20]	; (8002d48 <SysTick_Config+0x40>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d36:	4b04      	ldr	r3, [pc, #16]	; (8002d48 <SysTick_Config+0x40>)
 8002d38:	2207      	movs	r2, #7
 8002d3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3708      	adds	r7, #8
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	e000e010 	.word	0xe000e010

08002d4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f7ff ff2d 	bl	8002bb4 <__NVIC_SetPriorityGrouping>
}
 8002d5a:	bf00      	nop
 8002d5c:	3708      	adds	r7, #8
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b086      	sub	sp, #24
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	4603      	mov	r3, r0
 8002d6a:	60b9      	str	r1, [r7, #8]
 8002d6c:	607a      	str	r2, [r7, #4]
 8002d6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d70:	2300      	movs	r3, #0
 8002d72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d74:	f7ff ff42 	bl	8002bfc <__NVIC_GetPriorityGrouping>
 8002d78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	68b9      	ldr	r1, [r7, #8]
 8002d7e:	6978      	ldr	r0, [r7, #20]
 8002d80:	f7ff ff90 	bl	8002ca4 <NVIC_EncodePriority>
 8002d84:	4602      	mov	r2, r0
 8002d86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d8a:	4611      	mov	r1, r2
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7ff ff5f 	bl	8002c50 <__NVIC_SetPriority>
}
 8002d92:	bf00      	nop
 8002d94:	3718      	adds	r7, #24
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b082      	sub	sp, #8
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	4603      	mov	r3, r0
 8002da2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7ff ff35 	bl	8002c18 <__NVIC_EnableIRQ>
}
 8002dae:	bf00      	nop
 8002db0:	3708      	adds	r7, #8
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002db6:	b580      	push	{r7, lr}
 8002db8:	b082      	sub	sp, #8
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f7ff ffa2 	bl	8002d08 <SysTick_Config>
 8002dc4:	4603      	mov	r3, r0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3708      	adds	r7, #8
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}

08002dce <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8002dd2:	f000 f802 	bl	8002dda <HAL_SYSTICK_Callback>
}
 8002dd6:	bf00      	nop
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8002dda:	b480      	push	{r7}
 8002ddc:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8002dde:	bf00      	nop
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bc80      	pop	{r7}
 8002de4:	4770      	bx	lr

08002de6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002de6:	b480      	push	{r7}
 8002de8:	b085      	sub	sp, #20
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dee:	2300      	movs	r3, #0
 8002df0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d008      	beq.n	8002e0e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2204      	movs	r2, #4
 8002e00:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e020      	b.n	8002e50 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f022 020e 	bic.w	r2, r2, #14
 8002e1c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f022 0201 	bic.w	r2, r2, #1
 8002e2c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e36:	2101      	movs	r1, #1
 8002e38:	fa01 f202 	lsl.w	r2, r1, r2
 8002e3c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2201      	movs	r2, #1
 8002e42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3714      	adds	r7, #20
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bc80      	pop	{r7}
 8002e58:	4770      	bx	lr
	...

08002e5c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e64:	2300      	movs	r3, #0
 8002e66:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d005      	beq.n	8002e7e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2204      	movs	r2, #4
 8002e76:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	73fb      	strb	r3, [r7, #15]
 8002e7c:	e051      	b.n	8002f22 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f022 020e 	bic.w	r2, r2, #14
 8002e8c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f022 0201 	bic.w	r2, r2, #1
 8002e9c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a22      	ldr	r2, [pc, #136]	; (8002f2c <HAL_DMA_Abort_IT+0xd0>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d029      	beq.n	8002efc <HAL_DMA_Abort_IT+0xa0>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a20      	ldr	r2, [pc, #128]	; (8002f30 <HAL_DMA_Abort_IT+0xd4>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d022      	beq.n	8002ef8 <HAL_DMA_Abort_IT+0x9c>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a1f      	ldr	r2, [pc, #124]	; (8002f34 <HAL_DMA_Abort_IT+0xd8>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d01a      	beq.n	8002ef2 <HAL_DMA_Abort_IT+0x96>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a1d      	ldr	r2, [pc, #116]	; (8002f38 <HAL_DMA_Abort_IT+0xdc>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d012      	beq.n	8002eec <HAL_DMA_Abort_IT+0x90>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a1c      	ldr	r2, [pc, #112]	; (8002f3c <HAL_DMA_Abort_IT+0xe0>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d00a      	beq.n	8002ee6 <HAL_DMA_Abort_IT+0x8a>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a1a      	ldr	r2, [pc, #104]	; (8002f40 <HAL_DMA_Abort_IT+0xe4>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d102      	bne.n	8002ee0 <HAL_DMA_Abort_IT+0x84>
 8002eda:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002ede:	e00e      	b.n	8002efe <HAL_DMA_Abort_IT+0xa2>
 8002ee0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ee4:	e00b      	b.n	8002efe <HAL_DMA_Abort_IT+0xa2>
 8002ee6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002eea:	e008      	b.n	8002efe <HAL_DMA_Abort_IT+0xa2>
 8002eec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ef0:	e005      	b.n	8002efe <HAL_DMA_Abort_IT+0xa2>
 8002ef2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ef6:	e002      	b.n	8002efe <HAL_DMA_Abort_IT+0xa2>
 8002ef8:	2310      	movs	r3, #16
 8002efa:	e000      	b.n	8002efe <HAL_DMA_Abort_IT+0xa2>
 8002efc:	2301      	movs	r3, #1
 8002efe:	4a11      	ldr	r2, [pc, #68]	; (8002f44 <HAL_DMA_Abort_IT+0xe8>)
 8002f00:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2201      	movs	r2, #1
 8002f06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d003      	beq.n	8002f22 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	4798      	blx	r3
    } 
  }
  return status;
 8002f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3710      	adds	r7, #16
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	40020008 	.word	0x40020008
 8002f30:	4002001c 	.word	0x4002001c
 8002f34:	40020030 	.word	0x40020030
 8002f38:	40020044 	.word	0x40020044
 8002f3c:	40020058 	.word	0x40020058
 8002f40:	4002006c 	.word	0x4002006c
 8002f44:	40020000 	.word	0x40020000

08002f48 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b08b      	sub	sp, #44	; 0x2c
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f52:	2300      	movs	r3, #0
 8002f54:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002f56:	2300      	movs	r3, #0
 8002f58:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f5a:	e169      	b.n	8003230 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f60:	fa02 f303 	lsl.w	r3, r2, r3
 8002f64:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	69fa      	ldr	r2, [r7, #28]
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002f70:	69ba      	ldr	r2, [r7, #24]
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	f040 8158 	bne.w	800322a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	4a9a      	ldr	r2, [pc, #616]	; (80031e8 <HAL_GPIO_Init+0x2a0>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d05e      	beq.n	8003042 <HAL_GPIO_Init+0xfa>
 8002f84:	4a98      	ldr	r2, [pc, #608]	; (80031e8 <HAL_GPIO_Init+0x2a0>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d875      	bhi.n	8003076 <HAL_GPIO_Init+0x12e>
 8002f8a:	4a98      	ldr	r2, [pc, #608]	; (80031ec <HAL_GPIO_Init+0x2a4>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d058      	beq.n	8003042 <HAL_GPIO_Init+0xfa>
 8002f90:	4a96      	ldr	r2, [pc, #600]	; (80031ec <HAL_GPIO_Init+0x2a4>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d86f      	bhi.n	8003076 <HAL_GPIO_Init+0x12e>
 8002f96:	4a96      	ldr	r2, [pc, #600]	; (80031f0 <HAL_GPIO_Init+0x2a8>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d052      	beq.n	8003042 <HAL_GPIO_Init+0xfa>
 8002f9c:	4a94      	ldr	r2, [pc, #592]	; (80031f0 <HAL_GPIO_Init+0x2a8>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d869      	bhi.n	8003076 <HAL_GPIO_Init+0x12e>
 8002fa2:	4a94      	ldr	r2, [pc, #592]	; (80031f4 <HAL_GPIO_Init+0x2ac>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d04c      	beq.n	8003042 <HAL_GPIO_Init+0xfa>
 8002fa8:	4a92      	ldr	r2, [pc, #584]	; (80031f4 <HAL_GPIO_Init+0x2ac>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d863      	bhi.n	8003076 <HAL_GPIO_Init+0x12e>
 8002fae:	4a92      	ldr	r2, [pc, #584]	; (80031f8 <HAL_GPIO_Init+0x2b0>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d046      	beq.n	8003042 <HAL_GPIO_Init+0xfa>
 8002fb4:	4a90      	ldr	r2, [pc, #576]	; (80031f8 <HAL_GPIO_Init+0x2b0>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d85d      	bhi.n	8003076 <HAL_GPIO_Init+0x12e>
 8002fba:	2b12      	cmp	r3, #18
 8002fbc:	d82a      	bhi.n	8003014 <HAL_GPIO_Init+0xcc>
 8002fbe:	2b12      	cmp	r3, #18
 8002fc0:	d859      	bhi.n	8003076 <HAL_GPIO_Init+0x12e>
 8002fc2:	a201      	add	r2, pc, #4	; (adr r2, 8002fc8 <HAL_GPIO_Init+0x80>)
 8002fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fc8:	08003043 	.word	0x08003043
 8002fcc:	0800301d 	.word	0x0800301d
 8002fd0:	0800302f 	.word	0x0800302f
 8002fd4:	08003071 	.word	0x08003071
 8002fd8:	08003077 	.word	0x08003077
 8002fdc:	08003077 	.word	0x08003077
 8002fe0:	08003077 	.word	0x08003077
 8002fe4:	08003077 	.word	0x08003077
 8002fe8:	08003077 	.word	0x08003077
 8002fec:	08003077 	.word	0x08003077
 8002ff0:	08003077 	.word	0x08003077
 8002ff4:	08003077 	.word	0x08003077
 8002ff8:	08003077 	.word	0x08003077
 8002ffc:	08003077 	.word	0x08003077
 8003000:	08003077 	.word	0x08003077
 8003004:	08003077 	.word	0x08003077
 8003008:	08003077 	.word	0x08003077
 800300c:	08003025 	.word	0x08003025
 8003010:	08003039 	.word	0x08003039
 8003014:	4a79      	ldr	r2, [pc, #484]	; (80031fc <HAL_GPIO_Init+0x2b4>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d013      	beq.n	8003042 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800301a:	e02c      	b.n	8003076 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	623b      	str	r3, [r7, #32]
          break;
 8003022:	e029      	b.n	8003078 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	3304      	adds	r3, #4
 800302a:	623b      	str	r3, [r7, #32]
          break;
 800302c:	e024      	b.n	8003078 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	3308      	adds	r3, #8
 8003034:	623b      	str	r3, [r7, #32]
          break;
 8003036:	e01f      	b.n	8003078 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	330c      	adds	r3, #12
 800303e:	623b      	str	r3, [r7, #32]
          break;
 8003040:	e01a      	b.n	8003078 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d102      	bne.n	8003050 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800304a:	2304      	movs	r3, #4
 800304c:	623b      	str	r3, [r7, #32]
          break;
 800304e:	e013      	b.n	8003078 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	2b01      	cmp	r3, #1
 8003056:	d105      	bne.n	8003064 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003058:	2308      	movs	r3, #8
 800305a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	69fa      	ldr	r2, [r7, #28]
 8003060:	611a      	str	r2, [r3, #16]
          break;
 8003062:	e009      	b.n	8003078 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003064:	2308      	movs	r3, #8
 8003066:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	69fa      	ldr	r2, [r7, #28]
 800306c:	615a      	str	r2, [r3, #20]
          break;
 800306e:	e003      	b.n	8003078 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003070:	2300      	movs	r3, #0
 8003072:	623b      	str	r3, [r7, #32]
          break;
 8003074:	e000      	b.n	8003078 <HAL_GPIO_Init+0x130>
          break;
 8003076:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	2bff      	cmp	r3, #255	; 0xff
 800307c:	d801      	bhi.n	8003082 <HAL_GPIO_Init+0x13a>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	e001      	b.n	8003086 <HAL_GPIO_Init+0x13e>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	3304      	adds	r3, #4
 8003086:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	2bff      	cmp	r3, #255	; 0xff
 800308c:	d802      	bhi.n	8003094 <HAL_GPIO_Init+0x14c>
 800308e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	e002      	b.n	800309a <HAL_GPIO_Init+0x152>
 8003094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003096:	3b08      	subs	r3, #8
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	210f      	movs	r1, #15
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	fa01 f303 	lsl.w	r3, r1, r3
 80030a8:	43db      	mvns	r3, r3
 80030aa:	401a      	ands	r2, r3
 80030ac:	6a39      	ldr	r1, [r7, #32]
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	fa01 f303 	lsl.w	r3, r1, r3
 80030b4:	431a      	orrs	r2, r3
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	f000 80b1 	beq.w	800322a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80030c8:	4b4d      	ldr	r3, [pc, #308]	; (8003200 <HAL_GPIO_Init+0x2b8>)
 80030ca:	699b      	ldr	r3, [r3, #24]
 80030cc:	4a4c      	ldr	r2, [pc, #304]	; (8003200 <HAL_GPIO_Init+0x2b8>)
 80030ce:	f043 0301 	orr.w	r3, r3, #1
 80030d2:	6193      	str	r3, [r2, #24]
 80030d4:	4b4a      	ldr	r3, [pc, #296]	; (8003200 <HAL_GPIO_Init+0x2b8>)
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	f003 0301 	and.w	r3, r3, #1
 80030dc:	60bb      	str	r3, [r7, #8]
 80030de:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80030e0:	4a48      	ldr	r2, [pc, #288]	; (8003204 <HAL_GPIO_Init+0x2bc>)
 80030e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e4:	089b      	lsrs	r3, r3, #2
 80030e6:	3302      	adds	r3, #2
 80030e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030ec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80030ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f0:	f003 0303 	and.w	r3, r3, #3
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	220f      	movs	r2, #15
 80030f8:	fa02 f303 	lsl.w	r3, r2, r3
 80030fc:	43db      	mvns	r3, r3
 80030fe:	68fa      	ldr	r2, [r7, #12]
 8003100:	4013      	ands	r3, r2
 8003102:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4a40      	ldr	r2, [pc, #256]	; (8003208 <HAL_GPIO_Init+0x2c0>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d013      	beq.n	8003134 <HAL_GPIO_Init+0x1ec>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4a3f      	ldr	r2, [pc, #252]	; (800320c <HAL_GPIO_Init+0x2c4>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d00d      	beq.n	8003130 <HAL_GPIO_Init+0x1e8>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4a3e      	ldr	r2, [pc, #248]	; (8003210 <HAL_GPIO_Init+0x2c8>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d007      	beq.n	800312c <HAL_GPIO_Init+0x1e4>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	4a3d      	ldr	r2, [pc, #244]	; (8003214 <HAL_GPIO_Init+0x2cc>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d101      	bne.n	8003128 <HAL_GPIO_Init+0x1e0>
 8003124:	2303      	movs	r3, #3
 8003126:	e006      	b.n	8003136 <HAL_GPIO_Init+0x1ee>
 8003128:	2304      	movs	r3, #4
 800312a:	e004      	b.n	8003136 <HAL_GPIO_Init+0x1ee>
 800312c:	2302      	movs	r3, #2
 800312e:	e002      	b.n	8003136 <HAL_GPIO_Init+0x1ee>
 8003130:	2301      	movs	r3, #1
 8003132:	e000      	b.n	8003136 <HAL_GPIO_Init+0x1ee>
 8003134:	2300      	movs	r3, #0
 8003136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003138:	f002 0203 	and.w	r2, r2, #3
 800313c:	0092      	lsls	r2, r2, #2
 800313e:	4093      	lsls	r3, r2
 8003140:	68fa      	ldr	r2, [r7, #12]
 8003142:	4313      	orrs	r3, r2
 8003144:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003146:	492f      	ldr	r1, [pc, #188]	; (8003204 <HAL_GPIO_Init+0x2bc>)
 8003148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314a:	089b      	lsrs	r3, r3, #2
 800314c:	3302      	adds	r3, #2
 800314e:	68fa      	ldr	r2, [r7, #12]
 8003150:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d006      	beq.n	800316e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003160:	4b2d      	ldr	r3, [pc, #180]	; (8003218 <HAL_GPIO_Init+0x2d0>)
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	492c      	ldr	r1, [pc, #176]	; (8003218 <HAL_GPIO_Init+0x2d0>)
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	4313      	orrs	r3, r2
 800316a:	600b      	str	r3, [r1, #0]
 800316c:	e006      	b.n	800317c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800316e:	4b2a      	ldr	r3, [pc, #168]	; (8003218 <HAL_GPIO_Init+0x2d0>)
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	43db      	mvns	r3, r3
 8003176:	4928      	ldr	r1, [pc, #160]	; (8003218 <HAL_GPIO_Init+0x2d0>)
 8003178:	4013      	ands	r3, r2
 800317a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d006      	beq.n	8003196 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003188:	4b23      	ldr	r3, [pc, #140]	; (8003218 <HAL_GPIO_Init+0x2d0>)
 800318a:	685a      	ldr	r2, [r3, #4]
 800318c:	4922      	ldr	r1, [pc, #136]	; (8003218 <HAL_GPIO_Init+0x2d0>)
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	4313      	orrs	r3, r2
 8003192:	604b      	str	r3, [r1, #4]
 8003194:	e006      	b.n	80031a4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003196:	4b20      	ldr	r3, [pc, #128]	; (8003218 <HAL_GPIO_Init+0x2d0>)
 8003198:	685a      	ldr	r2, [r3, #4]
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	43db      	mvns	r3, r3
 800319e:	491e      	ldr	r1, [pc, #120]	; (8003218 <HAL_GPIO_Init+0x2d0>)
 80031a0:	4013      	ands	r3, r2
 80031a2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d006      	beq.n	80031be <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80031b0:	4b19      	ldr	r3, [pc, #100]	; (8003218 <HAL_GPIO_Init+0x2d0>)
 80031b2:	689a      	ldr	r2, [r3, #8]
 80031b4:	4918      	ldr	r1, [pc, #96]	; (8003218 <HAL_GPIO_Init+0x2d0>)
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	608b      	str	r3, [r1, #8]
 80031bc:	e006      	b.n	80031cc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80031be:	4b16      	ldr	r3, [pc, #88]	; (8003218 <HAL_GPIO_Init+0x2d0>)
 80031c0:	689a      	ldr	r2, [r3, #8]
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	43db      	mvns	r3, r3
 80031c6:	4914      	ldr	r1, [pc, #80]	; (8003218 <HAL_GPIO_Init+0x2d0>)
 80031c8:	4013      	ands	r3, r2
 80031ca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d021      	beq.n	800321c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80031d8:	4b0f      	ldr	r3, [pc, #60]	; (8003218 <HAL_GPIO_Init+0x2d0>)
 80031da:	68da      	ldr	r2, [r3, #12]
 80031dc:	490e      	ldr	r1, [pc, #56]	; (8003218 <HAL_GPIO_Init+0x2d0>)
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	60cb      	str	r3, [r1, #12]
 80031e4:	e021      	b.n	800322a <HAL_GPIO_Init+0x2e2>
 80031e6:	bf00      	nop
 80031e8:	10320000 	.word	0x10320000
 80031ec:	10310000 	.word	0x10310000
 80031f0:	10220000 	.word	0x10220000
 80031f4:	10210000 	.word	0x10210000
 80031f8:	10120000 	.word	0x10120000
 80031fc:	10110000 	.word	0x10110000
 8003200:	40021000 	.word	0x40021000
 8003204:	40010000 	.word	0x40010000
 8003208:	40010800 	.word	0x40010800
 800320c:	40010c00 	.word	0x40010c00
 8003210:	40011000 	.word	0x40011000
 8003214:	40011400 	.word	0x40011400
 8003218:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800321c:	4b0b      	ldr	r3, [pc, #44]	; (800324c <HAL_GPIO_Init+0x304>)
 800321e:	68da      	ldr	r2, [r3, #12]
 8003220:	69bb      	ldr	r3, [r7, #24]
 8003222:	43db      	mvns	r3, r3
 8003224:	4909      	ldr	r1, [pc, #36]	; (800324c <HAL_GPIO_Init+0x304>)
 8003226:	4013      	ands	r3, r2
 8003228:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800322a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322c:	3301      	adds	r3, #1
 800322e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003236:	fa22 f303 	lsr.w	r3, r2, r3
 800323a:	2b00      	cmp	r3, #0
 800323c:	f47f ae8e 	bne.w	8002f5c <HAL_GPIO_Init+0x14>
  }
}
 8003240:	bf00      	nop
 8003242:	bf00      	nop
 8003244:	372c      	adds	r7, #44	; 0x2c
 8003246:	46bd      	mov	sp, r7
 8003248:	bc80      	pop	{r7}
 800324a:	4770      	bx	lr
 800324c:	40010400 	.word	0x40010400

08003250 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	460b      	mov	r3, r1
 800325a:	807b      	strh	r3, [r7, #2]
 800325c:	4613      	mov	r3, r2
 800325e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003260:	787b      	ldrb	r3, [r7, #1]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d003      	beq.n	800326e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003266:	887a      	ldrh	r2, [r7, #2]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800326c:	e003      	b.n	8003276 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800326e:	887b      	ldrh	r3, [r7, #2]
 8003270:	041a      	lsls	r2, r3, #16
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	611a      	str	r2, [r3, #16]
}
 8003276:	bf00      	nop
 8003278:	370c      	adds	r7, #12
 800327a:	46bd      	mov	sp, r7
 800327c:	bc80      	pop	{r7}
 800327e:	4770      	bx	lr

08003280 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0
 8003286:	4603      	mov	r3, r0
 8003288:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800328a:	4b08      	ldr	r3, [pc, #32]	; (80032ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800328c:	695a      	ldr	r2, [r3, #20]
 800328e:	88fb      	ldrh	r3, [r7, #6]
 8003290:	4013      	ands	r3, r2
 8003292:	2b00      	cmp	r3, #0
 8003294:	d006      	beq.n	80032a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003296:	4a05      	ldr	r2, [pc, #20]	; (80032ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003298:	88fb      	ldrh	r3, [r7, #6]
 800329a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800329c:	88fb      	ldrh	r3, [r7, #6]
 800329e:	4618      	mov	r0, r3
 80032a0:	f7ff f83e 	bl	8002320 <HAL_GPIO_EXTI_Callback>
  }
}
 80032a4:	bf00      	nop
 80032a6:	3708      	adds	r7, #8
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	40010400 	.word	0x40010400

080032b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b086      	sub	sp, #24
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d101      	bne.n	80032c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e272      	b.n	80037a8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	f000 8087 	beq.w	80033de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80032d0:	4b92      	ldr	r3, [pc, #584]	; (800351c <HAL_RCC_OscConfig+0x26c>)
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f003 030c 	and.w	r3, r3, #12
 80032d8:	2b04      	cmp	r3, #4
 80032da:	d00c      	beq.n	80032f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80032dc:	4b8f      	ldr	r3, [pc, #572]	; (800351c <HAL_RCC_OscConfig+0x26c>)
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f003 030c 	and.w	r3, r3, #12
 80032e4:	2b08      	cmp	r3, #8
 80032e6:	d112      	bne.n	800330e <HAL_RCC_OscConfig+0x5e>
 80032e8:	4b8c      	ldr	r3, [pc, #560]	; (800351c <HAL_RCC_OscConfig+0x26c>)
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032f4:	d10b      	bne.n	800330e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032f6:	4b89      	ldr	r3, [pc, #548]	; (800351c <HAL_RCC_OscConfig+0x26c>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d06c      	beq.n	80033dc <HAL_RCC_OscConfig+0x12c>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d168      	bne.n	80033dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e24c      	b.n	80037a8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003316:	d106      	bne.n	8003326 <HAL_RCC_OscConfig+0x76>
 8003318:	4b80      	ldr	r3, [pc, #512]	; (800351c <HAL_RCC_OscConfig+0x26c>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a7f      	ldr	r2, [pc, #508]	; (800351c <HAL_RCC_OscConfig+0x26c>)
 800331e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003322:	6013      	str	r3, [r2, #0]
 8003324:	e02e      	b.n	8003384 <HAL_RCC_OscConfig+0xd4>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d10c      	bne.n	8003348 <HAL_RCC_OscConfig+0x98>
 800332e:	4b7b      	ldr	r3, [pc, #492]	; (800351c <HAL_RCC_OscConfig+0x26c>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a7a      	ldr	r2, [pc, #488]	; (800351c <HAL_RCC_OscConfig+0x26c>)
 8003334:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003338:	6013      	str	r3, [r2, #0]
 800333a:	4b78      	ldr	r3, [pc, #480]	; (800351c <HAL_RCC_OscConfig+0x26c>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a77      	ldr	r2, [pc, #476]	; (800351c <HAL_RCC_OscConfig+0x26c>)
 8003340:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003344:	6013      	str	r3, [r2, #0]
 8003346:	e01d      	b.n	8003384 <HAL_RCC_OscConfig+0xd4>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003350:	d10c      	bne.n	800336c <HAL_RCC_OscConfig+0xbc>
 8003352:	4b72      	ldr	r3, [pc, #456]	; (800351c <HAL_RCC_OscConfig+0x26c>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a71      	ldr	r2, [pc, #452]	; (800351c <HAL_RCC_OscConfig+0x26c>)
 8003358:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800335c:	6013      	str	r3, [r2, #0]
 800335e:	4b6f      	ldr	r3, [pc, #444]	; (800351c <HAL_RCC_OscConfig+0x26c>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a6e      	ldr	r2, [pc, #440]	; (800351c <HAL_RCC_OscConfig+0x26c>)
 8003364:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003368:	6013      	str	r3, [r2, #0]
 800336a:	e00b      	b.n	8003384 <HAL_RCC_OscConfig+0xd4>
 800336c:	4b6b      	ldr	r3, [pc, #428]	; (800351c <HAL_RCC_OscConfig+0x26c>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a6a      	ldr	r2, [pc, #424]	; (800351c <HAL_RCC_OscConfig+0x26c>)
 8003372:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003376:	6013      	str	r3, [r2, #0]
 8003378:	4b68      	ldr	r3, [pc, #416]	; (800351c <HAL_RCC_OscConfig+0x26c>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a67      	ldr	r2, [pc, #412]	; (800351c <HAL_RCC_OscConfig+0x26c>)
 800337e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003382:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d013      	beq.n	80033b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800338c:	f7ff fbe4 	bl	8002b58 <HAL_GetTick>
 8003390:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003392:	e008      	b.n	80033a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003394:	f7ff fbe0 	bl	8002b58 <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	2b64      	cmp	r3, #100	; 0x64
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e200      	b.n	80037a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033a6:	4b5d      	ldr	r3, [pc, #372]	; (800351c <HAL_RCC_OscConfig+0x26c>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d0f0      	beq.n	8003394 <HAL_RCC_OscConfig+0xe4>
 80033b2:	e014      	b.n	80033de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033b4:	f7ff fbd0 	bl	8002b58 <HAL_GetTick>
 80033b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ba:	e008      	b.n	80033ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033bc:	f7ff fbcc 	bl	8002b58 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b64      	cmp	r3, #100	; 0x64
 80033c8:	d901      	bls.n	80033ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e1ec      	b.n	80037a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ce:	4b53      	ldr	r3, [pc, #332]	; (800351c <HAL_RCC_OscConfig+0x26c>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d1f0      	bne.n	80033bc <HAL_RCC_OscConfig+0x10c>
 80033da:	e000      	b.n	80033de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0302 	and.w	r3, r3, #2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d063      	beq.n	80034b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80033ea:	4b4c      	ldr	r3, [pc, #304]	; (800351c <HAL_RCC_OscConfig+0x26c>)
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f003 030c 	and.w	r3, r3, #12
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d00b      	beq.n	800340e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80033f6:	4b49      	ldr	r3, [pc, #292]	; (800351c <HAL_RCC_OscConfig+0x26c>)
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f003 030c 	and.w	r3, r3, #12
 80033fe:	2b08      	cmp	r3, #8
 8003400:	d11c      	bne.n	800343c <HAL_RCC_OscConfig+0x18c>
 8003402:	4b46      	ldr	r3, [pc, #280]	; (800351c <HAL_RCC_OscConfig+0x26c>)
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d116      	bne.n	800343c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800340e:	4b43      	ldr	r3, [pc, #268]	; (800351c <HAL_RCC_OscConfig+0x26c>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0302 	and.w	r3, r3, #2
 8003416:	2b00      	cmp	r3, #0
 8003418:	d005      	beq.n	8003426 <HAL_RCC_OscConfig+0x176>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	2b01      	cmp	r3, #1
 8003420:	d001      	beq.n	8003426 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e1c0      	b.n	80037a8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003426:	4b3d      	ldr	r3, [pc, #244]	; (800351c <HAL_RCC_OscConfig+0x26c>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	695b      	ldr	r3, [r3, #20]
 8003432:	00db      	lsls	r3, r3, #3
 8003434:	4939      	ldr	r1, [pc, #228]	; (800351c <HAL_RCC_OscConfig+0x26c>)
 8003436:	4313      	orrs	r3, r2
 8003438:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800343a:	e03a      	b.n	80034b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	691b      	ldr	r3, [r3, #16]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d020      	beq.n	8003486 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003444:	4b36      	ldr	r3, [pc, #216]	; (8003520 <HAL_RCC_OscConfig+0x270>)
 8003446:	2201      	movs	r2, #1
 8003448:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800344a:	f7ff fb85 	bl	8002b58 <HAL_GetTick>
 800344e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003450:	e008      	b.n	8003464 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003452:	f7ff fb81 	bl	8002b58 <HAL_GetTick>
 8003456:	4602      	mov	r2, r0
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	2b02      	cmp	r3, #2
 800345e:	d901      	bls.n	8003464 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	e1a1      	b.n	80037a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003464:	4b2d      	ldr	r3, [pc, #180]	; (800351c <HAL_RCC_OscConfig+0x26c>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0302 	and.w	r3, r3, #2
 800346c:	2b00      	cmp	r3, #0
 800346e:	d0f0      	beq.n	8003452 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003470:	4b2a      	ldr	r3, [pc, #168]	; (800351c <HAL_RCC_OscConfig+0x26c>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	695b      	ldr	r3, [r3, #20]
 800347c:	00db      	lsls	r3, r3, #3
 800347e:	4927      	ldr	r1, [pc, #156]	; (800351c <HAL_RCC_OscConfig+0x26c>)
 8003480:	4313      	orrs	r3, r2
 8003482:	600b      	str	r3, [r1, #0]
 8003484:	e015      	b.n	80034b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003486:	4b26      	ldr	r3, [pc, #152]	; (8003520 <HAL_RCC_OscConfig+0x270>)
 8003488:	2200      	movs	r2, #0
 800348a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800348c:	f7ff fb64 	bl	8002b58 <HAL_GetTick>
 8003490:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003492:	e008      	b.n	80034a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003494:	f7ff fb60 	bl	8002b58 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e180      	b.n	80037a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034a6:	4b1d      	ldr	r3, [pc, #116]	; (800351c <HAL_RCC_OscConfig+0x26c>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0302 	and.w	r3, r3, #2
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d1f0      	bne.n	8003494 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0308 	and.w	r3, r3, #8
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d03a      	beq.n	8003534 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	699b      	ldr	r3, [r3, #24]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d019      	beq.n	80034fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034c6:	4b17      	ldr	r3, [pc, #92]	; (8003524 <HAL_RCC_OscConfig+0x274>)
 80034c8:	2201      	movs	r2, #1
 80034ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034cc:	f7ff fb44 	bl	8002b58 <HAL_GetTick>
 80034d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034d2:	e008      	b.n	80034e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034d4:	f7ff fb40 	bl	8002b58 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d901      	bls.n	80034e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e160      	b.n	80037a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034e6:	4b0d      	ldr	r3, [pc, #52]	; (800351c <HAL_RCC_OscConfig+0x26c>)
 80034e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ea:	f003 0302 	and.w	r3, r3, #2
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d0f0      	beq.n	80034d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80034f2:	2001      	movs	r0, #1
 80034f4:	f000 fad8 	bl	8003aa8 <RCC_Delay>
 80034f8:	e01c      	b.n	8003534 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034fa:	4b0a      	ldr	r3, [pc, #40]	; (8003524 <HAL_RCC_OscConfig+0x274>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003500:	f7ff fb2a 	bl	8002b58 <HAL_GetTick>
 8003504:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003506:	e00f      	b.n	8003528 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003508:	f7ff fb26 	bl	8002b58 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b02      	cmp	r3, #2
 8003514:	d908      	bls.n	8003528 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e146      	b.n	80037a8 <HAL_RCC_OscConfig+0x4f8>
 800351a:	bf00      	nop
 800351c:	40021000 	.word	0x40021000
 8003520:	42420000 	.word	0x42420000
 8003524:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003528:	4b92      	ldr	r3, [pc, #584]	; (8003774 <HAL_RCC_OscConfig+0x4c4>)
 800352a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352c:	f003 0302 	and.w	r3, r3, #2
 8003530:	2b00      	cmp	r3, #0
 8003532:	d1e9      	bne.n	8003508 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0304 	and.w	r3, r3, #4
 800353c:	2b00      	cmp	r3, #0
 800353e:	f000 80a6 	beq.w	800368e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003542:	2300      	movs	r3, #0
 8003544:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003546:	4b8b      	ldr	r3, [pc, #556]	; (8003774 <HAL_RCC_OscConfig+0x4c4>)
 8003548:	69db      	ldr	r3, [r3, #28]
 800354a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d10d      	bne.n	800356e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003552:	4b88      	ldr	r3, [pc, #544]	; (8003774 <HAL_RCC_OscConfig+0x4c4>)
 8003554:	69db      	ldr	r3, [r3, #28]
 8003556:	4a87      	ldr	r2, [pc, #540]	; (8003774 <HAL_RCC_OscConfig+0x4c4>)
 8003558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800355c:	61d3      	str	r3, [r2, #28]
 800355e:	4b85      	ldr	r3, [pc, #532]	; (8003774 <HAL_RCC_OscConfig+0x4c4>)
 8003560:	69db      	ldr	r3, [r3, #28]
 8003562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003566:	60bb      	str	r3, [r7, #8]
 8003568:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800356a:	2301      	movs	r3, #1
 800356c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800356e:	4b82      	ldr	r3, [pc, #520]	; (8003778 <HAL_RCC_OscConfig+0x4c8>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003576:	2b00      	cmp	r3, #0
 8003578:	d118      	bne.n	80035ac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800357a:	4b7f      	ldr	r3, [pc, #508]	; (8003778 <HAL_RCC_OscConfig+0x4c8>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a7e      	ldr	r2, [pc, #504]	; (8003778 <HAL_RCC_OscConfig+0x4c8>)
 8003580:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003584:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003586:	f7ff fae7 	bl	8002b58 <HAL_GetTick>
 800358a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800358c:	e008      	b.n	80035a0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800358e:	f7ff fae3 	bl	8002b58 <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	2b64      	cmp	r3, #100	; 0x64
 800359a:	d901      	bls.n	80035a0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e103      	b.n	80037a8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035a0:	4b75      	ldr	r3, [pc, #468]	; (8003778 <HAL_RCC_OscConfig+0x4c8>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d0f0      	beq.n	800358e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d106      	bne.n	80035c2 <HAL_RCC_OscConfig+0x312>
 80035b4:	4b6f      	ldr	r3, [pc, #444]	; (8003774 <HAL_RCC_OscConfig+0x4c4>)
 80035b6:	6a1b      	ldr	r3, [r3, #32]
 80035b8:	4a6e      	ldr	r2, [pc, #440]	; (8003774 <HAL_RCC_OscConfig+0x4c4>)
 80035ba:	f043 0301 	orr.w	r3, r3, #1
 80035be:	6213      	str	r3, [r2, #32]
 80035c0:	e02d      	b.n	800361e <HAL_RCC_OscConfig+0x36e>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d10c      	bne.n	80035e4 <HAL_RCC_OscConfig+0x334>
 80035ca:	4b6a      	ldr	r3, [pc, #424]	; (8003774 <HAL_RCC_OscConfig+0x4c4>)
 80035cc:	6a1b      	ldr	r3, [r3, #32]
 80035ce:	4a69      	ldr	r2, [pc, #420]	; (8003774 <HAL_RCC_OscConfig+0x4c4>)
 80035d0:	f023 0301 	bic.w	r3, r3, #1
 80035d4:	6213      	str	r3, [r2, #32]
 80035d6:	4b67      	ldr	r3, [pc, #412]	; (8003774 <HAL_RCC_OscConfig+0x4c4>)
 80035d8:	6a1b      	ldr	r3, [r3, #32]
 80035da:	4a66      	ldr	r2, [pc, #408]	; (8003774 <HAL_RCC_OscConfig+0x4c4>)
 80035dc:	f023 0304 	bic.w	r3, r3, #4
 80035e0:	6213      	str	r3, [r2, #32]
 80035e2:	e01c      	b.n	800361e <HAL_RCC_OscConfig+0x36e>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	2b05      	cmp	r3, #5
 80035ea:	d10c      	bne.n	8003606 <HAL_RCC_OscConfig+0x356>
 80035ec:	4b61      	ldr	r3, [pc, #388]	; (8003774 <HAL_RCC_OscConfig+0x4c4>)
 80035ee:	6a1b      	ldr	r3, [r3, #32]
 80035f0:	4a60      	ldr	r2, [pc, #384]	; (8003774 <HAL_RCC_OscConfig+0x4c4>)
 80035f2:	f043 0304 	orr.w	r3, r3, #4
 80035f6:	6213      	str	r3, [r2, #32]
 80035f8:	4b5e      	ldr	r3, [pc, #376]	; (8003774 <HAL_RCC_OscConfig+0x4c4>)
 80035fa:	6a1b      	ldr	r3, [r3, #32]
 80035fc:	4a5d      	ldr	r2, [pc, #372]	; (8003774 <HAL_RCC_OscConfig+0x4c4>)
 80035fe:	f043 0301 	orr.w	r3, r3, #1
 8003602:	6213      	str	r3, [r2, #32]
 8003604:	e00b      	b.n	800361e <HAL_RCC_OscConfig+0x36e>
 8003606:	4b5b      	ldr	r3, [pc, #364]	; (8003774 <HAL_RCC_OscConfig+0x4c4>)
 8003608:	6a1b      	ldr	r3, [r3, #32]
 800360a:	4a5a      	ldr	r2, [pc, #360]	; (8003774 <HAL_RCC_OscConfig+0x4c4>)
 800360c:	f023 0301 	bic.w	r3, r3, #1
 8003610:	6213      	str	r3, [r2, #32]
 8003612:	4b58      	ldr	r3, [pc, #352]	; (8003774 <HAL_RCC_OscConfig+0x4c4>)
 8003614:	6a1b      	ldr	r3, [r3, #32]
 8003616:	4a57      	ldr	r2, [pc, #348]	; (8003774 <HAL_RCC_OscConfig+0x4c4>)
 8003618:	f023 0304 	bic.w	r3, r3, #4
 800361c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d015      	beq.n	8003652 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003626:	f7ff fa97 	bl	8002b58 <HAL_GetTick>
 800362a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800362c:	e00a      	b.n	8003644 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800362e:	f7ff fa93 	bl	8002b58 <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	f241 3288 	movw	r2, #5000	; 0x1388
 800363c:	4293      	cmp	r3, r2
 800363e:	d901      	bls.n	8003644 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e0b1      	b.n	80037a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003644:	4b4b      	ldr	r3, [pc, #300]	; (8003774 <HAL_RCC_OscConfig+0x4c4>)
 8003646:	6a1b      	ldr	r3, [r3, #32]
 8003648:	f003 0302 	and.w	r3, r3, #2
 800364c:	2b00      	cmp	r3, #0
 800364e:	d0ee      	beq.n	800362e <HAL_RCC_OscConfig+0x37e>
 8003650:	e014      	b.n	800367c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003652:	f7ff fa81 	bl	8002b58 <HAL_GetTick>
 8003656:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003658:	e00a      	b.n	8003670 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800365a:	f7ff fa7d 	bl	8002b58 <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	f241 3288 	movw	r2, #5000	; 0x1388
 8003668:	4293      	cmp	r3, r2
 800366a:	d901      	bls.n	8003670 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e09b      	b.n	80037a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003670:	4b40      	ldr	r3, [pc, #256]	; (8003774 <HAL_RCC_OscConfig+0x4c4>)
 8003672:	6a1b      	ldr	r3, [r3, #32]
 8003674:	f003 0302 	and.w	r3, r3, #2
 8003678:	2b00      	cmp	r3, #0
 800367a:	d1ee      	bne.n	800365a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800367c:	7dfb      	ldrb	r3, [r7, #23]
 800367e:	2b01      	cmp	r3, #1
 8003680:	d105      	bne.n	800368e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003682:	4b3c      	ldr	r3, [pc, #240]	; (8003774 <HAL_RCC_OscConfig+0x4c4>)
 8003684:	69db      	ldr	r3, [r3, #28]
 8003686:	4a3b      	ldr	r2, [pc, #236]	; (8003774 <HAL_RCC_OscConfig+0x4c4>)
 8003688:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800368c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	69db      	ldr	r3, [r3, #28]
 8003692:	2b00      	cmp	r3, #0
 8003694:	f000 8087 	beq.w	80037a6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003698:	4b36      	ldr	r3, [pc, #216]	; (8003774 <HAL_RCC_OscConfig+0x4c4>)
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f003 030c 	and.w	r3, r3, #12
 80036a0:	2b08      	cmp	r3, #8
 80036a2:	d061      	beq.n	8003768 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	69db      	ldr	r3, [r3, #28]
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d146      	bne.n	800373a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ac:	4b33      	ldr	r3, [pc, #204]	; (800377c <HAL_RCC_OscConfig+0x4cc>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b2:	f7ff fa51 	bl	8002b58 <HAL_GetTick>
 80036b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036b8:	e008      	b.n	80036cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036ba:	f7ff fa4d 	bl	8002b58 <HAL_GetTick>
 80036be:	4602      	mov	r2, r0
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d901      	bls.n	80036cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80036c8:	2303      	movs	r3, #3
 80036ca:	e06d      	b.n	80037a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036cc:	4b29      	ldr	r3, [pc, #164]	; (8003774 <HAL_RCC_OscConfig+0x4c4>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d1f0      	bne.n	80036ba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a1b      	ldr	r3, [r3, #32]
 80036dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036e0:	d108      	bne.n	80036f4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80036e2:	4b24      	ldr	r3, [pc, #144]	; (8003774 <HAL_RCC_OscConfig+0x4c4>)
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	4921      	ldr	r1, [pc, #132]	; (8003774 <HAL_RCC_OscConfig+0x4c4>)
 80036f0:	4313      	orrs	r3, r2
 80036f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036f4:	4b1f      	ldr	r3, [pc, #124]	; (8003774 <HAL_RCC_OscConfig+0x4c4>)
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a19      	ldr	r1, [r3, #32]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003704:	430b      	orrs	r3, r1
 8003706:	491b      	ldr	r1, [pc, #108]	; (8003774 <HAL_RCC_OscConfig+0x4c4>)
 8003708:	4313      	orrs	r3, r2
 800370a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800370c:	4b1b      	ldr	r3, [pc, #108]	; (800377c <HAL_RCC_OscConfig+0x4cc>)
 800370e:	2201      	movs	r2, #1
 8003710:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003712:	f7ff fa21 	bl	8002b58 <HAL_GetTick>
 8003716:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003718:	e008      	b.n	800372c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800371a:	f7ff fa1d 	bl	8002b58 <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	2b02      	cmp	r3, #2
 8003726:	d901      	bls.n	800372c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e03d      	b.n	80037a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800372c:	4b11      	ldr	r3, [pc, #68]	; (8003774 <HAL_RCC_OscConfig+0x4c4>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d0f0      	beq.n	800371a <HAL_RCC_OscConfig+0x46a>
 8003738:	e035      	b.n	80037a6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800373a:	4b10      	ldr	r3, [pc, #64]	; (800377c <HAL_RCC_OscConfig+0x4cc>)
 800373c:	2200      	movs	r2, #0
 800373e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003740:	f7ff fa0a 	bl	8002b58 <HAL_GetTick>
 8003744:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003746:	e008      	b.n	800375a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003748:	f7ff fa06 	bl	8002b58 <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b02      	cmp	r3, #2
 8003754:	d901      	bls.n	800375a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e026      	b.n	80037a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800375a:	4b06      	ldr	r3, [pc, #24]	; (8003774 <HAL_RCC_OscConfig+0x4c4>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d1f0      	bne.n	8003748 <HAL_RCC_OscConfig+0x498>
 8003766:	e01e      	b.n	80037a6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	69db      	ldr	r3, [r3, #28]
 800376c:	2b01      	cmp	r3, #1
 800376e:	d107      	bne.n	8003780 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e019      	b.n	80037a8 <HAL_RCC_OscConfig+0x4f8>
 8003774:	40021000 	.word	0x40021000
 8003778:	40007000 	.word	0x40007000
 800377c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003780:	4b0b      	ldr	r3, [pc, #44]	; (80037b0 <HAL_RCC_OscConfig+0x500>)
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a1b      	ldr	r3, [r3, #32]
 8003790:	429a      	cmp	r2, r3
 8003792:	d106      	bne.n	80037a2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800379e:	429a      	cmp	r2, r3
 80037a0:	d001      	beq.n	80037a6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e000      	b.n	80037a8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80037a6:	2300      	movs	r3, #0
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3718      	adds	r7, #24
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	40021000 	.word	0x40021000

080037b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d101      	bne.n	80037c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e0d0      	b.n	800396a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037c8:	4b6a      	ldr	r3, [pc, #424]	; (8003974 <HAL_RCC_ClockConfig+0x1c0>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0307 	and.w	r3, r3, #7
 80037d0:	683a      	ldr	r2, [r7, #0]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d910      	bls.n	80037f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037d6:	4b67      	ldr	r3, [pc, #412]	; (8003974 <HAL_RCC_ClockConfig+0x1c0>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f023 0207 	bic.w	r2, r3, #7
 80037de:	4965      	ldr	r1, [pc, #404]	; (8003974 <HAL_RCC_ClockConfig+0x1c0>)
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037e6:	4b63      	ldr	r3, [pc, #396]	; (8003974 <HAL_RCC_ClockConfig+0x1c0>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0307 	and.w	r3, r3, #7
 80037ee:	683a      	ldr	r2, [r7, #0]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d001      	beq.n	80037f8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e0b8      	b.n	800396a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0302 	and.w	r3, r3, #2
 8003800:	2b00      	cmp	r3, #0
 8003802:	d020      	beq.n	8003846 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0304 	and.w	r3, r3, #4
 800380c:	2b00      	cmp	r3, #0
 800380e:	d005      	beq.n	800381c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003810:	4b59      	ldr	r3, [pc, #356]	; (8003978 <HAL_RCC_ClockConfig+0x1c4>)
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	4a58      	ldr	r2, [pc, #352]	; (8003978 <HAL_RCC_ClockConfig+0x1c4>)
 8003816:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800381a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0308 	and.w	r3, r3, #8
 8003824:	2b00      	cmp	r3, #0
 8003826:	d005      	beq.n	8003834 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003828:	4b53      	ldr	r3, [pc, #332]	; (8003978 <HAL_RCC_ClockConfig+0x1c4>)
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	4a52      	ldr	r2, [pc, #328]	; (8003978 <HAL_RCC_ClockConfig+0x1c4>)
 800382e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003832:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003834:	4b50      	ldr	r3, [pc, #320]	; (8003978 <HAL_RCC_ClockConfig+0x1c4>)
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	494d      	ldr	r1, [pc, #308]	; (8003978 <HAL_RCC_ClockConfig+0x1c4>)
 8003842:	4313      	orrs	r3, r2
 8003844:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0301 	and.w	r3, r3, #1
 800384e:	2b00      	cmp	r3, #0
 8003850:	d040      	beq.n	80038d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	2b01      	cmp	r3, #1
 8003858:	d107      	bne.n	800386a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800385a:	4b47      	ldr	r3, [pc, #284]	; (8003978 <HAL_RCC_ClockConfig+0x1c4>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d115      	bne.n	8003892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e07f      	b.n	800396a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	2b02      	cmp	r3, #2
 8003870:	d107      	bne.n	8003882 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003872:	4b41      	ldr	r3, [pc, #260]	; (8003978 <HAL_RCC_ClockConfig+0x1c4>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d109      	bne.n	8003892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e073      	b.n	800396a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003882:	4b3d      	ldr	r3, [pc, #244]	; (8003978 <HAL_RCC_ClockConfig+0x1c4>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0302 	and.w	r3, r3, #2
 800388a:	2b00      	cmp	r3, #0
 800388c:	d101      	bne.n	8003892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e06b      	b.n	800396a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003892:	4b39      	ldr	r3, [pc, #228]	; (8003978 <HAL_RCC_ClockConfig+0x1c4>)
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f023 0203 	bic.w	r2, r3, #3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	4936      	ldr	r1, [pc, #216]	; (8003978 <HAL_RCC_ClockConfig+0x1c4>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038a4:	f7ff f958 	bl	8002b58 <HAL_GetTick>
 80038a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038aa:	e00a      	b.n	80038c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038ac:	f7ff f954 	bl	8002b58 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e053      	b.n	800396a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038c2:	4b2d      	ldr	r3, [pc, #180]	; (8003978 <HAL_RCC_ClockConfig+0x1c4>)
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f003 020c 	and.w	r2, r3, #12
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d1eb      	bne.n	80038ac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038d4:	4b27      	ldr	r3, [pc, #156]	; (8003974 <HAL_RCC_ClockConfig+0x1c0>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0307 	and.w	r3, r3, #7
 80038dc:	683a      	ldr	r2, [r7, #0]
 80038de:	429a      	cmp	r2, r3
 80038e0:	d210      	bcs.n	8003904 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038e2:	4b24      	ldr	r3, [pc, #144]	; (8003974 <HAL_RCC_ClockConfig+0x1c0>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f023 0207 	bic.w	r2, r3, #7
 80038ea:	4922      	ldr	r1, [pc, #136]	; (8003974 <HAL_RCC_ClockConfig+0x1c0>)
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038f2:	4b20      	ldr	r3, [pc, #128]	; (8003974 <HAL_RCC_ClockConfig+0x1c0>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0307 	and.w	r3, r3, #7
 80038fa:	683a      	ldr	r2, [r7, #0]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d001      	beq.n	8003904 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e032      	b.n	800396a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0304 	and.w	r3, r3, #4
 800390c:	2b00      	cmp	r3, #0
 800390e:	d008      	beq.n	8003922 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003910:	4b19      	ldr	r3, [pc, #100]	; (8003978 <HAL_RCC_ClockConfig+0x1c4>)
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	4916      	ldr	r1, [pc, #88]	; (8003978 <HAL_RCC_ClockConfig+0x1c4>)
 800391e:	4313      	orrs	r3, r2
 8003920:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0308 	and.w	r3, r3, #8
 800392a:	2b00      	cmp	r3, #0
 800392c:	d009      	beq.n	8003942 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800392e:	4b12      	ldr	r3, [pc, #72]	; (8003978 <HAL_RCC_ClockConfig+0x1c4>)
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	00db      	lsls	r3, r3, #3
 800393c:	490e      	ldr	r1, [pc, #56]	; (8003978 <HAL_RCC_ClockConfig+0x1c4>)
 800393e:	4313      	orrs	r3, r2
 8003940:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003942:	f000 f821 	bl	8003988 <HAL_RCC_GetSysClockFreq>
 8003946:	4602      	mov	r2, r0
 8003948:	4b0b      	ldr	r3, [pc, #44]	; (8003978 <HAL_RCC_ClockConfig+0x1c4>)
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	091b      	lsrs	r3, r3, #4
 800394e:	f003 030f 	and.w	r3, r3, #15
 8003952:	490a      	ldr	r1, [pc, #40]	; (800397c <HAL_RCC_ClockConfig+0x1c8>)
 8003954:	5ccb      	ldrb	r3, [r1, r3]
 8003956:	fa22 f303 	lsr.w	r3, r2, r3
 800395a:	4a09      	ldr	r2, [pc, #36]	; (8003980 <HAL_RCC_ClockConfig+0x1cc>)
 800395c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800395e:	4b09      	ldr	r3, [pc, #36]	; (8003984 <HAL_RCC_ClockConfig+0x1d0>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4618      	mov	r0, r3
 8003964:	f7ff f8b6 	bl	8002ad4 <HAL_InitTick>

  return HAL_OK;
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3710      	adds	r7, #16
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	40022000 	.word	0x40022000
 8003978:	40021000 	.word	0x40021000
 800397c:	0800c514 	.word	0x0800c514
 8003980:	20000000 	.word	0x20000000
 8003984:	20000004 	.word	0x20000004

08003988 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003988:	b490      	push	{r4, r7}
 800398a:	b08a      	sub	sp, #40	; 0x28
 800398c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800398e:	4b29      	ldr	r3, [pc, #164]	; (8003a34 <HAL_RCC_GetSysClockFreq+0xac>)
 8003990:	1d3c      	adds	r4, r7, #4
 8003992:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003994:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003998:	f240 2301 	movw	r3, #513	; 0x201
 800399c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800399e:	2300      	movs	r3, #0
 80039a0:	61fb      	str	r3, [r7, #28]
 80039a2:	2300      	movs	r3, #0
 80039a4:	61bb      	str	r3, [r7, #24]
 80039a6:	2300      	movs	r3, #0
 80039a8:	627b      	str	r3, [r7, #36]	; 0x24
 80039aa:	2300      	movs	r3, #0
 80039ac:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80039ae:	2300      	movs	r3, #0
 80039b0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80039b2:	4b21      	ldr	r3, [pc, #132]	; (8003a38 <HAL_RCC_GetSysClockFreq+0xb0>)
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	f003 030c 	and.w	r3, r3, #12
 80039be:	2b04      	cmp	r3, #4
 80039c0:	d002      	beq.n	80039c8 <HAL_RCC_GetSysClockFreq+0x40>
 80039c2:	2b08      	cmp	r3, #8
 80039c4:	d003      	beq.n	80039ce <HAL_RCC_GetSysClockFreq+0x46>
 80039c6:	e02b      	b.n	8003a20 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80039c8:	4b1c      	ldr	r3, [pc, #112]	; (8003a3c <HAL_RCC_GetSysClockFreq+0xb4>)
 80039ca:	623b      	str	r3, [r7, #32]
      break;
 80039cc:	e02b      	b.n	8003a26 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	0c9b      	lsrs	r3, r3, #18
 80039d2:	f003 030f 	and.w	r3, r3, #15
 80039d6:	3328      	adds	r3, #40	; 0x28
 80039d8:	443b      	add	r3, r7
 80039da:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80039de:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d012      	beq.n	8003a10 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80039ea:	4b13      	ldr	r3, [pc, #76]	; (8003a38 <HAL_RCC_GetSysClockFreq+0xb0>)
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	0c5b      	lsrs	r3, r3, #17
 80039f0:	f003 0301 	and.w	r3, r3, #1
 80039f4:	3328      	adds	r3, #40	; 0x28
 80039f6:	443b      	add	r3, r7
 80039f8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80039fc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	4a0e      	ldr	r2, [pc, #56]	; (8003a3c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003a02:	fb03 f202 	mul.w	r2, r3, r2
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a0c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a0e:	e004      	b.n	8003a1a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	4a0b      	ldr	r2, [pc, #44]	; (8003a40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a14:	fb02 f303 	mul.w	r3, r2, r3
 8003a18:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1c:	623b      	str	r3, [r7, #32]
      break;
 8003a1e:	e002      	b.n	8003a26 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a20:	4b06      	ldr	r3, [pc, #24]	; (8003a3c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003a22:	623b      	str	r3, [r7, #32]
      break;
 8003a24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a26:	6a3b      	ldr	r3, [r7, #32]
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3728      	adds	r7, #40	; 0x28
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bc90      	pop	{r4, r7}
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	0800c504 	.word	0x0800c504
 8003a38:	40021000 	.word	0x40021000
 8003a3c:	007a1200 	.word	0x007a1200
 8003a40:	003d0900 	.word	0x003d0900

08003a44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a44:	b480      	push	{r7}
 8003a46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a48:	4b02      	ldr	r3, [pc, #8]	; (8003a54 <HAL_RCC_GetHCLKFreq+0x10>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bc80      	pop	{r7}
 8003a52:	4770      	bx	lr
 8003a54:	20000000 	.word	0x20000000

08003a58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a5c:	f7ff fff2 	bl	8003a44 <HAL_RCC_GetHCLKFreq>
 8003a60:	4602      	mov	r2, r0
 8003a62:	4b05      	ldr	r3, [pc, #20]	; (8003a78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	0a1b      	lsrs	r3, r3, #8
 8003a68:	f003 0307 	and.w	r3, r3, #7
 8003a6c:	4903      	ldr	r1, [pc, #12]	; (8003a7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a6e:	5ccb      	ldrb	r3, [r1, r3]
 8003a70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	40021000 	.word	0x40021000
 8003a7c:	0800c524 	.word	0x0800c524

08003a80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a84:	f7ff ffde 	bl	8003a44 <HAL_RCC_GetHCLKFreq>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	4b05      	ldr	r3, [pc, #20]	; (8003aa0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	0adb      	lsrs	r3, r3, #11
 8003a90:	f003 0307 	and.w	r3, r3, #7
 8003a94:	4903      	ldr	r1, [pc, #12]	; (8003aa4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a96:	5ccb      	ldrb	r3, [r1, r3]
 8003a98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	40021000 	.word	0x40021000
 8003aa4:	0800c524 	.word	0x0800c524

08003aa8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b085      	sub	sp, #20
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003ab0:	4b0a      	ldr	r3, [pc, #40]	; (8003adc <RCC_Delay+0x34>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a0a      	ldr	r2, [pc, #40]	; (8003ae0 <RCC_Delay+0x38>)
 8003ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aba:	0a5b      	lsrs	r3, r3, #9
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	fb02 f303 	mul.w	r3, r2, r3
 8003ac2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003ac4:	bf00      	nop
  }
  while (Delay --);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	1e5a      	subs	r2, r3, #1
 8003aca:	60fa      	str	r2, [r7, #12]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1f9      	bne.n	8003ac4 <RCC_Delay+0x1c>
}
 8003ad0:	bf00      	nop
 8003ad2:	bf00      	nop
 8003ad4:	3714      	adds	r7, #20
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bc80      	pop	{r7}
 8003ada:	4770      	bx	lr
 8003adc:	20000000 	.word	0x20000000
 8003ae0:	10624dd3 	.word	0x10624dd3

08003ae4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d101      	bne.n	8003af6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e076      	b.n	8003be4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d108      	bne.n	8003b10 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b06:	d009      	beq.n	8003b1c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	61da      	str	r2, [r3, #28]
 8003b0e:	e005      	b.n	8003b1c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d106      	bne.n	8003b3c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f7fe fc48 	bl	80023cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2202      	movs	r2, #2
 8003b40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b52:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003b64:	431a      	orrs	r2, r3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b6e:	431a      	orrs	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	691b      	ldr	r3, [r3, #16]
 8003b74:	f003 0302 	and.w	r3, r3, #2
 8003b78:	431a      	orrs	r2, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	f003 0301 	and.w	r3, r3, #1
 8003b82:	431a      	orrs	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	699b      	ldr	r3, [r3, #24]
 8003b88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b8c:	431a      	orrs	r2, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	69db      	ldr	r3, [r3, #28]
 8003b92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b96:	431a      	orrs	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a1b      	ldr	r3, [r3, #32]
 8003b9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ba0:	ea42 0103 	orr.w	r1, r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	430a      	orrs	r2, r1
 8003bb2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	699b      	ldr	r3, [r3, #24]
 8003bb8:	0c1a      	lsrs	r2, r3, #16
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f002 0204 	and.w	r2, r2, #4
 8003bc2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	69da      	ldr	r2, [r3, #28]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bd2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003be2:	2300      	movs	r3, #0
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3708      	adds	r7, #8
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b088      	sub	sp, #32
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	603b      	str	r3, [r7, #0]
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d101      	bne.n	8003c0e <HAL_SPI_Transmit+0x22>
 8003c0a:	2302      	movs	r3, #2
 8003c0c:	e126      	b.n	8003e5c <HAL_SPI_Transmit+0x270>
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2201      	movs	r2, #1
 8003c12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c16:	f7fe ff9f 	bl	8002b58 <HAL_GetTick>
 8003c1a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003c1c:	88fb      	ldrh	r3, [r7, #6]
 8003c1e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d002      	beq.n	8003c32 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003c2c:	2302      	movs	r3, #2
 8003c2e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c30:	e10b      	b.n	8003e4a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d002      	beq.n	8003c3e <HAL_SPI_Transmit+0x52>
 8003c38:	88fb      	ldrh	r3, [r7, #6]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d102      	bne.n	8003c44 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c42:	e102      	b.n	8003e4a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2203      	movs	r2, #3
 8003c48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	68ba      	ldr	r2, [r7, #8]
 8003c56:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	88fa      	ldrh	r2, [r7, #6]
 8003c5c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	88fa      	ldrh	r2, [r7, #6]
 8003c62:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2200      	movs	r2, #0
 8003c68:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2200      	movs	r2, #0
 8003c74:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c8a:	d10f      	bne.n	8003cac <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c9a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003caa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cb6:	2b40      	cmp	r3, #64	; 0x40
 8003cb8:	d007      	beq.n	8003cca <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cc8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cd2:	d14b      	bne.n	8003d6c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d002      	beq.n	8003ce2 <HAL_SPI_Transmit+0xf6>
 8003cdc:	8afb      	ldrh	r3, [r7, #22]
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d13e      	bne.n	8003d60 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce6:	881a      	ldrh	r2, [r3, #0]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf2:	1c9a      	adds	r2, r3, #2
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	3b01      	subs	r3, #1
 8003d00:	b29a      	uxth	r2, r3
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003d06:	e02b      	b.n	8003d60 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f003 0302 	and.w	r3, r3, #2
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d112      	bne.n	8003d3c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1a:	881a      	ldrh	r2, [r3, #0]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d26:	1c9a      	adds	r2, r3, #2
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	3b01      	subs	r3, #1
 8003d34:	b29a      	uxth	r2, r3
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	86da      	strh	r2, [r3, #54]	; 0x36
 8003d3a:	e011      	b.n	8003d60 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d3c:	f7fe ff0c 	bl	8002b58 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	683a      	ldr	r2, [r7, #0]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d803      	bhi.n	8003d54 <HAL_SPI_Transmit+0x168>
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d52:	d102      	bne.n	8003d5a <HAL_SPI_Transmit+0x16e>
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d102      	bne.n	8003d60 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003d5e:	e074      	b.n	8003e4a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d1ce      	bne.n	8003d08 <HAL_SPI_Transmit+0x11c>
 8003d6a:	e04c      	b.n	8003e06 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d002      	beq.n	8003d7a <HAL_SPI_Transmit+0x18e>
 8003d74:	8afb      	ldrh	r3, [r7, #22]
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d140      	bne.n	8003dfc <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	330c      	adds	r3, #12
 8003d84:	7812      	ldrb	r2, [r2, #0]
 8003d86:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8c:	1c5a      	adds	r2, r3, #1
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	3b01      	subs	r3, #1
 8003d9a:	b29a      	uxth	r2, r3
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003da0:	e02c      	b.n	8003dfc <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f003 0302 	and.w	r3, r3, #2
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d113      	bne.n	8003dd8 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	330c      	adds	r3, #12
 8003dba:	7812      	ldrb	r2, [r2, #0]
 8003dbc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc2:	1c5a      	adds	r2, r3, #1
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	b29a      	uxth	r2, r3
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	86da      	strh	r2, [r3, #54]	; 0x36
 8003dd6:	e011      	b.n	8003dfc <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003dd8:	f7fe febe 	bl	8002b58 <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	683a      	ldr	r2, [r7, #0]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d803      	bhi.n	8003df0 <HAL_SPI_Transmit+0x204>
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dee:	d102      	bne.n	8003df6 <HAL_SPI_Transmit+0x20a>
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d102      	bne.n	8003dfc <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003dfa:	e026      	b.n	8003e4a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d1cd      	bne.n	8003da2 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e06:	69ba      	ldr	r2, [r7, #24]
 8003e08:	6839      	ldr	r1, [r7, #0]
 8003e0a:	68f8      	ldr	r0, [r7, #12]
 8003e0c:	f000 f8b2 	bl	8003f74 <SPI_EndRxTxTransaction>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d002      	beq.n	8003e1c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2220      	movs	r2, #32
 8003e1a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d10a      	bne.n	8003e3a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e24:	2300      	movs	r3, #0
 8003e26:	613b      	str	r3, [r7, #16]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	613b      	str	r3, [r7, #16]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	613b      	str	r3, [r7, #16]
 8003e38:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d002      	beq.n	8003e48 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	77fb      	strb	r3, [r7, #31]
 8003e46:	e000      	b.n	8003e4a <HAL_SPI_Transmit+0x25e>
  }

error:
 8003e48:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2200      	movs	r2, #0
 8003e56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003e5a:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3720      	adds	r7, #32
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b088      	sub	sp, #32
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	603b      	str	r3, [r7, #0]
 8003e70:	4613      	mov	r3, r2
 8003e72:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003e74:	f7fe fe70 	bl	8002b58 <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e7c:	1a9b      	subs	r3, r3, r2
 8003e7e:	683a      	ldr	r2, [r7, #0]
 8003e80:	4413      	add	r3, r2
 8003e82:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003e84:	f7fe fe68 	bl	8002b58 <HAL_GetTick>
 8003e88:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003e8a:	4b39      	ldr	r3, [pc, #228]	; (8003f70 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	015b      	lsls	r3, r3, #5
 8003e90:	0d1b      	lsrs	r3, r3, #20
 8003e92:	69fa      	ldr	r2, [r7, #28]
 8003e94:	fb02 f303 	mul.w	r3, r2, r3
 8003e98:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e9a:	e054      	b.n	8003f46 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ea2:	d050      	beq.n	8003f46 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ea4:	f7fe fe58 	bl	8002b58 <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	69bb      	ldr	r3, [r7, #24]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	69fa      	ldr	r2, [r7, #28]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d902      	bls.n	8003eba <SPI_WaitFlagStateUntilTimeout+0x56>
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d13d      	bne.n	8003f36 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	685a      	ldr	r2, [r3, #4]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003ec8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ed2:	d111      	bne.n	8003ef8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003edc:	d004      	beq.n	8003ee8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ee6:	d107      	bne.n	8003ef8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ef6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003efc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f00:	d10f      	bne.n	8003f22 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f10:	601a      	str	r2, [r3, #0]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f20:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2201      	movs	r2, #1
 8003f26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	e017      	b.n	8003f66 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d101      	bne.n	8003f40 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	3b01      	subs	r3, #1
 8003f44:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	689a      	ldr	r2, [r3, #8]
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	4013      	ands	r3, r2
 8003f50:	68ba      	ldr	r2, [r7, #8]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	bf0c      	ite	eq
 8003f56:	2301      	moveq	r3, #1
 8003f58:	2300      	movne	r3, #0
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	79fb      	ldrb	r3, [r7, #7]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d19b      	bne.n	8003e9c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003f64:	2300      	movs	r3, #0
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3720      	adds	r7, #32
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	20000000 	.word	0x20000000

08003f74 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b086      	sub	sp, #24
 8003f78:	af02      	add	r7, sp, #8
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	9300      	str	r3, [sp, #0]
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	2200      	movs	r2, #0
 8003f88:	2180      	movs	r1, #128	; 0x80
 8003f8a:	68f8      	ldr	r0, [r7, #12]
 8003f8c:	f7ff ff6a 	bl	8003e64 <SPI_WaitFlagStateUntilTimeout>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d007      	beq.n	8003fa6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f9a:	f043 0220 	orr.w	r2, r3, #32
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e000      	b.n	8003fa8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003fa6:	2300      	movs	r3, #0
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3710      	adds	r7, #16
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b082      	sub	sp, #8
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d101      	bne.n	8003fc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e03f      	b.n	8004042 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d106      	bne.n	8003fdc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f7fe fa36 	bl	8002448 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2224      	movs	r2, #36	; 0x24
 8003fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	68da      	ldr	r2, [r3, #12]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ff2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f000 fc25 	bl	8004844 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	691a      	ldr	r2, [r3, #16]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004008:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	695a      	ldr	r2, [r3, #20]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004018:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	68da      	ldr	r2, [r3, #12]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004028:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2220      	movs	r2, #32
 8004034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2220      	movs	r2, #32
 800403c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	3708      	adds	r7, #8
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}

0800404a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800404a:	b580      	push	{r7, lr}
 800404c:	b08a      	sub	sp, #40	; 0x28
 800404e:	af02      	add	r7, sp, #8
 8004050:	60f8      	str	r0, [r7, #12]
 8004052:	60b9      	str	r1, [r7, #8]
 8004054:	603b      	str	r3, [r7, #0]
 8004056:	4613      	mov	r3, r2
 8004058:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800405a:	2300      	movs	r3, #0
 800405c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004064:	b2db      	uxtb	r3, r3
 8004066:	2b20      	cmp	r3, #32
 8004068:	d17c      	bne.n	8004164 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d002      	beq.n	8004076 <HAL_UART_Transmit+0x2c>
 8004070:	88fb      	ldrh	r3, [r7, #6]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d101      	bne.n	800407a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e075      	b.n	8004166 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004080:	2b01      	cmp	r3, #1
 8004082:	d101      	bne.n	8004088 <HAL_UART_Transmit+0x3e>
 8004084:	2302      	movs	r3, #2
 8004086:	e06e      	b.n	8004166 <HAL_UART_Transmit+0x11c>
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2200      	movs	r2, #0
 8004094:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2221      	movs	r2, #33	; 0x21
 800409a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800409e:	f7fe fd5b 	bl	8002b58 <HAL_GetTick>
 80040a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	88fa      	ldrh	r2, [r7, #6]
 80040a8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	88fa      	ldrh	r2, [r7, #6]
 80040ae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040b8:	d108      	bne.n	80040cc <HAL_UART_Transmit+0x82>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d104      	bne.n	80040cc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80040c2:	2300      	movs	r3, #0
 80040c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	61bb      	str	r3, [r7, #24]
 80040ca:	e003      	b.n	80040d4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040d0:	2300      	movs	r3, #0
 80040d2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80040dc:	e02a      	b.n	8004134 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	9300      	str	r3, [sp, #0]
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	2200      	movs	r2, #0
 80040e6:	2180      	movs	r1, #128	; 0x80
 80040e8:	68f8      	ldr	r0, [r7, #12]
 80040ea:	f000 fa11 	bl	8004510 <UART_WaitOnFlagUntilTimeout>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d001      	beq.n	80040f8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80040f4:	2303      	movs	r3, #3
 80040f6:	e036      	b.n	8004166 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d10b      	bne.n	8004116 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040fe:	69bb      	ldr	r3, [r7, #24]
 8004100:	881b      	ldrh	r3, [r3, #0]
 8004102:	461a      	mov	r2, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800410c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	3302      	adds	r3, #2
 8004112:	61bb      	str	r3, [r7, #24]
 8004114:	e007      	b.n	8004126 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	781a      	ldrb	r2, [r3, #0]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	3301      	adds	r3, #1
 8004124:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800412a:	b29b      	uxth	r3, r3
 800412c:	3b01      	subs	r3, #1
 800412e:	b29a      	uxth	r2, r3
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004138:	b29b      	uxth	r3, r3
 800413a:	2b00      	cmp	r3, #0
 800413c:	d1cf      	bne.n	80040de <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	9300      	str	r3, [sp, #0]
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	2200      	movs	r2, #0
 8004146:	2140      	movs	r1, #64	; 0x40
 8004148:	68f8      	ldr	r0, [r7, #12]
 800414a:	f000 f9e1 	bl	8004510 <UART_WaitOnFlagUntilTimeout>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d001      	beq.n	8004158 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004154:	2303      	movs	r3, #3
 8004156:	e006      	b.n	8004166 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2220      	movs	r2, #32
 800415c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004160:	2300      	movs	r3, #0
 8004162:	e000      	b.n	8004166 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004164:	2302      	movs	r3, #2
  }
}
 8004166:	4618      	mov	r0, r3
 8004168:	3720      	adds	r7, #32
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
	...

08004170 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b08a      	sub	sp, #40	; 0x28
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	695b      	ldr	r3, [r3, #20]
 800418e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004190:	2300      	movs	r3, #0
 8004192:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004194:	2300      	movs	r3, #0
 8004196:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419a:	f003 030f 	and.w	r3, r3, #15
 800419e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d10d      	bne.n	80041c2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80041a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a8:	f003 0320 	and.w	r3, r3, #32
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d008      	beq.n	80041c2 <HAL_UART_IRQHandler+0x52>
 80041b0:	6a3b      	ldr	r3, [r7, #32]
 80041b2:	f003 0320 	and.w	r3, r3, #32
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d003      	beq.n	80041c2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 fa99 	bl	80046f2 <UART_Receive_IT>
      return;
 80041c0:	e17b      	b.n	80044ba <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80041c2:	69bb      	ldr	r3, [r7, #24]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	f000 80b1 	beq.w	800432c <HAL_UART_IRQHandler+0x1bc>
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	f003 0301 	and.w	r3, r3, #1
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d105      	bne.n	80041e0 <HAL_UART_IRQHandler+0x70>
 80041d4:	6a3b      	ldr	r3, [r7, #32]
 80041d6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80041da:	2b00      	cmp	r3, #0
 80041dc:	f000 80a6 	beq.w	800432c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80041e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e2:	f003 0301 	and.w	r3, r3, #1
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d00a      	beq.n	8004200 <HAL_UART_IRQHandler+0x90>
 80041ea:	6a3b      	ldr	r3, [r7, #32]
 80041ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d005      	beq.n	8004200 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f8:	f043 0201 	orr.w	r2, r3, #1
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004202:	f003 0304 	and.w	r3, r3, #4
 8004206:	2b00      	cmp	r3, #0
 8004208:	d00a      	beq.n	8004220 <HAL_UART_IRQHandler+0xb0>
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	f003 0301 	and.w	r3, r3, #1
 8004210:	2b00      	cmp	r3, #0
 8004212:	d005      	beq.n	8004220 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004218:	f043 0202 	orr.w	r2, r3, #2
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004222:	f003 0302 	and.w	r3, r3, #2
 8004226:	2b00      	cmp	r3, #0
 8004228:	d00a      	beq.n	8004240 <HAL_UART_IRQHandler+0xd0>
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	f003 0301 	and.w	r3, r3, #1
 8004230:	2b00      	cmp	r3, #0
 8004232:	d005      	beq.n	8004240 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004238:	f043 0204 	orr.w	r2, r3, #4
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004242:	f003 0308 	and.w	r3, r3, #8
 8004246:	2b00      	cmp	r3, #0
 8004248:	d00f      	beq.n	800426a <HAL_UART_IRQHandler+0xfa>
 800424a:	6a3b      	ldr	r3, [r7, #32]
 800424c:	f003 0320 	and.w	r3, r3, #32
 8004250:	2b00      	cmp	r3, #0
 8004252:	d104      	bne.n	800425e <HAL_UART_IRQHandler+0xee>
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	f003 0301 	and.w	r3, r3, #1
 800425a:	2b00      	cmp	r3, #0
 800425c:	d005      	beq.n	800426a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004262:	f043 0208 	orr.w	r2, r3, #8
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426e:	2b00      	cmp	r3, #0
 8004270:	f000 811e 	beq.w	80044b0 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004276:	f003 0320 	and.w	r3, r3, #32
 800427a:	2b00      	cmp	r3, #0
 800427c:	d007      	beq.n	800428e <HAL_UART_IRQHandler+0x11e>
 800427e:	6a3b      	ldr	r3, [r7, #32]
 8004280:	f003 0320 	and.w	r3, r3, #32
 8004284:	2b00      	cmp	r3, #0
 8004286:	d002      	beq.n	800428e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f000 fa32 	bl	80046f2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	695b      	ldr	r3, [r3, #20]
 8004294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004298:	2b00      	cmp	r3, #0
 800429a:	bf14      	ite	ne
 800429c:	2301      	movne	r3, #1
 800429e:	2300      	moveq	r3, #0
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a8:	f003 0308 	and.w	r3, r3, #8
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d102      	bne.n	80042b6 <HAL_UART_IRQHandler+0x146>
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d031      	beq.n	800431a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 f974 	bl	80045a4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	695b      	ldr	r3, [r3, #20]
 80042c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d023      	beq.n	8004312 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	695a      	ldr	r2, [r3, #20]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042d8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d013      	beq.n	800430a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e6:	4a76      	ldr	r2, [pc, #472]	; (80044c0 <HAL_UART_IRQHandler+0x350>)
 80042e8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ee:	4618      	mov	r0, r3
 80042f0:	f7fe fdb4 	bl	8002e5c <HAL_DMA_Abort_IT>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d016      	beq.n	8004328 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004304:	4610      	mov	r0, r2
 8004306:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004308:	e00e      	b.n	8004328 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f000 f8ec 	bl	80044e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004310:	e00a      	b.n	8004328 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 f8e8 	bl	80044e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004318:	e006      	b.n	8004328 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 f8e4 	bl	80044e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004326:	e0c3      	b.n	80044b0 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004328:	bf00      	nop
    return;
 800432a:	e0c1      	b.n	80044b0 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004330:	2b01      	cmp	r3, #1
 8004332:	f040 80a1 	bne.w	8004478 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004338:	f003 0310 	and.w	r3, r3, #16
 800433c:	2b00      	cmp	r3, #0
 800433e:	f000 809b 	beq.w	8004478 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004342:	6a3b      	ldr	r3, [r7, #32]
 8004344:	f003 0310 	and.w	r3, r3, #16
 8004348:	2b00      	cmp	r3, #0
 800434a:	f000 8095 	beq.w	8004478 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800434e:	2300      	movs	r3, #0
 8004350:	60fb      	str	r3, [r7, #12]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	60fb      	str	r3, [r7, #12]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	60fb      	str	r3, [r7, #12]
 8004362:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	695b      	ldr	r3, [r3, #20]
 800436a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800436e:	2b00      	cmp	r3, #0
 8004370:	d04e      	beq.n	8004410 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800437c:	8a3b      	ldrh	r3, [r7, #16]
 800437e:	2b00      	cmp	r3, #0
 8004380:	f000 8098 	beq.w	80044b4 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004388:	8a3a      	ldrh	r2, [r7, #16]
 800438a:	429a      	cmp	r2, r3
 800438c:	f080 8092 	bcs.w	80044b4 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	8a3a      	ldrh	r2, [r7, #16]
 8004394:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800439a:	699b      	ldr	r3, [r3, #24]
 800439c:	2b20      	cmp	r3, #32
 800439e:	d02b      	beq.n	80043f8 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	68da      	ldr	r2, [r3, #12]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043ae:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	695a      	ldr	r2, [r3, #20]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f022 0201 	bic.w	r2, r2, #1
 80043be:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	695a      	ldr	r2, [r3, #20]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043ce:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2220      	movs	r2, #32
 80043d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	68da      	ldr	r2, [r3, #12]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f022 0210 	bic.w	r2, r2, #16
 80043ec:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f2:	4618      	mov	r0, r3
 80043f4:	f7fe fcf7 	bl	8002de6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004400:	b29b      	uxth	r3, r3
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	b29b      	uxth	r3, r3
 8004406:	4619      	mov	r1, r3
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f000 f876 	bl	80044fa <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800440e:	e051      	b.n	80044b4 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004418:	b29b      	uxth	r3, r3
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004422:	b29b      	uxth	r3, r3
 8004424:	2b00      	cmp	r3, #0
 8004426:	d047      	beq.n	80044b8 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004428:	8a7b      	ldrh	r3, [r7, #18]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d044      	beq.n	80044b8 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	68da      	ldr	r2, [r3, #12]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800443c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	695a      	ldr	r2, [r3, #20]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f022 0201 	bic.w	r2, r2, #1
 800444c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2220      	movs	r2, #32
 8004452:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68da      	ldr	r2, [r3, #12]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f022 0210 	bic.w	r2, r2, #16
 800446a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800446c:	8a7b      	ldrh	r3, [r7, #18]
 800446e:	4619      	mov	r1, r3
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f000 f842 	bl	80044fa <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004476:	e01f      	b.n	80044b8 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800447e:	2b00      	cmp	r3, #0
 8004480:	d008      	beq.n	8004494 <HAL_UART_IRQHandler+0x324>
 8004482:	6a3b      	ldr	r3, [r7, #32]
 8004484:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004488:	2b00      	cmp	r3, #0
 800448a:	d003      	beq.n	8004494 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f000 f8c9 	bl	8004624 <UART_Transmit_IT>
    return;
 8004492:	e012      	b.n	80044ba <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800449a:	2b00      	cmp	r3, #0
 800449c:	d00d      	beq.n	80044ba <HAL_UART_IRQHandler+0x34a>
 800449e:	6a3b      	ldr	r3, [r7, #32]
 80044a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d008      	beq.n	80044ba <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f000 f90a 	bl	80046c2 <UART_EndTransmit_IT>
    return;
 80044ae:	e004      	b.n	80044ba <HAL_UART_IRQHandler+0x34a>
    return;
 80044b0:	bf00      	nop
 80044b2:	e002      	b.n	80044ba <HAL_UART_IRQHandler+0x34a>
      return;
 80044b4:	bf00      	nop
 80044b6:	e000      	b.n	80044ba <HAL_UART_IRQHandler+0x34a>
      return;
 80044b8:	bf00      	nop
  }
}
 80044ba:	3728      	adds	r7, #40	; 0x28
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	080045fd 	.word	0x080045fd

080044c4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80044cc:	bf00      	nop
 80044ce:	370c      	adds	r7, #12
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bc80      	pop	{r7}
 80044d4:	4770      	bx	lr

080044d6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80044d6:	b480      	push	{r7}
 80044d8:	b083      	sub	sp, #12
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80044de:	bf00      	nop
 80044e0:	370c      	adds	r7, #12
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bc80      	pop	{r7}
 80044e6:	4770      	bx	lr

080044e8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80044f0:	bf00      	nop
 80044f2:	370c      	adds	r7, #12
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bc80      	pop	{r7}
 80044f8:	4770      	bx	lr

080044fa <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80044fa:	b480      	push	{r7}
 80044fc:	b083      	sub	sp, #12
 80044fe:	af00      	add	r7, sp, #0
 8004500:	6078      	str	r0, [r7, #4]
 8004502:	460b      	mov	r3, r1
 8004504:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004506:	bf00      	nop
 8004508:	370c      	adds	r7, #12
 800450a:	46bd      	mov	sp, r7
 800450c:	bc80      	pop	{r7}
 800450e:	4770      	bx	lr

08004510 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
 8004516:	60f8      	str	r0, [r7, #12]
 8004518:	60b9      	str	r1, [r7, #8]
 800451a:	603b      	str	r3, [r7, #0]
 800451c:	4613      	mov	r3, r2
 800451e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004520:	e02c      	b.n	800457c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004522:	69bb      	ldr	r3, [r7, #24]
 8004524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004528:	d028      	beq.n	800457c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d007      	beq.n	8004540 <UART_WaitOnFlagUntilTimeout+0x30>
 8004530:	f7fe fb12 	bl	8002b58 <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	69ba      	ldr	r2, [r7, #24]
 800453c:	429a      	cmp	r2, r3
 800453e:	d21d      	bcs.n	800457c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68da      	ldr	r2, [r3, #12]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800454e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	695a      	ldr	r2, [r3, #20]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f022 0201 	bic.w	r2, r2, #1
 800455e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2220      	movs	r2, #32
 8004564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2220      	movs	r2, #32
 800456c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2200      	movs	r2, #0
 8004574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004578:	2303      	movs	r3, #3
 800457a:	e00f      	b.n	800459c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	4013      	ands	r3, r2
 8004586:	68ba      	ldr	r2, [r7, #8]
 8004588:	429a      	cmp	r2, r3
 800458a:	bf0c      	ite	eq
 800458c:	2301      	moveq	r3, #1
 800458e:	2300      	movne	r3, #0
 8004590:	b2db      	uxtb	r3, r3
 8004592:	461a      	mov	r2, r3
 8004594:	79fb      	ldrb	r3, [r7, #7]
 8004596:	429a      	cmp	r2, r3
 8004598:	d0c3      	beq.n	8004522 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800459a:	2300      	movs	r3, #0
}
 800459c:	4618      	mov	r0, r3
 800459e:	3710      	adds	r7, #16
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	68da      	ldr	r2, [r3, #12]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80045ba:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	695a      	ldr	r2, [r3, #20]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f022 0201 	bic.w	r2, r2, #1
 80045ca:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d107      	bne.n	80045e4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	68da      	ldr	r2, [r3, #12]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f022 0210 	bic.w	r2, r2, #16
 80045e2:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2220      	movs	r2, #32
 80045e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80045f2:	bf00      	nop
 80045f4:	370c      	adds	r7, #12
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bc80      	pop	{r7}
 80045fa:	4770      	bx	lr

080045fc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004608:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2200      	movs	r2, #0
 800460e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2200      	movs	r2, #0
 8004614:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004616:	68f8      	ldr	r0, [r7, #12]
 8004618:	f7ff ff66 	bl	80044e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800461c:	bf00      	nop
 800461e:	3710      	adds	r7, #16
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004624:	b480      	push	{r7}
 8004626:	b085      	sub	sp, #20
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004632:	b2db      	uxtb	r3, r3
 8004634:	2b21      	cmp	r3, #33	; 0x21
 8004636:	d13e      	bne.n	80046b6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004640:	d114      	bne.n	800466c <UART_Transmit_IT+0x48>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d110      	bne.n	800466c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a1b      	ldr	r3, [r3, #32]
 800464e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	881b      	ldrh	r3, [r3, #0]
 8004654:	461a      	mov	r2, r3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800465e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6a1b      	ldr	r3, [r3, #32]
 8004664:	1c9a      	adds	r2, r3, #2
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	621a      	str	r2, [r3, #32]
 800466a:	e008      	b.n	800467e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6a1b      	ldr	r3, [r3, #32]
 8004670:	1c59      	adds	r1, r3, #1
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	6211      	str	r1, [r2, #32]
 8004676:	781a      	ldrb	r2, [r3, #0]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004682:	b29b      	uxth	r3, r3
 8004684:	3b01      	subs	r3, #1
 8004686:	b29b      	uxth	r3, r3
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	4619      	mov	r1, r3
 800468c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800468e:	2b00      	cmp	r3, #0
 8004690:	d10f      	bne.n	80046b2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	68da      	ldr	r2, [r3, #12]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046a0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	68da      	ldr	r2, [r3, #12]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046b0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80046b2:	2300      	movs	r3, #0
 80046b4:	e000      	b.n	80046b8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80046b6:	2302      	movs	r3, #2
  }
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3714      	adds	r7, #20
 80046bc:	46bd      	mov	sp, r7
 80046be:	bc80      	pop	{r7}
 80046c0:	4770      	bx	lr

080046c2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80046c2:	b580      	push	{r7, lr}
 80046c4:	b082      	sub	sp, #8
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	68da      	ldr	r2, [r3, #12]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046d8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2220      	movs	r2, #32
 80046de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f7ff feee 	bl	80044c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80046e8:	2300      	movs	r3, #0
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3708      	adds	r7, #8
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}

080046f2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80046f2:	b580      	push	{r7, lr}
 80046f4:	b086      	sub	sp, #24
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004700:	b2db      	uxtb	r3, r3
 8004702:	2b22      	cmp	r3, #34	; 0x22
 8004704:	f040 8099 	bne.w	800483a <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004710:	d117      	bne.n	8004742 <UART_Receive_IT+0x50>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d113      	bne.n	8004742 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800471a:	2300      	movs	r3, #0
 800471c:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004722:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	b29b      	uxth	r3, r3
 800472c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004730:	b29a      	uxth	r2, r3
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800473a:	1c9a      	adds	r2, r3, #2
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	629a      	str	r2, [r3, #40]	; 0x28
 8004740:	e026      	b.n	8004790 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004746:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004748:	2300      	movs	r3, #0
 800474a:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004754:	d007      	beq.n	8004766 <UART_Receive_IT+0x74>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d10a      	bne.n	8004774 <UART_Receive_IT+0x82>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d106      	bne.n	8004774 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	b2da      	uxtb	r2, r3
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	701a      	strb	r2, [r3, #0]
 8004772:	e008      	b.n	8004786 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	b2db      	uxtb	r3, r3
 800477c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004780:	b2da      	uxtb	r2, r3
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800478a:	1c5a      	adds	r2, r3, #1
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004794:	b29b      	uxth	r3, r3
 8004796:	3b01      	subs	r3, #1
 8004798:	b29b      	uxth	r3, r3
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	4619      	mov	r1, r3
 800479e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d148      	bne.n	8004836 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	68da      	ldr	r2, [r3, #12]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f022 0220 	bic.w	r2, r2, #32
 80047b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	68da      	ldr	r2, [r3, #12]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80047c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	695a      	ldr	r2, [r3, #20]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f022 0201 	bic.w	r2, r2, #1
 80047d2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2220      	movs	r2, #32
 80047d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d123      	bne.n	800482c <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	68da      	ldr	r2, [r3, #12]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f022 0210 	bic.w	r2, r2, #16
 80047f8:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0310 	and.w	r3, r3, #16
 8004804:	2b10      	cmp	r3, #16
 8004806:	d10a      	bne.n	800481e <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004808:	2300      	movs	r3, #0
 800480a:	60fb      	str	r3, [r7, #12]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	60fb      	str	r3, [r7, #12]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	60fb      	str	r3, [r7, #12]
 800481c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004822:	4619      	mov	r1, r3
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f7ff fe68 	bl	80044fa <HAL_UARTEx_RxEventCallback>
 800482a:	e002      	b.n	8004832 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f7ff fe52 	bl	80044d6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004832:	2300      	movs	r3, #0
 8004834:	e002      	b.n	800483c <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004836:	2300      	movs	r3, #0
 8004838:	e000      	b.n	800483c <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800483a:	2302      	movs	r3, #2
  }
}
 800483c:	4618      	mov	r0, r3
 800483e:	3718      	adds	r7, #24
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}

08004844 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	68da      	ldr	r2, [r3, #12]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	430a      	orrs	r2, r1
 8004860:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	689a      	ldr	r2, [r3, #8]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	431a      	orrs	r2, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	695b      	ldr	r3, [r3, #20]
 8004870:	4313      	orrs	r3, r2
 8004872:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800487e:	f023 030c 	bic.w	r3, r3, #12
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	6812      	ldr	r2, [r2, #0]
 8004886:	68b9      	ldr	r1, [r7, #8]
 8004888:	430b      	orrs	r3, r1
 800488a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	695b      	ldr	r3, [r3, #20]
 8004892:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	699a      	ldr	r2, [r3, #24]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	430a      	orrs	r2, r1
 80048a0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a2c      	ldr	r2, [pc, #176]	; (8004958 <UART_SetConfig+0x114>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d103      	bne.n	80048b4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80048ac:	f7ff f8e8 	bl	8003a80 <HAL_RCC_GetPCLK2Freq>
 80048b0:	60f8      	str	r0, [r7, #12]
 80048b2:	e002      	b.n	80048ba <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80048b4:	f7ff f8d0 	bl	8003a58 <HAL_RCC_GetPCLK1Freq>
 80048b8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80048ba:	68fa      	ldr	r2, [r7, #12]
 80048bc:	4613      	mov	r3, r2
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	4413      	add	r3, r2
 80048c2:	009a      	lsls	r2, r3, #2
 80048c4:	441a      	add	r2, r3
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d0:	4a22      	ldr	r2, [pc, #136]	; (800495c <UART_SetConfig+0x118>)
 80048d2:	fba2 2303 	umull	r2, r3, r2, r3
 80048d6:	095b      	lsrs	r3, r3, #5
 80048d8:	0119      	lsls	r1, r3, #4
 80048da:	68fa      	ldr	r2, [r7, #12]
 80048dc:	4613      	mov	r3, r2
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	4413      	add	r3, r2
 80048e2:	009a      	lsls	r2, r3, #2
 80048e4:	441a      	add	r2, r3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80048f0:	4b1a      	ldr	r3, [pc, #104]	; (800495c <UART_SetConfig+0x118>)
 80048f2:	fba3 0302 	umull	r0, r3, r3, r2
 80048f6:	095b      	lsrs	r3, r3, #5
 80048f8:	2064      	movs	r0, #100	; 0x64
 80048fa:	fb00 f303 	mul.w	r3, r0, r3
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	011b      	lsls	r3, r3, #4
 8004902:	3332      	adds	r3, #50	; 0x32
 8004904:	4a15      	ldr	r2, [pc, #84]	; (800495c <UART_SetConfig+0x118>)
 8004906:	fba2 2303 	umull	r2, r3, r2, r3
 800490a:	095b      	lsrs	r3, r3, #5
 800490c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004910:	4419      	add	r1, r3
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	4613      	mov	r3, r2
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	4413      	add	r3, r2
 800491a:	009a      	lsls	r2, r3, #2
 800491c:	441a      	add	r2, r3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	fbb2 f2f3 	udiv	r2, r2, r3
 8004928:	4b0c      	ldr	r3, [pc, #48]	; (800495c <UART_SetConfig+0x118>)
 800492a:	fba3 0302 	umull	r0, r3, r3, r2
 800492e:	095b      	lsrs	r3, r3, #5
 8004930:	2064      	movs	r0, #100	; 0x64
 8004932:	fb00 f303 	mul.w	r3, r0, r3
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	011b      	lsls	r3, r3, #4
 800493a:	3332      	adds	r3, #50	; 0x32
 800493c:	4a07      	ldr	r2, [pc, #28]	; (800495c <UART_SetConfig+0x118>)
 800493e:	fba2 2303 	umull	r2, r3, r2, r3
 8004942:	095b      	lsrs	r3, r3, #5
 8004944:	f003 020f 	and.w	r2, r3, #15
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	440a      	add	r2, r1
 800494e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004950:	bf00      	nop
 8004952:	3710      	adds	r7, #16
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}
 8004958:	40013800 	.word	0x40013800
 800495c:	51eb851f 	.word	0x51eb851f

08004960 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	7c1b      	ldrb	r3, [r3, #16]
 800496e:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004976:	461a      	mov	r2, r3
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	fb02 f303 	mul.w	r3, r2, r3
 800497e:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	00db      	lsls	r3, r3, #3
 8004984:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800498a:	68fa      	ldr	r2, [r7, #12]
 800498c:	2100      	movs	r1, #0
 800498e:	4618      	mov	r0, r3
 8004990:	f001 fdf6 	bl	8006580 <memset>
}
 8004994:	bf00      	nop
 8004996:	3710      	adds	r7, #16
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}

0800499c <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b086      	sub	sp, #24
 80049a0:	af02      	add	r7, sp, #8
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	460b      	mov	r3, r1
 80049a6:	70fb      	strb	r3, [r7, #3]
 80049a8:	4613      	mov	r3, r2
 80049aa:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	7c1b      	ldrb	r3, [r3, #16]
 80049b2:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 80049b4:	78fb      	ldrb	r3, [r7, #3]
 80049b6:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049bc:	60bb      	str	r3, [r7, #8]
  offset *= w;
 80049be:	7bfb      	ldrb	r3, [r7, #15]
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	89ba      	ldrh	r2, [r7, #12]
 80049c4:	fb02 f303 	mul.w	r3, r2, r3
 80049c8:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 80049ca:	89bb      	ldrh	r3, [r7, #12]
 80049cc:	00db      	lsls	r3, r3, #3
 80049ce:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 80049d0:	89bb      	ldrh	r3, [r7, #12]
 80049d2:	68ba      	ldr	r2, [r7, #8]
 80049d4:	4413      	add	r3, r2
 80049d6:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 80049d8:	7bf9      	ldrb	r1, [r7, #15]
 80049da:	78ba      	ldrb	r2, [r7, #2]
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	9300      	str	r3, [sp, #0]
 80049e0:	460b      	mov	r3, r1
 80049e2:	2100      	movs	r1, #0
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f001 fcc3 	bl	8006370 <u8x8_DrawTile>
}
 80049ea:	bf00      	nop
 80049ec:	3710      	adds	r7, #16
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}

080049f2 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 80049f2:	b580      	push	{r7, lr}
 80049f4:	b084      	sub	sp, #16
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 80049fa:	2300      	movs	r3, #0
 80049fc:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004a04:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004a0c:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	7c5b      	ldrb	r3, [r3, #17]
 8004a14:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8004a16:	7bba      	ldrb	r2, [r7, #14]
 8004a18:	7bfb      	ldrb	r3, [r7, #15]
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f7ff ffbd 	bl	800499c <u8g2_send_tile_row>
    src_row++;
 8004a22:	7bfb      	ldrb	r3, [r7, #15]
 8004a24:	3301      	adds	r3, #1
 8004a26:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8004a28:	7bbb      	ldrb	r3, [r7, #14]
 8004a2a:	3301      	adds	r3, #1
 8004a2c:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8004a2e:	7bfa      	ldrb	r2, [r7, #15]
 8004a30:	7b7b      	ldrb	r3, [r7, #13]
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d203      	bcs.n	8004a3e <u8g2_send_buffer+0x4c>
 8004a36:	7bba      	ldrb	r2, [r7, #14]
 8004a38:	7b3b      	ldrb	r3, [r7, #12]
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d3eb      	bcc.n	8004a16 <u8g2_send_buffer+0x24>
}
 8004a3e:	bf00      	nop
 8004a40:	3710      	adds	r7, #16
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}

08004a46 <u8g2_SetBufferCurrTileRow>:
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
}

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 8004a46:	b580      	push	{r7, lr}
 8004a48:	b082      	sub	sp, #8
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
 8004a4e:	460b      	mov	r3, r1
 8004a50:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	78fa      	ldrb	r2, [r7, #3]
 8004a56:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  u8g2->cb->update_dimension(u8g2);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	4798      	blx	r3
}
 8004a6e:	bf00      	nop
 8004a70:	3708      	adds	r7, #8
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}

08004a76 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 8004a76:	b580      	push	{r7, lr}
 8004a78:	b082      	sub	sp, #8
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d002      	beq.n	8004a8e <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f7ff ff69 	bl	8004960 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 8004a8e:	2100      	movs	r1, #0
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f7ff ffd8 	bl	8004a46 <u8g2_SetBufferCurrTileRow>
}
 8004a96:	bf00      	nop
 8004a98:	3708      	adds	r7, #8
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}

08004a9e <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 8004a9e:	b580      	push	{r7, lr}
 8004aa0:	b084      	sub	sp, #16
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f7ff ffa3 	bl	80049f2 <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004ab2:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8004aba:	7bfb      	ldrb	r3, [r7, #15]
 8004abc:	4413      	add	r3, r2
 8004abe:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	7c5b      	ldrb	r3, [r3, #17]
 8004ac6:	7bfa      	ldrb	r2, [r7, #15]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d304      	bcc.n	8004ad6 <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f001 fca0 	bl	8006412 <u8x8_RefreshDisplay>
    return 0;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	e00d      	b.n	8004af2 <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d002      	beq.n	8004ae6 <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f7ff ff3d 	bl	8004960 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 8004ae6:	7bfb      	ldrb	r3, [r7, #15]
 8004ae8:	4619      	mov	r1, r3
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f7ff ffab 	bl	8004a46 <u8g2_SetBufferCurrTileRow>
  return 1;
 8004af0:	2301      	movs	r3, #1
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3710      	adds	r7, #16
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
	...

08004afc <u8g2_m_16_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2208      	movs	r2, #8
 8004b08:	701a      	strb	r2, [r3, #0]
  return buf;
 8004b0a:	4b03      	ldr	r3, [pc, #12]	; (8004b18 <u8g2_m_16_8_f+0x1c>)
  #endif
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	370c      	adds	r7, #12
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bc80      	pop	{r7}
 8004b14:	4770      	bx	lr
 8004b16:	bf00      	nop
 8004b18:	20000cf4 	.word	0x20000cf4

08004b1c <u8g2_Setup_ssd1306_128x64_noname_f>:
  buf = u8g2_m_16_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 f */
void u8g2_Setup_ssd1306_128x64_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b088      	sub	sp, #32
 8004b20:	af02      	add	r7, sp, #8
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	60b9      	str	r1, [r7, #8]
 8004b26:	607a      	str	r2, [r7, #4]
 8004b28:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	9300      	str	r3, [sp, #0]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a0b      	ldr	r2, [pc, #44]	; (8004b60 <u8g2_Setup_ssd1306_128x64_noname_f+0x44>)
 8004b32:	490c      	ldr	r1, [pc, #48]	; (8004b64 <u8g2_Setup_ssd1306_128x64_noname_f+0x48>)
 8004b34:	68f8      	ldr	r0, [r7, #12]
 8004b36:	f001 fccb 	bl	80064d0 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 8004b3a:	f107 0313 	add.w	r3, r7, #19
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f7ff ffdc 	bl	8004afc <u8g2_m_16_8_f>
 8004b44:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8004b46:	7cfa      	ldrb	r2, [r7, #19]
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	9300      	str	r3, [sp, #0]
 8004b4c:	4b06      	ldr	r3, [pc, #24]	; (8004b68 <u8g2_Setup_ssd1306_128x64_noname_f+0x4c>)
 8004b4e:	6979      	ldr	r1, [r7, #20]
 8004b50:	68f8      	ldr	r0, [r7, #12]
 8004b52:	f000 ffbc 	bl	8005ace <u8g2_SetupBuffer>
}
 8004b56:	bf00      	nop
 8004b58:	3718      	adds	r7, #24
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	bf00      	nop
 8004b60:	08006095 	.word	0x08006095
 8004b64:	0800626d 	.word	0x0800626d
 8004b68:	08005953 	.word	0x08005953

08004b6c <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	460b      	mov	r3, r1
 8004b76:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8004b78:	78fb      	ldrb	r3, [r7, #3]
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	4413      	add	r3, r2
 8004b7e:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	781b      	ldrb	r3, [r3, #0]
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	370c      	adds	r7, #12
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bc80      	pop	{r7}
 8004b8c:	4770      	bx	lr

08004b8e <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 8004b8e:	b480      	push	{r7}
 8004b90:	b085      	sub	sp, #20
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	6078      	str	r0, [r7, #4]
 8004b96:	460b      	mov	r3, r1
 8004b98:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8004b9a:	78fb      	ldrb	r3, [r7, #3]
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	4413      	add	r3, r2
 8004ba0:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	81fb      	strh	r3, [r7, #14]
    font++;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	3301      	adds	r3, #1
 8004bac:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8004bae:	89fb      	ldrh	r3, [r7, #14]
 8004bb0:	021b      	lsls	r3, r3, #8
 8004bb2:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	b29a      	uxth	r2, r3
 8004bba:	89fb      	ldrh	r3, [r7, #14]
 8004bbc:	4413      	add	r3, r2
 8004bbe:	81fb      	strh	r3, [r7, #14]
    return pos;
 8004bc0:	89fb      	ldrh	r3, [r7, #14]
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3714      	adds	r7, #20
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bc80      	pop	{r7}
 8004bca:	4770      	bx	lr

08004bcc <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8004bd6:	2100      	movs	r1, #0
 8004bd8:	6838      	ldr	r0, [r7, #0]
 8004bda:	f7ff ffc7 	bl	8004b6c <u8g2_font_get_byte>
 8004bde:	4603      	mov	r3, r0
 8004be0:	461a      	mov	r2, r3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8004be6:	2101      	movs	r1, #1
 8004be8:	6838      	ldr	r0, [r7, #0]
 8004bea:	f7ff ffbf 	bl	8004b6c <u8g2_font_get_byte>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8004bf6:	2102      	movs	r1, #2
 8004bf8:	6838      	ldr	r0, [r7, #0]
 8004bfa:	f7ff ffb7 	bl	8004b6c <u8g2_font_get_byte>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	461a      	mov	r2, r3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8004c06:	2103      	movs	r1, #3
 8004c08:	6838      	ldr	r0, [r7, #0]
 8004c0a:	f7ff ffaf 	bl	8004b6c <u8g2_font_get_byte>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	461a      	mov	r2, r3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8004c16:	2104      	movs	r1, #4
 8004c18:	6838      	ldr	r0, [r7, #0]
 8004c1a:	f7ff ffa7 	bl	8004b6c <u8g2_font_get_byte>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	461a      	mov	r2, r3
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 8004c26:	2105      	movs	r1, #5
 8004c28:	6838      	ldr	r0, [r7, #0]
 8004c2a:	f7ff ff9f 	bl	8004b6c <u8g2_font_get_byte>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	461a      	mov	r2, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8004c36:	2106      	movs	r1, #6
 8004c38:	6838      	ldr	r0, [r7, #0]
 8004c3a:	f7ff ff97 	bl	8004b6c <u8g2_font_get_byte>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	461a      	mov	r2, r3
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8004c46:	2107      	movs	r1, #7
 8004c48:	6838      	ldr	r0, [r7, #0]
 8004c4a:	f7ff ff8f 	bl	8004b6c <u8g2_font_get_byte>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	461a      	mov	r2, r3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 8004c56:	2108      	movs	r1, #8
 8004c58:	6838      	ldr	r0, [r7, #0]
 8004c5a:	f7ff ff87 	bl	8004b6c <u8g2_font_get_byte>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	461a      	mov	r2, r3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 8004c66:	2109      	movs	r1, #9
 8004c68:	6838      	ldr	r0, [r7, #0]
 8004c6a:	f7ff ff7f 	bl	8004b6c <u8g2_font_get_byte>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	b25a      	sxtb	r2, r3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8004c76:	210a      	movs	r1, #10
 8004c78:	6838      	ldr	r0, [r7, #0]
 8004c7a:	f7ff ff77 	bl	8004b6c <u8g2_font_get_byte>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	b25a      	sxtb	r2, r3
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 8004c86:	210b      	movs	r1, #11
 8004c88:	6838      	ldr	r0, [r7, #0]
 8004c8a:	f7ff ff6f 	bl	8004b6c <u8g2_font_get_byte>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	b25a      	sxtb	r2, r3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 8004c96:	210c      	movs	r1, #12
 8004c98:	6838      	ldr	r0, [r7, #0]
 8004c9a:	f7ff ff67 	bl	8004b6c <u8g2_font_get_byte>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	b25a      	sxtb	r2, r3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8004ca6:	210d      	movs	r1, #13
 8004ca8:	6838      	ldr	r0, [r7, #0]
 8004caa:	f7ff ff5f 	bl	8004b6c <u8g2_font_get_byte>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	b25a      	sxtb	r2, r3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 8004cb6:	210e      	movs	r1, #14
 8004cb8:	6838      	ldr	r0, [r7, #0]
 8004cba:	f7ff ff57 	bl	8004b6c <u8g2_font_get_byte>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	b25a      	sxtb	r2, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8004cc6:	210f      	movs	r1, #15
 8004cc8:	6838      	ldr	r0, [r7, #0]
 8004cca:	f7ff ff4f 	bl	8004b6c <u8g2_font_get_byte>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	b25a      	sxtb	r2, r3
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 8004cd6:	2110      	movs	r1, #16
 8004cd8:	6838      	ldr	r0, [r7, #0]
 8004cda:	f7ff ff47 	bl	8004b6c <u8g2_font_get_byte>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	b25a      	sxtb	r2, r3
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8004ce6:	2111      	movs	r1, #17
 8004ce8:	6838      	ldr	r0, [r7, #0]
 8004cea:	f7ff ff50 	bl	8004b8e <u8g2_font_get_word>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8004cf6:	2113      	movs	r1, #19
 8004cf8:	6838      	ldr	r0, [r7, #0]
 8004cfa:	f7ff ff48 	bl	8004b8e <u8g2_font_get_word>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	461a      	mov	r2, r3
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 8004d06:	2115      	movs	r1, #21
 8004d08:	6838      	ldr	r0, [r7, #0]
 8004d0a:	f7ff ff40 	bl	8004b8e <u8g2_font_get_word>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	461a      	mov	r2, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	82da      	strh	r2, [r3, #22]
#endif
}
 8004d16:	bf00      	nop
 8004d18:	3708      	adds	r7, #8
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}

08004d1e <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 8004d1e:	b480      	push	{r7}
 8004d20:	b085      	sub	sp, #20
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
 8004d26:	460b      	mov	r3, r1
 8004d28:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	7b1b      	ldrb	r3, [r3, #12]
 8004d2e:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 8004d38:	7bfa      	ldrb	r2, [r7, #15]
 8004d3a:	7b7b      	ldrb	r3, [r7, #13]
 8004d3c:	fa42 f303 	asr.w	r3, r2, r3
 8004d40:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 8004d42:	7b7b      	ldrb	r3, [r7, #13]
 8004d44:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 8004d46:	7bba      	ldrb	r2, [r7, #14]
 8004d48:	78fb      	ldrb	r3, [r7, #3]
 8004d4a:	4413      	add	r3, r2
 8004d4c:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 8004d4e:	7bbb      	ldrb	r3, [r7, #14]
 8004d50:	2b07      	cmp	r3, #7
 8004d52:	d91a      	bls.n	8004d8a <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8004d54:	2308      	movs	r3, #8
 8004d56:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 8004d58:	7b3a      	ldrb	r2, [r7, #12]
 8004d5a:	7b7b      	ldrb	r3, [r7, #13]
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	1c5a      	adds	r2, r3, #1
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	461a      	mov	r2, r3
 8004d72:	7b3b      	ldrb	r3, [r7, #12]
 8004d74:	fa02 f303 	lsl.w	r3, r2, r3
 8004d78:	b25a      	sxtb	r2, r3
 8004d7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	b25b      	sxtb	r3, r3
 8004d82:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8004d84:	7bbb      	ldrb	r3, [r7, #14]
 8004d86:	3b08      	subs	r3, #8
 8004d88:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 8004d8a:	78fb      	ldrb	r3, [r7, #3]
 8004d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8004d90:	fa02 f303 	lsl.w	r3, r2, r3
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	43db      	mvns	r3, r3
 8004d98:	b2da      	uxtb	r2, r3
 8004d9a:	7bfb      	ldrb	r3, [r7, #15]
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	7bba      	ldrb	r2, [r7, #14]
 8004da4:	731a      	strb	r2, [r3, #12]
  return val;
 8004da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3714      	adds	r7, #20
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bc80      	pop	{r7}
 8004db0:	4770      	bx	lr

08004db2 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 8004db2:	b580      	push	{r7, lr}
 8004db4:	b084      	sub	sp, #16
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
 8004dba:	460b      	mov	r3, r1
 8004dbc:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8004dbe:	78fb      	ldrb	r3, [r7, #3]
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f7ff ffab 	bl	8004d1e <u8g2_font_decode_get_unsigned_bits>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	73fb      	strb	r3, [r7, #15]
  d = 1;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	73bb      	strb	r3, [r7, #14]
  cnt--;
 8004dd0:	78fb      	ldrb	r3, [r7, #3]
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 8004dd6:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8004dda:	78fb      	ldrb	r3, [r7, #3]
 8004ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8004de0:	73bb      	strb	r3, [r7, #14]
  v -= d;
 8004de2:	7bfa      	ldrb	r2, [r7, #15]
 8004de4:	7bbb      	ldrb	r3, [r7, #14]
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	73fb      	strb	r3, [r7, #15]
  return v;
 8004dec:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3710      	adds	r7, #16
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 8004df8:	b490      	push	{r4, r7}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	4604      	mov	r4, r0
 8004e00:	4608      	mov	r0, r1
 8004e02:	4611      	mov	r1, r2
 8004e04:	461a      	mov	r2, r3
 8004e06:	4623      	mov	r3, r4
 8004e08:	80fb      	strh	r3, [r7, #6]
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	717b      	strb	r3, [r7, #5]
 8004e0e:	460b      	mov	r3, r1
 8004e10:	713b      	strb	r3, [r7, #4]
 8004e12:	4613      	mov	r3, r2
 8004e14:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 8004e16:	78fb      	ldrb	r3, [r7, #3]
 8004e18:	2b02      	cmp	r3, #2
 8004e1a:	d014      	beq.n	8004e46 <u8g2_add_vector_y+0x4e>
 8004e1c:	2b02      	cmp	r3, #2
 8004e1e:	dc19      	bgt.n	8004e54 <u8g2_add_vector_y+0x5c>
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d002      	beq.n	8004e2a <u8g2_add_vector_y+0x32>
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d007      	beq.n	8004e38 <u8g2_add_vector_y+0x40>
 8004e28:	e014      	b.n	8004e54 <u8g2_add_vector_y+0x5c>
  {
    case 0:
      dy += y;
 8004e2a:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8004e2e:	b29a      	uxth	r2, r3
 8004e30:	88fb      	ldrh	r3, [r7, #6]
 8004e32:	4413      	add	r3, r2
 8004e34:	80fb      	strh	r3, [r7, #6]
      break;
 8004e36:	e014      	b.n	8004e62 <u8g2_add_vector_y+0x6a>
    case 1:
      dy += x;
 8004e38:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8004e3c:	b29a      	uxth	r2, r3
 8004e3e:	88fb      	ldrh	r3, [r7, #6]
 8004e40:	4413      	add	r3, r2
 8004e42:	80fb      	strh	r3, [r7, #6]
      break;
 8004e44:	e00d      	b.n	8004e62 <u8g2_add_vector_y+0x6a>
    case 2:
      dy -= y;
 8004e46:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	88fa      	ldrh	r2, [r7, #6]
 8004e4e:	1ad3      	subs	r3, r2, r3
 8004e50:	80fb      	strh	r3, [r7, #6]
      break;
 8004e52:	e006      	b.n	8004e62 <u8g2_add_vector_y+0x6a>
    default:
      dy -= x;
 8004e54:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	88fa      	ldrh	r2, [r7, #6]
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	80fb      	strh	r3, [r7, #6]
      break;      
 8004e60:	bf00      	nop
  }
  return dy;
 8004e62:	88fb      	ldrh	r3, [r7, #6]
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3708      	adds	r7, #8
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bc90      	pop	{r4, r7}
 8004e6c:	4770      	bx	lr

08004e6e <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 8004e6e:	b490      	push	{r4, r7}
 8004e70:	b082      	sub	sp, #8
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	4604      	mov	r4, r0
 8004e76:	4608      	mov	r0, r1
 8004e78:	4611      	mov	r1, r2
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	4623      	mov	r3, r4
 8004e7e:	80fb      	strh	r3, [r7, #6]
 8004e80:	4603      	mov	r3, r0
 8004e82:	717b      	strb	r3, [r7, #5]
 8004e84:	460b      	mov	r3, r1
 8004e86:	713b      	strb	r3, [r7, #4]
 8004e88:	4613      	mov	r3, r2
 8004e8a:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 8004e8c:	78fb      	ldrb	r3, [r7, #3]
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d014      	beq.n	8004ebc <u8g2_add_vector_x+0x4e>
 8004e92:	2b02      	cmp	r3, #2
 8004e94:	dc19      	bgt.n	8004eca <u8g2_add_vector_x+0x5c>
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d002      	beq.n	8004ea0 <u8g2_add_vector_x+0x32>
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d007      	beq.n	8004eae <u8g2_add_vector_x+0x40>
 8004e9e:	e014      	b.n	8004eca <u8g2_add_vector_x+0x5c>
  {
    case 0:
      dx += x;
 8004ea0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8004ea4:	b29a      	uxth	r2, r3
 8004ea6:	88fb      	ldrh	r3, [r7, #6]
 8004ea8:	4413      	add	r3, r2
 8004eaa:	80fb      	strh	r3, [r7, #6]
      break;
 8004eac:	e014      	b.n	8004ed8 <u8g2_add_vector_x+0x6a>
    case 1:
      dx -= y;
 8004eae:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	88fa      	ldrh	r2, [r7, #6]
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	80fb      	strh	r3, [r7, #6]
      break;
 8004eba:	e00d      	b.n	8004ed8 <u8g2_add_vector_x+0x6a>
    case 2:
      dx -= x;
 8004ebc:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	88fa      	ldrh	r2, [r7, #6]
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	80fb      	strh	r3, [r7, #6]
      break;
 8004ec8:	e006      	b.n	8004ed8 <u8g2_add_vector_x+0x6a>
    default:
      dx += y;
 8004eca:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8004ece:	b29a      	uxth	r2, r3
 8004ed0:	88fb      	ldrh	r3, [r7, #6]
 8004ed2:	4413      	add	r3, r2
 8004ed4:	80fb      	strh	r3, [r7, #6]
      break;      
 8004ed6:	bf00      	nop
  }
  return dx;
 8004ed8:	88fb      	ldrh	r3, [r7, #6]
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3708      	adds	r7, #8
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bc90      	pop	{r4, r7}
 8004ee2:	4770      	bx	lr

08004ee4 <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b088      	sub	sp, #32
 8004ee8:	af02      	add	r7, sp, #8
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	460b      	mov	r3, r1
 8004eee:	70fb      	strb	r3, [r7, #3]
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	3360      	adds	r3, #96	; 0x60
 8004ef8:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 8004efa:	78fb      	ldrb	r3, [r7, #3]
 8004efc:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8004f04:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8004f0c:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8004f14:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 8004f16:	7bfa      	ldrb	r2, [r7, #15]
 8004f18:	7d7b      	ldrb	r3, [r7, #21]
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8004f1e:	7bfb      	ldrb	r3, [r7, #15]
 8004f20:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 8004f22:	7dfa      	ldrb	r2, [r7, #23]
 8004f24:	7bfb      	ldrb	r3, [r7, #15]
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d201      	bcs.n	8004f2e <u8g2_font_decode_len+0x4a>
      current = cnt;
 8004f2a:	7dfb      	ldrb	r3, [r7, #23]
 8004f2c:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	889b      	ldrh	r3, [r3, #4]
 8004f32:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	88db      	ldrh	r3, [r3, #6]
 8004f38:	817b      	strh	r3, [r7, #10]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8004f3a:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8004f3e:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	7c1b      	ldrb	r3, [r3, #16]
 8004f46:	89b8      	ldrh	r0, [r7, #12]
 8004f48:	f7ff ff91 	bl	8004e6e <u8g2_add_vector_x>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	81bb      	strh	r3, [r7, #12]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8004f50:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8004f54:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	7c1b      	ldrb	r3, [r3, #16]
 8004f5c:	8978      	ldrh	r0, [r7, #10]
 8004f5e:	f7ff ff4b 	bl	8004df8 <u8g2_add_vector_y>
 8004f62:	4603      	mov	r3, r0
 8004f64:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 8004f66:	78bb      	ldrb	r3, [r7, #2]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d010      	beq.n	8004f8e <u8g2_font_decode_len+0xaa>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	7b9a      	ldrb	r2, [r3, #14]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 8004f76:	7dbb      	ldrb	r3, [r7, #22]
 8004f78:	b298      	uxth	r0, r3
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	7c1b      	ldrb	r3, [r3, #16]
 8004f7e:	897a      	ldrh	r2, [r7, #10]
 8004f80:	89b9      	ldrh	r1, [r7, #12]
 8004f82:	9300      	str	r3, [sp, #0]
 8004f84:	4603      	mov	r3, r0
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 fbfa 	bl	8005780 <u8g2_DrawHVLine>
 8004f8c:	e013      	b.n	8004fb6 <u8g2_font_decode_len+0xd2>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	7b5b      	ldrb	r3, [r3, #13]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d10f      	bne.n	8004fb6 <u8g2_font_decode_len+0xd2>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	7bda      	ldrb	r2, [r3, #15]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 8004fa0:	7dbb      	ldrb	r3, [r7, #22]
 8004fa2:	b298      	uxth	r0, r3
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	7c1b      	ldrb	r3, [r3, #16]
 8004fa8:	897a      	ldrh	r2, [r7, #10]
 8004faa:	89b9      	ldrh	r1, [r7, #12]
 8004fac:	9300      	str	r3, [sp, #0]
 8004fae:	4603      	mov	r3, r0
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f000 fbe5 	bl	8005780 <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8004fb6:	7dfa      	ldrb	r2, [r7, #23]
 8004fb8:	7bfb      	ldrb	r3, [r7, #15]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d309      	bcc.n	8004fd2 <u8g2_font_decode_len+0xee>
      break;
    cnt -= rem;
 8004fbe:	7dfa      	ldrb	r2, [r7, #23]
 8004fc0:	7bfb      	ldrb	r3, [r7, #15]
 8004fc2:	1ad3      	subs	r3, r2, r3
 8004fc4:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	757b      	strb	r3, [r7, #21]
    ly++;
 8004fca:	7d3b      	ldrb	r3, [r7, #20]
 8004fcc:	3301      	adds	r3, #1
 8004fce:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8004fd0:	e79d      	b.n	8004f0e <u8g2_font_decode_len+0x2a>
      break;
 8004fd2:	bf00      	nop
  }
  lx += cnt;
 8004fd4:	7d7a      	ldrb	r2, [r7, #21]
 8004fd6:	7dfb      	ldrb	r3, [r7, #23]
 8004fd8:	4413      	add	r3, r2
 8004fda:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 8004fdc:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	721a      	strb	r2, [r3, #8]
  decode->y = ly;  
 8004fe4:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	725a      	strb	r2, [r3, #9]
}
 8004fec:	bf00      	nop
 8004fee:	3718      	adds	r7, #24
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}

08004ff4 <u8g2_font_setup_decode>:
  
}


static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	3360      	adds	r3, #96	; 0x60
 8005002:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	683a      	ldr	r2, [r7, #0]
 8005008:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2200      	movs	r2, #0
 800500e:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8005016:	4619      	mov	r1, r3
 8005018:	68f8      	ldr	r0, [r7, #12]
 800501a:	f7ff fe80 	bl	8004d1e <u8g2_font_decode_get_unsigned_bits>
 800501e:	4603      	mov	r3, r0
 8005020:	b25a      	sxtb	r2, r3
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 800502c:	4619      	mov	r1, r3
 800502e:	68f8      	ldr	r0, [r7, #12]
 8005030:	f7ff fe75 	bl	8004d1e <u8g2_font_decode_get_unsigned_bits>
 8005034:	4603      	mov	r3, r0
 8005036:	b25a      	sxtb	r2, r3
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	7b9b      	ldrb	r3, [r3, #14]
 800504a:	2b00      	cmp	r3, #0
 800504c:	bf0c      	ite	eq
 800504e:	2301      	moveq	r3, #1
 8005050:	2300      	movne	r3, #0
 8005052:	b2db      	uxtb	r3, r3
 8005054:	461a      	mov	r2, r3
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	73da      	strb	r2, [r3, #15]
}
 800505a:	bf00      	nop
 800505c:	3710      	adds	r7, #16
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
	...

08005064 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b08a      	sub	sp, #40	; 0x28
 8005068:	af02      	add	r7, sp, #8
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	3360      	adds	r3, #96	; 0x60
 8005072:	617b      	str	r3, [r7, #20]
    
  u8g2_font_setup_decode(u8g2, glyph_data);     /* set values in u8g2->font_decode data structure */
 8005074:	6839      	ldr	r1, [r7, #0]
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f7ff ffbc 	bl	8004ff4 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8005082:	74fb      	strb	r3, [r7, #19]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800508a:	4619      	mov	r1, r3
 800508c:	6978      	ldr	r0, [r7, #20]
 800508e:	f7ff fe90 	bl	8004db2 <u8g2_font_decode_get_signed_bits>
 8005092:	4603      	mov	r3, r0
 8005094:	74bb      	strb	r3, [r7, #18]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 800509c:	4619      	mov	r1, r3
 800509e:	6978      	ldr	r0, [r7, #20]
 80050a0:	f7ff fe87 	bl	8004db2 <u8g2_font_decode_get_signed_bits>
 80050a4:	4603      	mov	r3, r0
 80050a6:	747b      	strb	r3, [r7, #17]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80050ae:	4619      	mov	r1, r3
 80050b0:	6978      	ldr	r0, [r7, #20]
 80050b2:	f7ff fe7e 	bl	8004db2 <u8g2_font_decode_get_signed_bits>
 80050b6:	4603      	mov	r3, r0
 80050b8:	743b      	strb	r3, [r7, #16]
  
  if ( decode->glyph_width > 0 )
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	f340 80d7 	ble.w	8005274 <u8g2_font_decode_glyph+0x210>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	8898      	ldrh	r0, [r3, #4]
 80050ca:	7cfa      	ldrb	r2, [r7, #19]
 80050cc:	7c7b      	ldrb	r3, [r7, #17]
 80050ce:	4413      	add	r3, r2
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	425b      	negs	r3, r3
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	b25a      	sxtb	r2, r3
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	7c1b      	ldrb	r3, [r3, #16]
 80050dc:	f997 1012 	ldrsb.w	r1, [r7, #18]
 80050e0:	f7ff fec5 	bl	8004e6e <u8g2_add_vector_x>
 80050e4:	4603      	mov	r3, r0
 80050e6:	461a      	mov	r2, r3
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	809a      	strh	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	88d8      	ldrh	r0, [r3, #6]
 80050f0:	7cfa      	ldrb	r2, [r7, #19]
 80050f2:	7c7b      	ldrb	r3, [r7, #17]
 80050f4:	4413      	add	r3, r2
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	425b      	negs	r3, r3
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	b25a      	sxtb	r2, r3
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	7c1b      	ldrb	r3, [r3, #16]
 8005102:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8005106:	f7ff fe77 	bl	8004df8 <u8g2_add_vector_y>
 800510a:	4603      	mov	r3, r0
 800510c:	461a      	mov	r2, r3
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	80da      	strh	r2, [r3, #6]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	889b      	ldrh	r3, [r3, #4]
 8005116:	83fb      	strh	r3, [r7, #30]
      y0 = decode->target_y;
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	88db      	ldrh	r3, [r3, #6]
 800511c:	837b      	strh	r3, [r7, #26]
      x1 = x0;
 800511e:	8bfb      	ldrh	r3, [r7, #30]
 8005120:	83bb      	strh	r3, [r7, #28]
      y1 = y0;
 8005122:	8b7b      	ldrh	r3, [r7, #26]
 8005124:	833b      	strh	r3, [r7, #24]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	7c1b      	ldrb	r3, [r3, #16]
 800512a:	2b03      	cmp	r3, #3
 800512c:	d85a      	bhi.n	80051e4 <u8g2_font_decode_glyph+0x180>
 800512e:	a201      	add	r2, pc, #4	; (adr r2, 8005134 <u8g2_font_decode_glyph+0xd0>)
 8005130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005134:	08005145 	.word	0x08005145
 8005138:	08005161 	.word	0x08005161
 800513c:	08005189 	.word	0x08005189
 8005140:	080051bd 	.word	0x080051bd
      {
	case 0:
	    x1 += decode->glyph_width;
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800514a:	b29a      	uxth	r2, r3
 800514c:	8bbb      	ldrh	r3, [r7, #28]
 800514e:	4413      	add	r3, r2
 8005150:	83bb      	strh	r3, [r7, #28]
	    y1 += h;
 8005152:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005156:	b29a      	uxth	r2, r3
 8005158:	8b3b      	ldrh	r3, [r7, #24]
 800515a:	4413      	add	r3, r2
 800515c:	833b      	strh	r3, [r7, #24]
	    break;
 800515e:	e041      	b.n	80051e4 <u8g2_font_decode_glyph+0x180>
	case 1:
	    x0 -= h;
 8005160:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005164:	b29b      	uxth	r3, r3
 8005166:	8bfa      	ldrh	r2, [r7, #30]
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800516c:	8bfb      	ldrh	r3, [r7, #30]
 800516e:	3301      	adds	r3, #1
 8005170:	83fb      	strh	r3, [r7, #30]
	    x1++;
 8005172:	8bbb      	ldrh	r3, [r7, #28]
 8005174:	3301      	adds	r3, #1
 8005176:	83bb      	strh	r3, [r7, #28]
	    y1 += decode->glyph_width;
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800517e:	b29a      	uxth	r2, r3
 8005180:	8b3b      	ldrh	r3, [r7, #24]
 8005182:	4413      	add	r3, r2
 8005184:	833b      	strh	r3, [r7, #24]
	    break;
 8005186:	e02d      	b.n	80051e4 <u8g2_font_decode_glyph+0x180>
	case 2:
	    x0 -= decode->glyph_width;
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800518e:	b29b      	uxth	r3, r3
 8005190:	8bfa      	ldrh	r2, [r7, #30]
 8005192:	1ad3      	subs	r3, r2, r3
 8005194:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8005196:	8bfb      	ldrh	r3, [r7, #30]
 8005198:	3301      	adds	r3, #1
 800519a:	83fb      	strh	r3, [r7, #30]
	    x1++;
 800519c:	8bbb      	ldrh	r3, [r7, #28]
 800519e:	3301      	adds	r3, #1
 80051a0:	83bb      	strh	r3, [r7, #28]
	    y0 -= h;
 80051a2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	8b7a      	ldrh	r2, [r7, #26]
 80051aa:	1ad3      	subs	r3, r2, r3
 80051ac:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80051ae:	8b7b      	ldrh	r3, [r7, #26]
 80051b0:	3301      	adds	r3, #1
 80051b2:	837b      	strh	r3, [r7, #26]
	    y1++;
 80051b4:	8b3b      	ldrh	r3, [r7, #24]
 80051b6:	3301      	adds	r3, #1
 80051b8:	833b      	strh	r3, [r7, #24]
	    break;	  
 80051ba:	e013      	b.n	80051e4 <u8g2_font_decode_glyph+0x180>
	case 3:
	    x1 += h;
 80051bc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80051c0:	b29a      	uxth	r2, r3
 80051c2:	8bbb      	ldrh	r3, [r7, #28]
 80051c4:	4413      	add	r3, r2
 80051c6:	83bb      	strh	r3, [r7, #28]
	    y0 -= decode->glyph_width;
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	8b7a      	ldrh	r2, [r7, #26]
 80051d2:	1ad3      	subs	r3, r2, r3
 80051d4:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80051d6:	8b7b      	ldrh	r3, [r7, #26]
 80051d8:	3301      	adds	r3, #1
 80051da:	837b      	strh	r3, [r7, #26]
	    y1++;
 80051dc:	8b3b      	ldrh	r3, [r7, #24]
 80051de:	3301      	adds	r3, #1
 80051e0:	833b      	strh	r3, [r7, #24]
	    break;	  
 80051e2:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 80051e4:	8bb8      	ldrh	r0, [r7, #28]
 80051e6:	8b7a      	ldrh	r2, [r7, #26]
 80051e8:	8bf9      	ldrh	r1, [r7, #30]
 80051ea:	8b3b      	ldrh	r3, [r7, #24]
 80051ec:	9300      	str	r3, [sp, #0]
 80051ee:	4603      	mov	r3, r0
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f000 fb83 	bl	80058fc <u8g2_IsIntersection>
 80051f6:	4603      	mov	r3, r0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d102      	bne.n	8005202 <u8g2_font_decode_glyph+0x19e>
	return d;
 80051fc:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8005200:	e03a      	b.n	8005278 <u8g2_font_decode_glyph+0x214>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	2200      	movs	r2, #0
 8005206:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	2200      	movs	r2, #0
 800520c:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8005214:	4619      	mov	r1, r3
 8005216:	6978      	ldr	r0, [r7, #20]
 8005218:	f7ff fd81 	bl	8004d1e <u8g2_font_decode_get_unsigned_bits>
 800521c:	4603      	mov	r3, r0
 800521e:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8005226:	4619      	mov	r1, r3
 8005228:	6978      	ldr	r0, [r7, #20]
 800522a:	f7ff fd78 	bl	8004d1e <u8g2_font_decode_get_unsigned_bits>
 800522e:	4603      	mov	r3, r0
 8005230:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 8005232:	7bfb      	ldrb	r3, [r7, #15]
 8005234:	2200      	movs	r2, #0
 8005236:	4619      	mov	r1, r3
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f7ff fe53 	bl	8004ee4 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 800523e:	7bbb      	ldrb	r3, [r7, #14]
 8005240:	2201      	movs	r2, #1
 8005242:	4619      	mov	r1, r3
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f7ff fe4d 	bl	8004ee4 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 800524a:	2101      	movs	r1, #1
 800524c:	6978      	ldr	r0, [r7, #20]
 800524e:	f7ff fd66 	bl	8004d1e <u8g2_font_decode_get_unsigned_bits>
 8005252:	4603      	mov	r3, r0
 8005254:	2b00      	cmp	r3, #0
 8005256:	d1ec      	bne.n	8005232 <u8g2_font_decode_glyph+0x1ce>

      if ( decode->y >= h )
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800525e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8005262:	429a      	cmp	r2, r3
 8005264:	dd00      	ble.n	8005268 <u8g2_font_decode_glyph+0x204>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8005266:	e7d2      	b.n	800520e <u8g2_font_decode_glyph+0x1aa>
	break;
 8005268:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	7b9a      	ldrb	r2, [r3, #14]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  }
  return d;
 8005274:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 8005278:	4618      	mov	r0, r3
 800527a:	3720      	adds	r7, #32
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}

08005280 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b086      	sub	sp, #24
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	460b      	mov	r3, r1
 800528a:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005290:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	3317      	adds	r3, #23
 8005296:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 8005298:	887b      	ldrh	r3, [r7, #2]
 800529a:	2bff      	cmp	r3, #255	; 0xff
 800529c:	d82a      	bhi.n	80052f4 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 800529e:	887b      	ldrh	r3, [r7, #2]
 80052a0:	2b60      	cmp	r3, #96	; 0x60
 80052a2:	d907      	bls.n	80052b4 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80052aa:	461a      	mov	r2, r3
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	4413      	add	r3, r2
 80052b0:	617b      	str	r3, [r7, #20]
 80052b2:	e009      	b.n	80052c8 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 80052b4:	887b      	ldrh	r3, [r7, #2]
 80052b6:	2b40      	cmp	r3, #64	; 0x40
 80052b8:	d906      	bls.n	80052c8 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 80052c0:	461a      	mov	r2, r3
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	4413      	add	r3, r2
 80052c6:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	3301      	adds	r3, #1
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d04e      	beq.n	8005370 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	887a      	ldrh	r2, [r7, #2]
 80052da:	429a      	cmp	r2, r3
 80052dc:	d102      	bne.n	80052e4 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	3302      	adds	r3, #2
 80052e2:	e049      	b.n	8005378 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	3301      	adds	r3, #1
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	461a      	mov	r2, r3
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	4413      	add	r3, r2
 80052f0:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 80052f2:	e7e9      	b.n	80052c8 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 80052fa:	461a      	mov	r2, r3
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	4413      	add	r3, r2
 8005300:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8005306:	2100      	movs	r1, #0
 8005308:	6938      	ldr	r0, [r7, #16]
 800530a:	f7ff fc40 	bl	8004b8e <u8g2_font_get_word>
 800530e:	4603      	mov	r3, r0
 8005310:	461a      	mov	r2, r3
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	4413      	add	r3, r2
 8005316:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8005318:	2102      	movs	r1, #2
 800531a:	6938      	ldr	r0, [r7, #16]
 800531c:	f7ff fc37 	bl	8004b8e <u8g2_font_get_word>
 8005320:	4603      	mov	r3, r0
 8005322:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	3304      	adds	r3, #4
 8005328:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 800532a:	89fa      	ldrh	r2, [r7, #14]
 800532c:	887b      	ldrh	r3, [r7, #2]
 800532e:	429a      	cmp	r2, r3
 8005330:	d3e9      	bcc.n	8005306 <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 8005338:	89fb      	ldrh	r3, [r7, #14]
 800533a:	021b      	lsls	r3, r3, #8
 800533c:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	3301      	adds	r3, #1
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	b29a      	uxth	r2, r3
 8005346:	89fb      	ldrh	r3, [r7, #14]
 8005348:	4313      	orrs	r3, r2
 800534a:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 800534c:	89fb      	ldrh	r3, [r7, #14]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d010      	beq.n	8005374 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 8005352:	89fa      	ldrh	r2, [r7, #14]
 8005354:	887b      	ldrh	r3, [r7, #2]
 8005356:	429a      	cmp	r2, r3
 8005358:	d102      	bne.n	8005360 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	3303      	adds	r3, #3
 800535e:	e00b      	b.n	8005378 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	3302      	adds	r3, #2
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	461a      	mov	r2, r3
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	4413      	add	r3, r2
 800536c:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 800536e:	e7e0      	b.n	8005332 <u8g2_font_get_glyph_data+0xb2>
	break;
 8005370:	bf00      	nop
 8005372:	e000      	b.n	8005376 <u8g2_font_get_glyph_data+0xf6>
	break;
 8005374:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 8005376:	2300      	movs	r3, #0
}
 8005378:	4618      	mov	r0, r3
 800537a:	3718      	adds	r7, #24
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b086      	sub	sp, #24
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	4608      	mov	r0, r1
 800538a:	4611      	mov	r1, r2
 800538c:	461a      	mov	r2, r3
 800538e:	4603      	mov	r3, r0
 8005390:	817b      	strh	r3, [r7, #10]
 8005392:	460b      	mov	r3, r1
 8005394:	813b      	strh	r3, [r7, #8]
 8005396:	4613      	mov	r3, r2
 8005398:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t dx = 0;
 800539a:	2300      	movs	r3, #0
 800539c:	82fb      	strh	r3, [r7, #22]
  u8g2->font_decode.target_x = x;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	897a      	ldrh	r2, [r7, #10]
 80053a2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  u8g2->font_decode.target_y = y;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	893a      	ldrh	r2, [r7, #8]
 80053aa:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 80053ae:	88fb      	ldrh	r3, [r7, #6]
 80053b0:	4619      	mov	r1, r3
 80053b2:	68f8      	ldr	r0, [r7, #12]
 80053b4:	f7ff ff64 	bl	8005280 <u8g2_font_get_glyph_data>
 80053b8:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d005      	beq.n	80053cc <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 80053c0:	6939      	ldr	r1, [r7, #16]
 80053c2:	68f8      	ldr	r0, [r7, #12]
 80053c4:	f7ff fe4e 	bl	8005064 <u8g2_font_decode_glyph>
 80053c8:	4603      	mov	r3, r0
 80053ca:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 80053cc:	8afb      	ldrh	r3, [r7, #22]
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3718      	adds	r7, #24
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
	...

080053d8 <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b084      	sub	sp, #16
 80053dc:	af00      	add	r7, sp, #0
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	4608      	mov	r0, r1
 80053e2:	4611      	mov	r1, r2
 80053e4:	461a      	mov	r2, r3
 80053e6:	4603      	mov	r3, r0
 80053e8:	817b      	strh	r3, [r7, #10]
 80053ea:	460b      	mov	r3, r1
 80053ec:	813b      	strh	r3, [r7, #8]
 80053ee:	4613      	mov	r3, r2
 80053f0:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80053f8:	2b03      	cmp	r3, #3
 80053fa:	d833      	bhi.n	8005464 <u8g2_DrawGlyph+0x8c>
 80053fc:	a201      	add	r2, pc, #4	; (adr r2, 8005404 <u8g2_DrawGlyph+0x2c>)
 80053fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005402:	bf00      	nop
 8005404:	08005415 	.word	0x08005415
 8005408:	08005429 	.word	0x08005429
 800540c:	0800543d 	.word	0x0800543d
 8005410:	08005451 	.word	0x08005451
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005418:	68f8      	ldr	r0, [r7, #12]
 800541a:	4798      	blx	r3
 800541c:	4603      	mov	r3, r0
 800541e:	461a      	mov	r2, r3
 8005420:	893b      	ldrh	r3, [r7, #8]
 8005422:	4413      	add	r3, r2
 8005424:	813b      	strh	r3, [r7, #8]
      break;
 8005426:	e01d      	b.n	8005464 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800542c:	68f8      	ldr	r0, [r7, #12]
 800542e:	4798      	blx	r3
 8005430:	4603      	mov	r3, r0
 8005432:	461a      	mov	r2, r3
 8005434:	897b      	ldrh	r3, [r7, #10]
 8005436:	1a9b      	subs	r3, r3, r2
 8005438:	817b      	strh	r3, [r7, #10]
      break;
 800543a:	e013      	b.n	8005464 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005440:	68f8      	ldr	r0, [r7, #12]
 8005442:	4798      	blx	r3
 8005444:	4603      	mov	r3, r0
 8005446:	461a      	mov	r2, r3
 8005448:	893b      	ldrh	r3, [r7, #8]
 800544a:	1a9b      	subs	r3, r3, r2
 800544c:	813b      	strh	r3, [r7, #8]
      break;
 800544e:	e009      	b.n	8005464 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005454:	68f8      	ldr	r0, [r7, #12]
 8005456:	4798      	blx	r3
 8005458:	4603      	mov	r3, r0
 800545a:	461a      	mov	r2, r3
 800545c:	897b      	ldrh	r3, [r7, #10]
 800545e:	4413      	add	r3, r2
 8005460:	817b      	strh	r3, [r7, #10]
      break;
 8005462:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8005464:	88fb      	ldrh	r3, [r7, #6]
 8005466:	893a      	ldrh	r2, [r7, #8]
 8005468:	8979      	ldrh	r1, [r7, #10]
 800546a:	68f8      	ldr	r0, [r7, #12]
 800546c:	f7ff ff88 	bl	8005380 <u8g2_font_draw_glyph>
 8005470:	4603      	mov	r3, r0
}
 8005472:	4618      	mov	r0, r3
 8005474:	3710      	adds	r7, #16
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop

0800547c <u8g2_draw_string>:
  return u8g2_font_2x_draw_glyph(u8g2, x, y, encoding);
}

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b086      	sub	sp, #24
 8005480:	af00      	add	r7, sp, #0
 8005482:	60f8      	str	r0, [r7, #12]
 8005484:	607b      	str	r3, [r7, #4]
 8005486:	460b      	mov	r3, r1
 8005488:	817b      	strh	r3, [r7, #10]
 800548a:	4613      	mov	r3, r2
 800548c:	813b      	strh	r3, [r7, #8]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 800548e:	68f8      	ldr	r0, [r7, #12]
 8005490:	f000 fcfd 	bl	8005e8e <u8x8_utf8_init>
  sum = 0;
 8005494:	2300      	movs	r3, #0
 8005496:	82fb      	strh	r3, [r7, #22]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	7812      	ldrb	r2, [r2, #0]
 80054a0:	4611      	mov	r1, r2
 80054a2:	68f8      	ldr	r0, [r7, #12]
 80054a4:	4798      	blx	r3
 80054a6:	4603      	mov	r3, r0
 80054a8:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 80054aa:	8abb      	ldrh	r3, [r7, #20]
 80054ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d038      	beq.n	8005526 <u8g2_draw_string+0xaa>
      break;
    str++;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	3301      	adds	r3, #1
 80054b8:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 80054ba:	8abb      	ldrh	r3, [r7, #20]
 80054bc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d0e9      	beq.n	8005498 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 80054c4:	8abb      	ldrh	r3, [r7, #20]
 80054c6:	893a      	ldrh	r2, [r7, #8]
 80054c8:	8979      	ldrh	r1, [r7, #10]
 80054ca:	68f8      	ldr	r0, [r7, #12]
 80054cc:	f7ff ff84 	bl	80053d8 <u8g2_DrawGlyph>
 80054d0:	4603      	mov	r3, r0
 80054d2:	827b      	strh	r3, [r7, #18]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80054da:	2b03      	cmp	r3, #3
 80054dc:	d81e      	bhi.n	800551c <u8g2_draw_string+0xa0>
 80054de:	a201      	add	r2, pc, #4	; (adr r2, 80054e4 <u8g2_draw_string+0x68>)
 80054e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054e4:	080054f5 	.word	0x080054f5
 80054e8:	080054ff 	.word	0x080054ff
 80054ec:	08005509 	.word	0x08005509
 80054f0:	08005513 	.word	0x08005513
      {
	case 0:
	  x += delta;
 80054f4:	897a      	ldrh	r2, [r7, #10]
 80054f6:	8a7b      	ldrh	r3, [r7, #18]
 80054f8:	4413      	add	r3, r2
 80054fa:	817b      	strh	r3, [r7, #10]
	  break;
 80054fc:	e00e      	b.n	800551c <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 80054fe:	893a      	ldrh	r2, [r7, #8]
 8005500:	8a7b      	ldrh	r3, [r7, #18]
 8005502:	4413      	add	r3, r2
 8005504:	813b      	strh	r3, [r7, #8]
	  break;
 8005506:	e009      	b.n	800551c <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8005508:	897a      	ldrh	r2, [r7, #10]
 800550a:	8a7b      	ldrh	r3, [r7, #18]
 800550c:	1ad3      	subs	r3, r2, r3
 800550e:	817b      	strh	r3, [r7, #10]
	  break;
 8005510:	e004      	b.n	800551c <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 8005512:	893a      	ldrh	r2, [r7, #8]
 8005514:	8a7b      	ldrh	r3, [r7, #18]
 8005516:	1ad3      	subs	r3, r2, r3
 8005518:	813b      	strh	r3, [r7, #8]
	  break;
 800551a:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 800551c:	8afa      	ldrh	r2, [r7, #22]
 800551e:	8a7b      	ldrh	r3, [r7, #18]
 8005520:	4413      	add	r3, r2
 8005522:	82fb      	strh	r3, [r7, #22]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8005524:	e7b8      	b.n	8005498 <u8g2_draw_string+0x1c>
      break;
 8005526:	bf00      	nop
    }
  }
  return sum;
 8005528:	8afb      	ldrh	r3, [r7, #22]
}
 800552a:	4618      	mov	r0, r3
 800552c:	3718      	adds	r7, #24
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop

08005534 <u8g2_DrawStr>:
  }
  return sum;
}

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	60f8      	str	r0, [r7, #12]
 800553c:	607b      	str	r3, [r7, #4]
 800553e:	460b      	mov	r3, r1
 8005540:	817b      	strh	r3, [r7, #10]
 8005542:	4613      	mov	r3, r2
 8005544:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	4a06      	ldr	r2, [pc, #24]	; (8005564 <u8g2_DrawStr+0x30>)
 800554a:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 800554c:	893a      	ldrh	r2, [r7, #8]
 800554e:	8979      	ldrh	r1, [r7, #10]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	68f8      	ldr	r0, [r7, #12]
 8005554:	f7ff ff92 	bl	800547c <u8g2_draw_string>
 8005558:	4603      	mov	r3, r0
}
 800555a:	4618      	mov	r0, r3
 800555c:	3710      	adds	r7, #16
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
 8005562:	bf00      	nop
 8005564:	08005ea9 	.word	0x08005ea9

08005568 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 8005568:	b480      	push	{r7}
 800556a:	b083      	sub	sp, #12
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005574:	2b00      	cmp	r3, #0
 8005576:	d05d      	beq.n	8005634 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f993 2081 	ldrsb.w	r2, [r3, #129]	; 0x81
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f993 2082 	ldrsb.w	r2, [r3, #130]	; 0x82
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8005596:	2b00      	cmp	r3, #0
 8005598:	d04d      	beq.n	8005636 <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d11c      	bne.n	80055de <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f993 208e 	ldrsb.w	r2, [r3, #142]	; 0x8e
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f993 3083 	ldrsb.w	r3, [r3, #131]	; 0x83
 80055b0:	429a      	cmp	r2, r3
 80055b2:	da05      	bge.n	80055c0 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f993 3084 	ldrsb.w	r3, [r3, #132]	; 0x84
 80055cc:	429a      	cmp	r2, r3
 80055ce:	dd32      	ble.n	8005636 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f993 2084 	ldrsb.w	r2, [r3, #132]	; 0x84
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 80055dc:	e02b      	b.n	8005636 <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 80055e4:	461a      	mov	r2, r3
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 80055ec:	4619      	mov	r1, r3
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 80055f4:	440b      	add	r3, r1
 80055f6:	429a      	cmp	r2, r3
 80055f8:	da0d      	bge.n	8005616 <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8005600:	b2da      	uxtb	r2, r3
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8005608:	b2db      	uxtb	r3, r3
 800560a:	4413      	add	r3, r2
 800560c:	b2db      	uxtb	r3, r3
 800560e:	b25a      	sxtb	r2, r3
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8005622:	429a      	cmp	r2, r3
 8005624:	dd07      	ble.n	8005636 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f993 2080 	ldrsb.w	r2, [r3, #128]	; 0x80
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8005632:	e000      	b.n	8005636 <u8g2_UpdateRefHeight+0xce>
    return;
 8005634:	bf00      	nop
  }  
}
 8005636:	370c      	adds	r7, #12
 8005638:	46bd      	mov	sp, r7
 800563a:	bc80      	pop	{r7}
 800563c:	4770      	bx	lr

0800563e <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 800563e:	b480      	push	{r7}
 8005640:	b083      	sub	sp, #12
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
  return 0;
 8005646:	2300      	movs	r3, #0
}
 8005648:	4618      	mov	r0, r3
 800564a:	370c      	adds	r7, #12
 800564c:	46bd      	mov	sp, r7
 800564e:	bc80      	pop	{r7}
 8005650:	4770      	bx	lr
	...

08005654 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8005654:	b480      	push	{r7}
 8005656:	b083      	sub	sp, #12
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4a03      	ldr	r2, [pc, #12]	; (800566c <u8g2_SetFontPosBaseline+0x18>)
 8005660:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8005662:	bf00      	nop
 8005664:	370c      	adds	r7, #12
 8005666:	46bd      	mov	sp, r7
 8005668:	bc80      	pop	{r7}
 800566a:	4770      	bx	lr
 800566c:	0800563f 	.word	0x0800563f

08005670 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b082      	sub	sp, #8
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800567e:	683a      	ldr	r2, [r7, #0]
 8005680:	429a      	cmp	r2, r3
 8005682:	d00b      	beq.n	800569c <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	683a      	ldr	r2, [r7, #0]
 8005688:	659a      	str	r2, [r3, #88]	; 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	3374      	adds	r3, #116	; 0x74
 800568e:	6839      	ldr	r1, [r7, #0]
 8005690:	4618      	mov	r0, r3
 8005692:	f7ff fa9b 	bl	8004bcc <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f7ff ff66 	bl	8005568 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 800569c:	bf00      	nop
 800569e:	3708      	adds	r7, #8
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b087      	sub	sp, #28
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	60f8      	str	r0, [r7, #12]
 80056ac:	60b9      	str	r1, [r7, #8]
 80056ae:	4611      	mov	r1, r2
 80056b0:	461a      	mov	r2, r3
 80056b2:	460b      	mov	r3, r1
 80056b4:	80fb      	strh	r3, [r7, #6]
 80056b6:	4613      	mov	r3, r2
 80056b8:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	881b      	ldrh	r3, [r3, #0]
 80056be:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 80056c0:	8afb      	ldrh	r3, [r7, #22]
 80056c2:	82bb      	strh	r3, [r7, #20]
  b += *len;
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	881a      	ldrh	r2, [r3, #0]
 80056c8:	8abb      	ldrh	r3, [r7, #20]
 80056ca:	4413      	add	r3, r2
 80056cc:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 80056ce:	8afa      	ldrh	r2, [r7, #22]
 80056d0:	8abb      	ldrh	r3, [r7, #20]
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d90b      	bls.n	80056ee <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 80056d6:	8afa      	ldrh	r2, [r7, #22]
 80056d8:	88bb      	ldrh	r3, [r7, #4]
 80056da:	429a      	cmp	r2, r3
 80056dc:	d205      	bcs.n	80056ea <u8g2_clip_intersection2+0x46>
    {
      b = d;
 80056de:	88bb      	ldrh	r3, [r7, #4]
 80056e0:	82bb      	strh	r3, [r7, #20]
      b--;
 80056e2:	8abb      	ldrh	r3, [r7, #20]
 80056e4:	3b01      	subs	r3, #1
 80056e6:	82bb      	strh	r3, [r7, #20]
 80056e8:	e001      	b.n	80056ee <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 80056ea:	88fb      	ldrh	r3, [r7, #6]
 80056ec:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 80056ee:	8afa      	ldrh	r2, [r7, #22]
 80056f0:	88bb      	ldrh	r3, [r7, #4]
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d301      	bcc.n	80056fa <u8g2_clip_intersection2+0x56>
    return 0;
 80056f6:	2300      	movs	r3, #0
 80056f8:	e01c      	b.n	8005734 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 80056fa:	8aba      	ldrh	r2, [r7, #20]
 80056fc:	88fb      	ldrh	r3, [r7, #6]
 80056fe:	429a      	cmp	r2, r3
 8005700:	d801      	bhi.n	8005706 <u8g2_clip_intersection2+0x62>
    return 0;
 8005702:	2300      	movs	r3, #0
 8005704:	e016      	b.n	8005734 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 8005706:	8afa      	ldrh	r2, [r7, #22]
 8005708:	88fb      	ldrh	r3, [r7, #6]
 800570a:	429a      	cmp	r2, r3
 800570c:	d201      	bcs.n	8005712 <u8g2_clip_intersection2+0x6e>
    a = c;
 800570e:	88fb      	ldrh	r3, [r7, #6]
 8005710:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 8005712:	8aba      	ldrh	r2, [r7, #20]
 8005714:	88bb      	ldrh	r3, [r7, #4]
 8005716:	429a      	cmp	r2, r3
 8005718:	d901      	bls.n	800571e <u8g2_clip_intersection2+0x7a>
    b = d;
 800571a:	88bb      	ldrh	r3, [r7, #4]
 800571c:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	8afa      	ldrh	r2, [r7, #22]
 8005722:	801a      	strh	r2, [r3, #0]
  b -= a;
 8005724:	8aba      	ldrh	r2, [r7, #20]
 8005726:	8afb      	ldrh	r3, [r7, #22]
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	82bb      	strh	r3, [r7, #20]
  *len = b;
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	8aba      	ldrh	r2, [r7, #20]
 8005730:	801a      	strh	r2, [r3, #0]
  return 1;
 8005732:	2301      	movs	r3, #1
}
 8005734:	4618      	mov	r0, r3
 8005736:	371c      	adds	r7, #28
 8005738:	46bd      	mov	sp, r7
 800573a:	bc80      	pop	{r7}
 800573c:	4770      	bx	lr

0800573e <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800573e:	b590      	push	{r4, r7, lr}
 8005740:	b087      	sub	sp, #28
 8005742:	af02      	add	r7, sp, #8
 8005744:	60f8      	str	r0, [r7, #12]
 8005746:	4608      	mov	r0, r1
 8005748:	4611      	mov	r1, r2
 800574a:	461a      	mov	r2, r3
 800574c:	4603      	mov	r3, r0
 800574e:	817b      	strh	r3, [r7, #10]
 8005750:	460b      	mov	r3, r1
 8005752:	813b      	strh	r3, [r7, #8]
 8005754:	4613      	mov	r3, r2
 8005756:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800575c:	893a      	ldrh	r2, [r7, #8]
 800575e:	1ad3      	subs	r3, r2, r3
 8005760:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8005766:	88f8      	ldrh	r0, [r7, #6]
 8005768:	893a      	ldrh	r2, [r7, #8]
 800576a:	8979      	ldrh	r1, [r7, #10]
 800576c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005770:	9300      	str	r3, [sp, #0]
 8005772:	4603      	mov	r3, r0
 8005774:	68f8      	ldr	r0, [r7, #12]
 8005776:	47a0      	blx	r4
}
 8005778:	bf00      	nop
 800577a:	3714      	adds	r7, #20
 800577c:	46bd      	mov	sp, r7
 800577e:	bd90      	pop	{r4, r7, pc}

08005780 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8005780:	b590      	push	{r4, r7, lr}
 8005782:	b087      	sub	sp, #28
 8005784:	af02      	add	r7, sp, #8
 8005786:	60f8      	str	r0, [r7, #12]
 8005788:	4608      	mov	r0, r1
 800578a:	4611      	mov	r1, r2
 800578c:	461a      	mov	r2, r3
 800578e:	4603      	mov	r3, r0
 8005790:	817b      	strh	r3, [r7, #10]
 8005792:	460b      	mov	r3, r1
 8005794:	813b      	strh	r3, [r7, #8]
 8005796:	4613      	mov	r3, r2
 8005798:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d075      	beq.n	8005890 <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 80057a4:	88fb      	ldrh	r3, [r7, #6]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d072      	beq.n	8005890 <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 80057aa:	88fb      	ldrh	r3, [r7, #6]
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d91a      	bls.n	80057e6 <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 80057b0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	d109      	bne.n	80057cc <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 80057b8:	897a      	ldrh	r2, [r7, #10]
 80057ba:	88fb      	ldrh	r3, [r7, #6]
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	b29b      	uxth	r3, r3
 80057c0:	817b      	strh	r3, [r7, #10]
	  x++;
 80057c2:	897b      	ldrh	r3, [r7, #10]
 80057c4:	3301      	adds	r3, #1
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	817b      	strh	r3, [r7, #10]
 80057ca:	e00c      	b.n	80057e6 <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 80057cc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80057d0:	2b03      	cmp	r3, #3
 80057d2:	d108      	bne.n	80057e6 <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 80057d4:	893a      	ldrh	r2, [r7, #8]
 80057d6:	88fb      	ldrh	r3, [r7, #6]
 80057d8:	1ad3      	subs	r3, r2, r3
 80057da:	b29b      	uxth	r3, r3
 80057dc:	813b      	strh	r3, [r7, #8]
	  y++;
 80057de:	893b      	ldrh	r3, [r7, #8]
 80057e0:	3301      	adds	r3, #1
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 80057e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80057ea:	f003 0301 	and.w	r3, r3, #1
 80057ee:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 80057f2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d11a      	bne.n	8005830 <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8005800:	893b      	ldrh	r3, [r7, #8]
 8005802:	429a      	cmp	r2, r3
 8005804:	d83b      	bhi.n	800587e <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 800580c:	893b      	ldrh	r3, [r7, #8]
 800580e:	429a      	cmp	r2, r3
 8005810:	d937      	bls.n	8005882 <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800581e:	1db9      	adds	r1, r7, #6
 8005820:	f107 000a 	add.w	r0, r7, #10
 8005824:	f7ff ff3e 	bl	80056a4 <u8g2_clip_intersection2>
 8005828:	4603      	mov	r3, r0
 800582a:	2b00      	cmp	r3, #0
 800582c:	d11a      	bne.n	8005864 <u8g2_DrawHVLine+0xe4>
	  return;
 800582e:	e02f      	b.n	8005890 <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8005836:	897b      	ldrh	r3, [r7, #10]
 8005838:	429a      	cmp	r2, r3
 800583a:	d824      	bhi.n	8005886 <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8005842:	897b      	ldrh	r3, [r7, #10]
 8005844:	429a      	cmp	r2, r3
 8005846:	d920      	bls.n	800588a <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8005854:	1db9      	adds	r1, r7, #6
 8005856:	f107 0008 	add.w	r0, r7, #8
 800585a:	f7ff ff23 	bl	80056a4 <u8g2_clip_intersection2>
 800585e:	4603      	mov	r3, r0
 8005860:	2b00      	cmp	r3, #0
 8005862:	d014      	beq.n	800588e <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005868:	689c      	ldr	r4, [r3, #8]
 800586a:	8979      	ldrh	r1, [r7, #10]
 800586c:	893a      	ldrh	r2, [r7, #8]
 800586e:	88f8      	ldrh	r0, [r7, #6]
 8005870:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005874:	9300      	str	r3, [sp, #0]
 8005876:	4603      	mov	r3, r0
 8005878:	68f8      	ldr	r0, [r7, #12]
 800587a:	47a0      	blx	r4
 800587c:	e008      	b.n	8005890 <u8g2_DrawHVLine+0x110>
	  return;
 800587e:	bf00      	nop
 8005880:	e006      	b.n	8005890 <u8g2_DrawHVLine+0x110>
	  return;
 8005882:	bf00      	nop
 8005884:	e004      	b.n	8005890 <u8g2_DrawHVLine+0x110>
	  return;
 8005886:	bf00      	nop
 8005888:	e002      	b.n	8005890 <u8g2_DrawHVLine+0x110>
	  return;
 800588a:	bf00      	nop
 800588c:	e000      	b.n	8005890 <u8g2_DrawHVLine+0x110>
	  return;
 800588e:	bf00      	nop
    }
}
 8005890:	3714      	adds	r7, #20
 8005892:	46bd      	mov	sp, r7
 8005894:	bd90      	pop	{r4, r7, pc}

08005896 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8005896:	b490      	push	{r4, r7}
 8005898:	b082      	sub	sp, #8
 800589a:	af00      	add	r7, sp, #0
 800589c:	4604      	mov	r4, r0
 800589e:	4608      	mov	r0, r1
 80058a0:	4611      	mov	r1, r2
 80058a2:	461a      	mov	r2, r3
 80058a4:	4623      	mov	r3, r4
 80058a6:	80fb      	strh	r3, [r7, #6]
 80058a8:	4603      	mov	r3, r0
 80058aa:	80bb      	strh	r3, [r7, #4]
 80058ac:	460b      	mov	r3, r1
 80058ae:	807b      	strh	r3, [r7, #2]
 80058b0:	4613      	mov	r3, r2
 80058b2:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 80058b4:	887a      	ldrh	r2, [r7, #2]
 80058b6:	88bb      	ldrh	r3, [r7, #4]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d20d      	bcs.n	80058d8 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 80058bc:	883a      	ldrh	r2, [r7, #0]
 80058be:	88fb      	ldrh	r3, [r7, #6]
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d901      	bls.n	80058c8 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 80058c4:	2301      	movs	r3, #1
 80058c6:	e014      	b.n	80058f2 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 80058c8:	887a      	ldrh	r2, [r7, #2]
 80058ca:	883b      	ldrh	r3, [r7, #0]
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d901      	bls.n	80058d4 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e00e      	b.n	80058f2 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 80058d4:	2300      	movs	r3, #0
 80058d6:	e00c      	b.n	80058f2 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 80058d8:	883a      	ldrh	r2, [r7, #0]
 80058da:	88fb      	ldrh	r3, [r7, #6]
 80058dc:	429a      	cmp	r2, r3
 80058de:	d907      	bls.n	80058f0 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 80058e0:	887a      	ldrh	r2, [r7, #2]
 80058e2:	883b      	ldrh	r3, [r7, #0]
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d901      	bls.n	80058ec <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 80058e8:	2301      	movs	r3, #1
 80058ea:	e002      	b.n	80058f2 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 80058ec:	2300      	movs	r3, #0
 80058ee:	e000      	b.n	80058f2 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 80058f0:	2300      	movs	r3, #0
    }
  }
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3708      	adds	r7, #8
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bc90      	pop	{r4, r7}
 80058fa:	4770      	bx	lr

080058fc <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b084      	sub	sp, #16
 8005900:	af00      	add	r7, sp, #0
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	4608      	mov	r0, r1
 8005906:	4611      	mov	r1, r2
 8005908:	461a      	mov	r2, r3
 800590a:	4603      	mov	r3, r0
 800590c:	817b      	strh	r3, [r7, #10]
 800590e:	460b      	mov	r3, r1
 8005910:	813b      	strh	r3, [r7, #8]
 8005912:	4613      	mov	r3, r2
 8005914:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f8b3 104e 	ldrh.w	r1, [r3, #78]	; 0x4e
 8005922:	8b3b      	ldrh	r3, [r7, #24]
 8005924:	893a      	ldrh	r2, [r7, #8]
 8005926:	f7ff ffb6 	bl	8005896 <u8g2_is_intersection_decision_tree>
 800592a:	4603      	mov	r3, r0
 800592c:	2b00      	cmp	r3, #0
 800592e:	d101      	bne.n	8005934 <u8g2_IsIntersection+0x38>
    return 0; 
 8005930:	2300      	movs	r3, #0
 8005932:	e00a      	b.n	800594a <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
 8005940:	88fb      	ldrh	r3, [r7, #6]
 8005942:	897a      	ldrh	r2, [r7, #10]
 8005944:	f7ff ffa7 	bl	8005896 <u8g2_is_intersection_decision_tree>
 8005948:	4603      	mov	r3, r0
}
 800594a:	4618      	mov	r0, r3
 800594c:	3710      	adds	r7, #16
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}

08005952 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8005952:	b480      	push	{r7}
 8005954:	b089      	sub	sp, #36	; 0x24
 8005956:	af00      	add	r7, sp, #0
 8005958:	60f8      	str	r0, [r7, #12]
 800595a:	4608      	mov	r0, r1
 800595c:	4611      	mov	r1, r2
 800595e:	461a      	mov	r2, r3
 8005960:	4603      	mov	r3, r0
 8005962:	817b      	strh	r3, [r7, #10]
 8005964:	460b      	mov	r3, r1
 8005966:	813b      	strh	r3, [r7, #8]
 8005968:	4613      	mov	r3, r2
 800596a:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 800596c:	893b      	ldrh	r3, [r7, #8]
 800596e:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8005970:	7efb      	ldrb	r3, [r7, #27]
 8005972:	f003 0307 	and.w	r3, r3, #7
 8005976:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 8005978:	2301      	movs	r3, #1
 800597a:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 800597c:	7e3a      	ldrb	r2, [r7, #24]
 800597e:	7efb      	ldrb	r3, [r7, #27]
 8005980:	fa02 f303 	lsl.w	r3, r2, r3
 8005984:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 8005986:	2300      	movs	r3, #0
 8005988:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 800598a:	2300      	movs	r3, #0
 800598c:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8005994:	2b01      	cmp	r3, #1
 8005996:	d801      	bhi.n	800599c <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8005998:	7e3b      	ldrb	r3, [r7, #24]
 800599a:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d001      	beq.n	80059aa <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 80059a6:	7e3b      	ldrb	r3, [r7, #24]
 80059a8:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 80059aa:	893b      	ldrh	r3, [r7, #8]
 80059ac:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 80059ae:	8afb      	ldrh	r3, [r7, #22]
 80059b0:	f023 0307 	bic.w	r3, r3, #7
 80059b4:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	7c1b      	ldrb	r3, [r3, #16]
 80059bc:	b29b      	uxth	r3, r3
 80059be:	8afa      	ldrh	r2, [r7, #22]
 80059c0:	fb02 f303 	mul.w	r3, r2, r3
 80059c4:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ca:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 80059cc:	8afb      	ldrh	r3, [r7, #22]
 80059ce:	69fa      	ldr	r2, [r7, #28]
 80059d0:	4413      	add	r3, r2
 80059d2:	61fb      	str	r3, [r7, #28]
  ptr += x;
 80059d4:	897b      	ldrh	r3, [r7, #10]
 80059d6:	69fa      	ldr	r2, [r7, #28]
 80059d8:	4413      	add	r3, r2
 80059da:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 80059dc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d117      	bne.n	8005a14 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 80059e4:	69fb      	ldr	r3, [r7, #28]
 80059e6:	781a      	ldrb	r2, [r3, #0]
 80059e8:	7ebb      	ldrb	r3, [r7, #26]
 80059ea:	4313      	orrs	r3, r2
 80059ec:	b2da      	uxtb	r2, r3
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	781a      	ldrb	r2, [r3, #0]
 80059f6:	7e7b      	ldrb	r3, [r7, #25]
 80059f8:	4053      	eors	r3, r2
 80059fa:	b2da      	uxtb	r2, r3
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	701a      	strb	r2, [r3, #0]
	ptr++;
 8005a00:	69fb      	ldr	r3, [r7, #28]
 8005a02:	3301      	adds	r3, #1
 8005a04:	61fb      	str	r3, [r7, #28]
	len--;
 8005a06:	88fb      	ldrh	r3, [r7, #6]
 8005a08:	3b01      	subs	r3, #1
 8005a0a:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 8005a0c:	88fb      	ldrh	r3, [r7, #6]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d1e8      	bne.n	80059e4 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8005a12:	e038      	b.n	8005a86 <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 8005a14:	69fb      	ldr	r3, [r7, #28]
 8005a16:	781a      	ldrb	r2, [r3, #0]
 8005a18:	7ebb      	ldrb	r3, [r7, #26]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	b2da      	uxtb	r2, r3
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8005a22:	69fb      	ldr	r3, [r7, #28]
 8005a24:	781a      	ldrb	r2, [r3, #0]
 8005a26:	7e7b      	ldrb	r3, [r7, #25]
 8005a28:	4053      	eors	r3, r2
 8005a2a:	b2da      	uxtb	r2, r3
 8005a2c:	69fb      	ldr	r3, [r7, #28]
 8005a2e:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8005a30:	7efb      	ldrb	r3, [r7, #27]
 8005a32:	3301      	adds	r3, #1
 8005a34:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 8005a36:	7efb      	ldrb	r3, [r7, #27]
 8005a38:	f003 0307 	and.w	r3, r3, #7
 8005a3c:	76fb      	strb	r3, [r7, #27]
      len--;
 8005a3e:	88fb      	ldrh	r3, [r7, #6]
 8005a40:	3b01      	subs	r3, #1
 8005a42:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 8005a44:	7efb      	ldrb	r3, [r7, #27]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d114      	bne.n	8005a74 <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8005a4e:	461a      	mov	r2, r3
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	4413      	add	r3, r2
 8005a54:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d801      	bhi.n	8005a64 <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 8005a60:	2301      	movs	r3, #1
 8005a62:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d008      	beq.n	8005a80 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	767b      	strb	r3, [r7, #25]
 8005a72:	e005      	b.n	8005a80 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 8005a74:	7ebb      	ldrb	r3, [r7, #26]
 8005a76:	005b      	lsls	r3, r3, #1
 8005a78:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 8005a7a:	7e7b      	ldrb	r3, [r7, #25]
 8005a7c:	005b      	lsls	r3, r3, #1
 8005a7e:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 8005a80:	88fb      	ldrh	r3, [r7, #6]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d1c6      	bne.n	8005a14 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8005a86:	bf00      	nop
 8005a88:	3724      	adds	r7, #36	; 0x24
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bc80      	pop	{r7}
 8005a8e:	4770      	bx	lr

08005a90 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b082      	sub	sp, #8
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  u8g2->clip_y0 = 0;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005aae:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ab8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  
  u8g2->cb->update_page_win(u8g2);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	4798      	blx	r3
}
 8005ac6:	bf00      	nop
 8005ac8:	3708      	adds	r7, #8
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}

08005ace <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8005ace:	b580      	push	{r7, lr}
 8005ad0:	b084      	sub	sp, #16
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	60f8      	str	r0, [r7, #12]
 8005ad6:	60b9      	str	r1, [r7, #8]
 8005ad8:	603b      	str	r3, [r7, #0]
 8005ada:	4613      	mov	r3, r2
 8005adc:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	659a      	str	r2, [r3, #88]	; 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	683a      	ldr	r2, [r7, #0]
 8005ae8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	68ba      	ldr	r2, [r7, #8]
 8005aee:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	79fa      	ldrb	r2, [r7, #7]
 8005af4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2200      	movs	r2, #0
 8005afc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2200      	movs	r2, #0
 8005b04:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  u8g2->bitmap_transparency = 0;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  
  u8g2->font_height_mode = 0; /* issue 2046 */
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2200      	movs	r2, #0
 8005b14:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
  u8g2->draw_color = 1;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  u8g2->is_auto_page_clear = 1;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2201      	movs	r2, #1
 8005b24:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
  
  u8g2->cb = u8g2_cb;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	69ba      	ldr	r2, [r7, #24]
 8005b2c:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	68f8      	ldr	r0, [r7, #12]
 8005b36:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8005b38:	68f8      	ldr	r0, [r7, #12]
 8005b3a:	f7ff ffa9 	bl	8005a90 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8005b3e:	68f8      	ldr	r0, [r7, #12]
 8005b40:	f7ff fd88 	bl	8005654 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2200      	movs	r2, #0
 8005b48:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
#endif
}
 8005b4c:	bf00      	nop
 8005b4e:	3710      	adds	r7, #16
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}

08005b54 <u8g2_SetDisplayRotation>:
/*
  Usually the display rotation is set initially, but it could be done later also
  u8g2_cb can be U8G2_R0..U8G2_R3
*/
void u8g2_SetDisplayRotation(u8g2_t *u8g2, const u8g2_cb_t *u8g2_cb)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b082      	sub	sp, #8
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
  u8g2->cb = u8g2_cb;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	683a      	ldr	r2, [r7, #0]
 8005b62:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	4798      	blx	r3
}
 8005b78:	bf00      	nop
 8005b7a:	3708      	adds	r7, #8
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}

08005b80 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b085      	sub	sp, #20
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005b94:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8005b96:	89fb      	ldrh	r3, [r7, #14]
 8005b98:	00db      	lsls	r3, r3, #3
 8005b9a:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	89fa      	ldrh	r2, [r7, #14]
 8005ba0:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  t = display_info->tile_width;
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	7c1b      	ldrb	r3, [r3, #16]
 8005ba6:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 8005ba8:	89fb      	ldrh	r3, [r7, #14]
 8005baa:	00db      	lsls	r3, r3, #3
 8005bac:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	89fa      	ldrh	r2, [r7, #14]
 8005bb2:	875a      	strh	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005bba:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8005bbc:	89fb      	ldrh	r3, [r7, #14]
 8005bbe:	00db      	lsls	r3, r3, #3
 8005bc0:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	89fa      	ldrh	r2, [r7, #14]
 8005bc6:	87da      	strh	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_buf_height;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005bce:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8005bd0:	89fb      	ldrh	r3, [r7, #14]
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 8005bd8:	4413      	add	r3, r2
 8005bda:	68ba      	ldr	r2, [r7, #8]
 8005bdc:	7c52      	ldrb	r2, [r2, #17]
 8005bde:	4293      	cmp	r3, r2
 8005be0:	dd08      	ble.n	8005bf4 <u8g2_update_dimension_common+0x74>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	7c5b      	ldrb	r3, [r3, #17]
 8005be6:	b29a      	uxth	r2, r3
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8005bf4:	89fb      	ldrh	r3, [r7, #14]
 8005bf6:	00db      	lsls	r3, r3, #3
 8005bf8:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8005c16:	89fb      	ldrh	r3, [r7, #14]
 8005c18:	4413      	add	r3, r2
 8005c1a:	b29a      	uxth	r2, r3
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	8a9a      	ldrh	r2, [r3, #20]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  u8g2->height = display_info->pixel_height;
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	8ada      	ldrh	r2, [r3, #22]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 8005c36:	bf00      	nop
 8005c38:	3714      	adds	r7, #20
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bc80      	pop	{r7}
 8005c3e:	4770      	bx	lr

08005c40 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b084      	sub	sp, #16
 8005c44:	af02      	add	r7, sp, #8
 8005c46:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f8b3 0052 	ldrh.w	r0, [r3, #82]	; 0x52
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005c60:	9300      	str	r3, [sp, #0]
 8005c62:	4603      	mov	r3, r0
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f7ff fe49 	bl	80058fc <u8g2_IsIntersection>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d104      	bne.n	8005c7a <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2200      	movs	r2, #0
 8005c74:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 8005c78:	e03b      	b.n	8005cf2 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d205      	bcs.n	8005c9e <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d905      	bls.n	8005cba <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d205      	bcs.n	8005cd6 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d905      	bls.n	8005cf2 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 8005cf2:	bf00      	nop
 8005cf4:	3708      	adds	r7, #8
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}

08005cfa <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 8005cfa:	b580      	push	{r7, lr}
 8005cfc:	b082      	sub	sp, #8
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f7ff ff3c 	bl	8005b80 <u8g2_update_dimension_common>
}
 8005d08:	bf00      	nop
 8005d0a:	3708      	adds	r7, #8
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}

08005d10 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b082      	sub	sp, #8
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  
  u8g2->user_y0 = u8g2->buf_y0;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  u8g2->user_y1 = u8g2->buf_y1;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f7ff ff7b 	bl	8005c40 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8005d4a:	bf00      	nop
 8005d4c:	3708      	adds	r7, #8
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}

08005d52 <u8g2_update_dimension_r2>:
  u8g2_apply_clip_window(u8g2);
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}

void u8g2_update_dimension_r2(u8g2_t *u8g2)
{
 8005d52:	b580      	push	{r7, lr}
 8005d54:	b082      	sub	sp, #8
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f7ff ff10 	bl	8005b80 <u8g2_update_dimension_common>
}
 8005d60:	bf00      	nop
 8005d62:	3708      	adds	r7, #8
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <u8g2_update_page_win_r2>:

void u8g2_update_page_win_r2(u8g2_t *u8g2)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b082      	sub	sp, #8
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  u8g2->user_x1 = u8g2->width;	/* pixel_buf_width replaced with width */
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  
  /* there are ases where the height is not a multiple of 8. */
  /* in such a case u8g2->buf_y1 might be heigher than u8g2->height */
  u8g2->user_y0 = 0;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  if ( u8g2->height >= u8g2->buf_y1 )
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f8b3 2046 	ldrh.w	r2, [r3, #70]	; 0x46
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d30a      	bcc.n	8005db2 <u8g2_update_page_win_r2+0x4a>
    u8g2->user_y0 = u8g2->height - u8g2->buf_y1;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f8b3 2046 	ldrh.w	r2, [r3, #70]	; 0x46
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8005da8:	1ad3      	subs	r3, r2, r3
 8005daa:	b29a      	uxth	r2, r3
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  u8g2->user_y1 = u8g2->height - u8g2->buf_y0;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f8b3 2046 	ldrh.w	r2, [r3, #70]	; 0x46
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005dbe:	1ad3      	subs	r3, r2, r3
 8005dc0:	b29a      	uxth	r2, r3
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f7ff ff39 	bl	8005c40 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8005dce:	bf00      	nop
 8005dd0:	3708      	adds	r7, #8
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}

08005dd6 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8005dd6:	b580      	push	{r7, lr}
 8005dd8:	b086      	sub	sp, #24
 8005dda:	af02      	add	r7, sp, #8
 8005ddc:	60f8      	str	r0, [r7, #12]
 8005dde:	4608      	mov	r0, r1
 8005de0:	4611      	mov	r1, r2
 8005de2:	461a      	mov	r2, r3
 8005de4:	4603      	mov	r3, r0
 8005de6:	817b      	strh	r3, [r7, #10]
 8005de8:	460b      	mov	r3, r1
 8005dea:	813b      	strh	r3, [r7, #8]
 8005dec:	4613      	mov	r3, r2
 8005dee:	80fb      	strh	r3, [r7, #6]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8005df0:	88f8      	ldrh	r0, [r7, #6]
 8005df2:	893a      	ldrh	r2, [r7, #8]
 8005df4:	8979      	ldrh	r1, [r7, #10]
 8005df6:	7e3b      	ldrb	r3, [r7, #24]
 8005df8:	9300      	str	r3, [sp, #0]
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	68f8      	ldr	r0, [r7, #12]
 8005dfe:	f7ff fc9e 	bl	800573e <u8g2_draw_hv_line_2dir>
}
 8005e02:	bf00      	nop
 8005e04:	3710      	adds	r7, #16
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}

08005e0a <u8g2_draw_l90_r2>:
  
  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
}

void u8g2_draw_l90_r2(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8005e0a:	b580      	push	{r7, lr}
 8005e0c:	b088      	sub	sp, #32
 8005e0e:	af02      	add	r7, sp, #8
 8005e10:	60f8      	str	r0, [r7, #12]
 8005e12:	4608      	mov	r0, r1
 8005e14:	4611      	mov	r1, r2
 8005e16:	461a      	mov	r2, r3
 8005e18:	4603      	mov	r3, r0
 8005e1a:	817b      	strh	r3, [r7, #10]
 8005e1c:	460b      	mov	r3, r1
 8005e1e:	813b      	strh	r3, [r7, #8]
 8005e20:	4613      	mov	r3, r2
 8005e22:	80fb      	strh	r3, [r7, #6]
    yy -= len;
    yy++;
  }
  */

  yy = u8g2->height;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e2a:	82bb      	strh	r3, [r7, #20]
  yy -= y;
 8005e2c:	8aba      	ldrh	r2, [r7, #20]
 8005e2e:	893b      	ldrh	r3, [r7, #8]
 8005e30:	1ad3      	subs	r3, r2, r3
 8005e32:	82bb      	strh	r3, [r7, #20]
  
  xx = u8g2->width;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005e3a:	82fb      	strh	r3, [r7, #22]
  xx -= x;
 8005e3c:	8afa      	ldrh	r2, [r7, #22]
 8005e3e:	897b      	ldrh	r3, [r7, #10]
 8005e40:	1ad3      	subs	r3, r2, r3
 8005e42:	82fb      	strh	r3, [r7, #22]
  
  if ( dir == 0 )
 8005e44:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d107      	bne.n	8005e5c <u8g2_draw_l90_r2+0x52>
  {
    yy--;
 8005e4c:	8abb      	ldrh	r3, [r7, #20]
 8005e4e:	3b01      	subs	r3, #1
 8005e50:	82bb      	strh	r3, [r7, #20]
    xx -= len;
 8005e52:	8afa      	ldrh	r2, [r7, #22]
 8005e54:	88fb      	ldrh	r3, [r7, #6]
 8005e56:	1ad3      	subs	r3, r2, r3
 8005e58:	82fb      	strh	r3, [r7, #22]
 8005e5a:	e00a      	b.n	8005e72 <u8g2_draw_l90_r2+0x68>
  }
  else if ( dir == 1 )
 8005e5c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d106      	bne.n	8005e72 <u8g2_draw_l90_r2+0x68>
  {
    xx--;
 8005e64:	8afb      	ldrh	r3, [r7, #22]
 8005e66:	3b01      	subs	r3, #1
 8005e68:	82fb      	strh	r3, [r7, #22]
    yy -= len;
 8005e6a:	8aba      	ldrh	r2, [r7, #20]
 8005e6c:	88fb      	ldrh	r3, [r7, #6]
 8005e6e:	1ad3      	subs	r3, r2, r3
 8005e70:	82bb      	strh	r3, [r7, #20]
  }

  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 8005e72:	88f8      	ldrh	r0, [r7, #6]
 8005e74:	8aba      	ldrh	r2, [r7, #20]
 8005e76:	8af9      	ldrh	r1, [r7, #22]
 8005e78:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005e7c:	9300      	str	r3, [sp, #0]
 8005e7e:	4603      	mov	r3, r0
 8005e80:	68f8      	ldr	r0, [r7, #12]
 8005e82:	f7ff fc5c 	bl	800573e <u8g2_draw_hv_line_2dir>
}
 8005e86:	bf00      	nop
 8005e88:	3718      	adds	r7, #24
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}

08005e8e <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8005e8e:	b480      	push	{r7}
 8005e90:	b083      	sub	sp, #12
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8005e9e:	bf00      	nop
 8005ea0:	370c      	adds	r7, #12
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bc80      	pop	{r7}
 8005ea6:	4770      	bx	lr

08005ea8 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b083      	sub	sp, #12
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	460b      	mov	r3, r1
 8005eb2:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8005eb4:	78fb      	ldrb	r3, [r7, #3]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d002      	beq.n	8005ec0 <u8x8_ascii_next+0x18>
 8005eba:	78fb      	ldrb	r3, [r7, #3]
 8005ebc:	2b0a      	cmp	r3, #10
 8005ebe:	d102      	bne.n	8005ec6 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 8005ec0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005ec4:	e001      	b.n	8005eca <u8x8_ascii_next+0x22>
  return b;
 8005ec6:	78fb      	ldrb	r3, [r7, #3]
 8005ec8:	b29b      	uxth	r3, r3
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	370c      	adds	r7, #12
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bc80      	pop	{r7}
 8005ed2:	4770      	bx	lr

08005ed4 <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 8005ed4:	b590      	push	{r4, r7, lr}
 8005ed6:	b083      	sub	sp, #12
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	460b      	mov	r3, r1
 8005ede:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	691c      	ldr	r4, [r3, #16]
 8005ee4:	78fa      	ldrb	r2, [r7, #3]
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	2120      	movs	r1, #32
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	47a0      	blx	r4
 8005eee:	4603      	mov	r3, r0
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	370c      	adds	r7, #12
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd90      	pop	{r4, r7, pc}

08005ef8 <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8005ef8:	b590      	push	{r4, r7, lr}
 8005efa:	b085      	sub	sp, #20
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	60f8      	str	r0, [r7, #12]
 8005f00:	460b      	mov	r3, r1
 8005f02:	607a      	str	r2, [r7, #4]
 8005f04:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	691c      	ldr	r4, [r3, #16]
 8005f0a:	7afa      	ldrb	r2, [r7, #11]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2117      	movs	r1, #23
 8005f10:	68f8      	ldr	r0, [r7, #12]
 8005f12:	47a0      	blx	r4
 8005f14:	4603      	mov	r3, r0
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3714      	adds	r7, #20
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd90      	pop	{r4, r7, pc}

08005f1e <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8005f1e:	b580      	push	{r7, lr}
 8005f20:	b082      	sub	sp, #8
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	6078      	str	r0, [r7, #4]
 8005f26:	460b      	mov	r3, r1
 8005f28:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8005f2a:	1cfb      	adds	r3, r7, #3
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	2101      	movs	r1, #1
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f7ff ffe1 	bl	8005ef8 <u8x8_byte_SendBytes>
 8005f36:	4603      	mov	r3, r0
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3708      	adds	r7, #8
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}

08005f40 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8005f40:	b590      	push	{r4, r7, lr}
 8005f42:	b083      	sub	sp, #12
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	460b      	mov	r3, r1
 8005f4a:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	68dc      	ldr	r4, [r3, #12]
 8005f50:	78fa      	ldrb	r2, [r7, #3]
 8005f52:	2300      	movs	r3, #0
 8005f54:	2115      	movs	r1, #21
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	47a0      	blx	r4
 8005f5a:	4603      	mov	r3, r0
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	370c      	adds	r7, #12
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd90      	pop	{r4, r7, pc}

08005f64 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8005f64:	b590      	push	{r4, r7, lr}
 8005f66:	b083      	sub	sp, #12
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	460b      	mov	r3, r1
 8005f6e:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	68dc      	ldr	r4, [r3, #12]
 8005f74:	78fa      	ldrb	r2, [r7, #3]
 8005f76:	2300      	movs	r3, #0
 8005f78:	2116      	movs	r1, #22
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	47a0      	blx	r4
 8005f7e:	4603      	mov	r3, r0
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	370c      	adds	r7, #12
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd90      	pop	{r4, r7, pc}

08005f88 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8005f88:	b590      	push	{r4, r7, lr}
 8005f8a:	b085      	sub	sp, #20
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	60f8      	str	r0, [r7, #12]
 8005f90:	460b      	mov	r3, r1
 8005f92:	607a      	str	r2, [r7, #4]
 8005f94:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	68dc      	ldr	r4, [r3, #12]
 8005f9a:	7afa      	ldrb	r2, [r7, #11]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2117      	movs	r1, #23
 8005fa0:	68f8      	ldr	r0, [r7, #12]
 8005fa2:	47a0      	blx	r4
 8005fa4:	4603      	mov	r3, r0
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3714      	adds	r7, #20
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd90      	pop	{r4, r7, pc}

08005fae <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8005fae:	b590      	push	{r4, r7, lr}
 8005fb0:	b083      	sub	sp, #12
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	68dc      	ldr	r4, [r3, #12]
 8005fba:	2300      	movs	r3, #0
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	2118      	movs	r1, #24
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	47a0      	blx	r4
 8005fc4:	4603      	mov	r3, r0
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	370c      	adds	r7, #12
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd90      	pop	{r4, r7, pc}

08005fce <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8005fce:	b590      	push	{r4, r7, lr}
 8005fd0:	b083      	sub	sp, #12
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	68dc      	ldr	r4, [r3, #12]
 8005fda:	2300      	movs	r3, #0
 8005fdc:	2200      	movs	r2, #0
 8005fde:	2119      	movs	r1, #25
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	47a0      	blx	r4
 8005fe4:	4603      	mov	r3, r0
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	370c      	adds	r7, #12
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd90      	pop	{r4, r7, pc}

08005fee <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8005fee:	b590      	push	{r4, r7, lr}
 8005ff0:	b085      	sub	sp, #20
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	6078      	str	r0, [r7, #4]
 8005ff6:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	73fb      	strb	r3, [r7, #15]
    data++;
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	3301      	adds	r3, #1
 8006002:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8006004:	7bfb      	ldrb	r3, [r7, #15]
 8006006:	2bfe      	cmp	r3, #254	; 0xfe
 8006008:	d031      	beq.n	800606e <u8x8_cad_SendSequence+0x80>
 800600a:	2bfe      	cmp	r3, #254	; 0xfe
 800600c:	dc3d      	bgt.n	800608a <u8x8_cad_SendSequence+0x9c>
 800600e:	2b19      	cmp	r3, #25
 8006010:	dc3b      	bgt.n	800608a <u8x8_cad_SendSequence+0x9c>
 8006012:	2b18      	cmp	r3, #24
 8006014:	da23      	bge.n	800605e <u8x8_cad_SendSequence+0x70>
 8006016:	2b16      	cmp	r3, #22
 8006018:	dc02      	bgt.n	8006020 <u8x8_cad_SendSequence+0x32>
 800601a:	2b15      	cmp	r3, #21
 800601c:	da03      	bge.n	8006026 <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 800601e:	e034      	b.n	800608a <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 8006020:	2b17      	cmp	r3, #23
 8006022:	d00e      	beq.n	8006042 <u8x8_cad_SendSequence+0x54>
	return;
 8006024:	e031      	b.n	800608a <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	68dc      	ldr	r4, [r3, #12]
 8006030:	7bba      	ldrb	r2, [r7, #14]
 8006032:	7bf9      	ldrb	r1, [r7, #15]
 8006034:	2300      	movs	r3, #0
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	47a0      	blx	r4
	  data++;
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	3301      	adds	r3, #1
 800603e:	603b      	str	r3, [r7, #0]
	  break;
 8006040:	e022      	b.n	8006088 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	781b      	ldrb	r3, [r3, #0]
 8006046:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8006048:	f107 030e 	add.w	r3, r7, #14
 800604c:	461a      	mov	r2, r3
 800604e:	2101      	movs	r1, #1
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f7ff ff99 	bl	8005f88 <u8x8_cad_SendData>
	  data++;
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	3301      	adds	r3, #1
 800605a:	603b      	str	r3, [r7, #0]
	  break;
 800605c:	e014      	b.n	8006088 <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	68dc      	ldr	r4, [r3, #12]
 8006062:	7bf9      	ldrb	r1, [r7, #15]
 8006064:	2300      	movs	r3, #0
 8006066:	2200      	movs	r2, #0
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	47a0      	blx	r4
	  break;
 800606c:	e00c      	b.n	8006088 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8006074:	7bbb      	ldrb	r3, [r7, #14]
 8006076:	461a      	mov	r2, r3
 8006078:	2129      	movs	r1, #41	; 0x29
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 f9d8 	bl	8006430 <u8x8_gpio_call>
	  data++;
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	3301      	adds	r3, #1
 8006084:	603b      	str	r3, [r7, #0]
	  break;
 8006086:	bf00      	nop
    cmd = *data;
 8006088:	e7b6      	b.n	8005ff8 <u8x8_cad_SendSequence+0xa>
	return;
 800608a:	bf00      	nop
    }
  }
}
 800608c:	3714      	adds	r7, #20
 800608e:	46bd      	mov	sp, r7
 8006090:	bd90      	pop	{r4, r7, pc}
	...

08006094 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8006094:	b590      	push	{r4, r7, lr}
 8006096:	b085      	sub	sp, #20
 8006098:	af00      	add	r7, sp, #0
 800609a:	60f8      	str	r0, [r7, #12]
 800609c:	607b      	str	r3, [r7, #4]
 800609e:	460b      	mov	r3, r1
 80060a0:	72fb      	strb	r3, [r7, #11]
 80060a2:	4613      	mov	r3, r2
 80060a4:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 80060a6:	7afb      	ldrb	r3, [r7, #11]
 80060a8:	3b14      	subs	r3, #20
 80060aa:	2b05      	cmp	r3, #5
 80060ac:	d82f      	bhi.n	800610e <u8x8_cad_001+0x7a>
 80060ae:	a201      	add	r2, pc, #4	; (adr r2, 80060b4 <u8x8_cad_001+0x20>)
 80060b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060b4:	080060fd 	.word	0x080060fd
 80060b8:	080060cd 	.word	0x080060cd
 80060bc:	080060e1 	.word	0x080060e1
 80060c0:	080060f5 	.word	0x080060f5
 80060c4:	080060fd 	.word	0x080060fd
 80060c8:	080060fd 	.word	0x080060fd
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 80060cc:	2100      	movs	r1, #0
 80060ce:	68f8      	ldr	r0, [r7, #12]
 80060d0:	f7ff ff00 	bl	8005ed4 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 80060d4:	7abb      	ldrb	r3, [r7, #10]
 80060d6:	4619      	mov	r1, r3
 80060d8:	68f8      	ldr	r0, [r7, #12]
 80060da:	f7ff ff20 	bl	8005f1e <u8x8_byte_SendByte>
      break;
 80060de:	e018      	b.n	8006112 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 80060e0:	2100      	movs	r1, #0
 80060e2:	68f8      	ldr	r0, [r7, #12]
 80060e4:	f7ff fef6 	bl	8005ed4 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 80060e8:	7abb      	ldrb	r3, [r7, #10]
 80060ea:	4619      	mov	r1, r3
 80060ec:	68f8      	ldr	r0, [r7, #12]
 80060ee:	f7ff ff16 	bl	8005f1e <u8x8_byte_SendByte>
      break;
 80060f2:	e00e      	b.n	8006112 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 80060f4:	2101      	movs	r1, #1
 80060f6:	68f8      	ldr	r0, [r7, #12]
 80060f8:	f7ff feec 	bl	8005ed4 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	691c      	ldr	r4, [r3, #16]
 8006100:	7aba      	ldrb	r2, [r7, #10]
 8006102:	7af9      	ldrb	r1, [r7, #11]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	68f8      	ldr	r0, [r7, #12]
 8006108:	47a0      	blx	r4
 800610a:	4603      	mov	r3, r0
 800610c:	e002      	b.n	8006114 <u8x8_cad_001+0x80>
    default:
      return 0;
 800610e:	2300      	movs	r3, #0
 8006110:	e000      	b.n	8006114 <u8x8_cad_001+0x80>
  }
  return 1;
 8006112:	2301      	movs	r3, #1
}
 8006114:	4618      	mov	r0, r3
 8006116:	3714      	adds	r7, #20
 8006118:	46bd      	mov	sp, r7
 800611a:	bd90      	pop	{r4, r7, pc}

0800611c <u8x8_d_ssd1306_sh1106_generic>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b086      	sub	sp, #24
 8006120:	af00      	add	r7, sp, #0
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	607b      	str	r3, [r7, #4]
 8006126:	460b      	mov	r3, r1
 8006128:	72fb      	strb	r3, [r7, #11]
 800612a:	4613      	mov	r3, r2
 800612c:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 800612e:	7afb      	ldrb	r3, [r7, #11]
 8006130:	3b0b      	subs	r3, #11
 8006132:	2b04      	cmp	r3, #4
 8006134:	f200 808a 	bhi.w	800624c <u8x8_d_ssd1306_sh1106_generic+0x130>
 8006138:	a201      	add	r2, pc, #4	; (adr r2, 8006140 <u8x8_d_ssd1306_sh1106_generic+0x24>)
 800613a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800613e:	bf00      	nop
 8006140:	08006155 	.word	0x08006155
 8006144:	0800624d 	.word	0x0800624d
 8006148:	0800616f 	.word	0x0800616f
 800614c:	080061a1 	.word	0x080061a1
 8006150:	080061c1 	.word	0x080061c1
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8006154:	7abb      	ldrb	r3, [r7, #10]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d104      	bne.n	8006164 <u8x8_d_ssd1306_sh1106_generic+0x48>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
 800615a:	4940      	ldr	r1, [pc, #256]	; (800625c <u8x8_d_ssd1306_sh1106_generic+0x140>)
 800615c:	68f8      	ldr	r0, [r7, #12]
 800615e:	f7ff ff46 	bl	8005fee <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
      break;
 8006162:	e075      	b.n	8006250 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
 8006164:	493e      	ldr	r1, [pc, #248]	; (8006260 <u8x8_d_ssd1306_sh1106_generic+0x144>)
 8006166:	68f8      	ldr	r0, [r7, #12]
 8006168:	f7ff ff41 	bl	8005fee <u8x8_cad_SendSequence>
      break;
 800616c:	e070      	b.n	8006250 <u8x8_d_ssd1306_sh1106_generic+0x134>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 800616e:	7abb      	ldrb	r3, [r7, #10]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d10a      	bne.n	800618a <u8x8_d_ssd1306_sh1106_generic+0x6e>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
 8006174:	493b      	ldr	r1, [pc, #236]	; (8006264 <u8x8_d_ssd1306_sh1106_generic+0x148>)
 8006176:	68f8      	ldr	r0, [r7, #12]
 8006178:	f7ff ff39 	bl	8005fee <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	7c9a      	ldrb	r2, [r3, #18]
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 8006188:	e062      	b.n	8006250 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
 800618a:	4937      	ldr	r1, [pc, #220]	; (8006268 <u8x8_d_ssd1306_sh1106_generic+0x14c>)
 800618c:	68f8      	ldr	r0, [r7, #12]
 800618e:	f7ff ff2e 	bl	8005fee <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	7cda      	ldrb	r2, [r3, #19]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 800619e:	e057      	b.n	8006250 <u8x8_d_ssd1306_sh1106_generic+0x134>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 80061a0:	68f8      	ldr	r0, [r7, #12]
 80061a2:	f7ff ff04 	bl	8005fae <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 80061a6:	2181      	movs	r1, #129	; 0x81
 80061a8:	68f8      	ldr	r0, [r7, #12]
 80061aa:	f7ff fec9 	bl	8005f40 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
 80061ae:	7abb      	ldrb	r3, [r7, #10]
 80061b0:	4619      	mov	r1, r3
 80061b2:	68f8      	ldr	r0, [r7, #12]
 80061b4:	f7ff fed6 	bl	8005f64 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 80061b8:	68f8      	ldr	r0, [r7, #12]
 80061ba:	f7ff ff08 	bl	8005fce <u8x8_cad_EndTransfer>
      break;
 80061be:	e047      	b.n	8006250 <u8x8_d_ssd1306_sh1106_generic+0x134>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 80061c0:	68f8      	ldr	r0, [r7, #12]
 80061c2:	f7ff fef4 	bl	8005fae <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	795b      	ldrb	r3, [r3, #5]
 80061ca:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 80061cc:	7dfb      	ldrb	r3, [r7, #23]
 80061ce:	00db      	lsls	r3, r3, #3
 80061d0:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80061d8:	7dfb      	ldrb	r3, [r7, #23]
 80061da:	4413      	add	r3, r2
 80061dc:	75fb      	strb	r3, [r7, #23]
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 80061de:	2140      	movs	r1, #64	; 0x40
 80061e0:	68f8      	ldr	r0, [r7, #12]
 80061e2:	f7ff fead 	bl	8005f40 <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 80061e6:	7dfb      	ldrb	r3, [r7, #23]
 80061e8:	091b      	lsrs	r3, r3, #4
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	f043 0310 	orr.w	r3, r3, #16
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	4619      	mov	r1, r3
 80061f4:	68f8      	ldr	r0, [r7, #12]
 80061f6:	f7ff fea3 	bl	8005f40 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
 80061fa:	7dfb      	ldrb	r3, [r7, #23]
 80061fc:	f003 030f 	and.w	r3, r3, #15
 8006200:	b2db      	uxtb	r3, r3
 8006202:	4619      	mov	r1, r3
 8006204:	68f8      	ldr	r0, [r7, #12]
 8006206:	f7ff fead 	bl	8005f64 <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	799b      	ldrb	r3, [r3, #6]
 800620e:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8006212:	b2db      	uxtb	r3, r3
 8006214:	4619      	mov	r1, r3
 8006216:	68f8      	ldr	r0, [r7, #12]
 8006218:	f7ff fea4 	bl	8005f64 <u8x8_cad_SendArg>

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	791b      	ldrb	r3, [r3, #4]
 8006220:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 8006228:	7dbb      	ldrb	r3, [r7, #22]
 800622a:	00db      	lsls	r3, r3, #3
 800622c:	b2db      	uxtb	r3, r3
 800622e:	693a      	ldr	r2, [r7, #16]
 8006230:	4619      	mov	r1, r3
 8006232:	68f8      	ldr	r0, [r7, #12]
 8006234:	f7ff fea8 	bl	8005f88 <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 8006238:	7abb      	ldrb	r3, [r7, #10]
 800623a:	3b01      	subs	r3, #1
 800623c:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 800623e:	7abb      	ldrb	r3, [r7, #10]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d1eb      	bne.n	800621c <u8x8_d_ssd1306_sh1106_generic+0x100>
      
      u8x8_cad_EndTransfer(u8x8);
 8006244:	68f8      	ldr	r0, [r7, #12]
 8006246:	f7ff fec2 	bl	8005fce <u8x8_cad_EndTransfer>
      break;
 800624a:	e001      	b.n	8006250 <u8x8_d_ssd1306_sh1106_generic+0x134>
    default:
      return 0;
 800624c:	2300      	movs	r3, #0
 800624e:	e000      	b.n	8006252 <u8x8_d_ssd1306_sh1106_generic+0x136>
  }
  return 1;
 8006250:	2301      	movs	r3, #1
}
 8006252:	4618      	mov	r0, r3
 8006254:	3718      	adds	r7, #24
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}
 800625a:	bf00      	nop
 800625c:	0800ca94 	.word	0x0800ca94
 8006260:	0800ca9c 	.word	0x0800ca9c
 8006264:	0800caa4 	.word	0x0800caa4
 8006268:	0800caac 	.word	0x0800caac

0800626c <u8x8_d_ssd1306_128x64_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b084      	sub	sp, #16
 8006270:	af00      	add	r7, sp, #0
 8006272:	60f8      	str	r0, [r7, #12]
 8006274:	607b      	str	r3, [r7, #4]
 8006276:	460b      	mov	r3, r1
 8006278:	72fb      	strb	r3, [r7, #11]
 800627a:	4613      	mov	r3, r2
 800627c:	72bb      	strb	r3, [r7, #10]
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 800627e:	7aba      	ldrb	r2, [r7, #10]
 8006280:	7af9      	ldrb	r1, [r7, #11]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	68f8      	ldr	r0, [r7, #12]
 8006286:	f7ff ff49 	bl	800611c <u8x8_d_ssd1306_sh1106_generic>
 800628a:	4603      	mov	r3, r0
 800628c:	2b00      	cmp	r3, #0
 800628e:	d001      	beq.n	8006294 <u8x8_d_ssd1306_128x64_noname+0x28>
    return 1;
 8006290:	2301      	movs	r3, #1
 8006292:	e014      	b.n	80062be <u8x8_d_ssd1306_128x64_noname+0x52>
  
  switch(msg)
 8006294:	7afb      	ldrb	r3, [r7, #11]
 8006296:	2b09      	cmp	r3, #9
 8006298:	d009      	beq.n	80062ae <u8x8_d_ssd1306_128x64_noname+0x42>
 800629a:	2b0a      	cmp	r3, #10
 800629c:	d10c      	bne.n	80062b8 <u8x8_d_ssd1306_128x64_noname+0x4c>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 800629e:	68f8      	ldr	r0, [r7, #12]
 80062a0:	f000 f829 	bl	80062f6 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
 80062a4:	4908      	ldr	r1, [pc, #32]	; (80062c8 <u8x8_d_ssd1306_128x64_noname+0x5c>)
 80062a6:	68f8      	ldr	r0, [r7, #12]
 80062a8:	f7ff fea1 	bl	8005fee <u8x8_cad_SendSequence>
      break;
 80062ac:	e006      	b.n	80062bc <u8x8_d_ssd1306_128x64_noname+0x50>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
 80062ae:	4907      	ldr	r1, [pc, #28]	; (80062cc <u8x8_d_ssd1306_128x64_noname+0x60>)
 80062b0:	68f8      	ldr	r0, [r7, #12]
 80062b2:	f000 f80d 	bl	80062d0 <u8x8_d_helper_display_setup_memory>
      break;
 80062b6:	e001      	b.n	80062bc <u8x8_d_ssd1306_128x64_noname+0x50>
    default:
      return 0;
 80062b8:	2300      	movs	r3, #0
 80062ba:	e000      	b.n	80062be <u8x8_d_ssd1306_128x64_noname+0x52>
  }
  return 1;
 80062bc:	2301      	movs	r3, #1
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3710      	adds	r7, #16
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	bf00      	nop
 80062c8:	0800ca5c 	.word	0x0800ca5c
 80062cc:	0800cab4 	.word	0x0800cab4

080062d0 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b083      	sub	sp, #12
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	683a      	ldr	r2, [r7, #0]
 80062de:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	7c9a      	ldrb	r2, [r3, #18]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 80062ec:	bf00      	nop
 80062ee:	370c      	adds	r7, #12
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bc80      	pop	{r7}
 80062f4:	4770      	bx	lr

080062f6 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 80062f6:	b590      	push	{r4, r7, lr}
 80062f8:	b083      	sub	sp, #12
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	695c      	ldr	r4, [r3, #20]
 8006302:	2300      	movs	r3, #0
 8006304:	2200      	movs	r2, #0
 8006306:	2128      	movs	r1, #40	; 0x28
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	68dc      	ldr	r4, [r3, #12]
 8006310:	2300      	movs	r3, #0
 8006312:	2200      	movs	r2, #0
 8006314:	2114      	movs	r1, #20
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 800631a:	2201      	movs	r2, #1
 800631c:	214b      	movs	r1, #75	; 0x4b
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f000 f886 	bl	8006430 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	791b      	ldrb	r3, [r3, #4]
 800632a:	461a      	mov	r2, r3
 800632c:	2129      	movs	r1, #41	; 0x29
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 f87e 	bl	8006430 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8006334:	2200      	movs	r2, #0
 8006336:	214b      	movs	r1, #75	; 0x4b
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f000 f879 	bl	8006430 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	791b      	ldrb	r3, [r3, #4]
 8006344:	461a      	mov	r2, r3
 8006346:	2129      	movs	r1, #41	; 0x29
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f000 f871 	bl	8006430 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 800634e:	2201      	movs	r2, #1
 8006350:	214b      	movs	r1, #75	; 0x4b
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 f86c 	bl	8006430 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	795b      	ldrb	r3, [r3, #5]
 800635e:	461a      	mov	r2, r3
 8006360:	2129      	movs	r1, #41	; 0x29
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f000 f864 	bl	8006430 <u8x8_gpio_call>
}    
 8006368:	bf00      	nop
 800636a:	370c      	adds	r7, #12
 800636c:	46bd      	mov	sp, r7
 800636e:	bd90      	pop	{r4, r7, pc}

08006370 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8006370:	b590      	push	{r4, r7, lr}
 8006372:	b085      	sub	sp, #20
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	4608      	mov	r0, r1
 800637a:	4611      	mov	r1, r2
 800637c:	461a      	mov	r2, r3
 800637e:	4603      	mov	r3, r0
 8006380:	70fb      	strb	r3, [r7, #3]
 8006382:	460b      	mov	r3, r1
 8006384:	70bb      	strb	r3, [r7, #2]
 8006386:	4613      	mov	r3, r2
 8006388:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 800638a:	78fb      	ldrb	r3, [r7, #3]
 800638c:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 800638e:	78bb      	ldrb	r3, [r7, #2]
 8006390:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8006392:	787b      	ldrb	r3, [r7, #1]
 8006394:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8006396:	6a3b      	ldr	r3, [r7, #32]
 8006398:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	689c      	ldr	r4, [r3, #8]
 800639e:	f107 0308 	add.w	r3, r7, #8
 80063a2:	2201      	movs	r2, #1
 80063a4:	210f      	movs	r1, #15
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	47a0      	blx	r4
 80063aa:	4603      	mov	r3, r0
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3714      	adds	r7, #20
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd90      	pop	{r4, r7, pc}

080063b4 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 80063b4:	b590      	push	{r4, r7, lr}
 80063b6:	b083      	sub	sp, #12
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	689c      	ldr	r4, [r3, #8]
 80063c0:	2300      	movs	r3, #0
 80063c2:	2200      	movs	r2, #0
 80063c4:	2109      	movs	r1, #9
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	47a0      	blx	r4
}
 80063ca:	bf00      	nop
 80063cc:	370c      	adds	r7, #12
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd90      	pop	{r4, r7, pc}

080063d2 <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 80063d2:	b590      	push	{r4, r7, lr}
 80063d4:	b083      	sub	sp, #12
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	689c      	ldr	r4, [r3, #8]
 80063de:	2300      	movs	r3, #0
 80063e0:	2200      	movs	r2, #0
 80063e2:	210a      	movs	r1, #10
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	47a0      	blx	r4
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}
 80063e8:	bf00      	nop
 80063ea:	370c      	adds	r7, #12
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd90      	pop	{r4, r7, pc}

080063f0 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 80063f0:	b590      	push	{r4, r7, lr}
 80063f2:	b083      	sub	sp, #12
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	460b      	mov	r3, r1
 80063fa:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	689c      	ldr	r4, [r3, #8]
 8006400:	78fa      	ldrb	r2, [r7, #3]
 8006402:	2300      	movs	r3, #0
 8006404:	210b      	movs	r1, #11
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	47a0      	blx	r4
}
 800640a:	bf00      	nop
 800640c:	370c      	adds	r7, #12
 800640e:	46bd      	mov	sp, r7
 8006410:	bd90      	pop	{r4, r7, pc}

08006412 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8006412:	b590      	push	{r4, r7, lr}
 8006414:	b083      	sub	sp, #12
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	689c      	ldr	r4, [r3, #8]
 800641e:	2300      	movs	r3, #0
 8006420:	2200      	movs	r2, #0
 8006422:	2110      	movs	r1, #16
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	47a0      	blx	r4
}
 8006428:	bf00      	nop
 800642a:	370c      	adds	r7, #12
 800642c:	46bd      	mov	sp, r7
 800642e:	bd90      	pop	{r4, r7, pc}

08006430 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8006430:	b590      	push	{r4, r7, lr}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	460b      	mov	r3, r1
 800643a:	70fb      	strb	r3, [r7, #3]
 800643c:	4613      	mov	r3, r2
 800643e:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	695c      	ldr	r4, [r3, #20]
 8006444:	78ba      	ldrb	r2, [r7, #2]
 8006446:	78f9      	ldrb	r1, [r7, #3]
 8006448:	2300      	movs	r3, #0
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	47a0      	blx	r4
}
 800644e:	bf00      	nop
 8006450:	370c      	adds	r7, #12
 8006452:	46bd      	mov	sp, r7
 8006454:	bd90      	pop	{r4, r7, pc}

08006456 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8006456:	b480      	push	{r7}
 8006458:	b085      	sub	sp, #20
 800645a:	af00      	add	r7, sp, #0
 800645c:	60f8      	str	r0, [r7, #12]
 800645e:	607b      	str	r3, [r7, #4]
 8006460:	460b      	mov	r3, r1
 8006462:	72fb      	strb	r3, [r7, #11]
 8006464:	4613      	mov	r3, r2
 8006466:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 8006468:	2300      	movs	r3, #0
}
 800646a:	4618      	mov	r0, r3
 800646c:	3714      	adds	r7, #20
 800646e:	46bd      	mov	sp, r7
 8006470:	bc80      	pop	{r7}
 8006472:	4770      	bx	lr

08006474 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8006474:	b480      	push	{r7}
 8006476:	b083      	sub	sp, #12
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	4a11      	ldr	r2, [pc, #68]	; (80064cc <u8x8_SetupDefaults+0x58>)
 8006486:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	4a10      	ldr	r2, [pc, #64]	; (80064cc <u8x8_SetupDefaults+0x58>)
 800648c:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	4a0e      	ldr	r2, [pc, #56]	; (80064cc <u8x8_SetupDefaults+0x58>)
 8006492:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	4a0d      	ldr	r2, [pc, #52]	; (80064cc <u8x8_SetupDefaults+0x58>)
 8006498:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2200      	movs	r2, #0
 800649e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2200      	movs	r2, #0
 80064a6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2200      	movs	r2, #0
 80064ae:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	22ff      	movs	r2, #255	; 0xff
 80064b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	22ff      	movs	r2, #255	; 0xff
 80064bc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 80064c0:	bf00      	nop
 80064c2:	370c      	adds	r7, #12
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bc80      	pop	{r7}
 80064c8:	4770      	bx	lr
 80064ca:	bf00      	nop
 80064cc:	08006457 	.word	0x08006457

080064d0 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b084      	sub	sp, #16
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	60f8      	str	r0, [r7, #12]
 80064d8:	60b9      	str	r1, [r7, #8]
 80064da:	607a      	str	r2, [r7, #4]
 80064dc:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 80064de:	68f8      	ldr	r0, [r7, #12]
 80064e0:	f7ff ffc8 	bl	8006474 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	68ba      	ldr	r2, [r7, #8]
 80064e8:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	683a      	ldr	r2, [r7, #0]
 80064f4:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	69ba      	ldr	r2, [r7, #24]
 80064fa:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 80064fc:	68f8      	ldr	r0, [r7, #12]
 80064fe:	f7ff ff59 	bl	80063b4 <u8x8_SetupMemory>
}
 8006502:	bf00      	nop
 8006504:	3710      	adds	r7, #16
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}

0800650a <atof>:
 800650a:	2100      	movs	r1, #0
 800650c:	f001 bd72 	b.w	8007ff4 <strtod>

08006510 <__errno>:
 8006510:	4b01      	ldr	r3, [pc, #4]	; (8006518 <__errno+0x8>)
 8006512:	6818      	ldr	r0, [r3, #0]
 8006514:	4770      	bx	lr
 8006516:	bf00      	nop
 8006518:	2000000c 	.word	0x2000000c

0800651c <__libc_init_array>:
 800651c:	b570      	push	{r4, r5, r6, lr}
 800651e:	2600      	movs	r6, #0
 8006520:	4d0c      	ldr	r5, [pc, #48]	; (8006554 <__libc_init_array+0x38>)
 8006522:	4c0d      	ldr	r4, [pc, #52]	; (8006558 <__libc_init_array+0x3c>)
 8006524:	1b64      	subs	r4, r4, r5
 8006526:	10a4      	asrs	r4, r4, #2
 8006528:	42a6      	cmp	r6, r4
 800652a:	d109      	bne.n	8006540 <__libc_init_array+0x24>
 800652c:	f005 ff2e 	bl	800c38c <_init>
 8006530:	2600      	movs	r6, #0
 8006532:	4d0a      	ldr	r5, [pc, #40]	; (800655c <__libc_init_array+0x40>)
 8006534:	4c0a      	ldr	r4, [pc, #40]	; (8006560 <__libc_init_array+0x44>)
 8006536:	1b64      	subs	r4, r4, r5
 8006538:	10a4      	asrs	r4, r4, #2
 800653a:	42a6      	cmp	r6, r4
 800653c:	d105      	bne.n	800654a <__libc_init_array+0x2e>
 800653e:	bd70      	pop	{r4, r5, r6, pc}
 8006540:	f855 3b04 	ldr.w	r3, [r5], #4
 8006544:	4798      	blx	r3
 8006546:	3601      	adds	r6, #1
 8006548:	e7ee      	b.n	8006528 <__libc_init_array+0xc>
 800654a:	f855 3b04 	ldr.w	r3, [r5], #4
 800654e:	4798      	blx	r3
 8006550:	3601      	adds	r6, #1
 8006552:	e7f2      	b.n	800653a <__libc_init_array+0x1e>
 8006554:	0800d190 	.word	0x0800d190
 8006558:	0800d190 	.word	0x0800d190
 800655c:	0800d190 	.word	0x0800d190
 8006560:	0800d194 	.word	0x0800d194

08006564 <memcpy>:
 8006564:	440a      	add	r2, r1
 8006566:	4291      	cmp	r1, r2
 8006568:	f100 33ff 	add.w	r3, r0, #4294967295
 800656c:	d100      	bne.n	8006570 <memcpy+0xc>
 800656e:	4770      	bx	lr
 8006570:	b510      	push	{r4, lr}
 8006572:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006576:	4291      	cmp	r1, r2
 8006578:	f803 4f01 	strb.w	r4, [r3, #1]!
 800657c:	d1f9      	bne.n	8006572 <memcpy+0xe>
 800657e:	bd10      	pop	{r4, pc}

08006580 <memset>:
 8006580:	4603      	mov	r3, r0
 8006582:	4402      	add	r2, r0
 8006584:	4293      	cmp	r3, r2
 8006586:	d100      	bne.n	800658a <memset+0xa>
 8006588:	4770      	bx	lr
 800658a:	f803 1b01 	strb.w	r1, [r3], #1
 800658e:	e7f9      	b.n	8006584 <memset+0x4>

08006590 <__cvt>:
 8006590:	2b00      	cmp	r3, #0
 8006592:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006596:	461f      	mov	r7, r3
 8006598:	bfbb      	ittet	lt
 800659a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800659e:	461f      	movlt	r7, r3
 80065a0:	2300      	movge	r3, #0
 80065a2:	232d      	movlt	r3, #45	; 0x2d
 80065a4:	b088      	sub	sp, #32
 80065a6:	4614      	mov	r4, r2
 80065a8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80065aa:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80065ac:	7013      	strb	r3, [r2, #0]
 80065ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80065b0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80065b4:	f023 0820 	bic.w	r8, r3, #32
 80065b8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80065bc:	d005      	beq.n	80065ca <__cvt+0x3a>
 80065be:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80065c2:	d100      	bne.n	80065c6 <__cvt+0x36>
 80065c4:	3501      	adds	r5, #1
 80065c6:	2302      	movs	r3, #2
 80065c8:	e000      	b.n	80065cc <__cvt+0x3c>
 80065ca:	2303      	movs	r3, #3
 80065cc:	aa07      	add	r2, sp, #28
 80065ce:	9204      	str	r2, [sp, #16]
 80065d0:	aa06      	add	r2, sp, #24
 80065d2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80065d6:	e9cd 3500 	strd	r3, r5, [sp]
 80065da:	4622      	mov	r2, r4
 80065dc:	463b      	mov	r3, r7
 80065de:	f001 fedf 	bl	80083a0 <_dtoa_r>
 80065e2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80065e6:	4606      	mov	r6, r0
 80065e8:	d102      	bne.n	80065f0 <__cvt+0x60>
 80065ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80065ec:	07db      	lsls	r3, r3, #31
 80065ee:	d522      	bpl.n	8006636 <__cvt+0xa6>
 80065f0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80065f4:	eb06 0905 	add.w	r9, r6, r5
 80065f8:	d110      	bne.n	800661c <__cvt+0x8c>
 80065fa:	7833      	ldrb	r3, [r6, #0]
 80065fc:	2b30      	cmp	r3, #48	; 0x30
 80065fe:	d10a      	bne.n	8006616 <__cvt+0x86>
 8006600:	2200      	movs	r2, #0
 8006602:	2300      	movs	r3, #0
 8006604:	4620      	mov	r0, r4
 8006606:	4639      	mov	r1, r7
 8006608:	f7fa f9ce 	bl	80009a8 <__aeabi_dcmpeq>
 800660c:	b918      	cbnz	r0, 8006616 <__cvt+0x86>
 800660e:	f1c5 0501 	rsb	r5, r5, #1
 8006612:	f8ca 5000 	str.w	r5, [sl]
 8006616:	f8da 3000 	ldr.w	r3, [sl]
 800661a:	4499      	add	r9, r3
 800661c:	2200      	movs	r2, #0
 800661e:	2300      	movs	r3, #0
 8006620:	4620      	mov	r0, r4
 8006622:	4639      	mov	r1, r7
 8006624:	f7fa f9c0 	bl	80009a8 <__aeabi_dcmpeq>
 8006628:	b108      	cbz	r0, 800662e <__cvt+0x9e>
 800662a:	f8cd 901c 	str.w	r9, [sp, #28]
 800662e:	2230      	movs	r2, #48	; 0x30
 8006630:	9b07      	ldr	r3, [sp, #28]
 8006632:	454b      	cmp	r3, r9
 8006634:	d307      	bcc.n	8006646 <__cvt+0xb6>
 8006636:	4630      	mov	r0, r6
 8006638:	9b07      	ldr	r3, [sp, #28]
 800663a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800663c:	1b9b      	subs	r3, r3, r6
 800663e:	6013      	str	r3, [r2, #0]
 8006640:	b008      	add	sp, #32
 8006642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006646:	1c59      	adds	r1, r3, #1
 8006648:	9107      	str	r1, [sp, #28]
 800664a:	701a      	strb	r2, [r3, #0]
 800664c:	e7f0      	b.n	8006630 <__cvt+0xa0>

0800664e <__exponent>:
 800664e:	4603      	mov	r3, r0
 8006650:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006652:	2900      	cmp	r1, #0
 8006654:	f803 2b02 	strb.w	r2, [r3], #2
 8006658:	bfb6      	itet	lt
 800665a:	222d      	movlt	r2, #45	; 0x2d
 800665c:	222b      	movge	r2, #43	; 0x2b
 800665e:	4249      	neglt	r1, r1
 8006660:	2909      	cmp	r1, #9
 8006662:	7042      	strb	r2, [r0, #1]
 8006664:	dd2b      	ble.n	80066be <__exponent+0x70>
 8006666:	f10d 0407 	add.w	r4, sp, #7
 800666a:	46a4      	mov	ip, r4
 800666c:	270a      	movs	r7, #10
 800666e:	fb91 f6f7 	sdiv	r6, r1, r7
 8006672:	460a      	mov	r2, r1
 8006674:	46a6      	mov	lr, r4
 8006676:	fb07 1516 	mls	r5, r7, r6, r1
 800667a:	2a63      	cmp	r2, #99	; 0x63
 800667c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8006680:	4631      	mov	r1, r6
 8006682:	f104 34ff 	add.w	r4, r4, #4294967295
 8006686:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800668a:	dcf0      	bgt.n	800666e <__exponent+0x20>
 800668c:	3130      	adds	r1, #48	; 0x30
 800668e:	f1ae 0502 	sub.w	r5, lr, #2
 8006692:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006696:	4629      	mov	r1, r5
 8006698:	1c44      	adds	r4, r0, #1
 800669a:	4561      	cmp	r1, ip
 800669c:	d30a      	bcc.n	80066b4 <__exponent+0x66>
 800669e:	f10d 0209 	add.w	r2, sp, #9
 80066a2:	eba2 020e 	sub.w	r2, r2, lr
 80066a6:	4565      	cmp	r5, ip
 80066a8:	bf88      	it	hi
 80066aa:	2200      	movhi	r2, #0
 80066ac:	4413      	add	r3, r2
 80066ae:	1a18      	subs	r0, r3, r0
 80066b0:	b003      	add	sp, #12
 80066b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066b4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80066b8:	f804 2f01 	strb.w	r2, [r4, #1]!
 80066bc:	e7ed      	b.n	800669a <__exponent+0x4c>
 80066be:	2330      	movs	r3, #48	; 0x30
 80066c0:	3130      	adds	r1, #48	; 0x30
 80066c2:	7083      	strb	r3, [r0, #2]
 80066c4:	70c1      	strb	r1, [r0, #3]
 80066c6:	1d03      	adds	r3, r0, #4
 80066c8:	e7f1      	b.n	80066ae <__exponent+0x60>
	...

080066cc <_printf_float>:
 80066cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066d0:	b091      	sub	sp, #68	; 0x44
 80066d2:	460c      	mov	r4, r1
 80066d4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80066d8:	4616      	mov	r6, r2
 80066da:	461f      	mov	r7, r3
 80066dc:	4605      	mov	r5, r0
 80066de:	f003 f967 	bl	80099b0 <_localeconv_r>
 80066e2:	6803      	ldr	r3, [r0, #0]
 80066e4:	4618      	mov	r0, r3
 80066e6:	9309      	str	r3, [sp, #36]	; 0x24
 80066e8:	f7f9 fd32 	bl	8000150 <strlen>
 80066ec:	2300      	movs	r3, #0
 80066ee:	930e      	str	r3, [sp, #56]	; 0x38
 80066f0:	f8d8 3000 	ldr.w	r3, [r8]
 80066f4:	900a      	str	r0, [sp, #40]	; 0x28
 80066f6:	3307      	adds	r3, #7
 80066f8:	f023 0307 	bic.w	r3, r3, #7
 80066fc:	f103 0208 	add.w	r2, r3, #8
 8006700:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006704:	f8d4 b000 	ldr.w	fp, [r4]
 8006708:	f8c8 2000 	str.w	r2, [r8]
 800670c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006710:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006714:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8006718:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800671c:	930b      	str	r3, [sp, #44]	; 0x2c
 800671e:	f04f 32ff 	mov.w	r2, #4294967295
 8006722:	4640      	mov	r0, r8
 8006724:	4b9c      	ldr	r3, [pc, #624]	; (8006998 <_printf_float+0x2cc>)
 8006726:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006728:	f7fa f970 	bl	8000a0c <__aeabi_dcmpun>
 800672c:	bb70      	cbnz	r0, 800678c <_printf_float+0xc0>
 800672e:	f04f 32ff 	mov.w	r2, #4294967295
 8006732:	4640      	mov	r0, r8
 8006734:	4b98      	ldr	r3, [pc, #608]	; (8006998 <_printf_float+0x2cc>)
 8006736:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006738:	f7fa f94a 	bl	80009d0 <__aeabi_dcmple>
 800673c:	bb30      	cbnz	r0, 800678c <_printf_float+0xc0>
 800673e:	2200      	movs	r2, #0
 8006740:	2300      	movs	r3, #0
 8006742:	4640      	mov	r0, r8
 8006744:	4651      	mov	r1, sl
 8006746:	f7fa f939 	bl	80009bc <__aeabi_dcmplt>
 800674a:	b110      	cbz	r0, 8006752 <_printf_float+0x86>
 800674c:	232d      	movs	r3, #45	; 0x2d
 800674e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006752:	4b92      	ldr	r3, [pc, #584]	; (800699c <_printf_float+0x2d0>)
 8006754:	4892      	ldr	r0, [pc, #584]	; (80069a0 <_printf_float+0x2d4>)
 8006756:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800675a:	bf94      	ite	ls
 800675c:	4698      	movls	r8, r3
 800675e:	4680      	movhi	r8, r0
 8006760:	2303      	movs	r3, #3
 8006762:	f04f 0a00 	mov.w	sl, #0
 8006766:	6123      	str	r3, [r4, #16]
 8006768:	f02b 0304 	bic.w	r3, fp, #4
 800676c:	6023      	str	r3, [r4, #0]
 800676e:	4633      	mov	r3, r6
 8006770:	4621      	mov	r1, r4
 8006772:	4628      	mov	r0, r5
 8006774:	9700      	str	r7, [sp, #0]
 8006776:	aa0f      	add	r2, sp, #60	; 0x3c
 8006778:	f000 f9d4 	bl	8006b24 <_printf_common>
 800677c:	3001      	adds	r0, #1
 800677e:	f040 8090 	bne.w	80068a2 <_printf_float+0x1d6>
 8006782:	f04f 30ff 	mov.w	r0, #4294967295
 8006786:	b011      	add	sp, #68	; 0x44
 8006788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800678c:	4642      	mov	r2, r8
 800678e:	4653      	mov	r3, sl
 8006790:	4640      	mov	r0, r8
 8006792:	4651      	mov	r1, sl
 8006794:	f7fa f93a 	bl	8000a0c <__aeabi_dcmpun>
 8006798:	b148      	cbz	r0, 80067ae <_printf_float+0xe2>
 800679a:	f1ba 0f00 	cmp.w	sl, #0
 800679e:	bfb8      	it	lt
 80067a0:	232d      	movlt	r3, #45	; 0x2d
 80067a2:	4880      	ldr	r0, [pc, #512]	; (80069a4 <_printf_float+0x2d8>)
 80067a4:	bfb8      	it	lt
 80067a6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80067aa:	4b7f      	ldr	r3, [pc, #508]	; (80069a8 <_printf_float+0x2dc>)
 80067ac:	e7d3      	b.n	8006756 <_printf_float+0x8a>
 80067ae:	6863      	ldr	r3, [r4, #4]
 80067b0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80067b4:	1c5a      	adds	r2, r3, #1
 80067b6:	d142      	bne.n	800683e <_printf_float+0x172>
 80067b8:	2306      	movs	r3, #6
 80067ba:	6063      	str	r3, [r4, #4]
 80067bc:	2200      	movs	r2, #0
 80067be:	9206      	str	r2, [sp, #24]
 80067c0:	aa0e      	add	r2, sp, #56	; 0x38
 80067c2:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80067c6:	aa0d      	add	r2, sp, #52	; 0x34
 80067c8:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80067cc:	9203      	str	r2, [sp, #12]
 80067ce:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80067d2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80067d6:	6023      	str	r3, [r4, #0]
 80067d8:	6863      	ldr	r3, [r4, #4]
 80067da:	4642      	mov	r2, r8
 80067dc:	9300      	str	r3, [sp, #0]
 80067de:	4628      	mov	r0, r5
 80067e0:	4653      	mov	r3, sl
 80067e2:	910b      	str	r1, [sp, #44]	; 0x2c
 80067e4:	f7ff fed4 	bl	8006590 <__cvt>
 80067e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80067ea:	4680      	mov	r8, r0
 80067ec:	2947      	cmp	r1, #71	; 0x47
 80067ee:	990d      	ldr	r1, [sp, #52]	; 0x34
 80067f0:	d108      	bne.n	8006804 <_printf_float+0x138>
 80067f2:	1cc8      	adds	r0, r1, #3
 80067f4:	db02      	blt.n	80067fc <_printf_float+0x130>
 80067f6:	6863      	ldr	r3, [r4, #4]
 80067f8:	4299      	cmp	r1, r3
 80067fa:	dd40      	ble.n	800687e <_printf_float+0x1b2>
 80067fc:	f1a9 0902 	sub.w	r9, r9, #2
 8006800:	fa5f f989 	uxtb.w	r9, r9
 8006804:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006808:	d81f      	bhi.n	800684a <_printf_float+0x17e>
 800680a:	464a      	mov	r2, r9
 800680c:	3901      	subs	r1, #1
 800680e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006812:	910d      	str	r1, [sp, #52]	; 0x34
 8006814:	f7ff ff1b 	bl	800664e <__exponent>
 8006818:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800681a:	4682      	mov	sl, r0
 800681c:	1813      	adds	r3, r2, r0
 800681e:	2a01      	cmp	r2, #1
 8006820:	6123      	str	r3, [r4, #16]
 8006822:	dc02      	bgt.n	800682a <_printf_float+0x15e>
 8006824:	6822      	ldr	r2, [r4, #0]
 8006826:	07d2      	lsls	r2, r2, #31
 8006828:	d501      	bpl.n	800682e <_printf_float+0x162>
 800682a:	3301      	adds	r3, #1
 800682c:	6123      	str	r3, [r4, #16]
 800682e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006832:	2b00      	cmp	r3, #0
 8006834:	d09b      	beq.n	800676e <_printf_float+0xa2>
 8006836:	232d      	movs	r3, #45	; 0x2d
 8006838:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800683c:	e797      	b.n	800676e <_printf_float+0xa2>
 800683e:	2947      	cmp	r1, #71	; 0x47
 8006840:	d1bc      	bne.n	80067bc <_printf_float+0xf0>
 8006842:	2b00      	cmp	r3, #0
 8006844:	d1ba      	bne.n	80067bc <_printf_float+0xf0>
 8006846:	2301      	movs	r3, #1
 8006848:	e7b7      	b.n	80067ba <_printf_float+0xee>
 800684a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800684e:	d118      	bne.n	8006882 <_printf_float+0x1b6>
 8006850:	2900      	cmp	r1, #0
 8006852:	6863      	ldr	r3, [r4, #4]
 8006854:	dd0b      	ble.n	800686e <_printf_float+0x1a2>
 8006856:	6121      	str	r1, [r4, #16]
 8006858:	b913      	cbnz	r3, 8006860 <_printf_float+0x194>
 800685a:	6822      	ldr	r2, [r4, #0]
 800685c:	07d0      	lsls	r0, r2, #31
 800685e:	d502      	bpl.n	8006866 <_printf_float+0x19a>
 8006860:	3301      	adds	r3, #1
 8006862:	440b      	add	r3, r1
 8006864:	6123      	str	r3, [r4, #16]
 8006866:	f04f 0a00 	mov.w	sl, #0
 800686a:	65a1      	str	r1, [r4, #88]	; 0x58
 800686c:	e7df      	b.n	800682e <_printf_float+0x162>
 800686e:	b913      	cbnz	r3, 8006876 <_printf_float+0x1aa>
 8006870:	6822      	ldr	r2, [r4, #0]
 8006872:	07d2      	lsls	r2, r2, #31
 8006874:	d501      	bpl.n	800687a <_printf_float+0x1ae>
 8006876:	3302      	adds	r3, #2
 8006878:	e7f4      	b.n	8006864 <_printf_float+0x198>
 800687a:	2301      	movs	r3, #1
 800687c:	e7f2      	b.n	8006864 <_printf_float+0x198>
 800687e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006882:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006884:	4299      	cmp	r1, r3
 8006886:	db05      	blt.n	8006894 <_printf_float+0x1c8>
 8006888:	6823      	ldr	r3, [r4, #0]
 800688a:	6121      	str	r1, [r4, #16]
 800688c:	07d8      	lsls	r0, r3, #31
 800688e:	d5ea      	bpl.n	8006866 <_printf_float+0x19a>
 8006890:	1c4b      	adds	r3, r1, #1
 8006892:	e7e7      	b.n	8006864 <_printf_float+0x198>
 8006894:	2900      	cmp	r1, #0
 8006896:	bfcc      	ite	gt
 8006898:	2201      	movgt	r2, #1
 800689a:	f1c1 0202 	rsble	r2, r1, #2
 800689e:	4413      	add	r3, r2
 80068a0:	e7e0      	b.n	8006864 <_printf_float+0x198>
 80068a2:	6823      	ldr	r3, [r4, #0]
 80068a4:	055a      	lsls	r2, r3, #21
 80068a6:	d407      	bmi.n	80068b8 <_printf_float+0x1ec>
 80068a8:	6923      	ldr	r3, [r4, #16]
 80068aa:	4642      	mov	r2, r8
 80068ac:	4631      	mov	r1, r6
 80068ae:	4628      	mov	r0, r5
 80068b0:	47b8      	blx	r7
 80068b2:	3001      	adds	r0, #1
 80068b4:	d12b      	bne.n	800690e <_printf_float+0x242>
 80068b6:	e764      	b.n	8006782 <_printf_float+0xb6>
 80068b8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80068bc:	f240 80dd 	bls.w	8006a7a <_printf_float+0x3ae>
 80068c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80068c4:	2200      	movs	r2, #0
 80068c6:	2300      	movs	r3, #0
 80068c8:	f7fa f86e 	bl	80009a8 <__aeabi_dcmpeq>
 80068cc:	2800      	cmp	r0, #0
 80068ce:	d033      	beq.n	8006938 <_printf_float+0x26c>
 80068d0:	2301      	movs	r3, #1
 80068d2:	4631      	mov	r1, r6
 80068d4:	4628      	mov	r0, r5
 80068d6:	4a35      	ldr	r2, [pc, #212]	; (80069ac <_printf_float+0x2e0>)
 80068d8:	47b8      	blx	r7
 80068da:	3001      	adds	r0, #1
 80068dc:	f43f af51 	beq.w	8006782 <_printf_float+0xb6>
 80068e0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80068e4:	429a      	cmp	r2, r3
 80068e6:	db02      	blt.n	80068ee <_printf_float+0x222>
 80068e8:	6823      	ldr	r3, [r4, #0]
 80068ea:	07d8      	lsls	r0, r3, #31
 80068ec:	d50f      	bpl.n	800690e <_printf_float+0x242>
 80068ee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80068f2:	4631      	mov	r1, r6
 80068f4:	4628      	mov	r0, r5
 80068f6:	47b8      	blx	r7
 80068f8:	3001      	adds	r0, #1
 80068fa:	f43f af42 	beq.w	8006782 <_printf_float+0xb6>
 80068fe:	f04f 0800 	mov.w	r8, #0
 8006902:	f104 091a 	add.w	r9, r4, #26
 8006906:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006908:	3b01      	subs	r3, #1
 800690a:	4543      	cmp	r3, r8
 800690c:	dc09      	bgt.n	8006922 <_printf_float+0x256>
 800690e:	6823      	ldr	r3, [r4, #0]
 8006910:	079b      	lsls	r3, r3, #30
 8006912:	f100 8102 	bmi.w	8006b1a <_printf_float+0x44e>
 8006916:	68e0      	ldr	r0, [r4, #12]
 8006918:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800691a:	4298      	cmp	r0, r3
 800691c:	bfb8      	it	lt
 800691e:	4618      	movlt	r0, r3
 8006920:	e731      	b.n	8006786 <_printf_float+0xba>
 8006922:	2301      	movs	r3, #1
 8006924:	464a      	mov	r2, r9
 8006926:	4631      	mov	r1, r6
 8006928:	4628      	mov	r0, r5
 800692a:	47b8      	blx	r7
 800692c:	3001      	adds	r0, #1
 800692e:	f43f af28 	beq.w	8006782 <_printf_float+0xb6>
 8006932:	f108 0801 	add.w	r8, r8, #1
 8006936:	e7e6      	b.n	8006906 <_printf_float+0x23a>
 8006938:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800693a:	2b00      	cmp	r3, #0
 800693c:	dc38      	bgt.n	80069b0 <_printf_float+0x2e4>
 800693e:	2301      	movs	r3, #1
 8006940:	4631      	mov	r1, r6
 8006942:	4628      	mov	r0, r5
 8006944:	4a19      	ldr	r2, [pc, #100]	; (80069ac <_printf_float+0x2e0>)
 8006946:	47b8      	blx	r7
 8006948:	3001      	adds	r0, #1
 800694a:	f43f af1a 	beq.w	8006782 <_printf_float+0xb6>
 800694e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006952:	4313      	orrs	r3, r2
 8006954:	d102      	bne.n	800695c <_printf_float+0x290>
 8006956:	6823      	ldr	r3, [r4, #0]
 8006958:	07d9      	lsls	r1, r3, #31
 800695a:	d5d8      	bpl.n	800690e <_printf_float+0x242>
 800695c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006960:	4631      	mov	r1, r6
 8006962:	4628      	mov	r0, r5
 8006964:	47b8      	blx	r7
 8006966:	3001      	adds	r0, #1
 8006968:	f43f af0b 	beq.w	8006782 <_printf_float+0xb6>
 800696c:	f04f 0900 	mov.w	r9, #0
 8006970:	f104 0a1a 	add.w	sl, r4, #26
 8006974:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006976:	425b      	negs	r3, r3
 8006978:	454b      	cmp	r3, r9
 800697a:	dc01      	bgt.n	8006980 <_printf_float+0x2b4>
 800697c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800697e:	e794      	b.n	80068aa <_printf_float+0x1de>
 8006980:	2301      	movs	r3, #1
 8006982:	4652      	mov	r2, sl
 8006984:	4631      	mov	r1, r6
 8006986:	4628      	mov	r0, r5
 8006988:	47b8      	blx	r7
 800698a:	3001      	adds	r0, #1
 800698c:	f43f aef9 	beq.w	8006782 <_printf_float+0xb6>
 8006990:	f109 0901 	add.w	r9, r9, #1
 8006994:	e7ee      	b.n	8006974 <_printf_float+0x2a8>
 8006996:	bf00      	nop
 8006998:	7fefffff 	.word	0x7fefffff
 800699c:	0800cad0 	.word	0x0800cad0
 80069a0:	0800cad4 	.word	0x0800cad4
 80069a4:	0800cadc 	.word	0x0800cadc
 80069a8:	0800cad8 	.word	0x0800cad8
 80069ac:	0800cae0 	.word	0x0800cae0
 80069b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80069b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80069b4:	429a      	cmp	r2, r3
 80069b6:	bfa8      	it	ge
 80069b8:	461a      	movge	r2, r3
 80069ba:	2a00      	cmp	r2, #0
 80069bc:	4691      	mov	r9, r2
 80069be:	dc37      	bgt.n	8006a30 <_printf_float+0x364>
 80069c0:	f04f 0b00 	mov.w	fp, #0
 80069c4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80069c8:	f104 021a 	add.w	r2, r4, #26
 80069cc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80069d0:	ebaa 0309 	sub.w	r3, sl, r9
 80069d4:	455b      	cmp	r3, fp
 80069d6:	dc33      	bgt.n	8006a40 <_printf_float+0x374>
 80069d8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80069dc:	429a      	cmp	r2, r3
 80069de:	db3b      	blt.n	8006a58 <_printf_float+0x38c>
 80069e0:	6823      	ldr	r3, [r4, #0]
 80069e2:	07da      	lsls	r2, r3, #31
 80069e4:	d438      	bmi.n	8006a58 <_printf_float+0x38c>
 80069e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80069e8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80069ea:	eba3 020a 	sub.w	r2, r3, sl
 80069ee:	eba3 0901 	sub.w	r9, r3, r1
 80069f2:	4591      	cmp	r9, r2
 80069f4:	bfa8      	it	ge
 80069f6:	4691      	movge	r9, r2
 80069f8:	f1b9 0f00 	cmp.w	r9, #0
 80069fc:	dc34      	bgt.n	8006a68 <_printf_float+0x39c>
 80069fe:	f04f 0800 	mov.w	r8, #0
 8006a02:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a06:	f104 0a1a 	add.w	sl, r4, #26
 8006a0a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006a0e:	1a9b      	subs	r3, r3, r2
 8006a10:	eba3 0309 	sub.w	r3, r3, r9
 8006a14:	4543      	cmp	r3, r8
 8006a16:	f77f af7a 	ble.w	800690e <_printf_float+0x242>
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	4652      	mov	r2, sl
 8006a1e:	4631      	mov	r1, r6
 8006a20:	4628      	mov	r0, r5
 8006a22:	47b8      	blx	r7
 8006a24:	3001      	adds	r0, #1
 8006a26:	f43f aeac 	beq.w	8006782 <_printf_float+0xb6>
 8006a2a:	f108 0801 	add.w	r8, r8, #1
 8006a2e:	e7ec      	b.n	8006a0a <_printf_float+0x33e>
 8006a30:	4613      	mov	r3, r2
 8006a32:	4631      	mov	r1, r6
 8006a34:	4642      	mov	r2, r8
 8006a36:	4628      	mov	r0, r5
 8006a38:	47b8      	blx	r7
 8006a3a:	3001      	adds	r0, #1
 8006a3c:	d1c0      	bne.n	80069c0 <_printf_float+0x2f4>
 8006a3e:	e6a0      	b.n	8006782 <_printf_float+0xb6>
 8006a40:	2301      	movs	r3, #1
 8006a42:	4631      	mov	r1, r6
 8006a44:	4628      	mov	r0, r5
 8006a46:	920b      	str	r2, [sp, #44]	; 0x2c
 8006a48:	47b8      	blx	r7
 8006a4a:	3001      	adds	r0, #1
 8006a4c:	f43f ae99 	beq.w	8006782 <_printf_float+0xb6>
 8006a50:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006a52:	f10b 0b01 	add.w	fp, fp, #1
 8006a56:	e7b9      	b.n	80069cc <_printf_float+0x300>
 8006a58:	4631      	mov	r1, r6
 8006a5a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a5e:	4628      	mov	r0, r5
 8006a60:	47b8      	blx	r7
 8006a62:	3001      	adds	r0, #1
 8006a64:	d1bf      	bne.n	80069e6 <_printf_float+0x31a>
 8006a66:	e68c      	b.n	8006782 <_printf_float+0xb6>
 8006a68:	464b      	mov	r3, r9
 8006a6a:	4631      	mov	r1, r6
 8006a6c:	4628      	mov	r0, r5
 8006a6e:	eb08 020a 	add.w	r2, r8, sl
 8006a72:	47b8      	blx	r7
 8006a74:	3001      	adds	r0, #1
 8006a76:	d1c2      	bne.n	80069fe <_printf_float+0x332>
 8006a78:	e683      	b.n	8006782 <_printf_float+0xb6>
 8006a7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006a7c:	2a01      	cmp	r2, #1
 8006a7e:	dc01      	bgt.n	8006a84 <_printf_float+0x3b8>
 8006a80:	07db      	lsls	r3, r3, #31
 8006a82:	d537      	bpl.n	8006af4 <_printf_float+0x428>
 8006a84:	2301      	movs	r3, #1
 8006a86:	4642      	mov	r2, r8
 8006a88:	4631      	mov	r1, r6
 8006a8a:	4628      	mov	r0, r5
 8006a8c:	47b8      	blx	r7
 8006a8e:	3001      	adds	r0, #1
 8006a90:	f43f ae77 	beq.w	8006782 <_printf_float+0xb6>
 8006a94:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a98:	4631      	mov	r1, r6
 8006a9a:	4628      	mov	r0, r5
 8006a9c:	47b8      	blx	r7
 8006a9e:	3001      	adds	r0, #1
 8006aa0:	f43f ae6f 	beq.w	8006782 <_printf_float+0xb6>
 8006aa4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	2300      	movs	r3, #0
 8006aac:	f7f9 ff7c 	bl	80009a8 <__aeabi_dcmpeq>
 8006ab0:	b9d8      	cbnz	r0, 8006aea <_printf_float+0x41e>
 8006ab2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ab4:	f108 0201 	add.w	r2, r8, #1
 8006ab8:	3b01      	subs	r3, #1
 8006aba:	4631      	mov	r1, r6
 8006abc:	4628      	mov	r0, r5
 8006abe:	47b8      	blx	r7
 8006ac0:	3001      	adds	r0, #1
 8006ac2:	d10e      	bne.n	8006ae2 <_printf_float+0x416>
 8006ac4:	e65d      	b.n	8006782 <_printf_float+0xb6>
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	464a      	mov	r2, r9
 8006aca:	4631      	mov	r1, r6
 8006acc:	4628      	mov	r0, r5
 8006ace:	47b8      	blx	r7
 8006ad0:	3001      	adds	r0, #1
 8006ad2:	f43f ae56 	beq.w	8006782 <_printf_float+0xb6>
 8006ad6:	f108 0801 	add.w	r8, r8, #1
 8006ada:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006adc:	3b01      	subs	r3, #1
 8006ade:	4543      	cmp	r3, r8
 8006ae0:	dcf1      	bgt.n	8006ac6 <_printf_float+0x3fa>
 8006ae2:	4653      	mov	r3, sl
 8006ae4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006ae8:	e6e0      	b.n	80068ac <_printf_float+0x1e0>
 8006aea:	f04f 0800 	mov.w	r8, #0
 8006aee:	f104 091a 	add.w	r9, r4, #26
 8006af2:	e7f2      	b.n	8006ada <_printf_float+0x40e>
 8006af4:	2301      	movs	r3, #1
 8006af6:	4642      	mov	r2, r8
 8006af8:	e7df      	b.n	8006aba <_printf_float+0x3ee>
 8006afa:	2301      	movs	r3, #1
 8006afc:	464a      	mov	r2, r9
 8006afe:	4631      	mov	r1, r6
 8006b00:	4628      	mov	r0, r5
 8006b02:	47b8      	blx	r7
 8006b04:	3001      	adds	r0, #1
 8006b06:	f43f ae3c 	beq.w	8006782 <_printf_float+0xb6>
 8006b0a:	f108 0801 	add.w	r8, r8, #1
 8006b0e:	68e3      	ldr	r3, [r4, #12]
 8006b10:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006b12:	1a5b      	subs	r3, r3, r1
 8006b14:	4543      	cmp	r3, r8
 8006b16:	dcf0      	bgt.n	8006afa <_printf_float+0x42e>
 8006b18:	e6fd      	b.n	8006916 <_printf_float+0x24a>
 8006b1a:	f04f 0800 	mov.w	r8, #0
 8006b1e:	f104 0919 	add.w	r9, r4, #25
 8006b22:	e7f4      	b.n	8006b0e <_printf_float+0x442>

08006b24 <_printf_common>:
 8006b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b28:	4616      	mov	r6, r2
 8006b2a:	4699      	mov	r9, r3
 8006b2c:	688a      	ldr	r2, [r1, #8]
 8006b2e:	690b      	ldr	r3, [r1, #16]
 8006b30:	4607      	mov	r7, r0
 8006b32:	4293      	cmp	r3, r2
 8006b34:	bfb8      	it	lt
 8006b36:	4613      	movlt	r3, r2
 8006b38:	6033      	str	r3, [r6, #0]
 8006b3a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006b3e:	460c      	mov	r4, r1
 8006b40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006b44:	b10a      	cbz	r2, 8006b4a <_printf_common+0x26>
 8006b46:	3301      	adds	r3, #1
 8006b48:	6033      	str	r3, [r6, #0]
 8006b4a:	6823      	ldr	r3, [r4, #0]
 8006b4c:	0699      	lsls	r1, r3, #26
 8006b4e:	bf42      	ittt	mi
 8006b50:	6833      	ldrmi	r3, [r6, #0]
 8006b52:	3302      	addmi	r3, #2
 8006b54:	6033      	strmi	r3, [r6, #0]
 8006b56:	6825      	ldr	r5, [r4, #0]
 8006b58:	f015 0506 	ands.w	r5, r5, #6
 8006b5c:	d106      	bne.n	8006b6c <_printf_common+0x48>
 8006b5e:	f104 0a19 	add.w	sl, r4, #25
 8006b62:	68e3      	ldr	r3, [r4, #12]
 8006b64:	6832      	ldr	r2, [r6, #0]
 8006b66:	1a9b      	subs	r3, r3, r2
 8006b68:	42ab      	cmp	r3, r5
 8006b6a:	dc28      	bgt.n	8006bbe <_printf_common+0x9a>
 8006b6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006b70:	1e13      	subs	r3, r2, #0
 8006b72:	6822      	ldr	r2, [r4, #0]
 8006b74:	bf18      	it	ne
 8006b76:	2301      	movne	r3, #1
 8006b78:	0692      	lsls	r2, r2, #26
 8006b7a:	d42d      	bmi.n	8006bd8 <_printf_common+0xb4>
 8006b7c:	4649      	mov	r1, r9
 8006b7e:	4638      	mov	r0, r7
 8006b80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b84:	47c0      	blx	r8
 8006b86:	3001      	adds	r0, #1
 8006b88:	d020      	beq.n	8006bcc <_printf_common+0xa8>
 8006b8a:	6823      	ldr	r3, [r4, #0]
 8006b8c:	68e5      	ldr	r5, [r4, #12]
 8006b8e:	f003 0306 	and.w	r3, r3, #6
 8006b92:	2b04      	cmp	r3, #4
 8006b94:	bf18      	it	ne
 8006b96:	2500      	movne	r5, #0
 8006b98:	6832      	ldr	r2, [r6, #0]
 8006b9a:	f04f 0600 	mov.w	r6, #0
 8006b9e:	68a3      	ldr	r3, [r4, #8]
 8006ba0:	bf08      	it	eq
 8006ba2:	1aad      	subeq	r5, r5, r2
 8006ba4:	6922      	ldr	r2, [r4, #16]
 8006ba6:	bf08      	it	eq
 8006ba8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006bac:	4293      	cmp	r3, r2
 8006bae:	bfc4      	itt	gt
 8006bb0:	1a9b      	subgt	r3, r3, r2
 8006bb2:	18ed      	addgt	r5, r5, r3
 8006bb4:	341a      	adds	r4, #26
 8006bb6:	42b5      	cmp	r5, r6
 8006bb8:	d11a      	bne.n	8006bf0 <_printf_common+0xcc>
 8006bba:	2000      	movs	r0, #0
 8006bbc:	e008      	b.n	8006bd0 <_printf_common+0xac>
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	4652      	mov	r2, sl
 8006bc2:	4649      	mov	r1, r9
 8006bc4:	4638      	mov	r0, r7
 8006bc6:	47c0      	blx	r8
 8006bc8:	3001      	adds	r0, #1
 8006bca:	d103      	bne.n	8006bd4 <_printf_common+0xb0>
 8006bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8006bd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bd4:	3501      	adds	r5, #1
 8006bd6:	e7c4      	b.n	8006b62 <_printf_common+0x3e>
 8006bd8:	2030      	movs	r0, #48	; 0x30
 8006bda:	18e1      	adds	r1, r4, r3
 8006bdc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006be0:	1c5a      	adds	r2, r3, #1
 8006be2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006be6:	4422      	add	r2, r4
 8006be8:	3302      	adds	r3, #2
 8006bea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006bee:	e7c5      	b.n	8006b7c <_printf_common+0x58>
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	4622      	mov	r2, r4
 8006bf4:	4649      	mov	r1, r9
 8006bf6:	4638      	mov	r0, r7
 8006bf8:	47c0      	blx	r8
 8006bfa:	3001      	adds	r0, #1
 8006bfc:	d0e6      	beq.n	8006bcc <_printf_common+0xa8>
 8006bfe:	3601      	adds	r6, #1
 8006c00:	e7d9      	b.n	8006bb6 <_printf_common+0x92>
	...

08006c04 <_printf_i>:
 8006c04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c08:	7e0f      	ldrb	r7, [r1, #24]
 8006c0a:	4691      	mov	r9, r2
 8006c0c:	2f78      	cmp	r7, #120	; 0x78
 8006c0e:	4680      	mov	r8, r0
 8006c10:	460c      	mov	r4, r1
 8006c12:	469a      	mov	sl, r3
 8006c14:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006c16:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006c1a:	d807      	bhi.n	8006c2c <_printf_i+0x28>
 8006c1c:	2f62      	cmp	r7, #98	; 0x62
 8006c1e:	d80a      	bhi.n	8006c36 <_printf_i+0x32>
 8006c20:	2f00      	cmp	r7, #0
 8006c22:	f000 80d9 	beq.w	8006dd8 <_printf_i+0x1d4>
 8006c26:	2f58      	cmp	r7, #88	; 0x58
 8006c28:	f000 80a4 	beq.w	8006d74 <_printf_i+0x170>
 8006c2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006c34:	e03a      	b.n	8006cac <_printf_i+0xa8>
 8006c36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006c3a:	2b15      	cmp	r3, #21
 8006c3c:	d8f6      	bhi.n	8006c2c <_printf_i+0x28>
 8006c3e:	a101      	add	r1, pc, #4	; (adr r1, 8006c44 <_printf_i+0x40>)
 8006c40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006c44:	08006c9d 	.word	0x08006c9d
 8006c48:	08006cb1 	.word	0x08006cb1
 8006c4c:	08006c2d 	.word	0x08006c2d
 8006c50:	08006c2d 	.word	0x08006c2d
 8006c54:	08006c2d 	.word	0x08006c2d
 8006c58:	08006c2d 	.word	0x08006c2d
 8006c5c:	08006cb1 	.word	0x08006cb1
 8006c60:	08006c2d 	.word	0x08006c2d
 8006c64:	08006c2d 	.word	0x08006c2d
 8006c68:	08006c2d 	.word	0x08006c2d
 8006c6c:	08006c2d 	.word	0x08006c2d
 8006c70:	08006dbf 	.word	0x08006dbf
 8006c74:	08006ce1 	.word	0x08006ce1
 8006c78:	08006da1 	.word	0x08006da1
 8006c7c:	08006c2d 	.word	0x08006c2d
 8006c80:	08006c2d 	.word	0x08006c2d
 8006c84:	08006de1 	.word	0x08006de1
 8006c88:	08006c2d 	.word	0x08006c2d
 8006c8c:	08006ce1 	.word	0x08006ce1
 8006c90:	08006c2d 	.word	0x08006c2d
 8006c94:	08006c2d 	.word	0x08006c2d
 8006c98:	08006da9 	.word	0x08006da9
 8006c9c:	682b      	ldr	r3, [r5, #0]
 8006c9e:	1d1a      	adds	r2, r3, #4
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	602a      	str	r2, [r5, #0]
 8006ca4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ca8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006cac:	2301      	movs	r3, #1
 8006cae:	e0a4      	b.n	8006dfa <_printf_i+0x1f6>
 8006cb0:	6820      	ldr	r0, [r4, #0]
 8006cb2:	6829      	ldr	r1, [r5, #0]
 8006cb4:	0606      	lsls	r6, r0, #24
 8006cb6:	f101 0304 	add.w	r3, r1, #4
 8006cba:	d50a      	bpl.n	8006cd2 <_printf_i+0xce>
 8006cbc:	680e      	ldr	r6, [r1, #0]
 8006cbe:	602b      	str	r3, [r5, #0]
 8006cc0:	2e00      	cmp	r6, #0
 8006cc2:	da03      	bge.n	8006ccc <_printf_i+0xc8>
 8006cc4:	232d      	movs	r3, #45	; 0x2d
 8006cc6:	4276      	negs	r6, r6
 8006cc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ccc:	230a      	movs	r3, #10
 8006cce:	485e      	ldr	r0, [pc, #376]	; (8006e48 <_printf_i+0x244>)
 8006cd0:	e019      	b.n	8006d06 <_printf_i+0x102>
 8006cd2:	680e      	ldr	r6, [r1, #0]
 8006cd4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006cd8:	602b      	str	r3, [r5, #0]
 8006cda:	bf18      	it	ne
 8006cdc:	b236      	sxthne	r6, r6
 8006cde:	e7ef      	b.n	8006cc0 <_printf_i+0xbc>
 8006ce0:	682b      	ldr	r3, [r5, #0]
 8006ce2:	6820      	ldr	r0, [r4, #0]
 8006ce4:	1d19      	adds	r1, r3, #4
 8006ce6:	6029      	str	r1, [r5, #0]
 8006ce8:	0601      	lsls	r1, r0, #24
 8006cea:	d501      	bpl.n	8006cf0 <_printf_i+0xec>
 8006cec:	681e      	ldr	r6, [r3, #0]
 8006cee:	e002      	b.n	8006cf6 <_printf_i+0xf2>
 8006cf0:	0646      	lsls	r6, r0, #25
 8006cf2:	d5fb      	bpl.n	8006cec <_printf_i+0xe8>
 8006cf4:	881e      	ldrh	r6, [r3, #0]
 8006cf6:	2f6f      	cmp	r7, #111	; 0x6f
 8006cf8:	bf0c      	ite	eq
 8006cfa:	2308      	moveq	r3, #8
 8006cfc:	230a      	movne	r3, #10
 8006cfe:	4852      	ldr	r0, [pc, #328]	; (8006e48 <_printf_i+0x244>)
 8006d00:	2100      	movs	r1, #0
 8006d02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006d06:	6865      	ldr	r5, [r4, #4]
 8006d08:	2d00      	cmp	r5, #0
 8006d0a:	bfa8      	it	ge
 8006d0c:	6821      	ldrge	r1, [r4, #0]
 8006d0e:	60a5      	str	r5, [r4, #8]
 8006d10:	bfa4      	itt	ge
 8006d12:	f021 0104 	bicge.w	r1, r1, #4
 8006d16:	6021      	strge	r1, [r4, #0]
 8006d18:	b90e      	cbnz	r6, 8006d1e <_printf_i+0x11a>
 8006d1a:	2d00      	cmp	r5, #0
 8006d1c:	d04d      	beq.n	8006dba <_printf_i+0x1b6>
 8006d1e:	4615      	mov	r5, r2
 8006d20:	fbb6 f1f3 	udiv	r1, r6, r3
 8006d24:	fb03 6711 	mls	r7, r3, r1, r6
 8006d28:	5dc7      	ldrb	r7, [r0, r7]
 8006d2a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006d2e:	4637      	mov	r7, r6
 8006d30:	42bb      	cmp	r3, r7
 8006d32:	460e      	mov	r6, r1
 8006d34:	d9f4      	bls.n	8006d20 <_printf_i+0x11c>
 8006d36:	2b08      	cmp	r3, #8
 8006d38:	d10b      	bne.n	8006d52 <_printf_i+0x14e>
 8006d3a:	6823      	ldr	r3, [r4, #0]
 8006d3c:	07de      	lsls	r6, r3, #31
 8006d3e:	d508      	bpl.n	8006d52 <_printf_i+0x14e>
 8006d40:	6923      	ldr	r3, [r4, #16]
 8006d42:	6861      	ldr	r1, [r4, #4]
 8006d44:	4299      	cmp	r1, r3
 8006d46:	bfde      	ittt	le
 8006d48:	2330      	movle	r3, #48	; 0x30
 8006d4a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006d4e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006d52:	1b52      	subs	r2, r2, r5
 8006d54:	6122      	str	r2, [r4, #16]
 8006d56:	464b      	mov	r3, r9
 8006d58:	4621      	mov	r1, r4
 8006d5a:	4640      	mov	r0, r8
 8006d5c:	f8cd a000 	str.w	sl, [sp]
 8006d60:	aa03      	add	r2, sp, #12
 8006d62:	f7ff fedf 	bl	8006b24 <_printf_common>
 8006d66:	3001      	adds	r0, #1
 8006d68:	d14c      	bne.n	8006e04 <_printf_i+0x200>
 8006d6a:	f04f 30ff 	mov.w	r0, #4294967295
 8006d6e:	b004      	add	sp, #16
 8006d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d74:	4834      	ldr	r0, [pc, #208]	; (8006e48 <_printf_i+0x244>)
 8006d76:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006d7a:	6829      	ldr	r1, [r5, #0]
 8006d7c:	6823      	ldr	r3, [r4, #0]
 8006d7e:	f851 6b04 	ldr.w	r6, [r1], #4
 8006d82:	6029      	str	r1, [r5, #0]
 8006d84:	061d      	lsls	r5, r3, #24
 8006d86:	d514      	bpl.n	8006db2 <_printf_i+0x1ae>
 8006d88:	07df      	lsls	r7, r3, #31
 8006d8a:	bf44      	itt	mi
 8006d8c:	f043 0320 	orrmi.w	r3, r3, #32
 8006d90:	6023      	strmi	r3, [r4, #0]
 8006d92:	b91e      	cbnz	r6, 8006d9c <_printf_i+0x198>
 8006d94:	6823      	ldr	r3, [r4, #0]
 8006d96:	f023 0320 	bic.w	r3, r3, #32
 8006d9a:	6023      	str	r3, [r4, #0]
 8006d9c:	2310      	movs	r3, #16
 8006d9e:	e7af      	b.n	8006d00 <_printf_i+0xfc>
 8006da0:	6823      	ldr	r3, [r4, #0]
 8006da2:	f043 0320 	orr.w	r3, r3, #32
 8006da6:	6023      	str	r3, [r4, #0]
 8006da8:	2378      	movs	r3, #120	; 0x78
 8006daa:	4828      	ldr	r0, [pc, #160]	; (8006e4c <_printf_i+0x248>)
 8006dac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006db0:	e7e3      	b.n	8006d7a <_printf_i+0x176>
 8006db2:	0659      	lsls	r1, r3, #25
 8006db4:	bf48      	it	mi
 8006db6:	b2b6      	uxthmi	r6, r6
 8006db8:	e7e6      	b.n	8006d88 <_printf_i+0x184>
 8006dba:	4615      	mov	r5, r2
 8006dbc:	e7bb      	b.n	8006d36 <_printf_i+0x132>
 8006dbe:	682b      	ldr	r3, [r5, #0]
 8006dc0:	6826      	ldr	r6, [r4, #0]
 8006dc2:	1d18      	adds	r0, r3, #4
 8006dc4:	6961      	ldr	r1, [r4, #20]
 8006dc6:	6028      	str	r0, [r5, #0]
 8006dc8:	0635      	lsls	r5, r6, #24
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	d501      	bpl.n	8006dd2 <_printf_i+0x1ce>
 8006dce:	6019      	str	r1, [r3, #0]
 8006dd0:	e002      	b.n	8006dd8 <_printf_i+0x1d4>
 8006dd2:	0670      	lsls	r0, r6, #25
 8006dd4:	d5fb      	bpl.n	8006dce <_printf_i+0x1ca>
 8006dd6:	8019      	strh	r1, [r3, #0]
 8006dd8:	2300      	movs	r3, #0
 8006dda:	4615      	mov	r5, r2
 8006ddc:	6123      	str	r3, [r4, #16]
 8006dde:	e7ba      	b.n	8006d56 <_printf_i+0x152>
 8006de0:	682b      	ldr	r3, [r5, #0]
 8006de2:	2100      	movs	r1, #0
 8006de4:	1d1a      	adds	r2, r3, #4
 8006de6:	602a      	str	r2, [r5, #0]
 8006de8:	681d      	ldr	r5, [r3, #0]
 8006dea:	6862      	ldr	r2, [r4, #4]
 8006dec:	4628      	mov	r0, r5
 8006dee:	f002 fe65 	bl	8009abc <memchr>
 8006df2:	b108      	cbz	r0, 8006df8 <_printf_i+0x1f4>
 8006df4:	1b40      	subs	r0, r0, r5
 8006df6:	6060      	str	r0, [r4, #4]
 8006df8:	6863      	ldr	r3, [r4, #4]
 8006dfa:	6123      	str	r3, [r4, #16]
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e02:	e7a8      	b.n	8006d56 <_printf_i+0x152>
 8006e04:	462a      	mov	r2, r5
 8006e06:	4649      	mov	r1, r9
 8006e08:	4640      	mov	r0, r8
 8006e0a:	6923      	ldr	r3, [r4, #16]
 8006e0c:	47d0      	blx	sl
 8006e0e:	3001      	adds	r0, #1
 8006e10:	d0ab      	beq.n	8006d6a <_printf_i+0x166>
 8006e12:	6823      	ldr	r3, [r4, #0]
 8006e14:	079b      	lsls	r3, r3, #30
 8006e16:	d413      	bmi.n	8006e40 <_printf_i+0x23c>
 8006e18:	68e0      	ldr	r0, [r4, #12]
 8006e1a:	9b03      	ldr	r3, [sp, #12]
 8006e1c:	4298      	cmp	r0, r3
 8006e1e:	bfb8      	it	lt
 8006e20:	4618      	movlt	r0, r3
 8006e22:	e7a4      	b.n	8006d6e <_printf_i+0x16a>
 8006e24:	2301      	movs	r3, #1
 8006e26:	4632      	mov	r2, r6
 8006e28:	4649      	mov	r1, r9
 8006e2a:	4640      	mov	r0, r8
 8006e2c:	47d0      	blx	sl
 8006e2e:	3001      	adds	r0, #1
 8006e30:	d09b      	beq.n	8006d6a <_printf_i+0x166>
 8006e32:	3501      	adds	r5, #1
 8006e34:	68e3      	ldr	r3, [r4, #12]
 8006e36:	9903      	ldr	r1, [sp, #12]
 8006e38:	1a5b      	subs	r3, r3, r1
 8006e3a:	42ab      	cmp	r3, r5
 8006e3c:	dcf2      	bgt.n	8006e24 <_printf_i+0x220>
 8006e3e:	e7eb      	b.n	8006e18 <_printf_i+0x214>
 8006e40:	2500      	movs	r5, #0
 8006e42:	f104 0619 	add.w	r6, r4, #25
 8006e46:	e7f5      	b.n	8006e34 <_printf_i+0x230>
 8006e48:	0800cae2 	.word	0x0800cae2
 8006e4c:	0800caf3 	.word	0x0800caf3

08006e50 <_scanf_float>:
 8006e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e54:	b087      	sub	sp, #28
 8006e56:	9303      	str	r3, [sp, #12]
 8006e58:	688b      	ldr	r3, [r1, #8]
 8006e5a:	4617      	mov	r7, r2
 8006e5c:	1e5a      	subs	r2, r3, #1
 8006e5e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006e62:	bf85      	ittet	hi
 8006e64:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006e68:	195b      	addhi	r3, r3, r5
 8006e6a:	2300      	movls	r3, #0
 8006e6c:	9302      	strhi	r3, [sp, #8]
 8006e6e:	bf88      	it	hi
 8006e70:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006e74:	468b      	mov	fp, r1
 8006e76:	f04f 0500 	mov.w	r5, #0
 8006e7a:	bf8c      	ite	hi
 8006e7c:	608b      	strhi	r3, [r1, #8]
 8006e7e:	9302      	strls	r3, [sp, #8]
 8006e80:	680b      	ldr	r3, [r1, #0]
 8006e82:	4680      	mov	r8, r0
 8006e84:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006e88:	f84b 3b1c 	str.w	r3, [fp], #28
 8006e8c:	460c      	mov	r4, r1
 8006e8e:	465e      	mov	r6, fp
 8006e90:	46aa      	mov	sl, r5
 8006e92:	46a9      	mov	r9, r5
 8006e94:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006e98:	9501      	str	r5, [sp, #4]
 8006e9a:	68a2      	ldr	r2, [r4, #8]
 8006e9c:	b152      	cbz	r2, 8006eb4 <_scanf_float+0x64>
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	781b      	ldrb	r3, [r3, #0]
 8006ea2:	2b4e      	cmp	r3, #78	; 0x4e
 8006ea4:	d864      	bhi.n	8006f70 <_scanf_float+0x120>
 8006ea6:	2b40      	cmp	r3, #64	; 0x40
 8006ea8:	d83c      	bhi.n	8006f24 <_scanf_float+0xd4>
 8006eaa:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006eae:	b2c8      	uxtb	r0, r1
 8006eb0:	280e      	cmp	r0, #14
 8006eb2:	d93a      	bls.n	8006f2a <_scanf_float+0xda>
 8006eb4:	f1b9 0f00 	cmp.w	r9, #0
 8006eb8:	d003      	beq.n	8006ec2 <_scanf_float+0x72>
 8006eba:	6823      	ldr	r3, [r4, #0]
 8006ebc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ec0:	6023      	str	r3, [r4, #0]
 8006ec2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006ec6:	f1ba 0f01 	cmp.w	sl, #1
 8006eca:	f200 8113 	bhi.w	80070f4 <_scanf_float+0x2a4>
 8006ece:	455e      	cmp	r6, fp
 8006ed0:	f200 8105 	bhi.w	80070de <_scanf_float+0x28e>
 8006ed4:	2501      	movs	r5, #1
 8006ed6:	4628      	mov	r0, r5
 8006ed8:	b007      	add	sp, #28
 8006eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ede:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006ee2:	2a0d      	cmp	r2, #13
 8006ee4:	d8e6      	bhi.n	8006eb4 <_scanf_float+0x64>
 8006ee6:	a101      	add	r1, pc, #4	; (adr r1, 8006eec <_scanf_float+0x9c>)
 8006ee8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006eec:	0800702b 	.word	0x0800702b
 8006ef0:	08006eb5 	.word	0x08006eb5
 8006ef4:	08006eb5 	.word	0x08006eb5
 8006ef8:	08006eb5 	.word	0x08006eb5
 8006efc:	0800708b 	.word	0x0800708b
 8006f00:	08007063 	.word	0x08007063
 8006f04:	08006eb5 	.word	0x08006eb5
 8006f08:	08006eb5 	.word	0x08006eb5
 8006f0c:	08007039 	.word	0x08007039
 8006f10:	08006eb5 	.word	0x08006eb5
 8006f14:	08006eb5 	.word	0x08006eb5
 8006f18:	08006eb5 	.word	0x08006eb5
 8006f1c:	08006eb5 	.word	0x08006eb5
 8006f20:	08006ff1 	.word	0x08006ff1
 8006f24:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006f28:	e7db      	b.n	8006ee2 <_scanf_float+0x92>
 8006f2a:	290e      	cmp	r1, #14
 8006f2c:	d8c2      	bhi.n	8006eb4 <_scanf_float+0x64>
 8006f2e:	a001      	add	r0, pc, #4	; (adr r0, 8006f34 <_scanf_float+0xe4>)
 8006f30:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006f34:	08006fe3 	.word	0x08006fe3
 8006f38:	08006eb5 	.word	0x08006eb5
 8006f3c:	08006fe3 	.word	0x08006fe3
 8006f40:	08007077 	.word	0x08007077
 8006f44:	08006eb5 	.word	0x08006eb5
 8006f48:	08006f91 	.word	0x08006f91
 8006f4c:	08006fcd 	.word	0x08006fcd
 8006f50:	08006fcd 	.word	0x08006fcd
 8006f54:	08006fcd 	.word	0x08006fcd
 8006f58:	08006fcd 	.word	0x08006fcd
 8006f5c:	08006fcd 	.word	0x08006fcd
 8006f60:	08006fcd 	.word	0x08006fcd
 8006f64:	08006fcd 	.word	0x08006fcd
 8006f68:	08006fcd 	.word	0x08006fcd
 8006f6c:	08006fcd 	.word	0x08006fcd
 8006f70:	2b6e      	cmp	r3, #110	; 0x6e
 8006f72:	d809      	bhi.n	8006f88 <_scanf_float+0x138>
 8006f74:	2b60      	cmp	r3, #96	; 0x60
 8006f76:	d8b2      	bhi.n	8006ede <_scanf_float+0x8e>
 8006f78:	2b54      	cmp	r3, #84	; 0x54
 8006f7a:	d077      	beq.n	800706c <_scanf_float+0x21c>
 8006f7c:	2b59      	cmp	r3, #89	; 0x59
 8006f7e:	d199      	bne.n	8006eb4 <_scanf_float+0x64>
 8006f80:	2d07      	cmp	r5, #7
 8006f82:	d197      	bne.n	8006eb4 <_scanf_float+0x64>
 8006f84:	2508      	movs	r5, #8
 8006f86:	e029      	b.n	8006fdc <_scanf_float+0x18c>
 8006f88:	2b74      	cmp	r3, #116	; 0x74
 8006f8a:	d06f      	beq.n	800706c <_scanf_float+0x21c>
 8006f8c:	2b79      	cmp	r3, #121	; 0x79
 8006f8e:	e7f6      	b.n	8006f7e <_scanf_float+0x12e>
 8006f90:	6821      	ldr	r1, [r4, #0]
 8006f92:	05c8      	lsls	r0, r1, #23
 8006f94:	d51a      	bpl.n	8006fcc <_scanf_float+0x17c>
 8006f96:	9b02      	ldr	r3, [sp, #8]
 8006f98:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006f9c:	6021      	str	r1, [r4, #0]
 8006f9e:	f109 0901 	add.w	r9, r9, #1
 8006fa2:	b11b      	cbz	r3, 8006fac <_scanf_float+0x15c>
 8006fa4:	3b01      	subs	r3, #1
 8006fa6:	3201      	adds	r2, #1
 8006fa8:	9302      	str	r3, [sp, #8]
 8006faa:	60a2      	str	r2, [r4, #8]
 8006fac:	68a3      	ldr	r3, [r4, #8]
 8006fae:	3b01      	subs	r3, #1
 8006fb0:	60a3      	str	r3, [r4, #8]
 8006fb2:	6923      	ldr	r3, [r4, #16]
 8006fb4:	3301      	adds	r3, #1
 8006fb6:	6123      	str	r3, [r4, #16]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	3b01      	subs	r3, #1
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	607b      	str	r3, [r7, #4]
 8006fc0:	f340 8084 	ble.w	80070cc <_scanf_float+0x27c>
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	3301      	adds	r3, #1
 8006fc8:	603b      	str	r3, [r7, #0]
 8006fca:	e766      	b.n	8006e9a <_scanf_float+0x4a>
 8006fcc:	eb1a 0f05 	cmn.w	sl, r5
 8006fd0:	f47f af70 	bne.w	8006eb4 <_scanf_float+0x64>
 8006fd4:	6822      	ldr	r2, [r4, #0]
 8006fd6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006fda:	6022      	str	r2, [r4, #0]
 8006fdc:	f806 3b01 	strb.w	r3, [r6], #1
 8006fe0:	e7e4      	b.n	8006fac <_scanf_float+0x15c>
 8006fe2:	6822      	ldr	r2, [r4, #0]
 8006fe4:	0610      	lsls	r0, r2, #24
 8006fe6:	f57f af65 	bpl.w	8006eb4 <_scanf_float+0x64>
 8006fea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006fee:	e7f4      	b.n	8006fda <_scanf_float+0x18a>
 8006ff0:	f1ba 0f00 	cmp.w	sl, #0
 8006ff4:	d10e      	bne.n	8007014 <_scanf_float+0x1c4>
 8006ff6:	f1b9 0f00 	cmp.w	r9, #0
 8006ffa:	d10e      	bne.n	800701a <_scanf_float+0x1ca>
 8006ffc:	6822      	ldr	r2, [r4, #0]
 8006ffe:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007002:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007006:	d108      	bne.n	800701a <_scanf_float+0x1ca>
 8007008:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800700c:	f04f 0a01 	mov.w	sl, #1
 8007010:	6022      	str	r2, [r4, #0]
 8007012:	e7e3      	b.n	8006fdc <_scanf_float+0x18c>
 8007014:	f1ba 0f02 	cmp.w	sl, #2
 8007018:	d055      	beq.n	80070c6 <_scanf_float+0x276>
 800701a:	2d01      	cmp	r5, #1
 800701c:	d002      	beq.n	8007024 <_scanf_float+0x1d4>
 800701e:	2d04      	cmp	r5, #4
 8007020:	f47f af48 	bne.w	8006eb4 <_scanf_float+0x64>
 8007024:	3501      	adds	r5, #1
 8007026:	b2ed      	uxtb	r5, r5
 8007028:	e7d8      	b.n	8006fdc <_scanf_float+0x18c>
 800702a:	f1ba 0f01 	cmp.w	sl, #1
 800702e:	f47f af41 	bne.w	8006eb4 <_scanf_float+0x64>
 8007032:	f04f 0a02 	mov.w	sl, #2
 8007036:	e7d1      	b.n	8006fdc <_scanf_float+0x18c>
 8007038:	b97d      	cbnz	r5, 800705a <_scanf_float+0x20a>
 800703a:	f1b9 0f00 	cmp.w	r9, #0
 800703e:	f47f af3c 	bne.w	8006eba <_scanf_float+0x6a>
 8007042:	6822      	ldr	r2, [r4, #0]
 8007044:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007048:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800704c:	f47f af39 	bne.w	8006ec2 <_scanf_float+0x72>
 8007050:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007054:	2501      	movs	r5, #1
 8007056:	6022      	str	r2, [r4, #0]
 8007058:	e7c0      	b.n	8006fdc <_scanf_float+0x18c>
 800705a:	2d03      	cmp	r5, #3
 800705c:	d0e2      	beq.n	8007024 <_scanf_float+0x1d4>
 800705e:	2d05      	cmp	r5, #5
 8007060:	e7de      	b.n	8007020 <_scanf_float+0x1d0>
 8007062:	2d02      	cmp	r5, #2
 8007064:	f47f af26 	bne.w	8006eb4 <_scanf_float+0x64>
 8007068:	2503      	movs	r5, #3
 800706a:	e7b7      	b.n	8006fdc <_scanf_float+0x18c>
 800706c:	2d06      	cmp	r5, #6
 800706e:	f47f af21 	bne.w	8006eb4 <_scanf_float+0x64>
 8007072:	2507      	movs	r5, #7
 8007074:	e7b2      	b.n	8006fdc <_scanf_float+0x18c>
 8007076:	6822      	ldr	r2, [r4, #0]
 8007078:	0591      	lsls	r1, r2, #22
 800707a:	f57f af1b 	bpl.w	8006eb4 <_scanf_float+0x64>
 800707e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007082:	6022      	str	r2, [r4, #0]
 8007084:	f8cd 9004 	str.w	r9, [sp, #4]
 8007088:	e7a8      	b.n	8006fdc <_scanf_float+0x18c>
 800708a:	6822      	ldr	r2, [r4, #0]
 800708c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007090:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007094:	d006      	beq.n	80070a4 <_scanf_float+0x254>
 8007096:	0550      	lsls	r0, r2, #21
 8007098:	f57f af0c 	bpl.w	8006eb4 <_scanf_float+0x64>
 800709c:	f1b9 0f00 	cmp.w	r9, #0
 80070a0:	f43f af0f 	beq.w	8006ec2 <_scanf_float+0x72>
 80070a4:	0591      	lsls	r1, r2, #22
 80070a6:	bf58      	it	pl
 80070a8:	9901      	ldrpl	r1, [sp, #4]
 80070aa:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80070ae:	bf58      	it	pl
 80070b0:	eba9 0101 	subpl.w	r1, r9, r1
 80070b4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80070b8:	f04f 0900 	mov.w	r9, #0
 80070bc:	bf58      	it	pl
 80070be:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80070c2:	6022      	str	r2, [r4, #0]
 80070c4:	e78a      	b.n	8006fdc <_scanf_float+0x18c>
 80070c6:	f04f 0a03 	mov.w	sl, #3
 80070ca:	e787      	b.n	8006fdc <_scanf_float+0x18c>
 80070cc:	4639      	mov	r1, r7
 80070ce:	4640      	mov	r0, r8
 80070d0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80070d4:	4798      	blx	r3
 80070d6:	2800      	cmp	r0, #0
 80070d8:	f43f aedf 	beq.w	8006e9a <_scanf_float+0x4a>
 80070dc:	e6ea      	b.n	8006eb4 <_scanf_float+0x64>
 80070de:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80070e2:	463a      	mov	r2, r7
 80070e4:	4640      	mov	r0, r8
 80070e6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80070ea:	4798      	blx	r3
 80070ec:	6923      	ldr	r3, [r4, #16]
 80070ee:	3b01      	subs	r3, #1
 80070f0:	6123      	str	r3, [r4, #16]
 80070f2:	e6ec      	b.n	8006ece <_scanf_float+0x7e>
 80070f4:	1e6b      	subs	r3, r5, #1
 80070f6:	2b06      	cmp	r3, #6
 80070f8:	d825      	bhi.n	8007146 <_scanf_float+0x2f6>
 80070fa:	2d02      	cmp	r5, #2
 80070fc:	d836      	bhi.n	800716c <_scanf_float+0x31c>
 80070fe:	455e      	cmp	r6, fp
 8007100:	f67f aee8 	bls.w	8006ed4 <_scanf_float+0x84>
 8007104:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007108:	463a      	mov	r2, r7
 800710a:	4640      	mov	r0, r8
 800710c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007110:	4798      	blx	r3
 8007112:	6923      	ldr	r3, [r4, #16]
 8007114:	3b01      	subs	r3, #1
 8007116:	6123      	str	r3, [r4, #16]
 8007118:	e7f1      	b.n	80070fe <_scanf_float+0x2ae>
 800711a:	9802      	ldr	r0, [sp, #8]
 800711c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007120:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007124:	463a      	mov	r2, r7
 8007126:	9002      	str	r0, [sp, #8]
 8007128:	4640      	mov	r0, r8
 800712a:	4798      	blx	r3
 800712c:	6923      	ldr	r3, [r4, #16]
 800712e:	3b01      	subs	r3, #1
 8007130:	6123      	str	r3, [r4, #16]
 8007132:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007136:	fa5f fa8a 	uxtb.w	sl, sl
 800713a:	f1ba 0f02 	cmp.w	sl, #2
 800713e:	d1ec      	bne.n	800711a <_scanf_float+0x2ca>
 8007140:	3d03      	subs	r5, #3
 8007142:	b2ed      	uxtb	r5, r5
 8007144:	1b76      	subs	r6, r6, r5
 8007146:	6823      	ldr	r3, [r4, #0]
 8007148:	05da      	lsls	r2, r3, #23
 800714a:	d52f      	bpl.n	80071ac <_scanf_float+0x35c>
 800714c:	055b      	lsls	r3, r3, #21
 800714e:	d510      	bpl.n	8007172 <_scanf_float+0x322>
 8007150:	455e      	cmp	r6, fp
 8007152:	f67f aebf 	bls.w	8006ed4 <_scanf_float+0x84>
 8007156:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800715a:	463a      	mov	r2, r7
 800715c:	4640      	mov	r0, r8
 800715e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007162:	4798      	blx	r3
 8007164:	6923      	ldr	r3, [r4, #16]
 8007166:	3b01      	subs	r3, #1
 8007168:	6123      	str	r3, [r4, #16]
 800716a:	e7f1      	b.n	8007150 <_scanf_float+0x300>
 800716c:	46aa      	mov	sl, r5
 800716e:	9602      	str	r6, [sp, #8]
 8007170:	e7df      	b.n	8007132 <_scanf_float+0x2e2>
 8007172:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007176:	6923      	ldr	r3, [r4, #16]
 8007178:	2965      	cmp	r1, #101	; 0x65
 800717a:	f103 33ff 	add.w	r3, r3, #4294967295
 800717e:	f106 35ff 	add.w	r5, r6, #4294967295
 8007182:	6123      	str	r3, [r4, #16]
 8007184:	d00c      	beq.n	80071a0 <_scanf_float+0x350>
 8007186:	2945      	cmp	r1, #69	; 0x45
 8007188:	d00a      	beq.n	80071a0 <_scanf_float+0x350>
 800718a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800718e:	463a      	mov	r2, r7
 8007190:	4640      	mov	r0, r8
 8007192:	4798      	blx	r3
 8007194:	6923      	ldr	r3, [r4, #16]
 8007196:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800719a:	3b01      	subs	r3, #1
 800719c:	1eb5      	subs	r5, r6, #2
 800719e:	6123      	str	r3, [r4, #16]
 80071a0:	463a      	mov	r2, r7
 80071a2:	4640      	mov	r0, r8
 80071a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80071a8:	4798      	blx	r3
 80071aa:	462e      	mov	r6, r5
 80071ac:	6825      	ldr	r5, [r4, #0]
 80071ae:	f015 0510 	ands.w	r5, r5, #16
 80071b2:	d155      	bne.n	8007260 <_scanf_float+0x410>
 80071b4:	7035      	strb	r5, [r6, #0]
 80071b6:	6823      	ldr	r3, [r4, #0]
 80071b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80071bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071c0:	d11b      	bne.n	80071fa <_scanf_float+0x3aa>
 80071c2:	9b01      	ldr	r3, [sp, #4]
 80071c4:	454b      	cmp	r3, r9
 80071c6:	eba3 0209 	sub.w	r2, r3, r9
 80071ca:	d123      	bne.n	8007214 <_scanf_float+0x3c4>
 80071cc:	2200      	movs	r2, #0
 80071ce:	4659      	mov	r1, fp
 80071d0:	4640      	mov	r0, r8
 80071d2:	f000 ff09 	bl	8007fe8 <_strtod_r>
 80071d6:	6822      	ldr	r2, [r4, #0]
 80071d8:	9b03      	ldr	r3, [sp, #12]
 80071da:	f012 0f02 	tst.w	r2, #2
 80071de:	4606      	mov	r6, r0
 80071e0:	460f      	mov	r7, r1
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	d021      	beq.n	800722a <_scanf_float+0x3da>
 80071e6:	1d1a      	adds	r2, r3, #4
 80071e8:	9903      	ldr	r1, [sp, #12]
 80071ea:	600a      	str	r2, [r1, #0]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	e9c3 6700 	strd	r6, r7, [r3]
 80071f2:	68e3      	ldr	r3, [r4, #12]
 80071f4:	3301      	adds	r3, #1
 80071f6:	60e3      	str	r3, [r4, #12]
 80071f8:	e66d      	b.n	8006ed6 <_scanf_float+0x86>
 80071fa:	9b04      	ldr	r3, [sp, #16]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d0e5      	beq.n	80071cc <_scanf_float+0x37c>
 8007200:	9905      	ldr	r1, [sp, #20]
 8007202:	230a      	movs	r3, #10
 8007204:	462a      	mov	r2, r5
 8007206:	4640      	mov	r0, r8
 8007208:	3101      	adds	r1, #1
 800720a:	f000 ff7b 	bl	8008104 <_strtol_r>
 800720e:	9b04      	ldr	r3, [sp, #16]
 8007210:	9e05      	ldr	r6, [sp, #20]
 8007212:	1ac2      	subs	r2, r0, r3
 8007214:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007218:	429e      	cmp	r6, r3
 800721a:	bf28      	it	cs
 800721c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007220:	4630      	mov	r0, r6
 8007222:	4910      	ldr	r1, [pc, #64]	; (8007264 <_scanf_float+0x414>)
 8007224:	f000 f8b4 	bl	8007390 <siprintf>
 8007228:	e7d0      	b.n	80071cc <_scanf_float+0x37c>
 800722a:	f012 0f04 	tst.w	r2, #4
 800722e:	f103 0204 	add.w	r2, r3, #4
 8007232:	d1d9      	bne.n	80071e8 <_scanf_float+0x398>
 8007234:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8007238:	f8cc 2000 	str.w	r2, [ip]
 800723c:	f8d3 8000 	ldr.w	r8, [r3]
 8007240:	4602      	mov	r2, r0
 8007242:	460b      	mov	r3, r1
 8007244:	f7f9 fbe2 	bl	8000a0c <__aeabi_dcmpun>
 8007248:	b128      	cbz	r0, 8007256 <_scanf_float+0x406>
 800724a:	4807      	ldr	r0, [pc, #28]	; (8007268 <_scanf_float+0x418>)
 800724c:	f000 f89c 	bl	8007388 <nanf>
 8007250:	f8c8 0000 	str.w	r0, [r8]
 8007254:	e7cd      	b.n	80071f2 <_scanf_float+0x3a2>
 8007256:	4630      	mov	r0, r6
 8007258:	4639      	mov	r1, r7
 800725a:	f7f9 fc35 	bl	8000ac8 <__aeabi_d2f>
 800725e:	e7f7      	b.n	8007250 <_scanf_float+0x400>
 8007260:	2500      	movs	r5, #0
 8007262:	e638      	b.n	8006ed6 <_scanf_float+0x86>
 8007264:	0800cb04 	.word	0x0800cb04
 8007268:	0800cf78 	.word	0x0800cf78

0800726c <iprintf>:
 800726c:	b40f      	push	{r0, r1, r2, r3}
 800726e:	4b0a      	ldr	r3, [pc, #40]	; (8007298 <iprintf+0x2c>)
 8007270:	b513      	push	{r0, r1, r4, lr}
 8007272:	681c      	ldr	r4, [r3, #0]
 8007274:	b124      	cbz	r4, 8007280 <iprintf+0x14>
 8007276:	69a3      	ldr	r3, [r4, #24]
 8007278:	b913      	cbnz	r3, 8007280 <iprintf+0x14>
 800727a:	4620      	mov	r0, r4
 800727c:	f001 ff94 	bl	80091a8 <__sinit>
 8007280:	ab05      	add	r3, sp, #20
 8007282:	4620      	mov	r0, r4
 8007284:	9a04      	ldr	r2, [sp, #16]
 8007286:	68a1      	ldr	r1, [r4, #8]
 8007288:	9301      	str	r3, [sp, #4]
 800728a:	f003 fb51 	bl	800a930 <_vfiprintf_r>
 800728e:	b002      	add	sp, #8
 8007290:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007294:	b004      	add	sp, #16
 8007296:	4770      	bx	lr
 8007298:	2000000c 	.word	0x2000000c

0800729c <_puts_r>:
 800729c:	b570      	push	{r4, r5, r6, lr}
 800729e:	460e      	mov	r6, r1
 80072a0:	4605      	mov	r5, r0
 80072a2:	b118      	cbz	r0, 80072ac <_puts_r+0x10>
 80072a4:	6983      	ldr	r3, [r0, #24]
 80072a6:	b90b      	cbnz	r3, 80072ac <_puts_r+0x10>
 80072a8:	f001 ff7e 	bl	80091a8 <__sinit>
 80072ac:	69ab      	ldr	r3, [r5, #24]
 80072ae:	68ac      	ldr	r4, [r5, #8]
 80072b0:	b913      	cbnz	r3, 80072b8 <_puts_r+0x1c>
 80072b2:	4628      	mov	r0, r5
 80072b4:	f001 ff78 	bl	80091a8 <__sinit>
 80072b8:	4b2c      	ldr	r3, [pc, #176]	; (800736c <_puts_r+0xd0>)
 80072ba:	429c      	cmp	r4, r3
 80072bc:	d120      	bne.n	8007300 <_puts_r+0x64>
 80072be:	686c      	ldr	r4, [r5, #4]
 80072c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80072c2:	07db      	lsls	r3, r3, #31
 80072c4:	d405      	bmi.n	80072d2 <_puts_r+0x36>
 80072c6:	89a3      	ldrh	r3, [r4, #12]
 80072c8:	0598      	lsls	r0, r3, #22
 80072ca:	d402      	bmi.n	80072d2 <_puts_r+0x36>
 80072cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80072ce:	f002 fb74 	bl	80099ba <__retarget_lock_acquire_recursive>
 80072d2:	89a3      	ldrh	r3, [r4, #12]
 80072d4:	0719      	lsls	r1, r3, #28
 80072d6:	d51d      	bpl.n	8007314 <_puts_r+0x78>
 80072d8:	6923      	ldr	r3, [r4, #16]
 80072da:	b1db      	cbz	r3, 8007314 <_puts_r+0x78>
 80072dc:	3e01      	subs	r6, #1
 80072de:	68a3      	ldr	r3, [r4, #8]
 80072e0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80072e4:	3b01      	subs	r3, #1
 80072e6:	60a3      	str	r3, [r4, #8]
 80072e8:	bb39      	cbnz	r1, 800733a <_puts_r+0x9e>
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	da38      	bge.n	8007360 <_puts_r+0xc4>
 80072ee:	4622      	mov	r2, r4
 80072f0:	210a      	movs	r1, #10
 80072f2:	4628      	mov	r0, r5
 80072f4:	f000 ff08 	bl	8008108 <__swbuf_r>
 80072f8:	3001      	adds	r0, #1
 80072fa:	d011      	beq.n	8007320 <_puts_r+0x84>
 80072fc:	250a      	movs	r5, #10
 80072fe:	e011      	b.n	8007324 <_puts_r+0x88>
 8007300:	4b1b      	ldr	r3, [pc, #108]	; (8007370 <_puts_r+0xd4>)
 8007302:	429c      	cmp	r4, r3
 8007304:	d101      	bne.n	800730a <_puts_r+0x6e>
 8007306:	68ac      	ldr	r4, [r5, #8]
 8007308:	e7da      	b.n	80072c0 <_puts_r+0x24>
 800730a:	4b1a      	ldr	r3, [pc, #104]	; (8007374 <_puts_r+0xd8>)
 800730c:	429c      	cmp	r4, r3
 800730e:	bf08      	it	eq
 8007310:	68ec      	ldreq	r4, [r5, #12]
 8007312:	e7d5      	b.n	80072c0 <_puts_r+0x24>
 8007314:	4621      	mov	r1, r4
 8007316:	4628      	mov	r0, r5
 8007318:	f000 ff48 	bl	80081ac <__swsetup_r>
 800731c:	2800      	cmp	r0, #0
 800731e:	d0dd      	beq.n	80072dc <_puts_r+0x40>
 8007320:	f04f 35ff 	mov.w	r5, #4294967295
 8007324:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007326:	07da      	lsls	r2, r3, #31
 8007328:	d405      	bmi.n	8007336 <_puts_r+0x9a>
 800732a:	89a3      	ldrh	r3, [r4, #12]
 800732c:	059b      	lsls	r3, r3, #22
 800732e:	d402      	bmi.n	8007336 <_puts_r+0x9a>
 8007330:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007332:	f002 fb43 	bl	80099bc <__retarget_lock_release_recursive>
 8007336:	4628      	mov	r0, r5
 8007338:	bd70      	pop	{r4, r5, r6, pc}
 800733a:	2b00      	cmp	r3, #0
 800733c:	da04      	bge.n	8007348 <_puts_r+0xac>
 800733e:	69a2      	ldr	r2, [r4, #24]
 8007340:	429a      	cmp	r2, r3
 8007342:	dc06      	bgt.n	8007352 <_puts_r+0xb6>
 8007344:	290a      	cmp	r1, #10
 8007346:	d004      	beq.n	8007352 <_puts_r+0xb6>
 8007348:	6823      	ldr	r3, [r4, #0]
 800734a:	1c5a      	adds	r2, r3, #1
 800734c:	6022      	str	r2, [r4, #0]
 800734e:	7019      	strb	r1, [r3, #0]
 8007350:	e7c5      	b.n	80072de <_puts_r+0x42>
 8007352:	4622      	mov	r2, r4
 8007354:	4628      	mov	r0, r5
 8007356:	f000 fed7 	bl	8008108 <__swbuf_r>
 800735a:	3001      	adds	r0, #1
 800735c:	d1bf      	bne.n	80072de <_puts_r+0x42>
 800735e:	e7df      	b.n	8007320 <_puts_r+0x84>
 8007360:	250a      	movs	r5, #10
 8007362:	6823      	ldr	r3, [r4, #0]
 8007364:	1c5a      	adds	r2, r3, #1
 8007366:	6022      	str	r2, [r4, #0]
 8007368:	701d      	strb	r5, [r3, #0]
 800736a:	e7db      	b.n	8007324 <_puts_r+0x88>
 800736c:	0800cd14 	.word	0x0800cd14
 8007370:	0800cd34 	.word	0x0800cd34
 8007374:	0800ccf4 	.word	0x0800ccf4

08007378 <puts>:
 8007378:	4b02      	ldr	r3, [pc, #8]	; (8007384 <puts+0xc>)
 800737a:	4601      	mov	r1, r0
 800737c:	6818      	ldr	r0, [r3, #0]
 800737e:	f7ff bf8d 	b.w	800729c <_puts_r>
 8007382:	bf00      	nop
 8007384:	2000000c 	.word	0x2000000c

08007388 <nanf>:
 8007388:	4800      	ldr	r0, [pc, #0]	; (800738c <nanf+0x4>)
 800738a:	4770      	bx	lr
 800738c:	7fc00000 	.word	0x7fc00000

08007390 <siprintf>:
 8007390:	b40e      	push	{r1, r2, r3}
 8007392:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007396:	b500      	push	{lr}
 8007398:	b09c      	sub	sp, #112	; 0x70
 800739a:	ab1d      	add	r3, sp, #116	; 0x74
 800739c:	9002      	str	r0, [sp, #8]
 800739e:	9006      	str	r0, [sp, #24]
 80073a0:	9107      	str	r1, [sp, #28]
 80073a2:	9104      	str	r1, [sp, #16]
 80073a4:	4808      	ldr	r0, [pc, #32]	; (80073c8 <siprintf+0x38>)
 80073a6:	4909      	ldr	r1, [pc, #36]	; (80073cc <siprintf+0x3c>)
 80073a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80073ac:	9105      	str	r1, [sp, #20]
 80073ae:	6800      	ldr	r0, [r0, #0]
 80073b0:	a902      	add	r1, sp, #8
 80073b2:	9301      	str	r3, [sp, #4]
 80073b4:	f003 f994 	bl	800a6e0 <_svfiprintf_r>
 80073b8:	2200      	movs	r2, #0
 80073ba:	9b02      	ldr	r3, [sp, #8]
 80073bc:	701a      	strb	r2, [r3, #0]
 80073be:	b01c      	add	sp, #112	; 0x70
 80073c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80073c4:	b003      	add	sp, #12
 80073c6:	4770      	bx	lr
 80073c8:	2000000c 	.word	0x2000000c
 80073cc:	ffff0208 	.word	0xffff0208

080073d0 <sulp>:
 80073d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073d4:	460f      	mov	r7, r1
 80073d6:	4690      	mov	r8, r2
 80073d8:	f002 feee 	bl	800a1b8 <__ulp>
 80073dc:	4604      	mov	r4, r0
 80073de:	460d      	mov	r5, r1
 80073e0:	f1b8 0f00 	cmp.w	r8, #0
 80073e4:	d011      	beq.n	800740a <sulp+0x3a>
 80073e6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80073ea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	dd0b      	ble.n	800740a <sulp+0x3a>
 80073f2:	2400      	movs	r4, #0
 80073f4:	051b      	lsls	r3, r3, #20
 80073f6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80073fa:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80073fe:	4622      	mov	r2, r4
 8007400:	462b      	mov	r3, r5
 8007402:	f7f9 f869 	bl	80004d8 <__aeabi_dmul>
 8007406:	4604      	mov	r4, r0
 8007408:	460d      	mov	r5, r1
 800740a:	4620      	mov	r0, r4
 800740c:	4629      	mov	r1, r5
 800740e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007412:	0000      	movs	r0, r0
 8007414:	0000      	movs	r0, r0
	...

08007418 <_strtod_l>:
 8007418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800741c:	469b      	mov	fp, r3
 800741e:	2300      	movs	r3, #0
 8007420:	b09f      	sub	sp, #124	; 0x7c
 8007422:	931a      	str	r3, [sp, #104]	; 0x68
 8007424:	4b9e      	ldr	r3, [pc, #632]	; (80076a0 <_strtod_l+0x288>)
 8007426:	4682      	mov	sl, r0
 8007428:	681f      	ldr	r7, [r3, #0]
 800742a:	460e      	mov	r6, r1
 800742c:	4638      	mov	r0, r7
 800742e:	9215      	str	r2, [sp, #84]	; 0x54
 8007430:	f7f8 fe8e 	bl	8000150 <strlen>
 8007434:	f04f 0800 	mov.w	r8, #0
 8007438:	4604      	mov	r4, r0
 800743a:	f04f 0900 	mov.w	r9, #0
 800743e:	9619      	str	r6, [sp, #100]	; 0x64
 8007440:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007442:	781a      	ldrb	r2, [r3, #0]
 8007444:	2a2b      	cmp	r2, #43	; 0x2b
 8007446:	d04c      	beq.n	80074e2 <_strtod_l+0xca>
 8007448:	d83a      	bhi.n	80074c0 <_strtod_l+0xa8>
 800744a:	2a0d      	cmp	r2, #13
 800744c:	d833      	bhi.n	80074b6 <_strtod_l+0x9e>
 800744e:	2a08      	cmp	r2, #8
 8007450:	d833      	bhi.n	80074ba <_strtod_l+0xa2>
 8007452:	2a00      	cmp	r2, #0
 8007454:	d03d      	beq.n	80074d2 <_strtod_l+0xba>
 8007456:	2300      	movs	r3, #0
 8007458:	930a      	str	r3, [sp, #40]	; 0x28
 800745a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800745c:	782b      	ldrb	r3, [r5, #0]
 800745e:	2b30      	cmp	r3, #48	; 0x30
 8007460:	f040 80aa 	bne.w	80075b8 <_strtod_l+0x1a0>
 8007464:	786b      	ldrb	r3, [r5, #1]
 8007466:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800746a:	2b58      	cmp	r3, #88	; 0x58
 800746c:	d166      	bne.n	800753c <_strtod_l+0x124>
 800746e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007470:	4650      	mov	r0, sl
 8007472:	9301      	str	r3, [sp, #4]
 8007474:	ab1a      	add	r3, sp, #104	; 0x68
 8007476:	9300      	str	r3, [sp, #0]
 8007478:	4a8a      	ldr	r2, [pc, #552]	; (80076a4 <_strtod_l+0x28c>)
 800747a:	f8cd b008 	str.w	fp, [sp, #8]
 800747e:	ab1b      	add	r3, sp, #108	; 0x6c
 8007480:	a919      	add	r1, sp, #100	; 0x64
 8007482:	f001 ff97 	bl	80093b4 <__gethex>
 8007486:	f010 0607 	ands.w	r6, r0, #7
 800748a:	4604      	mov	r4, r0
 800748c:	d005      	beq.n	800749a <_strtod_l+0x82>
 800748e:	2e06      	cmp	r6, #6
 8007490:	d129      	bne.n	80074e6 <_strtod_l+0xce>
 8007492:	2300      	movs	r3, #0
 8007494:	3501      	adds	r5, #1
 8007496:	9519      	str	r5, [sp, #100]	; 0x64
 8007498:	930a      	str	r3, [sp, #40]	; 0x28
 800749a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800749c:	2b00      	cmp	r3, #0
 800749e:	f040 858a 	bne.w	8007fb6 <_strtod_l+0xb9e>
 80074a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074a4:	b1d3      	cbz	r3, 80074dc <_strtod_l+0xc4>
 80074a6:	4642      	mov	r2, r8
 80074a8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80074ac:	4610      	mov	r0, r2
 80074ae:	4619      	mov	r1, r3
 80074b0:	b01f      	add	sp, #124	; 0x7c
 80074b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074b6:	2a20      	cmp	r2, #32
 80074b8:	d1cd      	bne.n	8007456 <_strtod_l+0x3e>
 80074ba:	3301      	adds	r3, #1
 80074bc:	9319      	str	r3, [sp, #100]	; 0x64
 80074be:	e7bf      	b.n	8007440 <_strtod_l+0x28>
 80074c0:	2a2d      	cmp	r2, #45	; 0x2d
 80074c2:	d1c8      	bne.n	8007456 <_strtod_l+0x3e>
 80074c4:	2201      	movs	r2, #1
 80074c6:	920a      	str	r2, [sp, #40]	; 0x28
 80074c8:	1c5a      	adds	r2, r3, #1
 80074ca:	9219      	str	r2, [sp, #100]	; 0x64
 80074cc:	785b      	ldrb	r3, [r3, #1]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d1c3      	bne.n	800745a <_strtod_l+0x42>
 80074d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80074d4:	9619      	str	r6, [sp, #100]	; 0x64
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	f040 856b 	bne.w	8007fb2 <_strtod_l+0xb9a>
 80074dc:	4642      	mov	r2, r8
 80074de:	464b      	mov	r3, r9
 80074e0:	e7e4      	b.n	80074ac <_strtod_l+0x94>
 80074e2:	2200      	movs	r2, #0
 80074e4:	e7ef      	b.n	80074c6 <_strtod_l+0xae>
 80074e6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80074e8:	b13a      	cbz	r2, 80074fa <_strtod_l+0xe2>
 80074ea:	2135      	movs	r1, #53	; 0x35
 80074ec:	a81c      	add	r0, sp, #112	; 0x70
 80074ee:	f002 ff67 	bl	800a3c0 <__copybits>
 80074f2:	4650      	mov	r0, sl
 80074f4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80074f6:	f002 fb2f 	bl	8009b58 <_Bfree>
 80074fa:	3e01      	subs	r6, #1
 80074fc:	2e04      	cmp	r6, #4
 80074fe:	d806      	bhi.n	800750e <_strtod_l+0xf6>
 8007500:	e8df f006 	tbb	[pc, r6]
 8007504:	1714030a 	.word	0x1714030a
 8007508:	0a          	.byte	0x0a
 8007509:	00          	.byte	0x00
 800750a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800750e:	0721      	lsls	r1, r4, #28
 8007510:	d5c3      	bpl.n	800749a <_strtod_l+0x82>
 8007512:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8007516:	e7c0      	b.n	800749a <_strtod_l+0x82>
 8007518:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800751a:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800751e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007522:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007526:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800752a:	e7f0      	b.n	800750e <_strtod_l+0xf6>
 800752c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80076a8 <_strtod_l+0x290>
 8007530:	e7ed      	b.n	800750e <_strtod_l+0xf6>
 8007532:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007536:	f04f 38ff 	mov.w	r8, #4294967295
 800753a:	e7e8      	b.n	800750e <_strtod_l+0xf6>
 800753c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800753e:	1c5a      	adds	r2, r3, #1
 8007540:	9219      	str	r2, [sp, #100]	; 0x64
 8007542:	785b      	ldrb	r3, [r3, #1]
 8007544:	2b30      	cmp	r3, #48	; 0x30
 8007546:	d0f9      	beq.n	800753c <_strtod_l+0x124>
 8007548:	2b00      	cmp	r3, #0
 800754a:	d0a6      	beq.n	800749a <_strtod_l+0x82>
 800754c:	2301      	movs	r3, #1
 800754e:	9307      	str	r3, [sp, #28]
 8007550:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007552:	220a      	movs	r2, #10
 8007554:	9308      	str	r3, [sp, #32]
 8007556:	2300      	movs	r3, #0
 8007558:	469b      	mov	fp, r3
 800755a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800755e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8007560:	7805      	ldrb	r5, [r0, #0]
 8007562:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8007566:	b2d9      	uxtb	r1, r3
 8007568:	2909      	cmp	r1, #9
 800756a:	d927      	bls.n	80075bc <_strtod_l+0x1a4>
 800756c:	4622      	mov	r2, r4
 800756e:	4639      	mov	r1, r7
 8007570:	f003 fb67 	bl	800ac42 <strncmp>
 8007574:	2800      	cmp	r0, #0
 8007576:	d033      	beq.n	80075e0 <_strtod_l+0x1c8>
 8007578:	2000      	movs	r0, #0
 800757a:	462a      	mov	r2, r5
 800757c:	465c      	mov	r4, fp
 800757e:	4603      	mov	r3, r0
 8007580:	9004      	str	r0, [sp, #16]
 8007582:	2a65      	cmp	r2, #101	; 0x65
 8007584:	d001      	beq.n	800758a <_strtod_l+0x172>
 8007586:	2a45      	cmp	r2, #69	; 0x45
 8007588:	d114      	bne.n	80075b4 <_strtod_l+0x19c>
 800758a:	b91c      	cbnz	r4, 8007594 <_strtod_l+0x17c>
 800758c:	9a07      	ldr	r2, [sp, #28]
 800758e:	4302      	orrs	r2, r0
 8007590:	d09f      	beq.n	80074d2 <_strtod_l+0xba>
 8007592:	2400      	movs	r4, #0
 8007594:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8007596:	1c72      	adds	r2, r6, #1
 8007598:	9219      	str	r2, [sp, #100]	; 0x64
 800759a:	7872      	ldrb	r2, [r6, #1]
 800759c:	2a2b      	cmp	r2, #43	; 0x2b
 800759e:	d079      	beq.n	8007694 <_strtod_l+0x27c>
 80075a0:	2a2d      	cmp	r2, #45	; 0x2d
 80075a2:	f000 8083 	beq.w	80076ac <_strtod_l+0x294>
 80075a6:	2700      	movs	r7, #0
 80075a8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80075ac:	2909      	cmp	r1, #9
 80075ae:	f240 8083 	bls.w	80076b8 <_strtod_l+0x2a0>
 80075b2:	9619      	str	r6, [sp, #100]	; 0x64
 80075b4:	2500      	movs	r5, #0
 80075b6:	e09f      	b.n	80076f8 <_strtod_l+0x2e0>
 80075b8:	2300      	movs	r3, #0
 80075ba:	e7c8      	b.n	800754e <_strtod_l+0x136>
 80075bc:	f1bb 0f08 	cmp.w	fp, #8
 80075c0:	bfd5      	itete	le
 80075c2:	9906      	ldrle	r1, [sp, #24]
 80075c4:	9905      	ldrgt	r1, [sp, #20]
 80075c6:	fb02 3301 	mlale	r3, r2, r1, r3
 80075ca:	fb02 3301 	mlagt	r3, r2, r1, r3
 80075ce:	f100 0001 	add.w	r0, r0, #1
 80075d2:	bfd4      	ite	le
 80075d4:	9306      	strle	r3, [sp, #24]
 80075d6:	9305      	strgt	r3, [sp, #20]
 80075d8:	f10b 0b01 	add.w	fp, fp, #1
 80075dc:	9019      	str	r0, [sp, #100]	; 0x64
 80075de:	e7be      	b.n	800755e <_strtod_l+0x146>
 80075e0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80075e2:	191a      	adds	r2, r3, r4
 80075e4:	9219      	str	r2, [sp, #100]	; 0x64
 80075e6:	5d1a      	ldrb	r2, [r3, r4]
 80075e8:	f1bb 0f00 	cmp.w	fp, #0
 80075ec:	d036      	beq.n	800765c <_strtod_l+0x244>
 80075ee:	465c      	mov	r4, fp
 80075f0:	9004      	str	r0, [sp, #16]
 80075f2:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80075f6:	2b09      	cmp	r3, #9
 80075f8:	d912      	bls.n	8007620 <_strtod_l+0x208>
 80075fa:	2301      	movs	r3, #1
 80075fc:	e7c1      	b.n	8007582 <_strtod_l+0x16a>
 80075fe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007600:	3001      	adds	r0, #1
 8007602:	1c5a      	adds	r2, r3, #1
 8007604:	9219      	str	r2, [sp, #100]	; 0x64
 8007606:	785a      	ldrb	r2, [r3, #1]
 8007608:	2a30      	cmp	r2, #48	; 0x30
 800760a:	d0f8      	beq.n	80075fe <_strtod_l+0x1e6>
 800760c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007610:	2b08      	cmp	r3, #8
 8007612:	f200 84d5 	bhi.w	8007fc0 <_strtod_l+0xba8>
 8007616:	9004      	str	r0, [sp, #16]
 8007618:	2000      	movs	r0, #0
 800761a:	4604      	mov	r4, r0
 800761c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800761e:	9308      	str	r3, [sp, #32]
 8007620:	3a30      	subs	r2, #48	; 0x30
 8007622:	f100 0301 	add.w	r3, r0, #1
 8007626:	d013      	beq.n	8007650 <_strtod_l+0x238>
 8007628:	9904      	ldr	r1, [sp, #16]
 800762a:	1905      	adds	r5, r0, r4
 800762c:	4419      	add	r1, r3
 800762e:	9104      	str	r1, [sp, #16]
 8007630:	4623      	mov	r3, r4
 8007632:	210a      	movs	r1, #10
 8007634:	42ab      	cmp	r3, r5
 8007636:	d113      	bne.n	8007660 <_strtod_l+0x248>
 8007638:	1823      	adds	r3, r4, r0
 800763a:	2b08      	cmp	r3, #8
 800763c:	f104 0401 	add.w	r4, r4, #1
 8007640:	4404      	add	r4, r0
 8007642:	dc1b      	bgt.n	800767c <_strtod_l+0x264>
 8007644:	230a      	movs	r3, #10
 8007646:	9906      	ldr	r1, [sp, #24]
 8007648:	fb03 2301 	mla	r3, r3, r1, r2
 800764c:	9306      	str	r3, [sp, #24]
 800764e:	2300      	movs	r3, #0
 8007650:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007652:	4618      	mov	r0, r3
 8007654:	1c51      	adds	r1, r2, #1
 8007656:	9119      	str	r1, [sp, #100]	; 0x64
 8007658:	7852      	ldrb	r2, [r2, #1]
 800765a:	e7ca      	b.n	80075f2 <_strtod_l+0x1da>
 800765c:	4658      	mov	r0, fp
 800765e:	e7d3      	b.n	8007608 <_strtod_l+0x1f0>
 8007660:	2b08      	cmp	r3, #8
 8007662:	dc04      	bgt.n	800766e <_strtod_l+0x256>
 8007664:	9f06      	ldr	r7, [sp, #24]
 8007666:	434f      	muls	r7, r1
 8007668:	9706      	str	r7, [sp, #24]
 800766a:	3301      	adds	r3, #1
 800766c:	e7e2      	b.n	8007634 <_strtod_l+0x21c>
 800766e:	1c5f      	adds	r7, r3, #1
 8007670:	2f10      	cmp	r7, #16
 8007672:	bfde      	ittt	le
 8007674:	9f05      	ldrle	r7, [sp, #20]
 8007676:	434f      	mulle	r7, r1
 8007678:	9705      	strle	r7, [sp, #20]
 800767a:	e7f6      	b.n	800766a <_strtod_l+0x252>
 800767c:	2c10      	cmp	r4, #16
 800767e:	bfdf      	itttt	le
 8007680:	230a      	movle	r3, #10
 8007682:	9905      	ldrle	r1, [sp, #20]
 8007684:	fb03 2301 	mlale	r3, r3, r1, r2
 8007688:	9305      	strle	r3, [sp, #20]
 800768a:	e7e0      	b.n	800764e <_strtod_l+0x236>
 800768c:	2300      	movs	r3, #0
 800768e:	9304      	str	r3, [sp, #16]
 8007690:	2301      	movs	r3, #1
 8007692:	e77b      	b.n	800758c <_strtod_l+0x174>
 8007694:	2700      	movs	r7, #0
 8007696:	1cb2      	adds	r2, r6, #2
 8007698:	9219      	str	r2, [sp, #100]	; 0x64
 800769a:	78b2      	ldrb	r2, [r6, #2]
 800769c:	e784      	b.n	80075a8 <_strtod_l+0x190>
 800769e:	bf00      	nop
 80076a0:	0800cdbc 	.word	0x0800cdbc
 80076a4:	0800cb0c 	.word	0x0800cb0c
 80076a8:	7ff00000 	.word	0x7ff00000
 80076ac:	2701      	movs	r7, #1
 80076ae:	e7f2      	b.n	8007696 <_strtod_l+0x27e>
 80076b0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80076b2:	1c51      	adds	r1, r2, #1
 80076b4:	9119      	str	r1, [sp, #100]	; 0x64
 80076b6:	7852      	ldrb	r2, [r2, #1]
 80076b8:	2a30      	cmp	r2, #48	; 0x30
 80076ba:	d0f9      	beq.n	80076b0 <_strtod_l+0x298>
 80076bc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80076c0:	2908      	cmp	r1, #8
 80076c2:	f63f af77 	bhi.w	80075b4 <_strtod_l+0x19c>
 80076c6:	f04f 0e0a 	mov.w	lr, #10
 80076ca:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80076ce:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80076d0:	9209      	str	r2, [sp, #36]	; 0x24
 80076d2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80076d4:	1c51      	adds	r1, r2, #1
 80076d6:	9119      	str	r1, [sp, #100]	; 0x64
 80076d8:	7852      	ldrb	r2, [r2, #1]
 80076da:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80076de:	2d09      	cmp	r5, #9
 80076e0:	d935      	bls.n	800774e <_strtod_l+0x336>
 80076e2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80076e4:	1b49      	subs	r1, r1, r5
 80076e6:	2908      	cmp	r1, #8
 80076e8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80076ec:	dc02      	bgt.n	80076f4 <_strtod_l+0x2dc>
 80076ee:	4565      	cmp	r5, ip
 80076f0:	bfa8      	it	ge
 80076f2:	4665      	movge	r5, ip
 80076f4:	b107      	cbz	r7, 80076f8 <_strtod_l+0x2e0>
 80076f6:	426d      	negs	r5, r5
 80076f8:	2c00      	cmp	r4, #0
 80076fa:	d14c      	bne.n	8007796 <_strtod_l+0x37e>
 80076fc:	9907      	ldr	r1, [sp, #28]
 80076fe:	4301      	orrs	r1, r0
 8007700:	f47f aecb 	bne.w	800749a <_strtod_l+0x82>
 8007704:	2b00      	cmp	r3, #0
 8007706:	f47f aee4 	bne.w	80074d2 <_strtod_l+0xba>
 800770a:	2a69      	cmp	r2, #105	; 0x69
 800770c:	d026      	beq.n	800775c <_strtod_l+0x344>
 800770e:	dc23      	bgt.n	8007758 <_strtod_l+0x340>
 8007710:	2a49      	cmp	r2, #73	; 0x49
 8007712:	d023      	beq.n	800775c <_strtod_l+0x344>
 8007714:	2a4e      	cmp	r2, #78	; 0x4e
 8007716:	f47f aedc 	bne.w	80074d2 <_strtod_l+0xba>
 800771a:	499d      	ldr	r1, [pc, #628]	; (8007990 <_strtod_l+0x578>)
 800771c:	a819      	add	r0, sp, #100	; 0x64
 800771e:	f002 f897 	bl	8009850 <__match>
 8007722:	2800      	cmp	r0, #0
 8007724:	f43f aed5 	beq.w	80074d2 <_strtod_l+0xba>
 8007728:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800772a:	781b      	ldrb	r3, [r3, #0]
 800772c:	2b28      	cmp	r3, #40	; 0x28
 800772e:	d12c      	bne.n	800778a <_strtod_l+0x372>
 8007730:	4998      	ldr	r1, [pc, #608]	; (8007994 <_strtod_l+0x57c>)
 8007732:	aa1c      	add	r2, sp, #112	; 0x70
 8007734:	a819      	add	r0, sp, #100	; 0x64
 8007736:	f002 f89f 	bl	8009878 <__hexnan>
 800773a:	2805      	cmp	r0, #5
 800773c:	d125      	bne.n	800778a <_strtod_l+0x372>
 800773e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007740:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8007744:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007748:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800774c:	e6a5      	b.n	800749a <_strtod_l+0x82>
 800774e:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8007752:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8007756:	e7bc      	b.n	80076d2 <_strtod_l+0x2ba>
 8007758:	2a6e      	cmp	r2, #110	; 0x6e
 800775a:	e7dc      	b.n	8007716 <_strtod_l+0x2fe>
 800775c:	498e      	ldr	r1, [pc, #568]	; (8007998 <_strtod_l+0x580>)
 800775e:	a819      	add	r0, sp, #100	; 0x64
 8007760:	f002 f876 	bl	8009850 <__match>
 8007764:	2800      	cmp	r0, #0
 8007766:	f43f aeb4 	beq.w	80074d2 <_strtod_l+0xba>
 800776a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800776c:	498b      	ldr	r1, [pc, #556]	; (800799c <_strtod_l+0x584>)
 800776e:	3b01      	subs	r3, #1
 8007770:	a819      	add	r0, sp, #100	; 0x64
 8007772:	9319      	str	r3, [sp, #100]	; 0x64
 8007774:	f002 f86c 	bl	8009850 <__match>
 8007778:	b910      	cbnz	r0, 8007780 <_strtod_l+0x368>
 800777a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800777c:	3301      	adds	r3, #1
 800777e:	9319      	str	r3, [sp, #100]	; 0x64
 8007780:	f04f 0800 	mov.w	r8, #0
 8007784:	f8df 9218 	ldr.w	r9, [pc, #536]	; 80079a0 <_strtod_l+0x588>
 8007788:	e687      	b.n	800749a <_strtod_l+0x82>
 800778a:	4886      	ldr	r0, [pc, #536]	; (80079a4 <_strtod_l+0x58c>)
 800778c:	f003 fa00 	bl	800ab90 <nan>
 8007790:	4680      	mov	r8, r0
 8007792:	4689      	mov	r9, r1
 8007794:	e681      	b.n	800749a <_strtod_l+0x82>
 8007796:	9b04      	ldr	r3, [sp, #16]
 8007798:	f1bb 0f00 	cmp.w	fp, #0
 800779c:	bf08      	it	eq
 800779e:	46a3      	moveq	fp, r4
 80077a0:	1aeb      	subs	r3, r5, r3
 80077a2:	2c10      	cmp	r4, #16
 80077a4:	9806      	ldr	r0, [sp, #24]
 80077a6:	4626      	mov	r6, r4
 80077a8:	9307      	str	r3, [sp, #28]
 80077aa:	bfa8      	it	ge
 80077ac:	2610      	movge	r6, #16
 80077ae:	f7f8 fe19 	bl	80003e4 <__aeabi_ui2d>
 80077b2:	2c09      	cmp	r4, #9
 80077b4:	4680      	mov	r8, r0
 80077b6:	4689      	mov	r9, r1
 80077b8:	dd13      	ble.n	80077e2 <_strtod_l+0x3ca>
 80077ba:	4b7b      	ldr	r3, [pc, #492]	; (80079a8 <_strtod_l+0x590>)
 80077bc:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80077c0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80077c4:	f7f8 fe88 	bl	80004d8 <__aeabi_dmul>
 80077c8:	4680      	mov	r8, r0
 80077ca:	9805      	ldr	r0, [sp, #20]
 80077cc:	4689      	mov	r9, r1
 80077ce:	f7f8 fe09 	bl	80003e4 <__aeabi_ui2d>
 80077d2:	4602      	mov	r2, r0
 80077d4:	460b      	mov	r3, r1
 80077d6:	4640      	mov	r0, r8
 80077d8:	4649      	mov	r1, r9
 80077da:	f7f8 fcc7 	bl	800016c <__adddf3>
 80077de:	4680      	mov	r8, r0
 80077e0:	4689      	mov	r9, r1
 80077e2:	2c0f      	cmp	r4, #15
 80077e4:	dc36      	bgt.n	8007854 <_strtod_l+0x43c>
 80077e6:	9b07      	ldr	r3, [sp, #28]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	f43f ae56 	beq.w	800749a <_strtod_l+0x82>
 80077ee:	dd22      	ble.n	8007836 <_strtod_l+0x41e>
 80077f0:	2b16      	cmp	r3, #22
 80077f2:	dc09      	bgt.n	8007808 <_strtod_l+0x3f0>
 80077f4:	496c      	ldr	r1, [pc, #432]	; (80079a8 <_strtod_l+0x590>)
 80077f6:	4642      	mov	r2, r8
 80077f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80077fc:	464b      	mov	r3, r9
 80077fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007802:	f7f8 fe69 	bl	80004d8 <__aeabi_dmul>
 8007806:	e7c3      	b.n	8007790 <_strtod_l+0x378>
 8007808:	9a07      	ldr	r2, [sp, #28]
 800780a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800780e:	4293      	cmp	r3, r2
 8007810:	db20      	blt.n	8007854 <_strtod_l+0x43c>
 8007812:	4d65      	ldr	r5, [pc, #404]	; (80079a8 <_strtod_l+0x590>)
 8007814:	f1c4 040f 	rsb	r4, r4, #15
 8007818:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800781c:	4642      	mov	r2, r8
 800781e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007822:	464b      	mov	r3, r9
 8007824:	f7f8 fe58 	bl	80004d8 <__aeabi_dmul>
 8007828:	9b07      	ldr	r3, [sp, #28]
 800782a:	1b1c      	subs	r4, r3, r4
 800782c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8007830:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007834:	e7e5      	b.n	8007802 <_strtod_l+0x3ea>
 8007836:	9b07      	ldr	r3, [sp, #28]
 8007838:	3316      	adds	r3, #22
 800783a:	db0b      	blt.n	8007854 <_strtod_l+0x43c>
 800783c:	9b04      	ldr	r3, [sp, #16]
 800783e:	4640      	mov	r0, r8
 8007840:	1b5d      	subs	r5, r3, r5
 8007842:	4b59      	ldr	r3, [pc, #356]	; (80079a8 <_strtod_l+0x590>)
 8007844:	4649      	mov	r1, r9
 8007846:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800784a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800784e:	f7f8 ff6d 	bl	800072c <__aeabi_ddiv>
 8007852:	e79d      	b.n	8007790 <_strtod_l+0x378>
 8007854:	9b07      	ldr	r3, [sp, #28]
 8007856:	1ba6      	subs	r6, r4, r6
 8007858:	441e      	add	r6, r3
 800785a:	2e00      	cmp	r6, #0
 800785c:	dd74      	ble.n	8007948 <_strtod_l+0x530>
 800785e:	f016 030f 	ands.w	r3, r6, #15
 8007862:	d00a      	beq.n	800787a <_strtod_l+0x462>
 8007864:	4950      	ldr	r1, [pc, #320]	; (80079a8 <_strtod_l+0x590>)
 8007866:	4642      	mov	r2, r8
 8007868:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800786c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007870:	464b      	mov	r3, r9
 8007872:	f7f8 fe31 	bl	80004d8 <__aeabi_dmul>
 8007876:	4680      	mov	r8, r0
 8007878:	4689      	mov	r9, r1
 800787a:	f036 060f 	bics.w	r6, r6, #15
 800787e:	d052      	beq.n	8007926 <_strtod_l+0x50e>
 8007880:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8007884:	dd27      	ble.n	80078d6 <_strtod_l+0x4be>
 8007886:	f04f 0b00 	mov.w	fp, #0
 800788a:	f8cd b010 	str.w	fp, [sp, #16]
 800788e:	f8cd b020 	str.w	fp, [sp, #32]
 8007892:	f8cd b018 	str.w	fp, [sp, #24]
 8007896:	2322      	movs	r3, #34	; 0x22
 8007898:	f04f 0800 	mov.w	r8, #0
 800789c:	f8df 9100 	ldr.w	r9, [pc, #256]	; 80079a0 <_strtod_l+0x588>
 80078a0:	f8ca 3000 	str.w	r3, [sl]
 80078a4:	9b08      	ldr	r3, [sp, #32]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	f43f adf7 	beq.w	800749a <_strtod_l+0x82>
 80078ac:	4650      	mov	r0, sl
 80078ae:	991a      	ldr	r1, [sp, #104]	; 0x68
 80078b0:	f002 f952 	bl	8009b58 <_Bfree>
 80078b4:	4650      	mov	r0, sl
 80078b6:	9906      	ldr	r1, [sp, #24]
 80078b8:	f002 f94e 	bl	8009b58 <_Bfree>
 80078bc:	4650      	mov	r0, sl
 80078be:	9904      	ldr	r1, [sp, #16]
 80078c0:	f002 f94a 	bl	8009b58 <_Bfree>
 80078c4:	4650      	mov	r0, sl
 80078c6:	9908      	ldr	r1, [sp, #32]
 80078c8:	f002 f946 	bl	8009b58 <_Bfree>
 80078cc:	4659      	mov	r1, fp
 80078ce:	4650      	mov	r0, sl
 80078d0:	f002 f942 	bl	8009b58 <_Bfree>
 80078d4:	e5e1      	b.n	800749a <_strtod_l+0x82>
 80078d6:	4b35      	ldr	r3, [pc, #212]	; (80079ac <_strtod_l+0x594>)
 80078d8:	4640      	mov	r0, r8
 80078da:	9305      	str	r3, [sp, #20]
 80078dc:	2300      	movs	r3, #0
 80078de:	4649      	mov	r1, r9
 80078e0:	461f      	mov	r7, r3
 80078e2:	1136      	asrs	r6, r6, #4
 80078e4:	2e01      	cmp	r6, #1
 80078e6:	dc21      	bgt.n	800792c <_strtod_l+0x514>
 80078e8:	b10b      	cbz	r3, 80078ee <_strtod_l+0x4d6>
 80078ea:	4680      	mov	r8, r0
 80078ec:	4689      	mov	r9, r1
 80078ee:	4b2f      	ldr	r3, [pc, #188]	; (80079ac <_strtod_l+0x594>)
 80078f0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80078f4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80078f8:	4642      	mov	r2, r8
 80078fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80078fe:	464b      	mov	r3, r9
 8007900:	f7f8 fdea 	bl	80004d8 <__aeabi_dmul>
 8007904:	4b26      	ldr	r3, [pc, #152]	; (80079a0 <_strtod_l+0x588>)
 8007906:	460a      	mov	r2, r1
 8007908:	400b      	ands	r3, r1
 800790a:	4929      	ldr	r1, [pc, #164]	; (80079b0 <_strtod_l+0x598>)
 800790c:	4680      	mov	r8, r0
 800790e:	428b      	cmp	r3, r1
 8007910:	d8b9      	bhi.n	8007886 <_strtod_l+0x46e>
 8007912:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007916:	428b      	cmp	r3, r1
 8007918:	bf86      	itte	hi
 800791a:	f04f 38ff 	movhi.w	r8, #4294967295
 800791e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80079b4 <_strtod_l+0x59c>
 8007922:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8007926:	2300      	movs	r3, #0
 8007928:	9305      	str	r3, [sp, #20]
 800792a:	e07f      	b.n	8007a2c <_strtod_l+0x614>
 800792c:	07f2      	lsls	r2, r6, #31
 800792e:	d505      	bpl.n	800793c <_strtod_l+0x524>
 8007930:	9b05      	ldr	r3, [sp, #20]
 8007932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007936:	f7f8 fdcf 	bl	80004d8 <__aeabi_dmul>
 800793a:	2301      	movs	r3, #1
 800793c:	9a05      	ldr	r2, [sp, #20]
 800793e:	3701      	adds	r7, #1
 8007940:	3208      	adds	r2, #8
 8007942:	1076      	asrs	r6, r6, #1
 8007944:	9205      	str	r2, [sp, #20]
 8007946:	e7cd      	b.n	80078e4 <_strtod_l+0x4cc>
 8007948:	d0ed      	beq.n	8007926 <_strtod_l+0x50e>
 800794a:	4276      	negs	r6, r6
 800794c:	f016 020f 	ands.w	r2, r6, #15
 8007950:	d00a      	beq.n	8007968 <_strtod_l+0x550>
 8007952:	4b15      	ldr	r3, [pc, #84]	; (80079a8 <_strtod_l+0x590>)
 8007954:	4640      	mov	r0, r8
 8007956:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800795a:	4649      	mov	r1, r9
 800795c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007960:	f7f8 fee4 	bl	800072c <__aeabi_ddiv>
 8007964:	4680      	mov	r8, r0
 8007966:	4689      	mov	r9, r1
 8007968:	1136      	asrs	r6, r6, #4
 800796a:	d0dc      	beq.n	8007926 <_strtod_l+0x50e>
 800796c:	2e1f      	cmp	r6, #31
 800796e:	dd23      	ble.n	80079b8 <_strtod_l+0x5a0>
 8007970:	f04f 0b00 	mov.w	fp, #0
 8007974:	f8cd b010 	str.w	fp, [sp, #16]
 8007978:	f8cd b020 	str.w	fp, [sp, #32]
 800797c:	f8cd b018 	str.w	fp, [sp, #24]
 8007980:	2322      	movs	r3, #34	; 0x22
 8007982:	f04f 0800 	mov.w	r8, #0
 8007986:	f04f 0900 	mov.w	r9, #0
 800798a:	f8ca 3000 	str.w	r3, [sl]
 800798e:	e789      	b.n	80078a4 <_strtod_l+0x48c>
 8007990:	0800cadd 	.word	0x0800cadd
 8007994:	0800cb20 	.word	0x0800cb20
 8007998:	0800cad5 	.word	0x0800cad5
 800799c:	0800cc64 	.word	0x0800cc64
 80079a0:	7ff00000 	.word	0x7ff00000
 80079a4:	0800cf78 	.word	0x0800cf78
 80079a8:	0800ce58 	.word	0x0800ce58
 80079ac:	0800ce30 	.word	0x0800ce30
 80079b0:	7ca00000 	.word	0x7ca00000
 80079b4:	7fefffff 	.word	0x7fefffff
 80079b8:	f016 0310 	ands.w	r3, r6, #16
 80079bc:	bf18      	it	ne
 80079be:	236a      	movne	r3, #106	; 0x6a
 80079c0:	4640      	mov	r0, r8
 80079c2:	9305      	str	r3, [sp, #20]
 80079c4:	4649      	mov	r1, r9
 80079c6:	2300      	movs	r3, #0
 80079c8:	4fb0      	ldr	r7, [pc, #704]	; (8007c8c <_strtod_l+0x874>)
 80079ca:	07f2      	lsls	r2, r6, #31
 80079cc:	d504      	bpl.n	80079d8 <_strtod_l+0x5c0>
 80079ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079d2:	f7f8 fd81 	bl	80004d8 <__aeabi_dmul>
 80079d6:	2301      	movs	r3, #1
 80079d8:	1076      	asrs	r6, r6, #1
 80079da:	f107 0708 	add.w	r7, r7, #8
 80079de:	d1f4      	bne.n	80079ca <_strtod_l+0x5b2>
 80079e0:	b10b      	cbz	r3, 80079e6 <_strtod_l+0x5ce>
 80079e2:	4680      	mov	r8, r0
 80079e4:	4689      	mov	r9, r1
 80079e6:	9b05      	ldr	r3, [sp, #20]
 80079e8:	b1c3      	cbz	r3, 8007a1c <_strtod_l+0x604>
 80079ea:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80079ee:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	4649      	mov	r1, r9
 80079f6:	dd11      	ble.n	8007a1c <_strtod_l+0x604>
 80079f8:	2b1f      	cmp	r3, #31
 80079fa:	f340 8127 	ble.w	8007c4c <_strtod_l+0x834>
 80079fe:	2b34      	cmp	r3, #52	; 0x34
 8007a00:	bfd8      	it	le
 8007a02:	f04f 33ff 	movle.w	r3, #4294967295
 8007a06:	f04f 0800 	mov.w	r8, #0
 8007a0a:	bfcf      	iteee	gt
 8007a0c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007a10:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007a14:	fa03 f202 	lslle.w	r2, r3, r2
 8007a18:	ea02 0901 	andle.w	r9, r2, r1
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	2300      	movs	r3, #0
 8007a20:	4640      	mov	r0, r8
 8007a22:	4649      	mov	r1, r9
 8007a24:	f7f8 ffc0 	bl	80009a8 <__aeabi_dcmpeq>
 8007a28:	2800      	cmp	r0, #0
 8007a2a:	d1a1      	bne.n	8007970 <_strtod_l+0x558>
 8007a2c:	9b06      	ldr	r3, [sp, #24]
 8007a2e:	465a      	mov	r2, fp
 8007a30:	9300      	str	r3, [sp, #0]
 8007a32:	4650      	mov	r0, sl
 8007a34:	4623      	mov	r3, r4
 8007a36:	9908      	ldr	r1, [sp, #32]
 8007a38:	f002 f8f6 	bl	8009c28 <__s2b>
 8007a3c:	9008      	str	r0, [sp, #32]
 8007a3e:	2800      	cmp	r0, #0
 8007a40:	f43f af21 	beq.w	8007886 <_strtod_l+0x46e>
 8007a44:	9b04      	ldr	r3, [sp, #16]
 8007a46:	f04f 0b00 	mov.w	fp, #0
 8007a4a:	1b5d      	subs	r5, r3, r5
 8007a4c:	9b07      	ldr	r3, [sp, #28]
 8007a4e:	f8cd b010 	str.w	fp, [sp, #16]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	bfb4      	ite	lt
 8007a56:	462b      	movlt	r3, r5
 8007a58:	2300      	movge	r3, #0
 8007a5a:	930e      	str	r3, [sp, #56]	; 0x38
 8007a5c:	9b07      	ldr	r3, [sp, #28]
 8007a5e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007a62:	9314      	str	r3, [sp, #80]	; 0x50
 8007a64:	9b08      	ldr	r3, [sp, #32]
 8007a66:	4650      	mov	r0, sl
 8007a68:	6859      	ldr	r1, [r3, #4]
 8007a6a:	f002 f835 	bl	8009ad8 <_Balloc>
 8007a6e:	9006      	str	r0, [sp, #24]
 8007a70:	2800      	cmp	r0, #0
 8007a72:	f43f af10 	beq.w	8007896 <_strtod_l+0x47e>
 8007a76:	9b08      	ldr	r3, [sp, #32]
 8007a78:	300c      	adds	r0, #12
 8007a7a:	691a      	ldr	r2, [r3, #16]
 8007a7c:	f103 010c 	add.w	r1, r3, #12
 8007a80:	3202      	adds	r2, #2
 8007a82:	0092      	lsls	r2, r2, #2
 8007a84:	f7fe fd6e 	bl	8006564 <memcpy>
 8007a88:	ab1c      	add	r3, sp, #112	; 0x70
 8007a8a:	9301      	str	r3, [sp, #4]
 8007a8c:	ab1b      	add	r3, sp, #108	; 0x6c
 8007a8e:	9300      	str	r3, [sp, #0]
 8007a90:	4642      	mov	r2, r8
 8007a92:	464b      	mov	r3, r9
 8007a94:	4650      	mov	r0, sl
 8007a96:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8007a9a:	f002 fc07 	bl	800a2ac <__d2b>
 8007a9e:	901a      	str	r0, [sp, #104]	; 0x68
 8007aa0:	2800      	cmp	r0, #0
 8007aa2:	f43f aef8 	beq.w	8007896 <_strtod_l+0x47e>
 8007aa6:	2101      	movs	r1, #1
 8007aa8:	4650      	mov	r0, sl
 8007aaa:	f002 f955 	bl	8009d58 <__i2b>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	9004      	str	r0, [sp, #16]
 8007ab2:	2800      	cmp	r0, #0
 8007ab4:	f43f aeef 	beq.w	8007896 <_strtod_l+0x47e>
 8007ab8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8007aba:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007abc:	2d00      	cmp	r5, #0
 8007abe:	bfab      	itete	ge
 8007ac0:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8007ac2:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8007ac4:	18ee      	addge	r6, r5, r3
 8007ac6:	1b5c      	sublt	r4, r3, r5
 8007ac8:	9b05      	ldr	r3, [sp, #20]
 8007aca:	bfa8      	it	ge
 8007acc:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8007ace:	eba5 0503 	sub.w	r5, r5, r3
 8007ad2:	4415      	add	r5, r2
 8007ad4:	4b6e      	ldr	r3, [pc, #440]	; (8007c90 <_strtod_l+0x878>)
 8007ad6:	f105 35ff 	add.w	r5, r5, #4294967295
 8007ada:	bfb8      	it	lt
 8007adc:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8007ade:	429d      	cmp	r5, r3
 8007ae0:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007ae4:	f280 80c4 	bge.w	8007c70 <_strtod_l+0x858>
 8007ae8:	1b5b      	subs	r3, r3, r5
 8007aea:	2b1f      	cmp	r3, #31
 8007aec:	f04f 0701 	mov.w	r7, #1
 8007af0:	eba2 0203 	sub.w	r2, r2, r3
 8007af4:	f300 80b1 	bgt.w	8007c5a <_strtod_l+0x842>
 8007af8:	2500      	movs	r5, #0
 8007afa:	fa07 f303 	lsl.w	r3, r7, r3
 8007afe:	930f      	str	r3, [sp, #60]	; 0x3c
 8007b00:	18b7      	adds	r7, r6, r2
 8007b02:	9b05      	ldr	r3, [sp, #20]
 8007b04:	42be      	cmp	r6, r7
 8007b06:	4414      	add	r4, r2
 8007b08:	441c      	add	r4, r3
 8007b0a:	4633      	mov	r3, r6
 8007b0c:	bfa8      	it	ge
 8007b0e:	463b      	movge	r3, r7
 8007b10:	42a3      	cmp	r3, r4
 8007b12:	bfa8      	it	ge
 8007b14:	4623      	movge	r3, r4
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	bfc2      	ittt	gt
 8007b1a:	1aff      	subgt	r7, r7, r3
 8007b1c:	1ae4      	subgt	r4, r4, r3
 8007b1e:	1af6      	subgt	r6, r6, r3
 8007b20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	dd17      	ble.n	8007b56 <_strtod_l+0x73e>
 8007b26:	461a      	mov	r2, r3
 8007b28:	4650      	mov	r0, sl
 8007b2a:	9904      	ldr	r1, [sp, #16]
 8007b2c:	f002 f9d2 	bl	8009ed4 <__pow5mult>
 8007b30:	9004      	str	r0, [sp, #16]
 8007b32:	2800      	cmp	r0, #0
 8007b34:	f43f aeaf 	beq.w	8007896 <_strtod_l+0x47e>
 8007b38:	4601      	mov	r1, r0
 8007b3a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007b3c:	4650      	mov	r0, sl
 8007b3e:	f002 f921 	bl	8009d84 <__multiply>
 8007b42:	9009      	str	r0, [sp, #36]	; 0x24
 8007b44:	2800      	cmp	r0, #0
 8007b46:	f43f aea6 	beq.w	8007896 <_strtod_l+0x47e>
 8007b4a:	4650      	mov	r0, sl
 8007b4c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007b4e:	f002 f803 	bl	8009b58 <_Bfree>
 8007b52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b54:	931a      	str	r3, [sp, #104]	; 0x68
 8007b56:	2f00      	cmp	r7, #0
 8007b58:	f300 808e 	bgt.w	8007c78 <_strtod_l+0x860>
 8007b5c:	9b07      	ldr	r3, [sp, #28]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	dd08      	ble.n	8007b74 <_strtod_l+0x75c>
 8007b62:	4650      	mov	r0, sl
 8007b64:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007b66:	9906      	ldr	r1, [sp, #24]
 8007b68:	f002 f9b4 	bl	8009ed4 <__pow5mult>
 8007b6c:	9006      	str	r0, [sp, #24]
 8007b6e:	2800      	cmp	r0, #0
 8007b70:	f43f ae91 	beq.w	8007896 <_strtod_l+0x47e>
 8007b74:	2c00      	cmp	r4, #0
 8007b76:	dd08      	ble.n	8007b8a <_strtod_l+0x772>
 8007b78:	4622      	mov	r2, r4
 8007b7a:	4650      	mov	r0, sl
 8007b7c:	9906      	ldr	r1, [sp, #24]
 8007b7e:	f002 fa03 	bl	8009f88 <__lshift>
 8007b82:	9006      	str	r0, [sp, #24]
 8007b84:	2800      	cmp	r0, #0
 8007b86:	f43f ae86 	beq.w	8007896 <_strtod_l+0x47e>
 8007b8a:	2e00      	cmp	r6, #0
 8007b8c:	dd08      	ble.n	8007ba0 <_strtod_l+0x788>
 8007b8e:	4632      	mov	r2, r6
 8007b90:	4650      	mov	r0, sl
 8007b92:	9904      	ldr	r1, [sp, #16]
 8007b94:	f002 f9f8 	bl	8009f88 <__lshift>
 8007b98:	9004      	str	r0, [sp, #16]
 8007b9a:	2800      	cmp	r0, #0
 8007b9c:	f43f ae7b 	beq.w	8007896 <_strtod_l+0x47e>
 8007ba0:	4650      	mov	r0, sl
 8007ba2:	9a06      	ldr	r2, [sp, #24]
 8007ba4:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007ba6:	f002 fa7b 	bl	800a0a0 <__mdiff>
 8007baa:	4683      	mov	fp, r0
 8007bac:	2800      	cmp	r0, #0
 8007bae:	f43f ae72 	beq.w	8007896 <_strtod_l+0x47e>
 8007bb2:	2400      	movs	r4, #0
 8007bb4:	68c3      	ldr	r3, [r0, #12]
 8007bb6:	9904      	ldr	r1, [sp, #16]
 8007bb8:	60c4      	str	r4, [r0, #12]
 8007bba:	930b      	str	r3, [sp, #44]	; 0x2c
 8007bbc:	f002 fa54 	bl	800a068 <__mcmp>
 8007bc0:	42a0      	cmp	r0, r4
 8007bc2:	da6b      	bge.n	8007c9c <_strtod_l+0x884>
 8007bc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bc6:	ea53 0308 	orrs.w	r3, r3, r8
 8007bca:	f040 8091 	bne.w	8007cf0 <_strtod_l+0x8d8>
 8007bce:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	f040 808c 	bne.w	8007cf0 <_strtod_l+0x8d8>
 8007bd8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007bdc:	0d1b      	lsrs	r3, r3, #20
 8007bde:	051b      	lsls	r3, r3, #20
 8007be0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007be4:	f240 8084 	bls.w	8007cf0 <_strtod_l+0x8d8>
 8007be8:	f8db 3014 	ldr.w	r3, [fp, #20]
 8007bec:	b91b      	cbnz	r3, 8007bf6 <_strtod_l+0x7de>
 8007bee:	f8db 3010 	ldr.w	r3, [fp, #16]
 8007bf2:	2b01      	cmp	r3, #1
 8007bf4:	dd7c      	ble.n	8007cf0 <_strtod_l+0x8d8>
 8007bf6:	4659      	mov	r1, fp
 8007bf8:	2201      	movs	r2, #1
 8007bfa:	4650      	mov	r0, sl
 8007bfc:	f002 f9c4 	bl	8009f88 <__lshift>
 8007c00:	9904      	ldr	r1, [sp, #16]
 8007c02:	4683      	mov	fp, r0
 8007c04:	f002 fa30 	bl	800a068 <__mcmp>
 8007c08:	2800      	cmp	r0, #0
 8007c0a:	dd71      	ble.n	8007cf0 <_strtod_l+0x8d8>
 8007c0c:	9905      	ldr	r1, [sp, #20]
 8007c0e:	464b      	mov	r3, r9
 8007c10:	4a20      	ldr	r2, [pc, #128]	; (8007c94 <_strtod_l+0x87c>)
 8007c12:	2900      	cmp	r1, #0
 8007c14:	f000 808c 	beq.w	8007d30 <_strtod_l+0x918>
 8007c18:	ea02 0109 	and.w	r1, r2, r9
 8007c1c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007c20:	f300 8086 	bgt.w	8007d30 <_strtod_l+0x918>
 8007c24:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007c28:	f77f aeaa 	ble.w	8007980 <_strtod_l+0x568>
 8007c2c:	4640      	mov	r0, r8
 8007c2e:	4649      	mov	r1, r9
 8007c30:	4b19      	ldr	r3, [pc, #100]	; (8007c98 <_strtod_l+0x880>)
 8007c32:	2200      	movs	r2, #0
 8007c34:	f7f8 fc50 	bl	80004d8 <__aeabi_dmul>
 8007c38:	460b      	mov	r3, r1
 8007c3a:	4303      	orrs	r3, r0
 8007c3c:	bf08      	it	eq
 8007c3e:	2322      	moveq	r3, #34	; 0x22
 8007c40:	4680      	mov	r8, r0
 8007c42:	4689      	mov	r9, r1
 8007c44:	bf08      	it	eq
 8007c46:	f8ca 3000 	streq.w	r3, [sl]
 8007c4a:	e62f      	b.n	80078ac <_strtod_l+0x494>
 8007c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8007c50:	fa02 f303 	lsl.w	r3, r2, r3
 8007c54:	ea03 0808 	and.w	r8, r3, r8
 8007c58:	e6e0      	b.n	8007a1c <_strtod_l+0x604>
 8007c5a:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8007c5e:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8007c62:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8007c66:	35e2      	adds	r5, #226	; 0xe2
 8007c68:	fa07 f505 	lsl.w	r5, r7, r5
 8007c6c:	970f      	str	r7, [sp, #60]	; 0x3c
 8007c6e:	e747      	b.n	8007b00 <_strtod_l+0x6e8>
 8007c70:	2301      	movs	r3, #1
 8007c72:	2500      	movs	r5, #0
 8007c74:	930f      	str	r3, [sp, #60]	; 0x3c
 8007c76:	e743      	b.n	8007b00 <_strtod_l+0x6e8>
 8007c78:	463a      	mov	r2, r7
 8007c7a:	4650      	mov	r0, sl
 8007c7c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007c7e:	f002 f983 	bl	8009f88 <__lshift>
 8007c82:	901a      	str	r0, [sp, #104]	; 0x68
 8007c84:	2800      	cmp	r0, #0
 8007c86:	f47f af69 	bne.w	8007b5c <_strtod_l+0x744>
 8007c8a:	e604      	b.n	8007896 <_strtod_l+0x47e>
 8007c8c:	0800cb38 	.word	0x0800cb38
 8007c90:	fffffc02 	.word	0xfffffc02
 8007c94:	7ff00000 	.word	0x7ff00000
 8007c98:	39500000 	.word	0x39500000
 8007c9c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007ca0:	d165      	bne.n	8007d6e <_strtod_l+0x956>
 8007ca2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007ca4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007ca8:	b35a      	cbz	r2, 8007d02 <_strtod_l+0x8ea>
 8007caa:	4a99      	ldr	r2, [pc, #612]	; (8007f10 <_strtod_l+0xaf8>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d12b      	bne.n	8007d08 <_strtod_l+0x8f0>
 8007cb0:	9b05      	ldr	r3, [sp, #20]
 8007cb2:	4641      	mov	r1, r8
 8007cb4:	b303      	cbz	r3, 8007cf8 <_strtod_l+0x8e0>
 8007cb6:	464a      	mov	r2, r9
 8007cb8:	4b96      	ldr	r3, [pc, #600]	; (8007f14 <_strtod_l+0xafc>)
 8007cba:	4013      	ands	r3, r2
 8007cbc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8007cc4:	d81b      	bhi.n	8007cfe <_strtod_l+0x8e6>
 8007cc6:	0d1b      	lsrs	r3, r3, #20
 8007cc8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8007cd0:	4299      	cmp	r1, r3
 8007cd2:	d119      	bne.n	8007d08 <_strtod_l+0x8f0>
 8007cd4:	4b90      	ldr	r3, [pc, #576]	; (8007f18 <_strtod_l+0xb00>)
 8007cd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	d102      	bne.n	8007ce2 <_strtod_l+0x8ca>
 8007cdc:	3101      	adds	r1, #1
 8007cde:	f43f adda 	beq.w	8007896 <_strtod_l+0x47e>
 8007ce2:	f04f 0800 	mov.w	r8, #0
 8007ce6:	4b8b      	ldr	r3, [pc, #556]	; (8007f14 <_strtod_l+0xafc>)
 8007ce8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007cea:	401a      	ands	r2, r3
 8007cec:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8007cf0:	9b05      	ldr	r3, [sp, #20]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d19a      	bne.n	8007c2c <_strtod_l+0x814>
 8007cf6:	e5d9      	b.n	80078ac <_strtod_l+0x494>
 8007cf8:	f04f 33ff 	mov.w	r3, #4294967295
 8007cfc:	e7e8      	b.n	8007cd0 <_strtod_l+0x8b8>
 8007cfe:	4613      	mov	r3, r2
 8007d00:	e7e6      	b.n	8007cd0 <_strtod_l+0x8b8>
 8007d02:	ea53 0308 	orrs.w	r3, r3, r8
 8007d06:	d081      	beq.n	8007c0c <_strtod_l+0x7f4>
 8007d08:	b1e5      	cbz	r5, 8007d44 <_strtod_l+0x92c>
 8007d0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d0c:	421d      	tst	r5, r3
 8007d0e:	d0ef      	beq.n	8007cf0 <_strtod_l+0x8d8>
 8007d10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d12:	4640      	mov	r0, r8
 8007d14:	4649      	mov	r1, r9
 8007d16:	9a05      	ldr	r2, [sp, #20]
 8007d18:	b1c3      	cbz	r3, 8007d4c <_strtod_l+0x934>
 8007d1a:	f7ff fb59 	bl	80073d0 <sulp>
 8007d1e:	4602      	mov	r2, r0
 8007d20:	460b      	mov	r3, r1
 8007d22:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007d26:	f7f8 fa21 	bl	800016c <__adddf3>
 8007d2a:	4680      	mov	r8, r0
 8007d2c:	4689      	mov	r9, r1
 8007d2e:	e7df      	b.n	8007cf0 <_strtod_l+0x8d8>
 8007d30:	4013      	ands	r3, r2
 8007d32:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007d36:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8007d3a:	f04f 38ff 	mov.w	r8, #4294967295
 8007d3e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007d42:	e7d5      	b.n	8007cf0 <_strtod_l+0x8d8>
 8007d44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007d46:	ea13 0f08 	tst.w	r3, r8
 8007d4a:	e7e0      	b.n	8007d0e <_strtod_l+0x8f6>
 8007d4c:	f7ff fb40 	bl	80073d0 <sulp>
 8007d50:	4602      	mov	r2, r0
 8007d52:	460b      	mov	r3, r1
 8007d54:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007d58:	f7f8 fa06 	bl	8000168 <__aeabi_dsub>
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	2300      	movs	r3, #0
 8007d60:	4680      	mov	r8, r0
 8007d62:	4689      	mov	r9, r1
 8007d64:	f7f8 fe20 	bl	80009a8 <__aeabi_dcmpeq>
 8007d68:	2800      	cmp	r0, #0
 8007d6a:	d0c1      	beq.n	8007cf0 <_strtod_l+0x8d8>
 8007d6c:	e608      	b.n	8007980 <_strtod_l+0x568>
 8007d6e:	4658      	mov	r0, fp
 8007d70:	9904      	ldr	r1, [sp, #16]
 8007d72:	f002 faf7 	bl	800a364 <__ratio>
 8007d76:	2200      	movs	r2, #0
 8007d78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007d7c:	4606      	mov	r6, r0
 8007d7e:	460f      	mov	r7, r1
 8007d80:	f7f8 fe26 	bl	80009d0 <__aeabi_dcmple>
 8007d84:	2800      	cmp	r0, #0
 8007d86:	d070      	beq.n	8007e6a <_strtod_l+0xa52>
 8007d88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d042      	beq.n	8007e14 <_strtod_l+0x9fc>
 8007d8e:	2600      	movs	r6, #0
 8007d90:	4f62      	ldr	r7, [pc, #392]	; (8007f1c <_strtod_l+0xb04>)
 8007d92:	4d62      	ldr	r5, [pc, #392]	; (8007f1c <_strtod_l+0xb04>)
 8007d94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d96:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007d9a:	0d1b      	lsrs	r3, r3, #20
 8007d9c:	051b      	lsls	r3, r3, #20
 8007d9e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007da0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007da2:	4b5f      	ldr	r3, [pc, #380]	; (8007f20 <_strtod_l+0xb08>)
 8007da4:	429a      	cmp	r2, r3
 8007da6:	f040 80c3 	bne.w	8007f30 <_strtod_l+0xb18>
 8007daa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dac:	4640      	mov	r0, r8
 8007dae:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8007db2:	4649      	mov	r1, r9
 8007db4:	f002 fa00 	bl	800a1b8 <__ulp>
 8007db8:	4602      	mov	r2, r0
 8007dba:	460b      	mov	r3, r1
 8007dbc:	4630      	mov	r0, r6
 8007dbe:	4639      	mov	r1, r7
 8007dc0:	f7f8 fb8a 	bl	80004d8 <__aeabi_dmul>
 8007dc4:	4642      	mov	r2, r8
 8007dc6:	464b      	mov	r3, r9
 8007dc8:	f7f8 f9d0 	bl	800016c <__adddf3>
 8007dcc:	460b      	mov	r3, r1
 8007dce:	4951      	ldr	r1, [pc, #324]	; (8007f14 <_strtod_l+0xafc>)
 8007dd0:	4a54      	ldr	r2, [pc, #336]	; (8007f24 <_strtod_l+0xb0c>)
 8007dd2:	4019      	ands	r1, r3
 8007dd4:	4291      	cmp	r1, r2
 8007dd6:	4680      	mov	r8, r0
 8007dd8:	d95d      	bls.n	8007e96 <_strtod_l+0xa7e>
 8007dda:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007ddc:	4b4e      	ldr	r3, [pc, #312]	; (8007f18 <_strtod_l+0xb00>)
 8007dde:	429a      	cmp	r2, r3
 8007de0:	d103      	bne.n	8007dea <_strtod_l+0x9d2>
 8007de2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007de4:	3301      	adds	r3, #1
 8007de6:	f43f ad56 	beq.w	8007896 <_strtod_l+0x47e>
 8007dea:	f04f 38ff 	mov.w	r8, #4294967295
 8007dee:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8007f18 <_strtod_l+0xb00>
 8007df2:	4650      	mov	r0, sl
 8007df4:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007df6:	f001 feaf 	bl	8009b58 <_Bfree>
 8007dfa:	4650      	mov	r0, sl
 8007dfc:	9906      	ldr	r1, [sp, #24]
 8007dfe:	f001 feab 	bl	8009b58 <_Bfree>
 8007e02:	4650      	mov	r0, sl
 8007e04:	9904      	ldr	r1, [sp, #16]
 8007e06:	f001 fea7 	bl	8009b58 <_Bfree>
 8007e0a:	4659      	mov	r1, fp
 8007e0c:	4650      	mov	r0, sl
 8007e0e:	f001 fea3 	bl	8009b58 <_Bfree>
 8007e12:	e627      	b.n	8007a64 <_strtod_l+0x64c>
 8007e14:	f1b8 0f00 	cmp.w	r8, #0
 8007e18:	d119      	bne.n	8007e4e <_strtod_l+0xa36>
 8007e1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007e20:	b9e3      	cbnz	r3, 8007e5c <_strtod_l+0xa44>
 8007e22:	2200      	movs	r2, #0
 8007e24:	4630      	mov	r0, r6
 8007e26:	4639      	mov	r1, r7
 8007e28:	4b3c      	ldr	r3, [pc, #240]	; (8007f1c <_strtod_l+0xb04>)
 8007e2a:	f7f8 fdc7 	bl	80009bc <__aeabi_dcmplt>
 8007e2e:	b9c8      	cbnz	r0, 8007e64 <_strtod_l+0xa4c>
 8007e30:	2200      	movs	r2, #0
 8007e32:	4630      	mov	r0, r6
 8007e34:	4639      	mov	r1, r7
 8007e36:	4b3c      	ldr	r3, [pc, #240]	; (8007f28 <_strtod_l+0xb10>)
 8007e38:	f7f8 fb4e 	bl	80004d8 <__aeabi_dmul>
 8007e3c:	4604      	mov	r4, r0
 8007e3e:	460d      	mov	r5, r1
 8007e40:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8007e44:	9416      	str	r4, [sp, #88]	; 0x58
 8007e46:	9317      	str	r3, [sp, #92]	; 0x5c
 8007e48:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8007e4c:	e7a2      	b.n	8007d94 <_strtod_l+0x97c>
 8007e4e:	f1b8 0f01 	cmp.w	r8, #1
 8007e52:	d103      	bne.n	8007e5c <_strtod_l+0xa44>
 8007e54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	f43f ad92 	beq.w	8007980 <_strtod_l+0x568>
 8007e5c:	2600      	movs	r6, #0
 8007e5e:	2400      	movs	r4, #0
 8007e60:	4f32      	ldr	r7, [pc, #200]	; (8007f2c <_strtod_l+0xb14>)
 8007e62:	e796      	b.n	8007d92 <_strtod_l+0x97a>
 8007e64:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8007e66:	4d30      	ldr	r5, [pc, #192]	; (8007f28 <_strtod_l+0xb10>)
 8007e68:	e7ea      	b.n	8007e40 <_strtod_l+0xa28>
 8007e6a:	4b2f      	ldr	r3, [pc, #188]	; (8007f28 <_strtod_l+0xb10>)
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	4630      	mov	r0, r6
 8007e70:	4639      	mov	r1, r7
 8007e72:	f7f8 fb31 	bl	80004d8 <__aeabi_dmul>
 8007e76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e78:	4604      	mov	r4, r0
 8007e7a:	460d      	mov	r5, r1
 8007e7c:	b933      	cbnz	r3, 8007e8c <_strtod_l+0xa74>
 8007e7e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007e82:	9010      	str	r0, [sp, #64]	; 0x40
 8007e84:	9311      	str	r3, [sp, #68]	; 0x44
 8007e86:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007e8a:	e783      	b.n	8007d94 <_strtod_l+0x97c>
 8007e8c:	4602      	mov	r2, r0
 8007e8e:	460b      	mov	r3, r1
 8007e90:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007e94:	e7f7      	b.n	8007e86 <_strtod_l+0xa6e>
 8007e96:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8007e9a:	9b05      	ldr	r3, [sp, #20]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d1a8      	bne.n	8007df2 <_strtod_l+0x9da>
 8007ea0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007ea4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007ea6:	0d1b      	lsrs	r3, r3, #20
 8007ea8:	051b      	lsls	r3, r3, #20
 8007eaa:	429a      	cmp	r2, r3
 8007eac:	d1a1      	bne.n	8007df2 <_strtod_l+0x9da>
 8007eae:	4620      	mov	r0, r4
 8007eb0:	4629      	mov	r1, r5
 8007eb2:	f7f9 f943 	bl	800113c <__aeabi_d2lz>
 8007eb6:	f7f8 fae1 	bl	800047c <__aeabi_l2d>
 8007eba:	4602      	mov	r2, r0
 8007ebc:	460b      	mov	r3, r1
 8007ebe:	4620      	mov	r0, r4
 8007ec0:	4629      	mov	r1, r5
 8007ec2:	f7f8 f951 	bl	8000168 <__aeabi_dsub>
 8007ec6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007ec8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007ecc:	ea43 0308 	orr.w	r3, r3, r8
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	4604      	mov	r4, r0
 8007ed4:	460d      	mov	r5, r1
 8007ed6:	d066      	beq.n	8007fa6 <_strtod_l+0xb8e>
 8007ed8:	a309      	add	r3, pc, #36	; (adr r3, 8007f00 <_strtod_l+0xae8>)
 8007eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ede:	f7f8 fd6d 	bl	80009bc <__aeabi_dcmplt>
 8007ee2:	2800      	cmp	r0, #0
 8007ee4:	f47f ace2 	bne.w	80078ac <_strtod_l+0x494>
 8007ee8:	a307      	add	r3, pc, #28	; (adr r3, 8007f08 <_strtod_l+0xaf0>)
 8007eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eee:	4620      	mov	r0, r4
 8007ef0:	4629      	mov	r1, r5
 8007ef2:	f7f8 fd81 	bl	80009f8 <__aeabi_dcmpgt>
 8007ef6:	2800      	cmp	r0, #0
 8007ef8:	f43f af7b 	beq.w	8007df2 <_strtod_l+0x9da>
 8007efc:	e4d6      	b.n	80078ac <_strtod_l+0x494>
 8007efe:	bf00      	nop
 8007f00:	94a03595 	.word	0x94a03595
 8007f04:	3fdfffff 	.word	0x3fdfffff
 8007f08:	35afe535 	.word	0x35afe535
 8007f0c:	3fe00000 	.word	0x3fe00000
 8007f10:	000fffff 	.word	0x000fffff
 8007f14:	7ff00000 	.word	0x7ff00000
 8007f18:	7fefffff 	.word	0x7fefffff
 8007f1c:	3ff00000 	.word	0x3ff00000
 8007f20:	7fe00000 	.word	0x7fe00000
 8007f24:	7c9fffff 	.word	0x7c9fffff
 8007f28:	3fe00000 	.word	0x3fe00000
 8007f2c:	bff00000 	.word	0xbff00000
 8007f30:	9b05      	ldr	r3, [sp, #20]
 8007f32:	b313      	cbz	r3, 8007f7a <_strtod_l+0xb62>
 8007f34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007f36:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007f3a:	d81e      	bhi.n	8007f7a <_strtod_l+0xb62>
 8007f3c:	a326      	add	r3, pc, #152	; (adr r3, 8007fd8 <_strtod_l+0xbc0>)
 8007f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f42:	4620      	mov	r0, r4
 8007f44:	4629      	mov	r1, r5
 8007f46:	f7f8 fd43 	bl	80009d0 <__aeabi_dcmple>
 8007f4a:	b190      	cbz	r0, 8007f72 <_strtod_l+0xb5a>
 8007f4c:	4629      	mov	r1, r5
 8007f4e:	4620      	mov	r0, r4
 8007f50:	f7f8 fd9a 	bl	8000a88 <__aeabi_d2uiz>
 8007f54:	2801      	cmp	r0, #1
 8007f56:	bf38      	it	cc
 8007f58:	2001      	movcc	r0, #1
 8007f5a:	f7f8 fa43 	bl	80003e4 <__aeabi_ui2d>
 8007f5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f60:	4604      	mov	r4, r0
 8007f62:	460d      	mov	r5, r1
 8007f64:	b9d3      	cbnz	r3, 8007f9c <_strtod_l+0xb84>
 8007f66:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007f6a:	9012      	str	r0, [sp, #72]	; 0x48
 8007f6c:	9313      	str	r3, [sp, #76]	; 0x4c
 8007f6e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8007f72:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007f74:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8007f78:	1a9f      	subs	r7, r3, r2
 8007f7a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007f7e:	f002 f91b 	bl	800a1b8 <__ulp>
 8007f82:	4602      	mov	r2, r0
 8007f84:	460b      	mov	r3, r1
 8007f86:	4630      	mov	r0, r6
 8007f88:	4639      	mov	r1, r7
 8007f8a:	f7f8 faa5 	bl	80004d8 <__aeabi_dmul>
 8007f8e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007f92:	f7f8 f8eb 	bl	800016c <__adddf3>
 8007f96:	4680      	mov	r8, r0
 8007f98:	4689      	mov	r9, r1
 8007f9a:	e77e      	b.n	8007e9a <_strtod_l+0xa82>
 8007f9c:	4602      	mov	r2, r0
 8007f9e:	460b      	mov	r3, r1
 8007fa0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8007fa4:	e7e3      	b.n	8007f6e <_strtod_l+0xb56>
 8007fa6:	a30e      	add	r3, pc, #56	; (adr r3, 8007fe0 <_strtod_l+0xbc8>)
 8007fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fac:	f7f8 fd06 	bl	80009bc <__aeabi_dcmplt>
 8007fb0:	e7a1      	b.n	8007ef6 <_strtod_l+0xade>
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	930a      	str	r3, [sp, #40]	; 0x28
 8007fb6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007fb8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007fba:	6013      	str	r3, [r2, #0]
 8007fbc:	f7ff ba71 	b.w	80074a2 <_strtod_l+0x8a>
 8007fc0:	2a65      	cmp	r2, #101	; 0x65
 8007fc2:	f43f ab63 	beq.w	800768c <_strtod_l+0x274>
 8007fc6:	2a45      	cmp	r2, #69	; 0x45
 8007fc8:	f43f ab60 	beq.w	800768c <_strtod_l+0x274>
 8007fcc:	2301      	movs	r3, #1
 8007fce:	f7ff bb95 	b.w	80076fc <_strtod_l+0x2e4>
 8007fd2:	bf00      	nop
 8007fd4:	f3af 8000 	nop.w
 8007fd8:	ffc00000 	.word	0xffc00000
 8007fdc:	41dfffff 	.word	0x41dfffff
 8007fe0:	94a03595 	.word	0x94a03595
 8007fe4:	3fcfffff 	.word	0x3fcfffff

08007fe8 <_strtod_r>:
 8007fe8:	4b01      	ldr	r3, [pc, #4]	; (8007ff0 <_strtod_r+0x8>)
 8007fea:	f7ff ba15 	b.w	8007418 <_strtod_l>
 8007fee:	bf00      	nop
 8007ff0:	20000074 	.word	0x20000074

08007ff4 <strtod>:
 8007ff4:	460a      	mov	r2, r1
 8007ff6:	4601      	mov	r1, r0
 8007ff8:	4802      	ldr	r0, [pc, #8]	; (8008004 <strtod+0x10>)
 8007ffa:	4b03      	ldr	r3, [pc, #12]	; (8008008 <strtod+0x14>)
 8007ffc:	6800      	ldr	r0, [r0, #0]
 8007ffe:	f7ff ba0b 	b.w	8007418 <_strtod_l>
 8008002:	bf00      	nop
 8008004:	2000000c 	.word	0x2000000c
 8008008:	20000074 	.word	0x20000074

0800800c <_strtol_l.constprop.0>:
 800800c:	2b01      	cmp	r3, #1
 800800e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008012:	4680      	mov	r8, r0
 8008014:	d001      	beq.n	800801a <_strtol_l.constprop.0+0xe>
 8008016:	2b24      	cmp	r3, #36	; 0x24
 8008018:	d906      	bls.n	8008028 <_strtol_l.constprop.0+0x1c>
 800801a:	f7fe fa79 	bl	8006510 <__errno>
 800801e:	2316      	movs	r3, #22
 8008020:	6003      	str	r3, [r0, #0]
 8008022:	2000      	movs	r0, #0
 8008024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008028:	460d      	mov	r5, r1
 800802a:	4f35      	ldr	r7, [pc, #212]	; (8008100 <_strtol_l.constprop.0+0xf4>)
 800802c:	4628      	mov	r0, r5
 800802e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008032:	5de6      	ldrb	r6, [r4, r7]
 8008034:	f016 0608 	ands.w	r6, r6, #8
 8008038:	d1f8      	bne.n	800802c <_strtol_l.constprop.0+0x20>
 800803a:	2c2d      	cmp	r4, #45	; 0x2d
 800803c:	d12f      	bne.n	800809e <_strtol_l.constprop.0+0x92>
 800803e:	2601      	movs	r6, #1
 8008040:	782c      	ldrb	r4, [r5, #0]
 8008042:	1c85      	adds	r5, r0, #2
 8008044:	2b00      	cmp	r3, #0
 8008046:	d057      	beq.n	80080f8 <_strtol_l.constprop.0+0xec>
 8008048:	2b10      	cmp	r3, #16
 800804a:	d109      	bne.n	8008060 <_strtol_l.constprop.0+0x54>
 800804c:	2c30      	cmp	r4, #48	; 0x30
 800804e:	d107      	bne.n	8008060 <_strtol_l.constprop.0+0x54>
 8008050:	7828      	ldrb	r0, [r5, #0]
 8008052:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8008056:	2858      	cmp	r0, #88	; 0x58
 8008058:	d149      	bne.n	80080ee <_strtol_l.constprop.0+0xe2>
 800805a:	2310      	movs	r3, #16
 800805c:	786c      	ldrb	r4, [r5, #1]
 800805e:	3502      	adds	r5, #2
 8008060:	2700      	movs	r7, #0
 8008062:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8008066:	f10e 3eff 	add.w	lr, lr, #4294967295
 800806a:	fbbe f9f3 	udiv	r9, lr, r3
 800806e:	4638      	mov	r0, r7
 8008070:	fb03 ea19 	mls	sl, r3, r9, lr
 8008074:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008078:	f1bc 0f09 	cmp.w	ip, #9
 800807c:	d814      	bhi.n	80080a8 <_strtol_l.constprop.0+0x9c>
 800807e:	4664      	mov	r4, ip
 8008080:	42a3      	cmp	r3, r4
 8008082:	dd22      	ble.n	80080ca <_strtol_l.constprop.0+0xbe>
 8008084:	2f00      	cmp	r7, #0
 8008086:	db1d      	blt.n	80080c4 <_strtol_l.constprop.0+0xb8>
 8008088:	4581      	cmp	r9, r0
 800808a:	d31b      	bcc.n	80080c4 <_strtol_l.constprop.0+0xb8>
 800808c:	d101      	bne.n	8008092 <_strtol_l.constprop.0+0x86>
 800808e:	45a2      	cmp	sl, r4
 8008090:	db18      	blt.n	80080c4 <_strtol_l.constprop.0+0xb8>
 8008092:	2701      	movs	r7, #1
 8008094:	fb00 4003 	mla	r0, r0, r3, r4
 8008098:	f815 4b01 	ldrb.w	r4, [r5], #1
 800809c:	e7ea      	b.n	8008074 <_strtol_l.constprop.0+0x68>
 800809e:	2c2b      	cmp	r4, #43	; 0x2b
 80080a0:	bf04      	itt	eq
 80080a2:	782c      	ldrbeq	r4, [r5, #0]
 80080a4:	1c85      	addeq	r5, r0, #2
 80080a6:	e7cd      	b.n	8008044 <_strtol_l.constprop.0+0x38>
 80080a8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80080ac:	f1bc 0f19 	cmp.w	ip, #25
 80080b0:	d801      	bhi.n	80080b6 <_strtol_l.constprop.0+0xaa>
 80080b2:	3c37      	subs	r4, #55	; 0x37
 80080b4:	e7e4      	b.n	8008080 <_strtol_l.constprop.0+0x74>
 80080b6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80080ba:	f1bc 0f19 	cmp.w	ip, #25
 80080be:	d804      	bhi.n	80080ca <_strtol_l.constprop.0+0xbe>
 80080c0:	3c57      	subs	r4, #87	; 0x57
 80080c2:	e7dd      	b.n	8008080 <_strtol_l.constprop.0+0x74>
 80080c4:	f04f 37ff 	mov.w	r7, #4294967295
 80080c8:	e7e6      	b.n	8008098 <_strtol_l.constprop.0+0x8c>
 80080ca:	2f00      	cmp	r7, #0
 80080cc:	da07      	bge.n	80080de <_strtol_l.constprop.0+0xd2>
 80080ce:	2322      	movs	r3, #34	; 0x22
 80080d0:	4670      	mov	r0, lr
 80080d2:	f8c8 3000 	str.w	r3, [r8]
 80080d6:	2a00      	cmp	r2, #0
 80080d8:	d0a4      	beq.n	8008024 <_strtol_l.constprop.0+0x18>
 80080da:	1e69      	subs	r1, r5, #1
 80080dc:	e005      	b.n	80080ea <_strtol_l.constprop.0+0xde>
 80080de:	b106      	cbz	r6, 80080e2 <_strtol_l.constprop.0+0xd6>
 80080e0:	4240      	negs	r0, r0
 80080e2:	2a00      	cmp	r2, #0
 80080e4:	d09e      	beq.n	8008024 <_strtol_l.constprop.0+0x18>
 80080e6:	2f00      	cmp	r7, #0
 80080e8:	d1f7      	bne.n	80080da <_strtol_l.constprop.0+0xce>
 80080ea:	6011      	str	r1, [r2, #0]
 80080ec:	e79a      	b.n	8008024 <_strtol_l.constprop.0+0x18>
 80080ee:	2430      	movs	r4, #48	; 0x30
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d1b5      	bne.n	8008060 <_strtol_l.constprop.0+0x54>
 80080f4:	2308      	movs	r3, #8
 80080f6:	e7b3      	b.n	8008060 <_strtol_l.constprop.0+0x54>
 80080f8:	2c30      	cmp	r4, #48	; 0x30
 80080fa:	d0a9      	beq.n	8008050 <_strtol_l.constprop.0+0x44>
 80080fc:	230a      	movs	r3, #10
 80080fe:	e7af      	b.n	8008060 <_strtol_l.constprop.0+0x54>
 8008100:	0800cb61 	.word	0x0800cb61

08008104 <_strtol_r>:
 8008104:	f7ff bf82 	b.w	800800c <_strtol_l.constprop.0>

08008108 <__swbuf_r>:
 8008108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800810a:	460e      	mov	r6, r1
 800810c:	4614      	mov	r4, r2
 800810e:	4605      	mov	r5, r0
 8008110:	b118      	cbz	r0, 800811a <__swbuf_r+0x12>
 8008112:	6983      	ldr	r3, [r0, #24]
 8008114:	b90b      	cbnz	r3, 800811a <__swbuf_r+0x12>
 8008116:	f001 f847 	bl	80091a8 <__sinit>
 800811a:	4b21      	ldr	r3, [pc, #132]	; (80081a0 <__swbuf_r+0x98>)
 800811c:	429c      	cmp	r4, r3
 800811e:	d12b      	bne.n	8008178 <__swbuf_r+0x70>
 8008120:	686c      	ldr	r4, [r5, #4]
 8008122:	69a3      	ldr	r3, [r4, #24]
 8008124:	60a3      	str	r3, [r4, #8]
 8008126:	89a3      	ldrh	r3, [r4, #12]
 8008128:	071a      	lsls	r2, r3, #28
 800812a:	d52f      	bpl.n	800818c <__swbuf_r+0x84>
 800812c:	6923      	ldr	r3, [r4, #16]
 800812e:	b36b      	cbz	r3, 800818c <__swbuf_r+0x84>
 8008130:	6923      	ldr	r3, [r4, #16]
 8008132:	6820      	ldr	r0, [r4, #0]
 8008134:	b2f6      	uxtb	r6, r6
 8008136:	1ac0      	subs	r0, r0, r3
 8008138:	6963      	ldr	r3, [r4, #20]
 800813a:	4637      	mov	r7, r6
 800813c:	4283      	cmp	r3, r0
 800813e:	dc04      	bgt.n	800814a <__swbuf_r+0x42>
 8008140:	4621      	mov	r1, r4
 8008142:	4628      	mov	r0, r5
 8008144:	f000 ff9c 	bl	8009080 <_fflush_r>
 8008148:	bb30      	cbnz	r0, 8008198 <__swbuf_r+0x90>
 800814a:	68a3      	ldr	r3, [r4, #8]
 800814c:	3001      	adds	r0, #1
 800814e:	3b01      	subs	r3, #1
 8008150:	60a3      	str	r3, [r4, #8]
 8008152:	6823      	ldr	r3, [r4, #0]
 8008154:	1c5a      	adds	r2, r3, #1
 8008156:	6022      	str	r2, [r4, #0]
 8008158:	701e      	strb	r6, [r3, #0]
 800815a:	6963      	ldr	r3, [r4, #20]
 800815c:	4283      	cmp	r3, r0
 800815e:	d004      	beq.n	800816a <__swbuf_r+0x62>
 8008160:	89a3      	ldrh	r3, [r4, #12]
 8008162:	07db      	lsls	r3, r3, #31
 8008164:	d506      	bpl.n	8008174 <__swbuf_r+0x6c>
 8008166:	2e0a      	cmp	r6, #10
 8008168:	d104      	bne.n	8008174 <__swbuf_r+0x6c>
 800816a:	4621      	mov	r1, r4
 800816c:	4628      	mov	r0, r5
 800816e:	f000 ff87 	bl	8009080 <_fflush_r>
 8008172:	b988      	cbnz	r0, 8008198 <__swbuf_r+0x90>
 8008174:	4638      	mov	r0, r7
 8008176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008178:	4b0a      	ldr	r3, [pc, #40]	; (80081a4 <__swbuf_r+0x9c>)
 800817a:	429c      	cmp	r4, r3
 800817c:	d101      	bne.n	8008182 <__swbuf_r+0x7a>
 800817e:	68ac      	ldr	r4, [r5, #8]
 8008180:	e7cf      	b.n	8008122 <__swbuf_r+0x1a>
 8008182:	4b09      	ldr	r3, [pc, #36]	; (80081a8 <__swbuf_r+0xa0>)
 8008184:	429c      	cmp	r4, r3
 8008186:	bf08      	it	eq
 8008188:	68ec      	ldreq	r4, [r5, #12]
 800818a:	e7ca      	b.n	8008122 <__swbuf_r+0x1a>
 800818c:	4621      	mov	r1, r4
 800818e:	4628      	mov	r0, r5
 8008190:	f000 f80c 	bl	80081ac <__swsetup_r>
 8008194:	2800      	cmp	r0, #0
 8008196:	d0cb      	beq.n	8008130 <__swbuf_r+0x28>
 8008198:	f04f 37ff 	mov.w	r7, #4294967295
 800819c:	e7ea      	b.n	8008174 <__swbuf_r+0x6c>
 800819e:	bf00      	nop
 80081a0:	0800cd14 	.word	0x0800cd14
 80081a4:	0800cd34 	.word	0x0800cd34
 80081a8:	0800ccf4 	.word	0x0800ccf4

080081ac <__swsetup_r>:
 80081ac:	4b32      	ldr	r3, [pc, #200]	; (8008278 <__swsetup_r+0xcc>)
 80081ae:	b570      	push	{r4, r5, r6, lr}
 80081b0:	681d      	ldr	r5, [r3, #0]
 80081b2:	4606      	mov	r6, r0
 80081b4:	460c      	mov	r4, r1
 80081b6:	b125      	cbz	r5, 80081c2 <__swsetup_r+0x16>
 80081b8:	69ab      	ldr	r3, [r5, #24]
 80081ba:	b913      	cbnz	r3, 80081c2 <__swsetup_r+0x16>
 80081bc:	4628      	mov	r0, r5
 80081be:	f000 fff3 	bl	80091a8 <__sinit>
 80081c2:	4b2e      	ldr	r3, [pc, #184]	; (800827c <__swsetup_r+0xd0>)
 80081c4:	429c      	cmp	r4, r3
 80081c6:	d10f      	bne.n	80081e8 <__swsetup_r+0x3c>
 80081c8:	686c      	ldr	r4, [r5, #4]
 80081ca:	89a3      	ldrh	r3, [r4, #12]
 80081cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80081d0:	0719      	lsls	r1, r3, #28
 80081d2:	d42c      	bmi.n	800822e <__swsetup_r+0x82>
 80081d4:	06dd      	lsls	r5, r3, #27
 80081d6:	d411      	bmi.n	80081fc <__swsetup_r+0x50>
 80081d8:	2309      	movs	r3, #9
 80081da:	6033      	str	r3, [r6, #0]
 80081dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80081e0:	f04f 30ff 	mov.w	r0, #4294967295
 80081e4:	81a3      	strh	r3, [r4, #12]
 80081e6:	e03e      	b.n	8008266 <__swsetup_r+0xba>
 80081e8:	4b25      	ldr	r3, [pc, #148]	; (8008280 <__swsetup_r+0xd4>)
 80081ea:	429c      	cmp	r4, r3
 80081ec:	d101      	bne.n	80081f2 <__swsetup_r+0x46>
 80081ee:	68ac      	ldr	r4, [r5, #8]
 80081f0:	e7eb      	b.n	80081ca <__swsetup_r+0x1e>
 80081f2:	4b24      	ldr	r3, [pc, #144]	; (8008284 <__swsetup_r+0xd8>)
 80081f4:	429c      	cmp	r4, r3
 80081f6:	bf08      	it	eq
 80081f8:	68ec      	ldreq	r4, [r5, #12]
 80081fa:	e7e6      	b.n	80081ca <__swsetup_r+0x1e>
 80081fc:	0758      	lsls	r0, r3, #29
 80081fe:	d512      	bpl.n	8008226 <__swsetup_r+0x7a>
 8008200:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008202:	b141      	cbz	r1, 8008216 <__swsetup_r+0x6a>
 8008204:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008208:	4299      	cmp	r1, r3
 800820a:	d002      	beq.n	8008212 <__swsetup_r+0x66>
 800820c:	4630      	mov	r0, r6
 800820e:	f002 f92f 	bl	800a470 <_free_r>
 8008212:	2300      	movs	r3, #0
 8008214:	6363      	str	r3, [r4, #52]	; 0x34
 8008216:	89a3      	ldrh	r3, [r4, #12]
 8008218:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800821c:	81a3      	strh	r3, [r4, #12]
 800821e:	2300      	movs	r3, #0
 8008220:	6063      	str	r3, [r4, #4]
 8008222:	6923      	ldr	r3, [r4, #16]
 8008224:	6023      	str	r3, [r4, #0]
 8008226:	89a3      	ldrh	r3, [r4, #12]
 8008228:	f043 0308 	orr.w	r3, r3, #8
 800822c:	81a3      	strh	r3, [r4, #12]
 800822e:	6923      	ldr	r3, [r4, #16]
 8008230:	b94b      	cbnz	r3, 8008246 <__swsetup_r+0x9a>
 8008232:	89a3      	ldrh	r3, [r4, #12]
 8008234:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008238:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800823c:	d003      	beq.n	8008246 <__swsetup_r+0x9a>
 800823e:	4621      	mov	r1, r4
 8008240:	4630      	mov	r0, r6
 8008242:	f001 fbe1 	bl	8009a08 <__smakebuf_r>
 8008246:	89a0      	ldrh	r0, [r4, #12]
 8008248:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800824c:	f010 0301 	ands.w	r3, r0, #1
 8008250:	d00a      	beq.n	8008268 <__swsetup_r+0xbc>
 8008252:	2300      	movs	r3, #0
 8008254:	60a3      	str	r3, [r4, #8]
 8008256:	6963      	ldr	r3, [r4, #20]
 8008258:	425b      	negs	r3, r3
 800825a:	61a3      	str	r3, [r4, #24]
 800825c:	6923      	ldr	r3, [r4, #16]
 800825e:	b943      	cbnz	r3, 8008272 <__swsetup_r+0xc6>
 8008260:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008264:	d1ba      	bne.n	80081dc <__swsetup_r+0x30>
 8008266:	bd70      	pop	{r4, r5, r6, pc}
 8008268:	0781      	lsls	r1, r0, #30
 800826a:	bf58      	it	pl
 800826c:	6963      	ldrpl	r3, [r4, #20]
 800826e:	60a3      	str	r3, [r4, #8]
 8008270:	e7f4      	b.n	800825c <__swsetup_r+0xb0>
 8008272:	2000      	movs	r0, #0
 8008274:	e7f7      	b.n	8008266 <__swsetup_r+0xba>
 8008276:	bf00      	nop
 8008278:	2000000c 	.word	0x2000000c
 800827c:	0800cd14 	.word	0x0800cd14
 8008280:	0800cd34 	.word	0x0800cd34
 8008284:	0800ccf4 	.word	0x0800ccf4

08008288 <quorem>:
 8008288:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800828c:	6903      	ldr	r3, [r0, #16]
 800828e:	690c      	ldr	r4, [r1, #16]
 8008290:	4607      	mov	r7, r0
 8008292:	42a3      	cmp	r3, r4
 8008294:	f2c0 8082 	blt.w	800839c <quorem+0x114>
 8008298:	3c01      	subs	r4, #1
 800829a:	f100 0514 	add.w	r5, r0, #20
 800829e:	f101 0814 	add.w	r8, r1, #20
 80082a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80082a6:	9301      	str	r3, [sp, #4]
 80082a8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80082ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80082b0:	3301      	adds	r3, #1
 80082b2:	429a      	cmp	r2, r3
 80082b4:	fbb2 f6f3 	udiv	r6, r2, r3
 80082b8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80082bc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80082c0:	d331      	bcc.n	8008326 <quorem+0x9e>
 80082c2:	f04f 0e00 	mov.w	lr, #0
 80082c6:	4640      	mov	r0, r8
 80082c8:	46ac      	mov	ip, r5
 80082ca:	46f2      	mov	sl, lr
 80082cc:	f850 2b04 	ldr.w	r2, [r0], #4
 80082d0:	b293      	uxth	r3, r2
 80082d2:	fb06 e303 	mla	r3, r6, r3, lr
 80082d6:	0c12      	lsrs	r2, r2, #16
 80082d8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80082dc:	b29b      	uxth	r3, r3
 80082de:	fb06 e202 	mla	r2, r6, r2, lr
 80082e2:	ebaa 0303 	sub.w	r3, sl, r3
 80082e6:	f8dc a000 	ldr.w	sl, [ip]
 80082ea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80082ee:	fa1f fa8a 	uxth.w	sl, sl
 80082f2:	4453      	add	r3, sl
 80082f4:	f8dc a000 	ldr.w	sl, [ip]
 80082f8:	b292      	uxth	r2, r2
 80082fa:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80082fe:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008302:	b29b      	uxth	r3, r3
 8008304:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008308:	4581      	cmp	r9, r0
 800830a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800830e:	f84c 3b04 	str.w	r3, [ip], #4
 8008312:	d2db      	bcs.n	80082cc <quorem+0x44>
 8008314:	f855 300b 	ldr.w	r3, [r5, fp]
 8008318:	b92b      	cbnz	r3, 8008326 <quorem+0x9e>
 800831a:	9b01      	ldr	r3, [sp, #4]
 800831c:	3b04      	subs	r3, #4
 800831e:	429d      	cmp	r5, r3
 8008320:	461a      	mov	r2, r3
 8008322:	d32f      	bcc.n	8008384 <quorem+0xfc>
 8008324:	613c      	str	r4, [r7, #16]
 8008326:	4638      	mov	r0, r7
 8008328:	f001 fe9e 	bl	800a068 <__mcmp>
 800832c:	2800      	cmp	r0, #0
 800832e:	db25      	blt.n	800837c <quorem+0xf4>
 8008330:	4628      	mov	r0, r5
 8008332:	f04f 0c00 	mov.w	ip, #0
 8008336:	3601      	adds	r6, #1
 8008338:	f858 1b04 	ldr.w	r1, [r8], #4
 800833c:	f8d0 e000 	ldr.w	lr, [r0]
 8008340:	b28b      	uxth	r3, r1
 8008342:	ebac 0303 	sub.w	r3, ip, r3
 8008346:	fa1f f28e 	uxth.w	r2, lr
 800834a:	4413      	add	r3, r2
 800834c:	0c0a      	lsrs	r2, r1, #16
 800834e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008352:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008356:	b29b      	uxth	r3, r3
 8008358:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800835c:	45c1      	cmp	r9, r8
 800835e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008362:	f840 3b04 	str.w	r3, [r0], #4
 8008366:	d2e7      	bcs.n	8008338 <quorem+0xb0>
 8008368:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800836c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008370:	b922      	cbnz	r2, 800837c <quorem+0xf4>
 8008372:	3b04      	subs	r3, #4
 8008374:	429d      	cmp	r5, r3
 8008376:	461a      	mov	r2, r3
 8008378:	d30a      	bcc.n	8008390 <quorem+0x108>
 800837a:	613c      	str	r4, [r7, #16]
 800837c:	4630      	mov	r0, r6
 800837e:	b003      	add	sp, #12
 8008380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008384:	6812      	ldr	r2, [r2, #0]
 8008386:	3b04      	subs	r3, #4
 8008388:	2a00      	cmp	r2, #0
 800838a:	d1cb      	bne.n	8008324 <quorem+0x9c>
 800838c:	3c01      	subs	r4, #1
 800838e:	e7c6      	b.n	800831e <quorem+0x96>
 8008390:	6812      	ldr	r2, [r2, #0]
 8008392:	3b04      	subs	r3, #4
 8008394:	2a00      	cmp	r2, #0
 8008396:	d1f0      	bne.n	800837a <quorem+0xf2>
 8008398:	3c01      	subs	r4, #1
 800839a:	e7eb      	b.n	8008374 <quorem+0xec>
 800839c:	2000      	movs	r0, #0
 800839e:	e7ee      	b.n	800837e <quorem+0xf6>

080083a0 <_dtoa_r>:
 80083a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083a4:	4616      	mov	r6, r2
 80083a6:	461f      	mov	r7, r3
 80083a8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80083aa:	b099      	sub	sp, #100	; 0x64
 80083ac:	4605      	mov	r5, r0
 80083ae:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80083b2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80083b6:	b974      	cbnz	r4, 80083d6 <_dtoa_r+0x36>
 80083b8:	2010      	movs	r0, #16
 80083ba:	f001 fb65 	bl	8009a88 <malloc>
 80083be:	4602      	mov	r2, r0
 80083c0:	6268      	str	r0, [r5, #36]	; 0x24
 80083c2:	b920      	cbnz	r0, 80083ce <_dtoa_r+0x2e>
 80083c4:	21ea      	movs	r1, #234	; 0xea
 80083c6:	4ba8      	ldr	r3, [pc, #672]	; (8008668 <_dtoa_r+0x2c8>)
 80083c8:	48a8      	ldr	r0, [pc, #672]	; (800866c <_dtoa_r+0x2cc>)
 80083ca:	f002 fc6d 	bl	800aca8 <__assert_func>
 80083ce:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80083d2:	6004      	str	r4, [r0, #0]
 80083d4:	60c4      	str	r4, [r0, #12]
 80083d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80083d8:	6819      	ldr	r1, [r3, #0]
 80083da:	b151      	cbz	r1, 80083f2 <_dtoa_r+0x52>
 80083dc:	685a      	ldr	r2, [r3, #4]
 80083de:	2301      	movs	r3, #1
 80083e0:	4093      	lsls	r3, r2
 80083e2:	604a      	str	r2, [r1, #4]
 80083e4:	608b      	str	r3, [r1, #8]
 80083e6:	4628      	mov	r0, r5
 80083e8:	f001 fbb6 	bl	8009b58 <_Bfree>
 80083ec:	2200      	movs	r2, #0
 80083ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80083f0:	601a      	str	r2, [r3, #0]
 80083f2:	1e3b      	subs	r3, r7, #0
 80083f4:	bfaf      	iteee	ge
 80083f6:	2300      	movge	r3, #0
 80083f8:	2201      	movlt	r2, #1
 80083fa:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80083fe:	9305      	strlt	r3, [sp, #20]
 8008400:	bfa8      	it	ge
 8008402:	f8c8 3000 	strge.w	r3, [r8]
 8008406:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800840a:	4b99      	ldr	r3, [pc, #612]	; (8008670 <_dtoa_r+0x2d0>)
 800840c:	bfb8      	it	lt
 800840e:	f8c8 2000 	strlt.w	r2, [r8]
 8008412:	ea33 0309 	bics.w	r3, r3, r9
 8008416:	d119      	bne.n	800844c <_dtoa_r+0xac>
 8008418:	f242 730f 	movw	r3, #9999	; 0x270f
 800841c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800841e:	6013      	str	r3, [r2, #0]
 8008420:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008424:	4333      	orrs	r3, r6
 8008426:	f000 857f 	beq.w	8008f28 <_dtoa_r+0xb88>
 800842a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800842c:	b953      	cbnz	r3, 8008444 <_dtoa_r+0xa4>
 800842e:	4b91      	ldr	r3, [pc, #580]	; (8008674 <_dtoa_r+0x2d4>)
 8008430:	e022      	b.n	8008478 <_dtoa_r+0xd8>
 8008432:	4b91      	ldr	r3, [pc, #580]	; (8008678 <_dtoa_r+0x2d8>)
 8008434:	9303      	str	r3, [sp, #12]
 8008436:	3308      	adds	r3, #8
 8008438:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800843a:	6013      	str	r3, [r2, #0]
 800843c:	9803      	ldr	r0, [sp, #12]
 800843e:	b019      	add	sp, #100	; 0x64
 8008440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008444:	4b8b      	ldr	r3, [pc, #556]	; (8008674 <_dtoa_r+0x2d4>)
 8008446:	9303      	str	r3, [sp, #12]
 8008448:	3303      	adds	r3, #3
 800844a:	e7f5      	b.n	8008438 <_dtoa_r+0x98>
 800844c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008450:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8008454:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008458:	2200      	movs	r2, #0
 800845a:	2300      	movs	r3, #0
 800845c:	f7f8 faa4 	bl	80009a8 <__aeabi_dcmpeq>
 8008460:	4680      	mov	r8, r0
 8008462:	b158      	cbz	r0, 800847c <_dtoa_r+0xdc>
 8008464:	2301      	movs	r3, #1
 8008466:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008468:	6013      	str	r3, [r2, #0]
 800846a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800846c:	2b00      	cmp	r3, #0
 800846e:	f000 8558 	beq.w	8008f22 <_dtoa_r+0xb82>
 8008472:	4882      	ldr	r0, [pc, #520]	; (800867c <_dtoa_r+0x2dc>)
 8008474:	6018      	str	r0, [r3, #0]
 8008476:	1e43      	subs	r3, r0, #1
 8008478:	9303      	str	r3, [sp, #12]
 800847a:	e7df      	b.n	800843c <_dtoa_r+0x9c>
 800847c:	ab16      	add	r3, sp, #88	; 0x58
 800847e:	9301      	str	r3, [sp, #4]
 8008480:	ab17      	add	r3, sp, #92	; 0x5c
 8008482:	9300      	str	r3, [sp, #0]
 8008484:	4628      	mov	r0, r5
 8008486:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800848a:	f001 ff0f 	bl	800a2ac <__d2b>
 800848e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008492:	4683      	mov	fp, r0
 8008494:	2c00      	cmp	r4, #0
 8008496:	d07f      	beq.n	8008598 <_dtoa_r+0x1f8>
 8008498:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800849c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800849e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80084a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80084a6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80084aa:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80084ae:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80084b2:	2200      	movs	r2, #0
 80084b4:	4b72      	ldr	r3, [pc, #456]	; (8008680 <_dtoa_r+0x2e0>)
 80084b6:	f7f7 fe57 	bl	8000168 <__aeabi_dsub>
 80084ba:	a365      	add	r3, pc, #404	; (adr r3, 8008650 <_dtoa_r+0x2b0>)
 80084bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c0:	f7f8 f80a 	bl	80004d8 <__aeabi_dmul>
 80084c4:	a364      	add	r3, pc, #400	; (adr r3, 8008658 <_dtoa_r+0x2b8>)
 80084c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ca:	f7f7 fe4f 	bl	800016c <__adddf3>
 80084ce:	4606      	mov	r6, r0
 80084d0:	4620      	mov	r0, r4
 80084d2:	460f      	mov	r7, r1
 80084d4:	f7f7 ff96 	bl	8000404 <__aeabi_i2d>
 80084d8:	a361      	add	r3, pc, #388	; (adr r3, 8008660 <_dtoa_r+0x2c0>)
 80084da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084de:	f7f7 fffb 	bl	80004d8 <__aeabi_dmul>
 80084e2:	4602      	mov	r2, r0
 80084e4:	460b      	mov	r3, r1
 80084e6:	4630      	mov	r0, r6
 80084e8:	4639      	mov	r1, r7
 80084ea:	f7f7 fe3f 	bl	800016c <__adddf3>
 80084ee:	4606      	mov	r6, r0
 80084f0:	460f      	mov	r7, r1
 80084f2:	f7f8 faa1 	bl	8000a38 <__aeabi_d2iz>
 80084f6:	2200      	movs	r2, #0
 80084f8:	4682      	mov	sl, r0
 80084fa:	2300      	movs	r3, #0
 80084fc:	4630      	mov	r0, r6
 80084fe:	4639      	mov	r1, r7
 8008500:	f7f8 fa5c 	bl	80009bc <__aeabi_dcmplt>
 8008504:	b148      	cbz	r0, 800851a <_dtoa_r+0x17a>
 8008506:	4650      	mov	r0, sl
 8008508:	f7f7 ff7c 	bl	8000404 <__aeabi_i2d>
 800850c:	4632      	mov	r2, r6
 800850e:	463b      	mov	r3, r7
 8008510:	f7f8 fa4a 	bl	80009a8 <__aeabi_dcmpeq>
 8008514:	b908      	cbnz	r0, 800851a <_dtoa_r+0x17a>
 8008516:	f10a 3aff 	add.w	sl, sl, #4294967295
 800851a:	f1ba 0f16 	cmp.w	sl, #22
 800851e:	d858      	bhi.n	80085d2 <_dtoa_r+0x232>
 8008520:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008524:	4b57      	ldr	r3, [pc, #348]	; (8008684 <_dtoa_r+0x2e4>)
 8008526:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800852a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800852e:	f7f8 fa45 	bl	80009bc <__aeabi_dcmplt>
 8008532:	2800      	cmp	r0, #0
 8008534:	d04f      	beq.n	80085d6 <_dtoa_r+0x236>
 8008536:	2300      	movs	r3, #0
 8008538:	f10a 3aff 	add.w	sl, sl, #4294967295
 800853c:	930f      	str	r3, [sp, #60]	; 0x3c
 800853e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008540:	1b1c      	subs	r4, r3, r4
 8008542:	1e63      	subs	r3, r4, #1
 8008544:	9309      	str	r3, [sp, #36]	; 0x24
 8008546:	bf49      	itett	mi
 8008548:	f1c4 0301 	rsbmi	r3, r4, #1
 800854c:	2300      	movpl	r3, #0
 800854e:	9306      	strmi	r3, [sp, #24]
 8008550:	2300      	movmi	r3, #0
 8008552:	bf54      	ite	pl
 8008554:	9306      	strpl	r3, [sp, #24]
 8008556:	9309      	strmi	r3, [sp, #36]	; 0x24
 8008558:	f1ba 0f00 	cmp.w	sl, #0
 800855c:	db3d      	blt.n	80085da <_dtoa_r+0x23a>
 800855e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008560:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8008564:	4453      	add	r3, sl
 8008566:	9309      	str	r3, [sp, #36]	; 0x24
 8008568:	2300      	movs	r3, #0
 800856a:	930a      	str	r3, [sp, #40]	; 0x28
 800856c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800856e:	2b09      	cmp	r3, #9
 8008570:	f200 808c 	bhi.w	800868c <_dtoa_r+0x2ec>
 8008574:	2b05      	cmp	r3, #5
 8008576:	bfc4      	itt	gt
 8008578:	3b04      	subgt	r3, #4
 800857a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800857c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800857e:	bfc8      	it	gt
 8008580:	2400      	movgt	r4, #0
 8008582:	f1a3 0302 	sub.w	r3, r3, #2
 8008586:	bfd8      	it	le
 8008588:	2401      	movle	r4, #1
 800858a:	2b03      	cmp	r3, #3
 800858c:	f200 808a 	bhi.w	80086a4 <_dtoa_r+0x304>
 8008590:	e8df f003 	tbb	[pc, r3]
 8008594:	5b4d4f2d 	.word	0x5b4d4f2d
 8008598:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800859c:	441c      	add	r4, r3
 800859e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80085a2:	2b20      	cmp	r3, #32
 80085a4:	bfc3      	ittte	gt
 80085a6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80085aa:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80085ae:	fa09 f303 	lslgt.w	r3, r9, r3
 80085b2:	f1c3 0320 	rsble	r3, r3, #32
 80085b6:	bfc6      	itte	gt
 80085b8:	fa26 f000 	lsrgt.w	r0, r6, r0
 80085bc:	4318      	orrgt	r0, r3
 80085be:	fa06 f003 	lslle.w	r0, r6, r3
 80085c2:	f7f7 ff0f 	bl	80003e4 <__aeabi_ui2d>
 80085c6:	2301      	movs	r3, #1
 80085c8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80085cc:	3c01      	subs	r4, #1
 80085ce:	9313      	str	r3, [sp, #76]	; 0x4c
 80085d0:	e76f      	b.n	80084b2 <_dtoa_r+0x112>
 80085d2:	2301      	movs	r3, #1
 80085d4:	e7b2      	b.n	800853c <_dtoa_r+0x19c>
 80085d6:	900f      	str	r0, [sp, #60]	; 0x3c
 80085d8:	e7b1      	b.n	800853e <_dtoa_r+0x19e>
 80085da:	9b06      	ldr	r3, [sp, #24]
 80085dc:	eba3 030a 	sub.w	r3, r3, sl
 80085e0:	9306      	str	r3, [sp, #24]
 80085e2:	f1ca 0300 	rsb	r3, sl, #0
 80085e6:	930a      	str	r3, [sp, #40]	; 0x28
 80085e8:	2300      	movs	r3, #0
 80085ea:	930e      	str	r3, [sp, #56]	; 0x38
 80085ec:	e7be      	b.n	800856c <_dtoa_r+0x1cc>
 80085ee:	2300      	movs	r3, #0
 80085f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80085f2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	dc58      	bgt.n	80086aa <_dtoa_r+0x30a>
 80085f8:	f04f 0901 	mov.w	r9, #1
 80085fc:	464b      	mov	r3, r9
 80085fe:	f8cd 9020 	str.w	r9, [sp, #32]
 8008602:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8008606:	2200      	movs	r2, #0
 8008608:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800860a:	6042      	str	r2, [r0, #4]
 800860c:	2204      	movs	r2, #4
 800860e:	f102 0614 	add.w	r6, r2, #20
 8008612:	429e      	cmp	r6, r3
 8008614:	6841      	ldr	r1, [r0, #4]
 8008616:	d94e      	bls.n	80086b6 <_dtoa_r+0x316>
 8008618:	4628      	mov	r0, r5
 800861a:	f001 fa5d 	bl	8009ad8 <_Balloc>
 800861e:	9003      	str	r0, [sp, #12]
 8008620:	2800      	cmp	r0, #0
 8008622:	d14c      	bne.n	80086be <_dtoa_r+0x31e>
 8008624:	4602      	mov	r2, r0
 8008626:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800862a:	4b17      	ldr	r3, [pc, #92]	; (8008688 <_dtoa_r+0x2e8>)
 800862c:	e6cc      	b.n	80083c8 <_dtoa_r+0x28>
 800862e:	2301      	movs	r3, #1
 8008630:	e7de      	b.n	80085f0 <_dtoa_r+0x250>
 8008632:	2300      	movs	r3, #0
 8008634:	930b      	str	r3, [sp, #44]	; 0x2c
 8008636:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008638:	eb0a 0903 	add.w	r9, sl, r3
 800863c:	f109 0301 	add.w	r3, r9, #1
 8008640:	2b01      	cmp	r3, #1
 8008642:	9308      	str	r3, [sp, #32]
 8008644:	bfb8      	it	lt
 8008646:	2301      	movlt	r3, #1
 8008648:	e7dd      	b.n	8008606 <_dtoa_r+0x266>
 800864a:	2301      	movs	r3, #1
 800864c:	e7f2      	b.n	8008634 <_dtoa_r+0x294>
 800864e:	bf00      	nop
 8008650:	636f4361 	.word	0x636f4361
 8008654:	3fd287a7 	.word	0x3fd287a7
 8008658:	8b60c8b3 	.word	0x8b60c8b3
 800865c:	3fc68a28 	.word	0x3fc68a28
 8008660:	509f79fb 	.word	0x509f79fb
 8008664:	3fd34413 	.word	0x3fd34413
 8008668:	0800cc6e 	.word	0x0800cc6e
 800866c:	0800cc85 	.word	0x0800cc85
 8008670:	7ff00000 	.word	0x7ff00000
 8008674:	0800cc6a 	.word	0x0800cc6a
 8008678:	0800cc61 	.word	0x0800cc61
 800867c:	0800cae1 	.word	0x0800cae1
 8008680:	3ff80000 	.word	0x3ff80000
 8008684:	0800ce58 	.word	0x0800ce58
 8008688:	0800cce0 	.word	0x0800cce0
 800868c:	2401      	movs	r4, #1
 800868e:	2300      	movs	r3, #0
 8008690:	940b      	str	r4, [sp, #44]	; 0x2c
 8008692:	9322      	str	r3, [sp, #136]	; 0x88
 8008694:	f04f 39ff 	mov.w	r9, #4294967295
 8008698:	2200      	movs	r2, #0
 800869a:	2312      	movs	r3, #18
 800869c:	f8cd 9020 	str.w	r9, [sp, #32]
 80086a0:	9223      	str	r2, [sp, #140]	; 0x8c
 80086a2:	e7b0      	b.n	8008606 <_dtoa_r+0x266>
 80086a4:	2301      	movs	r3, #1
 80086a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80086a8:	e7f4      	b.n	8008694 <_dtoa_r+0x2f4>
 80086aa:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80086ae:	464b      	mov	r3, r9
 80086b0:	f8cd 9020 	str.w	r9, [sp, #32]
 80086b4:	e7a7      	b.n	8008606 <_dtoa_r+0x266>
 80086b6:	3101      	adds	r1, #1
 80086b8:	6041      	str	r1, [r0, #4]
 80086ba:	0052      	lsls	r2, r2, #1
 80086bc:	e7a7      	b.n	800860e <_dtoa_r+0x26e>
 80086be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80086c0:	9a03      	ldr	r2, [sp, #12]
 80086c2:	601a      	str	r2, [r3, #0]
 80086c4:	9b08      	ldr	r3, [sp, #32]
 80086c6:	2b0e      	cmp	r3, #14
 80086c8:	f200 80a8 	bhi.w	800881c <_dtoa_r+0x47c>
 80086cc:	2c00      	cmp	r4, #0
 80086ce:	f000 80a5 	beq.w	800881c <_dtoa_r+0x47c>
 80086d2:	f1ba 0f00 	cmp.w	sl, #0
 80086d6:	dd34      	ble.n	8008742 <_dtoa_r+0x3a2>
 80086d8:	4a9a      	ldr	r2, [pc, #616]	; (8008944 <_dtoa_r+0x5a4>)
 80086da:	f00a 030f 	and.w	r3, sl, #15
 80086de:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80086e2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80086e6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80086ea:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80086ee:	ea4f 142a 	mov.w	r4, sl, asr #4
 80086f2:	d016      	beq.n	8008722 <_dtoa_r+0x382>
 80086f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80086f8:	4b93      	ldr	r3, [pc, #588]	; (8008948 <_dtoa_r+0x5a8>)
 80086fa:	2703      	movs	r7, #3
 80086fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008700:	f7f8 f814 	bl	800072c <__aeabi_ddiv>
 8008704:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008708:	f004 040f 	and.w	r4, r4, #15
 800870c:	4e8e      	ldr	r6, [pc, #568]	; (8008948 <_dtoa_r+0x5a8>)
 800870e:	b954      	cbnz	r4, 8008726 <_dtoa_r+0x386>
 8008710:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008714:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008718:	f7f8 f808 	bl	800072c <__aeabi_ddiv>
 800871c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008720:	e029      	b.n	8008776 <_dtoa_r+0x3d6>
 8008722:	2702      	movs	r7, #2
 8008724:	e7f2      	b.n	800870c <_dtoa_r+0x36c>
 8008726:	07e1      	lsls	r1, r4, #31
 8008728:	d508      	bpl.n	800873c <_dtoa_r+0x39c>
 800872a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800872e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008732:	f7f7 fed1 	bl	80004d8 <__aeabi_dmul>
 8008736:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800873a:	3701      	adds	r7, #1
 800873c:	1064      	asrs	r4, r4, #1
 800873e:	3608      	adds	r6, #8
 8008740:	e7e5      	b.n	800870e <_dtoa_r+0x36e>
 8008742:	f000 80a5 	beq.w	8008890 <_dtoa_r+0x4f0>
 8008746:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800874a:	f1ca 0400 	rsb	r4, sl, #0
 800874e:	4b7d      	ldr	r3, [pc, #500]	; (8008944 <_dtoa_r+0x5a4>)
 8008750:	f004 020f 	and.w	r2, r4, #15
 8008754:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800875c:	f7f7 febc 	bl	80004d8 <__aeabi_dmul>
 8008760:	2702      	movs	r7, #2
 8008762:	2300      	movs	r3, #0
 8008764:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008768:	4e77      	ldr	r6, [pc, #476]	; (8008948 <_dtoa_r+0x5a8>)
 800876a:	1124      	asrs	r4, r4, #4
 800876c:	2c00      	cmp	r4, #0
 800876e:	f040 8084 	bne.w	800887a <_dtoa_r+0x4da>
 8008772:	2b00      	cmp	r3, #0
 8008774:	d1d2      	bne.n	800871c <_dtoa_r+0x37c>
 8008776:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008778:	2b00      	cmp	r3, #0
 800877a:	f000 808b 	beq.w	8008894 <_dtoa_r+0x4f4>
 800877e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008782:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008786:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800878a:	2200      	movs	r2, #0
 800878c:	4b6f      	ldr	r3, [pc, #444]	; (800894c <_dtoa_r+0x5ac>)
 800878e:	f7f8 f915 	bl	80009bc <__aeabi_dcmplt>
 8008792:	2800      	cmp	r0, #0
 8008794:	d07e      	beq.n	8008894 <_dtoa_r+0x4f4>
 8008796:	9b08      	ldr	r3, [sp, #32]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d07b      	beq.n	8008894 <_dtoa_r+0x4f4>
 800879c:	f1b9 0f00 	cmp.w	r9, #0
 80087a0:	dd38      	ble.n	8008814 <_dtoa_r+0x474>
 80087a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80087a6:	2200      	movs	r2, #0
 80087a8:	4b69      	ldr	r3, [pc, #420]	; (8008950 <_dtoa_r+0x5b0>)
 80087aa:	f7f7 fe95 	bl	80004d8 <__aeabi_dmul>
 80087ae:	464c      	mov	r4, r9
 80087b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80087b4:	f10a 38ff 	add.w	r8, sl, #4294967295
 80087b8:	3701      	adds	r7, #1
 80087ba:	4638      	mov	r0, r7
 80087bc:	f7f7 fe22 	bl	8000404 <__aeabi_i2d>
 80087c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80087c4:	f7f7 fe88 	bl	80004d8 <__aeabi_dmul>
 80087c8:	2200      	movs	r2, #0
 80087ca:	4b62      	ldr	r3, [pc, #392]	; (8008954 <_dtoa_r+0x5b4>)
 80087cc:	f7f7 fcce 	bl	800016c <__adddf3>
 80087d0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80087d4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80087d8:	9611      	str	r6, [sp, #68]	; 0x44
 80087da:	2c00      	cmp	r4, #0
 80087dc:	d15d      	bne.n	800889a <_dtoa_r+0x4fa>
 80087de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80087e2:	2200      	movs	r2, #0
 80087e4:	4b5c      	ldr	r3, [pc, #368]	; (8008958 <_dtoa_r+0x5b8>)
 80087e6:	f7f7 fcbf 	bl	8000168 <__aeabi_dsub>
 80087ea:	4602      	mov	r2, r0
 80087ec:	460b      	mov	r3, r1
 80087ee:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80087f2:	4633      	mov	r3, r6
 80087f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80087f6:	f7f8 f8ff 	bl	80009f8 <__aeabi_dcmpgt>
 80087fa:	2800      	cmp	r0, #0
 80087fc:	f040 829c 	bne.w	8008d38 <_dtoa_r+0x998>
 8008800:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008804:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008806:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800880a:	f7f8 f8d7 	bl	80009bc <__aeabi_dcmplt>
 800880e:	2800      	cmp	r0, #0
 8008810:	f040 8290 	bne.w	8008d34 <_dtoa_r+0x994>
 8008814:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8008818:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800881c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800881e:	2b00      	cmp	r3, #0
 8008820:	f2c0 8152 	blt.w	8008ac8 <_dtoa_r+0x728>
 8008824:	f1ba 0f0e 	cmp.w	sl, #14
 8008828:	f300 814e 	bgt.w	8008ac8 <_dtoa_r+0x728>
 800882c:	4b45      	ldr	r3, [pc, #276]	; (8008944 <_dtoa_r+0x5a4>)
 800882e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008832:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008836:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800883a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800883c:	2b00      	cmp	r3, #0
 800883e:	f280 80db 	bge.w	80089f8 <_dtoa_r+0x658>
 8008842:	9b08      	ldr	r3, [sp, #32]
 8008844:	2b00      	cmp	r3, #0
 8008846:	f300 80d7 	bgt.w	80089f8 <_dtoa_r+0x658>
 800884a:	f040 8272 	bne.w	8008d32 <_dtoa_r+0x992>
 800884e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008852:	2200      	movs	r2, #0
 8008854:	4b40      	ldr	r3, [pc, #256]	; (8008958 <_dtoa_r+0x5b8>)
 8008856:	f7f7 fe3f 	bl	80004d8 <__aeabi_dmul>
 800885a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800885e:	f7f8 f8c1 	bl	80009e4 <__aeabi_dcmpge>
 8008862:	9c08      	ldr	r4, [sp, #32]
 8008864:	4626      	mov	r6, r4
 8008866:	2800      	cmp	r0, #0
 8008868:	f040 8248 	bne.w	8008cfc <_dtoa_r+0x95c>
 800886c:	2331      	movs	r3, #49	; 0x31
 800886e:	9f03      	ldr	r7, [sp, #12]
 8008870:	f10a 0a01 	add.w	sl, sl, #1
 8008874:	f807 3b01 	strb.w	r3, [r7], #1
 8008878:	e244      	b.n	8008d04 <_dtoa_r+0x964>
 800887a:	07e2      	lsls	r2, r4, #31
 800887c:	d505      	bpl.n	800888a <_dtoa_r+0x4ea>
 800887e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008882:	f7f7 fe29 	bl	80004d8 <__aeabi_dmul>
 8008886:	2301      	movs	r3, #1
 8008888:	3701      	adds	r7, #1
 800888a:	1064      	asrs	r4, r4, #1
 800888c:	3608      	adds	r6, #8
 800888e:	e76d      	b.n	800876c <_dtoa_r+0x3cc>
 8008890:	2702      	movs	r7, #2
 8008892:	e770      	b.n	8008776 <_dtoa_r+0x3d6>
 8008894:	46d0      	mov	r8, sl
 8008896:	9c08      	ldr	r4, [sp, #32]
 8008898:	e78f      	b.n	80087ba <_dtoa_r+0x41a>
 800889a:	9903      	ldr	r1, [sp, #12]
 800889c:	4b29      	ldr	r3, [pc, #164]	; (8008944 <_dtoa_r+0x5a4>)
 800889e:	4421      	add	r1, r4
 80088a0:	9112      	str	r1, [sp, #72]	; 0x48
 80088a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80088a4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80088a8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80088ac:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80088b0:	2900      	cmp	r1, #0
 80088b2:	d055      	beq.n	8008960 <_dtoa_r+0x5c0>
 80088b4:	2000      	movs	r0, #0
 80088b6:	4929      	ldr	r1, [pc, #164]	; (800895c <_dtoa_r+0x5bc>)
 80088b8:	f7f7 ff38 	bl	800072c <__aeabi_ddiv>
 80088bc:	463b      	mov	r3, r7
 80088be:	4632      	mov	r2, r6
 80088c0:	f7f7 fc52 	bl	8000168 <__aeabi_dsub>
 80088c4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80088c8:	9f03      	ldr	r7, [sp, #12]
 80088ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80088ce:	f7f8 f8b3 	bl	8000a38 <__aeabi_d2iz>
 80088d2:	4604      	mov	r4, r0
 80088d4:	f7f7 fd96 	bl	8000404 <__aeabi_i2d>
 80088d8:	4602      	mov	r2, r0
 80088da:	460b      	mov	r3, r1
 80088dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80088e0:	f7f7 fc42 	bl	8000168 <__aeabi_dsub>
 80088e4:	4602      	mov	r2, r0
 80088e6:	460b      	mov	r3, r1
 80088e8:	3430      	adds	r4, #48	; 0x30
 80088ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80088ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80088f2:	f807 4b01 	strb.w	r4, [r7], #1
 80088f6:	f7f8 f861 	bl	80009bc <__aeabi_dcmplt>
 80088fa:	2800      	cmp	r0, #0
 80088fc:	d174      	bne.n	80089e8 <_dtoa_r+0x648>
 80088fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008902:	2000      	movs	r0, #0
 8008904:	4911      	ldr	r1, [pc, #68]	; (800894c <_dtoa_r+0x5ac>)
 8008906:	f7f7 fc2f 	bl	8000168 <__aeabi_dsub>
 800890a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800890e:	f7f8 f855 	bl	80009bc <__aeabi_dcmplt>
 8008912:	2800      	cmp	r0, #0
 8008914:	f040 80b7 	bne.w	8008a86 <_dtoa_r+0x6e6>
 8008918:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800891a:	429f      	cmp	r7, r3
 800891c:	f43f af7a 	beq.w	8008814 <_dtoa_r+0x474>
 8008920:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008924:	2200      	movs	r2, #0
 8008926:	4b0a      	ldr	r3, [pc, #40]	; (8008950 <_dtoa_r+0x5b0>)
 8008928:	f7f7 fdd6 	bl	80004d8 <__aeabi_dmul>
 800892c:	2200      	movs	r2, #0
 800892e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008932:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008936:	4b06      	ldr	r3, [pc, #24]	; (8008950 <_dtoa_r+0x5b0>)
 8008938:	f7f7 fdce 	bl	80004d8 <__aeabi_dmul>
 800893c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008940:	e7c3      	b.n	80088ca <_dtoa_r+0x52a>
 8008942:	bf00      	nop
 8008944:	0800ce58 	.word	0x0800ce58
 8008948:	0800ce30 	.word	0x0800ce30
 800894c:	3ff00000 	.word	0x3ff00000
 8008950:	40240000 	.word	0x40240000
 8008954:	401c0000 	.word	0x401c0000
 8008958:	40140000 	.word	0x40140000
 800895c:	3fe00000 	.word	0x3fe00000
 8008960:	4630      	mov	r0, r6
 8008962:	4639      	mov	r1, r7
 8008964:	f7f7 fdb8 	bl	80004d8 <__aeabi_dmul>
 8008968:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800896a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800896e:	9c03      	ldr	r4, [sp, #12]
 8008970:	9314      	str	r3, [sp, #80]	; 0x50
 8008972:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008976:	f7f8 f85f 	bl	8000a38 <__aeabi_d2iz>
 800897a:	9015      	str	r0, [sp, #84]	; 0x54
 800897c:	f7f7 fd42 	bl	8000404 <__aeabi_i2d>
 8008980:	4602      	mov	r2, r0
 8008982:	460b      	mov	r3, r1
 8008984:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008988:	f7f7 fbee 	bl	8000168 <__aeabi_dsub>
 800898c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800898e:	4606      	mov	r6, r0
 8008990:	3330      	adds	r3, #48	; 0x30
 8008992:	f804 3b01 	strb.w	r3, [r4], #1
 8008996:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008998:	460f      	mov	r7, r1
 800899a:	429c      	cmp	r4, r3
 800899c:	f04f 0200 	mov.w	r2, #0
 80089a0:	d124      	bne.n	80089ec <_dtoa_r+0x64c>
 80089a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80089a6:	4bb0      	ldr	r3, [pc, #704]	; (8008c68 <_dtoa_r+0x8c8>)
 80089a8:	f7f7 fbe0 	bl	800016c <__adddf3>
 80089ac:	4602      	mov	r2, r0
 80089ae:	460b      	mov	r3, r1
 80089b0:	4630      	mov	r0, r6
 80089b2:	4639      	mov	r1, r7
 80089b4:	f7f8 f820 	bl	80009f8 <__aeabi_dcmpgt>
 80089b8:	2800      	cmp	r0, #0
 80089ba:	d163      	bne.n	8008a84 <_dtoa_r+0x6e4>
 80089bc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80089c0:	2000      	movs	r0, #0
 80089c2:	49a9      	ldr	r1, [pc, #676]	; (8008c68 <_dtoa_r+0x8c8>)
 80089c4:	f7f7 fbd0 	bl	8000168 <__aeabi_dsub>
 80089c8:	4602      	mov	r2, r0
 80089ca:	460b      	mov	r3, r1
 80089cc:	4630      	mov	r0, r6
 80089ce:	4639      	mov	r1, r7
 80089d0:	f7f7 fff4 	bl	80009bc <__aeabi_dcmplt>
 80089d4:	2800      	cmp	r0, #0
 80089d6:	f43f af1d 	beq.w	8008814 <_dtoa_r+0x474>
 80089da:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80089dc:	1e7b      	subs	r3, r7, #1
 80089de:	9314      	str	r3, [sp, #80]	; 0x50
 80089e0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80089e4:	2b30      	cmp	r3, #48	; 0x30
 80089e6:	d0f8      	beq.n	80089da <_dtoa_r+0x63a>
 80089e8:	46c2      	mov	sl, r8
 80089ea:	e03b      	b.n	8008a64 <_dtoa_r+0x6c4>
 80089ec:	4b9f      	ldr	r3, [pc, #636]	; (8008c6c <_dtoa_r+0x8cc>)
 80089ee:	f7f7 fd73 	bl	80004d8 <__aeabi_dmul>
 80089f2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80089f6:	e7bc      	b.n	8008972 <_dtoa_r+0x5d2>
 80089f8:	9f03      	ldr	r7, [sp, #12]
 80089fa:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80089fe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008a02:	4640      	mov	r0, r8
 8008a04:	4649      	mov	r1, r9
 8008a06:	f7f7 fe91 	bl	800072c <__aeabi_ddiv>
 8008a0a:	f7f8 f815 	bl	8000a38 <__aeabi_d2iz>
 8008a0e:	4604      	mov	r4, r0
 8008a10:	f7f7 fcf8 	bl	8000404 <__aeabi_i2d>
 8008a14:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008a18:	f7f7 fd5e 	bl	80004d8 <__aeabi_dmul>
 8008a1c:	4602      	mov	r2, r0
 8008a1e:	460b      	mov	r3, r1
 8008a20:	4640      	mov	r0, r8
 8008a22:	4649      	mov	r1, r9
 8008a24:	f7f7 fba0 	bl	8000168 <__aeabi_dsub>
 8008a28:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8008a2c:	f807 6b01 	strb.w	r6, [r7], #1
 8008a30:	9e03      	ldr	r6, [sp, #12]
 8008a32:	f8dd c020 	ldr.w	ip, [sp, #32]
 8008a36:	1bbe      	subs	r6, r7, r6
 8008a38:	45b4      	cmp	ip, r6
 8008a3a:	4602      	mov	r2, r0
 8008a3c:	460b      	mov	r3, r1
 8008a3e:	d136      	bne.n	8008aae <_dtoa_r+0x70e>
 8008a40:	f7f7 fb94 	bl	800016c <__adddf3>
 8008a44:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008a48:	4680      	mov	r8, r0
 8008a4a:	4689      	mov	r9, r1
 8008a4c:	f7f7 ffd4 	bl	80009f8 <__aeabi_dcmpgt>
 8008a50:	bb58      	cbnz	r0, 8008aaa <_dtoa_r+0x70a>
 8008a52:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008a56:	4640      	mov	r0, r8
 8008a58:	4649      	mov	r1, r9
 8008a5a:	f7f7 ffa5 	bl	80009a8 <__aeabi_dcmpeq>
 8008a5e:	b108      	cbz	r0, 8008a64 <_dtoa_r+0x6c4>
 8008a60:	07e1      	lsls	r1, r4, #31
 8008a62:	d422      	bmi.n	8008aaa <_dtoa_r+0x70a>
 8008a64:	4628      	mov	r0, r5
 8008a66:	4659      	mov	r1, fp
 8008a68:	f001 f876 	bl	8009b58 <_Bfree>
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	703b      	strb	r3, [r7, #0]
 8008a70:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008a72:	f10a 0001 	add.w	r0, sl, #1
 8008a76:	6018      	str	r0, [r3, #0]
 8008a78:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	f43f acde 	beq.w	800843c <_dtoa_r+0x9c>
 8008a80:	601f      	str	r7, [r3, #0]
 8008a82:	e4db      	b.n	800843c <_dtoa_r+0x9c>
 8008a84:	4627      	mov	r7, r4
 8008a86:	463b      	mov	r3, r7
 8008a88:	461f      	mov	r7, r3
 8008a8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008a8e:	2a39      	cmp	r2, #57	; 0x39
 8008a90:	d107      	bne.n	8008aa2 <_dtoa_r+0x702>
 8008a92:	9a03      	ldr	r2, [sp, #12]
 8008a94:	429a      	cmp	r2, r3
 8008a96:	d1f7      	bne.n	8008a88 <_dtoa_r+0x6e8>
 8008a98:	2230      	movs	r2, #48	; 0x30
 8008a9a:	9903      	ldr	r1, [sp, #12]
 8008a9c:	f108 0801 	add.w	r8, r8, #1
 8008aa0:	700a      	strb	r2, [r1, #0]
 8008aa2:	781a      	ldrb	r2, [r3, #0]
 8008aa4:	3201      	adds	r2, #1
 8008aa6:	701a      	strb	r2, [r3, #0]
 8008aa8:	e79e      	b.n	80089e8 <_dtoa_r+0x648>
 8008aaa:	46d0      	mov	r8, sl
 8008aac:	e7eb      	b.n	8008a86 <_dtoa_r+0x6e6>
 8008aae:	2200      	movs	r2, #0
 8008ab0:	4b6e      	ldr	r3, [pc, #440]	; (8008c6c <_dtoa_r+0x8cc>)
 8008ab2:	f7f7 fd11 	bl	80004d8 <__aeabi_dmul>
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	2300      	movs	r3, #0
 8008aba:	4680      	mov	r8, r0
 8008abc:	4689      	mov	r9, r1
 8008abe:	f7f7 ff73 	bl	80009a8 <__aeabi_dcmpeq>
 8008ac2:	2800      	cmp	r0, #0
 8008ac4:	d09b      	beq.n	80089fe <_dtoa_r+0x65e>
 8008ac6:	e7cd      	b.n	8008a64 <_dtoa_r+0x6c4>
 8008ac8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008aca:	2a00      	cmp	r2, #0
 8008acc:	f000 80d0 	beq.w	8008c70 <_dtoa_r+0x8d0>
 8008ad0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008ad2:	2a01      	cmp	r2, #1
 8008ad4:	f300 80ae 	bgt.w	8008c34 <_dtoa_r+0x894>
 8008ad8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008ada:	2a00      	cmp	r2, #0
 8008adc:	f000 80a6 	beq.w	8008c2c <_dtoa_r+0x88c>
 8008ae0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008ae4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008ae6:	9f06      	ldr	r7, [sp, #24]
 8008ae8:	9a06      	ldr	r2, [sp, #24]
 8008aea:	2101      	movs	r1, #1
 8008aec:	441a      	add	r2, r3
 8008aee:	9206      	str	r2, [sp, #24]
 8008af0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008af2:	4628      	mov	r0, r5
 8008af4:	441a      	add	r2, r3
 8008af6:	9209      	str	r2, [sp, #36]	; 0x24
 8008af8:	f001 f92e 	bl	8009d58 <__i2b>
 8008afc:	4606      	mov	r6, r0
 8008afe:	2f00      	cmp	r7, #0
 8008b00:	dd0c      	ble.n	8008b1c <_dtoa_r+0x77c>
 8008b02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	dd09      	ble.n	8008b1c <_dtoa_r+0x77c>
 8008b08:	42bb      	cmp	r3, r7
 8008b0a:	bfa8      	it	ge
 8008b0c:	463b      	movge	r3, r7
 8008b0e:	9a06      	ldr	r2, [sp, #24]
 8008b10:	1aff      	subs	r7, r7, r3
 8008b12:	1ad2      	subs	r2, r2, r3
 8008b14:	9206      	str	r2, [sp, #24]
 8008b16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b18:	1ad3      	subs	r3, r2, r3
 8008b1a:	9309      	str	r3, [sp, #36]	; 0x24
 8008b1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b1e:	b1f3      	cbz	r3, 8008b5e <_dtoa_r+0x7be>
 8008b20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	f000 80a8 	beq.w	8008c78 <_dtoa_r+0x8d8>
 8008b28:	2c00      	cmp	r4, #0
 8008b2a:	dd10      	ble.n	8008b4e <_dtoa_r+0x7ae>
 8008b2c:	4631      	mov	r1, r6
 8008b2e:	4622      	mov	r2, r4
 8008b30:	4628      	mov	r0, r5
 8008b32:	f001 f9cf 	bl	8009ed4 <__pow5mult>
 8008b36:	465a      	mov	r2, fp
 8008b38:	4601      	mov	r1, r0
 8008b3a:	4606      	mov	r6, r0
 8008b3c:	4628      	mov	r0, r5
 8008b3e:	f001 f921 	bl	8009d84 <__multiply>
 8008b42:	4680      	mov	r8, r0
 8008b44:	4659      	mov	r1, fp
 8008b46:	4628      	mov	r0, r5
 8008b48:	f001 f806 	bl	8009b58 <_Bfree>
 8008b4c:	46c3      	mov	fp, r8
 8008b4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b50:	1b1a      	subs	r2, r3, r4
 8008b52:	d004      	beq.n	8008b5e <_dtoa_r+0x7be>
 8008b54:	4659      	mov	r1, fp
 8008b56:	4628      	mov	r0, r5
 8008b58:	f001 f9bc 	bl	8009ed4 <__pow5mult>
 8008b5c:	4683      	mov	fp, r0
 8008b5e:	2101      	movs	r1, #1
 8008b60:	4628      	mov	r0, r5
 8008b62:	f001 f8f9 	bl	8009d58 <__i2b>
 8008b66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b68:	4604      	mov	r4, r0
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	f340 8086 	ble.w	8008c7c <_dtoa_r+0x8dc>
 8008b70:	461a      	mov	r2, r3
 8008b72:	4601      	mov	r1, r0
 8008b74:	4628      	mov	r0, r5
 8008b76:	f001 f9ad 	bl	8009ed4 <__pow5mult>
 8008b7a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008b7c:	4604      	mov	r4, r0
 8008b7e:	2b01      	cmp	r3, #1
 8008b80:	dd7f      	ble.n	8008c82 <_dtoa_r+0x8e2>
 8008b82:	f04f 0800 	mov.w	r8, #0
 8008b86:	6923      	ldr	r3, [r4, #16]
 8008b88:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008b8c:	6918      	ldr	r0, [r3, #16]
 8008b8e:	f001 f895 	bl	8009cbc <__hi0bits>
 8008b92:	f1c0 0020 	rsb	r0, r0, #32
 8008b96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b98:	4418      	add	r0, r3
 8008b9a:	f010 001f 	ands.w	r0, r0, #31
 8008b9e:	f000 8092 	beq.w	8008cc6 <_dtoa_r+0x926>
 8008ba2:	f1c0 0320 	rsb	r3, r0, #32
 8008ba6:	2b04      	cmp	r3, #4
 8008ba8:	f340 808a 	ble.w	8008cc0 <_dtoa_r+0x920>
 8008bac:	f1c0 001c 	rsb	r0, r0, #28
 8008bb0:	9b06      	ldr	r3, [sp, #24]
 8008bb2:	4407      	add	r7, r0
 8008bb4:	4403      	add	r3, r0
 8008bb6:	9306      	str	r3, [sp, #24]
 8008bb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bba:	4403      	add	r3, r0
 8008bbc:	9309      	str	r3, [sp, #36]	; 0x24
 8008bbe:	9b06      	ldr	r3, [sp, #24]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	dd05      	ble.n	8008bd0 <_dtoa_r+0x830>
 8008bc4:	4659      	mov	r1, fp
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	4628      	mov	r0, r5
 8008bca:	f001 f9dd 	bl	8009f88 <__lshift>
 8008bce:	4683      	mov	fp, r0
 8008bd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	dd05      	ble.n	8008be2 <_dtoa_r+0x842>
 8008bd6:	4621      	mov	r1, r4
 8008bd8:	461a      	mov	r2, r3
 8008bda:	4628      	mov	r0, r5
 8008bdc:	f001 f9d4 	bl	8009f88 <__lshift>
 8008be0:	4604      	mov	r4, r0
 8008be2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d070      	beq.n	8008cca <_dtoa_r+0x92a>
 8008be8:	4621      	mov	r1, r4
 8008bea:	4658      	mov	r0, fp
 8008bec:	f001 fa3c 	bl	800a068 <__mcmp>
 8008bf0:	2800      	cmp	r0, #0
 8008bf2:	da6a      	bge.n	8008cca <_dtoa_r+0x92a>
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	4659      	mov	r1, fp
 8008bf8:	220a      	movs	r2, #10
 8008bfa:	4628      	mov	r0, r5
 8008bfc:	f000 ffce 	bl	8009b9c <__multadd>
 8008c00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c02:	4683      	mov	fp, r0
 8008c04:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	f000 8194 	beq.w	8008f36 <_dtoa_r+0xb96>
 8008c0e:	4631      	mov	r1, r6
 8008c10:	2300      	movs	r3, #0
 8008c12:	220a      	movs	r2, #10
 8008c14:	4628      	mov	r0, r5
 8008c16:	f000 ffc1 	bl	8009b9c <__multadd>
 8008c1a:	f1b9 0f00 	cmp.w	r9, #0
 8008c1e:	4606      	mov	r6, r0
 8008c20:	f300 8093 	bgt.w	8008d4a <_dtoa_r+0x9aa>
 8008c24:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008c26:	2b02      	cmp	r3, #2
 8008c28:	dc57      	bgt.n	8008cda <_dtoa_r+0x93a>
 8008c2a:	e08e      	b.n	8008d4a <_dtoa_r+0x9aa>
 8008c2c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008c2e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008c32:	e757      	b.n	8008ae4 <_dtoa_r+0x744>
 8008c34:	9b08      	ldr	r3, [sp, #32]
 8008c36:	1e5c      	subs	r4, r3, #1
 8008c38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c3a:	42a3      	cmp	r3, r4
 8008c3c:	bfb7      	itett	lt
 8008c3e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008c40:	1b1c      	subge	r4, r3, r4
 8008c42:	1ae2      	sublt	r2, r4, r3
 8008c44:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008c46:	bfbe      	ittt	lt
 8008c48:	940a      	strlt	r4, [sp, #40]	; 0x28
 8008c4a:	189b      	addlt	r3, r3, r2
 8008c4c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008c4e:	9b08      	ldr	r3, [sp, #32]
 8008c50:	bfb8      	it	lt
 8008c52:	2400      	movlt	r4, #0
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	bfbb      	ittet	lt
 8008c58:	9b06      	ldrlt	r3, [sp, #24]
 8008c5a:	9a08      	ldrlt	r2, [sp, #32]
 8008c5c:	9f06      	ldrge	r7, [sp, #24]
 8008c5e:	1a9f      	sublt	r7, r3, r2
 8008c60:	bfac      	ite	ge
 8008c62:	9b08      	ldrge	r3, [sp, #32]
 8008c64:	2300      	movlt	r3, #0
 8008c66:	e73f      	b.n	8008ae8 <_dtoa_r+0x748>
 8008c68:	3fe00000 	.word	0x3fe00000
 8008c6c:	40240000 	.word	0x40240000
 8008c70:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008c72:	9f06      	ldr	r7, [sp, #24]
 8008c74:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8008c76:	e742      	b.n	8008afe <_dtoa_r+0x75e>
 8008c78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c7a:	e76b      	b.n	8008b54 <_dtoa_r+0x7b4>
 8008c7c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008c7e:	2b01      	cmp	r3, #1
 8008c80:	dc19      	bgt.n	8008cb6 <_dtoa_r+0x916>
 8008c82:	9b04      	ldr	r3, [sp, #16]
 8008c84:	b9bb      	cbnz	r3, 8008cb6 <_dtoa_r+0x916>
 8008c86:	9b05      	ldr	r3, [sp, #20]
 8008c88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c8c:	b99b      	cbnz	r3, 8008cb6 <_dtoa_r+0x916>
 8008c8e:	9b05      	ldr	r3, [sp, #20]
 8008c90:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008c94:	0d1b      	lsrs	r3, r3, #20
 8008c96:	051b      	lsls	r3, r3, #20
 8008c98:	b183      	cbz	r3, 8008cbc <_dtoa_r+0x91c>
 8008c9a:	f04f 0801 	mov.w	r8, #1
 8008c9e:	9b06      	ldr	r3, [sp, #24]
 8008ca0:	3301      	adds	r3, #1
 8008ca2:	9306      	str	r3, [sp, #24]
 8008ca4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ca6:	3301      	adds	r3, #1
 8008ca8:	9309      	str	r3, [sp, #36]	; 0x24
 8008caa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	f47f af6a 	bne.w	8008b86 <_dtoa_r+0x7e6>
 8008cb2:	2001      	movs	r0, #1
 8008cb4:	e76f      	b.n	8008b96 <_dtoa_r+0x7f6>
 8008cb6:	f04f 0800 	mov.w	r8, #0
 8008cba:	e7f6      	b.n	8008caa <_dtoa_r+0x90a>
 8008cbc:	4698      	mov	r8, r3
 8008cbe:	e7f4      	b.n	8008caa <_dtoa_r+0x90a>
 8008cc0:	f43f af7d 	beq.w	8008bbe <_dtoa_r+0x81e>
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	301c      	adds	r0, #28
 8008cc8:	e772      	b.n	8008bb0 <_dtoa_r+0x810>
 8008cca:	9b08      	ldr	r3, [sp, #32]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	dc36      	bgt.n	8008d3e <_dtoa_r+0x99e>
 8008cd0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008cd2:	2b02      	cmp	r3, #2
 8008cd4:	dd33      	ble.n	8008d3e <_dtoa_r+0x99e>
 8008cd6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008cda:	f1b9 0f00 	cmp.w	r9, #0
 8008cde:	d10d      	bne.n	8008cfc <_dtoa_r+0x95c>
 8008ce0:	4621      	mov	r1, r4
 8008ce2:	464b      	mov	r3, r9
 8008ce4:	2205      	movs	r2, #5
 8008ce6:	4628      	mov	r0, r5
 8008ce8:	f000 ff58 	bl	8009b9c <__multadd>
 8008cec:	4601      	mov	r1, r0
 8008cee:	4604      	mov	r4, r0
 8008cf0:	4658      	mov	r0, fp
 8008cf2:	f001 f9b9 	bl	800a068 <__mcmp>
 8008cf6:	2800      	cmp	r0, #0
 8008cf8:	f73f adb8 	bgt.w	800886c <_dtoa_r+0x4cc>
 8008cfc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008cfe:	9f03      	ldr	r7, [sp, #12]
 8008d00:	ea6f 0a03 	mvn.w	sl, r3
 8008d04:	f04f 0800 	mov.w	r8, #0
 8008d08:	4621      	mov	r1, r4
 8008d0a:	4628      	mov	r0, r5
 8008d0c:	f000 ff24 	bl	8009b58 <_Bfree>
 8008d10:	2e00      	cmp	r6, #0
 8008d12:	f43f aea7 	beq.w	8008a64 <_dtoa_r+0x6c4>
 8008d16:	f1b8 0f00 	cmp.w	r8, #0
 8008d1a:	d005      	beq.n	8008d28 <_dtoa_r+0x988>
 8008d1c:	45b0      	cmp	r8, r6
 8008d1e:	d003      	beq.n	8008d28 <_dtoa_r+0x988>
 8008d20:	4641      	mov	r1, r8
 8008d22:	4628      	mov	r0, r5
 8008d24:	f000 ff18 	bl	8009b58 <_Bfree>
 8008d28:	4631      	mov	r1, r6
 8008d2a:	4628      	mov	r0, r5
 8008d2c:	f000 ff14 	bl	8009b58 <_Bfree>
 8008d30:	e698      	b.n	8008a64 <_dtoa_r+0x6c4>
 8008d32:	2400      	movs	r4, #0
 8008d34:	4626      	mov	r6, r4
 8008d36:	e7e1      	b.n	8008cfc <_dtoa_r+0x95c>
 8008d38:	46c2      	mov	sl, r8
 8008d3a:	4626      	mov	r6, r4
 8008d3c:	e596      	b.n	800886c <_dtoa_r+0x4cc>
 8008d3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d40:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	f000 80fd 	beq.w	8008f44 <_dtoa_r+0xba4>
 8008d4a:	2f00      	cmp	r7, #0
 8008d4c:	dd05      	ble.n	8008d5a <_dtoa_r+0x9ba>
 8008d4e:	4631      	mov	r1, r6
 8008d50:	463a      	mov	r2, r7
 8008d52:	4628      	mov	r0, r5
 8008d54:	f001 f918 	bl	8009f88 <__lshift>
 8008d58:	4606      	mov	r6, r0
 8008d5a:	f1b8 0f00 	cmp.w	r8, #0
 8008d5e:	d05c      	beq.n	8008e1a <_dtoa_r+0xa7a>
 8008d60:	4628      	mov	r0, r5
 8008d62:	6871      	ldr	r1, [r6, #4]
 8008d64:	f000 feb8 	bl	8009ad8 <_Balloc>
 8008d68:	4607      	mov	r7, r0
 8008d6a:	b928      	cbnz	r0, 8008d78 <_dtoa_r+0x9d8>
 8008d6c:	4602      	mov	r2, r0
 8008d6e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008d72:	4b7f      	ldr	r3, [pc, #508]	; (8008f70 <_dtoa_r+0xbd0>)
 8008d74:	f7ff bb28 	b.w	80083c8 <_dtoa_r+0x28>
 8008d78:	6932      	ldr	r2, [r6, #16]
 8008d7a:	f106 010c 	add.w	r1, r6, #12
 8008d7e:	3202      	adds	r2, #2
 8008d80:	0092      	lsls	r2, r2, #2
 8008d82:	300c      	adds	r0, #12
 8008d84:	f7fd fbee 	bl	8006564 <memcpy>
 8008d88:	2201      	movs	r2, #1
 8008d8a:	4639      	mov	r1, r7
 8008d8c:	4628      	mov	r0, r5
 8008d8e:	f001 f8fb 	bl	8009f88 <__lshift>
 8008d92:	46b0      	mov	r8, r6
 8008d94:	4606      	mov	r6, r0
 8008d96:	9b03      	ldr	r3, [sp, #12]
 8008d98:	3301      	adds	r3, #1
 8008d9a:	9308      	str	r3, [sp, #32]
 8008d9c:	9b03      	ldr	r3, [sp, #12]
 8008d9e:	444b      	add	r3, r9
 8008da0:	930a      	str	r3, [sp, #40]	; 0x28
 8008da2:	9b04      	ldr	r3, [sp, #16]
 8008da4:	f003 0301 	and.w	r3, r3, #1
 8008da8:	9309      	str	r3, [sp, #36]	; 0x24
 8008daa:	9b08      	ldr	r3, [sp, #32]
 8008dac:	4621      	mov	r1, r4
 8008dae:	3b01      	subs	r3, #1
 8008db0:	4658      	mov	r0, fp
 8008db2:	9304      	str	r3, [sp, #16]
 8008db4:	f7ff fa68 	bl	8008288 <quorem>
 8008db8:	4603      	mov	r3, r0
 8008dba:	4641      	mov	r1, r8
 8008dbc:	3330      	adds	r3, #48	; 0x30
 8008dbe:	9006      	str	r0, [sp, #24]
 8008dc0:	4658      	mov	r0, fp
 8008dc2:	930b      	str	r3, [sp, #44]	; 0x2c
 8008dc4:	f001 f950 	bl	800a068 <__mcmp>
 8008dc8:	4632      	mov	r2, r6
 8008dca:	4681      	mov	r9, r0
 8008dcc:	4621      	mov	r1, r4
 8008dce:	4628      	mov	r0, r5
 8008dd0:	f001 f966 	bl	800a0a0 <__mdiff>
 8008dd4:	68c2      	ldr	r2, [r0, #12]
 8008dd6:	4607      	mov	r7, r0
 8008dd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008dda:	bb02      	cbnz	r2, 8008e1e <_dtoa_r+0xa7e>
 8008ddc:	4601      	mov	r1, r0
 8008dde:	4658      	mov	r0, fp
 8008de0:	f001 f942 	bl	800a068 <__mcmp>
 8008de4:	4602      	mov	r2, r0
 8008de6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008de8:	4639      	mov	r1, r7
 8008dea:	4628      	mov	r0, r5
 8008dec:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8008df0:	f000 feb2 	bl	8009b58 <_Bfree>
 8008df4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008df6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008df8:	9f08      	ldr	r7, [sp, #32]
 8008dfa:	ea43 0102 	orr.w	r1, r3, r2
 8008dfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e00:	430b      	orrs	r3, r1
 8008e02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e04:	d10d      	bne.n	8008e22 <_dtoa_r+0xa82>
 8008e06:	2b39      	cmp	r3, #57	; 0x39
 8008e08:	d029      	beq.n	8008e5e <_dtoa_r+0xabe>
 8008e0a:	f1b9 0f00 	cmp.w	r9, #0
 8008e0e:	dd01      	ble.n	8008e14 <_dtoa_r+0xa74>
 8008e10:	9b06      	ldr	r3, [sp, #24]
 8008e12:	3331      	adds	r3, #49	; 0x31
 8008e14:	9a04      	ldr	r2, [sp, #16]
 8008e16:	7013      	strb	r3, [r2, #0]
 8008e18:	e776      	b.n	8008d08 <_dtoa_r+0x968>
 8008e1a:	4630      	mov	r0, r6
 8008e1c:	e7b9      	b.n	8008d92 <_dtoa_r+0x9f2>
 8008e1e:	2201      	movs	r2, #1
 8008e20:	e7e2      	b.n	8008de8 <_dtoa_r+0xa48>
 8008e22:	f1b9 0f00 	cmp.w	r9, #0
 8008e26:	db06      	blt.n	8008e36 <_dtoa_r+0xa96>
 8008e28:	9922      	ldr	r1, [sp, #136]	; 0x88
 8008e2a:	ea41 0909 	orr.w	r9, r1, r9
 8008e2e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008e30:	ea59 0101 	orrs.w	r1, r9, r1
 8008e34:	d120      	bne.n	8008e78 <_dtoa_r+0xad8>
 8008e36:	2a00      	cmp	r2, #0
 8008e38:	ddec      	ble.n	8008e14 <_dtoa_r+0xa74>
 8008e3a:	4659      	mov	r1, fp
 8008e3c:	2201      	movs	r2, #1
 8008e3e:	4628      	mov	r0, r5
 8008e40:	9308      	str	r3, [sp, #32]
 8008e42:	f001 f8a1 	bl	8009f88 <__lshift>
 8008e46:	4621      	mov	r1, r4
 8008e48:	4683      	mov	fp, r0
 8008e4a:	f001 f90d 	bl	800a068 <__mcmp>
 8008e4e:	2800      	cmp	r0, #0
 8008e50:	9b08      	ldr	r3, [sp, #32]
 8008e52:	dc02      	bgt.n	8008e5a <_dtoa_r+0xaba>
 8008e54:	d1de      	bne.n	8008e14 <_dtoa_r+0xa74>
 8008e56:	07da      	lsls	r2, r3, #31
 8008e58:	d5dc      	bpl.n	8008e14 <_dtoa_r+0xa74>
 8008e5a:	2b39      	cmp	r3, #57	; 0x39
 8008e5c:	d1d8      	bne.n	8008e10 <_dtoa_r+0xa70>
 8008e5e:	2339      	movs	r3, #57	; 0x39
 8008e60:	9a04      	ldr	r2, [sp, #16]
 8008e62:	7013      	strb	r3, [r2, #0]
 8008e64:	463b      	mov	r3, r7
 8008e66:	461f      	mov	r7, r3
 8008e68:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8008e6c:	3b01      	subs	r3, #1
 8008e6e:	2a39      	cmp	r2, #57	; 0x39
 8008e70:	d050      	beq.n	8008f14 <_dtoa_r+0xb74>
 8008e72:	3201      	adds	r2, #1
 8008e74:	701a      	strb	r2, [r3, #0]
 8008e76:	e747      	b.n	8008d08 <_dtoa_r+0x968>
 8008e78:	2a00      	cmp	r2, #0
 8008e7a:	dd03      	ble.n	8008e84 <_dtoa_r+0xae4>
 8008e7c:	2b39      	cmp	r3, #57	; 0x39
 8008e7e:	d0ee      	beq.n	8008e5e <_dtoa_r+0xabe>
 8008e80:	3301      	adds	r3, #1
 8008e82:	e7c7      	b.n	8008e14 <_dtoa_r+0xa74>
 8008e84:	9a08      	ldr	r2, [sp, #32]
 8008e86:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008e88:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008e8c:	428a      	cmp	r2, r1
 8008e8e:	d02a      	beq.n	8008ee6 <_dtoa_r+0xb46>
 8008e90:	4659      	mov	r1, fp
 8008e92:	2300      	movs	r3, #0
 8008e94:	220a      	movs	r2, #10
 8008e96:	4628      	mov	r0, r5
 8008e98:	f000 fe80 	bl	8009b9c <__multadd>
 8008e9c:	45b0      	cmp	r8, r6
 8008e9e:	4683      	mov	fp, r0
 8008ea0:	f04f 0300 	mov.w	r3, #0
 8008ea4:	f04f 020a 	mov.w	r2, #10
 8008ea8:	4641      	mov	r1, r8
 8008eaa:	4628      	mov	r0, r5
 8008eac:	d107      	bne.n	8008ebe <_dtoa_r+0xb1e>
 8008eae:	f000 fe75 	bl	8009b9c <__multadd>
 8008eb2:	4680      	mov	r8, r0
 8008eb4:	4606      	mov	r6, r0
 8008eb6:	9b08      	ldr	r3, [sp, #32]
 8008eb8:	3301      	adds	r3, #1
 8008eba:	9308      	str	r3, [sp, #32]
 8008ebc:	e775      	b.n	8008daa <_dtoa_r+0xa0a>
 8008ebe:	f000 fe6d 	bl	8009b9c <__multadd>
 8008ec2:	4631      	mov	r1, r6
 8008ec4:	4680      	mov	r8, r0
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	220a      	movs	r2, #10
 8008eca:	4628      	mov	r0, r5
 8008ecc:	f000 fe66 	bl	8009b9c <__multadd>
 8008ed0:	4606      	mov	r6, r0
 8008ed2:	e7f0      	b.n	8008eb6 <_dtoa_r+0xb16>
 8008ed4:	f1b9 0f00 	cmp.w	r9, #0
 8008ed8:	bfcc      	ite	gt
 8008eda:	464f      	movgt	r7, r9
 8008edc:	2701      	movle	r7, #1
 8008ede:	f04f 0800 	mov.w	r8, #0
 8008ee2:	9a03      	ldr	r2, [sp, #12]
 8008ee4:	4417      	add	r7, r2
 8008ee6:	4659      	mov	r1, fp
 8008ee8:	2201      	movs	r2, #1
 8008eea:	4628      	mov	r0, r5
 8008eec:	9308      	str	r3, [sp, #32]
 8008eee:	f001 f84b 	bl	8009f88 <__lshift>
 8008ef2:	4621      	mov	r1, r4
 8008ef4:	4683      	mov	fp, r0
 8008ef6:	f001 f8b7 	bl	800a068 <__mcmp>
 8008efa:	2800      	cmp	r0, #0
 8008efc:	dcb2      	bgt.n	8008e64 <_dtoa_r+0xac4>
 8008efe:	d102      	bne.n	8008f06 <_dtoa_r+0xb66>
 8008f00:	9b08      	ldr	r3, [sp, #32]
 8008f02:	07db      	lsls	r3, r3, #31
 8008f04:	d4ae      	bmi.n	8008e64 <_dtoa_r+0xac4>
 8008f06:	463b      	mov	r3, r7
 8008f08:	461f      	mov	r7, r3
 8008f0a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008f0e:	2a30      	cmp	r2, #48	; 0x30
 8008f10:	d0fa      	beq.n	8008f08 <_dtoa_r+0xb68>
 8008f12:	e6f9      	b.n	8008d08 <_dtoa_r+0x968>
 8008f14:	9a03      	ldr	r2, [sp, #12]
 8008f16:	429a      	cmp	r2, r3
 8008f18:	d1a5      	bne.n	8008e66 <_dtoa_r+0xac6>
 8008f1a:	2331      	movs	r3, #49	; 0x31
 8008f1c:	f10a 0a01 	add.w	sl, sl, #1
 8008f20:	e779      	b.n	8008e16 <_dtoa_r+0xa76>
 8008f22:	4b14      	ldr	r3, [pc, #80]	; (8008f74 <_dtoa_r+0xbd4>)
 8008f24:	f7ff baa8 	b.w	8008478 <_dtoa_r+0xd8>
 8008f28:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	f47f aa81 	bne.w	8008432 <_dtoa_r+0x92>
 8008f30:	4b11      	ldr	r3, [pc, #68]	; (8008f78 <_dtoa_r+0xbd8>)
 8008f32:	f7ff baa1 	b.w	8008478 <_dtoa_r+0xd8>
 8008f36:	f1b9 0f00 	cmp.w	r9, #0
 8008f3a:	dc03      	bgt.n	8008f44 <_dtoa_r+0xba4>
 8008f3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008f3e:	2b02      	cmp	r3, #2
 8008f40:	f73f aecb 	bgt.w	8008cda <_dtoa_r+0x93a>
 8008f44:	9f03      	ldr	r7, [sp, #12]
 8008f46:	4621      	mov	r1, r4
 8008f48:	4658      	mov	r0, fp
 8008f4a:	f7ff f99d 	bl	8008288 <quorem>
 8008f4e:	9a03      	ldr	r2, [sp, #12]
 8008f50:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008f54:	f807 3b01 	strb.w	r3, [r7], #1
 8008f58:	1aba      	subs	r2, r7, r2
 8008f5a:	4591      	cmp	r9, r2
 8008f5c:	ddba      	ble.n	8008ed4 <_dtoa_r+0xb34>
 8008f5e:	4659      	mov	r1, fp
 8008f60:	2300      	movs	r3, #0
 8008f62:	220a      	movs	r2, #10
 8008f64:	4628      	mov	r0, r5
 8008f66:	f000 fe19 	bl	8009b9c <__multadd>
 8008f6a:	4683      	mov	fp, r0
 8008f6c:	e7eb      	b.n	8008f46 <_dtoa_r+0xba6>
 8008f6e:	bf00      	nop
 8008f70:	0800cce0 	.word	0x0800cce0
 8008f74:	0800cae0 	.word	0x0800cae0
 8008f78:	0800cc61 	.word	0x0800cc61

08008f7c <__sflush_r>:
 8008f7c:	898a      	ldrh	r2, [r1, #12]
 8008f7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f80:	4605      	mov	r5, r0
 8008f82:	0710      	lsls	r0, r2, #28
 8008f84:	460c      	mov	r4, r1
 8008f86:	d457      	bmi.n	8009038 <__sflush_r+0xbc>
 8008f88:	684b      	ldr	r3, [r1, #4]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	dc04      	bgt.n	8008f98 <__sflush_r+0x1c>
 8008f8e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	dc01      	bgt.n	8008f98 <__sflush_r+0x1c>
 8008f94:	2000      	movs	r0, #0
 8008f96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f9a:	2e00      	cmp	r6, #0
 8008f9c:	d0fa      	beq.n	8008f94 <__sflush_r+0x18>
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008fa4:	682f      	ldr	r7, [r5, #0]
 8008fa6:	602b      	str	r3, [r5, #0]
 8008fa8:	d032      	beq.n	8009010 <__sflush_r+0x94>
 8008faa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008fac:	89a3      	ldrh	r3, [r4, #12]
 8008fae:	075a      	lsls	r2, r3, #29
 8008fb0:	d505      	bpl.n	8008fbe <__sflush_r+0x42>
 8008fb2:	6863      	ldr	r3, [r4, #4]
 8008fb4:	1ac0      	subs	r0, r0, r3
 8008fb6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008fb8:	b10b      	cbz	r3, 8008fbe <__sflush_r+0x42>
 8008fba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008fbc:	1ac0      	subs	r0, r0, r3
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	4602      	mov	r2, r0
 8008fc2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008fc4:	4628      	mov	r0, r5
 8008fc6:	6a21      	ldr	r1, [r4, #32]
 8008fc8:	47b0      	blx	r6
 8008fca:	1c43      	adds	r3, r0, #1
 8008fcc:	89a3      	ldrh	r3, [r4, #12]
 8008fce:	d106      	bne.n	8008fde <__sflush_r+0x62>
 8008fd0:	6829      	ldr	r1, [r5, #0]
 8008fd2:	291d      	cmp	r1, #29
 8008fd4:	d82c      	bhi.n	8009030 <__sflush_r+0xb4>
 8008fd6:	4a29      	ldr	r2, [pc, #164]	; (800907c <__sflush_r+0x100>)
 8008fd8:	40ca      	lsrs	r2, r1
 8008fda:	07d6      	lsls	r6, r2, #31
 8008fdc:	d528      	bpl.n	8009030 <__sflush_r+0xb4>
 8008fde:	2200      	movs	r2, #0
 8008fe0:	6062      	str	r2, [r4, #4]
 8008fe2:	6922      	ldr	r2, [r4, #16]
 8008fe4:	04d9      	lsls	r1, r3, #19
 8008fe6:	6022      	str	r2, [r4, #0]
 8008fe8:	d504      	bpl.n	8008ff4 <__sflush_r+0x78>
 8008fea:	1c42      	adds	r2, r0, #1
 8008fec:	d101      	bne.n	8008ff2 <__sflush_r+0x76>
 8008fee:	682b      	ldr	r3, [r5, #0]
 8008ff0:	b903      	cbnz	r3, 8008ff4 <__sflush_r+0x78>
 8008ff2:	6560      	str	r0, [r4, #84]	; 0x54
 8008ff4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ff6:	602f      	str	r7, [r5, #0]
 8008ff8:	2900      	cmp	r1, #0
 8008ffa:	d0cb      	beq.n	8008f94 <__sflush_r+0x18>
 8008ffc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009000:	4299      	cmp	r1, r3
 8009002:	d002      	beq.n	800900a <__sflush_r+0x8e>
 8009004:	4628      	mov	r0, r5
 8009006:	f001 fa33 	bl	800a470 <_free_r>
 800900a:	2000      	movs	r0, #0
 800900c:	6360      	str	r0, [r4, #52]	; 0x34
 800900e:	e7c2      	b.n	8008f96 <__sflush_r+0x1a>
 8009010:	6a21      	ldr	r1, [r4, #32]
 8009012:	2301      	movs	r3, #1
 8009014:	4628      	mov	r0, r5
 8009016:	47b0      	blx	r6
 8009018:	1c41      	adds	r1, r0, #1
 800901a:	d1c7      	bne.n	8008fac <__sflush_r+0x30>
 800901c:	682b      	ldr	r3, [r5, #0]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d0c4      	beq.n	8008fac <__sflush_r+0x30>
 8009022:	2b1d      	cmp	r3, #29
 8009024:	d001      	beq.n	800902a <__sflush_r+0xae>
 8009026:	2b16      	cmp	r3, #22
 8009028:	d101      	bne.n	800902e <__sflush_r+0xb2>
 800902a:	602f      	str	r7, [r5, #0]
 800902c:	e7b2      	b.n	8008f94 <__sflush_r+0x18>
 800902e:	89a3      	ldrh	r3, [r4, #12]
 8009030:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009034:	81a3      	strh	r3, [r4, #12]
 8009036:	e7ae      	b.n	8008f96 <__sflush_r+0x1a>
 8009038:	690f      	ldr	r7, [r1, #16]
 800903a:	2f00      	cmp	r7, #0
 800903c:	d0aa      	beq.n	8008f94 <__sflush_r+0x18>
 800903e:	0793      	lsls	r3, r2, #30
 8009040:	bf18      	it	ne
 8009042:	2300      	movne	r3, #0
 8009044:	680e      	ldr	r6, [r1, #0]
 8009046:	bf08      	it	eq
 8009048:	694b      	ldreq	r3, [r1, #20]
 800904a:	1bf6      	subs	r6, r6, r7
 800904c:	600f      	str	r7, [r1, #0]
 800904e:	608b      	str	r3, [r1, #8]
 8009050:	2e00      	cmp	r6, #0
 8009052:	dd9f      	ble.n	8008f94 <__sflush_r+0x18>
 8009054:	4633      	mov	r3, r6
 8009056:	463a      	mov	r2, r7
 8009058:	4628      	mov	r0, r5
 800905a:	6a21      	ldr	r1, [r4, #32]
 800905c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8009060:	47e0      	blx	ip
 8009062:	2800      	cmp	r0, #0
 8009064:	dc06      	bgt.n	8009074 <__sflush_r+0xf8>
 8009066:	89a3      	ldrh	r3, [r4, #12]
 8009068:	f04f 30ff 	mov.w	r0, #4294967295
 800906c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009070:	81a3      	strh	r3, [r4, #12]
 8009072:	e790      	b.n	8008f96 <__sflush_r+0x1a>
 8009074:	4407      	add	r7, r0
 8009076:	1a36      	subs	r6, r6, r0
 8009078:	e7ea      	b.n	8009050 <__sflush_r+0xd4>
 800907a:	bf00      	nop
 800907c:	20400001 	.word	0x20400001

08009080 <_fflush_r>:
 8009080:	b538      	push	{r3, r4, r5, lr}
 8009082:	690b      	ldr	r3, [r1, #16]
 8009084:	4605      	mov	r5, r0
 8009086:	460c      	mov	r4, r1
 8009088:	b913      	cbnz	r3, 8009090 <_fflush_r+0x10>
 800908a:	2500      	movs	r5, #0
 800908c:	4628      	mov	r0, r5
 800908e:	bd38      	pop	{r3, r4, r5, pc}
 8009090:	b118      	cbz	r0, 800909a <_fflush_r+0x1a>
 8009092:	6983      	ldr	r3, [r0, #24]
 8009094:	b90b      	cbnz	r3, 800909a <_fflush_r+0x1a>
 8009096:	f000 f887 	bl	80091a8 <__sinit>
 800909a:	4b14      	ldr	r3, [pc, #80]	; (80090ec <_fflush_r+0x6c>)
 800909c:	429c      	cmp	r4, r3
 800909e:	d11b      	bne.n	80090d8 <_fflush_r+0x58>
 80090a0:	686c      	ldr	r4, [r5, #4]
 80090a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d0ef      	beq.n	800908a <_fflush_r+0xa>
 80090aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80090ac:	07d0      	lsls	r0, r2, #31
 80090ae:	d404      	bmi.n	80090ba <_fflush_r+0x3a>
 80090b0:	0599      	lsls	r1, r3, #22
 80090b2:	d402      	bmi.n	80090ba <_fflush_r+0x3a>
 80090b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090b6:	f000 fc80 	bl	80099ba <__retarget_lock_acquire_recursive>
 80090ba:	4628      	mov	r0, r5
 80090bc:	4621      	mov	r1, r4
 80090be:	f7ff ff5d 	bl	8008f7c <__sflush_r>
 80090c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80090c4:	4605      	mov	r5, r0
 80090c6:	07da      	lsls	r2, r3, #31
 80090c8:	d4e0      	bmi.n	800908c <_fflush_r+0xc>
 80090ca:	89a3      	ldrh	r3, [r4, #12]
 80090cc:	059b      	lsls	r3, r3, #22
 80090ce:	d4dd      	bmi.n	800908c <_fflush_r+0xc>
 80090d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090d2:	f000 fc73 	bl	80099bc <__retarget_lock_release_recursive>
 80090d6:	e7d9      	b.n	800908c <_fflush_r+0xc>
 80090d8:	4b05      	ldr	r3, [pc, #20]	; (80090f0 <_fflush_r+0x70>)
 80090da:	429c      	cmp	r4, r3
 80090dc:	d101      	bne.n	80090e2 <_fflush_r+0x62>
 80090de:	68ac      	ldr	r4, [r5, #8]
 80090e0:	e7df      	b.n	80090a2 <_fflush_r+0x22>
 80090e2:	4b04      	ldr	r3, [pc, #16]	; (80090f4 <_fflush_r+0x74>)
 80090e4:	429c      	cmp	r4, r3
 80090e6:	bf08      	it	eq
 80090e8:	68ec      	ldreq	r4, [r5, #12]
 80090ea:	e7da      	b.n	80090a2 <_fflush_r+0x22>
 80090ec:	0800cd14 	.word	0x0800cd14
 80090f0:	0800cd34 	.word	0x0800cd34
 80090f4:	0800ccf4 	.word	0x0800ccf4

080090f8 <std>:
 80090f8:	2300      	movs	r3, #0
 80090fa:	b510      	push	{r4, lr}
 80090fc:	4604      	mov	r4, r0
 80090fe:	e9c0 3300 	strd	r3, r3, [r0]
 8009102:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009106:	6083      	str	r3, [r0, #8]
 8009108:	8181      	strh	r1, [r0, #12]
 800910a:	6643      	str	r3, [r0, #100]	; 0x64
 800910c:	81c2      	strh	r2, [r0, #14]
 800910e:	6183      	str	r3, [r0, #24]
 8009110:	4619      	mov	r1, r3
 8009112:	2208      	movs	r2, #8
 8009114:	305c      	adds	r0, #92	; 0x5c
 8009116:	f7fd fa33 	bl	8006580 <memset>
 800911a:	4b05      	ldr	r3, [pc, #20]	; (8009130 <std+0x38>)
 800911c:	6224      	str	r4, [r4, #32]
 800911e:	6263      	str	r3, [r4, #36]	; 0x24
 8009120:	4b04      	ldr	r3, [pc, #16]	; (8009134 <std+0x3c>)
 8009122:	62a3      	str	r3, [r4, #40]	; 0x28
 8009124:	4b04      	ldr	r3, [pc, #16]	; (8009138 <std+0x40>)
 8009126:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009128:	4b04      	ldr	r3, [pc, #16]	; (800913c <std+0x44>)
 800912a:	6323      	str	r3, [r4, #48]	; 0x30
 800912c:	bd10      	pop	{r4, pc}
 800912e:	bf00      	nop
 8009130:	0800abbd 	.word	0x0800abbd
 8009134:	0800abdf 	.word	0x0800abdf
 8009138:	0800ac17 	.word	0x0800ac17
 800913c:	0800ac3b 	.word	0x0800ac3b

08009140 <_cleanup_r>:
 8009140:	4901      	ldr	r1, [pc, #4]	; (8009148 <_cleanup_r+0x8>)
 8009142:	f000 b8af 	b.w	80092a4 <_fwalk_reent>
 8009146:	bf00      	nop
 8009148:	08009081 	.word	0x08009081

0800914c <__sfmoreglue>:
 800914c:	2268      	movs	r2, #104	; 0x68
 800914e:	b570      	push	{r4, r5, r6, lr}
 8009150:	1e4d      	subs	r5, r1, #1
 8009152:	4355      	muls	r5, r2
 8009154:	460e      	mov	r6, r1
 8009156:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800915a:	f001 f9f1 	bl	800a540 <_malloc_r>
 800915e:	4604      	mov	r4, r0
 8009160:	b140      	cbz	r0, 8009174 <__sfmoreglue+0x28>
 8009162:	2100      	movs	r1, #0
 8009164:	e9c0 1600 	strd	r1, r6, [r0]
 8009168:	300c      	adds	r0, #12
 800916a:	60a0      	str	r0, [r4, #8]
 800916c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009170:	f7fd fa06 	bl	8006580 <memset>
 8009174:	4620      	mov	r0, r4
 8009176:	bd70      	pop	{r4, r5, r6, pc}

08009178 <__sfp_lock_acquire>:
 8009178:	4801      	ldr	r0, [pc, #4]	; (8009180 <__sfp_lock_acquire+0x8>)
 800917a:	f000 bc1e 	b.w	80099ba <__retarget_lock_acquire_recursive>
 800917e:	bf00      	nop
 8009180:	200010f5 	.word	0x200010f5

08009184 <__sfp_lock_release>:
 8009184:	4801      	ldr	r0, [pc, #4]	; (800918c <__sfp_lock_release+0x8>)
 8009186:	f000 bc19 	b.w	80099bc <__retarget_lock_release_recursive>
 800918a:	bf00      	nop
 800918c:	200010f5 	.word	0x200010f5

08009190 <__sinit_lock_acquire>:
 8009190:	4801      	ldr	r0, [pc, #4]	; (8009198 <__sinit_lock_acquire+0x8>)
 8009192:	f000 bc12 	b.w	80099ba <__retarget_lock_acquire_recursive>
 8009196:	bf00      	nop
 8009198:	200010f6 	.word	0x200010f6

0800919c <__sinit_lock_release>:
 800919c:	4801      	ldr	r0, [pc, #4]	; (80091a4 <__sinit_lock_release+0x8>)
 800919e:	f000 bc0d 	b.w	80099bc <__retarget_lock_release_recursive>
 80091a2:	bf00      	nop
 80091a4:	200010f6 	.word	0x200010f6

080091a8 <__sinit>:
 80091a8:	b510      	push	{r4, lr}
 80091aa:	4604      	mov	r4, r0
 80091ac:	f7ff fff0 	bl	8009190 <__sinit_lock_acquire>
 80091b0:	69a3      	ldr	r3, [r4, #24]
 80091b2:	b11b      	cbz	r3, 80091bc <__sinit+0x14>
 80091b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091b8:	f7ff bff0 	b.w	800919c <__sinit_lock_release>
 80091bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80091c0:	6523      	str	r3, [r4, #80]	; 0x50
 80091c2:	4b13      	ldr	r3, [pc, #76]	; (8009210 <__sinit+0x68>)
 80091c4:	4a13      	ldr	r2, [pc, #76]	; (8009214 <__sinit+0x6c>)
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	62a2      	str	r2, [r4, #40]	; 0x28
 80091ca:	42a3      	cmp	r3, r4
 80091cc:	bf08      	it	eq
 80091ce:	2301      	moveq	r3, #1
 80091d0:	4620      	mov	r0, r4
 80091d2:	bf08      	it	eq
 80091d4:	61a3      	streq	r3, [r4, #24]
 80091d6:	f000 f81f 	bl	8009218 <__sfp>
 80091da:	6060      	str	r0, [r4, #4]
 80091dc:	4620      	mov	r0, r4
 80091de:	f000 f81b 	bl	8009218 <__sfp>
 80091e2:	60a0      	str	r0, [r4, #8]
 80091e4:	4620      	mov	r0, r4
 80091e6:	f000 f817 	bl	8009218 <__sfp>
 80091ea:	2200      	movs	r2, #0
 80091ec:	2104      	movs	r1, #4
 80091ee:	60e0      	str	r0, [r4, #12]
 80091f0:	6860      	ldr	r0, [r4, #4]
 80091f2:	f7ff ff81 	bl	80090f8 <std>
 80091f6:	2201      	movs	r2, #1
 80091f8:	2109      	movs	r1, #9
 80091fa:	68a0      	ldr	r0, [r4, #8]
 80091fc:	f7ff ff7c 	bl	80090f8 <std>
 8009200:	2202      	movs	r2, #2
 8009202:	2112      	movs	r1, #18
 8009204:	68e0      	ldr	r0, [r4, #12]
 8009206:	f7ff ff77 	bl	80090f8 <std>
 800920a:	2301      	movs	r3, #1
 800920c:	61a3      	str	r3, [r4, #24]
 800920e:	e7d1      	b.n	80091b4 <__sinit+0xc>
 8009210:	0800cacc 	.word	0x0800cacc
 8009214:	08009141 	.word	0x08009141

08009218 <__sfp>:
 8009218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800921a:	4607      	mov	r7, r0
 800921c:	f7ff ffac 	bl	8009178 <__sfp_lock_acquire>
 8009220:	4b1e      	ldr	r3, [pc, #120]	; (800929c <__sfp+0x84>)
 8009222:	681e      	ldr	r6, [r3, #0]
 8009224:	69b3      	ldr	r3, [r6, #24]
 8009226:	b913      	cbnz	r3, 800922e <__sfp+0x16>
 8009228:	4630      	mov	r0, r6
 800922a:	f7ff ffbd 	bl	80091a8 <__sinit>
 800922e:	3648      	adds	r6, #72	; 0x48
 8009230:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009234:	3b01      	subs	r3, #1
 8009236:	d503      	bpl.n	8009240 <__sfp+0x28>
 8009238:	6833      	ldr	r3, [r6, #0]
 800923a:	b30b      	cbz	r3, 8009280 <__sfp+0x68>
 800923c:	6836      	ldr	r6, [r6, #0]
 800923e:	e7f7      	b.n	8009230 <__sfp+0x18>
 8009240:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009244:	b9d5      	cbnz	r5, 800927c <__sfp+0x64>
 8009246:	4b16      	ldr	r3, [pc, #88]	; (80092a0 <__sfp+0x88>)
 8009248:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800924c:	60e3      	str	r3, [r4, #12]
 800924e:	6665      	str	r5, [r4, #100]	; 0x64
 8009250:	f000 fbb2 	bl	80099b8 <__retarget_lock_init_recursive>
 8009254:	f7ff ff96 	bl	8009184 <__sfp_lock_release>
 8009258:	2208      	movs	r2, #8
 800925a:	4629      	mov	r1, r5
 800925c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009260:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009264:	6025      	str	r5, [r4, #0]
 8009266:	61a5      	str	r5, [r4, #24]
 8009268:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800926c:	f7fd f988 	bl	8006580 <memset>
 8009270:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009274:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009278:	4620      	mov	r0, r4
 800927a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800927c:	3468      	adds	r4, #104	; 0x68
 800927e:	e7d9      	b.n	8009234 <__sfp+0x1c>
 8009280:	2104      	movs	r1, #4
 8009282:	4638      	mov	r0, r7
 8009284:	f7ff ff62 	bl	800914c <__sfmoreglue>
 8009288:	4604      	mov	r4, r0
 800928a:	6030      	str	r0, [r6, #0]
 800928c:	2800      	cmp	r0, #0
 800928e:	d1d5      	bne.n	800923c <__sfp+0x24>
 8009290:	f7ff ff78 	bl	8009184 <__sfp_lock_release>
 8009294:	230c      	movs	r3, #12
 8009296:	603b      	str	r3, [r7, #0]
 8009298:	e7ee      	b.n	8009278 <__sfp+0x60>
 800929a:	bf00      	nop
 800929c:	0800cacc 	.word	0x0800cacc
 80092a0:	ffff0001 	.word	0xffff0001

080092a4 <_fwalk_reent>:
 80092a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092a8:	4606      	mov	r6, r0
 80092aa:	4688      	mov	r8, r1
 80092ac:	2700      	movs	r7, #0
 80092ae:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80092b2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80092b6:	f1b9 0901 	subs.w	r9, r9, #1
 80092ba:	d505      	bpl.n	80092c8 <_fwalk_reent+0x24>
 80092bc:	6824      	ldr	r4, [r4, #0]
 80092be:	2c00      	cmp	r4, #0
 80092c0:	d1f7      	bne.n	80092b2 <_fwalk_reent+0xe>
 80092c2:	4638      	mov	r0, r7
 80092c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092c8:	89ab      	ldrh	r3, [r5, #12]
 80092ca:	2b01      	cmp	r3, #1
 80092cc:	d907      	bls.n	80092de <_fwalk_reent+0x3a>
 80092ce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80092d2:	3301      	adds	r3, #1
 80092d4:	d003      	beq.n	80092de <_fwalk_reent+0x3a>
 80092d6:	4629      	mov	r1, r5
 80092d8:	4630      	mov	r0, r6
 80092da:	47c0      	blx	r8
 80092dc:	4307      	orrs	r7, r0
 80092de:	3568      	adds	r5, #104	; 0x68
 80092e0:	e7e9      	b.n	80092b6 <_fwalk_reent+0x12>

080092e2 <rshift>:
 80092e2:	6903      	ldr	r3, [r0, #16]
 80092e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80092e8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80092ec:	f100 0414 	add.w	r4, r0, #20
 80092f0:	ea4f 1261 	mov.w	r2, r1, asr #5
 80092f4:	dd46      	ble.n	8009384 <rshift+0xa2>
 80092f6:	f011 011f 	ands.w	r1, r1, #31
 80092fa:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80092fe:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009302:	d10c      	bne.n	800931e <rshift+0x3c>
 8009304:	4629      	mov	r1, r5
 8009306:	f100 0710 	add.w	r7, r0, #16
 800930a:	42b1      	cmp	r1, r6
 800930c:	d335      	bcc.n	800937a <rshift+0x98>
 800930e:	1a9b      	subs	r3, r3, r2
 8009310:	009b      	lsls	r3, r3, #2
 8009312:	1eea      	subs	r2, r5, #3
 8009314:	4296      	cmp	r6, r2
 8009316:	bf38      	it	cc
 8009318:	2300      	movcc	r3, #0
 800931a:	4423      	add	r3, r4
 800931c:	e015      	b.n	800934a <rshift+0x68>
 800931e:	46a1      	mov	r9, r4
 8009320:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009324:	f1c1 0820 	rsb	r8, r1, #32
 8009328:	40cf      	lsrs	r7, r1
 800932a:	f105 0e04 	add.w	lr, r5, #4
 800932e:	4576      	cmp	r6, lr
 8009330:	46f4      	mov	ip, lr
 8009332:	d816      	bhi.n	8009362 <rshift+0x80>
 8009334:	1a9a      	subs	r2, r3, r2
 8009336:	0092      	lsls	r2, r2, #2
 8009338:	3a04      	subs	r2, #4
 800933a:	3501      	adds	r5, #1
 800933c:	42ae      	cmp	r6, r5
 800933e:	bf38      	it	cc
 8009340:	2200      	movcc	r2, #0
 8009342:	18a3      	adds	r3, r4, r2
 8009344:	50a7      	str	r7, [r4, r2]
 8009346:	b107      	cbz	r7, 800934a <rshift+0x68>
 8009348:	3304      	adds	r3, #4
 800934a:	42a3      	cmp	r3, r4
 800934c:	eba3 0204 	sub.w	r2, r3, r4
 8009350:	bf08      	it	eq
 8009352:	2300      	moveq	r3, #0
 8009354:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009358:	6102      	str	r2, [r0, #16]
 800935a:	bf08      	it	eq
 800935c:	6143      	streq	r3, [r0, #20]
 800935e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009362:	f8dc c000 	ldr.w	ip, [ip]
 8009366:	fa0c fc08 	lsl.w	ip, ip, r8
 800936a:	ea4c 0707 	orr.w	r7, ip, r7
 800936e:	f849 7b04 	str.w	r7, [r9], #4
 8009372:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009376:	40cf      	lsrs	r7, r1
 8009378:	e7d9      	b.n	800932e <rshift+0x4c>
 800937a:	f851 cb04 	ldr.w	ip, [r1], #4
 800937e:	f847 cf04 	str.w	ip, [r7, #4]!
 8009382:	e7c2      	b.n	800930a <rshift+0x28>
 8009384:	4623      	mov	r3, r4
 8009386:	e7e0      	b.n	800934a <rshift+0x68>

08009388 <__hexdig_fun>:
 8009388:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800938c:	2b09      	cmp	r3, #9
 800938e:	d802      	bhi.n	8009396 <__hexdig_fun+0xe>
 8009390:	3820      	subs	r0, #32
 8009392:	b2c0      	uxtb	r0, r0
 8009394:	4770      	bx	lr
 8009396:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800939a:	2b05      	cmp	r3, #5
 800939c:	d801      	bhi.n	80093a2 <__hexdig_fun+0x1a>
 800939e:	3847      	subs	r0, #71	; 0x47
 80093a0:	e7f7      	b.n	8009392 <__hexdig_fun+0xa>
 80093a2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80093a6:	2b05      	cmp	r3, #5
 80093a8:	d801      	bhi.n	80093ae <__hexdig_fun+0x26>
 80093aa:	3827      	subs	r0, #39	; 0x27
 80093ac:	e7f1      	b.n	8009392 <__hexdig_fun+0xa>
 80093ae:	2000      	movs	r0, #0
 80093b0:	4770      	bx	lr
	...

080093b4 <__gethex>:
 80093b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093b8:	b08b      	sub	sp, #44	; 0x2c
 80093ba:	9305      	str	r3, [sp, #20]
 80093bc:	4bb2      	ldr	r3, [pc, #712]	; (8009688 <__gethex+0x2d4>)
 80093be:	9002      	str	r0, [sp, #8]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	468b      	mov	fp, r1
 80093c4:	4618      	mov	r0, r3
 80093c6:	4690      	mov	r8, r2
 80093c8:	9303      	str	r3, [sp, #12]
 80093ca:	f7f6 fec1 	bl	8000150 <strlen>
 80093ce:	4682      	mov	sl, r0
 80093d0:	9b03      	ldr	r3, [sp, #12]
 80093d2:	f8db 2000 	ldr.w	r2, [fp]
 80093d6:	4403      	add	r3, r0
 80093d8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80093dc:	9306      	str	r3, [sp, #24]
 80093de:	1c93      	adds	r3, r2, #2
 80093e0:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80093e4:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80093e8:	32fe      	adds	r2, #254	; 0xfe
 80093ea:	18d1      	adds	r1, r2, r3
 80093ec:	461f      	mov	r7, r3
 80093ee:	f813 0b01 	ldrb.w	r0, [r3], #1
 80093f2:	9101      	str	r1, [sp, #4]
 80093f4:	2830      	cmp	r0, #48	; 0x30
 80093f6:	d0f8      	beq.n	80093ea <__gethex+0x36>
 80093f8:	f7ff ffc6 	bl	8009388 <__hexdig_fun>
 80093fc:	4604      	mov	r4, r0
 80093fe:	2800      	cmp	r0, #0
 8009400:	d13a      	bne.n	8009478 <__gethex+0xc4>
 8009402:	4652      	mov	r2, sl
 8009404:	4638      	mov	r0, r7
 8009406:	9903      	ldr	r1, [sp, #12]
 8009408:	f001 fc1b 	bl	800ac42 <strncmp>
 800940c:	4605      	mov	r5, r0
 800940e:	2800      	cmp	r0, #0
 8009410:	d166      	bne.n	80094e0 <__gethex+0x12c>
 8009412:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009416:	eb07 060a 	add.w	r6, r7, sl
 800941a:	f7ff ffb5 	bl	8009388 <__hexdig_fun>
 800941e:	2800      	cmp	r0, #0
 8009420:	d060      	beq.n	80094e4 <__gethex+0x130>
 8009422:	4633      	mov	r3, r6
 8009424:	7818      	ldrb	r0, [r3, #0]
 8009426:	461f      	mov	r7, r3
 8009428:	2830      	cmp	r0, #48	; 0x30
 800942a:	f103 0301 	add.w	r3, r3, #1
 800942e:	d0f9      	beq.n	8009424 <__gethex+0x70>
 8009430:	f7ff ffaa 	bl	8009388 <__hexdig_fun>
 8009434:	2301      	movs	r3, #1
 8009436:	fab0 f480 	clz	r4, r0
 800943a:	4635      	mov	r5, r6
 800943c:	0964      	lsrs	r4, r4, #5
 800943e:	9301      	str	r3, [sp, #4]
 8009440:	463a      	mov	r2, r7
 8009442:	4616      	mov	r6, r2
 8009444:	7830      	ldrb	r0, [r6, #0]
 8009446:	3201      	adds	r2, #1
 8009448:	f7ff ff9e 	bl	8009388 <__hexdig_fun>
 800944c:	2800      	cmp	r0, #0
 800944e:	d1f8      	bne.n	8009442 <__gethex+0x8e>
 8009450:	4652      	mov	r2, sl
 8009452:	4630      	mov	r0, r6
 8009454:	9903      	ldr	r1, [sp, #12]
 8009456:	f001 fbf4 	bl	800ac42 <strncmp>
 800945a:	b980      	cbnz	r0, 800947e <__gethex+0xca>
 800945c:	b94d      	cbnz	r5, 8009472 <__gethex+0xbe>
 800945e:	eb06 050a 	add.w	r5, r6, sl
 8009462:	462a      	mov	r2, r5
 8009464:	4616      	mov	r6, r2
 8009466:	7830      	ldrb	r0, [r6, #0]
 8009468:	3201      	adds	r2, #1
 800946a:	f7ff ff8d 	bl	8009388 <__hexdig_fun>
 800946e:	2800      	cmp	r0, #0
 8009470:	d1f8      	bne.n	8009464 <__gethex+0xb0>
 8009472:	1bad      	subs	r5, r5, r6
 8009474:	00ad      	lsls	r5, r5, #2
 8009476:	e004      	b.n	8009482 <__gethex+0xce>
 8009478:	2400      	movs	r4, #0
 800947a:	4625      	mov	r5, r4
 800947c:	e7e0      	b.n	8009440 <__gethex+0x8c>
 800947e:	2d00      	cmp	r5, #0
 8009480:	d1f7      	bne.n	8009472 <__gethex+0xbe>
 8009482:	7833      	ldrb	r3, [r6, #0]
 8009484:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009488:	2b50      	cmp	r3, #80	; 0x50
 800948a:	d139      	bne.n	8009500 <__gethex+0x14c>
 800948c:	7873      	ldrb	r3, [r6, #1]
 800948e:	2b2b      	cmp	r3, #43	; 0x2b
 8009490:	d02a      	beq.n	80094e8 <__gethex+0x134>
 8009492:	2b2d      	cmp	r3, #45	; 0x2d
 8009494:	d02c      	beq.n	80094f0 <__gethex+0x13c>
 8009496:	f04f 0900 	mov.w	r9, #0
 800949a:	1c71      	adds	r1, r6, #1
 800949c:	7808      	ldrb	r0, [r1, #0]
 800949e:	f7ff ff73 	bl	8009388 <__hexdig_fun>
 80094a2:	1e43      	subs	r3, r0, #1
 80094a4:	b2db      	uxtb	r3, r3
 80094a6:	2b18      	cmp	r3, #24
 80094a8:	d82a      	bhi.n	8009500 <__gethex+0x14c>
 80094aa:	f1a0 0210 	sub.w	r2, r0, #16
 80094ae:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80094b2:	f7ff ff69 	bl	8009388 <__hexdig_fun>
 80094b6:	1e43      	subs	r3, r0, #1
 80094b8:	b2db      	uxtb	r3, r3
 80094ba:	2b18      	cmp	r3, #24
 80094bc:	d91b      	bls.n	80094f6 <__gethex+0x142>
 80094be:	f1b9 0f00 	cmp.w	r9, #0
 80094c2:	d000      	beq.n	80094c6 <__gethex+0x112>
 80094c4:	4252      	negs	r2, r2
 80094c6:	4415      	add	r5, r2
 80094c8:	f8cb 1000 	str.w	r1, [fp]
 80094cc:	b1d4      	cbz	r4, 8009504 <__gethex+0x150>
 80094ce:	9b01      	ldr	r3, [sp, #4]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	bf14      	ite	ne
 80094d4:	2700      	movne	r7, #0
 80094d6:	2706      	moveq	r7, #6
 80094d8:	4638      	mov	r0, r7
 80094da:	b00b      	add	sp, #44	; 0x2c
 80094dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094e0:	463e      	mov	r6, r7
 80094e2:	4625      	mov	r5, r4
 80094e4:	2401      	movs	r4, #1
 80094e6:	e7cc      	b.n	8009482 <__gethex+0xce>
 80094e8:	f04f 0900 	mov.w	r9, #0
 80094ec:	1cb1      	adds	r1, r6, #2
 80094ee:	e7d5      	b.n	800949c <__gethex+0xe8>
 80094f0:	f04f 0901 	mov.w	r9, #1
 80094f4:	e7fa      	b.n	80094ec <__gethex+0x138>
 80094f6:	230a      	movs	r3, #10
 80094f8:	fb03 0202 	mla	r2, r3, r2, r0
 80094fc:	3a10      	subs	r2, #16
 80094fe:	e7d6      	b.n	80094ae <__gethex+0xfa>
 8009500:	4631      	mov	r1, r6
 8009502:	e7e1      	b.n	80094c8 <__gethex+0x114>
 8009504:	4621      	mov	r1, r4
 8009506:	1bf3      	subs	r3, r6, r7
 8009508:	3b01      	subs	r3, #1
 800950a:	2b07      	cmp	r3, #7
 800950c:	dc0a      	bgt.n	8009524 <__gethex+0x170>
 800950e:	9802      	ldr	r0, [sp, #8]
 8009510:	f000 fae2 	bl	8009ad8 <_Balloc>
 8009514:	4604      	mov	r4, r0
 8009516:	b940      	cbnz	r0, 800952a <__gethex+0x176>
 8009518:	4602      	mov	r2, r0
 800951a:	21de      	movs	r1, #222	; 0xde
 800951c:	4b5b      	ldr	r3, [pc, #364]	; (800968c <__gethex+0x2d8>)
 800951e:	485c      	ldr	r0, [pc, #368]	; (8009690 <__gethex+0x2dc>)
 8009520:	f001 fbc2 	bl	800aca8 <__assert_func>
 8009524:	3101      	adds	r1, #1
 8009526:	105b      	asrs	r3, r3, #1
 8009528:	e7ef      	b.n	800950a <__gethex+0x156>
 800952a:	f04f 0b00 	mov.w	fp, #0
 800952e:	f100 0914 	add.w	r9, r0, #20
 8009532:	f1ca 0301 	rsb	r3, sl, #1
 8009536:	f8cd 9010 	str.w	r9, [sp, #16]
 800953a:	f8cd b004 	str.w	fp, [sp, #4]
 800953e:	9308      	str	r3, [sp, #32]
 8009540:	42b7      	cmp	r7, r6
 8009542:	d33f      	bcc.n	80095c4 <__gethex+0x210>
 8009544:	9f04      	ldr	r7, [sp, #16]
 8009546:	9b01      	ldr	r3, [sp, #4]
 8009548:	f847 3b04 	str.w	r3, [r7], #4
 800954c:	eba7 0709 	sub.w	r7, r7, r9
 8009550:	10bf      	asrs	r7, r7, #2
 8009552:	6127      	str	r7, [r4, #16]
 8009554:	4618      	mov	r0, r3
 8009556:	f000 fbb1 	bl	8009cbc <__hi0bits>
 800955a:	017f      	lsls	r7, r7, #5
 800955c:	f8d8 6000 	ldr.w	r6, [r8]
 8009560:	1a3f      	subs	r7, r7, r0
 8009562:	42b7      	cmp	r7, r6
 8009564:	dd62      	ble.n	800962c <__gethex+0x278>
 8009566:	1bbf      	subs	r7, r7, r6
 8009568:	4639      	mov	r1, r7
 800956a:	4620      	mov	r0, r4
 800956c:	f000 ff4b 	bl	800a406 <__any_on>
 8009570:	4682      	mov	sl, r0
 8009572:	b1a8      	cbz	r0, 80095a0 <__gethex+0x1ec>
 8009574:	f04f 0a01 	mov.w	sl, #1
 8009578:	1e7b      	subs	r3, r7, #1
 800957a:	1159      	asrs	r1, r3, #5
 800957c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009580:	f003 021f 	and.w	r2, r3, #31
 8009584:	fa0a f202 	lsl.w	r2, sl, r2
 8009588:	420a      	tst	r2, r1
 800958a:	d009      	beq.n	80095a0 <__gethex+0x1ec>
 800958c:	4553      	cmp	r3, sl
 800958e:	dd05      	ble.n	800959c <__gethex+0x1e8>
 8009590:	4620      	mov	r0, r4
 8009592:	1eb9      	subs	r1, r7, #2
 8009594:	f000 ff37 	bl	800a406 <__any_on>
 8009598:	2800      	cmp	r0, #0
 800959a:	d144      	bne.n	8009626 <__gethex+0x272>
 800959c:	f04f 0a02 	mov.w	sl, #2
 80095a0:	4639      	mov	r1, r7
 80095a2:	4620      	mov	r0, r4
 80095a4:	f7ff fe9d 	bl	80092e2 <rshift>
 80095a8:	443d      	add	r5, r7
 80095aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80095ae:	42ab      	cmp	r3, r5
 80095b0:	da4a      	bge.n	8009648 <__gethex+0x294>
 80095b2:	4621      	mov	r1, r4
 80095b4:	9802      	ldr	r0, [sp, #8]
 80095b6:	f000 facf 	bl	8009b58 <_Bfree>
 80095ba:	2300      	movs	r3, #0
 80095bc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80095be:	27a3      	movs	r7, #163	; 0xa3
 80095c0:	6013      	str	r3, [r2, #0]
 80095c2:	e789      	b.n	80094d8 <__gethex+0x124>
 80095c4:	1e73      	subs	r3, r6, #1
 80095c6:	9a06      	ldr	r2, [sp, #24]
 80095c8:	9307      	str	r3, [sp, #28]
 80095ca:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80095ce:	4293      	cmp	r3, r2
 80095d0:	d019      	beq.n	8009606 <__gethex+0x252>
 80095d2:	f1bb 0f20 	cmp.w	fp, #32
 80095d6:	d107      	bne.n	80095e8 <__gethex+0x234>
 80095d8:	9b04      	ldr	r3, [sp, #16]
 80095da:	9a01      	ldr	r2, [sp, #4]
 80095dc:	f843 2b04 	str.w	r2, [r3], #4
 80095e0:	9304      	str	r3, [sp, #16]
 80095e2:	2300      	movs	r3, #0
 80095e4:	469b      	mov	fp, r3
 80095e6:	9301      	str	r3, [sp, #4]
 80095e8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80095ec:	f7ff fecc 	bl	8009388 <__hexdig_fun>
 80095f0:	9b01      	ldr	r3, [sp, #4]
 80095f2:	f000 000f 	and.w	r0, r0, #15
 80095f6:	fa00 f00b 	lsl.w	r0, r0, fp
 80095fa:	4303      	orrs	r3, r0
 80095fc:	9301      	str	r3, [sp, #4]
 80095fe:	f10b 0b04 	add.w	fp, fp, #4
 8009602:	9b07      	ldr	r3, [sp, #28]
 8009604:	e00d      	b.n	8009622 <__gethex+0x26e>
 8009606:	9a08      	ldr	r2, [sp, #32]
 8009608:	1e73      	subs	r3, r6, #1
 800960a:	4413      	add	r3, r2
 800960c:	42bb      	cmp	r3, r7
 800960e:	d3e0      	bcc.n	80095d2 <__gethex+0x21e>
 8009610:	4618      	mov	r0, r3
 8009612:	4652      	mov	r2, sl
 8009614:	9903      	ldr	r1, [sp, #12]
 8009616:	9309      	str	r3, [sp, #36]	; 0x24
 8009618:	f001 fb13 	bl	800ac42 <strncmp>
 800961c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800961e:	2800      	cmp	r0, #0
 8009620:	d1d7      	bne.n	80095d2 <__gethex+0x21e>
 8009622:	461e      	mov	r6, r3
 8009624:	e78c      	b.n	8009540 <__gethex+0x18c>
 8009626:	f04f 0a03 	mov.w	sl, #3
 800962a:	e7b9      	b.n	80095a0 <__gethex+0x1ec>
 800962c:	da09      	bge.n	8009642 <__gethex+0x28e>
 800962e:	1bf7      	subs	r7, r6, r7
 8009630:	4621      	mov	r1, r4
 8009632:	463a      	mov	r2, r7
 8009634:	9802      	ldr	r0, [sp, #8]
 8009636:	f000 fca7 	bl	8009f88 <__lshift>
 800963a:	4604      	mov	r4, r0
 800963c:	1bed      	subs	r5, r5, r7
 800963e:	f100 0914 	add.w	r9, r0, #20
 8009642:	f04f 0a00 	mov.w	sl, #0
 8009646:	e7b0      	b.n	80095aa <__gethex+0x1f6>
 8009648:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800964c:	42a8      	cmp	r0, r5
 800964e:	dd72      	ble.n	8009736 <__gethex+0x382>
 8009650:	1b45      	subs	r5, r0, r5
 8009652:	42ae      	cmp	r6, r5
 8009654:	dc35      	bgt.n	80096c2 <__gethex+0x30e>
 8009656:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800965a:	2b02      	cmp	r3, #2
 800965c:	d029      	beq.n	80096b2 <__gethex+0x2fe>
 800965e:	2b03      	cmp	r3, #3
 8009660:	d02b      	beq.n	80096ba <__gethex+0x306>
 8009662:	2b01      	cmp	r3, #1
 8009664:	d11c      	bne.n	80096a0 <__gethex+0x2ec>
 8009666:	42ae      	cmp	r6, r5
 8009668:	d11a      	bne.n	80096a0 <__gethex+0x2ec>
 800966a:	2e01      	cmp	r6, #1
 800966c:	d112      	bne.n	8009694 <__gethex+0x2e0>
 800966e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009672:	9a05      	ldr	r2, [sp, #20]
 8009674:	2762      	movs	r7, #98	; 0x62
 8009676:	6013      	str	r3, [r2, #0]
 8009678:	2301      	movs	r3, #1
 800967a:	6123      	str	r3, [r4, #16]
 800967c:	f8c9 3000 	str.w	r3, [r9]
 8009680:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009682:	601c      	str	r4, [r3, #0]
 8009684:	e728      	b.n	80094d8 <__gethex+0x124>
 8009686:	bf00      	nop
 8009688:	0800cdbc 	.word	0x0800cdbc
 800968c:	0800cce0 	.word	0x0800cce0
 8009690:	0800cd54 	.word	0x0800cd54
 8009694:	4620      	mov	r0, r4
 8009696:	1e71      	subs	r1, r6, #1
 8009698:	f000 feb5 	bl	800a406 <__any_on>
 800969c:	2800      	cmp	r0, #0
 800969e:	d1e6      	bne.n	800966e <__gethex+0x2ba>
 80096a0:	4621      	mov	r1, r4
 80096a2:	9802      	ldr	r0, [sp, #8]
 80096a4:	f000 fa58 	bl	8009b58 <_Bfree>
 80096a8:	2300      	movs	r3, #0
 80096aa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80096ac:	2750      	movs	r7, #80	; 0x50
 80096ae:	6013      	str	r3, [r2, #0]
 80096b0:	e712      	b.n	80094d8 <__gethex+0x124>
 80096b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d1f3      	bne.n	80096a0 <__gethex+0x2ec>
 80096b8:	e7d9      	b.n	800966e <__gethex+0x2ba>
 80096ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d1d6      	bne.n	800966e <__gethex+0x2ba>
 80096c0:	e7ee      	b.n	80096a0 <__gethex+0x2ec>
 80096c2:	1e6f      	subs	r7, r5, #1
 80096c4:	f1ba 0f00 	cmp.w	sl, #0
 80096c8:	d132      	bne.n	8009730 <__gethex+0x37c>
 80096ca:	b127      	cbz	r7, 80096d6 <__gethex+0x322>
 80096cc:	4639      	mov	r1, r7
 80096ce:	4620      	mov	r0, r4
 80096d0:	f000 fe99 	bl	800a406 <__any_on>
 80096d4:	4682      	mov	sl, r0
 80096d6:	2101      	movs	r1, #1
 80096d8:	117b      	asrs	r3, r7, #5
 80096da:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80096de:	f007 071f 	and.w	r7, r7, #31
 80096e2:	fa01 f707 	lsl.w	r7, r1, r7
 80096e6:	421f      	tst	r7, r3
 80096e8:	f04f 0702 	mov.w	r7, #2
 80096ec:	4629      	mov	r1, r5
 80096ee:	4620      	mov	r0, r4
 80096f0:	bf18      	it	ne
 80096f2:	f04a 0a02 	orrne.w	sl, sl, #2
 80096f6:	1b76      	subs	r6, r6, r5
 80096f8:	f7ff fdf3 	bl	80092e2 <rshift>
 80096fc:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009700:	f1ba 0f00 	cmp.w	sl, #0
 8009704:	d048      	beq.n	8009798 <__gethex+0x3e4>
 8009706:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800970a:	2b02      	cmp	r3, #2
 800970c:	d015      	beq.n	800973a <__gethex+0x386>
 800970e:	2b03      	cmp	r3, #3
 8009710:	d017      	beq.n	8009742 <__gethex+0x38e>
 8009712:	2b01      	cmp	r3, #1
 8009714:	d109      	bne.n	800972a <__gethex+0x376>
 8009716:	f01a 0f02 	tst.w	sl, #2
 800971a:	d006      	beq.n	800972a <__gethex+0x376>
 800971c:	f8d9 0000 	ldr.w	r0, [r9]
 8009720:	ea4a 0a00 	orr.w	sl, sl, r0
 8009724:	f01a 0f01 	tst.w	sl, #1
 8009728:	d10e      	bne.n	8009748 <__gethex+0x394>
 800972a:	f047 0710 	orr.w	r7, r7, #16
 800972e:	e033      	b.n	8009798 <__gethex+0x3e4>
 8009730:	f04f 0a01 	mov.w	sl, #1
 8009734:	e7cf      	b.n	80096d6 <__gethex+0x322>
 8009736:	2701      	movs	r7, #1
 8009738:	e7e2      	b.n	8009700 <__gethex+0x34c>
 800973a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800973c:	f1c3 0301 	rsb	r3, r3, #1
 8009740:	9315      	str	r3, [sp, #84]	; 0x54
 8009742:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009744:	2b00      	cmp	r3, #0
 8009746:	d0f0      	beq.n	800972a <__gethex+0x376>
 8009748:	f04f 0c00 	mov.w	ip, #0
 800974c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009750:	f104 0314 	add.w	r3, r4, #20
 8009754:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009758:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800975c:	4618      	mov	r0, r3
 800975e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009762:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009766:	d01c      	beq.n	80097a2 <__gethex+0x3ee>
 8009768:	3201      	adds	r2, #1
 800976a:	6002      	str	r2, [r0, #0]
 800976c:	2f02      	cmp	r7, #2
 800976e:	f104 0314 	add.w	r3, r4, #20
 8009772:	d13d      	bne.n	80097f0 <__gethex+0x43c>
 8009774:	f8d8 2000 	ldr.w	r2, [r8]
 8009778:	3a01      	subs	r2, #1
 800977a:	42b2      	cmp	r2, r6
 800977c:	d10a      	bne.n	8009794 <__gethex+0x3e0>
 800977e:	2201      	movs	r2, #1
 8009780:	1171      	asrs	r1, r6, #5
 8009782:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009786:	f006 061f 	and.w	r6, r6, #31
 800978a:	fa02 f606 	lsl.w	r6, r2, r6
 800978e:	421e      	tst	r6, r3
 8009790:	bf18      	it	ne
 8009792:	4617      	movne	r7, r2
 8009794:	f047 0720 	orr.w	r7, r7, #32
 8009798:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800979a:	601c      	str	r4, [r3, #0]
 800979c:	9b05      	ldr	r3, [sp, #20]
 800979e:	601d      	str	r5, [r3, #0]
 80097a0:	e69a      	b.n	80094d8 <__gethex+0x124>
 80097a2:	4299      	cmp	r1, r3
 80097a4:	f843 cc04 	str.w	ip, [r3, #-4]
 80097a8:	d8d8      	bhi.n	800975c <__gethex+0x3a8>
 80097aa:	68a3      	ldr	r3, [r4, #8]
 80097ac:	459b      	cmp	fp, r3
 80097ae:	db17      	blt.n	80097e0 <__gethex+0x42c>
 80097b0:	6861      	ldr	r1, [r4, #4]
 80097b2:	9802      	ldr	r0, [sp, #8]
 80097b4:	3101      	adds	r1, #1
 80097b6:	f000 f98f 	bl	8009ad8 <_Balloc>
 80097ba:	4681      	mov	r9, r0
 80097bc:	b918      	cbnz	r0, 80097c6 <__gethex+0x412>
 80097be:	4602      	mov	r2, r0
 80097c0:	2184      	movs	r1, #132	; 0x84
 80097c2:	4b19      	ldr	r3, [pc, #100]	; (8009828 <__gethex+0x474>)
 80097c4:	e6ab      	b.n	800951e <__gethex+0x16a>
 80097c6:	6922      	ldr	r2, [r4, #16]
 80097c8:	f104 010c 	add.w	r1, r4, #12
 80097cc:	3202      	adds	r2, #2
 80097ce:	0092      	lsls	r2, r2, #2
 80097d0:	300c      	adds	r0, #12
 80097d2:	f7fc fec7 	bl	8006564 <memcpy>
 80097d6:	4621      	mov	r1, r4
 80097d8:	9802      	ldr	r0, [sp, #8]
 80097da:	f000 f9bd 	bl	8009b58 <_Bfree>
 80097de:	464c      	mov	r4, r9
 80097e0:	6923      	ldr	r3, [r4, #16]
 80097e2:	1c5a      	adds	r2, r3, #1
 80097e4:	6122      	str	r2, [r4, #16]
 80097e6:	2201      	movs	r2, #1
 80097e8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80097ec:	615a      	str	r2, [r3, #20]
 80097ee:	e7bd      	b.n	800976c <__gethex+0x3b8>
 80097f0:	6922      	ldr	r2, [r4, #16]
 80097f2:	455a      	cmp	r2, fp
 80097f4:	dd0b      	ble.n	800980e <__gethex+0x45a>
 80097f6:	2101      	movs	r1, #1
 80097f8:	4620      	mov	r0, r4
 80097fa:	f7ff fd72 	bl	80092e2 <rshift>
 80097fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009802:	3501      	adds	r5, #1
 8009804:	42ab      	cmp	r3, r5
 8009806:	f6ff aed4 	blt.w	80095b2 <__gethex+0x1fe>
 800980a:	2701      	movs	r7, #1
 800980c:	e7c2      	b.n	8009794 <__gethex+0x3e0>
 800980e:	f016 061f 	ands.w	r6, r6, #31
 8009812:	d0fa      	beq.n	800980a <__gethex+0x456>
 8009814:	4453      	add	r3, sl
 8009816:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800981a:	f000 fa4f 	bl	8009cbc <__hi0bits>
 800981e:	f1c6 0620 	rsb	r6, r6, #32
 8009822:	42b0      	cmp	r0, r6
 8009824:	dbe7      	blt.n	80097f6 <__gethex+0x442>
 8009826:	e7f0      	b.n	800980a <__gethex+0x456>
 8009828:	0800cce0 	.word	0x0800cce0

0800982c <L_shift>:
 800982c:	f1c2 0208 	rsb	r2, r2, #8
 8009830:	0092      	lsls	r2, r2, #2
 8009832:	b570      	push	{r4, r5, r6, lr}
 8009834:	f1c2 0620 	rsb	r6, r2, #32
 8009838:	6843      	ldr	r3, [r0, #4]
 800983a:	6804      	ldr	r4, [r0, #0]
 800983c:	fa03 f506 	lsl.w	r5, r3, r6
 8009840:	432c      	orrs	r4, r5
 8009842:	40d3      	lsrs	r3, r2
 8009844:	6004      	str	r4, [r0, #0]
 8009846:	f840 3f04 	str.w	r3, [r0, #4]!
 800984a:	4288      	cmp	r0, r1
 800984c:	d3f4      	bcc.n	8009838 <L_shift+0xc>
 800984e:	bd70      	pop	{r4, r5, r6, pc}

08009850 <__match>:
 8009850:	b530      	push	{r4, r5, lr}
 8009852:	6803      	ldr	r3, [r0, #0]
 8009854:	3301      	adds	r3, #1
 8009856:	f811 4b01 	ldrb.w	r4, [r1], #1
 800985a:	b914      	cbnz	r4, 8009862 <__match+0x12>
 800985c:	6003      	str	r3, [r0, #0]
 800985e:	2001      	movs	r0, #1
 8009860:	bd30      	pop	{r4, r5, pc}
 8009862:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009866:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800986a:	2d19      	cmp	r5, #25
 800986c:	bf98      	it	ls
 800986e:	3220      	addls	r2, #32
 8009870:	42a2      	cmp	r2, r4
 8009872:	d0f0      	beq.n	8009856 <__match+0x6>
 8009874:	2000      	movs	r0, #0
 8009876:	e7f3      	b.n	8009860 <__match+0x10>

08009878 <__hexnan>:
 8009878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800987c:	2500      	movs	r5, #0
 800987e:	680b      	ldr	r3, [r1, #0]
 8009880:	4682      	mov	sl, r0
 8009882:	115e      	asrs	r6, r3, #5
 8009884:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009888:	f013 031f 	ands.w	r3, r3, #31
 800988c:	bf18      	it	ne
 800988e:	3604      	addne	r6, #4
 8009890:	1f37      	subs	r7, r6, #4
 8009892:	46b9      	mov	r9, r7
 8009894:	463c      	mov	r4, r7
 8009896:	46ab      	mov	fp, r5
 8009898:	b087      	sub	sp, #28
 800989a:	4690      	mov	r8, r2
 800989c:	6802      	ldr	r2, [r0, #0]
 800989e:	9301      	str	r3, [sp, #4]
 80098a0:	f846 5c04 	str.w	r5, [r6, #-4]
 80098a4:	9502      	str	r5, [sp, #8]
 80098a6:	7851      	ldrb	r1, [r2, #1]
 80098a8:	1c53      	adds	r3, r2, #1
 80098aa:	9303      	str	r3, [sp, #12]
 80098ac:	b341      	cbz	r1, 8009900 <__hexnan+0x88>
 80098ae:	4608      	mov	r0, r1
 80098b0:	9205      	str	r2, [sp, #20]
 80098b2:	9104      	str	r1, [sp, #16]
 80098b4:	f7ff fd68 	bl	8009388 <__hexdig_fun>
 80098b8:	2800      	cmp	r0, #0
 80098ba:	d14f      	bne.n	800995c <__hexnan+0xe4>
 80098bc:	9904      	ldr	r1, [sp, #16]
 80098be:	9a05      	ldr	r2, [sp, #20]
 80098c0:	2920      	cmp	r1, #32
 80098c2:	d818      	bhi.n	80098f6 <__hexnan+0x7e>
 80098c4:	9b02      	ldr	r3, [sp, #8]
 80098c6:	459b      	cmp	fp, r3
 80098c8:	dd13      	ble.n	80098f2 <__hexnan+0x7a>
 80098ca:	454c      	cmp	r4, r9
 80098cc:	d206      	bcs.n	80098dc <__hexnan+0x64>
 80098ce:	2d07      	cmp	r5, #7
 80098d0:	dc04      	bgt.n	80098dc <__hexnan+0x64>
 80098d2:	462a      	mov	r2, r5
 80098d4:	4649      	mov	r1, r9
 80098d6:	4620      	mov	r0, r4
 80098d8:	f7ff ffa8 	bl	800982c <L_shift>
 80098dc:	4544      	cmp	r4, r8
 80098de:	d950      	bls.n	8009982 <__hexnan+0x10a>
 80098e0:	2300      	movs	r3, #0
 80098e2:	f1a4 0904 	sub.w	r9, r4, #4
 80098e6:	f844 3c04 	str.w	r3, [r4, #-4]
 80098ea:	461d      	mov	r5, r3
 80098ec:	464c      	mov	r4, r9
 80098ee:	f8cd b008 	str.w	fp, [sp, #8]
 80098f2:	9a03      	ldr	r2, [sp, #12]
 80098f4:	e7d7      	b.n	80098a6 <__hexnan+0x2e>
 80098f6:	2929      	cmp	r1, #41	; 0x29
 80098f8:	d156      	bne.n	80099a8 <__hexnan+0x130>
 80098fa:	3202      	adds	r2, #2
 80098fc:	f8ca 2000 	str.w	r2, [sl]
 8009900:	f1bb 0f00 	cmp.w	fp, #0
 8009904:	d050      	beq.n	80099a8 <__hexnan+0x130>
 8009906:	454c      	cmp	r4, r9
 8009908:	d206      	bcs.n	8009918 <__hexnan+0xa0>
 800990a:	2d07      	cmp	r5, #7
 800990c:	dc04      	bgt.n	8009918 <__hexnan+0xa0>
 800990e:	462a      	mov	r2, r5
 8009910:	4649      	mov	r1, r9
 8009912:	4620      	mov	r0, r4
 8009914:	f7ff ff8a 	bl	800982c <L_shift>
 8009918:	4544      	cmp	r4, r8
 800991a:	d934      	bls.n	8009986 <__hexnan+0x10e>
 800991c:	4623      	mov	r3, r4
 800991e:	f1a8 0204 	sub.w	r2, r8, #4
 8009922:	f853 1b04 	ldr.w	r1, [r3], #4
 8009926:	429f      	cmp	r7, r3
 8009928:	f842 1f04 	str.w	r1, [r2, #4]!
 800992c:	d2f9      	bcs.n	8009922 <__hexnan+0xaa>
 800992e:	1b3b      	subs	r3, r7, r4
 8009930:	f023 0303 	bic.w	r3, r3, #3
 8009934:	3304      	adds	r3, #4
 8009936:	3401      	adds	r4, #1
 8009938:	3e03      	subs	r6, #3
 800993a:	42b4      	cmp	r4, r6
 800993c:	bf88      	it	hi
 800993e:	2304      	movhi	r3, #4
 8009940:	2200      	movs	r2, #0
 8009942:	4443      	add	r3, r8
 8009944:	f843 2b04 	str.w	r2, [r3], #4
 8009948:	429f      	cmp	r7, r3
 800994a:	d2fb      	bcs.n	8009944 <__hexnan+0xcc>
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	b91b      	cbnz	r3, 8009958 <__hexnan+0xe0>
 8009950:	4547      	cmp	r7, r8
 8009952:	d127      	bne.n	80099a4 <__hexnan+0x12c>
 8009954:	2301      	movs	r3, #1
 8009956:	603b      	str	r3, [r7, #0]
 8009958:	2005      	movs	r0, #5
 800995a:	e026      	b.n	80099aa <__hexnan+0x132>
 800995c:	3501      	adds	r5, #1
 800995e:	2d08      	cmp	r5, #8
 8009960:	f10b 0b01 	add.w	fp, fp, #1
 8009964:	dd06      	ble.n	8009974 <__hexnan+0xfc>
 8009966:	4544      	cmp	r4, r8
 8009968:	d9c3      	bls.n	80098f2 <__hexnan+0x7a>
 800996a:	2300      	movs	r3, #0
 800996c:	2501      	movs	r5, #1
 800996e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009972:	3c04      	subs	r4, #4
 8009974:	6822      	ldr	r2, [r4, #0]
 8009976:	f000 000f 	and.w	r0, r0, #15
 800997a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800997e:	6022      	str	r2, [r4, #0]
 8009980:	e7b7      	b.n	80098f2 <__hexnan+0x7a>
 8009982:	2508      	movs	r5, #8
 8009984:	e7b5      	b.n	80098f2 <__hexnan+0x7a>
 8009986:	9b01      	ldr	r3, [sp, #4]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d0df      	beq.n	800994c <__hexnan+0xd4>
 800998c:	f04f 32ff 	mov.w	r2, #4294967295
 8009990:	f1c3 0320 	rsb	r3, r3, #32
 8009994:	fa22 f303 	lsr.w	r3, r2, r3
 8009998:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800999c:	401a      	ands	r2, r3
 800999e:	f846 2c04 	str.w	r2, [r6, #-4]
 80099a2:	e7d3      	b.n	800994c <__hexnan+0xd4>
 80099a4:	3f04      	subs	r7, #4
 80099a6:	e7d1      	b.n	800994c <__hexnan+0xd4>
 80099a8:	2004      	movs	r0, #4
 80099aa:	b007      	add	sp, #28
 80099ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080099b0 <_localeconv_r>:
 80099b0:	4800      	ldr	r0, [pc, #0]	; (80099b4 <_localeconv_r+0x4>)
 80099b2:	4770      	bx	lr
 80099b4:	20000164 	.word	0x20000164

080099b8 <__retarget_lock_init_recursive>:
 80099b8:	4770      	bx	lr

080099ba <__retarget_lock_acquire_recursive>:
 80099ba:	4770      	bx	lr

080099bc <__retarget_lock_release_recursive>:
 80099bc:	4770      	bx	lr

080099be <__swhatbuf_r>:
 80099be:	b570      	push	{r4, r5, r6, lr}
 80099c0:	460e      	mov	r6, r1
 80099c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099c6:	4614      	mov	r4, r2
 80099c8:	2900      	cmp	r1, #0
 80099ca:	461d      	mov	r5, r3
 80099cc:	b096      	sub	sp, #88	; 0x58
 80099ce:	da08      	bge.n	80099e2 <__swhatbuf_r+0x24>
 80099d0:	2200      	movs	r2, #0
 80099d2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80099d6:	602a      	str	r2, [r5, #0]
 80099d8:	061a      	lsls	r2, r3, #24
 80099da:	d410      	bmi.n	80099fe <__swhatbuf_r+0x40>
 80099dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099e0:	e00e      	b.n	8009a00 <__swhatbuf_r+0x42>
 80099e2:	466a      	mov	r2, sp
 80099e4:	f001 f9a0 	bl	800ad28 <_fstat_r>
 80099e8:	2800      	cmp	r0, #0
 80099ea:	dbf1      	blt.n	80099d0 <__swhatbuf_r+0x12>
 80099ec:	9a01      	ldr	r2, [sp, #4]
 80099ee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80099f2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80099f6:	425a      	negs	r2, r3
 80099f8:	415a      	adcs	r2, r3
 80099fa:	602a      	str	r2, [r5, #0]
 80099fc:	e7ee      	b.n	80099dc <__swhatbuf_r+0x1e>
 80099fe:	2340      	movs	r3, #64	; 0x40
 8009a00:	2000      	movs	r0, #0
 8009a02:	6023      	str	r3, [r4, #0]
 8009a04:	b016      	add	sp, #88	; 0x58
 8009a06:	bd70      	pop	{r4, r5, r6, pc}

08009a08 <__smakebuf_r>:
 8009a08:	898b      	ldrh	r3, [r1, #12]
 8009a0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009a0c:	079d      	lsls	r5, r3, #30
 8009a0e:	4606      	mov	r6, r0
 8009a10:	460c      	mov	r4, r1
 8009a12:	d507      	bpl.n	8009a24 <__smakebuf_r+0x1c>
 8009a14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009a18:	6023      	str	r3, [r4, #0]
 8009a1a:	6123      	str	r3, [r4, #16]
 8009a1c:	2301      	movs	r3, #1
 8009a1e:	6163      	str	r3, [r4, #20]
 8009a20:	b002      	add	sp, #8
 8009a22:	bd70      	pop	{r4, r5, r6, pc}
 8009a24:	466a      	mov	r2, sp
 8009a26:	ab01      	add	r3, sp, #4
 8009a28:	f7ff ffc9 	bl	80099be <__swhatbuf_r>
 8009a2c:	9900      	ldr	r1, [sp, #0]
 8009a2e:	4605      	mov	r5, r0
 8009a30:	4630      	mov	r0, r6
 8009a32:	f000 fd85 	bl	800a540 <_malloc_r>
 8009a36:	b948      	cbnz	r0, 8009a4c <__smakebuf_r+0x44>
 8009a38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a3c:	059a      	lsls	r2, r3, #22
 8009a3e:	d4ef      	bmi.n	8009a20 <__smakebuf_r+0x18>
 8009a40:	f023 0303 	bic.w	r3, r3, #3
 8009a44:	f043 0302 	orr.w	r3, r3, #2
 8009a48:	81a3      	strh	r3, [r4, #12]
 8009a4a:	e7e3      	b.n	8009a14 <__smakebuf_r+0xc>
 8009a4c:	4b0d      	ldr	r3, [pc, #52]	; (8009a84 <__smakebuf_r+0x7c>)
 8009a4e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009a50:	89a3      	ldrh	r3, [r4, #12]
 8009a52:	6020      	str	r0, [r4, #0]
 8009a54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a58:	81a3      	strh	r3, [r4, #12]
 8009a5a:	9b00      	ldr	r3, [sp, #0]
 8009a5c:	6120      	str	r0, [r4, #16]
 8009a5e:	6163      	str	r3, [r4, #20]
 8009a60:	9b01      	ldr	r3, [sp, #4]
 8009a62:	b15b      	cbz	r3, 8009a7c <__smakebuf_r+0x74>
 8009a64:	4630      	mov	r0, r6
 8009a66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a6a:	f001 f96f 	bl	800ad4c <_isatty_r>
 8009a6e:	b128      	cbz	r0, 8009a7c <__smakebuf_r+0x74>
 8009a70:	89a3      	ldrh	r3, [r4, #12]
 8009a72:	f023 0303 	bic.w	r3, r3, #3
 8009a76:	f043 0301 	orr.w	r3, r3, #1
 8009a7a:	81a3      	strh	r3, [r4, #12]
 8009a7c:	89a0      	ldrh	r0, [r4, #12]
 8009a7e:	4305      	orrs	r5, r0
 8009a80:	81a5      	strh	r5, [r4, #12]
 8009a82:	e7cd      	b.n	8009a20 <__smakebuf_r+0x18>
 8009a84:	08009141 	.word	0x08009141

08009a88 <malloc>:
 8009a88:	4b02      	ldr	r3, [pc, #8]	; (8009a94 <malloc+0xc>)
 8009a8a:	4601      	mov	r1, r0
 8009a8c:	6818      	ldr	r0, [r3, #0]
 8009a8e:	f000 bd57 	b.w	800a540 <_malloc_r>
 8009a92:	bf00      	nop
 8009a94:	2000000c 	.word	0x2000000c

08009a98 <__ascii_mbtowc>:
 8009a98:	b082      	sub	sp, #8
 8009a9a:	b901      	cbnz	r1, 8009a9e <__ascii_mbtowc+0x6>
 8009a9c:	a901      	add	r1, sp, #4
 8009a9e:	b142      	cbz	r2, 8009ab2 <__ascii_mbtowc+0x1a>
 8009aa0:	b14b      	cbz	r3, 8009ab6 <__ascii_mbtowc+0x1e>
 8009aa2:	7813      	ldrb	r3, [r2, #0]
 8009aa4:	600b      	str	r3, [r1, #0]
 8009aa6:	7812      	ldrb	r2, [r2, #0]
 8009aa8:	1e10      	subs	r0, r2, #0
 8009aaa:	bf18      	it	ne
 8009aac:	2001      	movne	r0, #1
 8009aae:	b002      	add	sp, #8
 8009ab0:	4770      	bx	lr
 8009ab2:	4610      	mov	r0, r2
 8009ab4:	e7fb      	b.n	8009aae <__ascii_mbtowc+0x16>
 8009ab6:	f06f 0001 	mvn.w	r0, #1
 8009aba:	e7f8      	b.n	8009aae <__ascii_mbtowc+0x16>

08009abc <memchr>:
 8009abc:	4603      	mov	r3, r0
 8009abe:	b510      	push	{r4, lr}
 8009ac0:	b2c9      	uxtb	r1, r1
 8009ac2:	4402      	add	r2, r0
 8009ac4:	4293      	cmp	r3, r2
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	d101      	bne.n	8009ace <memchr+0x12>
 8009aca:	2000      	movs	r0, #0
 8009acc:	e003      	b.n	8009ad6 <memchr+0x1a>
 8009ace:	7804      	ldrb	r4, [r0, #0]
 8009ad0:	3301      	adds	r3, #1
 8009ad2:	428c      	cmp	r4, r1
 8009ad4:	d1f6      	bne.n	8009ac4 <memchr+0x8>
 8009ad6:	bd10      	pop	{r4, pc}

08009ad8 <_Balloc>:
 8009ad8:	b570      	push	{r4, r5, r6, lr}
 8009ada:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009adc:	4604      	mov	r4, r0
 8009ade:	460d      	mov	r5, r1
 8009ae0:	b976      	cbnz	r6, 8009b00 <_Balloc+0x28>
 8009ae2:	2010      	movs	r0, #16
 8009ae4:	f7ff ffd0 	bl	8009a88 <malloc>
 8009ae8:	4602      	mov	r2, r0
 8009aea:	6260      	str	r0, [r4, #36]	; 0x24
 8009aec:	b920      	cbnz	r0, 8009af8 <_Balloc+0x20>
 8009aee:	2166      	movs	r1, #102	; 0x66
 8009af0:	4b17      	ldr	r3, [pc, #92]	; (8009b50 <_Balloc+0x78>)
 8009af2:	4818      	ldr	r0, [pc, #96]	; (8009b54 <_Balloc+0x7c>)
 8009af4:	f001 f8d8 	bl	800aca8 <__assert_func>
 8009af8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009afc:	6006      	str	r6, [r0, #0]
 8009afe:	60c6      	str	r6, [r0, #12]
 8009b00:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009b02:	68f3      	ldr	r3, [r6, #12]
 8009b04:	b183      	cbz	r3, 8009b28 <_Balloc+0x50>
 8009b06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b08:	68db      	ldr	r3, [r3, #12]
 8009b0a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009b0e:	b9b8      	cbnz	r0, 8009b40 <_Balloc+0x68>
 8009b10:	2101      	movs	r1, #1
 8009b12:	fa01 f605 	lsl.w	r6, r1, r5
 8009b16:	1d72      	adds	r2, r6, #5
 8009b18:	4620      	mov	r0, r4
 8009b1a:	0092      	lsls	r2, r2, #2
 8009b1c:	f000 fc94 	bl	800a448 <_calloc_r>
 8009b20:	b160      	cbz	r0, 8009b3c <_Balloc+0x64>
 8009b22:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009b26:	e00e      	b.n	8009b46 <_Balloc+0x6e>
 8009b28:	2221      	movs	r2, #33	; 0x21
 8009b2a:	2104      	movs	r1, #4
 8009b2c:	4620      	mov	r0, r4
 8009b2e:	f000 fc8b 	bl	800a448 <_calloc_r>
 8009b32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b34:	60f0      	str	r0, [r6, #12]
 8009b36:	68db      	ldr	r3, [r3, #12]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d1e4      	bne.n	8009b06 <_Balloc+0x2e>
 8009b3c:	2000      	movs	r0, #0
 8009b3e:	bd70      	pop	{r4, r5, r6, pc}
 8009b40:	6802      	ldr	r2, [r0, #0]
 8009b42:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009b46:	2300      	movs	r3, #0
 8009b48:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009b4c:	e7f7      	b.n	8009b3e <_Balloc+0x66>
 8009b4e:	bf00      	nop
 8009b50:	0800cc6e 	.word	0x0800cc6e
 8009b54:	0800cdd0 	.word	0x0800cdd0

08009b58 <_Bfree>:
 8009b58:	b570      	push	{r4, r5, r6, lr}
 8009b5a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009b5c:	4605      	mov	r5, r0
 8009b5e:	460c      	mov	r4, r1
 8009b60:	b976      	cbnz	r6, 8009b80 <_Bfree+0x28>
 8009b62:	2010      	movs	r0, #16
 8009b64:	f7ff ff90 	bl	8009a88 <malloc>
 8009b68:	4602      	mov	r2, r0
 8009b6a:	6268      	str	r0, [r5, #36]	; 0x24
 8009b6c:	b920      	cbnz	r0, 8009b78 <_Bfree+0x20>
 8009b6e:	218a      	movs	r1, #138	; 0x8a
 8009b70:	4b08      	ldr	r3, [pc, #32]	; (8009b94 <_Bfree+0x3c>)
 8009b72:	4809      	ldr	r0, [pc, #36]	; (8009b98 <_Bfree+0x40>)
 8009b74:	f001 f898 	bl	800aca8 <__assert_func>
 8009b78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009b7c:	6006      	str	r6, [r0, #0]
 8009b7e:	60c6      	str	r6, [r0, #12]
 8009b80:	b13c      	cbz	r4, 8009b92 <_Bfree+0x3a>
 8009b82:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009b84:	6862      	ldr	r2, [r4, #4]
 8009b86:	68db      	ldr	r3, [r3, #12]
 8009b88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009b8c:	6021      	str	r1, [r4, #0]
 8009b8e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009b92:	bd70      	pop	{r4, r5, r6, pc}
 8009b94:	0800cc6e 	.word	0x0800cc6e
 8009b98:	0800cdd0 	.word	0x0800cdd0

08009b9c <__multadd>:
 8009b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ba0:	4607      	mov	r7, r0
 8009ba2:	460c      	mov	r4, r1
 8009ba4:	461e      	mov	r6, r3
 8009ba6:	2000      	movs	r0, #0
 8009ba8:	690d      	ldr	r5, [r1, #16]
 8009baa:	f101 0c14 	add.w	ip, r1, #20
 8009bae:	f8dc 3000 	ldr.w	r3, [ip]
 8009bb2:	3001      	adds	r0, #1
 8009bb4:	b299      	uxth	r1, r3
 8009bb6:	fb02 6101 	mla	r1, r2, r1, r6
 8009bba:	0c1e      	lsrs	r6, r3, #16
 8009bbc:	0c0b      	lsrs	r3, r1, #16
 8009bbe:	fb02 3306 	mla	r3, r2, r6, r3
 8009bc2:	b289      	uxth	r1, r1
 8009bc4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009bc8:	4285      	cmp	r5, r0
 8009bca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009bce:	f84c 1b04 	str.w	r1, [ip], #4
 8009bd2:	dcec      	bgt.n	8009bae <__multadd+0x12>
 8009bd4:	b30e      	cbz	r6, 8009c1a <__multadd+0x7e>
 8009bd6:	68a3      	ldr	r3, [r4, #8]
 8009bd8:	42ab      	cmp	r3, r5
 8009bda:	dc19      	bgt.n	8009c10 <__multadd+0x74>
 8009bdc:	6861      	ldr	r1, [r4, #4]
 8009bde:	4638      	mov	r0, r7
 8009be0:	3101      	adds	r1, #1
 8009be2:	f7ff ff79 	bl	8009ad8 <_Balloc>
 8009be6:	4680      	mov	r8, r0
 8009be8:	b928      	cbnz	r0, 8009bf6 <__multadd+0x5a>
 8009bea:	4602      	mov	r2, r0
 8009bec:	21b5      	movs	r1, #181	; 0xb5
 8009bee:	4b0c      	ldr	r3, [pc, #48]	; (8009c20 <__multadd+0x84>)
 8009bf0:	480c      	ldr	r0, [pc, #48]	; (8009c24 <__multadd+0x88>)
 8009bf2:	f001 f859 	bl	800aca8 <__assert_func>
 8009bf6:	6922      	ldr	r2, [r4, #16]
 8009bf8:	f104 010c 	add.w	r1, r4, #12
 8009bfc:	3202      	adds	r2, #2
 8009bfe:	0092      	lsls	r2, r2, #2
 8009c00:	300c      	adds	r0, #12
 8009c02:	f7fc fcaf 	bl	8006564 <memcpy>
 8009c06:	4621      	mov	r1, r4
 8009c08:	4638      	mov	r0, r7
 8009c0a:	f7ff ffa5 	bl	8009b58 <_Bfree>
 8009c0e:	4644      	mov	r4, r8
 8009c10:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009c14:	3501      	adds	r5, #1
 8009c16:	615e      	str	r6, [r3, #20]
 8009c18:	6125      	str	r5, [r4, #16]
 8009c1a:	4620      	mov	r0, r4
 8009c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c20:	0800cce0 	.word	0x0800cce0
 8009c24:	0800cdd0 	.word	0x0800cdd0

08009c28 <__s2b>:
 8009c28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c2c:	4615      	mov	r5, r2
 8009c2e:	2209      	movs	r2, #9
 8009c30:	461f      	mov	r7, r3
 8009c32:	3308      	adds	r3, #8
 8009c34:	460c      	mov	r4, r1
 8009c36:	fb93 f3f2 	sdiv	r3, r3, r2
 8009c3a:	4606      	mov	r6, r0
 8009c3c:	2201      	movs	r2, #1
 8009c3e:	2100      	movs	r1, #0
 8009c40:	429a      	cmp	r2, r3
 8009c42:	db09      	blt.n	8009c58 <__s2b+0x30>
 8009c44:	4630      	mov	r0, r6
 8009c46:	f7ff ff47 	bl	8009ad8 <_Balloc>
 8009c4a:	b940      	cbnz	r0, 8009c5e <__s2b+0x36>
 8009c4c:	4602      	mov	r2, r0
 8009c4e:	21ce      	movs	r1, #206	; 0xce
 8009c50:	4b18      	ldr	r3, [pc, #96]	; (8009cb4 <__s2b+0x8c>)
 8009c52:	4819      	ldr	r0, [pc, #100]	; (8009cb8 <__s2b+0x90>)
 8009c54:	f001 f828 	bl	800aca8 <__assert_func>
 8009c58:	0052      	lsls	r2, r2, #1
 8009c5a:	3101      	adds	r1, #1
 8009c5c:	e7f0      	b.n	8009c40 <__s2b+0x18>
 8009c5e:	9b08      	ldr	r3, [sp, #32]
 8009c60:	2d09      	cmp	r5, #9
 8009c62:	6143      	str	r3, [r0, #20]
 8009c64:	f04f 0301 	mov.w	r3, #1
 8009c68:	6103      	str	r3, [r0, #16]
 8009c6a:	dd16      	ble.n	8009c9a <__s2b+0x72>
 8009c6c:	f104 0909 	add.w	r9, r4, #9
 8009c70:	46c8      	mov	r8, r9
 8009c72:	442c      	add	r4, r5
 8009c74:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009c78:	4601      	mov	r1, r0
 8009c7a:	220a      	movs	r2, #10
 8009c7c:	4630      	mov	r0, r6
 8009c7e:	3b30      	subs	r3, #48	; 0x30
 8009c80:	f7ff ff8c 	bl	8009b9c <__multadd>
 8009c84:	45a0      	cmp	r8, r4
 8009c86:	d1f5      	bne.n	8009c74 <__s2b+0x4c>
 8009c88:	f1a5 0408 	sub.w	r4, r5, #8
 8009c8c:	444c      	add	r4, r9
 8009c8e:	1b2d      	subs	r5, r5, r4
 8009c90:	1963      	adds	r3, r4, r5
 8009c92:	42bb      	cmp	r3, r7
 8009c94:	db04      	blt.n	8009ca0 <__s2b+0x78>
 8009c96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c9a:	2509      	movs	r5, #9
 8009c9c:	340a      	adds	r4, #10
 8009c9e:	e7f6      	b.n	8009c8e <__s2b+0x66>
 8009ca0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009ca4:	4601      	mov	r1, r0
 8009ca6:	220a      	movs	r2, #10
 8009ca8:	4630      	mov	r0, r6
 8009caa:	3b30      	subs	r3, #48	; 0x30
 8009cac:	f7ff ff76 	bl	8009b9c <__multadd>
 8009cb0:	e7ee      	b.n	8009c90 <__s2b+0x68>
 8009cb2:	bf00      	nop
 8009cb4:	0800cce0 	.word	0x0800cce0
 8009cb8:	0800cdd0 	.word	0x0800cdd0

08009cbc <__hi0bits>:
 8009cbc:	0c02      	lsrs	r2, r0, #16
 8009cbe:	0412      	lsls	r2, r2, #16
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	b9ca      	cbnz	r2, 8009cf8 <__hi0bits+0x3c>
 8009cc4:	0403      	lsls	r3, r0, #16
 8009cc6:	2010      	movs	r0, #16
 8009cc8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009ccc:	bf04      	itt	eq
 8009cce:	021b      	lsleq	r3, r3, #8
 8009cd0:	3008      	addeq	r0, #8
 8009cd2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009cd6:	bf04      	itt	eq
 8009cd8:	011b      	lsleq	r3, r3, #4
 8009cda:	3004      	addeq	r0, #4
 8009cdc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009ce0:	bf04      	itt	eq
 8009ce2:	009b      	lsleq	r3, r3, #2
 8009ce4:	3002      	addeq	r0, #2
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	db05      	blt.n	8009cf6 <__hi0bits+0x3a>
 8009cea:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8009cee:	f100 0001 	add.w	r0, r0, #1
 8009cf2:	bf08      	it	eq
 8009cf4:	2020      	moveq	r0, #32
 8009cf6:	4770      	bx	lr
 8009cf8:	2000      	movs	r0, #0
 8009cfa:	e7e5      	b.n	8009cc8 <__hi0bits+0xc>

08009cfc <__lo0bits>:
 8009cfc:	6803      	ldr	r3, [r0, #0]
 8009cfe:	4602      	mov	r2, r0
 8009d00:	f013 0007 	ands.w	r0, r3, #7
 8009d04:	d00b      	beq.n	8009d1e <__lo0bits+0x22>
 8009d06:	07d9      	lsls	r1, r3, #31
 8009d08:	d421      	bmi.n	8009d4e <__lo0bits+0x52>
 8009d0a:	0798      	lsls	r0, r3, #30
 8009d0c:	bf49      	itett	mi
 8009d0e:	085b      	lsrmi	r3, r3, #1
 8009d10:	089b      	lsrpl	r3, r3, #2
 8009d12:	2001      	movmi	r0, #1
 8009d14:	6013      	strmi	r3, [r2, #0]
 8009d16:	bf5c      	itt	pl
 8009d18:	2002      	movpl	r0, #2
 8009d1a:	6013      	strpl	r3, [r2, #0]
 8009d1c:	4770      	bx	lr
 8009d1e:	b299      	uxth	r1, r3
 8009d20:	b909      	cbnz	r1, 8009d26 <__lo0bits+0x2a>
 8009d22:	2010      	movs	r0, #16
 8009d24:	0c1b      	lsrs	r3, r3, #16
 8009d26:	b2d9      	uxtb	r1, r3
 8009d28:	b909      	cbnz	r1, 8009d2e <__lo0bits+0x32>
 8009d2a:	3008      	adds	r0, #8
 8009d2c:	0a1b      	lsrs	r3, r3, #8
 8009d2e:	0719      	lsls	r1, r3, #28
 8009d30:	bf04      	itt	eq
 8009d32:	091b      	lsreq	r3, r3, #4
 8009d34:	3004      	addeq	r0, #4
 8009d36:	0799      	lsls	r1, r3, #30
 8009d38:	bf04      	itt	eq
 8009d3a:	089b      	lsreq	r3, r3, #2
 8009d3c:	3002      	addeq	r0, #2
 8009d3e:	07d9      	lsls	r1, r3, #31
 8009d40:	d403      	bmi.n	8009d4a <__lo0bits+0x4e>
 8009d42:	085b      	lsrs	r3, r3, #1
 8009d44:	f100 0001 	add.w	r0, r0, #1
 8009d48:	d003      	beq.n	8009d52 <__lo0bits+0x56>
 8009d4a:	6013      	str	r3, [r2, #0]
 8009d4c:	4770      	bx	lr
 8009d4e:	2000      	movs	r0, #0
 8009d50:	4770      	bx	lr
 8009d52:	2020      	movs	r0, #32
 8009d54:	4770      	bx	lr
	...

08009d58 <__i2b>:
 8009d58:	b510      	push	{r4, lr}
 8009d5a:	460c      	mov	r4, r1
 8009d5c:	2101      	movs	r1, #1
 8009d5e:	f7ff febb 	bl	8009ad8 <_Balloc>
 8009d62:	4602      	mov	r2, r0
 8009d64:	b928      	cbnz	r0, 8009d72 <__i2b+0x1a>
 8009d66:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009d6a:	4b04      	ldr	r3, [pc, #16]	; (8009d7c <__i2b+0x24>)
 8009d6c:	4804      	ldr	r0, [pc, #16]	; (8009d80 <__i2b+0x28>)
 8009d6e:	f000 ff9b 	bl	800aca8 <__assert_func>
 8009d72:	2301      	movs	r3, #1
 8009d74:	6144      	str	r4, [r0, #20]
 8009d76:	6103      	str	r3, [r0, #16]
 8009d78:	bd10      	pop	{r4, pc}
 8009d7a:	bf00      	nop
 8009d7c:	0800cce0 	.word	0x0800cce0
 8009d80:	0800cdd0 	.word	0x0800cdd0

08009d84 <__multiply>:
 8009d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d88:	4691      	mov	r9, r2
 8009d8a:	690a      	ldr	r2, [r1, #16]
 8009d8c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009d90:	460c      	mov	r4, r1
 8009d92:	429a      	cmp	r2, r3
 8009d94:	bfbe      	ittt	lt
 8009d96:	460b      	movlt	r3, r1
 8009d98:	464c      	movlt	r4, r9
 8009d9a:	4699      	movlt	r9, r3
 8009d9c:	6927      	ldr	r7, [r4, #16]
 8009d9e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009da2:	68a3      	ldr	r3, [r4, #8]
 8009da4:	6861      	ldr	r1, [r4, #4]
 8009da6:	eb07 060a 	add.w	r6, r7, sl
 8009daa:	42b3      	cmp	r3, r6
 8009dac:	b085      	sub	sp, #20
 8009dae:	bfb8      	it	lt
 8009db0:	3101      	addlt	r1, #1
 8009db2:	f7ff fe91 	bl	8009ad8 <_Balloc>
 8009db6:	b930      	cbnz	r0, 8009dc6 <__multiply+0x42>
 8009db8:	4602      	mov	r2, r0
 8009dba:	f240 115d 	movw	r1, #349	; 0x15d
 8009dbe:	4b43      	ldr	r3, [pc, #268]	; (8009ecc <__multiply+0x148>)
 8009dc0:	4843      	ldr	r0, [pc, #268]	; (8009ed0 <__multiply+0x14c>)
 8009dc2:	f000 ff71 	bl	800aca8 <__assert_func>
 8009dc6:	f100 0514 	add.w	r5, r0, #20
 8009dca:	462b      	mov	r3, r5
 8009dcc:	2200      	movs	r2, #0
 8009dce:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009dd2:	4543      	cmp	r3, r8
 8009dd4:	d321      	bcc.n	8009e1a <__multiply+0x96>
 8009dd6:	f104 0314 	add.w	r3, r4, #20
 8009dda:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009dde:	f109 0314 	add.w	r3, r9, #20
 8009de2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009de6:	9202      	str	r2, [sp, #8]
 8009de8:	1b3a      	subs	r2, r7, r4
 8009dea:	3a15      	subs	r2, #21
 8009dec:	f022 0203 	bic.w	r2, r2, #3
 8009df0:	3204      	adds	r2, #4
 8009df2:	f104 0115 	add.w	r1, r4, #21
 8009df6:	428f      	cmp	r7, r1
 8009df8:	bf38      	it	cc
 8009dfa:	2204      	movcc	r2, #4
 8009dfc:	9201      	str	r2, [sp, #4]
 8009dfe:	9a02      	ldr	r2, [sp, #8]
 8009e00:	9303      	str	r3, [sp, #12]
 8009e02:	429a      	cmp	r2, r3
 8009e04:	d80c      	bhi.n	8009e20 <__multiply+0x9c>
 8009e06:	2e00      	cmp	r6, #0
 8009e08:	dd03      	ble.n	8009e12 <__multiply+0x8e>
 8009e0a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d059      	beq.n	8009ec6 <__multiply+0x142>
 8009e12:	6106      	str	r6, [r0, #16]
 8009e14:	b005      	add	sp, #20
 8009e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e1a:	f843 2b04 	str.w	r2, [r3], #4
 8009e1e:	e7d8      	b.n	8009dd2 <__multiply+0x4e>
 8009e20:	f8b3 a000 	ldrh.w	sl, [r3]
 8009e24:	f1ba 0f00 	cmp.w	sl, #0
 8009e28:	d023      	beq.n	8009e72 <__multiply+0xee>
 8009e2a:	46a9      	mov	r9, r5
 8009e2c:	f04f 0c00 	mov.w	ip, #0
 8009e30:	f104 0e14 	add.w	lr, r4, #20
 8009e34:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009e38:	f8d9 1000 	ldr.w	r1, [r9]
 8009e3c:	fa1f fb82 	uxth.w	fp, r2
 8009e40:	b289      	uxth	r1, r1
 8009e42:	fb0a 110b 	mla	r1, sl, fp, r1
 8009e46:	4461      	add	r1, ip
 8009e48:	f8d9 c000 	ldr.w	ip, [r9]
 8009e4c:	0c12      	lsrs	r2, r2, #16
 8009e4e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8009e52:	fb0a c202 	mla	r2, sl, r2, ip
 8009e56:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009e5a:	b289      	uxth	r1, r1
 8009e5c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009e60:	4577      	cmp	r7, lr
 8009e62:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009e66:	f849 1b04 	str.w	r1, [r9], #4
 8009e6a:	d8e3      	bhi.n	8009e34 <__multiply+0xb0>
 8009e6c:	9a01      	ldr	r2, [sp, #4]
 8009e6e:	f845 c002 	str.w	ip, [r5, r2]
 8009e72:	9a03      	ldr	r2, [sp, #12]
 8009e74:	3304      	adds	r3, #4
 8009e76:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009e7a:	f1b9 0f00 	cmp.w	r9, #0
 8009e7e:	d020      	beq.n	8009ec2 <__multiply+0x13e>
 8009e80:	46ae      	mov	lr, r5
 8009e82:	f04f 0a00 	mov.w	sl, #0
 8009e86:	6829      	ldr	r1, [r5, #0]
 8009e88:	f104 0c14 	add.w	ip, r4, #20
 8009e8c:	f8bc b000 	ldrh.w	fp, [ip]
 8009e90:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009e94:	b289      	uxth	r1, r1
 8009e96:	fb09 220b 	mla	r2, r9, fp, r2
 8009e9a:	4492      	add	sl, r2
 8009e9c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009ea0:	f84e 1b04 	str.w	r1, [lr], #4
 8009ea4:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009ea8:	f8be 1000 	ldrh.w	r1, [lr]
 8009eac:	0c12      	lsrs	r2, r2, #16
 8009eae:	fb09 1102 	mla	r1, r9, r2, r1
 8009eb2:	4567      	cmp	r7, ip
 8009eb4:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009eb8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009ebc:	d8e6      	bhi.n	8009e8c <__multiply+0x108>
 8009ebe:	9a01      	ldr	r2, [sp, #4]
 8009ec0:	50a9      	str	r1, [r5, r2]
 8009ec2:	3504      	adds	r5, #4
 8009ec4:	e79b      	b.n	8009dfe <__multiply+0x7a>
 8009ec6:	3e01      	subs	r6, #1
 8009ec8:	e79d      	b.n	8009e06 <__multiply+0x82>
 8009eca:	bf00      	nop
 8009ecc:	0800cce0 	.word	0x0800cce0
 8009ed0:	0800cdd0 	.word	0x0800cdd0

08009ed4 <__pow5mult>:
 8009ed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ed8:	4615      	mov	r5, r2
 8009eda:	f012 0203 	ands.w	r2, r2, #3
 8009ede:	4606      	mov	r6, r0
 8009ee0:	460f      	mov	r7, r1
 8009ee2:	d007      	beq.n	8009ef4 <__pow5mult+0x20>
 8009ee4:	4c25      	ldr	r4, [pc, #148]	; (8009f7c <__pow5mult+0xa8>)
 8009ee6:	3a01      	subs	r2, #1
 8009ee8:	2300      	movs	r3, #0
 8009eea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009eee:	f7ff fe55 	bl	8009b9c <__multadd>
 8009ef2:	4607      	mov	r7, r0
 8009ef4:	10ad      	asrs	r5, r5, #2
 8009ef6:	d03d      	beq.n	8009f74 <__pow5mult+0xa0>
 8009ef8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009efa:	b97c      	cbnz	r4, 8009f1c <__pow5mult+0x48>
 8009efc:	2010      	movs	r0, #16
 8009efe:	f7ff fdc3 	bl	8009a88 <malloc>
 8009f02:	4602      	mov	r2, r0
 8009f04:	6270      	str	r0, [r6, #36]	; 0x24
 8009f06:	b928      	cbnz	r0, 8009f14 <__pow5mult+0x40>
 8009f08:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009f0c:	4b1c      	ldr	r3, [pc, #112]	; (8009f80 <__pow5mult+0xac>)
 8009f0e:	481d      	ldr	r0, [pc, #116]	; (8009f84 <__pow5mult+0xb0>)
 8009f10:	f000 feca 	bl	800aca8 <__assert_func>
 8009f14:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009f18:	6004      	str	r4, [r0, #0]
 8009f1a:	60c4      	str	r4, [r0, #12]
 8009f1c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009f20:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009f24:	b94c      	cbnz	r4, 8009f3a <__pow5mult+0x66>
 8009f26:	f240 2171 	movw	r1, #625	; 0x271
 8009f2a:	4630      	mov	r0, r6
 8009f2c:	f7ff ff14 	bl	8009d58 <__i2b>
 8009f30:	2300      	movs	r3, #0
 8009f32:	4604      	mov	r4, r0
 8009f34:	f8c8 0008 	str.w	r0, [r8, #8]
 8009f38:	6003      	str	r3, [r0, #0]
 8009f3a:	f04f 0900 	mov.w	r9, #0
 8009f3e:	07eb      	lsls	r3, r5, #31
 8009f40:	d50a      	bpl.n	8009f58 <__pow5mult+0x84>
 8009f42:	4639      	mov	r1, r7
 8009f44:	4622      	mov	r2, r4
 8009f46:	4630      	mov	r0, r6
 8009f48:	f7ff ff1c 	bl	8009d84 <__multiply>
 8009f4c:	4680      	mov	r8, r0
 8009f4e:	4639      	mov	r1, r7
 8009f50:	4630      	mov	r0, r6
 8009f52:	f7ff fe01 	bl	8009b58 <_Bfree>
 8009f56:	4647      	mov	r7, r8
 8009f58:	106d      	asrs	r5, r5, #1
 8009f5a:	d00b      	beq.n	8009f74 <__pow5mult+0xa0>
 8009f5c:	6820      	ldr	r0, [r4, #0]
 8009f5e:	b938      	cbnz	r0, 8009f70 <__pow5mult+0x9c>
 8009f60:	4622      	mov	r2, r4
 8009f62:	4621      	mov	r1, r4
 8009f64:	4630      	mov	r0, r6
 8009f66:	f7ff ff0d 	bl	8009d84 <__multiply>
 8009f6a:	6020      	str	r0, [r4, #0]
 8009f6c:	f8c0 9000 	str.w	r9, [r0]
 8009f70:	4604      	mov	r4, r0
 8009f72:	e7e4      	b.n	8009f3e <__pow5mult+0x6a>
 8009f74:	4638      	mov	r0, r7
 8009f76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f7a:	bf00      	nop
 8009f7c:	0800cf20 	.word	0x0800cf20
 8009f80:	0800cc6e 	.word	0x0800cc6e
 8009f84:	0800cdd0 	.word	0x0800cdd0

08009f88 <__lshift>:
 8009f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f8c:	460c      	mov	r4, r1
 8009f8e:	4607      	mov	r7, r0
 8009f90:	4691      	mov	r9, r2
 8009f92:	6923      	ldr	r3, [r4, #16]
 8009f94:	6849      	ldr	r1, [r1, #4]
 8009f96:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009f9a:	68a3      	ldr	r3, [r4, #8]
 8009f9c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009fa0:	f108 0601 	add.w	r6, r8, #1
 8009fa4:	42b3      	cmp	r3, r6
 8009fa6:	db0b      	blt.n	8009fc0 <__lshift+0x38>
 8009fa8:	4638      	mov	r0, r7
 8009faa:	f7ff fd95 	bl	8009ad8 <_Balloc>
 8009fae:	4605      	mov	r5, r0
 8009fb0:	b948      	cbnz	r0, 8009fc6 <__lshift+0x3e>
 8009fb2:	4602      	mov	r2, r0
 8009fb4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009fb8:	4b29      	ldr	r3, [pc, #164]	; (800a060 <__lshift+0xd8>)
 8009fba:	482a      	ldr	r0, [pc, #168]	; (800a064 <__lshift+0xdc>)
 8009fbc:	f000 fe74 	bl	800aca8 <__assert_func>
 8009fc0:	3101      	adds	r1, #1
 8009fc2:	005b      	lsls	r3, r3, #1
 8009fc4:	e7ee      	b.n	8009fa4 <__lshift+0x1c>
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	f100 0114 	add.w	r1, r0, #20
 8009fcc:	f100 0210 	add.w	r2, r0, #16
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	4553      	cmp	r3, sl
 8009fd4:	db37      	blt.n	800a046 <__lshift+0xbe>
 8009fd6:	6920      	ldr	r0, [r4, #16]
 8009fd8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009fdc:	f104 0314 	add.w	r3, r4, #20
 8009fe0:	f019 091f 	ands.w	r9, r9, #31
 8009fe4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009fe8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009fec:	d02f      	beq.n	800a04e <__lshift+0xc6>
 8009fee:	468a      	mov	sl, r1
 8009ff0:	f04f 0c00 	mov.w	ip, #0
 8009ff4:	f1c9 0e20 	rsb	lr, r9, #32
 8009ff8:	681a      	ldr	r2, [r3, #0]
 8009ffa:	fa02 f209 	lsl.w	r2, r2, r9
 8009ffe:	ea42 020c 	orr.w	r2, r2, ip
 800a002:	f84a 2b04 	str.w	r2, [sl], #4
 800a006:	f853 2b04 	ldr.w	r2, [r3], #4
 800a00a:	4298      	cmp	r0, r3
 800a00c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a010:	d8f2      	bhi.n	8009ff8 <__lshift+0x70>
 800a012:	1b03      	subs	r3, r0, r4
 800a014:	3b15      	subs	r3, #21
 800a016:	f023 0303 	bic.w	r3, r3, #3
 800a01a:	3304      	adds	r3, #4
 800a01c:	f104 0215 	add.w	r2, r4, #21
 800a020:	4290      	cmp	r0, r2
 800a022:	bf38      	it	cc
 800a024:	2304      	movcc	r3, #4
 800a026:	f841 c003 	str.w	ip, [r1, r3]
 800a02a:	f1bc 0f00 	cmp.w	ip, #0
 800a02e:	d001      	beq.n	800a034 <__lshift+0xac>
 800a030:	f108 0602 	add.w	r6, r8, #2
 800a034:	3e01      	subs	r6, #1
 800a036:	4638      	mov	r0, r7
 800a038:	4621      	mov	r1, r4
 800a03a:	612e      	str	r6, [r5, #16]
 800a03c:	f7ff fd8c 	bl	8009b58 <_Bfree>
 800a040:	4628      	mov	r0, r5
 800a042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a046:	f842 0f04 	str.w	r0, [r2, #4]!
 800a04a:	3301      	adds	r3, #1
 800a04c:	e7c1      	b.n	8009fd2 <__lshift+0x4a>
 800a04e:	3904      	subs	r1, #4
 800a050:	f853 2b04 	ldr.w	r2, [r3], #4
 800a054:	4298      	cmp	r0, r3
 800a056:	f841 2f04 	str.w	r2, [r1, #4]!
 800a05a:	d8f9      	bhi.n	800a050 <__lshift+0xc8>
 800a05c:	e7ea      	b.n	800a034 <__lshift+0xac>
 800a05e:	bf00      	nop
 800a060:	0800cce0 	.word	0x0800cce0
 800a064:	0800cdd0 	.word	0x0800cdd0

0800a068 <__mcmp>:
 800a068:	4603      	mov	r3, r0
 800a06a:	690a      	ldr	r2, [r1, #16]
 800a06c:	6900      	ldr	r0, [r0, #16]
 800a06e:	b530      	push	{r4, r5, lr}
 800a070:	1a80      	subs	r0, r0, r2
 800a072:	d10d      	bne.n	800a090 <__mcmp+0x28>
 800a074:	3314      	adds	r3, #20
 800a076:	3114      	adds	r1, #20
 800a078:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a07c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a080:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a084:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a088:	4295      	cmp	r5, r2
 800a08a:	d002      	beq.n	800a092 <__mcmp+0x2a>
 800a08c:	d304      	bcc.n	800a098 <__mcmp+0x30>
 800a08e:	2001      	movs	r0, #1
 800a090:	bd30      	pop	{r4, r5, pc}
 800a092:	42a3      	cmp	r3, r4
 800a094:	d3f4      	bcc.n	800a080 <__mcmp+0x18>
 800a096:	e7fb      	b.n	800a090 <__mcmp+0x28>
 800a098:	f04f 30ff 	mov.w	r0, #4294967295
 800a09c:	e7f8      	b.n	800a090 <__mcmp+0x28>
	...

0800a0a0 <__mdiff>:
 800a0a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0a4:	460d      	mov	r5, r1
 800a0a6:	4607      	mov	r7, r0
 800a0a8:	4611      	mov	r1, r2
 800a0aa:	4628      	mov	r0, r5
 800a0ac:	4614      	mov	r4, r2
 800a0ae:	f7ff ffdb 	bl	800a068 <__mcmp>
 800a0b2:	1e06      	subs	r6, r0, #0
 800a0b4:	d111      	bne.n	800a0da <__mdiff+0x3a>
 800a0b6:	4631      	mov	r1, r6
 800a0b8:	4638      	mov	r0, r7
 800a0ba:	f7ff fd0d 	bl	8009ad8 <_Balloc>
 800a0be:	4602      	mov	r2, r0
 800a0c0:	b928      	cbnz	r0, 800a0ce <__mdiff+0x2e>
 800a0c2:	f240 2132 	movw	r1, #562	; 0x232
 800a0c6:	4b3a      	ldr	r3, [pc, #232]	; (800a1b0 <__mdiff+0x110>)
 800a0c8:	483a      	ldr	r0, [pc, #232]	; (800a1b4 <__mdiff+0x114>)
 800a0ca:	f000 fded 	bl	800aca8 <__assert_func>
 800a0ce:	2301      	movs	r3, #1
 800a0d0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a0d4:	4610      	mov	r0, r2
 800a0d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0da:	bfa4      	itt	ge
 800a0dc:	4623      	movge	r3, r4
 800a0de:	462c      	movge	r4, r5
 800a0e0:	4638      	mov	r0, r7
 800a0e2:	6861      	ldr	r1, [r4, #4]
 800a0e4:	bfa6      	itte	ge
 800a0e6:	461d      	movge	r5, r3
 800a0e8:	2600      	movge	r6, #0
 800a0ea:	2601      	movlt	r6, #1
 800a0ec:	f7ff fcf4 	bl	8009ad8 <_Balloc>
 800a0f0:	4602      	mov	r2, r0
 800a0f2:	b918      	cbnz	r0, 800a0fc <__mdiff+0x5c>
 800a0f4:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a0f8:	4b2d      	ldr	r3, [pc, #180]	; (800a1b0 <__mdiff+0x110>)
 800a0fa:	e7e5      	b.n	800a0c8 <__mdiff+0x28>
 800a0fc:	f102 0814 	add.w	r8, r2, #20
 800a100:	46c2      	mov	sl, r8
 800a102:	f04f 0c00 	mov.w	ip, #0
 800a106:	6927      	ldr	r7, [r4, #16]
 800a108:	60c6      	str	r6, [r0, #12]
 800a10a:	692e      	ldr	r6, [r5, #16]
 800a10c:	f104 0014 	add.w	r0, r4, #20
 800a110:	f105 0914 	add.w	r9, r5, #20
 800a114:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800a118:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a11c:	3410      	adds	r4, #16
 800a11e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800a122:	f859 3b04 	ldr.w	r3, [r9], #4
 800a126:	fa1f f18b 	uxth.w	r1, fp
 800a12a:	448c      	add	ip, r1
 800a12c:	b299      	uxth	r1, r3
 800a12e:	0c1b      	lsrs	r3, r3, #16
 800a130:	ebac 0101 	sub.w	r1, ip, r1
 800a134:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a138:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a13c:	b289      	uxth	r1, r1
 800a13e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800a142:	454e      	cmp	r6, r9
 800a144:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a148:	f84a 3b04 	str.w	r3, [sl], #4
 800a14c:	d8e7      	bhi.n	800a11e <__mdiff+0x7e>
 800a14e:	1b73      	subs	r3, r6, r5
 800a150:	3b15      	subs	r3, #21
 800a152:	f023 0303 	bic.w	r3, r3, #3
 800a156:	3515      	adds	r5, #21
 800a158:	3304      	adds	r3, #4
 800a15a:	42ae      	cmp	r6, r5
 800a15c:	bf38      	it	cc
 800a15e:	2304      	movcc	r3, #4
 800a160:	4418      	add	r0, r3
 800a162:	4443      	add	r3, r8
 800a164:	461e      	mov	r6, r3
 800a166:	4605      	mov	r5, r0
 800a168:	4575      	cmp	r5, lr
 800a16a:	d30e      	bcc.n	800a18a <__mdiff+0xea>
 800a16c:	f10e 0103 	add.w	r1, lr, #3
 800a170:	1a09      	subs	r1, r1, r0
 800a172:	f021 0103 	bic.w	r1, r1, #3
 800a176:	3803      	subs	r0, #3
 800a178:	4586      	cmp	lr, r0
 800a17a:	bf38      	it	cc
 800a17c:	2100      	movcc	r1, #0
 800a17e:	4419      	add	r1, r3
 800a180:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800a184:	b18b      	cbz	r3, 800a1aa <__mdiff+0x10a>
 800a186:	6117      	str	r7, [r2, #16]
 800a188:	e7a4      	b.n	800a0d4 <__mdiff+0x34>
 800a18a:	f855 8b04 	ldr.w	r8, [r5], #4
 800a18e:	fa1f f188 	uxth.w	r1, r8
 800a192:	4461      	add	r1, ip
 800a194:	140c      	asrs	r4, r1, #16
 800a196:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a19a:	b289      	uxth	r1, r1
 800a19c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a1a0:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800a1a4:	f846 1b04 	str.w	r1, [r6], #4
 800a1a8:	e7de      	b.n	800a168 <__mdiff+0xc8>
 800a1aa:	3f01      	subs	r7, #1
 800a1ac:	e7e8      	b.n	800a180 <__mdiff+0xe0>
 800a1ae:	bf00      	nop
 800a1b0:	0800cce0 	.word	0x0800cce0
 800a1b4:	0800cdd0 	.word	0x0800cdd0

0800a1b8 <__ulp>:
 800a1b8:	4b11      	ldr	r3, [pc, #68]	; (800a200 <__ulp+0x48>)
 800a1ba:	400b      	ands	r3, r1
 800a1bc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	dd02      	ble.n	800a1ca <__ulp+0x12>
 800a1c4:	2000      	movs	r0, #0
 800a1c6:	4619      	mov	r1, r3
 800a1c8:	4770      	bx	lr
 800a1ca:	425b      	negs	r3, r3
 800a1cc:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800a1d0:	f04f 0000 	mov.w	r0, #0
 800a1d4:	f04f 0100 	mov.w	r1, #0
 800a1d8:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a1dc:	da04      	bge.n	800a1e8 <__ulp+0x30>
 800a1de:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a1e2:	fa43 f102 	asr.w	r1, r3, r2
 800a1e6:	4770      	bx	lr
 800a1e8:	f1a2 0314 	sub.w	r3, r2, #20
 800a1ec:	2b1e      	cmp	r3, #30
 800a1ee:	bfd6      	itet	le
 800a1f0:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800a1f4:	2301      	movgt	r3, #1
 800a1f6:	fa22 f303 	lsrle.w	r3, r2, r3
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	4770      	bx	lr
 800a1fe:	bf00      	nop
 800a200:	7ff00000 	.word	0x7ff00000

0800a204 <__b2d>:
 800a204:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a208:	6907      	ldr	r7, [r0, #16]
 800a20a:	f100 0914 	add.w	r9, r0, #20
 800a20e:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800a212:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800a216:	f1a7 0804 	sub.w	r8, r7, #4
 800a21a:	4630      	mov	r0, r6
 800a21c:	f7ff fd4e 	bl	8009cbc <__hi0bits>
 800a220:	f1c0 0320 	rsb	r3, r0, #32
 800a224:	280a      	cmp	r0, #10
 800a226:	600b      	str	r3, [r1, #0]
 800a228:	491f      	ldr	r1, [pc, #124]	; (800a2a8 <__b2d+0xa4>)
 800a22a:	dc17      	bgt.n	800a25c <__b2d+0x58>
 800a22c:	45c1      	cmp	r9, r8
 800a22e:	bf28      	it	cs
 800a230:	2200      	movcs	r2, #0
 800a232:	f1c0 0c0b 	rsb	ip, r0, #11
 800a236:	fa26 f30c 	lsr.w	r3, r6, ip
 800a23a:	bf38      	it	cc
 800a23c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800a240:	ea43 0501 	orr.w	r5, r3, r1
 800a244:	f100 0315 	add.w	r3, r0, #21
 800a248:	fa06 f303 	lsl.w	r3, r6, r3
 800a24c:	fa22 f20c 	lsr.w	r2, r2, ip
 800a250:	ea43 0402 	orr.w	r4, r3, r2
 800a254:	4620      	mov	r0, r4
 800a256:	4629      	mov	r1, r5
 800a258:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a25c:	45c1      	cmp	r9, r8
 800a25e:	bf2e      	itee	cs
 800a260:	2200      	movcs	r2, #0
 800a262:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800a266:	f1a7 0808 	subcc.w	r8, r7, #8
 800a26a:	f1b0 030b 	subs.w	r3, r0, #11
 800a26e:	d016      	beq.n	800a29e <__b2d+0x9a>
 800a270:	f1c3 0720 	rsb	r7, r3, #32
 800a274:	fa22 f107 	lsr.w	r1, r2, r7
 800a278:	45c8      	cmp	r8, r9
 800a27a:	fa06 f603 	lsl.w	r6, r6, r3
 800a27e:	ea46 0601 	orr.w	r6, r6, r1
 800a282:	bf94      	ite	ls
 800a284:	2100      	movls	r1, #0
 800a286:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800a28a:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800a28e:	fa02 f003 	lsl.w	r0, r2, r3
 800a292:	40f9      	lsrs	r1, r7
 800a294:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a298:	ea40 0401 	orr.w	r4, r0, r1
 800a29c:	e7da      	b.n	800a254 <__b2d+0x50>
 800a29e:	4614      	mov	r4, r2
 800a2a0:	ea46 0501 	orr.w	r5, r6, r1
 800a2a4:	e7d6      	b.n	800a254 <__b2d+0x50>
 800a2a6:	bf00      	nop
 800a2a8:	3ff00000 	.word	0x3ff00000

0800a2ac <__d2b>:
 800a2ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800a2b0:	2101      	movs	r1, #1
 800a2b2:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800a2b6:	4690      	mov	r8, r2
 800a2b8:	461d      	mov	r5, r3
 800a2ba:	f7ff fc0d 	bl	8009ad8 <_Balloc>
 800a2be:	4604      	mov	r4, r0
 800a2c0:	b930      	cbnz	r0, 800a2d0 <__d2b+0x24>
 800a2c2:	4602      	mov	r2, r0
 800a2c4:	f240 310a 	movw	r1, #778	; 0x30a
 800a2c8:	4b24      	ldr	r3, [pc, #144]	; (800a35c <__d2b+0xb0>)
 800a2ca:	4825      	ldr	r0, [pc, #148]	; (800a360 <__d2b+0xb4>)
 800a2cc:	f000 fcec 	bl	800aca8 <__assert_func>
 800a2d0:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800a2d4:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800a2d8:	bb2d      	cbnz	r5, 800a326 <__d2b+0x7a>
 800a2da:	9301      	str	r3, [sp, #4]
 800a2dc:	f1b8 0300 	subs.w	r3, r8, #0
 800a2e0:	d026      	beq.n	800a330 <__d2b+0x84>
 800a2e2:	4668      	mov	r0, sp
 800a2e4:	9300      	str	r3, [sp, #0]
 800a2e6:	f7ff fd09 	bl	8009cfc <__lo0bits>
 800a2ea:	9900      	ldr	r1, [sp, #0]
 800a2ec:	b1f0      	cbz	r0, 800a32c <__d2b+0x80>
 800a2ee:	9a01      	ldr	r2, [sp, #4]
 800a2f0:	f1c0 0320 	rsb	r3, r0, #32
 800a2f4:	fa02 f303 	lsl.w	r3, r2, r3
 800a2f8:	430b      	orrs	r3, r1
 800a2fa:	40c2      	lsrs	r2, r0
 800a2fc:	6163      	str	r3, [r4, #20]
 800a2fe:	9201      	str	r2, [sp, #4]
 800a300:	9b01      	ldr	r3, [sp, #4]
 800a302:	2b00      	cmp	r3, #0
 800a304:	bf14      	ite	ne
 800a306:	2102      	movne	r1, #2
 800a308:	2101      	moveq	r1, #1
 800a30a:	61a3      	str	r3, [r4, #24]
 800a30c:	6121      	str	r1, [r4, #16]
 800a30e:	b1c5      	cbz	r5, 800a342 <__d2b+0x96>
 800a310:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a314:	4405      	add	r5, r0
 800a316:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a31a:	603d      	str	r5, [r7, #0]
 800a31c:	6030      	str	r0, [r6, #0]
 800a31e:	4620      	mov	r0, r4
 800a320:	b002      	add	sp, #8
 800a322:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a326:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a32a:	e7d6      	b.n	800a2da <__d2b+0x2e>
 800a32c:	6161      	str	r1, [r4, #20]
 800a32e:	e7e7      	b.n	800a300 <__d2b+0x54>
 800a330:	a801      	add	r0, sp, #4
 800a332:	f7ff fce3 	bl	8009cfc <__lo0bits>
 800a336:	2101      	movs	r1, #1
 800a338:	9b01      	ldr	r3, [sp, #4]
 800a33a:	6121      	str	r1, [r4, #16]
 800a33c:	6163      	str	r3, [r4, #20]
 800a33e:	3020      	adds	r0, #32
 800a340:	e7e5      	b.n	800a30e <__d2b+0x62>
 800a342:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800a346:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a34a:	6038      	str	r0, [r7, #0]
 800a34c:	6918      	ldr	r0, [r3, #16]
 800a34e:	f7ff fcb5 	bl	8009cbc <__hi0bits>
 800a352:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800a356:	6031      	str	r1, [r6, #0]
 800a358:	e7e1      	b.n	800a31e <__d2b+0x72>
 800a35a:	bf00      	nop
 800a35c:	0800cce0 	.word	0x0800cce0
 800a360:	0800cdd0 	.word	0x0800cdd0

0800a364 <__ratio>:
 800a364:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a368:	4688      	mov	r8, r1
 800a36a:	4669      	mov	r1, sp
 800a36c:	4681      	mov	r9, r0
 800a36e:	f7ff ff49 	bl	800a204 <__b2d>
 800a372:	460f      	mov	r7, r1
 800a374:	4604      	mov	r4, r0
 800a376:	460d      	mov	r5, r1
 800a378:	4640      	mov	r0, r8
 800a37a:	a901      	add	r1, sp, #4
 800a37c:	f7ff ff42 	bl	800a204 <__b2d>
 800a380:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a384:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a388:	468b      	mov	fp, r1
 800a38a:	eba3 0c02 	sub.w	ip, r3, r2
 800a38e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a392:	1a9b      	subs	r3, r3, r2
 800a394:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a398:	2b00      	cmp	r3, #0
 800a39a:	bfd5      	itete	le
 800a39c:	460a      	movle	r2, r1
 800a39e:	462a      	movgt	r2, r5
 800a3a0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a3a4:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a3a8:	bfd8      	it	le
 800a3aa:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a3ae:	465b      	mov	r3, fp
 800a3b0:	4602      	mov	r2, r0
 800a3b2:	4639      	mov	r1, r7
 800a3b4:	4620      	mov	r0, r4
 800a3b6:	f7f6 f9b9 	bl	800072c <__aeabi_ddiv>
 800a3ba:	b003      	add	sp, #12
 800a3bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a3c0 <__copybits>:
 800a3c0:	3901      	subs	r1, #1
 800a3c2:	b570      	push	{r4, r5, r6, lr}
 800a3c4:	1149      	asrs	r1, r1, #5
 800a3c6:	6914      	ldr	r4, [r2, #16]
 800a3c8:	3101      	adds	r1, #1
 800a3ca:	f102 0314 	add.w	r3, r2, #20
 800a3ce:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a3d2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a3d6:	1f05      	subs	r5, r0, #4
 800a3d8:	42a3      	cmp	r3, r4
 800a3da:	d30c      	bcc.n	800a3f6 <__copybits+0x36>
 800a3dc:	1aa3      	subs	r3, r4, r2
 800a3de:	3b11      	subs	r3, #17
 800a3e0:	f023 0303 	bic.w	r3, r3, #3
 800a3e4:	3211      	adds	r2, #17
 800a3e6:	42a2      	cmp	r2, r4
 800a3e8:	bf88      	it	hi
 800a3ea:	2300      	movhi	r3, #0
 800a3ec:	4418      	add	r0, r3
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	4288      	cmp	r0, r1
 800a3f2:	d305      	bcc.n	800a400 <__copybits+0x40>
 800a3f4:	bd70      	pop	{r4, r5, r6, pc}
 800a3f6:	f853 6b04 	ldr.w	r6, [r3], #4
 800a3fa:	f845 6f04 	str.w	r6, [r5, #4]!
 800a3fe:	e7eb      	b.n	800a3d8 <__copybits+0x18>
 800a400:	f840 3b04 	str.w	r3, [r0], #4
 800a404:	e7f4      	b.n	800a3f0 <__copybits+0x30>

0800a406 <__any_on>:
 800a406:	f100 0214 	add.w	r2, r0, #20
 800a40a:	6900      	ldr	r0, [r0, #16]
 800a40c:	114b      	asrs	r3, r1, #5
 800a40e:	4298      	cmp	r0, r3
 800a410:	b510      	push	{r4, lr}
 800a412:	db11      	blt.n	800a438 <__any_on+0x32>
 800a414:	dd0a      	ble.n	800a42c <__any_on+0x26>
 800a416:	f011 011f 	ands.w	r1, r1, #31
 800a41a:	d007      	beq.n	800a42c <__any_on+0x26>
 800a41c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a420:	fa24 f001 	lsr.w	r0, r4, r1
 800a424:	fa00 f101 	lsl.w	r1, r0, r1
 800a428:	428c      	cmp	r4, r1
 800a42a:	d10b      	bne.n	800a444 <__any_on+0x3e>
 800a42c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a430:	4293      	cmp	r3, r2
 800a432:	d803      	bhi.n	800a43c <__any_on+0x36>
 800a434:	2000      	movs	r0, #0
 800a436:	bd10      	pop	{r4, pc}
 800a438:	4603      	mov	r3, r0
 800a43a:	e7f7      	b.n	800a42c <__any_on+0x26>
 800a43c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a440:	2900      	cmp	r1, #0
 800a442:	d0f5      	beq.n	800a430 <__any_on+0x2a>
 800a444:	2001      	movs	r0, #1
 800a446:	e7f6      	b.n	800a436 <__any_on+0x30>

0800a448 <_calloc_r>:
 800a448:	b570      	push	{r4, r5, r6, lr}
 800a44a:	fba1 5402 	umull	r5, r4, r1, r2
 800a44e:	b934      	cbnz	r4, 800a45e <_calloc_r+0x16>
 800a450:	4629      	mov	r1, r5
 800a452:	f000 f875 	bl	800a540 <_malloc_r>
 800a456:	4606      	mov	r6, r0
 800a458:	b928      	cbnz	r0, 800a466 <_calloc_r+0x1e>
 800a45a:	4630      	mov	r0, r6
 800a45c:	bd70      	pop	{r4, r5, r6, pc}
 800a45e:	220c      	movs	r2, #12
 800a460:	2600      	movs	r6, #0
 800a462:	6002      	str	r2, [r0, #0]
 800a464:	e7f9      	b.n	800a45a <_calloc_r+0x12>
 800a466:	462a      	mov	r2, r5
 800a468:	4621      	mov	r1, r4
 800a46a:	f7fc f889 	bl	8006580 <memset>
 800a46e:	e7f4      	b.n	800a45a <_calloc_r+0x12>

0800a470 <_free_r>:
 800a470:	b538      	push	{r3, r4, r5, lr}
 800a472:	4605      	mov	r5, r0
 800a474:	2900      	cmp	r1, #0
 800a476:	d040      	beq.n	800a4fa <_free_r+0x8a>
 800a478:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a47c:	1f0c      	subs	r4, r1, #4
 800a47e:	2b00      	cmp	r3, #0
 800a480:	bfb8      	it	lt
 800a482:	18e4      	addlt	r4, r4, r3
 800a484:	f000 fc9e 	bl	800adc4 <__malloc_lock>
 800a488:	4a1c      	ldr	r2, [pc, #112]	; (800a4fc <_free_r+0x8c>)
 800a48a:	6813      	ldr	r3, [r2, #0]
 800a48c:	b933      	cbnz	r3, 800a49c <_free_r+0x2c>
 800a48e:	6063      	str	r3, [r4, #4]
 800a490:	6014      	str	r4, [r2, #0]
 800a492:	4628      	mov	r0, r5
 800a494:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a498:	f000 bc9a 	b.w	800add0 <__malloc_unlock>
 800a49c:	42a3      	cmp	r3, r4
 800a49e:	d908      	bls.n	800a4b2 <_free_r+0x42>
 800a4a0:	6820      	ldr	r0, [r4, #0]
 800a4a2:	1821      	adds	r1, r4, r0
 800a4a4:	428b      	cmp	r3, r1
 800a4a6:	bf01      	itttt	eq
 800a4a8:	6819      	ldreq	r1, [r3, #0]
 800a4aa:	685b      	ldreq	r3, [r3, #4]
 800a4ac:	1809      	addeq	r1, r1, r0
 800a4ae:	6021      	streq	r1, [r4, #0]
 800a4b0:	e7ed      	b.n	800a48e <_free_r+0x1e>
 800a4b2:	461a      	mov	r2, r3
 800a4b4:	685b      	ldr	r3, [r3, #4]
 800a4b6:	b10b      	cbz	r3, 800a4bc <_free_r+0x4c>
 800a4b8:	42a3      	cmp	r3, r4
 800a4ba:	d9fa      	bls.n	800a4b2 <_free_r+0x42>
 800a4bc:	6811      	ldr	r1, [r2, #0]
 800a4be:	1850      	adds	r0, r2, r1
 800a4c0:	42a0      	cmp	r0, r4
 800a4c2:	d10b      	bne.n	800a4dc <_free_r+0x6c>
 800a4c4:	6820      	ldr	r0, [r4, #0]
 800a4c6:	4401      	add	r1, r0
 800a4c8:	1850      	adds	r0, r2, r1
 800a4ca:	4283      	cmp	r3, r0
 800a4cc:	6011      	str	r1, [r2, #0]
 800a4ce:	d1e0      	bne.n	800a492 <_free_r+0x22>
 800a4d0:	6818      	ldr	r0, [r3, #0]
 800a4d2:	685b      	ldr	r3, [r3, #4]
 800a4d4:	4401      	add	r1, r0
 800a4d6:	6011      	str	r1, [r2, #0]
 800a4d8:	6053      	str	r3, [r2, #4]
 800a4da:	e7da      	b.n	800a492 <_free_r+0x22>
 800a4dc:	d902      	bls.n	800a4e4 <_free_r+0x74>
 800a4de:	230c      	movs	r3, #12
 800a4e0:	602b      	str	r3, [r5, #0]
 800a4e2:	e7d6      	b.n	800a492 <_free_r+0x22>
 800a4e4:	6820      	ldr	r0, [r4, #0]
 800a4e6:	1821      	adds	r1, r4, r0
 800a4e8:	428b      	cmp	r3, r1
 800a4ea:	bf01      	itttt	eq
 800a4ec:	6819      	ldreq	r1, [r3, #0]
 800a4ee:	685b      	ldreq	r3, [r3, #4]
 800a4f0:	1809      	addeq	r1, r1, r0
 800a4f2:	6021      	streq	r1, [r4, #0]
 800a4f4:	6063      	str	r3, [r4, #4]
 800a4f6:	6054      	str	r4, [r2, #4]
 800a4f8:	e7cb      	b.n	800a492 <_free_r+0x22>
 800a4fa:	bd38      	pop	{r3, r4, r5, pc}
 800a4fc:	200010f8 	.word	0x200010f8

0800a500 <sbrk_aligned>:
 800a500:	b570      	push	{r4, r5, r6, lr}
 800a502:	4e0e      	ldr	r6, [pc, #56]	; (800a53c <sbrk_aligned+0x3c>)
 800a504:	460c      	mov	r4, r1
 800a506:	6831      	ldr	r1, [r6, #0]
 800a508:	4605      	mov	r5, r0
 800a50a:	b911      	cbnz	r1, 800a512 <sbrk_aligned+0x12>
 800a50c:	f000 fb46 	bl	800ab9c <_sbrk_r>
 800a510:	6030      	str	r0, [r6, #0]
 800a512:	4621      	mov	r1, r4
 800a514:	4628      	mov	r0, r5
 800a516:	f000 fb41 	bl	800ab9c <_sbrk_r>
 800a51a:	1c43      	adds	r3, r0, #1
 800a51c:	d00a      	beq.n	800a534 <sbrk_aligned+0x34>
 800a51e:	1cc4      	adds	r4, r0, #3
 800a520:	f024 0403 	bic.w	r4, r4, #3
 800a524:	42a0      	cmp	r0, r4
 800a526:	d007      	beq.n	800a538 <sbrk_aligned+0x38>
 800a528:	1a21      	subs	r1, r4, r0
 800a52a:	4628      	mov	r0, r5
 800a52c:	f000 fb36 	bl	800ab9c <_sbrk_r>
 800a530:	3001      	adds	r0, #1
 800a532:	d101      	bne.n	800a538 <sbrk_aligned+0x38>
 800a534:	f04f 34ff 	mov.w	r4, #4294967295
 800a538:	4620      	mov	r0, r4
 800a53a:	bd70      	pop	{r4, r5, r6, pc}
 800a53c:	200010fc 	.word	0x200010fc

0800a540 <_malloc_r>:
 800a540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a544:	1ccd      	adds	r5, r1, #3
 800a546:	f025 0503 	bic.w	r5, r5, #3
 800a54a:	3508      	adds	r5, #8
 800a54c:	2d0c      	cmp	r5, #12
 800a54e:	bf38      	it	cc
 800a550:	250c      	movcc	r5, #12
 800a552:	2d00      	cmp	r5, #0
 800a554:	4607      	mov	r7, r0
 800a556:	db01      	blt.n	800a55c <_malloc_r+0x1c>
 800a558:	42a9      	cmp	r1, r5
 800a55a:	d905      	bls.n	800a568 <_malloc_r+0x28>
 800a55c:	230c      	movs	r3, #12
 800a55e:	2600      	movs	r6, #0
 800a560:	603b      	str	r3, [r7, #0]
 800a562:	4630      	mov	r0, r6
 800a564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a568:	4e2e      	ldr	r6, [pc, #184]	; (800a624 <_malloc_r+0xe4>)
 800a56a:	f000 fc2b 	bl	800adc4 <__malloc_lock>
 800a56e:	6833      	ldr	r3, [r6, #0]
 800a570:	461c      	mov	r4, r3
 800a572:	bb34      	cbnz	r4, 800a5c2 <_malloc_r+0x82>
 800a574:	4629      	mov	r1, r5
 800a576:	4638      	mov	r0, r7
 800a578:	f7ff ffc2 	bl	800a500 <sbrk_aligned>
 800a57c:	1c43      	adds	r3, r0, #1
 800a57e:	4604      	mov	r4, r0
 800a580:	d14d      	bne.n	800a61e <_malloc_r+0xde>
 800a582:	6834      	ldr	r4, [r6, #0]
 800a584:	4626      	mov	r6, r4
 800a586:	2e00      	cmp	r6, #0
 800a588:	d140      	bne.n	800a60c <_malloc_r+0xcc>
 800a58a:	6823      	ldr	r3, [r4, #0]
 800a58c:	4631      	mov	r1, r6
 800a58e:	4638      	mov	r0, r7
 800a590:	eb04 0803 	add.w	r8, r4, r3
 800a594:	f000 fb02 	bl	800ab9c <_sbrk_r>
 800a598:	4580      	cmp	r8, r0
 800a59a:	d13a      	bne.n	800a612 <_malloc_r+0xd2>
 800a59c:	6821      	ldr	r1, [r4, #0]
 800a59e:	3503      	adds	r5, #3
 800a5a0:	1a6d      	subs	r5, r5, r1
 800a5a2:	f025 0503 	bic.w	r5, r5, #3
 800a5a6:	3508      	adds	r5, #8
 800a5a8:	2d0c      	cmp	r5, #12
 800a5aa:	bf38      	it	cc
 800a5ac:	250c      	movcc	r5, #12
 800a5ae:	4638      	mov	r0, r7
 800a5b0:	4629      	mov	r1, r5
 800a5b2:	f7ff ffa5 	bl	800a500 <sbrk_aligned>
 800a5b6:	3001      	adds	r0, #1
 800a5b8:	d02b      	beq.n	800a612 <_malloc_r+0xd2>
 800a5ba:	6823      	ldr	r3, [r4, #0]
 800a5bc:	442b      	add	r3, r5
 800a5be:	6023      	str	r3, [r4, #0]
 800a5c0:	e00e      	b.n	800a5e0 <_malloc_r+0xa0>
 800a5c2:	6822      	ldr	r2, [r4, #0]
 800a5c4:	1b52      	subs	r2, r2, r5
 800a5c6:	d41e      	bmi.n	800a606 <_malloc_r+0xc6>
 800a5c8:	2a0b      	cmp	r2, #11
 800a5ca:	d916      	bls.n	800a5fa <_malloc_r+0xba>
 800a5cc:	1961      	adds	r1, r4, r5
 800a5ce:	42a3      	cmp	r3, r4
 800a5d0:	6025      	str	r5, [r4, #0]
 800a5d2:	bf18      	it	ne
 800a5d4:	6059      	strne	r1, [r3, #4]
 800a5d6:	6863      	ldr	r3, [r4, #4]
 800a5d8:	bf08      	it	eq
 800a5da:	6031      	streq	r1, [r6, #0]
 800a5dc:	5162      	str	r2, [r4, r5]
 800a5de:	604b      	str	r3, [r1, #4]
 800a5e0:	4638      	mov	r0, r7
 800a5e2:	f104 060b 	add.w	r6, r4, #11
 800a5e6:	f000 fbf3 	bl	800add0 <__malloc_unlock>
 800a5ea:	f026 0607 	bic.w	r6, r6, #7
 800a5ee:	1d23      	adds	r3, r4, #4
 800a5f0:	1af2      	subs	r2, r6, r3
 800a5f2:	d0b6      	beq.n	800a562 <_malloc_r+0x22>
 800a5f4:	1b9b      	subs	r3, r3, r6
 800a5f6:	50a3      	str	r3, [r4, r2]
 800a5f8:	e7b3      	b.n	800a562 <_malloc_r+0x22>
 800a5fa:	6862      	ldr	r2, [r4, #4]
 800a5fc:	42a3      	cmp	r3, r4
 800a5fe:	bf0c      	ite	eq
 800a600:	6032      	streq	r2, [r6, #0]
 800a602:	605a      	strne	r2, [r3, #4]
 800a604:	e7ec      	b.n	800a5e0 <_malloc_r+0xa0>
 800a606:	4623      	mov	r3, r4
 800a608:	6864      	ldr	r4, [r4, #4]
 800a60a:	e7b2      	b.n	800a572 <_malloc_r+0x32>
 800a60c:	4634      	mov	r4, r6
 800a60e:	6876      	ldr	r6, [r6, #4]
 800a610:	e7b9      	b.n	800a586 <_malloc_r+0x46>
 800a612:	230c      	movs	r3, #12
 800a614:	4638      	mov	r0, r7
 800a616:	603b      	str	r3, [r7, #0]
 800a618:	f000 fbda 	bl	800add0 <__malloc_unlock>
 800a61c:	e7a1      	b.n	800a562 <_malloc_r+0x22>
 800a61e:	6025      	str	r5, [r4, #0]
 800a620:	e7de      	b.n	800a5e0 <_malloc_r+0xa0>
 800a622:	bf00      	nop
 800a624:	200010f8 	.word	0x200010f8

0800a628 <__ssputs_r>:
 800a628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a62c:	688e      	ldr	r6, [r1, #8]
 800a62e:	4682      	mov	sl, r0
 800a630:	429e      	cmp	r6, r3
 800a632:	460c      	mov	r4, r1
 800a634:	4690      	mov	r8, r2
 800a636:	461f      	mov	r7, r3
 800a638:	d838      	bhi.n	800a6ac <__ssputs_r+0x84>
 800a63a:	898a      	ldrh	r2, [r1, #12]
 800a63c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a640:	d032      	beq.n	800a6a8 <__ssputs_r+0x80>
 800a642:	6825      	ldr	r5, [r4, #0]
 800a644:	6909      	ldr	r1, [r1, #16]
 800a646:	3301      	adds	r3, #1
 800a648:	eba5 0901 	sub.w	r9, r5, r1
 800a64c:	6965      	ldr	r5, [r4, #20]
 800a64e:	444b      	add	r3, r9
 800a650:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a654:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a658:	106d      	asrs	r5, r5, #1
 800a65a:	429d      	cmp	r5, r3
 800a65c:	bf38      	it	cc
 800a65e:	461d      	movcc	r5, r3
 800a660:	0553      	lsls	r3, r2, #21
 800a662:	d531      	bpl.n	800a6c8 <__ssputs_r+0xa0>
 800a664:	4629      	mov	r1, r5
 800a666:	f7ff ff6b 	bl	800a540 <_malloc_r>
 800a66a:	4606      	mov	r6, r0
 800a66c:	b950      	cbnz	r0, 800a684 <__ssputs_r+0x5c>
 800a66e:	230c      	movs	r3, #12
 800a670:	f04f 30ff 	mov.w	r0, #4294967295
 800a674:	f8ca 3000 	str.w	r3, [sl]
 800a678:	89a3      	ldrh	r3, [r4, #12]
 800a67a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a67e:	81a3      	strh	r3, [r4, #12]
 800a680:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a684:	464a      	mov	r2, r9
 800a686:	6921      	ldr	r1, [r4, #16]
 800a688:	f7fb ff6c 	bl	8006564 <memcpy>
 800a68c:	89a3      	ldrh	r3, [r4, #12]
 800a68e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a692:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a696:	81a3      	strh	r3, [r4, #12]
 800a698:	6126      	str	r6, [r4, #16]
 800a69a:	444e      	add	r6, r9
 800a69c:	6026      	str	r6, [r4, #0]
 800a69e:	463e      	mov	r6, r7
 800a6a0:	6165      	str	r5, [r4, #20]
 800a6a2:	eba5 0509 	sub.w	r5, r5, r9
 800a6a6:	60a5      	str	r5, [r4, #8]
 800a6a8:	42be      	cmp	r6, r7
 800a6aa:	d900      	bls.n	800a6ae <__ssputs_r+0x86>
 800a6ac:	463e      	mov	r6, r7
 800a6ae:	4632      	mov	r2, r6
 800a6b0:	4641      	mov	r1, r8
 800a6b2:	6820      	ldr	r0, [r4, #0]
 800a6b4:	f000 fb6c 	bl	800ad90 <memmove>
 800a6b8:	68a3      	ldr	r3, [r4, #8]
 800a6ba:	2000      	movs	r0, #0
 800a6bc:	1b9b      	subs	r3, r3, r6
 800a6be:	60a3      	str	r3, [r4, #8]
 800a6c0:	6823      	ldr	r3, [r4, #0]
 800a6c2:	4433      	add	r3, r6
 800a6c4:	6023      	str	r3, [r4, #0]
 800a6c6:	e7db      	b.n	800a680 <__ssputs_r+0x58>
 800a6c8:	462a      	mov	r2, r5
 800a6ca:	f000 fb87 	bl	800addc <_realloc_r>
 800a6ce:	4606      	mov	r6, r0
 800a6d0:	2800      	cmp	r0, #0
 800a6d2:	d1e1      	bne.n	800a698 <__ssputs_r+0x70>
 800a6d4:	4650      	mov	r0, sl
 800a6d6:	6921      	ldr	r1, [r4, #16]
 800a6d8:	f7ff feca 	bl	800a470 <_free_r>
 800a6dc:	e7c7      	b.n	800a66e <__ssputs_r+0x46>
	...

0800a6e0 <_svfiprintf_r>:
 800a6e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6e4:	4698      	mov	r8, r3
 800a6e6:	898b      	ldrh	r3, [r1, #12]
 800a6e8:	4607      	mov	r7, r0
 800a6ea:	061b      	lsls	r3, r3, #24
 800a6ec:	460d      	mov	r5, r1
 800a6ee:	4614      	mov	r4, r2
 800a6f0:	b09d      	sub	sp, #116	; 0x74
 800a6f2:	d50e      	bpl.n	800a712 <_svfiprintf_r+0x32>
 800a6f4:	690b      	ldr	r3, [r1, #16]
 800a6f6:	b963      	cbnz	r3, 800a712 <_svfiprintf_r+0x32>
 800a6f8:	2140      	movs	r1, #64	; 0x40
 800a6fa:	f7ff ff21 	bl	800a540 <_malloc_r>
 800a6fe:	6028      	str	r0, [r5, #0]
 800a700:	6128      	str	r0, [r5, #16]
 800a702:	b920      	cbnz	r0, 800a70e <_svfiprintf_r+0x2e>
 800a704:	230c      	movs	r3, #12
 800a706:	603b      	str	r3, [r7, #0]
 800a708:	f04f 30ff 	mov.w	r0, #4294967295
 800a70c:	e0d1      	b.n	800a8b2 <_svfiprintf_r+0x1d2>
 800a70e:	2340      	movs	r3, #64	; 0x40
 800a710:	616b      	str	r3, [r5, #20]
 800a712:	2300      	movs	r3, #0
 800a714:	9309      	str	r3, [sp, #36]	; 0x24
 800a716:	2320      	movs	r3, #32
 800a718:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a71c:	2330      	movs	r3, #48	; 0x30
 800a71e:	f04f 0901 	mov.w	r9, #1
 800a722:	f8cd 800c 	str.w	r8, [sp, #12]
 800a726:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a8cc <_svfiprintf_r+0x1ec>
 800a72a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a72e:	4623      	mov	r3, r4
 800a730:	469a      	mov	sl, r3
 800a732:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a736:	b10a      	cbz	r2, 800a73c <_svfiprintf_r+0x5c>
 800a738:	2a25      	cmp	r2, #37	; 0x25
 800a73a:	d1f9      	bne.n	800a730 <_svfiprintf_r+0x50>
 800a73c:	ebba 0b04 	subs.w	fp, sl, r4
 800a740:	d00b      	beq.n	800a75a <_svfiprintf_r+0x7a>
 800a742:	465b      	mov	r3, fp
 800a744:	4622      	mov	r2, r4
 800a746:	4629      	mov	r1, r5
 800a748:	4638      	mov	r0, r7
 800a74a:	f7ff ff6d 	bl	800a628 <__ssputs_r>
 800a74e:	3001      	adds	r0, #1
 800a750:	f000 80aa 	beq.w	800a8a8 <_svfiprintf_r+0x1c8>
 800a754:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a756:	445a      	add	r2, fp
 800a758:	9209      	str	r2, [sp, #36]	; 0x24
 800a75a:	f89a 3000 	ldrb.w	r3, [sl]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	f000 80a2 	beq.w	800a8a8 <_svfiprintf_r+0x1c8>
 800a764:	2300      	movs	r3, #0
 800a766:	f04f 32ff 	mov.w	r2, #4294967295
 800a76a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a76e:	f10a 0a01 	add.w	sl, sl, #1
 800a772:	9304      	str	r3, [sp, #16]
 800a774:	9307      	str	r3, [sp, #28]
 800a776:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a77a:	931a      	str	r3, [sp, #104]	; 0x68
 800a77c:	4654      	mov	r4, sl
 800a77e:	2205      	movs	r2, #5
 800a780:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a784:	4851      	ldr	r0, [pc, #324]	; (800a8cc <_svfiprintf_r+0x1ec>)
 800a786:	f7ff f999 	bl	8009abc <memchr>
 800a78a:	9a04      	ldr	r2, [sp, #16]
 800a78c:	b9d8      	cbnz	r0, 800a7c6 <_svfiprintf_r+0xe6>
 800a78e:	06d0      	lsls	r0, r2, #27
 800a790:	bf44      	itt	mi
 800a792:	2320      	movmi	r3, #32
 800a794:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a798:	0711      	lsls	r1, r2, #28
 800a79a:	bf44      	itt	mi
 800a79c:	232b      	movmi	r3, #43	; 0x2b
 800a79e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7a2:	f89a 3000 	ldrb.w	r3, [sl]
 800a7a6:	2b2a      	cmp	r3, #42	; 0x2a
 800a7a8:	d015      	beq.n	800a7d6 <_svfiprintf_r+0xf6>
 800a7aa:	4654      	mov	r4, sl
 800a7ac:	2000      	movs	r0, #0
 800a7ae:	f04f 0c0a 	mov.w	ip, #10
 800a7b2:	9a07      	ldr	r2, [sp, #28]
 800a7b4:	4621      	mov	r1, r4
 800a7b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a7ba:	3b30      	subs	r3, #48	; 0x30
 800a7bc:	2b09      	cmp	r3, #9
 800a7be:	d94e      	bls.n	800a85e <_svfiprintf_r+0x17e>
 800a7c0:	b1b0      	cbz	r0, 800a7f0 <_svfiprintf_r+0x110>
 800a7c2:	9207      	str	r2, [sp, #28]
 800a7c4:	e014      	b.n	800a7f0 <_svfiprintf_r+0x110>
 800a7c6:	eba0 0308 	sub.w	r3, r0, r8
 800a7ca:	fa09 f303 	lsl.w	r3, r9, r3
 800a7ce:	4313      	orrs	r3, r2
 800a7d0:	46a2      	mov	sl, r4
 800a7d2:	9304      	str	r3, [sp, #16]
 800a7d4:	e7d2      	b.n	800a77c <_svfiprintf_r+0x9c>
 800a7d6:	9b03      	ldr	r3, [sp, #12]
 800a7d8:	1d19      	adds	r1, r3, #4
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	9103      	str	r1, [sp, #12]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	bfbb      	ittet	lt
 800a7e2:	425b      	neglt	r3, r3
 800a7e4:	f042 0202 	orrlt.w	r2, r2, #2
 800a7e8:	9307      	strge	r3, [sp, #28]
 800a7ea:	9307      	strlt	r3, [sp, #28]
 800a7ec:	bfb8      	it	lt
 800a7ee:	9204      	strlt	r2, [sp, #16]
 800a7f0:	7823      	ldrb	r3, [r4, #0]
 800a7f2:	2b2e      	cmp	r3, #46	; 0x2e
 800a7f4:	d10c      	bne.n	800a810 <_svfiprintf_r+0x130>
 800a7f6:	7863      	ldrb	r3, [r4, #1]
 800a7f8:	2b2a      	cmp	r3, #42	; 0x2a
 800a7fa:	d135      	bne.n	800a868 <_svfiprintf_r+0x188>
 800a7fc:	9b03      	ldr	r3, [sp, #12]
 800a7fe:	3402      	adds	r4, #2
 800a800:	1d1a      	adds	r2, r3, #4
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	9203      	str	r2, [sp, #12]
 800a806:	2b00      	cmp	r3, #0
 800a808:	bfb8      	it	lt
 800a80a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a80e:	9305      	str	r3, [sp, #20]
 800a810:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800a8d0 <_svfiprintf_r+0x1f0>
 800a814:	2203      	movs	r2, #3
 800a816:	4650      	mov	r0, sl
 800a818:	7821      	ldrb	r1, [r4, #0]
 800a81a:	f7ff f94f 	bl	8009abc <memchr>
 800a81e:	b140      	cbz	r0, 800a832 <_svfiprintf_r+0x152>
 800a820:	2340      	movs	r3, #64	; 0x40
 800a822:	eba0 000a 	sub.w	r0, r0, sl
 800a826:	fa03 f000 	lsl.w	r0, r3, r0
 800a82a:	9b04      	ldr	r3, [sp, #16]
 800a82c:	3401      	adds	r4, #1
 800a82e:	4303      	orrs	r3, r0
 800a830:	9304      	str	r3, [sp, #16]
 800a832:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a836:	2206      	movs	r2, #6
 800a838:	4826      	ldr	r0, [pc, #152]	; (800a8d4 <_svfiprintf_r+0x1f4>)
 800a83a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a83e:	f7ff f93d 	bl	8009abc <memchr>
 800a842:	2800      	cmp	r0, #0
 800a844:	d038      	beq.n	800a8b8 <_svfiprintf_r+0x1d8>
 800a846:	4b24      	ldr	r3, [pc, #144]	; (800a8d8 <_svfiprintf_r+0x1f8>)
 800a848:	bb1b      	cbnz	r3, 800a892 <_svfiprintf_r+0x1b2>
 800a84a:	9b03      	ldr	r3, [sp, #12]
 800a84c:	3307      	adds	r3, #7
 800a84e:	f023 0307 	bic.w	r3, r3, #7
 800a852:	3308      	adds	r3, #8
 800a854:	9303      	str	r3, [sp, #12]
 800a856:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a858:	4433      	add	r3, r6
 800a85a:	9309      	str	r3, [sp, #36]	; 0x24
 800a85c:	e767      	b.n	800a72e <_svfiprintf_r+0x4e>
 800a85e:	460c      	mov	r4, r1
 800a860:	2001      	movs	r0, #1
 800a862:	fb0c 3202 	mla	r2, ip, r2, r3
 800a866:	e7a5      	b.n	800a7b4 <_svfiprintf_r+0xd4>
 800a868:	2300      	movs	r3, #0
 800a86a:	f04f 0c0a 	mov.w	ip, #10
 800a86e:	4619      	mov	r1, r3
 800a870:	3401      	adds	r4, #1
 800a872:	9305      	str	r3, [sp, #20]
 800a874:	4620      	mov	r0, r4
 800a876:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a87a:	3a30      	subs	r2, #48	; 0x30
 800a87c:	2a09      	cmp	r2, #9
 800a87e:	d903      	bls.n	800a888 <_svfiprintf_r+0x1a8>
 800a880:	2b00      	cmp	r3, #0
 800a882:	d0c5      	beq.n	800a810 <_svfiprintf_r+0x130>
 800a884:	9105      	str	r1, [sp, #20]
 800a886:	e7c3      	b.n	800a810 <_svfiprintf_r+0x130>
 800a888:	4604      	mov	r4, r0
 800a88a:	2301      	movs	r3, #1
 800a88c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a890:	e7f0      	b.n	800a874 <_svfiprintf_r+0x194>
 800a892:	ab03      	add	r3, sp, #12
 800a894:	9300      	str	r3, [sp, #0]
 800a896:	462a      	mov	r2, r5
 800a898:	4638      	mov	r0, r7
 800a89a:	4b10      	ldr	r3, [pc, #64]	; (800a8dc <_svfiprintf_r+0x1fc>)
 800a89c:	a904      	add	r1, sp, #16
 800a89e:	f7fb ff15 	bl	80066cc <_printf_float>
 800a8a2:	1c42      	adds	r2, r0, #1
 800a8a4:	4606      	mov	r6, r0
 800a8a6:	d1d6      	bne.n	800a856 <_svfiprintf_r+0x176>
 800a8a8:	89ab      	ldrh	r3, [r5, #12]
 800a8aa:	065b      	lsls	r3, r3, #25
 800a8ac:	f53f af2c 	bmi.w	800a708 <_svfiprintf_r+0x28>
 800a8b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a8b2:	b01d      	add	sp, #116	; 0x74
 800a8b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8b8:	ab03      	add	r3, sp, #12
 800a8ba:	9300      	str	r3, [sp, #0]
 800a8bc:	462a      	mov	r2, r5
 800a8be:	4638      	mov	r0, r7
 800a8c0:	4b06      	ldr	r3, [pc, #24]	; (800a8dc <_svfiprintf_r+0x1fc>)
 800a8c2:	a904      	add	r1, sp, #16
 800a8c4:	f7fc f99e 	bl	8006c04 <_printf_i>
 800a8c8:	e7eb      	b.n	800a8a2 <_svfiprintf_r+0x1c2>
 800a8ca:	bf00      	nop
 800a8cc:	0800cf2c 	.word	0x0800cf2c
 800a8d0:	0800cf32 	.word	0x0800cf32
 800a8d4:	0800cf36 	.word	0x0800cf36
 800a8d8:	080066cd 	.word	0x080066cd
 800a8dc:	0800a629 	.word	0x0800a629

0800a8e0 <__sfputc_r>:
 800a8e0:	6893      	ldr	r3, [r2, #8]
 800a8e2:	b410      	push	{r4}
 800a8e4:	3b01      	subs	r3, #1
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	6093      	str	r3, [r2, #8]
 800a8ea:	da07      	bge.n	800a8fc <__sfputc_r+0x1c>
 800a8ec:	6994      	ldr	r4, [r2, #24]
 800a8ee:	42a3      	cmp	r3, r4
 800a8f0:	db01      	blt.n	800a8f6 <__sfputc_r+0x16>
 800a8f2:	290a      	cmp	r1, #10
 800a8f4:	d102      	bne.n	800a8fc <__sfputc_r+0x1c>
 800a8f6:	bc10      	pop	{r4}
 800a8f8:	f7fd bc06 	b.w	8008108 <__swbuf_r>
 800a8fc:	6813      	ldr	r3, [r2, #0]
 800a8fe:	1c58      	adds	r0, r3, #1
 800a900:	6010      	str	r0, [r2, #0]
 800a902:	7019      	strb	r1, [r3, #0]
 800a904:	4608      	mov	r0, r1
 800a906:	bc10      	pop	{r4}
 800a908:	4770      	bx	lr

0800a90a <__sfputs_r>:
 800a90a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a90c:	4606      	mov	r6, r0
 800a90e:	460f      	mov	r7, r1
 800a910:	4614      	mov	r4, r2
 800a912:	18d5      	adds	r5, r2, r3
 800a914:	42ac      	cmp	r4, r5
 800a916:	d101      	bne.n	800a91c <__sfputs_r+0x12>
 800a918:	2000      	movs	r0, #0
 800a91a:	e007      	b.n	800a92c <__sfputs_r+0x22>
 800a91c:	463a      	mov	r2, r7
 800a91e:	4630      	mov	r0, r6
 800a920:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a924:	f7ff ffdc 	bl	800a8e0 <__sfputc_r>
 800a928:	1c43      	adds	r3, r0, #1
 800a92a:	d1f3      	bne.n	800a914 <__sfputs_r+0xa>
 800a92c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a930 <_vfiprintf_r>:
 800a930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a934:	460d      	mov	r5, r1
 800a936:	4614      	mov	r4, r2
 800a938:	4698      	mov	r8, r3
 800a93a:	4606      	mov	r6, r0
 800a93c:	b09d      	sub	sp, #116	; 0x74
 800a93e:	b118      	cbz	r0, 800a948 <_vfiprintf_r+0x18>
 800a940:	6983      	ldr	r3, [r0, #24]
 800a942:	b90b      	cbnz	r3, 800a948 <_vfiprintf_r+0x18>
 800a944:	f7fe fc30 	bl	80091a8 <__sinit>
 800a948:	4b89      	ldr	r3, [pc, #548]	; (800ab70 <_vfiprintf_r+0x240>)
 800a94a:	429d      	cmp	r5, r3
 800a94c:	d11b      	bne.n	800a986 <_vfiprintf_r+0x56>
 800a94e:	6875      	ldr	r5, [r6, #4]
 800a950:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a952:	07d9      	lsls	r1, r3, #31
 800a954:	d405      	bmi.n	800a962 <_vfiprintf_r+0x32>
 800a956:	89ab      	ldrh	r3, [r5, #12]
 800a958:	059a      	lsls	r2, r3, #22
 800a95a:	d402      	bmi.n	800a962 <_vfiprintf_r+0x32>
 800a95c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a95e:	f7ff f82c 	bl	80099ba <__retarget_lock_acquire_recursive>
 800a962:	89ab      	ldrh	r3, [r5, #12]
 800a964:	071b      	lsls	r3, r3, #28
 800a966:	d501      	bpl.n	800a96c <_vfiprintf_r+0x3c>
 800a968:	692b      	ldr	r3, [r5, #16]
 800a96a:	b9eb      	cbnz	r3, 800a9a8 <_vfiprintf_r+0x78>
 800a96c:	4629      	mov	r1, r5
 800a96e:	4630      	mov	r0, r6
 800a970:	f7fd fc1c 	bl	80081ac <__swsetup_r>
 800a974:	b1c0      	cbz	r0, 800a9a8 <_vfiprintf_r+0x78>
 800a976:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a978:	07dc      	lsls	r4, r3, #31
 800a97a:	d50e      	bpl.n	800a99a <_vfiprintf_r+0x6a>
 800a97c:	f04f 30ff 	mov.w	r0, #4294967295
 800a980:	b01d      	add	sp, #116	; 0x74
 800a982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a986:	4b7b      	ldr	r3, [pc, #492]	; (800ab74 <_vfiprintf_r+0x244>)
 800a988:	429d      	cmp	r5, r3
 800a98a:	d101      	bne.n	800a990 <_vfiprintf_r+0x60>
 800a98c:	68b5      	ldr	r5, [r6, #8]
 800a98e:	e7df      	b.n	800a950 <_vfiprintf_r+0x20>
 800a990:	4b79      	ldr	r3, [pc, #484]	; (800ab78 <_vfiprintf_r+0x248>)
 800a992:	429d      	cmp	r5, r3
 800a994:	bf08      	it	eq
 800a996:	68f5      	ldreq	r5, [r6, #12]
 800a998:	e7da      	b.n	800a950 <_vfiprintf_r+0x20>
 800a99a:	89ab      	ldrh	r3, [r5, #12]
 800a99c:	0598      	lsls	r0, r3, #22
 800a99e:	d4ed      	bmi.n	800a97c <_vfiprintf_r+0x4c>
 800a9a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a9a2:	f7ff f80b 	bl	80099bc <__retarget_lock_release_recursive>
 800a9a6:	e7e9      	b.n	800a97c <_vfiprintf_r+0x4c>
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	9309      	str	r3, [sp, #36]	; 0x24
 800a9ac:	2320      	movs	r3, #32
 800a9ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a9b2:	2330      	movs	r3, #48	; 0x30
 800a9b4:	f04f 0901 	mov.w	r9, #1
 800a9b8:	f8cd 800c 	str.w	r8, [sp, #12]
 800a9bc:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800ab7c <_vfiprintf_r+0x24c>
 800a9c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a9c4:	4623      	mov	r3, r4
 800a9c6:	469a      	mov	sl, r3
 800a9c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a9cc:	b10a      	cbz	r2, 800a9d2 <_vfiprintf_r+0xa2>
 800a9ce:	2a25      	cmp	r2, #37	; 0x25
 800a9d0:	d1f9      	bne.n	800a9c6 <_vfiprintf_r+0x96>
 800a9d2:	ebba 0b04 	subs.w	fp, sl, r4
 800a9d6:	d00b      	beq.n	800a9f0 <_vfiprintf_r+0xc0>
 800a9d8:	465b      	mov	r3, fp
 800a9da:	4622      	mov	r2, r4
 800a9dc:	4629      	mov	r1, r5
 800a9de:	4630      	mov	r0, r6
 800a9e0:	f7ff ff93 	bl	800a90a <__sfputs_r>
 800a9e4:	3001      	adds	r0, #1
 800a9e6:	f000 80aa 	beq.w	800ab3e <_vfiprintf_r+0x20e>
 800a9ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a9ec:	445a      	add	r2, fp
 800a9ee:	9209      	str	r2, [sp, #36]	; 0x24
 800a9f0:	f89a 3000 	ldrb.w	r3, [sl]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	f000 80a2 	beq.w	800ab3e <_vfiprintf_r+0x20e>
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	f04f 32ff 	mov.w	r2, #4294967295
 800aa00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa04:	f10a 0a01 	add.w	sl, sl, #1
 800aa08:	9304      	str	r3, [sp, #16]
 800aa0a:	9307      	str	r3, [sp, #28]
 800aa0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aa10:	931a      	str	r3, [sp, #104]	; 0x68
 800aa12:	4654      	mov	r4, sl
 800aa14:	2205      	movs	r2, #5
 800aa16:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa1a:	4858      	ldr	r0, [pc, #352]	; (800ab7c <_vfiprintf_r+0x24c>)
 800aa1c:	f7ff f84e 	bl	8009abc <memchr>
 800aa20:	9a04      	ldr	r2, [sp, #16]
 800aa22:	b9d8      	cbnz	r0, 800aa5c <_vfiprintf_r+0x12c>
 800aa24:	06d1      	lsls	r1, r2, #27
 800aa26:	bf44      	itt	mi
 800aa28:	2320      	movmi	r3, #32
 800aa2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa2e:	0713      	lsls	r3, r2, #28
 800aa30:	bf44      	itt	mi
 800aa32:	232b      	movmi	r3, #43	; 0x2b
 800aa34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa38:	f89a 3000 	ldrb.w	r3, [sl]
 800aa3c:	2b2a      	cmp	r3, #42	; 0x2a
 800aa3e:	d015      	beq.n	800aa6c <_vfiprintf_r+0x13c>
 800aa40:	4654      	mov	r4, sl
 800aa42:	2000      	movs	r0, #0
 800aa44:	f04f 0c0a 	mov.w	ip, #10
 800aa48:	9a07      	ldr	r2, [sp, #28]
 800aa4a:	4621      	mov	r1, r4
 800aa4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa50:	3b30      	subs	r3, #48	; 0x30
 800aa52:	2b09      	cmp	r3, #9
 800aa54:	d94e      	bls.n	800aaf4 <_vfiprintf_r+0x1c4>
 800aa56:	b1b0      	cbz	r0, 800aa86 <_vfiprintf_r+0x156>
 800aa58:	9207      	str	r2, [sp, #28]
 800aa5a:	e014      	b.n	800aa86 <_vfiprintf_r+0x156>
 800aa5c:	eba0 0308 	sub.w	r3, r0, r8
 800aa60:	fa09 f303 	lsl.w	r3, r9, r3
 800aa64:	4313      	orrs	r3, r2
 800aa66:	46a2      	mov	sl, r4
 800aa68:	9304      	str	r3, [sp, #16]
 800aa6a:	e7d2      	b.n	800aa12 <_vfiprintf_r+0xe2>
 800aa6c:	9b03      	ldr	r3, [sp, #12]
 800aa6e:	1d19      	adds	r1, r3, #4
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	9103      	str	r1, [sp, #12]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	bfbb      	ittet	lt
 800aa78:	425b      	neglt	r3, r3
 800aa7a:	f042 0202 	orrlt.w	r2, r2, #2
 800aa7e:	9307      	strge	r3, [sp, #28]
 800aa80:	9307      	strlt	r3, [sp, #28]
 800aa82:	bfb8      	it	lt
 800aa84:	9204      	strlt	r2, [sp, #16]
 800aa86:	7823      	ldrb	r3, [r4, #0]
 800aa88:	2b2e      	cmp	r3, #46	; 0x2e
 800aa8a:	d10c      	bne.n	800aaa6 <_vfiprintf_r+0x176>
 800aa8c:	7863      	ldrb	r3, [r4, #1]
 800aa8e:	2b2a      	cmp	r3, #42	; 0x2a
 800aa90:	d135      	bne.n	800aafe <_vfiprintf_r+0x1ce>
 800aa92:	9b03      	ldr	r3, [sp, #12]
 800aa94:	3402      	adds	r4, #2
 800aa96:	1d1a      	adds	r2, r3, #4
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	9203      	str	r2, [sp, #12]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	bfb8      	it	lt
 800aaa0:	f04f 33ff 	movlt.w	r3, #4294967295
 800aaa4:	9305      	str	r3, [sp, #20]
 800aaa6:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800ab80 <_vfiprintf_r+0x250>
 800aaaa:	2203      	movs	r2, #3
 800aaac:	4650      	mov	r0, sl
 800aaae:	7821      	ldrb	r1, [r4, #0]
 800aab0:	f7ff f804 	bl	8009abc <memchr>
 800aab4:	b140      	cbz	r0, 800aac8 <_vfiprintf_r+0x198>
 800aab6:	2340      	movs	r3, #64	; 0x40
 800aab8:	eba0 000a 	sub.w	r0, r0, sl
 800aabc:	fa03 f000 	lsl.w	r0, r3, r0
 800aac0:	9b04      	ldr	r3, [sp, #16]
 800aac2:	3401      	adds	r4, #1
 800aac4:	4303      	orrs	r3, r0
 800aac6:	9304      	str	r3, [sp, #16]
 800aac8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aacc:	2206      	movs	r2, #6
 800aace:	482d      	ldr	r0, [pc, #180]	; (800ab84 <_vfiprintf_r+0x254>)
 800aad0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aad4:	f7fe fff2 	bl	8009abc <memchr>
 800aad8:	2800      	cmp	r0, #0
 800aada:	d03f      	beq.n	800ab5c <_vfiprintf_r+0x22c>
 800aadc:	4b2a      	ldr	r3, [pc, #168]	; (800ab88 <_vfiprintf_r+0x258>)
 800aade:	bb1b      	cbnz	r3, 800ab28 <_vfiprintf_r+0x1f8>
 800aae0:	9b03      	ldr	r3, [sp, #12]
 800aae2:	3307      	adds	r3, #7
 800aae4:	f023 0307 	bic.w	r3, r3, #7
 800aae8:	3308      	adds	r3, #8
 800aaea:	9303      	str	r3, [sp, #12]
 800aaec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aaee:	443b      	add	r3, r7
 800aaf0:	9309      	str	r3, [sp, #36]	; 0x24
 800aaf2:	e767      	b.n	800a9c4 <_vfiprintf_r+0x94>
 800aaf4:	460c      	mov	r4, r1
 800aaf6:	2001      	movs	r0, #1
 800aaf8:	fb0c 3202 	mla	r2, ip, r2, r3
 800aafc:	e7a5      	b.n	800aa4a <_vfiprintf_r+0x11a>
 800aafe:	2300      	movs	r3, #0
 800ab00:	f04f 0c0a 	mov.w	ip, #10
 800ab04:	4619      	mov	r1, r3
 800ab06:	3401      	adds	r4, #1
 800ab08:	9305      	str	r3, [sp, #20]
 800ab0a:	4620      	mov	r0, r4
 800ab0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab10:	3a30      	subs	r2, #48	; 0x30
 800ab12:	2a09      	cmp	r2, #9
 800ab14:	d903      	bls.n	800ab1e <_vfiprintf_r+0x1ee>
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d0c5      	beq.n	800aaa6 <_vfiprintf_r+0x176>
 800ab1a:	9105      	str	r1, [sp, #20]
 800ab1c:	e7c3      	b.n	800aaa6 <_vfiprintf_r+0x176>
 800ab1e:	4604      	mov	r4, r0
 800ab20:	2301      	movs	r3, #1
 800ab22:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab26:	e7f0      	b.n	800ab0a <_vfiprintf_r+0x1da>
 800ab28:	ab03      	add	r3, sp, #12
 800ab2a:	9300      	str	r3, [sp, #0]
 800ab2c:	462a      	mov	r2, r5
 800ab2e:	4630      	mov	r0, r6
 800ab30:	4b16      	ldr	r3, [pc, #88]	; (800ab8c <_vfiprintf_r+0x25c>)
 800ab32:	a904      	add	r1, sp, #16
 800ab34:	f7fb fdca 	bl	80066cc <_printf_float>
 800ab38:	4607      	mov	r7, r0
 800ab3a:	1c78      	adds	r0, r7, #1
 800ab3c:	d1d6      	bne.n	800aaec <_vfiprintf_r+0x1bc>
 800ab3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab40:	07d9      	lsls	r1, r3, #31
 800ab42:	d405      	bmi.n	800ab50 <_vfiprintf_r+0x220>
 800ab44:	89ab      	ldrh	r3, [r5, #12]
 800ab46:	059a      	lsls	r2, r3, #22
 800ab48:	d402      	bmi.n	800ab50 <_vfiprintf_r+0x220>
 800ab4a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab4c:	f7fe ff36 	bl	80099bc <__retarget_lock_release_recursive>
 800ab50:	89ab      	ldrh	r3, [r5, #12]
 800ab52:	065b      	lsls	r3, r3, #25
 800ab54:	f53f af12 	bmi.w	800a97c <_vfiprintf_r+0x4c>
 800ab58:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ab5a:	e711      	b.n	800a980 <_vfiprintf_r+0x50>
 800ab5c:	ab03      	add	r3, sp, #12
 800ab5e:	9300      	str	r3, [sp, #0]
 800ab60:	462a      	mov	r2, r5
 800ab62:	4630      	mov	r0, r6
 800ab64:	4b09      	ldr	r3, [pc, #36]	; (800ab8c <_vfiprintf_r+0x25c>)
 800ab66:	a904      	add	r1, sp, #16
 800ab68:	f7fc f84c 	bl	8006c04 <_printf_i>
 800ab6c:	e7e4      	b.n	800ab38 <_vfiprintf_r+0x208>
 800ab6e:	bf00      	nop
 800ab70:	0800cd14 	.word	0x0800cd14
 800ab74:	0800cd34 	.word	0x0800cd34
 800ab78:	0800ccf4 	.word	0x0800ccf4
 800ab7c:	0800cf2c 	.word	0x0800cf2c
 800ab80:	0800cf32 	.word	0x0800cf32
 800ab84:	0800cf36 	.word	0x0800cf36
 800ab88:	080066cd 	.word	0x080066cd
 800ab8c:	0800a90b 	.word	0x0800a90b

0800ab90 <nan>:
 800ab90:	2000      	movs	r0, #0
 800ab92:	4901      	ldr	r1, [pc, #4]	; (800ab98 <nan+0x8>)
 800ab94:	4770      	bx	lr
 800ab96:	bf00      	nop
 800ab98:	7ff80000 	.word	0x7ff80000

0800ab9c <_sbrk_r>:
 800ab9c:	b538      	push	{r3, r4, r5, lr}
 800ab9e:	2300      	movs	r3, #0
 800aba0:	4d05      	ldr	r5, [pc, #20]	; (800abb8 <_sbrk_r+0x1c>)
 800aba2:	4604      	mov	r4, r0
 800aba4:	4608      	mov	r0, r1
 800aba6:	602b      	str	r3, [r5, #0]
 800aba8:	f7f7 fd98 	bl	80026dc <_sbrk>
 800abac:	1c43      	adds	r3, r0, #1
 800abae:	d102      	bne.n	800abb6 <_sbrk_r+0x1a>
 800abb0:	682b      	ldr	r3, [r5, #0]
 800abb2:	b103      	cbz	r3, 800abb6 <_sbrk_r+0x1a>
 800abb4:	6023      	str	r3, [r4, #0]
 800abb6:	bd38      	pop	{r3, r4, r5, pc}
 800abb8:	20001100 	.word	0x20001100

0800abbc <__sread>:
 800abbc:	b510      	push	{r4, lr}
 800abbe:	460c      	mov	r4, r1
 800abc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abc4:	f000 f93a 	bl	800ae3c <_read_r>
 800abc8:	2800      	cmp	r0, #0
 800abca:	bfab      	itete	ge
 800abcc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800abce:	89a3      	ldrhlt	r3, [r4, #12]
 800abd0:	181b      	addge	r3, r3, r0
 800abd2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800abd6:	bfac      	ite	ge
 800abd8:	6563      	strge	r3, [r4, #84]	; 0x54
 800abda:	81a3      	strhlt	r3, [r4, #12]
 800abdc:	bd10      	pop	{r4, pc}

0800abde <__swrite>:
 800abde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abe2:	461f      	mov	r7, r3
 800abe4:	898b      	ldrh	r3, [r1, #12]
 800abe6:	4605      	mov	r5, r0
 800abe8:	05db      	lsls	r3, r3, #23
 800abea:	460c      	mov	r4, r1
 800abec:	4616      	mov	r6, r2
 800abee:	d505      	bpl.n	800abfc <__swrite+0x1e>
 800abf0:	2302      	movs	r3, #2
 800abf2:	2200      	movs	r2, #0
 800abf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abf8:	f000 f8b8 	bl	800ad6c <_lseek_r>
 800abfc:	89a3      	ldrh	r3, [r4, #12]
 800abfe:	4632      	mov	r2, r6
 800ac00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ac04:	81a3      	strh	r3, [r4, #12]
 800ac06:	4628      	mov	r0, r5
 800ac08:	463b      	mov	r3, r7
 800ac0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac12:	f000 b837 	b.w	800ac84 <_write_r>

0800ac16 <__sseek>:
 800ac16:	b510      	push	{r4, lr}
 800ac18:	460c      	mov	r4, r1
 800ac1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac1e:	f000 f8a5 	bl	800ad6c <_lseek_r>
 800ac22:	1c43      	adds	r3, r0, #1
 800ac24:	89a3      	ldrh	r3, [r4, #12]
 800ac26:	bf15      	itete	ne
 800ac28:	6560      	strne	r0, [r4, #84]	; 0x54
 800ac2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ac2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ac32:	81a3      	strheq	r3, [r4, #12]
 800ac34:	bf18      	it	ne
 800ac36:	81a3      	strhne	r3, [r4, #12]
 800ac38:	bd10      	pop	{r4, pc}

0800ac3a <__sclose>:
 800ac3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac3e:	f000 b851 	b.w	800ace4 <_close_r>

0800ac42 <strncmp>:
 800ac42:	4603      	mov	r3, r0
 800ac44:	b510      	push	{r4, lr}
 800ac46:	b172      	cbz	r2, 800ac66 <strncmp+0x24>
 800ac48:	3901      	subs	r1, #1
 800ac4a:	1884      	adds	r4, r0, r2
 800ac4c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ac50:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ac54:	4290      	cmp	r0, r2
 800ac56:	d101      	bne.n	800ac5c <strncmp+0x1a>
 800ac58:	42a3      	cmp	r3, r4
 800ac5a:	d101      	bne.n	800ac60 <strncmp+0x1e>
 800ac5c:	1a80      	subs	r0, r0, r2
 800ac5e:	bd10      	pop	{r4, pc}
 800ac60:	2800      	cmp	r0, #0
 800ac62:	d1f3      	bne.n	800ac4c <strncmp+0xa>
 800ac64:	e7fa      	b.n	800ac5c <strncmp+0x1a>
 800ac66:	4610      	mov	r0, r2
 800ac68:	e7f9      	b.n	800ac5e <strncmp+0x1c>

0800ac6a <__ascii_wctomb>:
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	4608      	mov	r0, r1
 800ac6e:	b141      	cbz	r1, 800ac82 <__ascii_wctomb+0x18>
 800ac70:	2aff      	cmp	r2, #255	; 0xff
 800ac72:	d904      	bls.n	800ac7e <__ascii_wctomb+0x14>
 800ac74:	228a      	movs	r2, #138	; 0x8a
 800ac76:	f04f 30ff 	mov.w	r0, #4294967295
 800ac7a:	601a      	str	r2, [r3, #0]
 800ac7c:	4770      	bx	lr
 800ac7e:	2001      	movs	r0, #1
 800ac80:	700a      	strb	r2, [r1, #0]
 800ac82:	4770      	bx	lr

0800ac84 <_write_r>:
 800ac84:	b538      	push	{r3, r4, r5, lr}
 800ac86:	4604      	mov	r4, r0
 800ac88:	4608      	mov	r0, r1
 800ac8a:	4611      	mov	r1, r2
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	4d05      	ldr	r5, [pc, #20]	; (800aca4 <_write_r+0x20>)
 800ac90:	602a      	str	r2, [r5, #0]
 800ac92:	461a      	mov	r2, r3
 800ac94:	f7f7 fcd6 	bl	8002644 <_write>
 800ac98:	1c43      	adds	r3, r0, #1
 800ac9a:	d102      	bne.n	800aca2 <_write_r+0x1e>
 800ac9c:	682b      	ldr	r3, [r5, #0]
 800ac9e:	b103      	cbz	r3, 800aca2 <_write_r+0x1e>
 800aca0:	6023      	str	r3, [r4, #0]
 800aca2:	bd38      	pop	{r3, r4, r5, pc}
 800aca4:	20001100 	.word	0x20001100

0800aca8 <__assert_func>:
 800aca8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800acaa:	4614      	mov	r4, r2
 800acac:	461a      	mov	r2, r3
 800acae:	4b09      	ldr	r3, [pc, #36]	; (800acd4 <__assert_func+0x2c>)
 800acb0:	4605      	mov	r5, r0
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	68d8      	ldr	r0, [r3, #12]
 800acb6:	b14c      	cbz	r4, 800accc <__assert_func+0x24>
 800acb8:	4b07      	ldr	r3, [pc, #28]	; (800acd8 <__assert_func+0x30>)
 800acba:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800acbe:	9100      	str	r1, [sp, #0]
 800acc0:	462b      	mov	r3, r5
 800acc2:	4906      	ldr	r1, [pc, #24]	; (800acdc <__assert_func+0x34>)
 800acc4:	f000 f81e 	bl	800ad04 <fiprintf>
 800acc8:	f000 f8ca 	bl	800ae60 <abort>
 800accc:	4b04      	ldr	r3, [pc, #16]	; (800ace0 <__assert_func+0x38>)
 800acce:	461c      	mov	r4, r3
 800acd0:	e7f3      	b.n	800acba <__assert_func+0x12>
 800acd2:	bf00      	nop
 800acd4:	2000000c 	.word	0x2000000c
 800acd8:	0800cf3d 	.word	0x0800cf3d
 800acdc:	0800cf4a 	.word	0x0800cf4a
 800ace0:	0800cf78 	.word	0x0800cf78

0800ace4 <_close_r>:
 800ace4:	b538      	push	{r3, r4, r5, lr}
 800ace6:	2300      	movs	r3, #0
 800ace8:	4d05      	ldr	r5, [pc, #20]	; (800ad00 <_close_r+0x1c>)
 800acea:	4604      	mov	r4, r0
 800acec:	4608      	mov	r0, r1
 800acee:	602b      	str	r3, [r5, #0]
 800acf0:	f7f7 fcc4 	bl	800267c <_close>
 800acf4:	1c43      	adds	r3, r0, #1
 800acf6:	d102      	bne.n	800acfe <_close_r+0x1a>
 800acf8:	682b      	ldr	r3, [r5, #0]
 800acfa:	b103      	cbz	r3, 800acfe <_close_r+0x1a>
 800acfc:	6023      	str	r3, [r4, #0]
 800acfe:	bd38      	pop	{r3, r4, r5, pc}
 800ad00:	20001100 	.word	0x20001100

0800ad04 <fiprintf>:
 800ad04:	b40e      	push	{r1, r2, r3}
 800ad06:	b503      	push	{r0, r1, lr}
 800ad08:	4601      	mov	r1, r0
 800ad0a:	ab03      	add	r3, sp, #12
 800ad0c:	4805      	ldr	r0, [pc, #20]	; (800ad24 <fiprintf+0x20>)
 800ad0e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad12:	6800      	ldr	r0, [r0, #0]
 800ad14:	9301      	str	r3, [sp, #4]
 800ad16:	f7ff fe0b 	bl	800a930 <_vfiprintf_r>
 800ad1a:	b002      	add	sp, #8
 800ad1c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad20:	b003      	add	sp, #12
 800ad22:	4770      	bx	lr
 800ad24:	2000000c 	.word	0x2000000c

0800ad28 <_fstat_r>:
 800ad28:	b538      	push	{r3, r4, r5, lr}
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	4d06      	ldr	r5, [pc, #24]	; (800ad48 <_fstat_r+0x20>)
 800ad2e:	4604      	mov	r4, r0
 800ad30:	4608      	mov	r0, r1
 800ad32:	4611      	mov	r1, r2
 800ad34:	602b      	str	r3, [r5, #0]
 800ad36:	f7f7 fcac 	bl	8002692 <_fstat>
 800ad3a:	1c43      	adds	r3, r0, #1
 800ad3c:	d102      	bne.n	800ad44 <_fstat_r+0x1c>
 800ad3e:	682b      	ldr	r3, [r5, #0]
 800ad40:	b103      	cbz	r3, 800ad44 <_fstat_r+0x1c>
 800ad42:	6023      	str	r3, [r4, #0]
 800ad44:	bd38      	pop	{r3, r4, r5, pc}
 800ad46:	bf00      	nop
 800ad48:	20001100 	.word	0x20001100

0800ad4c <_isatty_r>:
 800ad4c:	b538      	push	{r3, r4, r5, lr}
 800ad4e:	2300      	movs	r3, #0
 800ad50:	4d05      	ldr	r5, [pc, #20]	; (800ad68 <_isatty_r+0x1c>)
 800ad52:	4604      	mov	r4, r0
 800ad54:	4608      	mov	r0, r1
 800ad56:	602b      	str	r3, [r5, #0]
 800ad58:	f7f7 fcaa 	bl	80026b0 <_isatty>
 800ad5c:	1c43      	adds	r3, r0, #1
 800ad5e:	d102      	bne.n	800ad66 <_isatty_r+0x1a>
 800ad60:	682b      	ldr	r3, [r5, #0]
 800ad62:	b103      	cbz	r3, 800ad66 <_isatty_r+0x1a>
 800ad64:	6023      	str	r3, [r4, #0]
 800ad66:	bd38      	pop	{r3, r4, r5, pc}
 800ad68:	20001100 	.word	0x20001100

0800ad6c <_lseek_r>:
 800ad6c:	b538      	push	{r3, r4, r5, lr}
 800ad6e:	4604      	mov	r4, r0
 800ad70:	4608      	mov	r0, r1
 800ad72:	4611      	mov	r1, r2
 800ad74:	2200      	movs	r2, #0
 800ad76:	4d05      	ldr	r5, [pc, #20]	; (800ad8c <_lseek_r+0x20>)
 800ad78:	602a      	str	r2, [r5, #0]
 800ad7a:	461a      	mov	r2, r3
 800ad7c:	f7f7 fca2 	bl	80026c4 <_lseek>
 800ad80:	1c43      	adds	r3, r0, #1
 800ad82:	d102      	bne.n	800ad8a <_lseek_r+0x1e>
 800ad84:	682b      	ldr	r3, [r5, #0]
 800ad86:	b103      	cbz	r3, 800ad8a <_lseek_r+0x1e>
 800ad88:	6023      	str	r3, [r4, #0]
 800ad8a:	bd38      	pop	{r3, r4, r5, pc}
 800ad8c:	20001100 	.word	0x20001100

0800ad90 <memmove>:
 800ad90:	4288      	cmp	r0, r1
 800ad92:	b510      	push	{r4, lr}
 800ad94:	eb01 0402 	add.w	r4, r1, r2
 800ad98:	d902      	bls.n	800ada0 <memmove+0x10>
 800ad9a:	4284      	cmp	r4, r0
 800ad9c:	4623      	mov	r3, r4
 800ad9e:	d807      	bhi.n	800adb0 <memmove+0x20>
 800ada0:	1e43      	subs	r3, r0, #1
 800ada2:	42a1      	cmp	r1, r4
 800ada4:	d008      	beq.n	800adb8 <memmove+0x28>
 800ada6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800adaa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800adae:	e7f8      	b.n	800ada2 <memmove+0x12>
 800adb0:	4601      	mov	r1, r0
 800adb2:	4402      	add	r2, r0
 800adb4:	428a      	cmp	r2, r1
 800adb6:	d100      	bne.n	800adba <memmove+0x2a>
 800adb8:	bd10      	pop	{r4, pc}
 800adba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800adbe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800adc2:	e7f7      	b.n	800adb4 <memmove+0x24>

0800adc4 <__malloc_lock>:
 800adc4:	4801      	ldr	r0, [pc, #4]	; (800adcc <__malloc_lock+0x8>)
 800adc6:	f7fe bdf8 	b.w	80099ba <__retarget_lock_acquire_recursive>
 800adca:	bf00      	nop
 800adcc:	200010f4 	.word	0x200010f4

0800add0 <__malloc_unlock>:
 800add0:	4801      	ldr	r0, [pc, #4]	; (800add8 <__malloc_unlock+0x8>)
 800add2:	f7fe bdf3 	b.w	80099bc <__retarget_lock_release_recursive>
 800add6:	bf00      	nop
 800add8:	200010f4 	.word	0x200010f4

0800addc <_realloc_r>:
 800addc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ade0:	4680      	mov	r8, r0
 800ade2:	4614      	mov	r4, r2
 800ade4:	460e      	mov	r6, r1
 800ade6:	b921      	cbnz	r1, 800adf2 <_realloc_r+0x16>
 800ade8:	4611      	mov	r1, r2
 800adea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800adee:	f7ff bba7 	b.w	800a540 <_malloc_r>
 800adf2:	b92a      	cbnz	r2, 800ae00 <_realloc_r+0x24>
 800adf4:	f7ff fb3c 	bl	800a470 <_free_r>
 800adf8:	4625      	mov	r5, r4
 800adfa:	4628      	mov	r0, r5
 800adfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae00:	f000 f835 	bl	800ae6e <_malloc_usable_size_r>
 800ae04:	4284      	cmp	r4, r0
 800ae06:	4607      	mov	r7, r0
 800ae08:	d802      	bhi.n	800ae10 <_realloc_r+0x34>
 800ae0a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ae0e:	d812      	bhi.n	800ae36 <_realloc_r+0x5a>
 800ae10:	4621      	mov	r1, r4
 800ae12:	4640      	mov	r0, r8
 800ae14:	f7ff fb94 	bl	800a540 <_malloc_r>
 800ae18:	4605      	mov	r5, r0
 800ae1a:	2800      	cmp	r0, #0
 800ae1c:	d0ed      	beq.n	800adfa <_realloc_r+0x1e>
 800ae1e:	42bc      	cmp	r4, r7
 800ae20:	4622      	mov	r2, r4
 800ae22:	4631      	mov	r1, r6
 800ae24:	bf28      	it	cs
 800ae26:	463a      	movcs	r2, r7
 800ae28:	f7fb fb9c 	bl	8006564 <memcpy>
 800ae2c:	4631      	mov	r1, r6
 800ae2e:	4640      	mov	r0, r8
 800ae30:	f7ff fb1e 	bl	800a470 <_free_r>
 800ae34:	e7e1      	b.n	800adfa <_realloc_r+0x1e>
 800ae36:	4635      	mov	r5, r6
 800ae38:	e7df      	b.n	800adfa <_realloc_r+0x1e>
	...

0800ae3c <_read_r>:
 800ae3c:	b538      	push	{r3, r4, r5, lr}
 800ae3e:	4604      	mov	r4, r0
 800ae40:	4608      	mov	r0, r1
 800ae42:	4611      	mov	r1, r2
 800ae44:	2200      	movs	r2, #0
 800ae46:	4d05      	ldr	r5, [pc, #20]	; (800ae5c <_read_r+0x20>)
 800ae48:	602a      	str	r2, [r5, #0]
 800ae4a:	461a      	mov	r2, r3
 800ae4c:	f7f7 fbdd 	bl	800260a <_read>
 800ae50:	1c43      	adds	r3, r0, #1
 800ae52:	d102      	bne.n	800ae5a <_read_r+0x1e>
 800ae54:	682b      	ldr	r3, [r5, #0]
 800ae56:	b103      	cbz	r3, 800ae5a <_read_r+0x1e>
 800ae58:	6023      	str	r3, [r4, #0]
 800ae5a:	bd38      	pop	{r3, r4, r5, pc}
 800ae5c:	20001100 	.word	0x20001100

0800ae60 <abort>:
 800ae60:	2006      	movs	r0, #6
 800ae62:	b508      	push	{r3, lr}
 800ae64:	f000 f834 	bl	800aed0 <raise>
 800ae68:	2001      	movs	r0, #1
 800ae6a:	f7f7 fbc4 	bl	80025f6 <_exit>

0800ae6e <_malloc_usable_size_r>:
 800ae6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae72:	1f18      	subs	r0, r3, #4
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	bfbc      	itt	lt
 800ae78:	580b      	ldrlt	r3, [r1, r0]
 800ae7a:	18c0      	addlt	r0, r0, r3
 800ae7c:	4770      	bx	lr

0800ae7e <_raise_r>:
 800ae7e:	291f      	cmp	r1, #31
 800ae80:	b538      	push	{r3, r4, r5, lr}
 800ae82:	4604      	mov	r4, r0
 800ae84:	460d      	mov	r5, r1
 800ae86:	d904      	bls.n	800ae92 <_raise_r+0x14>
 800ae88:	2316      	movs	r3, #22
 800ae8a:	6003      	str	r3, [r0, #0]
 800ae8c:	f04f 30ff 	mov.w	r0, #4294967295
 800ae90:	bd38      	pop	{r3, r4, r5, pc}
 800ae92:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ae94:	b112      	cbz	r2, 800ae9c <_raise_r+0x1e>
 800ae96:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ae9a:	b94b      	cbnz	r3, 800aeb0 <_raise_r+0x32>
 800ae9c:	4620      	mov	r0, r4
 800ae9e:	f000 f831 	bl	800af04 <_getpid_r>
 800aea2:	462a      	mov	r2, r5
 800aea4:	4601      	mov	r1, r0
 800aea6:	4620      	mov	r0, r4
 800aea8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aeac:	f000 b818 	b.w	800aee0 <_kill_r>
 800aeb0:	2b01      	cmp	r3, #1
 800aeb2:	d00a      	beq.n	800aeca <_raise_r+0x4c>
 800aeb4:	1c59      	adds	r1, r3, #1
 800aeb6:	d103      	bne.n	800aec0 <_raise_r+0x42>
 800aeb8:	2316      	movs	r3, #22
 800aeba:	6003      	str	r3, [r0, #0]
 800aebc:	2001      	movs	r0, #1
 800aebe:	e7e7      	b.n	800ae90 <_raise_r+0x12>
 800aec0:	2400      	movs	r4, #0
 800aec2:	4628      	mov	r0, r5
 800aec4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800aec8:	4798      	blx	r3
 800aeca:	2000      	movs	r0, #0
 800aecc:	e7e0      	b.n	800ae90 <_raise_r+0x12>
	...

0800aed0 <raise>:
 800aed0:	4b02      	ldr	r3, [pc, #8]	; (800aedc <raise+0xc>)
 800aed2:	4601      	mov	r1, r0
 800aed4:	6818      	ldr	r0, [r3, #0]
 800aed6:	f7ff bfd2 	b.w	800ae7e <_raise_r>
 800aeda:	bf00      	nop
 800aedc:	2000000c 	.word	0x2000000c

0800aee0 <_kill_r>:
 800aee0:	b538      	push	{r3, r4, r5, lr}
 800aee2:	2300      	movs	r3, #0
 800aee4:	4d06      	ldr	r5, [pc, #24]	; (800af00 <_kill_r+0x20>)
 800aee6:	4604      	mov	r4, r0
 800aee8:	4608      	mov	r0, r1
 800aeea:	4611      	mov	r1, r2
 800aeec:	602b      	str	r3, [r5, #0]
 800aeee:	f7f7 fb72 	bl	80025d6 <_kill>
 800aef2:	1c43      	adds	r3, r0, #1
 800aef4:	d102      	bne.n	800aefc <_kill_r+0x1c>
 800aef6:	682b      	ldr	r3, [r5, #0]
 800aef8:	b103      	cbz	r3, 800aefc <_kill_r+0x1c>
 800aefa:	6023      	str	r3, [r4, #0]
 800aefc:	bd38      	pop	{r3, r4, r5, pc}
 800aefe:	bf00      	nop
 800af00:	20001100 	.word	0x20001100

0800af04 <_getpid_r>:
 800af04:	f7f7 bb60 	b.w	80025c8 <_getpid>

0800af08 <cos>:
 800af08:	b530      	push	{r4, r5, lr}
 800af0a:	4a20      	ldr	r2, [pc, #128]	; (800af8c <cos+0x84>)
 800af0c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800af10:	4293      	cmp	r3, r2
 800af12:	b087      	sub	sp, #28
 800af14:	dc06      	bgt.n	800af24 <cos+0x1c>
 800af16:	2200      	movs	r2, #0
 800af18:	2300      	movs	r3, #0
 800af1a:	b007      	add	sp, #28
 800af1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800af20:	f000 bb6a 	b.w	800b5f8 <__kernel_cos>
 800af24:	4a1a      	ldr	r2, [pc, #104]	; (800af90 <cos+0x88>)
 800af26:	4293      	cmp	r3, r2
 800af28:	dd05      	ble.n	800af36 <cos+0x2e>
 800af2a:	4602      	mov	r2, r0
 800af2c:	460b      	mov	r3, r1
 800af2e:	f7f5 f91b 	bl	8000168 <__aeabi_dsub>
 800af32:	b007      	add	sp, #28
 800af34:	bd30      	pop	{r4, r5, pc}
 800af36:	aa02      	add	r2, sp, #8
 800af38:	f000 f88e 	bl	800b058 <__ieee754_rem_pio2>
 800af3c:	f000 0003 	and.w	r0, r0, #3
 800af40:	2801      	cmp	r0, #1
 800af42:	d009      	beq.n	800af58 <cos+0x50>
 800af44:	2802      	cmp	r0, #2
 800af46:	d011      	beq.n	800af6c <cos+0x64>
 800af48:	b9b8      	cbnz	r0, 800af7a <cos+0x72>
 800af4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af52:	f000 fb51 	bl	800b5f8 <__kernel_cos>
 800af56:	e7ec      	b.n	800af32 <cos+0x2a>
 800af58:	9000      	str	r0, [sp, #0]
 800af5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af62:	f000 ff49 	bl	800bdf8 <__kernel_sin>
 800af66:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800af6a:	e7e2      	b.n	800af32 <cos+0x2a>
 800af6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af74:	f000 fb40 	bl	800b5f8 <__kernel_cos>
 800af78:	e7f5      	b.n	800af66 <cos+0x5e>
 800af7a:	2301      	movs	r3, #1
 800af7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af80:	9300      	str	r3, [sp, #0]
 800af82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af86:	f000 ff37 	bl	800bdf8 <__kernel_sin>
 800af8a:	e7d2      	b.n	800af32 <cos+0x2a>
 800af8c:	3fe921fb 	.word	0x3fe921fb
 800af90:	7fefffff 	.word	0x7fefffff

0800af94 <sin>:
 800af94:	b530      	push	{r4, r5, lr}
 800af96:	4a20      	ldr	r2, [pc, #128]	; (800b018 <sin+0x84>)
 800af98:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800af9c:	4293      	cmp	r3, r2
 800af9e:	b087      	sub	sp, #28
 800afa0:	dc06      	bgt.n	800afb0 <sin+0x1c>
 800afa2:	2300      	movs	r3, #0
 800afa4:	2200      	movs	r2, #0
 800afa6:	9300      	str	r3, [sp, #0]
 800afa8:	2300      	movs	r3, #0
 800afaa:	f000 ff25 	bl	800bdf8 <__kernel_sin>
 800afae:	e006      	b.n	800afbe <sin+0x2a>
 800afb0:	4a1a      	ldr	r2, [pc, #104]	; (800b01c <sin+0x88>)
 800afb2:	4293      	cmp	r3, r2
 800afb4:	dd05      	ble.n	800afc2 <sin+0x2e>
 800afb6:	4602      	mov	r2, r0
 800afb8:	460b      	mov	r3, r1
 800afba:	f7f5 f8d5 	bl	8000168 <__aeabi_dsub>
 800afbe:	b007      	add	sp, #28
 800afc0:	bd30      	pop	{r4, r5, pc}
 800afc2:	aa02      	add	r2, sp, #8
 800afc4:	f000 f848 	bl	800b058 <__ieee754_rem_pio2>
 800afc8:	f000 0003 	and.w	r0, r0, #3
 800afcc:	2801      	cmp	r0, #1
 800afce:	d009      	beq.n	800afe4 <sin+0x50>
 800afd0:	2802      	cmp	r0, #2
 800afd2:	d00e      	beq.n	800aff2 <sin+0x5e>
 800afd4:	b9c0      	cbnz	r0, 800b008 <sin+0x74>
 800afd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800afda:	2301      	movs	r3, #1
 800afdc:	9300      	str	r3, [sp, #0]
 800afde:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800afe2:	e7e2      	b.n	800afaa <sin+0x16>
 800afe4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800afe8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800afec:	f000 fb04 	bl	800b5f8 <__kernel_cos>
 800aff0:	e7e5      	b.n	800afbe <sin+0x2a>
 800aff2:	2301      	movs	r3, #1
 800aff4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aff8:	9300      	str	r3, [sp, #0]
 800affa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800affe:	f000 fefb 	bl	800bdf8 <__kernel_sin>
 800b002:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800b006:	e7da      	b.n	800afbe <sin+0x2a>
 800b008:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b00c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b010:	f000 faf2 	bl	800b5f8 <__kernel_cos>
 800b014:	e7f5      	b.n	800b002 <sin+0x6e>
 800b016:	bf00      	nop
 800b018:	3fe921fb 	.word	0x3fe921fb
 800b01c:	7fefffff 	.word	0x7fefffff

0800b020 <atan2f>:
 800b020:	f000 ba12 	b.w	800b448 <__ieee754_atan2f>

0800b024 <sqrtf>:
 800b024:	b538      	push	{r3, r4, r5, lr}
 800b026:	4605      	mov	r5, r0
 800b028:	f000 fa94 	bl	800b554 <__ieee754_sqrtf>
 800b02c:	4629      	mov	r1, r5
 800b02e:	4604      	mov	r4, r0
 800b030:	4628      	mov	r0, r5
 800b032:	f7f6 f86d 	bl	8001110 <__aeabi_fcmpun>
 800b036:	b968      	cbnz	r0, 800b054 <sqrtf+0x30>
 800b038:	2100      	movs	r1, #0
 800b03a:	4628      	mov	r0, r5
 800b03c:	f7f6 f840 	bl	80010c0 <__aeabi_fcmplt>
 800b040:	b140      	cbz	r0, 800b054 <sqrtf+0x30>
 800b042:	f7fb fa65 	bl	8006510 <__errno>
 800b046:	2321      	movs	r3, #33	; 0x21
 800b048:	2100      	movs	r1, #0
 800b04a:	6003      	str	r3, [r0, #0]
 800b04c:	4608      	mov	r0, r1
 800b04e:	f7f5 ff4d 	bl	8000eec <__aeabi_fdiv>
 800b052:	4604      	mov	r4, r0
 800b054:	4620      	mov	r0, r4
 800b056:	bd38      	pop	{r3, r4, r5, pc}

0800b058 <__ieee754_rem_pio2>:
 800b058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b05c:	4614      	mov	r4, r2
 800b05e:	4ac4      	ldr	r2, [pc, #784]	; (800b370 <__ieee754_rem_pio2+0x318>)
 800b060:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800b064:	b08d      	sub	sp, #52	; 0x34
 800b066:	4592      	cmp	sl, r2
 800b068:	9104      	str	r1, [sp, #16]
 800b06a:	dc07      	bgt.n	800b07c <__ieee754_rem_pio2+0x24>
 800b06c:	2200      	movs	r2, #0
 800b06e:	2300      	movs	r3, #0
 800b070:	e9c4 0100 	strd	r0, r1, [r4]
 800b074:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800b078:	2500      	movs	r5, #0
 800b07a:	e024      	b.n	800b0c6 <__ieee754_rem_pio2+0x6e>
 800b07c:	4abd      	ldr	r2, [pc, #756]	; (800b374 <__ieee754_rem_pio2+0x31c>)
 800b07e:	4592      	cmp	sl, r2
 800b080:	dc72      	bgt.n	800b168 <__ieee754_rem_pio2+0x110>
 800b082:	9b04      	ldr	r3, [sp, #16]
 800b084:	4dbc      	ldr	r5, [pc, #752]	; (800b378 <__ieee754_rem_pio2+0x320>)
 800b086:	2b00      	cmp	r3, #0
 800b088:	a3ab      	add	r3, pc, #684	; (adr r3, 800b338 <__ieee754_rem_pio2+0x2e0>)
 800b08a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b08e:	dd36      	ble.n	800b0fe <__ieee754_rem_pio2+0xa6>
 800b090:	f7f5 f86a 	bl	8000168 <__aeabi_dsub>
 800b094:	45aa      	cmp	sl, r5
 800b096:	4606      	mov	r6, r0
 800b098:	460f      	mov	r7, r1
 800b09a:	d018      	beq.n	800b0ce <__ieee754_rem_pio2+0x76>
 800b09c:	a3a8      	add	r3, pc, #672	; (adr r3, 800b340 <__ieee754_rem_pio2+0x2e8>)
 800b09e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0a2:	f7f5 f861 	bl	8000168 <__aeabi_dsub>
 800b0a6:	4602      	mov	r2, r0
 800b0a8:	460b      	mov	r3, r1
 800b0aa:	4630      	mov	r0, r6
 800b0ac:	e9c4 2300 	strd	r2, r3, [r4]
 800b0b0:	4639      	mov	r1, r7
 800b0b2:	f7f5 f859 	bl	8000168 <__aeabi_dsub>
 800b0b6:	a3a2      	add	r3, pc, #648	; (adr r3, 800b340 <__ieee754_rem_pio2+0x2e8>)
 800b0b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0bc:	f7f5 f854 	bl	8000168 <__aeabi_dsub>
 800b0c0:	2501      	movs	r5, #1
 800b0c2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b0c6:	4628      	mov	r0, r5
 800b0c8:	b00d      	add	sp, #52	; 0x34
 800b0ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0ce:	a39e      	add	r3, pc, #632	; (adr r3, 800b348 <__ieee754_rem_pio2+0x2f0>)
 800b0d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0d4:	f7f5 f848 	bl	8000168 <__aeabi_dsub>
 800b0d8:	a39d      	add	r3, pc, #628	; (adr r3, 800b350 <__ieee754_rem_pio2+0x2f8>)
 800b0da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0de:	4606      	mov	r6, r0
 800b0e0:	460f      	mov	r7, r1
 800b0e2:	f7f5 f841 	bl	8000168 <__aeabi_dsub>
 800b0e6:	4602      	mov	r2, r0
 800b0e8:	460b      	mov	r3, r1
 800b0ea:	4630      	mov	r0, r6
 800b0ec:	e9c4 2300 	strd	r2, r3, [r4]
 800b0f0:	4639      	mov	r1, r7
 800b0f2:	f7f5 f839 	bl	8000168 <__aeabi_dsub>
 800b0f6:	a396      	add	r3, pc, #600	; (adr r3, 800b350 <__ieee754_rem_pio2+0x2f8>)
 800b0f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0fc:	e7de      	b.n	800b0bc <__ieee754_rem_pio2+0x64>
 800b0fe:	f7f5 f835 	bl	800016c <__adddf3>
 800b102:	45aa      	cmp	sl, r5
 800b104:	4606      	mov	r6, r0
 800b106:	460f      	mov	r7, r1
 800b108:	d016      	beq.n	800b138 <__ieee754_rem_pio2+0xe0>
 800b10a:	a38d      	add	r3, pc, #564	; (adr r3, 800b340 <__ieee754_rem_pio2+0x2e8>)
 800b10c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b110:	f7f5 f82c 	bl	800016c <__adddf3>
 800b114:	4602      	mov	r2, r0
 800b116:	460b      	mov	r3, r1
 800b118:	4630      	mov	r0, r6
 800b11a:	e9c4 2300 	strd	r2, r3, [r4]
 800b11e:	4639      	mov	r1, r7
 800b120:	f7f5 f822 	bl	8000168 <__aeabi_dsub>
 800b124:	a386      	add	r3, pc, #536	; (adr r3, 800b340 <__ieee754_rem_pio2+0x2e8>)
 800b126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b12a:	f7f5 f81f 	bl	800016c <__adddf3>
 800b12e:	f04f 35ff 	mov.w	r5, #4294967295
 800b132:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b136:	e7c6      	b.n	800b0c6 <__ieee754_rem_pio2+0x6e>
 800b138:	a383      	add	r3, pc, #524	; (adr r3, 800b348 <__ieee754_rem_pio2+0x2f0>)
 800b13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b13e:	f7f5 f815 	bl	800016c <__adddf3>
 800b142:	a383      	add	r3, pc, #524	; (adr r3, 800b350 <__ieee754_rem_pio2+0x2f8>)
 800b144:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b148:	4606      	mov	r6, r0
 800b14a:	460f      	mov	r7, r1
 800b14c:	f7f5 f80e 	bl	800016c <__adddf3>
 800b150:	4602      	mov	r2, r0
 800b152:	460b      	mov	r3, r1
 800b154:	4630      	mov	r0, r6
 800b156:	e9c4 2300 	strd	r2, r3, [r4]
 800b15a:	4639      	mov	r1, r7
 800b15c:	f7f5 f804 	bl	8000168 <__aeabi_dsub>
 800b160:	a37b      	add	r3, pc, #492	; (adr r3, 800b350 <__ieee754_rem_pio2+0x2f8>)
 800b162:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b166:	e7e0      	b.n	800b12a <__ieee754_rem_pio2+0xd2>
 800b168:	4a84      	ldr	r2, [pc, #528]	; (800b37c <__ieee754_rem_pio2+0x324>)
 800b16a:	4592      	cmp	sl, r2
 800b16c:	f300 80d5 	bgt.w	800b31a <__ieee754_rem_pio2+0x2c2>
 800b170:	f000 fef8 	bl	800bf64 <fabs>
 800b174:	a378      	add	r3, pc, #480	; (adr r3, 800b358 <__ieee754_rem_pio2+0x300>)
 800b176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b17a:	4606      	mov	r6, r0
 800b17c:	460f      	mov	r7, r1
 800b17e:	f7f5 f9ab 	bl	80004d8 <__aeabi_dmul>
 800b182:	2200      	movs	r2, #0
 800b184:	4b7e      	ldr	r3, [pc, #504]	; (800b380 <__ieee754_rem_pio2+0x328>)
 800b186:	f7f4 fff1 	bl	800016c <__adddf3>
 800b18a:	f7f5 fc55 	bl	8000a38 <__aeabi_d2iz>
 800b18e:	4605      	mov	r5, r0
 800b190:	f7f5 f938 	bl	8000404 <__aeabi_i2d>
 800b194:	4602      	mov	r2, r0
 800b196:	460b      	mov	r3, r1
 800b198:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b19c:	a366      	add	r3, pc, #408	; (adr r3, 800b338 <__ieee754_rem_pio2+0x2e0>)
 800b19e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1a2:	f7f5 f999 	bl	80004d8 <__aeabi_dmul>
 800b1a6:	4602      	mov	r2, r0
 800b1a8:	460b      	mov	r3, r1
 800b1aa:	4630      	mov	r0, r6
 800b1ac:	4639      	mov	r1, r7
 800b1ae:	f7f4 ffdb 	bl	8000168 <__aeabi_dsub>
 800b1b2:	a363      	add	r3, pc, #396	; (adr r3, 800b340 <__ieee754_rem_pio2+0x2e8>)
 800b1b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1b8:	4680      	mov	r8, r0
 800b1ba:	4689      	mov	r9, r1
 800b1bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b1c0:	f7f5 f98a 	bl	80004d8 <__aeabi_dmul>
 800b1c4:	2d1f      	cmp	r5, #31
 800b1c6:	4606      	mov	r6, r0
 800b1c8:	460f      	mov	r7, r1
 800b1ca:	dc0e      	bgt.n	800b1ea <__ieee754_rem_pio2+0x192>
 800b1cc:	4b6d      	ldr	r3, [pc, #436]	; (800b384 <__ieee754_rem_pio2+0x32c>)
 800b1ce:	1e6a      	subs	r2, r5, #1
 800b1d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1d4:	4553      	cmp	r3, sl
 800b1d6:	d008      	beq.n	800b1ea <__ieee754_rem_pio2+0x192>
 800b1d8:	4632      	mov	r2, r6
 800b1da:	463b      	mov	r3, r7
 800b1dc:	4640      	mov	r0, r8
 800b1de:	4649      	mov	r1, r9
 800b1e0:	f7f4 ffc2 	bl	8000168 <__aeabi_dsub>
 800b1e4:	e9c4 0100 	strd	r0, r1, [r4]
 800b1e8:	e013      	b.n	800b212 <__ieee754_rem_pio2+0x1ba>
 800b1ea:	463b      	mov	r3, r7
 800b1ec:	4632      	mov	r2, r6
 800b1ee:	4640      	mov	r0, r8
 800b1f0:	4649      	mov	r1, r9
 800b1f2:	f7f4 ffb9 	bl	8000168 <__aeabi_dsub>
 800b1f6:	ea4f 532a 	mov.w	r3, sl, asr #20
 800b1fa:	9305      	str	r3, [sp, #20]
 800b1fc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b200:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 800b204:	f1ba 0f10 	cmp.w	sl, #16
 800b208:	dc1f      	bgt.n	800b24a <__ieee754_rem_pio2+0x1f2>
 800b20a:	4602      	mov	r2, r0
 800b20c:	460b      	mov	r3, r1
 800b20e:	e9c4 2300 	strd	r2, r3, [r4]
 800b212:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800b216:	4640      	mov	r0, r8
 800b218:	4653      	mov	r3, sl
 800b21a:	4649      	mov	r1, r9
 800b21c:	f7f4 ffa4 	bl	8000168 <__aeabi_dsub>
 800b220:	4632      	mov	r2, r6
 800b222:	463b      	mov	r3, r7
 800b224:	f7f4 ffa0 	bl	8000168 <__aeabi_dsub>
 800b228:	460b      	mov	r3, r1
 800b22a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b22e:	9904      	ldr	r1, [sp, #16]
 800b230:	4602      	mov	r2, r0
 800b232:	2900      	cmp	r1, #0
 800b234:	f6bf af47 	bge.w	800b0c6 <__ieee754_rem_pio2+0x6e>
 800b238:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 800b23c:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800b240:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b244:	60e3      	str	r3, [r4, #12]
 800b246:	426d      	negs	r5, r5
 800b248:	e73d      	b.n	800b0c6 <__ieee754_rem_pio2+0x6e>
 800b24a:	a33f      	add	r3, pc, #252	; (adr r3, 800b348 <__ieee754_rem_pio2+0x2f0>)
 800b24c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b250:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b254:	f7f5 f940 	bl	80004d8 <__aeabi_dmul>
 800b258:	4606      	mov	r6, r0
 800b25a:	460f      	mov	r7, r1
 800b25c:	4602      	mov	r2, r0
 800b25e:	460b      	mov	r3, r1
 800b260:	4640      	mov	r0, r8
 800b262:	4649      	mov	r1, r9
 800b264:	f7f4 ff80 	bl	8000168 <__aeabi_dsub>
 800b268:	4602      	mov	r2, r0
 800b26a:	460b      	mov	r3, r1
 800b26c:	4682      	mov	sl, r0
 800b26e:	468b      	mov	fp, r1
 800b270:	4640      	mov	r0, r8
 800b272:	4649      	mov	r1, r9
 800b274:	f7f4 ff78 	bl	8000168 <__aeabi_dsub>
 800b278:	4632      	mov	r2, r6
 800b27a:	463b      	mov	r3, r7
 800b27c:	f7f4 ff74 	bl	8000168 <__aeabi_dsub>
 800b280:	a333      	add	r3, pc, #204	; (adr r3, 800b350 <__ieee754_rem_pio2+0x2f8>)
 800b282:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b286:	4606      	mov	r6, r0
 800b288:	460f      	mov	r7, r1
 800b28a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b28e:	f7f5 f923 	bl	80004d8 <__aeabi_dmul>
 800b292:	4632      	mov	r2, r6
 800b294:	463b      	mov	r3, r7
 800b296:	f7f4 ff67 	bl	8000168 <__aeabi_dsub>
 800b29a:	4602      	mov	r2, r0
 800b29c:	460b      	mov	r3, r1
 800b29e:	4606      	mov	r6, r0
 800b2a0:	460f      	mov	r7, r1
 800b2a2:	4650      	mov	r0, sl
 800b2a4:	4659      	mov	r1, fp
 800b2a6:	f7f4 ff5f 	bl	8000168 <__aeabi_dsub>
 800b2aa:	9a05      	ldr	r2, [sp, #20]
 800b2ac:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b2b0:	1ad3      	subs	r3, r2, r3
 800b2b2:	2b31      	cmp	r3, #49	; 0x31
 800b2b4:	dc06      	bgt.n	800b2c4 <__ieee754_rem_pio2+0x26c>
 800b2b6:	4602      	mov	r2, r0
 800b2b8:	460b      	mov	r3, r1
 800b2ba:	46d0      	mov	r8, sl
 800b2bc:	46d9      	mov	r9, fp
 800b2be:	e9c4 2300 	strd	r2, r3, [r4]
 800b2c2:	e7a6      	b.n	800b212 <__ieee754_rem_pio2+0x1ba>
 800b2c4:	a326      	add	r3, pc, #152	; (adr r3, 800b360 <__ieee754_rem_pio2+0x308>)
 800b2c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b2ce:	f7f5 f903 	bl	80004d8 <__aeabi_dmul>
 800b2d2:	4606      	mov	r6, r0
 800b2d4:	460f      	mov	r7, r1
 800b2d6:	4602      	mov	r2, r0
 800b2d8:	460b      	mov	r3, r1
 800b2da:	4650      	mov	r0, sl
 800b2dc:	4659      	mov	r1, fp
 800b2de:	f7f4 ff43 	bl	8000168 <__aeabi_dsub>
 800b2e2:	4602      	mov	r2, r0
 800b2e4:	460b      	mov	r3, r1
 800b2e6:	4680      	mov	r8, r0
 800b2e8:	4689      	mov	r9, r1
 800b2ea:	4650      	mov	r0, sl
 800b2ec:	4659      	mov	r1, fp
 800b2ee:	f7f4 ff3b 	bl	8000168 <__aeabi_dsub>
 800b2f2:	4632      	mov	r2, r6
 800b2f4:	463b      	mov	r3, r7
 800b2f6:	f7f4 ff37 	bl	8000168 <__aeabi_dsub>
 800b2fa:	a31b      	add	r3, pc, #108	; (adr r3, 800b368 <__ieee754_rem_pio2+0x310>)
 800b2fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b300:	4606      	mov	r6, r0
 800b302:	460f      	mov	r7, r1
 800b304:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b308:	f7f5 f8e6 	bl	80004d8 <__aeabi_dmul>
 800b30c:	4632      	mov	r2, r6
 800b30e:	463b      	mov	r3, r7
 800b310:	f7f4 ff2a 	bl	8000168 <__aeabi_dsub>
 800b314:	4606      	mov	r6, r0
 800b316:	460f      	mov	r7, r1
 800b318:	e75e      	b.n	800b1d8 <__ieee754_rem_pio2+0x180>
 800b31a:	4a1b      	ldr	r2, [pc, #108]	; (800b388 <__ieee754_rem_pio2+0x330>)
 800b31c:	4592      	cmp	sl, r2
 800b31e:	dd35      	ble.n	800b38c <__ieee754_rem_pio2+0x334>
 800b320:	4602      	mov	r2, r0
 800b322:	460b      	mov	r3, r1
 800b324:	f7f4 ff20 	bl	8000168 <__aeabi_dsub>
 800b328:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b32c:	e9c4 0100 	strd	r0, r1, [r4]
 800b330:	e6a2      	b.n	800b078 <__ieee754_rem_pio2+0x20>
 800b332:	bf00      	nop
 800b334:	f3af 8000 	nop.w
 800b338:	54400000 	.word	0x54400000
 800b33c:	3ff921fb 	.word	0x3ff921fb
 800b340:	1a626331 	.word	0x1a626331
 800b344:	3dd0b461 	.word	0x3dd0b461
 800b348:	1a600000 	.word	0x1a600000
 800b34c:	3dd0b461 	.word	0x3dd0b461
 800b350:	2e037073 	.word	0x2e037073
 800b354:	3ba3198a 	.word	0x3ba3198a
 800b358:	6dc9c883 	.word	0x6dc9c883
 800b35c:	3fe45f30 	.word	0x3fe45f30
 800b360:	2e000000 	.word	0x2e000000
 800b364:	3ba3198a 	.word	0x3ba3198a
 800b368:	252049c1 	.word	0x252049c1
 800b36c:	397b839a 	.word	0x397b839a
 800b370:	3fe921fb 	.word	0x3fe921fb
 800b374:	4002d97b 	.word	0x4002d97b
 800b378:	3ff921fb 	.word	0x3ff921fb
 800b37c:	413921fb 	.word	0x413921fb
 800b380:	3fe00000 	.word	0x3fe00000
 800b384:	0800cf7c 	.word	0x0800cf7c
 800b388:	7fefffff 	.word	0x7fefffff
 800b38c:	ea4f 552a 	mov.w	r5, sl, asr #20
 800b390:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800b394:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800b398:	460f      	mov	r7, r1
 800b39a:	4606      	mov	r6, r0
 800b39c:	f7f5 fb4c 	bl	8000a38 <__aeabi_d2iz>
 800b3a0:	f7f5 f830 	bl	8000404 <__aeabi_i2d>
 800b3a4:	4602      	mov	r2, r0
 800b3a6:	460b      	mov	r3, r1
 800b3a8:	4630      	mov	r0, r6
 800b3aa:	4639      	mov	r1, r7
 800b3ac:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b3b0:	f7f4 feda 	bl	8000168 <__aeabi_dsub>
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	4b22      	ldr	r3, [pc, #136]	; (800b440 <__ieee754_rem_pio2+0x3e8>)
 800b3b8:	f7f5 f88e 	bl	80004d8 <__aeabi_dmul>
 800b3bc:	460f      	mov	r7, r1
 800b3be:	4606      	mov	r6, r0
 800b3c0:	f7f5 fb3a 	bl	8000a38 <__aeabi_d2iz>
 800b3c4:	f7f5 f81e 	bl	8000404 <__aeabi_i2d>
 800b3c8:	4602      	mov	r2, r0
 800b3ca:	460b      	mov	r3, r1
 800b3cc:	4630      	mov	r0, r6
 800b3ce:	4639      	mov	r1, r7
 800b3d0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b3d4:	f7f4 fec8 	bl	8000168 <__aeabi_dsub>
 800b3d8:	2200      	movs	r2, #0
 800b3da:	4b19      	ldr	r3, [pc, #100]	; (800b440 <__ieee754_rem_pio2+0x3e8>)
 800b3dc:	f7f5 f87c 	bl	80004d8 <__aeabi_dmul>
 800b3e0:	f04f 0803 	mov.w	r8, #3
 800b3e4:	2600      	movs	r6, #0
 800b3e6:	2700      	movs	r7, #0
 800b3e8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b3ec:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 800b3f0:	4632      	mov	r2, r6
 800b3f2:	e879 0102 	ldrd	r0, r1, [r9], #-8
 800b3f6:	463b      	mov	r3, r7
 800b3f8:	46c2      	mov	sl, r8
 800b3fa:	f108 38ff 	add.w	r8, r8, #4294967295
 800b3fe:	f7f5 fad3 	bl	80009a8 <__aeabi_dcmpeq>
 800b402:	2800      	cmp	r0, #0
 800b404:	d1f4      	bne.n	800b3f0 <__ieee754_rem_pio2+0x398>
 800b406:	4b0f      	ldr	r3, [pc, #60]	; (800b444 <__ieee754_rem_pio2+0x3ec>)
 800b408:	462a      	mov	r2, r5
 800b40a:	9301      	str	r3, [sp, #4]
 800b40c:	2302      	movs	r3, #2
 800b40e:	4621      	mov	r1, r4
 800b410:	9300      	str	r3, [sp, #0]
 800b412:	a806      	add	r0, sp, #24
 800b414:	4653      	mov	r3, sl
 800b416:	f000 f9ad 	bl	800b774 <__kernel_rem_pio2>
 800b41a:	9b04      	ldr	r3, [sp, #16]
 800b41c:	4605      	mov	r5, r0
 800b41e:	2b00      	cmp	r3, #0
 800b420:	f6bf ae51 	bge.w	800b0c6 <__ieee754_rem_pio2+0x6e>
 800b424:	e9d4 2100 	ldrd	r2, r1, [r4]
 800b428:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b42c:	e9c4 2300 	strd	r2, r3, [r4]
 800b430:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800b434:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b438:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800b43c:	e703      	b.n	800b246 <__ieee754_rem_pio2+0x1ee>
 800b43e:	bf00      	nop
 800b440:	41700000 	.word	0x41700000
 800b444:	0800cffc 	.word	0x0800cffc

0800b448 <__ieee754_atan2f>:
 800b448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b44a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b44e:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800b452:	4603      	mov	r3, r0
 800b454:	dc05      	bgt.n	800b462 <__ieee754_atan2f+0x1a>
 800b456:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800b45a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800b45e:	4607      	mov	r7, r0
 800b460:	dd04      	ble.n	800b46c <__ieee754_atan2f+0x24>
 800b462:	4618      	mov	r0, r3
 800b464:	f7f5 fb86 	bl	8000b74 <__addsf3>
 800b468:	4603      	mov	r3, r0
 800b46a:	e011      	b.n	800b490 <__ieee754_atan2f+0x48>
 800b46c:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800b470:	d103      	bne.n	800b47a <__ieee754_atan2f+0x32>
 800b472:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b476:	f000 be79 	b.w	800c16c <atanf>
 800b47a:	178c      	asrs	r4, r1, #30
 800b47c:	f004 0402 	and.w	r4, r4, #2
 800b480:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800b484:	b932      	cbnz	r2, 800b494 <__ieee754_atan2f+0x4c>
 800b486:	2c02      	cmp	r4, #2
 800b488:	d04c      	beq.n	800b524 <__ieee754_atan2f+0xdc>
 800b48a:	2c03      	cmp	r4, #3
 800b48c:	d100      	bne.n	800b490 <__ieee754_atan2f+0x48>
 800b48e:	4b29      	ldr	r3, [pc, #164]	; (800b534 <__ieee754_atan2f+0xec>)
 800b490:	4618      	mov	r0, r3
 800b492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b494:	b91e      	cbnz	r6, 800b49e <__ieee754_atan2f+0x56>
 800b496:	2f00      	cmp	r7, #0
 800b498:	da4a      	bge.n	800b530 <__ieee754_atan2f+0xe8>
 800b49a:	4b27      	ldr	r3, [pc, #156]	; (800b538 <__ieee754_atan2f+0xf0>)
 800b49c:	e7f8      	b.n	800b490 <__ieee754_atan2f+0x48>
 800b49e:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800b4a2:	d10e      	bne.n	800b4c2 <__ieee754_atan2f+0x7a>
 800b4a4:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800b4a8:	f104 34ff 	add.w	r4, r4, #4294967295
 800b4ac:	d105      	bne.n	800b4ba <__ieee754_atan2f+0x72>
 800b4ae:	2c02      	cmp	r4, #2
 800b4b0:	d83a      	bhi.n	800b528 <__ieee754_atan2f+0xe0>
 800b4b2:	4b22      	ldr	r3, [pc, #136]	; (800b53c <__ieee754_atan2f+0xf4>)
 800b4b4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800b4b8:	e7ea      	b.n	800b490 <__ieee754_atan2f+0x48>
 800b4ba:	2c02      	cmp	r4, #2
 800b4bc:	d836      	bhi.n	800b52c <__ieee754_atan2f+0xe4>
 800b4be:	4b20      	ldr	r3, [pc, #128]	; (800b540 <__ieee754_atan2f+0xf8>)
 800b4c0:	e7f8      	b.n	800b4b4 <__ieee754_atan2f+0x6c>
 800b4c2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800b4c6:	d0e6      	beq.n	800b496 <__ieee754_atan2f+0x4e>
 800b4c8:	1b92      	subs	r2, r2, r6
 800b4ca:	f1b2 5ff4 	cmp.w	r2, #511705088	; 0x1e800000
 800b4ce:	ea4f 50e2 	mov.w	r0, r2, asr #23
 800b4d2:	da17      	bge.n	800b504 <__ieee754_atan2f+0xbc>
 800b4d4:	2900      	cmp	r1, #0
 800b4d6:	da01      	bge.n	800b4dc <__ieee754_atan2f+0x94>
 800b4d8:	303c      	adds	r0, #60	; 0x3c
 800b4da:	db15      	blt.n	800b508 <__ieee754_atan2f+0xc0>
 800b4dc:	4618      	mov	r0, r3
 800b4de:	f7f5 fd05 	bl	8000eec <__aeabi_fdiv>
 800b4e2:	f000 ff4f 	bl	800c384 <fabsf>
 800b4e6:	f000 fe41 	bl	800c16c <atanf>
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	2c01      	cmp	r4, #1
 800b4ee:	d00d      	beq.n	800b50c <__ieee754_atan2f+0xc4>
 800b4f0:	2c02      	cmp	r4, #2
 800b4f2:	d00e      	beq.n	800b512 <__ieee754_atan2f+0xca>
 800b4f4:	2c00      	cmp	r4, #0
 800b4f6:	d0cb      	beq.n	800b490 <__ieee754_atan2f+0x48>
 800b4f8:	4912      	ldr	r1, [pc, #72]	; (800b544 <__ieee754_atan2f+0xfc>)
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	f7f5 fb3a 	bl	8000b74 <__addsf3>
 800b500:	4911      	ldr	r1, [pc, #68]	; (800b548 <__ieee754_atan2f+0x100>)
 800b502:	e00c      	b.n	800b51e <__ieee754_atan2f+0xd6>
 800b504:	4b11      	ldr	r3, [pc, #68]	; (800b54c <__ieee754_atan2f+0x104>)
 800b506:	e7f1      	b.n	800b4ec <__ieee754_atan2f+0xa4>
 800b508:	2300      	movs	r3, #0
 800b50a:	e7ef      	b.n	800b4ec <__ieee754_atan2f+0xa4>
 800b50c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b510:	e7be      	b.n	800b490 <__ieee754_atan2f+0x48>
 800b512:	490c      	ldr	r1, [pc, #48]	; (800b544 <__ieee754_atan2f+0xfc>)
 800b514:	4618      	mov	r0, r3
 800b516:	f7f5 fb2d 	bl	8000b74 <__addsf3>
 800b51a:	4601      	mov	r1, r0
 800b51c:	480a      	ldr	r0, [pc, #40]	; (800b548 <__ieee754_atan2f+0x100>)
 800b51e:	f7f5 fb27 	bl	8000b70 <__aeabi_fsub>
 800b522:	e7a1      	b.n	800b468 <__ieee754_atan2f+0x20>
 800b524:	4b08      	ldr	r3, [pc, #32]	; (800b548 <__ieee754_atan2f+0x100>)
 800b526:	e7b3      	b.n	800b490 <__ieee754_atan2f+0x48>
 800b528:	4b09      	ldr	r3, [pc, #36]	; (800b550 <__ieee754_atan2f+0x108>)
 800b52a:	e7b1      	b.n	800b490 <__ieee754_atan2f+0x48>
 800b52c:	2300      	movs	r3, #0
 800b52e:	e7af      	b.n	800b490 <__ieee754_atan2f+0x48>
 800b530:	4b06      	ldr	r3, [pc, #24]	; (800b54c <__ieee754_atan2f+0x104>)
 800b532:	e7ad      	b.n	800b490 <__ieee754_atan2f+0x48>
 800b534:	c0490fdb 	.word	0xc0490fdb
 800b538:	bfc90fdb 	.word	0xbfc90fdb
 800b53c:	0800d104 	.word	0x0800d104
 800b540:	0800d110 	.word	0x0800d110
 800b544:	33bbbd2e 	.word	0x33bbbd2e
 800b548:	40490fdb 	.word	0x40490fdb
 800b54c:	3fc90fdb 	.word	0x3fc90fdb
 800b550:	3f490fdb 	.word	0x3f490fdb

0800b554 <__ieee754_sqrtf>:
 800b554:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800b558:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800b55c:	b570      	push	{r4, r5, r6, lr}
 800b55e:	4603      	mov	r3, r0
 800b560:	4604      	mov	r4, r0
 800b562:	d309      	bcc.n	800b578 <__ieee754_sqrtf+0x24>
 800b564:	4601      	mov	r1, r0
 800b566:	f7f5 fc0d 	bl	8000d84 <__aeabi_fmul>
 800b56a:	4601      	mov	r1, r0
 800b56c:	4620      	mov	r0, r4
 800b56e:	f7f5 fb01 	bl	8000b74 <__addsf3>
 800b572:	4604      	mov	r4, r0
 800b574:	4620      	mov	r0, r4
 800b576:	bd70      	pop	{r4, r5, r6, pc}
 800b578:	2a00      	cmp	r2, #0
 800b57a:	d0fb      	beq.n	800b574 <__ieee754_sqrtf+0x20>
 800b57c:	2800      	cmp	r0, #0
 800b57e:	da06      	bge.n	800b58e <__ieee754_sqrtf+0x3a>
 800b580:	4601      	mov	r1, r0
 800b582:	f7f5 faf5 	bl	8000b70 <__aeabi_fsub>
 800b586:	4601      	mov	r1, r0
 800b588:	f7f5 fcb0 	bl	8000eec <__aeabi_fdiv>
 800b58c:	e7f1      	b.n	800b572 <__ieee754_sqrtf+0x1e>
 800b58e:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 800b592:	ea4f 51e0 	mov.w	r1, r0, asr #23
 800b596:	d029      	beq.n	800b5ec <__ieee754_sqrtf+0x98>
 800b598:	f3c3 0216 	ubfx	r2, r3, #0, #23
 800b59c:	07cb      	lsls	r3, r1, #31
 800b59e:	f04f 0300 	mov.w	r3, #0
 800b5a2:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 800b5a6:	f04f 0419 	mov.w	r4, #25
 800b5aa:	461e      	mov	r6, r3
 800b5ac:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800b5b0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800b5b4:	bf58      	it	pl
 800b5b6:	0052      	lslpl	r2, r2, #1
 800b5b8:	1040      	asrs	r0, r0, #1
 800b5ba:	0052      	lsls	r2, r2, #1
 800b5bc:	1875      	adds	r5, r6, r1
 800b5be:	4295      	cmp	r5, r2
 800b5c0:	bfde      	ittt	le
 800b5c2:	186e      	addle	r6, r5, r1
 800b5c4:	1b52      	suble	r2, r2, r5
 800b5c6:	185b      	addle	r3, r3, r1
 800b5c8:	3c01      	subs	r4, #1
 800b5ca:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800b5ce:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800b5d2:	d1f3      	bne.n	800b5bc <__ieee754_sqrtf+0x68>
 800b5d4:	b112      	cbz	r2, 800b5dc <__ieee754_sqrtf+0x88>
 800b5d6:	3301      	adds	r3, #1
 800b5d8:	f023 0301 	bic.w	r3, r3, #1
 800b5dc:	105c      	asrs	r4, r3, #1
 800b5de:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 800b5e2:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 800b5e6:	e7c5      	b.n	800b574 <__ieee754_sqrtf+0x20>
 800b5e8:	005b      	lsls	r3, r3, #1
 800b5ea:	3201      	adds	r2, #1
 800b5ec:	0218      	lsls	r0, r3, #8
 800b5ee:	d5fb      	bpl.n	800b5e8 <__ieee754_sqrtf+0x94>
 800b5f0:	3a01      	subs	r2, #1
 800b5f2:	1a89      	subs	r1, r1, r2
 800b5f4:	e7d0      	b.n	800b598 <__ieee754_sqrtf+0x44>
	...

0800b5f8 <__kernel_cos>:
 800b5f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5fc:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b600:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800b604:	4680      	mov	r8, r0
 800b606:	460f      	mov	r7, r1
 800b608:	e9cd 2300 	strd	r2, r3, [sp]
 800b60c:	da04      	bge.n	800b618 <__kernel_cos+0x20>
 800b60e:	f7f5 fa13 	bl	8000a38 <__aeabi_d2iz>
 800b612:	2800      	cmp	r0, #0
 800b614:	f000 8086 	beq.w	800b724 <__kernel_cos+0x12c>
 800b618:	4642      	mov	r2, r8
 800b61a:	463b      	mov	r3, r7
 800b61c:	4640      	mov	r0, r8
 800b61e:	4639      	mov	r1, r7
 800b620:	f7f4 ff5a 	bl	80004d8 <__aeabi_dmul>
 800b624:	2200      	movs	r2, #0
 800b626:	4b4e      	ldr	r3, [pc, #312]	; (800b760 <__kernel_cos+0x168>)
 800b628:	4604      	mov	r4, r0
 800b62a:	460d      	mov	r5, r1
 800b62c:	f7f4 ff54 	bl	80004d8 <__aeabi_dmul>
 800b630:	a33f      	add	r3, pc, #252	; (adr r3, 800b730 <__kernel_cos+0x138>)
 800b632:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b636:	4682      	mov	sl, r0
 800b638:	468b      	mov	fp, r1
 800b63a:	4620      	mov	r0, r4
 800b63c:	4629      	mov	r1, r5
 800b63e:	f7f4 ff4b 	bl	80004d8 <__aeabi_dmul>
 800b642:	a33d      	add	r3, pc, #244	; (adr r3, 800b738 <__kernel_cos+0x140>)
 800b644:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b648:	f7f4 fd90 	bl	800016c <__adddf3>
 800b64c:	4622      	mov	r2, r4
 800b64e:	462b      	mov	r3, r5
 800b650:	f7f4 ff42 	bl	80004d8 <__aeabi_dmul>
 800b654:	a33a      	add	r3, pc, #232	; (adr r3, 800b740 <__kernel_cos+0x148>)
 800b656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b65a:	f7f4 fd85 	bl	8000168 <__aeabi_dsub>
 800b65e:	4622      	mov	r2, r4
 800b660:	462b      	mov	r3, r5
 800b662:	f7f4 ff39 	bl	80004d8 <__aeabi_dmul>
 800b666:	a338      	add	r3, pc, #224	; (adr r3, 800b748 <__kernel_cos+0x150>)
 800b668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b66c:	f7f4 fd7e 	bl	800016c <__adddf3>
 800b670:	4622      	mov	r2, r4
 800b672:	462b      	mov	r3, r5
 800b674:	f7f4 ff30 	bl	80004d8 <__aeabi_dmul>
 800b678:	a335      	add	r3, pc, #212	; (adr r3, 800b750 <__kernel_cos+0x158>)
 800b67a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b67e:	f7f4 fd73 	bl	8000168 <__aeabi_dsub>
 800b682:	4622      	mov	r2, r4
 800b684:	462b      	mov	r3, r5
 800b686:	f7f4 ff27 	bl	80004d8 <__aeabi_dmul>
 800b68a:	a333      	add	r3, pc, #204	; (adr r3, 800b758 <__kernel_cos+0x160>)
 800b68c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b690:	f7f4 fd6c 	bl	800016c <__adddf3>
 800b694:	4622      	mov	r2, r4
 800b696:	462b      	mov	r3, r5
 800b698:	f7f4 ff1e 	bl	80004d8 <__aeabi_dmul>
 800b69c:	4622      	mov	r2, r4
 800b69e:	462b      	mov	r3, r5
 800b6a0:	f7f4 ff1a 	bl	80004d8 <__aeabi_dmul>
 800b6a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b6a8:	4604      	mov	r4, r0
 800b6aa:	460d      	mov	r5, r1
 800b6ac:	4640      	mov	r0, r8
 800b6ae:	4639      	mov	r1, r7
 800b6b0:	f7f4 ff12 	bl	80004d8 <__aeabi_dmul>
 800b6b4:	460b      	mov	r3, r1
 800b6b6:	4602      	mov	r2, r0
 800b6b8:	4629      	mov	r1, r5
 800b6ba:	4620      	mov	r0, r4
 800b6bc:	f7f4 fd54 	bl	8000168 <__aeabi_dsub>
 800b6c0:	4b28      	ldr	r3, [pc, #160]	; (800b764 <__kernel_cos+0x16c>)
 800b6c2:	4680      	mov	r8, r0
 800b6c4:	429e      	cmp	r6, r3
 800b6c6:	4689      	mov	r9, r1
 800b6c8:	dc0e      	bgt.n	800b6e8 <__kernel_cos+0xf0>
 800b6ca:	4602      	mov	r2, r0
 800b6cc:	460b      	mov	r3, r1
 800b6ce:	4650      	mov	r0, sl
 800b6d0:	4659      	mov	r1, fp
 800b6d2:	f7f4 fd49 	bl	8000168 <__aeabi_dsub>
 800b6d6:	4602      	mov	r2, r0
 800b6d8:	2000      	movs	r0, #0
 800b6da:	460b      	mov	r3, r1
 800b6dc:	4922      	ldr	r1, [pc, #136]	; (800b768 <__kernel_cos+0x170>)
 800b6de:	f7f4 fd43 	bl	8000168 <__aeabi_dsub>
 800b6e2:	b003      	add	sp, #12
 800b6e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6e8:	2400      	movs	r4, #0
 800b6ea:	4b20      	ldr	r3, [pc, #128]	; (800b76c <__kernel_cos+0x174>)
 800b6ec:	4622      	mov	r2, r4
 800b6ee:	429e      	cmp	r6, r3
 800b6f0:	bfcc      	ite	gt
 800b6f2:	4d1f      	ldrgt	r5, [pc, #124]	; (800b770 <__kernel_cos+0x178>)
 800b6f4:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800b6f8:	462b      	mov	r3, r5
 800b6fa:	2000      	movs	r0, #0
 800b6fc:	491a      	ldr	r1, [pc, #104]	; (800b768 <__kernel_cos+0x170>)
 800b6fe:	f7f4 fd33 	bl	8000168 <__aeabi_dsub>
 800b702:	4622      	mov	r2, r4
 800b704:	4606      	mov	r6, r0
 800b706:	460f      	mov	r7, r1
 800b708:	462b      	mov	r3, r5
 800b70a:	4650      	mov	r0, sl
 800b70c:	4659      	mov	r1, fp
 800b70e:	f7f4 fd2b 	bl	8000168 <__aeabi_dsub>
 800b712:	4642      	mov	r2, r8
 800b714:	464b      	mov	r3, r9
 800b716:	f7f4 fd27 	bl	8000168 <__aeabi_dsub>
 800b71a:	4602      	mov	r2, r0
 800b71c:	460b      	mov	r3, r1
 800b71e:	4630      	mov	r0, r6
 800b720:	4639      	mov	r1, r7
 800b722:	e7dc      	b.n	800b6de <__kernel_cos+0xe6>
 800b724:	2000      	movs	r0, #0
 800b726:	4910      	ldr	r1, [pc, #64]	; (800b768 <__kernel_cos+0x170>)
 800b728:	e7db      	b.n	800b6e2 <__kernel_cos+0xea>
 800b72a:	bf00      	nop
 800b72c:	f3af 8000 	nop.w
 800b730:	be8838d4 	.word	0xbe8838d4
 800b734:	bda8fae9 	.word	0xbda8fae9
 800b738:	bdb4b1c4 	.word	0xbdb4b1c4
 800b73c:	3e21ee9e 	.word	0x3e21ee9e
 800b740:	809c52ad 	.word	0x809c52ad
 800b744:	3e927e4f 	.word	0x3e927e4f
 800b748:	19cb1590 	.word	0x19cb1590
 800b74c:	3efa01a0 	.word	0x3efa01a0
 800b750:	16c15177 	.word	0x16c15177
 800b754:	3f56c16c 	.word	0x3f56c16c
 800b758:	5555554c 	.word	0x5555554c
 800b75c:	3fa55555 	.word	0x3fa55555
 800b760:	3fe00000 	.word	0x3fe00000
 800b764:	3fd33332 	.word	0x3fd33332
 800b768:	3ff00000 	.word	0x3ff00000
 800b76c:	3fe90000 	.word	0x3fe90000
 800b770:	3fd20000 	.word	0x3fd20000

0800b774 <__kernel_rem_pio2>:
 800b774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b778:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800b77c:	9308      	str	r3, [sp, #32]
 800b77e:	9106      	str	r1, [sp, #24]
 800b780:	4bb6      	ldr	r3, [pc, #728]	; (800ba5c <__kernel_rem_pio2+0x2e8>)
 800b782:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800b784:	f112 0f14 	cmn.w	r2, #20
 800b788:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b78c:	bfa8      	it	ge
 800b78e:	1ed4      	subge	r4, r2, #3
 800b790:	9302      	str	r3, [sp, #8]
 800b792:	9b08      	ldr	r3, [sp, #32]
 800b794:	bfb8      	it	lt
 800b796:	2400      	movlt	r4, #0
 800b798:	f103 33ff 	add.w	r3, r3, #4294967295
 800b79c:	9307      	str	r3, [sp, #28]
 800b79e:	bfa4      	itt	ge
 800b7a0:	2318      	movge	r3, #24
 800b7a2:	fb94 f4f3 	sdivge	r4, r4, r3
 800b7a6:	f06f 0317 	mvn.w	r3, #23
 800b7aa:	fb04 3303 	mla	r3, r4, r3, r3
 800b7ae:	eb03 0b02 	add.w	fp, r3, r2
 800b7b2:	9a07      	ldr	r2, [sp, #28]
 800b7b4:	9b02      	ldr	r3, [sp, #8]
 800b7b6:	1aa7      	subs	r7, r4, r2
 800b7b8:	eb03 0802 	add.w	r8, r3, r2
 800b7bc:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800b7be:	2500      	movs	r5, #0
 800b7c0:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	9009      	str	r0, [sp, #36]	; 0x24
 800b7ca:	ae20      	add	r6, sp, #128	; 0x80
 800b7cc:	4545      	cmp	r5, r8
 800b7ce:	dd14      	ble.n	800b7fa <__kernel_rem_pio2+0x86>
 800b7d0:	f04f 0800 	mov.w	r8, #0
 800b7d4:	9a08      	ldr	r2, [sp, #32]
 800b7d6:	ab20      	add	r3, sp, #128	; 0x80
 800b7d8:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 800b7dc:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 800b7e0:	9b02      	ldr	r3, [sp, #8]
 800b7e2:	4598      	cmp	r8, r3
 800b7e4:	dc35      	bgt.n	800b852 <__kernel_rem_pio2+0xde>
 800b7e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	f1a3 0908 	sub.w	r9, r3, #8
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	462f      	mov	r7, r5
 800b7f2:	2600      	movs	r6, #0
 800b7f4:	e9cd 2300 	strd	r2, r3, [sp]
 800b7f8:	e01f      	b.n	800b83a <__kernel_rem_pio2+0xc6>
 800b7fa:	42ef      	cmn	r7, r5
 800b7fc:	d40b      	bmi.n	800b816 <__kernel_rem_pio2+0xa2>
 800b7fe:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b802:	e9cd 2300 	strd	r2, r3, [sp]
 800b806:	f7f4 fdfd 	bl	8000404 <__aeabi_i2d>
 800b80a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b80e:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b812:	3501      	adds	r5, #1
 800b814:	e7da      	b.n	800b7cc <__kernel_rem_pio2+0x58>
 800b816:	4610      	mov	r0, r2
 800b818:	4619      	mov	r1, r3
 800b81a:	e7f8      	b.n	800b80e <__kernel_rem_pio2+0x9a>
 800b81c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b820:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800b824:	f7f4 fe58 	bl	80004d8 <__aeabi_dmul>
 800b828:	4602      	mov	r2, r0
 800b82a:	460b      	mov	r3, r1
 800b82c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b830:	f7f4 fc9c 	bl	800016c <__adddf3>
 800b834:	e9cd 0100 	strd	r0, r1, [sp]
 800b838:	3601      	adds	r6, #1
 800b83a:	9b07      	ldr	r3, [sp, #28]
 800b83c:	3f08      	subs	r7, #8
 800b83e:	429e      	cmp	r6, r3
 800b840:	ddec      	ble.n	800b81c <__kernel_rem_pio2+0xa8>
 800b842:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b846:	f108 0801 	add.w	r8, r8, #1
 800b84a:	e8ea 2302 	strd	r2, r3, [sl], #8
 800b84e:	3508      	adds	r5, #8
 800b850:	e7c6      	b.n	800b7e0 <__kernel_rem_pio2+0x6c>
 800b852:	9b02      	ldr	r3, [sp, #8]
 800b854:	aa0c      	add	r2, sp, #48	; 0x30
 800b856:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b85a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b85c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800b85e:	9e02      	ldr	r6, [sp, #8]
 800b860:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b864:	930a      	str	r3, [sp, #40]	; 0x28
 800b866:	ab98      	add	r3, sp, #608	; 0x260
 800b868:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b86c:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 800b870:	ab70      	add	r3, sp, #448	; 0x1c0
 800b872:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 800b876:	46d0      	mov	r8, sl
 800b878:	46b1      	mov	r9, r6
 800b87a:	af0c      	add	r7, sp, #48	; 0x30
 800b87c:	9700      	str	r7, [sp, #0]
 800b87e:	f1b9 0f00 	cmp.w	r9, #0
 800b882:	f1a8 0808 	sub.w	r8, r8, #8
 800b886:	dc71      	bgt.n	800b96c <__kernel_rem_pio2+0x1f8>
 800b888:	465a      	mov	r2, fp
 800b88a:	4620      	mov	r0, r4
 800b88c:	4629      	mov	r1, r5
 800b88e:	f000 fbef 	bl	800c070 <scalbn>
 800b892:	2200      	movs	r2, #0
 800b894:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800b898:	4604      	mov	r4, r0
 800b89a:	460d      	mov	r5, r1
 800b89c:	f7f4 fe1c 	bl	80004d8 <__aeabi_dmul>
 800b8a0:	f000 fb66 	bl	800bf70 <floor>
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	4b6e      	ldr	r3, [pc, #440]	; (800ba60 <__kernel_rem_pio2+0x2ec>)
 800b8a8:	f7f4 fe16 	bl	80004d8 <__aeabi_dmul>
 800b8ac:	4602      	mov	r2, r0
 800b8ae:	460b      	mov	r3, r1
 800b8b0:	4620      	mov	r0, r4
 800b8b2:	4629      	mov	r1, r5
 800b8b4:	f7f4 fc58 	bl	8000168 <__aeabi_dsub>
 800b8b8:	460d      	mov	r5, r1
 800b8ba:	4604      	mov	r4, r0
 800b8bc:	f7f5 f8bc 	bl	8000a38 <__aeabi_d2iz>
 800b8c0:	9004      	str	r0, [sp, #16]
 800b8c2:	f7f4 fd9f 	bl	8000404 <__aeabi_i2d>
 800b8c6:	4602      	mov	r2, r0
 800b8c8:	460b      	mov	r3, r1
 800b8ca:	4620      	mov	r0, r4
 800b8cc:	4629      	mov	r1, r5
 800b8ce:	f7f4 fc4b 	bl	8000168 <__aeabi_dsub>
 800b8d2:	f1bb 0f00 	cmp.w	fp, #0
 800b8d6:	4680      	mov	r8, r0
 800b8d8:	4689      	mov	r9, r1
 800b8da:	dd70      	ble.n	800b9be <__kernel_rem_pio2+0x24a>
 800b8dc:	1e72      	subs	r2, r6, #1
 800b8de:	ab0c      	add	r3, sp, #48	; 0x30
 800b8e0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800b8e4:	9c04      	ldr	r4, [sp, #16]
 800b8e6:	f1cb 0118 	rsb	r1, fp, #24
 800b8ea:	fa40 f301 	asr.w	r3, r0, r1
 800b8ee:	441c      	add	r4, r3
 800b8f0:	408b      	lsls	r3, r1
 800b8f2:	1ac0      	subs	r0, r0, r3
 800b8f4:	ab0c      	add	r3, sp, #48	; 0x30
 800b8f6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800b8fa:	f1cb 0317 	rsb	r3, fp, #23
 800b8fe:	9404      	str	r4, [sp, #16]
 800b900:	fa40 f303 	asr.w	r3, r0, r3
 800b904:	9300      	str	r3, [sp, #0]
 800b906:	9b00      	ldr	r3, [sp, #0]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	dd66      	ble.n	800b9da <__kernel_rem_pio2+0x266>
 800b90c:	2200      	movs	r2, #0
 800b90e:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800b912:	4614      	mov	r4, r2
 800b914:	9b04      	ldr	r3, [sp, #16]
 800b916:	3301      	adds	r3, #1
 800b918:	9304      	str	r3, [sp, #16]
 800b91a:	4296      	cmp	r6, r2
 800b91c:	f300 80ac 	bgt.w	800ba78 <__kernel_rem_pio2+0x304>
 800b920:	f1bb 0f00 	cmp.w	fp, #0
 800b924:	dd07      	ble.n	800b936 <__kernel_rem_pio2+0x1c2>
 800b926:	f1bb 0f01 	cmp.w	fp, #1
 800b92a:	f000 80b4 	beq.w	800ba96 <__kernel_rem_pio2+0x322>
 800b92e:	f1bb 0f02 	cmp.w	fp, #2
 800b932:	f000 80ba 	beq.w	800baaa <__kernel_rem_pio2+0x336>
 800b936:	9b00      	ldr	r3, [sp, #0]
 800b938:	2b02      	cmp	r3, #2
 800b93a:	d14e      	bne.n	800b9da <__kernel_rem_pio2+0x266>
 800b93c:	4642      	mov	r2, r8
 800b93e:	464b      	mov	r3, r9
 800b940:	2000      	movs	r0, #0
 800b942:	4948      	ldr	r1, [pc, #288]	; (800ba64 <__kernel_rem_pio2+0x2f0>)
 800b944:	f7f4 fc10 	bl	8000168 <__aeabi_dsub>
 800b948:	4680      	mov	r8, r0
 800b94a:	4689      	mov	r9, r1
 800b94c:	2c00      	cmp	r4, #0
 800b94e:	d044      	beq.n	800b9da <__kernel_rem_pio2+0x266>
 800b950:	465a      	mov	r2, fp
 800b952:	2000      	movs	r0, #0
 800b954:	4943      	ldr	r1, [pc, #268]	; (800ba64 <__kernel_rem_pio2+0x2f0>)
 800b956:	f000 fb8b 	bl	800c070 <scalbn>
 800b95a:	4602      	mov	r2, r0
 800b95c:	460b      	mov	r3, r1
 800b95e:	4640      	mov	r0, r8
 800b960:	4649      	mov	r1, r9
 800b962:	f7f4 fc01 	bl	8000168 <__aeabi_dsub>
 800b966:	4680      	mov	r8, r0
 800b968:	4689      	mov	r9, r1
 800b96a:	e036      	b.n	800b9da <__kernel_rem_pio2+0x266>
 800b96c:	2200      	movs	r2, #0
 800b96e:	4b3e      	ldr	r3, [pc, #248]	; (800ba68 <__kernel_rem_pio2+0x2f4>)
 800b970:	4620      	mov	r0, r4
 800b972:	4629      	mov	r1, r5
 800b974:	f7f4 fdb0 	bl	80004d8 <__aeabi_dmul>
 800b978:	f7f5 f85e 	bl	8000a38 <__aeabi_d2iz>
 800b97c:	f7f4 fd42 	bl	8000404 <__aeabi_i2d>
 800b980:	4602      	mov	r2, r0
 800b982:	460b      	mov	r3, r1
 800b984:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b988:	2200      	movs	r2, #0
 800b98a:	4b38      	ldr	r3, [pc, #224]	; (800ba6c <__kernel_rem_pio2+0x2f8>)
 800b98c:	f7f4 fda4 	bl	80004d8 <__aeabi_dmul>
 800b990:	4602      	mov	r2, r0
 800b992:	460b      	mov	r3, r1
 800b994:	4620      	mov	r0, r4
 800b996:	4629      	mov	r1, r5
 800b998:	f7f4 fbe6 	bl	8000168 <__aeabi_dsub>
 800b99c:	f7f5 f84c 	bl	8000a38 <__aeabi_d2iz>
 800b9a0:	9b00      	ldr	r3, [sp, #0]
 800b9a2:	f109 39ff 	add.w	r9, r9, #4294967295
 800b9a6:	f843 0b04 	str.w	r0, [r3], #4
 800b9aa:	9300      	str	r3, [sp, #0]
 800b9ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b9b0:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b9b4:	f7f4 fbda 	bl	800016c <__adddf3>
 800b9b8:	4604      	mov	r4, r0
 800b9ba:	460d      	mov	r5, r1
 800b9bc:	e75f      	b.n	800b87e <__kernel_rem_pio2+0x10a>
 800b9be:	d105      	bne.n	800b9cc <__kernel_rem_pio2+0x258>
 800b9c0:	1e73      	subs	r3, r6, #1
 800b9c2:	aa0c      	add	r2, sp, #48	; 0x30
 800b9c4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800b9c8:	15c3      	asrs	r3, r0, #23
 800b9ca:	e79b      	b.n	800b904 <__kernel_rem_pio2+0x190>
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	4b28      	ldr	r3, [pc, #160]	; (800ba70 <__kernel_rem_pio2+0x2fc>)
 800b9d0:	f7f5 f808 	bl	80009e4 <__aeabi_dcmpge>
 800b9d4:	2800      	cmp	r0, #0
 800b9d6:	d13e      	bne.n	800ba56 <__kernel_rem_pio2+0x2e2>
 800b9d8:	9000      	str	r0, [sp, #0]
 800b9da:	2200      	movs	r2, #0
 800b9dc:	2300      	movs	r3, #0
 800b9de:	4640      	mov	r0, r8
 800b9e0:	4649      	mov	r1, r9
 800b9e2:	f7f4 ffe1 	bl	80009a8 <__aeabi_dcmpeq>
 800b9e6:	2800      	cmp	r0, #0
 800b9e8:	f000 80b1 	beq.w	800bb4e <__kernel_rem_pio2+0x3da>
 800b9ec:	1e74      	subs	r4, r6, #1
 800b9ee:	4623      	mov	r3, r4
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	9902      	ldr	r1, [sp, #8]
 800b9f4:	428b      	cmp	r3, r1
 800b9f6:	da5f      	bge.n	800bab8 <__kernel_rem_pio2+0x344>
 800b9f8:	2a00      	cmp	r2, #0
 800b9fa:	d074      	beq.n	800bae6 <__kernel_rem_pio2+0x372>
 800b9fc:	ab0c      	add	r3, sp, #48	; 0x30
 800b9fe:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800ba02:	f1ab 0b18 	sub.w	fp, fp, #24
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	f000 809f 	beq.w	800bb4a <__kernel_rem_pio2+0x3d6>
 800ba0c:	465a      	mov	r2, fp
 800ba0e:	2000      	movs	r0, #0
 800ba10:	4914      	ldr	r1, [pc, #80]	; (800ba64 <__kernel_rem_pio2+0x2f0>)
 800ba12:	f000 fb2d 	bl	800c070 <scalbn>
 800ba16:	46a2      	mov	sl, r4
 800ba18:	4606      	mov	r6, r0
 800ba1a:	460f      	mov	r7, r1
 800ba1c:	f04f 0800 	mov.w	r8, #0
 800ba20:	ab70      	add	r3, sp, #448	; 0x1c0
 800ba22:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800ba68 <__kernel_rem_pio2+0x2f4>
 800ba26:	00e5      	lsls	r5, r4, #3
 800ba28:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 800ba2c:	f1ba 0f00 	cmp.w	sl, #0
 800ba30:	f280 80c3 	bge.w	800bbba <__kernel_rem_pio2+0x446>
 800ba34:	4626      	mov	r6, r4
 800ba36:	2e00      	cmp	r6, #0
 800ba38:	f2c0 80f5 	blt.w	800bc26 <__kernel_rem_pio2+0x4b2>
 800ba3c:	4b0d      	ldr	r3, [pc, #52]	; (800ba74 <__kernel_rem_pio2+0x300>)
 800ba3e:	f04f 0a00 	mov.w	sl, #0
 800ba42:	9307      	str	r3, [sp, #28]
 800ba44:	ab70      	add	r3, sp, #448	; 0x1c0
 800ba46:	f04f 0b00 	mov.w	fp, #0
 800ba4a:	f04f 0800 	mov.w	r8, #0
 800ba4e:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800ba52:	1ba7      	subs	r7, r4, r6
 800ba54:	e0db      	b.n	800bc0e <__kernel_rem_pio2+0x49a>
 800ba56:	2302      	movs	r3, #2
 800ba58:	9300      	str	r3, [sp, #0]
 800ba5a:	e757      	b.n	800b90c <__kernel_rem_pio2+0x198>
 800ba5c:	0800d160 	.word	0x0800d160
 800ba60:	40200000 	.word	0x40200000
 800ba64:	3ff00000 	.word	0x3ff00000
 800ba68:	3e700000 	.word	0x3e700000
 800ba6c:	41700000 	.word	0x41700000
 800ba70:	3fe00000 	.word	0x3fe00000
 800ba74:	0800d120 	.word	0x0800d120
 800ba78:	683b      	ldr	r3, [r7, #0]
 800ba7a:	b944      	cbnz	r4, 800ba8e <__kernel_rem_pio2+0x31a>
 800ba7c:	b11b      	cbz	r3, 800ba86 <__kernel_rem_pio2+0x312>
 800ba7e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800ba82:	603b      	str	r3, [r7, #0]
 800ba84:	2301      	movs	r3, #1
 800ba86:	461c      	mov	r4, r3
 800ba88:	3201      	adds	r2, #1
 800ba8a:	3704      	adds	r7, #4
 800ba8c:	e745      	b.n	800b91a <__kernel_rem_pio2+0x1a6>
 800ba8e:	1acb      	subs	r3, r1, r3
 800ba90:	603b      	str	r3, [r7, #0]
 800ba92:	4623      	mov	r3, r4
 800ba94:	e7f7      	b.n	800ba86 <__kernel_rem_pio2+0x312>
 800ba96:	1e72      	subs	r2, r6, #1
 800ba98:	ab0c      	add	r3, sp, #48	; 0x30
 800ba9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba9e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800baa2:	a90c      	add	r1, sp, #48	; 0x30
 800baa4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800baa8:	e745      	b.n	800b936 <__kernel_rem_pio2+0x1c2>
 800baaa:	1e72      	subs	r2, r6, #1
 800baac:	ab0c      	add	r3, sp, #48	; 0x30
 800baae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bab2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800bab6:	e7f4      	b.n	800baa2 <__kernel_rem_pio2+0x32e>
 800bab8:	a90c      	add	r1, sp, #48	; 0x30
 800baba:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800babe:	3b01      	subs	r3, #1
 800bac0:	430a      	orrs	r2, r1
 800bac2:	e796      	b.n	800b9f2 <__kernel_rem_pio2+0x27e>
 800bac4:	3401      	adds	r4, #1
 800bac6:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800baca:	2a00      	cmp	r2, #0
 800bacc:	d0fa      	beq.n	800bac4 <__kernel_rem_pio2+0x350>
 800bace:	9b08      	ldr	r3, [sp, #32]
 800bad0:	f106 0801 	add.w	r8, r6, #1
 800bad4:	18f5      	adds	r5, r6, r3
 800bad6:	ab20      	add	r3, sp, #128	; 0x80
 800bad8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800badc:	4434      	add	r4, r6
 800bade:	4544      	cmp	r4, r8
 800bae0:	da04      	bge.n	800baec <__kernel_rem_pio2+0x378>
 800bae2:	4626      	mov	r6, r4
 800bae4:	e6bf      	b.n	800b866 <__kernel_rem_pio2+0xf2>
 800bae6:	2401      	movs	r4, #1
 800bae8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800baea:	e7ec      	b.n	800bac6 <__kernel_rem_pio2+0x352>
 800baec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800baee:	f04f 0900 	mov.w	r9, #0
 800baf2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800baf6:	f7f4 fc85 	bl	8000404 <__aeabi_i2d>
 800bafa:	2600      	movs	r6, #0
 800bafc:	2700      	movs	r7, #0
 800bafe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb00:	e9c5 0100 	strd	r0, r1, [r5]
 800bb04:	3b08      	subs	r3, #8
 800bb06:	9300      	str	r3, [sp, #0]
 800bb08:	9504      	str	r5, [sp, #16]
 800bb0a:	9b07      	ldr	r3, [sp, #28]
 800bb0c:	4599      	cmp	r9, r3
 800bb0e:	dd05      	ble.n	800bb1c <__kernel_rem_pio2+0x3a8>
 800bb10:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 800bb14:	f108 0801 	add.w	r8, r8, #1
 800bb18:	3508      	adds	r5, #8
 800bb1a:	e7e0      	b.n	800bade <__kernel_rem_pio2+0x36a>
 800bb1c:	f8dd c010 	ldr.w	ip, [sp, #16]
 800bb20:	9900      	ldr	r1, [sp, #0]
 800bb22:	f109 0901 	add.w	r9, r9, #1
 800bb26:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800bb2a:	9100      	str	r1, [sp, #0]
 800bb2c:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 800bb30:	f8cd c010 	str.w	ip, [sp, #16]
 800bb34:	f7f4 fcd0 	bl	80004d8 <__aeabi_dmul>
 800bb38:	4602      	mov	r2, r0
 800bb3a:	460b      	mov	r3, r1
 800bb3c:	4630      	mov	r0, r6
 800bb3e:	4639      	mov	r1, r7
 800bb40:	f7f4 fb14 	bl	800016c <__adddf3>
 800bb44:	4606      	mov	r6, r0
 800bb46:	460f      	mov	r7, r1
 800bb48:	e7df      	b.n	800bb0a <__kernel_rem_pio2+0x396>
 800bb4a:	3c01      	subs	r4, #1
 800bb4c:	e756      	b.n	800b9fc <__kernel_rem_pio2+0x288>
 800bb4e:	f1cb 0200 	rsb	r2, fp, #0
 800bb52:	4640      	mov	r0, r8
 800bb54:	4649      	mov	r1, r9
 800bb56:	f000 fa8b 	bl	800c070 <scalbn>
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	4ba4      	ldr	r3, [pc, #656]	; (800bdf0 <__kernel_rem_pio2+0x67c>)
 800bb5e:	4604      	mov	r4, r0
 800bb60:	460d      	mov	r5, r1
 800bb62:	f7f4 ff3f 	bl	80009e4 <__aeabi_dcmpge>
 800bb66:	b1f8      	cbz	r0, 800bba8 <__kernel_rem_pio2+0x434>
 800bb68:	2200      	movs	r2, #0
 800bb6a:	4ba2      	ldr	r3, [pc, #648]	; (800bdf4 <__kernel_rem_pio2+0x680>)
 800bb6c:	4620      	mov	r0, r4
 800bb6e:	4629      	mov	r1, r5
 800bb70:	f7f4 fcb2 	bl	80004d8 <__aeabi_dmul>
 800bb74:	f7f4 ff60 	bl	8000a38 <__aeabi_d2iz>
 800bb78:	4607      	mov	r7, r0
 800bb7a:	f7f4 fc43 	bl	8000404 <__aeabi_i2d>
 800bb7e:	2200      	movs	r2, #0
 800bb80:	4b9b      	ldr	r3, [pc, #620]	; (800bdf0 <__kernel_rem_pio2+0x67c>)
 800bb82:	f7f4 fca9 	bl	80004d8 <__aeabi_dmul>
 800bb86:	460b      	mov	r3, r1
 800bb88:	4602      	mov	r2, r0
 800bb8a:	4629      	mov	r1, r5
 800bb8c:	4620      	mov	r0, r4
 800bb8e:	f7f4 faeb 	bl	8000168 <__aeabi_dsub>
 800bb92:	f7f4 ff51 	bl	8000a38 <__aeabi_d2iz>
 800bb96:	1c74      	adds	r4, r6, #1
 800bb98:	ab0c      	add	r3, sp, #48	; 0x30
 800bb9a:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800bb9e:	f10b 0b18 	add.w	fp, fp, #24
 800bba2:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 800bba6:	e731      	b.n	800ba0c <__kernel_rem_pio2+0x298>
 800bba8:	4620      	mov	r0, r4
 800bbaa:	4629      	mov	r1, r5
 800bbac:	f7f4 ff44 	bl	8000a38 <__aeabi_d2iz>
 800bbb0:	ab0c      	add	r3, sp, #48	; 0x30
 800bbb2:	4634      	mov	r4, r6
 800bbb4:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800bbb8:	e728      	b.n	800ba0c <__kernel_rem_pio2+0x298>
 800bbba:	ab0c      	add	r3, sp, #48	; 0x30
 800bbbc:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800bbc0:	f7f4 fc20 	bl	8000404 <__aeabi_i2d>
 800bbc4:	4632      	mov	r2, r6
 800bbc6:	463b      	mov	r3, r7
 800bbc8:	f7f4 fc86 	bl	80004d8 <__aeabi_dmul>
 800bbcc:	4642      	mov	r2, r8
 800bbce:	e86b 0102 	strd	r0, r1, [fp], #-8
 800bbd2:	464b      	mov	r3, r9
 800bbd4:	4630      	mov	r0, r6
 800bbd6:	4639      	mov	r1, r7
 800bbd8:	f7f4 fc7e 	bl	80004d8 <__aeabi_dmul>
 800bbdc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bbe0:	4606      	mov	r6, r0
 800bbe2:	460f      	mov	r7, r1
 800bbe4:	e722      	b.n	800ba2c <__kernel_rem_pio2+0x2b8>
 800bbe6:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800bbea:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800bbee:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 800bbf2:	f8cd c01c 	str.w	ip, [sp, #28]
 800bbf6:	f7f4 fc6f 	bl	80004d8 <__aeabi_dmul>
 800bbfa:	4602      	mov	r2, r0
 800bbfc:	460b      	mov	r3, r1
 800bbfe:	4650      	mov	r0, sl
 800bc00:	4659      	mov	r1, fp
 800bc02:	f7f4 fab3 	bl	800016c <__adddf3>
 800bc06:	4682      	mov	sl, r0
 800bc08:	468b      	mov	fp, r1
 800bc0a:	f108 0801 	add.w	r8, r8, #1
 800bc0e:	9b02      	ldr	r3, [sp, #8]
 800bc10:	4598      	cmp	r8, r3
 800bc12:	dc01      	bgt.n	800bc18 <__kernel_rem_pio2+0x4a4>
 800bc14:	45b8      	cmp	r8, r7
 800bc16:	dde6      	ble.n	800bbe6 <__kernel_rem_pio2+0x472>
 800bc18:	ab48      	add	r3, sp, #288	; 0x120
 800bc1a:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800bc1e:	e9c7 ab00 	strd	sl, fp, [r7]
 800bc22:	3e01      	subs	r6, #1
 800bc24:	e707      	b.n	800ba36 <__kernel_rem_pio2+0x2c2>
 800bc26:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800bc28:	2b02      	cmp	r3, #2
 800bc2a:	dc09      	bgt.n	800bc40 <__kernel_rem_pio2+0x4cc>
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	dc32      	bgt.n	800bc96 <__kernel_rem_pio2+0x522>
 800bc30:	d05a      	beq.n	800bce8 <__kernel_rem_pio2+0x574>
 800bc32:	9b04      	ldr	r3, [sp, #16]
 800bc34:	f003 0007 	and.w	r0, r3, #7
 800bc38:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800bc3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc40:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800bc42:	2b03      	cmp	r3, #3
 800bc44:	d1f5      	bne.n	800bc32 <__kernel_rem_pio2+0x4be>
 800bc46:	ab48      	add	r3, sp, #288	; 0x120
 800bc48:	441d      	add	r5, r3
 800bc4a:	46aa      	mov	sl, r5
 800bc4c:	46a3      	mov	fp, r4
 800bc4e:	f1bb 0f00 	cmp.w	fp, #0
 800bc52:	dc76      	bgt.n	800bd42 <__kernel_rem_pio2+0x5ce>
 800bc54:	46aa      	mov	sl, r5
 800bc56:	46a3      	mov	fp, r4
 800bc58:	f1bb 0f01 	cmp.w	fp, #1
 800bc5c:	f300 8090 	bgt.w	800bd80 <__kernel_rem_pio2+0x60c>
 800bc60:	2700      	movs	r7, #0
 800bc62:	463e      	mov	r6, r7
 800bc64:	2c01      	cmp	r4, #1
 800bc66:	f300 80aa 	bgt.w	800bdbe <__kernel_rem_pio2+0x64a>
 800bc6a:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 800bc6e:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 800bc72:	9b00      	ldr	r3, [sp, #0]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	f040 80ac 	bne.w	800bdd2 <__kernel_rem_pio2+0x65e>
 800bc7a:	4603      	mov	r3, r0
 800bc7c:	462a      	mov	r2, r5
 800bc7e:	9806      	ldr	r0, [sp, #24]
 800bc80:	e9c0 2300 	strd	r2, r3, [r0]
 800bc84:	4622      	mov	r2, r4
 800bc86:	460b      	mov	r3, r1
 800bc88:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800bc8c:	463a      	mov	r2, r7
 800bc8e:	4633      	mov	r3, r6
 800bc90:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800bc94:	e7cd      	b.n	800bc32 <__kernel_rem_pio2+0x4be>
 800bc96:	2000      	movs	r0, #0
 800bc98:	46a0      	mov	r8, r4
 800bc9a:	4601      	mov	r1, r0
 800bc9c:	ab48      	add	r3, sp, #288	; 0x120
 800bc9e:	441d      	add	r5, r3
 800bca0:	f1b8 0f00 	cmp.w	r8, #0
 800bca4:	da3a      	bge.n	800bd1c <__kernel_rem_pio2+0x5a8>
 800bca6:	9b00      	ldr	r3, [sp, #0]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d03e      	beq.n	800bd2a <__kernel_rem_pio2+0x5b6>
 800bcac:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 800bcb0:	4602      	mov	r2, r0
 800bcb2:	462b      	mov	r3, r5
 800bcb4:	9d06      	ldr	r5, [sp, #24]
 800bcb6:	2601      	movs	r6, #1
 800bcb8:	e9c5 2300 	strd	r2, r3, [r5]
 800bcbc:	460b      	mov	r3, r1
 800bcbe:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800bcc2:	f7f4 fa51 	bl	8000168 <__aeabi_dsub>
 800bcc6:	4684      	mov	ip, r0
 800bcc8:	460f      	mov	r7, r1
 800bcca:	ad48      	add	r5, sp, #288	; 0x120
 800bccc:	42b4      	cmp	r4, r6
 800bcce:	f105 0508 	add.w	r5, r5, #8
 800bcd2:	da2c      	bge.n	800bd2e <__kernel_rem_pio2+0x5ba>
 800bcd4:	9b00      	ldr	r3, [sp, #0]
 800bcd6:	b10b      	cbz	r3, 800bcdc <__kernel_rem_pio2+0x568>
 800bcd8:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800bcdc:	4662      	mov	r2, ip
 800bcde:	463b      	mov	r3, r7
 800bce0:	9906      	ldr	r1, [sp, #24]
 800bce2:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800bce6:	e7a4      	b.n	800bc32 <__kernel_rem_pio2+0x4be>
 800bce8:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 800bcea:	ab48      	add	r3, sp, #288	; 0x120
 800bcec:	4637      	mov	r7, r6
 800bcee:	441d      	add	r5, r3
 800bcf0:	2c00      	cmp	r4, #0
 800bcf2:	da09      	bge.n	800bd08 <__kernel_rem_pio2+0x594>
 800bcf4:	9b00      	ldr	r3, [sp, #0]
 800bcf6:	b10b      	cbz	r3, 800bcfc <__kernel_rem_pio2+0x588>
 800bcf8:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800bcfc:	4632      	mov	r2, r6
 800bcfe:	463b      	mov	r3, r7
 800bd00:	9906      	ldr	r1, [sp, #24]
 800bd02:	e9c1 2300 	strd	r2, r3, [r1]
 800bd06:	e794      	b.n	800bc32 <__kernel_rem_pio2+0x4be>
 800bd08:	4630      	mov	r0, r6
 800bd0a:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800bd0e:	4639      	mov	r1, r7
 800bd10:	f7f4 fa2c 	bl	800016c <__adddf3>
 800bd14:	3c01      	subs	r4, #1
 800bd16:	4606      	mov	r6, r0
 800bd18:	460f      	mov	r7, r1
 800bd1a:	e7e9      	b.n	800bcf0 <__kernel_rem_pio2+0x57c>
 800bd1c:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800bd20:	f7f4 fa24 	bl	800016c <__adddf3>
 800bd24:	f108 38ff 	add.w	r8, r8, #4294967295
 800bd28:	e7ba      	b.n	800bca0 <__kernel_rem_pio2+0x52c>
 800bd2a:	460d      	mov	r5, r1
 800bd2c:	e7c0      	b.n	800bcb0 <__kernel_rem_pio2+0x53c>
 800bd2e:	4660      	mov	r0, ip
 800bd30:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bd34:	4639      	mov	r1, r7
 800bd36:	f7f4 fa19 	bl	800016c <__adddf3>
 800bd3a:	3601      	adds	r6, #1
 800bd3c:	4684      	mov	ip, r0
 800bd3e:	460f      	mov	r7, r1
 800bd40:	e7c4      	b.n	800bccc <__kernel_rem_pio2+0x558>
 800bd42:	e9da 6700 	ldrd	r6, r7, [sl]
 800bd46:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 800bd4a:	4632      	mov	r2, r6
 800bd4c:	463b      	mov	r3, r7
 800bd4e:	4640      	mov	r0, r8
 800bd50:	4649      	mov	r1, r9
 800bd52:	f7f4 fa0b 	bl	800016c <__adddf3>
 800bd56:	4602      	mov	r2, r0
 800bd58:	460b      	mov	r3, r1
 800bd5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd5e:	4640      	mov	r0, r8
 800bd60:	4649      	mov	r1, r9
 800bd62:	f7f4 fa01 	bl	8000168 <__aeabi_dsub>
 800bd66:	4632      	mov	r2, r6
 800bd68:	463b      	mov	r3, r7
 800bd6a:	f7f4 f9ff 	bl	800016c <__adddf3>
 800bd6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bd72:	e86a 0102 	strd	r0, r1, [sl], #-8
 800bd76:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bd7a:	e9ca 2300 	strd	r2, r3, [sl]
 800bd7e:	e766      	b.n	800bc4e <__kernel_rem_pio2+0x4da>
 800bd80:	e9da 8900 	ldrd	r8, r9, [sl]
 800bd84:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 800bd88:	4642      	mov	r2, r8
 800bd8a:	464b      	mov	r3, r9
 800bd8c:	4630      	mov	r0, r6
 800bd8e:	4639      	mov	r1, r7
 800bd90:	f7f4 f9ec 	bl	800016c <__adddf3>
 800bd94:	4602      	mov	r2, r0
 800bd96:	460b      	mov	r3, r1
 800bd98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd9c:	4630      	mov	r0, r6
 800bd9e:	4639      	mov	r1, r7
 800bda0:	f7f4 f9e2 	bl	8000168 <__aeabi_dsub>
 800bda4:	4642      	mov	r2, r8
 800bda6:	464b      	mov	r3, r9
 800bda8:	f7f4 f9e0 	bl	800016c <__adddf3>
 800bdac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bdb0:	e86a 0102 	strd	r0, r1, [sl], #-8
 800bdb4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bdb8:	e9ca 2300 	strd	r2, r3, [sl]
 800bdbc:	e74c      	b.n	800bc58 <__kernel_rem_pio2+0x4e4>
 800bdbe:	4638      	mov	r0, r7
 800bdc0:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800bdc4:	4631      	mov	r1, r6
 800bdc6:	f7f4 f9d1 	bl	800016c <__adddf3>
 800bdca:	3c01      	subs	r4, #1
 800bdcc:	4607      	mov	r7, r0
 800bdce:	460e      	mov	r6, r1
 800bdd0:	e748      	b.n	800bc64 <__kernel_rem_pio2+0x4f0>
 800bdd2:	9b06      	ldr	r3, [sp, #24]
 800bdd4:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800bdd8:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800bddc:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800bde0:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800bde4:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800bde8:	601d      	str	r5, [r3, #0]
 800bdea:	615e      	str	r6, [r3, #20]
 800bdec:	e721      	b.n	800bc32 <__kernel_rem_pio2+0x4be>
 800bdee:	bf00      	nop
 800bdf0:	41700000 	.word	0x41700000
 800bdf4:	3e700000 	.word	0x3e700000

0800bdf8 <__kernel_sin>:
 800bdf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bdfc:	b086      	sub	sp, #24
 800bdfe:	e9cd 2300 	strd	r2, r3, [sp]
 800be02:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800be06:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800be0a:	4682      	mov	sl, r0
 800be0c:	460c      	mov	r4, r1
 800be0e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800be10:	da03      	bge.n	800be1a <__kernel_sin+0x22>
 800be12:	f7f4 fe11 	bl	8000a38 <__aeabi_d2iz>
 800be16:	2800      	cmp	r0, #0
 800be18:	d050      	beq.n	800bebc <__kernel_sin+0xc4>
 800be1a:	4652      	mov	r2, sl
 800be1c:	4623      	mov	r3, r4
 800be1e:	4650      	mov	r0, sl
 800be20:	4621      	mov	r1, r4
 800be22:	f7f4 fb59 	bl	80004d8 <__aeabi_dmul>
 800be26:	4606      	mov	r6, r0
 800be28:	460f      	mov	r7, r1
 800be2a:	4602      	mov	r2, r0
 800be2c:	460b      	mov	r3, r1
 800be2e:	4650      	mov	r0, sl
 800be30:	4621      	mov	r1, r4
 800be32:	f7f4 fb51 	bl	80004d8 <__aeabi_dmul>
 800be36:	a33e      	add	r3, pc, #248	; (adr r3, 800bf30 <__kernel_sin+0x138>)
 800be38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be3c:	4680      	mov	r8, r0
 800be3e:	4689      	mov	r9, r1
 800be40:	4630      	mov	r0, r6
 800be42:	4639      	mov	r1, r7
 800be44:	f7f4 fb48 	bl	80004d8 <__aeabi_dmul>
 800be48:	a33b      	add	r3, pc, #236	; (adr r3, 800bf38 <__kernel_sin+0x140>)
 800be4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be4e:	f7f4 f98b 	bl	8000168 <__aeabi_dsub>
 800be52:	4632      	mov	r2, r6
 800be54:	463b      	mov	r3, r7
 800be56:	f7f4 fb3f 	bl	80004d8 <__aeabi_dmul>
 800be5a:	a339      	add	r3, pc, #228	; (adr r3, 800bf40 <__kernel_sin+0x148>)
 800be5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be60:	f7f4 f984 	bl	800016c <__adddf3>
 800be64:	4632      	mov	r2, r6
 800be66:	463b      	mov	r3, r7
 800be68:	f7f4 fb36 	bl	80004d8 <__aeabi_dmul>
 800be6c:	a336      	add	r3, pc, #216	; (adr r3, 800bf48 <__kernel_sin+0x150>)
 800be6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be72:	f7f4 f979 	bl	8000168 <__aeabi_dsub>
 800be76:	4632      	mov	r2, r6
 800be78:	463b      	mov	r3, r7
 800be7a:	f7f4 fb2d 	bl	80004d8 <__aeabi_dmul>
 800be7e:	a334      	add	r3, pc, #208	; (adr r3, 800bf50 <__kernel_sin+0x158>)
 800be80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be84:	f7f4 f972 	bl	800016c <__adddf3>
 800be88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be8c:	b9dd      	cbnz	r5, 800bec6 <__kernel_sin+0xce>
 800be8e:	4602      	mov	r2, r0
 800be90:	460b      	mov	r3, r1
 800be92:	4630      	mov	r0, r6
 800be94:	4639      	mov	r1, r7
 800be96:	f7f4 fb1f 	bl	80004d8 <__aeabi_dmul>
 800be9a:	a32f      	add	r3, pc, #188	; (adr r3, 800bf58 <__kernel_sin+0x160>)
 800be9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bea0:	f7f4 f962 	bl	8000168 <__aeabi_dsub>
 800bea4:	4642      	mov	r2, r8
 800bea6:	464b      	mov	r3, r9
 800bea8:	f7f4 fb16 	bl	80004d8 <__aeabi_dmul>
 800beac:	4602      	mov	r2, r0
 800beae:	460b      	mov	r3, r1
 800beb0:	4650      	mov	r0, sl
 800beb2:	4621      	mov	r1, r4
 800beb4:	f7f4 f95a 	bl	800016c <__adddf3>
 800beb8:	4682      	mov	sl, r0
 800beba:	460c      	mov	r4, r1
 800bebc:	4650      	mov	r0, sl
 800bebe:	4621      	mov	r1, r4
 800bec0:	b006      	add	sp, #24
 800bec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bec6:	2200      	movs	r2, #0
 800bec8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800becc:	4b24      	ldr	r3, [pc, #144]	; (800bf60 <__kernel_sin+0x168>)
 800bece:	f7f4 fb03 	bl	80004d8 <__aeabi_dmul>
 800bed2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bed6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800beda:	4640      	mov	r0, r8
 800bedc:	4649      	mov	r1, r9
 800bede:	f7f4 fafb 	bl	80004d8 <__aeabi_dmul>
 800bee2:	4602      	mov	r2, r0
 800bee4:	460b      	mov	r3, r1
 800bee6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800beea:	f7f4 f93d 	bl	8000168 <__aeabi_dsub>
 800beee:	4632      	mov	r2, r6
 800bef0:	463b      	mov	r3, r7
 800bef2:	f7f4 faf1 	bl	80004d8 <__aeabi_dmul>
 800bef6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800befa:	f7f4 f935 	bl	8000168 <__aeabi_dsub>
 800befe:	a316      	add	r3, pc, #88	; (adr r3, 800bf58 <__kernel_sin+0x160>)
 800bf00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf04:	4606      	mov	r6, r0
 800bf06:	460f      	mov	r7, r1
 800bf08:	4640      	mov	r0, r8
 800bf0a:	4649      	mov	r1, r9
 800bf0c:	f7f4 fae4 	bl	80004d8 <__aeabi_dmul>
 800bf10:	4602      	mov	r2, r0
 800bf12:	460b      	mov	r3, r1
 800bf14:	4630      	mov	r0, r6
 800bf16:	4639      	mov	r1, r7
 800bf18:	f7f4 f928 	bl	800016c <__adddf3>
 800bf1c:	4602      	mov	r2, r0
 800bf1e:	460b      	mov	r3, r1
 800bf20:	4650      	mov	r0, sl
 800bf22:	4621      	mov	r1, r4
 800bf24:	f7f4 f920 	bl	8000168 <__aeabi_dsub>
 800bf28:	e7c6      	b.n	800beb8 <__kernel_sin+0xc0>
 800bf2a:	bf00      	nop
 800bf2c:	f3af 8000 	nop.w
 800bf30:	5acfd57c 	.word	0x5acfd57c
 800bf34:	3de5d93a 	.word	0x3de5d93a
 800bf38:	8a2b9ceb 	.word	0x8a2b9ceb
 800bf3c:	3e5ae5e6 	.word	0x3e5ae5e6
 800bf40:	57b1fe7d 	.word	0x57b1fe7d
 800bf44:	3ec71de3 	.word	0x3ec71de3
 800bf48:	19c161d5 	.word	0x19c161d5
 800bf4c:	3f2a01a0 	.word	0x3f2a01a0
 800bf50:	1110f8a6 	.word	0x1110f8a6
 800bf54:	3f811111 	.word	0x3f811111
 800bf58:	55555549 	.word	0x55555549
 800bf5c:	3fc55555 	.word	0x3fc55555
 800bf60:	3fe00000 	.word	0x3fe00000

0800bf64 <fabs>:
 800bf64:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800bf68:	4770      	bx	lr
 800bf6a:	0000      	movs	r0, r0
 800bf6c:	0000      	movs	r0, r0
	...

0800bf70 <floor>:
 800bf70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf74:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800bf78:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800bf7c:	2e13      	cmp	r6, #19
 800bf7e:	4602      	mov	r2, r0
 800bf80:	460b      	mov	r3, r1
 800bf82:	4607      	mov	r7, r0
 800bf84:	460c      	mov	r4, r1
 800bf86:	4605      	mov	r5, r0
 800bf88:	dc33      	bgt.n	800bff2 <floor+0x82>
 800bf8a:	2e00      	cmp	r6, #0
 800bf8c:	da14      	bge.n	800bfb8 <floor+0x48>
 800bf8e:	a334      	add	r3, pc, #208	; (adr r3, 800c060 <floor+0xf0>)
 800bf90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf94:	f7f4 f8ea 	bl	800016c <__adddf3>
 800bf98:	2200      	movs	r2, #0
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	f7f4 fd2c 	bl	80009f8 <__aeabi_dcmpgt>
 800bfa0:	b138      	cbz	r0, 800bfb2 <floor+0x42>
 800bfa2:	2c00      	cmp	r4, #0
 800bfa4:	da58      	bge.n	800c058 <floor+0xe8>
 800bfa6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800bfaa:	431d      	orrs	r5, r3
 800bfac:	d001      	beq.n	800bfb2 <floor+0x42>
 800bfae:	2500      	movs	r5, #0
 800bfb0:	4c2d      	ldr	r4, [pc, #180]	; (800c068 <floor+0xf8>)
 800bfb2:	4623      	mov	r3, r4
 800bfb4:	462f      	mov	r7, r5
 800bfb6:	e025      	b.n	800c004 <floor+0x94>
 800bfb8:	4a2c      	ldr	r2, [pc, #176]	; (800c06c <floor+0xfc>)
 800bfba:	fa42 f806 	asr.w	r8, r2, r6
 800bfbe:	ea01 0208 	and.w	r2, r1, r8
 800bfc2:	4302      	orrs	r2, r0
 800bfc4:	d01e      	beq.n	800c004 <floor+0x94>
 800bfc6:	a326      	add	r3, pc, #152	; (adr r3, 800c060 <floor+0xf0>)
 800bfc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfcc:	f7f4 f8ce 	bl	800016c <__adddf3>
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	f7f4 fd10 	bl	80009f8 <__aeabi_dcmpgt>
 800bfd8:	2800      	cmp	r0, #0
 800bfda:	d0ea      	beq.n	800bfb2 <floor+0x42>
 800bfdc:	2c00      	cmp	r4, #0
 800bfde:	bfbe      	ittt	lt
 800bfe0:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800bfe4:	fa43 f606 	asrlt.w	r6, r3, r6
 800bfe8:	19a4      	addlt	r4, r4, r6
 800bfea:	2500      	movs	r5, #0
 800bfec:	ea24 0408 	bic.w	r4, r4, r8
 800bff0:	e7df      	b.n	800bfb2 <floor+0x42>
 800bff2:	2e33      	cmp	r6, #51	; 0x33
 800bff4:	dd0a      	ble.n	800c00c <floor+0x9c>
 800bff6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800bffa:	d103      	bne.n	800c004 <floor+0x94>
 800bffc:	f7f4 f8b6 	bl	800016c <__adddf3>
 800c000:	4607      	mov	r7, r0
 800c002:	460b      	mov	r3, r1
 800c004:	4638      	mov	r0, r7
 800c006:	4619      	mov	r1, r3
 800c008:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c00c:	f04f 32ff 	mov.w	r2, #4294967295
 800c010:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800c014:	fa22 f808 	lsr.w	r8, r2, r8
 800c018:	ea18 0f00 	tst.w	r8, r0
 800c01c:	d0f2      	beq.n	800c004 <floor+0x94>
 800c01e:	a310      	add	r3, pc, #64	; (adr r3, 800c060 <floor+0xf0>)
 800c020:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c024:	f7f4 f8a2 	bl	800016c <__adddf3>
 800c028:	2200      	movs	r2, #0
 800c02a:	2300      	movs	r3, #0
 800c02c:	f7f4 fce4 	bl	80009f8 <__aeabi_dcmpgt>
 800c030:	2800      	cmp	r0, #0
 800c032:	d0be      	beq.n	800bfb2 <floor+0x42>
 800c034:	2c00      	cmp	r4, #0
 800c036:	da02      	bge.n	800c03e <floor+0xce>
 800c038:	2e14      	cmp	r6, #20
 800c03a:	d103      	bne.n	800c044 <floor+0xd4>
 800c03c:	3401      	adds	r4, #1
 800c03e:	ea25 0508 	bic.w	r5, r5, r8
 800c042:	e7b6      	b.n	800bfb2 <floor+0x42>
 800c044:	2301      	movs	r3, #1
 800c046:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800c04a:	fa03 f606 	lsl.w	r6, r3, r6
 800c04e:	4435      	add	r5, r6
 800c050:	42bd      	cmp	r5, r7
 800c052:	bf38      	it	cc
 800c054:	18e4      	addcc	r4, r4, r3
 800c056:	e7f2      	b.n	800c03e <floor+0xce>
 800c058:	2500      	movs	r5, #0
 800c05a:	462c      	mov	r4, r5
 800c05c:	e7a9      	b.n	800bfb2 <floor+0x42>
 800c05e:	bf00      	nop
 800c060:	8800759c 	.word	0x8800759c
 800c064:	7e37e43c 	.word	0x7e37e43c
 800c068:	bff00000 	.word	0xbff00000
 800c06c:	000fffff 	.word	0x000fffff

0800c070 <scalbn>:
 800c070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c072:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800c076:	4604      	mov	r4, r0
 800c078:	460d      	mov	r5, r1
 800c07a:	4617      	mov	r7, r2
 800c07c:	460b      	mov	r3, r1
 800c07e:	b996      	cbnz	r6, 800c0a6 <scalbn+0x36>
 800c080:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c084:	4303      	orrs	r3, r0
 800c086:	d039      	beq.n	800c0fc <scalbn+0x8c>
 800c088:	4b33      	ldr	r3, [pc, #204]	; (800c158 <scalbn+0xe8>)
 800c08a:	2200      	movs	r2, #0
 800c08c:	f7f4 fa24 	bl	80004d8 <__aeabi_dmul>
 800c090:	4b32      	ldr	r3, [pc, #200]	; (800c15c <scalbn+0xec>)
 800c092:	4604      	mov	r4, r0
 800c094:	429f      	cmp	r7, r3
 800c096:	460d      	mov	r5, r1
 800c098:	da0f      	bge.n	800c0ba <scalbn+0x4a>
 800c09a:	a32b      	add	r3, pc, #172	; (adr r3, 800c148 <scalbn+0xd8>)
 800c09c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0a0:	f7f4 fa1a 	bl	80004d8 <__aeabi_dmul>
 800c0a4:	e006      	b.n	800c0b4 <scalbn+0x44>
 800c0a6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800c0aa:	4296      	cmp	r6, r2
 800c0ac:	d10a      	bne.n	800c0c4 <scalbn+0x54>
 800c0ae:	4602      	mov	r2, r0
 800c0b0:	f7f4 f85c 	bl	800016c <__adddf3>
 800c0b4:	4604      	mov	r4, r0
 800c0b6:	460d      	mov	r5, r1
 800c0b8:	e020      	b.n	800c0fc <scalbn+0x8c>
 800c0ba:	460b      	mov	r3, r1
 800c0bc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800c0c0:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800c0c4:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800c0c8:	19b9      	adds	r1, r7, r6
 800c0ca:	4291      	cmp	r1, r2
 800c0cc:	dd0e      	ble.n	800c0ec <scalbn+0x7c>
 800c0ce:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800c0d2:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800c0d6:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800c0da:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800c0de:	4820      	ldr	r0, [pc, #128]	; (800c160 <scalbn+0xf0>)
 800c0e0:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800c0e4:	a31a      	add	r3, pc, #104	; (adr r3, 800c150 <scalbn+0xe0>)
 800c0e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ea:	e7d9      	b.n	800c0a0 <scalbn+0x30>
 800c0ec:	2900      	cmp	r1, #0
 800c0ee:	dd08      	ble.n	800c102 <scalbn+0x92>
 800c0f0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c0f4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c0f8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800c0fc:	4620      	mov	r0, r4
 800c0fe:	4629      	mov	r1, r5
 800c100:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c102:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800c106:	da12      	bge.n	800c12e <scalbn+0xbe>
 800c108:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c10c:	429f      	cmp	r7, r3
 800c10e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800c112:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 800c116:	dcdc      	bgt.n	800c0d2 <scalbn+0x62>
 800c118:	a30b      	add	r3, pc, #44	; (adr r3, 800c148 <scalbn+0xd8>)
 800c11a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c11e:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800c122:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800c126:	480f      	ldr	r0, [pc, #60]	; (800c164 <scalbn+0xf4>)
 800c128:	f041 011f 	orr.w	r1, r1, #31
 800c12c:	e7b8      	b.n	800c0a0 <scalbn+0x30>
 800c12e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c132:	3136      	adds	r1, #54	; 0x36
 800c134:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c138:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800c13c:	4620      	mov	r0, r4
 800c13e:	4629      	mov	r1, r5
 800c140:	2200      	movs	r2, #0
 800c142:	4b09      	ldr	r3, [pc, #36]	; (800c168 <scalbn+0xf8>)
 800c144:	e7ac      	b.n	800c0a0 <scalbn+0x30>
 800c146:	bf00      	nop
 800c148:	c2f8f359 	.word	0xc2f8f359
 800c14c:	01a56e1f 	.word	0x01a56e1f
 800c150:	8800759c 	.word	0x8800759c
 800c154:	7e37e43c 	.word	0x7e37e43c
 800c158:	43500000 	.word	0x43500000
 800c15c:	ffff3cb0 	.word	0xffff3cb0
 800c160:	8800759c 	.word	0x8800759c
 800c164:	c2f8f359 	.word	0xc2f8f359
 800c168:	3c900000 	.word	0x3c900000

0800c16c <atanf>:
 800c16c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c170:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800c174:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 800c178:	4604      	mov	r4, r0
 800c17a:	4680      	mov	r8, r0
 800c17c:	db0e      	blt.n	800c19c <atanf+0x30>
 800c17e:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800c182:	dd04      	ble.n	800c18e <atanf+0x22>
 800c184:	4601      	mov	r1, r0
 800c186:	f7f4 fcf5 	bl	8000b74 <__addsf3>
 800c18a:	4604      	mov	r4, r0
 800c18c:	e003      	b.n	800c196 <atanf+0x2a>
 800c18e:	2800      	cmp	r0, #0
 800c190:	f300 80ce 	bgt.w	800c330 <atanf+0x1c4>
 800c194:	4c67      	ldr	r4, [pc, #412]	; (800c334 <atanf+0x1c8>)
 800c196:	4620      	mov	r0, r4
 800c198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c19c:	4b66      	ldr	r3, [pc, #408]	; (800c338 <atanf+0x1cc>)
 800c19e:	429d      	cmp	r5, r3
 800c1a0:	dc0e      	bgt.n	800c1c0 <atanf+0x54>
 800c1a2:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 800c1a6:	da08      	bge.n	800c1ba <atanf+0x4e>
 800c1a8:	4964      	ldr	r1, [pc, #400]	; (800c33c <atanf+0x1d0>)
 800c1aa:	f7f4 fce3 	bl	8000b74 <__addsf3>
 800c1ae:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c1b2:	f7f4 ffa3 	bl	80010fc <__aeabi_fcmpgt>
 800c1b6:	2800      	cmp	r0, #0
 800c1b8:	d1ed      	bne.n	800c196 <atanf+0x2a>
 800c1ba:	f04f 36ff 	mov.w	r6, #4294967295
 800c1be:	e01c      	b.n	800c1fa <atanf+0x8e>
 800c1c0:	f000 f8e0 	bl	800c384 <fabsf>
 800c1c4:	4b5e      	ldr	r3, [pc, #376]	; (800c340 <atanf+0x1d4>)
 800c1c6:	4604      	mov	r4, r0
 800c1c8:	429d      	cmp	r5, r3
 800c1ca:	dc7c      	bgt.n	800c2c6 <atanf+0x15a>
 800c1cc:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800c1d0:	429d      	cmp	r5, r3
 800c1d2:	dc67      	bgt.n	800c2a4 <atanf+0x138>
 800c1d4:	4601      	mov	r1, r0
 800c1d6:	f7f4 fccd 	bl	8000b74 <__addsf3>
 800c1da:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c1de:	f7f4 fcc7 	bl	8000b70 <__aeabi_fsub>
 800c1e2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800c1e6:	4605      	mov	r5, r0
 800c1e8:	4620      	mov	r0, r4
 800c1ea:	f7f4 fcc3 	bl	8000b74 <__addsf3>
 800c1ee:	4601      	mov	r1, r0
 800c1f0:	4628      	mov	r0, r5
 800c1f2:	f7f4 fe7b 	bl	8000eec <__aeabi_fdiv>
 800c1f6:	2600      	movs	r6, #0
 800c1f8:	4604      	mov	r4, r0
 800c1fa:	4621      	mov	r1, r4
 800c1fc:	4620      	mov	r0, r4
 800c1fe:	f7f4 fdc1 	bl	8000d84 <__aeabi_fmul>
 800c202:	4601      	mov	r1, r0
 800c204:	4607      	mov	r7, r0
 800c206:	f7f4 fdbd 	bl	8000d84 <__aeabi_fmul>
 800c20a:	4605      	mov	r5, r0
 800c20c:	494d      	ldr	r1, [pc, #308]	; (800c344 <atanf+0x1d8>)
 800c20e:	f7f4 fdb9 	bl	8000d84 <__aeabi_fmul>
 800c212:	494d      	ldr	r1, [pc, #308]	; (800c348 <atanf+0x1dc>)
 800c214:	f7f4 fcae 	bl	8000b74 <__addsf3>
 800c218:	4629      	mov	r1, r5
 800c21a:	f7f4 fdb3 	bl	8000d84 <__aeabi_fmul>
 800c21e:	494b      	ldr	r1, [pc, #300]	; (800c34c <atanf+0x1e0>)
 800c220:	f7f4 fca8 	bl	8000b74 <__addsf3>
 800c224:	4629      	mov	r1, r5
 800c226:	f7f4 fdad 	bl	8000d84 <__aeabi_fmul>
 800c22a:	4949      	ldr	r1, [pc, #292]	; (800c350 <atanf+0x1e4>)
 800c22c:	f7f4 fca2 	bl	8000b74 <__addsf3>
 800c230:	4629      	mov	r1, r5
 800c232:	f7f4 fda7 	bl	8000d84 <__aeabi_fmul>
 800c236:	4947      	ldr	r1, [pc, #284]	; (800c354 <atanf+0x1e8>)
 800c238:	f7f4 fc9c 	bl	8000b74 <__addsf3>
 800c23c:	4629      	mov	r1, r5
 800c23e:	f7f4 fda1 	bl	8000d84 <__aeabi_fmul>
 800c242:	4945      	ldr	r1, [pc, #276]	; (800c358 <atanf+0x1ec>)
 800c244:	f7f4 fc96 	bl	8000b74 <__addsf3>
 800c248:	4639      	mov	r1, r7
 800c24a:	f7f4 fd9b 	bl	8000d84 <__aeabi_fmul>
 800c24e:	4943      	ldr	r1, [pc, #268]	; (800c35c <atanf+0x1f0>)
 800c250:	4607      	mov	r7, r0
 800c252:	4628      	mov	r0, r5
 800c254:	f7f4 fd96 	bl	8000d84 <__aeabi_fmul>
 800c258:	4941      	ldr	r1, [pc, #260]	; (800c360 <atanf+0x1f4>)
 800c25a:	f7f4 fc89 	bl	8000b70 <__aeabi_fsub>
 800c25e:	4629      	mov	r1, r5
 800c260:	f7f4 fd90 	bl	8000d84 <__aeabi_fmul>
 800c264:	493f      	ldr	r1, [pc, #252]	; (800c364 <atanf+0x1f8>)
 800c266:	f7f4 fc83 	bl	8000b70 <__aeabi_fsub>
 800c26a:	4629      	mov	r1, r5
 800c26c:	f7f4 fd8a 	bl	8000d84 <__aeabi_fmul>
 800c270:	493d      	ldr	r1, [pc, #244]	; (800c368 <atanf+0x1fc>)
 800c272:	f7f4 fc7d 	bl	8000b70 <__aeabi_fsub>
 800c276:	4629      	mov	r1, r5
 800c278:	f7f4 fd84 	bl	8000d84 <__aeabi_fmul>
 800c27c:	493b      	ldr	r1, [pc, #236]	; (800c36c <atanf+0x200>)
 800c27e:	f7f4 fc77 	bl	8000b70 <__aeabi_fsub>
 800c282:	4629      	mov	r1, r5
 800c284:	f7f4 fd7e 	bl	8000d84 <__aeabi_fmul>
 800c288:	4601      	mov	r1, r0
 800c28a:	4638      	mov	r0, r7
 800c28c:	f7f4 fc72 	bl	8000b74 <__addsf3>
 800c290:	4621      	mov	r1, r4
 800c292:	f7f4 fd77 	bl	8000d84 <__aeabi_fmul>
 800c296:	1c73      	adds	r3, r6, #1
 800c298:	4601      	mov	r1, r0
 800c29a:	d133      	bne.n	800c304 <atanf+0x198>
 800c29c:	4620      	mov	r0, r4
 800c29e:	f7f4 fc67 	bl	8000b70 <__aeabi_fsub>
 800c2a2:	e772      	b.n	800c18a <atanf+0x1e>
 800c2a4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c2a8:	f7f4 fc62 	bl	8000b70 <__aeabi_fsub>
 800c2ac:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c2b0:	4605      	mov	r5, r0
 800c2b2:	4620      	mov	r0, r4
 800c2b4:	f7f4 fc5e 	bl	8000b74 <__addsf3>
 800c2b8:	4601      	mov	r1, r0
 800c2ba:	4628      	mov	r0, r5
 800c2bc:	f7f4 fe16 	bl	8000eec <__aeabi_fdiv>
 800c2c0:	2601      	movs	r6, #1
 800c2c2:	4604      	mov	r4, r0
 800c2c4:	e799      	b.n	800c1fa <atanf+0x8e>
 800c2c6:	4b2a      	ldr	r3, [pc, #168]	; (800c370 <atanf+0x204>)
 800c2c8:	429d      	cmp	r5, r3
 800c2ca:	dc14      	bgt.n	800c2f6 <atanf+0x18a>
 800c2cc:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800c2d0:	f7f4 fc4e 	bl	8000b70 <__aeabi_fsub>
 800c2d4:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800c2d8:	4605      	mov	r5, r0
 800c2da:	4620      	mov	r0, r4
 800c2dc:	f7f4 fd52 	bl	8000d84 <__aeabi_fmul>
 800c2e0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c2e4:	f7f4 fc46 	bl	8000b74 <__addsf3>
 800c2e8:	4601      	mov	r1, r0
 800c2ea:	4628      	mov	r0, r5
 800c2ec:	f7f4 fdfe 	bl	8000eec <__aeabi_fdiv>
 800c2f0:	2602      	movs	r6, #2
 800c2f2:	4604      	mov	r4, r0
 800c2f4:	e781      	b.n	800c1fa <atanf+0x8e>
 800c2f6:	4601      	mov	r1, r0
 800c2f8:	481e      	ldr	r0, [pc, #120]	; (800c374 <atanf+0x208>)
 800c2fa:	f7f4 fdf7 	bl	8000eec <__aeabi_fdiv>
 800c2fe:	2603      	movs	r6, #3
 800c300:	4604      	mov	r4, r0
 800c302:	e77a      	b.n	800c1fa <atanf+0x8e>
 800c304:	4b1c      	ldr	r3, [pc, #112]	; (800c378 <atanf+0x20c>)
 800c306:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800c30a:	f7f4 fc31 	bl	8000b70 <__aeabi_fsub>
 800c30e:	4621      	mov	r1, r4
 800c310:	f7f4 fc2e 	bl	8000b70 <__aeabi_fsub>
 800c314:	4b19      	ldr	r3, [pc, #100]	; (800c37c <atanf+0x210>)
 800c316:	4601      	mov	r1, r0
 800c318:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c31c:	f7f4 fc28 	bl	8000b70 <__aeabi_fsub>
 800c320:	f1b8 0f00 	cmp.w	r8, #0
 800c324:	4604      	mov	r4, r0
 800c326:	f6bf af36 	bge.w	800c196 <atanf+0x2a>
 800c32a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800c32e:	e72c      	b.n	800c18a <atanf+0x1e>
 800c330:	4c13      	ldr	r4, [pc, #76]	; (800c380 <atanf+0x214>)
 800c332:	e730      	b.n	800c196 <atanf+0x2a>
 800c334:	bfc90fdb 	.word	0xbfc90fdb
 800c338:	3edfffff 	.word	0x3edfffff
 800c33c:	7149f2ca 	.word	0x7149f2ca
 800c340:	3f97ffff 	.word	0x3f97ffff
 800c344:	3c8569d7 	.word	0x3c8569d7
 800c348:	3d4bda59 	.word	0x3d4bda59
 800c34c:	3d886b35 	.word	0x3d886b35
 800c350:	3dba2e6e 	.word	0x3dba2e6e
 800c354:	3e124925 	.word	0x3e124925
 800c358:	3eaaaaab 	.word	0x3eaaaaab
 800c35c:	bd15a221 	.word	0xbd15a221
 800c360:	3d6ef16b 	.word	0x3d6ef16b
 800c364:	3d9d8795 	.word	0x3d9d8795
 800c368:	3de38e38 	.word	0x3de38e38
 800c36c:	3e4ccccd 	.word	0x3e4ccccd
 800c370:	401bffff 	.word	0x401bffff
 800c374:	bf800000 	.word	0xbf800000
 800c378:	0800d180 	.word	0x0800d180
 800c37c:	0800d170 	.word	0x0800d170
 800c380:	3fc90fdb 	.word	0x3fc90fdb

0800c384 <fabsf>:
 800c384:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800c388:	4770      	bx	lr
	...

0800c38c <_init>:
 800c38c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c38e:	bf00      	nop
 800c390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c392:	bc08      	pop	{r3}
 800c394:	469e      	mov	lr, r3
 800c396:	4770      	bx	lr

0800c398 <_fini>:
 800c398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c39a:	bf00      	nop
 800c39c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c39e:	bc08      	pop	{r3}
 800c3a0:	469e      	mov	lr, r3
 800c3a2:	4770      	bx	lr
