
ili9341_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006728  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  08006838  08006838  00016838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069c8  080069c8  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080069c8  080069c8  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080069c8  080069c8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069c8  080069c8  000169c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080069cc  080069cc  000169cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080069d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a4  20000074  08006a44  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000518  08006a44  00020518  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000de85  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021e9  00000000  00000000  0002df22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce0  00000000  00000000  00030110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c20  00000000  00000000  00030df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003464  00000000  00000000  00031a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fbcc  00000000  00000000  00034e74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008808a  00000000  00000000  00044a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ccaca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004124  00000000  00000000  000ccb1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08006820 	.word	0x08006820

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08006820 	.word	0x08006820

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	; 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__aeabi_d2f>:
 800071c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000720:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000724:	bf24      	itt	cs
 8000726:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800072a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800072e:	d90d      	bls.n	800074c <__aeabi_d2f+0x30>
 8000730:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000734:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000738:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800073c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000740:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000744:	bf08      	it	eq
 8000746:	f020 0001 	biceq.w	r0, r0, #1
 800074a:	4770      	bx	lr
 800074c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000750:	d121      	bne.n	8000796 <__aeabi_d2f+0x7a>
 8000752:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000756:	bfbc      	itt	lt
 8000758:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800075c:	4770      	bxlt	lr
 800075e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000762:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000766:	f1c2 0218 	rsb	r2, r2, #24
 800076a:	f1c2 0c20 	rsb	ip, r2, #32
 800076e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000772:	fa20 f002 	lsr.w	r0, r0, r2
 8000776:	bf18      	it	ne
 8000778:	f040 0001 	orrne.w	r0, r0, #1
 800077c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000780:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000784:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000788:	ea40 000c 	orr.w	r0, r0, ip
 800078c:	fa23 f302 	lsr.w	r3, r3, r2
 8000790:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000794:	e7cc      	b.n	8000730 <__aeabi_d2f+0x14>
 8000796:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800079a:	d107      	bne.n	80007ac <__aeabi_d2f+0x90>
 800079c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80007a0:	bf1e      	ittt	ne
 80007a2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80007a6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80007aa:	4770      	bxne	lr
 80007ac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80007b0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80007b4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop

080007bc <__aeabi_frsub>:
 80007bc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80007c0:	e002      	b.n	80007c8 <__addsf3>
 80007c2:	bf00      	nop

080007c4 <__aeabi_fsub>:
 80007c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080007c8 <__addsf3>:
 80007c8:	0042      	lsls	r2, r0, #1
 80007ca:	bf1f      	itttt	ne
 80007cc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80007d0:	ea92 0f03 	teqne	r2, r3
 80007d4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80007d8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80007dc:	d06a      	beq.n	80008b4 <__addsf3+0xec>
 80007de:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80007e2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80007e6:	bfc1      	itttt	gt
 80007e8:	18d2      	addgt	r2, r2, r3
 80007ea:	4041      	eorgt	r1, r0
 80007ec:	4048      	eorgt	r0, r1
 80007ee:	4041      	eorgt	r1, r0
 80007f0:	bfb8      	it	lt
 80007f2:	425b      	neglt	r3, r3
 80007f4:	2b19      	cmp	r3, #25
 80007f6:	bf88      	it	hi
 80007f8:	4770      	bxhi	lr
 80007fa:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80007fe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000802:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000806:	bf18      	it	ne
 8000808:	4240      	negne	r0, r0
 800080a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800080e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000812:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000816:	bf18      	it	ne
 8000818:	4249      	negne	r1, r1
 800081a:	ea92 0f03 	teq	r2, r3
 800081e:	d03f      	beq.n	80008a0 <__addsf3+0xd8>
 8000820:	f1a2 0201 	sub.w	r2, r2, #1
 8000824:	fa41 fc03 	asr.w	ip, r1, r3
 8000828:	eb10 000c 	adds.w	r0, r0, ip
 800082c:	f1c3 0320 	rsb	r3, r3, #32
 8000830:	fa01 f103 	lsl.w	r1, r1, r3
 8000834:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000838:	d502      	bpl.n	8000840 <__addsf3+0x78>
 800083a:	4249      	negs	r1, r1
 800083c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000840:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000844:	d313      	bcc.n	800086e <__addsf3+0xa6>
 8000846:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800084a:	d306      	bcc.n	800085a <__addsf3+0x92>
 800084c:	0840      	lsrs	r0, r0, #1
 800084e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000852:	f102 0201 	add.w	r2, r2, #1
 8000856:	2afe      	cmp	r2, #254	; 0xfe
 8000858:	d251      	bcs.n	80008fe <__addsf3+0x136>
 800085a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800085e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000862:	bf08      	it	eq
 8000864:	f020 0001 	biceq.w	r0, r0, #1
 8000868:	ea40 0003 	orr.w	r0, r0, r3
 800086c:	4770      	bx	lr
 800086e:	0049      	lsls	r1, r1, #1
 8000870:	eb40 0000 	adc.w	r0, r0, r0
 8000874:	3a01      	subs	r2, #1
 8000876:	bf28      	it	cs
 8000878:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800087c:	d2ed      	bcs.n	800085a <__addsf3+0x92>
 800087e:	fab0 fc80 	clz	ip, r0
 8000882:	f1ac 0c08 	sub.w	ip, ip, #8
 8000886:	ebb2 020c 	subs.w	r2, r2, ip
 800088a:	fa00 f00c 	lsl.w	r0, r0, ip
 800088e:	bfaa      	itet	ge
 8000890:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000894:	4252      	neglt	r2, r2
 8000896:	4318      	orrge	r0, r3
 8000898:	bfbc      	itt	lt
 800089a:	40d0      	lsrlt	r0, r2
 800089c:	4318      	orrlt	r0, r3
 800089e:	4770      	bx	lr
 80008a0:	f092 0f00 	teq	r2, #0
 80008a4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80008a8:	bf06      	itte	eq
 80008aa:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80008ae:	3201      	addeq	r2, #1
 80008b0:	3b01      	subne	r3, #1
 80008b2:	e7b5      	b.n	8000820 <__addsf3+0x58>
 80008b4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80008b8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80008bc:	bf18      	it	ne
 80008be:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80008c2:	d021      	beq.n	8000908 <__addsf3+0x140>
 80008c4:	ea92 0f03 	teq	r2, r3
 80008c8:	d004      	beq.n	80008d4 <__addsf3+0x10c>
 80008ca:	f092 0f00 	teq	r2, #0
 80008ce:	bf08      	it	eq
 80008d0:	4608      	moveq	r0, r1
 80008d2:	4770      	bx	lr
 80008d4:	ea90 0f01 	teq	r0, r1
 80008d8:	bf1c      	itt	ne
 80008da:	2000      	movne	r0, #0
 80008dc:	4770      	bxne	lr
 80008de:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80008e2:	d104      	bne.n	80008ee <__addsf3+0x126>
 80008e4:	0040      	lsls	r0, r0, #1
 80008e6:	bf28      	it	cs
 80008e8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80008ec:	4770      	bx	lr
 80008ee:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80008f2:	bf3c      	itt	cc
 80008f4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80008f8:	4770      	bxcc	lr
 80008fa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80008fe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000902:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000906:	4770      	bx	lr
 8000908:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800090c:	bf16      	itet	ne
 800090e:	4608      	movne	r0, r1
 8000910:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000914:	4601      	movne	r1, r0
 8000916:	0242      	lsls	r2, r0, #9
 8000918:	bf06      	itte	eq
 800091a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800091e:	ea90 0f01 	teqeq	r0, r1
 8000922:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000926:	4770      	bx	lr

08000928 <__aeabi_ui2f>:
 8000928:	f04f 0300 	mov.w	r3, #0
 800092c:	e004      	b.n	8000938 <__aeabi_i2f+0x8>
 800092e:	bf00      	nop

08000930 <__aeabi_i2f>:
 8000930:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000934:	bf48      	it	mi
 8000936:	4240      	negmi	r0, r0
 8000938:	ea5f 0c00 	movs.w	ip, r0
 800093c:	bf08      	it	eq
 800093e:	4770      	bxeq	lr
 8000940:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000944:	4601      	mov	r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	e01c      	b.n	8000986 <__aeabi_l2f+0x2a>

0800094c <__aeabi_ul2f>:
 800094c:	ea50 0201 	orrs.w	r2, r0, r1
 8000950:	bf08      	it	eq
 8000952:	4770      	bxeq	lr
 8000954:	f04f 0300 	mov.w	r3, #0
 8000958:	e00a      	b.n	8000970 <__aeabi_l2f+0x14>
 800095a:	bf00      	nop

0800095c <__aeabi_l2f>:
 800095c:	ea50 0201 	orrs.w	r2, r0, r1
 8000960:	bf08      	it	eq
 8000962:	4770      	bxeq	lr
 8000964:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000968:	d502      	bpl.n	8000970 <__aeabi_l2f+0x14>
 800096a:	4240      	negs	r0, r0
 800096c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000970:	ea5f 0c01 	movs.w	ip, r1
 8000974:	bf02      	ittt	eq
 8000976:	4684      	moveq	ip, r0
 8000978:	4601      	moveq	r1, r0
 800097a:	2000      	moveq	r0, #0
 800097c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000980:	bf08      	it	eq
 8000982:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000986:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800098a:	fabc f28c 	clz	r2, ip
 800098e:	3a08      	subs	r2, #8
 8000990:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000994:	db10      	blt.n	80009b8 <__aeabi_l2f+0x5c>
 8000996:	fa01 fc02 	lsl.w	ip, r1, r2
 800099a:	4463      	add	r3, ip
 800099c:	fa00 fc02 	lsl.w	ip, r0, r2
 80009a0:	f1c2 0220 	rsb	r2, r2, #32
 80009a4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80009a8:	fa20 f202 	lsr.w	r2, r0, r2
 80009ac:	eb43 0002 	adc.w	r0, r3, r2
 80009b0:	bf08      	it	eq
 80009b2:	f020 0001 	biceq.w	r0, r0, #1
 80009b6:	4770      	bx	lr
 80009b8:	f102 0220 	add.w	r2, r2, #32
 80009bc:	fa01 fc02 	lsl.w	ip, r1, r2
 80009c0:	f1c2 0220 	rsb	r2, r2, #32
 80009c4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80009c8:	fa21 f202 	lsr.w	r2, r1, r2
 80009cc:	eb43 0002 	adc.w	r0, r3, r2
 80009d0:	bf08      	it	eq
 80009d2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80009d6:	4770      	bx	lr

080009d8 <__aeabi_fmul>:
 80009d8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009dc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009e0:	bf1e      	ittt	ne
 80009e2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009e6:	ea92 0f0c 	teqne	r2, ip
 80009ea:	ea93 0f0c 	teqne	r3, ip
 80009ee:	d06f      	beq.n	8000ad0 <__aeabi_fmul+0xf8>
 80009f0:	441a      	add	r2, r3
 80009f2:	ea80 0c01 	eor.w	ip, r0, r1
 80009f6:	0240      	lsls	r0, r0, #9
 80009f8:	bf18      	it	ne
 80009fa:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80009fe:	d01e      	beq.n	8000a3e <__aeabi_fmul+0x66>
 8000a00:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000a04:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000a08:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000a0c:	fba0 3101 	umull	r3, r1, r0, r1
 8000a10:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a14:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000a18:	bf3e      	ittt	cc
 8000a1a:	0049      	lslcc	r1, r1, #1
 8000a1c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000a20:	005b      	lslcc	r3, r3, #1
 8000a22:	ea40 0001 	orr.w	r0, r0, r1
 8000a26:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000a2a:	2afd      	cmp	r2, #253	; 0xfd
 8000a2c:	d81d      	bhi.n	8000a6a <__aeabi_fmul+0x92>
 8000a2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000a32:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a36:	bf08      	it	eq
 8000a38:	f020 0001 	biceq.w	r0, r0, #1
 8000a3c:	4770      	bx	lr
 8000a3e:	f090 0f00 	teq	r0, #0
 8000a42:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a46:	bf08      	it	eq
 8000a48:	0249      	lsleq	r1, r1, #9
 8000a4a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a4e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000a52:	3a7f      	subs	r2, #127	; 0x7f
 8000a54:	bfc2      	ittt	gt
 8000a56:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a5a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a5e:	4770      	bxgt	lr
 8000a60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a64:	f04f 0300 	mov.w	r3, #0
 8000a68:	3a01      	subs	r2, #1
 8000a6a:	dc5d      	bgt.n	8000b28 <__aeabi_fmul+0x150>
 8000a6c:	f112 0f19 	cmn.w	r2, #25
 8000a70:	bfdc      	itt	le
 8000a72:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000a76:	4770      	bxle	lr
 8000a78:	f1c2 0200 	rsb	r2, r2, #0
 8000a7c:	0041      	lsls	r1, r0, #1
 8000a7e:	fa21 f102 	lsr.w	r1, r1, r2
 8000a82:	f1c2 0220 	rsb	r2, r2, #32
 8000a86:	fa00 fc02 	lsl.w	ip, r0, r2
 8000a8a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000a8e:	f140 0000 	adc.w	r0, r0, #0
 8000a92:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000a96:	bf08      	it	eq
 8000a98:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000a9c:	4770      	bx	lr
 8000a9e:	f092 0f00 	teq	r2, #0
 8000aa2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000aa6:	bf02      	ittt	eq
 8000aa8:	0040      	lsleq	r0, r0, #1
 8000aaa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000aae:	3a01      	subeq	r2, #1
 8000ab0:	d0f9      	beq.n	8000aa6 <__aeabi_fmul+0xce>
 8000ab2:	ea40 000c 	orr.w	r0, r0, ip
 8000ab6:	f093 0f00 	teq	r3, #0
 8000aba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000abe:	bf02      	ittt	eq
 8000ac0:	0049      	lsleq	r1, r1, #1
 8000ac2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ac6:	3b01      	subeq	r3, #1
 8000ac8:	d0f9      	beq.n	8000abe <__aeabi_fmul+0xe6>
 8000aca:	ea41 010c 	orr.w	r1, r1, ip
 8000ace:	e78f      	b.n	80009f0 <__aeabi_fmul+0x18>
 8000ad0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ad4:	ea92 0f0c 	teq	r2, ip
 8000ad8:	bf18      	it	ne
 8000ada:	ea93 0f0c 	teqne	r3, ip
 8000ade:	d00a      	beq.n	8000af6 <__aeabi_fmul+0x11e>
 8000ae0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ae4:	bf18      	it	ne
 8000ae6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000aea:	d1d8      	bne.n	8000a9e <__aeabi_fmul+0xc6>
 8000aec:	ea80 0001 	eor.w	r0, r0, r1
 8000af0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000af4:	4770      	bx	lr
 8000af6:	f090 0f00 	teq	r0, #0
 8000afa:	bf17      	itett	ne
 8000afc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000b00:	4608      	moveq	r0, r1
 8000b02:	f091 0f00 	teqne	r1, #0
 8000b06:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000b0a:	d014      	beq.n	8000b36 <__aeabi_fmul+0x15e>
 8000b0c:	ea92 0f0c 	teq	r2, ip
 8000b10:	d101      	bne.n	8000b16 <__aeabi_fmul+0x13e>
 8000b12:	0242      	lsls	r2, r0, #9
 8000b14:	d10f      	bne.n	8000b36 <__aeabi_fmul+0x15e>
 8000b16:	ea93 0f0c 	teq	r3, ip
 8000b1a:	d103      	bne.n	8000b24 <__aeabi_fmul+0x14c>
 8000b1c:	024b      	lsls	r3, r1, #9
 8000b1e:	bf18      	it	ne
 8000b20:	4608      	movne	r0, r1
 8000b22:	d108      	bne.n	8000b36 <__aeabi_fmul+0x15e>
 8000b24:	ea80 0001 	eor.w	r0, r0, r1
 8000b28:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b34:	4770      	bx	lr
 8000b36:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bx	lr

08000b40 <__aeabi_fdiv>:
 8000b40:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b44:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b48:	bf1e      	ittt	ne
 8000b4a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b4e:	ea92 0f0c 	teqne	r2, ip
 8000b52:	ea93 0f0c 	teqne	r3, ip
 8000b56:	d069      	beq.n	8000c2c <__aeabi_fdiv+0xec>
 8000b58:	eba2 0203 	sub.w	r2, r2, r3
 8000b5c:	ea80 0c01 	eor.w	ip, r0, r1
 8000b60:	0249      	lsls	r1, r1, #9
 8000b62:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000b66:	d037      	beq.n	8000bd8 <__aeabi_fdiv+0x98>
 8000b68:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000b6c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000b70:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000b74:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000b78:	428b      	cmp	r3, r1
 8000b7a:	bf38      	it	cc
 8000b7c:	005b      	lslcc	r3, r3, #1
 8000b7e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000b82:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000b86:	428b      	cmp	r3, r1
 8000b88:	bf24      	itt	cs
 8000b8a:	1a5b      	subcs	r3, r3, r1
 8000b8c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b90:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000b94:	bf24      	itt	cs
 8000b96:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000b9a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b9e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ba2:	bf24      	itt	cs
 8000ba4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ba8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000bac:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000bb0:	bf24      	itt	cs
 8000bb2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000bb6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000bba:	011b      	lsls	r3, r3, #4
 8000bbc:	bf18      	it	ne
 8000bbe:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000bc2:	d1e0      	bne.n	8000b86 <__aeabi_fdiv+0x46>
 8000bc4:	2afd      	cmp	r2, #253	; 0xfd
 8000bc6:	f63f af50 	bhi.w	8000a6a <__aeabi_fmul+0x92>
 8000bca:	428b      	cmp	r3, r1
 8000bcc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000bdc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000be0:	327f      	adds	r2, #127	; 0x7f
 8000be2:	bfc2      	ittt	gt
 8000be4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000be8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bec:	4770      	bxgt	lr
 8000bee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf2:	f04f 0300 	mov.w	r3, #0
 8000bf6:	3a01      	subs	r2, #1
 8000bf8:	e737      	b.n	8000a6a <__aeabi_fmul+0x92>
 8000bfa:	f092 0f00 	teq	r2, #0
 8000bfe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c02:	bf02      	ittt	eq
 8000c04:	0040      	lsleq	r0, r0, #1
 8000c06:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c0a:	3a01      	subeq	r2, #1
 8000c0c:	d0f9      	beq.n	8000c02 <__aeabi_fdiv+0xc2>
 8000c0e:	ea40 000c 	orr.w	r0, r0, ip
 8000c12:	f093 0f00 	teq	r3, #0
 8000c16:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c1a:	bf02      	ittt	eq
 8000c1c:	0049      	lsleq	r1, r1, #1
 8000c1e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c22:	3b01      	subeq	r3, #1
 8000c24:	d0f9      	beq.n	8000c1a <__aeabi_fdiv+0xda>
 8000c26:	ea41 010c 	orr.w	r1, r1, ip
 8000c2a:	e795      	b.n	8000b58 <__aeabi_fdiv+0x18>
 8000c2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c30:	ea92 0f0c 	teq	r2, ip
 8000c34:	d108      	bne.n	8000c48 <__aeabi_fdiv+0x108>
 8000c36:	0242      	lsls	r2, r0, #9
 8000c38:	f47f af7d 	bne.w	8000b36 <__aeabi_fmul+0x15e>
 8000c3c:	ea93 0f0c 	teq	r3, ip
 8000c40:	f47f af70 	bne.w	8000b24 <__aeabi_fmul+0x14c>
 8000c44:	4608      	mov	r0, r1
 8000c46:	e776      	b.n	8000b36 <__aeabi_fmul+0x15e>
 8000c48:	ea93 0f0c 	teq	r3, ip
 8000c4c:	d104      	bne.n	8000c58 <__aeabi_fdiv+0x118>
 8000c4e:	024b      	lsls	r3, r1, #9
 8000c50:	f43f af4c 	beq.w	8000aec <__aeabi_fmul+0x114>
 8000c54:	4608      	mov	r0, r1
 8000c56:	e76e      	b.n	8000b36 <__aeabi_fmul+0x15e>
 8000c58:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c5c:	bf18      	it	ne
 8000c5e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c62:	d1ca      	bne.n	8000bfa <__aeabi_fdiv+0xba>
 8000c64:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000c68:	f47f af5c 	bne.w	8000b24 <__aeabi_fmul+0x14c>
 8000c6c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000c70:	f47f af3c 	bne.w	8000aec <__aeabi_fmul+0x114>
 8000c74:	e75f      	b.n	8000b36 <__aeabi_fmul+0x15e>
 8000c76:	bf00      	nop

08000c78 <__aeabi_f2iz>:
 8000c78:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c7c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000c80:	d30f      	bcc.n	8000ca2 <__aeabi_f2iz+0x2a>
 8000c82:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000c86:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000c8a:	d90d      	bls.n	8000ca8 <__aeabi_f2iz+0x30>
 8000c8c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000c90:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c94:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c98:	fa23 f002 	lsr.w	r0, r3, r2
 8000c9c:	bf18      	it	ne
 8000c9e:	4240      	negne	r0, r0
 8000ca0:	4770      	bx	lr
 8000ca2:	f04f 0000 	mov.w	r0, #0
 8000ca6:	4770      	bx	lr
 8000ca8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000cac:	d101      	bne.n	8000cb2 <__aeabi_f2iz+0x3a>
 8000cae:	0242      	lsls	r2, r0, #9
 8000cb0:	d105      	bne.n	8000cbe <__aeabi_f2iz+0x46>
 8000cb2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000cb6:	bf08      	it	eq
 8000cb8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000cbc:	4770      	bx	lr
 8000cbe:	f04f 0000 	mov.w	r0, #0
 8000cc2:	4770      	bx	lr

08000cc4 <HAL_SPI_TxCpltCallback>:

volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  // Deselect when Tx Complete
  if(hspi == HSPI_INSTANCE)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	4a06      	ldr	r2, [pc, #24]	; (8000ce8 <HAL_SPI_TxCpltCallback+0x24>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d104      	bne.n	8000cde <HAL_SPI_TxCpltCallback+0x1a>
  {
	  HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	2101      	movs	r1, #1
 8000cd8:	4804      	ldr	r0, [pc, #16]	; (8000cec <HAL_SPI_TxCpltCallback+0x28>)
 8000cda:	f002 fac3 	bl	8003264 <HAL_GPIO_WritePin>
  }
}
 8000cde:	bf00      	nop
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	200000f0 	.word	0x200000f0
 8000cec:	40010c00 	.word	0x40010c00

08000cf0 <ILI9341_SPI_Tx>:


static void ILI9341_SPI_Tx(uint8_t data)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8000cfa:	bf00      	nop
 8000cfc:	4b08      	ldr	r3, [pc, #32]	; (8000d20 <ILI9341_SPI_Tx+0x30>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	689b      	ldr	r3, [r3, #8]
 8000d02:	f003 0302 	and.w	r3, r3, #2
 8000d06:	2b02      	cmp	r3, #2
 8000d08:	d1f8      	bne.n	8000cfc <ILI9341_SPI_Tx+0xc>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, &data, 1);
 8000d0a:	1dfb      	adds	r3, r7, #7
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4803      	ldr	r0, [pc, #12]	; (8000d20 <ILI9341_SPI_Tx+0x30>)
 8000d12:	f004 f8cb 	bl	8004eac <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
}
 8000d16:	bf00      	nop
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	200000f0 	.word	0x200000f0

08000d24 <ILI9341_SPI_TxBuffer>:

static void ILI9341_SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	460b      	mov	r3, r1
 8000d2e:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8000d30:	bf00      	nop
 8000d32:	4b08      	ldr	r3, [pc, #32]	; (8000d54 <ILI9341_SPI_TxBuffer+0x30>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	689b      	ldr	r3, [r3, #8]
 8000d38:	f003 0302 	and.w	r3, r3, #2
 8000d3c:	2b02      	cmp	r3, #2
 8000d3e:	d1f8      	bne.n	8000d32 <ILI9341_SPI_TxBuffer+0xe>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, buffer, len);
 8000d40:	887b      	ldrh	r3, [r7, #2]
 8000d42:	461a      	mov	r2, r3
 8000d44:	6879      	ldr	r1, [r7, #4]
 8000d46:	4803      	ldr	r0, [pc, #12]	; (8000d54 <ILI9341_SPI_TxBuffer+0x30>)
 8000d48:	f004 f8b0 	bl	8004eac <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, buffer, len, 10);
}
 8000d4c:	bf00      	nop
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	200000f0 	.word	0x200000f0

08000d58 <ILI9341_WriteCommand>:

void ILI9341_WriteCommand(uint8_t cmd)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	//command
 8000d62:	2200      	movs	r2, #0
 8000d64:	2140      	movs	r1, #64	; 0x40
 8000d66:	4808      	ldr	r0, [pc, #32]	; (8000d88 <ILI9341_WriteCommand+0x30>)
 8000d68:	f002 fa7c 	bl	8003264 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	2101      	movs	r1, #1
 8000d70:	4806      	ldr	r0, [pc, #24]	; (8000d8c <ILI9341_WriteCommand+0x34>)
 8000d72:	f002 fa77 	bl	8003264 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(cmd);
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f7ff ffb9 	bl	8000cf0 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8000d7e:	bf00      	nop
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40010800 	.word	0x40010800
 8000d8c:	40010c00 	.word	0x40010c00

08000d90 <ILI9341_WriteData>:

void ILI9341_WriteData(uint8_t data)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	2140      	movs	r1, #64	; 0x40
 8000d9e:	4808      	ldr	r0, [pc, #32]	; (8000dc0 <ILI9341_WriteData+0x30>)
 8000da0:	f002 fa60 	bl	8003264 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8000da4:	2200      	movs	r2, #0
 8000da6:	2101      	movs	r1, #1
 8000da8:	4806      	ldr	r0, [pc, #24]	; (8000dc4 <ILI9341_WriteData+0x34>)
 8000daa:	f002 fa5b 	bl	8003264 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(data);
 8000dae:	79fb      	ldrb	r3, [r7, #7]
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff ff9d 	bl	8000cf0 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8000db6:	bf00      	nop
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40010800 	.word	0x40010800
 8000dc4:	40010c00 	.word	0x40010c00

08000dc8 <ILI9341_WriteBuffer>:

void ILI9341_WriteBuffer(uint8_t *buffer, uint16_t len)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	460b      	mov	r3, r1
 8000dd2:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	2140      	movs	r1, #64	; 0x40
 8000dd8:	4808      	ldr	r0, [pc, #32]	; (8000dfc <ILI9341_WriteBuffer+0x34>)
 8000dda:	f002 fa43 	bl	8003264 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8000dde:	2200      	movs	r2, #0
 8000de0:	2101      	movs	r1, #1
 8000de2:	4807      	ldr	r0, [pc, #28]	; (8000e00 <ILI9341_WriteBuffer+0x38>)
 8000de4:	f002 fa3e 	bl	8003264 <HAL_GPIO_WritePin>
	ILI9341_SPI_TxBuffer(buffer, len);
 8000de8:	887b      	ldrh	r3, [r7, #2]
 8000dea:	4619      	mov	r1, r3
 8000dec:	6878      	ldr	r0, [r7, #4]
 8000dee:	f7ff ff99 	bl	8000d24 <ILI9341_SPI_TxBuffer>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8000df2:	bf00      	nop
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40010800 	.word	0x40010800
 8000e00:	40010c00 	.word	0x40010c00

08000e04 <ILI9341_SetAddress>:

void ILI9341_SetAddress(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8000e04:	b590      	push	{r4, r7, lr}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4604      	mov	r4, r0
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	4611      	mov	r1, r2
 8000e10:	461a      	mov	r2, r3
 8000e12:	4623      	mov	r3, r4
 8000e14:	80fb      	strh	r3, [r7, #6]
 8000e16:	4603      	mov	r3, r0
 8000e18:	80bb      	strh	r3, [r7, #4]
 8000e1a:	460b      	mov	r3, r1
 8000e1c:	807b      	strh	r3, [r7, #2]
 8000e1e:	4613      	mov	r3, r2
 8000e20:	803b      	strh	r3, [r7, #0]
	uint8_t buffer[4];
	buffer[0] = x1 >> 8;
 8000e22:	88fb      	ldrh	r3, [r7, #6]
 8000e24:	0a1b      	lsrs	r3, r3, #8
 8000e26:	b29b      	uxth	r3, r3
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	733b      	strb	r3, [r7, #12]
	buffer[1] = x1;
 8000e2c:	88fb      	ldrh	r3, [r7, #6]
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	737b      	strb	r3, [r7, #13]
	buffer[2] = x2 >> 8;
 8000e32:	887b      	ldrh	r3, [r7, #2]
 8000e34:	0a1b      	lsrs	r3, r3, #8
 8000e36:	b29b      	uxth	r3, r3
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	73bb      	strb	r3, [r7, #14]
	buffer[3] = x2;
 8000e3c:	887b      	ldrh	r3, [r7, #2]
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2A);
 8000e42:	202a      	movs	r0, #42	; 0x2a
 8000e44:	f7ff ff88 	bl	8000d58 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 8000e48:	f107 030c 	add.w	r3, r7, #12
 8000e4c:	2104      	movs	r1, #4
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff ffba 	bl	8000dc8 <ILI9341_WriteBuffer>

	buffer[0] = y1 >> 8;
 8000e54:	88bb      	ldrh	r3, [r7, #4]
 8000e56:	0a1b      	lsrs	r3, r3, #8
 8000e58:	b29b      	uxth	r3, r3
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	733b      	strb	r3, [r7, #12]
	buffer[1] = y1;
 8000e5e:	88bb      	ldrh	r3, [r7, #4]
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	737b      	strb	r3, [r7, #13]
	buffer[2] = y2 >> 8;
 8000e64:	883b      	ldrh	r3, [r7, #0]
 8000e66:	0a1b      	lsrs	r3, r3, #8
 8000e68:	b29b      	uxth	r3, r3
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	73bb      	strb	r3, [r7, #14]
	buffer[3] = y2;
 8000e6e:	883b      	ldrh	r3, [r7, #0]
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2B);
 8000e74:	202b      	movs	r0, #43	; 0x2b
 8000e76:	f7ff ff6f 	bl	8000d58 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 8000e7a:	f107 030c 	add.w	r3, r7, #12
 8000e7e:	2104      	movs	r1, #4
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff ffa1 	bl	8000dc8 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);
 8000e86:	202c      	movs	r0, #44	; 0x2c
 8000e88:	f7ff ff66 	bl	8000d58 <ILI9341_WriteCommand>
}
 8000e8c:	bf00      	nop
 8000e8e:	3714      	adds	r7, #20
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd90      	pop	{r4, r7, pc}

08000e94 <ILI9341_Reset>:

void ILI9341_Reset(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);	//Disable
 8000e98:	2200      	movs	r2, #0
 8000e9a:	2110      	movs	r1, #16
 8000e9c:	480c      	ldr	r0, [pc, #48]	; (8000ed0 <ILI9341_Reset+0x3c>)
 8000e9e:	f002 f9e1 	bl	8003264 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000ea2:	200a      	movs	r0, #10
 8000ea4:	f001 fd3a 	bl	800291c <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);		//Select
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2101      	movs	r1, #1
 8000eac:	4809      	ldr	r0, [pc, #36]	; (8000ed4 <ILI9341_Reset+0x40>)
 8000eae:	f002 f9d9 	bl	8003264 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000eb2:	200a      	movs	r0, #10
 8000eb4:	f001 fd32 	bl	800291c <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 8000eb8:	2201      	movs	r2, #1
 8000eba:	2110      	movs	r1, #16
 8000ebc:	4804      	ldr	r0, [pc, #16]	; (8000ed0 <ILI9341_Reset+0x3c>)
 8000ebe:	f002 f9d1 	bl	8003264 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET); 		//Deselect
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	2101      	movs	r1, #1
 8000ec6:	4803      	ldr	r0, [pc, #12]	; (8000ed4 <ILI9341_Reset+0x40>)
 8000ec8:	f002 f9cc 	bl	8003264 <HAL_GPIO_WritePin>
}
 8000ecc:	bf00      	nop
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	40010800 	.word	0x40010800
 8000ed4:	40010c00 	.word	0x40010c00

08000ed8 <ILI9341_Enable>:

void ILI9341_Enable(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 8000edc:	2201      	movs	r2, #1
 8000ede:	2110      	movs	r1, #16
 8000ee0:	4802      	ldr	r0, [pc, #8]	; (8000eec <ILI9341_Enable+0x14>)
 8000ee2:	f002 f9bf 	bl	8003264 <HAL_GPIO_WritePin>
}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40010800 	.word	0x40010800

08000ef0 <ILI9341_Init>:

void ILI9341_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
	ILI9341_Enable();
 8000ef4:	f7ff fff0 	bl	8000ed8 <ILI9341_Enable>
	ILI9341_Reset();
 8000ef8:	f7ff ffcc 	bl	8000e94 <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_WriteCommand(0x01);
 8000efc:	2001      	movs	r0, #1
 8000efe:	f7ff ff2b 	bl	8000d58 <ILI9341_WriteCommand>
	HAL_Delay(10);
 8000f02:	200a      	movs	r0, #10
 8000f04:	f001 fd0a 	bl	800291c <HAL_Delay>

	//POWER CONTROL A
	ILI9341_WriteCommand(0xCB);
 8000f08:	20cb      	movs	r0, #203	; 0xcb
 8000f0a:	f7ff ff25 	bl	8000d58 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x39);
 8000f0e:	2039      	movs	r0, #57	; 0x39
 8000f10:	f7ff ff3e 	bl	8000d90 <ILI9341_WriteData>
	ILI9341_WriteData(0x2C);
 8000f14:	202c      	movs	r0, #44	; 0x2c
 8000f16:	f7ff ff3b 	bl	8000d90 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000f1a:	2000      	movs	r0, #0
 8000f1c:	f7ff ff38 	bl	8000d90 <ILI9341_WriteData>
	ILI9341_WriteData(0x34);
 8000f20:	2034      	movs	r0, #52	; 0x34
 8000f22:	f7ff ff35 	bl	8000d90 <ILI9341_WriteData>
	ILI9341_WriteData(0x02);
 8000f26:	2002      	movs	r0, #2
 8000f28:	f7ff ff32 	bl	8000d90 <ILI9341_WriteData>

	//POWER CONTROL B
	ILI9341_WriteCommand(0xCF);
 8000f2c:	20cf      	movs	r0, #207	; 0xcf
 8000f2e:	f7ff ff13 	bl	8000d58 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000f32:	2000      	movs	r0, #0
 8000f34:	f7ff ff2c 	bl	8000d90 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8000f38:	20c1      	movs	r0, #193	; 0xc1
 8000f3a:	f7ff ff29 	bl	8000d90 <ILI9341_WriteData>
	ILI9341_WriteData(0x30);
 8000f3e:	2030      	movs	r0, #48	; 0x30
 8000f40:	f7ff ff26 	bl	8000d90 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL A
	ILI9341_WriteCommand(0xE8);
 8000f44:	20e8      	movs	r0, #232	; 0xe8
 8000f46:	f7ff ff07 	bl	8000d58 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x85);
 8000f4a:	2085      	movs	r0, #133	; 0x85
 8000f4c:	f7ff ff20 	bl	8000d90 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000f50:	2000      	movs	r0, #0
 8000f52:	f7ff ff1d 	bl	8000d90 <ILI9341_WriteData>
	ILI9341_WriteData(0x78);
 8000f56:	2078      	movs	r0, #120	; 0x78
 8000f58:	f7ff ff1a 	bl	8000d90 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL B
	ILI9341_WriteCommand(0xEA);
 8000f5c:	20ea      	movs	r0, #234	; 0xea
 8000f5e:	f7ff fefb 	bl	8000d58 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000f62:	2000      	movs	r0, #0
 8000f64:	f7ff ff14 	bl	8000d90 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000f68:	2000      	movs	r0, #0
 8000f6a:	f7ff ff11 	bl	8000d90 <ILI9341_WriteData>

	//POWER ON SEQUENCE CONTROL
	ILI9341_WriteCommand(0xED);
 8000f6e:	20ed      	movs	r0, #237	; 0xed
 8000f70:	f7ff fef2 	bl	8000d58 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x64);
 8000f74:	2064      	movs	r0, #100	; 0x64
 8000f76:	f7ff ff0b 	bl	8000d90 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000f7a:	2003      	movs	r0, #3
 8000f7c:	f7ff ff08 	bl	8000d90 <ILI9341_WriteData>
	ILI9341_WriteData(0x12);
 8000f80:	2012      	movs	r0, #18
 8000f82:	f7ff ff05 	bl	8000d90 <ILI9341_WriteData>
	ILI9341_WriteData(0x81);
 8000f86:	2081      	movs	r0, #129	; 0x81
 8000f88:	f7ff ff02 	bl	8000d90 <ILI9341_WriteData>

	//PUMP RATIO CONTROL
	ILI9341_WriteCommand(0xF7);
 8000f8c:	20f7      	movs	r0, #247	; 0xf7
 8000f8e:	f7ff fee3 	bl	8000d58 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x20);
 8000f92:	2020      	movs	r0, #32
 8000f94:	f7ff fefc 	bl	8000d90 <ILI9341_WriteData>

	//POWER CONTROL,VRH[5:0]
	ILI9341_WriteCommand(0xC0);
 8000f98:	20c0      	movs	r0, #192	; 0xc0
 8000f9a:	f7ff fedd 	bl	8000d58 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x23);
 8000f9e:	2023      	movs	r0, #35	; 0x23
 8000fa0:	f7ff fef6 	bl	8000d90 <ILI9341_WriteData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_WriteCommand(0xC1);
 8000fa4:	20c1      	movs	r0, #193	; 0xc1
 8000fa6:	f7ff fed7 	bl	8000d58 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x10);
 8000faa:	2010      	movs	r0, #16
 8000fac:	f7ff fef0 	bl	8000d90 <ILI9341_WriteData>

	//VCM CONTROL
	ILI9341_WriteCommand(0xC5);
 8000fb0:	20c5      	movs	r0, #197	; 0xc5
 8000fb2:	f7ff fed1 	bl	8000d58 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x3E);
 8000fb6:	203e      	movs	r0, #62	; 0x3e
 8000fb8:	f7ff feea 	bl	8000d90 <ILI9341_WriteData>
	ILI9341_WriteData(0x28);
 8000fbc:	2028      	movs	r0, #40	; 0x28
 8000fbe:	f7ff fee7 	bl	8000d90 <ILI9341_WriteData>

	//VCM CONTROL 2
	ILI9341_WriteCommand(0xC7);
 8000fc2:	20c7      	movs	r0, #199	; 0xc7
 8000fc4:	f7ff fec8 	bl	8000d58 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x86);
 8000fc8:	2086      	movs	r0, #134	; 0x86
 8000fca:	f7ff fee1 	bl	8000d90 <ILI9341_WriteData>

	//MEMORY ACCESS CONTROL
	ILI9341_WriteCommand(0x36);
 8000fce:	2036      	movs	r0, #54	; 0x36
 8000fd0:	f7ff fec2 	bl	8000d58 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x48);
 8000fd4:	2048      	movs	r0, #72	; 0x48
 8000fd6:	f7ff fedb 	bl	8000d90 <ILI9341_WriteData>

	//PIXEL FORMAT
	ILI9341_WriteCommand(0x3A);
 8000fda:	203a      	movs	r0, #58	; 0x3a
 8000fdc:	f7ff febc 	bl	8000d58 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x55);
 8000fe0:	2055      	movs	r0, #85	; 0x55
 8000fe2:	f7ff fed5 	bl	8000d90 <ILI9341_WriteData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_WriteCommand(0xB1);
 8000fe6:	20b1      	movs	r0, #177	; 0xb1
 8000fe8:	f7ff feb6 	bl	8000d58 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000fec:	2000      	movs	r0, #0
 8000fee:	f7ff fecf 	bl	8000d90 <ILI9341_WriteData>
	ILI9341_WriteData(0x18);
 8000ff2:	2018      	movs	r0, #24
 8000ff4:	f7ff fecc 	bl	8000d90 <ILI9341_WriteData>

	//DISPLAY FUNCTION CONTROL
	ILI9341_WriteCommand(0xB6);
 8000ff8:	20b6      	movs	r0, #182	; 0xb6
 8000ffa:	f7ff fead 	bl	8000d58 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x08);
 8000ffe:	2008      	movs	r0, #8
 8001000:	f7ff fec6 	bl	8000d90 <ILI9341_WriteData>
	ILI9341_WriteData(0x82);
 8001004:	2082      	movs	r0, #130	; 0x82
 8001006:	f7ff fec3 	bl	8000d90 <ILI9341_WriteData>
	ILI9341_WriteData(0x27);
 800100a:	2027      	movs	r0, #39	; 0x27
 800100c:	f7ff fec0 	bl	8000d90 <ILI9341_WriteData>

	//3GAMMA FUNCTION DISABLE
	ILI9341_WriteCommand(0xF2);
 8001010:	20f2      	movs	r0, #242	; 0xf2
 8001012:	f7ff fea1 	bl	8000d58 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8001016:	2000      	movs	r0, #0
 8001018:	f7ff feba 	bl	8000d90 <ILI9341_WriteData>

	//GAMMA CURVE SELECTED
	ILI9341_WriteCommand(0x26);
 800101c:	2026      	movs	r0, #38	; 0x26
 800101e:	f7ff fe9b 	bl	8000d58 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x01);
 8001022:	2001      	movs	r0, #1
 8001024:	f7ff feb4 	bl	8000d90 <ILI9341_WriteData>

	//POSITIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE0);
 8001028:	20e0      	movs	r0, #224	; 0xe0
 800102a:	f7ff fe95 	bl	8000d58 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x0F);
 800102e:	200f      	movs	r0, #15
 8001030:	f7ff feae 	bl	8000d90 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8001034:	2031      	movs	r0, #49	; 0x31
 8001036:	f7ff feab 	bl	8000d90 <ILI9341_WriteData>
	ILI9341_WriteData(0x2B);
 800103a:	202b      	movs	r0, #43	; 0x2b
 800103c:	f7ff fea8 	bl	8000d90 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8001040:	200c      	movs	r0, #12
 8001042:	f7ff fea5 	bl	8000d90 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8001046:	200e      	movs	r0, #14
 8001048:	f7ff fea2 	bl	8000d90 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 800104c:	2008      	movs	r0, #8
 800104e:	f7ff fe9f 	bl	8000d90 <ILI9341_WriteData>
	ILI9341_WriteData(0x4E);
 8001052:	204e      	movs	r0, #78	; 0x4e
 8001054:	f7ff fe9c 	bl	8000d90 <ILI9341_WriteData>
	ILI9341_WriteData(0xF1);
 8001058:	20f1      	movs	r0, #241	; 0xf1
 800105a:	f7ff fe99 	bl	8000d90 <ILI9341_WriteData>
	ILI9341_WriteData(0x37);
 800105e:	2037      	movs	r0, #55	; 0x37
 8001060:	f7ff fe96 	bl	8000d90 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8001064:	2007      	movs	r0, #7
 8001066:	f7ff fe93 	bl	8000d90 <ILI9341_WriteData>
	ILI9341_WriteData(0x10);
 800106a:	2010      	movs	r0, #16
 800106c:	f7ff fe90 	bl	8000d90 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8001070:	2003      	movs	r0, #3
 8001072:	f7ff fe8d 	bl	8000d90 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8001076:	200e      	movs	r0, #14
 8001078:	f7ff fe8a 	bl	8000d90 <ILI9341_WriteData>
	ILI9341_WriteData(0x09);
 800107c:	2009      	movs	r0, #9
 800107e:	f7ff fe87 	bl	8000d90 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8001082:	2000      	movs	r0, #0
 8001084:	f7ff fe84 	bl	8000d90 <ILI9341_WriteData>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE1);
 8001088:	20e1      	movs	r0, #225	; 0xe1
 800108a:	f7ff fe65 	bl	8000d58 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 800108e:	2000      	movs	r0, #0
 8001090:	f7ff fe7e 	bl	8000d90 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8001094:	200e      	movs	r0, #14
 8001096:	f7ff fe7b 	bl	8000d90 <ILI9341_WriteData>
	ILI9341_WriteData(0x14);
 800109a:	2014      	movs	r0, #20
 800109c:	f7ff fe78 	bl	8000d90 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 80010a0:	2003      	movs	r0, #3
 80010a2:	f7ff fe75 	bl	8000d90 <ILI9341_WriteData>
	ILI9341_WriteData(0x11);
 80010a6:	2011      	movs	r0, #17
 80010a8:	f7ff fe72 	bl	8000d90 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 80010ac:	2007      	movs	r0, #7
 80010ae:	f7ff fe6f 	bl	8000d90 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 80010b2:	2031      	movs	r0, #49	; 0x31
 80010b4:	f7ff fe6c 	bl	8000d90 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 80010b8:	20c1      	movs	r0, #193	; 0xc1
 80010ba:	f7ff fe69 	bl	8000d90 <ILI9341_WriteData>
	ILI9341_WriteData(0x48);
 80010be:	2048      	movs	r0, #72	; 0x48
 80010c0:	f7ff fe66 	bl	8000d90 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 80010c4:	2008      	movs	r0, #8
 80010c6:	f7ff fe63 	bl	8000d90 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 80010ca:	200f      	movs	r0, #15
 80010cc:	f7ff fe60 	bl	8000d90 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 80010d0:	200c      	movs	r0, #12
 80010d2:	f7ff fe5d 	bl	8000d90 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 80010d6:	2031      	movs	r0, #49	; 0x31
 80010d8:	f7ff fe5a 	bl	8000d90 <ILI9341_WriteData>
	ILI9341_WriteData(0x36);
 80010dc:	2036      	movs	r0, #54	; 0x36
 80010de:	f7ff fe57 	bl	8000d90 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 80010e2:	200f      	movs	r0, #15
 80010e4:	f7ff fe54 	bl	8000d90 <ILI9341_WriteData>

	//EXIT SLEEP
	ILI9341_WriteCommand(0x11);
 80010e8:	2011      	movs	r0, #17
 80010ea:	f7ff fe35 	bl	8000d58 <ILI9341_WriteCommand>
	HAL_Delay(100);
 80010ee:	2064      	movs	r0, #100	; 0x64
 80010f0:	f001 fc14 	bl	800291c <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_WriteCommand(0x29);
 80010f4:	2029      	movs	r0, #41	; 0x29
 80010f6:	f7ff fe2f 	bl	8000d58 <ILI9341_WriteCommand>

	//STARTING ROTATION
	ILI9341_SetRotation(SCREEN_VERTICAL_1);
 80010fa:	2000      	movs	r0, #0
 80010fc:	f000 f802 	bl	8001104 <ILI9341_SetRotation>
}
 8001100:	bf00      	nop
 8001102:	bd80      	pop	{r7, pc}

08001104 <ILI9341_SetRotation>:

void ILI9341_SetRotation(uint8_t rotation)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	71fb      	strb	r3, [r7, #7]
	ILI9341_WriteCommand(0x36);
 800110e:	2036      	movs	r0, #54	; 0x36
 8001110:	f7ff fe22 	bl	8000d58 <ILI9341_WriteCommand>
	HAL_Delay(1);
 8001114:	2001      	movs	r0, #1
 8001116:	f001 fc01 	bl	800291c <HAL_Delay>

	switch(rotation)
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	2b03      	cmp	r3, #3
 800111e:	d837      	bhi.n	8001190 <ILI9341_SetRotation+0x8c>
 8001120:	a201      	add	r2, pc, #4	; (adr r2, 8001128 <ILI9341_SetRotation+0x24>)
 8001122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001126:	bf00      	nop
 8001128:	08001139 	.word	0x08001139
 800112c:	0800114f 	.word	0x0800114f
 8001130:	08001165 	.word	0x08001165
 8001134:	0800117b 	.word	0x0800117b
	{
	case SCREEN_VERTICAL_1:
		ILI9341_WriteData(0x40|0x08);
 8001138:	2048      	movs	r0, #72	; 0x48
 800113a:	f7ff fe29 	bl	8000d90 <ILI9341_WriteData>
		LCD_WIDTH = 240;
 800113e:	4b17      	ldr	r3, [pc, #92]	; (800119c <ILI9341_SetRotation+0x98>)
 8001140:	22f0      	movs	r2, #240	; 0xf0
 8001142:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8001144:	4b16      	ldr	r3, [pc, #88]	; (80011a0 <ILI9341_SetRotation+0x9c>)
 8001146:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800114a:	801a      	strh	r2, [r3, #0]
		break;
 800114c:	e021      	b.n	8001192 <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_1:
		ILI9341_WriteData(0x20|0x08);
 800114e:	2028      	movs	r0, #40	; 0x28
 8001150:	f7ff fe1e 	bl	8000d90 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 8001154:	4b11      	ldr	r3, [pc, #68]	; (800119c <ILI9341_SetRotation+0x98>)
 8001156:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800115a:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 800115c:	4b10      	ldr	r3, [pc, #64]	; (80011a0 <ILI9341_SetRotation+0x9c>)
 800115e:	22f0      	movs	r2, #240	; 0xf0
 8001160:	801a      	strh	r2, [r3, #0]
		break;
 8001162:	e016      	b.n	8001192 <ILI9341_SetRotation+0x8e>
	case SCREEN_VERTICAL_2:
		ILI9341_WriteData(0x80|0x08);
 8001164:	2088      	movs	r0, #136	; 0x88
 8001166:	f7ff fe13 	bl	8000d90 <ILI9341_WriteData>
		LCD_WIDTH  = 240;
 800116a:	4b0c      	ldr	r3, [pc, #48]	; (800119c <ILI9341_SetRotation+0x98>)
 800116c:	22f0      	movs	r2, #240	; 0xf0
 800116e:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8001170:	4b0b      	ldr	r3, [pc, #44]	; (80011a0 <ILI9341_SetRotation+0x9c>)
 8001172:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001176:	801a      	strh	r2, [r3, #0]
		break;
 8001178:	e00b      	b.n	8001192 <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_2:
		ILI9341_WriteData(0x40|0x80|0x20|0x08);
 800117a:	20e8      	movs	r0, #232	; 0xe8
 800117c:	f7ff fe08 	bl	8000d90 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 8001180:	4b06      	ldr	r3, [pc, #24]	; (800119c <ILI9341_SetRotation+0x98>)
 8001182:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001186:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8001188:	4b05      	ldr	r3, [pc, #20]	; (80011a0 <ILI9341_SetRotation+0x9c>)
 800118a:	22f0      	movs	r2, #240	; 0xf0
 800118c:	801a      	strh	r2, [r3, #0]
		break;
 800118e:	e000      	b.n	8001192 <ILI9341_SetRotation+0x8e>
	default:
		break;
 8001190:	bf00      	nop
	}
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20000002 	.word	0x20000002
 80011a0:	20000000 	.word	0x20000000

080011a4 <ILI9341_DrawColorBurst>:
	uint8_t buffer[2] = {color>>8, color};
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
}

void ILI9341_DrawColorBurst(uint16_t color, uint32_t size)
{
 80011a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80011a8:	b08d      	sub	sp, #52	; 0x34
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	4603      	mov	r3, r0
 80011ae:	6039      	str	r1, [r7, #0]
 80011b0:	80fb      	strh	r3, [r7, #6]
 80011b2:	466b      	mov	r3, sp
 80011b4:	461e      	mov	r6, r3
	uint32_t BufferSize = 0;
 80011b6:	2300      	movs	r3, #0
 80011b8:	627b      	str	r3, [r7, #36]	; 0x24

	if((size*2) < BURST_MAX_SIZE)
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80011c2:	d202      	bcs.n	80011ca <ILI9341_DrawColorBurst+0x26>
	{
		BufferSize = size;
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	627b      	str	r3, [r7, #36]	; 0x24
 80011c8:	e002      	b.n	80011d0 <ILI9341_DrawColorBurst+0x2c>
	}
	else
	{
		BufferSize = BURST_MAX_SIZE;
 80011ca:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80011ce:	627b      	str	r3, [r7, #36]	; 0x24
	}

	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 80011d0:	2201      	movs	r2, #1
 80011d2:	2140      	movs	r1, #64	; 0x40
 80011d4:	483e      	ldr	r0, [pc, #248]	; (80012d0 <ILI9341_DrawColorBurst+0x12c>)
 80011d6:	f002 f845 	bl	8003264 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80011da:	2200      	movs	r2, #0
 80011dc:	2101      	movs	r1, #1
 80011de:	483d      	ldr	r0, [pc, #244]	; (80012d4 <ILI9341_DrawColorBurst+0x130>)
 80011e0:	f002 f840 	bl	8003264 <HAL_GPIO_WritePin>

	uint8_t chifted = color>>8;
 80011e4:	88fb      	ldrh	r3, [r7, #6]
 80011e6:	0a1b      	lsrs	r3, r3, #8
 80011e8:	b29b      	uxth	r3, r3
 80011ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t BurstBuffer[BufferSize];
 80011ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80011f0:	460b      	mov	r3, r1
 80011f2:	3b01      	subs	r3, #1
 80011f4:	61fb      	str	r3, [r7, #28]
 80011f6:	2300      	movs	r3, #0
 80011f8:	4688      	mov	r8, r1
 80011fa:	4699      	mov	r9, r3
 80011fc:	f04f 0200 	mov.w	r2, #0
 8001200:	f04f 0300 	mov.w	r3, #0
 8001204:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001208:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800120c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001210:	2300      	movs	r3, #0
 8001212:	460c      	mov	r4, r1
 8001214:	461d      	mov	r5, r3
 8001216:	f04f 0200 	mov.w	r2, #0
 800121a:	f04f 0300 	mov.w	r3, #0
 800121e:	00eb      	lsls	r3, r5, #3
 8001220:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001224:	00e2      	lsls	r2, r4, #3
 8001226:	1dcb      	adds	r3, r1, #7
 8001228:	08db      	lsrs	r3, r3, #3
 800122a:	00db      	lsls	r3, r3, #3
 800122c:	ebad 0d03 	sub.w	sp, sp, r3
 8001230:	466b      	mov	r3, sp
 8001232:	3300      	adds	r3, #0
 8001234:	61bb      	str	r3, [r7, #24]

	for(uint32_t j = 0; j < BufferSize; j+=2)
 8001236:	2300      	movs	r3, #0
 8001238:	62bb      	str	r3, [r7, #40]	; 0x28
 800123a:	e00e      	b.n	800125a <ILI9341_DrawColorBurst+0xb6>
	{
		BurstBuffer[j] = chifted;
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001240:	4413      	add	r3, r2
 8001242:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001246:	701a      	strb	r2, [r3, #0]
		BurstBuffer[j+1] = color;
 8001248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800124a:	3301      	adds	r3, #1
 800124c:	88fa      	ldrh	r2, [r7, #6]
 800124e:	b2d1      	uxtb	r1, r2
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < BufferSize; j+=2)
 8001254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001256:	3302      	adds	r3, #2
 8001258:	62bb      	str	r3, [r7, #40]	; 0x28
 800125a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800125c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800125e:	429a      	cmp	r2, r3
 8001260:	d3ec      	bcc.n	800123c <ILI9341_DrawColorBurst+0x98>
	}

	uint32_t SendingSize = size * 2;
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	617b      	str	r3, [r7, #20]
	uint32_t SendingInBlock = SendingSize / BufferSize;
 8001268:	697a      	ldr	r2, [r7, #20]
 800126a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001270:	613b      	str	r3, [r7, #16]
	uint32_t RemainderFromBlock = SendingSize % BufferSize;
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001276:	fbb3 f2f2 	udiv	r2, r3, r2
 800127a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800127c:	fb01 f202 	mul.w	r2, r1, r2
 8001280:	1a9b      	subs	r3, r3, r2
 8001282:	60fb      	str	r3, [r7, #12]

	if(SendingInBlock != 0)
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d010      	beq.n	80012ac <ILI9341_DrawColorBurst+0x108>
	{
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 800128a:	2300      	movs	r3, #0
 800128c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800128e:	e009      	b.n	80012a4 <ILI9341_DrawColorBurst+0x100>
		{
			HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, BufferSize, 10);
 8001290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001292:	b29a      	uxth	r2, r3
 8001294:	230a      	movs	r3, #10
 8001296:	69b9      	ldr	r1, [r7, #24]
 8001298:	480f      	ldr	r0, [pc, #60]	; (80012d8 <ILI9341_DrawColorBurst+0x134>)
 800129a:	f003 fcc3 	bl	8004c24 <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 800129e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012a0:	3301      	adds	r3, #1
 80012a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d3f1      	bcc.n	8001290 <ILI9341_DrawColorBurst+0xec>
		}
	}

	HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, RemainderFromBlock, 10);
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	b29a      	uxth	r2, r3
 80012b0:	230a      	movs	r3, #10
 80012b2:	69b9      	ldr	r1, [r7, #24]
 80012b4:	4808      	ldr	r0, [pc, #32]	; (80012d8 <ILI9341_DrawColorBurst+0x134>)
 80012b6:	f003 fcb5 	bl	8004c24 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80012ba:	2201      	movs	r2, #1
 80012bc:	2101      	movs	r1, #1
 80012be:	4805      	ldr	r0, [pc, #20]	; (80012d4 <ILI9341_DrawColorBurst+0x130>)
 80012c0:	f001 ffd0 	bl	8003264 <HAL_GPIO_WritePin>
 80012c4:	46b5      	mov	sp, r6
}
 80012c6:	bf00      	nop
 80012c8:	3734      	adds	r7, #52	; 0x34
 80012ca:	46bd      	mov	sp, r7
 80012cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80012d0:	40010800 	.word	0x40010800
 80012d4:	40010c00 	.word	0x40010c00
 80012d8:	200000f0 	.word	0x200000f0

080012dc <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	80fb      	strh	r3, [r7, #6]
	ILI9341_SetAddress(0, 0, LCD_WIDTH, LCD_HEIGHT);
 80012e6:	4b0e      	ldr	r3, [pc, #56]	; (8001320 <ILI9341_FillScreen+0x44>)
 80012e8:	881b      	ldrh	r3, [r3, #0]
 80012ea:	b29a      	uxth	r2, r3
 80012ec:	4b0d      	ldr	r3, [pc, #52]	; (8001324 <ILI9341_FillScreen+0x48>)
 80012ee:	881b      	ldrh	r3, [r3, #0]
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	2100      	movs	r1, #0
 80012f4:	2000      	movs	r0, #0
 80012f6:	f7ff fd85 	bl	8000e04 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, LCD_WIDTH*LCD_HEIGHT);
 80012fa:	4b09      	ldr	r3, [pc, #36]	; (8001320 <ILI9341_FillScreen+0x44>)
 80012fc:	881b      	ldrh	r3, [r3, #0]
 80012fe:	b29b      	uxth	r3, r3
 8001300:	461a      	mov	r2, r3
 8001302:	4b08      	ldr	r3, [pc, #32]	; (8001324 <ILI9341_FillScreen+0x48>)
 8001304:	881b      	ldrh	r3, [r3, #0]
 8001306:	b29b      	uxth	r3, r3
 8001308:	fb02 f303 	mul.w	r3, r2, r3
 800130c:	461a      	mov	r2, r3
 800130e:	88fb      	ldrh	r3, [r7, #6]
 8001310:	4611      	mov	r1, r2
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff ff46 	bl	80011a4 <ILI9341_DrawColorBurst>
}
 8001318:	bf00      	nop
 800131a:	3708      	adds	r7, #8
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	20000002 	.word	0x20000002
 8001324:	20000000 	.word	0x20000000

08001328 <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x,uint16_t y,uint16_t color)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b086      	sub	sp, #24
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	80fb      	strh	r3, [r7, #6]
 8001332:	460b      	mov	r3, r1
 8001334:	80bb      	strh	r3, [r7, #4]
 8001336:	4613      	mov	r3, r2
 8001338:	807b      	strh	r3, [r7, #2]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 800133a:	4b2c      	ldr	r3, [pc, #176]	; (80013ec <ILI9341_DrawPixel+0xc4>)
 800133c:	881b      	ldrh	r3, [r3, #0]
 800133e:	b29b      	uxth	r3, r3
 8001340:	88fa      	ldrh	r2, [r7, #6]
 8001342:	429a      	cmp	r2, r3
 8001344:	d24d      	bcs.n	80013e2 <ILI9341_DrawPixel+0xba>
 8001346:	4b2a      	ldr	r3, [pc, #168]	; (80013f0 <ILI9341_DrawPixel+0xc8>)
 8001348:	881b      	ldrh	r3, [r3, #0]
 800134a:	b29b      	uxth	r3, r3
 800134c:	88ba      	ldrh	r2, [r7, #4]
 800134e:	429a      	cmp	r2, r3
 8001350:	d247      	bcs.n	80013e2 <ILI9341_DrawPixel+0xba>

	uint8_t bufferX[4] = {x>>8, x, (x+1)>>8, (x+1)};
 8001352:	88fb      	ldrh	r3, [r7, #6]
 8001354:	0a1b      	lsrs	r3, r3, #8
 8001356:	b29b      	uxth	r3, r3
 8001358:	b2db      	uxtb	r3, r3
 800135a:	753b      	strb	r3, [r7, #20]
 800135c:	88fb      	ldrh	r3, [r7, #6]
 800135e:	b2db      	uxtb	r3, r3
 8001360:	757b      	strb	r3, [r7, #21]
 8001362:	88fb      	ldrh	r3, [r7, #6]
 8001364:	3301      	adds	r3, #1
 8001366:	121b      	asrs	r3, r3, #8
 8001368:	b2db      	uxtb	r3, r3
 800136a:	75bb      	strb	r3, [r7, #22]
 800136c:	88fb      	ldrh	r3, [r7, #6]
 800136e:	b2db      	uxtb	r3, r3
 8001370:	3301      	adds	r3, #1
 8001372:	b2db      	uxtb	r3, r3
 8001374:	75fb      	strb	r3, [r7, #23]
	uint8_t bufferY[4] = {y>>8, y, (y+1)>>8, (y+1)};
 8001376:	88bb      	ldrh	r3, [r7, #4]
 8001378:	0a1b      	lsrs	r3, r3, #8
 800137a:	b29b      	uxth	r3, r3
 800137c:	b2db      	uxtb	r3, r3
 800137e:	743b      	strb	r3, [r7, #16]
 8001380:	88bb      	ldrh	r3, [r7, #4]
 8001382:	b2db      	uxtb	r3, r3
 8001384:	747b      	strb	r3, [r7, #17]
 8001386:	88bb      	ldrh	r3, [r7, #4]
 8001388:	3301      	adds	r3, #1
 800138a:	121b      	asrs	r3, r3, #8
 800138c:	b2db      	uxtb	r3, r3
 800138e:	74bb      	strb	r3, [r7, #18]
 8001390:	88bb      	ldrh	r3, [r7, #4]
 8001392:	b2db      	uxtb	r3, r3
 8001394:	3301      	adds	r3, #1
 8001396:	b2db      	uxtb	r3, r3
 8001398:	74fb      	strb	r3, [r7, #19]
	uint8_t bufferC[2] = {color>>8, color};
 800139a:	887b      	ldrh	r3, [r7, #2]
 800139c:	0a1b      	lsrs	r3, r3, #8
 800139e:	b29b      	uxth	r3, r3
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	733b      	strb	r3, [r7, #12]
 80013a4:	887b      	ldrh	r3, [r7, #2]
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	737b      	strb	r3, [r7, #13]

	ILI9341_WriteCommand(0x2A);						//ADDRESS
 80013aa:	202a      	movs	r0, #42	; 0x2a
 80013ac:	f7ff fcd4 	bl	8000d58 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferX, sizeof(bufferX));	//XDATA
 80013b0:	f107 0314 	add.w	r3, r7, #20
 80013b4:	2104      	movs	r1, #4
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff fd06 	bl	8000dc8 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2B);						//ADDRESS
 80013bc:	202b      	movs	r0, #43	; 0x2b
 80013be:	f7ff fccb 	bl	8000d58 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferY, sizeof(bufferY));	//YDATA
 80013c2:	f107 0310 	add.w	r3, r7, #16
 80013c6:	2104      	movs	r1, #4
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff fcfd 	bl	8000dc8 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);						//ADDRESS
 80013ce:	202c      	movs	r0, #44	; 0x2c
 80013d0:	f7ff fcc2 	bl	8000d58 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferC, sizeof(bufferC));	//COLOR
 80013d4:	f107 030c 	add.w	r3, r7, #12
 80013d8:	2102      	movs	r1, #2
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff fcf4 	bl	8000dc8 <ILI9341_WriteBuffer>
 80013e0:	e000      	b.n	80013e4 <ILI9341_DrawPixel+0xbc>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 80013e2:	bf00      	nop
}
 80013e4:	3718      	adds	r7, #24
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20000002 	.word	0x20000002
 80013f0:	20000000 	.word	0x20000000

080013f4 <singleByteWrite>:
extern I2C_HandleTypeDef hi2c1;
uint8_t data[10];
extern float readings[3];

void singleByteWrite(uint16_t address,uint16_t  data1)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af02      	add	r7, sp, #8
 80013fa:	4603      	mov	r3, r0
 80013fc:	460a      	mov	r2, r1
 80013fe:	80fb      	strh	r3, [r7, #6]
 8001400:	4613      	mov	r3, r2
 8001402:	80bb      	strh	r3, [r7, #4]
	data[0]=address;
 8001404:	88fb      	ldrh	r3, [r7, #6]
 8001406:	b2da      	uxtb	r2, r3
 8001408:	4b08      	ldr	r3, [pc, #32]	; (800142c <singleByteWrite+0x38>)
 800140a:	701a      	strb	r2, [r3, #0]
	data[1]=data1;
 800140c:	88bb      	ldrh	r3, [r7, #4]
 800140e:	b2da      	uxtb	r2, r3
 8001410:	4b06      	ldr	r3, [pc, #24]	; (800142c <singleByteWrite+0x38>)
 8001412:	705a      	strb	r2, [r3, #1]

	HAL_I2C_Master_Transmit(&hi2c1,ACCEL_ADDRESS<<1,data,2,100);
 8001414:	2364      	movs	r3, #100	; 0x64
 8001416:	9300      	str	r3, [sp, #0]
 8001418:	2302      	movs	r3, #2
 800141a:	4a04      	ldr	r2, [pc, #16]	; (800142c <singleByteWrite+0x38>)
 800141c:	21a6      	movs	r1, #166	; 0xa6
 800141e:	4804      	ldr	r0, [pc, #16]	; (8001430 <singleByteWrite+0x3c>)
 8001420:	f002 f87c 	bl	800351c <HAL_I2C_Master_Transmit>
}
 8001424:	bf00      	nop
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	20000090 	.word	0x20000090
 8001430:	2000009c 	.word	0x2000009c

08001434 <multiDataRead>:


void multiDataRead(int16_t* data_X, int16_t* data_Y, int16_t* data_Z)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b086      	sub	sp, #24
 8001438:	af02      	add	r7, sp, #8
 800143a:	60f8      	str	r0, [r7, #12]
 800143c:	60b9      	str	r1, [r7, #8]
 800143e:	607a      	str	r2, [r7, #4]
	data[0]=DATAX0;
 8001440:	4b1b      	ldr	r3, [pc, #108]	; (80014b0 <multiDataRead+0x7c>)
 8001442:	2232      	movs	r2, #50	; 0x32
 8001444:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, ACCEL_ADDRESS<<1, data, 1, 50);
 8001446:	2332      	movs	r3, #50	; 0x32
 8001448:	9300      	str	r3, [sp, #0]
 800144a:	2301      	movs	r3, #1
 800144c:	4a18      	ldr	r2, [pc, #96]	; (80014b0 <multiDataRead+0x7c>)
 800144e:	21a6      	movs	r1, #166	; 0xa6
 8001450:	4818      	ldr	r0, [pc, #96]	; (80014b4 <multiDataRead+0x80>)
 8001452:	f002 f863 	bl	800351c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, ACCEL_ADDRESS<<1, data, 6, 50);
 8001456:	2332      	movs	r3, #50	; 0x32
 8001458:	9300      	str	r3, [sp, #0]
 800145a:	2306      	movs	r3, #6
 800145c:	4a14      	ldr	r2, [pc, #80]	; (80014b0 <multiDataRead+0x7c>)
 800145e:	21a6      	movs	r1, #166	; 0xa6
 8001460:	4814      	ldr	r0, [pc, #80]	; (80014b4 <multiDataRead+0x80>)
 8001462:	f002 f959 	bl	8003718 <HAL_I2C_Master_Receive>

	*data_X =(data[0] | (data[1] << 8));
 8001466:	4b12      	ldr	r3, [pc, #72]	; (80014b0 <multiDataRead+0x7c>)
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	b21a      	sxth	r2, r3
 800146c:	4b10      	ldr	r3, [pc, #64]	; (80014b0 <multiDataRead+0x7c>)
 800146e:	785b      	ldrb	r3, [r3, #1]
 8001470:	021b      	lsls	r3, r3, #8
 8001472:	b21b      	sxth	r3, r3
 8001474:	4313      	orrs	r3, r2
 8001476:	b21a      	sxth	r2, r3
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	801a      	strh	r2, [r3, #0]
	*data_Y =(data[2] | (data[3] << 8));
 800147c:	4b0c      	ldr	r3, [pc, #48]	; (80014b0 <multiDataRead+0x7c>)
 800147e:	789b      	ldrb	r3, [r3, #2]
 8001480:	b21a      	sxth	r2, r3
 8001482:	4b0b      	ldr	r3, [pc, #44]	; (80014b0 <multiDataRead+0x7c>)
 8001484:	78db      	ldrb	r3, [r3, #3]
 8001486:	021b      	lsls	r3, r3, #8
 8001488:	b21b      	sxth	r3, r3
 800148a:	4313      	orrs	r3, r2
 800148c:	b21a      	sxth	r2, r3
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	801a      	strh	r2, [r3, #0]
	*data_Z =(data[4] | (data[5] << 8));
 8001492:	4b07      	ldr	r3, [pc, #28]	; (80014b0 <multiDataRead+0x7c>)
 8001494:	791b      	ldrb	r3, [r3, #4]
 8001496:	b21a      	sxth	r2, r3
 8001498:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <multiDataRead+0x7c>)
 800149a:	795b      	ldrb	r3, [r3, #5]
 800149c:	021b      	lsls	r3, r3, #8
 800149e:	b21b      	sxth	r3, r3
 80014a0:	4313      	orrs	r3, r2
 80014a2:	b21a      	sxth	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	801a      	strh	r2, [r3, #0]
}
 80014a8:	bf00      	nop
 80014aa:	3710      	adds	r7, #16
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20000090 	.word	0x20000090
 80014b4:	2000009c 	.word	0x2000009c

080014b8 <singleByteRead>:


uint16_t singleByteRead(uint16_t address)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af02      	add	r7, sp, #8
 80014be:	4603      	mov	r3, r0
 80014c0:	80fb      	strh	r3, [r7, #6]
	data[0] = address;
 80014c2:	88fb      	ldrh	r3, [r7, #6]
 80014c4:	b2da      	uxtb	r2, r3
 80014c6:	4b0c      	ldr	r3, [pc, #48]	; (80014f8 <singleByteRead+0x40>)
 80014c8:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, ACCEL_ADDRESS<<1, data, 1, 50);
 80014ca:	2332      	movs	r3, #50	; 0x32
 80014cc:	9300      	str	r3, [sp, #0]
 80014ce:	2301      	movs	r3, #1
 80014d0:	4a09      	ldr	r2, [pc, #36]	; (80014f8 <singleByteRead+0x40>)
 80014d2:	21a6      	movs	r1, #166	; 0xa6
 80014d4:	4809      	ldr	r0, [pc, #36]	; (80014fc <singleByteRead+0x44>)
 80014d6:	f002 f821 	bl	800351c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, ACCEL_ADDRESS<<1, data, 1, 50);
 80014da:	2332      	movs	r3, #50	; 0x32
 80014dc:	9300      	str	r3, [sp, #0]
 80014de:	2301      	movs	r3, #1
 80014e0:	4a05      	ldr	r2, [pc, #20]	; (80014f8 <singleByteRead+0x40>)
 80014e2:	21a6      	movs	r1, #166	; 0xa6
 80014e4:	4805      	ldr	r0, [pc, #20]	; (80014fc <singleByteRead+0x44>)
 80014e6:	f002 f917 	bl	8003718 <HAL_I2C_Master_Receive>
	return data[0];
 80014ea:	4b03      	ldr	r3, [pc, #12]	; (80014f8 <singleByteRead+0x40>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	b29b      	uxth	r3, r3
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	20000090 	.word	0x20000090
 80014fc:	2000009c 	.word	0x2000009c

08001500 <ADXL345Init>:

int8_t ADXL345Init()
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
	char id = 0x00;
 8001506:	2300      	movs	r3, #0
 8001508:	71fb      	strb	r3, [r7, #7]
		// Go into standby mode to configure the device.
		singleByteWrite(0x2D, 0x00);
 800150a:	2100      	movs	r1, #0
 800150c:	202d      	movs	r0, #45	; 0x2d
 800150e:	f7ff ff71 	bl	80013f4 <singleByteWrite>
		id = singleByteRead(0x00);
 8001512:	2000      	movs	r0, #0
 8001514:	f7ff ffd0 	bl	80014b8 <singleByteRead>
 8001518:	4603      	mov	r3, r0
 800151a:	71fb      	strb	r3, [r7, #7]
		if (id != 0xE5)
 800151c:	79fb      	ldrb	r3, [r7, #7]
 800151e:	2be5      	cmp	r3, #229	; 0xe5
 8001520:	d004      	beq.n	800152c <ADXL345Init+0x2c>
		{
			printf("ERROR\n");
 8001522:	480e      	ldr	r0, [pc, #56]	; (800155c <ADXL345Init+0x5c>)
 8001524:	f004 f936 	bl	8005794 <puts>
			return ACCEL_ERROR;
 8001528:	2302      	movs	r3, #2
 800152a:	e013      	b.n	8001554 <ADXL345Init+0x54>
		}
		else
		{
			printf("ENABLE\n");
 800152c:	480c      	ldr	r0, [pc, #48]	; (8001560 <ADXL345Init+0x60>)
 800152e:	f004 f931 	bl	8005794 <puts>
			singleByteWrite(DATA_FORMAT, 0x08);       // Full resolution, +/-2g, 4mg/LSB, right justified
 8001532:	2108      	movs	r1, #8
 8001534:	2031      	movs	r0, #49	; 0x31
 8001536:	f7ff ff5d 	bl	80013f4 <singleByteWrite>
			singleByteWrite(BW_RATE, 0x0A);           // Set 100 Hz data rate
 800153a:	210a      	movs	r1, #10
 800153c:	202c      	movs	r0, #44	; 0x2c
 800153e:	f7ff ff59 	bl	80013f4 <singleByteWrite>
			singleByteWrite(FIFO_CTL, 0x80);          // stream mode
 8001542:	2180      	movs	r1, #128	; 0x80
 8001544:	2038      	movs	r0, #56	; 0x38
 8001546:	f7ff ff55 	bl	80013f4 <singleByteWrite>
			singleByteWrite(POWER_CTL, 0x08);         // POWER_CTL reg: measurement mode
 800154a:	2108      	movs	r1, #8
 800154c:	202d      	movs	r0, #45	; 0x2d
 800154e:	f7ff ff51 	bl	80013f4 <singleByteWrite>
			return 0x00;
 8001552:	2300      	movs	r3, #0
		}
}
 8001554:	4618      	mov	r0, r3
 8001556:	3708      	adds	r7, #8
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	08006838 	.word	0x08006838
 8001560:	08006840 	.word	0x08006840

08001564 <accelAverage>:

void accelAverage()
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
	int16_t i, sx, sy, sz, xx, yy, zz;

		// sum
		sx = sy = sz = 0;
 800156a:	2300      	movs	r3, #0
 800156c:	813b      	strh	r3, [r7, #8]
 800156e:	893b      	ldrh	r3, [r7, #8]
 8001570:	817b      	strh	r3, [r7, #10]
 8001572:	897b      	ldrh	r3, [r7, #10]
 8001574:	81bb      	strh	r3, [r7, #12]
		// average accelerometer reading over last 16 samples
		for (i=0; i<16; i++)
 8001576:	2300      	movs	r3, #0
 8001578:	81fb      	strh	r3, [r7, #14]
 800157a:	e020      	b.n	80015be <accelAverage+0x5a>
		{
			multiDataRead(&xx, &yy, &zz);
 800157c:	1cba      	adds	r2, r7, #2
 800157e:	1d39      	adds	r1, r7, #4
 8001580:	1dbb      	adds	r3, r7, #6
 8001582:	4618      	mov	r0, r3
 8001584:	f7ff ff56 	bl	8001434 <multiDataRead>
			sx += xx;
 8001588:	89ba      	ldrh	r2, [r7, #12]
 800158a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800158e:	b29b      	uxth	r3, r3
 8001590:	4413      	add	r3, r2
 8001592:	b29b      	uxth	r3, r3
 8001594:	81bb      	strh	r3, [r7, #12]
			sy += yy;
 8001596:	897a      	ldrh	r2, [r7, #10]
 8001598:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800159c:	b29b      	uxth	r3, r3
 800159e:	4413      	add	r3, r2
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	817b      	strh	r3, [r7, #10]
			sz += zz;
 80015a4:	893a      	ldrh	r2, [r7, #8]
 80015a6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	4413      	add	r3, r2
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	813b      	strh	r3, [r7, #8]
		for (i=0; i<16; i++)
 80015b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015b6:	b29b      	uxth	r3, r3
 80015b8:	3301      	adds	r3, #1
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	81fb      	strh	r3, [r7, #14]
 80015be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015c2:	2b0f      	cmp	r3, #15
 80015c4:	ddda      	ble.n	800157c <accelAverage+0x18>
		}
		// average
		readings[0] = sx >> 4;
 80015c6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80015ca:	111b      	asrs	r3, r3, #4
 80015cc:	b21b      	sxth	r3, r3
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff f9ae 	bl	8000930 <__aeabi_i2f>
 80015d4:	4603      	mov	r3, r0
 80015d6:	4a0d      	ldr	r2, [pc, #52]	; (800160c <accelAverage+0xa8>)
 80015d8:	6013      	str	r3, [r2, #0]
		readings[1] = sy >> 4;
 80015da:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80015de:	111b      	asrs	r3, r3, #4
 80015e0:	b21b      	sxth	r3, r3
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff f9a4 	bl	8000930 <__aeabi_i2f>
 80015e8:	4603      	mov	r3, r0
 80015ea:	4a08      	ldr	r2, [pc, #32]	; (800160c <accelAverage+0xa8>)
 80015ec:	6053      	str	r3, [r2, #4]
		readings[2] = sz >> 4;
 80015ee:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80015f2:	111b      	asrs	r3, r3, #4
 80015f4:	b21b      	sxth	r3, r3
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff f99a 	bl	8000930 <__aeabi_i2f>
 80015fc:	4603      	mov	r3, r0
 80015fe:	4a03      	ldr	r2, [pc, #12]	; (800160c <accelAverage+0xa8>)
 8001600:	6093      	str	r3, [r2, #8]
}
 8001602:	bf00      	nop
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	200004f4 	.word	0x200004f4

08001610 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
	(void) HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, 100);
 8001618:	1d39      	adds	r1, r7, #4
 800161a:	2364      	movs	r3, #100	; 0x64
 800161c:	2201      	movs	r2, #1
 800161e:	4804      	ldr	r0, [pc, #16]	; (8001630 <__io_putchar+0x20>)
 8001620:	f003 fe80 	bl	8005324 <HAL_UART_Transmit>
	return ch;
 8001624:	687b      	ldr	r3, [r7, #4]
}
 8001626:	4618      	mov	r0, r3
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	2000018c 	.word	0x2000018c
 8001634:	00000000 	.word	0x00000000

08001638 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001640:	f001 f90a 	bl	8002858 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001644:	f000 fd70 	bl	8002128 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001648:	f000 fe60 	bl	800230c <MX_GPIO_Init>
  MX_DMA_Init();
 800164c:	f000 fe40 	bl	80022d0 <MX_DMA_Init>
  MX_SPI1_Init();
 8001650:	f000 fdde 	bl	8002210 <MX_SPI1_Init>
  MX_I2C1_Init();
 8001654:	f000 fdae 	bl	80021b4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001658:	f000 fe10 	bl	800227c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

	ILI9341_Init();
 800165c:	f7ff fc48 	bl	8000ef0 <ILI9341_Init>

	// Simple Text writing (Text, Font, X, Y, Color, BackColor)
	// Available Fonts are FONT1, FONT2, FONT3 and FONT4
	//ILI9341_FillScreen(WHITE);
	ILI9341_SetRotation(SCREEN_HORIZONTAL_1);
 8001660:	2001      	movs	r0, #1
 8001662:	f7ff fd4f 	bl	8001104 <ILI9341_SetRotation>
	//ILI9341_DrawText("HELLO WORLD", FONT4, 90, 110, BLACK, WHITE);
	//HAL_Delay(1000);

	//Writing numbers
	ILI9341_FillScreen(BLACK);
 8001666:	2000      	movs	r0, #0
 8001668:	f7ff fe38 	bl	80012dc <ILI9341_FillScreen>
	 */
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	ADXL345Init();
 800166c:	f7ff ff48 	bl	8001500 <ADXL345Init>
	accelAverage();
 8001670:	f7ff ff78 	bl	8001564 <accelAverage>

	for (int i = 0; i < 25; i++) {
 8001674:	2300      	movs	r3, #0
 8001676:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 800167a:	e026      	b.n	80016ca <main+0x92>
		int gap = rand() % 50;
 800167c:	f004 f892 	bl	80057a4 <rand>
 8001680:	4603      	mov	r3, r0
 8001682:	4ab1      	ldr	r2, [pc, #708]	; (8001948 <main+0x310>)
 8001684:	fb82 1203 	smull	r1, r2, r2, r3
 8001688:	1111      	asrs	r1, r2, #4
 800168a:	17da      	asrs	r2, r3, #31
 800168c:	1a8a      	subs	r2, r1, r2
 800168e:	2132      	movs	r1, #50	; 0x32
 8001690:	fb01 f202 	mul.w	r2, r1, r2
 8001694:	1a9b      	subs	r3, r3, r2
 8001696:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
		point[i].x = 160 - gap;
 800169a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800169e:	f1c3 02a0 	rsb	r2, r3, #160	; 0xa0
 80016a2:	49aa      	ldr	r1, [pc, #680]	; (800194c <main+0x314>)
 80016a4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80016a8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		point[i].y = 120 - gap;
 80016ac:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80016b0:	f1c3 0278 	rsb	r2, r3, #120	; 0x78
 80016b4:	49a5      	ldr	r1, [pc, #660]	; (800194c <main+0x314>)
 80016b6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80016ba:	00db      	lsls	r3, r3, #3
 80016bc:	440b      	add	r3, r1
 80016be:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < 25; i++) {
 80016c0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80016c4:	3301      	adds	r3, #1
 80016c6:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 80016ca:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80016ce:	2b18      	cmp	r3, #24
 80016d0:	ddd4      	ble.n	800167c <main+0x44>
	}

	for (int i = 25; i < 50; i++) {
 80016d2:	2319      	movs	r3, #25
 80016d4:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 80016d8:	e026      	b.n	8001728 <main+0xf0>
		int gap = rand() % 50;
 80016da:	f004 f863 	bl	80057a4 <rand>
 80016de:	4603      	mov	r3, r0
 80016e0:	4a99      	ldr	r2, [pc, #612]	; (8001948 <main+0x310>)
 80016e2:	fb82 1203 	smull	r1, r2, r2, r3
 80016e6:	1111      	asrs	r1, r2, #4
 80016e8:	17da      	asrs	r2, r3, #31
 80016ea:	1a8a      	subs	r2, r1, r2
 80016ec:	2132      	movs	r1, #50	; 0x32
 80016ee:	fb01 f202 	mul.w	r2, r1, r2
 80016f2:	1a9b      	subs	r3, r3, r2
 80016f4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
		point[i].x = 160 + gap;
 80016f8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80016fc:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 8001700:	4992      	ldr	r1, [pc, #584]	; (800194c <main+0x314>)
 8001702:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001706:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		point[i].y = 120 + gap;
 800170a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800170e:	f103 0278 	add.w	r2, r3, #120	; 0x78
 8001712:	498e      	ldr	r1, [pc, #568]	; (800194c <main+0x314>)
 8001714:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001718:	00db      	lsls	r3, r3, #3
 800171a:	440b      	add	r3, r1
 800171c:	605a      	str	r2, [r3, #4]
	for (int i = 25; i < 50; i++) {
 800171e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001722:	3301      	adds	r3, #1
 8001724:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 8001728:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800172c:	2b31      	cmp	r3, #49	; 0x31
 800172e:	ddd4      	ble.n	80016da <main+0xa2>
	}
	for (int i = 50; i < 75; i++) {
 8001730:	2332      	movs	r3, #50	; 0x32
 8001732:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 8001736:	e026      	b.n	8001786 <main+0x14e>
		int gap = rand() % 50;
 8001738:	f004 f834 	bl	80057a4 <rand>
 800173c:	4603      	mov	r3, r0
 800173e:	4a82      	ldr	r2, [pc, #520]	; (8001948 <main+0x310>)
 8001740:	fb82 1203 	smull	r1, r2, r2, r3
 8001744:	1111      	asrs	r1, r2, #4
 8001746:	17da      	asrs	r2, r3, #31
 8001748:	1a8a      	subs	r2, r1, r2
 800174a:	2132      	movs	r1, #50	; 0x32
 800174c:	fb01 f202 	mul.w	r2, r1, r2
 8001750:	1a9b      	subs	r3, r3, r2
 8001752:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
		point[i].x = 160 + gap;
 8001756:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800175a:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 800175e:	497b      	ldr	r1, [pc, #492]	; (800194c <main+0x314>)
 8001760:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001764:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		point[i].y = 120 - gap;
 8001768:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800176c:	f1c3 0278 	rsb	r2, r3, #120	; 0x78
 8001770:	4976      	ldr	r1, [pc, #472]	; (800194c <main+0x314>)
 8001772:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001776:	00db      	lsls	r3, r3, #3
 8001778:	440b      	add	r3, r1
 800177a:	605a      	str	r2, [r3, #4]
	for (int i = 50; i < 75; i++) {
 800177c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001780:	3301      	adds	r3, #1
 8001782:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 8001786:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800178a:	2b4a      	cmp	r3, #74	; 0x4a
 800178c:	ddd4      	ble.n	8001738 <main+0x100>
	}
	for (int i = 75; i < 100; i++) {
 800178e:	234b      	movs	r3, #75	; 0x4b
 8001790:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8001794:	e026      	b.n	80017e4 <main+0x1ac>
		int gap = rand() % 50;
 8001796:	f004 f805 	bl	80057a4 <rand>
 800179a:	4603      	mov	r3, r0
 800179c:	4a6a      	ldr	r2, [pc, #424]	; (8001948 <main+0x310>)
 800179e:	fb82 1203 	smull	r1, r2, r2, r3
 80017a2:	1111      	asrs	r1, r2, #4
 80017a4:	17da      	asrs	r2, r3, #31
 80017a6:	1a8a      	subs	r2, r1, r2
 80017a8:	2132      	movs	r1, #50	; 0x32
 80017aa:	fb01 f202 	mul.w	r2, r1, r2
 80017ae:	1a9b      	subs	r3, r3, r2
 80017b0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
		point[i].x = 160 - gap;
 80017b4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80017b8:	f1c3 02a0 	rsb	r2, r3, #160	; 0xa0
 80017bc:	4963      	ldr	r1, [pc, #396]	; (800194c <main+0x314>)
 80017be:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80017c2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		point[i].y = 120 + gap;
 80017c6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80017ca:	f103 0278 	add.w	r2, r3, #120	; 0x78
 80017ce:	495f      	ldr	r1, [pc, #380]	; (800194c <main+0x314>)
 80017d0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80017d4:	00db      	lsls	r3, r3, #3
 80017d6:	440b      	add	r3, r1
 80017d8:	605a      	str	r2, [r3, #4]
	for (int i = 75; i < 100; i++) {
 80017da:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80017de:	3301      	adds	r3, #1
 80017e0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 80017e4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80017e8:	2b63      	cmp	r3, #99	; 0x63
 80017ea:	ddd4      	ble.n	8001796 <main+0x15e>
	}


	 int rad[100];
	 for (int i = 0; i < 100; i++) {
 80017ec:	2300      	movs	r3, #0
 80017ee:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 80017f2:	e01a      	b.n	800182a <main+0x1f2>
	 rad[i] = rand() % 20;
 80017f4:	f003 ffd6 	bl	80057a4 <rand>
 80017f8:	4601      	mov	r1, r0
 80017fa:	4b55      	ldr	r3, [pc, #340]	; (8001950 <main+0x318>)
 80017fc:	fb83 2301 	smull	r2, r3, r3, r1
 8001800:	10da      	asrs	r2, r3, #3
 8001802:	17cb      	asrs	r3, r1, #31
 8001804:	1ad2      	subs	r2, r2, r3
 8001806:	4613      	mov	r3, r2
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	4413      	add	r3, r2
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	1aca      	subs	r2, r1, r3
 8001810:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001814:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8001818:	f8d7 11ec 	ldr.w	r1, [r7, #492]	; 0x1ec
 800181c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	 for (int i = 0; i < 100; i++) {
 8001820:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001824:	3301      	adds	r3, #1
 8001826:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800182a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800182e:	2b63      	cmp	r3, #99	; 0x63
 8001830:	dde0      	ble.n	80017f4 <main+0x1bc>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		// ILI9341_FillScreen(BLACK);
		int16_t x, y, z = 0;
 8001832:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001836:	f5a3 73fd 	sub.w	r3, r3, #506	; 0x1fa
 800183a:	2200      	movs	r2, #0
 800183c:	801a      	strh	r2, [r3, #0]
		multiDataRead(&x, &y, &z);
 800183e:	1dba      	adds	r2, r7, #6
 8001840:	f107 0108 	add.w	r1, r7, #8
 8001844:	f107 030a 	add.w	r3, r7, #10
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff fdf3 	bl	8001434 <multiDataRead>
		x -= readings[0];
 800184e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001852:	f5a3 73fb 	sub.w	r3, r3, #502	; 0x1f6
 8001856:	f9b3 3000 	ldrsh.w	r3, [r3]
 800185a:	4618      	mov	r0, r3
 800185c:	f7ff f868 	bl	8000930 <__aeabi_i2f>
 8001860:	4602      	mov	r2, r0
 8001862:	4b3c      	ldr	r3, [pc, #240]	; (8001954 <main+0x31c>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4619      	mov	r1, r3
 8001868:	4610      	mov	r0, r2
 800186a:	f7fe ffab 	bl	80007c4 <__aeabi_fsub>
 800186e:	4603      	mov	r3, r0
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff fa01 	bl	8000c78 <__aeabi_f2iz>
 8001876:	4603      	mov	r3, r0
 8001878:	b21a      	sxth	r2, r3
 800187a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800187e:	f5a3 73fb 	sub.w	r3, r3, #502	; 0x1f6
 8001882:	801a      	strh	r2, [r3, #0]
		y -= readings[1];
 8001884:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001888:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800188c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff f84d 	bl	8000930 <__aeabi_i2f>
 8001896:	4602      	mov	r2, r0
 8001898:	4b2e      	ldr	r3, [pc, #184]	; (8001954 <main+0x31c>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	4619      	mov	r1, r3
 800189e:	4610      	mov	r0, r2
 80018a0:	f7fe ff90 	bl	80007c4 <__aeabi_fsub>
 80018a4:	4603      	mov	r3, r0
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7ff f9e6 	bl	8000c78 <__aeabi_f2iz>
 80018ac:	4603      	mov	r3, r0
 80018ae:	b21a      	sxth	r2, r3
 80018b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018b4:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80018b8:	801a      	strh	r2, [r3, #0]
		z -= readings[2];
 80018ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018be:	f5a3 73fd 	sub.w	r3, r3, #506	; 0x1fa
 80018c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7ff f832 	bl	8000930 <__aeabi_i2f>
 80018cc:	4602      	mov	r2, r0
 80018ce:	4b21      	ldr	r3, [pc, #132]	; (8001954 <main+0x31c>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	4619      	mov	r1, r3
 80018d4:	4610      	mov	r0, r2
 80018d6:	f7fe ff75 	bl	80007c4 <__aeabi_fsub>
 80018da:	4603      	mov	r3, r0
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff f9cb 	bl	8000c78 <__aeabi_f2iz>
 80018e2:	4603      	mov	r3, r0
 80018e4:	b21a      	sxth	r2, r3
 80018e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ea:	f5a3 73fd 	sub.w	r3, r3, #506	; 0x1fa
 80018ee:	801a      	strh	r2, [r3, #0]
		z += 256;
 80018f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018f4:	f5a3 73fd 	sub.w	r3, r3, #506	; 0x1fa
 80018f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018fc:	b29b      	uxth	r3, r3
 80018fe:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001902:	b29b      	uxth	r3, r3
 8001904:	b21a      	sxth	r2, r3
 8001906:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800190a:	f5a3 73fd 	sub.w	r3, r3, #506	; 0x1fa
 800190e:	801a      	strh	r2, [r3, #0]
		printf("%d %d %d\r\n", x, y, z);
 8001910:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001914:	f5a3 73fb 	sub.w	r3, r3, #502	; 0x1f6
 8001918:	f9b3 3000 	ldrsh.w	r3, [r3]
 800191c:	4619      	mov	r1, r3
 800191e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001922:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001926:	f9b3 3000 	ldrsh.w	r3, [r3]
 800192a:	461a      	mov	r2, r3
 800192c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001930:	f5a3 73fd 	sub.w	r3, r3, #506	; 0x1fa
 8001934:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001938:	4807      	ldr	r0, [pc, #28]	; (8001958 <main+0x320>)
 800193a:	f003 fea5 	bl	8005688 <iprintf>

		for (int i = 0; i < 25; i++) {
 800193e:	2300      	movs	r3, #0
 8001940:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001944:	e0f1      	b.n	8001b2a <main+0x4f2>
 8001946:	bf00      	nop
 8001948:	51eb851f 	.word	0x51eb851f
 800194c:	200001d4 	.word	0x200001d4
 8001950:	66666667 	.word	0x66666667
 8001954:	200004f4 	.word	0x200004f4
 8001958:	08006848 	.word	0x08006848
			float ratio = rand() % 100;
 800195c:	f003 ff22 	bl	80057a4 <rand>
 8001960:	4602      	mov	r2, r0
 8001962:	4bcb      	ldr	r3, [pc, #812]	; (8001c90 <main+0x658>)
 8001964:	fb83 1302 	smull	r1, r3, r3, r2
 8001968:	1159      	asrs	r1, r3, #5
 800196a:	17d3      	asrs	r3, r2, #31
 800196c:	1acb      	subs	r3, r1, r3
 800196e:	2164      	movs	r1, #100	; 0x64
 8001970:	fb01 f303 	mul.w	r3, r1, r3
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	4618      	mov	r0, r3
 8001978:	f7fe ffda 	bl	8000930 <__aeabi_i2f>
 800197c:	4603      	mov	r3, r0
 800197e:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
			ratio = ratio * 0.01;
 8001982:	f8d7 01b4 	ldr.w	r0, [r7, #436]	; 0x1b4
 8001986:	f7fe fe71 	bl	800066c <__aeabi_f2d>
 800198a:	a3bf      	add	r3, pc, #764	; (adr r3, 8001c88 <main+0x650>)
 800198c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001990:	f7fe fbde 	bl	8000150 <__aeabi_dmul>
 8001994:	4602      	mov	r2, r0
 8001996:	460b      	mov	r3, r1
 8001998:	4610      	mov	r0, r2
 800199a:	4619      	mov	r1, r3
 800199c:	f7fe febe 	bl	800071c <__aeabi_d2f>
 80019a0:	4603      	mov	r3, r0
 80019a2:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
			int pixel_y = ratio * x * 120 / 512;
 80019a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019aa:	f5a3 73fb 	sub.w	r3, r3, #502	; 0x1f6
 80019ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7fe ffbc 	bl	8000930 <__aeabi_i2f>
 80019b8:	4603      	mov	r3, r0
 80019ba:	f8d7 11b4 	ldr.w	r1, [r7, #436]	; 0x1b4
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff f80a 	bl	80009d8 <__aeabi_fmul>
 80019c4:	4603      	mov	r3, r0
 80019c6:	49b3      	ldr	r1, [pc, #716]	; (8001c94 <main+0x65c>)
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff f805 	bl	80009d8 <__aeabi_fmul>
 80019ce:	4603      	mov	r3, r0
 80019d0:	f04f 4188 	mov.w	r1, #1140850688	; 0x44000000
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7ff f8b3 	bl	8000b40 <__aeabi_fdiv>
 80019da:	4603      	mov	r3, r0
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff f94b 	bl	8000c78 <__aeabi_f2iz>
 80019e2:	4603      	mov	r3, r0
 80019e4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
			int pixel_x = ratio * y * 160 / 512;
 80019e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ec:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80019f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7fe ff9b 	bl	8000930 <__aeabi_i2f>
 80019fa:	4603      	mov	r3, r0
 80019fc:	f8d7 11b4 	ldr.w	r1, [r7, #436]	; 0x1b4
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7fe ffe9 	bl	80009d8 <__aeabi_fmul>
 8001a06:	4603      	mov	r3, r0
 8001a08:	49a3      	ldr	r1, [pc, #652]	; (8001c98 <main+0x660>)
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7fe ffe4 	bl	80009d8 <__aeabi_fmul>
 8001a10:	4603      	mov	r3, r0
 8001a12:	f04f 4188 	mov.w	r1, #1140850688	; 0x44000000
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff f892 	bl	8000b40 <__aeabi_fdiv>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7ff f92a 	bl	8000c78 <__aeabi_f2iz>
 8001a24:	4603      	mov	r3, r0
 8001a26:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
			ILI9341_DrawPixel(point[i].x, point[i].y, BLACK);
 8001a2a:	4a9c      	ldr	r2, [pc, #624]	; (8001c9c <main+0x664>)
 8001a2c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001a30:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001a34:	b298      	uxth	r0, r3
 8001a36:	4a99      	ldr	r2, [pc, #612]	; (8001c9c <main+0x664>)
 8001a38:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001a3c:	00db      	lsls	r3, r3, #3
 8001a3e:	4413      	add	r3, r2
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	2200      	movs	r2, #0
 8001a46:	4619      	mov	r1, r3
 8001a48:	f7ff fc6e 	bl	8001328 <ILI9341_DrawPixel>

			//ILI9341_DrawHollowCircle(point[i].x, point[i].y, rad[i], BLACK);
			//ILI9341_DrawText("HELLO", FONT4, point[i].x, point[i].y, BLACK, BLACK);

			point[i].x = point[i].x - pixel_x;
 8001a4c:	4a93      	ldr	r2, [pc, #588]	; (8001c9c <main+0x664>)
 8001a4e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001a52:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001a56:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001a5a:	1ad2      	subs	r2, r2, r3
 8001a5c:	498f      	ldr	r1, [pc, #572]	; (8001c9c <main+0x664>)
 8001a5e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001a62:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			point[i].y = point[i].y - pixel_y;
 8001a66:	4a8d      	ldr	r2, [pc, #564]	; (8001c9c <main+0x664>)
 8001a68:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001a6c:	00db      	lsls	r3, r3, #3
 8001a6e:	4413      	add	r3, r2
 8001a70:	685a      	ldr	r2, [r3, #4]
 8001a72:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001a76:	1ad2      	subs	r2, r2, r3
 8001a78:	4988      	ldr	r1, [pc, #544]	; (8001c9c <main+0x664>)
 8001a7a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001a7e:	00db      	lsls	r3, r3, #3
 8001a80:	440b      	add	r3, r1
 8001a82:	605a      	str	r2, [r3, #4]

			if (point[i].x > 319) {
 8001a84:	4a85      	ldr	r2, [pc, #532]	; (8001c9c <main+0x664>)
 8001a86:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001a8a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001a8e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001a92:	db07      	blt.n	8001aa4 <main+0x46c>
				point[i].x = 319;
 8001a94:	4a81      	ldr	r2, [pc, #516]	; (8001c9c <main+0x664>)
 8001a96:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001a9a:	f240 113f 	movw	r1, #319	; 0x13f
 8001a9e:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 8001aa2:	e00c      	b.n	8001abe <main+0x486>
			} else if (point[i].x < 0) {
 8001aa4:	4a7d      	ldr	r2, [pc, #500]	; (8001c9c <main+0x664>)
 8001aa6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001aaa:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	da05      	bge.n	8001abe <main+0x486>
				point[i].x = 0;
 8001ab2:	4a7a      	ldr	r2, [pc, #488]	; (8001c9c <main+0x664>)
 8001ab4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001ab8:	2100      	movs	r1, #0
 8001aba:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
			}

			if (point[i].y > 239) {
 8001abe:	4a77      	ldr	r2, [pc, #476]	; (8001c9c <main+0x664>)
 8001ac0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001ac4:	00db      	lsls	r3, r3, #3
 8001ac6:	4413      	add	r3, r2
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	2bef      	cmp	r3, #239	; 0xef
 8001acc:	dd07      	ble.n	8001ade <main+0x4a6>
				point[i].y = 239;
 8001ace:	4a73      	ldr	r2, [pc, #460]	; (8001c9c <main+0x664>)
 8001ad0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001ad4:	00db      	lsls	r3, r3, #3
 8001ad6:	4413      	add	r3, r2
 8001ad8:	22ef      	movs	r2, #239	; 0xef
 8001ada:	605a      	str	r2, [r3, #4]
 8001adc:	e00e      	b.n	8001afc <main+0x4c4>
			} else if (point[i].y < 0) {
 8001ade:	4a6f      	ldr	r2, [pc, #444]	; (8001c9c <main+0x664>)
 8001ae0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001ae4:	00db      	lsls	r3, r3, #3
 8001ae6:	4413      	add	r3, r2
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	da06      	bge.n	8001afc <main+0x4c4>
				point[i].y = 0;
 8001aee:	4a6b      	ldr	r2, [pc, #428]	; (8001c9c <main+0x664>)
 8001af0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001af4:	00db      	lsls	r3, r3, #3
 8001af6:	4413      	add	r3, r2
 8001af8:	2200      	movs	r2, #0
 8001afa:	605a      	str	r2, [r3, #4]
			}
			ILI9341_DrawPixel(point[i].x, point[i].y, GREEN);
 8001afc:	4a67      	ldr	r2, [pc, #412]	; (8001c9c <main+0x664>)
 8001afe:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001b02:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001b06:	b298      	uxth	r0, r3
 8001b08:	4a64      	ldr	r2, [pc, #400]	; (8001c9c <main+0x664>)
 8001b0a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001b0e:	00db      	lsls	r3, r3, #3
 8001b10:	4413      	add	r3, r2
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	b29b      	uxth	r3, r3
 8001b16:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	f7ff fc04 	bl	8001328 <ILI9341_DrawPixel>
		for (int i = 0; i < 25; i++) {
 8001b20:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001b24:	3301      	adds	r3, #1
 8001b26:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001b2a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001b2e:	2b18      	cmp	r3, #24
 8001b30:	f77f af14 	ble.w	800195c <main+0x324>
			//ILI9341_DrawHollowCircle(point[i].x, point[i].y, rad[i], GREEN);
			//ILI9341_DrawText("HELLO", FONT4, point[i].x, point[i].y, WHITE, BLACK);
		}

		for (int i = 25; i < 50; i++) {
 8001b34:	2319      	movs	r3, #25
 8001b36:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001b3a:	e0f4      	b.n	8001d26 <main+0x6ee>
			float ratio = rand() % 100;
 8001b3c:	f003 fe32 	bl	80057a4 <rand>
 8001b40:	4602      	mov	r2, r0
 8001b42:	4b53      	ldr	r3, [pc, #332]	; (8001c90 <main+0x658>)
 8001b44:	fb83 1302 	smull	r1, r3, r3, r2
 8001b48:	1159      	asrs	r1, r3, #5
 8001b4a:	17d3      	asrs	r3, r2, #31
 8001b4c:	1acb      	subs	r3, r1, r3
 8001b4e:	2164      	movs	r1, #100	; 0x64
 8001b50:	fb01 f303 	mul.w	r3, r1, r3
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7fe feea 	bl	8000930 <__aeabi_i2f>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
			ratio = ratio * 0.01;
 8001b62:	f8d7 01c0 	ldr.w	r0, [r7, #448]	; 0x1c0
 8001b66:	f7fe fd81 	bl	800066c <__aeabi_f2d>
 8001b6a:	a347      	add	r3, pc, #284	; (adr r3, 8001c88 <main+0x650>)
 8001b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b70:	f7fe faee 	bl	8000150 <__aeabi_dmul>
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	4610      	mov	r0, r2
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	f7fe fdce 	bl	800071c <__aeabi_d2f>
 8001b80:	4603      	mov	r3, r0
 8001b82:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
			int pixel_y = ratio * x * 120 / 512;
 8001b86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b8a:	f5a3 73fb 	sub.w	r3, r3, #502	; 0x1f6
 8001b8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7fe fecc 	bl	8000930 <__aeabi_i2f>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7fe ff1a 	bl	80009d8 <__aeabi_fmul>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	493b      	ldr	r1, [pc, #236]	; (8001c94 <main+0x65c>)
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7fe ff15 	bl	80009d8 <__aeabi_fmul>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	f04f 4188 	mov.w	r1, #1140850688	; 0x44000000
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7fe ffc3 	bl	8000b40 <__aeabi_fdiv>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff f85b 	bl	8000c78 <__aeabi_f2iz>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
			int pixel_x = ratio * y * 160 / 512;
 8001bc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bcc:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001bd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7fe feab 	bl	8000930 <__aeabi_i2f>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7fe fef9 	bl	80009d8 <__aeabi_fmul>
 8001be6:	4603      	mov	r3, r0
 8001be8:	492b      	ldr	r1, [pc, #172]	; (8001c98 <main+0x660>)
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7fe fef4 	bl	80009d8 <__aeabi_fmul>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	f04f 4188 	mov.w	r1, #1140850688	; 0x44000000
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7fe ffa2 	bl	8000b40 <__aeabi_fdiv>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff f83a 	bl	8000c78 <__aeabi_f2iz>
 8001c04:	4603      	mov	r3, r0
 8001c06:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
			ILI9341_DrawPixel(point[i].x, point[i].y, BLACK);
 8001c0a:	4a24      	ldr	r2, [pc, #144]	; (8001c9c <main+0x664>)
 8001c0c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001c10:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001c14:	b298      	uxth	r0, r3
 8001c16:	4a21      	ldr	r2, [pc, #132]	; (8001c9c <main+0x664>)
 8001c18:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001c1c:	00db      	lsls	r3, r3, #3
 8001c1e:	4413      	add	r3, r2
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	2200      	movs	r2, #0
 8001c26:	4619      	mov	r1, r3
 8001c28:	f7ff fb7e 	bl	8001328 <ILI9341_DrawPixel>

			//ILI9341_DrawHollowCircle(point[i].x, point[i].y, rad[i], BLACK);
			//ILI9341_DrawText("WORLD", FONT4, point[i].x, point[i].y, BLACK, BLACK);

			point[i].x = point[i].x - pixel_x;
 8001c2c:	4a1b      	ldr	r2, [pc, #108]	; (8001c9c <main+0x664>)
 8001c2e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001c32:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001c36:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8001c3a:	1ad2      	subs	r2, r2, r3
 8001c3c:	4917      	ldr	r1, [pc, #92]	; (8001c9c <main+0x664>)
 8001c3e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001c42:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			point[i].y = point[i].y - pixel_y;
 8001c46:	4a15      	ldr	r2, [pc, #84]	; (8001c9c <main+0x664>)
 8001c48:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001c4c:	00db      	lsls	r3, r3, #3
 8001c4e:	4413      	add	r3, r2
 8001c50:	685a      	ldr	r2, [r3, #4]
 8001c52:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8001c56:	1ad2      	subs	r2, r2, r3
 8001c58:	4910      	ldr	r1, [pc, #64]	; (8001c9c <main+0x664>)
 8001c5a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001c5e:	00db      	lsls	r3, r3, #3
 8001c60:	440b      	add	r3, r1
 8001c62:	605a      	str	r2, [r3, #4]

			if (point[i].x > 319) {
 8001c64:	4a0d      	ldr	r2, [pc, #52]	; (8001c9c <main+0x664>)
 8001c66:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001c6a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001c6e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001c72:	db15      	blt.n	8001ca0 <main+0x668>
				point[i].x = 319;
 8001c74:	4a09      	ldr	r2, [pc, #36]	; (8001c9c <main+0x664>)
 8001c76:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001c7a:	f240 113f 	movw	r1, #319	; 0x13f
 8001c7e:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 8001c82:	e01a      	b.n	8001cba <main+0x682>
 8001c84:	f3af 8000 	nop.w
 8001c88:	47ae147b 	.word	0x47ae147b
 8001c8c:	3f847ae1 	.word	0x3f847ae1
 8001c90:	51eb851f 	.word	0x51eb851f
 8001c94:	42f00000 	.word	0x42f00000
 8001c98:	43200000 	.word	0x43200000
 8001c9c:	200001d4 	.word	0x200001d4
			} else if (point[i].x < 0) {
 8001ca0:	4a9f      	ldr	r2, [pc, #636]	; (8001f20 <main+0x8e8>)
 8001ca2:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001ca6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	da05      	bge.n	8001cba <main+0x682>
				point[i].x = 0;
 8001cae:	4a9c      	ldr	r2, [pc, #624]	; (8001f20 <main+0x8e8>)
 8001cb0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
			}

			if (point[i].y > 239) {
 8001cba:	4a99      	ldr	r2, [pc, #612]	; (8001f20 <main+0x8e8>)
 8001cbc:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001cc0:	00db      	lsls	r3, r3, #3
 8001cc2:	4413      	add	r3, r2
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	2bef      	cmp	r3, #239	; 0xef
 8001cc8:	dd07      	ble.n	8001cda <main+0x6a2>
				point[i].y = 239;
 8001cca:	4a95      	ldr	r2, [pc, #596]	; (8001f20 <main+0x8e8>)
 8001ccc:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001cd0:	00db      	lsls	r3, r3, #3
 8001cd2:	4413      	add	r3, r2
 8001cd4:	22ef      	movs	r2, #239	; 0xef
 8001cd6:	605a      	str	r2, [r3, #4]
 8001cd8:	e00e      	b.n	8001cf8 <main+0x6c0>
			} else if (point[i].y < 0) {
 8001cda:	4a91      	ldr	r2, [pc, #580]	; (8001f20 <main+0x8e8>)
 8001cdc:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001ce0:	00db      	lsls	r3, r3, #3
 8001ce2:	4413      	add	r3, r2
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	da06      	bge.n	8001cf8 <main+0x6c0>
				point[i].y = 0;
 8001cea:	4a8d      	ldr	r2, [pc, #564]	; (8001f20 <main+0x8e8>)
 8001cec:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001cf0:	00db      	lsls	r3, r3, #3
 8001cf2:	4413      	add	r3, r2
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	605a      	str	r2, [r3, #4]
			}
			ILI9341_DrawPixel(point[i].x, point[i].y, CYAN);
 8001cf8:	4a89      	ldr	r2, [pc, #548]	; (8001f20 <main+0x8e8>)
 8001cfa:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001cfe:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001d02:	b298      	uxth	r0, r3
 8001d04:	4a86      	ldr	r2, [pc, #536]	; (8001f20 <main+0x8e8>)
 8001d06:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001d0a:	00db      	lsls	r3, r3, #3
 8001d0c:	4413      	add	r3, r2
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001d16:	4619      	mov	r1, r3
 8001d18:	f7ff fb06 	bl	8001328 <ILI9341_DrawPixel>
		for (int i = 25; i < 50; i++) {
 8001d1c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001d20:	3301      	adds	r3, #1
 8001d22:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001d26:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001d2a:	2b31      	cmp	r3, #49	; 0x31
 8001d2c:	f77f af06 	ble.w	8001b3c <main+0x504>
			//ILI9341_DrawHollowCircle(point[i].x, point[i].y, rad[i], CYAN);
			//ILI9341_DrawText("WORLD", FONT4, point[i].x, point[i].y, WHITE, BLACK);
		}

		for (int i = 50; i < 75; i++) {
 8001d30:	2332      	movs	r3, #50	; 0x32
 8001d32:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001d36:	e0e6      	b.n	8001f06 <main+0x8ce>
			float ratio = rand() % 100;
 8001d38:	f003 fd34 	bl	80057a4 <rand>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	4b79      	ldr	r3, [pc, #484]	; (8001f24 <main+0x8ec>)
 8001d40:	fb83 1302 	smull	r1, r3, r3, r2
 8001d44:	1159      	asrs	r1, r3, #5
 8001d46:	17d3      	asrs	r3, r2, #31
 8001d48:	1acb      	subs	r3, r1, r3
 8001d4a:	2164      	movs	r1, #100	; 0x64
 8001d4c:	fb01 f303 	mul.w	r3, r1, r3
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7fe fdec 	bl	8000930 <__aeabi_i2f>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
			ratio = ratio * 0.01;
 8001d5e:	f8d7 01cc 	ldr.w	r0, [r7, #460]	; 0x1cc
 8001d62:	f7fe fc83 	bl	800066c <__aeabi_f2d>
 8001d66:	a36c      	add	r3, pc, #432	; (adr r3, 8001f18 <main+0x8e0>)
 8001d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d6c:	f7fe f9f0 	bl	8000150 <__aeabi_dmul>
 8001d70:	4602      	mov	r2, r0
 8001d72:	460b      	mov	r3, r1
 8001d74:	4610      	mov	r0, r2
 8001d76:	4619      	mov	r1, r3
 8001d78:	f7fe fcd0 	bl	800071c <__aeabi_d2f>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
			int pixel_y = ratio * x * 120 / 512;
 8001d82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d86:	f5a3 73fb 	sub.w	r3, r3, #502	; 0x1f6
 8001d8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7fe fdce 	bl	8000930 <__aeabi_i2f>
 8001d94:	4603      	mov	r3, r0
 8001d96:	f8d7 11cc 	ldr.w	r1, [r7, #460]	; 0x1cc
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7fe fe1c 	bl	80009d8 <__aeabi_fmul>
 8001da0:	4603      	mov	r3, r0
 8001da2:	4961      	ldr	r1, [pc, #388]	; (8001f28 <main+0x8f0>)
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7fe fe17 	bl	80009d8 <__aeabi_fmul>
 8001daa:	4603      	mov	r3, r0
 8001dac:	f04f 4188 	mov.w	r1, #1140850688	; 0x44000000
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7fe fec5 	bl	8000b40 <__aeabi_fdiv>
 8001db6:	4603      	mov	r3, r0
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7fe ff5d 	bl	8000c78 <__aeabi_f2iz>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
			int pixel_x = ratio * y * 160 / 512;
 8001dc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dc8:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001dcc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7fe fdad 	bl	8000930 <__aeabi_i2f>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	f8d7 11cc 	ldr.w	r1, [r7, #460]	; 0x1cc
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7fe fdfb 	bl	80009d8 <__aeabi_fmul>
 8001de2:	4603      	mov	r3, r0
 8001de4:	4951      	ldr	r1, [pc, #324]	; (8001f2c <main+0x8f4>)
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7fe fdf6 	bl	80009d8 <__aeabi_fmul>
 8001dec:	4603      	mov	r3, r0
 8001dee:	f04f 4188 	mov.w	r1, #1140850688	; 0x44000000
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7fe fea4 	bl	8000b40 <__aeabi_fdiv>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7fe ff3c 	bl	8000c78 <__aeabi_f2iz>
 8001e00:	4603      	mov	r3, r0
 8001e02:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
			ILI9341_DrawPixel(point[i].x, point[i].y, BLACK);
 8001e06:	4a46      	ldr	r2, [pc, #280]	; (8001f20 <main+0x8e8>)
 8001e08:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001e0c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001e10:	b298      	uxth	r0, r3
 8001e12:	4a43      	ldr	r2, [pc, #268]	; (8001f20 <main+0x8e8>)
 8001e14:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001e18:	00db      	lsls	r3, r3, #3
 8001e1a:	4413      	add	r3, r2
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	2200      	movs	r2, #0
 8001e22:	4619      	mov	r1, r3
 8001e24:	f7ff fa80 	bl	8001328 <ILI9341_DrawPixel>

			//ILI9341_DrawHollowCircle(point[i].x, point[i].y, rad[i], BLACK);
			//ILI9341_DrawText("pill", FONT4, point[i].x, point[i].y, BLACK, BLACK);

			point[i].x = point[i].x - pixel_x;
 8001e28:	4a3d      	ldr	r2, [pc, #244]	; (8001f20 <main+0x8e8>)
 8001e2a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001e2e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001e32:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001e36:	1ad2      	subs	r2, r2, r3
 8001e38:	4939      	ldr	r1, [pc, #228]	; (8001f20 <main+0x8e8>)
 8001e3a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001e3e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			point[i].y = point[i].y - pixel_y;
 8001e42:	4a37      	ldr	r2, [pc, #220]	; (8001f20 <main+0x8e8>)
 8001e44:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001e48:	00db      	lsls	r3, r3, #3
 8001e4a:	4413      	add	r3, r2
 8001e4c:	685a      	ldr	r2, [r3, #4]
 8001e4e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001e52:	1ad2      	subs	r2, r2, r3
 8001e54:	4932      	ldr	r1, [pc, #200]	; (8001f20 <main+0x8e8>)
 8001e56:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001e5a:	00db      	lsls	r3, r3, #3
 8001e5c:	440b      	add	r3, r1
 8001e5e:	605a      	str	r2, [r3, #4]

			if (point[i].x > 319) {
 8001e60:	4a2f      	ldr	r2, [pc, #188]	; (8001f20 <main+0x8e8>)
 8001e62:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001e66:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001e6a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001e6e:	db07      	blt.n	8001e80 <main+0x848>
				point[i].x = 319;
 8001e70:	4a2b      	ldr	r2, [pc, #172]	; (8001f20 <main+0x8e8>)
 8001e72:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001e76:	f240 113f 	movw	r1, #319	; 0x13f
 8001e7a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 8001e7e:	e00c      	b.n	8001e9a <main+0x862>
			} else if (point[i].x < 0) {
 8001e80:	4a27      	ldr	r2, [pc, #156]	; (8001f20 <main+0x8e8>)
 8001e82:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001e86:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	da05      	bge.n	8001e9a <main+0x862>
				point[i].x = 0;
 8001e8e:	4a24      	ldr	r2, [pc, #144]	; (8001f20 <main+0x8e8>)
 8001e90:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001e94:	2100      	movs	r1, #0
 8001e96:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
			}

			if (point[i].y > 239) {
 8001e9a:	4a21      	ldr	r2, [pc, #132]	; (8001f20 <main+0x8e8>)
 8001e9c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001ea0:	00db      	lsls	r3, r3, #3
 8001ea2:	4413      	add	r3, r2
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	2bef      	cmp	r3, #239	; 0xef
 8001ea8:	dd07      	ble.n	8001eba <main+0x882>
				point[i].y = 239;
 8001eaa:	4a1d      	ldr	r2, [pc, #116]	; (8001f20 <main+0x8e8>)
 8001eac:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001eb0:	00db      	lsls	r3, r3, #3
 8001eb2:	4413      	add	r3, r2
 8001eb4:	22ef      	movs	r2, #239	; 0xef
 8001eb6:	605a      	str	r2, [r3, #4]
 8001eb8:	e00e      	b.n	8001ed8 <main+0x8a0>
			} else if (point[i].y < 0) {
 8001eba:	4a19      	ldr	r2, [pc, #100]	; (8001f20 <main+0x8e8>)
 8001ebc:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001ec0:	00db      	lsls	r3, r3, #3
 8001ec2:	4413      	add	r3, r2
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	da06      	bge.n	8001ed8 <main+0x8a0>
				point[i].y = 0;
 8001eca:	4a15      	ldr	r2, [pc, #84]	; (8001f20 <main+0x8e8>)
 8001ecc:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001ed0:	00db      	lsls	r3, r3, #3
 8001ed2:	4413      	add	r3, r2
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	605a      	str	r2, [r3, #4]
			}
			ILI9341_DrawPixel(point[i].x, point[i].y, YELLOW);
 8001ed8:	4a11      	ldr	r2, [pc, #68]	; (8001f20 <main+0x8e8>)
 8001eda:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001ede:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001ee2:	b298      	uxth	r0, r3
 8001ee4:	4a0e      	ldr	r2, [pc, #56]	; (8001f20 <main+0x8e8>)
 8001ee6:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001eea:	00db      	lsls	r3, r3, #3
 8001eec:	4413      	add	r3, r2
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	f7ff fa16 	bl	8001328 <ILI9341_DrawPixel>
		for (int i = 50; i < 75; i++) {
 8001efc:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001f00:	3301      	adds	r3, #1
 8001f02:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001f06:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001f0a:	2b4a      	cmp	r3, #74	; 0x4a
 8001f0c:	f77f af14 	ble.w	8001d38 <main+0x700>
			//ILI9341_DrawHollowCircle(point[i].x, point[i].y, rad[i], YELLOW);
			//ILI9341_DrawText("pill", FONT4, point[i].x, point[i].y, WHITE, BLACK);
		}

		for (int i = 75; i < 100; i++) {
 8001f10:	234b      	movs	r3, #75	; 0x4b
 8001f12:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001f16:	e0f2      	b.n	80020fe <main+0xac6>
 8001f18:	47ae147b 	.word	0x47ae147b
 8001f1c:	3f847ae1 	.word	0x3f847ae1
 8001f20:	200001d4 	.word	0x200001d4
 8001f24:	51eb851f 	.word	0x51eb851f
 8001f28:	42f00000 	.word	0x42f00000
 8001f2c:	43200000 	.word	0x43200000
			float ratio = rand() % 100;
 8001f30:	f003 fc38 	bl	80057a4 <rand>
 8001f34:	4602      	mov	r2, r0
 8001f36:	4b78      	ldr	r3, [pc, #480]	; (8002118 <main+0xae0>)
 8001f38:	fb83 1302 	smull	r1, r3, r3, r2
 8001f3c:	1159      	asrs	r1, r3, #5
 8001f3e:	17d3      	asrs	r3, r2, #31
 8001f40:	1acb      	subs	r3, r1, r3
 8001f42:	2164      	movs	r1, #100	; 0x64
 8001f44:	fb01 f303 	mul.w	r3, r1, r3
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7fe fcf0 	bl	8000930 <__aeabi_i2f>
 8001f50:	4603      	mov	r3, r0
 8001f52:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
			ratio = ratio * 0.01;
 8001f56:	f8d7 01d8 	ldr.w	r0, [r7, #472]	; 0x1d8
 8001f5a:	f7fe fb87 	bl	800066c <__aeabi_f2d>
 8001f5e:	a36c      	add	r3, pc, #432	; (adr r3, 8002110 <main+0xad8>)
 8001f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f64:	f7fe f8f4 	bl	8000150 <__aeabi_dmul>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	4610      	mov	r0, r2
 8001f6e:	4619      	mov	r1, r3
 8001f70:	f7fe fbd4 	bl	800071c <__aeabi_d2f>
 8001f74:	4603      	mov	r3, r0
 8001f76:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
			int pixel_y = ratio * x * 120 / 512;
 8001f7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f7e:	f5a3 73fb 	sub.w	r3, r3, #502	; 0x1f6
 8001f82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7fe fcd2 	bl	8000930 <__aeabi_i2f>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	f8d7 11d8 	ldr.w	r1, [r7, #472]	; 0x1d8
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7fe fd20 	bl	80009d8 <__aeabi_fmul>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	4960      	ldr	r1, [pc, #384]	; (800211c <main+0xae4>)
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7fe fd1b 	bl	80009d8 <__aeabi_fmul>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	f04f 4188 	mov.w	r1, #1140850688	; 0x44000000
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7fe fdc9 	bl	8000b40 <__aeabi_fdiv>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7fe fe61 	bl	8000c78 <__aeabi_f2iz>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
			int pixel_x = ratio * y * 160 / 512;
 8001fbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fc0:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001fc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7fe fcb1 	bl	8000930 <__aeabi_i2f>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	f8d7 11d8 	ldr.w	r1, [r7, #472]	; 0x1d8
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7fe fcff 	bl	80009d8 <__aeabi_fmul>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	4950      	ldr	r1, [pc, #320]	; (8002120 <main+0xae8>)
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7fe fcfa 	bl	80009d8 <__aeabi_fmul>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	f04f 4188 	mov.w	r1, #1140850688	; 0x44000000
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7fe fda8 	bl	8000b40 <__aeabi_fdiv>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7fe fe40 	bl	8000c78 <__aeabi_f2iz>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
			ILI9341_DrawPixel(point[i].x, point[i].y, BLACK);
 8001ffe:	4a49      	ldr	r2, [pc, #292]	; (8002124 <main+0xaec>)
 8002000:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8002004:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002008:	b298      	uxth	r0, r3
 800200a:	4a46      	ldr	r2, [pc, #280]	; (8002124 <main+0xaec>)
 800200c:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8002010:	00db      	lsls	r3, r3, #3
 8002012:	4413      	add	r3, r2
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	b29b      	uxth	r3, r3
 8002018:	2200      	movs	r2, #0
 800201a:	4619      	mov	r1, r3
 800201c:	f7ff f984 	bl	8001328 <ILI9341_DrawPixel>

			//ILI9341_DrawHollowCircle(point[i].x, point[i].y, rad[i], BLACK);
			//ILI9341_DrawText("blue", FONT4, point[i].x, point[i].y, BLACK, BLACK);

			point[i].x = point[i].x - pixel_x;
 8002020:	4a40      	ldr	r2, [pc, #256]	; (8002124 <main+0xaec>)
 8002022:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8002026:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800202a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800202e:	1ad2      	subs	r2, r2, r3
 8002030:	493c      	ldr	r1, [pc, #240]	; (8002124 <main+0xaec>)
 8002032:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8002036:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			point[i].y = point[i].y - pixel_y;
 800203a:	4a3a      	ldr	r2, [pc, #232]	; (8002124 <main+0xaec>)
 800203c:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	4413      	add	r3, r2
 8002044:	685a      	ldr	r2, [r3, #4]
 8002046:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800204a:	1ad2      	subs	r2, r2, r3
 800204c:	4935      	ldr	r1, [pc, #212]	; (8002124 <main+0xaec>)
 800204e:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8002052:	00db      	lsls	r3, r3, #3
 8002054:	440b      	add	r3, r1
 8002056:	605a      	str	r2, [r3, #4]

			if (point[i].x > 319) {
 8002058:	4a32      	ldr	r2, [pc, #200]	; (8002124 <main+0xaec>)
 800205a:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 800205e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002062:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002066:	db07      	blt.n	8002078 <main+0xa40>
				point[i].x = 319;
 8002068:	4a2e      	ldr	r2, [pc, #184]	; (8002124 <main+0xaec>)
 800206a:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 800206e:	f240 113f 	movw	r1, #319	; 0x13f
 8002072:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 8002076:	e00c      	b.n	8002092 <main+0xa5a>
			} else if (point[i].x < 0) {
 8002078:	4a2a      	ldr	r2, [pc, #168]	; (8002124 <main+0xaec>)
 800207a:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 800207e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002082:	2b00      	cmp	r3, #0
 8002084:	da05      	bge.n	8002092 <main+0xa5a>
				point[i].x = 0;
 8002086:	4a27      	ldr	r2, [pc, #156]	; (8002124 <main+0xaec>)
 8002088:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 800208c:	2100      	movs	r1, #0
 800208e:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
			}

			if (point[i].y > 239) {
 8002092:	4a24      	ldr	r2, [pc, #144]	; (8002124 <main+0xaec>)
 8002094:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8002098:	00db      	lsls	r3, r3, #3
 800209a:	4413      	add	r3, r2
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	2bef      	cmp	r3, #239	; 0xef
 80020a0:	dd07      	ble.n	80020b2 <main+0xa7a>
				point[i].y = 239;
 80020a2:	4a20      	ldr	r2, [pc, #128]	; (8002124 <main+0xaec>)
 80020a4:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 80020a8:	00db      	lsls	r3, r3, #3
 80020aa:	4413      	add	r3, r2
 80020ac:	22ef      	movs	r2, #239	; 0xef
 80020ae:	605a      	str	r2, [r3, #4]
 80020b0:	e00e      	b.n	80020d0 <main+0xa98>
			} else if (point[i].y < 0) {
 80020b2:	4a1c      	ldr	r2, [pc, #112]	; (8002124 <main+0xaec>)
 80020b4:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 80020b8:	00db      	lsls	r3, r3, #3
 80020ba:	4413      	add	r3, r2
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	da06      	bge.n	80020d0 <main+0xa98>
				point[i].y = 0;
 80020c2:	4a18      	ldr	r2, [pc, #96]	; (8002124 <main+0xaec>)
 80020c4:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 80020c8:	00db      	lsls	r3, r3, #3
 80020ca:	4413      	add	r3, r2
 80020cc:	2200      	movs	r2, #0
 80020ce:	605a      	str	r2, [r3, #4]
			}
			ILI9341_DrawPixel(point[i].x, point[i].y, ORANGE);
 80020d0:	4a14      	ldr	r2, [pc, #80]	; (8002124 <main+0xaec>)
 80020d2:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 80020d6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80020da:	b298      	uxth	r0, r3
 80020dc:	4a11      	ldr	r2, [pc, #68]	; (8002124 <main+0xaec>)
 80020de:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	4413      	add	r3, r2
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	b29b      	uxth	r3, r3
 80020ea:	f64f 5220 	movw	r2, #64800	; 0xfd20
 80020ee:	4619      	mov	r1, r3
 80020f0:	f7ff f91a 	bl	8001328 <ILI9341_DrawPixel>
		for (int i = 75; i < 100; i++) {
 80020f4:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 80020f8:	3301      	adds	r3, #1
 80020fa:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80020fe:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8002102:	2b63      	cmp	r3, #99	; 0x63
 8002104:	f77f af14 	ble.w	8001f30 <main+0x8f8>
	while (1) {
 8002108:	f7ff bb93 	b.w	8001832 <main+0x1fa>
 800210c:	f3af 8000 	nop.w
 8002110:	47ae147b 	.word	0x47ae147b
 8002114:	3f847ae1 	.word	0x3f847ae1
 8002118:	51eb851f 	.word	0x51eb851f
 800211c:	42f00000 	.word	0x42f00000
 8002120:	43200000 	.word	0x43200000
 8002124:	200001d4 	.word	0x200001d4

08002128 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b090      	sub	sp, #64	; 0x40
 800212c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800212e:	f107 0318 	add.w	r3, r7, #24
 8002132:	2228      	movs	r2, #40	; 0x28
 8002134:	2100      	movs	r1, #0
 8002136:	4618      	mov	r0, r3
 8002138:	f003 fa9e 	bl	8005678 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800213c:	1d3b      	adds	r3, r7, #4
 800213e:	2200      	movs	r2, #0
 8002140:	601a      	str	r2, [r3, #0]
 8002142:	605a      	str	r2, [r3, #4]
 8002144:	609a      	str	r2, [r3, #8]
 8002146:	60da      	str	r2, [r3, #12]
 8002148:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800214a:	2301      	movs	r3, #1
 800214c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800214e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002152:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002154:	2300      	movs	r3, #0
 8002156:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002158:	2301      	movs	r3, #1
 800215a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800215c:	2302      	movs	r3, #2
 800215e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002160:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002164:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002166:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800216a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800216c:	f107 0318 	add.w	r3, r7, #24
 8002170:	4618      	mov	r0, r3
 8002172:	f002 f8c3 	bl	80042fc <HAL_RCC_OscConfig>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800217c:	f000 f924 	bl	80023c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002180:	230f      	movs	r3, #15
 8002182:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002184:	2302      	movs	r3, #2
 8002186:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002188:	2300      	movs	r3, #0
 800218a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800218c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002190:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002192:	2300      	movs	r3, #0
 8002194:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002196:	1d3b      	adds	r3, r7, #4
 8002198:	2102      	movs	r1, #2
 800219a:	4618      	mov	r0, r3
 800219c:	f002 fb30 	bl	8004800 <HAL_RCC_ClockConfig>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <SystemClock_Config+0x82>
  {
    Error_Handler();
 80021a6:	f000 f90f 	bl	80023c8 <Error_Handler>
  }
}
 80021aa:	bf00      	nop
 80021ac:	3740      	adds	r7, #64	; 0x40
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
	...

080021b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80021b8:	4b12      	ldr	r3, [pc, #72]	; (8002204 <MX_I2C1_Init+0x50>)
 80021ba:	4a13      	ldr	r2, [pc, #76]	; (8002208 <MX_I2C1_Init+0x54>)
 80021bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80021be:	4b11      	ldr	r3, [pc, #68]	; (8002204 <MX_I2C1_Init+0x50>)
 80021c0:	4a12      	ldr	r2, [pc, #72]	; (800220c <MX_I2C1_Init+0x58>)
 80021c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80021c4:	4b0f      	ldr	r3, [pc, #60]	; (8002204 <MX_I2C1_Init+0x50>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80021ca:	4b0e      	ldr	r3, [pc, #56]	; (8002204 <MX_I2C1_Init+0x50>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021d0:	4b0c      	ldr	r3, [pc, #48]	; (8002204 <MX_I2C1_Init+0x50>)
 80021d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80021d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021d8:	4b0a      	ldr	r3, [pc, #40]	; (8002204 <MX_I2C1_Init+0x50>)
 80021da:	2200      	movs	r2, #0
 80021dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80021de:	4b09      	ldr	r3, [pc, #36]	; (8002204 <MX_I2C1_Init+0x50>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021e4:	4b07      	ldr	r3, [pc, #28]	; (8002204 <MX_I2C1_Init+0x50>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021ea:	4b06      	ldr	r3, [pc, #24]	; (8002204 <MX_I2C1_Init+0x50>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80021f0:	4804      	ldr	r0, [pc, #16]	; (8002204 <MX_I2C1_Init+0x50>)
 80021f2:	f001 f84f 	bl	8003294 <HAL_I2C_Init>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80021fc:	f000 f8e4 	bl	80023c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002200:	bf00      	nop
 8002202:	bd80      	pop	{r7, pc}
 8002204:	2000009c 	.word	0x2000009c
 8002208:	40005400 	.word	0x40005400
 800220c:	000186a0 	.word	0x000186a0

08002210 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002214:	4b17      	ldr	r3, [pc, #92]	; (8002274 <MX_SPI1_Init+0x64>)
 8002216:	4a18      	ldr	r2, [pc, #96]	; (8002278 <MX_SPI1_Init+0x68>)
 8002218:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800221a:	4b16      	ldr	r3, [pc, #88]	; (8002274 <MX_SPI1_Init+0x64>)
 800221c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002220:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002222:	4b14      	ldr	r3, [pc, #80]	; (8002274 <MX_SPI1_Init+0x64>)
 8002224:	2200      	movs	r2, #0
 8002226:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002228:	4b12      	ldr	r3, [pc, #72]	; (8002274 <MX_SPI1_Init+0x64>)
 800222a:	2200      	movs	r2, #0
 800222c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800222e:	4b11      	ldr	r3, [pc, #68]	; (8002274 <MX_SPI1_Init+0x64>)
 8002230:	2200      	movs	r2, #0
 8002232:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002234:	4b0f      	ldr	r3, [pc, #60]	; (8002274 <MX_SPI1_Init+0x64>)
 8002236:	2200      	movs	r2, #0
 8002238:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800223a:	4b0e      	ldr	r3, [pc, #56]	; (8002274 <MX_SPI1_Init+0x64>)
 800223c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002240:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002242:	4b0c      	ldr	r3, [pc, #48]	; (8002274 <MX_SPI1_Init+0x64>)
 8002244:	2208      	movs	r2, #8
 8002246:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002248:	4b0a      	ldr	r3, [pc, #40]	; (8002274 <MX_SPI1_Init+0x64>)
 800224a:	2200      	movs	r2, #0
 800224c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800224e:	4b09      	ldr	r3, [pc, #36]	; (8002274 <MX_SPI1_Init+0x64>)
 8002250:	2200      	movs	r2, #0
 8002252:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002254:	4b07      	ldr	r3, [pc, #28]	; (8002274 <MX_SPI1_Init+0x64>)
 8002256:	2200      	movs	r2, #0
 8002258:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800225a:	4b06      	ldr	r3, [pc, #24]	; (8002274 <MX_SPI1_Init+0x64>)
 800225c:	220a      	movs	r2, #10
 800225e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002260:	4804      	ldr	r0, [pc, #16]	; (8002274 <MX_SPI1_Init+0x64>)
 8002262:	f002 fc5b 	bl	8004b1c <HAL_SPI_Init>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800226c:	f000 f8ac 	bl	80023c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002270:	bf00      	nop
 8002272:	bd80      	pop	{r7, pc}
 8002274:	200000f0 	.word	0x200000f0
 8002278:	40013000 	.word	0x40013000

0800227c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002280:	4b11      	ldr	r3, [pc, #68]	; (80022c8 <MX_USART1_UART_Init+0x4c>)
 8002282:	4a12      	ldr	r2, [pc, #72]	; (80022cc <MX_USART1_UART_Init+0x50>)
 8002284:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002286:	4b10      	ldr	r3, [pc, #64]	; (80022c8 <MX_USART1_UART_Init+0x4c>)
 8002288:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800228c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800228e:	4b0e      	ldr	r3, [pc, #56]	; (80022c8 <MX_USART1_UART_Init+0x4c>)
 8002290:	2200      	movs	r2, #0
 8002292:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002294:	4b0c      	ldr	r3, [pc, #48]	; (80022c8 <MX_USART1_UART_Init+0x4c>)
 8002296:	2200      	movs	r2, #0
 8002298:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800229a:	4b0b      	ldr	r3, [pc, #44]	; (80022c8 <MX_USART1_UART_Init+0x4c>)
 800229c:	2200      	movs	r2, #0
 800229e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80022a0:	4b09      	ldr	r3, [pc, #36]	; (80022c8 <MX_USART1_UART_Init+0x4c>)
 80022a2:	220c      	movs	r2, #12
 80022a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022a6:	4b08      	ldr	r3, [pc, #32]	; (80022c8 <MX_USART1_UART_Init+0x4c>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80022ac:	4b06      	ldr	r3, [pc, #24]	; (80022c8 <MX_USART1_UART_Init+0x4c>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80022b2:	4805      	ldr	r0, [pc, #20]	; (80022c8 <MX_USART1_UART_Init+0x4c>)
 80022b4:	f002 ffe6 	bl	8005284 <HAL_UART_Init>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80022be:	f000 f883 	bl	80023c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80022c2:	bf00      	nop
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	2000018c 	.word	0x2000018c
 80022cc:	40013800 	.word	0x40013800

080022d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80022d6:	4b0c      	ldr	r3, [pc, #48]	; (8002308 <MX_DMA_Init+0x38>)
 80022d8:	695b      	ldr	r3, [r3, #20]
 80022da:	4a0b      	ldr	r2, [pc, #44]	; (8002308 <MX_DMA_Init+0x38>)
 80022dc:	f043 0301 	orr.w	r3, r3, #1
 80022e0:	6153      	str	r3, [r2, #20]
 80022e2:	4b09      	ldr	r3, [pc, #36]	; (8002308 <MX_DMA_Init+0x38>)
 80022e4:	695b      	ldr	r3, [r3, #20]
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	607b      	str	r3, [r7, #4]
 80022ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80022ee:	2200      	movs	r2, #0
 80022f0:	2100      	movs	r1, #0
 80022f2:	200d      	movs	r0, #13
 80022f4:	f000 fc0d 	bl	8002b12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80022f8:	200d      	movs	r0, #13
 80022fa:	f000 fc26 	bl	8002b4a <HAL_NVIC_EnableIRQ>

}
 80022fe:	bf00      	nop
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	40021000 	.word	0x40021000

0800230c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b088      	sub	sp, #32
 8002310:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002312:	f107 0310 	add.w	r3, r7, #16
 8002316:	2200      	movs	r2, #0
 8002318:	601a      	str	r2, [r3, #0]
 800231a:	605a      	str	r2, [r3, #4]
 800231c:	609a      	str	r2, [r3, #8]
 800231e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002320:	4b26      	ldr	r3, [pc, #152]	; (80023bc <MX_GPIO_Init+0xb0>)
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	4a25      	ldr	r2, [pc, #148]	; (80023bc <MX_GPIO_Init+0xb0>)
 8002326:	f043 0320 	orr.w	r3, r3, #32
 800232a:	6193      	str	r3, [r2, #24]
 800232c:	4b23      	ldr	r3, [pc, #140]	; (80023bc <MX_GPIO_Init+0xb0>)
 800232e:	699b      	ldr	r3, [r3, #24]
 8002330:	f003 0320 	and.w	r3, r3, #32
 8002334:	60fb      	str	r3, [r7, #12]
 8002336:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002338:	4b20      	ldr	r3, [pc, #128]	; (80023bc <MX_GPIO_Init+0xb0>)
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	4a1f      	ldr	r2, [pc, #124]	; (80023bc <MX_GPIO_Init+0xb0>)
 800233e:	f043 0304 	orr.w	r3, r3, #4
 8002342:	6193      	str	r3, [r2, #24]
 8002344:	4b1d      	ldr	r3, [pc, #116]	; (80023bc <MX_GPIO_Init+0xb0>)
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	f003 0304 	and.w	r3, r3, #4
 800234c:	60bb      	str	r3, [r7, #8]
 800234e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002350:	4b1a      	ldr	r3, [pc, #104]	; (80023bc <MX_GPIO_Init+0xb0>)
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	4a19      	ldr	r2, [pc, #100]	; (80023bc <MX_GPIO_Init+0xb0>)
 8002356:	f043 0308 	orr.w	r3, r3, #8
 800235a:	6193      	str	r3, [r2, #24]
 800235c:	4b17      	ldr	r3, [pc, #92]	; (80023bc <MX_GPIO_Init+0xb0>)
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	f003 0308 	and.w	r3, r3, #8
 8002364:	607b      	str	r3, [r7, #4]
 8002366:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RST_Pin|LCD_DC_Pin, GPIO_PIN_SET);
 8002368:	2201      	movs	r2, #1
 800236a:	2150      	movs	r1, #80	; 0x50
 800236c:	4814      	ldr	r0, [pc, #80]	; (80023c0 <MX_GPIO_Init+0xb4>)
 800236e:	f000 ff79 	bl	8003264 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8002372:	2201      	movs	r2, #1
 8002374:	2101      	movs	r1, #1
 8002376:	4813      	ldr	r0, [pc, #76]	; (80023c4 <MX_GPIO_Init+0xb8>)
 8002378:	f000 ff74 	bl	8003264 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_RST_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_DC_Pin;
 800237c:	2350      	movs	r3, #80	; 0x50
 800237e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002380:	2301      	movs	r3, #1
 8002382:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002384:	2301      	movs	r3, #1
 8002386:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002388:	2303      	movs	r3, #3
 800238a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800238c:	f107 0310 	add.w	r3, r7, #16
 8002390:	4619      	mov	r1, r3
 8002392:	480b      	ldr	r0, [pc, #44]	; (80023c0 <MX_GPIO_Init+0xb4>)
 8002394:	f000 fde2 	bl	8002f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 8002398:	2301      	movs	r3, #1
 800239a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800239c:	2301      	movs	r3, #1
 800239e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023a0:	2301      	movs	r3, #1
 80023a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023a4:	2303      	movs	r3, #3
 80023a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 80023a8:	f107 0310 	add.w	r3, r7, #16
 80023ac:	4619      	mov	r1, r3
 80023ae:	4805      	ldr	r0, [pc, #20]	; (80023c4 <MX_GPIO_Init+0xb8>)
 80023b0:	f000 fdd4 	bl	8002f5c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80023b4:	bf00      	nop
 80023b6:	3720      	adds	r7, #32
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	40021000 	.word	0x40021000
 80023c0:	40010800 	.word	0x40010800
 80023c4:	40010c00 	.word	0x40010c00

080023c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023cc:	b672      	cpsid	i
}
 80023ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80023d0:	e7fe      	b.n	80023d0 <Error_Handler+0x8>
	...

080023d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b085      	sub	sp, #20
 80023d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80023da:	4b15      	ldr	r3, [pc, #84]	; (8002430 <HAL_MspInit+0x5c>)
 80023dc:	699b      	ldr	r3, [r3, #24]
 80023de:	4a14      	ldr	r2, [pc, #80]	; (8002430 <HAL_MspInit+0x5c>)
 80023e0:	f043 0301 	orr.w	r3, r3, #1
 80023e4:	6193      	str	r3, [r2, #24]
 80023e6:	4b12      	ldr	r3, [pc, #72]	; (8002430 <HAL_MspInit+0x5c>)
 80023e8:	699b      	ldr	r3, [r3, #24]
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	60bb      	str	r3, [r7, #8]
 80023f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023f2:	4b0f      	ldr	r3, [pc, #60]	; (8002430 <HAL_MspInit+0x5c>)
 80023f4:	69db      	ldr	r3, [r3, #28]
 80023f6:	4a0e      	ldr	r2, [pc, #56]	; (8002430 <HAL_MspInit+0x5c>)
 80023f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023fc:	61d3      	str	r3, [r2, #28]
 80023fe:	4b0c      	ldr	r3, [pc, #48]	; (8002430 <HAL_MspInit+0x5c>)
 8002400:	69db      	ldr	r3, [r3, #28]
 8002402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002406:	607b      	str	r3, [r7, #4]
 8002408:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800240a:	4b0a      	ldr	r3, [pc, #40]	; (8002434 <HAL_MspInit+0x60>)
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	60fb      	str	r3, [r7, #12]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002416:	60fb      	str	r3, [r7, #12]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800241e:	60fb      	str	r3, [r7, #12]
 8002420:	4a04      	ldr	r2, [pc, #16]	; (8002434 <HAL_MspInit+0x60>)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002426:	bf00      	nop
 8002428:	3714      	adds	r7, #20
 800242a:	46bd      	mov	sp, r7
 800242c:	bc80      	pop	{r7}
 800242e:	4770      	bx	lr
 8002430:	40021000 	.word	0x40021000
 8002434:	40010000 	.word	0x40010000

08002438 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b088      	sub	sp, #32
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002440:	f107 0310 	add.w	r3, r7, #16
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]
 8002448:	605a      	str	r2, [r3, #4]
 800244a:	609a      	str	r2, [r3, #8]
 800244c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a15      	ldr	r2, [pc, #84]	; (80024a8 <HAL_I2C_MspInit+0x70>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d123      	bne.n	80024a0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002458:	4b14      	ldr	r3, [pc, #80]	; (80024ac <HAL_I2C_MspInit+0x74>)
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	4a13      	ldr	r2, [pc, #76]	; (80024ac <HAL_I2C_MspInit+0x74>)
 800245e:	f043 0308 	orr.w	r3, r3, #8
 8002462:	6193      	str	r3, [r2, #24]
 8002464:	4b11      	ldr	r3, [pc, #68]	; (80024ac <HAL_I2C_MspInit+0x74>)
 8002466:	699b      	ldr	r3, [r3, #24]
 8002468:	f003 0308 	and.w	r3, r3, #8
 800246c:	60fb      	str	r3, [r7, #12]
 800246e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002470:	23c0      	movs	r3, #192	; 0xc0
 8002472:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002474:	2312      	movs	r3, #18
 8002476:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002478:	2303      	movs	r3, #3
 800247a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800247c:	f107 0310 	add.w	r3, r7, #16
 8002480:	4619      	mov	r1, r3
 8002482:	480b      	ldr	r0, [pc, #44]	; (80024b0 <HAL_I2C_MspInit+0x78>)
 8002484:	f000 fd6a 	bl	8002f5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002488:	4b08      	ldr	r3, [pc, #32]	; (80024ac <HAL_I2C_MspInit+0x74>)
 800248a:	69db      	ldr	r3, [r3, #28]
 800248c:	4a07      	ldr	r2, [pc, #28]	; (80024ac <HAL_I2C_MspInit+0x74>)
 800248e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002492:	61d3      	str	r3, [r2, #28]
 8002494:	4b05      	ldr	r3, [pc, #20]	; (80024ac <HAL_I2C_MspInit+0x74>)
 8002496:	69db      	ldr	r3, [r3, #28]
 8002498:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800249c:	60bb      	str	r3, [r7, #8]
 800249e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80024a0:	bf00      	nop
 80024a2:	3720      	adds	r7, #32
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	40005400 	.word	0x40005400
 80024ac:	40021000 	.word	0x40021000
 80024b0:	40010c00 	.word	0x40010c00

080024b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b088      	sub	sp, #32
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024bc:	f107 0310 	add.w	r3, r7, #16
 80024c0:	2200      	movs	r2, #0
 80024c2:	601a      	str	r2, [r3, #0]
 80024c4:	605a      	str	r2, [r3, #4]
 80024c6:	609a      	str	r2, [r3, #8]
 80024c8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a28      	ldr	r2, [pc, #160]	; (8002570 <HAL_SPI_MspInit+0xbc>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d149      	bne.n	8002568 <HAL_SPI_MspInit+0xb4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80024d4:	4b27      	ldr	r3, [pc, #156]	; (8002574 <HAL_SPI_MspInit+0xc0>)
 80024d6:	699b      	ldr	r3, [r3, #24]
 80024d8:	4a26      	ldr	r2, [pc, #152]	; (8002574 <HAL_SPI_MspInit+0xc0>)
 80024da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80024de:	6193      	str	r3, [r2, #24]
 80024e0:	4b24      	ldr	r3, [pc, #144]	; (8002574 <HAL_SPI_MspInit+0xc0>)
 80024e2:	699b      	ldr	r3, [r3, #24]
 80024e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024e8:	60fb      	str	r3, [r7, #12]
 80024ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ec:	4b21      	ldr	r3, [pc, #132]	; (8002574 <HAL_SPI_MspInit+0xc0>)
 80024ee:	699b      	ldr	r3, [r3, #24]
 80024f0:	4a20      	ldr	r2, [pc, #128]	; (8002574 <HAL_SPI_MspInit+0xc0>)
 80024f2:	f043 0304 	orr.w	r3, r3, #4
 80024f6:	6193      	str	r3, [r2, #24]
 80024f8:	4b1e      	ldr	r3, [pc, #120]	; (8002574 <HAL_SPI_MspInit+0xc0>)
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	f003 0304 	and.w	r3, r3, #4
 8002500:	60bb      	str	r3, [r7, #8]
 8002502:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002504:	23a0      	movs	r3, #160	; 0xa0
 8002506:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002508:	2302      	movs	r3, #2
 800250a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800250c:	2303      	movs	r3, #3
 800250e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002510:	f107 0310 	add.w	r3, r7, #16
 8002514:	4619      	mov	r1, r3
 8002516:	4818      	ldr	r0, [pc, #96]	; (8002578 <HAL_SPI_MspInit+0xc4>)
 8002518:	f000 fd20 	bl	8002f5c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 800251c:	4b17      	ldr	r3, [pc, #92]	; (800257c <HAL_SPI_MspInit+0xc8>)
 800251e:	4a18      	ldr	r2, [pc, #96]	; (8002580 <HAL_SPI_MspInit+0xcc>)
 8002520:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002522:	4b16      	ldr	r3, [pc, #88]	; (800257c <HAL_SPI_MspInit+0xc8>)
 8002524:	2210      	movs	r2, #16
 8002526:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002528:	4b14      	ldr	r3, [pc, #80]	; (800257c <HAL_SPI_MspInit+0xc8>)
 800252a:	2200      	movs	r2, #0
 800252c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800252e:	4b13      	ldr	r3, [pc, #76]	; (800257c <HAL_SPI_MspInit+0xc8>)
 8002530:	2280      	movs	r2, #128	; 0x80
 8002532:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002534:	4b11      	ldr	r3, [pc, #68]	; (800257c <HAL_SPI_MspInit+0xc8>)
 8002536:	2200      	movs	r2, #0
 8002538:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800253a:	4b10      	ldr	r3, [pc, #64]	; (800257c <HAL_SPI_MspInit+0xc8>)
 800253c:	2200      	movs	r2, #0
 800253e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002540:	4b0e      	ldr	r3, [pc, #56]	; (800257c <HAL_SPI_MspInit+0xc8>)
 8002542:	2200      	movs	r2, #0
 8002544:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002546:	4b0d      	ldr	r3, [pc, #52]	; (800257c <HAL_SPI_MspInit+0xc8>)
 8002548:	2200      	movs	r2, #0
 800254a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800254c:	480b      	ldr	r0, [pc, #44]	; (800257c <HAL_SPI_MspInit+0xc8>)
 800254e:	f000 fb17 	bl	8002b80 <HAL_DMA_Init>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d001      	beq.n	800255c <HAL_SPI_MspInit+0xa8>
    {
      Error_Handler();
 8002558:	f7ff ff36 	bl	80023c8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	4a07      	ldr	r2, [pc, #28]	; (800257c <HAL_SPI_MspInit+0xc8>)
 8002560:	649a      	str	r2, [r3, #72]	; 0x48
 8002562:	4a06      	ldr	r2, [pc, #24]	; (800257c <HAL_SPI_MspInit+0xc8>)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002568:	bf00      	nop
 800256a:	3720      	adds	r7, #32
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	40013000 	.word	0x40013000
 8002574:	40021000 	.word	0x40021000
 8002578:	40010800 	.word	0x40010800
 800257c:	20000148 	.word	0x20000148
 8002580:	40020030 	.word	0x40020030

08002584 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b088      	sub	sp, #32
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800258c:	f107 0310 	add.w	r3, r7, #16
 8002590:	2200      	movs	r2, #0
 8002592:	601a      	str	r2, [r3, #0]
 8002594:	605a      	str	r2, [r3, #4]
 8002596:	609a      	str	r2, [r3, #8]
 8002598:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a1c      	ldr	r2, [pc, #112]	; (8002610 <HAL_UART_MspInit+0x8c>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d131      	bne.n	8002608 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80025a4:	4b1b      	ldr	r3, [pc, #108]	; (8002614 <HAL_UART_MspInit+0x90>)
 80025a6:	699b      	ldr	r3, [r3, #24]
 80025a8:	4a1a      	ldr	r2, [pc, #104]	; (8002614 <HAL_UART_MspInit+0x90>)
 80025aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025ae:	6193      	str	r3, [r2, #24]
 80025b0:	4b18      	ldr	r3, [pc, #96]	; (8002614 <HAL_UART_MspInit+0x90>)
 80025b2:	699b      	ldr	r3, [r3, #24]
 80025b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025b8:	60fb      	str	r3, [r7, #12]
 80025ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025bc:	4b15      	ldr	r3, [pc, #84]	; (8002614 <HAL_UART_MspInit+0x90>)
 80025be:	699b      	ldr	r3, [r3, #24]
 80025c0:	4a14      	ldr	r2, [pc, #80]	; (8002614 <HAL_UART_MspInit+0x90>)
 80025c2:	f043 0304 	orr.w	r3, r3, #4
 80025c6:	6193      	str	r3, [r2, #24]
 80025c8:	4b12      	ldr	r3, [pc, #72]	; (8002614 <HAL_UART_MspInit+0x90>)
 80025ca:	699b      	ldr	r3, [r3, #24]
 80025cc:	f003 0304 	and.w	r3, r3, #4
 80025d0:	60bb      	str	r3, [r7, #8]
 80025d2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80025d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025da:	2302      	movs	r3, #2
 80025dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025de:	2303      	movs	r3, #3
 80025e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025e2:	f107 0310 	add.w	r3, r7, #16
 80025e6:	4619      	mov	r1, r3
 80025e8:	480b      	ldr	r0, [pc, #44]	; (8002618 <HAL_UART_MspInit+0x94>)
 80025ea:	f000 fcb7 	bl	8002f5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80025ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025f4:	2300      	movs	r3, #0
 80025f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f8:	2300      	movs	r3, #0
 80025fa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025fc:	f107 0310 	add.w	r3, r7, #16
 8002600:	4619      	mov	r1, r3
 8002602:	4805      	ldr	r0, [pc, #20]	; (8002618 <HAL_UART_MspInit+0x94>)
 8002604:	f000 fcaa 	bl	8002f5c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002608:	bf00      	nop
 800260a:	3720      	adds	r7, #32
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	40013800 	.word	0x40013800
 8002614:	40021000 	.word	0x40021000
 8002618:	40010800 	.word	0x40010800

0800261c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002620:	e7fe      	b.n	8002620 <NMI_Handler+0x4>

08002622 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002622:	b480      	push	{r7}
 8002624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002626:	e7fe      	b.n	8002626 <HardFault_Handler+0x4>

08002628 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800262c:	e7fe      	b.n	800262c <MemManage_Handler+0x4>

0800262e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800262e:	b480      	push	{r7}
 8002630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002632:	e7fe      	b.n	8002632 <BusFault_Handler+0x4>

08002634 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002638:	e7fe      	b.n	8002638 <UsageFault_Handler+0x4>

0800263a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800263a:	b480      	push	{r7}
 800263c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800263e:	bf00      	nop
 8002640:	46bd      	mov	sp, r7
 8002642:	bc80      	pop	{r7}
 8002644:	4770      	bx	lr

08002646 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002646:	b480      	push	{r7}
 8002648:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800264a:	bf00      	nop
 800264c:	46bd      	mov	sp, r7
 800264e:	bc80      	pop	{r7}
 8002650:	4770      	bx	lr

08002652 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002652:	b480      	push	{r7}
 8002654:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002656:	bf00      	nop
 8002658:	46bd      	mov	sp, r7
 800265a:	bc80      	pop	{r7}
 800265c:	4770      	bx	lr

0800265e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800265e:	b580      	push	{r7, lr}
 8002660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002662:	f000 f93f 	bl	80028e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002666:	bf00      	nop
 8002668:	bd80      	pop	{r7, pc}
	...

0800266c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002670:	4802      	ldr	r0, [pc, #8]	; (800267c <DMA1_Channel3_IRQHandler+0x10>)
 8002672:	f000 fb3f 	bl	8002cf4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002676:	bf00      	nop
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	20000148 	.word	0x20000148

08002680 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  return 1;
 8002684:	2301      	movs	r3, #1
}
 8002686:	4618      	mov	r0, r3
 8002688:	46bd      	mov	sp, r7
 800268a:	bc80      	pop	{r7}
 800268c:	4770      	bx	lr

0800268e <_kill>:

int _kill(int pid, int sig)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b082      	sub	sp, #8
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
 8002696:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002698:	f002 ffc4 	bl	8005624 <__errno>
 800269c:	4603      	mov	r3, r0
 800269e:	2216      	movs	r2, #22
 80026a0:	601a      	str	r2, [r3, #0]
  return -1;
 80026a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}

080026ae <_exit>:

void _exit (int status)
{
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b082      	sub	sp, #8
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80026b6:	f04f 31ff 	mov.w	r1, #4294967295
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f7ff ffe7 	bl	800268e <_kill>
  while (1) {}    /* Make sure we hang here */
 80026c0:	e7fe      	b.n	80026c0 <_exit+0x12>

080026c2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b086      	sub	sp, #24
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	60f8      	str	r0, [r7, #12]
 80026ca:	60b9      	str	r1, [r7, #8]
 80026cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026ce:	2300      	movs	r3, #0
 80026d0:	617b      	str	r3, [r7, #20]
 80026d2:	e00a      	b.n	80026ea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80026d4:	f3af 8000 	nop.w
 80026d8:	4601      	mov	r1, r0
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	1c5a      	adds	r2, r3, #1
 80026de:	60ba      	str	r2, [r7, #8]
 80026e0:	b2ca      	uxtb	r2, r1
 80026e2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	3301      	adds	r3, #1
 80026e8:	617b      	str	r3, [r7, #20]
 80026ea:	697a      	ldr	r2, [r7, #20]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	dbf0      	blt.n	80026d4 <_read+0x12>
  }

  return len;
 80026f2:	687b      	ldr	r3, [r7, #4]
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3718      	adds	r7, #24
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b086      	sub	sp, #24
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002708:	2300      	movs	r3, #0
 800270a:	617b      	str	r3, [r7, #20]
 800270c:	e009      	b.n	8002722 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	1c5a      	adds	r2, r3, #1
 8002712:	60ba      	str	r2, [r7, #8]
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	4618      	mov	r0, r3
 8002718:	f7fe ff7a 	bl	8001610 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	3301      	adds	r3, #1
 8002720:	617b      	str	r3, [r7, #20]
 8002722:	697a      	ldr	r2, [r7, #20]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	429a      	cmp	r2, r3
 8002728:	dbf1      	blt.n	800270e <_write+0x12>
  }
  return len;
 800272a:	687b      	ldr	r3, [r7, #4]
}
 800272c:	4618      	mov	r0, r3
 800272e:	3718      	adds	r7, #24
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}

08002734 <_close>:

int _close(int file)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800273c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002740:	4618      	mov	r0, r3
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	bc80      	pop	{r7}
 8002748:	4770      	bx	lr

0800274a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800274a:	b480      	push	{r7}
 800274c:	b083      	sub	sp, #12
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
 8002752:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800275a:	605a      	str	r2, [r3, #4]
  return 0;
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	370c      	adds	r7, #12
 8002762:	46bd      	mov	sp, r7
 8002764:	bc80      	pop	{r7}
 8002766:	4770      	bx	lr

08002768 <_isatty>:

int _isatty(int file)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002770:	2301      	movs	r3, #1
}
 8002772:	4618      	mov	r0, r3
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	bc80      	pop	{r7}
 800277a:	4770      	bx	lr

0800277c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800277c:	b480      	push	{r7}
 800277e:	b085      	sub	sp, #20
 8002780:	af00      	add	r7, sp, #0
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3714      	adds	r7, #20
 800278e:	46bd      	mov	sp, r7
 8002790:	bc80      	pop	{r7}
 8002792:	4770      	bx	lr

08002794 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b086      	sub	sp, #24
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800279c:	4a14      	ldr	r2, [pc, #80]	; (80027f0 <_sbrk+0x5c>)
 800279e:	4b15      	ldr	r3, [pc, #84]	; (80027f4 <_sbrk+0x60>)
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027a8:	4b13      	ldr	r3, [pc, #76]	; (80027f8 <_sbrk+0x64>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d102      	bne.n	80027b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027b0:	4b11      	ldr	r3, [pc, #68]	; (80027f8 <_sbrk+0x64>)
 80027b2:	4a12      	ldr	r2, [pc, #72]	; (80027fc <_sbrk+0x68>)
 80027b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027b6:	4b10      	ldr	r3, [pc, #64]	; (80027f8 <_sbrk+0x64>)
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4413      	add	r3, r2
 80027be:	693a      	ldr	r2, [r7, #16]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d207      	bcs.n	80027d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027c4:	f002 ff2e 	bl	8005624 <__errno>
 80027c8:	4603      	mov	r3, r0
 80027ca:	220c      	movs	r2, #12
 80027cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027ce:	f04f 33ff 	mov.w	r3, #4294967295
 80027d2:	e009      	b.n	80027e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027d4:	4b08      	ldr	r3, [pc, #32]	; (80027f8 <_sbrk+0x64>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027da:	4b07      	ldr	r3, [pc, #28]	; (80027f8 <_sbrk+0x64>)
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4413      	add	r3, r2
 80027e2:	4a05      	ldr	r2, [pc, #20]	; (80027f8 <_sbrk+0x64>)
 80027e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027e6:	68fb      	ldr	r3, [r7, #12]
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3718      	adds	r7, #24
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	20005000 	.word	0x20005000
 80027f4:	00000400 	.word	0x00000400
 80027f8:	20000500 	.word	0x20000500
 80027fc:	20000518 	.word	0x20000518

08002800 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002804:	bf00      	nop
 8002806:	46bd      	mov	sp, r7
 8002808:	bc80      	pop	{r7}
 800280a:	4770      	bx	lr

0800280c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800280c:	f7ff fff8 	bl	8002800 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002810:	480b      	ldr	r0, [pc, #44]	; (8002840 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002812:	490c      	ldr	r1, [pc, #48]	; (8002844 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002814:	4a0c      	ldr	r2, [pc, #48]	; (8002848 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002816:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002818:	e002      	b.n	8002820 <LoopCopyDataInit>

0800281a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800281a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800281c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800281e:	3304      	adds	r3, #4

08002820 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002820:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002822:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002824:	d3f9      	bcc.n	800281a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002826:	4a09      	ldr	r2, [pc, #36]	; (800284c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002828:	4c09      	ldr	r4, [pc, #36]	; (8002850 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800282a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800282c:	e001      	b.n	8002832 <LoopFillZerobss>

0800282e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800282e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002830:	3204      	adds	r2, #4

08002832 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002832:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002834:	d3fb      	bcc.n	800282e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002836:	f002 fefb 	bl	8005630 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800283a:	f7fe fefd 	bl	8001638 <main>
  bx lr
 800283e:	4770      	bx	lr
  ldr r0, =_sdata
 8002840:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002844:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002848:	080069d0 	.word	0x080069d0
  ldr r2, =_sbss
 800284c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002850:	20000518 	.word	0x20000518

08002854 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002854:	e7fe      	b.n	8002854 <ADC1_2_IRQHandler>
	...

08002858 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800285c:	4b08      	ldr	r3, [pc, #32]	; (8002880 <HAL_Init+0x28>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a07      	ldr	r2, [pc, #28]	; (8002880 <HAL_Init+0x28>)
 8002862:	f043 0310 	orr.w	r3, r3, #16
 8002866:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002868:	2003      	movs	r0, #3
 800286a:	f000 f947 	bl	8002afc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800286e:	200f      	movs	r0, #15
 8002870:	f000 f808 	bl	8002884 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002874:	f7ff fdae 	bl	80023d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	40022000 	.word	0x40022000

08002884 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800288c:	4b12      	ldr	r3, [pc, #72]	; (80028d8 <HAL_InitTick+0x54>)
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	4b12      	ldr	r3, [pc, #72]	; (80028dc <HAL_InitTick+0x58>)
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	4619      	mov	r1, r3
 8002896:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800289a:	fbb3 f3f1 	udiv	r3, r3, r1
 800289e:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a2:	4618      	mov	r0, r3
 80028a4:	f000 f95f 	bl	8002b66 <HAL_SYSTICK_Config>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e00e      	b.n	80028d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2b0f      	cmp	r3, #15
 80028b6:	d80a      	bhi.n	80028ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028b8:	2200      	movs	r2, #0
 80028ba:	6879      	ldr	r1, [r7, #4]
 80028bc:	f04f 30ff 	mov.w	r0, #4294967295
 80028c0:	f000 f927 	bl	8002b12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028c4:	4a06      	ldr	r2, [pc, #24]	; (80028e0 <HAL_InitTick+0x5c>)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028ca:	2300      	movs	r3, #0
 80028cc:	e000      	b.n	80028d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3708      	adds	r7, #8
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	20000004 	.word	0x20000004
 80028dc:	2000000c 	.word	0x2000000c
 80028e0:	20000008 	.word	0x20000008

080028e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028e8:	4b05      	ldr	r3, [pc, #20]	; (8002900 <HAL_IncTick+0x1c>)
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	461a      	mov	r2, r3
 80028ee:	4b05      	ldr	r3, [pc, #20]	; (8002904 <HAL_IncTick+0x20>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4413      	add	r3, r2
 80028f4:	4a03      	ldr	r2, [pc, #12]	; (8002904 <HAL_IncTick+0x20>)
 80028f6:	6013      	str	r3, [r2, #0]
}
 80028f8:	bf00      	nop
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bc80      	pop	{r7}
 80028fe:	4770      	bx	lr
 8002900:	2000000c 	.word	0x2000000c
 8002904:	20000504 	.word	0x20000504

08002908 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0
  return uwTick;
 800290c:	4b02      	ldr	r3, [pc, #8]	; (8002918 <HAL_GetTick+0x10>)
 800290e:	681b      	ldr	r3, [r3, #0]
}
 8002910:	4618      	mov	r0, r3
 8002912:	46bd      	mov	sp, r7
 8002914:	bc80      	pop	{r7}
 8002916:	4770      	bx	lr
 8002918:	20000504 	.word	0x20000504

0800291c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002924:	f7ff fff0 	bl	8002908 <HAL_GetTick>
 8002928:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002934:	d005      	beq.n	8002942 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002936:	4b0a      	ldr	r3, [pc, #40]	; (8002960 <HAL_Delay+0x44>)
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	461a      	mov	r2, r3
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	4413      	add	r3, r2
 8002940:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002942:	bf00      	nop
 8002944:	f7ff ffe0 	bl	8002908 <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	68fa      	ldr	r2, [r7, #12]
 8002950:	429a      	cmp	r2, r3
 8002952:	d8f7      	bhi.n	8002944 <HAL_Delay+0x28>
  {
  }
}
 8002954:	bf00      	nop
 8002956:	bf00      	nop
 8002958:	3710      	adds	r7, #16
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	2000000c 	.word	0x2000000c

08002964 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002964:	b480      	push	{r7}
 8002966:	b085      	sub	sp, #20
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f003 0307 	and.w	r3, r3, #7
 8002972:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002974:	4b0c      	ldr	r3, [pc, #48]	; (80029a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800297a:	68ba      	ldr	r2, [r7, #8]
 800297c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002980:	4013      	ands	r3, r2
 8002982:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800298c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002990:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002994:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002996:	4a04      	ldr	r2, [pc, #16]	; (80029a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	60d3      	str	r3, [r2, #12]
}
 800299c:	bf00      	nop
 800299e:	3714      	adds	r7, #20
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bc80      	pop	{r7}
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	e000ed00 	.word	0xe000ed00

080029ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029b0:	4b04      	ldr	r3, [pc, #16]	; (80029c4 <__NVIC_GetPriorityGrouping+0x18>)
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	0a1b      	lsrs	r3, r3, #8
 80029b6:	f003 0307 	and.w	r3, r3, #7
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	46bd      	mov	sp, r7
 80029be:	bc80      	pop	{r7}
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	e000ed00 	.word	0xe000ed00

080029c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	4603      	mov	r3, r0
 80029d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	db0b      	blt.n	80029f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029da:	79fb      	ldrb	r3, [r7, #7]
 80029dc:	f003 021f 	and.w	r2, r3, #31
 80029e0:	4906      	ldr	r1, [pc, #24]	; (80029fc <__NVIC_EnableIRQ+0x34>)
 80029e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e6:	095b      	lsrs	r3, r3, #5
 80029e8:	2001      	movs	r0, #1
 80029ea:	fa00 f202 	lsl.w	r2, r0, r2
 80029ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029f2:	bf00      	nop
 80029f4:	370c      	adds	r7, #12
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bc80      	pop	{r7}
 80029fa:	4770      	bx	lr
 80029fc:	e000e100 	.word	0xe000e100

08002a00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	4603      	mov	r3, r0
 8002a08:	6039      	str	r1, [r7, #0]
 8002a0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	db0a      	blt.n	8002a2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	b2da      	uxtb	r2, r3
 8002a18:	490c      	ldr	r1, [pc, #48]	; (8002a4c <__NVIC_SetPriority+0x4c>)
 8002a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a1e:	0112      	lsls	r2, r2, #4
 8002a20:	b2d2      	uxtb	r2, r2
 8002a22:	440b      	add	r3, r1
 8002a24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a28:	e00a      	b.n	8002a40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	b2da      	uxtb	r2, r3
 8002a2e:	4908      	ldr	r1, [pc, #32]	; (8002a50 <__NVIC_SetPriority+0x50>)
 8002a30:	79fb      	ldrb	r3, [r7, #7]
 8002a32:	f003 030f 	and.w	r3, r3, #15
 8002a36:	3b04      	subs	r3, #4
 8002a38:	0112      	lsls	r2, r2, #4
 8002a3a:	b2d2      	uxtb	r2, r2
 8002a3c:	440b      	add	r3, r1
 8002a3e:	761a      	strb	r2, [r3, #24]
}
 8002a40:	bf00      	nop
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bc80      	pop	{r7}
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	e000e100 	.word	0xe000e100
 8002a50:	e000ed00 	.word	0xe000ed00

08002a54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b089      	sub	sp, #36	; 0x24
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f003 0307 	and.w	r3, r3, #7
 8002a66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	f1c3 0307 	rsb	r3, r3, #7
 8002a6e:	2b04      	cmp	r3, #4
 8002a70:	bf28      	it	cs
 8002a72:	2304      	movcs	r3, #4
 8002a74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	3304      	adds	r3, #4
 8002a7a:	2b06      	cmp	r3, #6
 8002a7c:	d902      	bls.n	8002a84 <NVIC_EncodePriority+0x30>
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	3b03      	subs	r3, #3
 8002a82:	e000      	b.n	8002a86 <NVIC_EncodePriority+0x32>
 8002a84:	2300      	movs	r3, #0
 8002a86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a88:	f04f 32ff 	mov.w	r2, #4294967295
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a92:	43da      	mvns	r2, r3
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	401a      	ands	r2, r3
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a9c:	f04f 31ff 	mov.w	r1, #4294967295
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa6:	43d9      	mvns	r1, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aac:	4313      	orrs	r3, r2
         );
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3724      	adds	r7, #36	; 0x24
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bc80      	pop	{r7}
 8002ab6:	4770      	bx	lr

08002ab8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ac8:	d301      	bcc.n	8002ace <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002aca:	2301      	movs	r3, #1
 8002acc:	e00f      	b.n	8002aee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ace:	4a0a      	ldr	r2, [pc, #40]	; (8002af8 <SysTick_Config+0x40>)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ad6:	210f      	movs	r1, #15
 8002ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8002adc:	f7ff ff90 	bl	8002a00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ae0:	4b05      	ldr	r3, [pc, #20]	; (8002af8 <SysTick_Config+0x40>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ae6:	4b04      	ldr	r3, [pc, #16]	; (8002af8 <SysTick_Config+0x40>)
 8002ae8:	2207      	movs	r2, #7
 8002aea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	e000e010 	.word	0xe000e010

08002afc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f7ff ff2d 	bl	8002964 <__NVIC_SetPriorityGrouping>
}
 8002b0a:	bf00      	nop
 8002b0c:	3708      	adds	r7, #8
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}

08002b12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b12:	b580      	push	{r7, lr}
 8002b14:	b086      	sub	sp, #24
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	4603      	mov	r3, r0
 8002b1a:	60b9      	str	r1, [r7, #8]
 8002b1c:	607a      	str	r2, [r7, #4]
 8002b1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b20:	2300      	movs	r3, #0
 8002b22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b24:	f7ff ff42 	bl	80029ac <__NVIC_GetPriorityGrouping>
 8002b28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	68b9      	ldr	r1, [r7, #8]
 8002b2e:	6978      	ldr	r0, [r7, #20]
 8002b30:	f7ff ff90 	bl	8002a54 <NVIC_EncodePriority>
 8002b34:	4602      	mov	r2, r0
 8002b36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b3a:	4611      	mov	r1, r2
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7ff ff5f 	bl	8002a00 <__NVIC_SetPriority>
}
 8002b42:	bf00      	nop
 8002b44:	3718      	adds	r7, #24
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b4a:	b580      	push	{r7, lr}
 8002b4c:	b082      	sub	sp, #8
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	4603      	mov	r3, r0
 8002b52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7ff ff35 	bl	80029c8 <__NVIC_EnableIRQ>
}
 8002b5e:	bf00      	nop
 8002b60:	3708      	adds	r7, #8
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b082      	sub	sp, #8
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f7ff ffa2 	bl	8002ab8 <SysTick_Config>
 8002b74:	4603      	mov	r3, r0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3708      	adds	r7, #8
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
	...

08002b80 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b085      	sub	sp, #20
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d101      	bne.n	8002b96 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e043      	b.n	8002c1e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	4b22      	ldr	r3, [pc, #136]	; (8002c28 <HAL_DMA_Init+0xa8>)
 8002b9e:	4413      	add	r3, r2
 8002ba0:	4a22      	ldr	r2, [pc, #136]	; (8002c2c <HAL_DMA_Init+0xac>)
 8002ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba6:	091b      	lsrs	r3, r3, #4
 8002ba8:	009a      	lsls	r2, r3, #2
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a1f      	ldr	r2, [pc, #124]	; (8002c30 <HAL_DMA_Init+0xb0>)
 8002bb2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2202      	movs	r2, #2
 8002bb8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002bca:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002bce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002bd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002be4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bf0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	69db      	ldr	r3, [r3, #28]
 8002bf6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	68fa      	ldr	r2, [r7, #12]
 8002c04:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3714      	adds	r7, #20
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bc80      	pop	{r7}
 8002c26:	4770      	bx	lr
 8002c28:	bffdfff8 	.word	0xbffdfff8
 8002c2c:	cccccccd 	.word	0xcccccccd
 8002c30:	40020000 	.word	0x40020000

08002c34 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b086      	sub	sp, #24
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	607a      	str	r2, [r7, #4]
 8002c40:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c42:	2300      	movs	r3, #0
 8002c44:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d101      	bne.n	8002c54 <HAL_DMA_Start_IT+0x20>
 8002c50:	2302      	movs	r3, #2
 8002c52:	e04b      	b.n	8002cec <HAL_DMA_Start_IT+0xb8>
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d13a      	bne.n	8002cde <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2202      	movs	r2, #2
 8002c6c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2200      	movs	r2, #0
 8002c74:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f022 0201 	bic.w	r2, r2, #1
 8002c84:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	68b9      	ldr	r1, [r7, #8]
 8002c8c:	68f8      	ldr	r0, [r7, #12]
 8002c8e:	f000 f937 	bl	8002f00 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d008      	beq.n	8002cac <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f042 020e 	orr.w	r2, r2, #14
 8002ca8:	601a      	str	r2, [r3, #0]
 8002caa:	e00f      	b.n	8002ccc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f022 0204 	bic.w	r2, r2, #4
 8002cba:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f042 020a 	orr.w	r2, r2, #10
 8002cca:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f042 0201 	orr.w	r2, r2, #1
 8002cda:	601a      	str	r2, [r3, #0]
 8002cdc:	e005      	b.n	8002cea <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002ce6:	2302      	movs	r3, #2
 8002ce8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002cea:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3718      	adds	r7, #24
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d10:	2204      	movs	r2, #4
 8002d12:	409a      	lsls	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	4013      	ands	r3, r2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d04f      	beq.n	8002dbc <HAL_DMA_IRQHandler+0xc8>
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	f003 0304 	and.w	r3, r3, #4
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d04a      	beq.n	8002dbc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0320 	and.w	r3, r3, #32
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d107      	bne.n	8002d44 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f022 0204 	bic.w	r2, r2, #4
 8002d42:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a66      	ldr	r2, [pc, #408]	; (8002ee4 <HAL_DMA_IRQHandler+0x1f0>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d029      	beq.n	8002da2 <HAL_DMA_IRQHandler+0xae>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a65      	ldr	r2, [pc, #404]	; (8002ee8 <HAL_DMA_IRQHandler+0x1f4>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d022      	beq.n	8002d9e <HAL_DMA_IRQHandler+0xaa>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a63      	ldr	r2, [pc, #396]	; (8002eec <HAL_DMA_IRQHandler+0x1f8>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d01a      	beq.n	8002d98 <HAL_DMA_IRQHandler+0xa4>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a62      	ldr	r2, [pc, #392]	; (8002ef0 <HAL_DMA_IRQHandler+0x1fc>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d012      	beq.n	8002d92 <HAL_DMA_IRQHandler+0x9e>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a60      	ldr	r2, [pc, #384]	; (8002ef4 <HAL_DMA_IRQHandler+0x200>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d00a      	beq.n	8002d8c <HAL_DMA_IRQHandler+0x98>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a5f      	ldr	r2, [pc, #380]	; (8002ef8 <HAL_DMA_IRQHandler+0x204>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d102      	bne.n	8002d86 <HAL_DMA_IRQHandler+0x92>
 8002d80:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002d84:	e00e      	b.n	8002da4 <HAL_DMA_IRQHandler+0xb0>
 8002d86:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002d8a:	e00b      	b.n	8002da4 <HAL_DMA_IRQHandler+0xb0>
 8002d8c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002d90:	e008      	b.n	8002da4 <HAL_DMA_IRQHandler+0xb0>
 8002d92:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d96:	e005      	b.n	8002da4 <HAL_DMA_IRQHandler+0xb0>
 8002d98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d9c:	e002      	b.n	8002da4 <HAL_DMA_IRQHandler+0xb0>
 8002d9e:	2340      	movs	r3, #64	; 0x40
 8002da0:	e000      	b.n	8002da4 <HAL_DMA_IRQHandler+0xb0>
 8002da2:	2304      	movs	r3, #4
 8002da4:	4a55      	ldr	r2, [pc, #340]	; (8002efc <HAL_DMA_IRQHandler+0x208>)
 8002da6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	f000 8094 	beq.w	8002eda <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002dba:	e08e      	b.n	8002eda <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc0:	2202      	movs	r2, #2
 8002dc2:	409a      	lsls	r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d056      	beq.n	8002e7a <HAL_DMA_IRQHandler+0x186>
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d051      	beq.n	8002e7a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0320 	and.w	r3, r3, #32
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d10b      	bne.n	8002dfc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f022 020a 	bic.w	r2, r2, #10
 8002df2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a38      	ldr	r2, [pc, #224]	; (8002ee4 <HAL_DMA_IRQHandler+0x1f0>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d029      	beq.n	8002e5a <HAL_DMA_IRQHandler+0x166>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a37      	ldr	r2, [pc, #220]	; (8002ee8 <HAL_DMA_IRQHandler+0x1f4>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d022      	beq.n	8002e56 <HAL_DMA_IRQHandler+0x162>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a35      	ldr	r2, [pc, #212]	; (8002eec <HAL_DMA_IRQHandler+0x1f8>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d01a      	beq.n	8002e50 <HAL_DMA_IRQHandler+0x15c>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a34      	ldr	r2, [pc, #208]	; (8002ef0 <HAL_DMA_IRQHandler+0x1fc>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d012      	beq.n	8002e4a <HAL_DMA_IRQHandler+0x156>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a32      	ldr	r2, [pc, #200]	; (8002ef4 <HAL_DMA_IRQHandler+0x200>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d00a      	beq.n	8002e44 <HAL_DMA_IRQHandler+0x150>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a31      	ldr	r2, [pc, #196]	; (8002ef8 <HAL_DMA_IRQHandler+0x204>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d102      	bne.n	8002e3e <HAL_DMA_IRQHandler+0x14a>
 8002e38:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e3c:	e00e      	b.n	8002e5c <HAL_DMA_IRQHandler+0x168>
 8002e3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e42:	e00b      	b.n	8002e5c <HAL_DMA_IRQHandler+0x168>
 8002e44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e48:	e008      	b.n	8002e5c <HAL_DMA_IRQHandler+0x168>
 8002e4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e4e:	e005      	b.n	8002e5c <HAL_DMA_IRQHandler+0x168>
 8002e50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e54:	e002      	b.n	8002e5c <HAL_DMA_IRQHandler+0x168>
 8002e56:	2320      	movs	r3, #32
 8002e58:	e000      	b.n	8002e5c <HAL_DMA_IRQHandler+0x168>
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	4a27      	ldr	r2, [pc, #156]	; (8002efc <HAL_DMA_IRQHandler+0x208>)
 8002e5e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d034      	beq.n	8002eda <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002e78:	e02f      	b.n	8002eda <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7e:	2208      	movs	r2, #8
 8002e80:	409a      	lsls	r2, r3
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	4013      	ands	r3, r2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d028      	beq.n	8002edc <HAL_DMA_IRQHandler+0x1e8>
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	f003 0308 	and.w	r3, r3, #8
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d023      	beq.n	8002edc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f022 020e 	bic.w	r2, r2, #14
 8002ea2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eac:	2101      	movs	r1, #1
 8002eae:	fa01 f202 	lsl.w	r2, r1, r2
 8002eb2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d004      	beq.n	8002edc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	4798      	blx	r3
    }
  }
  return;
 8002eda:	bf00      	nop
 8002edc:	bf00      	nop
}
 8002ede:	3710      	adds	r7, #16
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	40020008 	.word	0x40020008
 8002ee8:	4002001c 	.word	0x4002001c
 8002eec:	40020030 	.word	0x40020030
 8002ef0:	40020044 	.word	0x40020044
 8002ef4:	40020058 	.word	0x40020058
 8002ef8:	4002006c 	.word	0x4002006c
 8002efc:	40020000 	.word	0x40020000

08002f00 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b085      	sub	sp, #20
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	607a      	str	r2, [r7, #4]
 8002f0c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f16:	2101      	movs	r1, #1
 8002f18:	fa01 f202 	lsl.w	r2, r1, r2
 8002f1c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	683a      	ldr	r2, [r7, #0]
 8002f24:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	2b10      	cmp	r3, #16
 8002f2c:	d108      	bne.n	8002f40 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68ba      	ldr	r2, [r7, #8]
 8002f3c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002f3e:	e007      	b.n	8002f50 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68ba      	ldr	r2, [r7, #8]
 8002f46:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	60da      	str	r2, [r3, #12]
}
 8002f50:	bf00      	nop
 8002f52:	3714      	adds	r7, #20
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bc80      	pop	{r7}
 8002f58:	4770      	bx	lr
	...

08002f5c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b08b      	sub	sp, #44	; 0x2c
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f66:	2300      	movs	r3, #0
 8002f68:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f6e:	e169      	b.n	8003244 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002f70:	2201      	movs	r2, #1
 8002f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f74:	fa02 f303 	lsl.w	r3, r2, r3
 8002f78:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	69fa      	ldr	r2, [r7, #28]
 8002f80:	4013      	ands	r3, r2
 8002f82:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	f040 8158 	bne.w	800323e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	4a9a      	ldr	r2, [pc, #616]	; (80031fc <HAL_GPIO_Init+0x2a0>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d05e      	beq.n	8003056 <HAL_GPIO_Init+0xfa>
 8002f98:	4a98      	ldr	r2, [pc, #608]	; (80031fc <HAL_GPIO_Init+0x2a0>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d875      	bhi.n	800308a <HAL_GPIO_Init+0x12e>
 8002f9e:	4a98      	ldr	r2, [pc, #608]	; (8003200 <HAL_GPIO_Init+0x2a4>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d058      	beq.n	8003056 <HAL_GPIO_Init+0xfa>
 8002fa4:	4a96      	ldr	r2, [pc, #600]	; (8003200 <HAL_GPIO_Init+0x2a4>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d86f      	bhi.n	800308a <HAL_GPIO_Init+0x12e>
 8002faa:	4a96      	ldr	r2, [pc, #600]	; (8003204 <HAL_GPIO_Init+0x2a8>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d052      	beq.n	8003056 <HAL_GPIO_Init+0xfa>
 8002fb0:	4a94      	ldr	r2, [pc, #592]	; (8003204 <HAL_GPIO_Init+0x2a8>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d869      	bhi.n	800308a <HAL_GPIO_Init+0x12e>
 8002fb6:	4a94      	ldr	r2, [pc, #592]	; (8003208 <HAL_GPIO_Init+0x2ac>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d04c      	beq.n	8003056 <HAL_GPIO_Init+0xfa>
 8002fbc:	4a92      	ldr	r2, [pc, #584]	; (8003208 <HAL_GPIO_Init+0x2ac>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d863      	bhi.n	800308a <HAL_GPIO_Init+0x12e>
 8002fc2:	4a92      	ldr	r2, [pc, #584]	; (800320c <HAL_GPIO_Init+0x2b0>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d046      	beq.n	8003056 <HAL_GPIO_Init+0xfa>
 8002fc8:	4a90      	ldr	r2, [pc, #576]	; (800320c <HAL_GPIO_Init+0x2b0>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d85d      	bhi.n	800308a <HAL_GPIO_Init+0x12e>
 8002fce:	2b12      	cmp	r3, #18
 8002fd0:	d82a      	bhi.n	8003028 <HAL_GPIO_Init+0xcc>
 8002fd2:	2b12      	cmp	r3, #18
 8002fd4:	d859      	bhi.n	800308a <HAL_GPIO_Init+0x12e>
 8002fd6:	a201      	add	r2, pc, #4	; (adr r2, 8002fdc <HAL_GPIO_Init+0x80>)
 8002fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fdc:	08003057 	.word	0x08003057
 8002fe0:	08003031 	.word	0x08003031
 8002fe4:	08003043 	.word	0x08003043
 8002fe8:	08003085 	.word	0x08003085
 8002fec:	0800308b 	.word	0x0800308b
 8002ff0:	0800308b 	.word	0x0800308b
 8002ff4:	0800308b 	.word	0x0800308b
 8002ff8:	0800308b 	.word	0x0800308b
 8002ffc:	0800308b 	.word	0x0800308b
 8003000:	0800308b 	.word	0x0800308b
 8003004:	0800308b 	.word	0x0800308b
 8003008:	0800308b 	.word	0x0800308b
 800300c:	0800308b 	.word	0x0800308b
 8003010:	0800308b 	.word	0x0800308b
 8003014:	0800308b 	.word	0x0800308b
 8003018:	0800308b 	.word	0x0800308b
 800301c:	0800308b 	.word	0x0800308b
 8003020:	08003039 	.word	0x08003039
 8003024:	0800304d 	.word	0x0800304d
 8003028:	4a79      	ldr	r2, [pc, #484]	; (8003210 <HAL_GPIO_Init+0x2b4>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d013      	beq.n	8003056 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800302e:	e02c      	b.n	800308a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	623b      	str	r3, [r7, #32]
          break;
 8003036:	e029      	b.n	800308c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	3304      	adds	r3, #4
 800303e:	623b      	str	r3, [r7, #32]
          break;
 8003040:	e024      	b.n	800308c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	3308      	adds	r3, #8
 8003048:	623b      	str	r3, [r7, #32]
          break;
 800304a:	e01f      	b.n	800308c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	330c      	adds	r3, #12
 8003052:	623b      	str	r3, [r7, #32]
          break;
 8003054:	e01a      	b.n	800308c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d102      	bne.n	8003064 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800305e:	2304      	movs	r3, #4
 8003060:	623b      	str	r3, [r7, #32]
          break;
 8003062:	e013      	b.n	800308c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	2b01      	cmp	r3, #1
 800306a:	d105      	bne.n	8003078 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800306c:	2308      	movs	r3, #8
 800306e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	69fa      	ldr	r2, [r7, #28]
 8003074:	611a      	str	r2, [r3, #16]
          break;
 8003076:	e009      	b.n	800308c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003078:	2308      	movs	r3, #8
 800307a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	69fa      	ldr	r2, [r7, #28]
 8003080:	615a      	str	r2, [r3, #20]
          break;
 8003082:	e003      	b.n	800308c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003084:	2300      	movs	r3, #0
 8003086:	623b      	str	r3, [r7, #32]
          break;
 8003088:	e000      	b.n	800308c <HAL_GPIO_Init+0x130>
          break;
 800308a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	2bff      	cmp	r3, #255	; 0xff
 8003090:	d801      	bhi.n	8003096 <HAL_GPIO_Init+0x13a>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	e001      	b.n	800309a <HAL_GPIO_Init+0x13e>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	3304      	adds	r3, #4
 800309a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	2bff      	cmp	r3, #255	; 0xff
 80030a0:	d802      	bhi.n	80030a8 <HAL_GPIO_Init+0x14c>
 80030a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	e002      	b.n	80030ae <HAL_GPIO_Init+0x152>
 80030a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030aa:	3b08      	subs	r3, #8
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	210f      	movs	r1, #15
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	fa01 f303 	lsl.w	r3, r1, r3
 80030bc:	43db      	mvns	r3, r3
 80030be:	401a      	ands	r2, r3
 80030c0:	6a39      	ldr	r1, [r7, #32]
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	fa01 f303 	lsl.w	r3, r1, r3
 80030c8:	431a      	orrs	r2, r3
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	f000 80b1 	beq.w	800323e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80030dc:	4b4d      	ldr	r3, [pc, #308]	; (8003214 <HAL_GPIO_Init+0x2b8>)
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	4a4c      	ldr	r2, [pc, #304]	; (8003214 <HAL_GPIO_Init+0x2b8>)
 80030e2:	f043 0301 	orr.w	r3, r3, #1
 80030e6:	6193      	str	r3, [r2, #24]
 80030e8:	4b4a      	ldr	r3, [pc, #296]	; (8003214 <HAL_GPIO_Init+0x2b8>)
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	f003 0301 	and.w	r3, r3, #1
 80030f0:	60bb      	str	r3, [r7, #8]
 80030f2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80030f4:	4a48      	ldr	r2, [pc, #288]	; (8003218 <HAL_GPIO_Init+0x2bc>)
 80030f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f8:	089b      	lsrs	r3, r3, #2
 80030fa:	3302      	adds	r3, #2
 80030fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003100:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003104:	f003 0303 	and.w	r3, r3, #3
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	220f      	movs	r2, #15
 800310c:	fa02 f303 	lsl.w	r3, r2, r3
 8003110:	43db      	mvns	r3, r3
 8003112:	68fa      	ldr	r2, [r7, #12]
 8003114:	4013      	ands	r3, r2
 8003116:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	4a40      	ldr	r2, [pc, #256]	; (800321c <HAL_GPIO_Init+0x2c0>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d013      	beq.n	8003148 <HAL_GPIO_Init+0x1ec>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4a3f      	ldr	r2, [pc, #252]	; (8003220 <HAL_GPIO_Init+0x2c4>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d00d      	beq.n	8003144 <HAL_GPIO_Init+0x1e8>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4a3e      	ldr	r2, [pc, #248]	; (8003224 <HAL_GPIO_Init+0x2c8>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d007      	beq.n	8003140 <HAL_GPIO_Init+0x1e4>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	4a3d      	ldr	r2, [pc, #244]	; (8003228 <HAL_GPIO_Init+0x2cc>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d101      	bne.n	800313c <HAL_GPIO_Init+0x1e0>
 8003138:	2303      	movs	r3, #3
 800313a:	e006      	b.n	800314a <HAL_GPIO_Init+0x1ee>
 800313c:	2304      	movs	r3, #4
 800313e:	e004      	b.n	800314a <HAL_GPIO_Init+0x1ee>
 8003140:	2302      	movs	r3, #2
 8003142:	e002      	b.n	800314a <HAL_GPIO_Init+0x1ee>
 8003144:	2301      	movs	r3, #1
 8003146:	e000      	b.n	800314a <HAL_GPIO_Init+0x1ee>
 8003148:	2300      	movs	r3, #0
 800314a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800314c:	f002 0203 	and.w	r2, r2, #3
 8003150:	0092      	lsls	r2, r2, #2
 8003152:	4093      	lsls	r3, r2
 8003154:	68fa      	ldr	r2, [r7, #12]
 8003156:	4313      	orrs	r3, r2
 8003158:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800315a:	492f      	ldr	r1, [pc, #188]	; (8003218 <HAL_GPIO_Init+0x2bc>)
 800315c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315e:	089b      	lsrs	r3, r3, #2
 8003160:	3302      	adds	r3, #2
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d006      	beq.n	8003182 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003174:	4b2d      	ldr	r3, [pc, #180]	; (800322c <HAL_GPIO_Init+0x2d0>)
 8003176:	689a      	ldr	r2, [r3, #8]
 8003178:	492c      	ldr	r1, [pc, #176]	; (800322c <HAL_GPIO_Init+0x2d0>)
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	4313      	orrs	r3, r2
 800317e:	608b      	str	r3, [r1, #8]
 8003180:	e006      	b.n	8003190 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003182:	4b2a      	ldr	r3, [pc, #168]	; (800322c <HAL_GPIO_Init+0x2d0>)
 8003184:	689a      	ldr	r2, [r3, #8]
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	43db      	mvns	r3, r3
 800318a:	4928      	ldr	r1, [pc, #160]	; (800322c <HAL_GPIO_Init+0x2d0>)
 800318c:	4013      	ands	r3, r2
 800318e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d006      	beq.n	80031aa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800319c:	4b23      	ldr	r3, [pc, #140]	; (800322c <HAL_GPIO_Init+0x2d0>)
 800319e:	68da      	ldr	r2, [r3, #12]
 80031a0:	4922      	ldr	r1, [pc, #136]	; (800322c <HAL_GPIO_Init+0x2d0>)
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	60cb      	str	r3, [r1, #12]
 80031a8:	e006      	b.n	80031b8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80031aa:	4b20      	ldr	r3, [pc, #128]	; (800322c <HAL_GPIO_Init+0x2d0>)
 80031ac:	68da      	ldr	r2, [r3, #12]
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	43db      	mvns	r3, r3
 80031b2:	491e      	ldr	r1, [pc, #120]	; (800322c <HAL_GPIO_Init+0x2d0>)
 80031b4:	4013      	ands	r3, r2
 80031b6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d006      	beq.n	80031d2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80031c4:	4b19      	ldr	r3, [pc, #100]	; (800322c <HAL_GPIO_Init+0x2d0>)
 80031c6:	685a      	ldr	r2, [r3, #4]
 80031c8:	4918      	ldr	r1, [pc, #96]	; (800322c <HAL_GPIO_Init+0x2d0>)
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	604b      	str	r3, [r1, #4]
 80031d0:	e006      	b.n	80031e0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80031d2:	4b16      	ldr	r3, [pc, #88]	; (800322c <HAL_GPIO_Init+0x2d0>)
 80031d4:	685a      	ldr	r2, [r3, #4]
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	43db      	mvns	r3, r3
 80031da:	4914      	ldr	r1, [pc, #80]	; (800322c <HAL_GPIO_Init+0x2d0>)
 80031dc:	4013      	ands	r3, r2
 80031de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d021      	beq.n	8003230 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80031ec:	4b0f      	ldr	r3, [pc, #60]	; (800322c <HAL_GPIO_Init+0x2d0>)
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	490e      	ldr	r1, [pc, #56]	; (800322c <HAL_GPIO_Init+0x2d0>)
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	600b      	str	r3, [r1, #0]
 80031f8:	e021      	b.n	800323e <HAL_GPIO_Init+0x2e2>
 80031fa:	bf00      	nop
 80031fc:	10320000 	.word	0x10320000
 8003200:	10310000 	.word	0x10310000
 8003204:	10220000 	.word	0x10220000
 8003208:	10210000 	.word	0x10210000
 800320c:	10120000 	.word	0x10120000
 8003210:	10110000 	.word	0x10110000
 8003214:	40021000 	.word	0x40021000
 8003218:	40010000 	.word	0x40010000
 800321c:	40010800 	.word	0x40010800
 8003220:	40010c00 	.word	0x40010c00
 8003224:	40011000 	.word	0x40011000
 8003228:	40011400 	.word	0x40011400
 800322c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003230:	4b0b      	ldr	r3, [pc, #44]	; (8003260 <HAL_GPIO_Init+0x304>)
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	69bb      	ldr	r3, [r7, #24]
 8003236:	43db      	mvns	r3, r3
 8003238:	4909      	ldr	r1, [pc, #36]	; (8003260 <HAL_GPIO_Init+0x304>)
 800323a:	4013      	ands	r3, r2
 800323c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800323e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003240:	3301      	adds	r3, #1
 8003242:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324a:	fa22 f303 	lsr.w	r3, r2, r3
 800324e:	2b00      	cmp	r3, #0
 8003250:	f47f ae8e 	bne.w	8002f70 <HAL_GPIO_Init+0x14>
  }
}
 8003254:	bf00      	nop
 8003256:	bf00      	nop
 8003258:	372c      	adds	r7, #44	; 0x2c
 800325a:	46bd      	mov	sp, r7
 800325c:	bc80      	pop	{r7}
 800325e:	4770      	bx	lr
 8003260:	40010400 	.word	0x40010400

08003264 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	460b      	mov	r3, r1
 800326e:	807b      	strh	r3, [r7, #2]
 8003270:	4613      	mov	r3, r2
 8003272:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003274:	787b      	ldrb	r3, [r7, #1]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d003      	beq.n	8003282 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800327a:	887a      	ldrh	r2, [r7, #2]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003280:	e003      	b.n	800328a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003282:	887b      	ldrh	r3, [r7, #2]
 8003284:	041a      	lsls	r2, r3, #16
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	611a      	str	r2, [r3, #16]
}
 800328a:	bf00      	nop
 800328c:	370c      	adds	r7, #12
 800328e:	46bd      	mov	sp, r7
 8003290:	bc80      	pop	{r7}
 8003292:	4770      	bx	lr

08003294 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d101      	bne.n	80032a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e12b      	b.n	80034fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d106      	bne.n	80032c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f7ff f8bc 	bl	8002438 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2224      	movs	r2, #36	; 0x24
 80032c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f022 0201 	bic.w	r2, r2, #1
 80032d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80032f8:	f001 fbca 	bl	8004a90 <HAL_RCC_GetPCLK1Freq>
 80032fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	4a81      	ldr	r2, [pc, #516]	; (8003508 <HAL_I2C_Init+0x274>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d807      	bhi.n	8003318 <HAL_I2C_Init+0x84>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	4a80      	ldr	r2, [pc, #512]	; (800350c <HAL_I2C_Init+0x278>)
 800330c:	4293      	cmp	r3, r2
 800330e:	bf94      	ite	ls
 8003310:	2301      	movls	r3, #1
 8003312:	2300      	movhi	r3, #0
 8003314:	b2db      	uxtb	r3, r3
 8003316:	e006      	b.n	8003326 <HAL_I2C_Init+0x92>
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	4a7d      	ldr	r2, [pc, #500]	; (8003510 <HAL_I2C_Init+0x27c>)
 800331c:	4293      	cmp	r3, r2
 800331e:	bf94      	ite	ls
 8003320:	2301      	movls	r3, #1
 8003322:	2300      	movhi	r3, #0
 8003324:	b2db      	uxtb	r3, r3
 8003326:	2b00      	cmp	r3, #0
 8003328:	d001      	beq.n	800332e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e0e7      	b.n	80034fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	4a78      	ldr	r2, [pc, #480]	; (8003514 <HAL_I2C_Init+0x280>)
 8003332:	fba2 2303 	umull	r2, r3, r2, r3
 8003336:	0c9b      	lsrs	r3, r3, #18
 8003338:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	68ba      	ldr	r2, [r7, #8]
 800334a:	430a      	orrs	r2, r1
 800334c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	6a1b      	ldr	r3, [r3, #32]
 8003354:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	4a6a      	ldr	r2, [pc, #424]	; (8003508 <HAL_I2C_Init+0x274>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d802      	bhi.n	8003368 <HAL_I2C_Init+0xd4>
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	3301      	adds	r3, #1
 8003366:	e009      	b.n	800337c <HAL_I2C_Init+0xe8>
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800336e:	fb02 f303 	mul.w	r3, r2, r3
 8003372:	4a69      	ldr	r2, [pc, #420]	; (8003518 <HAL_I2C_Init+0x284>)
 8003374:	fba2 2303 	umull	r2, r3, r2, r3
 8003378:	099b      	lsrs	r3, r3, #6
 800337a:	3301      	adds	r3, #1
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	6812      	ldr	r2, [r2, #0]
 8003380:	430b      	orrs	r3, r1
 8003382:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	69db      	ldr	r3, [r3, #28]
 800338a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800338e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	495c      	ldr	r1, [pc, #368]	; (8003508 <HAL_I2C_Init+0x274>)
 8003398:	428b      	cmp	r3, r1
 800339a:	d819      	bhi.n	80033d0 <HAL_I2C_Init+0x13c>
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	1e59      	subs	r1, r3, #1
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	005b      	lsls	r3, r3, #1
 80033a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80033aa:	1c59      	adds	r1, r3, #1
 80033ac:	f640 73fc 	movw	r3, #4092	; 0xffc
 80033b0:	400b      	ands	r3, r1
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d00a      	beq.n	80033cc <HAL_I2C_Init+0x138>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	1e59      	subs	r1, r3, #1
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	005b      	lsls	r3, r3, #1
 80033c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80033c4:	3301      	adds	r3, #1
 80033c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033ca:	e051      	b.n	8003470 <HAL_I2C_Init+0x1dc>
 80033cc:	2304      	movs	r3, #4
 80033ce:	e04f      	b.n	8003470 <HAL_I2C_Init+0x1dc>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d111      	bne.n	80033fc <HAL_I2C_Init+0x168>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	1e58      	subs	r0, r3, #1
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6859      	ldr	r1, [r3, #4]
 80033e0:	460b      	mov	r3, r1
 80033e2:	005b      	lsls	r3, r3, #1
 80033e4:	440b      	add	r3, r1
 80033e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80033ea:	3301      	adds	r3, #1
 80033ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	bf0c      	ite	eq
 80033f4:	2301      	moveq	r3, #1
 80033f6:	2300      	movne	r3, #0
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	e012      	b.n	8003422 <HAL_I2C_Init+0x18e>
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	1e58      	subs	r0, r3, #1
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6859      	ldr	r1, [r3, #4]
 8003404:	460b      	mov	r3, r1
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	440b      	add	r3, r1
 800340a:	0099      	lsls	r1, r3, #2
 800340c:	440b      	add	r3, r1
 800340e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003412:	3301      	adds	r3, #1
 8003414:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003418:	2b00      	cmp	r3, #0
 800341a:	bf0c      	ite	eq
 800341c:	2301      	moveq	r3, #1
 800341e:	2300      	movne	r3, #0
 8003420:	b2db      	uxtb	r3, r3
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <HAL_I2C_Init+0x196>
 8003426:	2301      	movs	r3, #1
 8003428:	e022      	b.n	8003470 <HAL_I2C_Init+0x1dc>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d10e      	bne.n	8003450 <HAL_I2C_Init+0x1bc>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	1e58      	subs	r0, r3, #1
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6859      	ldr	r1, [r3, #4]
 800343a:	460b      	mov	r3, r1
 800343c:	005b      	lsls	r3, r3, #1
 800343e:	440b      	add	r3, r1
 8003440:	fbb0 f3f3 	udiv	r3, r0, r3
 8003444:	3301      	adds	r3, #1
 8003446:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800344a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800344e:	e00f      	b.n	8003470 <HAL_I2C_Init+0x1dc>
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	1e58      	subs	r0, r3, #1
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6859      	ldr	r1, [r3, #4]
 8003458:	460b      	mov	r3, r1
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	440b      	add	r3, r1
 800345e:	0099      	lsls	r1, r3, #2
 8003460:	440b      	add	r3, r1
 8003462:	fbb0 f3f3 	udiv	r3, r0, r3
 8003466:	3301      	adds	r3, #1
 8003468:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800346c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003470:	6879      	ldr	r1, [r7, #4]
 8003472:	6809      	ldr	r1, [r1, #0]
 8003474:	4313      	orrs	r3, r2
 8003476:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	69da      	ldr	r2, [r3, #28]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a1b      	ldr	r3, [r3, #32]
 800348a:	431a      	orrs	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	430a      	orrs	r2, r1
 8003492:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800349e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	6911      	ldr	r1, [r2, #16]
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	68d2      	ldr	r2, [r2, #12]
 80034aa:	4311      	orrs	r1, r2
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	6812      	ldr	r2, [r2, #0]
 80034b0:	430b      	orrs	r3, r1
 80034b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	695a      	ldr	r2, [r3, #20]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	431a      	orrs	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	430a      	orrs	r2, r1
 80034ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f042 0201 	orr.w	r2, r2, #1
 80034de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2220      	movs	r2, #32
 80034ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3710      	adds	r7, #16
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	000186a0 	.word	0x000186a0
 800350c:	001e847f 	.word	0x001e847f
 8003510:	003d08ff 	.word	0x003d08ff
 8003514:	431bde83 	.word	0x431bde83
 8003518:	10624dd3 	.word	0x10624dd3

0800351c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b088      	sub	sp, #32
 8003520:	af02      	add	r7, sp, #8
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	607a      	str	r2, [r7, #4]
 8003526:	461a      	mov	r2, r3
 8003528:	460b      	mov	r3, r1
 800352a:	817b      	strh	r3, [r7, #10]
 800352c:	4613      	mov	r3, r2
 800352e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003530:	f7ff f9ea 	bl	8002908 <HAL_GetTick>
 8003534:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b20      	cmp	r3, #32
 8003540:	f040 80e0 	bne.w	8003704 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	9300      	str	r3, [sp, #0]
 8003548:	2319      	movs	r3, #25
 800354a:	2201      	movs	r2, #1
 800354c:	4970      	ldr	r1, [pc, #448]	; (8003710 <HAL_I2C_Master_Transmit+0x1f4>)
 800354e:	68f8      	ldr	r0, [r7, #12]
 8003550:	f000 fc9e 	bl	8003e90 <I2C_WaitOnFlagUntilTimeout>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d001      	beq.n	800355e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800355a:	2302      	movs	r3, #2
 800355c:	e0d3      	b.n	8003706 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003564:	2b01      	cmp	r3, #1
 8003566:	d101      	bne.n	800356c <HAL_I2C_Master_Transmit+0x50>
 8003568:	2302      	movs	r3, #2
 800356a:	e0cc      	b.n	8003706 <HAL_I2C_Master_Transmit+0x1ea>
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0301 	and.w	r3, r3, #1
 800357e:	2b01      	cmp	r3, #1
 8003580:	d007      	beq.n	8003592 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f042 0201 	orr.w	r2, r2, #1
 8003590:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2221      	movs	r2, #33	; 0x21
 80035a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2210      	movs	r2, #16
 80035ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	893a      	ldrh	r2, [r7, #8]
 80035c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c8:	b29a      	uxth	r2, r3
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	4a50      	ldr	r2, [pc, #320]	; (8003714 <HAL_I2C_Master_Transmit+0x1f8>)
 80035d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80035d4:	8979      	ldrh	r1, [r7, #10]
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	6a3a      	ldr	r2, [r7, #32]
 80035da:	68f8      	ldr	r0, [r7, #12]
 80035dc:	f000 fb08 	bl	8003bf0 <I2C_MasterRequestWrite>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d001      	beq.n	80035ea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e08d      	b.n	8003706 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035ea:	2300      	movs	r3, #0
 80035ec:	613b      	str	r3, [r7, #16]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	695b      	ldr	r3, [r3, #20]
 80035f4:	613b      	str	r3, [r7, #16]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	613b      	str	r3, [r7, #16]
 80035fe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003600:	e066      	b.n	80036d0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003602:	697a      	ldr	r2, [r7, #20]
 8003604:	6a39      	ldr	r1, [r7, #32]
 8003606:	68f8      	ldr	r0, [r7, #12]
 8003608:	f000 fd5c 	bl	80040c4 <I2C_WaitOnTXEFlagUntilTimeout>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00d      	beq.n	800362e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003616:	2b04      	cmp	r3, #4
 8003618:	d107      	bne.n	800362a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003628:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e06b      	b.n	8003706 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003632:	781a      	ldrb	r2, [r3, #0]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363e:	1c5a      	adds	r2, r3, #1
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003648:	b29b      	uxth	r3, r3
 800364a:	3b01      	subs	r3, #1
 800364c:	b29a      	uxth	r2, r3
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003656:	3b01      	subs	r3, #1
 8003658:	b29a      	uxth	r2, r3
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	695b      	ldr	r3, [r3, #20]
 8003664:	f003 0304 	and.w	r3, r3, #4
 8003668:	2b04      	cmp	r3, #4
 800366a:	d11b      	bne.n	80036a4 <HAL_I2C_Master_Transmit+0x188>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003670:	2b00      	cmp	r3, #0
 8003672:	d017      	beq.n	80036a4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003678:	781a      	ldrb	r2, [r3, #0]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003684:	1c5a      	adds	r2, r3, #1
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800368e:	b29b      	uxth	r3, r3
 8003690:	3b01      	subs	r3, #1
 8003692:	b29a      	uxth	r2, r3
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800369c:	3b01      	subs	r3, #1
 800369e:	b29a      	uxth	r2, r3
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036a4:	697a      	ldr	r2, [r7, #20]
 80036a6:	6a39      	ldr	r1, [r7, #32]
 80036a8:	68f8      	ldr	r0, [r7, #12]
 80036aa:	f000 fd53 	bl	8004154 <I2C_WaitOnBTFFlagUntilTimeout>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d00d      	beq.n	80036d0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b8:	2b04      	cmp	r3, #4
 80036ba:	d107      	bne.n	80036cc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036ca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e01a      	b.n	8003706 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d194      	bne.n	8003602 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2220      	movs	r2, #32
 80036ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003700:	2300      	movs	r3, #0
 8003702:	e000      	b.n	8003706 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003704:	2302      	movs	r3, #2
  }
}
 8003706:	4618      	mov	r0, r3
 8003708:	3718      	adds	r7, #24
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	00100002 	.word	0x00100002
 8003714:	ffff0000 	.word	0xffff0000

08003718 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b08c      	sub	sp, #48	; 0x30
 800371c:	af02      	add	r7, sp, #8
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	607a      	str	r2, [r7, #4]
 8003722:	461a      	mov	r2, r3
 8003724:	460b      	mov	r3, r1
 8003726:	817b      	strh	r3, [r7, #10]
 8003728:	4613      	mov	r3, r2
 800372a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800372c:	2300      	movs	r3, #0
 800372e:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003730:	f7ff f8ea 	bl	8002908 <HAL_GetTick>
 8003734:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800373c:	b2db      	uxtb	r3, r3
 800373e:	2b20      	cmp	r3, #32
 8003740:	f040 824b 	bne.w	8003bda <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003746:	9300      	str	r3, [sp, #0]
 8003748:	2319      	movs	r3, #25
 800374a:	2201      	movs	r2, #1
 800374c:	497f      	ldr	r1, [pc, #508]	; (800394c <HAL_I2C_Master_Receive+0x234>)
 800374e:	68f8      	ldr	r0, [r7, #12]
 8003750:	f000 fb9e 	bl	8003e90 <I2C_WaitOnFlagUntilTimeout>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d001      	beq.n	800375e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800375a:	2302      	movs	r3, #2
 800375c:	e23e      	b.n	8003bdc <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003764:	2b01      	cmp	r3, #1
 8003766:	d101      	bne.n	800376c <HAL_I2C_Master_Receive+0x54>
 8003768:	2302      	movs	r3, #2
 800376a:	e237      	b.n	8003bdc <HAL_I2C_Master_Receive+0x4c4>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	2b01      	cmp	r3, #1
 8003780:	d007      	beq.n	8003792 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f042 0201 	orr.w	r2, r2, #1
 8003790:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2222      	movs	r2, #34	; 0x22
 80037a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2210      	movs	r2, #16
 80037ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2200      	movs	r2, #0
 80037b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	893a      	ldrh	r2, [r7, #8]
 80037c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c8:	b29a      	uxth	r2, r3
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	4a5f      	ldr	r2, [pc, #380]	; (8003950 <HAL_I2C_Master_Receive+0x238>)
 80037d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80037d4:	8979      	ldrh	r1, [r7, #10]
 80037d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037da:	68f8      	ldr	r0, [r7, #12]
 80037dc:	f000 fa8a 	bl	8003cf4 <I2C_MasterRequestRead>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d001      	beq.n	80037ea <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e1f8      	b.n	8003bdc <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d113      	bne.n	800381a <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037f2:	2300      	movs	r3, #0
 80037f4:	61fb      	str	r3, [r7, #28]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	695b      	ldr	r3, [r3, #20]
 80037fc:	61fb      	str	r3, [r7, #28]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	699b      	ldr	r3, [r3, #24]
 8003804:	61fb      	str	r3, [r7, #28]
 8003806:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003816:	601a      	str	r2, [r3, #0]
 8003818:	e1cc      	b.n	8003bb4 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800381e:	2b01      	cmp	r3, #1
 8003820:	d11e      	bne.n	8003860 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003830:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003832:	b672      	cpsid	i
}
 8003834:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003836:	2300      	movs	r3, #0
 8003838:	61bb      	str	r3, [r7, #24]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	695b      	ldr	r3, [r3, #20]
 8003840:	61bb      	str	r3, [r7, #24]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	699b      	ldr	r3, [r3, #24]
 8003848:	61bb      	str	r3, [r7, #24]
 800384a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800385a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800385c:	b662      	cpsie	i
}
 800385e:	e035      	b.n	80038cc <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003864:	2b02      	cmp	r3, #2
 8003866:	d11e      	bne.n	80038a6 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003876:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003878:	b672      	cpsid	i
}
 800387a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800387c:	2300      	movs	r3, #0
 800387e:	617b      	str	r3, [r7, #20]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	695b      	ldr	r3, [r3, #20]
 8003886:	617b      	str	r3, [r7, #20]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	699b      	ldr	r3, [r3, #24]
 800388e:	617b      	str	r3, [r7, #20]
 8003890:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038a0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80038a2:	b662      	cpsie	i
}
 80038a4:	e012      	b.n	80038cc <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80038b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038b6:	2300      	movs	r3, #0
 80038b8:	613b      	str	r3, [r7, #16]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	695b      	ldr	r3, [r3, #20]
 80038c0:	613b      	str	r3, [r7, #16]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	699b      	ldr	r3, [r3, #24]
 80038c8:	613b      	str	r3, [r7, #16]
 80038ca:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80038cc:	e172      	b.n	8003bb4 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038d2:	2b03      	cmp	r3, #3
 80038d4:	f200 811f 	bhi.w	8003b16 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d123      	bne.n	8003928 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80038e4:	68f8      	ldr	r0, [r7, #12]
 80038e6:	f000 fc7d 	bl	80041e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d001      	beq.n	80038f4 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e173      	b.n	8003bdc <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	691a      	ldr	r2, [r3, #16]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fe:	b2d2      	uxtb	r2, r2
 8003900:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003906:	1c5a      	adds	r2, r3, #1
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003910:	3b01      	subs	r3, #1
 8003912:	b29a      	uxth	r2, r3
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800391c:	b29b      	uxth	r3, r3
 800391e:	3b01      	subs	r3, #1
 8003920:	b29a      	uxth	r2, r3
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003926:	e145      	b.n	8003bb4 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800392c:	2b02      	cmp	r3, #2
 800392e:	d152      	bne.n	80039d6 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003932:	9300      	str	r3, [sp, #0]
 8003934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003936:	2200      	movs	r2, #0
 8003938:	4906      	ldr	r1, [pc, #24]	; (8003954 <HAL_I2C_Master_Receive+0x23c>)
 800393a:	68f8      	ldr	r0, [r7, #12]
 800393c:	f000 faa8 	bl	8003e90 <I2C_WaitOnFlagUntilTimeout>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d008      	beq.n	8003958 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e148      	b.n	8003bdc <HAL_I2C_Master_Receive+0x4c4>
 800394a:	bf00      	nop
 800394c:	00100002 	.word	0x00100002
 8003950:	ffff0000 	.word	0xffff0000
 8003954:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003958:	b672      	cpsid	i
}
 800395a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800396a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	691a      	ldr	r2, [r3, #16]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003976:	b2d2      	uxtb	r2, r2
 8003978:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397e:	1c5a      	adds	r2, r3, #1
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003988:	3b01      	subs	r3, #1
 800398a:	b29a      	uxth	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003994:	b29b      	uxth	r3, r3
 8003996:	3b01      	subs	r3, #1
 8003998:	b29a      	uxth	r2, r3
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800399e:	b662      	cpsie	i
}
 80039a0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	691a      	ldr	r2, [r3, #16]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ac:	b2d2      	uxtb	r2, r2
 80039ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b4:	1c5a      	adds	r2, r3, #1
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039be:	3b01      	subs	r3, #1
 80039c0:	b29a      	uxth	r2, r3
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	3b01      	subs	r3, #1
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80039d4:	e0ee      	b.n	8003bb4 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d8:	9300      	str	r3, [sp, #0]
 80039da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039dc:	2200      	movs	r2, #0
 80039de:	4981      	ldr	r1, [pc, #516]	; (8003be4 <HAL_I2C_Master_Receive+0x4cc>)
 80039e0:	68f8      	ldr	r0, [r7, #12]
 80039e2:	f000 fa55 	bl	8003e90 <I2C_WaitOnFlagUntilTimeout>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d001      	beq.n	80039f0 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e0f5      	b.n	8003bdc <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039fe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003a00:	b672      	cpsid	i
}
 8003a02:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	691a      	ldr	r2, [r3, #16]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0e:	b2d2      	uxtb	r2, r2
 8003a10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a16:	1c5a      	adds	r2, r3, #1
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a20:	3b01      	subs	r3, #1
 8003a22:	b29a      	uxth	r2, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	b29a      	uxth	r2, r3
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003a36:	4b6c      	ldr	r3, [pc, #432]	; (8003be8 <HAL_I2C_Master_Receive+0x4d0>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	08db      	lsrs	r3, r3, #3
 8003a3c:	4a6b      	ldr	r2, [pc, #428]	; (8003bec <HAL_I2C_Master_Receive+0x4d4>)
 8003a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a42:	0a1a      	lsrs	r2, r3, #8
 8003a44:	4613      	mov	r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	4413      	add	r3, r2
 8003a4a:	00da      	lsls	r2, r3, #3
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003a50:	6a3b      	ldr	r3, [r7, #32]
 8003a52:	3b01      	subs	r3, #1
 8003a54:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003a56:	6a3b      	ldr	r3, [r7, #32]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d118      	bne.n	8003a8e <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2220      	movs	r2, #32
 8003a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a76:	f043 0220 	orr.w	r2, r3, #32
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003a7e:	b662      	cpsie	i
}
 8003a80:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e0a6      	b.n	8003bdc <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	695b      	ldr	r3, [r3, #20]
 8003a94:	f003 0304 	and.w	r3, r3, #4
 8003a98:	2b04      	cmp	r3, #4
 8003a9a:	d1d9      	bne.n	8003a50 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aaa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	691a      	ldr	r2, [r3, #16]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab6:	b2d2      	uxtb	r2, r2
 8003ab8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abe:	1c5a      	adds	r2, r3, #1
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ac8:	3b01      	subs	r3, #1
 8003aca:	b29a      	uxth	r2, r3
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	3b01      	subs	r3, #1
 8003ad8:	b29a      	uxth	r2, r3
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003ade:	b662      	cpsie	i
}
 8003ae0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	691a      	ldr	r2, [r3, #16]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aec:	b2d2      	uxtb	r2, r2
 8003aee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af4:	1c5a      	adds	r2, r3, #1
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003afe:	3b01      	subs	r3, #1
 8003b00:	b29a      	uxth	r2, r3
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	3b01      	subs	r3, #1
 8003b0e:	b29a      	uxth	r2, r3
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b14:	e04e      	b.n	8003bb4 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b18:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b1a:	68f8      	ldr	r0, [r7, #12]
 8003b1c:	f000 fb62 	bl	80041e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d001      	beq.n	8003b2a <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e058      	b.n	8003bdc <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	691a      	ldr	r2, [r3, #16]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b34:	b2d2      	uxtb	r2, r2
 8003b36:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3c:	1c5a      	adds	r2, r3, #1
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b46:	3b01      	subs	r3, #1
 8003b48:	b29a      	uxth	r2, r3
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	3b01      	subs	r3, #1
 8003b56:	b29a      	uxth	r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	695b      	ldr	r3, [r3, #20]
 8003b62:	f003 0304 	and.w	r3, r3, #4
 8003b66:	2b04      	cmp	r3, #4
 8003b68:	d124      	bne.n	8003bb4 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b6e:	2b03      	cmp	r3, #3
 8003b70:	d107      	bne.n	8003b82 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b80:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	691a      	ldr	r2, [r3, #16]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8c:	b2d2      	uxtb	r2, r2
 8003b8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b94:	1c5a      	adds	r2, r3, #1
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	b29a      	uxth	r2, r3
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	3b01      	subs	r3, #1
 8003bae:	b29a      	uxth	r2, r3
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	f47f ae88 	bne.w	80038ce <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2220      	movs	r2, #32
 8003bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	e000      	b.n	8003bdc <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8003bda:	2302      	movs	r3, #2
  }
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3728      	adds	r7, #40	; 0x28
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	00010004 	.word	0x00010004
 8003be8:	20000004 	.word	0x20000004
 8003bec:	14f8b589 	.word	0x14f8b589

08003bf0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b088      	sub	sp, #32
 8003bf4:	af02      	add	r7, sp, #8
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	607a      	str	r2, [r7, #4]
 8003bfa:	603b      	str	r3, [r7, #0]
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c04:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	2b08      	cmp	r3, #8
 8003c0a:	d006      	beq.n	8003c1a <I2C_MasterRequestWrite+0x2a>
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d003      	beq.n	8003c1a <I2C_MasterRequestWrite+0x2a>
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003c18:	d108      	bne.n	8003c2c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c28:	601a      	str	r2, [r3, #0]
 8003c2a:	e00b      	b.n	8003c44 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c30:	2b12      	cmp	r3, #18
 8003c32:	d107      	bne.n	8003c44 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c42:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	9300      	str	r3, [sp, #0]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c50:	68f8      	ldr	r0, [r7, #12]
 8003c52:	f000 f91d 	bl	8003e90 <I2C_WaitOnFlagUntilTimeout>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d00d      	beq.n	8003c78 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c6a:	d103      	bne.n	8003c74 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c72:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e035      	b.n	8003ce4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	691b      	ldr	r3, [r3, #16]
 8003c7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c80:	d108      	bne.n	8003c94 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c82:	897b      	ldrh	r3, [r7, #10]
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	461a      	mov	r2, r3
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003c90:	611a      	str	r2, [r3, #16]
 8003c92:	e01b      	b.n	8003ccc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003c94:	897b      	ldrh	r3, [r7, #10]
 8003c96:	11db      	asrs	r3, r3, #7
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	f003 0306 	and.w	r3, r3, #6
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	f063 030f 	orn	r3, r3, #15
 8003ca4:	b2da      	uxtb	r2, r3
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	490e      	ldr	r1, [pc, #56]	; (8003cec <I2C_MasterRequestWrite+0xfc>)
 8003cb2:	68f8      	ldr	r0, [r7, #12]
 8003cb4:	f000 f966 	bl	8003f84 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d001      	beq.n	8003cc2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e010      	b.n	8003ce4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003cc2:	897b      	ldrh	r3, [r7, #10]
 8003cc4:	b2da      	uxtb	r2, r3
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	4907      	ldr	r1, [pc, #28]	; (8003cf0 <I2C_MasterRequestWrite+0x100>)
 8003cd2:	68f8      	ldr	r0, [r7, #12]
 8003cd4:	f000 f956 	bl	8003f84 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d001      	beq.n	8003ce2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e000      	b.n	8003ce4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003ce2:	2300      	movs	r3, #0
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3718      	adds	r7, #24
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	00010008 	.word	0x00010008
 8003cf0:	00010002 	.word	0x00010002

08003cf4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b088      	sub	sp, #32
 8003cf8:	af02      	add	r7, sp, #8
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	607a      	str	r2, [r7, #4]
 8003cfe:	603b      	str	r3, [r7, #0]
 8003d00:	460b      	mov	r3, r1
 8003d02:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d08:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d18:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	2b08      	cmp	r3, #8
 8003d1e:	d006      	beq.n	8003d2e <I2C_MasterRequestRead+0x3a>
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d003      	beq.n	8003d2e <I2C_MasterRequestRead+0x3a>
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d2c:	d108      	bne.n	8003d40 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d3c:	601a      	str	r2, [r3, #0]
 8003d3e:	e00b      	b.n	8003d58 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d44:	2b11      	cmp	r3, #17
 8003d46:	d107      	bne.n	8003d58 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d56:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	9300      	str	r3, [sp, #0]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d64:	68f8      	ldr	r0, [r7, #12]
 8003d66:	f000 f893 	bl	8003e90 <I2C_WaitOnFlagUntilTimeout>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d00d      	beq.n	8003d8c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d7e:	d103      	bne.n	8003d88 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d86:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e079      	b.n	8003e80 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	691b      	ldr	r3, [r3, #16]
 8003d90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d94:	d108      	bne.n	8003da8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003d96:	897b      	ldrh	r3, [r7, #10]
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	f043 0301 	orr.w	r3, r3, #1
 8003d9e:	b2da      	uxtb	r2, r3
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	611a      	str	r2, [r3, #16]
 8003da6:	e05f      	b.n	8003e68 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003da8:	897b      	ldrh	r3, [r7, #10]
 8003daa:	11db      	asrs	r3, r3, #7
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	f003 0306 	and.w	r3, r3, #6
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	f063 030f 	orn	r3, r3, #15
 8003db8:	b2da      	uxtb	r2, r3
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	4930      	ldr	r1, [pc, #192]	; (8003e88 <I2C_MasterRequestRead+0x194>)
 8003dc6:	68f8      	ldr	r0, [r7, #12]
 8003dc8:	f000 f8dc 	bl	8003f84 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d001      	beq.n	8003dd6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e054      	b.n	8003e80 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003dd6:	897b      	ldrh	r3, [r7, #10]
 8003dd8:	b2da      	uxtb	r2, r3
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	4929      	ldr	r1, [pc, #164]	; (8003e8c <I2C_MasterRequestRead+0x198>)
 8003de6:	68f8      	ldr	r0, [r7, #12]
 8003de8:	f000 f8cc 	bl	8003f84 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d001      	beq.n	8003df6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e044      	b.n	8003e80 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003df6:	2300      	movs	r3, #0
 8003df8:	613b      	str	r3, [r7, #16]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	695b      	ldr	r3, [r3, #20]
 8003e00:	613b      	str	r3, [r7, #16]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	699b      	ldr	r3, [r3, #24]
 8003e08:	613b      	str	r3, [r7, #16]
 8003e0a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e1a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	9300      	str	r3, [sp, #0]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e28:	68f8      	ldr	r0, [r7, #12]
 8003e2a:	f000 f831 	bl	8003e90 <I2C_WaitOnFlagUntilTimeout>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d00d      	beq.n	8003e50 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e42:	d103      	bne.n	8003e4c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e4a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	e017      	b.n	8003e80 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003e50:	897b      	ldrh	r3, [r7, #10]
 8003e52:	11db      	asrs	r3, r3, #7
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	f003 0306 	and.w	r3, r3, #6
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	f063 030e 	orn	r3, r3, #14
 8003e60:	b2da      	uxtb	r2, r3
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	4907      	ldr	r1, [pc, #28]	; (8003e8c <I2C_MasterRequestRead+0x198>)
 8003e6e:	68f8      	ldr	r0, [r7, #12]
 8003e70:	f000 f888 	bl	8003f84 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d001      	beq.n	8003e7e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e000      	b.n	8003e80 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003e7e:	2300      	movs	r3, #0
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3718      	adds	r7, #24
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	00010008 	.word	0x00010008
 8003e8c:	00010002 	.word	0x00010002

08003e90 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	603b      	str	r3, [r7, #0]
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ea0:	e048      	b.n	8003f34 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ea8:	d044      	beq.n	8003f34 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eaa:	f7fe fd2d 	bl	8002908 <HAL_GetTick>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	683a      	ldr	r2, [r7, #0]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d302      	bcc.n	8003ec0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d139      	bne.n	8003f34 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	0c1b      	lsrs	r3, r3, #16
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d10d      	bne.n	8003ee6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	695b      	ldr	r3, [r3, #20]
 8003ed0:	43da      	mvns	r2, r3
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	bf0c      	ite	eq
 8003edc:	2301      	moveq	r3, #1
 8003ede:	2300      	movne	r3, #0
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	e00c      	b.n	8003f00 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	43da      	mvns	r2, r3
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	bf0c      	ite	eq
 8003ef8:	2301      	moveq	r3, #1
 8003efa:	2300      	movne	r3, #0
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	461a      	mov	r2, r3
 8003f00:	79fb      	ldrb	r3, [r7, #7]
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d116      	bne.n	8003f34 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2220      	movs	r2, #32
 8003f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f20:	f043 0220 	orr.w	r2, r3, #32
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e023      	b.n	8003f7c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	0c1b      	lsrs	r3, r3, #16
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d10d      	bne.n	8003f5a <I2C_WaitOnFlagUntilTimeout+0xca>
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	695b      	ldr	r3, [r3, #20]
 8003f44:	43da      	mvns	r2, r3
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	4013      	ands	r3, r2
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	bf0c      	ite	eq
 8003f50:	2301      	moveq	r3, #1
 8003f52:	2300      	movne	r3, #0
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	461a      	mov	r2, r3
 8003f58:	e00c      	b.n	8003f74 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	699b      	ldr	r3, [r3, #24]
 8003f60:	43da      	mvns	r2, r3
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	4013      	ands	r3, r2
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	bf0c      	ite	eq
 8003f6c:	2301      	moveq	r3, #1
 8003f6e:	2300      	movne	r3, #0
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	461a      	mov	r2, r3
 8003f74:	79fb      	ldrb	r3, [r7, #7]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d093      	beq.n	8003ea2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f7a:	2300      	movs	r3, #0
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3710      	adds	r7, #16
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	607a      	str	r2, [r7, #4]
 8003f90:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f92:	e071      	b.n	8004078 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	695b      	ldr	r3, [r3, #20]
 8003f9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fa2:	d123      	bne.n	8003fec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fb2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003fbc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2220      	movs	r2, #32
 8003fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd8:	f043 0204 	orr.w	r2, r3, #4
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e067      	b.n	80040bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff2:	d041      	beq.n	8004078 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ff4:	f7fe fc88 	bl	8002908 <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	429a      	cmp	r2, r3
 8004002:	d302      	bcc.n	800400a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d136      	bne.n	8004078 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	0c1b      	lsrs	r3, r3, #16
 800400e:	b2db      	uxtb	r3, r3
 8004010:	2b01      	cmp	r3, #1
 8004012:	d10c      	bne.n	800402e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	695b      	ldr	r3, [r3, #20]
 800401a:	43da      	mvns	r2, r3
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	4013      	ands	r3, r2
 8004020:	b29b      	uxth	r3, r3
 8004022:	2b00      	cmp	r3, #0
 8004024:	bf14      	ite	ne
 8004026:	2301      	movne	r3, #1
 8004028:	2300      	moveq	r3, #0
 800402a:	b2db      	uxtb	r3, r3
 800402c:	e00b      	b.n	8004046 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	699b      	ldr	r3, [r3, #24]
 8004034:	43da      	mvns	r2, r3
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	4013      	ands	r3, r2
 800403a:	b29b      	uxth	r3, r3
 800403c:	2b00      	cmp	r3, #0
 800403e:	bf14      	ite	ne
 8004040:	2301      	movne	r3, #1
 8004042:	2300      	moveq	r3, #0
 8004044:	b2db      	uxtb	r3, r3
 8004046:	2b00      	cmp	r3, #0
 8004048:	d016      	beq.n	8004078 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2200      	movs	r2, #0
 800404e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2220      	movs	r2, #32
 8004054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2200      	movs	r2, #0
 800405c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004064:	f043 0220 	orr.w	r2, r3, #32
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2200      	movs	r2, #0
 8004070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e021      	b.n	80040bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	0c1b      	lsrs	r3, r3, #16
 800407c:	b2db      	uxtb	r3, r3
 800407e:	2b01      	cmp	r3, #1
 8004080:	d10c      	bne.n	800409c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	695b      	ldr	r3, [r3, #20]
 8004088:	43da      	mvns	r2, r3
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	4013      	ands	r3, r2
 800408e:	b29b      	uxth	r3, r3
 8004090:	2b00      	cmp	r3, #0
 8004092:	bf14      	ite	ne
 8004094:	2301      	movne	r3, #1
 8004096:	2300      	moveq	r3, #0
 8004098:	b2db      	uxtb	r3, r3
 800409a:	e00b      	b.n	80040b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	699b      	ldr	r3, [r3, #24]
 80040a2:	43da      	mvns	r2, r3
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	4013      	ands	r3, r2
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	bf14      	ite	ne
 80040ae:	2301      	movne	r3, #1
 80040b0:	2300      	moveq	r3, #0
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	f47f af6d 	bne.w	8003f94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80040ba:	2300      	movs	r3, #0
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3710      	adds	r7, #16
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	60b9      	str	r1, [r7, #8]
 80040ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040d0:	e034      	b.n	800413c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80040d2:	68f8      	ldr	r0, [r7, #12]
 80040d4:	f000 f8e3 	bl	800429e <I2C_IsAcknowledgeFailed>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d001      	beq.n	80040e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e034      	b.n	800414c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040e8:	d028      	beq.n	800413c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040ea:	f7fe fc0d 	bl	8002908 <HAL_GetTick>
 80040ee:	4602      	mov	r2, r0
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	68ba      	ldr	r2, [r7, #8]
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d302      	bcc.n	8004100 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d11d      	bne.n	800413c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	695b      	ldr	r3, [r3, #20]
 8004106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800410a:	2b80      	cmp	r3, #128	; 0x80
 800410c:	d016      	beq.n	800413c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2200      	movs	r2, #0
 8004112:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2220      	movs	r2, #32
 8004118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2200      	movs	r2, #0
 8004120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004128:	f043 0220 	orr.w	r2, r3, #32
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2200      	movs	r2, #0
 8004134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e007      	b.n	800414c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	695b      	ldr	r3, [r3, #20]
 8004142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004146:	2b80      	cmp	r3, #128	; 0x80
 8004148:	d1c3      	bne.n	80040d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800414a:	2300      	movs	r3, #0
}
 800414c:	4618      	mov	r0, r3
 800414e:	3710      	adds	r7, #16
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b084      	sub	sp, #16
 8004158:	af00      	add	r7, sp, #0
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	60b9      	str	r1, [r7, #8]
 800415e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004160:	e034      	b.n	80041cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004162:	68f8      	ldr	r0, [r7, #12]
 8004164:	f000 f89b 	bl	800429e <I2C_IsAcknowledgeFailed>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d001      	beq.n	8004172 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e034      	b.n	80041dc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004178:	d028      	beq.n	80041cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800417a:	f7fe fbc5 	bl	8002908 <HAL_GetTick>
 800417e:	4602      	mov	r2, r0
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	68ba      	ldr	r2, [r7, #8]
 8004186:	429a      	cmp	r2, r3
 8004188:	d302      	bcc.n	8004190 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d11d      	bne.n	80041cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	695b      	ldr	r3, [r3, #20]
 8004196:	f003 0304 	and.w	r3, r3, #4
 800419a:	2b04      	cmp	r3, #4
 800419c:	d016      	beq.n	80041cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2200      	movs	r2, #0
 80041a2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2220      	movs	r2, #32
 80041a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b8:	f043 0220 	orr.w	r2, r3, #32
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e007      	b.n	80041dc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	695b      	ldr	r3, [r3, #20]
 80041d2:	f003 0304 	and.w	r3, r3, #4
 80041d6:	2b04      	cmp	r3, #4
 80041d8:	d1c3      	bne.n	8004162 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80041da:	2300      	movs	r3, #0
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3710      	adds	r7, #16
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80041f0:	e049      	b.n	8004286 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	695b      	ldr	r3, [r3, #20]
 80041f8:	f003 0310 	and.w	r3, r3, #16
 80041fc:	2b10      	cmp	r3, #16
 80041fe:	d119      	bne.n	8004234 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f06f 0210 	mvn.w	r2, #16
 8004208:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2200      	movs	r2, #0
 800420e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2220      	movs	r2, #32
 8004214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2200      	movs	r2, #0
 800421c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2200      	movs	r2, #0
 800422c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e030      	b.n	8004296 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004234:	f7fe fb68 	bl	8002908 <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	68ba      	ldr	r2, [r7, #8]
 8004240:	429a      	cmp	r2, r3
 8004242:	d302      	bcc.n	800424a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d11d      	bne.n	8004286 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	695b      	ldr	r3, [r3, #20]
 8004250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004254:	2b40      	cmp	r3, #64	; 0x40
 8004256:	d016      	beq.n	8004286 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2200      	movs	r2, #0
 800425c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2220      	movs	r2, #32
 8004262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2200      	movs	r2, #0
 800426a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004272:	f043 0220 	orr.w	r2, r3, #32
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e007      	b.n	8004296 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	695b      	ldr	r3, [r3, #20]
 800428c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004290:	2b40      	cmp	r3, #64	; 0x40
 8004292:	d1ae      	bne.n	80041f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3710      	adds	r7, #16
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}

0800429e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800429e:	b480      	push	{r7}
 80042a0:	b083      	sub	sp, #12
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	695b      	ldr	r3, [r3, #20]
 80042ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042b4:	d11b      	bne.n	80042ee <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80042be:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2220      	movs	r2, #32
 80042ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042da:	f043 0204 	orr.w	r2, r3, #4
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e000      	b.n	80042f0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80042ee:	2300      	movs	r3, #0
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	370c      	adds	r7, #12
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bc80      	pop	{r7}
 80042f8:	4770      	bx	lr
	...

080042fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b086      	sub	sp, #24
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d101      	bne.n	800430e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e272      	b.n	80047f4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0301 	and.w	r3, r3, #1
 8004316:	2b00      	cmp	r3, #0
 8004318:	f000 8087 	beq.w	800442a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800431c:	4b92      	ldr	r3, [pc, #584]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f003 030c 	and.w	r3, r3, #12
 8004324:	2b04      	cmp	r3, #4
 8004326:	d00c      	beq.n	8004342 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004328:	4b8f      	ldr	r3, [pc, #572]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f003 030c 	and.w	r3, r3, #12
 8004330:	2b08      	cmp	r3, #8
 8004332:	d112      	bne.n	800435a <HAL_RCC_OscConfig+0x5e>
 8004334:	4b8c      	ldr	r3, [pc, #560]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800433c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004340:	d10b      	bne.n	800435a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004342:	4b89      	ldr	r3, [pc, #548]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d06c      	beq.n	8004428 <HAL_RCC_OscConfig+0x12c>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d168      	bne.n	8004428 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e24c      	b.n	80047f4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004362:	d106      	bne.n	8004372 <HAL_RCC_OscConfig+0x76>
 8004364:	4b80      	ldr	r3, [pc, #512]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a7f      	ldr	r2, [pc, #508]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 800436a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800436e:	6013      	str	r3, [r2, #0]
 8004370:	e02e      	b.n	80043d0 <HAL_RCC_OscConfig+0xd4>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d10c      	bne.n	8004394 <HAL_RCC_OscConfig+0x98>
 800437a:	4b7b      	ldr	r3, [pc, #492]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a7a      	ldr	r2, [pc, #488]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 8004380:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004384:	6013      	str	r3, [r2, #0]
 8004386:	4b78      	ldr	r3, [pc, #480]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a77      	ldr	r2, [pc, #476]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 800438c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004390:	6013      	str	r3, [r2, #0]
 8004392:	e01d      	b.n	80043d0 <HAL_RCC_OscConfig+0xd4>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800439c:	d10c      	bne.n	80043b8 <HAL_RCC_OscConfig+0xbc>
 800439e:	4b72      	ldr	r3, [pc, #456]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a71      	ldr	r2, [pc, #452]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 80043a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043a8:	6013      	str	r3, [r2, #0]
 80043aa:	4b6f      	ldr	r3, [pc, #444]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a6e      	ldr	r2, [pc, #440]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 80043b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043b4:	6013      	str	r3, [r2, #0]
 80043b6:	e00b      	b.n	80043d0 <HAL_RCC_OscConfig+0xd4>
 80043b8:	4b6b      	ldr	r3, [pc, #428]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a6a      	ldr	r2, [pc, #424]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 80043be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043c2:	6013      	str	r3, [r2, #0]
 80043c4:	4b68      	ldr	r3, [pc, #416]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a67      	ldr	r2, [pc, #412]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 80043ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d013      	beq.n	8004400 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043d8:	f7fe fa96 	bl	8002908 <HAL_GetTick>
 80043dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043de:	e008      	b.n	80043f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043e0:	f7fe fa92 	bl	8002908 <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	2b64      	cmp	r3, #100	; 0x64
 80043ec:	d901      	bls.n	80043f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e200      	b.n	80047f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043f2:	4b5d      	ldr	r3, [pc, #372]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d0f0      	beq.n	80043e0 <HAL_RCC_OscConfig+0xe4>
 80043fe:	e014      	b.n	800442a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004400:	f7fe fa82 	bl	8002908 <HAL_GetTick>
 8004404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004406:	e008      	b.n	800441a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004408:	f7fe fa7e 	bl	8002908 <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	2b64      	cmp	r3, #100	; 0x64
 8004414:	d901      	bls.n	800441a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e1ec      	b.n	80047f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800441a:	4b53      	ldr	r3, [pc, #332]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d1f0      	bne.n	8004408 <HAL_RCC_OscConfig+0x10c>
 8004426:	e000      	b.n	800442a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004428:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0302 	and.w	r3, r3, #2
 8004432:	2b00      	cmp	r3, #0
 8004434:	d063      	beq.n	80044fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004436:	4b4c      	ldr	r3, [pc, #304]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	f003 030c 	and.w	r3, r3, #12
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00b      	beq.n	800445a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004442:	4b49      	ldr	r3, [pc, #292]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	f003 030c 	and.w	r3, r3, #12
 800444a:	2b08      	cmp	r3, #8
 800444c:	d11c      	bne.n	8004488 <HAL_RCC_OscConfig+0x18c>
 800444e:	4b46      	ldr	r3, [pc, #280]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d116      	bne.n	8004488 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800445a:	4b43      	ldr	r3, [pc, #268]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0302 	and.w	r3, r3, #2
 8004462:	2b00      	cmp	r3, #0
 8004464:	d005      	beq.n	8004472 <HAL_RCC_OscConfig+0x176>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	2b01      	cmp	r3, #1
 800446c:	d001      	beq.n	8004472 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e1c0      	b.n	80047f4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004472:	4b3d      	ldr	r3, [pc, #244]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	695b      	ldr	r3, [r3, #20]
 800447e:	00db      	lsls	r3, r3, #3
 8004480:	4939      	ldr	r1, [pc, #228]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 8004482:	4313      	orrs	r3, r2
 8004484:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004486:	e03a      	b.n	80044fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	691b      	ldr	r3, [r3, #16]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d020      	beq.n	80044d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004490:	4b36      	ldr	r3, [pc, #216]	; (800456c <HAL_RCC_OscConfig+0x270>)
 8004492:	2201      	movs	r2, #1
 8004494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004496:	f7fe fa37 	bl	8002908 <HAL_GetTick>
 800449a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800449c:	e008      	b.n	80044b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800449e:	f7fe fa33 	bl	8002908 <HAL_GetTick>
 80044a2:	4602      	mov	r2, r0
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d901      	bls.n	80044b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80044ac:	2303      	movs	r3, #3
 80044ae:	e1a1      	b.n	80047f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044b0:	4b2d      	ldr	r3, [pc, #180]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0302 	and.w	r3, r3, #2
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d0f0      	beq.n	800449e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044bc:	4b2a      	ldr	r3, [pc, #168]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	695b      	ldr	r3, [r3, #20]
 80044c8:	00db      	lsls	r3, r3, #3
 80044ca:	4927      	ldr	r1, [pc, #156]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	600b      	str	r3, [r1, #0]
 80044d0:	e015      	b.n	80044fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044d2:	4b26      	ldr	r3, [pc, #152]	; (800456c <HAL_RCC_OscConfig+0x270>)
 80044d4:	2200      	movs	r2, #0
 80044d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044d8:	f7fe fa16 	bl	8002908 <HAL_GetTick>
 80044dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044de:	e008      	b.n	80044f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044e0:	f7fe fa12 	bl	8002908 <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d901      	bls.n	80044f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e180      	b.n	80047f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044f2:	4b1d      	ldr	r3, [pc, #116]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0302 	and.w	r3, r3, #2
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1f0      	bne.n	80044e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0308 	and.w	r3, r3, #8
 8004506:	2b00      	cmp	r3, #0
 8004508:	d03a      	beq.n	8004580 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	699b      	ldr	r3, [r3, #24]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d019      	beq.n	8004546 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004512:	4b17      	ldr	r3, [pc, #92]	; (8004570 <HAL_RCC_OscConfig+0x274>)
 8004514:	2201      	movs	r2, #1
 8004516:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004518:	f7fe f9f6 	bl	8002908 <HAL_GetTick>
 800451c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800451e:	e008      	b.n	8004532 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004520:	f7fe f9f2 	bl	8002908 <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	2b02      	cmp	r3, #2
 800452c:	d901      	bls.n	8004532 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e160      	b.n	80047f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004532:	4b0d      	ldr	r3, [pc, #52]	; (8004568 <HAL_RCC_OscConfig+0x26c>)
 8004534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004536:	f003 0302 	and.w	r3, r3, #2
 800453a:	2b00      	cmp	r3, #0
 800453c:	d0f0      	beq.n	8004520 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800453e:	2001      	movs	r0, #1
 8004540:	f000 face 	bl	8004ae0 <RCC_Delay>
 8004544:	e01c      	b.n	8004580 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004546:	4b0a      	ldr	r3, [pc, #40]	; (8004570 <HAL_RCC_OscConfig+0x274>)
 8004548:	2200      	movs	r2, #0
 800454a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800454c:	f7fe f9dc 	bl	8002908 <HAL_GetTick>
 8004550:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004552:	e00f      	b.n	8004574 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004554:	f7fe f9d8 	bl	8002908 <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	2b02      	cmp	r3, #2
 8004560:	d908      	bls.n	8004574 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e146      	b.n	80047f4 <HAL_RCC_OscConfig+0x4f8>
 8004566:	bf00      	nop
 8004568:	40021000 	.word	0x40021000
 800456c:	42420000 	.word	0x42420000
 8004570:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004574:	4b92      	ldr	r3, [pc, #584]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 8004576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004578:	f003 0302 	and.w	r3, r3, #2
 800457c:	2b00      	cmp	r3, #0
 800457e:	d1e9      	bne.n	8004554 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0304 	and.w	r3, r3, #4
 8004588:	2b00      	cmp	r3, #0
 800458a:	f000 80a6 	beq.w	80046da <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800458e:	2300      	movs	r3, #0
 8004590:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004592:	4b8b      	ldr	r3, [pc, #556]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 8004594:	69db      	ldr	r3, [r3, #28]
 8004596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d10d      	bne.n	80045ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800459e:	4b88      	ldr	r3, [pc, #544]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 80045a0:	69db      	ldr	r3, [r3, #28]
 80045a2:	4a87      	ldr	r2, [pc, #540]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 80045a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045a8:	61d3      	str	r3, [r2, #28]
 80045aa:	4b85      	ldr	r3, [pc, #532]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 80045ac:	69db      	ldr	r3, [r3, #28]
 80045ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045b2:	60bb      	str	r3, [r7, #8]
 80045b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045b6:	2301      	movs	r3, #1
 80045b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045ba:	4b82      	ldr	r3, [pc, #520]	; (80047c4 <HAL_RCC_OscConfig+0x4c8>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d118      	bne.n	80045f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045c6:	4b7f      	ldr	r3, [pc, #508]	; (80047c4 <HAL_RCC_OscConfig+0x4c8>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a7e      	ldr	r2, [pc, #504]	; (80047c4 <HAL_RCC_OscConfig+0x4c8>)
 80045cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045d2:	f7fe f999 	bl	8002908 <HAL_GetTick>
 80045d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045d8:	e008      	b.n	80045ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045da:	f7fe f995 	bl	8002908 <HAL_GetTick>
 80045de:	4602      	mov	r2, r0
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	2b64      	cmp	r3, #100	; 0x64
 80045e6:	d901      	bls.n	80045ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80045e8:	2303      	movs	r3, #3
 80045ea:	e103      	b.n	80047f4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045ec:	4b75      	ldr	r3, [pc, #468]	; (80047c4 <HAL_RCC_OscConfig+0x4c8>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d0f0      	beq.n	80045da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d106      	bne.n	800460e <HAL_RCC_OscConfig+0x312>
 8004600:	4b6f      	ldr	r3, [pc, #444]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 8004602:	6a1b      	ldr	r3, [r3, #32]
 8004604:	4a6e      	ldr	r2, [pc, #440]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 8004606:	f043 0301 	orr.w	r3, r3, #1
 800460a:	6213      	str	r3, [r2, #32]
 800460c:	e02d      	b.n	800466a <HAL_RCC_OscConfig+0x36e>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d10c      	bne.n	8004630 <HAL_RCC_OscConfig+0x334>
 8004616:	4b6a      	ldr	r3, [pc, #424]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 8004618:	6a1b      	ldr	r3, [r3, #32]
 800461a:	4a69      	ldr	r2, [pc, #420]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 800461c:	f023 0301 	bic.w	r3, r3, #1
 8004620:	6213      	str	r3, [r2, #32]
 8004622:	4b67      	ldr	r3, [pc, #412]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	4a66      	ldr	r2, [pc, #408]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 8004628:	f023 0304 	bic.w	r3, r3, #4
 800462c:	6213      	str	r3, [r2, #32]
 800462e:	e01c      	b.n	800466a <HAL_RCC_OscConfig+0x36e>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	2b05      	cmp	r3, #5
 8004636:	d10c      	bne.n	8004652 <HAL_RCC_OscConfig+0x356>
 8004638:	4b61      	ldr	r3, [pc, #388]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 800463a:	6a1b      	ldr	r3, [r3, #32]
 800463c:	4a60      	ldr	r2, [pc, #384]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 800463e:	f043 0304 	orr.w	r3, r3, #4
 8004642:	6213      	str	r3, [r2, #32]
 8004644:	4b5e      	ldr	r3, [pc, #376]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 8004646:	6a1b      	ldr	r3, [r3, #32]
 8004648:	4a5d      	ldr	r2, [pc, #372]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 800464a:	f043 0301 	orr.w	r3, r3, #1
 800464e:	6213      	str	r3, [r2, #32]
 8004650:	e00b      	b.n	800466a <HAL_RCC_OscConfig+0x36e>
 8004652:	4b5b      	ldr	r3, [pc, #364]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 8004654:	6a1b      	ldr	r3, [r3, #32]
 8004656:	4a5a      	ldr	r2, [pc, #360]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 8004658:	f023 0301 	bic.w	r3, r3, #1
 800465c:	6213      	str	r3, [r2, #32]
 800465e:	4b58      	ldr	r3, [pc, #352]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 8004660:	6a1b      	ldr	r3, [r3, #32]
 8004662:	4a57      	ldr	r2, [pc, #348]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 8004664:	f023 0304 	bic.w	r3, r3, #4
 8004668:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d015      	beq.n	800469e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004672:	f7fe f949 	bl	8002908 <HAL_GetTick>
 8004676:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004678:	e00a      	b.n	8004690 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800467a:	f7fe f945 	bl	8002908 <HAL_GetTick>
 800467e:	4602      	mov	r2, r0
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	f241 3288 	movw	r2, #5000	; 0x1388
 8004688:	4293      	cmp	r3, r2
 800468a:	d901      	bls.n	8004690 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e0b1      	b.n	80047f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004690:	4b4b      	ldr	r3, [pc, #300]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 8004692:	6a1b      	ldr	r3, [r3, #32]
 8004694:	f003 0302 	and.w	r3, r3, #2
 8004698:	2b00      	cmp	r3, #0
 800469a:	d0ee      	beq.n	800467a <HAL_RCC_OscConfig+0x37e>
 800469c:	e014      	b.n	80046c8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800469e:	f7fe f933 	bl	8002908 <HAL_GetTick>
 80046a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046a4:	e00a      	b.n	80046bc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046a6:	f7fe f92f 	bl	8002908 <HAL_GetTick>
 80046aa:	4602      	mov	r2, r0
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d901      	bls.n	80046bc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80046b8:	2303      	movs	r3, #3
 80046ba:	e09b      	b.n	80047f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046bc:	4b40      	ldr	r3, [pc, #256]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 80046be:	6a1b      	ldr	r3, [r3, #32]
 80046c0:	f003 0302 	and.w	r3, r3, #2
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d1ee      	bne.n	80046a6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80046c8:	7dfb      	ldrb	r3, [r7, #23]
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d105      	bne.n	80046da <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046ce:	4b3c      	ldr	r3, [pc, #240]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 80046d0:	69db      	ldr	r3, [r3, #28]
 80046d2:	4a3b      	ldr	r2, [pc, #236]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 80046d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046d8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	69db      	ldr	r3, [r3, #28]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	f000 8087 	beq.w	80047f2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046e4:	4b36      	ldr	r3, [pc, #216]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	f003 030c 	and.w	r3, r3, #12
 80046ec:	2b08      	cmp	r3, #8
 80046ee:	d061      	beq.n	80047b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	69db      	ldr	r3, [r3, #28]
 80046f4:	2b02      	cmp	r3, #2
 80046f6:	d146      	bne.n	8004786 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046f8:	4b33      	ldr	r3, [pc, #204]	; (80047c8 <HAL_RCC_OscConfig+0x4cc>)
 80046fa:	2200      	movs	r2, #0
 80046fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046fe:	f7fe f903 	bl	8002908 <HAL_GetTick>
 8004702:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004704:	e008      	b.n	8004718 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004706:	f7fe f8ff 	bl	8002908 <HAL_GetTick>
 800470a:	4602      	mov	r2, r0
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	2b02      	cmp	r3, #2
 8004712:	d901      	bls.n	8004718 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	e06d      	b.n	80047f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004718:	4b29      	ldr	r3, [pc, #164]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d1f0      	bne.n	8004706 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6a1b      	ldr	r3, [r3, #32]
 8004728:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800472c:	d108      	bne.n	8004740 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800472e:	4b24      	ldr	r3, [pc, #144]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	4921      	ldr	r1, [pc, #132]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 800473c:	4313      	orrs	r3, r2
 800473e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004740:	4b1f      	ldr	r3, [pc, #124]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a19      	ldr	r1, [r3, #32]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004750:	430b      	orrs	r3, r1
 8004752:	491b      	ldr	r1, [pc, #108]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 8004754:	4313      	orrs	r3, r2
 8004756:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004758:	4b1b      	ldr	r3, [pc, #108]	; (80047c8 <HAL_RCC_OscConfig+0x4cc>)
 800475a:	2201      	movs	r2, #1
 800475c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800475e:	f7fe f8d3 	bl	8002908 <HAL_GetTick>
 8004762:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004764:	e008      	b.n	8004778 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004766:	f7fe f8cf 	bl	8002908 <HAL_GetTick>
 800476a:	4602      	mov	r2, r0
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	2b02      	cmp	r3, #2
 8004772:	d901      	bls.n	8004778 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004774:	2303      	movs	r3, #3
 8004776:	e03d      	b.n	80047f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004778:	4b11      	ldr	r3, [pc, #68]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d0f0      	beq.n	8004766 <HAL_RCC_OscConfig+0x46a>
 8004784:	e035      	b.n	80047f2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004786:	4b10      	ldr	r3, [pc, #64]	; (80047c8 <HAL_RCC_OscConfig+0x4cc>)
 8004788:	2200      	movs	r2, #0
 800478a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800478c:	f7fe f8bc 	bl	8002908 <HAL_GetTick>
 8004790:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004792:	e008      	b.n	80047a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004794:	f7fe f8b8 	bl	8002908 <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	2b02      	cmp	r3, #2
 80047a0:	d901      	bls.n	80047a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e026      	b.n	80047f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047a6:	4b06      	ldr	r3, [pc, #24]	; (80047c0 <HAL_RCC_OscConfig+0x4c4>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d1f0      	bne.n	8004794 <HAL_RCC_OscConfig+0x498>
 80047b2:	e01e      	b.n	80047f2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	69db      	ldr	r3, [r3, #28]
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d107      	bne.n	80047cc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e019      	b.n	80047f4 <HAL_RCC_OscConfig+0x4f8>
 80047c0:	40021000 	.word	0x40021000
 80047c4:	40007000 	.word	0x40007000
 80047c8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80047cc:	4b0b      	ldr	r3, [pc, #44]	; (80047fc <HAL_RCC_OscConfig+0x500>)
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a1b      	ldr	r3, [r3, #32]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d106      	bne.n	80047ee <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d001      	beq.n	80047f2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e000      	b.n	80047f4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80047f2:	2300      	movs	r3, #0
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3718      	adds	r7, #24
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	40021000 	.word	0x40021000

08004800 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d101      	bne.n	8004814 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e0d0      	b.n	80049b6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004814:	4b6a      	ldr	r3, [pc, #424]	; (80049c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 0307 	and.w	r3, r3, #7
 800481c:	683a      	ldr	r2, [r7, #0]
 800481e:	429a      	cmp	r2, r3
 8004820:	d910      	bls.n	8004844 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004822:	4b67      	ldr	r3, [pc, #412]	; (80049c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f023 0207 	bic.w	r2, r3, #7
 800482a:	4965      	ldr	r1, [pc, #404]	; (80049c0 <HAL_RCC_ClockConfig+0x1c0>)
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	4313      	orrs	r3, r2
 8004830:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004832:	4b63      	ldr	r3, [pc, #396]	; (80049c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0307 	and.w	r3, r3, #7
 800483a:	683a      	ldr	r2, [r7, #0]
 800483c:	429a      	cmp	r2, r3
 800483e:	d001      	beq.n	8004844 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e0b8      	b.n	80049b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0302 	and.w	r3, r3, #2
 800484c:	2b00      	cmp	r3, #0
 800484e:	d020      	beq.n	8004892 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0304 	and.w	r3, r3, #4
 8004858:	2b00      	cmp	r3, #0
 800485a:	d005      	beq.n	8004868 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800485c:	4b59      	ldr	r3, [pc, #356]	; (80049c4 <HAL_RCC_ClockConfig+0x1c4>)
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	4a58      	ldr	r2, [pc, #352]	; (80049c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004862:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004866:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0308 	and.w	r3, r3, #8
 8004870:	2b00      	cmp	r3, #0
 8004872:	d005      	beq.n	8004880 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004874:	4b53      	ldr	r3, [pc, #332]	; (80049c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	4a52      	ldr	r2, [pc, #328]	; (80049c4 <HAL_RCC_ClockConfig+0x1c4>)
 800487a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800487e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004880:	4b50      	ldr	r3, [pc, #320]	; (80049c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	494d      	ldr	r1, [pc, #308]	; (80049c4 <HAL_RCC_ClockConfig+0x1c4>)
 800488e:	4313      	orrs	r3, r2
 8004890:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0301 	and.w	r3, r3, #1
 800489a:	2b00      	cmp	r3, #0
 800489c:	d040      	beq.n	8004920 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d107      	bne.n	80048b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048a6:	4b47      	ldr	r3, [pc, #284]	; (80049c4 <HAL_RCC_ClockConfig+0x1c4>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d115      	bne.n	80048de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e07f      	b.n	80049b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d107      	bne.n	80048ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048be:	4b41      	ldr	r3, [pc, #260]	; (80049c4 <HAL_RCC_ClockConfig+0x1c4>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d109      	bne.n	80048de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e073      	b.n	80049b6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048ce:	4b3d      	ldr	r3, [pc, #244]	; (80049c4 <HAL_RCC_ClockConfig+0x1c4>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0302 	and.w	r3, r3, #2
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d101      	bne.n	80048de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e06b      	b.n	80049b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048de:	4b39      	ldr	r3, [pc, #228]	; (80049c4 <HAL_RCC_ClockConfig+0x1c4>)
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	f023 0203 	bic.w	r2, r3, #3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	4936      	ldr	r1, [pc, #216]	; (80049c4 <HAL_RCC_ClockConfig+0x1c4>)
 80048ec:	4313      	orrs	r3, r2
 80048ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048f0:	f7fe f80a 	bl	8002908 <HAL_GetTick>
 80048f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048f6:	e00a      	b.n	800490e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048f8:	f7fe f806 	bl	8002908 <HAL_GetTick>
 80048fc:	4602      	mov	r2, r0
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	f241 3288 	movw	r2, #5000	; 0x1388
 8004906:	4293      	cmp	r3, r2
 8004908:	d901      	bls.n	800490e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	e053      	b.n	80049b6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800490e:	4b2d      	ldr	r3, [pc, #180]	; (80049c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f003 020c 	and.w	r2, r3, #12
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	429a      	cmp	r2, r3
 800491e:	d1eb      	bne.n	80048f8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004920:	4b27      	ldr	r3, [pc, #156]	; (80049c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0307 	and.w	r3, r3, #7
 8004928:	683a      	ldr	r2, [r7, #0]
 800492a:	429a      	cmp	r2, r3
 800492c:	d210      	bcs.n	8004950 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800492e:	4b24      	ldr	r3, [pc, #144]	; (80049c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f023 0207 	bic.w	r2, r3, #7
 8004936:	4922      	ldr	r1, [pc, #136]	; (80049c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	4313      	orrs	r3, r2
 800493c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800493e:	4b20      	ldr	r3, [pc, #128]	; (80049c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0307 	and.w	r3, r3, #7
 8004946:	683a      	ldr	r2, [r7, #0]
 8004948:	429a      	cmp	r2, r3
 800494a:	d001      	beq.n	8004950 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e032      	b.n	80049b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0304 	and.w	r3, r3, #4
 8004958:	2b00      	cmp	r3, #0
 800495a:	d008      	beq.n	800496e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800495c:	4b19      	ldr	r3, [pc, #100]	; (80049c4 <HAL_RCC_ClockConfig+0x1c4>)
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	4916      	ldr	r1, [pc, #88]	; (80049c4 <HAL_RCC_ClockConfig+0x1c4>)
 800496a:	4313      	orrs	r3, r2
 800496c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 0308 	and.w	r3, r3, #8
 8004976:	2b00      	cmp	r3, #0
 8004978:	d009      	beq.n	800498e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800497a:	4b12      	ldr	r3, [pc, #72]	; (80049c4 <HAL_RCC_ClockConfig+0x1c4>)
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	691b      	ldr	r3, [r3, #16]
 8004986:	00db      	lsls	r3, r3, #3
 8004988:	490e      	ldr	r1, [pc, #56]	; (80049c4 <HAL_RCC_ClockConfig+0x1c4>)
 800498a:	4313      	orrs	r3, r2
 800498c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800498e:	f000 f821 	bl	80049d4 <HAL_RCC_GetSysClockFreq>
 8004992:	4602      	mov	r2, r0
 8004994:	4b0b      	ldr	r3, [pc, #44]	; (80049c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	091b      	lsrs	r3, r3, #4
 800499a:	f003 030f 	and.w	r3, r3, #15
 800499e:	490a      	ldr	r1, [pc, #40]	; (80049c8 <HAL_RCC_ClockConfig+0x1c8>)
 80049a0:	5ccb      	ldrb	r3, [r1, r3]
 80049a2:	fa22 f303 	lsr.w	r3, r2, r3
 80049a6:	4a09      	ldr	r2, [pc, #36]	; (80049cc <HAL_RCC_ClockConfig+0x1cc>)
 80049a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80049aa:	4b09      	ldr	r3, [pc, #36]	; (80049d0 <HAL_RCC_ClockConfig+0x1d0>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4618      	mov	r0, r3
 80049b0:	f7fd ff68 	bl	8002884 <HAL_InitTick>

  return HAL_OK;
 80049b4:	2300      	movs	r3, #0
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3710      	adds	r7, #16
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	40022000 	.word	0x40022000
 80049c4:	40021000 	.word	0x40021000
 80049c8:	08006854 	.word	0x08006854
 80049cc:	20000004 	.word	0x20000004
 80049d0:	20000008 	.word	0x20000008

080049d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b087      	sub	sp, #28
 80049d8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80049da:	2300      	movs	r3, #0
 80049dc:	60fb      	str	r3, [r7, #12]
 80049de:	2300      	movs	r3, #0
 80049e0:	60bb      	str	r3, [r7, #8]
 80049e2:	2300      	movs	r3, #0
 80049e4:	617b      	str	r3, [r7, #20]
 80049e6:	2300      	movs	r3, #0
 80049e8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80049ea:	2300      	movs	r3, #0
 80049ec:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80049ee:	4b1e      	ldr	r3, [pc, #120]	; (8004a68 <HAL_RCC_GetSysClockFreq+0x94>)
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f003 030c 	and.w	r3, r3, #12
 80049fa:	2b04      	cmp	r3, #4
 80049fc:	d002      	beq.n	8004a04 <HAL_RCC_GetSysClockFreq+0x30>
 80049fe:	2b08      	cmp	r3, #8
 8004a00:	d003      	beq.n	8004a0a <HAL_RCC_GetSysClockFreq+0x36>
 8004a02:	e027      	b.n	8004a54 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004a04:	4b19      	ldr	r3, [pc, #100]	; (8004a6c <HAL_RCC_GetSysClockFreq+0x98>)
 8004a06:	613b      	str	r3, [r7, #16]
      break;
 8004a08:	e027      	b.n	8004a5a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	0c9b      	lsrs	r3, r3, #18
 8004a0e:	f003 030f 	and.w	r3, r3, #15
 8004a12:	4a17      	ldr	r2, [pc, #92]	; (8004a70 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004a14:	5cd3      	ldrb	r3, [r2, r3]
 8004a16:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d010      	beq.n	8004a44 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004a22:	4b11      	ldr	r3, [pc, #68]	; (8004a68 <HAL_RCC_GetSysClockFreq+0x94>)
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	0c5b      	lsrs	r3, r3, #17
 8004a28:	f003 0301 	and.w	r3, r3, #1
 8004a2c:	4a11      	ldr	r2, [pc, #68]	; (8004a74 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004a2e:	5cd3      	ldrb	r3, [r2, r3]
 8004a30:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a0d      	ldr	r2, [pc, #52]	; (8004a6c <HAL_RCC_GetSysClockFreq+0x98>)
 8004a36:	fb03 f202 	mul.w	r2, r3, r2
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a40:	617b      	str	r3, [r7, #20]
 8004a42:	e004      	b.n	8004a4e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4a0c      	ldr	r2, [pc, #48]	; (8004a78 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004a48:	fb02 f303 	mul.w	r3, r2, r3
 8004a4c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	613b      	str	r3, [r7, #16]
      break;
 8004a52:	e002      	b.n	8004a5a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004a54:	4b05      	ldr	r3, [pc, #20]	; (8004a6c <HAL_RCC_GetSysClockFreq+0x98>)
 8004a56:	613b      	str	r3, [r7, #16]
      break;
 8004a58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a5a:	693b      	ldr	r3, [r7, #16]
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	371c      	adds	r7, #28
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bc80      	pop	{r7}
 8004a64:	4770      	bx	lr
 8004a66:	bf00      	nop
 8004a68:	40021000 	.word	0x40021000
 8004a6c:	007a1200 	.word	0x007a1200
 8004a70:	0800686c 	.word	0x0800686c
 8004a74:	0800687c 	.word	0x0800687c
 8004a78:	003d0900 	.word	0x003d0900

08004a7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a80:	4b02      	ldr	r3, [pc, #8]	; (8004a8c <HAL_RCC_GetHCLKFreq+0x10>)
 8004a82:	681b      	ldr	r3, [r3, #0]
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bc80      	pop	{r7}
 8004a8a:	4770      	bx	lr
 8004a8c:	20000004 	.word	0x20000004

08004a90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a94:	f7ff fff2 	bl	8004a7c <HAL_RCC_GetHCLKFreq>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	4b05      	ldr	r3, [pc, #20]	; (8004ab0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	0a1b      	lsrs	r3, r3, #8
 8004aa0:	f003 0307 	and.w	r3, r3, #7
 8004aa4:	4903      	ldr	r1, [pc, #12]	; (8004ab4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004aa6:	5ccb      	ldrb	r3, [r1, r3]
 8004aa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	40021000 	.word	0x40021000
 8004ab4:	08006864 	.word	0x08006864

08004ab8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004abc:	f7ff ffde 	bl	8004a7c <HAL_RCC_GetHCLKFreq>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	4b05      	ldr	r3, [pc, #20]	; (8004ad8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	0adb      	lsrs	r3, r3, #11
 8004ac8:	f003 0307 	and.w	r3, r3, #7
 8004acc:	4903      	ldr	r1, [pc, #12]	; (8004adc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ace:	5ccb      	ldrb	r3, [r1, r3]
 8004ad0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	40021000 	.word	0x40021000
 8004adc:	08006864 	.word	0x08006864

08004ae0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b085      	sub	sp, #20
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004ae8:	4b0a      	ldr	r3, [pc, #40]	; (8004b14 <RCC_Delay+0x34>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a0a      	ldr	r2, [pc, #40]	; (8004b18 <RCC_Delay+0x38>)
 8004aee:	fba2 2303 	umull	r2, r3, r2, r3
 8004af2:	0a5b      	lsrs	r3, r3, #9
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	fb02 f303 	mul.w	r3, r2, r3
 8004afa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004afc:	bf00      	nop
  }
  while (Delay --);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	1e5a      	subs	r2, r3, #1
 8004b02:	60fa      	str	r2, [r7, #12]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d1f9      	bne.n	8004afc <RCC_Delay+0x1c>
}
 8004b08:	bf00      	nop
 8004b0a:	bf00      	nop
 8004b0c:	3714      	adds	r7, #20
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bc80      	pop	{r7}
 8004b12:	4770      	bx	lr
 8004b14:	20000004 	.word	0x20000004
 8004b18:	10624dd3 	.word	0x10624dd3

08004b1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b082      	sub	sp, #8
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d101      	bne.n	8004b2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e076      	b.n	8004c1c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d108      	bne.n	8004b48 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b3e:	d009      	beq.n	8004b54 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	61da      	str	r2, [r3, #28]
 8004b46:	e005      	b.n	8004b54 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d106      	bne.n	8004b74 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f7fd fca0 	bl	80024b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2202      	movs	r2, #2
 8004b78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b8a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004b9c:	431a      	orrs	r2, r3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ba6:	431a      	orrs	r2, r3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	691b      	ldr	r3, [r3, #16]
 8004bac:	f003 0302 	and.w	r3, r3, #2
 8004bb0:	431a      	orrs	r2, r3
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	695b      	ldr	r3, [r3, #20]
 8004bb6:	f003 0301 	and.w	r3, r3, #1
 8004bba:	431a      	orrs	r2, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	699b      	ldr	r3, [r3, #24]
 8004bc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bc4:	431a      	orrs	r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	69db      	ldr	r3, [r3, #28]
 8004bca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004bce:	431a      	orrs	r2, r3
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6a1b      	ldr	r3, [r3, #32]
 8004bd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bd8:	ea42 0103 	orr.w	r1, r2, r3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	430a      	orrs	r2, r1
 8004bea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	699b      	ldr	r3, [r3, #24]
 8004bf0:	0c1a      	lsrs	r2, r3, #16
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f002 0204 	and.w	r2, r2, #4
 8004bfa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	69da      	ldr	r2, [r3, #28]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c0a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2201      	movs	r2, #1
 8004c16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004c1a:	2300      	movs	r3, #0
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3708      	adds	r7, #8
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b088      	sub	sp, #32
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	603b      	str	r3, [r7, #0]
 8004c30:	4613      	mov	r3, r2
 8004c32:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c34:	2300      	movs	r3, #0
 8004c36:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d101      	bne.n	8004c46 <HAL_SPI_Transmit+0x22>
 8004c42:	2302      	movs	r3, #2
 8004c44:	e12d      	b.n	8004ea2 <HAL_SPI_Transmit+0x27e>
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2201      	movs	r2, #1
 8004c4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c4e:	f7fd fe5b 	bl	8002908 <HAL_GetTick>
 8004c52:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004c54:	88fb      	ldrh	r3, [r7, #6]
 8004c56:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d002      	beq.n	8004c6a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004c64:	2302      	movs	r3, #2
 8004c66:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c68:	e116      	b.n	8004e98 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d002      	beq.n	8004c76 <HAL_SPI_Transmit+0x52>
 8004c70:	88fb      	ldrh	r3, [r7, #6]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d102      	bne.n	8004c7c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c7a:	e10d      	b.n	8004e98 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2203      	movs	r2, #3
 8004c80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2200      	movs	r2, #0
 8004c88:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	68ba      	ldr	r2, [r7, #8]
 8004c8e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	88fa      	ldrh	r2, [r7, #6]
 8004c94:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	88fa      	ldrh	r2, [r7, #6]
 8004c9a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2200      	movs	r2, #0
 8004cac:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cc2:	d10f      	bne.n	8004ce4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cd2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ce2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cee:	2b40      	cmp	r3, #64	; 0x40
 8004cf0:	d007      	beq.n	8004d02 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d00:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d0a:	d14f      	bne.n	8004dac <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d002      	beq.n	8004d1a <HAL_SPI_Transmit+0xf6>
 8004d14:	8afb      	ldrh	r3, [r7, #22]
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d142      	bne.n	8004da0 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d1e:	881a      	ldrh	r2, [r3, #0]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d2a:	1c9a      	adds	r2, r3, #2
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	3b01      	subs	r3, #1
 8004d38:	b29a      	uxth	r2, r3
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004d3e:	e02f      	b.n	8004da0 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	f003 0302 	and.w	r3, r3, #2
 8004d4a:	2b02      	cmp	r3, #2
 8004d4c:	d112      	bne.n	8004d74 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d52:	881a      	ldrh	r2, [r3, #0]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d5e:	1c9a      	adds	r2, r3, #2
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	3b01      	subs	r3, #1
 8004d6c:	b29a      	uxth	r2, r3
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	86da      	strh	r2, [r3, #54]	; 0x36
 8004d72:	e015      	b.n	8004da0 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d74:	f7fd fdc8 	bl	8002908 <HAL_GetTick>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	683a      	ldr	r2, [r7, #0]
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d803      	bhi.n	8004d8c <HAL_SPI_Transmit+0x168>
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d8a:	d102      	bne.n	8004d92 <HAL_SPI_Transmit+0x16e>
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d106      	bne.n	8004da0 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2201      	movs	r2, #1
 8004d9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004d9e:	e07b      	b.n	8004e98 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d1ca      	bne.n	8004d40 <HAL_SPI_Transmit+0x11c>
 8004daa:	e050      	b.n	8004e4e <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d002      	beq.n	8004dba <HAL_SPI_Transmit+0x196>
 8004db4:	8afb      	ldrh	r3, [r7, #22]
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d144      	bne.n	8004e44 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	330c      	adds	r3, #12
 8004dc4:	7812      	ldrb	r2, [r2, #0]
 8004dc6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dcc:	1c5a      	adds	r2, r3, #1
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	3b01      	subs	r3, #1
 8004dda:	b29a      	uxth	r2, r3
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004de0:	e030      	b.n	8004e44 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	f003 0302 	and.w	r3, r3, #2
 8004dec:	2b02      	cmp	r3, #2
 8004dee:	d113      	bne.n	8004e18 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	330c      	adds	r3, #12
 8004dfa:	7812      	ldrb	r2, [r2, #0]
 8004dfc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e02:	1c5a      	adds	r2, r3, #1
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	3b01      	subs	r3, #1
 8004e10:	b29a      	uxth	r2, r3
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	86da      	strh	r2, [r3, #54]	; 0x36
 8004e16:	e015      	b.n	8004e44 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e18:	f7fd fd76 	bl	8002908 <HAL_GetTick>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	683a      	ldr	r2, [r7, #0]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d803      	bhi.n	8004e30 <HAL_SPI_Transmit+0x20c>
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e2e:	d102      	bne.n	8004e36 <HAL_SPI_Transmit+0x212>
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d106      	bne.n	8004e44 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004e42:	e029      	b.n	8004e98 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d1c9      	bne.n	8004de2 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e4e:	69ba      	ldr	r2, [r7, #24]
 8004e50:	6839      	ldr	r1, [r7, #0]
 8004e52:	68f8      	ldr	r0, [r7, #12]
 8004e54:	f000 f9f8 	bl	8005248 <SPI_EndRxTxTransaction>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d002      	beq.n	8004e64 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2220      	movs	r2, #32
 8004e62:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d10a      	bne.n	8004e82 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	613b      	str	r3, [r7, #16]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	613b      	str	r3, [r7, #16]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	613b      	str	r3, [r7, #16]
 8004e80:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d002      	beq.n	8004e90 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	77fb      	strb	r3, [r7, #31]
 8004e8e:	e003      	b.n	8004e98 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2201      	movs	r2, #1
 8004e94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004ea0:	7ffb      	ldrb	r3, [r7, #31]
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3720      	adds	r7, #32
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
	...

08004eac <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b086      	sub	sp, #24
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	60b9      	str	r1, [r7, #8]
 8004eb6:	4613      	mov	r3, r2
 8004eb8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d101      	bne.n	8004ecc <HAL_SPI_Transmit_DMA+0x20>
 8004ec8:	2302      	movs	r3, #2
 8004eca:	e097      	b.n	8004ffc <HAL_SPI_Transmit_DMA+0x150>
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d002      	beq.n	8004ee6 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8004ee0:	2302      	movs	r3, #2
 8004ee2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004ee4:	e085      	b.n	8004ff2 <HAL_SPI_Transmit_DMA+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d002      	beq.n	8004ef2 <HAL_SPI_Transmit_DMA+0x46>
 8004eec:	88fb      	ldrh	r3, [r7, #6]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d102      	bne.n	8004ef8 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004ef6:	e07c      	b.n	8004ff2 <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2203      	movs	r2, #3
 8004efc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2200      	movs	r2, #0
 8004f04:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	68ba      	ldr	r2, [r7, #8]
 8004f0a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	88fa      	ldrh	r2, [r7, #6]
 8004f10:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	88fa      	ldrh	r2, [r7, #6]
 8004f16:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2200      	movs	r2, #0
 8004f22:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2200      	movs	r2, #0
 8004f28:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2200      	movs	r2, #0
 8004f34:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f3e:	d10f      	bne.n	8004f60 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f4e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f5e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f64:	4a27      	ldr	r2, [pc, #156]	; (8005004 <HAL_SPI_Transmit_DMA+0x158>)
 8004f66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f6c:	4a26      	ldr	r2, [pc, #152]	; (8005008 <HAL_SPI_Transmit_DMA+0x15c>)
 8004f6e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f74:	4a25      	ldr	r2, [pc, #148]	; (800500c <HAL_SPI_Transmit_DMA+0x160>)
 8004f76:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f88:	4619      	mov	r1, r3
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	330c      	adds	r3, #12
 8004f90:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f96:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004f98:	f7fd fe4c 	bl	8002c34 <HAL_DMA_Start_IT>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d008      	beq.n	8004fb4 <HAL_SPI_Transmit_DMA+0x108>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fa6:	f043 0210 	orr.w	r2, r3, #16
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	75fb      	strb	r3, [r7, #23]

    goto error;
 8004fb2:	e01e      	b.n	8004ff2 <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fbe:	2b40      	cmp	r3, #64	; 0x40
 8004fc0:	d007      	beq.n	8004fd2 <HAL_SPI_Transmit_DMA+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fd0:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	685a      	ldr	r2, [r3, #4]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f042 0220 	orr.w	r2, r2, #32
 8004fe0:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	685a      	ldr	r2, [r3, #4]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f042 0202 	orr.w	r2, r2, #2
 8004ff0:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004ffa:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3718      	adds	r7, #24
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	080050db 	.word	0x080050db
 8005008:	08005035 	.word	0x08005035
 800500c:	080050f7 	.word	0x080050f7

08005010 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005010:	b480      	push	{r7}
 8005012:	b083      	sub	sp, #12
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8005018:	bf00      	nop
 800501a:	370c      	adds	r7, #12
 800501c:	46bd      	mov	sp, r7
 800501e:	bc80      	pop	{r7}
 8005020:	4770      	bx	lr

08005022 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005022:	b480      	push	{r7}
 8005024:	b083      	sub	sp, #12
 8005026:	af00      	add	r7, sp, #0
 8005028:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800502a:	bf00      	nop
 800502c:	370c      	adds	r7, #12
 800502e:	46bd      	mov	sp, r7
 8005030:	bc80      	pop	{r7}
 8005032:	4770      	bx	lr

08005034 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b086      	sub	sp, #24
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005040:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005042:	f7fd fc61 	bl	8002908 <HAL_GetTick>
 8005046:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 0320 	and.w	r3, r3, #32
 8005052:	2b20      	cmp	r3, #32
 8005054:	d03b      	beq.n	80050ce <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	685a      	ldr	r2, [r3, #4]
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f022 0220 	bic.w	r2, r2, #32
 8005064:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	685a      	ldr	r2, [r3, #4]
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f022 0202 	bic.w	r2, r2, #2
 8005074:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005076:	693a      	ldr	r2, [r7, #16]
 8005078:	2164      	movs	r1, #100	; 0x64
 800507a:	6978      	ldr	r0, [r7, #20]
 800507c:	f000 f8e4 	bl	8005248 <SPI_EndRxTxTransaction>
 8005080:	4603      	mov	r3, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	d005      	beq.n	8005092 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800508a:	f043 0220 	orr.w	r2, r3, #32
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d10a      	bne.n	80050b0 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800509a:	2300      	movs	r3, #0
 800509c:	60fb      	str	r3, [r7, #12]
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	60fb      	str	r3, [r7, #12]
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	60fb      	str	r3, [r7, #12]
 80050ae:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	2200      	movs	r2, #0
 80050b4:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	2201      	movs	r2, #1
 80050ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d003      	beq.n	80050ce <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80050c6:	6978      	ldr	r0, [r7, #20]
 80050c8:	f7ff ffab 	bl	8005022 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80050cc:	e002      	b.n	80050d4 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80050ce:	6978      	ldr	r0, [r7, #20]
 80050d0:	f7fb fdf8 	bl	8000cc4 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80050d4:	3718      	adds	r7, #24
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}

080050da <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80050da:	b580      	push	{r7, lr}
 80050dc:	b084      	sub	sp, #16
 80050de:	af00      	add	r7, sp, #0
 80050e0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e6:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80050e8:	68f8      	ldr	r0, [r7, #12]
 80050ea:	f7ff ff91 	bl	8005010 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80050ee:	bf00      	nop
 80050f0:	3710      	adds	r7, #16
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}

080050f6 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80050f6:	b580      	push	{r7, lr}
 80050f8:	b084      	sub	sp, #16
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005102:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	685a      	ldr	r2, [r3, #4]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f022 0203 	bic.w	r2, r2, #3
 8005112:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005118:	f043 0210 	orr.w	r2, r3, #16
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005128:	68f8      	ldr	r0, [r7, #12]
 800512a:	f7ff ff7a 	bl	8005022 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800512e:	bf00      	nop
 8005130:	3710      	adds	r7, #16
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
	...

08005138 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b088      	sub	sp, #32
 800513c:	af00      	add	r7, sp, #0
 800513e:	60f8      	str	r0, [r7, #12]
 8005140:	60b9      	str	r1, [r7, #8]
 8005142:	603b      	str	r3, [r7, #0]
 8005144:	4613      	mov	r3, r2
 8005146:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005148:	f7fd fbde 	bl	8002908 <HAL_GetTick>
 800514c:	4602      	mov	r2, r0
 800514e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005150:	1a9b      	subs	r3, r3, r2
 8005152:	683a      	ldr	r2, [r7, #0]
 8005154:	4413      	add	r3, r2
 8005156:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005158:	f7fd fbd6 	bl	8002908 <HAL_GetTick>
 800515c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800515e:	4b39      	ldr	r3, [pc, #228]	; (8005244 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	015b      	lsls	r3, r3, #5
 8005164:	0d1b      	lsrs	r3, r3, #20
 8005166:	69fa      	ldr	r2, [r7, #28]
 8005168:	fb02 f303 	mul.w	r3, r2, r3
 800516c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800516e:	e054      	b.n	800521a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005176:	d050      	beq.n	800521a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005178:	f7fd fbc6 	bl	8002908 <HAL_GetTick>
 800517c:	4602      	mov	r2, r0
 800517e:	69bb      	ldr	r3, [r7, #24]
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	69fa      	ldr	r2, [r7, #28]
 8005184:	429a      	cmp	r2, r3
 8005186:	d902      	bls.n	800518e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d13d      	bne.n	800520a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	685a      	ldr	r2, [r3, #4]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800519c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051a6:	d111      	bne.n	80051cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051b0:	d004      	beq.n	80051bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051ba:	d107      	bne.n	80051cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051d4:	d10f      	bne.n	80051f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051e4:	601a      	str	r2, [r3, #0]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80051f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2201      	movs	r2, #1
 80051fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2200      	movs	r2, #0
 8005202:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005206:	2303      	movs	r3, #3
 8005208:	e017      	b.n	800523a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d101      	bne.n	8005214 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005210:	2300      	movs	r3, #0
 8005212:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	3b01      	subs	r3, #1
 8005218:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	689a      	ldr	r2, [r3, #8]
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	4013      	ands	r3, r2
 8005224:	68ba      	ldr	r2, [r7, #8]
 8005226:	429a      	cmp	r2, r3
 8005228:	bf0c      	ite	eq
 800522a:	2301      	moveq	r3, #1
 800522c:	2300      	movne	r3, #0
 800522e:	b2db      	uxtb	r3, r3
 8005230:	461a      	mov	r2, r3
 8005232:	79fb      	ldrb	r3, [r7, #7]
 8005234:	429a      	cmp	r2, r3
 8005236:	d19b      	bne.n	8005170 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005238:	2300      	movs	r3, #0
}
 800523a:	4618      	mov	r0, r3
 800523c:	3720      	adds	r7, #32
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
 8005242:	bf00      	nop
 8005244:	20000004 	.word	0x20000004

08005248 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b086      	sub	sp, #24
 800524c:	af02      	add	r7, sp, #8
 800524e:	60f8      	str	r0, [r7, #12]
 8005250:	60b9      	str	r1, [r7, #8]
 8005252:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	9300      	str	r3, [sp, #0]
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	2200      	movs	r2, #0
 800525c:	2180      	movs	r1, #128	; 0x80
 800525e:	68f8      	ldr	r0, [r7, #12]
 8005260:	f7ff ff6a 	bl	8005138 <SPI_WaitFlagStateUntilTimeout>
 8005264:	4603      	mov	r3, r0
 8005266:	2b00      	cmp	r3, #0
 8005268:	d007      	beq.n	800527a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800526e:	f043 0220 	orr.w	r2, r3, #32
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005276:	2303      	movs	r3, #3
 8005278:	e000      	b.n	800527c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800527a:	2300      	movs	r3, #0
}
 800527c:	4618      	mov	r0, r3
 800527e:	3710      	adds	r7, #16
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}

08005284 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b082      	sub	sp, #8
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d101      	bne.n	8005296 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e042      	b.n	800531c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800529c:	b2db      	uxtb	r3, r3
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d106      	bne.n	80052b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f7fd f96a 	bl	8002584 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2224      	movs	r2, #36	; 0x24
 80052b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	68da      	ldr	r2, [r3, #12]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f000 f91d 	bl	8005508 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	691a      	ldr	r2, [r3, #16]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80052dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	695a      	ldr	r2, [r3, #20]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80052ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	68da      	ldr	r2, [r3, #12]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80052fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2220      	movs	r2, #32
 8005308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2220      	movs	r2, #32
 8005310:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800531a:	2300      	movs	r3, #0
}
 800531c:	4618      	mov	r0, r3
 800531e:	3708      	adds	r7, #8
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b08a      	sub	sp, #40	; 0x28
 8005328:	af02      	add	r7, sp, #8
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	603b      	str	r3, [r7, #0]
 8005330:	4613      	mov	r3, r2
 8005332:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005334:	2300      	movs	r3, #0
 8005336:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800533e:	b2db      	uxtb	r3, r3
 8005340:	2b20      	cmp	r3, #32
 8005342:	d16d      	bne.n	8005420 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d002      	beq.n	8005350 <HAL_UART_Transmit+0x2c>
 800534a:	88fb      	ldrh	r3, [r7, #6]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d101      	bne.n	8005354 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	e066      	b.n	8005422 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2200      	movs	r2, #0
 8005358:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2221      	movs	r2, #33	; 0x21
 800535e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005362:	f7fd fad1 	bl	8002908 <HAL_GetTick>
 8005366:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	88fa      	ldrh	r2, [r7, #6]
 800536c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	88fa      	ldrh	r2, [r7, #6]
 8005372:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800537c:	d108      	bne.n	8005390 <HAL_UART_Transmit+0x6c>
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	691b      	ldr	r3, [r3, #16]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d104      	bne.n	8005390 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005386:	2300      	movs	r3, #0
 8005388:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	61bb      	str	r3, [r7, #24]
 800538e:	e003      	b.n	8005398 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005394:	2300      	movs	r3, #0
 8005396:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005398:	e02a      	b.n	80053f0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	9300      	str	r3, [sp, #0]
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	2200      	movs	r2, #0
 80053a2:	2180      	movs	r1, #128	; 0x80
 80053a4:	68f8      	ldr	r0, [r7, #12]
 80053a6:	f000 f840 	bl	800542a <UART_WaitOnFlagUntilTimeout>
 80053aa:	4603      	mov	r3, r0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d001      	beq.n	80053b4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80053b0:	2303      	movs	r3, #3
 80053b2:	e036      	b.n	8005422 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80053b4:	69fb      	ldr	r3, [r7, #28]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d10b      	bne.n	80053d2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80053ba:	69bb      	ldr	r3, [r7, #24]
 80053bc:	881b      	ldrh	r3, [r3, #0]
 80053be:	461a      	mov	r2, r3
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053c8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	3302      	adds	r3, #2
 80053ce:	61bb      	str	r3, [r7, #24]
 80053d0:	e007      	b.n	80053e2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	781a      	ldrb	r2, [r3, #0]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80053dc:	69fb      	ldr	r3, [r7, #28]
 80053de:	3301      	adds	r3, #1
 80053e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	3b01      	subs	r3, #1
 80053ea:	b29a      	uxth	r2, r3
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d1cf      	bne.n	800539a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	9300      	str	r3, [sp, #0]
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	2200      	movs	r2, #0
 8005402:	2140      	movs	r1, #64	; 0x40
 8005404:	68f8      	ldr	r0, [r7, #12]
 8005406:	f000 f810 	bl	800542a <UART_WaitOnFlagUntilTimeout>
 800540a:	4603      	mov	r3, r0
 800540c:	2b00      	cmp	r3, #0
 800540e:	d001      	beq.n	8005414 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8005410:	2303      	movs	r3, #3
 8005412:	e006      	b.n	8005422 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2220      	movs	r2, #32
 8005418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800541c:	2300      	movs	r3, #0
 800541e:	e000      	b.n	8005422 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005420:	2302      	movs	r3, #2
  }
}
 8005422:	4618      	mov	r0, r3
 8005424:	3720      	adds	r7, #32
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}

0800542a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800542a:	b580      	push	{r7, lr}
 800542c:	b090      	sub	sp, #64	; 0x40
 800542e:	af00      	add	r7, sp, #0
 8005430:	60f8      	str	r0, [r7, #12]
 8005432:	60b9      	str	r1, [r7, #8]
 8005434:	603b      	str	r3, [r7, #0]
 8005436:	4613      	mov	r3, r2
 8005438:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800543a:	e050      	b.n	80054de <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800543c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800543e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005442:	d04c      	beq.n	80054de <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005444:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005446:	2b00      	cmp	r3, #0
 8005448:	d007      	beq.n	800545a <UART_WaitOnFlagUntilTimeout+0x30>
 800544a:	f7fd fa5d 	bl	8002908 <HAL_GetTick>
 800544e:	4602      	mov	r2, r0
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	1ad3      	subs	r3, r2, r3
 8005454:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005456:	429a      	cmp	r2, r3
 8005458:	d241      	bcs.n	80054de <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	330c      	adds	r3, #12
 8005460:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005464:	e853 3f00 	ldrex	r3, [r3]
 8005468:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800546a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005470:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	330c      	adds	r3, #12
 8005478:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800547a:	637a      	str	r2, [r7, #52]	; 0x34
 800547c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800547e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005480:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005482:	e841 2300 	strex	r3, r2, [r1]
 8005486:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800548a:	2b00      	cmp	r3, #0
 800548c:	d1e5      	bne.n	800545a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	3314      	adds	r3, #20
 8005494:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	e853 3f00 	ldrex	r3, [r3]
 800549c:	613b      	str	r3, [r7, #16]
   return(result);
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	f023 0301 	bic.w	r3, r3, #1
 80054a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	3314      	adds	r3, #20
 80054ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054ae:	623a      	str	r2, [r7, #32]
 80054b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b2:	69f9      	ldr	r1, [r7, #28]
 80054b4:	6a3a      	ldr	r2, [r7, #32]
 80054b6:	e841 2300 	strex	r3, r2, [r1]
 80054ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d1e5      	bne.n	800548e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2220      	movs	r2, #32
 80054c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2220      	movs	r2, #32
 80054ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2200      	movs	r2, #0
 80054d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80054da:	2303      	movs	r3, #3
 80054dc:	e00f      	b.n	80054fe <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	4013      	ands	r3, r2
 80054e8:	68ba      	ldr	r2, [r7, #8]
 80054ea:	429a      	cmp	r2, r3
 80054ec:	bf0c      	ite	eq
 80054ee:	2301      	moveq	r3, #1
 80054f0:	2300      	movne	r3, #0
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	461a      	mov	r2, r3
 80054f6:	79fb      	ldrb	r3, [r7, #7]
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d09f      	beq.n	800543c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80054fc:	2300      	movs	r3, #0
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3740      	adds	r7, #64	; 0x40
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
	...

08005508 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b084      	sub	sp, #16
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	691b      	ldr	r3, [r3, #16]
 8005516:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	68da      	ldr	r2, [r3, #12]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	430a      	orrs	r2, r1
 8005524:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	689a      	ldr	r2, [r3, #8]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	691b      	ldr	r3, [r3, #16]
 800552e:	431a      	orrs	r2, r3
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	695b      	ldr	r3, [r3, #20]
 8005534:	4313      	orrs	r3, r2
 8005536:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	68db      	ldr	r3, [r3, #12]
 800553e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005542:	f023 030c 	bic.w	r3, r3, #12
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	6812      	ldr	r2, [r2, #0]
 800554a:	68b9      	ldr	r1, [r7, #8]
 800554c:	430b      	orrs	r3, r1
 800554e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	695b      	ldr	r3, [r3, #20]
 8005556:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	699a      	ldr	r2, [r3, #24]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	430a      	orrs	r2, r1
 8005564:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a2c      	ldr	r2, [pc, #176]	; (800561c <UART_SetConfig+0x114>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d103      	bne.n	8005578 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005570:	f7ff faa2 	bl	8004ab8 <HAL_RCC_GetPCLK2Freq>
 8005574:	60f8      	str	r0, [r7, #12]
 8005576:	e002      	b.n	800557e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005578:	f7ff fa8a 	bl	8004a90 <HAL_RCC_GetPCLK1Freq>
 800557c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800557e:	68fa      	ldr	r2, [r7, #12]
 8005580:	4613      	mov	r3, r2
 8005582:	009b      	lsls	r3, r3, #2
 8005584:	4413      	add	r3, r2
 8005586:	009a      	lsls	r2, r3, #2
 8005588:	441a      	add	r2, r3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	fbb2 f3f3 	udiv	r3, r2, r3
 8005594:	4a22      	ldr	r2, [pc, #136]	; (8005620 <UART_SetConfig+0x118>)
 8005596:	fba2 2303 	umull	r2, r3, r2, r3
 800559a:	095b      	lsrs	r3, r3, #5
 800559c:	0119      	lsls	r1, r3, #4
 800559e:	68fa      	ldr	r2, [r7, #12]
 80055a0:	4613      	mov	r3, r2
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	4413      	add	r3, r2
 80055a6:	009a      	lsls	r2, r3, #2
 80055a8:	441a      	add	r2, r3
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80055b4:	4b1a      	ldr	r3, [pc, #104]	; (8005620 <UART_SetConfig+0x118>)
 80055b6:	fba3 0302 	umull	r0, r3, r3, r2
 80055ba:	095b      	lsrs	r3, r3, #5
 80055bc:	2064      	movs	r0, #100	; 0x64
 80055be:	fb00 f303 	mul.w	r3, r0, r3
 80055c2:	1ad3      	subs	r3, r2, r3
 80055c4:	011b      	lsls	r3, r3, #4
 80055c6:	3332      	adds	r3, #50	; 0x32
 80055c8:	4a15      	ldr	r2, [pc, #84]	; (8005620 <UART_SetConfig+0x118>)
 80055ca:	fba2 2303 	umull	r2, r3, r2, r3
 80055ce:	095b      	lsrs	r3, r3, #5
 80055d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055d4:	4419      	add	r1, r3
 80055d6:	68fa      	ldr	r2, [r7, #12]
 80055d8:	4613      	mov	r3, r2
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	4413      	add	r3, r2
 80055de:	009a      	lsls	r2, r3, #2
 80055e0:	441a      	add	r2, r3
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80055ec:	4b0c      	ldr	r3, [pc, #48]	; (8005620 <UART_SetConfig+0x118>)
 80055ee:	fba3 0302 	umull	r0, r3, r3, r2
 80055f2:	095b      	lsrs	r3, r3, #5
 80055f4:	2064      	movs	r0, #100	; 0x64
 80055f6:	fb00 f303 	mul.w	r3, r0, r3
 80055fa:	1ad3      	subs	r3, r2, r3
 80055fc:	011b      	lsls	r3, r3, #4
 80055fe:	3332      	adds	r3, #50	; 0x32
 8005600:	4a07      	ldr	r2, [pc, #28]	; (8005620 <UART_SetConfig+0x118>)
 8005602:	fba2 2303 	umull	r2, r3, r2, r3
 8005606:	095b      	lsrs	r3, r3, #5
 8005608:	f003 020f 	and.w	r2, r3, #15
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	440a      	add	r2, r1
 8005612:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005614:	bf00      	nop
 8005616:	3710      	adds	r7, #16
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}
 800561c:	40013800 	.word	0x40013800
 8005620:	51eb851f 	.word	0x51eb851f

08005624 <__errno>:
 8005624:	4b01      	ldr	r3, [pc, #4]	; (800562c <__errno+0x8>)
 8005626:	6818      	ldr	r0, [r3, #0]
 8005628:	4770      	bx	lr
 800562a:	bf00      	nop
 800562c:	20000010 	.word	0x20000010

08005630 <__libc_init_array>:
 8005630:	b570      	push	{r4, r5, r6, lr}
 8005632:	2600      	movs	r6, #0
 8005634:	4d0c      	ldr	r5, [pc, #48]	; (8005668 <__libc_init_array+0x38>)
 8005636:	4c0d      	ldr	r4, [pc, #52]	; (800566c <__libc_init_array+0x3c>)
 8005638:	1b64      	subs	r4, r4, r5
 800563a:	10a4      	asrs	r4, r4, #2
 800563c:	42a6      	cmp	r6, r4
 800563e:	d109      	bne.n	8005654 <__libc_init_array+0x24>
 8005640:	f001 f8ee 	bl	8006820 <_init>
 8005644:	2600      	movs	r6, #0
 8005646:	4d0a      	ldr	r5, [pc, #40]	; (8005670 <__libc_init_array+0x40>)
 8005648:	4c0a      	ldr	r4, [pc, #40]	; (8005674 <__libc_init_array+0x44>)
 800564a:	1b64      	subs	r4, r4, r5
 800564c:	10a4      	asrs	r4, r4, #2
 800564e:	42a6      	cmp	r6, r4
 8005650:	d105      	bne.n	800565e <__libc_init_array+0x2e>
 8005652:	bd70      	pop	{r4, r5, r6, pc}
 8005654:	f855 3b04 	ldr.w	r3, [r5], #4
 8005658:	4798      	blx	r3
 800565a:	3601      	adds	r6, #1
 800565c:	e7ee      	b.n	800563c <__libc_init_array+0xc>
 800565e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005662:	4798      	blx	r3
 8005664:	3601      	adds	r6, #1
 8005666:	e7f2      	b.n	800564e <__libc_init_array+0x1e>
 8005668:	080069c8 	.word	0x080069c8
 800566c:	080069c8 	.word	0x080069c8
 8005670:	080069c8 	.word	0x080069c8
 8005674:	080069cc 	.word	0x080069cc

08005678 <memset>:
 8005678:	4603      	mov	r3, r0
 800567a:	4402      	add	r2, r0
 800567c:	4293      	cmp	r3, r2
 800567e:	d100      	bne.n	8005682 <memset+0xa>
 8005680:	4770      	bx	lr
 8005682:	f803 1b01 	strb.w	r1, [r3], #1
 8005686:	e7f9      	b.n	800567c <memset+0x4>

08005688 <iprintf>:
 8005688:	b40f      	push	{r0, r1, r2, r3}
 800568a:	4b0a      	ldr	r3, [pc, #40]	; (80056b4 <iprintf+0x2c>)
 800568c:	b513      	push	{r0, r1, r4, lr}
 800568e:	681c      	ldr	r4, [r3, #0]
 8005690:	b124      	cbz	r4, 800569c <iprintf+0x14>
 8005692:	69a3      	ldr	r3, [r4, #24]
 8005694:	b913      	cbnz	r3, 800569c <iprintf+0x14>
 8005696:	4620      	mov	r0, r4
 8005698:	f000 fab6 	bl	8005c08 <__sinit>
 800569c:	ab05      	add	r3, sp, #20
 800569e:	4620      	mov	r0, r4
 80056a0:	9a04      	ldr	r2, [sp, #16]
 80056a2:	68a1      	ldr	r1, [r4, #8]
 80056a4:	9301      	str	r3, [sp, #4]
 80056a6:	f000 fcd3 	bl	8006050 <_vfiprintf_r>
 80056aa:	b002      	add	sp, #8
 80056ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056b0:	b004      	add	sp, #16
 80056b2:	4770      	bx	lr
 80056b4:	20000010 	.word	0x20000010

080056b8 <_puts_r>:
 80056b8:	b570      	push	{r4, r5, r6, lr}
 80056ba:	460e      	mov	r6, r1
 80056bc:	4605      	mov	r5, r0
 80056be:	b118      	cbz	r0, 80056c8 <_puts_r+0x10>
 80056c0:	6983      	ldr	r3, [r0, #24]
 80056c2:	b90b      	cbnz	r3, 80056c8 <_puts_r+0x10>
 80056c4:	f000 faa0 	bl	8005c08 <__sinit>
 80056c8:	69ab      	ldr	r3, [r5, #24]
 80056ca:	68ac      	ldr	r4, [r5, #8]
 80056cc:	b913      	cbnz	r3, 80056d4 <_puts_r+0x1c>
 80056ce:	4628      	mov	r0, r5
 80056d0:	f000 fa9a 	bl	8005c08 <__sinit>
 80056d4:	4b2c      	ldr	r3, [pc, #176]	; (8005788 <_puts_r+0xd0>)
 80056d6:	429c      	cmp	r4, r3
 80056d8:	d120      	bne.n	800571c <_puts_r+0x64>
 80056da:	686c      	ldr	r4, [r5, #4]
 80056dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80056de:	07db      	lsls	r3, r3, #31
 80056e0:	d405      	bmi.n	80056ee <_puts_r+0x36>
 80056e2:	89a3      	ldrh	r3, [r4, #12]
 80056e4:	0598      	lsls	r0, r3, #22
 80056e6:	d402      	bmi.n	80056ee <_puts_r+0x36>
 80056e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80056ea:	f000 fb3d 	bl	8005d68 <__retarget_lock_acquire_recursive>
 80056ee:	89a3      	ldrh	r3, [r4, #12]
 80056f0:	0719      	lsls	r1, r3, #28
 80056f2:	d51d      	bpl.n	8005730 <_puts_r+0x78>
 80056f4:	6923      	ldr	r3, [r4, #16]
 80056f6:	b1db      	cbz	r3, 8005730 <_puts_r+0x78>
 80056f8:	3e01      	subs	r6, #1
 80056fa:	68a3      	ldr	r3, [r4, #8]
 80056fc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005700:	3b01      	subs	r3, #1
 8005702:	60a3      	str	r3, [r4, #8]
 8005704:	bb39      	cbnz	r1, 8005756 <_puts_r+0x9e>
 8005706:	2b00      	cmp	r3, #0
 8005708:	da38      	bge.n	800577c <_puts_r+0xc4>
 800570a:	4622      	mov	r2, r4
 800570c:	210a      	movs	r1, #10
 800570e:	4628      	mov	r0, r5
 8005710:	f000 f886 	bl	8005820 <__swbuf_r>
 8005714:	3001      	adds	r0, #1
 8005716:	d011      	beq.n	800573c <_puts_r+0x84>
 8005718:	250a      	movs	r5, #10
 800571a:	e011      	b.n	8005740 <_puts_r+0x88>
 800571c:	4b1b      	ldr	r3, [pc, #108]	; (800578c <_puts_r+0xd4>)
 800571e:	429c      	cmp	r4, r3
 8005720:	d101      	bne.n	8005726 <_puts_r+0x6e>
 8005722:	68ac      	ldr	r4, [r5, #8]
 8005724:	e7da      	b.n	80056dc <_puts_r+0x24>
 8005726:	4b1a      	ldr	r3, [pc, #104]	; (8005790 <_puts_r+0xd8>)
 8005728:	429c      	cmp	r4, r3
 800572a:	bf08      	it	eq
 800572c:	68ec      	ldreq	r4, [r5, #12]
 800572e:	e7d5      	b.n	80056dc <_puts_r+0x24>
 8005730:	4621      	mov	r1, r4
 8005732:	4628      	mov	r0, r5
 8005734:	f000 f8c6 	bl	80058c4 <__swsetup_r>
 8005738:	2800      	cmp	r0, #0
 800573a:	d0dd      	beq.n	80056f8 <_puts_r+0x40>
 800573c:	f04f 35ff 	mov.w	r5, #4294967295
 8005740:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005742:	07da      	lsls	r2, r3, #31
 8005744:	d405      	bmi.n	8005752 <_puts_r+0x9a>
 8005746:	89a3      	ldrh	r3, [r4, #12]
 8005748:	059b      	lsls	r3, r3, #22
 800574a:	d402      	bmi.n	8005752 <_puts_r+0x9a>
 800574c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800574e:	f000 fb0c 	bl	8005d6a <__retarget_lock_release_recursive>
 8005752:	4628      	mov	r0, r5
 8005754:	bd70      	pop	{r4, r5, r6, pc}
 8005756:	2b00      	cmp	r3, #0
 8005758:	da04      	bge.n	8005764 <_puts_r+0xac>
 800575a:	69a2      	ldr	r2, [r4, #24]
 800575c:	429a      	cmp	r2, r3
 800575e:	dc06      	bgt.n	800576e <_puts_r+0xb6>
 8005760:	290a      	cmp	r1, #10
 8005762:	d004      	beq.n	800576e <_puts_r+0xb6>
 8005764:	6823      	ldr	r3, [r4, #0]
 8005766:	1c5a      	adds	r2, r3, #1
 8005768:	6022      	str	r2, [r4, #0]
 800576a:	7019      	strb	r1, [r3, #0]
 800576c:	e7c5      	b.n	80056fa <_puts_r+0x42>
 800576e:	4622      	mov	r2, r4
 8005770:	4628      	mov	r0, r5
 8005772:	f000 f855 	bl	8005820 <__swbuf_r>
 8005776:	3001      	adds	r0, #1
 8005778:	d1bf      	bne.n	80056fa <_puts_r+0x42>
 800577a:	e7df      	b.n	800573c <_puts_r+0x84>
 800577c:	250a      	movs	r5, #10
 800577e:	6823      	ldr	r3, [r4, #0]
 8005780:	1c5a      	adds	r2, r3, #1
 8005782:	6022      	str	r2, [r4, #0]
 8005784:	701d      	strb	r5, [r3, #0]
 8005786:	e7db      	b.n	8005740 <_puts_r+0x88>
 8005788:	08006954 	.word	0x08006954
 800578c:	08006974 	.word	0x08006974
 8005790:	08006934 	.word	0x08006934

08005794 <puts>:
 8005794:	4b02      	ldr	r3, [pc, #8]	; (80057a0 <puts+0xc>)
 8005796:	4601      	mov	r1, r0
 8005798:	6818      	ldr	r0, [r3, #0]
 800579a:	f7ff bf8d 	b.w	80056b8 <_puts_r>
 800579e:	bf00      	nop
 80057a0:	20000010 	.word	0x20000010

080057a4 <rand>:
 80057a4:	4b16      	ldr	r3, [pc, #88]	; (8005800 <rand+0x5c>)
 80057a6:	b510      	push	{r4, lr}
 80057a8:	681c      	ldr	r4, [r3, #0]
 80057aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80057ac:	b9b3      	cbnz	r3, 80057dc <rand+0x38>
 80057ae:	2018      	movs	r0, #24
 80057b0:	f000 fb42 	bl	8005e38 <malloc>
 80057b4:	4602      	mov	r2, r0
 80057b6:	63a0      	str	r0, [r4, #56]	; 0x38
 80057b8:	b920      	cbnz	r0, 80057c4 <rand+0x20>
 80057ba:	214e      	movs	r1, #78	; 0x4e
 80057bc:	4b11      	ldr	r3, [pc, #68]	; (8005804 <rand+0x60>)
 80057be:	4812      	ldr	r0, [pc, #72]	; (8005808 <rand+0x64>)
 80057c0:	f000 f8ee 	bl	80059a0 <__assert_func>
 80057c4:	4911      	ldr	r1, [pc, #68]	; (800580c <rand+0x68>)
 80057c6:	4b12      	ldr	r3, [pc, #72]	; (8005810 <rand+0x6c>)
 80057c8:	e9c0 1300 	strd	r1, r3, [r0]
 80057cc:	4b11      	ldr	r3, [pc, #68]	; (8005814 <rand+0x70>)
 80057ce:	2100      	movs	r1, #0
 80057d0:	6083      	str	r3, [r0, #8]
 80057d2:	230b      	movs	r3, #11
 80057d4:	8183      	strh	r3, [r0, #12]
 80057d6:	2001      	movs	r0, #1
 80057d8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80057dc:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80057de:	4a0e      	ldr	r2, [pc, #56]	; (8005818 <rand+0x74>)
 80057e0:	6920      	ldr	r0, [r4, #16]
 80057e2:	6963      	ldr	r3, [r4, #20]
 80057e4:	4342      	muls	r2, r0
 80057e6:	490d      	ldr	r1, [pc, #52]	; (800581c <rand+0x78>)
 80057e8:	fb01 2203 	mla	r2, r1, r3, r2
 80057ec:	fba0 0101 	umull	r0, r1, r0, r1
 80057f0:	1c43      	adds	r3, r0, #1
 80057f2:	eb42 0001 	adc.w	r0, r2, r1
 80057f6:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80057fa:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80057fe:	bd10      	pop	{r4, pc}
 8005800:	20000010 	.word	0x20000010
 8005804:	08006884 	.word	0x08006884
 8005808:	0800689b 	.word	0x0800689b
 800580c:	abcd330e 	.word	0xabcd330e
 8005810:	e66d1234 	.word	0xe66d1234
 8005814:	0005deec 	.word	0x0005deec
 8005818:	5851f42d 	.word	0x5851f42d
 800581c:	4c957f2d 	.word	0x4c957f2d

08005820 <__swbuf_r>:
 8005820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005822:	460e      	mov	r6, r1
 8005824:	4614      	mov	r4, r2
 8005826:	4605      	mov	r5, r0
 8005828:	b118      	cbz	r0, 8005832 <__swbuf_r+0x12>
 800582a:	6983      	ldr	r3, [r0, #24]
 800582c:	b90b      	cbnz	r3, 8005832 <__swbuf_r+0x12>
 800582e:	f000 f9eb 	bl	8005c08 <__sinit>
 8005832:	4b21      	ldr	r3, [pc, #132]	; (80058b8 <__swbuf_r+0x98>)
 8005834:	429c      	cmp	r4, r3
 8005836:	d12b      	bne.n	8005890 <__swbuf_r+0x70>
 8005838:	686c      	ldr	r4, [r5, #4]
 800583a:	69a3      	ldr	r3, [r4, #24]
 800583c:	60a3      	str	r3, [r4, #8]
 800583e:	89a3      	ldrh	r3, [r4, #12]
 8005840:	071a      	lsls	r2, r3, #28
 8005842:	d52f      	bpl.n	80058a4 <__swbuf_r+0x84>
 8005844:	6923      	ldr	r3, [r4, #16]
 8005846:	b36b      	cbz	r3, 80058a4 <__swbuf_r+0x84>
 8005848:	6923      	ldr	r3, [r4, #16]
 800584a:	6820      	ldr	r0, [r4, #0]
 800584c:	b2f6      	uxtb	r6, r6
 800584e:	1ac0      	subs	r0, r0, r3
 8005850:	6963      	ldr	r3, [r4, #20]
 8005852:	4637      	mov	r7, r6
 8005854:	4283      	cmp	r3, r0
 8005856:	dc04      	bgt.n	8005862 <__swbuf_r+0x42>
 8005858:	4621      	mov	r1, r4
 800585a:	4628      	mov	r0, r5
 800585c:	f000 f940 	bl	8005ae0 <_fflush_r>
 8005860:	bb30      	cbnz	r0, 80058b0 <__swbuf_r+0x90>
 8005862:	68a3      	ldr	r3, [r4, #8]
 8005864:	3001      	adds	r0, #1
 8005866:	3b01      	subs	r3, #1
 8005868:	60a3      	str	r3, [r4, #8]
 800586a:	6823      	ldr	r3, [r4, #0]
 800586c:	1c5a      	adds	r2, r3, #1
 800586e:	6022      	str	r2, [r4, #0]
 8005870:	701e      	strb	r6, [r3, #0]
 8005872:	6963      	ldr	r3, [r4, #20]
 8005874:	4283      	cmp	r3, r0
 8005876:	d004      	beq.n	8005882 <__swbuf_r+0x62>
 8005878:	89a3      	ldrh	r3, [r4, #12]
 800587a:	07db      	lsls	r3, r3, #31
 800587c:	d506      	bpl.n	800588c <__swbuf_r+0x6c>
 800587e:	2e0a      	cmp	r6, #10
 8005880:	d104      	bne.n	800588c <__swbuf_r+0x6c>
 8005882:	4621      	mov	r1, r4
 8005884:	4628      	mov	r0, r5
 8005886:	f000 f92b 	bl	8005ae0 <_fflush_r>
 800588a:	b988      	cbnz	r0, 80058b0 <__swbuf_r+0x90>
 800588c:	4638      	mov	r0, r7
 800588e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005890:	4b0a      	ldr	r3, [pc, #40]	; (80058bc <__swbuf_r+0x9c>)
 8005892:	429c      	cmp	r4, r3
 8005894:	d101      	bne.n	800589a <__swbuf_r+0x7a>
 8005896:	68ac      	ldr	r4, [r5, #8]
 8005898:	e7cf      	b.n	800583a <__swbuf_r+0x1a>
 800589a:	4b09      	ldr	r3, [pc, #36]	; (80058c0 <__swbuf_r+0xa0>)
 800589c:	429c      	cmp	r4, r3
 800589e:	bf08      	it	eq
 80058a0:	68ec      	ldreq	r4, [r5, #12]
 80058a2:	e7ca      	b.n	800583a <__swbuf_r+0x1a>
 80058a4:	4621      	mov	r1, r4
 80058a6:	4628      	mov	r0, r5
 80058a8:	f000 f80c 	bl	80058c4 <__swsetup_r>
 80058ac:	2800      	cmp	r0, #0
 80058ae:	d0cb      	beq.n	8005848 <__swbuf_r+0x28>
 80058b0:	f04f 37ff 	mov.w	r7, #4294967295
 80058b4:	e7ea      	b.n	800588c <__swbuf_r+0x6c>
 80058b6:	bf00      	nop
 80058b8:	08006954 	.word	0x08006954
 80058bc:	08006974 	.word	0x08006974
 80058c0:	08006934 	.word	0x08006934

080058c4 <__swsetup_r>:
 80058c4:	4b32      	ldr	r3, [pc, #200]	; (8005990 <__swsetup_r+0xcc>)
 80058c6:	b570      	push	{r4, r5, r6, lr}
 80058c8:	681d      	ldr	r5, [r3, #0]
 80058ca:	4606      	mov	r6, r0
 80058cc:	460c      	mov	r4, r1
 80058ce:	b125      	cbz	r5, 80058da <__swsetup_r+0x16>
 80058d0:	69ab      	ldr	r3, [r5, #24]
 80058d2:	b913      	cbnz	r3, 80058da <__swsetup_r+0x16>
 80058d4:	4628      	mov	r0, r5
 80058d6:	f000 f997 	bl	8005c08 <__sinit>
 80058da:	4b2e      	ldr	r3, [pc, #184]	; (8005994 <__swsetup_r+0xd0>)
 80058dc:	429c      	cmp	r4, r3
 80058de:	d10f      	bne.n	8005900 <__swsetup_r+0x3c>
 80058e0:	686c      	ldr	r4, [r5, #4]
 80058e2:	89a3      	ldrh	r3, [r4, #12]
 80058e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80058e8:	0719      	lsls	r1, r3, #28
 80058ea:	d42c      	bmi.n	8005946 <__swsetup_r+0x82>
 80058ec:	06dd      	lsls	r5, r3, #27
 80058ee:	d411      	bmi.n	8005914 <__swsetup_r+0x50>
 80058f0:	2309      	movs	r3, #9
 80058f2:	6033      	str	r3, [r6, #0]
 80058f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80058f8:	f04f 30ff 	mov.w	r0, #4294967295
 80058fc:	81a3      	strh	r3, [r4, #12]
 80058fe:	e03e      	b.n	800597e <__swsetup_r+0xba>
 8005900:	4b25      	ldr	r3, [pc, #148]	; (8005998 <__swsetup_r+0xd4>)
 8005902:	429c      	cmp	r4, r3
 8005904:	d101      	bne.n	800590a <__swsetup_r+0x46>
 8005906:	68ac      	ldr	r4, [r5, #8]
 8005908:	e7eb      	b.n	80058e2 <__swsetup_r+0x1e>
 800590a:	4b24      	ldr	r3, [pc, #144]	; (800599c <__swsetup_r+0xd8>)
 800590c:	429c      	cmp	r4, r3
 800590e:	bf08      	it	eq
 8005910:	68ec      	ldreq	r4, [r5, #12]
 8005912:	e7e6      	b.n	80058e2 <__swsetup_r+0x1e>
 8005914:	0758      	lsls	r0, r3, #29
 8005916:	d512      	bpl.n	800593e <__swsetup_r+0x7a>
 8005918:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800591a:	b141      	cbz	r1, 800592e <__swsetup_r+0x6a>
 800591c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005920:	4299      	cmp	r1, r3
 8005922:	d002      	beq.n	800592a <__swsetup_r+0x66>
 8005924:	4630      	mov	r0, r6
 8005926:	f000 fa8f 	bl	8005e48 <_free_r>
 800592a:	2300      	movs	r3, #0
 800592c:	6363      	str	r3, [r4, #52]	; 0x34
 800592e:	89a3      	ldrh	r3, [r4, #12]
 8005930:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005934:	81a3      	strh	r3, [r4, #12]
 8005936:	2300      	movs	r3, #0
 8005938:	6063      	str	r3, [r4, #4]
 800593a:	6923      	ldr	r3, [r4, #16]
 800593c:	6023      	str	r3, [r4, #0]
 800593e:	89a3      	ldrh	r3, [r4, #12]
 8005940:	f043 0308 	orr.w	r3, r3, #8
 8005944:	81a3      	strh	r3, [r4, #12]
 8005946:	6923      	ldr	r3, [r4, #16]
 8005948:	b94b      	cbnz	r3, 800595e <__swsetup_r+0x9a>
 800594a:	89a3      	ldrh	r3, [r4, #12]
 800594c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005950:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005954:	d003      	beq.n	800595e <__swsetup_r+0x9a>
 8005956:	4621      	mov	r1, r4
 8005958:	4630      	mov	r0, r6
 800595a:	f000 fa2d 	bl	8005db8 <__smakebuf_r>
 800595e:	89a0      	ldrh	r0, [r4, #12]
 8005960:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005964:	f010 0301 	ands.w	r3, r0, #1
 8005968:	d00a      	beq.n	8005980 <__swsetup_r+0xbc>
 800596a:	2300      	movs	r3, #0
 800596c:	60a3      	str	r3, [r4, #8]
 800596e:	6963      	ldr	r3, [r4, #20]
 8005970:	425b      	negs	r3, r3
 8005972:	61a3      	str	r3, [r4, #24]
 8005974:	6923      	ldr	r3, [r4, #16]
 8005976:	b943      	cbnz	r3, 800598a <__swsetup_r+0xc6>
 8005978:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800597c:	d1ba      	bne.n	80058f4 <__swsetup_r+0x30>
 800597e:	bd70      	pop	{r4, r5, r6, pc}
 8005980:	0781      	lsls	r1, r0, #30
 8005982:	bf58      	it	pl
 8005984:	6963      	ldrpl	r3, [r4, #20]
 8005986:	60a3      	str	r3, [r4, #8]
 8005988:	e7f4      	b.n	8005974 <__swsetup_r+0xb0>
 800598a:	2000      	movs	r0, #0
 800598c:	e7f7      	b.n	800597e <__swsetup_r+0xba>
 800598e:	bf00      	nop
 8005990:	20000010 	.word	0x20000010
 8005994:	08006954 	.word	0x08006954
 8005998:	08006974 	.word	0x08006974
 800599c:	08006934 	.word	0x08006934

080059a0 <__assert_func>:
 80059a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80059a2:	4614      	mov	r4, r2
 80059a4:	461a      	mov	r2, r3
 80059a6:	4b09      	ldr	r3, [pc, #36]	; (80059cc <__assert_func+0x2c>)
 80059a8:	4605      	mov	r5, r0
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	68d8      	ldr	r0, [r3, #12]
 80059ae:	b14c      	cbz	r4, 80059c4 <__assert_func+0x24>
 80059b0:	4b07      	ldr	r3, [pc, #28]	; (80059d0 <__assert_func+0x30>)
 80059b2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80059b6:	9100      	str	r1, [sp, #0]
 80059b8:	462b      	mov	r3, r5
 80059ba:	4906      	ldr	r1, [pc, #24]	; (80059d4 <__assert_func+0x34>)
 80059bc:	f000 f9a2 	bl	8005d04 <fiprintf>
 80059c0:	f000 fe72 	bl	80066a8 <abort>
 80059c4:	4b04      	ldr	r3, [pc, #16]	; (80059d8 <__assert_func+0x38>)
 80059c6:	461c      	mov	r4, r3
 80059c8:	e7f3      	b.n	80059b2 <__assert_func+0x12>
 80059ca:	bf00      	nop
 80059cc:	20000010 	.word	0x20000010
 80059d0:	080068f6 	.word	0x080068f6
 80059d4:	08006903 	.word	0x08006903
 80059d8:	08006931 	.word	0x08006931

080059dc <__sflush_r>:
 80059dc:	898a      	ldrh	r2, [r1, #12]
 80059de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059e0:	4605      	mov	r5, r0
 80059e2:	0710      	lsls	r0, r2, #28
 80059e4:	460c      	mov	r4, r1
 80059e6:	d457      	bmi.n	8005a98 <__sflush_r+0xbc>
 80059e8:	684b      	ldr	r3, [r1, #4]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	dc04      	bgt.n	80059f8 <__sflush_r+0x1c>
 80059ee:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	dc01      	bgt.n	80059f8 <__sflush_r+0x1c>
 80059f4:	2000      	movs	r0, #0
 80059f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80059fa:	2e00      	cmp	r6, #0
 80059fc:	d0fa      	beq.n	80059f4 <__sflush_r+0x18>
 80059fe:	2300      	movs	r3, #0
 8005a00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005a04:	682f      	ldr	r7, [r5, #0]
 8005a06:	602b      	str	r3, [r5, #0]
 8005a08:	d032      	beq.n	8005a70 <__sflush_r+0x94>
 8005a0a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005a0c:	89a3      	ldrh	r3, [r4, #12]
 8005a0e:	075a      	lsls	r2, r3, #29
 8005a10:	d505      	bpl.n	8005a1e <__sflush_r+0x42>
 8005a12:	6863      	ldr	r3, [r4, #4]
 8005a14:	1ac0      	subs	r0, r0, r3
 8005a16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005a18:	b10b      	cbz	r3, 8005a1e <__sflush_r+0x42>
 8005a1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005a1c:	1ac0      	subs	r0, r0, r3
 8005a1e:	2300      	movs	r3, #0
 8005a20:	4602      	mov	r2, r0
 8005a22:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a24:	4628      	mov	r0, r5
 8005a26:	6a21      	ldr	r1, [r4, #32]
 8005a28:	47b0      	blx	r6
 8005a2a:	1c43      	adds	r3, r0, #1
 8005a2c:	89a3      	ldrh	r3, [r4, #12]
 8005a2e:	d106      	bne.n	8005a3e <__sflush_r+0x62>
 8005a30:	6829      	ldr	r1, [r5, #0]
 8005a32:	291d      	cmp	r1, #29
 8005a34:	d82c      	bhi.n	8005a90 <__sflush_r+0xb4>
 8005a36:	4a29      	ldr	r2, [pc, #164]	; (8005adc <__sflush_r+0x100>)
 8005a38:	40ca      	lsrs	r2, r1
 8005a3a:	07d6      	lsls	r6, r2, #31
 8005a3c:	d528      	bpl.n	8005a90 <__sflush_r+0xb4>
 8005a3e:	2200      	movs	r2, #0
 8005a40:	6062      	str	r2, [r4, #4]
 8005a42:	6922      	ldr	r2, [r4, #16]
 8005a44:	04d9      	lsls	r1, r3, #19
 8005a46:	6022      	str	r2, [r4, #0]
 8005a48:	d504      	bpl.n	8005a54 <__sflush_r+0x78>
 8005a4a:	1c42      	adds	r2, r0, #1
 8005a4c:	d101      	bne.n	8005a52 <__sflush_r+0x76>
 8005a4e:	682b      	ldr	r3, [r5, #0]
 8005a50:	b903      	cbnz	r3, 8005a54 <__sflush_r+0x78>
 8005a52:	6560      	str	r0, [r4, #84]	; 0x54
 8005a54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a56:	602f      	str	r7, [r5, #0]
 8005a58:	2900      	cmp	r1, #0
 8005a5a:	d0cb      	beq.n	80059f4 <__sflush_r+0x18>
 8005a5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a60:	4299      	cmp	r1, r3
 8005a62:	d002      	beq.n	8005a6a <__sflush_r+0x8e>
 8005a64:	4628      	mov	r0, r5
 8005a66:	f000 f9ef 	bl	8005e48 <_free_r>
 8005a6a:	2000      	movs	r0, #0
 8005a6c:	6360      	str	r0, [r4, #52]	; 0x34
 8005a6e:	e7c2      	b.n	80059f6 <__sflush_r+0x1a>
 8005a70:	6a21      	ldr	r1, [r4, #32]
 8005a72:	2301      	movs	r3, #1
 8005a74:	4628      	mov	r0, r5
 8005a76:	47b0      	blx	r6
 8005a78:	1c41      	adds	r1, r0, #1
 8005a7a:	d1c7      	bne.n	8005a0c <__sflush_r+0x30>
 8005a7c:	682b      	ldr	r3, [r5, #0]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d0c4      	beq.n	8005a0c <__sflush_r+0x30>
 8005a82:	2b1d      	cmp	r3, #29
 8005a84:	d001      	beq.n	8005a8a <__sflush_r+0xae>
 8005a86:	2b16      	cmp	r3, #22
 8005a88:	d101      	bne.n	8005a8e <__sflush_r+0xb2>
 8005a8a:	602f      	str	r7, [r5, #0]
 8005a8c:	e7b2      	b.n	80059f4 <__sflush_r+0x18>
 8005a8e:	89a3      	ldrh	r3, [r4, #12]
 8005a90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a94:	81a3      	strh	r3, [r4, #12]
 8005a96:	e7ae      	b.n	80059f6 <__sflush_r+0x1a>
 8005a98:	690f      	ldr	r7, [r1, #16]
 8005a9a:	2f00      	cmp	r7, #0
 8005a9c:	d0aa      	beq.n	80059f4 <__sflush_r+0x18>
 8005a9e:	0793      	lsls	r3, r2, #30
 8005aa0:	bf18      	it	ne
 8005aa2:	2300      	movne	r3, #0
 8005aa4:	680e      	ldr	r6, [r1, #0]
 8005aa6:	bf08      	it	eq
 8005aa8:	694b      	ldreq	r3, [r1, #20]
 8005aaa:	1bf6      	subs	r6, r6, r7
 8005aac:	600f      	str	r7, [r1, #0]
 8005aae:	608b      	str	r3, [r1, #8]
 8005ab0:	2e00      	cmp	r6, #0
 8005ab2:	dd9f      	ble.n	80059f4 <__sflush_r+0x18>
 8005ab4:	4633      	mov	r3, r6
 8005ab6:	463a      	mov	r2, r7
 8005ab8:	4628      	mov	r0, r5
 8005aba:	6a21      	ldr	r1, [r4, #32]
 8005abc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005ac0:	47e0      	blx	ip
 8005ac2:	2800      	cmp	r0, #0
 8005ac4:	dc06      	bgt.n	8005ad4 <__sflush_r+0xf8>
 8005ac6:	89a3      	ldrh	r3, [r4, #12]
 8005ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8005acc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ad0:	81a3      	strh	r3, [r4, #12]
 8005ad2:	e790      	b.n	80059f6 <__sflush_r+0x1a>
 8005ad4:	4407      	add	r7, r0
 8005ad6:	1a36      	subs	r6, r6, r0
 8005ad8:	e7ea      	b.n	8005ab0 <__sflush_r+0xd4>
 8005ada:	bf00      	nop
 8005adc:	20400001 	.word	0x20400001

08005ae0 <_fflush_r>:
 8005ae0:	b538      	push	{r3, r4, r5, lr}
 8005ae2:	690b      	ldr	r3, [r1, #16]
 8005ae4:	4605      	mov	r5, r0
 8005ae6:	460c      	mov	r4, r1
 8005ae8:	b913      	cbnz	r3, 8005af0 <_fflush_r+0x10>
 8005aea:	2500      	movs	r5, #0
 8005aec:	4628      	mov	r0, r5
 8005aee:	bd38      	pop	{r3, r4, r5, pc}
 8005af0:	b118      	cbz	r0, 8005afa <_fflush_r+0x1a>
 8005af2:	6983      	ldr	r3, [r0, #24]
 8005af4:	b90b      	cbnz	r3, 8005afa <_fflush_r+0x1a>
 8005af6:	f000 f887 	bl	8005c08 <__sinit>
 8005afa:	4b14      	ldr	r3, [pc, #80]	; (8005b4c <_fflush_r+0x6c>)
 8005afc:	429c      	cmp	r4, r3
 8005afe:	d11b      	bne.n	8005b38 <_fflush_r+0x58>
 8005b00:	686c      	ldr	r4, [r5, #4]
 8005b02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d0ef      	beq.n	8005aea <_fflush_r+0xa>
 8005b0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005b0c:	07d0      	lsls	r0, r2, #31
 8005b0e:	d404      	bmi.n	8005b1a <_fflush_r+0x3a>
 8005b10:	0599      	lsls	r1, r3, #22
 8005b12:	d402      	bmi.n	8005b1a <_fflush_r+0x3a>
 8005b14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b16:	f000 f927 	bl	8005d68 <__retarget_lock_acquire_recursive>
 8005b1a:	4628      	mov	r0, r5
 8005b1c:	4621      	mov	r1, r4
 8005b1e:	f7ff ff5d 	bl	80059dc <__sflush_r>
 8005b22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b24:	4605      	mov	r5, r0
 8005b26:	07da      	lsls	r2, r3, #31
 8005b28:	d4e0      	bmi.n	8005aec <_fflush_r+0xc>
 8005b2a:	89a3      	ldrh	r3, [r4, #12]
 8005b2c:	059b      	lsls	r3, r3, #22
 8005b2e:	d4dd      	bmi.n	8005aec <_fflush_r+0xc>
 8005b30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b32:	f000 f91a 	bl	8005d6a <__retarget_lock_release_recursive>
 8005b36:	e7d9      	b.n	8005aec <_fflush_r+0xc>
 8005b38:	4b05      	ldr	r3, [pc, #20]	; (8005b50 <_fflush_r+0x70>)
 8005b3a:	429c      	cmp	r4, r3
 8005b3c:	d101      	bne.n	8005b42 <_fflush_r+0x62>
 8005b3e:	68ac      	ldr	r4, [r5, #8]
 8005b40:	e7df      	b.n	8005b02 <_fflush_r+0x22>
 8005b42:	4b04      	ldr	r3, [pc, #16]	; (8005b54 <_fflush_r+0x74>)
 8005b44:	429c      	cmp	r4, r3
 8005b46:	bf08      	it	eq
 8005b48:	68ec      	ldreq	r4, [r5, #12]
 8005b4a:	e7da      	b.n	8005b02 <_fflush_r+0x22>
 8005b4c:	08006954 	.word	0x08006954
 8005b50:	08006974 	.word	0x08006974
 8005b54:	08006934 	.word	0x08006934

08005b58 <std>:
 8005b58:	2300      	movs	r3, #0
 8005b5a:	b510      	push	{r4, lr}
 8005b5c:	4604      	mov	r4, r0
 8005b5e:	e9c0 3300 	strd	r3, r3, [r0]
 8005b62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b66:	6083      	str	r3, [r0, #8]
 8005b68:	8181      	strh	r1, [r0, #12]
 8005b6a:	6643      	str	r3, [r0, #100]	; 0x64
 8005b6c:	81c2      	strh	r2, [r0, #14]
 8005b6e:	6183      	str	r3, [r0, #24]
 8005b70:	4619      	mov	r1, r3
 8005b72:	2208      	movs	r2, #8
 8005b74:	305c      	adds	r0, #92	; 0x5c
 8005b76:	f7ff fd7f 	bl	8005678 <memset>
 8005b7a:	4b05      	ldr	r3, [pc, #20]	; (8005b90 <std+0x38>)
 8005b7c:	6224      	str	r4, [r4, #32]
 8005b7e:	6263      	str	r3, [r4, #36]	; 0x24
 8005b80:	4b04      	ldr	r3, [pc, #16]	; (8005b94 <std+0x3c>)
 8005b82:	62a3      	str	r3, [r4, #40]	; 0x28
 8005b84:	4b04      	ldr	r3, [pc, #16]	; (8005b98 <std+0x40>)
 8005b86:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005b88:	4b04      	ldr	r3, [pc, #16]	; (8005b9c <std+0x44>)
 8005b8a:	6323      	str	r3, [r4, #48]	; 0x30
 8005b8c:	bd10      	pop	{r4, pc}
 8005b8e:	bf00      	nop
 8005b90:	080065fd 	.word	0x080065fd
 8005b94:	0800661f 	.word	0x0800661f
 8005b98:	08006657 	.word	0x08006657
 8005b9c:	0800667b 	.word	0x0800667b

08005ba0 <_cleanup_r>:
 8005ba0:	4901      	ldr	r1, [pc, #4]	; (8005ba8 <_cleanup_r+0x8>)
 8005ba2:	f000 b8c1 	b.w	8005d28 <_fwalk_reent>
 8005ba6:	bf00      	nop
 8005ba8:	08005ae1 	.word	0x08005ae1

08005bac <__sfmoreglue>:
 8005bac:	2268      	movs	r2, #104	; 0x68
 8005bae:	b570      	push	{r4, r5, r6, lr}
 8005bb0:	1e4d      	subs	r5, r1, #1
 8005bb2:	4355      	muls	r5, r2
 8005bb4:	460e      	mov	r6, r1
 8005bb6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005bba:	f000 f9ad 	bl	8005f18 <_malloc_r>
 8005bbe:	4604      	mov	r4, r0
 8005bc0:	b140      	cbz	r0, 8005bd4 <__sfmoreglue+0x28>
 8005bc2:	2100      	movs	r1, #0
 8005bc4:	e9c0 1600 	strd	r1, r6, [r0]
 8005bc8:	300c      	adds	r0, #12
 8005bca:	60a0      	str	r0, [r4, #8]
 8005bcc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005bd0:	f7ff fd52 	bl	8005678 <memset>
 8005bd4:	4620      	mov	r0, r4
 8005bd6:	bd70      	pop	{r4, r5, r6, pc}

08005bd8 <__sfp_lock_acquire>:
 8005bd8:	4801      	ldr	r0, [pc, #4]	; (8005be0 <__sfp_lock_acquire+0x8>)
 8005bda:	f000 b8c5 	b.w	8005d68 <__retarget_lock_acquire_recursive>
 8005bde:	bf00      	nop
 8005be0:	20000509 	.word	0x20000509

08005be4 <__sfp_lock_release>:
 8005be4:	4801      	ldr	r0, [pc, #4]	; (8005bec <__sfp_lock_release+0x8>)
 8005be6:	f000 b8c0 	b.w	8005d6a <__retarget_lock_release_recursive>
 8005bea:	bf00      	nop
 8005bec:	20000509 	.word	0x20000509

08005bf0 <__sinit_lock_acquire>:
 8005bf0:	4801      	ldr	r0, [pc, #4]	; (8005bf8 <__sinit_lock_acquire+0x8>)
 8005bf2:	f000 b8b9 	b.w	8005d68 <__retarget_lock_acquire_recursive>
 8005bf6:	bf00      	nop
 8005bf8:	2000050a 	.word	0x2000050a

08005bfc <__sinit_lock_release>:
 8005bfc:	4801      	ldr	r0, [pc, #4]	; (8005c04 <__sinit_lock_release+0x8>)
 8005bfe:	f000 b8b4 	b.w	8005d6a <__retarget_lock_release_recursive>
 8005c02:	bf00      	nop
 8005c04:	2000050a 	.word	0x2000050a

08005c08 <__sinit>:
 8005c08:	b510      	push	{r4, lr}
 8005c0a:	4604      	mov	r4, r0
 8005c0c:	f7ff fff0 	bl	8005bf0 <__sinit_lock_acquire>
 8005c10:	69a3      	ldr	r3, [r4, #24]
 8005c12:	b11b      	cbz	r3, 8005c1c <__sinit+0x14>
 8005c14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c18:	f7ff bff0 	b.w	8005bfc <__sinit_lock_release>
 8005c1c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005c20:	6523      	str	r3, [r4, #80]	; 0x50
 8005c22:	4b13      	ldr	r3, [pc, #76]	; (8005c70 <__sinit+0x68>)
 8005c24:	4a13      	ldr	r2, [pc, #76]	; (8005c74 <__sinit+0x6c>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	62a2      	str	r2, [r4, #40]	; 0x28
 8005c2a:	42a3      	cmp	r3, r4
 8005c2c:	bf08      	it	eq
 8005c2e:	2301      	moveq	r3, #1
 8005c30:	4620      	mov	r0, r4
 8005c32:	bf08      	it	eq
 8005c34:	61a3      	streq	r3, [r4, #24]
 8005c36:	f000 f81f 	bl	8005c78 <__sfp>
 8005c3a:	6060      	str	r0, [r4, #4]
 8005c3c:	4620      	mov	r0, r4
 8005c3e:	f000 f81b 	bl	8005c78 <__sfp>
 8005c42:	60a0      	str	r0, [r4, #8]
 8005c44:	4620      	mov	r0, r4
 8005c46:	f000 f817 	bl	8005c78 <__sfp>
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	2104      	movs	r1, #4
 8005c4e:	60e0      	str	r0, [r4, #12]
 8005c50:	6860      	ldr	r0, [r4, #4]
 8005c52:	f7ff ff81 	bl	8005b58 <std>
 8005c56:	2201      	movs	r2, #1
 8005c58:	2109      	movs	r1, #9
 8005c5a:	68a0      	ldr	r0, [r4, #8]
 8005c5c:	f7ff ff7c 	bl	8005b58 <std>
 8005c60:	2202      	movs	r2, #2
 8005c62:	2112      	movs	r1, #18
 8005c64:	68e0      	ldr	r0, [r4, #12]
 8005c66:	f7ff ff77 	bl	8005b58 <std>
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	61a3      	str	r3, [r4, #24]
 8005c6e:	e7d1      	b.n	8005c14 <__sinit+0xc>
 8005c70:	08006880 	.word	0x08006880
 8005c74:	08005ba1 	.word	0x08005ba1

08005c78 <__sfp>:
 8005c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c7a:	4607      	mov	r7, r0
 8005c7c:	f7ff ffac 	bl	8005bd8 <__sfp_lock_acquire>
 8005c80:	4b1e      	ldr	r3, [pc, #120]	; (8005cfc <__sfp+0x84>)
 8005c82:	681e      	ldr	r6, [r3, #0]
 8005c84:	69b3      	ldr	r3, [r6, #24]
 8005c86:	b913      	cbnz	r3, 8005c8e <__sfp+0x16>
 8005c88:	4630      	mov	r0, r6
 8005c8a:	f7ff ffbd 	bl	8005c08 <__sinit>
 8005c8e:	3648      	adds	r6, #72	; 0x48
 8005c90:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005c94:	3b01      	subs	r3, #1
 8005c96:	d503      	bpl.n	8005ca0 <__sfp+0x28>
 8005c98:	6833      	ldr	r3, [r6, #0]
 8005c9a:	b30b      	cbz	r3, 8005ce0 <__sfp+0x68>
 8005c9c:	6836      	ldr	r6, [r6, #0]
 8005c9e:	e7f7      	b.n	8005c90 <__sfp+0x18>
 8005ca0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005ca4:	b9d5      	cbnz	r5, 8005cdc <__sfp+0x64>
 8005ca6:	4b16      	ldr	r3, [pc, #88]	; (8005d00 <__sfp+0x88>)
 8005ca8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005cac:	60e3      	str	r3, [r4, #12]
 8005cae:	6665      	str	r5, [r4, #100]	; 0x64
 8005cb0:	f000 f859 	bl	8005d66 <__retarget_lock_init_recursive>
 8005cb4:	f7ff ff96 	bl	8005be4 <__sfp_lock_release>
 8005cb8:	2208      	movs	r2, #8
 8005cba:	4629      	mov	r1, r5
 8005cbc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005cc0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005cc4:	6025      	str	r5, [r4, #0]
 8005cc6:	61a5      	str	r5, [r4, #24]
 8005cc8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005ccc:	f7ff fcd4 	bl	8005678 <memset>
 8005cd0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005cd4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005cd8:	4620      	mov	r0, r4
 8005cda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cdc:	3468      	adds	r4, #104	; 0x68
 8005cde:	e7d9      	b.n	8005c94 <__sfp+0x1c>
 8005ce0:	2104      	movs	r1, #4
 8005ce2:	4638      	mov	r0, r7
 8005ce4:	f7ff ff62 	bl	8005bac <__sfmoreglue>
 8005ce8:	4604      	mov	r4, r0
 8005cea:	6030      	str	r0, [r6, #0]
 8005cec:	2800      	cmp	r0, #0
 8005cee:	d1d5      	bne.n	8005c9c <__sfp+0x24>
 8005cf0:	f7ff ff78 	bl	8005be4 <__sfp_lock_release>
 8005cf4:	230c      	movs	r3, #12
 8005cf6:	603b      	str	r3, [r7, #0]
 8005cf8:	e7ee      	b.n	8005cd8 <__sfp+0x60>
 8005cfa:	bf00      	nop
 8005cfc:	08006880 	.word	0x08006880
 8005d00:	ffff0001 	.word	0xffff0001

08005d04 <fiprintf>:
 8005d04:	b40e      	push	{r1, r2, r3}
 8005d06:	b503      	push	{r0, r1, lr}
 8005d08:	4601      	mov	r1, r0
 8005d0a:	ab03      	add	r3, sp, #12
 8005d0c:	4805      	ldr	r0, [pc, #20]	; (8005d24 <fiprintf+0x20>)
 8005d0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d12:	6800      	ldr	r0, [r0, #0]
 8005d14:	9301      	str	r3, [sp, #4]
 8005d16:	f000 f99b 	bl	8006050 <_vfiprintf_r>
 8005d1a:	b002      	add	sp, #8
 8005d1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d20:	b003      	add	sp, #12
 8005d22:	4770      	bx	lr
 8005d24:	20000010 	.word	0x20000010

08005d28 <_fwalk_reent>:
 8005d28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d2c:	4606      	mov	r6, r0
 8005d2e:	4688      	mov	r8, r1
 8005d30:	2700      	movs	r7, #0
 8005d32:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005d36:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005d3a:	f1b9 0901 	subs.w	r9, r9, #1
 8005d3e:	d505      	bpl.n	8005d4c <_fwalk_reent+0x24>
 8005d40:	6824      	ldr	r4, [r4, #0]
 8005d42:	2c00      	cmp	r4, #0
 8005d44:	d1f7      	bne.n	8005d36 <_fwalk_reent+0xe>
 8005d46:	4638      	mov	r0, r7
 8005d48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d4c:	89ab      	ldrh	r3, [r5, #12]
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d907      	bls.n	8005d62 <_fwalk_reent+0x3a>
 8005d52:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005d56:	3301      	adds	r3, #1
 8005d58:	d003      	beq.n	8005d62 <_fwalk_reent+0x3a>
 8005d5a:	4629      	mov	r1, r5
 8005d5c:	4630      	mov	r0, r6
 8005d5e:	47c0      	blx	r8
 8005d60:	4307      	orrs	r7, r0
 8005d62:	3568      	adds	r5, #104	; 0x68
 8005d64:	e7e9      	b.n	8005d3a <_fwalk_reent+0x12>

08005d66 <__retarget_lock_init_recursive>:
 8005d66:	4770      	bx	lr

08005d68 <__retarget_lock_acquire_recursive>:
 8005d68:	4770      	bx	lr

08005d6a <__retarget_lock_release_recursive>:
 8005d6a:	4770      	bx	lr

08005d6c <__swhatbuf_r>:
 8005d6c:	b570      	push	{r4, r5, r6, lr}
 8005d6e:	460e      	mov	r6, r1
 8005d70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d74:	4614      	mov	r4, r2
 8005d76:	2900      	cmp	r1, #0
 8005d78:	461d      	mov	r5, r3
 8005d7a:	b096      	sub	sp, #88	; 0x58
 8005d7c:	da08      	bge.n	8005d90 <__swhatbuf_r+0x24>
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005d84:	602a      	str	r2, [r5, #0]
 8005d86:	061a      	lsls	r2, r3, #24
 8005d88:	d410      	bmi.n	8005dac <__swhatbuf_r+0x40>
 8005d8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d8e:	e00e      	b.n	8005dae <__swhatbuf_r+0x42>
 8005d90:	466a      	mov	r2, sp
 8005d92:	f000 fca1 	bl	80066d8 <_fstat_r>
 8005d96:	2800      	cmp	r0, #0
 8005d98:	dbf1      	blt.n	8005d7e <__swhatbuf_r+0x12>
 8005d9a:	9a01      	ldr	r2, [sp, #4]
 8005d9c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005da0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005da4:	425a      	negs	r2, r3
 8005da6:	415a      	adcs	r2, r3
 8005da8:	602a      	str	r2, [r5, #0]
 8005daa:	e7ee      	b.n	8005d8a <__swhatbuf_r+0x1e>
 8005dac:	2340      	movs	r3, #64	; 0x40
 8005dae:	2000      	movs	r0, #0
 8005db0:	6023      	str	r3, [r4, #0]
 8005db2:	b016      	add	sp, #88	; 0x58
 8005db4:	bd70      	pop	{r4, r5, r6, pc}
	...

08005db8 <__smakebuf_r>:
 8005db8:	898b      	ldrh	r3, [r1, #12]
 8005dba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005dbc:	079d      	lsls	r5, r3, #30
 8005dbe:	4606      	mov	r6, r0
 8005dc0:	460c      	mov	r4, r1
 8005dc2:	d507      	bpl.n	8005dd4 <__smakebuf_r+0x1c>
 8005dc4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005dc8:	6023      	str	r3, [r4, #0]
 8005dca:	6123      	str	r3, [r4, #16]
 8005dcc:	2301      	movs	r3, #1
 8005dce:	6163      	str	r3, [r4, #20]
 8005dd0:	b002      	add	sp, #8
 8005dd2:	bd70      	pop	{r4, r5, r6, pc}
 8005dd4:	466a      	mov	r2, sp
 8005dd6:	ab01      	add	r3, sp, #4
 8005dd8:	f7ff ffc8 	bl	8005d6c <__swhatbuf_r>
 8005ddc:	9900      	ldr	r1, [sp, #0]
 8005dde:	4605      	mov	r5, r0
 8005de0:	4630      	mov	r0, r6
 8005de2:	f000 f899 	bl	8005f18 <_malloc_r>
 8005de6:	b948      	cbnz	r0, 8005dfc <__smakebuf_r+0x44>
 8005de8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005dec:	059a      	lsls	r2, r3, #22
 8005dee:	d4ef      	bmi.n	8005dd0 <__smakebuf_r+0x18>
 8005df0:	f023 0303 	bic.w	r3, r3, #3
 8005df4:	f043 0302 	orr.w	r3, r3, #2
 8005df8:	81a3      	strh	r3, [r4, #12]
 8005dfa:	e7e3      	b.n	8005dc4 <__smakebuf_r+0xc>
 8005dfc:	4b0d      	ldr	r3, [pc, #52]	; (8005e34 <__smakebuf_r+0x7c>)
 8005dfe:	62b3      	str	r3, [r6, #40]	; 0x28
 8005e00:	89a3      	ldrh	r3, [r4, #12]
 8005e02:	6020      	str	r0, [r4, #0]
 8005e04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e08:	81a3      	strh	r3, [r4, #12]
 8005e0a:	9b00      	ldr	r3, [sp, #0]
 8005e0c:	6120      	str	r0, [r4, #16]
 8005e0e:	6163      	str	r3, [r4, #20]
 8005e10:	9b01      	ldr	r3, [sp, #4]
 8005e12:	b15b      	cbz	r3, 8005e2c <__smakebuf_r+0x74>
 8005e14:	4630      	mov	r0, r6
 8005e16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e1a:	f000 fc6f 	bl	80066fc <_isatty_r>
 8005e1e:	b128      	cbz	r0, 8005e2c <__smakebuf_r+0x74>
 8005e20:	89a3      	ldrh	r3, [r4, #12]
 8005e22:	f023 0303 	bic.w	r3, r3, #3
 8005e26:	f043 0301 	orr.w	r3, r3, #1
 8005e2a:	81a3      	strh	r3, [r4, #12]
 8005e2c:	89a0      	ldrh	r0, [r4, #12]
 8005e2e:	4305      	orrs	r5, r0
 8005e30:	81a5      	strh	r5, [r4, #12]
 8005e32:	e7cd      	b.n	8005dd0 <__smakebuf_r+0x18>
 8005e34:	08005ba1 	.word	0x08005ba1

08005e38 <malloc>:
 8005e38:	4b02      	ldr	r3, [pc, #8]	; (8005e44 <malloc+0xc>)
 8005e3a:	4601      	mov	r1, r0
 8005e3c:	6818      	ldr	r0, [r3, #0]
 8005e3e:	f000 b86b 	b.w	8005f18 <_malloc_r>
 8005e42:	bf00      	nop
 8005e44:	20000010 	.word	0x20000010

08005e48 <_free_r>:
 8005e48:	b538      	push	{r3, r4, r5, lr}
 8005e4a:	4605      	mov	r5, r0
 8005e4c:	2900      	cmp	r1, #0
 8005e4e:	d040      	beq.n	8005ed2 <_free_r+0x8a>
 8005e50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e54:	1f0c      	subs	r4, r1, #4
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	bfb8      	it	lt
 8005e5a:	18e4      	addlt	r4, r4, r3
 8005e5c:	f000 fc7e 	bl	800675c <__malloc_lock>
 8005e60:	4a1c      	ldr	r2, [pc, #112]	; (8005ed4 <_free_r+0x8c>)
 8005e62:	6813      	ldr	r3, [r2, #0]
 8005e64:	b933      	cbnz	r3, 8005e74 <_free_r+0x2c>
 8005e66:	6063      	str	r3, [r4, #4]
 8005e68:	6014      	str	r4, [r2, #0]
 8005e6a:	4628      	mov	r0, r5
 8005e6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e70:	f000 bc7a 	b.w	8006768 <__malloc_unlock>
 8005e74:	42a3      	cmp	r3, r4
 8005e76:	d908      	bls.n	8005e8a <_free_r+0x42>
 8005e78:	6820      	ldr	r0, [r4, #0]
 8005e7a:	1821      	adds	r1, r4, r0
 8005e7c:	428b      	cmp	r3, r1
 8005e7e:	bf01      	itttt	eq
 8005e80:	6819      	ldreq	r1, [r3, #0]
 8005e82:	685b      	ldreq	r3, [r3, #4]
 8005e84:	1809      	addeq	r1, r1, r0
 8005e86:	6021      	streq	r1, [r4, #0]
 8005e88:	e7ed      	b.n	8005e66 <_free_r+0x1e>
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	b10b      	cbz	r3, 8005e94 <_free_r+0x4c>
 8005e90:	42a3      	cmp	r3, r4
 8005e92:	d9fa      	bls.n	8005e8a <_free_r+0x42>
 8005e94:	6811      	ldr	r1, [r2, #0]
 8005e96:	1850      	adds	r0, r2, r1
 8005e98:	42a0      	cmp	r0, r4
 8005e9a:	d10b      	bne.n	8005eb4 <_free_r+0x6c>
 8005e9c:	6820      	ldr	r0, [r4, #0]
 8005e9e:	4401      	add	r1, r0
 8005ea0:	1850      	adds	r0, r2, r1
 8005ea2:	4283      	cmp	r3, r0
 8005ea4:	6011      	str	r1, [r2, #0]
 8005ea6:	d1e0      	bne.n	8005e6a <_free_r+0x22>
 8005ea8:	6818      	ldr	r0, [r3, #0]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	4401      	add	r1, r0
 8005eae:	6011      	str	r1, [r2, #0]
 8005eb0:	6053      	str	r3, [r2, #4]
 8005eb2:	e7da      	b.n	8005e6a <_free_r+0x22>
 8005eb4:	d902      	bls.n	8005ebc <_free_r+0x74>
 8005eb6:	230c      	movs	r3, #12
 8005eb8:	602b      	str	r3, [r5, #0]
 8005eba:	e7d6      	b.n	8005e6a <_free_r+0x22>
 8005ebc:	6820      	ldr	r0, [r4, #0]
 8005ebe:	1821      	adds	r1, r4, r0
 8005ec0:	428b      	cmp	r3, r1
 8005ec2:	bf01      	itttt	eq
 8005ec4:	6819      	ldreq	r1, [r3, #0]
 8005ec6:	685b      	ldreq	r3, [r3, #4]
 8005ec8:	1809      	addeq	r1, r1, r0
 8005eca:	6021      	streq	r1, [r4, #0]
 8005ecc:	6063      	str	r3, [r4, #4]
 8005ece:	6054      	str	r4, [r2, #4]
 8005ed0:	e7cb      	b.n	8005e6a <_free_r+0x22>
 8005ed2:	bd38      	pop	{r3, r4, r5, pc}
 8005ed4:	2000050c 	.word	0x2000050c

08005ed8 <sbrk_aligned>:
 8005ed8:	b570      	push	{r4, r5, r6, lr}
 8005eda:	4e0e      	ldr	r6, [pc, #56]	; (8005f14 <sbrk_aligned+0x3c>)
 8005edc:	460c      	mov	r4, r1
 8005ede:	6831      	ldr	r1, [r6, #0]
 8005ee0:	4605      	mov	r5, r0
 8005ee2:	b911      	cbnz	r1, 8005eea <sbrk_aligned+0x12>
 8005ee4:	f000 fb7a 	bl	80065dc <_sbrk_r>
 8005ee8:	6030      	str	r0, [r6, #0]
 8005eea:	4621      	mov	r1, r4
 8005eec:	4628      	mov	r0, r5
 8005eee:	f000 fb75 	bl	80065dc <_sbrk_r>
 8005ef2:	1c43      	adds	r3, r0, #1
 8005ef4:	d00a      	beq.n	8005f0c <sbrk_aligned+0x34>
 8005ef6:	1cc4      	adds	r4, r0, #3
 8005ef8:	f024 0403 	bic.w	r4, r4, #3
 8005efc:	42a0      	cmp	r0, r4
 8005efe:	d007      	beq.n	8005f10 <sbrk_aligned+0x38>
 8005f00:	1a21      	subs	r1, r4, r0
 8005f02:	4628      	mov	r0, r5
 8005f04:	f000 fb6a 	bl	80065dc <_sbrk_r>
 8005f08:	3001      	adds	r0, #1
 8005f0a:	d101      	bne.n	8005f10 <sbrk_aligned+0x38>
 8005f0c:	f04f 34ff 	mov.w	r4, #4294967295
 8005f10:	4620      	mov	r0, r4
 8005f12:	bd70      	pop	{r4, r5, r6, pc}
 8005f14:	20000510 	.word	0x20000510

08005f18 <_malloc_r>:
 8005f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f1c:	1ccd      	adds	r5, r1, #3
 8005f1e:	f025 0503 	bic.w	r5, r5, #3
 8005f22:	3508      	adds	r5, #8
 8005f24:	2d0c      	cmp	r5, #12
 8005f26:	bf38      	it	cc
 8005f28:	250c      	movcc	r5, #12
 8005f2a:	2d00      	cmp	r5, #0
 8005f2c:	4607      	mov	r7, r0
 8005f2e:	db01      	blt.n	8005f34 <_malloc_r+0x1c>
 8005f30:	42a9      	cmp	r1, r5
 8005f32:	d905      	bls.n	8005f40 <_malloc_r+0x28>
 8005f34:	230c      	movs	r3, #12
 8005f36:	2600      	movs	r6, #0
 8005f38:	603b      	str	r3, [r7, #0]
 8005f3a:	4630      	mov	r0, r6
 8005f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f40:	4e2e      	ldr	r6, [pc, #184]	; (8005ffc <_malloc_r+0xe4>)
 8005f42:	f000 fc0b 	bl	800675c <__malloc_lock>
 8005f46:	6833      	ldr	r3, [r6, #0]
 8005f48:	461c      	mov	r4, r3
 8005f4a:	bb34      	cbnz	r4, 8005f9a <_malloc_r+0x82>
 8005f4c:	4629      	mov	r1, r5
 8005f4e:	4638      	mov	r0, r7
 8005f50:	f7ff ffc2 	bl	8005ed8 <sbrk_aligned>
 8005f54:	1c43      	adds	r3, r0, #1
 8005f56:	4604      	mov	r4, r0
 8005f58:	d14d      	bne.n	8005ff6 <_malloc_r+0xde>
 8005f5a:	6834      	ldr	r4, [r6, #0]
 8005f5c:	4626      	mov	r6, r4
 8005f5e:	2e00      	cmp	r6, #0
 8005f60:	d140      	bne.n	8005fe4 <_malloc_r+0xcc>
 8005f62:	6823      	ldr	r3, [r4, #0]
 8005f64:	4631      	mov	r1, r6
 8005f66:	4638      	mov	r0, r7
 8005f68:	eb04 0803 	add.w	r8, r4, r3
 8005f6c:	f000 fb36 	bl	80065dc <_sbrk_r>
 8005f70:	4580      	cmp	r8, r0
 8005f72:	d13a      	bne.n	8005fea <_malloc_r+0xd2>
 8005f74:	6821      	ldr	r1, [r4, #0]
 8005f76:	3503      	adds	r5, #3
 8005f78:	1a6d      	subs	r5, r5, r1
 8005f7a:	f025 0503 	bic.w	r5, r5, #3
 8005f7e:	3508      	adds	r5, #8
 8005f80:	2d0c      	cmp	r5, #12
 8005f82:	bf38      	it	cc
 8005f84:	250c      	movcc	r5, #12
 8005f86:	4638      	mov	r0, r7
 8005f88:	4629      	mov	r1, r5
 8005f8a:	f7ff ffa5 	bl	8005ed8 <sbrk_aligned>
 8005f8e:	3001      	adds	r0, #1
 8005f90:	d02b      	beq.n	8005fea <_malloc_r+0xd2>
 8005f92:	6823      	ldr	r3, [r4, #0]
 8005f94:	442b      	add	r3, r5
 8005f96:	6023      	str	r3, [r4, #0]
 8005f98:	e00e      	b.n	8005fb8 <_malloc_r+0xa0>
 8005f9a:	6822      	ldr	r2, [r4, #0]
 8005f9c:	1b52      	subs	r2, r2, r5
 8005f9e:	d41e      	bmi.n	8005fde <_malloc_r+0xc6>
 8005fa0:	2a0b      	cmp	r2, #11
 8005fa2:	d916      	bls.n	8005fd2 <_malloc_r+0xba>
 8005fa4:	1961      	adds	r1, r4, r5
 8005fa6:	42a3      	cmp	r3, r4
 8005fa8:	6025      	str	r5, [r4, #0]
 8005faa:	bf18      	it	ne
 8005fac:	6059      	strne	r1, [r3, #4]
 8005fae:	6863      	ldr	r3, [r4, #4]
 8005fb0:	bf08      	it	eq
 8005fb2:	6031      	streq	r1, [r6, #0]
 8005fb4:	5162      	str	r2, [r4, r5]
 8005fb6:	604b      	str	r3, [r1, #4]
 8005fb8:	4638      	mov	r0, r7
 8005fba:	f104 060b 	add.w	r6, r4, #11
 8005fbe:	f000 fbd3 	bl	8006768 <__malloc_unlock>
 8005fc2:	f026 0607 	bic.w	r6, r6, #7
 8005fc6:	1d23      	adds	r3, r4, #4
 8005fc8:	1af2      	subs	r2, r6, r3
 8005fca:	d0b6      	beq.n	8005f3a <_malloc_r+0x22>
 8005fcc:	1b9b      	subs	r3, r3, r6
 8005fce:	50a3      	str	r3, [r4, r2]
 8005fd0:	e7b3      	b.n	8005f3a <_malloc_r+0x22>
 8005fd2:	6862      	ldr	r2, [r4, #4]
 8005fd4:	42a3      	cmp	r3, r4
 8005fd6:	bf0c      	ite	eq
 8005fd8:	6032      	streq	r2, [r6, #0]
 8005fda:	605a      	strne	r2, [r3, #4]
 8005fdc:	e7ec      	b.n	8005fb8 <_malloc_r+0xa0>
 8005fde:	4623      	mov	r3, r4
 8005fe0:	6864      	ldr	r4, [r4, #4]
 8005fe2:	e7b2      	b.n	8005f4a <_malloc_r+0x32>
 8005fe4:	4634      	mov	r4, r6
 8005fe6:	6876      	ldr	r6, [r6, #4]
 8005fe8:	e7b9      	b.n	8005f5e <_malloc_r+0x46>
 8005fea:	230c      	movs	r3, #12
 8005fec:	4638      	mov	r0, r7
 8005fee:	603b      	str	r3, [r7, #0]
 8005ff0:	f000 fbba 	bl	8006768 <__malloc_unlock>
 8005ff4:	e7a1      	b.n	8005f3a <_malloc_r+0x22>
 8005ff6:	6025      	str	r5, [r4, #0]
 8005ff8:	e7de      	b.n	8005fb8 <_malloc_r+0xa0>
 8005ffa:	bf00      	nop
 8005ffc:	2000050c 	.word	0x2000050c

08006000 <__sfputc_r>:
 8006000:	6893      	ldr	r3, [r2, #8]
 8006002:	b410      	push	{r4}
 8006004:	3b01      	subs	r3, #1
 8006006:	2b00      	cmp	r3, #0
 8006008:	6093      	str	r3, [r2, #8]
 800600a:	da07      	bge.n	800601c <__sfputc_r+0x1c>
 800600c:	6994      	ldr	r4, [r2, #24]
 800600e:	42a3      	cmp	r3, r4
 8006010:	db01      	blt.n	8006016 <__sfputc_r+0x16>
 8006012:	290a      	cmp	r1, #10
 8006014:	d102      	bne.n	800601c <__sfputc_r+0x1c>
 8006016:	bc10      	pop	{r4}
 8006018:	f7ff bc02 	b.w	8005820 <__swbuf_r>
 800601c:	6813      	ldr	r3, [r2, #0]
 800601e:	1c58      	adds	r0, r3, #1
 8006020:	6010      	str	r0, [r2, #0]
 8006022:	7019      	strb	r1, [r3, #0]
 8006024:	4608      	mov	r0, r1
 8006026:	bc10      	pop	{r4}
 8006028:	4770      	bx	lr

0800602a <__sfputs_r>:
 800602a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800602c:	4606      	mov	r6, r0
 800602e:	460f      	mov	r7, r1
 8006030:	4614      	mov	r4, r2
 8006032:	18d5      	adds	r5, r2, r3
 8006034:	42ac      	cmp	r4, r5
 8006036:	d101      	bne.n	800603c <__sfputs_r+0x12>
 8006038:	2000      	movs	r0, #0
 800603a:	e007      	b.n	800604c <__sfputs_r+0x22>
 800603c:	463a      	mov	r2, r7
 800603e:	4630      	mov	r0, r6
 8006040:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006044:	f7ff ffdc 	bl	8006000 <__sfputc_r>
 8006048:	1c43      	adds	r3, r0, #1
 800604a:	d1f3      	bne.n	8006034 <__sfputs_r+0xa>
 800604c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006050 <_vfiprintf_r>:
 8006050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006054:	460d      	mov	r5, r1
 8006056:	4614      	mov	r4, r2
 8006058:	4698      	mov	r8, r3
 800605a:	4606      	mov	r6, r0
 800605c:	b09d      	sub	sp, #116	; 0x74
 800605e:	b118      	cbz	r0, 8006068 <_vfiprintf_r+0x18>
 8006060:	6983      	ldr	r3, [r0, #24]
 8006062:	b90b      	cbnz	r3, 8006068 <_vfiprintf_r+0x18>
 8006064:	f7ff fdd0 	bl	8005c08 <__sinit>
 8006068:	4b89      	ldr	r3, [pc, #548]	; (8006290 <_vfiprintf_r+0x240>)
 800606a:	429d      	cmp	r5, r3
 800606c:	d11b      	bne.n	80060a6 <_vfiprintf_r+0x56>
 800606e:	6875      	ldr	r5, [r6, #4]
 8006070:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006072:	07d9      	lsls	r1, r3, #31
 8006074:	d405      	bmi.n	8006082 <_vfiprintf_r+0x32>
 8006076:	89ab      	ldrh	r3, [r5, #12]
 8006078:	059a      	lsls	r2, r3, #22
 800607a:	d402      	bmi.n	8006082 <_vfiprintf_r+0x32>
 800607c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800607e:	f7ff fe73 	bl	8005d68 <__retarget_lock_acquire_recursive>
 8006082:	89ab      	ldrh	r3, [r5, #12]
 8006084:	071b      	lsls	r3, r3, #28
 8006086:	d501      	bpl.n	800608c <_vfiprintf_r+0x3c>
 8006088:	692b      	ldr	r3, [r5, #16]
 800608a:	b9eb      	cbnz	r3, 80060c8 <_vfiprintf_r+0x78>
 800608c:	4629      	mov	r1, r5
 800608e:	4630      	mov	r0, r6
 8006090:	f7ff fc18 	bl	80058c4 <__swsetup_r>
 8006094:	b1c0      	cbz	r0, 80060c8 <_vfiprintf_r+0x78>
 8006096:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006098:	07dc      	lsls	r4, r3, #31
 800609a:	d50e      	bpl.n	80060ba <_vfiprintf_r+0x6a>
 800609c:	f04f 30ff 	mov.w	r0, #4294967295
 80060a0:	b01d      	add	sp, #116	; 0x74
 80060a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060a6:	4b7b      	ldr	r3, [pc, #492]	; (8006294 <_vfiprintf_r+0x244>)
 80060a8:	429d      	cmp	r5, r3
 80060aa:	d101      	bne.n	80060b0 <_vfiprintf_r+0x60>
 80060ac:	68b5      	ldr	r5, [r6, #8]
 80060ae:	e7df      	b.n	8006070 <_vfiprintf_r+0x20>
 80060b0:	4b79      	ldr	r3, [pc, #484]	; (8006298 <_vfiprintf_r+0x248>)
 80060b2:	429d      	cmp	r5, r3
 80060b4:	bf08      	it	eq
 80060b6:	68f5      	ldreq	r5, [r6, #12]
 80060b8:	e7da      	b.n	8006070 <_vfiprintf_r+0x20>
 80060ba:	89ab      	ldrh	r3, [r5, #12]
 80060bc:	0598      	lsls	r0, r3, #22
 80060be:	d4ed      	bmi.n	800609c <_vfiprintf_r+0x4c>
 80060c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80060c2:	f7ff fe52 	bl	8005d6a <__retarget_lock_release_recursive>
 80060c6:	e7e9      	b.n	800609c <_vfiprintf_r+0x4c>
 80060c8:	2300      	movs	r3, #0
 80060ca:	9309      	str	r3, [sp, #36]	; 0x24
 80060cc:	2320      	movs	r3, #32
 80060ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80060d2:	2330      	movs	r3, #48	; 0x30
 80060d4:	f04f 0901 	mov.w	r9, #1
 80060d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80060dc:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800629c <_vfiprintf_r+0x24c>
 80060e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80060e4:	4623      	mov	r3, r4
 80060e6:	469a      	mov	sl, r3
 80060e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060ec:	b10a      	cbz	r2, 80060f2 <_vfiprintf_r+0xa2>
 80060ee:	2a25      	cmp	r2, #37	; 0x25
 80060f0:	d1f9      	bne.n	80060e6 <_vfiprintf_r+0x96>
 80060f2:	ebba 0b04 	subs.w	fp, sl, r4
 80060f6:	d00b      	beq.n	8006110 <_vfiprintf_r+0xc0>
 80060f8:	465b      	mov	r3, fp
 80060fa:	4622      	mov	r2, r4
 80060fc:	4629      	mov	r1, r5
 80060fe:	4630      	mov	r0, r6
 8006100:	f7ff ff93 	bl	800602a <__sfputs_r>
 8006104:	3001      	adds	r0, #1
 8006106:	f000 80aa 	beq.w	800625e <_vfiprintf_r+0x20e>
 800610a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800610c:	445a      	add	r2, fp
 800610e:	9209      	str	r2, [sp, #36]	; 0x24
 8006110:	f89a 3000 	ldrb.w	r3, [sl]
 8006114:	2b00      	cmp	r3, #0
 8006116:	f000 80a2 	beq.w	800625e <_vfiprintf_r+0x20e>
 800611a:	2300      	movs	r3, #0
 800611c:	f04f 32ff 	mov.w	r2, #4294967295
 8006120:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006124:	f10a 0a01 	add.w	sl, sl, #1
 8006128:	9304      	str	r3, [sp, #16]
 800612a:	9307      	str	r3, [sp, #28]
 800612c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006130:	931a      	str	r3, [sp, #104]	; 0x68
 8006132:	4654      	mov	r4, sl
 8006134:	2205      	movs	r2, #5
 8006136:	f814 1b01 	ldrb.w	r1, [r4], #1
 800613a:	4858      	ldr	r0, [pc, #352]	; (800629c <_vfiprintf_r+0x24c>)
 800613c:	f000 fb00 	bl	8006740 <memchr>
 8006140:	9a04      	ldr	r2, [sp, #16]
 8006142:	b9d8      	cbnz	r0, 800617c <_vfiprintf_r+0x12c>
 8006144:	06d1      	lsls	r1, r2, #27
 8006146:	bf44      	itt	mi
 8006148:	2320      	movmi	r3, #32
 800614a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800614e:	0713      	lsls	r3, r2, #28
 8006150:	bf44      	itt	mi
 8006152:	232b      	movmi	r3, #43	; 0x2b
 8006154:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006158:	f89a 3000 	ldrb.w	r3, [sl]
 800615c:	2b2a      	cmp	r3, #42	; 0x2a
 800615e:	d015      	beq.n	800618c <_vfiprintf_r+0x13c>
 8006160:	4654      	mov	r4, sl
 8006162:	2000      	movs	r0, #0
 8006164:	f04f 0c0a 	mov.w	ip, #10
 8006168:	9a07      	ldr	r2, [sp, #28]
 800616a:	4621      	mov	r1, r4
 800616c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006170:	3b30      	subs	r3, #48	; 0x30
 8006172:	2b09      	cmp	r3, #9
 8006174:	d94e      	bls.n	8006214 <_vfiprintf_r+0x1c4>
 8006176:	b1b0      	cbz	r0, 80061a6 <_vfiprintf_r+0x156>
 8006178:	9207      	str	r2, [sp, #28]
 800617a:	e014      	b.n	80061a6 <_vfiprintf_r+0x156>
 800617c:	eba0 0308 	sub.w	r3, r0, r8
 8006180:	fa09 f303 	lsl.w	r3, r9, r3
 8006184:	4313      	orrs	r3, r2
 8006186:	46a2      	mov	sl, r4
 8006188:	9304      	str	r3, [sp, #16]
 800618a:	e7d2      	b.n	8006132 <_vfiprintf_r+0xe2>
 800618c:	9b03      	ldr	r3, [sp, #12]
 800618e:	1d19      	adds	r1, r3, #4
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	9103      	str	r1, [sp, #12]
 8006194:	2b00      	cmp	r3, #0
 8006196:	bfbb      	ittet	lt
 8006198:	425b      	neglt	r3, r3
 800619a:	f042 0202 	orrlt.w	r2, r2, #2
 800619e:	9307      	strge	r3, [sp, #28]
 80061a0:	9307      	strlt	r3, [sp, #28]
 80061a2:	bfb8      	it	lt
 80061a4:	9204      	strlt	r2, [sp, #16]
 80061a6:	7823      	ldrb	r3, [r4, #0]
 80061a8:	2b2e      	cmp	r3, #46	; 0x2e
 80061aa:	d10c      	bne.n	80061c6 <_vfiprintf_r+0x176>
 80061ac:	7863      	ldrb	r3, [r4, #1]
 80061ae:	2b2a      	cmp	r3, #42	; 0x2a
 80061b0:	d135      	bne.n	800621e <_vfiprintf_r+0x1ce>
 80061b2:	9b03      	ldr	r3, [sp, #12]
 80061b4:	3402      	adds	r4, #2
 80061b6:	1d1a      	adds	r2, r3, #4
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	9203      	str	r2, [sp, #12]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	bfb8      	it	lt
 80061c0:	f04f 33ff 	movlt.w	r3, #4294967295
 80061c4:	9305      	str	r3, [sp, #20]
 80061c6:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80062a0 <_vfiprintf_r+0x250>
 80061ca:	2203      	movs	r2, #3
 80061cc:	4650      	mov	r0, sl
 80061ce:	7821      	ldrb	r1, [r4, #0]
 80061d0:	f000 fab6 	bl	8006740 <memchr>
 80061d4:	b140      	cbz	r0, 80061e8 <_vfiprintf_r+0x198>
 80061d6:	2340      	movs	r3, #64	; 0x40
 80061d8:	eba0 000a 	sub.w	r0, r0, sl
 80061dc:	fa03 f000 	lsl.w	r0, r3, r0
 80061e0:	9b04      	ldr	r3, [sp, #16]
 80061e2:	3401      	adds	r4, #1
 80061e4:	4303      	orrs	r3, r0
 80061e6:	9304      	str	r3, [sp, #16]
 80061e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061ec:	2206      	movs	r2, #6
 80061ee:	482d      	ldr	r0, [pc, #180]	; (80062a4 <_vfiprintf_r+0x254>)
 80061f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80061f4:	f000 faa4 	bl	8006740 <memchr>
 80061f8:	2800      	cmp	r0, #0
 80061fa:	d03f      	beq.n	800627c <_vfiprintf_r+0x22c>
 80061fc:	4b2a      	ldr	r3, [pc, #168]	; (80062a8 <_vfiprintf_r+0x258>)
 80061fe:	bb1b      	cbnz	r3, 8006248 <_vfiprintf_r+0x1f8>
 8006200:	9b03      	ldr	r3, [sp, #12]
 8006202:	3307      	adds	r3, #7
 8006204:	f023 0307 	bic.w	r3, r3, #7
 8006208:	3308      	adds	r3, #8
 800620a:	9303      	str	r3, [sp, #12]
 800620c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800620e:	443b      	add	r3, r7
 8006210:	9309      	str	r3, [sp, #36]	; 0x24
 8006212:	e767      	b.n	80060e4 <_vfiprintf_r+0x94>
 8006214:	460c      	mov	r4, r1
 8006216:	2001      	movs	r0, #1
 8006218:	fb0c 3202 	mla	r2, ip, r2, r3
 800621c:	e7a5      	b.n	800616a <_vfiprintf_r+0x11a>
 800621e:	2300      	movs	r3, #0
 8006220:	f04f 0c0a 	mov.w	ip, #10
 8006224:	4619      	mov	r1, r3
 8006226:	3401      	adds	r4, #1
 8006228:	9305      	str	r3, [sp, #20]
 800622a:	4620      	mov	r0, r4
 800622c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006230:	3a30      	subs	r2, #48	; 0x30
 8006232:	2a09      	cmp	r2, #9
 8006234:	d903      	bls.n	800623e <_vfiprintf_r+0x1ee>
 8006236:	2b00      	cmp	r3, #0
 8006238:	d0c5      	beq.n	80061c6 <_vfiprintf_r+0x176>
 800623a:	9105      	str	r1, [sp, #20]
 800623c:	e7c3      	b.n	80061c6 <_vfiprintf_r+0x176>
 800623e:	4604      	mov	r4, r0
 8006240:	2301      	movs	r3, #1
 8006242:	fb0c 2101 	mla	r1, ip, r1, r2
 8006246:	e7f0      	b.n	800622a <_vfiprintf_r+0x1da>
 8006248:	ab03      	add	r3, sp, #12
 800624a:	9300      	str	r3, [sp, #0]
 800624c:	462a      	mov	r2, r5
 800624e:	4630      	mov	r0, r6
 8006250:	4b16      	ldr	r3, [pc, #88]	; (80062ac <_vfiprintf_r+0x25c>)
 8006252:	a904      	add	r1, sp, #16
 8006254:	f3af 8000 	nop.w
 8006258:	4607      	mov	r7, r0
 800625a:	1c78      	adds	r0, r7, #1
 800625c:	d1d6      	bne.n	800620c <_vfiprintf_r+0x1bc>
 800625e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006260:	07d9      	lsls	r1, r3, #31
 8006262:	d405      	bmi.n	8006270 <_vfiprintf_r+0x220>
 8006264:	89ab      	ldrh	r3, [r5, #12]
 8006266:	059a      	lsls	r2, r3, #22
 8006268:	d402      	bmi.n	8006270 <_vfiprintf_r+0x220>
 800626a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800626c:	f7ff fd7d 	bl	8005d6a <__retarget_lock_release_recursive>
 8006270:	89ab      	ldrh	r3, [r5, #12]
 8006272:	065b      	lsls	r3, r3, #25
 8006274:	f53f af12 	bmi.w	800609c <_vfiprintf_r+0x4c>
 8006278:	9809      	ldr	r0, [sp, #36]	; 0x24
 800627a:	e711      	b.n	80060a0 <_vfiprintf_r+0x50>
 800627c:	ab03      	add	r3, sp, #12
 800627e:	9300      	str	r3, [sp, #0]
 8006280:	462a      	mov	r2, r5
 8006282:	4630      	mov	r0, r6
 8006284:	4b09      	ldr	r3, [pc, #36]	; (80062ac <_vfiprintf_r+0x25c>)
 8006286:	a904      	add	r1, sp, #16
 8006288:	f000 f882 	bl	8006390 <_printf_i>
 800628c:	e7e4      	b.n	8006258 <_vfiprintf_r+0x208>
 800628e:	bf00      	nop
 8006290:	08006954 	.word	0x08006954
 8006294:	08006974 	.word	0x08006974
 8006298:	08006934 	.word	0x08006934
 800629c:	08006994 	.word	0x08006994
 80062a0:	0800699a 	.word	0x0800699a
 80062a4:	0800699e 	.word	0x0800699e
 80062a8:	00000000 	.word	0x00000000
 80062ac:	0800602b 	.word	0x0800602b

080062b0 <_printf_common>:
 80062b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062b4:	4616      	mov	r6, r2
 80062b6:	4699      	mov	r9, r3
 80062b8:	688a      	ldr	r2, [r1, #8]
 80062ba:	690b      	ldr	r3, [r1, #16]
 80062bc:	4607      	mov	r7, r0
 80062be:	4293      	cmp	r3, r2
 80062c0:	bfb8      	it	lt
 80062c2:	4613      	movlt	r3, r2
 80062c4:	6033      	str	r3, [r6, #0]
 80062c6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80062ca:	460c      	mov	r4, r1
 80062cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80062d0:	b10a      	cbz	r2, 80062d6 <_printf_common+0x26>
 80062d2:	3301      	adds	r3, #1
 80062d4:	6033      	str	r3, [r6, #0]
 80062d6:	6823      	ldr	r3, [r4, #0]
 80062d8:	0699      	lsls	r1, r3, #26
 80062da:	bf42      	ittt	mi
 80062dc:	6833      	ldrmi	r3, [r6, #0]
 80062de:	3302      	addmi	r3, #2
 80062e0:	6033      	strmi	r3, [r6, #0]
 80062e2:	6825      	ldr	r5, [r4, #0]
 80062e4:	f015 0506 	ands.w	r5, r5, #6
 80062e8:	d106      	bne.n	80062f8 <_printf_common+0x48>
 80062ea:	f104 0a19 	add.w	sl, r4, #25
 80062ee:	68e3      	ldr	r3, [r4, #12]
 80062f0:	6832      	ldr	r2, [r6, #0]
 80062f2:	1a9b      	subs	r3, r3, r2
 80062f4:	42ab      	cmp	r3, r5
 80062f6:	dc28      	bgt.n	800634a <_printf_common+0x9a>
 80062f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80062fc:	1e13      	subs	r3, r2, #0
 80062fe:	6822      	ldr	r2, [r4, #0]
 8006300:	bf18      	it	ne
 8006302:	2301      	movne	r3, #1
 8006304:	0692      	lsls	r2, r2, #26
 8006306:	d42d      	bmi.n	8006364 <_printf_common+0xb4>
 8006308:	4649      	mov	r1, r9
 800630a:	4638      	mov	r0, r7
 800630c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006310:	47c0      	blx	r8
 8006312:	3001      	adds	r0, #1
 8006314:	d020      	beq.n	8006358 <_printf_common+0xa8>
 8006316:	6823      	ldr	r3, [r4, #0]
 8006318:	68e5      	ldr	r5, [r4, #12]
 800631a:	f003 0306 	and.w	r3, r3, #6
 800631e:	2b04      	cmp	r3, #4
 8006320:	bf18      	it	ne
 8006322:	2500      	movne	r5, #0
 8006324:	6832      	ldr	r2, [r6, #0]
 8006326:	f04f 0600 	mov.w	r6, #0
 800632a:	68a3      	ldr	r3, [r4, #8]
 800632c:	bf08      	it	eq
 800632e:	1aad      	subeq	r5, r5, r2
 8006330:	6922      	ldr	r2, [r4, #16]
 8006332:	bf08      	it	eq
 8006334:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006338:	4293      	cmp	r3, r2
 800633a:	bfc4      	itt	gt
 800633c:	1a9b      	subgt	r3, r3, r2
 800633e:	18ed      	addgt	r5, r5, r3
 8006340:	341a      	adds	r4, #26
 8006342:	42b5      	cmp	r5, r6
 8006344:	d11a      	bne.n	800637c <_printf_common+0xcc>
 8006346:	2000      	movs	r0, #0
 8006348:	e008      	b.n	800635c <_printf_common+0xac>
 800634a:	2301      	movs	r3, #1
 800634c:	4652      	mov	r2, sl
 800634e:	4649      	mov	r1, r9
 8006350:	4638      	mov	r0, r7
 8006352:	47c0      	blx	r8
 8006354:	3001      	adds	r0, #1
 8006356:	d103      	bne.n	8006360 <_printf_common+0xb0>
 8006358:	f04f 30ff 	mov.w	r0, #4294967295
 800635c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006360:	3501      	adds	r5, #1
 8006362:	e7c4      	b.n	80062ee <_printf_common+0x3e>
 8006364:	2030      	movs	r0, #48	; 0x30
 8006366:	18e1      	adds	r1, r4, r3
 8006368:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800636c:	1c5a      	adds	r2, r3, #1
 800636e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006372:	4422      	add	r2, r4
 8006374:	3302      	adds	r3, #2
 8006376:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800637a:	e7c5      	b.n	8006308 <_printf_common+0x58>
 800637c:	2301      	movs	r3, #1
 800637e:	4622      	mov	r2, r4
 8006380:	4649      	mov	r1, r9
 8006382:	4638      	mov	r0, r7
 8006384:	47c0      	blx	r8
 8006386:	3001      	adds	r0, #1
 8006388:	d0e6      	beq.n	8006358 <_printf_common+0xa8>
 800638a:	3601      	adds	r6, #1
 800638c:	e7d9      	b.n	8006342 <_printf_common+0x92>
	...

08006390 <_printf_i>:
 8006390:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006394:	7e0f      	ldrb	r7, [r1, #24]
 8006396:	4691      	mov	r9, r2
 8006398:	2f78      	cmp	r7, #120	; 0x78
 800639a:	4680      	mov	r8, r0
 800639c:	460c      	mov	r4, r1
 800639e:	469a      	mov	sl, r3
 80063a0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80063a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80063a6:	d807      	bhi.n	80063b8 <_printf_i+0x28>
 80063a8:	2f62      	cmp	r7, #98	; 0x62
 80063aa:	d80a      	bhi.n	80063c2 <_printf_i+0x32>
 80063ac:	2f00      	cmp	r7, #0
 80063ae:	f000 80d9 	beq.w	8006564 <_printf_i+0x1d4>
 80063b2:	2f58      	cmp	r7, #88	; 0x58
 80063b4:	f000 80a4 	beq.w	8006500 <_printf_i+0x170>
 80063b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80063c0:	e03a      	b.n	8006438 <_printf_i+0xa8>
 80063c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80063c6:	2b15      	cmp	r3, #21
 80063c8:	d8f6      	bhi.n	80063b8 <_printf_i+0x28>
 80063ca:	a101      	add	r1, pc, #4	; (adr r1, 80063d0 <_printf_i+0x40>)
 80063cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80063d0:	08006429 	.word	0x08006429
 80063d4:	0800643d 	.word	0x0800643d
 80063d8:	080063b9 	.word	0x080063b9
 80063dc:	080063b9 	.word	0x080063b9
 80063e0:	080063b9 	.word	0x080063b9
 80063e4:	080063b9 	.word	0x080063b9
 80063e8:	0800643d 	.word	0x0800643d
 80063ec:	080063b9 	.word	0x080063b9
 80063f0:	080063b9 	.word	0x080063b9
 80063f4:	080063b9 	.word	0x080063b9
 80063f8:	080063b9 	.word	0x080063b9
 80063fc:	0800654b 	.word	0x0800654b
 8006400:	0800646d 	.word	0x0800646d
 8006404:	0800652d 	.word	0x0800652d
 8006408:	080063b9 	.word	0x080063b9
 800640c:	080063b9 	.word	0x080063b9
 8006410:	0800656d 	.word	0x0800656d
 8006414:	080063b9 	.word	0x080063b9
 8006418:	0800646d 	.word	0x0800646d
 800641c:	080063b9 	.word	0x080063b9
 8006420:	080063b9 	.word	0x080063b9
 8006424:	08006535 	.word	0x08006535
 8006428:	682b      	ldr	r3, [r5, #0]
 800642a:	1d1a      	adds	r2, r3, #4
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	602a      	str	r2, [r5, #0]
 8006430:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006434:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006438:	2301      	movs	r3, #1
 800643a:	e0a4      	b.n	8006586 <_printf_i+0x1f6>
 800643c:	6820      	ldr	r0, [r4, #0]
 800643e:	6829      	ldr	r1, [r5, #0]
 8006440:	0606      	lsls	r6, r0, #24
 8006442:	f101 0304 	add.w	r3, r1, #4
 8006446:	d50a      	bpl.n	800645e <_printf_i+0xce>
 8006448:	680e      	ldr	r6, [r1, #0]
 800644a:	602b      	str	r3, [r5, #0]
 800644c:	2e00      	cmp	r6, #0
 800644e:	da03      	bge.n	8006458 <_printf_i+0xc8>
 8006450:	232d      	movs	r3, #45	; 0x2d
 8006452:	4276      	negs	r6, r6
 8006454:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006458:	230a      	movs	r3, #10
 800645a:	485e      	ldr	r0, [pc, #376]	; (80065d4 <_printf_i+0x244>)
 800645c:	e019      	b.n	8006492 <_printf_i+0x102>
 800645e:	680e      	ldr	r6, [r1, #0]
 8006460:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006464:	602b      	str	r3, [r5, #0]
 8006466:	bf18      	it	ne
 8006468:	b236      	sxthne	r6, r6
 800646a:	e7ef      	b.n	800644c <_printf_i+0xbc>
 800646c:	682b      	ldr	r3, [r5, #0]
 800646e:	6820      	ldr	r0, [r4, #0]
 8006470:	1d19      	adds	r1, r3, #4
 8006472:	6029      	str	r1, [r5, #0]
 8006474:	0601      	lsls	r1, r0, #24
 8006476:	d501      	bpl.n	800647c <_printf_i+0xec>
 8006478:	681e      	ldr	r6, [r3, #0]
 800647a:	e002      	b.n	8006482 <_printf_i+0xf2>
 800647c:	0646      	lsls	r6, r0, #25
 800647e:	d5fb      	bpl.n	8006478 <_printf_i+0xe8>
 8006480:	881e      	ldrh	r6, [r3, #0]
 8006482:	2f6f      	cmp	r7, #111	; 0x6f
 8006484:	bf0c      	ite	eq
 8006486:	2308      	moveq	r3, #8
 8006488:	230a      	movne	r3, #10
 800648a:	4852      	ldr	r0, [pc, #328]	; (80065d4 <_printf_i+0x244>)
 800648c:	2100      	movs	r1, #0
 800648e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006492:	6865      	ldr	r5, [r4, #4]
 8006494:	2d00      	cmp	r5, #0
 8006496:	bfa8      	it	ge
 8006498:	6821      	ldrge	r1, [r4, #0]
 800649a:	60a5      	str	r5, [r4, #8]
 800649c:	bfa4      	itt	ge
 800649e:	f021 0104 	bicge.w	r1, r1, #4
 80064a2:	6021      	strge	r1, [r4, #0]
 80064a4:	b90e      	cbnz	r6, 80064aa <_printf_i+0x11a>
 80064a6:	2d00      	cmp	r5, #0
 80064a8:	d04d      	beq.n	8006546 <_printf_i+0x1b6>
 80064aa:	4615      	mov	r5, r2
 80064ac:	fbb6 f1f3 	udiv	r1, r6, r3
 80064b0:	fb03 6711 	mls	r7, r3, r1, r6
 80064b4:	5dc7      	ldrb	r7, [r0, r7]
 80064b6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80064ba:	4637      	mov	r7, r6
 80064bc:	42bb      	cmp	r3, r7
 80064be:	460e      	mov	r6, r1
 80064c0:	d9f4      	bls.n	80064ac <_printf_i+0x11c>
 80064c2:	2b08      	cmp	r3, #8
 80064c4:	d10b      	bne.n	80064de <_printf_i+0x14e>
 80064c6:	6823      	ldr	r3, [r4, #0]
 80064c8:	07de      	lsls	r6, r3, #31
 80064ca:	d508      	bpl.n	80064de <_printf_i+0x14e>
 80064cc:	6923      	ldr	r3, [r4, #16]
 80064ce:	6861      	ldr	r1, [r4, #4]
 80064d0:	4299      	cmp	r1, r3
 80064d2:	bfde      	ittt	le
 80064d4:	2330      	movle	r3, #48	; 0x30
 80064d6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80064da:	f105 35ff 	addle.w	r5, r5, #4294967295
 80064de:	1b52      	subs	r2, r2, r5
 80064e0:	6122      	str	r2, [r4, #16]
 80064e2:	464b      	mov	r3, r9
 80064e4:	4621      	mov	r1, r4
 80064e6:	4640      	mov	r0, r8
 80064e8:	f8cd a000 	str.w	sl, [sp]
 80064ec:	aa03      	add	r2, sp, #12
 80064ee:	f7ff fedf 	bl	80062b0 <_printf_common>
 80064f2:	3001      	adds	r0, #1
 80064f4:	d14c      	bne.n	8006590 <_printf_i+0x200>
 80064f6:	f04f 30ff 	mov.w	r0, #4294967295
 80064fa:	b004      	add	sp, #16
 80064fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006500:	4834      	ldr	r0, [pc, #208]	; (80065d4 <_printf_i+0x244>)
 8006502:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006506:	6829      	ldr	r1, [r5, #0]
 8006508:	6823      	ldr	r3, [r4, #0]
 800650a:	f851 6b04 	ldr.w	r6, [r1], #4
 800650e:	6029      	str	r1, [r5, #0]
 8006510:	061d      	lsls	r5, r3, #24
 8006512:	d514      	bpl.n	800653e <_printf_i+0x1ae>
 8006514:	07df      	lsls	r7, r3, #31
 8006516:	bf44      	itt	mi
 8006518:	f043 0320 	orrmi.w	r3, r3, #32
 800651c:	6023      	strmi	r3, [r4, #0]
 800651e:	b91e      	cbnz	r6, 8006528 <_printf_i+0x198>
 8006520:	6823      	ldr	r3, [r4, #0]
 8006522:	f023 0320 	bic.w	r3, r3, #32
 8006526:	6023      	str	r3, [r4, #0]
 8006528:	2310      	movs	r3, #16
 800652a:	e7af      	b.n	800648c <_printf_i+0xfc>
 800652c:	6823      	ldr	r3, [r4, #0]
 800652e:	f043 0320 	orr.w	r3, r3, #32
 8006532:	6023      	str	r3, [r4, #0]
 8006534:	2378      	movs	r3, #120	; 0x78
 8006536:	4828      	ldr	r0, [pc, #160]	; (80065d8 <_printf_i+0x248>)
 8006538:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800653c:	e7e3      	b.n	8006506 <_printf_i+0x176>
 800653e:	0659      	lsls	r1, r3, #25
 8006540:	bf48      	it	mi
 8006542:	b2b6      	uxthmi	r6, r6
 8006544:	e7e6      	b.n	8006514 <_printf_i+0x184>
 8006546:	4615      	mov	r5, r2
 8006548:	e7bb      	b.n	80064c2 <_printf_i+0x132>
 800654a:	682b      	ldr	r3, [r5, #0]
 800654c:	6826      	ldr	r6, [r4, #0]
 800654e:	1d18      	adds	r0, r3, #4
 8006550:	6961      	ldr	r1, [r4, #20]
 8006552:	6028      	str	r0, [r5, #0]
 8006554:	0635      	lsls	r5, r6, #24
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	d501      	bpl.n	800655e <_printf_i+0x1ce>
 800655a:	6019      	str	r1, [r3, #0]
 800655c:	e002      	b.n	8006564 <_printf_i+0x1d4>
 800655e:	0670      	lsls	r0, r6, #25
 8006560:	d5fb      	bpl.n	800655a <_printf_i+0x1ca>
 8006562:	8019      	strh	r1, [r3, #0]
 8006564:	2300      	movs	r3, #0
 8006566:	4615      	mov	r5, r2
 8006568:	6123      	str	r3, [r4, #16]
 800656a:	e7ba      	b.n	80064e2 <_printf_i+0x152>
 800656c:	682b      	ldr	r3, [r5, #0]
 800656e:	2100      	movs	r1, #0
 8006570:	1d1a      	adds	r2, r3, #4
 8006572:	602a      	str	r2, [r5, #0]
 8006574:	681d      	ldr	r5, [r3, #0]
 8006576:	6862      	ldr	r2, [r4, #4]
 8006578:	4628      	mov	r0, r5
 800657a:	f000 f8e1 	bl	8006740 <memchr>
 800657e:	b108      	cbz	r0, 8006584 <_printf_i+0x1f4>
 8006580:	1b40      	subs	r0, r0, r5
 8006582:	6060      	str	r0, [r4, #4]
 8006584:	6863      	ldr	r3, [r4, #4]
 8006586:	6123      	str	r3, [r4, #16]
 8006588:	2300      	movs	r3, #0
 800658a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800658e:	e7a8      	b.n	80064e2 <_printf_i+0x152>
 8006590:	462a      	mov	r2, r5
 8006592:	4649      	mov	r1, r9
 8006594:	4640      	mov	r0, r8
 8006596:	6923      	ldr	r3, [r4, #16]
 8006598:	47d0      	blx	sl
 800659a:	3001      	adds	r0, #1
 800659c:	d0ab      	beq.n	80064f6 <_printf_i+0x166>
 800659e:	6823      	ldr	r3, [r4, #0]
 80065a0:	079b      	lsls	r3, r3, #30
 80065a2:	d413      	bmi.n	80065cc <_printf_i+0x23c>
 80065a4:	68e0      	ldr	r0, [r4, #12]
 80065a6:	9b03      	ldr	r3, [sp, #12]
 80065a8:	4298      	cmp	r0, r3
 80065aa:	bfb8      	it	lt
 80065ac:	4618      	movlt	r0, r3
 80065ae:	e7a4      	b.n	80064fa <_printf_i+0x16a>
 80065b0:	2301      	movs	r3, #1
 80065b2:	4632      	mov	r2, r6
 80065b4:	4649      	mov	r1, r9
 80065b6:	4640      	mov	r0, r8
 80065b8:	47d0      	blx	sl
 80065ba:	3001      	adds	r0, #1
 80065bc:	d09b      	beq.n	80064f6 <_printf_i+0x166>
 80065be:	3501      	adds	r5, #1
 80065c0:	68e3      	ldr	r3, [r4, #12]
 80065c2:	9903      	ldr	r1, [sp, #12]
 80065c4:	1a5b      	subs	r3, r3, r1
 80065c6:	42ab      	cmp	r3, r5
 80065c8:	dcf2      	bgt.n	80065b0 <_printf_i+0x220>
 80065ca:	e7eb      	b.n	80065a4 <_printf_i+0x214>
 80065cc:	2500      	movs	r5, #0
 80065ce:	f104 0619 	add.w	r6, r4, #25
 80065d2:	e7f5      	b.n	80065c0 <_printf_i+0x230>
 80065d4:	080069a5 	.word	0x080069a5
 80065d8:	080069b6 	.word	0x080069b6

080065dc <_sbrk_r>:
 80065dc:	b538      	push	{r3, r4, r5, lr}
 80065de:	2300      	movs	r3, #0
 80065e0:	4d05      	ldr	r5, [pc, #20]	; (80065f8 <_sbrk_r+0x1c>)
 80065e2:	4604      	mov	r4, r0
 80065e4:	4608      	mov	r0, r1
 80065e6:	602b      	str	r3, [r5, #0]
 80065e8:	f7fc f8d4 	bl	8002794 <_sbrk>
 80065ec:	1c43      	adds	r3, r0, #1
 80065ee:	d102      	bne.n	80065f6 <_sbrk_r+0x1a>
 80065f0:	682b      	ldr	r3, [r5, #0]
 80065f2:	b103      	cbz	r3, 80065f6 <_sbrk_r+0x1a>
 80065f4:	6023      	str	r3, [r4, #0]
 80065f6:	bd38      	pop	{r3, r4, r5, pc}
 80065f8:	20000514 	.word	0x20000514

080065fc <__sread>:
 80065fc:	b510      	push	{r4, lr}
 80065fe:	460c      	mov	r4, r1
 8006600:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006604:	f000 f8b6 	bl	8006774 <_read_r>
 8006608:	2800      	cmp	r0, #0
 800660a:	bfab      	itete	ge
 800660c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800660e:	89a3      	ldrhlt	r3, [r4, #12]
 8006610:	181b      	addge	r3, r3, r0
 8006612:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006616:	bfac      	ite	ge
 8006618:	6563      	strge	r3, [r4, #84]	; 0x54
 800661a:	81a3      	strhlt	r3, [r4, #12]
 800661c:	bd10      	pop	{r4, pc}

0800661e <__swrite>:
 800661e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006622:	461f      	mov	r7, r3
 8006624:	898b      	ldrh	r3, [r1, #12]
 8006626:	4605      	mov	r5, r0
 8006628:	05db      	lsls	r3, r3, #23
 800662a:	460c      	mov	r4, r1
 800662c:	4616      	mov	r6, r2
 800662e:	d505      	bpl.n	800663c <__swrite+0x1e>
 8006630:	2302      	movs	r3, #2
 8006632:	2200      	movs	r2, #0
 8006634:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006638:	f000 f870 	bl	800671c <_lseek_r>
 800663c:	89a3      	ldrh	r3, [r4, #12]
 800663e:	4632      	mov	r2, r6
 8006640:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006644:	81a3      	strh	r3, [r4, #12]
 8006646:	4628      	mov	r0, r5
 8006648:	463b      	mov	r3, r7
 800664a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800664e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006652:	f000 b817 	b.w	8006684 <_write_r>

08006656 <__sseek>:
 8006656:	b510      	push	{r4, lr}
 8006658:	460c      	mov	r4, r1
 800665a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800665e:	f000 f85d 	bl	800671c <_lseek_r>
 8006662:	1c43      	adds	r3, r0, #1
 8006664:	89a3      	ldrh	r3, [r4, #12]
 8006666:	bf15      	itete	ne
 8006668:	6560      	strne	r0, [r4, #84]	; 0x54
 800666a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800666e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006672:	81a3      	strheq	r3, [r4, #12]
 8006674:	bf18      	it	ne
 8006676:	81a3      	strhne	r3, [r4, #12]
 8006678:	bd10      	pop	{r4, pc}

0800667a <__sclose>:
 800667a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800667e:	f000 b81b 	b.w	80066b8 <_close_r>
	...

08006684 <_write_r>:
 8006684:	b538      	push	{r3, r4, r5, lr}
 8006686:	4604      	mov	r4, r0
 8006688:	4608      	mov	r0, r1
 800668a:	4611      	mov	r1, r2
 800668c:	2200      	movs	r2, #0
 800668e:	4d05      	ldr	r5, [pc, #20]	; (80066a4 <_write_r+0x20>)
 8006690:	602a      	str	r2, [r5, #0]
 8006692:	461a      	mov	r2, r3
 8006694:	f7fc f832 	bl	80026fc <_write>
 8006698:	1c43      	adds	r3, r0, #1
 800669a:	d102      	bne.n	80066a2 <_write_r+0x1e>
 800669c:	682b      	ldr	r3, [r5, #0]
 800669e:	b103      	cbz	r3, 80066a2 <_write_r+0x1e>
 80066a0:	6023      	str	r3, [r4, #0]
 80066a2:	bd38      	pop	{r3, r4, r5, pc}
 80066a4:	20000514 	.word	0x20000514

080066a8 <abort>:
 80066a8:	2006      	movs	r0, #6
 80066aa:	b508      	push	{r3, lr}
 80066ac:	f000 f89c 	bl	80067e8 <raise>
 80066b0:	2001      	movs	r0, #1
 80066b2:	f7fb fffc 	bl	80026ae <_exit>
	...

080066b8 <_close_r>:
 80066b8:	b538      	push	{r3, r4, r5, lr}
 80066ba:	2300      	movs	r3, #0
 80066bc:	4d05      	ldr	r5, [pc, #20]	; (80066d4 <_close_r+0x1c>)
 80066be:	4604      	mov	r4, r0
 80066c0:	4608      	mov	r0, r1
 80066c2:	602b      	str	r3, [r5, #0]
 80066c4:	f7fc f836 	bl	8002734 <_close>
 80066c8:	1c43      	adds	r3, r0, #1
 80066ca:	d102      	bne.n	80066d2 <_close_r+0x1a>
 80066cc:	682b      	ldr	r3, [r5, #0]
 80066ce:	b103      	cbz	r3, 80066d2 <_close_r+0x1a>
 80066d0:	6023      	str	r3, [r4, #0]
 80066d2:	bd38      	pop	{r3, r4, r5, pc}
 80066d4:	20000514 	.word	0x20000514

080066d8 <_fstat_r>:
 80066d8:	b538      	push	{r3, r4, r5, lr}
 80066da:	2300      	movs	r3, #0
 80066dc:	4d06      	ldr	r5, [pc, #24]	; (80066f8 <_fstat_r+0x20>)
 80066de:	4604      	mov	r4, r0
 80066e0:	4608      	mov	r0, r1
 80066e2:	4611      	mov	r1, r2
 80066e4:	602b      	str	r3, [r5, #0]
 80066e6:	f7fc f830 	bl	800274a <_fstat>
 80066ea:	1c43      	adds	r3, r0, #1
 80066ec:	d102      	bne.n	80066f4 <_fstat_r+0x1c>
 80066ee:	682b      	ldr	r3, [r5, #0]
 80066f0:	b103      	cbz	r3, 80066f4 <_fstat_r+0x1c>
 80066f2:	6023      	str	r3, [r4, #0]
 80066f4:	bd38      	pop	{r3, r4, r5, pc}
 80066f6:	bf00      	nop
 80066f8:	20000514 	.word	0x20000514

080066fc <_isatty_r>:
 80066fc:	b538      	push	{r3, r4, r5, lr}
 80066fe:	2300      	movs	r3, #0
 8006700:	4d05      	ldr	r5, [pc, #20]	; (8006718 <_isatty_r+0x1c>)
 8006702:	4604      	mov	r4, r0
 8006704:	4608      	mov	r0, r1
 8006706:	602b      	str	r3, [r5, #0]
 8006708:	f7fc f82e 	bl	8002768 <_isatty>
 800670c:	1c43      	adds	r3, r0, #1
 800670e:	d102      	bne.n	8006716 <_isatty_r+0x1a>
 8006710:	682b      	ldr	r3, [r5, #0]
 8006712:	b103      	cbz	r3, 8006716 <_isatty_r+0x1a>
 8006714:	6023      	str	r3, [r4, #0]
 8006716:	bd38      	pop	{r3, r4, r5, pc}
 8006718:	20000514 	.word	0x20000514

0800671c <_lseek_r>:
 800671c:	b538      	push	{r3, r4, r5, lr}
 800671e:	4604      	mov	r4, r0
 8006720:	4608      	mov	r0, r1
 8006722:	4611      	mov	r1, r2
 8006724:	2200      	movs	r2, #0
 8006726:	4d05      	ldr	r5, [pc, #20]	; (800673c <_lseek_r+0x20>)
 8006728:	602a      	str	r2, [r5, #0]
 800672a:	461a      	mov	r2, r3
 800672c:	f7fc f826 	bl	800277c <_lseek>
 8006730:	1c43      	adds	r3, r0, #1
 8006732:	d102      	bne.n	800673a <_lseek_r+0x1e>
 8006734:	682b      	ldr	r3, [r5, #0]
 8006736:	b103      	cbz	r3, 800673a <_lseek_r+0x1e>
 8006738:	6023      	str	r3, [r4, #0]
 800673a:	bd38      	pop	{r3, r4, r5, pc}
 800673c:	20000514 	.word	0x20000514

08006740 <memchr>:
 8006740:	4603      	mov	r3, r0
 8006742:	b510      	push	{r4, lr}
 8006744:	b2c9      	uxtb	r1, r1
 8006746:	4402      	add	r2, r0
 8006748:	4293      	cmp	r3, r2
 800674a:	4618      	mov	r0, r3
 800674c:	d101      	bne.n	8006752 <memchr+0x12>
 800674e:	2000      	movs	r0, #0
 8006750:	e003      	b.n	800675a <memchr+0x1a>
 8006752:	7804      	ldrb	r4, [r0, #0]
 8006754:	3301      	adds	r3, #1
 8006756:	428c      	cmp	r4, r1
 8006758:	d1f6      	bne.n	8006748 <memchr+0x8>
 800675a:	bd10      	pop	{r4, pc}

0800675c <__malloc_lock>:
 800675c:	4801      	ldr	r0, [pc, #4]	; (8006764 <__malloc_lock+0x8>)
 800675e:	f7ff bb03 	b.w	8005d68 <__retarget_lock_acquire_recursive>
 8006762:	bf00      	nop
 8006764:	20000508 	.word	0x20000508

08006768 <__malloc_unlock>:
 8006768:	4801      	ldr	r0, [pc, #4]	; (8006770 <__malloc_unlock+0x8>)
 800676a:	f7ff bafe 	b.w	8005d6a <__retarget_lock_release_recursive>
 800676e:	bf00      	nop
 8006770:	20000508 	.word	0x20000508

08006774 <_read_r>:
 8006774:	b538      	push	{r3, r4, r5, lr}
 8006776:	4604      	mov	r4, r0
 8006778:	4608      	mov	r0, r1
 800677a:	4611      	mov	r1, r2
 800677c:	2200      	movs	r2, #0
 800677e:	4d05      	ldr	r5, [pc, #20]	; (8006794 <_read_r+0x20>)
 8006780:	602a      	str	r2, [r5, #0]
 8006782:	461a      	mov	r2, r3
 8006784:	f7fb ff9d 	bl	80026c2 <_read>
 8006788:	1c43      	adds	r3, r0, #1
 800678a:	d102      	bne.n	8006792 <_read_r+0x1e>
 800678c:	682b      	ldr	r3, [r5, #0]
 800678e:	b103      	cbz	r3, 8006792 <_read_r+0x1e>
 8006790:	6023      	str	r3, [r4, #0]
 8006792:	bd38      	pop	{r3, r4, r5, pc}
 8006794:	20000514 	.word	0x20000514

08006798 <_raise_r>:
 8006798:	291f      	cmp	r1, #31
 800679a:	b538      	push	{r3, r4, r5, lr}
 800679c:	4604      	mov	r4, r0
 800679e:	460d      	mov	r5, r1
 80067a0:	d904      	bls.n	80067ac <_raise_r+0x14>
 80067a2:	2316      	movs	r3, #22
 80067a4:	6003      	str	r3, [r0, #0]
 80067a6:	f04f 30ff 	mov.w	r0, #4294967295
 80067aa:	bd38      	pop	{r3, r4, r5, pc}
 80067ac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80067ae:	b112      	cbz	r2, 80067b6 <_raise_r+0x1e>
 80067b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80067b4:	b94b      	cbnz	r3, 80067ca <_raise_r+0x32>
 80067b6:	4620      	mov	r0, r4
 80067b8:	f000 f830 	bl	800681c <_getpid_r>
 80067bc:	462a      	mov	r2, r5
 80067be:	4601      	mov	r1, r0
 80067c0:	4620      	mov	r0, r4
 80067c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80067c6:	f000 b817 	b.w	80067f8 <_kill_r>
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	d00a      	beq.n	80067e4 <_raise_r+0x4c>
 80067ce:	1c59      	adds	r1, r3, #1
 80067d0:	d103      	bne.n	80067da <_raise_r+0x42>
 80067d2:	2316      	movs	r3, #22
 80067d4:	6003      	str	r3, [r0, #0]
 80067d6:	2001      	movs	r0, #1
 80067d8:	e7e7      	b.n	80067aa <_raise_r+0x12>
 80067da:	2400      	movs	r4, #0
 80067dc:	4628      	mov	r0, r5
 80067de:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80067e2:	4798      	blx	r3
 80067e4:	2000      	movs	r0, #0
 80067e6:	e7e0      	b.n	80067aa <_raise_r+0x12>

080067e8 <raise>:
 80067e8:	4b02      	ldr	r3, [pc, #8]	; (80067f4 <raise+0xc>)
 80067ea:	4601      	mov	r1, r0
 80067ec:	6818      	ldr	r0, [r3, #0]
 80067ee:	f7ff bfd3 	b.w	8006798 <_raise_r>
 80067f2:	bf00      	nop
 80067f4:	20000010 	.word	0x20000010

080067f8 <_kill_r>:
 80067f8:	b538      	push	{r3, r4, r5, lr}
 80067fa:	2300      	movs	r3, #0
 80067fc:	4d06      	ldr	r5, [pc, #24]	; (8006818 <_kill_r+0x20>)
 80067fe:	4604      	mov	r4, r0
 8006800:	4608      	mov	r0, r1
 8006802:	4611      	mov	r1, r2
 8006804:	602b      	str	r3, [r5, #0]
 8006806:	f7fb ff42 	bl	800268e <_kill>
 800680a:	1c43      	adds	r3, r0, #1
 800680c:	d102      	bne.n	8006814 <_kill_r+0x1c>
 800680e:	682b      	ldr	r3, [r5, #0]
 8006810:	b103      	cbz	r3, 8006814 <_kill_r+0x1c>
 8006812:	6023      	str	r3, [r4, #0]
 8006814:	bd38      	pop	{r3, r4, r5, pc}
 8006816:	bf00      	nop
 8006818:	20000514 	.word	0x20000514

0800681c <_getpid_r>:
 800681c:	f7fb bf30 	b.w	8002680 <_getpid>

08006820 <_init>:
 8006820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006822:	bf00      	nop
 8006824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006826:	bc08      	pop	{r3}
 8006828:	469e      	mov	lr, r3
 800682a:	4770      	bx	lr

0800682c <_fini>:
 800682c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800682e:	bf00      	nop
 8006830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006832:	bc08      	pop	{r3}
 8006834:	469e      	mov	lr, r3
 8006836:	4770      	bx	lr
