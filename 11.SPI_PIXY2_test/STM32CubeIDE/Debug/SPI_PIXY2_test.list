
SPI_PIXY2_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000490c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  08004abc  08004abc  00014abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c18  08004c18  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004c18  08004c18  00014c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c20  08004c20  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c20  08004c20  00014c20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c24  08004c24  00014c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004c28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000000f8  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000168  20000168  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b983  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d95  00000000  00000000  0002ba23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009d0  00000000  00000000  0002d7b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000908  00000000  00000000  0002e188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024259  00000000  00000000  0002ea90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c15b  00000000  00000000  00052ce9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5037  00000000  00000000  0005ee44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00133e7b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000030c0  00000000  00000000  00133ecc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004aa4 	.word	0x08004aa4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08004aa4 	.word	0x08004aa4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch) {
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
	(void) HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, 100);
 800059c:	1d39      	adds	r1, r7, #4
 800059e:	2364      	movs	r3, #100	; 0x64
 80005a0:	2201      	movs	r2, #1
 80005a2:	4804      	ldr	r0, [pc, #16]	; (80005b4 <__io_putchar+0x20>)
 80005a4:	f002 f995 	bl	80028d2 <HAL_UART_Transmit>
	return ch;
 80005a8:	687b      	ldr	r3, [r7, #4]
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	3708      	adds	r7, #8
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	200000e4 	.word	0x200000e4

080005b8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005be:	f000 fb63 	bl	8000c88 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005c2:	f000 f843 	bl	800064c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005c6:	f000 f911 	bl	80007ec <MX_GPIO_Init>
	MX_SPI2_Init();
 80005ca:	f000 f8af 	bl	800072c <MX_SPI2_Init>
	MX_USART1_UART_Init();
 80005ce:	f000 f8e3 	bl	8000798 <MX_USART1_UART_Init>

	extern uint8_t numBlocks;
	extern uint8_t* m_buf;
	extern uint8_t* m_bufPayload;

	m_buf = (uint8_t*) malloc(PIXY_BUFFERSIZE);
 80005d2:	f44f 7082 	mov.w	r0, #260	; 0x104
 80005d6:	f003 f875 	bl	80036c4 <malloc>
 80005da:	4603      	mov	r3, r0
 80005dc:	461a      	mov	r2, r3
 80005de:	4b15      	ldr	r3, [pc, #84]	; (8000634 <main+0x7c>)
 80005e0:	601a      	str	r2, [r3, #0]
	m_bufPayload = m_buf + PIXY_SEND_HEADER_SIZE;
 80005e2:	4b14      	ldr	r3, [pc, #80]	; (8000634 <main+0x7c>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	3304      	adds	r3, #4
 80005e8:	4a13      	ldr	r2, [pc, #76]	; (8000638 <main+0x80>)
 80005ea:	6013      	str	r3, [r2, #0]

	pixy2_init(&hspi2,SPI_CS_GPIO_Port,SPI_CS_Pin);
 80005ec:	2202      	movs	r2, #2
 80005ee:	4913      	ldr	r1, [pc, #76]	; (800063c <main+0x84>)
 80005f0:	4813      	ldr	r0, [pc, #76]	; (8000640 <main+0x88>)
 80005f2:	f002 fecf 	bl	8003394 <pixy2_init>

	pixy2_printVersion();
 80005f6:	f002 ff07 	bl	8003408 <pixy2_printVersion>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		pixy2_getBlocks(true, CCC_SIG_ALL, 0xff);
 80005fa:	22ff      	movs	r2, #255	; 0xff
 80005fc:	21ff      	movs	r1, #255	; 0xff
 80005fe:	2001      	movs	r0, #1
 8000600:	f002 fe4e 	bl	80032a0 <pixy2_getBlocks>

		if (numBlocks) {
 8000604:	4b0f      	ldr	r3, [pc, #60]	; (8000644 <main+0x8c>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d0f6      	beq.n	80005fa <main+0x42>
			for (int i = 0; i < numBlocks; i++) {
 800060c:	2300      	movs	r3, #0
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	e005      	b.n	800061e <main+0x66>
				pixy2_printBlock(i);
 8000612:	6878      	ldr	r0, [r7, #4]
 8000614:	f002 ff24 	bl	8003460 <pixy2_printBlock>
			for (int i = 0; i < numBlocks; i++) {
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	3301      	adds	r3, #1
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	4b09      	ldr	r3, [pc, #36]	; (8000644 <main+0x8c>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	461a      	mov	r2, r3
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	4293      	cmp	r3, r2
 8000628:	dbf3      	blt.n	8000612 <main+0x5a>
			}
			printf("\r\n");
 800062a:	4807      	ldr	r0, [pc, #28]	; (8000648 <main+0x90>)
 800062c:	f003 f9c0 	bl	80039b0 <puts>
		pixy2_getBlocks(true, CCC_SIG_ALL, 0xff);
 8000630:	e7e3      	b.n	80005fa <main+0x42>
 8000632:	bf00      	nop
 8000634:	20000140 	.word	0x20000140
 8000638:	20000144 	.word	0x20000144
 800063c:	40020800 	.word	0x40020800
 8000640:	2000008c 	.word	0x2000008c
 8000644:	20000130 	.word	0x20000130
 8000648:	08004abc 	.word	0x08004abc

0800064c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b094      	sub	sp, #80	; 0x50
 8000650:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000652:	f107 0320 	add.w	r3, r7, #32
 8000656:	2230      	movs	r2, #48	; 0x30
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f003 f83a 	bl	80036d4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000660:	f107 030c 	add.w	r3, r7, #12
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000670:	2300      	movs	r3, #0
 8000672:	60bb      	str	r3, [r7, #8]
 8000674:	4b2b      	ldr	r3, [pc, #172]	; (8000724 <SystemClock_Config+0xd8>)
 8000676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000678:	4a2a      	ldr	r2, [pc, #168]	; (8000724 <SystemClock_Config+0xd8>)
 800067a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800067e:	6413      	str	r3, [r2, #64]	; 0x40
 8000680:	4b28      	ldr	r3, [pc, #160]	; (8000724 <SystemClock_Config+0xd8>)
 8000682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000684:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000688:	60bb      	str	r3, [r7, #8]
 800068a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800068c:	2300      	movs	r3, #0
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	4b25      	ldr	r3, [pc, #148]	; (8000728 <SystemClock_Config+0xdc>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a24      	ldr	r2, [pc, #144]	; (8000728 <SystemClock_Config+0xdc>)
 8000696:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800069a:	6013      	str	r3, [r2, #0]
 800069c:	4b22      	ldr	r3, [pc, #136]	; (8000728 <SystemClock_Config+0xdc>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006a4:	607b      	str	r3, [r7, #4]
 80006a6:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006a8:	2301      	movs	r3, #1
 80006aa:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006b0:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b2:	2302      	movs	r3, #2
 80006b4:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006ba:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 80006bc:	2304      	movs	r3, #4
 80006be:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 180;
 80006c0:	23b4      	movs	r3, #180	; 0xb4
 80006c2:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006c4:	2302      	movs	r3, #2
 80006c6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80006c8:	2304      	movs	r3, #4
 80006ca:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80006cc:	f107 0320 	add.w	r3, r7, #32
 80006d0:	4618      	mov	r0, r3
 80006d2:	f000 fe71 	bl	80013b8 <HAL_RCC_OscConfig>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0x94>
		Error_Handler();
 80006dc:	f000 f8eb 	bl	80008b6 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 80006e0:	f000 fe1a 	bl	8001318 <HAL_PWREx_EnableOverDrive>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0xa2>
		Error_Handler();
 80006ea:	f000 f8e4 	bl	80008b6 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80006ee:	230f      	movs	r3, #15
 80006f0:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f2:	2302      	movs	r3, #2
 80006f4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006fa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006fe:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000700:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000704:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8000706:	f107 030c 	add.w	r3, r7, #12
 800070a:	2105      	movs	r1, #5
 800070c:	4618      	mov	r0, r3
 800070e:	f001 f8cb 	bl	80018a8 <HAL_RCC_ClockConfig>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <SystemClock_Config+0xd0>
		Error_Handler();
 8000718:	f000 f8cd 	bl	80008b6 <Error_Handler>
	}
}
 800071c:	bf00      	nop
 800071e:	3750      	adds	r7, #80	; 0x50
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	40023800 	.word	0x40023800
 8000728:	40007000 	.word	0x40007000

0800072c <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8000730:	4b17      	ldr	r3, [pc, #92]	; (8000790 <MX_SPI2_Init+0x64>)
 8000732:	4a18      	ldr	r2, [pc, #96]	; (8000794 <MX_SPI2_Init+0x68>)
 8000734:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8000736:	4b16      	ldr	r3, [pc, #88]	; (8000790 <MX_SPI2_Init+0x64>)
 8000738:	f44f 7282 	mov.w	r2, #260	; 0x104
 800073c:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800073e:	4b14      	ldr	r3, [pc, #80]	; (8000790 <MX_SPI2_Init+0x64>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000744:	4b12      	ldr	r3, [pc, #72]	; (8000790 <MX_SPI2_Init+0x64>)
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800074a:	4b11      	ldr	r3, [pc, #68]	; (8000790 <MX_SPI2_Init+0x64>)
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000750:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <MX_SPI2_Init+0x64>)
 8000752:	2201      	movs	r2, #1
 8000754:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8000756:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <MX_SPI2_Init+0x64>)
 8000758:	f44f 7200 	mov.w	r2, #512	; 0x200
 800075c:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800075e:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <MX_SPI2_Init+0x64>)
 8000760:	2200      	movs	r2, #0
 8000762:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000764:	4b0a      	ldr	r3, [pc, #40]	; (8000790 <MX_SPI2_Init+0x64>)
 8000766:	2200      	movs	r2, #0
 8000768:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800076a:	4b09      	ldr	r3, [pc, #36]	; (8000790 <MX_SPI2_Init+0x64>)
 800076c:	2200      	movs	r2, #0
 800076e:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000770:	4b07      	ldr	r3, [pc, #28]	; (8000790 <MX_SPI2_Init+0x64>)
 8000772:	2200      	movs	r2, #0
 8000774:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 8000776:	4b06      	ldr	r3, [pc, #24]	; (8000790 <MX_SPI2_Init+0x64>)
 8000778:	220a      	movs	r2, #10
 800077a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 800077c:	4804      	ldr	r0, [pc, #16]	; (8000790 <MX_SPI2_Init+0x64>)
 800077e:	f001 fab3 	bl	8001ce8 <HAL_SPI_Init>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_SPI2_Init+0x60>
		Error_Handler();
 8000788:	f000 f895 	bl	80008b6 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 800078c:	bf00      	nop
 800078e:	bd80      	pop	{r7, pc}
 8000790:	2000008c 	.word	0x2000008c
 8000794:	40003800 	.word	0x40003800

08000798 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 800079c:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <MX_USART1_UART_Init+0x4c>)
 800079e:	4a12      	ldr	r2, [pc, #72]	; (80007e8 <MX_USART1_UART_Init+0x50>)
 80007a0:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80007a2:	4b10      	ldr	r3, [pc, #64]	; (80007e4 <MX_USART1_UART_Init+0x4c>)
 80007a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007a8:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007aa:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <MX_USART1_UART_Init+0x4c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80007b0:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <MX_USART1_UART_Init+0x4c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80007b6:	4b0b      	ldr	r3, [pc, #44]	; (80007e4 <MX_USART1_UART_Init+0x4c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80007bc:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <MX_USART1_UART_Init+0x4c>)
 80007be:	220c      	movs	r2, #12
 80007c0:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c2:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <MX_USART1_UART_Init+0x4c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c8:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <MX_USART1_UART_Init+0x4c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80007ce:	4805      	ldr	r0, [pc, #20]	; (80007e4 <MX_USART1_UART_Init+0x4c>)
 80007d0:	f002 f832 	bl	8002838 <HAL_UART_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_USART1_UART_Init+0x46>
		Error_Handler();
 80007da:	f000 f86c 	bl	80008b6 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	200000e4 	.word	0x200000e4
 80007e8:	40011000 	.word	0x40011000

080007ec <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b08a      	sub	sp, #40	; 0x28
 80007f0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80007f2:	f107 0314 	add.w	r3, r7, #20
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	60da      	str	r2, [r3, #12]
 8000800:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	613b      	str	r3, [r7, #16]
 8000806:	4b26      	ldr	r3, [pc, #152]	; (80008a0 <MX_GPIO_Init+0xb4>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a25      	ldr	r2, [pc, #148]	; (80008a0 <MX_GPIO_Init+0xb4>)
 800080c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b23      	ldr	r3, [pc, #140]	; (80008a0 <MX_GPIO_Init+0xb4>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800081a:	613b      	str	r3, [r7, #16]
 800081c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	60fb      	str	r3, [r7, #12]
 8000822:	4b1f      	ldr	r3, [pc, #124]	; (80008a0 <MX_GPIO_Init+0xb4>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a1e      	ldr	r2, [pc, #120]	; (80008a0 <MX_GPIO_Init+0xb4>)
 8000828:	f043 0304 	orr.w	r3, r3, #4
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b1c      	ldr	r3, [pc, #112]	; (80008a0 <MX_GPIO_Init+0xb4>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0304 	and.w	r3, r3, #4
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	60bb      	str	r3, [r7, #8]
 800083e:	4b18      	ldr	r3, [pc, #96]	; (80008a0 <MX_GPIO_Init+0xb4>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a17      	ldr	r2, [pc, #92]	; (80008a0 <MX_GPIO_Init+0xb4>)
 8000844:	f043 0302 	orr.w	r3, r3, #2
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b15      	ldr	r3, [pc, #84]	; (80008a0 <MX_GPIO_Init+0xb4>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0302 	and.w	r3, r3, #2
 8000852:	60bb      	str	r3, [r7, #8]
 8000854:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	607b      	str	r3, [r7, #4]
 800085a:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <MX_GPIO_Init+0xb4>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a10      	ldr	r2, [pc, #64]	; (80008a0 <MX_GPIO_Init+0xb4>)
 8000860:	f043 0301 	orr.w	r3, r3, #1
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <MX_GPIO_Init+0xb4>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f003 0301 	and.w	r3, r3, #1
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8000872:	2201      	movs	r2, #1
 8000874:	2102      	movs	r1, #2
 8000876:	480b      	ldr	r0, [pc, #44]	; (80008a4 <MX_GPIO_Init+0xb8>)
 8000878:	f000 fd34 	bl	80012e4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : SPI_CS_Pin */
	GPIO_InitStruct.Pin = SPI_CS_Pin;
 800087c:	2302      	movs	r3, #2
 800087e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000880:	2301      	movs	r3, #1
 8000882:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000884:	2301      	movs	r3, #1
 8000886:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000888:	2302      	movs	r3, #2
 800088a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 800088c:	f107 0314 	add.w	r3, r7, #20
 8000890:	4619      	mov	r1, r3
 8000892:	4804      	ldr	r0, [pc, #16]	; (80008a4 <MX_GPIO_Init+0xb8>)
 8000894:	f000 fb7a 	bl	8000f8c <HAL_GPIO_Init>

}
 8000898:	bf00      	nop
 800089a:	3728      	adds	r7, #40	; 0x28
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	40023800 	.word	0x40023800
 80008a4:	40020800 	.word	0x40020800

080008a8 <HAL_SYSTICK_Callback>:

/* USER CODE BEGIN 4 */

void HAL_SYSTICK_Callback(void) {
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0

}
 80008ac:	bf00      	nop
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr

080008b6 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80008b6:	b480      	push	{r7}
 80008b8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008ba:	b672      	cpsid	i
}
 80008bc:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80008be:	e7fe      	b.n	80008be <Error_Handler+0x8>

080008c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	607b      	str	r3, [r7, #4]
 80008ca:	4b10      	ldr	r3, [pc, #64]	; (800090c <HAL_MspInit+0x4c>)
 80008cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ce:	4a0f      	ldr	r2, [pc, #60]	; (800090c <HAL_MspInit+0x4c>)
 80008d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008d4:	6453      	str	r3, [r2, #68]	; 0x44
 80008d6:	4b0d      	ldr	r3, [pc, #52]	; (800090c <HAL_MspInit+0x4c>)
 80008d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	603b      	str	r3, [r7, #0]
 80008e6:	4b09      	ldr	r3, [pc, #36]	; (800090c <HAL_MspInit+0x4c>)
 80008e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ea:	4a08      	ldr	r2, [pc, #32]	; (800090c <HAL_MspInit+0x4c>)
 80008ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f0:	6413      	str	r3, [r2, #64]	; 0x40
 80008f2:	4b06      	ldr	r3, [pc, #24]	; (800090c <HAL_MspInit+0x4c>)
 80008f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008fa:	603b      	str	r3, [r7, #0]
 80008fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008fe:	bf00      	nop
 8000900:	370c      	adds	r7, #12
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	40023800 	.word	0x40023800

08000910 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b08a      	sub	sp, #40	; 0x28
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000918:	f107 0314 	add.w	r3, r7, #20
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]
 8000926:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a28      	ldr	r2, [pc, #160]	; (80009d0 <HAL_SPI_MspInit+0xc0>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d14a      	bne.n	80009c8 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	613b      	str	r3, [r7, #16]
 8000936:	4b27      	ldr	r3, [pc, #156]	; (80009d4 <HAL_SPI_MspInit+0xc4>)
 8000938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093a:	4a26      	ldr	r2, [pc, #152]	; (80009d4 <HAL_SPI_MspInit+0xc4>)
 800093c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000940:	6413      	str	r3, [r2, #64]	; 0x40
 8000942:	4b24      	ldr	r3, [pc, #144]	; (80009d4 <HAL_SPI_MspInit+0xc4>)
 8000944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000946:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800094a:	613b      	str	r3, [r7, #16]
 800094c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	4b20      	ldr	r3, [pc, #128]	; (80009d4 <HAL_SPI_MspInit+0xc4>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4a1f      	ldr	r2, [pc, #124]	; (80009d4 <HAL_SPI_MspInit+0xc4>)
 8000958:	f043 0304 	orr.w	r3, r3, #4
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	4b1d      	ldr	r3, [pc, #116]	; (80009d4 <HAL_SPI_MspInit+0xc4>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	f003 0304 	and.w	r3, r3, #4
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	60bb      	str	r3, [r7, #8]
 800096e:	4b19      	ldr	r3, [pc, #100]	; (80009d4 <HAL_SPI_MspInit+0xc4>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	4a18      	ldr	r2, [pc, #96]	; (80009d4 <HAL_SPI_MspInit+0xc4>)
 8000974:	f043 0302 	orr.w	r3, r3, #2
 8000978:	6313      	str	r3, [r2, #48]	; 0x30
 800097a:	4b16      	ldr	r3, [pc, #88]	; (80009d4 <HAL_SPI_MspInit+0xc4>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	f003 0302 	and.w	r3, r3, #2
 8000982:	60bb      	str	r3, [r7, #8]
 8000984:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000986:	230c      	movs	r3, #12
 8000988:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098a:	2302      	movs	r3, #2
 800098c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000992:	2303      	movs	r3, #3
 8000994:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000996:	2305      	movs	r3, #5
 8000998:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800099a:	f107 0314 	add.w	r3, r7, #20
 800099e:	4619      	mov	r1, r3
 80009a0:	480d      	ldr	r0, [pc, #52]	; (80009d8 <HAL_SPI_MspInit+0xc8>)
 80009a2:	f000 faf3 	bl	8000f8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ac:	2302      	movs	r3, #2
 80009ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b4:	2303      	movs	r3, #3
 80009b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009b8:	2305      	movs	r3, #5
 80009ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009bc:	f107 0314 	add.w	r3, r7, #20
 80009c0:	4619      	mov	r1, r3
 80009c2:	4806      	ldr	r0, [pc, #24]	; (80009dc <HAL_SPI_MspInit+0xcc>)
 80009c4:	f000 fae2 	bl	8000f8c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80009c8:	bf00      	nop
 80009ca:	3728      	adds	r7, #40	; 0x28
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	40003800 	.word	0x40003800
 80009d4:	40023800 	.word	0x40023800
 80009d8:	40020800 	.word	0x40020800
 80009dc:	40020400 	.word	0x40020400

080009e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08a      	sub	sp, #40	; 0x28
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e8:	f107 0314 	add.w	r3, r7, #20
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
 80009f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a19      	ldr	r2, [pc, #100]	; (8000a64 <HAL_UART_MspInit+0x84>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d12c      	bne.n	8000a5c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	613b      	str	r3, [r7, #16]
 8000a06:	4b18      	ldr	r3, [pc, #96]	; (8000a68 <HAL_UART_MspInit+0x88>)
 8000a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0a:	4a17      	ldr	r2, [pc, #92]	; (8000a68 <HAL_UART_MspInit+0x88>)
 8000a0c:	f043 0310 	orr.w	r3, r3, #16
 8000a10:	6453      	str	r3, [r2, #68]	; 0x44
 8000a12:	4b15      	ldr	r3, [pc, #84]	; (8000a68 <HAL_UART_MspInit+0x88>)
 8000a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a16:	f003 0310 	and.w	r3, r3, #16
 8000a1a:	613b      	str	r3, [r7, #16]
 8000a1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	60fb      	str	r3, [r7, #12]
 8000a22:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <HAL_UART_MspInit+0x88>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a10      	ldr	r2, [pc, #64]	; (8000a68 <HAL_UART_MspInit+0x88>)
 8000a28:	f043 0301 	orr.w	r3, r3, #1
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <HAL_UART_MspInit+0x88>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0301 	and.w	r3, r3, #1
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a3a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a40:	2302      	movs	r3, #2
 8000a42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a48:	2303      	movs	r3, #3
 8000a4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a4c:	2307      	movs	r3, #7
 8000a4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	4619      	mov	r1, r3
 8000a56:	4805      	ldr	r0, [pc, #20]	; (8000a6c <HAL_UART_MspInit+0x8c>)
 8000a58:	f000 fa98 	bl	8000f8c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a5c:	bf00      	nop
 8000a5e:	3728      	adds	r7, #40	; 0x28
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	40011000 	.word	0x40011000
 8000a68:	40023800 	.word	0x40023800
 8000a6c:	40020000 	.word	0x40020000

08000a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <NMI_Handler+0x4>

08000a76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a7a:	e7fe      	b.n	8000a7a <HardFault_Handler+0x4>

08000a7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <MemManage_Handler+0x4>

08000a82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a86:	e7fe      	b.n	8000a86 <BusFault_Handler+0x4>

08000a88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <UsageFault_Handler+0x4>

08000a8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr

08000a9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aa0:	bf00      	nop
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr

08000aaa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr

08000ab8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000abc:	f000 f936 	bl	8000d2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8000ac0:	f000 fa5d 	bl	8000f7e <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8000ac4:	bf00      	nop
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b086      	sub	sp, #24
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	60f8      	str	r0, [r7, #12]
 8000ad0:	60b9      	str	r1, [r7, #8]
 8000ad2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	617b      	str	r3, [r7, #20]
 8000ad8:	e00a      	b.n	8000af0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ada:	f3af 8000 	nop.w
 8000ade:	4601      	mov	r1, r0
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	1c5a      	adds	r2, r3, #1
 8000ae4:	60ba      	str	r2, [r7, #8]
 8000ae6:	b2ca      	uxtb	r2, r1
 8000ae8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	3301      	adds	r3, #1
 8000aee:	617b      	str	r3, [r7, #20]
 8000af0:	697a      	ldr	r2, [r7, #20]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	429a      	cmp	r2, r3
 8000af6:	dbf0      	blt.n	8000ada <_read+0x12>
  }

  return len;
 8000af8:	687b      	ldr	r3, [r7, #4]
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3718      	adds	r7, #24
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}

08000b02 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b02:	b580      	push	{r7, lr}
 8000b04:	b086      	sub	sp, #24
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	60f8      	str	r0, [r7, #12]
 8000b0a:	60b9      	str	r1, [r7, #8]
 8000b0c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b0e:	2300      	movs	r3, #0
 8000b10:	617b      	str	r3, [r7, #20]
 8000b12:	e009      	b.n	8000b28 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	1c5a      	adds	r2, r3, #1
 8000b18:	60ba      	str	r2, [r7, #8]
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f7ff fd39 	bl	8000594 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	3301      	adds	r3, #1
 8000b26:	617b      	str	r3, [r7, #20]
 8000b28:	697a      	ldr	r2, [r7, #20]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	dbf1      	blt.n	8000b14 <_write+0x12>
  }
  return len;
 8000b30:	687b      	ldr	r3, [r7, #4]
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3718      	adds	r7, #24
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <_close>:

int _close(int file)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	b083      	sub	sp, #12
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	370c      	adds	r7, #12
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr

08000b52 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b52:	b480      	push	{r7}
 8000b54:	b083      	sub	sp, #12
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
 8000b5a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b62:	605a      	str	r2, [r3, #4]
  return 0;
 8000b64:	2300      	movs	r3, #0
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	370c      	adds	r7, #12
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr

08000b72 <_isatty>:

int _isatty(int file)
{
 8000b72:	b480      	push	{r7}
 8000b74:	b083      	sub	sp, #12
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b7a:	2301      	movs	r3, #1
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	370c      	adds	r7, #12
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr

08000b88 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b085      	sub	sp, #20
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	60f8      	str	r0, [r7, #12]
 8000b90:	60b9      	str	r1, [r7, #8]
 8000b92:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b94:	2300      	movs	r3, #0
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3714      	adds	r7, #20
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
	...

08000ba4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b086      	sub	sp, #24
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bac:	4a14      	ldr	r2, [pc, #80]	; (8000c00 <_sbrk+0x5c>)
 8000bae:	4b15      	ldr	r3, [pc, #84]	; (8000c04 <_sbrk+0x60>)
 8000bb0:	1ad3      	subs	r3, r2, r3
 8000bb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bb8:	4b13      	ldr	r3, [pc, #76]	; (8000c08 <_sbrk+0x64>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d102      	bne.n	8000bc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bc0:	4b11      	ldr	r3, [pc, #68]	; (8000c08 <_sbrk+0x64>)
 8000bc2:	4a12      	ldr	r2, [pc, #72]	; (8000c0c <_sbrk+0x68>)
 8000bc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bc6:	4b10      	ldr	r3, [pc, #64]	; (8000c08 <_sbrk+0x64>)
 8000bc8:	681a      	ldr	r2, [r3, #0]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	4413      	add	r3, r2
 8000bce:	693a      	ldr	r2, [r7, #16]
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	d207      	bcs.n	8000be4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bd4:	f002 fd4c 	bl	8003670 <__errno>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	220c      	movs	r2, #12
 8000bdc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bde:	f04f 33ff 	mov.w	r3, #4294967295
 8000be2:	e009      	b.n	8000bf8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000be4:	4b08      	ldr	r3, [pc, #32]	; (8000c08 <_sbrk+0x64>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bea:	4b07      	ldr	r3, [pc, #28]	; (8000c08 <_sbrk+0x64>)
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	4a05      	ldr	r2, [pc, #20]	; (8000c08 <_sbrk+0x64>)
 8000bf4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bf6:	68fb      	ldr	r3, [r7, #12]
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	3718      	adds	r7, #24
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	20030000 	.word	0x20030000
 8000c04:	00000400 	.word	0x00000400
 8000c08:	20000128 	.word	0x20000128
 8000c0c:	20000168 	.word	0x20000168

08000c10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000c10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c48 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c14:	480d      	ldr	r0, [pc, #52]	; (8000c4c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c16:	490e      	ldr	r1, [pc, #56]	; (8000c50 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c18:	4a0e      	ldr	r2, [pc, #56]	; (8000c54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c1c:	e002      	b.n	8000c24 <LoopCopyDataInit>

08000c1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c22:	3304      	adds	r3, #4

08000c24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c28:	d3f9      	bcc.n	8000c1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c2a:	4a0b      	ldr	r2, [pc, #44]	; (8000c58 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c2c:	4c0b      	ldr	r4, [pc, #44]	; (8000c5c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c30:	e001      	b.n	8000c36 <LoopFillZerobss>

08000c32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c34:	3204      	adds	r2, #4

08000c36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c38:	d3fb      	bcc.n	8000c32 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c3a:	f000 f813 	bl	8000c64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c3e:	f002 fd1d 	bl	800367c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c42:	f7ff fcb9 	bl	80005b8 <main>
  bx  lr    
 8000c46:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000c48:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000c4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c50:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c54:	08004c28 	.word	0x08004c28
  ldr r2, =_sbss
 8000c58:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c5c:	20000168 	.word	0x20000168

08000c60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c60:	e7fe      	b.n	8000c60 <ADC_IRQHandler>
	...

08000c64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c68:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <SystemInit+0x20>)
 8000c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c6e:	4a05      	ldr	r2, [pc, #20]	; (8000c84 <SystemInit+0x20>)
 8000c70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	e000ed00 	.word	0xe000ed00

08000c88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c8c:	4b0e      	ldr	r3, [pc, #56]	; (8000cc8 <HAL_Init+0x40>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a0d      	ldr	r2, [pc, #52]	; (8000cc8 <HAL_Init+0x40>)
 8000c92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c98:	4b0b      	ldr	r3, [pc, #44]	; (8000cc8 <HAL_Init+0x40>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a0a      	ldr	r2, [pc, #40]	; (8000cc8 <HAL_Init+0x40>)
 8000c9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ca2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ca4:	4b08      	ldr	r3, [pc, #32]	; (8000cc8 <HAL_Init+0x40>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a07      	ldr	r2, [pc, #28]	; (8000cc8 <HAL_Init+0x40>)
 8000caa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb0:	2003      	movs	r0, #3
 8000cb2:	f000 f931 	bl	8000f18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cb6:	200f      	movs	r0, #15
 8000cb8:	f000 f808 	bl	8000ccc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cbc:	f7ff fe00 	bl	80008c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cc0:	2300      	movs	r3, #0
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40023c00 	.word	0x40023c00

08000ccc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cd4:	4b12      	ldr	r3, [pc, #72]	; (8000d20 <HAL_InitTick+0x54>)
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	4b12      	ldr	r3, [pc, #72]	; (8000d24 <HAL_InitTick+0x58>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	4619      	mov	r1, r3
 8000cde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ce2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cea:	4618      	mov	r0, r3
 8000cec:	f000 f93b 	bl	8000f66 <HAL_SYSTICK_Config>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	e00e      	b.n	8000d18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2b0f      	cmp	r3, #15
 8000cfe:	d80a      	bhi.n	8000d16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d00:	2200      	movs	r2, #0
 8000d02:	6879      	ldr	r1, [r7, #4]
 8000d04:	f04f 30ff 	mov.w	r0, #4294967295
 8000d08:	f000 f911 	bl	8000f2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d0c:	4a06      	ldr	r2, [pc, #24]	; (8000d28 <HAL_InitTick+0x5c>)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d12:	2300      	movs	r3, #0
 8000d14:	e000      	b.n	8000d18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d16:	2301      	movs	r3, #1
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	20000000 	.word	0x20000000
 8000d24:	20000008 	.word	0x20000008
 8000d28:	20000004 	.word	0x20000004

08000d2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d30:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <HAL_IncTick+0x20>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	461a      	mov	r2, r3
 8000d36:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <HAL_IncTick+0x24>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	4a04      	ldr	r2, [pc, #16]	; (8000d50 <HAL_IncTick+0x24>)
 8000d3e:	6013      	str	r3, [r2, #0]
}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	20000008 	.word	0x20000008
 8000d50:	2000012c 	.word	0x2000012c

08000d54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  return uwTick;
 8000d58:	4b03      	ldr	r3, [pc, #12]	; (8000d68 <HAL_GetTick+0x14>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	2000012c 	.word	0x2000012c

08000d6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d74:	f7ff ffee 	bl	8000d54 <HAL_GetTick>
 8000d78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d84:	d005      	beq.n	8000d92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d86:	4b0a      	ldr	r3, [pc, #40]	; (8000db0 <HAL_Delay+0x44>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	4413      	add	r3, r2
 8000d90:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d92:	bf00      	nop
 8000d94:	f7ff ffde 	bl	8000d54 <HAL_GetTick>
 8000d98:	4602      	mov	r2, r0
 8000d9a:	68bb      	ldr	r3, [r7, #8]
 8000d9c:	1ad3      	subs	r3, r2, r3
 8000d9e:	68fa      	ldr	r2, [r7, #12]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	d8f7      	bhi.n	8000d94 <HAL_Delay+0x28>
  {
  }
}
 8000da4:	bf00      	nop
 8000da6:	bf00      	nop
 8000da8:	3710      	adds	r7, #16
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	20000008 	.word	0x20000008

08000db4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b085      	sub	sp, #20
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	f003 0307 	and.w	r3, r3, #7
 8000dc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dc4:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <__NVIC_SetPriorityGrouping+0x44>)
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dca:	68ba      	ldr	r2, [r7, #8]
 8000dcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ddc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000de0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000de4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000de6:	4a04      	ldr	r2, [pc, #16]	; (8000df8 <__NVIC_SetPriorityGrouping+0x44>)
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	60d3      	str	r3, [r2, #12]
}
 8000dec:	bf00      	nop
 8000dee:	3714      	adds	r7, #20
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e00:	4b04      	ldr	r3, [pc, #16]	; (8000e14 <__NVIC_GetPriorityGrouping+0x18>)
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	0a1b      	lsrs	r3, r3, #8
 8000e06:	f003 0307 	and.w	r3, r3, #7
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	e000ed00 	.word	0xe000ed00

08000e18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	6039      	str	r1, [r7, #0]
 8000e22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	db0a      	blt.n	8000e42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	b2da      	uxtb	r2, r3
 8000e30:	490c      	ldr	r1, [pc, #48]	; (8000e64 <__NVIC_SetPriority+0x4c>)
 8000e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e36:	0112      	lsls	r2, r2, #4
 8000e38:	b2d2      	uxtb	r2, r2
 8000e3a:	440b      	add	r3, r1
 8000e3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e40:	e00a      	b.n	8000e58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	b2da      	uxtb	r2, r3
 8000e46:	4908      	ldr	r1, [pc, #32]	; (8000e68 <__NVIC_SetPriority+0x50>)
 8000e48:	79fb      	ldrb	r3, [r7, #7]
 8000e4a:	f003 030f 	and.w	r3, r3, #15
 8000e4e:	3b04      	subs	r3, #4
 8000e50:	0112      	lsls	r2, r2, #4
 8000e52:	b2d2      	uxtb	r2, r2
 8000e54:	440b      	add	r3, r1
 8000e56:	761a      	strb	r2, [r3, #24]
}
 8000e58:	bf00      	nop
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	e000e100 	.word	0xe000e100
 8000e68:	e000ed00 	.word	0xe000ed00

08000e6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b089      	sub	sp, #36	; 0x24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	60f8      	str	r0, [r7, #12]
 8000e74:	60b9      	str	r1, [r7, #8]
 8000e76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	f003 0307 	and.w	r3, r3, #7
 8000e7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	f1c3 0307 	rsb	r3, r3, #7
 8000e86:	2b04      	cmp	r3, #4
 8000e88:	bf28      	it	cs
 8000e8a:	2304      	movcs	r3, #4
 8000e8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	3304      	adds	r3, #4
 8000e92:	2b06      	cmp	r3, #6
 8000e94:	d902      	bls.n	8000e9c <NVIC_EncodePriority+0x30>
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	3b03      	subs	r3, #3
 8000e9a:	e000      	b.n	8000e9e <NVIC_EncodePriority+0x32>
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ea4:	69bb      	ldr	r3, [r7, #24]
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	43da      	mvns	r2, r3
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	401a      	ands	r2, r3
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	fa01 f303 	lsl.w	r3, r1, r3
 8000ebe:	43d9      	mvns	r1, r3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec4:	4313      	orrs	r3, r2
         );
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3724      	adds	r7, #36	; 0x24
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
	...

08000ed4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	3b01      	subs	r3, #1
 8000ee0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ee4:	d301      	bcc.n	8000eea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e00f      	b.n	8000f0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eea:	4a0a      	ldr	r2, [pc, #40]	; (8000f14 <SysTick_Config+0x40>)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	3b01      	subs	r3, #1
 8000ef0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ef2:	210f      	movs	r1, #15
 8000ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef8:	f7ff ff8e 	bl	8000e18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000efc:	4b05      	ldr	r3, [pc, #20]	; (8000f14 <SysTick_Config+0x40>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f02:	4b04      	ldr	r3, [pc, #16]	; (8000f14 <SysTick_Config+0x40>)
 8000f04:	2207      	movs	r2, #7
 8000f06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f08:	2300      	movs	r3, #0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	e000e010 	.word	0xe000e010

08000f18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f7ff ff47 	bl	8000db4 <__NVIC_SetPriorityGrouping>
}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b086      	sub	sp, #24
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	4603      	mov	r3, r0
 8000f36:	60b9      	str	r1, [r7, #8]
 8000f38:	607a      	str	r2, [r7, #4]
 8000f3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f40:	f7ff ff5c 	bl	8000dfc <__NVIC_GetPriorityGrouping>
 8000f44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f46:	687a      	ldr	r2, [r7, #4]
 8000f48:	68b9      	ldr	r1, [r7, #8]
 8000f4a:	6978      	ldr	r0, [r7, #20]
 8000f4c:	f7ff ff8e 	bl	8000e6c <NVIC_EncodePriority>
 8000f50:	4602      	mov	r2, r0
 8000f52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f56:	4611      	mov	r1, r2
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff ff5d 	bl	8000e18 <__NVIC_SetPriority>
}
 8000f5e:	bf00      	nop
 8000f60:	3718      	adds	r7, #24
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b082      	sub	sp, #8
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f7ff ffb0 	bl	8000ed4 <SysTick_Config>
 8000f74:	4603      	mov	r3, r0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000f82:	f7ff fc91 	bl	80008a8 <HAL_SYSTICK_Callback>
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
	...

08000f8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b089      	sub	sp, #36	; 0x24
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f96:	2300      	movs	r3, #0
 8000f98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61fb      	str	r3, [r7, #28]
 8000fa6:	e177      	b.n	8001298 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fa8:	2201      	movs	r2, #1
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	697a      	ldr	r2, [r7, #20]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fbc:	693a      	ldr	r2, [r7, #16]
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	f040 8166 	bne.w	8001292 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f003 0303 	and.w	r3, r3, #3
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d005      	beq.n	8000fde <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fda:	2b02      	cmp	r3, #2
 8000fdc:	d130      	bne.n	8001040 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	2203      	movs	r2, #3
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	68da      	ldr	r2, [r3, #12]
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	4313      	orrs	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001014:	2201      	movs	r2, #1
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	43db      	mvns	r3, r3
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	4013      	ands	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	091b      	lsrs	r3, r3, #4
 800102a:	f003 0201 	and.w	r2, r3, #1
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	4313      	orrs	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f003 0303 	and.w	r3, r3, #3
 8001048:	2b03      	cmp	r3, #3
 800104a:	d017      	beq.n	800107c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	2203      	movs	r2, #3
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	43db      	mvns	r3, r3
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	4013      	ands	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	689a      	ldr	r2, [r3, #8]
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	4313      	orrs	r3, r2
 8001074:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f003 0303 	and.w	r3, r3, #3
 8001084:	2b02      	cmp	r3, #2
 8001086:	d123      	bne.n	80010d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	08da      	lsrs	r2, r3, #3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3208      	adds	r2, #8
 8001090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001094:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	f003 0307 	and.w	r3, r3, #7
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	220f      	movs	r2, #15
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	43db      	mvns	r3, r3
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	4013      	ands	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	691a      	ldr	r2, [r3, #16]
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	f003 0307 	and.w	r3, r3, #7
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4313      	orrs	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	08da      	lsrs	r2, r3, #3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	3208      	adds	r2, #8
 80010ca:	69b9      	ldr	r1, [r7, #24]
 80010cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	2203      	movs	r2, #3
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	43db      	mvns	r3, r3
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	4013      	ands	r3, r2
 80010e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f003 0203 	and.w	r2, r3, #3
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800110c:	2b00      	cmp	r3, #0
 800110e:	f000 80c0 	beq.w	8001292 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	4b66      	ldr	r3, [pc, #408]	; (80012b0 <HAL_GPIO_Init+0x324>)
 8001118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111a:	4a65      	ldr	r2, [pc, #404]	; (80012b0 <HAL_GPIO_Init+0x324>)
 800111c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001120:	6453      	str	r3, [r2, #68]	; 0x44
 8001122:	4b63      	ldr	r3, [pc, #396]	; (80012b0 <HAL_GPIO_Init+0x324>)
 8001124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001126:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800112e:	4a61      	ldr	r2, [pc, #388]	; (80012b4 <HAL_GPIO_Init+0x328>)
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	089b      	lsrs	r3, r3, #2
 8001134:	3302      	adds	r3, #2
 8001136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800113a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	f003 0303 	and.w	r3, r3, #3
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	220f      	movs	r2, #15
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	43db      	mvns	r3, r3
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	4013      	ands	r3, r2
 8001150:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a58      	ldr	r2, [pc, #352]	; (80012b8 <HAL_GPIO_Init+0x32c>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d037      	beq.n	80011ca <HAL_GPIO_Init+0x23e>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a57      	ldr	r2, [pc, #348]	; (80012bc <HAL_GPIO_Init+0x330>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d031      	beq.n	80011c6 <HAL_GPIO_Init+0x23a>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a56      	ldr	r2, [pc, #344]	; (80012c0 <HAL_GPIO_Init+0x334>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d02b      	beq.n	80011c2 <HAL_GPIO_Init+0x236>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a55      	ldr	r2, [pc, #340]	; (80012c4 <HAL_GPIO_Init+0x338>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d025      	beq.n	80011be <HAL_GPIO_Init+0x232>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a54      	ldr	r2, [pc, #336]	; (80012c8 <HAL_GPIO_Init+0x33c>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d01f      	beq.n	80011ba <HAL_GPIO_Init+0x22e>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a53      	ldr	r2, [pc, #332]	; (80012cc <HAL_GPIO_Init+0x340>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d019      	beq.n	80011b6 <HAL_GPIO_Init+0x22a>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a52      	ldr	r2, [pc, #328]	; (80012d0 <HAL_GPIO_Init+0x344>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d013      	beq.n	80011b2 <HAL_GPIO_Init+0x226>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a51      	ldr	r2, [pc, #324]	; (80012d4 <HAL_GPIO_Init+0x348>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d00d      	beq.n	80011ae <HAL_GPIO_Init+0x222>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a50      	ldr	r2, [pc, #320]	; (80012d8 <HAL_GPIO_Init+0x34c>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d007      	beq.n	80011aa <HAL_GPIO_Init+0x21e>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a4f      	ldr	r2, [pc, #316]	; (80012dc <HAL_GPIO_Init+0x350>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d101      	bne.n	80011a6 <HAL_GPIO_Init+0x21a>
 80011a2:	2309      	movs	r3, #9
 80011a4:	e012      	b.n	80011cc <HAL_GPIO_Init+0x240>
 80011a6:	230a      	movs	r3, #10
 80011a8:	e010      	b.n	80011cc <HAL_GPIO_Init+0x240>
 80011aa:	2308      	movs	r3, #8
 80011ac:	e00e      	b.n	80011cc <HAL_GPIO_Init+0x240>
 80011ae:	2307      	movs	r3, #7
 80011b0:	e00c      	b.n	80011cc <HAL_GPIO_Init+0x240>
 80011b2:	2306      	movs	r3, #6
 80011b4:	e00a      	b.n	80011cc <HAL_GPIO_Init+0x240>
 80011b6:	2305      	movs	r3, #5
 80011b8:	e008      	b.n	80011cc <HAL_GPIO_Init+0x240>
 80011ba:	2304      	movs	r3, #4
 80011bc:	e006      	b.n	80011cc <HAL_GPIO_Init+0x240>
 80011be:	2303      	movs	r3, #3
 80011c0:	e004      	b.n	80011cc <HAL_GPIO_Init+0x240>
 80011c2:	2302      	movs	r3, #2
 80011c4:	e002      	b.n	80011cc <HAL_GPIO_Init+0x240>
 80011c6:	2301      	movs	r3, #1
 80011c8:	e000      	b.n	80011cc <HAL_GPIO_Init+0x240>
 80011ca:	2300      	movs	r3, #0
 80011cc:	69fa      	ldr	r2, [r7, #28]
 80011ce:	f002 0203 	and.w	r2, r2, #3
 80011d2:	0092      	lsls	r2, r2, #2
 80011d4:	4093      	lsls	r3, r2
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	4313      	orrs	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011dc:	4935      	ldr	r1, [pc, #212]	; (80012b4 <HAL_GPIO_Init+0x328>)
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	089b      	lsrs	r3, r3, #2
 80011e2:	3302      	adds	r3, #2
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011ea:	4b3d      	ldr	r3, [pc, #244]	; (80012e0 <HAL_GPIO_Init+0x354>)
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	43db      	mvns	r3, r3
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	4013      	ands	r3, r2
 80011f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d003      	beq.n	800120e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	4313      	orrs	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800120e:	4a34      	ldr	r2, [pc, #208]	; (80012e0 <HAL_GPIO_Init+0x354>)
 8001210:	69bb      	ldr	r3, [r7, #24]
 8001212:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001214:	4b32      	ldr	r3, [pc, #200]	; (80012e0 <HAL_GPIO_Init+0x354>)
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	43db      	mvns	r3, r3
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	4013      	ands	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800122c:	2b00      	cmp	r3, #0
 800122e:	d003      	beq.n	8001238 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	4313      	orrs	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001238:	4a29      	ldr	r2, [pc, #164]	; (80012e0 <HAL_GPIO_Init+0x354>)
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800123e:	4b28      	ldr	r3, [pc, #160]	; (80012e0 <HAL_GPIO_Init+0x354>)
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	43db      	mvns	r3, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4013      	ands	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d003      	beq.n	8001262 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	4313      	orrs	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001262:	4a1f      	ldr	r2, [pc, #124]	; (80012e0 <HAL_GPIO_Init+0x354>)
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001268:	4b1d      	ldr	r3, [pc, #116]	; (80012e0 <HAL_GPIO_Init+0x354>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	43db      	mvns	r3, r3
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	4013      	ands	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001280:	2b00      	cmp	r3, #0
 8001282:	d003      	beq.n	800128c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	4313      	orrs	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800128c:	4a14      	ldr	r2, [pc, #80]	; (80012e0 <HAL_GPIO_Init+0x354>)
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	3301      	adds	r3, #1
 8001296:	61fb      	str	r3, [r7, #28]
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	2b0f      	cmp	r3, #15
 800129c:	f67f ae84 	bls.w	8000fa8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012a0:	bf00      	nop
 80012a2:	bf00      	nop
 80012a4:	3724      	adds	r7, #36	; 0x24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	40023800 	.word	0x40023800
 80012b4:	40013800 	.word	0x40013800
 80012b8:	40020000 	.word	0x40020000
 80012bc:	40020400 	.word	0x40020400
 80012c0:	40020800 	.word	0x40020800
 80012c4:	40020c00 	.word	0x40020c00
 80012c8:	40021000 	.word	0x40021000
 80012cc:	40021400 	.word	0x40021400
 80012d0:	40021800 	.word	0x40021800
 80012d4:	40021c00 	.word	0x40021c00
 80012d8:	40022000 	.word	0x40022000
 80012dc:	40022400 	.word	0x40022400
 80012e0:	40013c00 	.word	0x40013c00

080012e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	460b      	mov	r3, r1
 80012ee:	807b      	strh	r3, [r7, #2]
 80012f0:	4613      	mov	r3, r2
 80012f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012f4:	787b      	ldrb	r3, [r7, #1]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d003      	beq.n	8001302 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012fa:	887a      	ldrh	r2, [r7, #2]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001300:	e003      	b.n	800130a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001302:	887b      	ldrh	r3, [r7, #2]
 8001304:	041a      	lsls	r2, r3, #16
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	619a      	str	r2, [r3, #24]
}
 800130a:	bf00      	nop
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
	...

08001318 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800131e:	2300      	movs	r3, #0
 8001320:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	603b      	str	r3, [r7, #0]
 8001326:	4b20      	ldr	r3, [pc, #128]	; (80013a8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132a:	4a1f      	ldr	r2, [pc, #124]	; (80013a8 <HAL_PWREx_EnableOverDrive+0x90>)
 800132c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001330:	6413      	str	r3, [r2, #64]	; 0x40
 8001332:	4b1d      	ldr	r3, [pc, #116]	; (80013a8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800133a:	603b      	str	r3, [r7, #0]
 800133c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800133e:	4b1b      	ldr	r3, [pc, #108]	; (80013ac <HAL_PWREx_EnableOverDrive+0x94>)
 8001340:	2201      	movs	r2, #1
 8001342:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001344:	f7ff fd06 	bl	8000d54 <HAL_GetTick>
 8001348:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800134a:	e009      	b.n	8001360 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800134c:	f7ff fd02 	bl	8000d54 <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800135a:	d901      	bls.n	8001360 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800135c:	2303      	movs	r3, #3
 800135e:	e01f      	b.n	80013a0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001360:	4b13      	ldr	r3, [pc, #76]	; (80013b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800136c:	d1ee      	bne.n	800134c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800136e:	4b11      	ldr	r3, [pc, #68]	; (80013b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001370:	2201      	movs	r2, #1
 8001372:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001374:	f7ff fcee 	bl	8000d54 <HAL_GetTick>
 8001378:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800137a:	e009      	b.n	8001390 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800137c:	f7ff fcea 	bl	8000d54 <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800138a:	d901      	bls.n	8001390 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800138c:	2303      	movs	r3, #3
 800138e:	e007      	b.n	80013a0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001390:	4b07      	ldr	r3, [pc, #28]	; (80013b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001398:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800139c:	d1ee      	bne.n	800137c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800139e:	2300      	movs	r3, #0
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3708      	adds	r7, #8
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	40023800 	.word	0x40023800
 80013ac:	420e0040 	.word	0x420e0040
 80013b0:	40007000 	.word	0x40007000
 80013b4:	420e0044 	.word	0x420e0044

080013b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b086      	sub	sp, #24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d101      	bne.n	80013ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e267      	b.n	800189a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d075      	beq.n	80014c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013d6:	4b88      	ldr	r3, [pc, #544]	; (80015f8 <HAL_RCC_OscConfig+0x240>)
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	f003 030c 	and.w	r3, r3, #12
 80013de:	2b04      	cmp	r3, #4
 80013e0:	d00c      	beq.n	80013fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013e2:	4b85      	ldr	r3, [pc, #532]	; (80015f8 <HAL_RCC_OscConfig+0x240>)
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013ea:	2b08      	cmp	r3, #8
 80013ec:	d112      	bne.n	8001414 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013ee:	4b82      	ldr	r3, [pc, #520]	; (80015f8 <HAL_RCC_OscConfig+0x240>)
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013fa:	d10b      	bne.n	8001414 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013fc:	4b7e      	ldr	r3, [pc, #504]	; (80015f8 <HAL_RCC_OscConfig+0x240>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001404:	2b00      	cmp	r3, #0
 8001406:	d05b      	beq.n	80014c0 <HAL_RCC_OscConfig+0x108>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d157      	bne.n	80014c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	e242      	b.n	800189a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800141c:	d106      	bne.n	800142c <HAL_RCC_OscConfig+0x74>
 800141e:	4b76      	ldr	r3, [pc, #472]	; (80015f8 <HAL_RCC_OscConfig+0x240>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a75      	ldr	r2, [pc, #468]	; (80015f8 <HAL_RCC_OscConfig+0x240>)
 8001424:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001428:	6013      	str	r3, [r2, #0]
 800142a:	e01d      	b.n	8001468 <HAL_RCC_OscConfig+0xb0>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001434:	d10c      	bne.n	8001450 <HAL_RCC_OscConfig+0x98>
 8001436:	4b70      	ldr	r3, [pc, #448]	; (80015f8 <HAL_RCC_OscConfig+0x240>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a6f      	ldr	r2, [pc, #444]	; (80015f8 <HAL_RCC_OscConfig+0x240>)
 800143c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001440:	6013      	str	r3, [r2, #0]
 8001442:	4b6d      	ldr	r3, [pc, #436]	; (80015f8 <HAL_RCC_OscConfig+0x240>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a6c      	ldr	r2, [pc, #432]	; (80015f8 <HAL_RCC_OscConfig+0x240>)
 8001448:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800144c:	6013      	str	r3, [r2, #0]
 800144e:	e00b      	b.n	8001468 <HAL_RCC_OscConfig+0xb0>
 8001450:	4b69      	ldr	r3, [pc, #420]	; (80015f8 <HAL_RCC_OscConfig+0x240>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a68      	ldr	r2, [pc, #416]	; (80015f8 <HAL_RCC_OscConfig+0x240>)
 8001456:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800145a:	6013      	str	r3, [r2, #0]
 800145c:	4b66      	ldr	r3, [pc, #408]	; (80015f8 <HAL_RCC_OscConfig+0x240>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a65      	ldr	r2, [pc, #404]	; (80015f8 <HAL_RCC_OscConfig+0x240>)
 8001462:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001466:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d013      	beq.n	8001498 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001470:	f7ff fc70 	bl	8000d54 <HAL_GetTick>
 8001474:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001476:	e008      	b.n	800148a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001478:	f7ff fc6c 	bl	8000d54 <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	2b64      	cmp	r3, #100	; 0x64
 8001484:	d901      	bls.n	800148a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e207      	b.n	800189a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800148a:	4b5b      	ldr	r3, [pc, #364]	; (80015f8 <HAL_RCC_OscConfig+0x240>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d0f0      	beq.n	8001478 <HAL_RCC_OscConfig+0xc0>
 8001496:	e014      	b.n	80014c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001498:	f7ff fc5c 	bl	8000d54 <HAL_GetTick>
 800149c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800149e:	e008      	b.n	80014b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014a0:	f7ff fc58 	bl	8000d54 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b64      	cmp	r3, #100	; 0x64
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e1f3      	b.n	800189a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014b2:	4b51      	ldr	r3, [pc, #324]	; (80015f8 <HAL_RCC_OscConfig+0x240>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d1f0      	bne.n	80014a0 <HAL_RCC_OscConfig+0xe8>
 80014be:	e000      	b.n	80014c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d063      	beq.n	8001596 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014ce:	4b4a      	ldr	r3, [pc, #296]	; (80015f8 <HAL_RCC_OscConfig+0x240>)
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	f003 030c 	and.w	r3, r3, #12
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d00b      	beq.n	80014f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014da:	4b47      	ldr	r3, [pc, #284]	; (80015f8 <HAL_RCC_OscConfig+0x240>)
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014e2:	2b08      	cmp	r3, #8
 80014e4:	d11c      	bne.n	8001520 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014e6:	4b44      	ldr	r3, [pc, #272]	; (80015f8 <HAL_RCC_OscConfig+0x240>)
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d116      	bne.n	8001520 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014f2:	4b41      	ldr	r3, [pc, #260]	; (80015f8 <HAL_RCC_OscConfig+0x240>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d005      	beq.n	800150a <HAL_RCC_OscConfig+0x152>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	68db      	ldr	r3, [r3, #12]
 8001502:	2b01      	cmp	r3, #1
 8001504:	d001      	beq.n	800150a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e1c7      	b.n	800189a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800150a:	4b3b      	ldr	r3, [pc, #236]	; (80015f8 <HAL_RCC_OscConfig+0x240>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	691b      	ldr	r3, [r3, #16]
 8001516:	00db      	lsls	r3, r3, #3
 8001518:	4937      	ldr	r1, [pc, #220]	; (80015f8 <HAL_RCC_OscConfig+0x240>)
 800151a:	4313      	orrs	r3, r2
 800151c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800151e:	e03a      	b.n	8001596 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d020      	beq.n	800156a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001528:	4b34      	ldr	r3, [pc, #208]	; (80015fc <HAL_RCC_OscConfig+0x244>)
 800152a:	2201      	movs	r2, #1
 800152c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800152e:	f7ff fc11 	bl	8000d54 <HAL_GetTick>
 8001532:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001534:	e008      	b.n	8001548 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001536:	f7ff fc0d 	bl	8000d54 <HAL_GetTick>
 800153a:	4602      	mov	r2, r0
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	2b02      	cmp	r3, #2
 8001542:	d901      	bls.n	8001548 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001544:	2303      	movs	r3, #3
 8001546:	e1a8      	b.n	800189a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001548:	4b2b      	ldr	r3, [pc, #172]	; (80015f8 <HAL_RCC_OscConfig+0x240>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0302 	and.w	r3, r3, #2
 8001550:	2b00      	cmp	r3, #0
 8001552:	d0f0      	beq.n	8001536 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001554:	4b28      	ldr	r3, [pc, #160]	; (80015f8 <HAL_RCC_OscConfig+0x240>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	691b      	ldr	r3, [r3, #16]
 8001560:	00db      	lsls	r3, r3, #3
 8001562:	4925      	ldr	r1, [pc, #148]	; (80015f8 <HAL_RCC_OscConfig+0x240>)
 8001564:	4313      	orrs	r3, r2
 8001566:	600b      	str	r3, [r1, #0]
 8001568:	e015      	b.n	8001596 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800156a:	4b24      	ldr	r3, [pc, #144]	; (80015fc <HAL_RCC_OscConfig+0x244>)
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001570:	f7ff fbf0 	bl	8000d54 <HAL_GetTick>
 8001574:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001576:	e008      	b.n	800158a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001578:	f7ff fbec 	bl	8000d54 <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2b02      	cmp	r3, #2
 8001584:	d901      	bls.n	800158a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e187      	b.n	800189a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800158a:	4b1b      	ldr	r3, [pc, #108]	; (80015f8 <HAL_RCC_OscConfig+0x240>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	2b00      	cmp	r3, #0
 8001594:	d1f0      	bne.n	8001578 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0308 	and.w	r3, r3, #8
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d036      	beq.n	8001610 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	695b      	ldr	r3, [r3, #20]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d016      	beq.n	80015d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015aa:	4b15      	ldr	r3, [pc, #84]	; (8001600 <HAL_RCC_OscConfig+0x248>)
 80015ac:	2201      	movs	r2, #1
 80015ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015b0:	f7ff fbd0 	bl	8000d54 <HAL_GetTick>
 80015b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015b6:	e008      	b.n	80015ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015b8:	f7ff fbcc 	bl	8000d54 <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e167      	b.n	800189a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ca:	4b0b      	ldr	r3, [pc, #44]	; (80015f8 <HAL_RCC_OscConfig+0x240>)
 80015cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d0f0      	beq.n	80015b8 <HAL_RCC_OscConfig+0x200>
 80015d6:	e01b      	b.n	8001610 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015d8:	4b09      	ldr	r3, [pc, #36]	; (8001600 <HAL_RCC_OscConfig+0x248>)
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015de:	f7ff fbb9 	bl	8000d54 <HAL_GetTick>
 80015e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015e4:	e00e      	b.n	8001604 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015e6:	f7ff fbb5 	bl	8000d54 <HAL_GetTick>
 80015ea:	4602      	mov	r2, r0
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d907      	bls.n	8001604 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80015f4:	2303      	movs	r3, #3
 80015f6:	e150      	b.n	800189a <HAL_RCC_OscConfig+0x4e2>
 80015f8:	40023800 	.word	0x40023800
 80015fc:	42470000 	.word	0x42470000
 8001600:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001604:	4b88      	ldr	r3, [pc, #544]	; (8001828 <HAL_RCC_OscConfig+0x470>)
 8001606:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001608:	f003 0302 	and.w	r3, r3, #2
 800160c:	2b00      	cmp	r3, #0
 800160e:	d1ea      	bne.n	80015e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0304 	and.w	r3, r3, #4
 8001618:	2b00      	cmp	r3, #0
 800161a:	f000 8097 	beq.w	800174c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800161e:	2300      	movs	r3, #0
 8001620:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001622:	4b81      	ldr	r3, [pc, #516]	; (8001828 <HAL_RCC_OscConfig+0x470>)
 8001624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d10f      	bne.n	800164e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	60bb      	str	r3, [r7, #8]
 8001632:	4b7d      	ldr	r3, [pc, #500]	; (8001828 <HAL_RCC_OscConfig+0x470>)
 8001634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001636:	4a7c      	ldr	r2, [pc, #496]	; (8001828 <HAL_RCC_OscConfig+0x470>)
 8001638:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800163c:	6413      	str	r3, [r2, #64]	; 0x40
 800163e:	4b7a      	ldr	r3, [pc, #488]	; (8001828 <HAL_RCC_OscConfig+0x470>)
 8001640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001646:	60bb      	str	r3, [r7, #8]
 8001648:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800164a:	2301      	movs	r3, #1
 800164c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800164e:	4b77      	ldr	r3, [pc, #476]	; (800182c <HAL_RCC_OscConfig+0x474>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001656:	2b00      	cmp	r3, #0
 8001658:	d118      	bne.n	800168c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800165a:	4b74      	ldr	r3, [pc, #464]	; (800182c <HAL_RCC_OscConfig+0x474>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a73      	ldr	r2, [pc, #460]	; (800182c <HAL_RCC_OscConfig+0x474>)
 8001660:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001664:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001666:	f7ff fb75 	bl	8000d54 <HAL_GetTick>
 800166a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800166c:	e008      	b.n	8001680 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800166e:	f7ff fb71 	bl	8000d54 <HAL_GetTick>
 8001672:	4602      	mov	r2, r0
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	2b02      	cmp	r3, #2
 800167a:	d901      	bls.n	8001680 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800167c:	2303      	movs	r3, #3
 800167e:	e10c      	b.n	800189a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001680:	4b6a      	ldr	r3, [pc, #424]	; (800182c <HAL_RCC_OscConfig+0x474>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001688:	2b00      	cmp	r3, #0
 800168a:	d0f0      	beq.n	800166e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	2b01      	cmp	r3, #1
 8001692:	d106      	bne.n	80016a2 <HAL_RCC_OscConfig+0x2ea>
 8001694:	4b64      	ldr	r3, [pc, #400]	; (8001828 <HAL_RCC_OscConfig+0x470>)
 8001696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001698:	4a63      	ldr	r2, [pc, #396]	; (8001828 <HAL_RCC_OscConfig+0x470>)
 800169a:	f043 0301 	orr.w	r3, r3, #1
 800169e:	6713      	str	r3, [r2, #112]	; 0x70
 80016a0:	e01c      	b.n	80016dc <HAL_RCC_OscConfig+0x324>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	2b05      	cmp	r3, #5
 80016a8:	d10c      	bne.n	80016c4 <HAL_RCC_OscConfig+0x30c>
 80016aa:	4b5f      	ldr	r3, [pc, #380]	; (8001828 <HAL_RCC_OscConfig+0x470>)
 80016ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ae:	4a5e      	ldr	r2, [pc, #376]	; (8001828 <HAL_RCC_OscConfig+0x470>)
 80016b0:	f043 0304 	orr.w	r3, r3, #4
 80016b4:	6713      	str	r3, [r2, #112]	; 0x70
 80016b6:	4b5c      	ldr	r3, [pc, #368]	; (8001828 <HAL_RCC_OscConfig+0x470>)
 80016b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ba:	4a5b      	ldr	r2, [pc, #364]	; (8001828 <HAL_RCC_OscConfig+0x470>)
 80016bc:	f043 0301 	orr.w	r3, r3, #1
 80016c0:	6713      	str	r3, [r2, #112]	; 0x70
 80016c2:	e00b      	b.n	80016dc <HAL_RCC_OscConfig+0x324>
 80016c4:	4b58      	ldr	r3, [pc, #352]	; (8001828 <HAL_RCC_OscConfig+0x470>)
 80016c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016c8:	4a57      	ldr	r2, [pc, #348]	; (8001828 <HAL_RCC_OscConfig+0x470>)
 80016ca:	f023 0301 	bic.w	r3, r3, #1
 80016ce:	6713      	str	r3, [r2, #112]	; 0x70
 80016d0:	4b55      	ldr	r3, [pc, #340]	; (8001828 <HAL_RCC_OscConfig+0x470>)
 80016d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016d4:	4a54      	ldr	r2, [pc, #336]	; (8001828 <HAL_RCC_OscConfig+0x470>)
 80016d6:	f023 0304 	bic.w	r3, r3, #4
 80016da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d015      	beq.n	8001710 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016e4:	f7ff fb36 	bl	8000d54 <HAL_GetTick>
 80016e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016ea:	e00a      	b.n	8001702 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016ec:	f7ff fb32 	bl	8000d54 <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d901      	bls.n	8001702 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e0cb      	b.n	800189a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001702:	4b49      	ldr	r3, [pc, #292]	; (8001828 <HAL_RCC_OscConfig+0x470>)
 8001704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	2b00      	cmp	r3, #0
 800170c:	d0ee      	beq.n	80016ec <HAL_RCC_OscConfig+0x334>
 800170e:	e014      	b.n	800173a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001710:	f7ff fb20 	bl	8000d54 <HAL_GetTick>
 8001714:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001716:	e00a      	b.n	800172e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001718:	f7ff fb1c 	bl	8000d54 <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	f241 3288 	movw	r2, #5000	; 0x1388
 8001726:	4293      	cmp	r3, r2
 8001728:	d901      	bls.n	800172e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e0b5      	b.n	800189a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800172e:	4b3e      	ldr	r3, [pc, #248]	; (8001828 <HAL_RCC_OscConfig+0x470>)
 8001730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001732:	f003 0302 	and.w	r3, r3, #2
 8001736:	2b00      	cmp	r3, #0
 8001738:	d1ee      	bne.n	8001718 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800173a:	7dfb      	ldrb	r3, [r7, #23]
 800173c:	2b01      	cmp	r3, #1
 800173e:	d105      	bne.n	800174c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001740:	4b39      	ldr	r3, [pc, #228]	; (8001828 <HAL_RCC_OscConfig+0x470>)
 8001742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001744:	4a38      	ldr	r2, [pc, #224]	; (8001828 <HAL_RCC_OscConfig+0x470>)
 8001746:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800174a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	2b00      	cmp	r3, #0
 8001752:	f000 80a1 	beq.w	8001898 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001756:	4b34      	ldr	r3, [pc, #208]	; (8001828 <HAL_RCC_OscConfig+0x470>)
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	f003 030c 	and.w	r3, r3, #12
 800175e:	2b08      	cmp	r3, #8
 8001760:	d05c      	beq.n	800181c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	699b      	ldr	r3, [r3, #24]
 8001766:	2b02      	cmp	r3, #2
 8001768:	d141      	bne.n	80017ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800176a:	4b31      	ldr	r3, [pc, #196]	; (8001830 <HAL_RCC_OscConfig+0x478>)
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001770:	f7ff faf0 	bl	8000d54 <HAL_GetTick>
 8001774:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001776:	e008      	b.n	800178a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001778:	f7ff faec 	bl	8000d54 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b02      	cmp	r3, #2
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e087      	b.n	800189a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800178a:	4b27      	ldr	r3, [pc, #156]	; (8001828 <HAL_RCC_OscConfig+0x470>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d1f0      	bne.n	8001778 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	69da      	ldr	r2, [r3, #28]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6a1b      	ldr	r3, [r3, #32]
 800179e:	431a      	orrs	r2, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a4:	019b      	lsls	r3, r3, #6
 80017a6:	431a      	orrs	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ac:	085b      	lsrs	r3, r3, #1
 80017ae:	3b01      	subs	r3, #1
 80017b0:	041b      	lsls	r3, r3, #16
 80017b2:	431a      	orrs	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b8:	061b      	lsls	r3, r3, #24
 80017ba:	491b      	ldr	r1, [pc, #108]	; (8001828 <HAL_RCC_OscConfig+0x470>)
 80017bc:	4313      	orrs	r3, r2
 80017be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017c0:	4b1b      	ldr	r3, [pc, #108]	; (8001830 <HAL_RCC_OscConfig+0x478>)
 80017c2:	2201      	movs	r2, #1
 80017c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c6:	f7ff fac5 	bl	8000d54 <HAL_GetTick>
 80017ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017cc:	e008      	b.n	80017e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017ce:	f7ff fac1 	bl	8000d54 <HAL_GetTick>
 80017d2:	4602      	mov	r2, r0
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d901      	bls.n	80017e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	e05c      	b.n	800189a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017e0:	4b11      	ldr	r3, [pc, #68]	; (8001828 <HAL_RCC_OscConfig+0x470>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d0f0      	beq.n	80017ce <HAL_RCC_OscConfig+0x416>
 80017ec:	e054      	b.n	8001898 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ee:	4b10      	ldr	r3, [pc, #64]	; (8001830 <HAL_RCC_OscConfig+0x478>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f4:	f7ff faae 	bl	8000d54 <HAL_GetTick>
 80017f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017fa:	e008      	b.n	800180e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017fc:	f7ff faaa 	bl	8000d54 <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b02      	cmp	r3, #2
 8001808:	d901      	bls.n	800180e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e045      	b.n	800189a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800180e:	4b06      	ldr	r3, [pc, #24]	; (8001828 <HAL_RCC_OscConfig+0x470>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d1f0      	bne.n	80017fc <HAL_RCC_OscConfig+0x444>
 800181a:	e03d      	b.n	8001898 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	699b      	ldr	r3, [r3, #24]
 8001820:	2b01      	cmp	r3, #1
 8001822:	d107      	bne.n	8001834 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e038      	b.n	800189a <HAL_RCC_OscConfig+0x4e2>
 8001828:	40023800 	.word	0x40023800
 800182c:	40007000 	.word	0x40007000
 8001830:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001834:	4b1b      	ldr	r3, [pc, #108]	; (80018a4 <HAL_RCC_OscConfig+0x4ec>)
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	699b      	ldr	r3, [r3, #24]
 800183e:	2b01      	cmp	r3, #1
 8001840:	d028      	beq.n	8001894 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800184c:	429a      	cmp	r2, r3
 800184e:	d121      	bne.n	8001894 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800185a:	429a      	cmp	r2, r3
 800185c:	d11a      	bne.n	8001894 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800185e:	68fa      	ldr	r2, [r7, #12]
 8001860:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001864:	4013      	ands	r3, r2
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800186a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800186c:	4293      	cmp	r3, r2
 800186e:	d111      	bne.n	8001894 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800187a:	085b      	lsrs	r3, r3, #1
 800187c:	3b01      	subs	r3, #1
 800187e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001880:	429a      	cmp	r2, r3
 8001882:	d107      	bne.n	8001894 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800188e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001890:	429a      	cmp	r2, r3
 8001892:	d001      	beq.n	8001898 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e000      	b.n	800189a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	3718      	adds	r7, #24
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40023800 	.word	0x40023800

080018a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d101      	bne.n	80018bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e0cc      	b.n	8001a56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018bc:	4b68      	ldr	r3, [pc, #416]	; (8001a60 <HAL_RCC_ClockConfig+0x1b8>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 030f 	and.w	r3, r3, #15
 80018c4:	683a      	ldr	r2, [r7, #0]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d90c      	bls.n	80018e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ca:	4b65      	ldr	r3, [pc, #404]	; (8001a60 <HAL_RCC_ClockConfig+0x1b8>)
 80018cc:	683a      	ldr	r2, [r7, #0]
 80018ce:	b2d2      	uxtb	r2, r2
 80018d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018d2:	4b63      	ldr	r3, [pc, #396]	; (8001a60 <HAL_RCC_ClockConfig+0x1b8>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 030f 	and.w	r3, r3, #15
 80018da:	683a      	ldr	r2, [r7, #0]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d001      	beq.n	80018e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e0b8      	b.n	8001a56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0302 	and.w	r3, r3, #2
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d020      	beq.n	8001932 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0304 	and.w	r3, r3, #4
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d005      	beq.n	8001908 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018fc:	4b59      	ldr	r3, [pc, #356]	; (8001a64 <HAL_RCC_ClockConfig+0x1bc>)
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	4a58      	ldr	r2, [pc, #352]	; (8001a64 <HAL_RCC_ClockConfig+0x1bc>)
 8001902:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001906:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0308 	and.w	r3, r3, #8
 8001910:	2b00      	cmp	r3, #0
 8001912:	d005      	beq.n	8001920 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001914:	4b53      	ldr	r3, [pc, #332]	; (8001a64 <HAL_RCC_ClockConfig+0x1bc>)
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	4a52      	ldr	r2, [pc, #328]	; (8001a64 <HAL_RCC_ClockConfig+0x1bc>)
 800191a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800191e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001920:	4b50      	ldr	r3, [pc, #320]	; (8001a64 <HAL_RCC_ClockConfig+0x1bc>)
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	494d      	ldr	r1, [pc, #308]	; (8001a64 <HAL_RCC_ClockConfig+0x1bc>)
 800192e:	4313      	orrs	r3, r2
 8001930:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	2b00      	cmp	r3, #0
 800193c:	d044      	beq.n	80019c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	2b01      	cmp	r3, #1
 8001944:	d107      	bne.n	8001956 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001946:	4b47      	ldr	r3, [pc, #284]	; (8001a64 <HAL_RCC_ClockConfig+0x1bc>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d119      	bne.n	8001986 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e07f      	b.n	8001a56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	2b02      	cmp	r3, #2
 800195c:	d003      	beq.n	8001966 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001962:	2b03      	cmp	r3, #3
 8001964:	d107      	bne.n	8001976 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001966:	4b3f      	ldr	r3, [pc, #252]	; (8001a64 <HAL_RCC_ClockConfig+0x1bc>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d109      	bne.n	8001986 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e06f      	b.n	8001a56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001976:	4b3b      	ldr	r3, [pc, #236]	; (8001a64 <HAL_RCC_ClockConfig+0x1bc>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0302 	and.w	r3, r3, #2
 800197e:	2b00      	cmp	r3, #0
 8001980:	d101      	bne.n	8001986 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e067      	b.n	8001a56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001986:	4b37      	ldr	r3, [pc, #220]	; (8001a64 <HAL_RCC_ClockConfig+0x1bc>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f023 0203 	bic.w	r2, r3, #3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	4934      	ldr	r1, [pc, #208]	; (8001a64 <HAL_RCC_ClockConfig+0x1bc>)
 8001994:	4313      	orrs	r3, r2
 8001996:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001998:	f7ff f9dc 	bl	8000d54 <HAL_GetTick>
 800199c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800199e:	e00a      	b.n	80019b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019a0:	f7ff f9d8 	bl	8000d54 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e04f      	b.n	8001a56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019b6:	4b2b      	ldr	r3, [pc, #172]	; (8001a64 <HAL_RCC_ClockConfig+0x1bc>)
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	f003 020c 	and.w	r2, r3, #12
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d1eb      	bne.n	80019a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019c8:	4b25      	ldr	r3, [pc, #148]	; (8001a60 <HAL_RCC_ClockConfig+0x1b8>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 030f 	and.w	r3, r3, #15
 80019d0:	683a      	ldr	r2, [r7, #0]
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d20c      	bcs.n	80019f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019d6:	4b22      	ldr	r3, [pc, #136]	; (8001a60 <HAL_RCC_ClockConfig+0x1b8>)
 80019d8:	683a      	ldr	r2, [r7, #0]
 80019da:	b2d2      	uxtb	r2, r2
 80019dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019de:	4b20      	ldr	r3, [pc, #128]	; (8001a60 <HAL_RCC_ClockConfig+0x1b8>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 030f 	and.w	r3, r3, #15
 80019e6:	683a      	ldr	r2, [r7, #0]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d001      	beq.n	80019f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e032      	b.n	8001a56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0304 	and.w	r3, r3, #4
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d008      	beq.n	8001a0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019fc:	4b19      	ldr	r3, [pc, #100]	; (8001a64 <HAL_RCC_ClockConfig+0x1bc>)
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	4916      	ldr	r1, [pc, #88]	; (8001a64 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0308 	and.w	r3, r3, #8
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d009      	beq.n	8001a2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a1a:	4b12      	ldr	r3, [pc, #72]	; (8001a64 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	691b      	ldr	r3, [r3, #16]
 8001a26:	00db      	lsls	r3, r3, #3
 8001a28:	490e      	ldr	r1, [pc, #56]	; (8001a64 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a2e:	f000 f821 	bl	8001a74 <HAL_RCC_GetSysClockFreq>
 8001a32:	4602      	mov	r2, r0
 8001a34:	4b0b      	ldr	r3, [pc, #44]	; (8001a64 <HAL_RCC_ClockConfig+0x1bc>)
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	091b      	lsrs	r3, r3, #4
 8001a3a:	f003 030f 	and.w	r3, r3, #15
 8001a3e:	490a      	ldr	r1, [pc, #40]	; (8001a68 <HAL_RCC_ClockConfig+0x1c0>)
 8001a40:	5ccb      	ldrb	r3, [r1, r3]
 8001a42:	fa22 f303 	lsr.w	r3, r2, r3
 8001a46:	4a09      	ldr	r2, [pc, #36]	; (8001a6c <HAL_RCC_ClockConfig+0x1c4>)
 8001a48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a4a:	4b09      	ldr	r3, [pc, #36]	; (8001a70 <HAL_RCC_ClockConfig+0x1c8>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7ff f93c 	bl	8000ccc <HAL_InitTick>

  return HAL_OK;
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3710      	adds	r7, #16
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40023c00 	.word	0x40023c00
 8001a64:	40023800 	.word	0x40023800
 8001a68:	08004b68 	.word	0x08004b68
 8001a6c:	20000000 	.word	0x20000000
 8001a70:	20000004 	.word	0x20000004

08001a74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a78:	b094      	sub	sp, #80	; 0x50
 8001a7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	647b      	str	r3, [r7, #68]	; 0x44
 8001a80:	2300      	movs	r3, #0
 8001a82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a84:	2300      	movs	r3, #0
 8001a86:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a8c:	4b79      	ldr	r3, [pc, #484]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f003 030c 	and.w	r3, r3, #12
 8001a94:	2b08      	cmp	r3, #8
 8001a96:	d00d      	beq.n	8001ab4 <HAL_RCC_GetSysClockFreq+0x40>
 8001a98:	2b08      	cmp	r3, #8
 8001a9a:	f200 80e1 	bhi.w	8001c60 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d002      	beq.n	8001aa8 <HAL_RCC_GetSysClockFreq+0x34>
 8001aa2:	2b04      	cmp	r3, #4
 8001aa4:	d003      	beq.n	8001aae <HAL_RCC_GetSysClockFreq+0x3a>
 8001aa6:	e0db      	b.n	8001c60 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001aa8:	4b73      	ldr	r3, [pc, #460]	; (8001c78 <HAL_RCC_GetSysClockFreq+0x204>)
 8001aaa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001aac:	e0db      	b.n	8001c66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001aae:	4b73      	ldr	r3, [pc, #460]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x208>)
 8001ab0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ab2:	e0d8      	b.n	8001c66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ab4:	4b6f      	ldr	r3, [pc, #444]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001abc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001abe:	4b6d      	ldr	r3, [pc, #436]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d063      	beq.n	8001b92 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001aca:	4b6a      	ldr	r3, [pc, #424]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x200>)
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	099b      	lsrs	r3, r3, #6
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ad4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ad8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001adc:	633b      	str	r3, [r7, #48]	; 0x30
 8001ade:	2300      	movs	r3, #0
 8001ae0:	637b      	str	r3, [r7, #52]	; 0x34
 8001ae2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001ae6:	4622      	mov	r2, r4
 8001ae8:	462b      	mov	r3, r5
 8001aea:	f04f 0000 	mov.w	r0, #0
 8001aee:	f04f 0100 	mov.w	r1, #0
 8001af2:	0159      	lsls	r1, r3, #5
 8001af4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001af8:	0150      	lsls	r0, r2, #5
 8001afa:	4602      	mov	r2, r0
 8001afc:	460b      	mov	r3, r1
 8001afe:	4621      	mov	r1, r4
 8001b00:	1a51      	subs	r1, r2, r1
 8001b02:	6139      	str	r1, [r7, #16]
 8001b04:	4629      	mov	r1, r5
 8001b06:	eb63 0301 	sbc.w	r3, r3, r1
 8001b0a:	617b      	str	r3, [r7, #20]
 8001b0c:	f04f 0200 	mov.w	r2, #0
 8001b10:	f04f 0300 	mov.w	r3, #0
 8001b14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b18:	4659      	mov	r1, fp
 8001b1a:	018b      	lsls	r3, r1, #6
 8001b1c:	4651      	mov	r1, sl
 8001b1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b22:	4651      	mov	r1, sl
 8001b24:	018a      	lsls	r2, r1, #6
 8001b26:	4651      	mov	r1, sl
 8001b28:	ebb2 0801 	subs.w	r8, r2, r1
 8001b2c:	4659      	mov	r1, fp
 8001b2e:	eb63 0901 	sbc.w	r9, r3, r1
 8001b32:	f04f 0200 	mov.w	r2, #0
 8001b36:	f04f 0300 	mov.w	r3, #0
 8001b3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b46:	4690      	mov	r8, r2
 8001b48:	4699      	mov	r9, r3
 8001b4a:	4623      	mov	r3, r4
 8001b4c:	eb18 0303 	adds.w	r3, r8, r3
 8001b50:	60bb      	str	r3, [r7, #8]
 8001b52:	462b      	mov	r3, r5
 8001b54:	eb49 0303 	adc.w	r3, r9, r3
 8001b58:	60fb      	str	r3, [r7, #12]
 8001b5a:	f04f 0200 	mov.w	r2, #0
 8001b5e:	f04f 0300 	mov.w	r3, #0
 8001b62:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b66:	4629      	mov	r1, r5
 8001b68:	024b      	lsls	r3, r1, #9
 8001b6a:	4621      	mov	r1, r4
 8001b6c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b70:	4621      	mov	r1, r4
 8001b72:	024a      	lsls	r2, r1, #9
 8001b74:	4610      	mov	r0, r2
 8001b76:	4619      	mov	r1, r3
 8001b78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b80:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001b84:	f7fe fb84 	bl	8000290 <__aeabi_uldivmod>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b90:	e058      	b.n	8001c44 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b92:	4b38      	ldr	r3, [pc, #224]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	099b      	lsrs	r3, r3, #6
 8001b98:	2200      	movs	r2, #0
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	4611      	mov	r1, r2
 8001b9e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ba2:	623b      	str	r3, [r7, #32]
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ba8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001bac:	4642      	mov	r2, r8
 8001bae:	464b      	mov	r3, r9
 8001bb0:	f04f 0000 	mov.w	r0, #0
 8001bb4:	f04f 0100 	mov.w	r1, #0
 8001bb8:	0159      	lsls	r1, r3, #5
 8001bba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bbe:	0150      	lsls	r0, r2, #5
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	4641      	mov	r1, r8
 8001bc6:	ebb2 0a01 	subs.w	sl, r2, r1
 8001bca:	4649      	mov	r1, r9
 8001bcc:	eb63 0b01 	sbc.w	fp, r3, r1
 8001bd0:	f04f 0200 	mov.w	r2, #0
 8001bd4:	f04f 0300 	mov.w	r3, #0
 8001bd8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001bdc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001be0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001be4:	ebb2 040a 	subs.w	r4, r2, sl
 8001be8:	eb63 050b 	sbc.w	r5, r3, fp
 8001bec:	f04f 0200 	mov.w	r2, #0
 8001bf0:	f04f 0300 	mov.w	r3, #0
 8001bf4:	00eb      	lsls	r3, r5, #3
 8001bf6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001bfa:	00e2      	lsls	r2, r4, #3
 8001bfc:	4614      	mov	r4, r2
 8001bfe:	461d      	mov	r5, r3
 8001c00:	4643      	mov	r3, r8
 8001c02:	18e3      	adds	r3, r4, r3
 8001c04:	603b      	str	r3, [r7, #0]
 8001c06:	464b      	mov	r3, r9
 8001c08:	eb45 0303 	adc.w	r3, r5, r3
 8001c0c:	607b      	str	r3, [r7, #4]
 8001c0e:	f04f 0200 	mov.w	r2, #0
 8001c12:	f04f 0300 	mov.w	r3, #0
 8001c16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c1a:	4629      	mov	r1, r5
 8001c1c:	028b      	lsls	r3, r1, #10
 8001c1e:	4621      	mov	r1, r4
 8001c20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c24:	4621      	mov	r1, r4
 8001c26:	028a      	lsls	r2, r1, #10
 8001c28:	4610      	mov	r0, r2
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c2e:	2200      	movs	r2, #0
 8001c30:	61bb      	str	r3, [r7, #24]
 8001c32:	61fa      	str	r2, [r7, #28]
 8001c34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c38:	f7fe fb2a 	bl	8000290 <__aeabi_uldivmod>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	460b      	mov	r3, r1
 8001c40:	4613      	mov	r3, r2
 8001c42:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c44:	4b0b      	ldr	r3, [pc, #44]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	0c1b      	lsrs	r3, r3, #16
 8001c4a:	f003 0303 	and.w	r3, r3, #3
 8001c4e:	3301      	adds	r3, #1
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001c54:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001c56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c5c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c5e:	e002      	b.n	8001c66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c60:	4b05      	ldr	r3, [pc, #20]	; (8001c78 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c62:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3750      	adds	r7, #80	; 0x50
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c72:	bf00      	nop
 8001c74:	40023800 	.word	0x40023800
 8001c78:	00f42400 	.word	0x00f42400
 8001c7c:	007a1200 	.word	0x007a1200

08001c80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c84:	4b03      	ldr	r3, [pc, #12]	; (8001c94 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c86:	681b      	ldr	r3, [r3, #0]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	20000000 	.word	0x20000000

08001c98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c9c:	f7ff fff0 	bl	8001c80 <HAL_RCC_GetHCLKFreq>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	4b05      	ldr	r3, [pc, #20]	; (8001cb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	0a9b      	lsrs	r3, r3, #10
 8001ca8:	f003 0307 	and.w	r3, r3, #7
 8001cac:	4903      	ldr	r1, [pc, #12]	; (8001cbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cae:	5ccb      	ldrb	r3, [r1, r3]
 8001cb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	08004b78 	.word	0x08004b78

08001cc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001cc4:	f7ff ffdc 	bl	8001c80 <HAL_RCC_GetHCLKFreq>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	4b05      	ldr	r3, [pc, #20]	; (8001ce0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	0b5b      	lsrs	r3, r3, #13
 8001cd0:	f003 0307 	and.w	r3, r3, #7
 8001cd4:	4903      	ldr	r1, [pc, #12]	; (8001ce4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cd6:	5ccb      	ldrb	r3, [r1, r3]
 8001cd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	40023800 	.word	0x40023800
 8001ce4:	08004b78 	.word	0x08004b78

08001ce8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d101      	bne.n	8001cfa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e07b      	b.n	8001df2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d108      	bne.n	8001d14 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001d0a:	d009      	beq.n	8001d20 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	61da      	str	r2, [r3, #28]
 8001d12:	e005      	b.n	8001d20 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2200      	movs	r2, #0
 8001d24:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d106      	bne.n	8001d40 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f7fe fde8 	bl	8000910 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2202      	movs	r2, #2
 8001d44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d56:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001d68:	431a      	orrs	r2, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d72:	431a      	orrs	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	691b      	ldr	r3, [r3, #16]
 8001d78:	f003 0302 	and.w	r3, r3, #2
 8001d7c:	431a      	orrs	r2, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	695b      	ldr	r3, [r3, #20]
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	431a      	orrs	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d90:	431a      	orrs	r2, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	69db      	ldr	r3, [r3, #28]
 8001d96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d9a:	431a      	orrs	r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6a1b      	ldr	r3, [r3, #32]
 8001da0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001da4:	ea42 0103 	orr.w	r1, r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dac:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	430a      	orrs	r2, r1
 8001db6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	699b      	ldr	r3, [r3, #24]
 8001dbc:	0c1b      	lsrs	r3, r3, #16
 8001dbe:	f003 0104 	and.w	r1, r3, #4
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc6:	f003 0210 	and.w	r2, r3, #16
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	430a      	orrs	r2, r1
 8001dd0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	69da      	ldr	r2, [r3, #28]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001de0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b088      	sub	sp, #32
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	60f8      	str	r0, [r7, #12]
 8001e02:	60b9      	str	r1, [r7, #8]
 8001e04:	603b      	str	r3, [r7, #0]
 8001e06:	4613      	mov	r3, r2
 8001e08:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d101      	bne.n	8001e1c <HAL_SPI_Transmit+0x22>
 8001e18:	2302      	movs	r3, #2
 8001e1a:	e126      	b.n	800206a <HAL_SPI_Transmit+0x270>
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001e24:	f7fe ff96 	bl	8000d54 <HAL_GetTick>
 8001e28:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001e2a:	88fb      	ldrh	r3, [r7, #6]
 8001e2c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d002      	beq.n	8001e40 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001e3e:	e10b      	b.n	8002058 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d002      	beq.n	8001e4c <HAL_SPI_Transmit+0x52>
 8001e46:	88fb      	ldrh	r3, [r7, #6]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d102      	bne.n	8001e52 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001e50:	e102      	b.n	8002058 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2203      	movs	r2, #3
 8001e56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	68ba      	ldr	r2, [r7, #8]
 8001e64:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	88fa      	ldrh	r2, [r7, #6]
 8001e6a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	88fa      	ldrh	r2, [r7, #6]
 8001e70:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2200      	movs	r2, #0
 8001e76:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2200      	movs	r2, #0
 8001e82:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2200      	movs	r2, #0
 8001e88:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e98:	d10f      	bne.n	8001eba <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ea8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001eb8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ec4:	2b40      	cmp	r3, #64	; 0x40
 8001ec6:	d007      	beq.n	8001ed8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ed6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ee0:	d14b      	bne.n	8001f7a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d002      	beq.n	8001ef0 <HAL_SPI_Transmit+0xf6>
 8001eea:	8afb      	ldrh	r3, [r7, #22]
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d13e      	bne.n	8001f6e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef4:	881a      	ldrh	r2, [r3, #0]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f00:	1c9a      	adds	r2, r3, #2
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	3b01      	subs	r3, #1
 8001f0e:	b29a      	uxth	r2, r3
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001f14:	e02b      	b.n	8001f6e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	f003 0302 	and.w	r3, r3, #2
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d112      	bne.n	8001f4a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f28:	881a      	ldrh	r2, [r3, #0]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f34:	1c9a      	adds	r2, r3, #2
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	3b01      	subs	r3, #1
 8001f42:	b29a      	uxth	r2, r3
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	86da      	strh	r2, [r3, #54]	; 0x36
 8001f48:	e011      	b.n	8001f6e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f4a:	f7fe ff03 	bl	8000d54 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	683a      	ldr	r2, [r7, #0]
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d803      	bhi.n	8001f62 <HAL_SPI_Transmit+0x168>
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f60:	d102      	bne.n	8001f68 <HAL_SPI_Transmit+0x16e>
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d102      	bne.n	8001f6e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001f6c:	e074      	b.n	8002058 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d1ce      	bne.n	8001f16 <HAL_SPI_Transmit+0x11c>
 8001f78:	e04c      	b.n	8002014 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d002      	beq.n	8001f88 <HAL_SPI_Transmit+0x18e>
 8001f82:	8afb      	ldrh	r3, [r7, #22]
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d140      	bne.n	800200a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	330c      	adds	r3, #12
 8001f92:	7812      	ldrb	r2, [r2, #0]
 8001f94:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9a:	1c5a      	adds	r2, r3, #1
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	b29a      	uxth	r2, r3
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001fae:	e02c      	b.n	800200a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d113      	bne.n	8001fe6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	330c      	adds	r3, #12
 8001fc8:	7812      	ldrb	r2, [r2, #0]
 8001fca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd0:	1c5a      	adds	r2, r3, #1
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	3b01      	subs	r3, #1
 8001fde:	b29a      	uxth	r2, r3
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	86da      	strh	r2, [r3, #54]	; 0x36
 8001fe4:	e011      	b.n	800200a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001fe6:	f7fe feb5 	bl	8000d54 <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	683a      	ldr	r2, [r7, #0]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d803      	bhi.n	8001ffe <HAL_SPI_Transmit+0x204>
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ffc:	d102      	bne.n	8002004 <HAL_SPI_Transmit+0x20a>
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d102      	bne.n	800200a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002008:	e026      	b.n	8002058 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800200e:	b29b      	uxth	r3, r3
 8002010:	2b00      	cmp	r3, #0
 8002012:	d1cd      	bne.n	8001fb0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	6839      	ldr	r1, [r7, #0]
 8002018:	68f8      	ldr	r0, [r7, #12]
 800201a:	f000 fbcb 	bl	80027b4 <SPI_EndRxTxTransaction>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d002      	beq.n	800202a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2220      	movs	r2, #32
 8002028:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d10a      	bne.n	8002048 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002032:	2300      	movs	r3, #0
 8002034:	613b      	str	r3, [r7, #16]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	613b      	str	r3, [r7, #16]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	613b      	str	r3, [r7, #16]
 8002046:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800204c:	2b00      	cmp	r3, #0
 800204e:	d002      	beq.n	8002056 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	77fb      	strb	r3, [r7, #31]
 8002054:	e000      	b.n	8002058 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002056:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2200      	movs	r2, #0
 8002064:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002068:	7ffb      	ldrb	r3, [r7, #31]
}
 800206a:	4618      	mov	r0, r3
 800206c:	3720      	adds	r7, #32
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002072:	b580      	push	{r7, lr}
 8002074:	b088      	sub	sp, #32
 8002076:	af02      	add	r7, sp, #8
 8002078:	60f8      	str	r0, [r7, #12]
 800207a:	60b9      	str	r1, [r7, #8]
 800207c:	603b      	str	r3, [r7, #0]
 800207e:	4613      	mov	r3, r2
 8002080:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002082:	2300      	movs	r3, #0
 8002084:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800208e:	d112      	bne.n	80020b6 <HAL_SPI_Receive+0x44>
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d10e      	bne.n	80020b6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2204      	movs	r2, #4
 800209c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80020a0:	88fa      	ldrh	r2, [r7, #6]
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	9300      	str	r3, [sp, #0]
 80020a6:	4613      	mov	r3, r2
 80020a8:	68ba      	ldr	r2, [r7, #8]
 80020aa:	68b9      	ldr	r1, [r7, #8]
 80020ac:	68f8      	ldr	r0, [r7, #12]
 80020ae:	f000 f8f1 	bl	8002294 <HAL_SPI_TransmitReceive>
 80020b2:	4603      	mov	r3, r0
 80020b4:	e0ea      	b.n	800228c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d101      	bne.n	80020c4 <HAL_SPI_Receive+0x52>
 80020c0:	2302      	movs	r3, #2
 80020c2:	e0e3      	b.n	800228c <HAL_SPI_Receive+0x21a>
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2201      	movs	r2, #1
 80020c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80020cc:	f7fe fe42 	bl	8000d54 <HAL_GetTick>
 80020d0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d002      	beq.n	80020e4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80020de:	2302      	movs	r3, #2
 80020e0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80020e2:	e0ca      	b.n	800227a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d002      	beq.n	80020f0 <HAL_SPI_Receive+0x7e>
 80020ea:	88fb      	ldrh	r3, [r7, #6]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d102      	bne.n	80020f6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80020f4:	e0c1      	b.n	800227a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2204      	movs	r2, #4
 80020fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2200      	movs	r2, #0
 8002102:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	68ba      	ldr	r2, [r7, #8]
 8002108:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	88fa      	ldrh	r2, [r7, #6]
 800210e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	88fa      	ldrh	r2, [r7, #6]
 8002114:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2200      	movs	r2, #0
 800211a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2200      	movs	r2, #0
 8002120:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2200      	movs	r2, #0
 8002126:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2200      	movs	r2, #0
 800212c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2200      	movs	r2, #0
 8002132:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800213c:	d10f      	bne.n	800215e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800214c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800215c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002168:	2b40      	cmp	r3, #64	; 0x40
 800216a:	d007      	beq.n	800217c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800217a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d162      	bne.n	800224a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002184:	e02e      	b.n	80021e4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f003 0301 	and.w	r3, r3, #1
 8002190:	2b01      	cmp	r3, #1
 8002192:	d115      	bne.n	80021c0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f103 020c 	add.w	r2, r3, #12
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021a0:	7812      	ldrb	r2, [r2, #0]
 80021a2:	b2d2      	uxtb	r2, r2
 80021a4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021aa:	1c5a      	adds	r2, r3, #1
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	3b01      	subs	r3, #1
 80021b8:	b29a      	uxth	r2, r3
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80021be:	e011      	b.n	80021e4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80021c0:	f7fe fdc8 	bl	8000d54 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	683a      	ldr	r2, [r7, #0]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d803      	bhi.n	80021d8 <HAL_SPI_Receive+0x166>
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021d6:	d102      	bne.n	80021de <HAL_SPI_Receive+0x16c>
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d102      	bne.n	80021e4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80021e2:	e04a      	b.n	800227a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1cb      	bne.n	8002186 <HAL_SPI_Receive+0x114>
 80021ee:	e031      	b.n	8002254 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d113      	bne.n	8002226 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	68da      	ldr	r2, [r3, #12]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002208:	b292      	uxth	r2, r2
 800220a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002210:	1c9a      	adds	r2, r3, #2
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800221a:	b29b      	uxth	r3, r3
 800221c:	3b01      	subs	r3, #1
 800221e:	b29a      	uxth	r2, r3
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002224:	e011      	b.n	800224a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002226:	f7fe fd95 	bl	8000d54 <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	683a      	ldr	r2, [r7, #0]
 8002232:	429a      	cmp	r2, r3
 8002234:	d803      	bhi.n	800223e <HAL_SPI_Receive+0x1cc>
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800223c:	d102      	bne.n	8002244 <HAL_SPI_Receive+0x1d2>
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d102      	bne.n	800224a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002248:	e017      	b.n	800227a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800224e:	b29b      	uxth	r3, r3
 8002250:	2b00      	cmp	r3, #0
 8002252:	d1cd      	bne.n	80021f0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002254:	693a      	ldr	r2, [r7, #16]
 8002256:	6839      	ldr	r1, [r7, #0]
 8002258:	68f8      	ldr	r0, [r7, #12]
 800225a:	f000 fa45 	bl	80026e8 <SPI_EndRxTransaction>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d002      	beq.n	800226a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2220      	movs	r2, #32
 8002268:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800226e:	2b00      	cmp	r3, #0
 8002270:	d002      	beq.n	8002278 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	75fb      	strb	r3, [r7, #23]
 8002276:	e000      	b.n	800227a <HAL_SPI_Receive+0x208>
  }

error :
 8002278:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2201      	movs	r2, #1
 800227e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800228a:	7dfb      	ldrb	r3, [r7, #23]
}
 800228c:	4618      	mov	r0, r3
 800228e:	3718      	adds	r7, #24
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b08c      	sub	sp, #48	; 0x30
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	607a      	str	r2, [r7, #4]
 80022a0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80022a2:	2301      	movs	r3, #1
 80022a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80022a6:	2300      	movs	r3, #0
 80022a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d101      	bne.n	80022ba <HAL_SPI_TransmitReceive+0x26>
 80022b6:	2302      	movs	r3, #2
 80022b8:	e18a      	b.n	80025d0 <HAL_SPI_TransmitReceive+0x33c>
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2201      	movs	r2, #1
 80022be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80022c2:	f7fe fd47 	bl	8000d54 <HAL_GetTick>
 80022c6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80022ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80022d8:	887b      	ldrh	r3, [r7, #2]
 80022da:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80022dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d00f      	beq.n	8002304 <HAL_SPI_TransmitReceive+0x70>
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80022ea:	d107      	bne.n	80022fc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d103      	bne.n	80022fc <HAL_SPI_TransmitReceive+0x68>
 80022f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80022f8:	2b04      	cmp	r3, #4
 80022fa:	d003      	beq.n	8002304 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80022fc:	2302      	movs	r3, #2
 80022fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002302:	e15b      	b.n	80025bc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d005      	beq.n	8002316 <HAL_SPI_TransmitReceive+0x82>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d002      	beq.n	8002316 <HAL_SPI_TransmitReceive+0x82>
 8002310:	887b      	ldrh	r3, [r7, #2]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d103      	bne.n	800231e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800231c:	e14e      	b.n	80025bc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b04      	cmp	r3, #4
 8002328:	d003      	beq.n	8002332 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2205      	movs	r2, #5
 800232e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2200      	movs	r2, #0
 8002336:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	887a      	ldrh	r2, [r7, #2]
 8002342:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	887a      	ldrh	r2, [r7, #2]
 8002348:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	68ba      	ldr	r2, [r7, #8]
 800234e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	887a      	ldrh	r2, [r7, #2]
 8002354:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	887a      	ldrh	r2, [r7, #2]
 800235a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2200      	movs	r2, #0
 8002360:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2200      	movs	r2, #0
 8002366:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002372:	2b40      	cmp	r3, #64	; 0x40
 8002374:	d007      	beq.n	8002386 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002384:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800238e:	d178      	bne.n	8002482 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d002      	beq.n	800239e <HAL_SPI_TransmitReceive+0x10a>
 8002398:	8b7b      	ldrh	r3, [r7, #26]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d166      	bne.n	800246c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a2:	881a      	ldrh	r2, [r3, #0]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ae:	1c9a      	adds	r2, r3, #2
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	3b01      	subs	r3, #1
 80023bc:	b29a      	uxth	r2, r3
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80023c2:	e053      	b.n	800246c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d11b      	bne.n	800240a <HAL_SPI_TransmitReceive+0x176>
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d016      	beq.n	800240a <HAL_SPI_TransmitReceive+0x176>
 80023dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d113      	bne.n	800240a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e6:	881a      	ldrh	r2, [r3, #0]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f2:	1c9a      	adds	r2, r3, #2
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	3b01      	subs	r3, #1
 8002400:	b29a      	uxth	r2, r3
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002406:	2300      	movs	r3, #0
 8002408:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	f003 0301 	and.w	r3, r3, #1
 8002414:	2b01      	cmp	r3, #1
 8002416:	d119      	bne.n	800244c <HAL_SPI_TransmitReceive+0x1b8>
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800241c:	b29b      	uxth	r3, r3
 800241e:	2b00      	cmp	r3, #0
 8002420:	d014      	beq.n	800244c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	68da      	ldr	r2, [r3, #12]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800242c:	b292      	uxth	r2, r2
 800242e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002434:	1c9a      	adds	r2, r3, #2
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800243e:	b29b      	uxth	r3, r3
 8002440:	3b01      	subs	r3, #1
 8002442:	b29a      	uxth	r2, r3
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002448:	2301      	movs	r3, #1
 800244a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800244c:	f7fe fc82 	bl	8000d54 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002458:	429a      	cmp	r2, r3
 800245a:	d807      	bhi.n	800246c <HAL_SPI_TransmitReceive+0x1d8>
 800245c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800245e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002462:	d003      	beq.n	800246c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800246a:	e0a7      	b.n	80025bc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002470:	b29b      	uxth	r3, r3
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1a6      	bne.n	80023c4 <HAL_SPI_TransmitReceive+0x130>
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800247a:	b29b      	uxth	r3, r3
 800247c:	2b00      	cmp	r3, #0
 800247e:	d1a1      	bne.n	80023c4 <HAL_SPI_TransmitReceive+0x130>
 8002480:	e07c      	b.n	800257c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d002      	beq.n	8002490 <HAL_SPI_TransmitReceive+0x1fc>
 800248a:	8b7b      	ldrh	r3, [r7, #26]
 800248c:	2b01      	cmp	r3, #1
 800248e:	d16b      	bne.n	8002568 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	330c      	adds	r3, #12
 800249a:	7812      	ldrb	r2, [r2, #0]
 800249c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a2:	1c5a      	adds	r2, r3, #1
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	3b01      	subs	r3, #1
 80024b0:	b29a      	uxth	r2, r3
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024b6:	e057      	b.n	8002568 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d11c      	bne.n	8002500 <HAL_SPI_TransmitReceive+0x26c>
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d017      	beq.n	8002500 <HAL_SPI_TransmitReceive+0x26c>
 80024d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d114      	bne.n	8002500 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	330c      	adds	r3, #12
 80024e0:	7812      	ldrb	r2, [r2, #0]
 80024e2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e8:	1c5a      	adds	r2, r3, #1
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	3b01      	subs	r3, #1
 80024f6:	b29a      	uxth	r2, r3
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80024fc:	2300      	movs	r3, #0
 80024fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	2b01      	cmp	r3, #1
 800250c:	d119      	bne.n	8002542 <HAL_SPI_TransmitReceive+0x2ae>
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002512:	b29b      	uxth	r3, r3
 8002514:	2b00      	cmp	r3, #0
 8002516:	d014      	beq.n	8002542 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	68da      	ldr	r2, [r3, #12]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002522:	b2d2      	uxtb	r2, r2
 8002524:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800252a:	1c5a      	adds	r2, r3, #1
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002534:	b29b      	uxth	r3, r3
 8002536:	3b01      	subs	r3, #1
 8002538:	b29a      	uxth	r2, r3
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800253e:	2301      	movs	r3, #1
 8002540:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002542:	f7fe fc07 	bl	8000d54 <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800254e:	429a      	cmp	r2, r3
 8002550:	d803      	bhi.n	800255a <HAL_SPI_TransmitReceive+0x2c6>
 8002552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002558:	d102      	bne.n	8002560 <HAL_SPI_TransmitReceive+0x2cc>
 800255a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800255c:	2b00      	cmp	r3, #0
 800255e:	d103      	bne.n	8002568 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002566:	e029      	b.n	80025bc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800256c:	b29b      	uxth	r3, r3
 800256e:	2b00      	cmp	r3, #0
 8002570:	d1a2      	bne.n	80024b8 <HAL_SPI_TransmitReceive+0x224>
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002576:	b29b      	uxth	r3, r3
 8002578:	2b00      	cmp	r3, #0
 800257a:	d19d      	bne.n	80024b8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800257c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800257e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002580:	68f8      	ldr	r0, [r7, #12]
 8002582:	f000 f917 	bl	80027b4 <SPI_EndRxTxTransaction>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d006      	beq.n	800259a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2220      	movs	r2, #32
 8002596:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002598:	e010      	b.n	80025bc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d10b      	bne.n	80025ba <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80025a2:	2300      	movs	r3, #0
 80025a4:	617b      	str	r3, [r7, #20]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	617b      	str	r3, [r7, #20]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	617b      	str	r3, [r7, #20]
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	e000      	b.n	80025bc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80025ba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80025cc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3730      	adds	r7, #48	; 0x30
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b088      	sub	sp, #32
 80025dc:	af00      	add	r7, sp, #0
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	60b9      	str	r1, [r7, #8]
 80025e2:	603b      	str	r3, [r7, #0]
 80025e4:	4613      	mov	r3, r2
 80025e6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80025e8:	f7fe fbb4 	bl	8000d54 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025f0:	1a9b      	subs	r3, r3, r2
 80025f2:	683a      	ldr	r2, [r7, #0]
 80025f4:	4413      	add	r3, r2
 80025f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80025f8:	f7fe fbac 	bl	8000d54 <HAL_GetTick>
 80025fc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80025fe:	4b39      	ldr	r3, [pc, #228]	; (80026e4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	015b      	lsls	r3, r3, #5
 8002604:	0d1b      	lsrs	r3, r3, #20
 8002606:	69fa      	ldr	r2, [r7, #28]
 8002608:	fb02 f303 	mul.w	r3, r2, r3
 800260c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800260e:	e054      	b.n	80026ba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002616:	d050      	beq.n	80026ba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002618:	f7fe fb9c 	bl	8000d54 <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	69fa      	ldr	r2, [r7, #28]
 8002624:	429a      	cmp	r2, r3
 8002626:	d902      	bls.n	800262e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d13d      	bne.n	80026aa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	685a      	ldr	r2, [r3, #4]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800263c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002646:	d111      	bne.n	800266c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002650:	d004      	beq.n	800265c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800265a:	d107      	bne.n	800266c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800266a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002670:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002674:	d10f      	bne.n	8002696 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002684:	601a      	str	r2, [r3, #0]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002694:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2201      	movs	r2, #1
 800269a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e017      	b.n	80026da <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d101      	bne.n	80026b4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80026b0:	2300      	movs	r3, #0
 80026b2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	3b01      	subs	r3, #1
 80026b8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	689a      	ldr	r2, [r3, #8]
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	4013      	ands	r3, r2
 80026c4:	68ba      	ldr	r2, [r7, #8]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	bf0c      	ite	eq
 80026ca:	2301      	moveq	r3, #1
 80026cc:	2300      	movne	r3, #0
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	461a      	mov	r2, r3
 80026d2:	79fb      	ldrb	r3, [r7, #7]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d19b      	bne.n	8002610 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3720      	adds	r7, #32
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	20000000 	.word	0x20000000

080026e8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b086      	sub	sp, #24
 80026ec:	af02      	add	r7, sp, #8
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026fc:	d111      	bne.n	8002722 <SPI_EndRxTransaction+0x3a>
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002706:	d004      	beq.n	8002712 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002710:	d107      	bne.n	8002722 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002720:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800272a:	d12a      	bne.n	8002782 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002734:	d012      	beq.n	800275c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	9300      	str	r3, [sp, #0]
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	2200      	movs	r2, #0
 800273e:	2180      	movs	r1, #128	; 0x80
 8002740:	68f8      	ldr	r0, [r7, #12]
 8002742:	f7ff ff49 	bl	80025d8 <SPI_WaitFlagStateUntilTimeout>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d02d      	beq.n	80027a8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002750:	f043 0220 	orr.w	r2, r3, #32
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e026      	b.n	80027aa <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	9300      	str	r3, [sp, #0]
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	2200      	movs	r2, #0
 8002764:	2101      	movs	r1, #1
 8002766:	68f8      	ldr	r0, [r7, #12]
 8002768:	f7ff ff36 	bl	80025d8 <SPI_WaitFlagStateUntilTimeout>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d01a      	beq.n	80027a8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002776:	f043 0220 	orr.w	r2, r3, #32
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e013      	b.n	80027aa <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	9300      	str	r3, [sp, #0]
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	2200      	movs	r2, #0
 800278a:	2101      	movs	r1, #1
 800278c:	68f8      	ldr	r0, [r7, #12]
 800278e:	f7ff ff23 	bl	80025d8 <SPI_WaitFlagStateUntilTimeout>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d007      	beq.n	80027a8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800279c:	f043 0220 	orr.w	r2, r3, #32
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e000      	b.n	80027aa <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3710      	adds	r7, #16
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
	...

080027b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b088      	sub	sp, #32
 80027b8:	af02      	add	r7, sp, #8
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80027c0:	4b1b      	ldr	r3, [pc, #108]	; (8002830 <SPI_EndRxTxTransaction+0x7c>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a1b      	ldr	r2, [pc, #108]	; (8002834 <SPI_EndRxTxTransaction+0x80>)
 80027c6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ca:	0d5b      	lsrs	r3, r3, #21
 80027cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80027d0:	fb02 f303 	mul.w	r3, r2, r3
 80027d4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027de:	d112      	bne.n	8002806 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	9300      	str	r3, [sp, #0]
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	2200      	movs	r2, #0
 80027e8:	2180      	movs	r1, #128	; 0x80
 80027ea:	68f8      	ldr	r0, [r7, #12]
 80027ec:	f7ff fef4 	bl	80025d8 <SPI_WaitFlagStateUntilTimeout>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d016      	beq.n	8002824 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027fa:	f043 0220 	orr.w	r2, r3, #32
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e00f      	b.n	8002826 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d00a      	beq.n	8002822 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	3b01      	subs	r3, #1
 8002810:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800281c:	2b80      	cmp	r3, #128	; 0x80
 800281e:	d0f2      	beq.n	8002806 <SPI_EndRxTxTransaction+0x52>
 8002820:	e000      	b.n	8002824 <SPI_EndRxTxTransaction+0x70>
        break;
 8002822:	bf00      	nop
  }

  return HAL_OK;
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	3718      	adds	r7, #24
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	20000000 	.word	0x20000000
 8002834:	165e9f81 	.word	0x165e9f81

08002838 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d101      	bne.n	800284a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e03f      	b.n	80028ca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002850:	b2db      	uxtb	r3, r3
 8002852:	2b00      	cmp	r3, #0
 8002854:	d106      	bne.n	8002864 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f7fe f8be 	bl	80009e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2224      	movs	r2, #36	; 0x24
 8002868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	68da      	ldr	r2, [r3, #12]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800287a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f000 f929 	bl	8002ad4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	691a      	ldr	r2, [r3, #16]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002890:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	695a      	ldr	r2, [r3, #20]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68da      	ldr	r2, [r3, #12]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2220      	movs	r2, #32
 80028bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2220      	movs	r2, #32
 80028c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b08a      	sub	sp, #40	; 0x28
 80028d6:	af02      	add	r7, sp, #8
 80028d8:	60f8      	str	r0, [r7, #12]
 80028da:	60b9      	str	r1, [r7, #8]
 80028dc:	603b      	str	r3, [r7, #0]
 80028de:	4613      	mov	r3, r2
 80028e0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80028e2:	2300      	movs	r3, #0
 80028e4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	2b20      	cmp	r3, #32
 80028f0:	d17c      	bne.n	80029ec <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d002      	beq.n	80028fe <HAL_UART_Transmit+0x2c>
 80028f8:	88fb      	ldrh	r3, [r7, #6]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d101      	bne.n	8002902 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e075      	b.n	80029ee <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002908:	2b01      	cmp	r3, #1
 800290a:	d101      	bne.n	8002910 <HAL_UART_Transmit+0x3e>
 800290c:	2302      	movs	r3, #2
 800290e:	e06e      	b.n	80029ee <HAL_UART_Transmit+0x11c>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2200      	movs	r2, #0
 800291c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2221      	movs	r2, #33	; 0x21
 8002922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002926:	f7fe fa15 	bl	8000d54 <HAL_GetTick>
 800292a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	88fa      	ldrh	r2, [r7, #6]
 8002930:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	88fa      	ldrh	r2, [r7, #6]
 8002936:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002940:	d108      	bne.n	8002954 <HAL_UART_Transmit+0x82>
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d104      	bne.n	8002954 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800294a:	2300      	movs	r3, #0
 800294c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	61bb      	str	r3, [r7, #24]
 8002952:	e003      	b.n	800295c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002958:	2300      	movs	r3, #0
 800295a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2200      	movs	r2, #0
 8002960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002964:	e02a      	b.n	80029bc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	9300      	str	r3, [sp, #0]
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	2200      	movs	r2, #0
 800296e:	2180      	movs	r1, #128	; 0x80
 8002970:	68f8      	ldr	r0, [r7, #12]
 8002972:	f000 f840 	bl	80029f6 <UART_WaitOnFlagUntilTimeout>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d001      	beq.n	8002980 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e036      	b.n	80029ee <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d10b      	bne.n	800299e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	881b      	ldrh	r3, [r3, #0]
 800298a:	461a      	mov	r2, r3
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002994:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	3302      	adds	r3, #2
 800299a:	61bb      	str	r3, [r7, #24]
 800299c:	e007      	b.n	80029ae <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	781a      	ldrb	r2, [r3, #0]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	3301      	adds	r3, #1
 80029ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	3b01      	subs	r3, #1
 80029b6:	b29a      	uxth	r2, r3
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d1cf      	bne.n	8002966 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	9300      	str	r3, [sp, #0]
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	2200      	movs	r2, #0
 80029ce:	2140      	movs	r1, #64	; 0x40
 80029d0:	68f8      	ldr	r0, [r7, #12]
 80029d2:	f000 f810 	bl	80029f6 <UART_WaitOnFlagUntilTimeout>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d001      	beq.n	80029e0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e006      	b.n	80029ee <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2220      	movs	r2, #32
 80029e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80029e8:	2300      	movs	r3, #0
 80029ea:	e000      	b.n	80029ee <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80029ec:	2302      	movs	r3, #2
  }
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3720      	adds	r7, #32
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b090      	sub	sp, #64	; 0x40
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	60f8      	str	r0, [r7, #12]
 80029fe:	60b9      	str	r1, [r7, #8]
 8002a00:	603b      	str	r3, [r7, #0]
 8002a02:	4613      	mov	r3, r2
 8002a04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a06:	e050      	b.n	8002aaa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a0e:	d04c      	beq.n	8002aaa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002a10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d007      	beq.n	8002a26 <UART_WaitOnFlagUntilTimeout+0x30>
 8002a16:	f7fe f99d 	bl	8000d54 <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d241      	bcs.n	8002aaa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	330c      	adds	r3, #12
 8002a2c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a30:	e853 3f00 	ldrex	r3, [r3]
 8002a34:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a38:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	330c      	adds	r3, #12
 8002a44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a46:	637a      	str	r2, [r7, #52]	; 0x34
 8002a48:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a4a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a4e:	e841 2300 	strex	r3, r2, [r1]
 8002a52:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1e5      	bne.n	8002a26 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	3314      	adds	r3, #20
 8002a60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	e853 3f00 	ldrex	r3, [r3]
 8002a68:	613b      	str	r3, [r7, #16]
   return(result);
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	f023 0301 	bic.w	r3, r3, #1
 8002a70:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	3314      	adds	r3, #20
 8002a78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a7a:	623a      	str	r2, [r7, #32]
 8002a7c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a7e:	69f9      	ldr	r1, [r7, #28]
 8002a80:	6a3a      	ldr	r2, [r7, #32]
 8002a82:	e841 2300 	strex	r3, r2, [r1]
 8002a86:	61bb      	str	r3, [r7, #24]
   return(result);
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d1e5      	bne.n	8002a5a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2220      	movs	r2, #32
 8002a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2220      	movs	r2, #32
 8002a9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e00f      	b.n	8002aca <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	68ba      	ldr	r2, [r7, #8]
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	bf0c      	ite	eq
 8002aba:	2301      	moveq	r3, #1
 8002abc:	2300      	movne	r3, #0
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	79fb      	ldrb	r3, [r7, #7]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d09f      	beq.n	8002a08 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3740      	adds	r7, #64	; 0x40
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
	...

08002ad4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ad4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ad8:	b0c0      	sub	sp, #256	; 0x100
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	691b      	ldr	r3, [r3, #16]
 8002ae8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002af0:	68d9      	ldr	r1, [r3, #12]
 8002af2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	ea40 0301 	orr.w	r3, r0, r1
 8002afc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002afe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b02:	689a      	ldr	r2, [r3, #8]
 8002b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	431a      	orrs	r2, r3
 8002b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	431a      	orrs	r2, r3
 8002b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b18:	69db      	ldr	r3, [r3, #28]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002b2c:	f021 010c 	bic.w	r1, r1, #12
 8002b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002b3a:	430b      	orrs	r3, r1
 8002b3c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b4e:	6999      	ldr	r1, [r3, #24]
 8002b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	ea40 0301 	orr.w	r3, r0, r1
 8002b5a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	4b8f      	ldr	r3, [pc, #572]	; (8002da0 <UART_SetConfig+0x2cc>)
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d005      	beq.n	8002b74 <UART_SetConfig+0xa0>
 8002b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	4b8d      	ldr	r3, [pc, #564]	; (8002da4 <UART_SetConfig+0x2d0>)
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d104      	bne.n	8002b7e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b74:	f7ff f8a4 	bl	8001cc0 <HAL_RCC_GetPCLK2Freq>
 8002b78:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002b7c:	e003      	b.n	8002b86 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002b7e:	f7ff f88b 	bl	8001c98 <HAL_RCC_GetPCLK1Freq>
 8002b82:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b8a:	69db      	ldr	r3, [r3, #28]
 8002b8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b90:	f040 810c 	bne.w	8002dac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002b94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002b9e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002ba2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002ba6:	4622      	mov	r2, r4
 8002ba8:	462b      	mov	r3, r5
 8002baa:	1891      	adds	r1, r2, r2
 8002bac:	65b9      	str	r1, [r7, #88]	; 0x58
 8002bae:	415b      	adcs	r3, r3
 8002bb0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002bb2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002bb6:	4621      	mov	r1, r4
 8002bb8:	eb12 0801 	adds.w	r8, r2, r1
 8002bbc:	4629      	mov	r1, r5
 8002bbe:	eb43 0901 	adc.w	r9, r3, r1
 8002bc2:	f04f 0200 	mov.w	r2, #0
 8002bc6:	f04f 0300 	mov.w	r3, #0
 8002bca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bd2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002bd6:	4690      	mov	r8, r2
 8002bd8:	4699      	mov	r9, r3
 8002bda:	4623      	mov	r3, r4
 8002bdc:	eb18 0303 	adds.w	r3, r8, r3
 8002be0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002be4:	462b      	mov	r3, r5
 8002be6:	eb49 0303 	adc.w	r3, r9, r3
 8002bea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002bfa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002bfe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002c02:	460b      	mov	r3, r1
 8002c04:	18db      	adds	r3, r3, r3
 8002c06:	653b      	str	r3, [r7, #80]	; 0x50
 8002c08:	4613      	mov	r3, r2
 8002c0a:	eb42 0303 	adc.w	r3, r2, r3
 8002c0e:	657b      	str	r3, [r7, #84]	; 0x54
 8002c10:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002c14:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002c18:	f7fd fb3a 	bl	8000290 <__aeabi_uldivmod>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	460b      	mov	r3, r1
 8002c20:	4b61      	ldr	r3, [pc, #388]	; (8002da8 <UART_SetConfig+0x2d4>)
 8002c22:	fba3 2302 	umull	r2, r3, r3, r2
 8002c26:	095b      	lsrs	r3, r3, #5
 8002c28:	011c      	lsls	r4, r3, #4
 8002c2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c34:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002c38:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002c3c:	4642      	mov	r2, r8
 8002c3e:	464b      	mov	r3, r9
 8002c40:	1891      	adds	r1, r2, r2
 8002c42:	64b9      	str	r1, [r7, #72]	; 0x48
 8002c44:	415b      	adcs	r3, r3
 8002c46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c48:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002c4c:	4641      	mov	r1, r8
 8002c4e:	eb12 0a01 	adds.w	sl, r2, r1
 8002c52:	4649      	mov	r1, r9
 8002c54:	eb43 0b01 	adc.w	fp, r3, r1
 8002c58:	f04f 0200 	mov.w	r2, #0
 8002c5c:	f04f 0300 	mov.w	r3, #0
 8002c60:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c64:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c6c:	4692      	mov	sl, r2
 8002c6e:	469b      	mov	fp, r3
 8002c70:	4643      	mov	r3, r8
 8002c72:	eb1a 0303 	adds.w	r3, sl, r3
 8002c76:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002c7a:	464b      	mov	r3, r9
 8002c7c:	eb4b 0303 	adc.w	r3, fp, r3
 8002c80:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002c90:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002c94:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002c98:	460b      	mov	r3, r1
 8002c9a:	18db      	adds	r3, r3, r3
 8002c9c:	643b      	str	r3, [r7, #64]	; 0x40
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	eb42 0303 	adc.w	r3, r2, r3
 8002ca4:	647b      	str	r3, [r7, #68]	; 0x44
 8002ca6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002caa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002cae:	f7fd faef 	bl	8000290 <__aeabi_uldivmod>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	4611      	mov	r1, r2
 8002cb8:	4b3b      	ldr	r3, [pc, #236]	; (8002da8 <UART_SetConfig+0x2d4>)
 8002cba:	fba3 2301 	umull	r2, r3, r3, r1
 8002cbe:	095b      	lsrs	r3, r3, #5
 8002cc0:	2264      	movs	r2, #100	; 0x64
 8002cc2:	fb02 f303 	mul.w	r3, r2, r3
 8002cc6:	1acb      	subs	r3, r1, r3
 8002cc8:	00db      	lsls	r3, r3, #3
 8002cca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002cce:	4b36      	ldr	r3, [pc, #216]	; (8002da8 <UART_SetConfig+0x2d4>)
 8002cd0:	fba3 2302 	umull	r2, r3, r3, r2
 8002cd4:	095b      	lsrs	r3, r3, #5
 8002cd6:	005b      	lsls	r3, r3, #1
 8002cd8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002cdc:	441c      	add	r4, r3
 8002cde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002ce8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002cec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002cf0:	4642      	mov	r2, r8
 8002cf2:	464b      	mov	r3, r9
 8002cf4:	1891      	adds	r1, r2, r2
 8002cf6:	63b9      	str	r1, [r7, #56]	; 0x38
 8002cf8:	415b      	adcs	r3, r3
 8002cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cfc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002d00:	4641      	mov	r1, r8
 8002d02:	1851      	adds	r1, r2, r1
 8002d04:	6339      	str	r1, [r7, #48]	; 0x30
 8002d06:	4649      	mov	r1, r9
 8002d08:	414b      	adcs	r3, r1
 8002d0a:	637b      	str	r3, [r7, #52]	; 0x34
 8002d0c:	f04f 0200 	mov.w	r2, #0
 8002d10:	f04f 0300 	mov.w	r3, #0
 8002d14:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002d18:	4659      	mov	r1, fp
 8002d1a:	00cb      	lsls	r3, r1, #3
 8002d1c:	4651      	mov	r1, sl
 8002d1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d22:	4651      	mov	r1, sl
 8002d24:	00ca      	lsls	r2, r1, #3
 8002d26:	4610      	mov	r0, r2
 8002d28:	4619      	mov	r1, r3
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	4642      	mov	r2, r8
 8002d2e:	189b      	adds	r3, r3, r2
 8002d30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d34:	464b      	mov	r3, r9
 8002d36:	460a      	mov	r2, r1
 8002d38:	eb42 0303 	adc.w	r3, r2, r3
 8002d3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002d4c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002d50:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002d54:	460b      	mov	r3, r1
 8002d56:	18db      	adds	r3, r3, r3
 8002d58:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	eb42 0303 	adc.w	r3, r2, r3
 8002d60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d66:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002d6a:	f7fd fa91 	bl	8000290 <__aeabi_uldivmod>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	460b      	mov	r3, r1
 8002d72:	4b0d      	ldr	r3, [pc, #52]	; (8002da8 <UART_SetConfig+0x2d4>)
 8002d74:	fba3 1302 	umull	r1, r3, r3, r2
 8002d78:	095b      	lsrs	r3, r3, #5
 8002d7a:	2164      	movs	r1, #100	; 0x64
 8002d7c:	fb01 f303 	mul.w	r3, r1, r3
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	00db      	lsls	r3, r3, #3
 8002d84:	3332      	adds	r3, #50	; 0x32
 8002d86:	4a08      	ldr	r2, [pc, #32]	; (8002da8 <UART_SetConfig+0x2d4>)
 8002d88:	fba2 2303 	umull	r2, r3, r2, r3
 8002d8c:	095b      	lsrs	r3, r3, #5
 8002d8e:	f003 0207 	and.w	r2, r3, #7
 8002d92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4422      	add	r2, r4
 8002d9a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002d9c:	e105      	b.n	8002faa <UART_SetConfig+0x4d6>
 8002d9e:	bf00      	nop
 8002da0:	40011000 	.word	0x40011000
 8002da4:	40011400 	.word	0x40011400
 8002da8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002dac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002db0:	2200      	movs	r2, #0
 8002db2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002db6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002dba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002dbe:	4642      	mov	r2, r8
 8002dc0:	464b      	mov	r3, r9
 8002dc2:	1891      	adds	r1, r2, r2
 8002dc4:	6239      	str	r1, [r7, #32]
 8002dc6:	415b      	adcs	r3, r3
 8002dc8:	627b      	str	r3, [r7, #36]	; 0x24
 8002dca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002dce:	4641      	mov	r1, r8
 8002dd0:	1854      	adds	r4, r2, r1
 8002dd2:	4649      	mov	r1, r9
 8002dd4:	eb43 0501 	adc.w	r5, r3, r1
 8002dd8:	f04f 0200 	mov.w	r2, #0
 8002ddc:	f04f 0300 	mov.w	r3, #0
 8002de0:	00eb      	lsls	r3, r5, #3
 8002de2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002de6:	00e2      	lsls	r2, r4, #3
 8002de8:	4614      	mov	r4, r2
 8002dea:	461d      	mov	r5, r3
 8002dec:	4643      	mov	r3, r8
 8002dee:	18e3      	adds	r3, r4, r3
 8002df0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002df4:	464b      	mov	r3, r9
 8002df6:	eb45 0303 	adc.w	r3, r5, r3
 8002dfa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002e0a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002e0e:	f04f 0200 	mov.w	r2, #0
 8002e12:	f04f 0300 	mov.w	r3, #0
 8002e16:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002e1a:	4629      	mov	r1, r5
 8002e1c:	008b      	lsls	r3, r1, #2
 8002e1e:	4621      	mov	r1, r4
 8002e20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e24:	4621      	mov	r1, r4
 8002e26:	008a      	lsls	r2, r1, #2
 8002e28:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002e2c:	f7fd fa30 	bl	8000290 <__aeabi_uldivmod>
 8002e30:	4602      	mov	r2, r0
 8002e32:	460b      	mov	r3, r1
 8002e34:	4b60      	ldr	r3, [pc, #384]	; (8002fb8 <UART_SetConfig+0x4e4>)
 8002e36:	fba3 2302 	umull	r2, r3, r3, r2
 8002e3a:	095b      	lsrs	r3, r3, #5
 8002e3c:	011c      	lsls	r4, r3, #4
 8002e3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e42:	2200      	movs	r2, #0
 8002e44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002e48:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002e4c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002e50:	4642      	mov	r2, r8
 8002e52:	464b      	mov	r3, r9
 8002e54:	1891      	adds	r1, r2, r2
 8002e56:	61b9      	str	r1, [r7, #24]
 8002e58:	415b      	adcs	r3, r3
 8002e5a:	61fb      	str	r3, [r7, #28]
 8002e5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e60:	4641      	mov	r1, r8
 8002e62:	1851      	adds	r1, r2, r1
 8002e64:	6139      	str	r1, [r7, #16]
 8002e66:	4649      	mov	r1, r9
 8002e68:	414b      	adcs	r3, r1
 8002e6a:	617b      	str	r3, [r7, #20]
 8002e6c:	f04f 0200 	mov.w	r2, #0
 8002e70:	f04f 0300 	mov.w	r3, #0
 8002e74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e78:	4659      	mov	r1, fp
 8002e7a:	00cb      	lsls	r3, r1, #3
 8002e7c:	4651      	mov	r1, sl
 8002e7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e82:	4651      	mov	r1, sl
 8002e84:	00ca      	lsls	r2, r1, #3
 8002e86:	4610      	mov	r0, r2
 8002e88:	4619      	mov	r1, r3
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	4642      	mov	r2, r8
 8002e8e:	189b      	adds	r3, r3, r2
 8002e90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002e94:	464b      	mov	r3, r9
 8002e96:	460a      	mov	r2, r1
 8002e98:	eb42 0303 	adc.w	r3, r2, r3
 8002e9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	67bb      	str	r3, [r7, #120]	; 0x78
 8002eaa:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002eac:	f04f 0200 	mov.w	r2, #0
 8002eb0:	f04f 0300 	mov.w	r3, #0
 8002eb4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002eb8:	4649      	mov	r1, r9
 8002eba:	008b      	lsls	r3, r1, #2
 8002ebc:	4641      	mov	r1, r8
 8002ebe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ec2:	4641      	mov	r1, r8
 8002ec4:	008a      	lsls	r2, r1, #2
 8002ec6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002eca:	f7fd f9e1 	bl	8000290 <__aeabi_uldivmod>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	4b39      	ldr	r3, [pc, #228]	; (8002fb8 <UART_SetConfig+0x4e4>)
 8002ed4:	fba3 1302 	umull	r1, r3, r3, r2
 8002ed8:	095b      	lsrs	r3, r3, #5
 8002eda:	2164      	movs	r1, #100	; 0x64
 8002edc:	fb01 f303 	mul.w	r3, r1, r3
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	011b      	lsls	r3, r3, #4
 8002ee4:	3332      	adds	r3, #50	; 0x32
 8002ee6:	4a34      	ldr	r2, [pc, #208]	; (8002fb8 <UART_SetConfig+0x4e4>)
 8002ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8002eec:	095b      	lsrs	r3, r3, #5
 8002eee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ef2:	441c      	add	r4, r3
 8002ef4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ef8:	2200      	movs	r2, #0
 8002efa:	673b      	str	r3, [r7, #112]	; 0x70
 8002efc:	677a      	str	r2, [r7, #116]	; 0x74
 8002efe:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002f02:	4642      	mov	r2, r8
 8002f04:	464b      	mov	r3, r9
 8002f06:	1891      	adds	r1, r2, r2
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	415b      	adcs	r3, r3
 8002f0c:	60fb      	str	r3, [r7, #12]
 8002f0e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f12:	4641      	mov	r1, r8
 8002f14:	1851      	adds	r1, r2, r1
 8002f16:	6039      	str	r1, [r7, #0]
 8002f18:	4649      	mov	r1, r9
 8002f1a:	414b      	adcs	r3, r1
 8002f1c:	607b      	str	r3, [r7, #4]
 8002f1e:	f04f 0200 	mov.w	r2, #0
 8002f22:	f04f 0300 	mov.w	r3, #0
 8002f26:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002f2a:	4659      	mov	r1, fp
 8002f2c:	00cb      	lsls	r3, r1, #3
 8002f2e:	4651      	mov	r1, sl
 8002f30:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f34:	4651      	mov	r1, sl
 8002f36:	00ca      	lsls	r2, r1, #3
 8002f38:	4610      	mov	r0, r2
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	4642      	mov	r2, r8
 8002f40:	189b      	adds	r3, r3, r2
 8002f42:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f44:	464b      	mov	r3, r9
 8002f46:	460a      	mov	r2, r1
 8002f48:	eb42 0303 	adc.w	r3, r2, r3
 8002f4c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002f4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	663b      	str	r3, [r7, #96]	; 0x60
 8002f58:	667a      	str	r2, [r7, #100]	; 0x64
 8002f5a:	f04f 0200 	mov.w	r2, #0
 8002f5e:	f04f 0300 	mov.w	r3, #0
 8002f62:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002f66:	4649      	mov	r1, r9
 8002f68:	008b      	lsls	r3, r1, #2
 8002f6a:	4641      	mov	r1, r8
 8002f6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f70:	4641      	mov	r1, r8
 8002f72:	008a      	lsls	r2, r1, #2
 8002f74:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002f78:	f7fd f98a 	bl	8000290 <__aeabi_uldivmod>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	460b      	mov	r3, r1
 8002f80:	4b0d      	ldr	r3, [pc, #52]	; (8002fb8 <UART_SetConfig+0x4e4>)
 8002f82:	fba3 1302 	umull	r1, r3, r3, r2
 8002f86:	095b      	lsrs	r3, r3, #5
 8002f88:	2164      	movs	r1, #100	; 0x64
 8002f8a:	fb01 f303 	mul.w	r3, r1, r3
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	011b      	lsls	r3, r3, #4
 8002f92:	3332      	adds	r3, #50	; 0x32
 8002f94:	4a08      	ldr	r2, [pc, #32]	; (8002fb8 <UART_SetConfig+0x4e4>)
 8002f96:	fba2 2303 	umull	r2, r3, r2, r3
 8002f9a:	095b      	lsrs	r3, r3, #5
 8002f9c:	f003 020f 	and.w	r2, r3, #15
 8002fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4422      	add	r2, r4
 8002fa8:	609a      	str	r2, [r3, #8]
}
 8002faa:	bf00      	nop
 8002fac:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fb6:	bf00      	nop
 8002fb8:	51eb851f 	.word	0x51eb851f

08002fbc <getSync>:

uint8_t m_type;
uint8_t m_length;
bool m_cs;

int16_t getSync() {
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
	uint8_t i, j, c, cprev;
	int16_t res;
	uint16_t start;

	// parse bytes until we find sync
	for (i = j = 0, cprev = 0; true; i++) {
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	73bb      	strb	r3, [r7, #14]
 8002fc6:	7bbb      	ldrb	r3, [r7, #14]
 8002fc8:	73fb      	strb	r3, [r7, #15]
 8002fca:	2300      	movs	r3, #0
 8002fcc:	737b      	strb	r3, [r7, #13]
		res = recv(&c, 1, NULL);
 8002fce:	1cfb      	adds	r3, r7, #3
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	2101      	movs	r1, #1
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f000 fac5 	bl	8003564 <recv>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	80fb      	strh	r3, [r7, #6]
		if (res >= PIXY_RESULT_OK) {
 8002fde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	db1f      	blt.n	8003026 <getSync+0x6a>
			// since we're using little endian, previous byte is least significant byte
			start = cprev;
 8002fe6:	7b7b      	ldrb	r3, [r7, #13]
 8002fe8:	80bb      	strh	r3, [r7, #4]
			// current byte is most significant byte
			start |= c << 8;
 8002fea:	78fb      	ldrb	r3, [r7, #3]
 8002fec:	021b      	lsls	r3, r3, #8
 8002fee:	b21a      	sxth	r2, r3
 8002ff0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	b21b      	sxth	r3, r3
 8002ff8:	80bb      	strh	r3, [r7, #4]
			cprev = c;
 8002ffa:	78fb      	ldrb	r3, [r7, #3]
 8002ffc:	737b      	strb	r3, [r7, #13]
			if (start == PIXY_CHECKSUM_SYNC) {
 8002ffe:	88bb      	ldrh	r3, [r7, #4]
 8003000:	f24c 12af 	movw	r2, #49583	; 0xc1af
 8003004:	4293      	cmp	r3, r2
 8003006:	d104      	bne.n	8003012 <getSync+0x56>
				m_cs = true;
 8003008:	4b19      	ldr	r3, [pc, #100]	; (8003070 <getSync+0xb4>)
 800300a:	2201      	movs	r2, #1
 800300c:	701a      	strb	r2, [r3, #0]
				return PIXY_RESULT_OK;
 800300e:	2300      	movs	r3, #0
 8003010:	e029      	b.n	8003066 <getSync+0xaa>
			}
			if (start == PIXY_NO_CHECKSUM_SYNC) {
 8003012:	88bb      	ldrh	r3, [r7, #4]
 8003014:	f24c 12ae 	movw	r2, #49582	; 0xc1ae
 8003018:	4293      	cmp	r3, r2
 800301a:	d104      	bne.n	8003026 <getSync+0x6a>
				m_cs = false;
 800301c:	4b14      	ldr	r3, [pc, #80]	; (8003070 <getSync+0xb4>)
 800301e:	2200      	movs	r2, #0
 8003020:	701a      	strb	r2, [r3, #0]
				return PIXY_RESULT_OK;
 8003022:	2300      	movs	r3, #0
 8003024:	e01f      	b.n	8003066 <getSync+0xaa>
			}
		}
		// If we've read some bytes and no sync, then wait and try again.
		// And do that several more times before we give up.
		// Pixy guarantees to respond within 100us.
		if (i >= 4) {
 8003026:	7bfb      	ldrb	r3, [r7, #15]
 8003028:	2b03      	cmp	r3, #3
 800302a:	d918      	bls.n	800305e <getSync+0xa2>
			if (j >= 4) {
 800302c:	7bbb      	ldrb	r3, [r7, #14]
 800302e:	2b03      	cmp	r3, #3
 8003030:	d905      	bls.n	800303e <getSync+0x82>
#ifdef PIXY_DEBUG
				printf("error: no response\r\n");
 8003032:	4810      	ldr	r0, [pc, #64]	; (8003074 <getSync+0xb8>)
 8003034:	f000 fcbc 	bl	80039b0 <puts>
#endif
				return PIXY_RESULT_ERROR;
 8003038:	f04f 33ff 	mov.w	r3, #4294967295
 800303c:	e013      	b.n	8003066 <getSync+0xaa>
			}

			//delay_us(25);
			for (int i = 0; i < 1800 * 25; i++)
 800303e:	2300      	movs	r3, #0
 8003040:	60bb      	str	r3, [r7, #8]
 8003042:	e002      	b.n	800304a <getSync+0x8e>
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	3301      	adds	r3, #1
 8003048:	60bb      	str	r3, [r7, #8]
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 8003050:	4293      	cmp	r3, r2
 8003052:	ddf7      	ble.n	8003044 <getSync+0x88>
				;

			j++;
 8003054:	7bbb      	ldrb	r3, [r7, #14]
 8003056:	3301      	adds	r3, #1
 8003058:	73bb      	strb	r3, [r7, #14]
			i = 0;
 800305a:	2300      	movs	r3, #0
 800305c:	73fb      	strb	r3, [r7, #15]
	for (i = j = 0, cprev = 0; true; i++) {
 800305e:	7bfb      	ldrb	r3, [r7, #15]
 8003060:	3301      	adds	r3, #1
 8003062:	73fb      	strb	r3, [r7, #15]
		res = recv(&c, 1, NULL);
 8003064:	e7b3      	b.n	8002fce <getSync+0x12>
		}
	}
}
 8003066:	4618      	mov	r0, r3
 8003068:	3710      	adds	r7, #16
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	2000014a 	.word	0x2000014a
 8003074:	08004ac0 	.word	0x08004ac0

08003078 <recvPacket>:

int16_t recvPacket() {
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
	uint16_t csCalc, csSerial;
	int16_t res;

	res = getSync();
 800307e:	f7ff ff9d 	bl	8002fbc <getSync>
 8003082:	4603      	mov	r3, r0
 8003084:	80fb      	strh	r3, [r7, #6]

	if (res < 0)
 8003086:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800308a:	2b00      	cmp	r3, #0
 800308c:	da02      	bge.n	8003094 <recvPacket+0x1c>
		return res;
 800308e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003092:	e068      	b.n	8003166 <recvPacket+0xee>

	if (m_cs) {
 8003094:	4b36      	ldr	r3, [pc, #216]	; (8003170 <recvPacket+0xf8>)
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d038      	beq.n	800310e <recvPacket+0x96>
		res = recv(m_buf, 4, NULL);
 800309c:	4b35      	ldr	r3, [pc, #212]	; (8003174 <recvPacket+0xfc>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2200      	movs	r2, #0
 80030a2:	2104      	movs	r1, #4
 80030a4:	4618      	mov	r0, r3
 80030a6:	f000 fa5d 	bl	8003564 <recv>
 80030aa:	4603      	mov	r3, r0
 80030ac:	80fb      	strh	r3, [r7, #6]

		if (res < 0)
 80030ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	da02      	bge.n	80030bc <recvPacket+0x44>
			return res;
 80030b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030ba:	e054      	b.n	8003166 <recvPacket+0xee>

		m_type = m_buf[0];
 80030bc:	4b2d      	ldr	r3, [pc, #180]	; (8003174 <recvPacket+0xfc>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	781a      	ldrb	r2, [r3, #0]
 80030c2:	4b2d      	ldr	r3, [pc, #180]	; (8003178 <recvPacket+0x100>)
 80030c4:	701a      	strb	r2, [r3, #0]
		m_length = m_buf[1];
 80030c6:	4b2b      	ldr	r3, [pc, #172]	; (8003174 <recvPacket+0xfc>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	785a      	ldrb	r2, [r3, #1]
 80030cc:	4b2b      	ldr	r3, [pc, #172]	; (800317c <recvPacket+0x104>)
 80030ce:	701a      	strb	r2, [r3, #0]

		csSerial = *(uint16_t*) &m_buf[2];
 80030d0:	4b28      	ldr	r3, [pc, #160]	; (8003174 <recvPacket+0xfc>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	885b      	ldrh	r3, [r3, #2]
 80030d6:	80bb      	strh	r3, [r7, #4]

		res = recv(m_buf, m_length, &csCalc);
 80030d8:	4b26      	ldr	r3, [pc, #152]	; (8003174 <recvPacket+0xfc>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a27      	ldr	r2, [pc, #156]	; (800317c <recvPacket+0x104>)
 80030de:	7811      	ldrb	r1, [r2, #0]
 80030e0:	1cba      	adds	r2, r7, #2
 80030e2:	4618      	mov	r0, r3
 80030e4:	f000 fa3e 	bl	8003564 <recv>
 80030e8:	4603      	mov	r3, r0
 80030ea:	80fb      	strh	r3, [r7, #6]

		if (res < 0)
 80030ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	da02      	bge.n	80030fa <recvPacket+0x82>
			return res;
 80030f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030f8:	e035      	b.n	8003166 <recvPacket+0xee>

		if (csSerial != csCalc) {
 80030fa:	887b      	ldrh	r3, [r7, #2]
 80030fc:	88ba      	ldrh	r2, [r7, #4]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d030      	beq.n	8003164 <recvPacket+0xec>
#ifdef PIXY_DEBUG
			printf("error: checksum\r\n");
 8003102:	481f      	ldr	r0, [pc, #124]	; (8003180 <recvPacket+0x108>)
 8003104:	f000 fc54 	bl	80039b0 <puts>
#endif
			return PIXY_RESULT_CHECKSUM_ERROR;
 8003108:	f06f 0302 	mvn.w	r3, #2
 800310c:	e02b      	b.n	8003166 <recvPacket+0xee>
		}
	} else {
		res = recv(m_buf, 2, NULL);
 800310e:	4b19      	ldr	r3, [pc, #100]	; (8003174 <recvPacket+0xfc>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2200      	movs	r2, #0
 8003114:	2102      	movs	r1, #2
 8003116:	4618      	mov	r0, r3
 8003118:	f000 fa24 	bl	8003564 <recv>
 800311c:	4603      	mov	r3, r0
 800311e:	80fb      	strh	r3, [r7, #6]

		if (res < 0)
 8003120:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003124:	2b00      	cmp	r3, #0
 8003126:	da02      	bge.n	800312e <recvPacket+0xb6>
			return res;
 8003128:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800312c:	e01b      	b.n	8003166 <recvPacket+0xee>

		m_type = m_buf[0];
 800312e:	4b11      	ldr	r3, [pc, #68]	; (8003174 <recvPacket+0xfc>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	781a      	ldrb	r2, [r3, #0]
 8003134:	4b10      	ldr	r3, [pc, #64]	; (8003178 <recvPacket+0x100>)
 8003136:	701a      	strb	r2, [r3, #0]
		m_length = m_buf[1];
 8003138:	4b0e      	ldr	r3, [pc, #56]	; (8003174 <recvPacket+0xfc>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	785a      	ldrb	r2, [r3, #1]
 800313e:	4b0f      	ldr	r3, [pc, #60]	; (800317c <recvPacket+0x104>)
 8003140:	701a      	strb	r2, [r3, #0]

		res = recv(m_buf, m_length, NULL);
 8003142:	4b0c      	ldr	r3, [pc, #48]	; (8003174 <recvPacket+0xfc>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a0d      	ldr	r2, [pc, #52]	; (800317c <recvPacket+0x104>)
 8003148:	7811      	ldrb	r1, [r2, #0]
 800314a:	2200      	movs	r2, #0
 800314c:	4618      	mov	r0, r3
 800314e:	f000 fa09 	bl	8003564 <recv>
 8003152:	4603      	mov	r3, r0
 8003154:	80fb      	strh	r3, [r7, #6]

		if (res < 0)
 8003156:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800315a:	2b00      	cmp	r3, #0
 800315c:	da02      	bge.n	8003164 <recvPacket+0xec>
			return res;
 800315e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003162:	e000      	b.n	8003166 <recvPacket+0xee>
	}
	return PIXY_RESULT_OK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3708      	adds	r7, #8
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	2000014a 	.word	0x2000014a
 8003174:	20000140 	.word	0x20000140
 8003178:	20000148 	.word	0x20000148
 800317c:	20000149 	.word	0x20000149
 8003180:	08004ad4 	.word	0x08004ad4

08003184 <sendPacket>:

int16_t sendPacket() {
 8003184:	b580      	push	{r7, lr}
 8003186:	af00      	add	r7, sp, #0
	// write header info at beginnig of buffer
	m_buf[0] = PIXY_NO_CHECKSUM_SYNC & 0xff;
 8003188:	4b10      	ldr	r3, [pc, #64]	; (80031cc <sendPacket+0x48>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	22ae      	movs	r2, #174	; 0xae
 800318e:	701a      	strb	r2, [r3, #0]
	m_buf[1] = PIXY_NO_CHECKSUM_SYNC >> 8;
 8003190:	4b0e      	ldr	r3, [pc, #56]	; (80031cc <sendPacket+0x48>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	3301      	adds	r3, #1
 8003196:	22c1      	movs	r2, #193	; 0xc1
 8003198:	701a      	strb	r2, [r3, #0]
	m_buf[2] = m_type;
 800319a:	4b0c      	ldr	r3, [pc, #48]	; (80031cc <sendPacket+0x48>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	3302      	adds	r3, #2
 80031a0:	4a0b      	ldr	r2, [pc, #44]	; (80031d0 <sendPacket+0x4c>)
 80031a2:	7812      	ldrb	r2, [r2, #0]
 80031a4:	701a      	strb	r2, [r3, #0]
	m_buf[3] = m_length;
 80031a6:	4b09      	ldr	r3, [pc, #36]	; (80031cc <sendPacket+0x48>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	3303      	adds	r3, #3
 80031ac:	4a09      	ldr	r2, [pc, #36]	; (80031d4 <sendPacket+0x50>)
 80031ae:	7812      	ldrb	r2, [r2, #0]
 80031b0:	701a      	strb	r2, [r3, #0]
	// send whole thing -- header and data in one call

	return send(m_buf, m_length + PIXY_SEND_HEADER_SIZE);
 80031b2:	4b06      	ldr	r3, [pc, #24]	; (80031cc <sendPacket+0x48>)
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	4b07      	ldr	r3, [pc, #28]	; (80031d4 <sendPacket+0x50>)
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	3304      	adds	r3, #4
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	4619      	mov	r1, r3
 80031c0:	4610      	mov	r0, r2
 80031c2:	f000 fa1f 	bl	8003604 <send>
 80031c6:	4603      	mov	r3, r0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	20000140 	.word	0x20000140
 80031d0:	20000148 	.word	0x20000148
 80031d4:	20000149 	.word	0x20000149

080031d8 <pixy2_getVersion>:

int8_t pixy2_getVersion() {
 80031d8:	b580      	push	{r7, lr}
 80031da:	af00      	add	r7, sp, #0
	m_length = 0;
 80031dc:	4b11      	ldr	r3, [pc, #68]	; (8003224 <pixy2_getVersion+0x4c>)
 80031de:	2200      	movs	r2, #0
 80031e0:	701a      	strb	r2, [r3, #0]
	m_type = PIXY_TYPE_REQUEST_VERSION;
 80031e2:	4b11      	ldr	r3, [pc, #68]	; (8003228 <pixy2_getVersion+0x50>)
 80031e4:	220e      	movs	r2, #14
 80031e6:	701a      	strb	r2, [r3, #0]
	sendPacket();
 80031e8:	f7ff ffcc 	bl	8003184 <sendPacket>

	if (recvPacket() == 0) {
 80031ec:	f7ff ff44 	bl	8003078 <recvPacket>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d112      	bne.n	800321c <pixy2_getVersion+0x44>
		if (m_type == PIXY_TYPE_RESPONSE_VERSION) {
 80031f6:	4b0c      	ldr	r3, [pc, #48]	; (8003228 <pixy2_getVersion+0x50>)
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	2b0f      	cmp	r3, #15
 80031fc:	d107      	bne.n	800320e <pixy2_getVersion+0x36>
			version = (Version*) m_buf;
 80031fe:	4b0b      	ldr	r3, [pc, #44]	; (800322c <pixy2_getVersion+0x54>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a0b      	ldr	r2, [pc, #44]	; (8003230 <pixy2_getVersion+0x58>)
 8003204:	6013      	str	r3, [r2, #0]
			return m_length;
 8003206:	4b07      	ldr	r3, [pc, #28]	; (8003224 <pixy2_getVersion+0x4c>)
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	b25b      	sxtb	r3, r3
 800320c:	e008      	b.n	8003220 <pixy2_getVersion+0x48>
		} else if (m_type == PIXY_TYPE_RESPONSE_ERROR)
 800320e:	4b06      	ldr	r3, [pc, #24]	; (8003228 <pixy2_getVersion+0x50>)
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	2b03      	cmp	r3, #3
 8003214:	d102      	bne.n	800321c <pixy2_getVersion+0x44>
			return PIXY_RESULT_BUSY;
 8003216:	f06f 0301 	mvn.w	r3, #1
 800321a:	e001      	b.n	8003220 <pixy2_getVersion+0x48>
	}
	return PIXY_RESULT_ERROR;  // some kind of bitstream error
 800321c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003220:	4618      	mov	r0, r3
 8003222:	bd80      	pop	{r7, pc}
 8003224:	20000149 	.word	0x20000149
 8003228:	20000148 	.word	0x20000148
 800322c:	20000140 	.word	0x20000140
 8003230:	20000138 	.word	0x20000138

08003234 <pixy2_getResolution>:

int8_t pixy2_getResolution() {
 8003234:	b580      	push	{r7, lr}
 8003236:	af00      	add	r7, sp, #0
	m_length = 1;
 8003238:	4b13      	ldr	r3, [pc, #76]	; (8003288 <pixy2_getResolution+0x54>)
 800323a:	2201      	movs	r2, #1
 800323c:	701a      	strb	r2, [r3, #0]
	m_bufPayload[0] = 0; // for future types of queries
 800323e:	4b13      	ldr	r3, [pc, #76]	; (800328c <pixy2_getResolution+0x58>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	2200      	movs	r2, #0
 8003244:	701a      	strb	r2, [r3, #0]
	m_type = PIXY_TYPE_REQUEST_RESOLUTION;
 8003246:	4b12      	ldr	r3, [pc, #72]	; (8003290 <pixy2_getResolution+0x5c>)
 8003248:	220c      	movs	r2, #12
 800324a:	701a      	strb	r2, [r3, #0]
	sendPacket();
 800324c:	f7ff ff9a 	bl	8003184 <sendPacket>
	if (recvPacket() == 0) {
 8003250:	f7ff ff12 	bl	8003078 <recvPacket>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d112      	bne.n	8003280 <pixy2_getResolution+0x4c>
		if (m_type == PIXY_TYPE_RESPONSE_RESOLUTION) {
 800325a:	4b0d      	ldr	r3, [pc, #52]	; (8003290 <pixy2_getResolution+0x5c>)
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	2b0d      	cmp	r3, #13
 8003260:	d10b      	bne.n	800327a <pixy2_getResolution+0x46>
			frameWidth = *(uint16_t*) m_buf;
 8003262:	4b0c      	ldr	r3, [pc, #48]	; (8003294 <pixy2_getResolution+0x60>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	881a      	ldrh	r2, [r3, #0]
 8003268:	4b0b      	ldr	r3, [pc, #44]	; (8003298 <pixy2_getResolution+0x64>)
 800326a:	801a      	strh	r2, [r3, #0]
			frameHeight = *(uint16_t*) (m_buf + sizeof(uint16_t));
 800326c:	4b09      	ldr	r3, [pc, #36]	; (8003294 <pixy2_getResolution+0x60>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	885a      	ldrh	r2, [r3, #2]
 8003272:	4b0a      	ldr	r3, [pc, #40]	; (800329c <pixy2_getResolution+0x68>)
 8003274:	801a      	strh	r2, [r3, #0]
			return PIXY_RESULT_OK; // success
 8003276:	2300      	movs	r3, #0
 8003278:	e004      	b.n	8003284 <pixy2_getResolution+0x50>
		} else
			return PIXY_RESULT_ERROR;
 800327a:	f04f 33ff 	mov.w	r3, #4294967295
 800327e:	e001      	b.n	8003284 <pixy2_getResolution+0x50>
	} else
		return PIXY_RESULT_ERROR;  // some kind of bitstream error
 8003280:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003284:	4618      	mov	r0, r3
 8003286:	bd80      	pop	{r7, pc}
 8003288:	20000149 	.word	0x20000149
 800328c:	20000144 	.word	0x20000144
 8003290:	20000148 	.word	0x20000148
 8003294:	20000140 	.word	0x20000140
 8003298:	2000013c 	.word	0x2000013c
 800329c:	2000013e 	.word	0x2000013e

080032a0 <pixy2_getBlocks>:

int8_t pixy2_getBlocks(bool wait, uint8_t sigmap, uint8_t maxBlocks) {
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	4603      	mov	r3, r0
 80032a8:	71fb      	strb	r3, [r7, #7]
 80032aa:	460b      	mov	r3, r1
 80032ac:	71bb      	strb	r3, [r7, #6]
 80032ae:	4613      	mov	r3, r2
 80032b0:	717b      	strb	r3, [r7, #5]
	blocks = NULL;
 80032b2:	4b30      	ldr	r3, [pc, #192]	; (8003374 <pixy2_getBlocks+0xd4>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	601a      	str	r2, [r3, #0]
	numBlocks = 0;
 80032b8:	4b2f      	ldr	r3, [pc, #188]	; (8003378 <pixy2_getBlocks+0xd8>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	701a      	strb	r2, [r3, #0]

	while (1) {
		// fill in request data
		m_bufPayload[0] = sigmap;
 80032be:	4b2f      	ldr	r3, [pc, #188]	; (800337c <pixy2_getBlocks+0xdc>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	79ba      	ldrb	r2, [r7, #6]
 80032c4:	701a      	strb	r2, [r3, #0]
		m_bufPayload[1] = maxBlocks;
 80032c6:	4b2d      	ldr	r3, [pc, #180]	; (800337c <pixy2_getBlocks+0xdc>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	3301      	adds	r3, #1
 80032cc:	797a      	ldrb	r2, [r7, #5]
 80032ce:	701a      	strb	r2, [r3, #0]
		m_length = 2;
 80032d0:	4b2b      	ldr	r3, [pc, #172]	; (8003380 <pixy2_getBlocks+0xe0>)
 80032d2:	2202      	movs	r2, #2
 80032d4:	701a      	strb	r2, [r3, #0]
		m_type = CCC_REQUEST_BLOCKS;
 80032d6:	4b2b      	ldr	r3, [pc, #172]	; (8003384 <pixy2_getBlocks+0xe4>)
 80032d8:	2220      	movs	r2, #32
 80032da:	701a      	strb	r2, [r3, #0]

		// send request
		sendPacket();
 80032dc:	f7ff ff52 	bl	8003184 <sendPacket>
		if (recvPacket() == 0) {
 80032e0:	f7ff feca 	bl	8003078 <recvPacket>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d131      	bne.n	800334e <pixy2_getBlocks+0xae>
			if (m_type == CCC_RESPONSE_BLOCKS) {
 80032ea:	4b26      	ldr	r3, [pc, #152]	; (8003384 <pixy2_getBlocks+0xe4>)
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	2b21      	cmp	r3, #33	; 0x21
 80032f0:	d111      	bne.n	8003316 <pixy2_getBlocks+0x76>
				blocks = (Block*) m_buf;
 80032f2:	4b25      	ldr	r3, [pc, #148]	; (8003388 <pixy2_getBlocks+0xe8>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a1f      	ldr	r2, [pc, #124]	; (8003374 <pixy2_getBlocks+0xd4>)
 80032f8:	6013      	str	r3, [r2, #0]
				numBlocks = m_length / sizeof(Block);
 80032fa:	4b21      	ldr	r3, [pc, #132]	; (8003380 <pixy2_getBlocks+0xe0>)
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	085b      	lsrs	r3, r3, #1
 8003300:	4a22      	ldr	r2, [pc, #136]	; (800338c <pixy2_getBlocks+0xec>)
 8003302:	fba2 2303 	umull	r2, r3, r2, r3
 8003306:	089b      	lsrs	r3, r3, #2
 8003308:	b2da      	uxtb	r2, r3
 800330a:	4b1b      	ldr	r3, [pc, #108]	; (8003378 <pixy2_getBlocks+0xd8>)
 800330c:	701a      	strb	r2, [r3, #0]

				return numBlocks;
 800330e:	4b1a      	ldr	r3, [pc, #104]	; (8003378 <pixy2_getBlocks+0xd8>)
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	b25b      	sxtb	r3, r3
 8003314:	e029      	b.n	800336a <pixy2_getBlocks+0xca>
			}
			// deal with busy and program changing states from Pixy (we'll wait)
			else if (m_type == PIXY_TYPE_RESPONSE_ERROR) {
 8003316:	4b1b      	ldr	r3, [pc, #108]	; (8003384 <pixy2_getBlocks+0xe4>)
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	2b03      	cmp	r3, #3
 800331c:	d11a      	bne.n	8003354 <pixy2_getBlocks+0xb4>
				if ((int8_t) m_buf[0] == PIXY_RESULT_BUSY) {
 800331e:	4b1a      	ldr	r3, [pc, #104]	; (8003388 <pixy2_getBlocks+0xe8>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	2bfe      	cmp	r3, #254	; 0xfe
 8003326:	d108      	bne.n	800333a <pixy2_getBlocks+0x9a>
					if (!wait)
 8003328:	79fb      	ldrb	r3, [r7, #7]
 800332a:	f083 0301 	eor.w	r3, r3, #1
 800332e:	b2db      	uxtb	r3, r3
 8003330:	2b00      	cmp	r3, #0
 8003332:	d00f      	beq.n	8003354 <pixy2_getBlocks+0xb4>
						return PIXY_RESULT_BUSY; // new data not available yet
 8003334:	f06f 0301 	mvn.w	r3, #1
 8003338:	e017      	b.n	800336a <pixy2_getBlocks+0xca>
				} else if ((int8_t) m_buf[0] != PIXY_RESULT_PROG_CHANGING)
 800333a:	4b13      	ldr	r3, [pc, #76]	; (8003388 <pixy2_getBlocks+0xe8>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	2bfa      	cmp	r3, #250	; 0xfa
 8003342:	d007      	beq.n	8003354 <pixy2_getBlocks+0xb4>
					return m_buf[0];
 8003344:	4b10      	ldr	r3, [pc, #64]	; (8003388 <pixy2_getBlocks+0xe8>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	b25b      	sxtb	r3, r3
 800334c:	e00d      	b.n	800336a <pixy2_getBlocks+0xca>
			}
		} else
			return PIXY_RESULT_ERROR;  // some kind of bitstream error
 800334e:	f04f 33ff 	mov.w	r3, #4294967295
 8003352:	e00a      	b.n	800336a <pixy2_getBlocks+0xca>

		// If we're waiting for frame data, don't thrash Pixy with requests.
		// We can give up half a millisecond of latency (worst case)

		for (int i = 0; i < 1800 * 500; i++)
 8003354:	2300      	movs	r3, #0
 8003356:	60fb      	str	r3, [r7, #12]
 8003358:	e002      	b.n	8003360 <pixy2_getBlocks+0xc0>
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	3301      	adds	r3, #1
 800335e:	60fb      	str	r3, [r7, #12]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	4a0b      	ldr	r2, [pc, #44]	; (8003390 <pixy2_getBlocks+0xf0>)
 8003364:	4293      	cmp	r3, r2
 8003366:	ddf8      	ble.n	800335a <pixy2_getBlocks+0xba>
		m_bufPayload[0] = sigmap;
 8003368:	e7a9      	b.n	80032be <pixy2_getBlocks+0x1e>
			;
	}
}
 800336a:	4618      	mov	r0, r3
 800336c:	3710      	adds	r7, #16
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	20000134 	.word	0x20000134
 8003378:	20000130 	.word	0x20000130
 800337c:	20000144 	.word	0x20000144
 8003380:	20000149 	.word	0x20000149
 8003384:	20000148 	.word	0x20000148
 8003388:	20000140 	.word	0x20000140
 800338c:	92492493 	.word	0x92492493
 8003390:	000dbb9f 	.word	0x000dbb9f

08003394 <pixy2_init>:

int8_t pixy2_init(SPI_HandleTypeDef* hspi,GPIO_TypeDef* port,uint16_t cs_pin) {
 8003394:	b580      	push	{r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	4613      	mov	r3, r2
 80033a0:	80fb      	strh	r3, [r7, #6]
	uint32_t t0;
	int8_t res;

	res = open(hspi,port,cs_pin);
 80033a2:	88fb      	ldrh	r3, [r7, #6]
 80033a4:	461a      	mov	r2, r3
 80033a6:	68b9      	ldr	r1, [r7, #8]
 80033a8:	68f8      	ldr	r0, [r7, #12]
 80033aa:	f000 f8bd 	bl	8003528 <open>
 80033ae:	4603      	mov	r3, r0
 80033b0:	75fb      	strb	r3, [r7, #23]
	if (res < 0)
 80033b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	da02      	bge.n	80033c0 <pixy2_init+0x2c>
		return res;
 80033ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80033be:	e01d      	b.n	80033fc <pixy2_init+0x68>

	// wait for pixy to be ready -- that is, Pixy takes a second or 2 boot up
	// getVersion is an effective "ping".  We timeout after 5s.

	for (t0 = HAL_GetTick(); HAL_GetTick() - t0 < 5000;) {
 80033c0:	f7fd fcc8 	bl	8000d54 <HAL_GetTick>
 80033c4:	6138      	str	r0, [r7, #16]
 80033c6:	e00e      	b.n	80033e6 <pixy2_init+0x52>
		if (pixy2_getVersion() >= 0) // successful version get -> pixy is ready
 80033c8:	f7ff ff06 	bl	80031d8 <pixy2_getVersion>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	db06      	blt.n	80033e0 <pixy2_init+0x4c>
				{
			printf("getVersion OK\r\n");
 80033d2:	480c      	ldr	r0, [pc, #48]	; (8003404 <pixy2_init+0x70>)
 80033d4:	f000 faec 	bl	80039b0 <puts>
			pixy2_getResolution(); // get resolution so we have it
 80033d8:	f7ff ff2c 	bl	8003234 <pixy2_getResolution>
			return PIXY_RESULT_OK;
 80033dc:	2300      	movs	r3, #0
 80033de:	e00d      	b.n	80033fc <pixy2_init+0x68>
		}
		HAL_Delay(5);
 80033e0:	2005      	movs	r0, #5
 80033e2:	f7fd fcc3 	bl	8000d6c <HAL_Delay>
	for (t0 = HAL_GetTick(); HAL_GetTick() - t0 < 5000;) {
 80033e6:	f7fd fcb5 	bl	8000d54 <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	f241 3287 	movw	r2, #4999	; 0x1387
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d9e7      	bls.n	80033c8 <pixy2_init+0x34>
	}
	// timeout
	return PIXY_RESULT_TIMEOUT;
 80033f8:	f06f 0303 	mvn.w	r3, #3
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3718      	adds	r7, #24
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	08004ae8 	.word	0x08004ae8

08003408 <pixy2_printVersion>:

void pixy2_printVersion() {
 8003408:	b5b0      	push	{r4, r5, r7, lr}
 800340a:	b094      	sub	sp, #80	; 0x50
 800340c:	af04      	add	r7, sp, #16
	char buf[64];
	sprintf(buf, "hardware ver: 0x%x firmware ver: %d.%d.%d %s\r\n",
			version->hardware, version->firmwareMajor, version->firmwareMinor,
 800340e:	4b12      	ldr	r3, [pc, #72]	; (8003458 <pixy2_printVersion+0x50>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	881b      	ldrh	r3, [r3, #0]
	sprintf(buf, "hardware ver: 0x%x firmware ver: %d.%d.%d %s\r\n",
 8003414:	461c      	mov	r4, r3
			version->hardware, version->firmwareMajor, version->firmwareMinor,
 8003416:	4b10      	ldr	r3, [pc, #64]	; (8003458 <pixy2_printVersion+0x50>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	789b      	ldrb	r3, [r3, #2]
	sprintf(buf, "hardware ver: 0x%x firmware ver: %d.%d.%d %s\r\n",
 800341c:	461d      	mov	r5, r3
			version->hardware, version->firmwareMajor, version->firmwareMinor,
 800341e:	4b0e      	ldr	r3, [pc, #56]	; (8003458 <pixy2_printVersion+0x50>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	78db      	ldrb	r3, [r3, #3]
	sprintf(buf, "hardware ver: 0x%x firmware ver: %d.%d.%d %s\r\n",
 8003424:	461a      	mov	r2, r3
			version->firmwareBuild, version->firmwareType);
 8003426:	4b0c      	ldr	r3, [pc, #48]	; (8003458 <pixy2_printVersion+0x50>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	889b      	ldrh	r3, [r3, #4]
	sprintf(buf, "hardware ver: 0x%x firmware ver: %d.%d.%d %s\r\n",
 800342c:	4619      	mov	r1, r3
			version->firmwareBuild, version->firmwareType);
 800342e:	4b0a      	ldr	r3, [pc, #40]	; (8003458 <pixy2_printVersion+0x50>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	3306      	adds	r3, #6
	sprintf(buf, "hardware ver: 0x%x firmware ver: %d.%d.%d %s\r\n",
 8003434:	4638      	mov	r0, r7
 8003436:	9302      	str	r3, [sp, #8]
 8003438:	9101      	str	r1, [sp, #4]
 800343a:	9200      	str	r2, [sp, #0]
 800343c:	462b      	mov	r3, r5
 800343e:	4622      	mov	r2, r4
 8003440:	4906      	ldr	r1, [pc, #24]	; (800345c <pixy2_printVersion+0x54>)
 8003442:	f000 facd 	bl	80039e0 <siprintf>
	printf(buf);
 8003446:	463b      	mov	r3, r7
 8003448:	4618      	mov	r0, r3
 800344a:	f000 fa2b 	bl	80038a4 <iprintf>
}
 800344e:	bf00      	nop
 8003450:	3740      	adds	r7, #64	; 0x40
 8003452:	46bd      	mov	sp, r7
 8003454:	bdb0      	pop	{r4, r5, r7, pc}
 8003456:	bf00      	nop
 8003458:	20000138 	.word	0x20000138
 800345c:	08004af8 	.word	0x08004af8

08003460 <pixy2_printBlock>:

void pixy2_printBlock(int n) {
 8003460:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003462:	b0a9      	sub	sp, #164	; 0xa4
 8003464:	af06      	add	r7, sp, #24
 8003466:	6078      	str	r0, [r7, #4]
	 }
	 else // regular block.  Note, angle is always zero, so no need to print
	 */
	sprintf(buf,
			"sig: %d x: %d y: %d width: %d height: %d index: %d age: %d\r\n",
			(blocks + n)->m_signature, (blocks + n)->m_x, (blocks + n)->m_y,
 8003468:	4b2d      	ldr	r3, [pc, #180]	; (8003520 <pixy2_printBlock+0xc0>)
 800346a:	6819      	ldr	r1, [r3, #0]
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	4613      	mov	r3, r2
 8003470:	00db      	lsls	r3, r3, #3
 8003472:	1a9b      	subs	r3, r3, r2
 8003474:	005b      	lsls	r3, r3, #1
 8003476:	440b      	add	r3, r1
 8003478:	881b      	ldrh	r3, [r3, #0]
	sprintf(buf,
 800347a:	469c      	mov	ip, r3
			(blocks + n)->m_signature, (blocks + n)->m_x, (blocks + n)->m_y,
 800347c:	4b28      	ldr	r3, [pc, #160]	; (8003520 <pixy2_printBlock+0xc0>)
 800347e:	6819      	ldr	r1, [r3, #0]
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	4613      	mov	r3, r2
 8003484:	00db      	lsls	r3, r3, #3
 8003486:	1a9b      	subs	r3, r3, r2
 8003488:	005b      	lsls	r3, r3, #1
 800348a:	440b      	add	r3, r1
 800348c:	885b      	ldrh	r3, [r3, #2]
	sprintf(buf,
 800348e:	469e      	mov	lr, r3
			(blocks + n)->m_signature, (blocks + n)->m_x, (blocks + n)->m_y,
 8003490:	4b23      	ldr	r3, [pc, #140]	; (8003520 <pixy2_printBlock+0xc0>)
 8003492:	6819      	ldr	r1, [r3, #0]
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	4613      	mov	r3, r2
 8003498:	00db      	lsls	r3, r3, #3
 800349a:	1a9b      	subs	r3, r3, r2
 800349c:	005b      	lsls	r3, r3, #1
 800349e:	440b      	add	r3, r1
 80034a0:	889b      	ldrh	r3, [r3, #4]
	sprintf(buf,
 80034a2:	461c      	mov	r4, r3
			(blocks + n)->m_width, (blocks + n)->m_height,
 80034a4:	4b1e      	ldr	r3, [pc, #120]	; (8003520 <pixy2_printBlock+0xc0>)
 80034a6:	6819      	ldr	r1, [r3, #0]
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	4613      	mov	r3, r2
 80034ac:	00db      	lsls	r3, r3, #3
 80034ae:	1a9b      	subs	r3, r3, r2
 80034b0:	005b      	lsls	r3, r3, #1
 80034b2:	440b      	add	r3, r1
 80034b4:	88db      	ldrh	r3, [r3, #6]
	sprintf(buf,
 80034b6:	461d      	mov	r5, r3
			(blocks + n)->m_width, (blocks + n)->m_height,
 80034b8:	4b19      	ldr	r3, [pc, #100]	; (8003520 <pixy2_printBlock+0xc0>)
 80034ba:	6819      	ldr	r1, [r3, #0]
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	4613      	mov	r3, r2
 80034c0:	00db      	lsls	r3, r3, #3
 80034c2:	1a9b      	subs	r3, r3, r2
 80034c4:	005b      	lsls	r3, r3, #1
 80034c6:	440b      	add	r3, r1
 80034c8:	891b      	ldrh	r3, [r3, #8]
	sprintf(buf,
 80034ca:	461e      	mov	r6, r3
			(blocks + n)->m_index, (blocks + n)->m_age);
 80034cc:	4b14      	ldr	r3, [pc, #80]	; (8003520 <pixy2_printBlock+0xc0>)
 80034ce:	6819      	ldr	r1, [r3, #0]
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	4613      	mov	r3, r2
 80034d4:	00db      	lsls	r3, r3, #3
 80034d6:	1a9b      	subs	r3, r3, r2
 80034d8:	005b      	lsls	r3, r3, #1
 80034da:	440b      	add	r3, r1
 80034dc:	7b1b      	ldrb	r3, [r3, #12]
	sprintf(buf,
 80034de:	603b      	str	r3, [r7, #0]
			(blocks + n)->m_index, (blocks + n)->m_age);
 80034e0:	4b0f      	ldr	r3, [pc, #60]	; (8003520 <pixy2_printBlock+0xc0>)
 80034e2:	6819      	ldr	r1, [r3, #0]
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	4613      	mov	r3, r2
 80034e8:	00db      	lsls	r3, r3, #3
 80034ea:	1a9b      	subs	r3, r3, r2
 80034ec:	005b      	lsls	r3, r3, #1
 80034ee:	440b      	add	r3, r1
 80034f0:	7b5b      	ldrb	r3, [r3, #13]
	sprintf(buf,
 80034f2:	f107 0008 	add.w	r0, r7, #8
 80034f6:	9304      	str	r3, [sp, #16]
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	9303      	str	r3, [sp, #12]
 80034fc:	9602      	str	r6, [sp, #8]
 80034fe:	9501      	str	r5, [sp, #4]
 8003500:	9400      	str	r4, [sp, #0]
 8003502:	4673      	mov	r3, lr
 8003504:	4662      	mov	r2, ip
 8003506:	4907      	ldr	r1, [pc, #28]	; (8003524 <pixy2_printBlock+0xc4>)
 8003508:	f000 fa6a 	bl	80039e0 <siprintf>
	printf(buf);
 800350c:	f107 0308 	add.w	r3, r7, #8
 8003510:	4618      	mov	r0, r3
 8003512:	f000 f9c7 	bl	80038a4 <iprintf>
}
 8003516:	bf00      	nop
 8003518:	378c      	adds	r7, #140	; 0x8c
 800351a:	46bd      	mov	sp, r7
 800351c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800351e:	bf00      	nop
 8003520:	20000134 	.word	0x20000134
 8003524:	08004b28 	.word	0x08004b28

08003528 <open>:

SPI_HandleTypeDef* Pixy2_SPI;
GPIO_TypeDef* Pixy2_CS_Port;
uint16_t Pixy2_CS_Pin;

int8_t open(SPI_HandleTypeDef* hspi,GPIO_TypeDef* port,uint16_t cs_pin) {
 8003528:	b480      	push	{r7}
 800352a:	b085      	sub	sp, #20
 800352c:	af00      	add	r7, sp, #0
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	4613      	mov	r3, r2
 8003534:	80fb      	strh	r3, [r7, #6]
		Pixy2_CS_Pin = cs_pin; // default slave select pin
 8003536:	4a08      	ldr	r2, [pc, #32]	; (8003558 <open+0x30>)
 8003538:	88fb      	ldrh	r3, [r7, #6]
 800353a:	8013      	strh	r3, [r2, #0]
	Pixy2_CS_Port=port;
 800353c:	4a07      	ldr	r2, [pc, #28]	; (800355c <open+0x34>)
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	6013      	str	r3, [r2, #0]
	Pixy2_SPI=hspi;
 8003542:	4a07      	ldr	r2, [pc, #28]	; (8003560 <open+0x38>)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6013      	str	r3, [r2, #0]

	return 0;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3714      	adds	r7, #20
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	20000154 	.word	0x20000154
 800355c:	20000150 	.word	0x20000150
 8003560:	2000014c 	.word	0x2000014c

08003564 <recv>:

void close() {
}

int16_t recv(uint8_t *buf, uint8_t len, uint16_t *cs) {
 8003564:	b580      	push	{r7, lr}
 8003566:	b086      	sub	sp, #24
 8003568:	af00      	add	r7, sp, #0
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	460b      	mov	r3, r1
 800356e:	607a      	str	r2, [r7, #4]
 8003570:	72fb      	strb	r3, [r7, #11]
	uint8_t i;
	if (cs)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d002      	beq.n	800357e <recv+0x1a>
		*cs = 0;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(Pixy2_CS_Port, Pixy2_CS_Pin, GPIO_PIN_RESET);
 800357e:	4b1e      	ldr	r3, [pc, #120]	; (80035f8 <recv+0x94>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a1e      	ldr	r2, [pc, #120]	; (80035fc <recv+0x98>)
 8003584:	8811      	ldrh	r1, [r2, #0]
 8003586:	2200      	movs	r2, #0
 8003588:	4618      	mov	r0, r3
 800358a:	f7fd feab 	bl	80012e4 <HAL_GPIO_WritePin>

	for (i = 0; i < len; i++) {
 800358e:	2300      	movs	r3, #0
 8003590:	75fb      	strb	r3, [r7, #23]
 8003592:	e01e      	b.n	80035d2 <recv+0x6e>
		uint8_t data;
		HAL_SPI_Receive(Pixy2_SPI, &data, 1, 5000);
 8003594:	4b1a      	ldr	r3, [pc, #104]	; (8003600 <recv+0x9c>)
 8003596:	6818      	ldr	r0, [r3, #0]
 8003598:	f107 0116 	add.w	r1, r7, #22
 800359c:	f241 3388 	movw	r3, #5000	; 0x1388
 80035a0:	2201      	movs	r2, #1
 80035a2:	f7fe fd66 	bl	8002072 <HAL_SPI_Receive>
		buf[i] = data;
 80035a6:	7dfb      	ldrb	r3, [r7, #23]
 80035a8:	68fa      	ldr	r2, [r7, #12]
 80035aa:	4413      	add	r3, r2
 80035ac:	7dba      	ldrb	r2, [r7, #22]
 80035ae:	701a      	strb	r2, [r3, #0]
		if (cs)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00a      	beq.n	80035cc <recv+0x68>
			*cs += buf[i];
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	881a      	ldrh	r2, [r3, #0]
 80035ba:	7dfb      	ldrb	r3, [r7, #23]
 80035bc:	68f9      	ldr	r1, [r7, #12]
 80035be:	440b      	add	r3, r1
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	4413      	add	r3, r2
 80035c6:	b29a      	uxth	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < len; i++) {
 80035cc:	7dfb      	ldrb	r3, [r7, #23]
 80035ce:	3301      	adds	r3, #1
 80035d0:	75fb      	strb	r3, [r7, #23]
 80035d2:	7dfa      	ldrb	r2, [r7, #23]
 80035d4:	7afb      	ldrb	r3, [r7, #11]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d3dc      	bcc.n	8003594 <recv+0x30>
	}

	HAL_GPIO_WritePin(Pixy2_CS_Port, Pixy2_CS_Pin, GPIO_PIN_SET);
 80035da:	4b07      	ldr	r3, [pc, #28]	; (80035f8 <recv+0x94>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a07      	ldr	r2, [pc, #28]	; (80035fc <recv+0x98>)
 80035e0:	8811      	ldrh	r1, [r2, #0]
 80035e2:	2201      	movs	r2, #1
 80035e4:	4618      	mov	r0, r3
 80035e6:	f7fd fe7d 	bl	80012e4 <HAL_GPIO_WritePin>
	return len;
 80035ea:	7afb      	ldrb	r3, [r7, #11]
 80035ec:	b21b      	sxth	r3, r3
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3718      	adds	r7, #24
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	20000150 	.word	0x20000150
 80035fc:	20000154 	.word	0x20000154
 8003600:	2000014c 	.word	0x2000014c

08003604 <send>:

int16_t send(uint8_t *buf, uint8_t len) {
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	460b      	mov	r3, r1
 800360e:	70fb      	strb	r3, [r7, #3]

	HAL_GPIO_WritePin(Pixy2_CS_Port, Pixy2_CS_Pin, GPIO_PIN_RESET);
 8003610:	4b14      	ldr	r3, [pc, #80]	; (8003664 <send+0x60>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a14      	ldr	r2, [pc, #80]	; (8003668 <send+0x64>)
 8003616:	8811      	ldrh	r1, [r2, #0]
 8003618:	2200      	movs	r2, #0
 800361a:	4618      	mov	r0, r3
 800361c:	f7fd fe62 	bl	80012e4 <HAL_GPIO_WritePin>

	for (int i = 0; i < len; i++) {
 8003620:	2300      	movs	r3, #0
 8003622:	60fb      	str	r3, [r7, #12]
 8003624:	e00c      	b.n	8003640 <send+0x3c>
		HAL_SPI_Transmit(Pixy2_SPI, (uint8_t*) &buf[i], 1, 5000);
 8003626:	4b11      	ldr	r3, [pc, #68]	; (800366c <send+0x68>)
 8003628:	6818      	ldr	r0, [r3, #0]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	18d1      	adds	r1, r2, r3
 8003630:	f241 3388 	movw	r3, #5000	; 0x1388
 8003634:	2201      	movs	r2, #1
 8003636:	f7fe fbe0 	bl	8001dfa <HAL_SPI_Transmit>
	for (int i = 0; i < len; i++) {
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	3301      	adds	r3, #1
 800363e:	60fb      	str	r3, [r7, #12]
 8003640:	78fb      	ldrb	r3, [r7, #3]
 8003642:	68fa      	ldr	r2, [r7, #12]
 8003644:	429a      	cmp	r2, r3
 8003646:	dbee      	blt.n	8003626 <send+0x22>
	}
	HAL_GPIO_WritePin(Pixy2_CS_Port, Pixy2_CS_Pin, GPIO_PIN_SET);
 8003648:	4b06      	ldr	r3, [pc, #24]	; (8003664 <send+0x60>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a06      	ldr	r2, [pc, #24]	; (8003668 <send+0x64>)
 800364e:	8811      	ldrh	r1, [r2, #0]
 8003650:	2201      	movs	r2, #1
 8003652:	4618      	mov	r0, r3
 8003654:	f7fd fe46 	bl	80012e4 <HAL_GPIO_WritePin>

	return len;
 8003658:	78fb      	ldrb	r3, [r7, #3]
 800365a:	b21b      	sxth	r3, r3
}
 800365c:	4618      	mov	r0, r3
 800365e:	3710      	adds	r7, #16
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}
 8003664:	20000150 	.word	0x20000150
 8003668:	20000154 	.word	0x20000154
 800366c:	2000014c 	.word	0x2000014c

08003670 <__errno>:
 8003670:	4b01      	ldr	r3, [pc, #4]	; (8003678 <__errno+0x8>)
 8003672:	6818      	ldr	r0, [r3, #0]
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	2000000c 	.word	0x2000000c

0800367c <__libc_init_array>:
 800367c:	b570      	push	{r4, r5, r6, lr}
 800367e:	4d0d      	ldr	r5, [pc, #52]	; (80036b4 <__libc_init_array+0x38>)
 8003680:	4c0d      	ldr	r4, [pc, #52]	; (80036b8 <__libc_init_array+0x3c>)
 8003682:	1b64      	subs	r4, r4, r5
 8003684:	10a4      	asrs	r4, r4, #2
 8003686:	2600      	movs	r6, #0
 8003688:	42a6      	cmp	r6, r4
 800368a:	d109      	bne.n	80036a0 <__libc_init_array+0x24>
 800368c:	4d0b      	ldr	r5, [pc, #44]	; (80036bc <__libc_init_array+0x40>)
 800368e:	4c0c      	ldr	r4, [pc, #48]	; (80036c0 <__libc_init_array+0x44>)
 8003690:	f001 fa08 	bl	8004aa4 <_init>
 8003694:	1b64      	subs	r4, r4, r5
 8003696:	10a4      	asrs	r4, r4, #2
 8003698:	2600      	movs	r6, #0
 800369a:	42a6      	cmp	r6, r4
 800369c:	d105      	bne.n	80036aa <__libc_init_array+0x2e>
 800369e:	bd70      	pop	{r4, r5, r6, pc}
 80036a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80036a4:	4798      	blx	r3
 80036a6:	3601      	adds	r6, #1
 80036a8:	e7ee      	b.n	8003688 <__libc_init_array+0xc>
 80036aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80036ae:	4798      	blx	r3
 80036b0:	3601      	adds	r6, #1
 80036b2:	e7f2      	b.n	800369a <__libc_init_array+0x1e>
 80036b4:	08004c20 	.word	0x08004c20
 80036b8:	08004c20 	.word	0x08004c20
 80036bc:	08004c20 	.word	0x08004c20
 80036c0:	08004c24 	.word	0x08004c24

080036c4 <malloc>:
 80036c4:	4b02      	ldr	r3, [pc, #8]	; (80036d0 <malloc+0xc>)
 80036c6:	4601      	mov	r1, r0
 80036c8:	6818      	ldr	r0, [r3, #0]
 80036ca:	f000 b877 	b.w	80037bc <_malloc_r>
 80036ce:	bf00      	nop
 80036d0:	2000000c 	.word	0x2000000c

080036d4 <memset>:
 80036d4:	4402      	add	r2, r0
 80036d6:	4603      	mov	r3, r0
 80036d8:	4293      	cmp	r3, r2
 80036da:	d100      	bne.n	80036de <memset+0xa>
 80036dc:	4770      	bx	lr
 80036de:	f803 1b01 	strb.w	r1, [r3], #1
 80036e2:	e7f9      	b.n	80036d8 <memset+0x4>

080036e4 <_free_r>:
 80036e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80036e6:	2900      	cmp	r1, #0
 80036e8:	d044      	beq.n	8003774 <_free_r+0x90>
 80036ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80036ee:	9001      	str	r0, [sp, #4]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	f1a1 0404 	sub.w	r4, r1, #4
 80036f6:	bfb8      	it	lt
 80036f8:	18e4      	addlt	r4, r4, r3
 80036fa:	f000 fc71 	bl	8003fe0 <__malloc_lock>
 80036fe:	4a1e      	ldr	r2, [pc, #120]	; (8003778 <_free_r+0x94>)
 8003700:	9801      	ldr	r0, [sp, #4]
 8003702:	6813      	ldr	r3, [r2, #0]
 8003704:	b933      	cbnz	r3, 8003714 <_free_r+0x30>
 8003706:	6063      	str	r3, [r4, #4]
 8003708:	6014      	str	r4, [r2, #0]
 800370a:	b003      	add	sp, #12
 800370c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003710:	f000 bc6c 	b.w	8003fec <__malloc_unlock>
 8003714:	42a3      	cmp	r3, r4
 8003716:	d908      	bls.n	800372a <_free_r+0x46>
 8003718:	6825      	ldr	r5, [r4, #0]
 800371a:	1961      	adds	r1, r4, r5
 800371c:	428b      	cmp	r3, r1
 800371e:	bf01      	itttt	eq
 8003720:	6819      	ldreq	r1, [r3, #0]
 8003722:	685b      	ldreq	r3, [r3, #4]
 8003724:	1949      	addeq	r1, r1, r5
 8003726:	6021      	streq	r1, [r4, #0]
 8003728:	e7ed      	b.n	8003706 <_free_r+0x22>
 800372a:	461a      	mov	r2, r3
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	b10b      	cbz	r3, 8003734 <_free_r+0x50>
 8003730:	42a3      	cmp	r3, r4
 8003732:	d9fa      	bls.n	800372a <_free_r+0x46>
 8003734:	6811      	ldr	r1, [r2, #0]
 8003736:	1855      	adds	r5, r2, r1
 8003738:	42a5      	cmp	r5, r4
 800373a:	d10b      	bne.n	8003754 <_free_r+0x70>
 800373c:	6824      	ldr	r4, [r4, #0]
 800373e:	4421      	add	r1, r4
 8003740:	1854      	adds	r4, r2, r1
 8003742:	42a3      	cmp	r3, r4
 8003744:	6011      	str	r1, [r2, #0]
 8003746:	d1e0      	bne.n	800370a <_free_r+0x26>
 8003748:	681c      	ldr	r4, [r3, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	6053      	str	r3, [r2, #4]
 800374e:	4421      	add	r1, r4
 8003750:	6011      	str	r1, [r2, #0]
 8003752:	e7da      	b.n	800370a <_free_r+0x26>
 8003754:	d902      	bls.n	800375c <_free_r+0x78>
 8003756:	230c      	movs	r3, #12
 8003758:	6003      	str	r3, [r0, #0]
 800375a:	e7d6      	b.n	800370a <_free_r+0x26>
 800375c:	6825      	ldr	r5, [r4, #0]
 800375e:	1961      	adds	r1, r4, r5
 8003760:	428b      	cmp	r3, r1
 8003762:	bf04      	itt	eq
 8003764:	6819      	ldreq	r1, [r3, #0]
 8003766:	685b      	ldreq	r3, [r3, #4]
 8003768:	6063      	str	r3, [r4, #4]
 800376a:	bf04      	itt	eq
 800376c:	1949      	addeq	r1, r1, r5
 800376e:	6021      	streq	r1, [r4, #0]
 8003770:	6054      	str	r4, [r2, #4]
 8003772:	e7ca      	b.n	800370a <_free_r+0x26>
 8003774:	b003      	add	sp, #12
 8003776:	bd30      	pop	{r4, r5, pc}
 8003778:	20000158 	.word	0x20000158

0800377c <sbrk_aligned>:
 800377c:	b570      	push	{r4, r5, r6, lr}
 800377e:	4e0e      	ldr	r6, [pc, #56]	; (80037b8 <sbrk_aligned+0x3c>)
 8003780:	460c      	mov	r4, r1
 8003782:	6831      	ldr	r1, [r6, #0]
 8003784:	4605      	mov	r5, r0
 8003786:	b911      	cbnz	r1, 800378e <sbrk_aligned+0x12>
 8003788:	f000 f91a 	bl	80039c0 <_sbrk_r>
 800378c:	6030      	str	r0, [r6, #0]
 800378e:	4621      	mov	r1, r4
 8003790:	4628      	mov	r0, r5
 8003792:	f000 f915 	bl	80039c0 <_sbrk_r>
 8003796:	1c43      	adds	r3, r0, #1
 8003798:	d00a      	beq.n	80037b0 <sbrk_aligned+0x34>
 800379a:	1cc4      	adds	r4, r0, #3
 800379c:	f024 0403 	bic.w	r4, r4, #3
 80037a0:	42a0      	cmp	r0, r4
 80037a2:	d007      	beq.n	80037b4 <sbrk_aligned+0x38>
 80037a4:	1a21      	subs	r1, r4, r0
 80037a6:	4628      	mov	r0, r5
 80037a8:	f000 f90a 	bl	80039c0 <_sbrk_r>
 80037ac:	3001      	adds	r0, #1
 80037ae:	d101      	bne.n	80037b4 <sbrk_aligned+0x38>
 80037b0:	f04f 34ff 	mov.w	r4, #4294967295
 80037b4:	4620      	mov	r0, r4
 80037b6:	bd70      	pop	{r4, r5, r6, pc}
 80037b8:	2000015c 	.word	0x2000015c

080037bc <_malloc_r>:
 80037bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037c0:	1ccd      	adds	r5, r1, #3
 80037c2:	f025 0503 	bic.w	r5, r5, #3
 80037c6:	3508      	adds	r5, #8
 80037c8:	2d0c      	cmp	r5, #12
 80037ca:	bf38      	it	cc
 80037cc:	250c      	movcc	r5, #12
 80037ce:	2d00      	cmp	r5, #0
 80037d0:	4607      	mov	r7, r0
 80037d2:	db01      	blt.n	80037d8 <_malloc_r+0x1c>
 80037d4:	42a9      	cmp	r1, r5
 80037d6:	d905      	bls.n	80037e4 <_malloc_r+0x28>
 80037d8:	230c      	movs	r3, #12
 80037da:	603b      	str	r3, [r7, #0]
 80037dc:	2600      	movs	r6, #0
 80037de:	4630      	mov	r0, r6
 80037e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80037e4:	4e2e      	ldr	r6, [pc, #184]	; (80038a0 <_malloc_r+0xe4>)
 80037e6:	f000 fbfb 	bl	8003fe0 <__malloc_lock>
 80037ea:	6833      	ldr	r3, [r6, #0]
 80037ec:	461c      	mov	r4, r3
 80037ee:	bb34      	cbnz	r4, 800383e <_malloc_r+0x82>
 80037f0:	4629      	mov	r1, r5
 80037f2:	4638      	mov	r0, r7
 80037f4:	f7ff ffc2 	bl	800377c <sbrk_aligned>
 80037f8:	1c43      	adds	r3, r0, #1
 80037fa:	4604      	mov	r4, r0
 80037fc:	d14d      	bne.n	800389a <_malloc_r+0xde>
 80037fe:	6834      	ldr	r4, [r6, #0]
 8003800:	4626      	mov	r6, r4
 8003802:	2e00      	cmp	r6, #0
 8003804:	d140      	bne.n	8003888 <_malloc_r+0xcc>
 8003806:	6823      	ldr	r3, [r4, #0]
 8003808:	4631      	mov	r1, r6
 800380a:	4638      	mov	r0, r7
 800380c:	eb04 0803 	add.w	r8, r4, r3
 8003810:	f000 f8d6 	bl	80039c0 <_sbrk_r>
 8003814:	4580      	cmp	r8, r0
 8003816:	d13a      	bne.n	800388e <_malloc_r+0xd2>
 8003818:	6821      	ldr	r1, [r4, #0]
 800381a:	3503      	adds	r5, #3
 800381c:	1a6d      	subs	r5, r5, r1
 800381e:	f025 0503 	bic.w	r5, r5, #3
 8003822:	3508      	adds	r5, #8
 8003824:	2d0c      	cmp	r5, #12
 8003826:	bf38      	it	cc
 8003828:	250c      	movcc	r5, #12
 800382a:	4629      	mov	r1, r5
 800382c:	4638      	mov	r0, r7
 800382e:	f7ff ffa5 	bl	800377c <sbrk_aligned>
 8003832:	3001      	adds	r0, #1
 8003834:	d02b      	beq.n	800388e <_malloc_r+0xd2>
 8003836:	6823      	ldr	r3, [r4, #0]
 8003838:	442b      	add	r3, r5
 800383a:	6023      	str	r3, [r4, #0]
 800383c:	e00e      	b.n	800385c <_malloc_r+0xa0>
 800383e:	6822      	ldr	r2, [r4, #0]
 8003840:	1b52      	subs	r2, r2, r5
 8003842:	d41e      	bmi.n	8003882 <_malloc_r+0xc6>
 8003844:	2a0b      	cmp	r2, #11
 8003846:	d916      	bls.n	8003876 <_malloc_r+0xba>
 8003848:	1961      	adds	r1, r4, r5
 800384a:	42a3      	cmp	r3, r4
 800384c:	6025      	str	r5, [r4, #0]
 800384e:	bf18      	it	ne
 8003850:	6059      	strne	r1, [r3, #4]
 8003852:	6863      	ldr	r3, [r4, #4]
 8003854:	bf08      	it	eq
 8003856:	6031      	streq	r1, [r6, #0]
 8003858:	5162      	str	r2, [r4, r5]
 800385a:	604b      	str	r3, [r1, #4]
 800385c:	4638      	mov	r0, r7
 800385e:	f104 060b 	add.w	r6, r4, #11
 8003862:	f000 fbc3 	bl	8003fec <__malloc_unlock>
 8003866:	f026 0607 	bic.w	r6, r6, #7
 800386a:	1d23      	adds	r3, r4, #4
 800386c:	1af2      	subs	r2, r6, r3
 800386e:	d0b6      	beq.n	80037de <_malloc_r+0x22>
 8003870:	1b9b      	subs	r3, r3, r6
 8003872:	50a3      	str	r3, [r4, r2]
 8003874:	e7b3      	b.n	80037de <_malloc_r+0x22>
 8003876:	6862      	ldr	r2, [r4, #4]
 8003878:	42a3      	cmp	r3, r4
 800387a:	bf0c      	ite	eq
 800387c:	6032      	streq	r2, [r6, #0]
 800387e:	605a      	strne	r2, [r3, #4]
 8003880:	e7ec      	b.n	800385c <_malloc_r+0xa0>
 8003882:	4623      	mov	r3, r4
 8003884:	6864      	ldr	r4, [r4, #4]
 8003886:	e7b2      	b.n	80037ee <_malloc_r+0x32>
 8003888:	4634      	mov	r4, r6
 800388a:	6876      	ldr	r6, [r6, #4]
 800388c:	e7b9      	b.n	8003802 <_malloc_r+0x46>
 800388e:	230c      	movs	r3, #12
 8003890:	603b      	str	r3, [r7, #0]
 8003892:	4638      	mov	r0, r7
 8003894:	f000 fbaa 	bl	8003fec <__malloc_unlock>
 8003898:	e7a1      	b.n	80037de <_malloc_r+0x22>
 800389a:	6025      	str	r5, [r4, #0]
 800389c:	e7de      	b.n	800385c <_malloc_r+0xa0>
 800389e:	bf00      	nop
 80038a0:	20000158 	.word	0x20000158

080038a4 <iprintf>:
 80038a4:	b40f      	push	{r0, r1, r2, r3}
 80038a6:	4b0a      	ldr	r3, [pc, #40]	; (80038d0 <iprintf+0x2c>)
 80038a8:	b513      	push	{r0, r1, r4, lr}
 80038aa:	681c      	ldr	r4, [r3, #0]
 80038ac:	b124      	cbz	r4, 80038b8 <iprintf+0x14>
 80038ae:	69a3      	ldr	r3, [r4, #24]
 80038b0:	b913      	cbnz	r3, 80038b8 <iprintf+0x14>
 80038b2:	4620      	mov	r0, r4
 80038b4:	f000 fa8e 	bl	8003dd4 <__sinit>
 80038b8:	ab05      	add	r3, sp, #20
 80038ba:	9a04      	ldr	r2, [sp, #16]
 80038bc:	68a1      	ldr	r1, [r4, #8]
 80038be:	9301      	str	r3, [sp, #4]
 80038c0:	4620      	mov	r0, r4
 80038c2:	f000 fd1f 	bl	8004304 <_vfiprintf_r>
 80038c6:	b002      	add	sp, #8
 80038c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038cc:	b004      	add	sp, #16
 80038ce:	4770      	bx	lr
 80038d0:	2000000c 	.word	0x2000000c

080038d4 <_puts_r>:
 80038d4:	b570      	push	{r4, r5, r6, lr}
 80038d6:	460e      	mov	r6, r1
 80038d8:	4605      	mov	r5, r0
 80038da:	b118      	cbz	r0, 80038e4 <_puts_r+0x10>
 80038dc:	6983      	ldr	r3, [r0, #24]
 80038de:	b90b      	cbnz	r3, 80038e4 <_puts_r+0x10>
 80038e0:	f000 fa78 	bl	8003dd4 <__sinit>
 80038e4:	69ab      	ldr	r3, [r5, #24]
 80038e6:	68ac      	ldr	r4, [r5, #8]
 80038e8:	b913      	cbnz	r3, 80038f0 <_puts_r+0x1c>
 80038ea:	4628      	mov	r0, r5
 80038ec:	f000 fa72 	bl	8003dd4 <__sinit>
 80038f0:	4b2c      	ldr	r3, [pc, #176]	; (80039a4 <_puts_r+0xd0>)
 80038f2:	429c      	cmp	r4, r3
 80038f4:	d120      	bne.n	8003938 <_puts_r+0x64>
 80038f6:	686c      	ldr	r4, [r5, #4]
 80038f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80038fa:	07db      	lsls	r3, r3, #31
 80038fc:	d405      	bmi.n	800390a <_puts_r+0x36>
 80038fe:	89a3      	ldrh	r3, [r4, #12]
 8003900:	0598      	lsls	r0, r3, #22
 8003902:	d402      	bmi.n	800390a <_puts_r+0x36>
 8003904:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003906:	f000 fb03 	bl	8003f10 <__retarget_lock_acquire_recursive>
 800390a:	89a3      	ldrh	r3, [r4, #12]
 800390c:	0719      	lsls	r1, r3, #28
 800390e:	d51d      	bpl.n	800394c <_puts_r+0x78>
 8003910:	6923      	ldr	r3, [r4, #16]
 8003912:	b1db      	cbz	r3, 800394c <_puts_r+0x78>
 8003914:	3e01      	subs	r6, #1
 8003916:	68a3      	ldr	r3, [r4, #8]
 8003918:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800391c:	3b01      	subs	r3, #1
 800391e:	60a3      	str	r3, [r4, #8]
 8003920:	bb39      	cbnz	r1, 8003972 <_puts_r+0x9e>
 8003922:	2b00      	cmp	r3, #0
 8003924:	da38      	bge.n	8003998 <_puts_r+0xc4>
 8003926:	4622      	mov	r2, r4
 8003928:	210a      	movs	r1, #10
 800392a:	4628      	mov	r0, r5
 800392c:	f000 f878 	bl	8003a20 <__swbuf_r>
 8003930:	3001      	adds	r0, #1
 8003932:	d011      	beq.n	8003958 <_puts_r+0x84>
 8003934:	250a      	movs	r5, #10
 8003936:	e011      	b.n	800395c <_puts_r+0x88>
 8003938:	4b1b      	ldr	r3, [pc, #108]	; (80039a8 <_puts_r+0xd4>)
 800393a:	429c      	cmp	r4, r3
 800393c:	d101      	bne.n	8003942 <_puts_r+0x6e>
 800393e:	68ac      	ldr	r4, [r5, #8]
 8003940:	e7da      	b.n	80038f8 <_puts_r+0x24>
 8003942:	4b1a      	ldr	r3, [pc, #104]	; (80039ac <_puts_r+0xd8>)
 8003944:	429c      	cmp	r4, r3
 8003946:	bf08      	it	eq
 8003948:	68ec      	ldreq	r4, [r5, #12]
 800394a:	e7d5      	b.n	80038f8 <_puts_r+0x24>
 800394c:	4621      	mov	r1, r4
 800394e:	4628      	mov	r0, r5
 8003950:	f000 f8b8 	bl	8003ac4 <__swsetup_r>
 8003954:	2800      	cmp	r0, #0
 8003956:	d0dd      	beq.n	8003914 <_puts_r+0x40>
 8003958:	f04f 35ff 	mov.w	r5, #4294967295
 800395c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800395e:	07da      	lsls	r2, r3, #31
 8003960:	d405      	bmi.n	800396e <_puts_r+0x9a>
 8003962:	89a3      	ldrh	r3, [r4, #12]
 8003964:	059b      	lsls	r3, r3, #22
 8003966:	d402      	bmi.n	800396e <_puts_r+0x9a>
 8003968:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800396a:	f000 fad2 	bl	8003f12 <__retarget_lock_release_recursive>
 800396e:	4628      	mov	r0, r5
 8003970:	bd70      	pop	{r4, r5, r6, pc}
 8003972:	2b00      	cmp	r3, #0
 8003974:	da04      	bge.n	8003980 <_puts_r+0xac>
 8003976:	69a2      	ldr	r2, [r4, #24]
 8003978:	429a      	cmp	r2, r3
 800397a:	dc06      	bgt.n	800398a <_puts_r+0xb6>
 800397c:	290a      	cmp	r1, #10
 800397e:	d004      	beq.n	800398a <_puts_r+0xb6>
 8003980:	6823      	ldr	r3, [r4, #0]
 8003982:	1c5a      	adds	r2, r3, #1
 8003984:	6022      	str	r2, [r4, #0]
 8003986:	7019      	strb	r1, [r3, #0]
 8003988:	e7c5      	b.n	8003916 <_puts_r+0x42>
 800398a:	4622      	mov	r2, r4
 800398c:	4628      	mov	r0, r5
 800398e:	f000 f847 	bl	8003a20 <__swbuf_r>
 8003992:	3001      	adds	r0, #1
 8003994:	d1bf      	bne.n	8003916 <_puts_r+0x42>
 8003996:	e7df      	b.n	8003958 <_puts_r+0x84>
 8003998:	6823      	ldr	r3, [r4, #0]
 800399a:	250a      	movs	r5, #10
 800399c:	1c5a      	adds	r2, r3, #1
 800399e:	6022      	str	r2, [r4, #0]
 80039a0:	701d      	strb	r5, [r3, #0]
 80039a2:	e7db      	b.n	800395c <_puts_r+0x88>
 80039a4:	08004ba4 	.word	0x08004ba4
 80039a8:	08004bc4 	.word	0x08004bc4
 80039ac:	08004b84 	.word	0x08004b84

080039b0 <puts>:
 80039b0:	4b02      	ldr	r3, [pc, #8]	; (80039bc <puts+0xc>)
 80039b2:	4601      	mov	r1, r0
 80039b4:	6818      	ldr	r0, [r3, #0]
 80039b6:	f7ff bf8d 	b.w	80038d4 <_puts_r>
 80039ba:	bf00      	nop
 80039bc:	2000000c 	.word	0x2000000c

080039c0 <_sbrk_r>:
 80039c0:	b538      	push	{r3, r4, r5, lr}
 80039c2:	4d06      	ldr	r5, [pc, #24]	; (80039dc <_sbrk_r+0x1c>)
 80039c4:	2300      	movs	r3, #0
 80039c6:	4604      	mov	r4, r0
 80039c8:	4608      	mov	r0, r1
 80039ca:	602b      	str	r3, [r5, #0]
 80039cc:	f7fd f8ea 	bl	8000ba4 <_sbrk>
 80039d0:	1c43      	adds	r3, r0, #1
 80039d2:	d102      	bne.n	80039da <_sbrk_r+0x1a>
 80039d4:	682b      	ldr	r3, [r5, #0]
 80039d6:	b103      	cbz	r3, 80039da <_sbrk_r+0x1a>
 80039d8:	6023      	str	r3, [r4, #0]
 80039da:	bd38      	pop	{r3, r4, r5, pc}
 80039dc:	20000164 	.word	0x20000164

080039e0 <siprintf>:
 80039e0:	b40e      	push	{r1, r2, r3}
 80039e2:	b500      	push	{lr}
 80039e4:	b09c      	sub	sp, #112	; 0x70
 80039e6:	ab1d      	add	r3, sp, #116	; 0x74
 80039e8:	9002      	str	r0, [sp, #8]
 80039ea:	9006      	str	r0, [sp, #24]
 80039ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80039f0:	4809      	ldr	r0, [pc, #36]	; (8003a18 <siprintf+0x38>)
 80039f2:	9107      	str	r1, [sp, #28]
 80039f4:	9104      	str	r1, [sp, #16]
 80039f6:	4909      	ldr	r1, [pc, #36]	; (8003a1c <siprintf+0x3c>)
 80039f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80039fc:	9105      	str	r1, [sp, #20]
 80039fe:	6800      	ldr	r0, [r0, #0]
 8003a00:	9301      	str	r3, [sp, #4]
 8003a02:	a902      	add	r1, sp, #8
 8003a04:	f000 fb54 	bl	80040b0 <_svfiprintf_r>
 8003a08:	9b02      	ldr	r3, [sp, #8]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	701a      	strb	r2, [r3, #0]
 8003a0e:	b01c      	add	sp, #112	; 0x70
 8003a10:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a14:	b003      	add	sp, #12
 8003a16:	4770      	bx	lr
 8003a18:	2000000c 	.word	0x2000000c
 8003a1c:	ffff0208 	.word	0xffff0208

08003a20 <__swbuf_r>:
 8003a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a22:	460e      	mov	r6, r1
 8003a24:	4614      	mov	r4, r2
 8003a26:	4605      	mov	r5, r0
 8003a28:	b118      	cbz	r0, 8003a32 <__swbuf_r+0x12>
 8003a2a:	6983      	ldr	r3, [r0, #24]
 8003a2c:	b90b      	cbnz	r3, 8003a32 <__swbuf_r+0x12>
 8003a2e:	f000 f9d1 	bl	8003dd4 <__sinit>
 8003a32:	4b21      	ldr	r3, [pc, #132]	; (8003ab8 <__swbuf_r+0x98>)
 8003a34:	429c      	cmp	r4, r3
 8003a36:	d12b      	bne.n	8003a90 <__swbuf_r+0x70>
 8003a38:	686c      	ldr	r4, [r5, #4]
 8003a3a:	69a3      	ldr	r3, [r4, #24]
 8003a3c:	60a3      	str	r3, [r4, #8]
 8003a3e:	89a3      	ldrh	r3, [r4, #12]
 8003a40:	071a      	lsls	r2, r3, #28
 8003a42:	d52f      	bpl.n	8003aa4 <__swbuf_r+0x84>
 8003a44:	6923      	ldr	r3, [r4, #16]
 8003a46:	b36b      	cbz	r3, 8003aa4 <__swbuf_r+0x84>
 8003a48:	6923      	ldr	r3, [r4, #16]
 8003a4a:	6820      	ldr	r0, [r4, #0]
 8003a4c:	1ac0      	subs	r0, r0, r3
 8003a4e:	6963      	ldr	r3, [r4, #20]
 8003a50:	b2f6      	uxtb	r6, r6
 8003a52:	4283      	cmp	r3, r0
 8003a54:	4637      	mov	r7, r6
 8003a56:	dc04      	bgt.n	8003a62 <__swbuf_r+0x42>
 8003a58:	4621      	mov	r1, r4
 8003a5a:	4628      	mov	r0, r5
 8003a5c:	f000 f926 	bl	8003cac <_fflush_r>
 8003a60:	bb30      	cbnz	r0, 8003ab0 <__swbuf_r+0x90>
 8003a62:	68a3      	ldr	r3, [r4, #8]
 8003a64:	3b01      	subs	r3, #1
 8003a66:	60a3      	str	r3, [r4, #8]
 8003a68:	6823      	ldr	r3, [r4, #0]
 8003a6a:	1c5a      	adds	r2, r3, #1
 8003a6c:	6022      	str	r2, [r4, #0]
 8003a6e:	701e      	strb	r6, [r3, #0]
 8003a70:	6963      	ldr	r3, [r4, #20]
 8003a72:	3001      	adds	r0, #1
 8003a74:	4283      	cmp	r3, r0
 8003a76:	d004      	beq.n	8003a82 <__swbuf_r+0x62>
 8003a78:	89a3      	ldrh	r3, [r4, #12]
 8003a7a:	07db      	lsls	r3, r3, #31
 8003a7c:	d506      	bpl.n	8003a8c <__swbuf_r+0x6c>
 8003a7e:	2e0a      	cmp	r6, #10
 8003a80:	d104      	bne.n	8003a8c <__swbuf_r+0x6c>
 8003a82:	4621      	mov	r1, r4
 8003a84:	4628      	mov	r0, r5
 8003a86:	f000 f911 	bl	8003cac <_fflush_r>
 8003a8a:	b988      	cbnz	r0, 8003ab0 <__swbuf_r+0x90>
 8003a8c:	4638      	mov	r0, r7
 8003a8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a90:	4b0a      	ldr	r3, [pc, #40]	; (8003abc <__swbuf_r+0x9c>)
 8003a92:	429c      	cmp	r4, r3
 8003a94:	d101      	bne.n	8003a9a <__swbuf_r+0x7a>
 8003a96:	68ac      	ldr	r4, [r5, #8]
 8003a98:	e7cf      	b.n	8003a3a <__swbuf_r+0x1a>
 8003a9a:	4b09      	ldr	r3, [pc, #36]	; (8003ac0 <__swbuf_r+0xa0>)
 8003a9c:	429c      	cmp	r4, r3
 8003a9e:	bf08      	it	eq
 8003aa0:	68ec      	ldreq	r4, [r5, #12]
 8003aa2:	e7ca      	b.n	8003a3a <__swbuf_r+0x1a>
 8003aa4:	4621      	mov	r1, r4
 8003aa6:	4628      	mov	r0, r5
 8003aa8:	f000 f80c 	bl	8003ac4 <__swsetup_r>
 8003aac:	2800      	cmp	r0, #0
 8003aae:	d0cb      	beq.n	8003a48 <__swbuf_r+0x28>
 8003ab0:	f04f 37ff 	mov.w	r7, #4294967295
 8003ab4:	e7ea      	b.n	8003a8c <__swbuf_r+0x6c>
 8003ab6:	bf00      	nop
 8003ab8:	08004ba4 	.word	0x08004ba4
 8003abc:	08004bc4 	.word	0x08004bc4
 8003ac0:	08004b84 	.word	0x08004b84

08003ac4 <__swsetup_r>:
 8003ac4:	4b32      	ldr	r3, [pc, #200]	; (8003b90 <__swsetup_r+0xcc>)
 8003ac6:	b570      	push	{r4, r5, r6, lr}
 8003ac8:	681d      	ldr	r5, [r3, #0]
 8003aca:	4606      	mov	r6, r0
 8003acc:	460c      	mov	r4, r1
 8003ace:	b125      	cbz	r5, 8003ada <__swsetup_r+0x16>
 8003ad0:	69ab      	ldr	r3, [r5, #24]
 8003ad2:	b913      	cbnz	r3, 8003ada <__swsetup_r+0x16>
 8003ad4:	4628      	mov	r0, r5
 8003ad6:	f000 f97d 	bl	8003dd4 <__sinit>
 8003ada:	4b2e      	ldr	r3, [pc, #184]	; (8003b94 <__swsetup_r+0xd0>)
 8003adc:	429c      	cmp	r4, r3
 8003ade:	d10f      	bne.n	8003b00 <__swsetup_r+0x3c>
 8003ae0:	686c      	ldr	r4, [r5, #4]
 8003ae2:	89a3      	ldrh	r3, [r4, #12]
 8003ae4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003ae8:	0719      	lsls	r1, r3, #28
 8003aea:	d42c      	bmi.n	8003b46 <__swsetup_r+0x82>
 8003aec:	06dd      	lsls	r5, r3, #27
 8003aee:	d411      	bmi.n	8003b14 <__swsetup_r+0x50>
 8003af0:	2309      	movs	r3, #9
 8003af2:	6033      	str	r3, [r6, #0]
 8003af4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003af8:	81a3      	strh	r3, [r4, #12]
 8003afa:	f04f 30ff 	mov.w	r0, #4294967295
 8003afe:	e03e      	b.n	8003b7e <__swsetup_r+0xba>
 8003b00:	4b25      	ldr	r3, [pc, #148]	; (8003b98 <__swsetup_r+0xd4>)
 8003b02:	429c      	cmp	r4, r3
 8003b04:	d101      	bne.n	8003b0a <__swsetup_r+0x46>
 8003b06:	68ac      	ldr	r4, [r5, #8]
 8003b08:	e7eb      	b.n	8003ae2 <__swsetup_r+0x1e>
 8003b0a:	4b24      	ldr	r3, [pc, #144]	; (8003b9c <__swsetup_r+0xd8>)
 8003b0c:	429c      	cmp	r4, r3
 8003b0e:	bf08      	it	eq
 8003b10:	68ec      	ldreq	r4, [r5, #12]
 8003b12:	e7e6      	b.n	8003ae2 <__swsetup_r+0x1e>
 8003b14:	0758      	lsls	r0, r3, #29
 8003b16:	d512      	bpl.n	8003b3e <__swsetup_r+0x7a>
 8003b18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003b1a:	b141      	cbz	r1, 8003b2e <__swsetup_r+0x6a>
 8003b1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003b20:	4299      	cmp	r1, r3
 8003b22:	d002      	beq.n	8003b2a <__swsetup_r+0x66>
 8003b24:	4630      	mov	r0, r6
 8003b26:	f7ff fddd 	bl	80036e4 <_free_r>
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	6363      	str	r3, [r4, #52]	; 0x34
 8003b2e:	89a3      	ldrh	r3, [r4, #12]
 8003b30:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003b34:	81a3      	strh	r3, [r4, #12]
 8003b36:	2300      	movs	r3, #0
 8003b38:	6063      	str	r3, [r4, #4]
 8003b3a:	6923      	ldr	r3, [r4, #16]
 8003b3c:	6023      	str	r3, [r4, #0]
 8003b3e:	89a3      	ldrh	r3, [r4, #12]
 8003b40:	f043 0308 	orr.w	r3, r3, #8
 8003b44:	81a3      	strh	r3, [r4, #12]
 8003b46:	6923      	ldr	r3, [r4, #16]
 8003b48:	b94b      	cbnz	r3, 8003b5e <__swsetup_r+0x9a>
 8003b4a:	89a3      	ldrh	r3, [r4, #12]
 8003b4c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003b50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b54:	d003      	beq.n	8003b5e <__swsetup_r+0x9a>
 8003b56:	4621      	mov	r1, r4
 8003b58:	4630      	mov	r0, r6
 8003b5a:	f000 fa01 	bl	8003f60 <__smakebuf_r>
 8003b5e:	89a0      	ldrh	r0, [r4, #12]
 8003b60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003b64:	f010 0301 	ands.w	r3, r0, #1
 8003b68:	d00a      	beq.n	8003b80 <__swsetup_r+0xbc>
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	60a3      	str	r3, [r4, #8]
 8003b6e:	6963      	ldr	r3, [r4, #20]
 8003b70:	425b      	negs	r3, r3
 8003b72:	61a3      	str	r3, [r4, #24]
 8003b74:	6923      	ldr	r3, [r4, #16]
 8003b76:	b943      	cbnz	r3, 8003b8a <__swsetup_r+0xc6>
 8003b78:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003b7c:	d1ba      	bne.n	8003af4 <__swsetup_r+0x30>
 8003b7e:	bd70      	pop	{r4, r5, r6, pc}
 8003b80:	0781      	lsls	r1, r0, #30
 8003b82:	bf58      	it	pl
 8003b84:	6963      	ldrpl	r3, [r4, #20]
 8003b86:	60a3      	str	r3, [r4, #8]
 8003b88:	e7f4      	b.n	8003b74 <__swsetup_r+0xb0>
 8003b8a:	2000      	movs	r0, #0
 8003b8c:	e7f7      	b.n	8003b7e <__swsetup_r+0xba>
 8003b8e:	bf00      	nop
 8003b90:	2000000c 	.word	0x2000000c
 8003b94:	08004ba4 	.word	0x08004ba4
 8003b98:	08004bc4 	.word	0x08004bc4
 8003b9c:	08004b84 	.word	0x08004b84

08003ba0 <__sflush_r>:
 8003ba0:	898a      	ldrh	r2, [r1, #12]
 8003ba2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ba6:	4605      	mov	r5, r0
 8003ba8:	0710      	lsls	r0, r2, #28
 8003baa:	460c      	mov	r4, r1
 8003bac:	d458      	bmi.n	8003c60 <__sflush_r+0xc0>
 8003bae:	684b      	ldr	r3, [r1, #4]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	dc05      	bgt.n	8003bc0 <__sflush_r+0x20>
 8003bb4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	dc02      	bgt.n	8003bc0 <__sflush_r+0x20>
 8003bba:	2000      	movs	r0, #0
 8003bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003bc0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003bc2:	2e00      	cmp	r6, #0
 8003bc4:	d0f9      	beq.n	8003bba <__sflush_r+0x1a>
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003bcc:	682f      	ldr	r7, [r5, #0]
 8003bce:	602b      	str	r3, [r5, #0]
 8003bd0:	d032      	beq.n	8003c38 <__sflush_r+0x98>
 8003bd2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003bd4:	89a3      	ldrh	r3, [r4, #12]
 8003bd6:	075a      	lsls	r2, r3, #29
 8003bd8:	d505      	bpl.n	8003be6 <__sflush_r+0x46>
 8003bda:	6863      	ldr	r3, [r4, #4]
 8003bdc:	1ac0      	subs	r0, r0, r3
 8003bde:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003be0:	b10b      	cbz	r3, 8003be6 <__sflush_r+0x46>
 8003be2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003be4:	1ac0      	subs	r0, r0, r3
 8003be6:	2300      	movs	r3, #0
 8003be8:	4602      	mov	r2, r0
 8003bea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003bec:	6a21      	ldr	r1, [r4, #32]
 8003bee:	4628      	mov	r0, r5
 8003bf0:	47b0      	blx	r6
 8003bf2:	1c43      	adds	r3, r0, #1
 8003bf4:	89a3      	ldrh	r3, [r4, #12]
 8003bf6:	d106      	bne.n	8003c06 <__sflush_r+0x66>
 8003bf8:	6829      	ldr	r1, [r5, #0]
 8003bfa:	291d      	cmp	r1, #29
 8003bfc:	d82c      	bhi.n	8003c58 <__sflush_r+0xb8>
 8003bfe:	4a2a      	ldr	r2, [pc, #168]	; (8003ca8 <__sflush_r+0x108>)
 8003c00:	40ca      	lsrs	r2, r1
 8003c02:	07d6      	lsls	r6, r2, #31
 8003c04:	d528      	bpl.n	8003c58 <__sflush_r+0xb8>
 8003c06:	2200      	movs	r2, #0
 8003c08:	6062      	str	r2, [r4, #4]
 8003c0a:	04d9      	lsls	r1, r3, #19
 8003c0c:	6922      	ldr	r2, [r4, #16]
 8003c0e:	6022      	str	r2, [r4, #0]
 8003c10:	d504      	bpl.n	8003c1c <__sflush_r+0x7c>
 8003c12:	1c42      	adds	r2, r0, #1
 8003c14:	d101      	bne.n	8003c1a <__sflush_r+0x7a>
 8003c16:	682b      	ldr	r3, [r5, #0]
 8003c18:	b903      	cbnz	r3, 8003c1c <__sflush_r+0x7c>
 8003c1a:	6560      	str	r0, [r4, #84]	; 0x54
 8003c1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003c1e:	602f      	str	r7, [r5, #0]
 8003c20:	2900      	cmp	r1, #0
 8003c22:	d0ca      	beq.n	8003bba <__sflush_r+0x1a>
 8003c24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003c28:	4299      	cmp	r1, r3
 8003c2a:	d002      	beq.n	8003c32 <__sflush_r+0x92>
 8003c2c:	4628      	mov	r0, r5
 8003c2e:	f7ff fd59 	bl	80036e4 <_free_r>
 8003c32:	2000      	movs	r0, #0
 8003c34:	6360      	str	r0, [r4, #52]	; 0x34
 8003c36:	e7c1      	b.n	8003bbc <__sflush_r+0x1c>
 8003c38:	6a21      	ldr	r1, [r4, #32]
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	4628      	mov	r0, r5
 8003c3e:	47b0      	blx	r6
 8003c40:	1c41      	adds	r1, r0, #1
 8003c42:	d1c7      	bne.n	8003bd4 <__sflush_r+0x34>
 8003c44:	682b      	ldr	r3, [r5, #0]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d0c4      	beq.n	8003bd4 <__sflush_r+0x34>
 8003c4a:	2b1d      	cmp	r3, #29
 8003c4c:	d001      	beq.n	8003c52 <__sflush_r+0xb2>
 8003c4e:	2b16      	cmp	r3, #22
 8003c50:	d101      	bne.n	8003c56 <__sflush_r+0xb6>
 8003c52:	602f      	str	r7, [r5, #0]
 8003c54:	e7b1      	b.n	8003bba <__sflush_r+0x1a>
 8003c56:	89a3      	ldrh	r3, [r4, #12]
 8003c58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c5c:	81a3      	strh	r3, [r4, #12]
 8003c5e:	e7ad      	b.n	8003bbc <__sflush_r+0x1c>
 8003c60:	690f      	ldr	r7, [r1, #16]
 8003c62:	2f00      	cmp	r7, #0
 8003c64:	d0a9      	beq.n	8003bba <__sflush_r+0x1a>
 8003c66:	0793      	lsls	r3, r2, #30
 8003c68:	680e      	ldr	r6, [r1, #0]
 8003c6a:	bf08      	it	eq
 8003c6c:	694b      	ldreq	r3, [r1, #20]
 8003c6e:	600f      	str	r7, [r1, #0]
 8003c70:	bf18      	it	ne
 8003c72:	2300      	movne	r3, #0
 8003c74:	eba6 0807 	sub.w	r8, r6, r7
 8003c78:	608b      	str	r3, [r1, #8]
 8003c7a:	f1b8 0f00 	cmp.w	r8, #0
 8003c7e:	dd9c      	ble.n	8003bba <__sflush_r+0x1a>
 8003c80:	6a21      	ldr	r1, [r4, #32]
 8003c82:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003c84:	4643      	mov	r3, r8
 8003c86:	463a      	mov	r2, r7
 8003c88:	4628      	mov	r0, r5
 8003c8a:	47b0      	blx	r6
 8003c8c:	2800      	cmp	r0, #0
 8003c8e:	dc06      	bgt.n	8003c9e <__sflush_r+0xfe>
 8003c90:	89a3      	ldrh	r3, [r4, #12]
 8003c92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c96:	81a3      	strh	r3, [r4, #12]
 8003c98:	f04f 30ff 	mov.w	r0, #4294967295
 8003c9c:	e78e      	b.n	8003bbc <__sflush_r+0x1c>
 8003c9e:	4407      	add	r7, r0
 8003ca0:	eba8 0800 	sub.w	r8, r8, r0
 8003ca4:	e7e9      	b.n	8003c7a <__sflush_r+0xda>
 8003ca6:	bf00      	nop
 8003ca8:	20400001 	.word	0x20400001

08003cac <_fflush_r>:
 8003cac:	b538      	push	{r3, r4, r5, lr}
 8003cae:	690b      	ldr	r3, [r1, #16]
 8003cb0:	4605      	mov	r5, r0
 8003cb2:	460c      	mov	r4, r1
 8003cb4:	b913      	cbnz	r3, 8003cbc <_fflush_r+0x10>
 8003cb6:	2500      	movs	r5, #0
 8003cb8:	4628      	mov	r0, r5
 8003cba:	bd38      	pop	{r3, r4, r5, pc}
 8003cbc:	b118      	cbz	r0, 8003cc6 <_fflush_r+0x1a>
 8003cbe:	6983      	ldr	r3, [r0, #24]
 8003cc0:	b90b      	cbnz	r3, 8003cc6 <_fflush_r+0x1a>
 8003cc2:	f000 f887 	bl	8003dd4 <__sinit>
 8003cc6:	4b14      	ldr	r3, [pc, #80]	; (8003d18 <_fflush_r+0x6c>)
 8003cc8:	429c      	cmp	r4, r3
 8003cca:	d11b      	bne.n	8003d04 <_fflush_r+0x58>
 8003ccc:	686c      	ldr	r4, [r5, #4]
 8003cce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d0ef      	beq.n	8003cb6 <_fflush_r+0xa>
 8003cd6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003cd8:	07d0      	lsls	r0, r2, #31
 8003cda:	d404      	bmi.n	8003ce6 <_fflush_r+0x3a>
 8003cdc:	0599      	lsls	r1, r3, #22
 8003cde:	d402      	bmi.n	8003ce6 <_fflush_r+0x3a>
 8003ce0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ce2:	f000 f915 	bl	8003f10 <__retarget_lock_acquire_recursive>
 8003ce6:	4628      	mov	r0, r5
 8003ce8:	4621      	mov	r1, r4
 8003cea:	f7ff ff59 	bl	8003ba0 <__sflush_r>
 8003cee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003cf0:	07da      	lsls	r2, r3, #31
 8003cf2:	4605      	mov	r5, r0
 8003cf4:	d4e0      	bmi.n	8003cb8 <_fflush_r+0xc>
 8003cf6:	89a3      	ldrh	r3, [r4, #12]
 8003cf8:	059b      	lsls	r3, r3, #22
 8003cfa:	d4dd      	bmi.n	8003cb8 <_fflush_r+0xc>
 8003cfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003cfe:	f000 f908 	bl	8003f12 <__retarget_lock_release_recursive>
 8003d02:	e7d9      	b.n	8003cb8 <_fflush_r+0xc>
 8003d04:	4b05      	ldr	r3, [pc, #20]	; (8003d1c <_fflush_r+0x70>)
 8003d06:	429c      	cmp	r4, r3
 8003d08:	d101      	bne.n	8003d0e <_fflush_r+0x62>
 8003d0a:	68ac      	ldr	r4, [r5, #8]
 8003d0c:	e7df      	b.n	8003cce <_fflush_r+0x22>
 8003d0e:	4b04      	ldr	r3, [pc, #16]	; (8003d20 <_fflush_r+0x74>)
 8003d10:	429c      	cmp	r4, r3
 8003d12:	bf08      	it	eq
 8003d14:	68ec      	ldreq	r4, [r5, #12]
 8003d16:	e7da      	b.n	8003cce <_fflush_r+0x22>
 8003d18:	08004ba4 	.word	0x08004ba4
 8003d1c:	08004bc4 	.word	0x08004bc4
 8003d20:	08004b84 	.word	0x08004b84

08003d24 <std>:
 8003d24:	2300      	movs	r3, #0
 8003d26:	b510      	push	{r4, lr}
 8003d28:	4604      	mov	r4, r0
 8003d2a:	e9c0 3300 	strd	r3, r3, [r0]
 8003d2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003d32:	6083      	str	r3, [r0, #8]
 8003d34:	8181      	strh	r1, [r0, #12]
 8003d36:	6643      	str	r3, [r0, #100]	; 0x64
 8003d38:	81c2      	strh	r2, [r0, #14]
 8003d3a:	6183      	str	r3, [r0, #24]
 8003d3c:	4619      	mov	r1, r3
 8003d3e:	2208      	movs	r2, #8
 8003d40:	305c      	adds	r0, #92	; 0x5c
 8003d42:	f7ff fcc7 	bl	80036d4 <memset>
 8003d46:	4b05      	ldr	r3, [pc, #20]	; (8003d5c <std+0x38>)
 8003d48:	6263      	str	r3, [r4, #36]	; 0x24
 8003d4a:	4b05      	ldr	r3, [pc, #20]	; (8003d60 <std+0x3c>)
 8003d4c:	62a3      	str	r3, [r4, #40]	; 0x28
 8003d4e:	4b05      	ldr	r3, [pc, #20]	; (8003d64 <std+0x40>)
 8003d50:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003d52:	4b05      	ldr	r3, [pc, #20]	; (8003d68 <std+0x44>)
 8003d54:	6224      	str	r4, [r4, #32]
 8003d56:	6323      	str	r3, [r4, #48]	; 0x30
 8003d58:	bd10      	pop	{r4, pc}
 8003d5a:	bf00      	nop
 8003d5c:	0800488d 	.word	0x0800488d
 8003d60:	080048af 	.word	0x080048af
 8003d64:	080048e7 	.word	0x080048e7
 8003d68:	0800490b 	.word	0x0800490b

08003d6c <_cleanup_r>:
 8003d6c:	4901      	ldr	r1, [pc, #4]	; (8003d74 <_cleanup_r+0x8>)
 8003d6e:	f000 b8af 	b.w	8003ed0 <_fwalk_reent>
 8003d72:	bf00      	nop
 8003d74:	08003cad 	.word	0x08003cad

08003d78 <__sfmoreglue>:
 8003d78:	b570      	push	{r4, r5, r6, lr}
 8003d7a:	2268      	movs	r2, #104	; 0x68
 8003d7c:	1e4d      	subs	r5, r1, #1
 8003d7e:	4355      	muls	r5, r2
 8003d80:	460e      	mov	r6, r1
 8003d82:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003d86:	f7ff fd19 	bl	80037bc <_malloc_r>
 8003d8a:	4604      	mov	r4, r0
 8003d8c:	b140      	cbz	r0, 8003da0 <__sfmoreglue+0x28>
 8003d8e:	2100      	movs	r1, #0
 8003d90:	e9c0 1600 	strd	r1, r6, [r0]
 8003d94:	300c      	adds	r0, #12
 8003d96:	60a0      	str	r0, [r4, #8]
 8003d98:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003d9c:	f7ff fc9a 	bl	80036d4 <memset>
 8003da0:	4620      	mov	r0, r4
 8003da2:	bd70      	pop	{r4, r5, r6, pc}

08003da4 <__sfp_lock_acquire>:
 8003da4:	4801      	ldr	r0, [pc, #4]	; (8003dac <__sfp_lock_acquire+0x8>)
 8003da6:	f000 b8b3 	b.w	8003f10 <__retarget_lock_acquire_recursive>
 8003daa:	bf00      	nop
 8003dac:	20000161 	.word	0x20000161

08003db0 <__sfp_lock_release>:
 8003db0:	4801      	ldr	r0, [pc, #4]	; (8003db8 <__sfp_lock_release+0x8>)
 8003db2:	f000 b8ae 	b.w	8003f12 <__retarget_lock_release_recursive>
 8003db6:	bf00      	nop
 8003db8:	20000161 	.word	0x20000161

08003dbc <__sinit_lock_acquire>:
 8003dbc:	4801      	ldr	r0, [pc, #4]	; (8003dc4 <__sinit_lock_acquire+0x8>)
 8003dbe:	f000 b8a7 	b.w	8003f10 <__retarget_lock_acquire_recursive>
 8003dc2:	bf00      	nop
 8003dc4:	20000162 	.word	0x20000162

08003dc8 <__sinit_lock_release>:
 8003dc8:	4801      	ldr	r0, [pc, #4]	; (8003dd0 <__sinit_lock_release+0x8>)
 8003dca:	f000 b8a2 	b.w	8003f12 <__retarget_lock_release_recursive>
 8003dce:	bf00      	nop
 8003dd0:	20000162 	.word	0x20000162

08003dd4 <__sinit>:
 8003dd4:	b510      	push	{r4, lr}
 8003dd6:	4604      	mov	r4, r0
 8003dd8:	f7ff fff0 	bl	8003dbc <__sinit_lock_acquire>
 8003ddc:	69a3      	ldr	r3, [r4, #24]
 8003dde:	b11b      	cbz	r3, 8003de8 <__sinit+0x14>
 8003de0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003de4:	f7ff bff0 	b.w	8003dc8 <__sinit_lock_release>
 8003de8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003dec:	6523      	str	r3, [r4, #80]	; 0x50
 8003dee:	4b13      	ldr	r3, [pc, #76]	; (8003e3c <__sinit+0x68>)
 8003df0:	4a13      	ldr	r2, [pc, #76]	; (8003e40 <__sinit+0x6c>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	62a2      	str	r2, [r4, #40]	; 0x28
 8003df6:	42a3      	cmp	r3, r4
 8003df8:	bf04      	itt	eq
 8003dfa:	2301      	moveq	r3, #1
 8003dfc:	61a3      	streq	r3, [r4, #24]
 8003dfe:	4620      	mov	r0, r4
 8003e00:	f000 f820 	bl	8003e44 <__sfp>
 8003e04:	6060      	str	r0, [r4, #4]
 8003e06:	4620      	mov	r0, r4
 8003e08:	f000 f81c 	bl	8003e44 <__sfp>
 8003e0c:	60a0      	str	r0, [r4, #8]
 8003e0e:	4620      	mov	r0, r4
 8003e10:	f000 f818 	bl	8003e44 <__sfp>
 8003e14:	2200      	movs	r2, #0
 8003e16:	60e0      	str	r0, [r4, #12]
 8003e18:	2104      	movs	r1, #4
 8003e1a:	6860      	ldr	r0, [r4, #4]
 8003e1c:	f7ff ff82 	bl	8003d24 <std>
 8003e20:	68a0      	ldr	r0, [r4, #8]
 8003e22:	2201      	movs	r2, #1
 8003e24:	2109      	movs	r1, #9
 8003e26:	f7ff ff7d 	bl	8003d24 <std>
 8003e2a:	68e0      	ldr	r0, [r4, #12]
 8003e2c:	2202      	movs	r2, #2
 8003e2e:	2112      	movs	r1, #18
 8003e30:	f7ff ff78 	bl	8003d24 <std>
 8003e34:	2301      	movs	r3, #1
 8003e36:	61a3      	str	r3, [r4, #24]
 8003e38:	e7d2      	b.n	8003de0 <__sinit+0xc>
 8003e3a:	bf00      	nop
 8003e3c:	08004b80 	.word	0x08004b80
 8003e40:	08003d6d 	.word	0x08003d6d

08003e44 <__sfp>:
 8003e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e46:	4607      	mov	r7, r0
 8003e48:	f7ff ffac 	bl	8003da4 <__sfp_lock_acquire>
 8003e4c:	4b1e      	ldr	r3, [pc, #120]	; (8003ec8 <__sfp+0x84>)
 8003e4e:	681e      	ldr	r6, [r3, #0]
 8003e50:	69b3      	ldr	r3, [r6, #24]
 8003e52:	b913      	cbnz	r3, 8003e5a <__sfp+0x16>
 8003e54:	4630      	mov	r0, r6
 8003e56:	f7ff ffbd 	bl	8003dd4 <__sinit>
 8003e5a:	3648      	adds	r6, #72	; 0x48
 8003e5c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003e60:	3b01      	subs	r3, #1
 8003e62:	d503      	bpl.n	8003e6c <__sfp+0x28>
 8003e64:	6833      	ldr	r3, [r6, #0]
 8003e66:	b30b      	cbz	r3, 8003eac <__sfp+0x68>
 8003e68:	6836      	ldr	r6, [r6, #0]
 8003e6a:	e7f7      	b.n	8003e5c <__sfp+0x18>
 8003e6c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003e70:	b9d5      	cbnz	r5, 8003ea8 <__sfp+0x64>
 8003e72:	4b16      	ldr	r3, [pc, #88]	; (8003ecc <__sfp+0x88>)
 8003e74:	60e3      	str	r3, [r4, #12]
 8003e76:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003e7a:	6665      	str	r5, [r4, #100]	; 0x64
 8003e7c:	f000 f847 	bl	8003f0e <__retarget_lock_init_recursive>
 8003e80:	f7ff ff96 	bl	8003db0 <__sfp_lock_release>
 8003e84:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003e88:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003e8c:	6025      	str	r5, [r4, #0]
 8003e8e:	61a5      	str	r5, [r4, #24]
 8003e90:	2208      	movs	r2, #8
 8003e92:	4629      	mov	r1, r5
 8003e94:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003e98:	f7ff fc1c 	bl	80036d4 <memset>
 8003e9c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003ea0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003ea4:	4620      	mov	r0, r4
 8003ea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ea8:	3468      	adds	r4, #104	; 0x68
 8003eaa:	e7d9      	b.n	8003e60 <__sfp+0x1c>
 8003eac:	2104      	movs	r1, #4
 8003eae:	4638      	mov	r0, r7
 8003eb0:	f7ff ff62 	bl	8003d78 <__sfmoreglue>
 8003eb4:	4604      	mov	r4, r0
 8003eb6:	6030      	str	r0, [r6, #0]
 8003eb8:	2800      	cmp	r0, #0
 8003eba:	d1d5      	bne.n	8003e68 <__sfp+0x24>
 8003ebc:	f7ff ff78 	bl	8003db0 <__sfp_lock_release>
 8003ec0:	230c      	movs	r3, #12
 8003ec2:	603b      	str	r3, [r7, #0]
 8003ec4:	e7ee      	b.n	8003ea4 <__sfp+0x60>
 8003ec6:	bf00      	nop
 8003ec8:	08004b80 	.word	0x08004b80
 8003ecc:	ffff0001 	.word	0xffff0001

08003ed0 <_fwalk_reent>:
 8003ed0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ed4:	4606      	mov	r6, r0
 8003ed6:	4688      	mov	r8, r1
 8003ed8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003edc:	2700      	movs	r7, #0
 8003ede:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003ee2:	f1b9 0901 	subs.w	r9, r9, #1
 8003ee6:	d505      	bpl.n	8003ef4 <_fwalk_reent+0x24>
 8003ee8:	6824      	ldr	r4, [r4, #0]
 8003eea:	2c00      	cmp	r4, #0
 8003eec:	d1f7      	bne.n	8003ede <_fwalk_reent+0xe>
 8003eee:	4638      	mov	r0, r7
 8003ef0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ef4:	89ab      	ldrh	r3, [r5, #12]
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d907      	bls.n	8003f0a <_fwalk_reent+0x3a>
 8003efa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003efe:	3301      	adds	r3, #1
 8003f00:	d003      	beq.n	8003f0a <_fwalk_reent+0x3a>
 8003f02:	4629      	mov	r1, r5
 8003f04:	4630      	mov	r0, r6
 8003f06:	47c0      	blx	r8
 8003f08:	4307      	orrs	r7, r0
 8003f0a:	3568      	adds	r5, #104	; 0x68
 8003f0c:	e7e9      	b.n	8003ee2 <_fwalk_reent+0x12>

08003f0e <__retarget_lock_init_recursive>:
 8003f0e:	4770      	bx	lr

08003f10 <__retarget_lock_acquire_recursive>:
 8003f10:	4770      	bx	lr

08003f12 <__retarget_lock_release_recursive>:
 8003f12:	4770      	bx	lr

08003f14 <__swhatbuf_r>:
 8003f14:	b570      	push	{r4, r5, r6, lr}
 8003f16:	460e      	mov	r6, r1
 8003f18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f1c:	2900      	cmp	r1, #0
 8003f1e:	b096      	sub	sp, #88	; 0x58
 8003f20:	4614      	mov	r4, r2
 8003f22:	461d      	mov	r5, r3
 8003f24:	da08      	bge.n	8003f38 <__swhatbuf_r+0x24>
 8003f26:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	602a      	str	r2, [r5, #0]
 8003f2e:	061a      	lsls	r2, r3, #24
 8003f30:	d410      	bmi.n	8003f54 <__swhatbuf_r+0x40>
 8003f32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f36:	e00e      	b.n	8003f56 <__swhatbuf_r+0x42>
 8003f38:	466a      	mov	r2, sp
 8003f3a:	f000 fd0d 	bl	8004958 <_fstat_r>
 8003f3e:	2800      	cmp	r0, #0
 8003f40:	dbf1      	blt.n	8003f26 <__swhatbuf_r+0x12>
 8003f42:	9a01      	ldr	r2, [sp, #4]
 8003f44:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003f48:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003f4c:	425a      	negs	r2, r3
 8003f4e:	415a      	adcs	r2, r3
 8003f50:	602a      	str	r2, [r5, #0]
 8003f52:	e7ee      	b.n	8003f32 <__swhatbuf_r+0x1e>
 8003f54:	2340      	movs	r3, #64	; 0x40
 8003f56:	2000      	movs	r0, #0
 8003f58:	6023      	str	r3, [r4, #0]
 8003f5a:	b016      	add	sp, #88	; 0x58
 8003f5c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003f60 <__smakebuf_r>:
 8003f60:	898b      	ldrh	r3, [r1, #12]
 8003f62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003f64:	079d      	lsls	r5, r3, #30
 8003f66:	4606      	mov	r6, r0
 8003f68:	460c      	mov	r4, r1
 8003f6a:	d507      	bpl.n	8003f7c <__smakebuf_r+0x1c>
 8003f6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003f70:	6023      	str	r3, [r4, #0]
 8003f72:	6123      	str	r3, [r4, #16]
 8003f74:	2301      	movs	r3, #1
 8003f76:	6163      	str	r3, [r4, #20]
 8003f78:	b002      	add	sp, #8
 8003f7a:	bd70      	pop	{r4, r5, r6, pc}
 8003f7c:	ab01      	add	r3, sp, #4
 8003f7e:	466a      	mov	r2, sp
 8003f80:	f7ff ffc8 	bl	8003f14 <__swhatbuf_r>
 8003f84:	9900      	ldr	r1, [sp, #0]
 8003f86:	4605      	mov	r5, r0
 8003f88:	4630      	mov	r0, r6
 8003f8a:	f7ff fc17 	bl	80037bc <_malloc_r>
 8003f8e:	b948      	cbnz	r0, 8003fa4 <__smakebuf_r+0x44>
 8003f90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f94:	059a      	lsls	r2, r3, #22
 8003f96:	d4ef      	bmi.n	8003f78 <__smakebuf_r+0x18>
 8003f98:	f023 0303 	bic.w	r3, r3, #3
 8003f9c:	f043 0302 	orr.w	r3, r3, #2
 8003fa0:	81a3      	strh	r3, [r4, #12]
 8003fa2:	e7e3      	b.n	8003f6c <__smakebuf_r+0xc>
 8003fa4:	4b0d      	ldr	r3, [pc, #52]	; (8003fdc <__smakebuf_r+0x7c>)
 8003fa6:	62b3      	str	r3, [r6, #40]	; 0x28
 8003fa8:	89a3      	ldrh	r3, [r4, #12]
 8003faa:	6020      	str	r0, [r4, #0]
 8003fac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fb0:	81a3      	strh	r3, [r4, #12]
 8003fb2:	9b00      	ldr	r3, [sp, #0]
 8003fb4:	6163      	str	r3, [r4, #20]
 8003fb6:	9b01      	ldr	r3, [sp, #4]
 8003fb8:	6120      	str	r0, [r4, #16]
 8003fba:	b15b      	cbz	r3, 8003fd4 <__smakebuf_r+0x74>
 8003fbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003fc0:	4630      	mov	r0, r6
 8003fc2:	f000 fcdb 	bl	800497c <_isatty_r>
 8003fc6:	b128      	cbz	r0, 8003fd4 <__smakebuf_r+0x74>
 8003fc8:	89a3      	ldrh	r3, [r4, #12]
 8003fca:	f023 0303 	bic.w	r3, r3, #3
 8003fce:	f043 0301 	orr.w	r3, r3, #1
 8003fd2:	81a3      	strh	r3, [r4, #12]
 8003fd4:	89a0      	ldrh	r0, [r4, #12]
 8003fd6:	4305      	orrs	r5, r0
 8003fd8:	81a5      	strh	r5, [r4, #12]
 8003fda:	e7cd      	b.n	8003f78 <__smakebuf_r+0x18>
 8003fdc:	08003d6d 	.word	0x08003d6d

08003fe0 <__malloc_lock>:
 8003fe0:	4801      	ldr	r0, [pc, #4]	; (8003fe8 <__malloc_lock+0x8>)
 8003fe2:	f7ff bf95 	b.w	8003f10 <__retarget_lock_acquire_recursive>
 8003fe6:	bf00      	nop
 8003fe8:	20000160 	.word	0x20000160

08003fec <__malloc_unlock>:
 8003fec:	4801      	ldr	r0, [pc, #4]	; (8003ff4 <__malloc_unlock+0x8>)
 8003fee:	f7ff bf90 	b.w	8003f12 <__retarget_lock_release_recursive>
 8003ff2:	bf00      	nop
 8003ff4:	20000160 	.word	0x20000160

08003ff8 <__ssputs_r>:
 8003ff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ffc:	688e      	ldr	r6, [r1, #8]
 8003ffe:	429e      	cmp	r6, r3
 8004000:	4682      	mov	sl, r0
 8004002:	460c      	mov	r4, r1
 8004004:	4690      	mov	r8, r2
 8004006:	461f      	mov	r7, r3
 8004008:	d838      	bhi.n	800407c <__ssputs_r+0x84>
 800400a:	898a      	ldrh	r2, [r1, #12]
 800400c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004010:	d032      	beq.n	8004078 <__ssputs_r+0x80>
 8004012:	6825      	ldr	r5, [r4, #0]
 8004014:	6909      	ldr	r1, [r1, #16]
 8004016:	eba5 0901 	sub.w	r9, r5, r1
 800401a:	6965      	ldr	r5, [r4, #20]
 800401c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004020:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004024:	3301      	adds	r3, #1
 8004026:	444b      	add	r3, r9
 8004028:	106d      	asrs	r5, r5, #1
 800402a:	429d      	cmp	r5, r3
 800402c:	bf38      	it	cc
 800402e:	461d      	movcc	r5, r3
 8004030:	0553      	lsls	r3, r2, #21
 8004032:	d531      	bpl.n	8004098 <__ssputs_r+0xa0>
 8004034:	4629      	mov	r1, r5
 8004036:	f7ff fbc1 	bl	80037bc <_malloc_r>
 800403a:	4606      	mov	r6, r0
 800403c:	b950      	cbnz	r0, 8004054 <__ssputs_r+0x5c>
 800403e:	230c      	movs	r3, #12
 8004040:	f8ca 3000 	str.w	r3, [sl]
 8004044:	89a3      	ldrh	r3, [r4, #12]
 8004046:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800404a:	81a3      	strh	r3, [r4, #12]
 800404c:	f04f 30ff 	mov.w	r0, #4294967295
 8004050:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004054:	6921      	ldr	r1, [r4, #16]
 8004056:	464a      	mov	r2, r9
 8004058:	f000 fcb2 	bl	80049c0 <memcpy>
 800405c:	89a3      	ldrh	r3, [r4, #12]
 800405e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004062:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004066:	81a3      	strh	r3, [r4, #12]
 8004068:	6126      	str	r6, [r4, #16]
 800406a:	6165      	str	r5, [r4, #20]
 800406c:	444e      	add	r6, r9
 800406e:	eba5 0509 	sub.w	r5, r5, r9
 8004072:	6026      	str	r6, [r4, #0]
 8004074:	60a5      	str	r5, [r4, #8]
 8004076:	463e      	mov	r6, r7
 8004078:	42be      	cmp	r6, r7
 800407a:	d900      	bls.n	800407e <__ssputs_r+0x86>
 800407c:	463e      	mov	r6, r7
 800407e:	6820      	ldr	r0, [r4, #0]
 8004080:	4632      	mov	r2, r6
 8004082:	4641      	mov	r1, r8
 8004084:	f000 fcaa 	bl	80049dc <memmove>
 8004088:	68a3      	ldr	r3, [r4, #8]
 800408a:	1b9b      	subs	r3, r3, r6
 800408c:	60a3      	str	r3, [r4, #8]
 800408e:	6823      	ldr	r3, [r4, #0]
 8004090:	4433      	add	r3, r6
 8004092:	6023      	str	r3, [r4, #0]
 8004094:	2000      	movs	r0, #0
 8004096:	e7db      	b.n	8004050 <__ssputs_r+0x58>
 8004098:	462a      	mov	r2, r5
 800409a:	f000 fcb9 	bl	8004a10 <_realloc_r>
 800409e:	4606      	mov	r6, r0
 80040a0:	2800      	cmp	r0, #0
 80040a2:	d1e1      	bne.n	8004068 <__ssputs_r+0x70>
 80040a4:	6921      	ldr	r1, [r4, #16]
 80040a6:	4650      	mov	r0, sl
 80040a8:	f7ff fb1c 	bl	80036e4 <_free_r>
 80040ac:	e7c7      	b.n	800403e <__ssputs_r+0x46>
	...

080040b0 <_svfiprintf_r>:
 80040b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040b4:	4698      	mov	r8, r3
 80040b6:	898b      	ldrh	r3, [r1, #12]
 80040b8:	061b      	lsls	r3, r3, #24
 80040ba:	b09d      	sub	sp, #116	; 0x74
 80040bc:	4607      	mov	r7, r0
 80040be:	460d      	mov	r5, r1
 80040c0:	4614      	mov	r4, r2
 80040c2:	d50e      	bpl.n	80040e2 <_svfiprintf_r+0x32>
 80040c4:	690b      	ldr	r3, [r1, #16]
 80040c6:	b963      	cbnz	r3, 80040e2 <_svfiprintf_r+0x32>
 80040c8:	2140      	movs	r1, #64	; 0x40
 80040ca:	f7ff fb77 	bl	80037bc <_malloc_r>
 80040ce:	6028      	str	r0, [r5, #0]
 80040d0:	6128      	str	r0, [r5, #16]
 80040d2:	b920      	cbnz	r0, 80040de <_svfiprintf_r+0x2e>
 80040d4:	230c      	movs	r3, #12
 80040d6:	603b      	str	r3, [r7, #0]
 80040d8:	f04f 30ff 	mov.w	r0, #4294967295
 80040dc:	e0d1      	b.n	8004282 <_svfiprintf_r+0x1d2>
 80040de:	2340      	movs	r3, #64	; 0x40
 80040e0:	616b      	str	r3, [r5, #20]
 80040e2:	2300      	movs	r3, #0
 80040e4:	9309      	str	r3, [sp, #36]	; 0x24
 80040e6:	2320      	movs	r3, #32
 80040e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80040ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80040f0:	2330      	movs	r3, #48	; 0x30
 80040f2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800429c <_svfiprintf_r+0x1ec>
 80040f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80040fa:	f04f 0901 	mov.w	r9, #1
 80040fe:	4623      	mov	r3, r4
 8004100:	469a      	mov	sl, r3
 8004102:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004106:	b10a      	cbz	r2, 800410c <_svfiprintf_r+0x5c>
 8004108:	2a25      	cmp	r2, #37	; 0x25
 800410a:	d1f9      	bne.n	8004100 <_svfiprintf_r+0x50>
 800410c:	ebba 0b04 	subs.w	fp, sl, r4
 8004110:	d00b      	beq.n	800412a <_svfiprintf_r+0x7a>
 8004112:	465b      	mov	r3, fp
 8004114:	4622      	mov	r2, r4
 8004116:	4629      	mov	r1, r5
 8004118:	4638      	mov	r0, r7
 800411a:	f7ff ff6d 	bl	8003ff8 <__ssputs_r>
 800411e:	3001      	adds	r0, #1
 8004120:	f000 80aa 	beq.w	8004278 <_svfiprintf_r+0x1c8>
 8004124:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004126:	445a      	add	r2, fp
 8004128:	9209      	str	r2, [sp, #36]	; 0x24
 800412a:	f89a 3000 	ldrb.w	r3, [sl]
 800412e:	2b00      	cmp	r3, #0
 8004130:	f000 80a2 	beq.w	8004278 <_svfiprintf_r+0x1c8>
 8004134:	2300      	movs	r3, #0
 8004136:	f04f 32ff 	mov.w	r2, #4294967295
 800413a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800413e:	f10a 0a01 	add.w	sl, sl, #1
 8004142:	9304      	str	r3, [sp, #16]
 8004144:	9307      	str	r3, [sp, #28]
 8004146:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800414a:	931a      	str	r3, [sp, #104]	; 0x68
 800414c:	4654      	mov	r4, sl
 800414e:	2205      	movs	r2, #5
 8004150:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004154:	4851      	ldr	r0, [pc, #324]	; (800429c <_svfiprintf_r+0x1ec>)
 8004156:	f7fc f84b 	bl	80001f0 <memchr>
 800415a:	9a04      	ldr	r2, [sp, #16]
 800415c:	b9d8      	cbnz	r0, 8004196 <_svfiprintf_r+0xe6>
 800415e:	06d0      	lsls	r0, r2, #27
 8004160:	bf44      	itt	mi
 8004162:	2320      	movmi	r3, #32
 8004164:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004168:	0711      	lsls	r1, r2, #28
 800416a:	bf44      	itt	mi
 800416c:	232b      	movmi	r3, #43	; 0x2b
 800416e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004172:	f89a 3000 	ldrb.w	r3, [sl]
 8004176:	2b2a      	cmp	r3, #42	; 0x2a
 8004178:	d015      	beq.n	80041a6 <_svfiprintf_r+0xf6>
 800417a:	9a07      	ldr	r2, [sp, #28]
 800417c:	4654      	mov	r4, sl
 800417e:	2000      	movs	r0, #0
 8004180:	f04f 0c0a 	mov.w	ip, #10
 8004184:	4621      	mov	r1, r4
 8004186:	f811 3b01 	ldrb.w	r3, [r1], #1
 800418a:	3b30      	subs	r3, #48	; 0x30
 800418c:	2b09      	cmp	r3, #9
 800418e:	d94e      	bls.n	800422e <_svfiprintf_r+0x17e>
 8004190:	b1b0      	cbz	r0, 80041c0 <_svfiprintf_r+0x110>
 8004192:	9207      	str	r2, [sp, #28]
 8004194:	e014      	b.n	80041c0 <_svfiprintf_r+0x110>
 8004196:	eba0 0308 	sub.w	r3, r0, r8
 800419a:	fa09 f303 	lsl.w	r3, r9, r3
 800419e:	4313      	orrs	r3, r2
 80041a0:	9304      	str	r3, [sp, #16]
 80041a2:	46a2      	mov	sl, r4
 80041a4:	e7d2      	b.n	800414c <_svfiprintf_r+0x9c>
 80041a6:	9b03      	ldr	r3, [sp, #12]
 80041a8:	1d19      	adds	r1, r3, #4
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	9103      	str	r1, [sp, #12]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	bfbb      	ittet	lt
 80041b2:	425b      	neglt	r3, r3
 80041b4:	f042 0202 	orrlt.w	r2, r2, #2
 80041b8:	9307      	strge	r3, [sp, #28]
 80041ba:	9307      	strlt	r3, [sp, #28]
 80041bc:	bfb8      	it	lt
 80041be:	9204      	strlt	r2, [sp, #16]
 80041c0:	7823      	ldrb	r3, [r4, #0]
 80041c2:	2b2e      	cmp	r3, #46	; 0x2e
 80041c4:	d10c      	bne.n	80041e0 <_svfiprintf_r+0x130>
 80041c6:	7863      	ldrb	r3, [r4, #1]
 80041c8:	2b2a      	cmp	r3, #42	; 0x2a
 80041ca:	d135      	bne.n	8004238 <_svfiprintf_r+0x188>
 80041cc:	9b03      	ldr	r3, [sp, #12]
 80041ce:	1d1a      	adds	r2, r3, #4
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	9203      	str	r2, [sp, #12]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	bfb8      	it	lt
 80041d8:	f04f 33ff 	movlt.w	r3, #4294967295
 80041dc:	3402      	adds	r4, #2
 80041de:	9305      	str	r3, [sp, #20]
 80041e0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80042ac <_svfiprintf_r+0x1fc>
 80041e4:	7821      	ldrb	r1, [r4, #0]
 80041e6:	2203      	movs	r2, #3
 80041e8:	4650      	mov	r0, sl
 80041ea:	f7fc f801 	bl	80001f0 <memchr>
 80041ee:	b140      	cbz	r0, 8004202 <_svfiprintf_r+0x152>
 80041f0:	2340      	movs	r3, #64	; 0x40
 80041f2:	eba0 000a 	sub.w	r0, r0, sl
 80041f6:	fa03 f000 	lsl.w	r0, r3, r0
 80041fa:	9b04      	ldr	r3, [sp, #16]
 80041fc:	4303      	orrs	r3, r0
 80041fe:	3401      	adds	r4, #1
 8004200:	9304      	str	r3, [sp, #16]
 8004202:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004206:	4826      	ldr	r0, [pc, #152]	; (80042a0 <_svfiprintf_r+0x1f0>)
 8004208:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800420c:	2206      	movs	r2, #6
 800420e:	f7fb ffef 	bl	80001f0 <memchr>
 8004212:	2800      	cmp	r0, #0
 8004214:	d038      	beq.n	8004288 <_svfiprintf_r+0x1d8>
 8004216:	4b23      	ldr	r3, [pc, #140]	; (80042a4 <_svfiprintf_r+0x1f4>)
 8004218:	bb1b      	cbnz	r3, 8004262 <_svfiprintf_r+0x1b2>
 800421a:	9b03      	ldr	r3, [sp, #12]
 800421c:	3307      	adds	r3, #7
 800421e:	f023 0307 	bic.w	r3, r3, #7
 8004222:	3308      	adds	r3, #8
 8004224:	9303      	str	r3, [sp, #12]
 8004226:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004228:	4433      	add	r3, r6
 800422a:	9309      	str	r3, [sp, #36]	; 0x24
 800422c:	e767      	b.n	80040fe <_svfiprintf_r+0x4e>
 800422e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004232:	460c      	mov	r4, r1
 8004234:	2001      	movs	r0, #1
 8004236:	e7a5      	b.n	8004184 <_svfiprintf_r+0xd4>
 8004238:	2300      	movs	r3, #0
 800423a:	3401      	adds	r4, #1
 800423c:	9305      	str	r3, [sp, #20]
 800423e:	4619      	mov	r1, r3
 8004240:	f04f 0c0a 	mov.w	ip, #10
 8004244:	4620      	mov	r0, r4
 8004246:	f810 2b01 	ldrb.w	r2, [r0], #1
 800424a:	3a30      	subs	r2, #48	; 0x30
 800424c:	2a09      	cmp	r2, #9
 800424e:	d903      	bls.n	8004258 <_svfiprintf_r+0x1a8>
 8004250:	2b00      	cmp	r3, #0
 8004252:	d0c5      	beq.n	80041e0 <_svfiprintf_r+0x130>
 8004254:	9105      	str	r1, [sp, #20]
 8004256:	e7c3      	b.n	80041e0 <_svfiprintf_r+0x130>
 8004258:	fb0c 2101 	mla	r1, ip, r1, r2
 800425c:	4604      	mov	r4, r0
 800425e:	2301      	movs	r3, #1
 8004260:	e7f0      	b.n	8004244 <_svfiprintf_r+0x194>
 8004262:	ab03      	add	r3, sp, #12
 8004264:	9300      	str	r3, [sp, #0]
 8004266:	462a      	mov	r2, r5
 8004268:	4b0f      	ldr	r3, [pc, #60]	; (80042a8 <_svfiprintf_r+0x1f8>)
 800426a:	a904      	add	r1, sp, #16
 800426c:	4638      	mov	r0, r7
 800426e:	f3af 8000 	nop.w
 8004272:	1c42      	adds	r2, r0, #1
 8004274:	4606      	mov	r6, r0
 8004276:	d1d6      	bne.n	8004226 <_svfiprintf_r+0x176>
 8004278:	89ab      	ldrh	r3, [r5, #12]
 800427a:	065b      	lsls	r3, r3, #25
 800427c:	f53f af2c 	bmi.w	80040d8 <_svfiprintf_r+0x28>
 8004280:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004282:	b01d      	add	sp, #116	; 0x74
 8004284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004288:	ab03      	add	r3, sp, #12
 800428a:	9300      	str	r3, [sp, #0]
 800428c:	462a      	mov	r2, r5
 800428e:	4b06      	ldr	r3, [pc, #24]	; (80042a8 <_svfiprintf_r+0x1f8>)
 8004290:	a904      	add	r1, sp, #16
 8004292:	4638      	mov	r0, r7
 8004294:	f000 f9d4 	bl	8004640 <_printf_i>
 8004298:	e7eb      	b.n	8004272 <_svfiprintf_r+0x1c2>
 800429a:	bf00      	nop
 800429c:	08004be4 	.word	0x08004be4
 80042a0:	08004bee 	.word	0x08004bee
 80042a4:	00000000 	.word	0x00000000
 80042a8:	08003ff9 	.word	0x08003ff9
 80042ac:	08004bea 	.word	0x08004bea

080042b0 <__sfputc_r>:
 80042b0:	6893      	ldr	r3, [r2, #8]
 80042b2:	3b01      	subs	r3, #1
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	b410      	push	{r4}
 80042b8:	6093      	str	r3, [r2, #8]
 80042ba:	da08      	bge.n	80042ce <__sfputc_r+0x1e>
 80042bc:	6994      	ldr	r4, [r2, #24]
 80042be:	42a3      	cmp	r3, r4
 80042c0:	db01      	blt.n	80042c6 <__sfputc_r+0x16>
 80042c2:	290a      	cmp	r1, #10
 80042c4:	d103      	bne.n	80042ce <__sfputc_r+0x1e>
 80042c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80042ca:	f7ff bba9 	b.w	8003a20 <__swbuf_r>
 80042ce:	6813      	ldr	r3, [r2, #0]
 80042d0:	1c58      	adds	r0, r3, #1
 80042d2:	6010      	str	r0, [r2, #0]
 80042d4:	7019      	strb	r1, [r3, #0]
 80042d6:	4608      	mov	r0, r1
 80042d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80042dc:	4770      	bx	lr

080042de <__sfputs_r>:
 80042de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042e0:	4606      	mov	r6, r0
 80042e2:	460f      	mov	r7, r1
 80042e4:	4614      	mov	r4, r2
 80042e6:	18d5      	adds	r5, r2, r3
 80042e8:	42ac      	cmp	r4, r5
 80042ea:	d101      	bne.n	80042f0 <__sfputs_r+0x12>
 80042ec:	2000      	movs	r0, #0
 80042ee:	e007      	b.n	8004300 <__sfputs_r+0x22>
 80042f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042f4:	463a      	mov	r2, r7
 80042f6:	4630      	mov	r0, r6
 80042f8:	f7ff ffda 	bl	80042b0 <__sfputc_r>
 80042fc:	1c43      	adds	r3, r0, #1
 80042fe:	d1f3      	bne.n	80042e8 <__sfputs_r+0xa>
 8004300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004304 <_vfiprintf_r>:
 8004304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004308:	460d      	mov	r5, r1
 800430a:	b09d      	sub	sp, #116	; 0x74
 800430c:	4614      	mov	r4, r2
 800430e:	4698      	mov	r8, r3
 8004310:	4606      	mov	r6, r0
 8004312:	b118      	cbz	r0, 800431c <_vfiprintf_r+0x18>
 8004314:	6983      	ldr	r3, [r0, #24]
 8004316:	b90b      	cbnz	r3, 800431c <_vfiprintf_r+0x18>
 8004318:	f7ff fd5c 	bl	8003dd4 <__sinit>
 800431c:	4b89      	ldr	r3, [pc, #548]	; (8004544 <_vfiprintf_r+0x240>)
 800431e:	429d      	cmp	r5, r3
 8004320:	d11b      	bne.n	800435a <_vfiprintf_r+0x56>
 8004322:	6875      	ldr	r5, [r6, #4]
 8004324:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004326:	07d9      	lsls	r1, r3, #31
 8004328:	d405      	bmi.n	8004336 <_vfiprintf_r+0x32>
 800432a:	89ab      	ldrh	r3, [r5, #12]
 800432c:	059a      	lsls	r2, r3, #22
 800432e:	d402      	bmi.n	8004336 <_vfiprintf_r+0x32>
 8004330:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004332:	f7ff fded 	bl	8003f10 <__retarget_lock_acquire_recursive>
 8004336:	89ab      	ldrh	r3, [r5, #12]
 8004338:	071b      	lsls	r3, r3, #28
 800433a:	d501      	bpl.n	8004340 <_vfiprintf_r+0x3c>
 800433c:	692b      	ldr	r3, [r5, #16]
 800433e:	b9eb      	cbnz	r3, 800437c <_vfiprintf_r+0x78>
 8004340:	4629      	mov	r1, r5
 8004342:	4630      	mov	r0, r6
 8004344:	f7ff fbbe 	bl	8003ac4 <__swsetup_r>
 8004348:	b1c0      	cbz	r0, 800437c <_vfiprintf_r+0x78>
 800434a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800434c:	07dc      	lsls	r4, r3, #31
 800434e:	d50e      	bpl.n	800436e <_vfiprintf_r+0x6a>
 8004350:	f04f 30ff 	mov.w	r0, #4294967295
 8004354:	b01d      	add	sp, #116	; 0x74
 8004356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800435a:	4b7b      	ldr	r3, [pc, #492]	; (8004548 <_vfiprintf_r+0x244>)
 800435c:	429d      	cmp	r5, r3
 800435e:	d101      	bne.n	8004364 <_vfiprintf_r+0x60>
 8004360:	68b5      	ldr	r5, [r6, #8]
 8004362:	e7df      	b.n	8004324 <_vfiprintf_r+0x20>
 8004364:	4b79      	ldr	r3, [pc, #484]	; (800454c <_vfiprintf_r+0x248>)
 8004366:	429d      	cmp	r5, r3
 8004368:	bf08      	it	eq
 800436a:	68f5      	ldreq	r5, [r6, #12]
 800436c:	e7da      	b.n	8004324 <_vfiprintf_r+0x20>
 800436e:	89ab      	ldrh	r3, [r5, #12]
 8004370:	0598      	lsls	r0, r3, #22
 8004372:	d4ed      	bmi.n	8004350 <_vfiprintf_r+0x4c>
 8004374:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004376:	f7ff fdcc 	bl	8003f12 <__retarget_lock_release_recursive>
 800437a:	e7e9      	b.n	8004350 <_vfiprintf_r+0x4c>
 800437c:	2300      	movs	r3, #0
 800437e:	9309      	str	r3, [sp, #36]	; 0x24
 8004380:	2320      	movs	r3, #32
 8004382:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004386:	f8cd 800c 	str.w	r8, [sp, #12]
 800438a:	2330      	movs	r3, #48	; 0x30
 800438c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004550 <_vfiprintf_r+0x24c>
 8004390:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004394:	f04f 0901 	mov.w	r9, #1
 8004398:	4623      	mov	r3, r4
 800439a:	469a      	mov	sl, r3
 800439c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80043a0:	b10a      	cbz	r2, 80043a6 <_vfiprintf_r+0xa2>
 80043a2:	2a25      	cmp	r2, #37	; 0x25
 80043a4:	d1f9      	bne.n	800439a <_vfiprintf_r+0x96>
 80043a6:	ebba 0b04 	subs.w	fp, sl, r4
 80043aa:	d00b      	beq.n	80043c4 <_vfiprintf_r+0xc0>
 80043ac:	465b      	mov	r3, fp
 80043ae:	4622      	mov	r2, r4
 80043b0:	4629      	mov	r1, r5
 80043b2:	4630      	mov	r0, r6
 80043b4:	f7ff ff93 	bl	80042de <__sfputs_r>
 80043b8:	3001      	adds	r0, #1
 80043ba:	f000 80aa 	beq.w	8004512 <_vfiprintf_r+0x20e>
 80043be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80043c0:	445a      	add	r2, fp
 80043c2:	9209      	str	r2, [sp, #36]	; 0x24
 80043c4:	f89a 3000 	ldrb.w	r3, [sl]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	f000 80a2 	beq.w	8004512 <_vfiprintf_r+0x20e>
 80043ce:	2300      	movs	r3, #0
 80043d0:	f04f 32ff 	mov.w	r2, #4294967295
 80043d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80043d8:	f10a 0a01 	add.w	sl, sl, #1
 80043dc:	9304      	str	r3, [sp, #16]
 80043de:	9307      	str	r3, [sp, #28]
 80043e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80043e4:	931a      	str	r3, [sp, #104]	; 0x68
 80043e6:	4654      	mov	r4, sl
 80043e8:	2205      	movs	r2, #5
 80043ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043ee:	4858      	ldr	r0, [pc, #352]	; (8004550 <_vfiprintf_r+0x24c>)
 80043f0:	f7fb fefe 	bl	80001f0 <memchr>
 80043f4:	9a04      	ldr	r2, [sp, #16]
 80043f6:	b9d8      	cbnz	r0, 8004430 <_vfiprintf_r+0x12c>
 80043f8:	06d1      	lsls	r1, r2, #27
 80043fa:	bf44      	itt	mi
 80043fc:	2320      	movmi	r3, #32
 80043fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004402:	0713      	lsls	r3, r2, #28
 8004404:	bf44      	itt	mi
 8004406:	232b      	movmi	r3, #43	; 0x2b
 8004408:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800440c:	f89a 3000 	ldrb.w	r3, [sl]
 8004410:	2b2a      	cmp	r3, #42	; 0x2a
 8004412:	d015      	beq.n	8004440 <_vfiprintf_r+0x13c>
 8004414:	9a07      	ldr	r2, [sp, #28]
 8004416:	4654      	mov	r4, sl
 8004418:	2000      	movs	r0, #0
 800441a:	f04f 0c0a 	mov.w	ip, #10
 800441e:	4621      	mov	r1, r4
 8004420:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004424:	3b30      	subs	r3, #48	; 0x30
 8004426:	2b09      	cmp	r3, #9
 8004428:	d94e      	bls.n	80044c8 <_vfiprintf_r+0x1c4>
 800442a:	b1b0      	cbz	r0, 800445a <_vfiprintf_r+0x156>
 800442c:	9207      	str	r2, [sp, #28]
 800442e:	e014      	b.n	800445a <_vfiprintf_r+0x156>
 8004430:	eba0 0308 	sub.w	r3, r0, r8
 8004434:	fa09 f303 	lsl.w	r3, r9, r3
 8004438:	4313      	orrs	r3, r2
 800443a:	9304      	str	r3, [sp, #16]
 800443c:	46a2      	mov	sl, r4
 800443e:	e7d2      	b.n	80043e6 <_vfiprintf_r+0xe2>
 8004440:	9b03      	ldr	r3, [sp, #12]
 8004442:	1d19      	adds	r1, r3, #4
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	9103      	str	r1, [sp, #12]
 8004448:	2b00      	cmp	r3, #0
 800444a:	bfbb      	ittet	lt
 800444c:	425b      	neglt	r3, r3
 800444e:	f042 0202 	orrlt.w	r2, r2, #2
 8004452:	9307      	strge	r3, [sp, #28]
 8004454:	9307      	strlt	r3, [sp, #28]
 8004456:	bfb8      	it	lt
 8004458:	9204      	strlt	r2, [sp, #16]
 800445a:	7823      	ldrb	r3, [r4, #0]
 800445c:	2b2e      	cmp	r3, #46	; 0x2e
 800445e:	d10c      	bne.n	800447a <_vfiprintf_r+0x176>
 8004460:	7863      	ldrb	r3, [r4, #1]
 8004462:	2b2a      	cmp	r3, #42	; 0x2a
 8004464:	d135      	bne.n	80044d2 <_vfiprintf_r+0x1ce>
 8004466:	9b03      	ldr	r3, [sp, #12]
 8004468:	1d1a      	adds	r2, r3, #4
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	9203      	str	r2, [sp, #12]
 800446e:	2b00      	cmp	r3, #0
 8004470:	bfb8      	it	lt
 8004472:	f04f 33ff 	movlt.w	r3, #4294967295
 8004476:	3402      	adds	r4, #2
 8004478:	9305      	str	r3, [sp, #20]
 800447a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004560 <_vfiprintf_r+0x25c>
 800447e:	7821      	ldrb	r1, [r4, #0]
 8004480:	2203      	movs	r2, #3
 8004482:	4650      	mov	r0, sl
 8004484:	f7fb feb4 	bl	80001f0 <memchr>
 8004488:	b140      	cbz	r0, 800449c <_vfiprintf_r+0x198>
 800448a:	2340      	movs	r3, #64	; 0x40
 800448c:	eba0 000a 	sub.w	r0, r0, sl
 8004490:	fa03 f000 	lsl.w	r0, r3, r0
 8004494:	9b04      	ldr	r3, [sp, #16]
 8004496:	4303      	orrs	r3, r0
 8004498:	3401      	adds	r4, #1
 800449a:	9304      	str	r3, [sp, #16]
 800449c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044a0:	482c      	ldr	r0, [pc, #176]	; (8004554 <_vfiprintf_r+0x250>)
 80044a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80044a6:	2206      	movs	r2, #6
 80044a8:	f7fb fea2 	bl	80001f0 <memchr>
 80044ac:	2800      	cmp	r0, #0
 80044ae:	d03f      	beq.n	8004530 <_vfiprintf_r+0x22c>
 80044b0:	4b29      	ldr	r3, [pc, #164]	; (8004558 <_vfiprintf_r+0x254>)
 80044b2:	bb1b      	cbnz	r3, 80044fc <_vfiprintf_r+0x1f8>
 80044b4:	9b03      	ldr	r3, [sp, #12]
 80044b6:	3307      	adds	r3, #7
 80044b8:	f023 0307 	bic.w	r3, r3, #7
 80044bc:	3308      	adds	r3, #8
 80044be:	9303      	str	r3, [sp, #12]
 80044c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044c2:	443b      	add	r3, r7
 80044c4:	9309      	str	r3, [sp, #36]	; 0x24
 80044c6:	e767      	b.n	8004398 <_vfiprintf_r+0x94>
 80044c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80044cc:	460c      	mov	r4, r1
 80044ce:	2001      	movs	r0, #1
 80044d0:	e7a5      	b.n	800441e <_vfiprintf_r+0x11a>
 80044d2:	2300      	movs	r3, #0
 80044d4:	3401      	adds	r4, #1
 80044d6:	9305      	str	r3, [sp, #20]
 80044d8:	4619      	mov	r1, r3
 80044da:	f04f 0c0a 	mov.w	ip, #10
 80044de:	4620      	mov	r0, r4
 80044e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80044e4:	3a30      	subs	r2, #48	; 0x30
 80044e6:	2a09      	cmp	r2, #9
 80044e8:	d903      	bls.n	80044f2 <_vfiprintf_r+0x1ee>
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d0c5      	beq.n	800447a <_vfiprintf_r+0x176>
 80044ee:	9105      	str	r1, [sp, #20]
 80044f0:	e7c3      	b.n	800447a <_vfiprintf_r+0x176>
 80044f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80044f6:	4604      	mov	r4, r0
 80044f8:	2301      	movs	r3, #1
 80044fa:	e7f0      	b.n	80044de <_vfiprintf_r+0x1da>
 80044fc:	ab03      	add	r3, sp, #12
 80044fe:	9300      	str	r3, [sp, #0]
 8004500:	462a      	mov	r2, r5
 8004502:	4b16      	ldr	r3, [pc, #88]	; (800455c <_vfiprintf_r+0x258>)
 8004504:	a904      	add	r1, sp, #16
 8004506:	4630      	mov	r0, r6
 8004508:	f3af 8000 	nop.w
 800450c:	4607      	mov	r7, r0
 800450e:	1c78      	adds	r0, r7, #1
 8004510:	d1d6      	bne.n	80044c0 <_vfiprintf_r+0x1bc>
 8004512:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004514:	07d9      	lsls	r1, r3, #31
 8004516:	d405      	bmi.n	8004524 <_vfiprintf_r+0x220>
 8004518:	89ab      	ldrh	r3, [r5, #12]
 800451a:	059a      	lsls	r2, r3, #22
 800451c:	d402      	bmi.n	8004524 <_vfiprintf_r+0x220>
 800451e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004520:	f7ff fcf7 	bl	8003f12 <__retarget_lock_release_recursive>
 8004524:	89ab      	ldrh	r3, [r5, #12]
 8004526:	065b      	lsls	r3, r3, #25
 8004528:	f53f af12 	bmi.w	8004350 <_vfiprintf_r+0x4c>
 800452c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800452e:	e711      	b.n	8004354 <_vfiprintf_r+0x50>
 8004530:	ab03      	add	r3, sp, #12
 8004532:	9300      	str	r3, [sp, #0]
 8004534:	462a      	mov	r2, r5
 8004536:	4b09      	ldr	r3, [pc, #36]	; (800455c <_vfiprintf_r+0x258>)
 8004538:	a904      	add	r1, sp, #16
 800453a:	4630      	mov	r0, r6
 800453c:	f000 f880 	bl	8004640 <_printf_i>
 8004540:	e7e4      	b.n	800450c <_vfiprintf_r+0x208>
 8004542:	bf00      	nop
 8004544:	08004ba4 	.word	0x08004ba4
 8004548:	08004bc4 	.word	0x08004bc4
 800454c:	08004b84 	.word	0x08004b84
 8004550:	08004be4 	.word	0x08004be4
 8004554:	08004bee 	.word	0x08004bee
 8004558:	00000000 	.word	0x00000000
 800455c:	080042df 	.word	0x080042df
 8004560:	08004bea 	.word	0x08004bea

08004564 <_printf_common>:
 8004564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004568:	4616      	mov	r6, r2
 800456a:	4699      	mov	r9, r3
 800456c:	688a      	ldr	r2, [r1, #8]
 800456e:	690b      	ldr	r3, [r1, #16]
 8004570:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004574:	4293      	cmp	r3, r2
 8004576:	bfb8      	it	lt
 8004578:	4613      	movlt	r3, r2
 800457a:	6033      	str	r3, [r6, #0]
 800457c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004580:	4607      	mov	r7, r0
 8004582:	460c      	mov	r4, r1
 8004584:	b10a      	cbz	r2, 800458a <_printf_common+0x26>
 8004586:	3301      	adds	r3, #1
 8004588:	6033      	str	r3, [r6, #0]
 800458a:	6823      	ldr	r3, [r4, #0]
 800458c:	0699      	lsls	r1, r3, #26
 800458e:	bf42      	ittt	mi
 8004590:	6833      	ldrmi	r3, [r6, #0]
 8004592:	3302      	addmi	r3, #2
 8004594:	6033      	strmi	r3, [r6, #0]
 8004596:	6825      	ldr	r5, [r4, #0]
 8004598:	f015 0506 	ands.w	r5, r5, #6
 800459c:	d106      	bne.n	80045ac <_printf_common+0x48>
 800459e:	f104 0a19 	add.w	sl, r4, #25
 80045a2:	68e3      	ldr	r3, [r4, #12]
 80045a4:	6832      	ldr	r2, [r6, #0]
 80045a6:	1a9b      	subs	r3, r3, r2
 80045a8:	42ab      	cmp	r3, r5
 80045aa:	dc26      	bgt.n	80045fa <_printf_common+0x96>
 80045ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80045b0:	1e13      	subs	r3, r2, #0
 80045b2:	6822      	ldr	r2, [r4, #0]
 80045b4:	bf18      	it	ne
 80045b6:	2301      	movne	r3, #1
 80045b8:	0692      	lsls	r2, r2, #26
 80045ba:	d42b      	bmi.n	8004614 <_printf_common+0xb0>
 80045bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80045c0:	4649      	mov	r1, r9
 80045c2:	4638      	mov	r0, r7
 80045c4:	47c0      	blx	r8
 80045c6:	3001      	adds	r0, #1
 80045c8:	d01e      	beq.n	8004608 <_printf_common+0xa4>
 80045ca:	6823      	ldr	r3, [r4, #0]
 80045cc:	68e5      	ldr	r5, [r4, #12]
 80045ce:	6832      	ldr	r2, [r6, #0]
 80045d0:	f003 0306 	and.w	r3, r3, #6
 80045d4:	2b04      	cmp	r3, #4
 80045d6:	bf08      	it	eq
 80045d8:	1aad      	subeq	r5, r5, r2
 80045da:	68a3      	ldr	r3, [r4, #8]
 80045dc:	6922      	ldr	r2, [r4, #16]
 80045de:	bf0c      	ite	eq
 80045e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80045e4:	2500      	movne	r5, #0
 80045e6:	4293      	cmp	r3, r2
 80045e8:	bfc4      	itt	gt
 80045ea:	1a9b      	subgt	r3, r3, r2
 80045ec:	18ed      	addgt	r5, r5, r3
 80045ee:	2600      	movs	r6, #0
 80045f0:	341a      	adds	r4, #26
 80045f2:	42b5      	cmp	r5, r6
 80045f4:	d11a      	bne.n	800462c <_printf_common+0xc8>
 80045f6:	2000      	movs	r0, #0
 80045f8:	e008      	b.n	800460c <_printf_common+0xa8>
 80045fa:	2301      	movs	r3, #1
 80045fc:	4652      	mov	r2, sl
 80045fe:	4649      	mov	r1, r9
 8004600:	4638      	mov	r0, r7
 8004602:	47c0      	blx	r8
 8004604:	3001      	adds	r0, #1
 8004606:	d103      	bne.n	8004610 <_printf_common+0xac>
 8004608:	f04f 30ff 	mov.w	r0, #4294967295
 800460c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004610:	3501      	adds	r5, #1
 8004612:	e7c6      	b.n	80045a2 <_printf_common+0x3e>
 8004614:	18e1      	adds	r1, r4, r3
 8004616:	1c5a      	adds	r2, r3, #1
 8004618:	2030      	movs	r0, #48	; 0x30
 800461a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800461e:	4422      	add	r2, r4
 8004620:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004624:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004628:	3302      	adds	r3, #2
 800462a:	e7c7      	b.n	80045bc <_printf_common+0x58>
 800462c:	2301      	movs	r3, #1
 800462e:	4622      	mov	r2, r4
 8004630:	4649      	mov	r1, r9
 8004632:	4638      	mov	r0, r7
 8004634:	47c0      	blx	r8
 8004636:	3001      	adds	r0, #1
 8004638:	d0e6      	beq.n	8004608 <_printf_common+0xa4>
 800463a:	3601      	adds	r6, #1
 800463c:	e7d9      	b.n	80045f2 <_printf_common+0x8e>
	...

08004640 <_printf_i>:
 8004640:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004644:	7e0f      	ldrb	r7, [r1, #24]
 8004646:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004648:	2f78      	cmp	r7, #120	; 0x78
 800464a:	4691      	mov	r9, r2
 800464c:	4680      	mov	r8, r0
 800464e:	460c      	mov	r4, r1
 8004650:	469a      	mov	sl, r3
 8004652:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004656:	d807      	bhi.n	8004668 <_printf_i+0x28>
 8004658:	2f62      	cmp	r7, #98	; 0x62
 800465a:	d80a      	bhi.n	8004672 <_printf_i+0x32>
 800465c:	2f00      	cmp	r7, #0
 800465e:	f000 80d8 	beq.w	8004812 <_printf_i+0x1d2>
 8004662:	2f58      	cmp	r7, #88	; 0x58
 8004664:	f000 80a3 	beq.w	80047ae <_printf_i+0x16e>
 8004668:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800466c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004670:	e03a      	b.n	80046e8 <_printf_i+0xa8>
 8004672:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004676:	2b15      	cmp	r3, #21
 8004678:	d8f6      	bhi.n	8004668 <_printf_i+0x28>
 800467a:	a101      	add	r1, pc, #4	; (adr r1, 8004680 <_printf_i+0x40>)
 800467c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004680:	080046d9 	.word	0x080046d9
 8004684:	080046ed 	.word	0x080046ed
 8004688:	08004669 	.word	0x08004669
 800468c:	08004669 	.word	0x08004669
 8004690:	08004669 	.word	0x08004669
 8004694:	08004669 	.word	0x08004669
 8004698:	080046ed 	.word	0x080046ed
 800469c:	08004669 	.word	0x08004669
 80046a0:	08004669 	.word	0x08004669
 80046a4:	08004669 	.word	0x08004669
 80046a8:	08004669 	.word	0x08004669
 80046ac:	080047f9 	.word	0x080047f9
 80046b0:	0800471d 	.word	0x0800471d
 80046b4:	080047db 	.word	0x080047db
 80046b8:	08004669 	.word	0x08004669
 80046bc:	08004669 	.word	0x08004669
 80046c0:	0800481b 	.word	0x0800481b
 80046c4:	08004669 	.word	0x08004669
 80046c8:	0800471d 	.word	0x0800471d
 80046cc:	08004669 	.word	0x08004669
 80046d0:	08004669 	.word	0x08004669
 80046d4:	080047e3 	.word	0x080047e3
 80046d8:	682b      	ldr	r3, [r5, #0]
 80046da:	1d1a      	adds	r2, r3, #4
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	602a      	str	r2, [r5, #0]
 80046e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80046e8:	2301      	movs	r3, #1
 80046ea:	e0a3      	b.n	8004834 <_printf_i+0x1f4>
 80046ec:	6820      	ldr	r0, [r4, #0]
 80046ee:	6829      	ldr	r1, [r5, #0]
 80046f0:	0606      	lsls	r6, r0, #24
 80046f2:	f101 0304 	add.w	r3, r1, #4
 80046f6:	d50a      	bpl.n	800470e <_printf_i+0xce>
 80046f8:	680e      	ldr	r6, [r1, #0]
 80046fa:	602b      	str	r3, [r5, #0]
 80046fc:	2e00      	cmp	r6, #0
 80046fe:	da03      	bge.n	8004708 <_printf_i+0xc8>
 8004700:	232d      	movs	r3, #45	; 0x2d
 8004702:	4276      	negs	r6, r6
 8004704:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004708:	485e      	ldr	r0, [pc, #376]	; (8004884 <_printf_i+0x244>)
 800470a:	230a      	movs	r3, #10
 800470c:	e019      	b.n	8004742 <_printf_i+0x102>
 800470e:	680e      	ldr	r6, [r1, #0]
 8004710:	602b      	str	r3, [r5, #0]
 8004712:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004716:	bf18      	it	ne
 8004718:	b236      	sxthne	r6, r6
 800471a:	e7ef      	b.n	80046fc <_printf_i+0xbc>
 800471c:	682b      	ldr	r3, [r5, #0]
 800471e:	6820      	ldr	r0, [r4, #0]
 8004720:	1d19      	adds	r1, r3, #4
 8004722:	6029      	str	r1, [r5, #0]
 8004724:	0601      	lsls	r1, r0, #24
 8004726:	d501      	bpl.n	800472c <_printf_i+0xec>
 8004728:	681e      	ldr	r6, [r3, #0]
 800472a:	e002      	b.n	8004732 <_printf_i+0xf2>
 800472c:	0646      	lsls	r6, r0, #25
 800472e:	d5fb      	bpl.n	8004728 <_printf_i+0xe8>
 8004730:	881e      	ldrh	r6, [r3, #0]
 8004732:	4854      	ldr	r0, [pc, #336]	; (8004884 <_printf_i+0x244>)
 8004734:	2f6f      	cmp	r7, #111	; 0x6f
 8004736:	bf0c      	ite	eq
 8004738:	2308      	moveq	r3, #8
 800473a:	230a      	movne	r3, #10
 800473c:	2100      	movs	r1, #0
 800473e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004742:	6865      	ldr	r5, [r4, #4]
 8004744:	60a5      	str	r5, [r4, #8]
 8004746:	2d00      	cmp	r5, #0
 8004748:	bfa2      	ittt	ge
 800474a:	6821      	ldrge	r1, [r4, #0]
 800474c:	f021 0104 	bicge.w	r1, r1, #4
 8004750:	6021      	strge	r1, [r4, #0]
 8004752:	b90e      	cbnz	r6, 8004758 <_printf_i+0x118>
 8004754:	2d00      	cmp	r5, #0
 8004756:	d04d      	beq.n	80047f4 <_printf_i+0x1b4>
 8004758:	4615      	mov	r5, r2
 800475a:	fbb6 f1f3 	udiv	r1, r6, r3
 800475e:	fb03 6711 	mls	r7, r3, r1, r6
 8004762:	5dc7      	ldrb	r7, [r0, r7]
 8004764:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004768:	4637      	mov	r7, r6
 800476a:	42bb      	cmp	r3, r7
 800476c:	460e      	mov	r6, r1
 800476e:	d9f4      	bls.n	800475a <_printf_i+0x11a>
 8004770:	2b08      	cmp	r3, #8
 8004772:	d10b      	bne.n	800478c <_printf_i+0x14c>
 8004774:	6823      	ldr	r3, [r4, #0]
 8004776:	07de      	lsls	r6, r3, #31
 8004778:	d508      	bpl.n	800478c <_printf_i+0x14c>
 800477a:	6923      	ldr	r3, [r4, #16]
 800477c:	6861      	ldr	r1, [r4, #4]
 800477e:	4299      	cmp	r1, r3
 8004780:	bfde      	ittt	le
 8004782:	2330      	movle	r3, #48	; 0x30
 8004784:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004788:	f105 35ff 	addle.w	r5, r5, #4294967295
 800478c:	1b52      	subs	r2, r2, r5
 800478e:	6122      	str	r2, [r4, #16]
 8004790:	f8cd a000 	str.w	sl, [sp]
 8004794:	464b      	mov	r3, r9
 8004796:	aa03      	add	r2, sp, #12
 8004798:	4621      	mov	r1, r4
 800479a:	4640      	mov	r0, r8
 800479c:	f7ff fee2 	bl	8004564 <_printf_common>
 80047a0:	3001      	adds	r0, #1
 80047a2:	d14c      	bne.n	800483e <_printf_i+0x1fe>
 80047a4:	f04f 30ff 	mov.w	r0, #4294967295
 80047a8:	b004      	add	sp, #16
 80047aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047ae:	4835      	ldr	r0, [pc, #212]	; (8004884 <_printf_i+0x244>)
 80047b0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80047b4:	6829      	ldr	r1, [r5, #0]
 80047b6:	6823      	ldr	r3, [r4, #0]
 80047b8:	f851 6b04 	ldr.w	r6, [r1], #4
 80047bc:	6029      	str	r1, [r5, #0]
 80047be:	061d      	lsls	r5, r3, #24
 80047c0:	d514      	bpl.n	80047ec <_printf_i+0x1ac>
 80047c2:	07df      	lsls	r7, r3, #31
 80047c4:	bf44      	itt	mi
 80047c6:	f043 0320 	orrmi.w	r3, r3, #32
 80047ca:	6023      	strmi	r3, [r4, #0]
 80047cc:	b91e      	cbnz	r6, 80047d6 <_printf_i+0x196>
 80047ce:	6823      	ldr	r3, [r4, #0]
 80047d0:	f023 0320 	bic.w	r3, r3, #32
 80047d4:	6023      	str	r3, [r4, #0]
 80047d6:	2310      	movs	r3, #16
 80047d8:	e7b0      	b.n	800473c <_printf_i+0xfc>
 80047da:	6823      	ldr	r3, [r4, #0]
 80047dc:	f043 0320 	orr.w	r3, r3, #32
 80047e0:	6023      	str	r3, [r4, #0]
 80047e2:	2378      	movs	r3, #120	; 0x78
 80047e4:	4828      	ldr	r0, [pc, #160]	; (8004888 <_printf_i+0x248>)
 80047e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80047ea:	e7e3      	b.n	80047b4 <_printf_i+0x174>
 80047ec:	0659      	lsls	r1, r3, #25
 80047ee:	bf48      	it	mi
 80047f0:	b2b6      	uxthmi	r6, r6
 80047f2:	e7e6      	b.n	80047c2 <_printf_i+0x182>
 80047f4:	4615      	mov	r5, r2
 80047f6:	e7bb      	b.n	8004770 <_printf_i+0x130>
 80047f8:	682b      	ldr	r3, [r5, #0]
 80047fa:	6826      	ldr	r6, [r4, #0]
 80047fc:	6961      	ldr	r1, [r4, #20]
 80047fe:	1d18      	adds	r0, r3, #4
 8004800:	6028      	str	r0, [r5, #0]
 8004802:	0635      	lsls	r5, r6, #24
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	d501      	bpl.n	800480c <_printf_i+0x1cc>
 8004808:	6019      	str	r1, [r3, #0]
 800480a:	e002      	b.n	8004812 <_printf_i+0x1d2>
 800480c:	0670      	lsls	r0, r6, #25
 800480e:	d5fb      	bpl.n	8004808 <_printf_i+0x1c8>
 8004810:	8019      	strh	r1, [r3, #0]
 8004812:	2300      	movs	r3, #0
 8004814:	6123      	str	r3, [r4, #16]
 8004816:	4615      	mov	r5, r2
 8004818:	e7ba      	b.n	8004790 <_printf_i+0x150>
 800481a:	682b      	ldr	r3, [r5, #0]
 800481c:	1d1a      	adds	r2, r3, #4
 800481e:	602a      	str	r2, [r5, #0]
 8004820:	681d      	ldr	r5, [r3, #0]
 8004822:	6862      	ldr	r2, [r4, #4]
 8004824:	2100      	movs	r1, #0
 8004826:	4628      	mov	r0, r5
 8004828:	f7fb fce2 	bl	80001f0 <memchr>
 800482c:	b108      	cbz	r0, 8004832 <_printf_i+0x1f2>
 800482e:	1b40      	subs	r0, r0, r5
 8004830:	6060      	str	r0, [r4, #4]
 8004832:	6863      	ldr	r3, [r4, #4]
 8004834:	6123      	str	r3, [r4, #16]
 8004836:	2300      	movs	r3, #0
 8004838:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800483c:	e7a8      	b.n	8004790 <_printf_i+0x150>
 800483e:	6923      	ldr	r3, [r4, #16]
 8004840:	462a      	mov	r2, r5
 8004842:	4649      	mov	r1, r9
 8004844:	4640      	mov	r0, r8
 8004846:	47d0      	blx	sl
 8004848:	3001      	adds	r0, #1
 800484a:	d0ab      	beq.n	80047a4 <_printf_i+0x164>
 800484c:	6823      	ldr	r3, [r4, #0]
 800484e:	079b      	lsls	r3, r3, #30
 8004850:	d413      	bmi.n	800487a <_printf_i+0x23a>
 8004852:	68e0      	ldr	r0, [r4, #12]
 8004854:	9b03      	ldr	r3, [sp, #12]
 8004856:	4298      	cmp	r0, r3
 8004858:	bfb8      	it	lt
 800485a:	4618      	movlt	r0, r3
 800485c:	e7a4      	b.n	80047a8 <_printf_i+0x168>
 800485e:	2301      	movs	r3, #1
 8004860:	4632      	mov	r2, r6
 8004862:	4649      	mov	r1, r9
 8004864:	4640      	mov	r0, r8
 8004866:	47d0      	blx	sl
 8004868:	3001      	adds	r0, #1
 800486a:	d09b      	beq.n	80047a4 <_printf_i+0x164>
 800486c:	3501      	adds	r5, #1
 800486e:	68e3      	ldr	r3, [r4, #12]
 8004870:	9903      	ldr	r1, [sp, #12]
 8004872:	1a5b      	subs	r3, r3, r1
 8004874:	42ab      	cmp	r3, r5
 8004876:	dcf2      	bgt.n	800485e <_printf_i+0x21e>
 8004878:	e7eb      	b.n	8004852 <_printf_i+0x212>
 800487a:	2500      	movs	r5, #0
 800487c:	f104 0619 	add.w	r6, r4, #25
 8004880:	e7f5      	b.n	800486e <_printf_i+0x22e>
 8004882:	bf00      	nop
 8004884:	08004bf5 	.word	0x08004bf5
 8004888:	08004c06 	.word	0x08004c06

0800488c <__sread>:
 800488c:	b510      	push	{r4, lr}
 800488e:	460c      	mov	r4, r1
 8004890:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004894:	f000 f8ec 	bl	8004a70 <_read_r>
 8004898:	2800      	cmp	r0, #0
 800489a:	bfab      	itete	ge
 800489c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800489e:	89a3      	ldrhlt	r3, [r4, #12]
 80048a0:	181b      	addge	r3, r3, r0
 80048a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80048a6:	bfac      	ite	ge
 80048a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80048aa:	81a3      	strhlt	r3, [r4, #12]
 80048ac:	bd10      	pop	{r4, pc}

080048ae <__swrite>:
 80048ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048b2:	461f      	mov	r7, r3
 80048b4:	898b      	ldrh	r3, [r1, #12]
 80048b6:	05db      	lsls	r3, r3, #23
 80048b8:	4605      	mov	r5, r0
 80048ba:	460c      	mov	r4, r1
 80048bc:	4616      	mov	r6, r2
 80048be:	d505      	bpl.n	80048cc <__swrite+0x1e>
 80048c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048c4:	2302      	movs	r3, #2
 80048c6:	2200      	movs	r2, #0
 80048c8:	f000 f868 	bl	800499c <_lseek_r>
 80048cc:	89a3      	ldrh	r3, [r4, #12]
 80048ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80048d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80048d6:	81a3      	strh	r3, [r4, #12]
 80048d8:	4632      	mov	r2, r6
 80048da:	463b      	mov	r3, r7
 80048dc:	4628      	mov	r0, r5
 80048de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80048e2:	f000 b817 	b.w	8004914 <_write_r>

080048e6 <__sseek>:
 80048e6:	b510      	push	{r4, lr}
 80048e8:	460c      	mov	r4, r1
 80048ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048ee:	f000 f855 	bl	800499c <_lseek_r>
 80048f2:	1c43      	adds	r3, r0, #1
 80048f4:	89a3      	ldrh	r3, [r4, #12]
 80048f6:	bf15      	itete	ne
 80048f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80048fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80048fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004902:	81a3      	strheq	r3, [r4, #12]
 8004904:	bf18      	it	ne
 8004906:	81a3      	strhne	r3, [r4, #12]
 8004908:	bd10      	pop	{r4, pc}

0800490a <__sclose>:
 800490a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800490e:	f000 b813 	b.w	8004938 <_close_r>
	...

08004914 <_write_r>:
 8004914:	b538      	push	{r3, r4, r5, lr}
 8004916:	4d07      	ldr	r5, [pc, #28]	; (8004934 <_write_r+0x20>)
 8004918:	4604      	mov	r4, r0
 800491a:	4608      	mov	r0, r1
 800491c:	4611      	mov	r1, r2
 800491e:	2200      	movs	r2, #0
 8004920:	602a      	str	r2, [r5, #0]
 8004922:	461a      	mov	r2, r3
 8004924:	f7fc f8ed 	bl	8000b02 <_write>
 8004928:	1c43      	adds	r3, r0, #1
 800492a:	d102      	bne.n	8004932 <_write_r+0x1e>
 800492c:	682b      	ldr	r3, [r5, #0]
 800492e:	b103      	cbz	r3, 8004932 <_write_r+0x1e>
 8004930:	6023      	str	r3, [r4, #0]
 8004932:	bd38      	pop	{r3, r4, r5, pc}
 8004934:	20000164 	.word	0x20000164

08004938 <_close_r>:
 8004938:	b538      	push	{r3, r4, r5, lr}
 800493a:	4d06      	ldr	r5, [pc, #24]	; (8004954 <_close_r+0x1c>)
 800493c:	2300      	movs	r3, #0
 800493e:	4604      	mov	r4, r0
 8004940:	4608      	mov	r0, r1
 8004942:	602b      	str	r3, [r5, #0]
 8004944:	f7fc f8f9 	bl	8000b3a <_close>
 8004948:	1c43      	adds	r3, r0, #1
 800494a:	d102      	bne.n	8004952 <_close_r+0x1a>
 800494c:	682b      	ldr	r3, [r5, #0]
 800494e:	b103      	cbz	r3, 8004952 <_close_r+0x1a>
 8004950:	6023      	str	r3, [r4, #0]
 8004952:	bd38      	pop	{r3, r4, r5, pc}
 8004954:	20000164 	.word	0x20000164

08004958 <_fstat_r>:
 8004958:	b538      	push	{r3, r4, r5, lr}
 800495a:	4d07      	ldr	r5, [pc, #28]	; (8004978 <_fstat_r+0x20>)
 800495c:	2300      	movs	r3, #0
 800495e:	4604      	mov	r4, r0
 8004960:	4608      	mov	r0, r1
 8004962:	4611      	mov	r1, r2
 8004964:	602b      	str	r3, [r5, #0]
 8004966:	f7fc f8f4 	bl	8000b52 <_fstat>
 800496a:	1c43      	adds	r3, r0, #1
 800496c:	d102      	bne.n	8004974 <_fstat_r+0x1c>
 800496e:	682b      	ldr	r3, [r5, #0]
 8004970:	b103      	cbz	r3, 8004974 <_fstat_r+0x1c>
 8004972:	6023      	str	r3, [r4, #0]
 8004974:	bd38      	pop	{r3, r4, r5, pc}
 8004976:	bf00      	nop
 8004978:	20000164 	.word	0x20000164

0800497c <_isatty_r>:
 800497c:	b538      	push	{r3, r4, r5, lr}
 800497e:	4d06      	ldr	r5, [pc, #24]	; (8004998 <_isatty_r+0x1c>)
 8004980:	2300      	movs	r3, #0
 8004982:	4604      	mov	r4, r0
 8004984:	4608      	mov	r0, r1
 8004986:	602b      	str	r3, [r5, #0]
 8004988:	f7fc f8f3 	bl	8000b72 <_isatty>
 800498c:	1c43      	adds	r3, r0, #1
 800498e:	d102      	bne.n	8004996 <_isatty_r+0x1a>
 8004990:	682b      	ldr	r3, [r5, #0]
 8004992:	b103      	cbz	r3, 8004996 <_isatty_r+0x1a>
 8004994:	6023      	str	r3, [r4, #0]
 8004996:	bd38      	pop	{r3, r4, r5, pc}
 8004998:	20000164 	.word	0x20000164

0800499c <_lseek_r>:
 800499c:	b538      	push	{r3, r4, r5, lr}
 800499e:	4d07      	ldr	r5, [pc, #28]	; (80049bc <_lseek_r+0x20>)
 80049a0:	4604      	mov	r4, r0
 80049a2:	4608      	mov	r0, r1
 80049a4:	4611      	mov	r1, r2
 80049a6:	2200      	movs	r2, #0
 80049a8:	602a      	str	r2, [r5, #0]
 80049aa:	461a      	mov	r2, r3
 80049ac:	f7fc f8ec 	bl	8000b88 <_lseek>
 80049b0:	1c43      	adds	r3, r0, #1
 80049b2:	d102      	bne.n	80049ba <_lseek_r+0x1e>
 80049b4:	682b      	ldr	r3, [r5, #0]
 80049b6:	b103      	cbz	r3, 80049ba <_lseek_r+0x1e>
 80049b8:	6023      	str	r3, [r4, #0]
 80049ba:	bd38      	pop	{r3, r4, r5, pc}
 80049bc:	20000164 	.word	0x20000164

080049c0 <memcpy>:
 80049c0:	440a      	add	r2, r1
 80049c2:	4291      	cmp	r1, r2
 80049c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80049c8:	d100      	bne.n	80049cc <memcpy+0xc>
 80049ca:	4770      	bx	lr
 80049cc:	b510      	push	{r4, lr}
 80049ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80049d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80049d6:	4291      	cmp	r1, r2
 80049d8:	d1f9      	bne.n	80049ce <memcpy+0xe>
 80049da:	bd10      	pop	{r4, pc}

080049dc <memmove>:
 80049dc:	4288      	cmp	r0, r1
 80049de:	b510      	push	{r4, lr}
 80049e0:	eb01 0402 	add.w	r4, r1, r2
 80049e4:	d902      	bls.n	80049ec <memmove+0x10>
 80049e6:	4284      	cmp	r4, r0
 80049e8:	4623      	mov	r3, r4
 80049ea:	d807      	bhi.n	80049fc <memmove+0x20>
 80049ec:	1e43      	subs	r3, r0, #1
 80049ee:	42a1      	cmp	r1, r4
 80049f0:	d008      	beq.n	8004a04 <memmove+0x28>
 80049f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80049f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80049fa:	e7f8      	b.n	80049ee <memmove+0x12>
 80049fc:	4402      	add	r2, r0
 80049fe:	4601      	mov	r1, r0
 8004a00:	428a      	cmp	r2, r1
 8004a02:	d100      	bne.n	8004a06 <memmove+0x2a>
 8004a04:	bd10      	pop	{r4, pc}
 8004a06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004a0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004a0e:	e7f7      	b.n	8004a00 <memmove+0x24>

08004a10 <_realloc_r>:
 8004a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a14:	4680      	mov	r8, r0
 8004a16:	4614      	mov	r4, r2
 8004a18:	460e      	mov	r6, r1
 8004a1a:	b921      	cbnz	r1, 8004a26 <_realloc_r+0x16>
 8004a1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a20:	4611      	mov	r1, r2
 8004a22:	f7fe becb 	b.w	80037bc <_malloc_r>
 8004a26:	b92a      	cbnz	r2, 8004a34 <_realloc_r+0x24>
 8004a28:	f7fe fe5c 	bl	80036e4 <_free_r>
 8004a2c:	4625      	mov	r5, r4
 8004a2e:	4628      	mov	r0, r5
 8004a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a34:	f000 f82e 	bl	8004a94 <_malloc_usable_size_r>
 8004a38:	4284      	cmp	r4, r0
 8004a3a:	4607      	mov	r7, r0
 8004a3c:	d802      	bhi.n	8004a44 <_realloc_r+0x34>
 8004a3e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004a42:	d812      	bhi.n	8004a6a <_realloc_r+0x5a>
 8004a44:	4621      	mov	r1, r4
 8004a46:	4640      	mov	r0, r8
 8004a48:	f7fe feb8 	bl	80037bc <_malloc_r>
 8004a4c:	4605      	mov	r5, r0
 8004a4e:	2800      	cmp	r0, #0
 8004a50:	d0ed      	beq.n	8004a2e <_realloc_r+0x1e>
 8004a52:	42bc      	cmp	r4, r7
 8004a54:	4622      	mov	r2, r4
 8004a56:	4631      	mov	r1, r6
 8004a58:	bf28      	it	cs
 8004a5a:	463a      	movcs	r2, r7
 8004a5c:	f7ff ffb0 	bl	80049c0 <memcpy>
 8004a60:	4631      	mov	r1, r6
 8004a62:	4640      	mov	r0, r8
 8004a64:	f7fe fe3e 	bl	80036e4 <_free_r>
 8004a68:	e7e1      	b.n	8004a2e <_realloc_r+0x1e>
 8004a6a:	4635      	mov	r5, r6
 8004a6c:	e7df      	b.n	8004a2e <_realloc_r+0x1e>
	...

08004a70 <_read_r>:
 8004a70:	b538      	push	{r3, r4, r5, lr}
 8004a72:	4d07      	ldr	r5, [pc, #28]	; (8004a90 <_read_r+0x20>)
 8004a74:	4604      	mov	r4, r0
 8004a76:	4608      	mov	r0, r1
 8004a78:	4611      	mov	r1, r2
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	602a      	str	r2, [r5, #0]
 8004a7e:	461a      	mov	r2, r3
 8004a80:	f7fc f822 	bl	8000ac8 <_read>
 8004a84:	1c43      	adds	r3, r0, #1
 8004a86:	d102      	bne.n	8004a8e <_read_r+0x1e>
 8004a88:	682b      	ldr	r3, [r5, #0]
 8004a8a:	b103      	cbz	r3, 8004a8e <_read_r+0x1e>
 8004a8c:	6023      	str	r3, [r4, #0]
 8004a8e:	bd38      	pop	{r3, r4, r5, pc}
 8004a90:	20000164 	.word	0x20000164

08004a94 <_malloc_usable_size_r>:
 8004a94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a98:	1f18      	subs	r0, r3, #4
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	bfbc      	itt	lt
 8004a9e:	580b      	ldrlt	r3, [r1, r0]
 8004aa0:	18c0      	addlt	r0, r0, r3
 8004aa2:	4770      	bx	lr

08004aa4 <_init>:
 8004aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aa6:	bf00      	nop
 8004aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aaa:	bc08      	pop	{r3}
 8004aac:	469e      	mov	lr, r3
 8004aae:	4770      	bx	lr

08004ab0 <_fini>:
 8004ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ab2:	bf00      	nop
 8004ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ab6:	bc08      	pop	{r3}
 8004ab8:	469e      	mov	lr, r3
 8004aba:	4770      	bx	lr
