
SPI_ADC_SSD1306_5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043c4  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d8  08004570  08004570  00014570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004948  08004948  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004948  08004948  00014948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004950  08004950  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004950  08004950  00014950  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004954  08004954  00014954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004958  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000560  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000056c  2000056c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00049c48  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032f3  00000000  00000000  00069c84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002f98  00000000  00000000  0006cf78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002dd0  00000000  00000000  0006ff10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025cfa  00000000  00000000  00072ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001954e  00000000  00000000  000989da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f5caa  00000000  00000000  000b1f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001a7bd2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000d04c  00000000  00000000  001a7c24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08004558 	.word	0x08004558

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08004558 	.word	0x08004558

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f0:	b590      	push	{r4, r7, lr}
 80004f2:	f2ad 4d1c 	subw	sp, sp, #1052	; 0x41c
 80004f6:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f000 fc3e 	bl	8000d78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f8c6 	bl	800068c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 f9c0 	bl	8000884 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000504:	f000 f932 	bl	800076c <MX_ADC1_Init>
  MX_SPI2_Init();
 8000508:	f000 f986 	bl	8000818 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  u8g2_Setup_ssd1306_128x64_noname_f(&u8g2, U8G2_R0, u8x8_byte_stm32_hw_spi, u8x8_stm32_gpio_and_delay);
 800050c:	4b57      	ldr	r3, [pc, #348]	; (800066c <main+0x17c>)
 800050e:	4a58      	ldr	r2, [pc, #352]	; (8000670 <main+0x180>)
 8000510:	4958      	ldr	r1, [pc, #352]	; (8000674 <main+0x184>)
 8000512:	4859      	ldr	r0, [pc, #356]	; (8000678 <main+0x188>)
 8000514:	f002 fb70 	bl	8002bf8 <u8g2_Setup_ssd1306_128x64_noname_f>

  u8g2_InitDisplay(&u8g2);
 8000518:	4857      	ldr	r0, [pc, #348]	; (8000678 <main+0x188>)
 800051a:	f003 fef7 	bl	800430c <u8x8_InitDisplay>
  u8g2_SetPowerSave(&u8g2, 0);
 800051e:	2100      	movs	r1, #0
 8000520:	4855      	ldr	r0, [pc, #340]	; (8000678 <main+0x188>)
 8000522:	f003 ff02 	bl	800432a <u8x8_SetPowerSave>
  {
	  int x;
	  int y;
  }Point;

  int i=1;
 8000526:	2301      	movs	r3, #1
 8000528:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c


  while (1)
  {

	  u8g2_FirstPage(&u8g2);
 800052c:	4852      	ldr	r0, [pc, #328]	; (8000678 <main+0x188>)
 800052e:	f002 fb10 	bl	8002b52 <u8g2_FirstPage>


	  point[0].x=0;
 8000532:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8000536:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 800053a:	2200      	movs	r2, #0
 800053c:	601a      	str	r2, [r3, #0]
	  point[0].y=64;
 800053e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8000542:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8000546:	2240      	movs	r2, #64	; 0x40
 8000548:	605a      	str	r2, [r3, #4]

	  do
	  {
		  HAL_ADC_Start(&hadc1);
 800054a:	484c      	ldr	r0, [pc, #304]	; (800067c <main+0x18c>)
 800054c:	f000 fcee 	bl	8000f2c <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1,HAL_MAX_DELAY);
 8000550:	f04f 31ff 	mov.w	r1, #4294967295
 8000554:	4849      	ldr	r0, [pc, #292]	; (800067c <main+0x18c>)
 8000556:	f000 fdbb 	bl	80010d0 <HAL_ADC_PollForConversion>
		  adcVal = HAL_ADC_GetValue(&hadc1);
 800055a:	4848      	ldr	r0, [pc, #288]	; (800067c <main+0x18c>)
 800055c:	f000 fe43 	bl	80011e6 <HAL_ADC_GetValue>
 8000560:	4603      	mov	r3, r0
 8000562:	b29a      	uxth	r2, r3
 8000564:	4b46      	ldr	r3, [pc, #280]	; (8000680 <main+0x190>)
 8000566:	801a      	strh	r2, [r3, #0]

		  int pixel_y=adcVal*64/4096;
 8000568:	4b45      	ldr	r3, [pc, #276]	; (8000680 <main+0x190>)
 800056a:	881b      	ldrh	r3, [r3, #0]
 800056c:	2b00      	cmp	r3, #0
 800056e:	da00      	bge.n	8000572 <main+0x82>
 8000570:	333f      	adds	r3, #63	; 0x3f
 8000572:	119b      	asrs	r3, r3, #6
 8000574:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
		  point[i].x=i;
 8000578:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800057c:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8000580:	f8d7 240c 	ldr.w	r2, [r7, #1036]	; 0x40c
 8000584:	f8d7 140c 	ldr.w	r1, [r7, #1036]	; 0x40c
 8000588:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
		  point[i].y=64-pixel_y;
 800058c:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8000590:	f1c3 0240 	rsb	r2, r3, #64	; 0x40
 8000594:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8000598:	f2a3 410c 	subw	r1, r3, #1036	; 0x40c
 800059c:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 80005a0:	00db      	lsls	r3, r3, #3
 80005a2:	440b      	add	r3, r1
 80005a4:	605a      	str	r2, [r3, #4]


		  itoa(adcVal,buffer,10);
 80005a6:	4b36      	ldr	r3, [pc, #216]	; (8000680 <main+0x190>)
 80005a8:	881b      	ldrh	r3, [r3, #0]
 80005aa:	220a      	movs	r2, #10
 80005ac:	4935      	ldr	r1, [pc, #212]	; (8000684 <main+0x194>)
 80005ae:	4618      	mov	r0, r3
 80005b0:	f003 ff86 	bl	80044c0 <itoa>



	  	  	u8g2_SetFont(&u8g2,u8g2_font_5x7_tr);
 80005b4:	4934      	ldr	r1, [pc, #208]	; (8000688 <main+0x198>)
 80005b6:	4830      	ldr	r0, [pc, #192]	; (8000678 <main+0x188>)
 80005b8:	f002 ffbe 	bl	8003538 <u8g2_SetFont>
	  	  	u8g2_DrawStrX2(&u8g2,0,60,buffer);
 80005bc:	4b31      	ldr	r3, [pc, #196]	; (8000684 <main+0x194>)
 80005be:	223c      	movs	r2, #60	; 0x3c
 80005c0:	2100      	movs	r1, #0
 80005c2:	482d      	ldr	r0, [pc, #180]	; (8000678 <main+0x188>)
 80005c4:	f002 ff16 	bl	80033f4 <u8g2_DrawStrX2>

	  	  	for(int j=1;j<=i;j++)
 80005c8:	2301      	movs	r3, #1
 80005ca:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
 80005ce:	e032      	b.n	8000636 <main+0x146>
	  	  	{
	  	  		u8g2_DrawLine(&u8g2,point[j-1].x,point[j-1].y,point[j].x,point[j].y);
 80005d0:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 80005d4:	1e5a      	subs	r2, r3, #1
 80005d6:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80005da:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 80005de:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80005e2:	b299      	uxth	r1, r3
 80005e4:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 80005e8:	3b01      	subs	r3, #1
 80005ea:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 80005ee:	f2a2 420c 	subw	r2, r2, #1036	; 0x40c
 80005f2:	00db      	lsls	r3, r3, #3
 80005f4:	4413      	add	r3, r2
 80005f6:	685b      	ldr	r3, [r3, #4]
 80005f8:	b298      	uxth	r0, r3
 80005fa:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80005fe:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8000602:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
 8000606:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800060a:	b29c      	uxth	r4, r3
 800060c:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8000610:	f2a3 420c 	subw	r2, r3, #1036	; 0x40c
 8000614:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8000618:	00db      	lsls	r3, r3, #3
 800061a:	4413      	add	r3, r2
 800061c:	685b      	ldr	r3, [r3, #4]
 800061e:	b29b      	uxth	r3, r3
 8000620:	9300      	str	r3, [sp, #0]
 8000622:	4623      	mov	r3, r4
 8000624:	4602      	mov	r2, r0
 8000626:	4814      	ldr	r0, [pc, #80]	; (8000678 <main+0x188>)
 8000628:	f003 f92b 	bl	8003882 <u8g2_DrawLine>
	  	  	for(int j=1;j<=i;j++)
 800062c:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8000630:	3301      	adds	r3, #1
 8000632:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
 8000636:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
 800063a:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 800063e:	429a      	cmp	r2, r3
 8000640:	ddc6      	ble.n	80005d0 <main+0xe0>
	  	  	}

	  		i++;
 8000642:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8000646:	3301      	adds	r3, #1
 8000648:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
	  		//HAL_Delay(50);
	  		if(i==128)
 800064c:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8000650:	2b80      	cmp	r3, #128	; 0x80
 8000652:	d103      	bne.n	800065c <main+0x16c>
	  		{
	  			i=1;
 8000654:	2301      	movs	r3, #1
 8000656:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
	  			break;
 800065a:	e006      	b.n	800066a <main+0x17a>
	  		}


 }while (u8g2_NextPage(&u8g2));
 800065c:	4806      	ldr	r0, [pc, #24]	; (8000678 <main+0x188>)
 800065e:	f002 fa8c 	bl	8002b7a <u8g2_NextPage>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	f47f af70 	bne.w	800054a <main+0x5a>
	  u8g2_FirstPage(&u8g2);
 800066a:	e75f      	b.n	800052c <main+0x3c>
 800066c:	08000b49 	.word	0x08000b49
 8000670:	08000c3d 	.word	0x08000c3d
 8000674:	080048a4 	.word	0x080048a4
 8000678:	200000d4 	.word	0x200000d4
 800067c:	20000028 	.word	0x20000028
 8000680:	200000c8 	.word	0x200000c8
 8000684:	200000cc 	.word	0x200000cc
 8000688:	08004580 	.word	0x08004580

0800068c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b094      	sub	sp, #80	; 0x50
 8000690:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000692:	f107 0320 	add.w	r3, r7, #32
 8000696:	2230      	movs	r2, #48	; 0x30
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f003 ff12 	bl	80044c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a0:	f107 030c 	add.w	r3, r7, #12
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]
 80006ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b0:	2300      	movs	r3, #0
 80006b2:	60bb      	str	r3, [r7, #8]
 80006b4:	4b2b      	ldr	r3, [pc, #172]	; (8000764 <SystemClock_Config+0xd8>)
 80006b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b8:	4a2a      	ldr	r2, [pc, #168]	; (8000764 <SystemClock_Config+0xd8>)
 80006ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006be:	6413      	str	r3, [r2, #64]	; 0x40
 80006c0:	4b28      	ldr	r3, [pc, #160]	; (8000764 <SystemClock_Config+0xd8>)
 80006c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c8:	60bb      	str	r3, [r7, #8]
 80006ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006cc:	2300      	movs	r3, #0
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	4b25      	ldr	r3, [pc, #148]	; (8000768 <SystemClock_Config+0xdc>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a24      	ldr	r2, [pc, #144]	; (8000768 <SystemClock_Config+0xdc>)
 80006d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006da:	6013      	str	r3, [r2, #0]
 80006dc:	4b22      	ldr	r3, [pc, #136]	; (8000768 <SystemClock_Config+0xdc>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006e8:	2301      	movs	r3, #1
 80006ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f2:	2302      	movs	r3, #2
 80006f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006fc:	2304      	movs	r3, #4
 80006fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000700:	23b4      	movs	r3, #180	; 0xb4
 8000702:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000704:	2302      	movs	r3, #2
 8000706:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000708:	2304      	movs	r3, #4
 800070a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070c:	f107 0320 	add.w	r3, r7, #32
 8000710:	4618      	mov	r0, r3
 8000712:	f001 fa9f 	bl	8001c54 <HAL_RCC_OscConfig>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800071c:	f000 f910 	bl	8000940 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000720:	f001 fa48 	bl	8001bb4 <HAL_PWREx_EnableOverDrive>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800072a:	f000 f909 	bl	8000940 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072e:	230f      	movs	r3, #15
 8000730:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000732:	2302      	movs	r3, #2
 8000734:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000736:	2300      	movs	r3, #0
 8000738:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800073a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800073e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000740:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000744:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000746:	f107 030c 	add.w	r3, r7, #12
 800074a:	2105      	movs	r1, #5
 800074c:	4618      	mov	r0, r3
 800074e:	f001 fcf9 	bl	8002144 <HAL_RCC_ClockConfig>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000758:	f000 f8f2 	bl	8000940 <Error_Handler>
  }
}
 800075c:	bf00      	nop
 800075e:	3750      	adds	r7, #80	; 0x50
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	40023800 	.word	0x40023800
 8000768:	40007000 	.word	0x40007000

0800076c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000772:	463b      	mov	r3, r7
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]
 800077c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800077e:	4b23      	ldr	r3, [pc, #140]	; (800080c <MX_ADC1_Init+0xa0>)
 8000780:	4a23      	ldr	r2, [pc, #140]	; (8000810 <MX_ADC1_Init+0xa4>)
 8000782:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000784:	4b21      	ldr	r3, [pc, #132]	; (800080c <MX_ADC1_Init+0xa0>)
 8000786:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800078a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800078c:	4b1f      	ldr	r3, [pc, #124]	; (800080c <MX_ADC1_Init+0xa0>)
 800078e:	2200      	movs	r2, #0
 8000790:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000792:	4b1e      	ldr	r3, [pc, #120]	; (800080c <MX_ADC1_Init+0xa0>)
 8000794:	2201      	movs	r2, #1
 8000796:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000798:	4b1c      	ldr	r3, [pc, #112]	; (800080c <MX_ADC1_Init+0xa0>)
 800079a:	2200      	movs	r2, #0
 800079c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 800079e:	4b1b      	ldr	r3, [pc, #108]	; (800080c <MX_ADC1_Init+0xa0>)
 80007a0:	2201      	movs	r2, #1
 80007a2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 80007a6:	4b19      	ldr	r3, [pc, #100]	; (800080c <MX_ADC1_Init+0xa0>)
 80007a8:	2201      	movs	r2, #1
 80007aa:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007ac:	4b17      	ldr	r3, [pc, #92]	; (800080c <MX_ADC1_Init+0xa0>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007b2:	4b16      	ldr	r3, [pc, #88]	; (800080c <MX_ADC1_Init+0xa0>)
 80007b4:	4a17      	ldr	r2, [pc, #92]	; (8000814 <MX_ADC1_Init+0xa8>)
 80007b6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007b8:	4b14      	ldr	r3, [pc, #80]	; (800080c <MX_ADC1_Init+0xa0>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007be:	4b13      	ldr	r3, [pc, #76]	; (800080c <MX_ADC1_Init+0xa0>)
 80007c0:	2201      	movs	r2, #1
 80007c2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007c4:	4b11      	ldr	r3, [pc, #68]	; (800080c <MX_ADC1_Init+0xa0>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007cc:	4b0f      	ldr	r3, [pc, #60]	; (800080c <MX_ADC1_Init+0xa0>)
 80007ce:	2201      	movs	r2, #1
 80007d0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007d2:	480e      	ldr	r0, [pc, #56]	; (800080c <MX_ADC1_Init+0xa0>)
 80007d4:	f000 fb66 	bl	8000ea4 <HAL_ADC_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_ADC1_Init+0x76>
  {
    Error_Handler();
 80007de:	f000 f8af 	bl	8000940 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80007e2:	2303      	movs	r3, #3
 80007e4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007e6:	2301      	movs	r3, #1
 80007e8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007ea:	2300      	movs	r3, #0
 80007ec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ee:	463b      	mov	r3, r7
 80007f0:	4619      	mov	r1, r3
 80007f2:	4806      	ldr	r0, [pc, #24]	; (800080c <MX_ADC1_Init+0xa0>)
 80007f4:	f000 fd04 	bl	8001200 <HAL_ADC_ConfigChannel>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 80007fe:	f000 f89f 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	3710      	adds	r7, #16
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	20000028 	.word	0x20000028
 8000810:	40012000 	.word	0x40012000
 8000814:	0f000001 	.word	0x0f000001

08000818 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800081c:	4b17      	ldr	r3, [pc, #92]	; (800087c <MX_SPI2_Init+0x64>)
 800081e:	4a18      	ldr	r2, [pc, #96]	; (8000880 <MX_SPI2_Init+0x68>)
 8000820:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000822:	4b16      	ldr	r3, [pc, #88]	; (800087c <MX_SPI2_Init+0x64>)
 8000824:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000828:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800082a:	4b14      	ldr	r3, [pc, #80]	; (800087c <MX_SPI2_Init+0x64>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000830:	4b12      	ldr	r3, [pc, #72]	; (800087c <MX_SPI2_Init+0x64>)
 8000832:	2200      	movs	r2, #0
 8000834:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000836:	4b11      	ldr	r3, [pc, #68]	; (800087c <MX_SPI2_Init+0x64>)
 8000838:	2200      	movs	r2, #0
 800083a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800083c:	4b0f      	ldr	r3, [pc, #60]	; (800087c <MX_SPI2_Init+0x64>)
 800083e:	2200      	movs	r2, #0
 8000840:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000842:	4b0e      	ldr	r3, [pc, #56]	; (800087c <MX_SPI2_Init+0x64>)
 8000844:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000848:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800084a:	4b0c      	ldr	r3, [pc, #48]	; (800087c <MX_SPI2_Init+0x64>)
 800084c:	2210      	movs	r2, #16
 800084e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000850:	4b0a      	ldr	r3, [pc, #40]	; (800087c <MX_SPI2_Init+0x64>)
 8000852:	2200      	movs	r2, #0
 8000854:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000856:	4b09      	ldr	r3, [pc, #36]	; (800087c <MX_SPI2_Init+0x64>)
 8000858:	2200      	movs	r2, #0
 800085a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800085c:	4b07      	ldr	r3, [pc, #28]	; (800087c <MX_SPI2_Init+0x64>)
 800085e:	2200      	movs	r2, #0
 8000860:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000862:	4b06      	ldr	r3, [pc, #24]	; (800087c <MX_SPI2_Init+0x64>)
 8000864:	220a      	movs	r2, #10
 8000866:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000868:	4804      	ldr	r0, [pc, #16]	; (800087c <MX_SPI2_Init+0x64>)
 800086a:	f001 fe57 	bl	800251c <HAL_SPI_Init>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000874:	f000 f864 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000878:	bf00      	nop
 800087a:	bd80      	pop	{r7, pc}
 800087c:	20000070 	.word	0x20000070
 8000880:	40003800 	.word	0x40003800

08000884 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b08a      	sub	sp, #40	; 0x28
 8000888:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088a:	f107 0314 	add.w	r3, r7, #20
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]
 8000894:	609a      	str	r2, [r3, #8]
 8000896:	60da      	str	r2, [r3, #12]
 8000898:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	613b      	str	r3, [r7, #16]
 800089e:	4b26      	ldr	r3, [pc, #152]	; (8000938 <MX_GPIO_Init+0xb4>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a25      	ldr	r2, [pc, #148]	; (8000938 <MX_GPIO_Init+0xb4>)
 80008a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b23      	ldr	r3, [pc, #140]	; (8000938 <MX_GPIO_Init+0xb4>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008b2:	613b      	str	r3, [r7, #16]
 80008b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	60fb      	str	r3, [r7, #12]
 80008ba:	4b1f      	ldr	r3, [pc, #124]	; (8000938 <MX_GPIO_Init+0xb4>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a1e      	ldr	r2, [pc, #120]	; (8000938 <MX_GPIO_Init+0xb4>)
 80008c0:	f043 0304 	orr.w	r3, r3, #4
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b1c      	ldr	r3, [pc, #112]	; (8000938 <MX_GPIO_Init+0xb4>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0304 	and.w	r3, r3, #4
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	60bb      	str	r3, [r7, #8]
 80008d6:	4b18      	ldr	r3, [pc, #96]	; (8000938 <MX_GPIO_Init+0xb4>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a17      	ldr	r2, [pc, #92]	; (8000938 <MX_GPIO_Init+0xb4>)
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b15      	ldr	r3, [pc, #84]	; (8000938 <MX_GPIO_Init+0xb4>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	60bb      	str	r3, [r7, #8]
 80008ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	607b      	str	r3, [r7, #4]
 80008f2:	4b11      	ldr	r3, [pc, #68]	; (8000938 <MX_GPIO_Init+0xb4>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a10      	ldr	r2, [pc, #64]	; (8000938 <MX_GPIO_Init+0xb4>)
 80008f8:	f043 0302 	orr.w	r3, r3, #2
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <MX_GPIO_Init+0xb4>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f003 0302 	and.w	r3, r3, #2
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OLED_RST_Pin|OLED_DC_Pin|OLED_CS_Pin, GPIO_PIN_SET);
 800090a:	2201      	movs	r2, #1
 800090c:	2107      	movs	r1, #7
 800090e:	480b      	ldr	r0, [pc, #44]	; (800093c <MX_GPIO_Init+0xb8>)
 8000910:	f001 f936 	bl	8001b80 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_RST_Pin OLED_DC_Pin OLED_CS_Pin */
  GPIO_InitStruct.Pin = OLED_RST_Pin|OLED_DC_Pin|OLED_CS_Pin;
 8000914:	2307      	movs	r3, #7
 8000916:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000918:	2301      	movs	r3, #1
 800091a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800091c:	2301      	movs	r3, #1
 800091e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000920:	2302      	movs	r3, #2
 8000922:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000924:	f107 0314 	add.w	r3, r7, #20
 8000928:	4619      	mov	r1, r3
 800092a:	4804      	ldr	r0, [pc, #16]	; (800093c <MX_GPIO_Init+0xb8>)
 800092c:	f000 ff7c 	bl	8001828 <HAL_GPIO_Init>

}
 8000930:	bf00      	nop
 8000932:	3728      	adds	r7, #40	; 0x28
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	40023800 	.word	0x40023800
 800093c:	40020800 	.word	0x40020800

08000940 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000944:	b672      	cpsid	i
}
 8000946:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000948:	e7fe      	b.n	8000948 <Error_Handler+0x8>
	...

0800094c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	607b      	str	r3, [r7, #4]
 8000956:	4b10      	ldr	r3, [pc, #64]	; (8000998 <HAL_MspInit+0x4c>)
 8000958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095a:	4a0f      	ldr	r2, [pc, #60]	; (8000998 <HAL_MspInit+0x4c>)
 800095c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000960:	6453      	str	r3, [r2, #68]	; 0x44
 8000962:	4b0d      	ldr	r3, [pc, #52]	; (8000998 <HAL_MspInit+0x4c>)
 8000964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000966:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	603b      	str	r3, [r7, #0]
 8000972:	4b09      	ldr	r3, [pc, #36]	; (8000998 <HAL_MspInit+0x4c>)
 8000974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000976:	4a08      	ldr	r2, [pc, #32]	; (8000998 <HAL_MspInit+0x4c>)
 8000978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800097c:	6413      	str	r3, [r2, #64]	; 0x40
 800097e:	4b06      	ldr	r3, [pc, #24]	; (8000998 <HAL_MspInit+0x4c>)
 8000980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000986:	603b      	str	r3, [r7, #0]
 8000988:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800098a:	bf00      	nop
 800098c:	370c      	adds	r7, #12
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	40023800 	.word	0x40023800

0800099c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b08a      	sub	sp, #40	; 0x28
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a4:	f107 0314 	add.w	r3, r7, #20
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]
 80009b2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a17      	ldr	r2, [pc, #92]	; (8000a18 <HAL_ADC_MspInit+0x7c>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d127      	bne.n	8000a0e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	613b      	str	r3, [r7, #16]
 80009c2:	4b16      	ldr	r3, [pc, #88]	; (8000a1c <HAL_ADC_MspInit+0x80>)
 80009c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c6:	4a15      	ldr	r2, [pc, #84]	; (8000a1c <HAL_ADC_MspInit+0x80>)
 80009c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009cc:	6453      	str	r3, [r2, #68]	; 0x44
 80009ce:	4b13      	ldr	r3, [pc, #76]	; (8000a1c <HAL_ADC_MspInit+0x80>)
 80009d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009d6:	613b      	str	r3, [r7, #16]
 80009d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	60fb      	str	r3, [r7, #12]
 80009de:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <HAL_ADC_MspInit+0x80>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	4a0e      	ldr	r2, [pc, #56]	; (8000a1c <HAL_ADC_MspInit+0x80>)
 80009e4:	f043 0301 	orr.w	r3, r3, #1
 80009e8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ea:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <HAL_ADC_MspInit+0x80>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	f003 0301 	and.w	r3, r3, #1
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80009f6:	2308      	movs	r3, #8
 80009f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009fa:	2303      	movs	r3, #3
 80009fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a02:	f107 0314 	add.w	r3, r7, #20
 8000a06:	4619      	mov	r1, r3
 8000a08:	4805      	ldr	r0, [pc, #20]	; (8000a20 <HAL_ADC_MspInit+0x84>)
 8000a0a:	f000 ff0d 	bl	8001828 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a0e:	bf00      	nop
 8000a10:	3728      	adds	r7, #40	; 0x28
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40012000 	.word	0x40012000
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	40020000 	.word	0x40020000

08000a24 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08a      	sub	sp, #40	; 0x28
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2c:	f107 0314 	add.w	r3, r7, #20
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]
 8000a38:	60da      	str	r2, [r3, #12]
 8000a3a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a28      	ldr	r2, [pc, #160]	; (8000ae4 <HAL_SPI_MspInit+0xc0>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d14a      	bne.n	8000adc <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	613b      	str	r3, [r7, #16]
 8000a4a:	4b27      	ldr	r3, [pc, #156]	; (8000ae8 <HAL_SPI_MspInit+0xc4>)
 8000a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4e:	4a26      	ldr	r2, [pc, #152]	; (8000ae8 <HAL_SPI_MspInit+0xc4>)
 8000a50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a54:	6413      	str	r3, [r2, #64]	; 0x40
 8000a56:	4b24      	ldr	r3, [pc, #144]	; (8000ae8 <HAL_SPI_MspInit+0xc4>)
 8000a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a5e:	613b      	str	r3, [r7, #16]
 8000a60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	60fb      	str	r3, [r7, #12]
 8000a66:	4b20      	ldr	r3, [pc, #128]	; (8000ae8 <HAL_SPI_MspInit+0xc4>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	4a1f      	ldr	r2, [pc, #124]	; (8000ae8 <HAL_SPI_MspInit+0xc4>)
 8000a6c:	f043 0304 	orr.w	r3, r3, #4
 8000a70:	6313      	str	r3, [r2, #48]	; 0x30
 8000a72:	4b1d      	ldr	r3, [pc, #116]	; (8000ae8 <HAL_SPI_MspInit+0xc4>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	f003 0304 	and.w	r3, r3, #4
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60bb      	str	r3, [r7, #8]
 8000a82:	4b19      	ldr	r3, [pc, #100]	; (8000ae8 <HAL_SPI_MspInit+0xc4>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a18      	ldr	r2, [pc, #96]	; (8000ae8 <HAL_SPI_MspInit+0xc4>)
 8000a88:	f043 0302 	orr.w	r3, r3, #2
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b16      	ldr	r3, [pc, #88]	; (8000ae8 <HAL_SPI_MspInit+0xc4>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f003 0302 	and.w	r3, r3, #2
 8000a96:	60bb      	str	r3, [r7, #8]
 8000a98:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a9a:	2308      	movs	r3, #8
 8000a9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa6:	2303      	movs	r3, #3
 8000aa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000aaa:	2305      	movs	r3, #5
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aae:	f107 0314 	add.w	r3, r7, #20
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	480d      	ldr	r0, [pc, #52]	; (8000aec <HAL_SPI_MspInit+0xc8>)
 8000ab6:	f000 feb7 	bl	8001828 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000aba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000abe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac8:	2303      	movs	r3, #3
 8000aca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000acc:	2305      	movs	r3, #5
 8000ace:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4806      	ldr	r0, [pc, #24]	; (8000af0 <HAL_SPI_MspInit+0xcc>)
 8000ad8:	f000 fea6 	bl	8001828 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000adc:	bf00      	nop
 8000ade:	3728      	adds	r7, #40	; 0x28
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40003800 	.word	0x40003800
 8000ae8:	40023800 	.word	0x40023800
 8000aec:	40020800 	.word	0x40020800
 8000af0:	40020400 	.word	0x40020400

08000af4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000af8:	e7fe      	b.n	8000af8 <NMI_Handler+0x4>

08000afa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000afa:	b480      	push	{r7}
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000afe:	e7fe      	b.n	8000afe <HardFault_Handler+0x4>

08000b00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <MemManage_Handler+0x4>

08000b06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b0a:	e7fe      	b.n	8000b0a <BusFault_Handler+0x4>

08000b0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b10:	e7fe      	b.n	8000b10 <UsageFault_Handler+0x4>

08000b12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b12:	b480      	push	{r7}
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b16:	bf00      	nop
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr

08000b20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr

08000b2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr

08000b3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b40:	f000 f96c 	bl	8000e1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b44:	bf00      	nop
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <u8x8_stm32_gpio_and_delay>:
#define TX_TIMEOUT		100

extern SPI_HandleTypeDef hspi2;

uint8_t u8x8_stm32_gpio_and_delay(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	60f8      	str	r0, [r7, #12]
 8000b50:	607b      	str	r3, [r7, #4]
 8000b52:	460b      	mov	r3, r1
 8000b54:	72fb      	strb	r3, [r7, #11]
 8000b56:	4613      	mov	r3, r2
 8000b58:	72bb      	strb	r3, [r7, #10]
	/* STM32 supports HW SPI, Remove unused cases like U8X8_MSG_DELAY_XXX & U8X8_MSG_GPIO_XXX */
	switch(msg)
 8000b5a:	7afb      	ldrb	r3, [r7, #11]
 8000b5c:	3b28      	subs	r3, #40	; 0x28
 8000b5e:	2b23      	cmp	r3, #35	; 0x23
 8000b60:	d864      	bhi.n	8000c2c <u8x8_stm32_gpio_and_delay+0xe4>
 8000b62:	a201      	add	r2, pc, #4	; (adr r2, 8000b68 <u8x8_stm32_gpio_and_delay+0x20>)
 8000b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b68:	08000c2d 	.word	0x08000c2d
 8000b6c:	08000bf9 	.word	0x08000bf9
 8000b70:	08000c2d 	.word	0x08000c2d
 8000b74:	08000c2d 	.word	0x08000c2d
 8000b78:	08000c2d 	.word	0x08000c2d
 8000b7c:	08000c2d 	.word	0x08000c2d
 8000b80:	08000c2d 	.word	0x08000c2d
 8000b84:	08000c2d 	.word	0x08000c2d
 8000b88:	08000c2d 	.word	0x08000c2d
 8000b8c:	08000c2d 	.word	0x08000c2d
 8000b90:	08000c2d 	.word	0x08000c2d
 8000b94:	08000c2d 	.word	0x08000c2d
 8000b98:	08000c2d 	.word	0x08000c2d
 8000b9c:	08000c2d 	.word	0x08000c2d
 8000ba0:	08000c2d 	.word	0x08000c2d
 8000ba4:	08000c2d 	.word	0x08000c2d
 8000ba8:	08000c2d 	.word	0x08000c2d
 8000bac:	08000c2d 	.word	0x08000c2d
 8000bb0:	08000c2d 	.word	0x08000c2d
 8000bb4:	08000c2d 	.word	0x08000c2d
 8000bb8:	08000c2d 	.word	0x08000c2d
 8000bbc:	08000c2d 	.word	0x08000c2d
 8000bc0:	08000c2d 	.word	0x08000c2d
 8000bc4:	08000c2d 	.word	0x08000c2d
 8000bc8:	08000c2d 	.word	0x08000c2d
 8000bcc:	08000c2d 	.word	0x08000c2d
 8000bd0:	08000c2d 	.word	0x08000c2d
 8000bd4:	08000c2d 	.word	0x08000c2d
 8000bd8:	08000c2d 	.word	0x08000c2d
 8000bdc:	08000c2d 	.word	0x08000c2d
 8000be0:	08000c2d 	.word	0x08000c2d
 8000be4:	08000c2d 	.word	0x08000c2d
 8000be8:	08000c2d 	.word	0x08000c2d
 8000bec:	08000c03 	.word	0x08000c03
 8000bf0:	08000c11 	.word	0x08000c11
 8000bf4:	08000c1f 	.word	0x08000c1f
	case U8X8_MSG_GPIO_AND_DELAY_INIT:
		/* Insert codes for initialization */
		break;
	case U8X8_MSG_DELAY_MILLI:
		/* ms Delay */
		HAL_Delay(arg_int);
 8000bf8:	7abb      	ldrb	r3, [r7, #10]
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f000 f92e 	bl	8000e5c <HAL_Delay>
		break;
 8000c00:	e014      	b.n	8000c2c <u8x8_stm32_gpio_and_delay+0xe4>
	case U8X8_MSG_GPIO_CS:
		/* Insert codes for SS pin control */
		HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, arg_int);
 8000c02:	7abb      	ldrb	r3, [r7, #10]
 8000c04:	461a      	mov	r2, r3
 8000c06:	2104      	movs	r1, #4
 8000c08:	480b      	ldr	r0, [pc, #44]	; (8000c38 <u8x8_stm32_gpio_and_delay+0xf0>)
 8000c0a:	f000 ffb9 	bl	8001b80 <HAL_GPIO_WritePin>
		break;
 8000c0e:	e00d      	b.n	8000c2c <u8x8_stm32_gpio_and_delay+0xe4>
	case U8X8_MSG_GPIO_DC:
		/* Insert codes for DC pin control */
		HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, arg_int);
 8000c10:	7abb      	ldrb	r3, [r7, #10]
 8000c12:	461a      	mov	r2, r3
 8000c14:	2102      	movs	r1, #2
 8000c16:	4808      	ldr	r0, [pc, #32]	; (8000c38 <u8x8_stm32_gpio_and_delay+0xf0>)
 8000c18:	f000 ffb2 	bl	8001b80 <HAL_GPIO_WritePin>
		break;
 8000c1c:	e006      	b.n	8000c2c <u8x8_stm32_gpio_and_delay+0xe4>
	case U8X8_MSG_GPIO_RESET:
		/* Insert codes for RST pin control */
		HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, arg_int);
 8000c1e:	7abb      	ldrb	r3, [r7, #10]
 8000c20:	461a      	mov	r2, r3
 8000c22:	2101      	movs	r1, #1
 8000c24:	4804      	ldr	r0, [pc, #16]	; (8000c38 <u8x8_stm32_gpio_and_delay+0xf0>)
 8000c26:	f000 ffab 	bl	8001b80 <HAL_GPIO_WritePin>
		break;
 8000c2a:	bf00      	nop
	}
	return 1;
 8000c2c:	2301      	movs	r3, #1
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3710      	adds	r7, #16
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40020800 	.word	0x40020800

08000c3c <u8x8_byte_stm32_hw_spi>:

uint8_t u8x8_byte_stm32_hw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	60f8      	str	r0, [r7, #12]
 8000c44:	607b      	str	r3, [r7, #4]
 8000c46:	460b      	mov	r3, r1
 8000c48:	72fb      	strb	r3, [r7, #11]
 8000c4a:	4613      	mov	r3, r2
 8000c4c:	72bb      	strb	r3, [r7, #10]
	switch(msg) {
 8000c4e:	7afb      	ldrb	r3, [r7, #11]
 8000c50:	3b14      	subs	r3, #20
 8000c52:	2b0c      	cmp	r3, #12
 8000c54:	d847      	bhi.n	8000ce6 <u8x8_byte_stm32_hw_spi+0xaa>
 8000c56:	a201      	add	r2, pc, #4	; (adr r2, 8000c5c <u8x8_byte_stm32_hw_spi+0x20>)
 8000c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c5c:	08000ceb 	.word	0x08000ceb
 8000c60:	08000ce7 	.word	0x08000ce7
 8000c64:	08000ce7 	.word	0x08000ce7
 8000c68:	08000c91 	.word	0x08000c91
 8000c6c:	08000cb7 	.word	0x08000cb7
 8000c70:	08000ccf 	.word	0x08000ccf
 8000c74:	08000ce7 	.word	0x08000ce7
 8000c78:	08000ce7 	.word	0x08000ce7
 8000c7c:	08000ce7 	.word	0x08000ce7
 8000c80:	08000ce7 	.word	0x08000ce7
 8000c84:	08000ce7 	.word	0x08000ce7
 8000c88:	08000ce7 	.word	0x08000ce7
 8000c8c:	08000ca9 	.word	0x08000ca9
	case U8X8_MSG_BYTE_SEND:
		/* Insert codes to transmit data */
		if(HAL_SPI_Transmit(&hspi2, arg_ptr, arg_int, TX_TIMEOUT) != HAL_OK) return 0;
 8000c90:	7abb      	ldrb	r3, [r7, #10]
 8000c92:	b29a      	uxth	r2, r3
 8000c94:	2364      	movs	r3, #100	; 0x64
 8000c96:	6879      	ldr	r1, [r7, #4]
 8000c98:	4818      	ldr	r0, [pc, #96]	; (8000cfc <u8x8_byte_stm32_hw_spi+0xc0>)
 8000c9a:	f001 fcc8 	bl	800262e <HAL_SPI_Transmit>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d024      	beq.n	8000cee <u8x8_byte_stm32_hw_spi+0xb2>
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	e024      	b.n	8000cf2 <u8x8_byte_stm32_hw_spi+0xb6>
	case U8X8_MSG_BYTE_INIT:
		/* Insert codes to begin SPI transmission */
		break;
	case U8X8_MSG_BYTE_SET_DC:
		/* Control DC pin, U8X8_MSG_GPIO_DC will be called */
		u8x8_gpio_SetDC(u8x8, arg_int);
 8000ca8:	7abb      	ldrb	r3, [r7, #10]
 8000caa:	461a      	mov	r2, r3
 8000cac:	214a      	movs	r1, #74	; 0x4a
 8000cae:	68f8      	ldr	r0, [r7, #12]
 8000cb0:	f003 fb5b 	bl	800436a <u8x8_gpio_call>
		break;
 8000cb4:	e01c      	b.n	8000cf0 <u8x8_byte_stm32_hw_spi+0xb4>
	case U8X8_MSG_BYTE_START_TRANSFER:
		/* Select slave, U8X8_MSG_GPIO_CS will be called */
		u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_enable_level);
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	2149      	movs	r1, #73	; 0x49
 8000cc0:	68f8      	ldr	r0, [r7, #12]
 8000cc2:	f003 fb52 	bl	800436a <u8x8_gpio_call>
		HAL_Delay(1);
 8000cc6:	2001      	movs	r0, #1
 8000cc8:	f000 f8c8 	bl	8000e5c <HAL_Delay>
		break;
 8000ccc:	e010      	b.n	8000cf0 <u8x8_byte_stm32_hw_spi+0xb4>
	case U8X8_MSG_BYTE_END_TRANSFER:
		HAL_Delay(1);
 8000cce:	2001      	movs	r0, #1
 8000cd0:	f000 f8c4 	bl	8000e5c <HAL_Delay>
		/* Insert codes to end SPI transmission */
		u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	785b      	ldrb	r3, [r3, #1]
 8000cda:	461a      	mov	r2, r3
 8000cdc:	2149      	movs	r1, #73	; 0x49
 8000cde:	68f8      	ldr	r0, [r7, #12]
 8000ce0:	f003 fb43 	bl	800436a <u8x8_gpio_call>
		break;
 8000ce4:	e004      	b.n	8000cf0 <u8x8_byte_stm32_hw_spi+0xb4>
	default:
		return 0;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	e003      	b.n	8000cf2 <u8x8_byte_stm32_hw_spi+0xb6>
		break;
 8000cea:	bf00      	nop
 8000cec:	e000      	b.n	8000cf0 <u8x8_byte_stm32_hw_spi+0xb4>
		break;
 8000cee:	bf00      	nop
	}
	return 1;
 8000cf0:	2301      	movs	r3, #1
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3710      	adds	r7, #16
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	20000070 	.word	0x20000070

08000d00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000d00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d38 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d04:	480d      	ldr	r0, [pc, #52]	; (8000d3c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d06:	490e      	ldr	r1, [pc, #56]	; (8000d40 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d08:	4a0e      	ldr	r2, [pc, #56]	; (8000d44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d0c:	e002      	b.n	8000d14 <LoopCopyDataInit>

08000d0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d12:	3304      	adds	r3, #4

08000d14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d18:	d3f9      	bcc.n	8000d0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d1a:	4a0b      	ldr	r2, [pc, #44]	; (8000d48 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d1c:	4c0b      	ldr	r4, [pc, #44]	; (8000d4c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d20:	e001      	b.n	8000d26 <LoopFillZerobss>

08000d22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d24:	3204      	adds	r2, #4

08000d26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d28:	d3fb      	bcc.n	8000d22 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d2a:	f000 f813 	bl	8000d54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d2e:	f003 fb8b 	bl	8004448 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d32:	f7ff fbdd 	bl	80004f0 <main>
  bx  lr    
 8000d36:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000d38:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000d3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d40:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d44:	08004958 	.word	0x08004958
  ldr r2, =_sbss
 8000d48:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d4c:	2000056c 	.word	0x2000056c

08000d50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d50:	e7fe      	b.n	8000d50 <ADC_IRQHandler>
	...

08000d54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d58:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <SystemInit+0x20>)
 8000d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d5e:	4a05      	ldr	r2, [pc, #20]	; (8000d74 <SystemInit+0x20>)
 8000d60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d7c:	4b0e      	ldr	r3, [pc, #56]	; (8000db8 <HAL_Init+0x40>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a0d      	ldr	r2, [pc, #52]	; (8000db8 <HAL_Init+0x40>)
 8000d82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d88:	4b0b      	ldr	r3, [pc, #44]	; (8000db8 <HAL_Init+0x40>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a0a      	ldr	r2, [pc, #40]	; (8000db8 <HAL_Init+0x40>)
 8000d8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d94:	4b08      	ldr	r3, [pc, #32]	; (8000db8 <HAL_Init+0x40>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a07      	ldr	r2, [pc, #28]	; (8000db8 <HAL_Init+0x40>)
 8000d9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000da0:	2003      	movs	r0, #3
 8000da2:	f000 fd0d 	bl	80017c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000da6:	200f      	movs	r0, #15
 8000da8:	f000 f808 	bl	8000dbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dac:	f7ff fdce 	bl	800094c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000db0:	2300      	movs	r3, #0
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40023c00 	.word	0x40023c00

08000dbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dc4:	4b12      	ldr	r3, [pc, #72]	; (8000e10 <HAL_InitTick+0x54>)
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	4b12      	ldr	r3, [pc, #72]	; (8000e14 <HAL_InitTick+0x58>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	4619      	mov	r1, r3
 8000dce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f000 fd17 	bl	800180e <HAL_SYSTICK_Config>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
 8000de8:	e00e      	b.n	8000e08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2b0f      	cmp	r3, #15
 8000dee:	d80a      	bhi.n	8000e06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000df0:	2200      	movs	r2, #0
 8000df2:	6879      	ldr	r1, [r7, #4]
 8000df4:	f04f 30ff 	mov.w	r0, #4294967295
 8000df8:	f000 fced 	bl	80017d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dfc:	4a06      	ldr	r2, [pc, #24]	; (8000e18 <HAL_InitTick+0x5c>)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e02:	2300      	movs	r3, #0
 8000e04:	e000      	b.n	8000e08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3708      	adds	r7, #8
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	20000000 	.word	0x20000000
 8000e14:	20000008 	.word	0x20000008
 8000e18:	20000004 	.word	0x20000004

08000e1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e20:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <HAL_IncTick+0x20>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	461a      	mov	r2, r3
 8000e26:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <HAL_IncTick+0x24>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	4a04      	ldr	r2, [pc, #16]	; (8000e40 <HAL_IncTick+0x24>)
 8000e2e:	6013      	str	r3, [r2, #0]
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	20000008 	.word	0x20000008
 8000e40:	20000168 	.word	0x20000168

08000e44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  return uwTick;
 8000e48:	4b03      	ldr	r3, [pc, #12]	; (8000e58 <HAL_GetTick+0x14>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	20000168 	.word	0x20000168

08000e5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e64:	f7ff ffee 	bl	8000e44 <HAL_GetTick>
 8000e68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e74:	d005      	beq.n	8000e82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e76:	4b0a      	ldr	r3, [pc, #40]	; (8000ea0 <HAL_Delay+0x44>)
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	4413      	add	r3, r2
 8000e80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e82:	bf00      	nop
 8000e84:	f7ff ffde 	bl	8000e44 <HAL_GetTick>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	68fa      	ldr	r2, [r7, #12]
 8000e90:	429a      	cmp	r2, r3
 8000e92:	d8f7      	bhi.n	8000e84 <HAL_Delay+0x28>
  {
  }
}
 8000e94:	bf00      	nop
 8000e96:	bf00      	nop
 8000e98:	3710      	adds	r7, #16
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000008 	.word	0x20000008

08000ea4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000eac:	2300      	movs	r3, #0
 8000eae:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d101      	bne.n	8000eba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e033      	b.n	8000f22 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d109      	bne.n	8000ed6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f7ff fd6a 	bl	800099c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2200      	movs	r2, #0
 8000ecc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eda:	f003 0310 	and.w	r3, r3, #16
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d118      	bne.n	8000f14 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000eea:	f023 0302 	bic.w	r3, r3, #2
 8000eee:	f043 0202 	orr.w	r2, r3, #2
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f000 fab4 	bl	8001464 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2200      	movs	r2, #0
 8000f00:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f06:	f023 0303 	bic.w	r3, r3, #3
 8000f0a:	f043 0201 	orr.w	r2, r3, #1
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	641a      	str	r2, [r3, #64]	; 0x40
 8000f12:	e001      	b.n	8000f18 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000f14:	2301      	movs	r3, #1
 8000f16:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3710      	adds	r7, #16
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
	...

08000f2c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000f34:	2300      	movs	r3, #0
 8000f36:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d101      	bne.n	8000f46 <HAL_ADC_Start+0x1a>
 8000f42:	2302      	movs	r3, #2
 8000f44:	e0b2      	b.n	80010ac <HAL_ADC_Start+0x180>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2201      	movs	r2, #1
 8000f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	f003 0301 	and.w	r3, r3, #1
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d018      	beq.n	8000f8e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	689a      	ldr	r2, [r3, #8]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f042 0201 	orr.w	r2, r2, #1
 8000f6a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f6c:	4b52      	ldr	r3, [pc, #328]	; (80010b8 <HAL_ADC_Start+0x18c>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a52      	ldr	r2, [pc, #328]	; (80010bc <HAL_ADC_Start+0x190>)
 8000f72:	fba2 2303 	umull	r2, r3, r2, r3
 8000f76:	0c9a      	lsrs	r2, r3, #18
 8000f78:	4613      	mov	r3, r2
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	4413      	add	r3, r2
 8000f7e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000f80:	e002      	b.n	8000f88 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	3b01      	subs	r3, #1
 8000f86:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d1f9      	bne.n	8000f82 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	f003 0301 	and.w	r3, r3, #1
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d17a      	bne.n	8001092 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000fa4:	f023 0301 	bic.w	r3, r3, #1
 8000fa8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d007      	beq.n	8000fce <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000fc6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000fda:	d106      	bne.n	8000fea <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe0:	f023 0206 	bic.w	r2, r3, #6
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	645a      	str	r2, [r3, #68]	; 0x44
 8000fe8:	e002      	b.n	8000ff0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2200      	movs	r2, #0
 8000fee:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000ff8:	4b31      	ldr	r3, [pc, #196]	; (80010c0 <HAL_ADC_Start+0x194>)
 8000ffa:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001004:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f003 031f 	and.w	r3, r3, #31
 800100e:	2b00      	cmp	r3, #0
 8001010:	d12a      	bne.n	8001068 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a2b      	ldr	r2, [pc, #172]	; (80010c4 <HAL_ADC_Start+0x198>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d015      	beq.n	8001048 <HAL_ADC_Start+0x11c>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a29      	ldr	r2, [pc, #164]	; (80010c8 <HAL_ADC_Start+0x19c>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d105      	bne.n	8001032 <HAL_ADC_Start+0x106>
 8001026:	4b26      	ldr	r3, [pc, #152]	; (80010c0 <HAL_ADC_Start+0x194>)
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f003 031f 	and.w	r3, r3, #31
 800102e:	2b00      	cmp	r3, #0
 8001030:	d00a      	beq.n	8001048 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a25      	ldr	r2, [pc, #148]	; (80010cc <HAL_ADC_Start+0x1a0>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d136      	bne.n	80010aa <HAL_ADC_Start+0x17e>
 800103c:	4b20      	ldr	r3, [pc, #128]	; (80010c0 <HAL_ADC_Start+0x194>)
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f003 0310 	and.w	r3, r3, #16
 8001044:	2b00      	cmp	r3, #0
 8001046:	d130      	bne.n	80010aa <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001052:	2b00      	cmp	r3, #0
 8001054:	d129      	bne.n	80010aa <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	689a      	ldr	r2, [r3, #8]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001064:	609a      	str	r2, [r3, #8]
 8001066:	e020      	b.n	80010aa <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a15      	ldr	r2, [pc, #84]	; (80010c4 <HAL_ADC_Start+0x198>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d11b      	bne.n	80010aa <HAL_ADC_Start+0x17e>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800107c:	2b00      	cmp	r3, #0
 800107e:	d114      	bne.n	80010aa <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	689a      	ldr	r2, [r3, #8]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	e00b      	b.n	80010aa <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001096:	f043 0210 	orr.w	r2, r3, #16
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a2:	f043 0201 	orr.w	r2, r3, #1
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80010aa:	2300      	movs	r3, #0
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3714      	adds	r7, #20
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	20000000 	.word	0x20000000
 80010bc:	431bde83 	.word	0x431bde83
 80010c0:	40012300 	.word	0x40012300
 80010c4:	40012000 	.word	0x40012000
 80010c8:	40012100 	.word	0x40012100
 80010cc:	40012200 	.word	0x40012200

080010d0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010ec:	d113      	bne.n	8001116 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80010f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80010fc:	d10b      	bne.n	8001116 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001102:	f043 0220 	orr.w	r2, r3, #32
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2200      	movs	r2, #0
 800110e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e063      	b.n	80011de <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001116:	f7ff fe95 	bl	8000e44 <HAL_GetTick>
 800111a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800111c:	e021      	b.n	8001162 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001124:	d01d      	beq.n	8001162 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d007      	beq.n	800113c <HAL_ADC_PollForConversion+0x6c>
 800112c:	f7ff fe8a 	bl	8000e44 <HAL_GetTick>
 8001130:	4602      	mov	r2, r0
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	683a      	ldr	r2, [r7, #0]
 8001138:	429a      	cmp	r2, r3
 800113a:	d212      	bcs.n	8001162 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 0302 	and.w	r3, r3, #2
 8001146:	2b02      	cmp	r3, #2
 8001148:	d00b      	beq.n	8001162 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114e:	f043 0204 	orr.w	r2, r3, #4
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2200      	movs	r2, #0
 800115a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800115e:	2303      	movs	r3, #3
 8001160:	e03d      	b.n	80011de <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f003 0302 	and.w	r3, r3, #2
 800116c:	2b02      	cmp	r3, #2
 800116e:	d1d6      	bne.n	800111e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f06f 0212 	mvn.w	r2, #18
 8001178:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001190:	2b00      	cmp	r3, #0
 8001192:	d123      	bne.n	80011dc <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001198:	2b00      	cmp	r3, #0
 800119a:	d11f      	bne.n	80011dc <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011a2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d006      	beq.n	80011b8 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d111      	bne.n	80011dc <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d105      	bne.n	80011dc <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d4:	f043 0201 	orr.w	r2, r3, #1
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80011dc:	2300      	movs	r3, #0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3710      	adds	r7, #16
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80011e6:	b480      	push	{r7}
 80011e8:	b083      	sub	sp, #12
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800120a:	2300      	movs	r3, #0
 800120c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001214:	2b01      	cmp	r3, #1
 8001216:	d101      	bne.n	800121c <HAL_ADC_ConfigChannel+0x1c>
 8001218:	2302      	movs	r3, #2
 800121a:	e113      	b.n	8001444 <HAL_ADC_ConfigChannel+0x244>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2201      	movs	r2, #1
 8001220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2b09      	cmp	r3, #9
 800122a:	d925      	bls.n	8001278 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	68d9      	ldr	r1, [r3, #12]
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	b29b      	uxth	r3, r3
 8001238:	461a      	mov	r2, r3
 800123a:	4613      	mov	r3, r2
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	4413      	add	r3, r2
 8001240:	3b1e      	subs	r3, #30
 8001242:	2207      	movs	r2, #7
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	43da      	mvns	r2, r3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	400a      	ands	r2, r1
 8001250:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	68d9      	ldr	r1, [r3, #12]
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	689a      	ldr	r2, [r3, #8]
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	b29b      	uxth	r3, r3
 8001262:	4618      	mov	r0, r3
 8001264:	4603      	mov	r3, r0
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	4403      	add	r3, r0
 800126a:	3b1e      	subs	r3, #30
 800126c:	409a      	lsls	r2, r3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	430a      	orrs	r2, r1
 8001274:	60da      	str	r2, [r3, #12]
 8001276:	e022      	b.n	80012be <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	6919      	ldr	r1, [r3, #16]
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	b29b      	uxth	r3, r3
 8001284:	461a      	mov	r2, r3
 8001286:	4613      	mov	r3, r2
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	4413      	add	r3, r2
 800128c:	2207      	movs	r2, #7
 800128e:	fa02 f303 	lsl.w	r3, r2, r3
 8001292:	43da      	mvns	r2, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	400a      	ands	r2, r1
 800129a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	6919      	ldr	r1, [r3, #16]
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	689a      	ldr	r2, [r3, #8]
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	4618      	mov	r0, r3
 80012ae:	4603      	mov	r3, r0
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	4403      	add	r3, r0
 80012b4:	409a      	lsls	r2, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	430a      	orrs	r2, r1
 80012bc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	2b06      	cmp	r3, #6
 80012c4:	d824      	bhi.n	8001310 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685a      	ldr	r2, [r3, #4]
 80012d0:	4613      	mov	r3, r2
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	4413      	add	r3, r2
 80012d6:	3b05      	subs	r3, #5
 80012d8:	221f      	movs	r2, #31
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	43da      	mvns	r2, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	400a      	ands	r2, r1
 80012e6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	b29b      	uxth	r3, r3
 80012f4:	4618      	mov	r0, r3
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685a      	ldr	r2, [r3, #4]
 80012fa:	4613      	mov	r3, r2
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	4413      	add	r3, r2
 8001300:	3b05      	subs	r3, #5
 8001302:	fa00 f203 	lsl.w	r2, r0, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	430a      	orrs	r2, r1
 800130c:	635a      	str	r2, [r3, #52]	; 0x34
 800130e:	e04c      	b.n	80013aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	2b0c      	cmp	r3, #12
 8001316:	d824      	bhi.n	8001362 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685a      	ldr	r2, [r3, #4]
 8001322:	4613      	mov	r3, r2
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	4413      	add	r3, r2
 8001328:	3b23      	subs	r3, #35	; 0x23
 800132a:	221f      	movs	r2, #31
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	43da      	mvns	r2, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	400a      	ands	r2, r1
 8001338:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	b29b      	uxth	r3, r3
 8001346:	4618      	mov	r0, r3
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685a      	ldr	r2, [r3, #4]
 800134c:	4613      	mov	r3, r2
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	4413      	add	r3, r2
 8001352:	3b23      	subs	r3, #35	; 0x23
 8001354:	fa00 f203 	lsl.w	r2, r0, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	430a      	orrs	r2, r1
 800135e:	631a      	str	r2, [r3, #48]	; 0x30
 8001360:	e023      	b.n	80013aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685a      	ldr	r2, [r3, #4]
 800136c:	4613      	mov	r3, r2
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	4413      	add	r3, r2
 8001372:	3b41      	subs	r3, #65	; 0x41
 8001374:	221f      	movs	r2, #31
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	43da      	mvns	r2, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	400a      	ands	r2, r1
 8001382:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	b29b      	uxth	r3, r3
 8001390:	4618      	mov	r0, r3
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685a      	ldr	r2, [r3, #4]
 8001396:	4613      	mov	r3, r2
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	4413      	add	r3, r2
 800139c:	3b41      	subs	r3, #65	; 0x41
 800139e:	fa00 f203 	lsl.w	r2, r0, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	430a      	orrs	r2, r1
 80013a8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013aa:	4b29      	ldr	r3, [pc, #164]	; (8001450 <HAL_ADC_ConfigChannel+0x250>)
 80013ac:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a28      	ldr	r2, [pc, #160]	; (8001454 <HAL_ADC_ConfigChannel+0x254>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d10f      	bne.n	80013d8 <HAL_ADC_ConfigChannel+0x1d8>
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2b12      	cmp	r3, #18
 80013be:	d10b      	bne.n	80013d8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a1d      	ldr	r2, [pc, #116]	; (8001454 <HAL_ADC_ConfigChannel+0x254>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d12b      	bne.n	800143a <HAL_ADC_ConfigChannel+0x23a>
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a1c      	ldr	r2, [pc, #112]	; (8001458 <HAL_ADC_ConfigChannel+0x258>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d003      	beq.n	80013f4 <HAL_ADC_ConfigChannel+0x1f4>
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2b11      	cmp	r3, #17
 80013f2:	d122      	bne.n	800143a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a11      	ldr	r2, [pc, #68]	; (8001458 <HAL_ADC_ConfigChannel+0x258>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d111      	bne.n	800143a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001416:	4b11      	ldr	r3, [pc, #68]	; (800145c <HAL_ADC_ConfigChannel+0x25c>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a11      	ldr	r2, [pc, #68]	; (8001460 <HAL_ADC_ConfigChannel+0x260>)
 800141c:	fba2 2303 	umull	r2, r3, r2, r3
 8001420:	0c9a      	lsrs	r2, r3, #18
 8001422:	4613      	mov	r3, r2
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	4413      	add	r3, r2
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800142c:	e002      	b.n	8001434 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	3b01      	subs	r3, #1
 8001432:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d1f9      	bne.n	800142e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2200      	movs	r2, #0
 800143e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001442:	2300      	movs	r3, #0
}
 8001444:	4618      	mov	r0, r3
 8001446:	3714      	adds	r7, #20
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	40012300 	.word	0x40012300
 8001454:	40012000 	.word	0x40012000
 8001458:	10000012 	.word	0x10000012
 800145c:	20000000 	.word	0x20000000
 8001460:	431bde83 	.word	0x431bde83

08001464 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001464:	b480      	push	{r7}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800146c:	4b79      	ldr	r3, [pc, #484]	; (8001654 <ADC_Init+0x1f0>)
 800146e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	685a      	ldr	r2, [r3, #4]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	431a      	orrs	r2, r3
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	685a      	ldr	r2, [r3, #4]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001498:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	6859      	ldr	r1, [r3, #4]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	691b      	ldr	r3, [r3, #16]
 80014a4:	021a      	lsls	r2, r3, #8
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	430a      	orrs	r2, r1
 80014ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	685a      	ldr	r2, [r3, #4]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80014bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	6859      	ldr	r1, [r3, #4]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	689a      	ldr	r2, [r3, #8]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	430a      	orrs	r2, r1
 80014ce:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	689a      	ldr	r2, [r3, #8]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	6899      	ldr	r1, [r3, #8]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	68da      	ldr	r2, [r3, #12]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	430a      	orrs	r2, r1
 80014f0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f6:	4a58      	ldr	r2, [pc, #352]	; (8001658 <ADC_Init+0x1f4>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d022      	beq.n	8001542 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	689a      	ldr	r2, [r3, #8]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800150a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	6899      	ldr	r1, [r3, #8]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	430a      	orrs	r2, r1
 800151c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	689a      	ldr	r2, [r3, #8]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800152c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	6899      	ldr	r1, [r3, #8]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	430a      	orrs	r2, r1
 800153e:	609a      	str	r2, [r3, #8]
 8001540:	e00f      	b.n	8001562 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	689a      	ldr	r2, [r3, #8]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001550:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	689a      	ldr	r2, [r3, #8]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001560:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	689a      	ldr	r2, [r3, #8]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f022 0202 	bic.w	r2, r2, #2
 8001570:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	6899      	ldr	r1, [r3, #8]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	7e1b      	ldrb	r3, [r3, #24]
 800157c:	005a      	lsls	r2, r3, #1
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	430a      	orrs	r2, r1
 8001584:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f893 3020 	ldrb.w	r3, [r3, #32]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d01b      	beq.n	80015c8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	685a      	ldr	r2, [r3, #4]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800159e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	685a      	ldr	r2, [r3, #4]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80015ae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	6859      	ldr	r1, [r3, #4]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ba:	3b01      	subs	r3, #1
 80015bc:	035a      	lsls	r2, r3, #13
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	430a      	orrs	r2, r1
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	e007      	b.n	80015d8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	685a      	ldr	r2, [r3, #4]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015d6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80015e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	69db      	ldr	r3, [r3, #28]
 80015f2:	3b01      	subs	r3, #1
 80015f4:	051a      	lsls	r2, r3, #20
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	430a      	orrs	r2, r1
 80015fc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	689a      	ldr	r2, [r3, #8]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800160c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	6899      	ldr	r1, [r3, #8]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800161a:	025a      	lsls	r2, r3, #9
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	430a      	orrs	r2, r1
 8001622:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	689a      	ldr	r2, [r3, #8]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001632:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	6899      	ldr	r1, [r3, #8]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	695b      	ldr	r3, [r3, #20]
 800163e:	029a      	lsls	r2, r3, #10
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	430a      	orrs	r2, r1
 8001646:	609a      	str	r2, [r3, #8]
}
 8001648:	bf00      	nop
 800164a:	3714      	adds	r7, #20
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr
 8001654:	40012300 	.word	0x40012300
 8001658:	0f000001 	.word	0x0f000001

0800165c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800165c:	b480      	push	{r7}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f003 0307 	and.w	r3, r3, #7
 800166a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800166c:	4b0c      	ldr	r3, [pc, #48]	; (80016a0 <__NVIC_SetPriorityGrouping+0x44>)
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001672:	68ba      	ldr	r2, [r7, #8]
 8001674:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001678:	4013      	ands	r3, r2
 800167a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001684:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001688:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800168c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800168e:	4a04      	ldr	r2, [pc, #16]	; (80016a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	60d3      	str	r3, [r2, #12]
}
 8001694:	bf00      	nop
 8001696:	3714      	adds	r7, #20
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr
 80016a0:	e000ed00 	.word	0xe000ed00

080016a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016a8:	4b04      	ldr	r3, [pc, #16]	; (80016bc <__NVIC_GetPriorityGrouping+0x18>)
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	0a1b      	lsrs	r3, r3, #8
 80016ae:	f003 0307 	and.w	r3, r3, #7
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	e000ed00 	.word	0xe000ed00

080016c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	6039      	str	r1, [r7, #0]
 80016ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	db0a      	blt.n	80016ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	b2da      	uxtb	r2, r3
 80016d8:	490c      	ldr	r1, [pc, #48]	; (800170c <__NVIC_SetPriority+0x4c>)
 80016da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016de:	0112      	lsls	r2, r2, #4
 80016e0:	b2d2      	uxtb	r2, r2
 80016e2:	440b      	add	r3, r1
 80016e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016e8:	e00a      	b.n	8001700 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	b2da      	uxtb	r2, r3
 80016ee:	4908      	ldr	r1, [pc, #32]	; (8001710 <__NVIC_SetPriority+0x50>)
 80016f0:	79fb      	ldrb	r3, [r7, #7]
 80016f2:	f003 030f 	and.w	r3, r3, #15
 80016f6:	3b04      	subs	r3, #4
 80016f8:	0112      	lsls	r2, r2, #4
 80016fa:	b2d2      	uxtb	r2, r2
 80016fc:	440b      	add	r3, r1
 80016fe:	761a      	strb	r2, [r3, #24]
}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	e000e100 	.word	0xe000e100
 8001710:	e000ed00 	.word	0xe000ed00

08001714 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001714:	b480      	push	{r7}
 8001716:	b089      	sub	sp, #36	; 0x24
 8001718:	af00      	add	r7, sp, #0
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	60b9      	str	r1, [r7, #8]
 800171e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f003 0307 	and.w	r3, r3, #7
 8001726:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	f1c3 0307 	rsb	r3, r3, #7
 800172e:	2b04      	cmp	r3, #4
 8001730:	bf28      	it	cs
 8001732:	2304      	movcs	r3, #4
 8001734:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	3304      	adds	r3, #4
 800173a:	2b06      	cmp	r3, #6
 800173c:	d902      	bls.n	8001744 <NVIC_EncodePriority+0x30>
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	3b03      	subs	r3, #3
 8001742:	e000      	b.n	8001746 <NVIC_EncodePriority+0x32>
 8001744:	2300      	movs	r3, #0
 8001746:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001748:	f04f 32ff 	mov.w	r2, #4294967295
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	fa02 f303 	lsl.w	r3, r2, r3
 8001752:	43da      	mvns	r2, r3
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	401a      	ands	r2, r3
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800175c:	f04f 31ff 	mov.w	r1, #4294967295
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	fa01 f303 	lsl.w	r3, r1, r3
 8001766:	43d9      	mvns	r1, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800176c:	4313      	orrs	r3, r2
         );
}
 800176e:	4618      	mov	r0, r3
 8001770:	3724      	adds	r7, #36	; 0x24
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
	...

0800177c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	3b01      	subs	r3, #1
 8001788:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800178c:	d301      	bcc.n	8001792 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800178e:	2301      	movs	r3, #1
 8001790:	e00f      	b.n	80017b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001792:	4a0a      	ldr	r2, [pc, #40]	; (80017bc <SysTick_Config+0x40>)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	3b01      	subs	r3, #1
 8001798:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800179a:	210f      	movs	r1, #15
 800179c:	f04f 30ff 	mov.w	r0, #4294967295
 80017a0:	f7ff ff8e 	bl	80016c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017a4:	4b05      	ldr	r3, [pc, #20]	; (80017bc <SysTick_Config+0x40>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017aa:	4b04      	ldr	r3, [pc, #16]	; (80017bc <SysTick_Config+0x40>)
 80017ac:	2207      	movs	r2, #7
 80017ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	e000e010 	.word	0xe000e010

080017c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f7ff ff47 	bl	800165c <__NVIC_SetPriorityGrouping>
}
 80017ce:	bf00      	nop
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b086      	sub	sp, #24
 80017da:	af00      	add	r7, sp, #0
 80017dc:	4603      	mov	r3, r0
 80017de:	60b9      	str	r1, [r7, #8]
 80017e0:	607a      	str	r2, [r7, #4]
 80017e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017e4:	2300      	movs	r3, #0
 80017e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017e8:	f7ff ff5c 	bl	80016a4 <__NVIC_GetPriorityGrouping>
 80017ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	68b9      	ldr	r1, [r7, #8]
 80017f2:	6978      	ldr	r0, [r7, #20]
 80017f4:	f7ff ff8e 	bl	8001714 <NVIC_EncodePriority>
 80017f8:	4602      	mov	r2, r0
 80017fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017fe:	4611      	mov	r1, r2
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff ff5d 	bl	80016c0 <__NVIC_SetPriority>
}
 8001806:	bf00      	nop
 8001808:	3718      	adds	r7, #24
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	b082      	sub	sp, #8
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f7ff ffb0 	bl	800177c <SysTick_Config>
 800181c:	4603      	mov	r3, r0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
	...

08001828 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001828:	b480      	push	{r7}
 800182a:	b089      	sub	sp, #36	; 0x24
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001832:	2300      	movs	r3, #0
 8001834:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001836:	2300      	movs	r3, #0
 8001838:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800183a:	2300      	movs	r3, #0
 800183c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800183e:	2300      	movs	r3, #0
 8001840:	61fb      	str	r3, [r7, #28]
 8001842:	e177      	b.n	8001b34 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001844:	2201      	movs	r2, #1
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	697a      	ldr	r2, [r7, #20]
 8001854:	4013      	ands	r3, r2
 8001856:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001858:	693a      	ldr	r2, [r7, #16]
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	429a      	cmp	r2, r3
 800185e:	f040 8166 	bne.w	8001b2e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f003 0303 	and.w	r3, r3, #3
 800186a:	2b01      	cmp	r3, #1
 800186c:	d005      	beq.n	800187a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001876:	2b02      	cmp	r3, #2
 8001878:	d130      	bne.n	80018dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	2203      	movs	r2, #3
 8001886:	fa02 f303 	lsl.w	r3, r2, r3
 800188a:	43db      	mvns	r3, r3
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	4013      	ands	r3, r2
 8001890:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	68da      	ldr	r2, [r3, #12]
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	69ba      	ldr	r2, [r7, #24]
 80018a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018b0:	2201      	movs	r2, #1
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	43db      	mvns	r3, r3
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	4013      	ands	r3, r2
 80018be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	091b      	lsrs	r3, r3, #4
 80018c6:	f003 0201 	and.w	r2, r3, #1
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f003 0303 	and.w	r3, r3, #3
 80018e4:	2b03      	cmp	r3, #3
 80018e6:	d017      	beq.n	8001918 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	2203      	movs	r2, #3
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	43db      	mvns	r3, r3
 80018fa:	69ba      	ldr	r2, [r7, #24]
 80018fc:	4013      	ands	r3, r2
 80018fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	689a      	ldr	r2, [r3, #8]
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	4313      	orrs	r3, r2
 8001910:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f003 0303 	and.w	r3, r3, #3
 8001920:	2b02      	cmp	r3, #2
 8001922:	d123      	bne.n	800196c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	08da      	lsrs	r2, r3, #3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	3208      	adds	r2, #8
 800192c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001930:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	f003 0307 	and.w	r3, r3, #7
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	220f      	movs	r2, #15
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	43db      	mvns	r3, r3
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	4013      	ands	r3, r2
 8001946:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	691a      	ldr	r2, [r3, #16]
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	f003 0307 	and.w	r3, r3, #7
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	4313      	orrs	r3, r2
 800195c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	08da      	lsrs	r2, r3, #3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	3208      	adds	r2, #8
 8001966:	69b9      	ldr	r1, [r7, #24]
 8001968:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	2203      	movs	r2, #3
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	43db      	mvns	r3, r3
 800197e:	69ba      	ldr	r2, [r7, #24]
 8001980:	4013      	ands	r3, r2
 8001982:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f003 0203 	and.w	r2, r3, #3
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	4313      	orrs	r3, r2
 8001998:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	f000 80c0 	beq.w	8001b2e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	60fb      	str	r3, [r7, #12]
 80019b2:	4b66      	ldr	r3, [pc, #408]	; (8001b4c <HAL_GPIO_Init+0x324>)
 80019b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b6:	4a65      	ldr	r2, [pc, #404]	; (8001b4c <HAL_GPIO_Init+0x324>)
 80019b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019bc:	6453      	str	r3, [r2, #68]	; 0x44
 80019be:	4b63      	ldr	r3, [pc, #396]	; (8001b4c <HAL_GPIO_Init+0x324>)
 80019c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019c6:	60fb      	str	r3, [r7, #12]
 80019c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019ca:	4a61      	ldr	r2, [pc, #388]	; (8001b50 <HAL_GPIO_Init+0x328>)
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	089b      	lsrs	r3, r3, #2
 80019d0:	3302      	adds	r3, #2
 80019d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	f003 0303 	and.w	r3, r3, #3
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	220f      	movs	r2, #15
 80019e2:	fa02 f303 	lsl.w	r3, r2, r3
 80019e6:	43db      	mvns	r3, r3
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	4013      	ands	r3, r2
 80019ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a58      	ldr	r2, [pc, #352]	; (8001b54 <HAL_GPIO_Init+0x32c>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d037      	beq.n	8001a66 <HAL_GPIO_Init+0x23e>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a57      	ldr	r2, [pc, #348]	; (8001b58 <HAL_GPIO_Init+0x330>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d031      	beq.n	8001a62 <HAL_GPIO_Init+0x23a>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a56      	ldr	r2, [pc, #344]	; (8001b5c <HAL_GPIO_Init+0x334>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d02b      	beq.n	8001a5e <HAL_GPIO_Init+0x236>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a55      	ldr	r2, [pc, #340]	; (8001b60 <HAL_GPIO_Init+0x338>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d025      	beq.n	8001a5a <HAL_GPIO_Init+0x232>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a54      	ldr	r2, [pc, #336]	; (8001b64 <HAL_GPIO_Init+0x33c>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d01f      	beq.n	8001a56 <HAL_GPIO_Init+0x22e>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a53      	ldr	r2, [pc, #332]	; (8001b68 <HAL_GPIO_Init+0x340>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d019      	beq.n	8001a52 <HAL_GPIO_Init+0x22a>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a52      	ldr	r2, [pc, #328]	; (8001b6c <HAL_GPIO_Init+0x344>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d013      	beq.n	8001a4e <HAL_GPIO_Init+0x226>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a51      	ldr	r2, [pc, #324]	; (8001b70 <HAL_GPIO_Init+0x348>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d00d      	beq.n	8001a4a <HAL_GPIO_Init+0x222>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a50      	ldr	r2, [pc, #320]	; (8001b74 <HAL_GPIO_Init+0x34c>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d007      	beq.n	8001a46 <HAL_GPIO_Init+0x21e>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a4f      	ldr	r2, [pc, #316]	; (8001b78 <HAL_GPIO_Init+0x350>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d101      	bne.n	8001a42 <HAL_GPIO_Init+0x21a>
 8001a3e:	2309      	movs	r3, #9
 8001a40:	e012      	b.n	8001a68 <HAL_GPIO_Init+0x240>
 8001a42:	230a      	movs	r3, #10
 8001a44:	e010      	b.n	8001a68 <HAL_GPIO_Init+0x240>
 8001a46:	2308      	movs	r3, #8
 8001a48:	e00e      	b.n	8001a68 <HAL_GPIO_Init+0x240>
 8001a4a:	2307      	movs	r3, #7
 8001a4c:	e00c      	b.n	8001a68 <HAL_GPIO_Init+0x240>
 8001a4e:	2306      	movs	r3, #6
 8001a50:	e00a      	b.n	8001a68 <HAL_GPIO_Init+0x240>
 8001a52:	2305      	movs	r3, #5
 8001a54:	e008      	b.n	8001a68 <HAL_GPIO_Init+0x240>
 8001a56:	2304      	movs	r3, #4
 8001a58:	e006      	b.n	8001a68 <HAL_GPIO_Init+0x240>
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e004      	b.n	8001a68 <HAL_GPIO_Init+0x240>
 8001a5e:	2302      	movs	r3, #2
 8001a60:	e002      	b.n	8001a68 <HAL_GPIO_Init+0x240>
 8001a62:	2301      	movs	r3, #1
 8001a64:	e000      	b.n	8001a68 <HAL_GPIO_Init+0x240>
 8001a66:	2300      	movs	r3, #0
 8001a68:	69fa      	ldr	r2, [r7, #28]
 8001a6a:	f002 0203 	and.w	r2, r2, #3
 8001a6e:	0092      	lsls	r2, r2, #2
 8001a70:	4093      	lsls	r3, r2
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a78:	4935      	ldr	r1, [pc, #212]	; (8001b50 <HAL_GPIO_Init+0x328>)
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	089b      	lsrs	r3, r3, #2
 8001a7e:	3302      	adds	r3, #2
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a86:	4b3d      	ldr	r3, [pc, #244]	; (8001b7c <HAL_GPIO_Init+0x354>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	43db      	mvns	r3, r3
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	4013      	ands	r3, r2
 8001a94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d003      	beq.n	8001aaa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001aaa:	4a34      	ldr	r2, [pc, #208]	; (8001b7c <HAL_GPIO_Init+0x354>)
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ab0:	4b32      	ldr	r3, [pc, #200]	; (8001b7c <HAL_GPIO_Init+0x354>)
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	4013      	ands	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d003      	beq.n	8001ad4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ad4:	4a29      	ldr	r2, [pc, #164]	; (8001b7c <HAL_GPIO_Init+0x354>)
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ada:	4b28      	ldr	r3, [pc, #160]	; (8001b7c <HAL_GPIO_Init+0x354>)
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d003      	beq.n	8001afe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001afe:	4a1f      	ldr	r2, [pc, #124]	; (8001b7c <HAL_GPIO_Init+0x354>)
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b04:	4b1d      	ldr	r3, [pc, #116]	; (8001b7c <HAL_GPIO_Init+0x354>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	4013      	ands	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d003      	beq.n	8001b28 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b28:	4a14      	ldr	r2, [pc, #80]	; (8001b7c <HAL_GPIO_Init+0x354>)
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	3301      	adds	r3, #1
 8001b32:	61fb      	str	r3, [r7, #28]
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	2b0f      	cmp	r3, #15
 8001b38:	f67f ae84 	bls.w	8001844 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b3c:	bf00      	nop
 8001b3e:	bf00      	nop
 8001b40:	3724      	adds	r7, #36	; 0x24
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	40023800 	.word	0x40023800
 8001b50:	40013800 	.word	0x40013800
 8001b54:	40020000 	.word	0x40020000
 8001b58:	40020400 	.word	0x40020400
 8001b5c:	40020800 	.word	0x40020800
 8001b60:	40020c00 	.word	0x40020c00
 8001b64:	40021000 	.word	0x40021000
 8001b68:	40021400 	.word	0x40021400
 8001b6c:	40021800 	.word	0x40021800
 8001b70:	40021c00 	.word	0x40021c00
 8001b74:	40022000 	.word	0x40022000
 8001b78:	40022400 	.word	0x40022400
 8001b7c:	40013c00 	.word	0x40013c00

08001b80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	460b      	mov	r3, r1
 8001b8a:	807b      	strh	r3, [r7, #2]
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b90:	787b      	ldrb	r3, [r7, #1]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d003      	beq.n	8001b9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b96:	887a      	ldrh	r2, [r7, #2]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b9c:	e003      	b.n	8001ba6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b9e:	887b      	ldrh	r3, [r7, #2]
 8001ba0:	041a      	lsls	r2, r3, #16
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	619a      	str	r2, [r3, #24]
}
 8001ba6:	bf00      	nop
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
	...

08001bb4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	603b      	str	r3, [r7, #0]
 8001bc2:	4b20      	ldr	r3, [pc, #128]	; (8001c44 <HAL_PWREx_EnableOverDrive+0x90>)
 8001bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc6:	4a1f      	ldr	r2, [pc, #124]	; (8001c44 <HAL_PWREx_EnableOverDrive+0x90>)
 8001bc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bcc:	6413      	str	r3, [r2, #64]	; 0x40
 8001bce:	4b1d      	ldr	r3, [pc, #116]	; (8001c44 <HAL_PWREx_EnableOverDrive+0x90>)
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd6:	603b      	str	r3, [r7, #0]
 8001bd8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001bda:	4b1b      	ldr	r3, [pc, #108]	; (8001c48 <HAL_PWREx_EnableOverDrive+0x94>)
 8001bdc:	2201      	movs	r2, #1
 8001bde:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001be0:	f7ff f930 	bl	8000e44 <HAL_GetTick>
 8001be4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001be6:	e009      	b.n	8001bfc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001be8:	f7ff f92c 	bl	8000e44 <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001bf6:	d901      	bls.n	8001bfc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e01f      	b.n	8001c3c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001bfc:	4b13      	ldr	r3, [pc, #76]	; (8001c4c <HAL_PWREx_EnableOverDrive+0x98>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c08:	d1ee      	bne.n	8001be8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001c0a:	4b11      	ldr	r3, [pc, #68]	; (8001c50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c10:	f7ff f918 	bl	8000e44 <HAL_GetTick>
 8001c14:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001c16:	e009      	b.n	8001c2c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001c18:	f7ff f914 	bl	8000e44 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c26:	d901      	bls.n	8001c2c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e007      	b.n	8001c3c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001c2c:	4b07      	ldr	r3, [pc, #28]	; (8001c4c <HAL_PWREx_EnableOverDrive+0x98>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001c38:	d1ee      	bne.n	8001c18 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001c3a:	2300      	movs	r3, #0
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3708      	adds	r7, #8
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	40023800 	.word	0x40023800
 8001c48:	420e0040 	.word	0x420e0040
 8001c4c:	40007000 	.word	0x40007000
 8001c50:	420e0044 	.word	0x420e0044

08001c54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b086      	sub	sp, #24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d101      	bne.n	8001c66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e267      	b.n	8002136 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d075      	beq.n	8001d5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c72:	4b88      	ldr	r3, [pc, #544]	; (8001e94 <HAL_RCC_OscConfig+0x240>)
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f003 030c 	and.w	r3, r3, #12
 8001c7a:	2b04      	cmp	r3, #4
 8001c7c:	d00c      	beq.n	8001c98 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c7e:	4b85      	ldr	r3, [pc, #532]	; (8001e94 <HAL_RCC_OscConfig+0x240>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c86:	2b08      	cmp	r3, #8
 8001c88:	d112      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c8a:	4b82      	ldr	r3, [pc, #520]	; (8001e94 <HAL_RCC_OscConfig+0x240>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c96:	d10b      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c98:	4b7e      	ldr	r3, [pc, #504]	; (8001e94 <HAL_RCC_OscConfig+0x240>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d05b      	beq.n	8001d5c <HAL_RCC_OscConfig+0x108>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d157      	bne.n	8001d5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e242      	b.n	8002136 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cb8:	d106      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x74>
 8001cba:	4b76      	ldr	r3, [pc, #472]	; (8001e94 <HAL_RCC_OscConfig+0x240>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a75      	ldr	r2, [pc, #468]	; (8001e94 <HAL_RCC_OscConfig+0x240>)
 8001cc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cc4:	6013      	str	r3, [r2, #0]
 8001cc6:	e01d      	b.n	8001d04 <HAL_RCC_OscConfig+0xb0>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cd0:	d10c      	bne.n	8001cec <HAL_RCC_OscConfig+0x98>
 8001cd2:	4b70      	ldr	r3, [pc, #448]	; (8001e94 <HAL_RCC_OscConfig+0x240>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a6f      	ldr	r2, [pc, #444]	; (8001e94 <HAL_RCC_OscConfig+0x240>)
 8001cd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cdc:	6013      	str	r3, [r2, #0]
 8001cde:	4b6d      	ldr	r3, [pc, #436]	; (8001e94 <HAL_RCC_OscConfig+0x240>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a6c      	ldr	r2, [pc, #432]	; (8001e94 <HAL_RCC_OscConfig+0x240>)
 8001ce4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ce8:	6013      	str	r3, [r2, #0]
 8001cea:	e00b      	b.n	8001d04 <HAL_RCC_OscConfig+0xb0>
 8001cec:	4b69      	ldr	r3, [pc, #420]	; (8001e94 <HAL_RCC_OscConfig+0x240>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a68      	ldr	r2, [pc, #416]	; (8001e94 <HAL_RCC_OscConfig+0x240>)
 8001cf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cf6:	6013      	str	r3, [r2, #0]
 8001cf8:	4b66      	ldr	r3, [pc, #408]	; (8001e94 <HAL_RCC_OscConfig+0x240>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a65      	ldr	r2, [pc, #404]	; (8001e94 <HAL_RCC_OscConfig+0x240>)
 8001cfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d013      	beq.n	8001d34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d0c:	f7ff f89a 	bl	8000e44 <HAL_GetTick>
 8001d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d12:	e008      	b.n	8001d26 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d14:	f7ff f896 	bl	8000e44 <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b64      	cmp	r3, #100	; 0x64
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e207      	b.n	8002136 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d26:	4b5b      	ldr	r3, [pc, #364]	; (8001e94 <HAL_RCC_OscConfig+0x240>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d0f0      	beq.n	8001d14 <HAL_RCC_OscConfig+0xc0>
 8001d32:	e014      	b.n	8001d5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d34:	f7ff f886 	bl	8000e44 <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d3a:	e008      	b.n	8001d4e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d3c:	f7ff f882 	bl	8000e44 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b64      	cmp	r3, #100	; 0x64
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e1f3      	b.n	8002136 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d4e:	4b51      	ldr	r3, [pc, #324]	; (8001e94 <HAL_RCC_OscConfig+0x240>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d1f0      	bne.n	8001d3c <HAL_RCC_OscConfig+0xe8>
 8001d5a:	e000      	b.n	8001d5e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d063      	beq.n	8001e32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d6a:	4b4a      	ldr	r3, [pc, #296]	; (8001e94 <HAL_RCC_OscConfig+0x240>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f003 030c 	and.w	r3, r3, #12
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d00b      	beq.n	8001d8e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d76:	4b47      	ldr	r3, [pc, #284]	; (8001e94 <HAL_RCC_OscConfig+0x240>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d7e:	2b08      	cmp	r3, #8
 8001d80:	d11c      	bne.n	8001dbc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d82:	4b44      	ldr	r3, [pc, #272]	; (8001e94 <HAL_RCC_OscConfig+0x240>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d116      	bne.n	8001dbc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d8e:	4b41      	ldr	r3, [pc, #260]	; (8001e94 <HAL_RCC_OscConfig+0x240>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d005      	beq.n	8001da6 <HAL_RCC_OscConfig+0x152>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d001      	beq.n	8001da6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e1c7      	b.n	8002136 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001da6:	4b3b      	ldr	r3, [pc, #236]	; (8001e94 <HAL_RCC_OscConfig+0x240>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	00db      	lsls	r3, r3, #3
 8001db4:	4937      	ldr	r1, [pc, #220]	; (8001e94 <HAL_RCC_OscConfig+0x240>)
 8001db6:	4313      	orrs	r3, r2
 8001db8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dba:	e03a      	b.n	8001e32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d020      	beq.n	8001e06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dc4:	4b34      	ldr	r3, [pc, #208]	; (8001e98 <HAL_RCC_OscConfig+0x244>)
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dca:	f7ff f83b 	bl	8000e44 <HAL_GetTick>
 8001dce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd0:	e008      	b.n	8001de4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dd2:	f7ff f837 	bl	8000e44 <HAL_GetTick>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d901      	bls.n	8001de4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e1a8      	b.n	8002136 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001de4:	4b2b      	ldr	r3, [pc, #172]	; (8001e94 <HAL_RCC_OscConfig+0x240>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0302 	and.w	r3, r3, #2
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d0f0      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001df0:	4b28      	ldr	r3, [pc, #160]	; (8001e94 <HAL_RCC_OscConfig+0x240>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	00db      	lsls	r3, r3, #3
 8001dfe:	4925      	ldr	r1, [pc, #148]	; (8001e94 <HAL_RCC_OscConfig+0x240>)
 8001e00:	4313      	orrs	r3, r2
 8001e02:	600b      	str	r3, [r1, #0]
 8001e04:	e015      	b.n	8001e32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e06:	4b24      	ldr	r3, [pc, #144]	; (8001e98 <HAL_RCC_OscConfig+0x244>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e0c:	f7ff f81a 	bl	8000e44 <HAL_GetTick>
 8001e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e12:	e008      	b.n	8001e26 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e14:	f7ff f816 	bl	8000e44 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d901      	bls.n	8001e26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e187      	b.n	8002136 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e26:	4b1b      	ldr	r3, [pc, #108]	; (8001e94 <HAL_RCC_OscConfig+0x240>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d1f0      	bne.n	8001e14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0308 	and.w	r3, r3, #8
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d036      	beq.n	8001eac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	695b      	ldr	r3, [r3, #20]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d016      	beq.n	8001e74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e46:	4b15      	ldr	r3, [pc, #84]	; (8001e9c <HAL_RCC_OscConfig+0x248>)
 8001e48:	2201      	movs	r2, #1
 8001e4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e4c:	f7fe fffa 	bl	8000e44 <HAL_GetTick>
 8001e50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e52:	e008      	b.n	8001e66 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e54:	f7fe fff6 	bl	8000e44 <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e167      	b.n	8002136 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e66:	4b0b      	ldr	r3, [pc, #44]	; (8001e94 <HAL_RCC_OscConfig+0x240>)
 8001e68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d0f0      	beq.n	8001e54 <HAL_RCC_OscConfig+0x200>
 8001e72:	e01b      	b.n	8001eac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e74:	4b09      	ldr	r3, [pc, #36]	; (8001e9c <HAL_RCC_OscConfig+0x248>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e7a:	f7fe ffe3 	bl	8000e44 <HAL_GetTick>
 8001e7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e80:	e00e      	b.n	8001ea0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e82:	f7fe ffdf 	bl	8000e44 <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d907      	bls.n	8001ea0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e150      	b.n	8002136 <HAL_RCC_OscConfig+0x4e2>
 8001e94:	40023800 	.word	0x40023800
 8001e98:	42470000 	.word	0x42470000
 8001e9c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ea0:	4b88      	ldr	r3, [pc, #544]	; (80020c4 <HAL_RCC_OscConfig+0x470>)
 8001ea2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ea4:	f003 0302 	and.w	r3, r3, #2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d1ea      	bne.n	8001e82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0304 	and.w	r3, r3, #4
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	f000 8097 	beq.w	8001fe8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ebe:	4b81      	ldr	r3, [pc, #516]	; (80020c4 <HAL_RCC_OscConfig+0x470>)
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d10f      	bne.n	8001eea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eca:	2300      	movs	r3, #0
 8001ecc:	60bb      	str	r3, [r7, #8]
 8001ece:	4b7d      	ldr	r3, [pc, #500]	; (80020c4 <HAL_RCC_OscConfig+0x470>)
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed2:	4a7c      	ldr	r2, [pc, #496]	; (80020c4 <HAL_RCC_OscConfig+0x470>)
 8001ed4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ed8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eda:	4b7a      	ldr	r3, [pc, #488]	; (80020c4 <HAL_RCC_OscConfig+0x470>)
 8001edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee2:	60bb      	str	r3, [r7, #8]
 8001ee4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eea:	4b77      	ldr	r3, [pc, #476]	; (80020c8 <HAL_RCC_OscConfig+0x474>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d118      	bne.n	8001f28 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ef6:	4b74      	ldr	r3, [pc, #464]	; (80020c8 <HAL_RCC_OscConfig+0x474>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a73      	ldr	r2, [pc, #460]	; (80020c8 <HAL_RCC_OscConfig+0x474>)
 8001efc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f02:	f7fe ff9f 	bl	8000e44 <HAL_GetTick>
 8001f06:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f08:	e008      	b.n	8001f1c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f0a:	f7fe ff9b 	bl	8000e44 <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d901      	bls.n	8001f1c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e10c      	b.n	8002136 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f1c:	4b6a      	ldr	r3, [pc, #424]	; (80020c8 <HAL_RCC_OscConfig+0x474>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d0f0      	beq.n	8001f0a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d106      	bne.n	8001f3e <HAL_RCC_OscConfig+0x2ea>
 8001f30:	4b64      	ldr	r3, [pc, #400]	; (80020c4 <HAL_RCC_OscConfig+0x470>)
 8001f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f34:	4a63      	ldr	r2, [pc, #396]	; (80020c4 <HAL_RCC_OscConfig+0x470>)
 8001f36:	f043 0301 	orr.w	r3, r3, #1
 8001f3a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f3c:	e01c      	b.n	8001f78 <HAL_RCC_OscConfig+0x324>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	2b05      	cmp	r3, #5
 8001f44:	d10c      	bne.n	8001f60 <HAL_RCC_OscConfig+0x30c>
 8001f46:	4b5f      	ldr	r3, [pc, #380]	; (80020c4 <HAL_RCC_OscConfig+0x470>)
 8001f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f4a:	4a5e      	ldr	r2, [pc, #376]	; (80020c4 <HAL_RCC_OscConfig+0x470>)
 8001f4c:	f043 0304 	orr.w	r3, r3, #4
 8001f50:	6713      	str	r3, [r2, #112]	; 0x70
 8001f52:	4b5c      	ldr	r3, [pc, #368]	; (80020c4 <HAL_RCC_OscConfig+0x470>)
 8001f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f56:	4a5b      	ldr	r2, [pc, #364]	; (80020c4 <HAL_RCC_OscConfig+0x470>)
 8001f58:	f043 0301 	orr.w	r3, r3, #1
 8001f5c:	6713      	str	r3, [r2, #112]	; 0x70
 8001f5e:	e00b      	b.n	8001f78 <HAL_RCC_OscConfig+0x324>
 8001f60:	4b58      	ldr	r3, [pc, #352]	; (80020c4 <HAL_RCC_OscConfig+0x470>)
 8001f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f64:	4a57      	ldr	r2, [pc, #348]	; (80020c4 <HAL_RCC_OscConfig+0x470>)
 8001f66:	f023 0301 	bic.w	r3, r3, #1
 8001f6a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f6c:	4b55      	ldr	r3, [pc, #340]	; (80020c4 <HAL_RCC_OscConfig+0x470>)
 8001f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f70:	4a54      	ldr	r2, [pc, #336]	; (80020c4 <HAL_RCC_OscConfig+0x470>)
 8001f72:	f023 0304 	bic.w	r3, r3, #4
 8001f76:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d015      	beq.n	8001fac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f80:	f7fe ff60 	bl	8000e44 <HAL_GetTick>
 8001f84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f86:	e00a      	b.n	8001f9e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f88:	f7fe ff5c 	bl	8000e44 <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e0cb      	b.n	8002136 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f9e:	4b49      	ldr	r3, [pc, #292]	; (80020c4 <HAL_RCC_OscConfig+0x470>)
 8001fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d0ee      	beq.n	8001f88 <HAL_RCC_OscConfig+0x334>
 8001faa:	e014      	b.n	8001fd6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fac:	f7fe ff4a 	bl	8000e44 <HAL_GetTick>
 8001fb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fb2:	e00a      	b.n	8001fca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fb4:	f7fe ff46 	bl	8000e44 <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e0b5      	b.n	8002136 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fca:	4b3e      	ldr	r3, [pc, #248]	; (80020c4 <HAL_RCC_OscConfig+0x470>)
 8001fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d1ee      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fd6:	7dfb      	ldrb	r3, [r7, #23]
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d105      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fdc:	4b39      	ldr	r3, [pc, #228]	; (80020c4 <HAL_RCC_OscConfig+0x470>)
 8001fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe0:	4a38      	ldr	r2, [pc, #224]	; (80020c4 <HAL_RCC_OscConfig+0x470>)
 8001fe2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fe6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	f000 80a1 	beq.w	8002134 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ff2:	4b34      	ldr	r3, [pc, #208]	; (80020c4 <HAL_RCC_OscConfig+0x470>)
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f003 030c 	and.w	r3, r3, #12
 8001ffa:	2b08      	cmp	r3, #8
 8001ffc:	d05c      	beq.n	80020b8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	699b      	ldr	r3, [r3, #24]
 8002002:	2b02      	cmp	r3, #2
 8002004:	d141      	bne.n	800208a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002006:	4b31      	ldr	r3, [pc, #196]	; (80020cc <HAL_RCC_OscConfig+0x478>)
 8002008:	2200      	movs	r2, #0
 800200a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800200c:	f7fe ff1a 	bl	8000e44 <HAL_GetTick>
 8002010:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002012:	e008      	b.n	8002026 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002014:	f7fe ff16 	bl	8000e44 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b02      	cmp	r3, #2
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e087      	b.n	8002136 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002026:	4b27      	ldr	r3, [pc, #156]	; (80020c4 <HAL_RCC_OscConfig+0x470>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d1f0      	bne.n	8002014 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	69da      	ldr	r2, [r3, #28]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a1b      	ldr	r3, [r3, #32]
 800203a:	431a      	orrs	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002040:	019b      	lsls	r3, r3, #6
 8002042:	431a      	orrs	r2, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002048:	085b      	lsrs	r3, r3, #1
 800204a:	3b01      	subs	r3, #1
 800204c:	041b      	lsls	r3, r3, #16
 800204e:	431a      	orrs	r2, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002054:	061b      	lsls	r3, r3, #24
 8002056:	491b      	ldr	r1, [pc, #108]	; (80020c4 <HAL_RCC_OscConfig+0x470>)
 8002058:	4313      	orrs	r3, r2
 800205a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800205c:	4b1b      	ldr	r3, [pc, #108]	; (80020cc <HAL_RCC_OscConfig+0x478>)
 800205e:	2201      	movs	r2, #1
 8002060:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002062:	f7fe feef 	bl	8000e44 <HAL_GetTick>
 8002066:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002068:	e008      	b.n	800207c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800206a:	f7fe feeb 	bl	8000e44 <HAL_GetTick>
 800206e:	4602      	mov	r2, r0
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	2b02      	cmp	r3, #2
 8002076:	d901      	bls.n	800207c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e05c      	b.n	8002136 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800207c:	4b11      	ldr	r3, [pc, #68]	; (80020c4 <HAL_RCC_OscConfig+0x470>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d0f0      	beq.n	800206a <HAL_RCC_OscConfig+0x416>
 8002088:	e054      	b.n	8002134 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800208a:	4b10      	ldr	r3, [pc, #64]	; (80020cc <HAL_RCC_OscConfig+0x478>)
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002090:	f7fe fed8 	bl	8000e44 <HAL_GetTick>
 8002094:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002096:	e008      	b.n	80020aa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002098:	f7fe fed4 	bl	8000e44 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e045      	b.n	8002136 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020aa:	4b06      	ldr	r3, [pc, #24]	; (80020c4 <HAL_RCC_OscConfig+0x470>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d1f0      	bne.n	8002098 <HAL_RCC_OscConfig+0x444>
 80020b6:	e03d      	b.n	8002134 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	699b      	ldr	r3, [r3, #24]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d107      	bne.n	80020d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e038      	b.n	8002136 <HAL_RCC_OscConfig+0x4e2>
 80020c4:	40023800 	.word	0x40023800
 80020c8:	40007000 	.word	0x40007000
 80020cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80020d0:	4b1b      	ldr	r3, [pc, #108]	; (8002140 <HAL_RCC_OscConfig+0x4ec>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	699b      	ldr	r3, [r3, #24]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d028      	beq.n	8002130 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d121      	bne.n	8002130 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d11a      	bne.n	8002130 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002100:	4013      	ands	r3, r2
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002106:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002108:	4293      	cmp	r3, r2
 800210a:	d111      	bne.n	8002130 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002116:	085b      	lsrs	r3, r3, #1
 8002118:	3b01      	subs	r3, #1
 800211a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800211c:	429a      	cmp	r2, r3
 800211e:	d107      	bne.n	8002130 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800212a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800212c:	429a      	cmp	r2, r3
 800212e:	d001      	beq.n	8002134 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e000      	b.n	8002136 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3718      	adds	r7, #24
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	40023800 	.word	0x40023800

08002144 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d101      	bne.n	8002158 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e0cc      	b.n	80022f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002158:	4b68      	ldr	r3, [pc, #416]	; (80022fc <HAL_RCC_ClockConfig+0x1b8>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 030f 	and.w	r3, r3, #15
 8002160:	683a      	ldr	r2, [r7, #0]
 8002162:	429a      	cmp	r2, r3
 8002164:	d90c      	bls.n	8002180 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002166:	4b65      	ldr	r3, [pc, #404]	; (80022fc <HAL_RCC_ClockConfig+0x1b8>)
 8002168:	683a      	ldr	r2, [r7, #0]
 800216a:	b2d2      	uxtb	r2, r2
 800216c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800216e:	4b63      	ldr	r3, [pc, #396]	; (80022fc <HAL_RCC_ClockConfig+0x1b8>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 030f 	and.w	r3, r3, #15
 8002176:	683a      	ldr	r2, [r7, #0]
 8002178:	429a      	cmp	r2, r3
 800217a:	d001      	beq.n	8002180 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e0b8      	b.n	80022f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0302 	and.w	r3, r3, #2
 8002188:	2b00      	cmp	r3, #0
 800218a:	d020      	beq.n	80021ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0304 	and.w	r3, r3, #4
 8002194:	2b00      	cmp	r3, #0
 8002196:	d005      	beq.n	80021a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002198:	4b59      	ldr	r3, [pc, #356]	; (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	4a58      	ldr	r2, [pc, #352]	; (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 800219e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80021a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0308 	and.w	r3, r3, #8
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d005      	beq.n	80021bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021b0:	4b53      	ldr	r3, [pc, #332]	; (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	4a52      	ldr	r2, [pc, #328]	; (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 80021b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80021ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021bc:	4b50      	ldr	r3, [pc, #320]	; (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	494d      	ldr	r1, [pc, #308]	; (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d044      	beq.n	8002264 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d107      	bne.n	80021f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021e2:	4b47      	ldr	r3, [pc, #284]	; (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d119      	bne.n	8002222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e07f      	b.n	80022f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d003      	beq.n	8002202 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021fe:	2b03      	cmp	r3, #3
 8002200:	d107      	bne.n	8002212 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002202:	4b3f      	ldr	r3, [pc, #252]	; (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d109      	bne.n	8002222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e06f      	b.n	80022f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002212:	4b3b      	ldr	r3, [pc, #236]	; (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d101      	bne.n	8002222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e067      	b.n	80022f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002222:	4b37      	ldr	r3, [pc, #220]	; (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f023 0203 	bic.w	r2, r3, #3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	4934      	ldr	r1, [pc, #208]	; (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 8002230:	4313      	orrs	r3, r2
 8002232:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002234:	f7fe fe06 	bl	8000e44 <HAL_GetTick>
 8002238:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800223a:	e00a      	b.n	8002252 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800223c:	f7fe fe02 	bl	8000e44 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	f241 3288 	movw	r2, #5000	; 0x1388
 800224a:	4293      	cmp	r3, r2
 800224c:	d901      	bls.n	8002252 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e04f      	b.n	80022f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002252:	4b2b      	ldr	r3, [pc, #172]	; (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f003 020c 	and.w	r2, r3, #12
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	429a      	cmp	r2, r3
 8002262:	d1eb      	bne.n	800223c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002264:	4b25      	ldr	r3, [pc, #148]	; (80022fc <HAL_RCC_ClockConfig+0x1b8>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 030f 	and.w	r3, r3, #15
 800226c:	683a      	ldr	r2, [r7, #0]
 800226e:	429a      	cmp	r2, r3
 8002270:	d20c      	bcs.n	800228c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002272:	4b22      	ldr	r3, [pc, #136]	; (80022fc <HAL_RCC_ClockConfig+0x1b8>)
 8002274:	683a      	ldr	r2, [r7, #0]
 8002276:	b2d2      	uxtb	r2, r2
 8002278:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800227a:	4b20      	ldr	r3, [pc, #128]	; (80022fc <HAL_RCC_ClockConfig+0x1b8>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 030f 	and.w	r3, r3, #15
 8002282:	683a      	ldr	r2, [r7, #0]
 8002284:	429a      	cmp	r2, r3
 8002286:	d001      	beq.n	800228c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e032      	b.n	80022f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0304 	and.w	r3, r3, #4
 8002294:	2b00      	cmp	r3, #0
 8002296:	d008      	beq.n	80022aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002298:	4b19      	ldr	r3, [pc, #100]	; (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	4916      	ldr	r1, [pc, #88]	; (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0308 	and.w	r3, r3, #8
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d009      	beq.n	80022ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022b6:	4b12      	ldr	r3, [pc, #72]	; (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	00db      	lsls	r3, r3, #3
 80022c4:	490e      	ldr	r1, [pc, #56]	; (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80022ca:	f000 f821 	bl	8002310 <HAL_RCC_GetSysClockFreq>
 80022ce:	4602      	mov	r2, r0
 80022d0:	4b0b      	ldr	r3, [pc, #44]	; (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	091b      	lsrs	r3, r3, #4
 80022d6:	f003 030f 	and.w	r3, r3, #15
 80022da:	490a      	ldr	r1, [pc, #40]	; (8002304 <HAL_RCC_ClockConfig+0x1c0>)
 80022dc:	5ccb      	ldrb	r3, [r1, r3]
 80022de:	fa22 f303 	lsr.w	r3, r2, r3
 80022e2:	4a09      	ldr	r2, [pc, #36]	; (8002308 <HAL_RCC_ClockConfig+0x1c4>)
 80022e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80022e6:	4b09      	ldr	r3, [pc, #36]	; (800230c <HAL_RCC_ClockConfig+0x1c8>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7fe fd66 	bl	8000dbc <HAL_InitTick>

  return HAL_OK;
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3710      	adds	r7, #16
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	40023c00 	.word	0x40023c00
 8002300:	40023800 	.word	0x40023800
 8002304:	08004570 	.word	0x08004570
 8002308:	20000000 	.word	0x20000000
 800230c:	20000004 	.word	0x20000004

08002310 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002310:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002314:	b094      	sub	sp, #80	; 0x50
 8002316:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002318:	2300      	movs	r3, #0
 800231a:	647b      	str	r3, [r7, #68]	; 0x44
 800231c:	2300      	movs	r3, #0
 800231e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002320:	2300      	movs	r3, #0
 8002322:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002324:	2300      	movs	r3, #0
 8002326:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002328:	4b79      	ldr	r3, [pc, #484]	; (8002510 <HAL_RCC_GetSysClockFreq+0x200>)
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f003 030c 	and.w	r3, r3, #12
 8002330:	2b08      	cmp	r3, #8
 8002332:	d00d      	beq.n	8002350 <HAL_RCC_GetSysClockFreq+0x40>
 8002334:	2b08      	cmp	r3, #8
 8002336:	f200 80e1 	bhi.w	80024fc <HAL_RCC_GetSysClockFreq+0x1ec>
 800233a:	2b00      	cmp	r3, #0
 800233c:	d002      	beq.n	8002344 <HAL_RCC_GetSysClockFreq+0x34>
 800233e:	2b04      	cmp	r3, #4
 8002340:	d003      	beq.n	800234a <HAL_RCC_GetSysClockFreq+0x3a>
 8002342:	e0db      	b.n	80024fc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002344:	4b73      	ldr	r3, [pc, #460]	; (8002514 <HAL_RCC_GetSysClockFreq+0x204>)
 8002346:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002348:	e0db      	b.n	8002502 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800234a:	4b73      	ldr	r3, [pc, #460]	; (8002518 <HAL_RCC_GetSysClockFreq+0x208>)
 800234c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800234e:	e0d8      	b.n	8002502 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002350:	4b6f      	ldr	r3, [pc, #444]	; (8002510 <HAL_RCC_GetSysClockFreq+0x200>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002358:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800235a:	4b6d      	ldr	r3, [pc, #436]	; (8002510 <HAL_RCC_GetSysClockFreq+0x200>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d063      	beq.n	800242e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002366:	4b6a      	ldr	r3, [pc, #424]	; (8002510 <HAL_RCC_GetSysClockFreq+0x200>)
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	099b      	lsrs	r3, r3, #6
 800236c:	2200      	movs	r2, #0
 800236e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002370:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002374:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002378:	633b      	str	r3, [r7, #48]	; 0x30
 800237a:	2300      	movs	r3, #0
 800237c:	637b      	str	r3, [r7, #52]	; 0x34
 800237e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002382:	4622      	mov	r2, r4
 8002384:	462b      	mov	r3, r5
 8002386:	f04f 0000 	mov.w	r0, #0
 800238a:	f04f 0100 	mov.w	r1, #0
 800238e:	0159      	lsls	r1, r3, #5
 8002390:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002394:	0150      	lsls	r0, r2, #5
 8002396:	4602      	mov	r2, r0
 8002398:	460b      	mov	r3, r1
 800239a:	4621      	mov	r1, r4
 800239c:	1a51      	subs	r1, r2, r1
 800239e:	6139      	str	r1, [r7, #16]
 80023a0:	4629      	mov	r1, r5
 80023a2:	eb63 0301 	sbc.w	r3, r3, r1
 80023a6:	617b      	str	r3, [r7, #20]
 80023a8:	f04f 0200 	mov.w	r2, #0
 80023ac:	f04f 0300 	mov.w	r3, #0
 80023b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80023b4:	4659      	mov	r1, fp
 80023b6:	018b      	lsls	r3, r1, #6
 80023b8:	4651      	mov	r1, sl
 80023ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80023be:	4651      	mov	r1, sl
 80023c0:	018a      	lsls	r2, r1, #6
 80023c2:	4651      	mov	r1, sl
 80023c4:	ebb2 0801 	subs.w	r8, r2, r1
 80023c8:	4659      	mov	r1, fp
 80023ca:	eb63 0901 	sbc.w	r9, r3, r1
 80023ce:	f04f 0200 	mov.w	r2, #0
 80023d2:	f04f 0300 	mov.w	r3, #0
 80023d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80023da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80023de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80023e2:	4690      	mov	r8, r2
 80023e4:	4699      	mov	r9, r3
 80023e6:	4623      	mov	r3, r4
 80023e8:	eb18 0303 	adds.w	r3, r8, r3
 80023ec:	60bb      	str	r3, [r7, #8]
 80023ee:	462b      	mov	r3, r5
 80023f0:	eb49 0303 	adc.w	r3, r9, r3
 80023f4:	60fb      	str	r3, [r7, #12]
 80023f6:	f04f 0200 	mov.w	r2, #0
 80023fa:	f04f 0300 	mov.w	r3, #0
 80023fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002402:	4629      	mov	r1, r5
 8002404:	024b      	lsls	r3, r1, #9
 8002406:	4621      	mov	r1, r4
 8002408:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800240c:	4621      	mov	r1, r4
 800240e:	024a      	lsls	r2, r1, #9
 8002410:	4610      	mov	r0, r2
 8002412:	4619      	mov	r1, r3
 8002414:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002416:	2200      	movs	r2, #0
 8002418:	62bb      	str	r3, [r7, #40]	; 0x28
 800241a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800241c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002420:	f7fd fee4 	bl	80001ec <__aeabi_uldivmod>
 8002424:	4602      	mov	r2, r0
 8002426:	460b      	mov	r3, r1
 8002428:	4613      	mov	r3, r2
 800242a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800242c:	e058      	b.n	80024e0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800242e:	4b38      	ldr	r3, [pc, #224]	; (8002510 <HAL_RCC_GetSysClockFreq+0x200>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	099b      	lsrs	r3, r3, #6
 8002434:	2200      	movs	r2, #0
 8002436:	4618      	mov	r0, r3
 8002438:	4611      	mov	r1, r2
 800243a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800243e:	623b      	str	r3, [r7, #32]
 8002440:	2300      	movs	r3, #0
 8002442:	627b      	str	r3, [r7, #36]	; 0x24
 8002444:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002448:	4642      	mov	r2, r8
 800244a:	464b      	mov	r3, r9
 800244c:	f04f 0000 	mov.w	r0, #0
 8002450:	f04f 0100 	mov.w	r1, #0
 8002454:	0159      	lsls	r1, r3, #5
 8002456:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800245a:	0150      	lsls	r0, r2, #5
 800245c:	4602      	mov	r2, r0
 800245e:	460b      	mov	r3, r1
 8002460:	4641      	mov	r1, r8
 8002462:	ebb2 0a01 	subs.w	sl, r2, r1
 8002466:	4649      	mov	r1, r9
 8002468:	eb63 0b01 	sbc.w	fp, r3, r1
 800246c:	f04f 0200 	mov.w	r2, #0
 8002470:	f04f 0300 	mov.w	r3, #0
 8002474:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002478:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800247c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002480:	ebb2 040a 	subs.w	r4, r2, sl
 8002484:	eb63 050b 	sbc.w	r5, r3, fp
 8002488:	f04f 0200 	mov.w	r2, #0
 800248c:	f04f 0300 	mov.w	r3, #0
 8002490:	00eb      	lsls	r3, r5, #3
 8002492:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002496:	00e2      	lsls	r2, r4, #3
 8002498:	4614      	mov	r4, r2
 800249a:	461d      	mov	r5, r3
 800249c:	4643      	mov	r3, r8
 800249e:	18e3      	adds	r3, r4, r3
 80024a0:	603b      	str	r3, [r7, #0]
 80024a2:	464b      	mov	r3, r9
 80024a4:	eb45 0303 	adc.w	r3, r5, r3
 80024a8:	607b      	str	r3, [r7, #4]
 80024aa:	f04f 0200 	mov.w	r2, #0
 80024ae:	f04f 0300 	mov.w	r3, #0
 80024b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80024b6:	4629      	mov	r1, r5
 80024b8:	028b      	lsls	r3, r1, #10
 80024ba:	4621      	mov	r1, r4
 80024bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80024c0:	4621      	mov	r1, r4
 80024c2:	028a      	lsls	r2, r1, #10
 80024c4:	4610      	mov	r0, r2
 80024c6:	4619      	mov	r1, r3
 80024c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024ca:	2200      	movs	r2, #0
 80024cc:	61bb      	str	r3, [r7, #24]
 80024ce:	61fa      	str	r2, [r7, #28]
 80024d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024d4:	f7fd fe8a 	bl	80001ec <__aeabi_uldivmod>
 80024d8:	4602      	mov	r2, r0
 80024da:	460b      	mov	r3, r1
 80024dc:	4613      	mov	r3, r2
 80024de:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80024e0:	4b0b      	ldr	r3, [pc, #44]	; (8002510 <HAL_RCC_GetSysClockFreq+0x200>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	0c1b      	lsrs	r3, r3, #16
 80024e6:	f003 0303 	and.w	r3, r3, #3
 80024ea:	3301      	adds	r3, #1
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80024f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80024f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80024fa:	e002      	b.n	8002502 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024fc:	4b05      	ldr	r3, [pc, #20]	; (8002514 <HAL_RCC_GetSysClockFreq+0x204>)
 80024fe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002500:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002502:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002504:	4618      	mov	r0, r3
 8002506:	3750      	adds	r7, #80	; 0x50
 8002508:	46bd      	mov	sp, r7
 800250a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800250e:	bf00      	nop
 8002510:	40023800 	.word	0x40023800
 8002514:	00f42400 	.word	0x00f42400
 8002518:	007a1200 	.word	0x007a1200

0800251c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d101      	bne.n	800252e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e07b      	b.n	8002626 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002532:	2b00      	cmp	r3, #0
 8002534:	d108      	bne.n	8002548 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800253e:	d009      	beq.n	8002554 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	61da      	str	r2, [r3, #28]
 8002546:	e005      	b.n	8002554 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2200      	movs	r2, #0
 800254c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b00      	cmp	r3, #0
 8002564:	d106      	bne.n	8002574 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f7fe fa58 	bl	8000a24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2202      	movs	r2, #2
 8002578:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800258a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800259c:	431a      	orrs	r2, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025a6:	431a      	orrs	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	691b      	ldr	r3, [r3, #16]
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	431a      	orrs	r2, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	695b      	ldr	r3, [r3, #20]
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	431a      	orrs	r2, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	699b      	ldr	r3, [r3, #24]
 80025c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025c4:	431a      	orrs	r2, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	69db      	ldr	r3, [r3, #28]
 80025ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80025ce:	431a      	orrs	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a1b      	ldr	r3, [r3, #32]
 80025d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025d8:	ea42 0103 	orr.w	r1, r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	430a      	orrs	r2, r1
 80025ea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	0c1b      	lsrs	r3, r3, #16
 80025f2:	f003 0104 	and.w	r1, r3, #4
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fa:	f003 0210 	and.w	r2, r3, #16
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	430a      	orrs	r2, r1
 8002604:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	69da      	ldr	r2, [r3, #28]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002614:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800262e:	b580      	push	{r7, lr}
 8002630:	b088      	sub	sp, #32
 8002632:	af00      	add	r7, sp, #0
 8002634:	60f8      	str	r0, [r7, #12]
 8002636:	60b9      	str	r1, [r7, #8]
 8002638:	603b      	str	r3, [r7, #0]
 800263a:	4613      	mov	r3, r2
 800263c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800263e:	2300      	movs	r3, #0
 8002640:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002648:	2b01      	cmp	r3, #1
 800264a:	d101      	bne.n	8002650 <HAL_SPI_Transmit+0x22>
 800264c:	2302      	movs	r3, #2
 800264e:	e126      	b.n	800289e <HAL_SPI_Transmit+0x270>
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002658:	f7fe fbf4 	bl	8000e44 <HAL_GetTick>
 800265c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800265e:	88fb      	ldrh	r3, [r7, #6]
 8002660:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002668:	b2db      	uxtb	r3, r3
 800266a:	2b01      	cmp	r3, #1
 800266c:	d002      	beq.n	8002674 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800266e:	2302      	movs	r3, #2
 8002670:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002672:	e10b      	b.n	800288c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d002      	beq.n	8002680 <HAL_SPI_Transmit+0x52>
 800267a:	88fb      	ldrh	r3, [r7, #6]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d102      	bne.n	8002686 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002684:	e102      	b.n	800288c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2203      	movs	r2, #3
 800268a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2200      	movs	r2, #0
 8002692:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	68ba      	ldr	r2, [r7, #8]
 8002698:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	88fa      	ldrh	r2, [r7, #6]
 800269e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	88fa      	ldrh	r2, [r7, #6]
 80026a4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2200      	movs	r2, #0
 80026aa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2200      	movs	r2, #0
 80026b0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2200      	movs	r2, #0
 80026b6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2200      	movs	r2, #0
 80026bc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2200      	movs	r2, #0
 80026c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026cc:	d10f      	bne.n	80026ee <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026dc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026ec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026f8:	2b40      	cmp	r3, #64	; 0x40
 80026fa:	d007      	beq.n	800270c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800270a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002714:	d14b      	bne.n	80027ae <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d002      	beq.n	8002724 <HAL_SPI_Transmit+0xf6>
 800271e:	8afb      	ldrh	r3, [r7, #22]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d13e      	bne.n	80027a2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002728:	881a      	ldrh	r2, [r3, #0]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002734:	1c9a      	adds	r2, r3, #2
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800273e:	b29b      	uxth	r3, r3
 8002740:	3b01      	subs	r3, #1
 8002742:	b29a      	uxth	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002748:	e02b      	b.n	80027a2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	2b02      	cmp	r3, #2
 8002756:	d112      	bne.n	800277e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275c:	881a      	ldrh	r2, [r3, #0]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002768:	1c9a      	adds	r2, r3, #2
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002772:	b29b      	uxth	r3, r3
 8002774:	3b01      	subs	r3, #1
 8002776:	b29a      	uxth	r2, r3
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	86da      	strh	r2, [r3, #54]	; 0x36
 800277c:	e011      	b.n	80027a2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800277e:	f7fe fb61 	bl	8000e44 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	683a      	ldr	r2, [r7, #0]
 800278a:	429a      	cmp	r2, r3
 800278c:	d803      	bhi.n	8002796 <HAL_SPI_Transmit+0x168>
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002794:	d102      	bne.n	800279c <HAL_SPI_Transmit+0x16e>
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d102      	bne.n	80027a2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	77fb      	strb	r3, [r7, #31]
          goto error;
 80027a0:	e074      	b.n	800288c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d1ce      	bne.n	800274a <HAL_SPI_Transmit+0x11c>
 80027ac:	e04c      	b.n	8002848 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d002      	beq.n	80027bc <HAL_SPI_Transmit+0x18e>
 80027b6:	8afb      	ldrh	r3, [r7, #22]
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d140      	bne.n	800283e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	330c      	adds	r3, #12
 80027c6:	7812      	ldrb	r2, [r2, #0]
 80027c8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ce:	1c5a      	adds	r2, r3, #1
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027d8:	b29b      	uxth	r3, r3
 80027da:	3b01      	subs	r3, #1
 80027dc:	b29a      	uxth	r2, r3
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80027e2:	e02c      	b.n	800283e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d113      	bne.n	800281a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	330c      	adds	r3, #12
 80027fc:	7812      	ldrb	r2, [r2, #0]
 80027fe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002804:	1c5a      	adds	r2, r3, #1
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800280e:	b29b      	uxth	r3, r3
 8002810:	3b01      	subs	r3, #1
 8002812:	b29a      	uxth	r2, r3
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	86da      	strh	r2, [r3, #54]	; 0x36
 8002818:	e011      	b.n	800283e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800281a:	f7fe fb13 	bl	8000e44 <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	683a      	ldr	r2, [r7, #0]
 8002826:	429a      	cmp	r2, r3
 8002828:	d803      	bhi.n	8002832 <HAL_SPI_Transmit+0x204>
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002830:	d102      	bne.n	8002838 <HAL_SPI_Transmit+0x20a>
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d102      	bne.n	800283e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800283c:	e026      	b.n	800288c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002842:	b29b      	uxth	r3, r3
 8002844:	2b00      	cmp	r3, #0
 8002846:	d1cd      	bne.n	80027e4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	6839      	ldr	r1, [r7, #0]
 800284c:	68f8      	ldr	r0, [r7, #12]
 800284e:	f000 f8b3 	bl	80029b8 <SPI_EndRxTxTransaction>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d002      	beq.n	800285e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2220      	movs	r2, #32
 800285c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d10a      	bne.n	800287c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002866:	2300      	movs	r3, #0
 8002868:	613b      	str	r3, [r7, #16]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	613b      	str	r3, [r7, #16]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	613b      	str	r3, [r7, #16]
 800287a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002880:	2b00      	cmp	r3, #0
 8002882:	d002      	beq.n	800288a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	77fb      	strb	r3, [r7, #31]
 8002888:	e000      	b.n	800288c <HAL_SPI_Transmit+0x25e>
  }

error:
 800288a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2200      	movs	r2, #0
 8002898:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800289c:	7ffb      	ldrb	r3, [r7, #31]
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3720      	adds	r7, #32
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
	...

080028a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b088      	sub	sp, #32
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	603b      	str	r3, [r7, #0]
 80028b4:	4613      	mov	r3, r2
 80028b6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80028b8:	f7fe fac4 	bl	8000e44 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c0:	1a9b      	subs	r3, r3, r2
 80028c2:	683a      	ldr	r2, [r7, #0]
 80028c4:	4413      	add	r3, r2
 80028c6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80028c8:	f7fe fabc 	bl	8000e44 <HAL_GetTick>
 80028cc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80028ce:	4b39      	ldr	r3, [pc, #228]	; (80029b4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	015b      	lsls	r3, r3, #5
 80028d4:	0d1b      	lsrs	r3, r3, #20
 80028d6:	69fa      	ldr	r2, [r7, #28]
 80028d8:	fb02 f303 	mul.w	r3, r2, r3
 80028dc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80028de:	e054      	b.n	800298a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028e6:	d050      	beq.n	800298a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80028e8:	f7fe faac 	bl	8000e44 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	69fa      	ldr	r2, [r7, #28]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d902      	bls.n	80028fe <SPI_WaitFlagStateUntilTimeout+0x56>
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d13d      	bne.n	800297a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	685a      	ldr	r2, [r3, #4]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800290c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002916:	d111      	bne.n	800293c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002920:	d004      	beq.n	800292c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800292a:	d107      	bne.n	800293c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800293a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002940:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002944:	d10f      	bne.n	8002966 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002954:	601a      	str	r2, [r3, #0]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002964:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2201      	movs	r2, #1
 800296a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e017      	b.n	80029aa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d101      	bne.n	8002984 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002980:	2300      	movs	r3, #0
 8002982:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	3b01      	subs	r3, #1
 8002988:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	689a      	ldr	r2, [r3, #8]
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	4013      	ands	r3, r2
 8002994:	68ba      	ldr	r2, [r7, #8]
 8002996:	429a      	cmp	r2, r3
 8002998:	bf0c      	ite	eq
 800299a:	2301      	moveq	r3, #1
 800299c:	2300      	movne	r3, #0
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	461a      	mov	r2, r3
 80029a2:	79fb      	ldrb	r3, [r7, #7]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d19b      	bne.n	80028e0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3720      	adds	r7, #32
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	20000000 	.word	0x20000000

080029b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b088      	sub	sp, #32
 80029bc:	af02      	add	r7, sp, #8
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80029c4:	4b1b      	ldr	r3, [pc, #108]	; (8002a34 <SPI_EndRxTxTransaction+0x7c>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a1b      	ldr	r2, [pc, #108]	; (8002a38 <SPI_EndRxTxTransaction+0x80>)
 80029ca:	fba2 2303 	umull	r2, r3, r2, r3
 80029ce:	0d5b      	lsrs	r3, r3, #21
 80029d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80029d4:	fb02 f303 	mul.w	r3, r2, r3
 80029d8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029e2:	d112      	bne.n	8002a0a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	9300      	str	r3, [sp, #0]
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	2200      	movs	r2, #0
 80029ec:	2180      	movs	r1, #128	; 0x80
 80029ee:	68f8      	ldr	r0, [r7, #12]
 80029f0:	f7ff ff5a 	bl	80028a8 <SPI_WaitFlagStateUntilTimeout>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d016      	beq.n	8002a28 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029fe:	f043 0220 	orr.w	r2, r3, #32
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e00f      	b.n	8002a2a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d00a      	beq.n	8002a26 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	3b01      	subs	r3, #1
 8002a14:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a20:	2b80      	cmp	r3, #128	; 0x80
 8002a22:	d0f2      	beq.n	8002a0a <SPI_EndRxTxTransaction+0x52>
 8002a24:	e000      	b.n	8002a28 <SPI_EndRxTxTransaction+0x70>
        break;
 8002a26:	bf00      	nop
  }

  return HAL_OK;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3718      	adds	r7, #24
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	20000000 	.word	0x20000000
 8002a38:	165e9f81 	.word	0x165e9f81

08002a3c <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	7c1b      	ldrb	r3, [r3, #16]
 8002a4a:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a52:	461a      	mov	r2, r3
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	fb02 f303 	mul.w	r3, r2, r3
 8002a5a:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	00db      	lsls	r3, r3, #3
 8002a60:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a66:	68fa      	ldr	r2, [r7, #12]
 8002a68:	2100      	movs	r1, #0
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f001 fd2a 	bl	80044c4 <memset>
}
 8002a70:	bf00      	nop
 8002a72:	3710      	adds	r7, #16
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af02      	add	r7, sp, #8
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	460b      	mov	r3, r1
 8002a82:	70fb      	strb	r3, [r7, #3]
 8002a84:	4613      	mov	r3, r2
 8002a86:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	7c1b      	ldrb	r3, [r3, #16]
 8002a8e:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8002a90:	78fb      	ldrb	r3, [r7, #3]
 8002a92:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a98:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8002a9a:	7bfb      	ldrb	r3, [r7, #15]
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	89ba      	ldrh	r2, [r7, #12]
 8002aa0:	fb12 f303 	smulbb	r3, r2, r3
 8002aa4:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8002aa6:	89bb      	ldrh	r3, [r7, #12]
 8002aa8:	00db      	lsls	r3, r3, #3
 8002aaa:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8002aac:	89bb      	ldrh	r3, [r7, #12]
 8002aae:	68ba      	ldr	r2, [r7, #8]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8002ab4:	7bf9      	ldrb	r1, [r7, #15]
 8002ab6:	78ba      	ldrb	r2, [r7, #2]
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	9300      	str	r3, [sp, #0]
 8002abc:	460b      	mov	r3, r1
 8002abe:	2100      	movs	r1, #0
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f001 fbf2 	bl	80042aa <u8x8_DrawTile>
}
 8002ac6:	bf00      	nop
 8002ac8:	3710      	adds	r7, #16
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b084      	sub	sp, #16
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002ae0:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ae8:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	7c5b      	ldrb	r3, [r3, #17]
 8002af0:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8002af2:	7bba      	ldrb	r2, [r7, #14]
 8002af4:	7bfb      	ldrb	r3, [r7, #15]
 8002af6:	4619      	mov	r1, r3
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f7ff ffbd 	bl	8002a78 <u8g2_send_tile_row>
    src_row++;
 8002afe:	7bfb      	ldrb	r3, [r7, #15]
 8002b00:	3301      	adds	r3, #1
 8002b02:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8002b04:	7bbb      	ldrb	r3, [r7, #14]
 8002b06:	3301      	adds	r3, #1
 8002b08:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8002b0a:	7bfa      	ldrb	r2, [r7, #15]
 8002b0c:	7b7b      	ldrb	r3, [r7, #13]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d203      	bcs.n	8002b1a <u8g2_send_buffer+0x4c>
 8002b12:	7bba      	ldrb	r2, [r7, #14]
 8002b14:	7b3b      	ldrb	r3, [r7, #12]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d3eb      	bcc.n	8002af2 <u8g2_send_buffer+0x24>
}
 8002b1a:	bf00      	nop
 8002b1c:	3710      	adds	r7, #16
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <u8g2_SetBufferCurrTileRow>:
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
}

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b082      	sub	sp, #8
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
 8002b2a:	460b      	mov	r3, r1
 8002b2c:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	78fa      	ldrb	r2, [r7, #3]
 8002b32:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  u8g2->cb->update_dimension(u8g2);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	4798      	blx	r3
}
 8002b4a:	bf00      	nop
 8002b4c:	3708      	adds	r7, #8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b082      	sub	sp, #8
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d002      	beq.n	8002b6a <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f7ff ff69 	bl	8002a3c <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 8002b6a:	2100      	movs	r1, #0
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f7ff ffd8 	bl	8002b22 <u8g2_SetBufferCurrTileRow>
}
 8002b72:	bf00      	nop
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b084      	sub	sp, #16
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f7ff ffa3 	bl	8002ace <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002b8e:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8002b96:	7bfb      	ldrb	r3, [r7, #15]
 8002b98:	4413      	add	r3, r2
 8002b9a:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	7c5b      	ldrb	r3, [r3, #17]
 8002ba2:	7bfa      	ldrb	r2, [r7, #15]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d304      	bcc.n	8002bb2 <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f001 fbcf 	bl	800434c <u8x8_RefreshDisplay>
    return 0;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	e00d      	b.n	8002bce <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d002      	beq.n	8002bc2 <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f7ff ff3d 	bl	8002a3c <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 8002bc2:	7bfb      	ldrb	r3, [r7, #15]
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f7ff ffab 	bl	8002b22 <u8g2_SetBufferCurrTileRow>
  return 1;
 8002bcc:	2301      	movs	r3, #1
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3710      	adds	r7, #16
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
	...

08002bd8 <u8g2_m_16_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2208      	movs	r2, #8
 8002be4:	701a      	strb	r2, [r3, #0]
  return buf;
 8002be6:	4b03      	ldr	r3, [pc, #12]	; (8002bf4 <u8g2_m_16_8_f+0x1c>)
  #endif
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	370c      	adds	r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr
 8002bf4:	2000016c 	.word	0x2000016c

08002bf8 <u8g2_Setup_ssd1306_128x64_noname_f>:
  buf = u8g2_m_16_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 f */
void u8g2_Setup_ssd1306_128x64_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b088      	sub	sp, #32
 8002bfc:	af02      	add	r7, sp, #8
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
 8002c04:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	9300      	str	r3, [sp, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a0b      	ldr	r2, [pc, #44]	; (8002c3c <u8g2_Setup_ssd1306_128x64_noname_f+0x44>)
 8002c0e:	490c      	ldr	r1, [pc, #48]	; (8002c40 <u8g2_Setup_ssd1306_128x64_noname_f+0x48>)
 8002c10:	68f8      	ldr	r0, [r7, #12]
 8002c12:	f001 fbfb 	bl	800440c <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 8002c16:	f107 0313 	add.w	r3, r7, #19
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7ff ffdc 	bl	8002bd8 <u8g2_m_16_8_f>
 8002c20:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8002c22:	7cfa      	ldrb	r2, [r7, #19]
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	9300      	str	r3, [sp, #0]
 8002c28:	4b06      	ldr	r3, [pc, #24]	; (8002c44 <u8g2_Setup_ssd1306_128x64_noname_f+0x4c>)
 8002c2a:	6979      	ldr	r1, [r7, #20]
 8002c2c:	68f8      	ldr	r0, [r7, #12]
 8002c2e:	f000 ff81 	bl	8003b34 <u8g2_SetupBuffer>
}
 8002c32:	bf00      	nop
 8002c34:	3718      	adds	r7, #24
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	08003fcd 	.word	0x08003fcd
 8002c40:	080041a5 	.word	0x080041a5
 8002c44:	080039b7 	.word	0x080039b7

08002c48 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	460b      	mov	r3, r1
 8002c52:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8002c54:	78fb      	ldrb	r3, [r7, #3]
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	4413      	add	r3, r2
 8002c5a:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	781b      	ldrb	r3, [r3, #0]
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b085      	sub	sp, #20
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	460b      	mov	r3, r1
 8002c76:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8002c78:	78fb      	ldrb	r3, [r7, #3]
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	81fb      	strh	r3, [r7, #14]
    font++;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	3301      	adds	r3, #1
 8002c8a:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8002c8c:	89fb      	ldrh	r3, [r7, #14]
 8002c8e:	021b      	lsls	r3, r3, #8
 8002c90:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	b29a      	uxth	r2, r3
 8002c98:	89fb      	ldrh	r3, [r7, #14]
 8002c9a:	4413      	add	r3, r2
 8002c9c:	81fb      	strh	r3, [r7, #14]
    return pos;
 8002c9e:	89fb      	ldrh	r3, [r7, #14]
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3714      	adds	r7, #20
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8002cb6:	2100      	movs	r1, #0
 8002cb8:	6838      	ldr	r0, [r7, #0]
 8002cba:	f7ff ffc5 	bl	8002c48 <u8g2_font_get_byte>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8002cc6:	2101      	movs	r1, #1
 8002cc8:	6838      	ldr	r0, [r7, #0]
 8002cca:	f7ff ffbd 	bl	8002c48 <u8g2_font_get_byte>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8002cd6:	2102      	movs	r1, #2
 8002cd8:	6838      	ldr	r0, [r7, #0]
 8002cda:	f7ff ffb5 	bl	8002c48 <u8g2_font_get_byte>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8002ce6:	2103      	movs	r1, #3
 8002ce8:	6838      	ldr	r0, [r7, #0]
 8002cea:	f7ff ffad 	bl	8002c48 <u8g2_font_get_byte>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8002cf6:	2104      	movs	r1, #4
 8002cf8:	6838      	ldr	r0, [r7, #0]
 8002cfa:	f7ff ffa5 	bl	8002c48 <u8g2_font_get_byte>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	461a      	mov	r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 8002d06:	2105      	movs	r1, #5
 8002d08:	6838      	ldr	r0, [r7, #0]
 8002d0a:	f7ff ff9d 	bl	8002c48 <u8g2_font_get_byte>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	461a      	mov	r2, r3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8002d16:	2106      	movs	r1, #6
 8002d18:	6838      	ldr	r0, [r7, #0]
 8002d1a:	f7ff ff95 	bl	8002c48 <u8g2_font_get_byte>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	461a      	mov	r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8002d26:	2107      	movs	r1, #7
 8002d28:	6838      	ldr	r0, [r7, #0]
 8002d2a:	f7ff ff8d 	bl	8002c48 <u8g2_font_get_byte>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	461a      	mov	r2, r3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 8002d36:	2108      	movs	r1, #8
 8002d38:	6838      	ldr	r0, [r7, #0]
 8002d3a:	f7ff ff85 	bl	8002c48 <u8g2_font_get_byte>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	461a      	mov	r2, r3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 8002d46:	2109      	movs	r1, #9
 8002d48:	6838      	ldr	r0, [r7, #0]
 8002d4a:	f7ff ff7d 	bl	8002c48 <u8g2_font_get_byte>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	b25a      	sxtb	r2, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8002d56:	210a      	movs	r1, #10
 8002d58:	6838      	ldr	r0, [r7, #0]
 8002d5a:	f7ff ff75 	bl	8002c48 <u8g2_font_get_byte>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	b25a      	sxtb	r2, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 8002d66:	210b      	movs	r1, #11
 8002d68:	6838      	ldr	r0, [r7, #0]
 8002d6a:	f7ff ff6d 	bl	8002c48 <u8g2_font_get_byte>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	b25a      	sxtb	r2, r3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 8002d76:	210c      	movs	r1, #12
 8002d78:	6838      	ldr	r0, [r7, #0]
 8002d7a:	f7ff ff65 	bl	8002c48 <u8g2_font_get_byte>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	b25a      	sxtb	r2, r3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8002d86:	210d      	movs	r1, #13
 8002d88:	6838      	ldr	r0, [r7, #0]
 8002d8a:	f7ff ff5d 	bl	8002c48 <u8g2_font_get_byte>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	b25a      	sxtb	r2, r3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 8002d96:	210e      	movs	r1, #14
 8002d98:	6838      	ldr	r0, [r7, #0]
 8002d9a:	f7ff ff55 	bl	8002c48 <u8g2_font_get_byte>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	b25a      	sxtb	r2, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8002da6:	210f      	movs	r1, #15
 8002da8:	6838      	ldr	r0, [r7, #0]
 8002daa:	f7ff ff4d 	bl	8002c48 <u8g2_font_get_byte>
 8002dae:	4603      	mov	r3, r0
 8002db0:	b25a      	sxtb	r2, r3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 8002db6:	2110      	movs	r1, #16
 8002db8:	6838      	ldr	r0, [r7, #0]
 8002dba:	f7ff ff45 	bl	8002c48 <u8g2_font_get_byte>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	b25a      	sxtb	r2, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8002dc6:	2111      	movs	r1, #17
 8002dc8:	6838      	ldr	r0, [r7, #0]
 8002dca:	f7ff ff4f 	bl	8002c6c <u8g2_font_get_word>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8002dd6:	2113      	movs	r1, #19
 8002dd8:	6838      	ldr	r0, [r7, #0]
 8002dda:	f7ff ff47 	bl	8002c6c <u8g2_font_get_word>
 8002dde:	4603      	mov	r3, r0
 8002de0:	461a      	mov	r2, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 8002de6:	2115      	movs	r1, #21
 8002de8:	6838      	ldr	r0, [r7, #0]
 8002dea:	f7ff ff3f 	bl	8002c6c <u8g2_font_get_word>
 8002dee:	4603      	mov	r3, r0
 8002df0:	461a      	mov	r2, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	82da      	strh	r2, [r3, #22]
#endif
}
 8002df6:	bf00      	nop
 8002df8:	3708      	adds	r7, #8
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 8002dfe:	b480      	push	{r7}
 8002e00:	b085      	sub	sp, #20
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
 8002e06:	460b      	mov	r3, r1
 8002e08:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	7b1b      	ldrb	r3, [r3, #12]
 8002e0e:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 8002e18:	7bfa      	ldrb	r2, [r7, #15]
 8002e1a:	7b7b      	ldrb	r3, [r7, #13]
 8002e1c:	fa42 f303 	asr.w	r3, r2, r3
 8002e20:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 8002e22:	7b7b      	ldrb	r3, [r7, #13]
 8002e24:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 8002e26:	7bba      	ldrb	r2, [r7, #14]
 8002e28:	78fb      	ldrb	r3, [r7, #3]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 8002e2e:	7bbb      	ldrb	r3, [r7, #14]
 8002e30:	2b07      	cmp	r3, #7
 8002e32:	d91a      	bls.n	8002e6a <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8002e34:	2308      	movs	r3, #8
 8002e36:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 8002e38:	7b3a      	ldrb	r2, [r7, #12]
 8002e3a:	7b7b      	ldrb	r3, [r7, #13]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	1c5a      	adds	r2, r3, #1
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	461a      	mov	r2, r3
 8002e52:	7b3b      	ldrb	r3, [r7, #12]
 8002e54:	fa02 f303 	lsl.w	r3, r2, r3
 8002e58:	b25a      	sxtb	r2, r3
 8002e5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	b25b      	sxtb	r3, r3
 8002e62:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8002e64:	7bbb      	ldrb	r3, [r7, #14]
 8002e66:	3b08      	subs	r3, #8
 8002e68:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 8002e6a:	78fb      	ldrb	r3, [r7, #3]
 8002e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e70:	fa02 f303 	lsl.w	r3, r2, r3
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	43db      	mvns	r3, r3
 8002e78:	b2da      	uxtb	r2, r3
 8002e7a:	7bfb      	ldrb	r3, [r7, #15]
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	7bba      	ldrb	r2, [r7, #14]
 8002e84:	731a      	strb	r2, [r3, #12]
  return val;
 8002e86:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3714      	adds	r7, #20
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	460b      	mov	r3, r1
 8002e9e:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8002ea0:	78fb      	ldrb	r3, [r7, #3]
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f7ff ffaa 	bl	8002dfe <u8g2_font_decode_get_unsigned_bits>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	73fb      	strb	r3, [r7, #15]
  d = 1;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	73bb      	strb	r3, [r7, #14]
  cnt--;
 8002eb2:	78fb      	ldrb	r3, [r7, #3]
 8002eb4:	3b01      	subs	r3, #1
 8002eb6:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 8002eb8:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8002ebc:	78fb      	ldrb	r3, [r7, #3]
 8002ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec2:	73bb      	strb	r3, [r7, #14]
  v -= d;
 8002ec4:	7bfa      	ldrb	r2, [r7, #15]
 8002ec6:	7bbb      	ldrb	r3, [r7, #14]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	73fb      	strb	r3, [r7, #15]
  return v;
 8002ece:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <u8g2_font_2x_decode_len>:
  decode->y = ly;  
}


void u8g2_font_2x_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 8002eda:	b580      	push	{r7, lr}
 8002edc:	b088      	sub	sp, #32
 8002ede:	af02      	add	r7, sp, #8
 8002ee0:	6078      	str	r0, [r7, #4]
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	70fb      	strb	r3, [r7, #3]
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	3360      	adds	r3, #96	; 0x60
 8002eee:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 8002ef0:	78fb      	ldrb	r3, [r7, #3]
 8002ef2:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8002efa:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8002f02:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8002f0a:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 8002f0c:	7bfa      	ldrb	r2, [r7, #15]
 8002f0e:	7d7b      	ldrb	r3, [r7, #21]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8002f14:	7bfb      	ldrb	r3, [r7, #15]
 8002f16:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 8002f18:	7dfa      	ldrb	r2, [r7, #23]
 8002f1a:	7bfb      	ldrb	r3, [r7, #15]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d201      	bcs.n	8002f24 <u8g2_font_2x_decode_len+0x4a>
      current = cnt;
 8002f20:	7dfb      	ldrb	r3, [r7, #23]
 8002f22:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	889b      	ldrh	r3, [r3, #4]
 8002f28:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	88db      	ldrh	r3, [r3, #6]
 8002f2e:	817b      	strh	r3, [r7, #10]

    x += lx*2;
 8002f30:	7d7b      	ldrb	r3, [r7, #21]
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	b29a      	uxth	r2, r3
 8002f38:	89bb      	ldrh	r3, [r7, #12]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	81bb      	strh	r3, [r7, #12]
    y += ly*2;
 8002f3e:	7d3b      	ldrb	r3, [r7, #20]
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	b29a      	uxth	r2, r3
 8002f46:	897b      	ldrh	r3, [r7, #10]
 8002f48:	4413      	add	r3, r2
 8002f4a:	817b      	strh	r3, [r7, #10]
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 8002f4c:	78bb      	ldrb	r3, [r7, #2]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d01d      	beq.n	8002f8e <u8g2_font_2x_decode_len+0xb4>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	7b9a      	ldrb	r2, [r3, #14]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 8002f5c:	7dbb      	ldrb	r3, [r7, #22]
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	897a      	ldrh	r2, [r7, #10]
 8002f66:	89b9      	ldrh	r1, [r7, #12]
 8002f68:	2000      	movs	r0, #0
 8002f6a:	9000      	str	r0, [sp, #0]
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f000 fb6c 	bl	800364a <u8g2_DrawHVLine>
	x, 
	y, 
	current*2, 
	0
      );
      u8g2_DrawHVLine(u8g2, 
 8002f72:	897b      	ldrh	r3, [r7, #10]
 8002f74:	3301      	adds	r3, #1
 8002f76:	b29a      	uxth	r2, r3
 8002f78:	7dbb      	ldrb	r3, [r7, #22]
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	005b      	lsls	r3, r3, #1
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	89b9      	ldrh	r1, [r7, #12]
 8002f82:	2000      	movs	r0, #0
 8002f84:	9000      	str	r0, [sp, #0]
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 fb5f 	bl	800364a <u8g2_DrawHVLine>
 8002f8c:	e020      	b.n	8002fd0 <u8g2_font_2x_decode_len+0xf6>
	y+1, 
	current*2, 
	0
      );
    }
    else if ( decode->is_transparent == 0 )    
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	7b5b      	ldrb	r3, [r3, #13]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d11c      	bne.n	8002fd0 <u8g2_font_2x_decode_len+0xf6>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	7bda      	ldrb	r2, [r3, #15]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 8002fa0:	7dbb      	ldrb	r3, [r7, #22]
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	005b      	lsls	r3, r3, #1
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	897a      	ldrh	r2, [r7, #10]
 8002faa:	89b9      	ldrh	r1, [r7, #12]
 8002fac:	2000      	movs	r0, #0
 8002fae:	9000      	str	r0, [sp, #0]
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f000 fb4a 	bl	800364a <u8g2_DrawHVLine>
	x, 
	y, 
	current*2, 
	0
      );   
      u8g2_DrawHVLine(u8g2, 
 8002fb6:	897b      	ldrh	r3, [r7, #10]
 8002fb8:	3301      	adds	r3, #1
 8002fba:	b29a      	uxth	r2, r3
 8002fbc:	7dbb      	ldrb	r3, [r7, #22]
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	89b9      	ldrh	r1, [r7, #12]
 8002fc6:	2000      	movs	r0, #0
 8002fc8:	9000      	str	r0, [sp, #0]
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 fb3d 	bl	800364a <u8g2_DrawHVLine>
	0
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8002fd0:	7dfa      	ldrb	r2, [r7, #23]
 8002fd2:	7bfb      	ldrb	r3, [r7, #15]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d309      	bcc.n	8002fec <u8g2_font_2x_decode_len+0x112>
      break;
    cnt -= rem;
 8002fd8:	7dfa      	ldrb	r2, [r7, #23]
 8002fda:	7bfb      	ldrb	r3, [r7, #15]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	757b      	strb	r3, [r7, #21]
    ly++;
 8002fe4:	7d3b      	ldrb	r3, [r7, #20]
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8002fea:	e78b      	b.n	8002f04 <u8g2_font_2x_decode_len+0x2a>
      break;
 8002fec:	bf00      	nop
  }
  lx += cnt;
 8002fee:	7d7a      	ldrb	r2, [r7, #21]
 8002ff0:	7dfb      	ldrb	r3, [r7, #23]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 8002ff6:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	721a      	strb	r2, [r3, #8]
  decode->y = ly;
 8002ffe:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	725a      	strb	r2, [r3, #9]
  
}
 8003006:	bf00      	nop
 8003008:	3718      	adds	r7, #24
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}

0800300e <u8g2_font_setup_decode>:


static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 800300e:	b580      	push	{r7, lr}
 8003010:	b084      	sub	sp, #16
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
 8003016:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	3360      	adds	r3, #96	; 0x60
 800301c:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	683a      	ldr	r2, [r7, #0]
 8003022:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2200      	movs	r2, #0
 8003028:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8003030:	4619      	mov	r1, r3
 8003032:	68f8      	ldr	r0, [r7, #12]
 8003034:	f7ff fee3 	bl	8002dfe <u8g2_font_decode_get_unsigned_bits>
 8003038:	4603      	mov	r3, r0
 800303a:	b25a      	sxtb	r2, r3
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8003046:	4619      	mov	r1, r3
 8003048:	68f8      	ldr	r0, [r7, #12]
 800304a:	f7ff fed8 	bl	8002dfe <u8g2_font_decode_get_unsigned_bits>
 800304e:	4603      	mov	r3, r0
 8003050:	b25a      	sxtb	r2, r3
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	7b9b      	ldrb	r3, [r3, #14]
 8003064:	2b00      	cmp	r3, #0
 8003066:	bf0c      	ite	eq
 8003068:	2301      	moveq	r3, #1
 800306a:	2300      	movne	r3, #0
 800306c:	b2db      	uxtb	r3, r3
 800306e:	461a      	mov	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	73da      	strb	r2, [r3, #15]
}
 8003074:	bf00      	nop
 8003076:	3710      	adds	r7, #16
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <u8g2_font_2x_decode_glyph>:
  return d;
}


int8_t u8g2_font_2x_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b08a      	sub	sp, #40	; 0x28
 8003080:	af02      	add	r7, sp, #8
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	3360      	adds	r3, #96	; 0x60
 800308a:	61fb      	str	r3, [r7, #28]
    
  u8g2_font_setup_decode(u8g2, glyph_data);     /* set values in u8g2->font_decode data structure */
 800308c:	6839      	ldr	r1, [r7, #0]
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f7ff ffbd 	bl	800300e <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800309a:	76fb      	strb	r3, [r7, #27]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 80030a2:	4619      	mov	r1, r3
 80030a4:	69f8      	ldr	r0, [r7, #28]
 80030a6:	f7ff fef5 	bl	8002e94 <u8g2_font_decode_get_signed_bits>
 80030aa:	4603      	mov	r3, r0
 80030ac:	76bb      	strb	r3, [r7, #26]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 80030b4:	4619      	mov	r1, r3
 80030b6:	69f8      	ldr	r0, [r7, #28]
 80030b8:	f7ff feec 	bl	8002e94 <u8g2_font_decode_get_signed_bits>
 80030bc:	4603      	mov	r3, r0
 80030be:	767b      	strb	r3, [r7, #25]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80030c6:	4619      	mov	r1, r3
 80030c8:	69f8      	ldr	r0, [r7, #28]
 80030ca:	f7ff fee3 	bl	8002e94 <u8g2_font_decode_get_signed_bits>
 80030ce:	4603      	mov	r3, r0
 80030d0:	763b      	strb	r3, [r7, #24]
  
  if ( decode->glyph_width > 0 )
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	dd7b      	ble.n	80031d4 <u8g2_font_2x_decode_glyph+0x158>
  {
    decode->target_x += x;
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	889a      	ldrh	r2, [r3, #4]
 80030e0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	4413      	add	r3, r2
 80030e8:	b29a      	uxth	r2, r3
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	809a      	strh	r2, [r3, #4]
    decode->target_y -= 2*h+y;
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	88da      	ldrh	r2, [r3, #6]
 80030f2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	005b      	lsls	r3, r3, #1
 80030fa:	b299      	uxth	r1, r3
 80030fc:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8003100:	b29b      	uxth	r3, r3
 8003102:	440b      	add	r3, r1
 8003104:	b29b      	uxth	r3, r3
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	b29a      	uxth	r2, r3
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	80da      	strh	r2, [r3, #6]

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	889b      	ldrh	r3, [r3, #4]
 8003112:	82fb      	strh	r3, [r7, #22]
      y0 = decode->target_y;
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	88db      	ldrh	r3, [r3, #6]
 8003118:	82bb      	strh	r3, [r7, #20]
      x1 = x0;
 800311a:	8afb      	ldrh	r3, [r7, #22]
 800311c:	827b      	strh	r3, [r7, #18]
      y1 = y0;
 800311e:	8abb      	ldrh	r3, [r7, #20]
 8003120:	823b      	strh	r3, [r7, #16]
      
      x1 += 2*decode->glyph_width;
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8003128:	b29b      	uxth	r3, r3
 800312a:	005b      	lsls	r3, r3, #1
 800312c:	b29a      	uxth	r2, r3
 800312e:	8a7b      	ldrh	r3, [r7, #18]
 8003130:	4413      	add	r3, r2
 8003132:	827b      	strh	r3, [r7, #18]
      y1 += 2*h;      
 8003134:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8003138:	b29b      	uxth	r3, r3
 800313a:	005b      	lsls	r3, r3, #1
 800313c:	b29a      	uxth	r2, r3
 800313e:	8a3b      	ldrh	r3, [r7, #16]
 8003140:	4413      	add	r3, r2
 8003142:	823b      	strh	r3, [r7, #16]
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8003144:	8a78      	ldrh	r0, [r7, #18]
 8003146:	8aba      	ldrh	r2, [r7, #20]
 8003148:	8af9      	ldrh	r1, [r7, #22]
 800314a:	8a3b      	ldrh	r3, [r7, #16]
 800314c:	9300      	str	r3, [sp, #0]
 800314e:	4603      	mov	r3, r0
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f000 fb6b 	bl	800382c <u8g2_IsIntersection>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d102      	bne.n	8003162 <u8g2_font_2x_decode_glyph+0xe6>
	return d;
 800315c:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8003160:	e03c      	b.n	80031dc <u8g2_font_2x_decode_glyph+0x160>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	2200      	movs	r2, #0
 8003166:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	2200      	movs	r2, #0
 800316c:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8003174:	4619      	mov	r1, r3
 8003176:	69f8      	ldr	r0, [r7, #28]
 8003178:	f7ff fe41 	bl	8002dfe <u8g2_font_decode_get_unsigned_bits>
 800317c:	4603      	mov	r3, r0
 800317e:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8003186:	4619      	mov	r1, r3
 8003188:	69f8      	ldr	r0, [r7, #28]
 800318a:	f7ff fe38 	bl	8002dfe <u8g2_font_decode_get_unsigned_bits>
 800318e:	4603      	mov	r3, r0
 8003190:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_2x_decode_len(u8g2, a, 0);
 8003192:	7bfb      	ldrb	r3, [r7, #15]
 8003194:	2200      	movs	r2, #0
 8003196:	4619      	mov	r1, r3
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f7ff fe9e 	bl	8002eda <u8g2_font_2x_decode_len>
	u8g2_font_2x_decode_len(u8g2, b, 1);
 800319e:	7bbb      	ldrb	r3, [r7, #14]
 80031a0:	2201      	movs	r2, #1
 80031a2:	4619      	mov	r1, r3
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f7ff fe98 	bl	8002eda <u8g2_font_2x_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 80031aa:	2101      	movs	r1, #1
 80031ac:	69f8      	ldr	r0, [r7, #28]
 80031ae:	f7ff fe26 	bl	8002dfe <u8g2_font_decode_get_unsigned_bits>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d1ec      	bne.n	8003192 <u8g2_font_2x_decode_glyph+0x116>

      if ( decode->y >= h )
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80031be:	f997 201b 	ldrsb.w	r2, [r7, #27]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	dd00      	ble.n	80031c8 <u8g2_font_2x_decode_glyph+0x14c>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 80031c6:	e7d2      	b.n	800316e <u8g2_font_2x_decode_glyph+0xf2>
	break;
 80031c8:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	7b9a      	ldrb	r2, [r3, #14]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  }
  return d*2;
 80031d4:	7e3b      	ldrb	r3, [r7, #24]
 80031d6:	005b      	lsls	r3, r3, #1
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	b25b      	sxtb	r3, r3
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3720      	adds	r7, #32
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b086      	sub	sp, #24
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	460b      	mov	r3, r1
 80031ee:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f4:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	3317      	adds	r3, #23
 80031fa:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 80031fc:	887b      	ldrh	r3, [r7, #2]
 80031fe:	2bff      	cmp	r3, #255	; 0xff
 8003200:	d82a      	bhi.n	8003258 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 8003202:	887b      	ldrh	r3, [r7, #2]
 8003204:	2b60      	cmp	r3, #96	; 0x60
 8003206:	d907      	bls.n	8003218 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800320e:	461a      	mov	r2, r3
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	4413      	add	r3, r2
 8003214:	617b      	str	r3, [r7, #20]
 8003216:	e009      	b.n	800322c <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8003218:	887b      	ldrh	r3, [r7, #2]
 800321a:	2b40      	cmp	r3, #64	; 0x40
 800321c:	d906      	bls.n	800322c <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8003224:	461a      	mov	r2, r3
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	4413      	add	r3, r2
 800322a:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	3301      	adds	r3, #1
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d04e      	beq.n	80032d4 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	b29b      	uxth	r3, r3
 800323c:	887a      	ldrh	r2, [r7, #2]
 800323e:	429a      	cmp	r2, r3
 8003240:	d102      	bne.n	8003248 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	3302      	adds	r3, #2
 8003246:	e049      	b.n	80032dc <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	3301      	adds	r3, #1
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	461a      	mov	r2, r3
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	4413      	add	r3, r2
 8003254:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8003256:	e7e9      	b.n	800322c <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 800325e:	461a      	mov	r2, r3
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	4413      	add	r3, r2
 8003264:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 800326a:	2100      	movs	r1, #0
 800326c:	6938      	ldr	r0, [r7, #16]
 800326e:	f7ff fcfd 	bl	8002c6c <u8g2_font_get_word>
 8003272:	4603      	mov	r3, r0
 8003274:	461a      	mov	r2, r3
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	4413      	add	r3, r2
 800327a:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 800327c:	2102      	movs	r1, #2
 800327e:	6938      	ldr	r0, [r7, #16]
 8003280:	f7ff fcf4 	bl	8002c6c <u8g2_font_get_word>
 8003284:	4603      	mov	r3, r0
 8003286:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	3304      	adds	r3, #4
 800328c:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 800328e:	89fa      	ldrh	r2, [r7, #14]
 8003290:	887b      	ldrh	r3, [r7, #2]
 8003292:	429a      	cmp	r2, r3
 8003294:	d3e9      	bcc.n	800326a <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 800329c:	89fb      	ldrh	r3, [r7, #14]
 800329e:	021b      	lsls	r3, r3, #8
 80032a0:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	3301      	adds	r3, #1
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	b29a      	uxth	r2, r3
 80032aa:	89fb      	ldrh	r3, [r7, #14]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 80032b0:	89fb      	ldrh	r3, [r7, #14]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d010      	beq.n	80032d8 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 80032b6:	89fa      	ldrh	r2, [r7, #14]
 80032b8:	887b      	ldrh	r3, [r7, #2]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d102      	bne.n	80032c4 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	3303      	adds	r3, #3
 80032c2:	e00b      	b.n	80032dc <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	3302      	adds	r3, #2
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	461a      	mov	r2, r3
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	4413      	add	r3, r2
 80032d0:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 80032d2:	e7e0      	b.n	8003296 <u8g2_font_get_glyph_data+0xb2>
	break;
 80032d4:	bf00      	nop
 80032d6:	e000      	b.n	80032da <u8g2_font_get_glyph_data+0xf6>
	break;
 80032d8:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 80032da:	2300      	movs	r3, #0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3718      	adds	r7, #24
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <u8g2_font_2x_draw_glyph>:
  }
  return dx;
}

static u8g2_uint_t u8g2_font_2x_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b086      	sub	sp, #24
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	4608      	mov	r0, r1
 80032ee:	4611      	mov	r1, r2
 80032f0:	461a      	mov	r2, r3
 80032f2:	4603      	mov	r3, r0
 80032f4:	817b      	strh	r3, [r7, #10]
 80032f6:	460b      	mov	r3, r1
 80032f8:	813b      	strh	r3, [r7, #8]
 80032fa:	4613      	mov	r3, r2
 80032fc:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t dx = 0;
 80032fe:	2300      	movs	r3, #0
 8003300:	82fb      	strh	r3, [r7, #22]
  u8g2->font_decode.target_x = x;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	897a      	ldrh	r2, [r7, #10]
 8003306:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  u8g2->font_decode.target_y = y;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	893a      	ldrh	r2, [r7, #8]
 800330e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8003312:	88fb      	ldrh	r3, [r7, #6]
 8003314:	4619      	mov	r1, r3
 8003316:	68f8      	ldr	r0, [r7, #12]
 8003318:	f7ff ff64 	bl	80031e4 <u8g2_font_get_glyph_data>
 800331c:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d005      	beq.n	8003330 <u8g2_font_2x_draw_glyph+0x4c>
  {
    dx = u8g2_font_2x_decode_glyph(u8g2, glyph_data);
 8003324:	6939      	ldr	r1, [r7, #16]
 8003326:	68f8      	ldr	r0, [r7, #12]
 8003328:	f7ff fea8 	bl	800307c <u8g2_font_2x_decode_glyph>
 800332c:	4603      	mov	r3, r0
 800332e:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 8003330:	8afb      	ldrh	r3, [r7, #22]
}
 8003332:	4618      	mov	r0, r3
 8003334:	3718      	adds	r7, #24
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}

0800333a <u8g2_DrawGlyphX2>:
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
}

u8g2_uint_t u8g2_DrawGlyphX2(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 800333a:	b580      	push	{r7, lr}
 800333c:	b084      	sub	sp, #16
 800333e:	af00      	add	r7, sp, #0
 8003340:	60f8      	str	r0, [r7, #12]
 8003342:	4608      	mov	r0, r1
 8003344:	4611      	mov	r1, r2
 8003346:	461a      	mov	r2, r3
 8003348:	4603      	mov	r3, r0
 800334a:	817b      	strh	r3, [r7, #10]
 800334c:	460b      	mov	r3, r1
 800334e:	813b      	strh	r3, [r7, #8]
 8003350:	4613      	mov	r3, r2
 8003352:	80fb      	strh	r3, [r7, #6]
  y += 2*u8g2->font_calc_vref(u8g2);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003358:	68f8      	ldr	r0, [r7, #12]
 800335a:	4798      	blx	r3
 800335c:	4603      	mov	r3, r0
 800335e:	005b      	lsls	r3, r3, #1
 8003360:	b29a      	uxth	r2, r3
 8003362:	893b      	ldrh	r3, [r7, #8]
 8003364:	4413      	add	r3, r2
 8003366:	813b      	strh	r3, [r7, #8]
  return u8g2_font_2x_draw_glyph(u8g2, x, y, encoding);
 8003368:	88fb      	ldrh	r3, [r7, #6]
 800336a:	893a      	ldrh	r2, [r7, #8]
 800336c:	8979      	ldrh	r1, [r7, #10]
 800336e:	68f8      	ldr	r0, [r7, #12]
 8003370:	f7ff ffb8 	bl	80032e4 <u8g2_font_2x_draw_glyph>
 8003374:	4603      	mov	r3, r0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3710      	adds	r7, #16
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}

0800337e <u8g2_draw_string_2x>:
  return sum;
}

static u8g2_uint_t u8g2_draw_string_2x(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string_2x(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 800337e:	b580      	push	{r7, lr}
 8003380:	b086      	sub	sp, #24
 8003382:	af00      	add	r7, sp, #0
 8003384:	60f8      	str	r0, [r7, #12]
 8003386:	607b      	str	r3, [r7, #4]
 8003388:	460b      	mov	r3, r1
 800338a:	817b      	strh	r3, [r7, #10]
 800338c:	4613      	mov	r3, r2
 800338e:	813b      	strh	r3, [r7, #8]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8003390:	68f8      	ldr	r0, [r7, #12]
 8003392:	f000 fd16 	bl	8003dc2 <u8x8_utf8_init>
  sum = 0;
 8003396:	2300      	movs	r3, #0
 8003398:	82fb      	strh	r3, [r7, #22]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	7812      	ldrb	r2, [r2, #0]
 80033a2:	4611      	mov	r1, r2
 80033a4:	68f8      	ldr	r0, [r7, #12]
 80033a6:	4798      	blx	r3
 80033a8:	4603      	mov	r3, r0
 80033aa:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 80033ac:	8abb      	ldrh	r3, [r7, #20]
 80033ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d018      	beq.n	80033e8 <u8g2_draw_string_2x+0x6a>
      break;
    str++;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	3301      	adds	r3, #1
 80033ba:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 80033bc:	8abb      	ldrh	r3, [r7, #20]
 80033be:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d0e9      	beq.n	800339a <u8g2_draw_string_2x+0x1c>
    {
      delta = u8g2_DrawGlyphX2(u8g2, x, y, e);
 80033c6:	8abb      	ldrh	r3, [r7, #20]
 80033c8:	893a      	ldrh	r2, [r7, #8]
 80033ca:	8979      	ldrh	r1, [r7, #10]
 80033cc:	68f8      	ldr	r0, [r7, #12]
 80033ce:	f7ff ffb4 	bl	800333a <u8g2_DrawGlyphX2>
 80033d2:	4603      	mov	r3, r0
 80033d4:	827b      	strh	r3, [r7, #18]
      x += delta;
 80033d6:	897a      	ldrh	r2, [r7, #10]
 80033d8:	8a7b      	ldrh	r3, [r7, #18]
 80033da:	4413      	add	r3, r2
 80033dc:	817b      	strh	r3, [r7, #10]
      sum += delta;    
 80033de:	8afa      	ldrh	r2, [r7, #22]
 80033e0:	8a7b      	ldrh	r3, [r7, #18]
 80033e2:	4413      	add	r3, r2
 80033e4:	82fb      	strh	r3, [r7, #22]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80033e6:	e7d8      	b.n	800339a <u8g2_draw_string_2x+0x1c>
      break;
 80033e8:	bf00      	nop
    }
  }
  return sum;
 80033ea:	8afb      	ldrh	r3, [r7, #22]
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3718      	adds	r7, #24
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <u8g2_DrawStrX2>:
  u8g2->u8x8.next_cb = u8x8_ascii_next;
  return u8g2_draw_string(u8g2, x, y, str);
}

u8g2_uint_t u8g2_DrawStrX2(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	607b      	str	r3, [r7, #4]
 80033fe:	460b      	mov	r3, r1
 8003400:	817b      	strh	r3, [r7, #10]
 8003402:	4613      	mov	r3, r2
 8003404:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	4a06      	ldr	r2, [pc, #24]	; (8003424 <u8g2_DrawStrX2+0x30>)
 800340a:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string_2x(u8g2, x, y, str);
 800340c:	893a      	ldrh	r2, [r7, #8]
 800340e:	8979      	ldrh	r1, [r7, #10]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	68f8      	ldr	r0, [r7, #12]
 8003414:	f7ff ffb3 	bl	800337e <u8g2_draw_string_2x>
 8003418:	4603      	mov	r3, r0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3710      	adds	r7, #16
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	08003ddf 	.word	0x08003ddf

08003428 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003434:	2b00      	cmp	r3, #0
 8003436:	d05d      	beq.n	80034f4 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f993 2081 	ldrsb.w	r2, [r3, #129]	; 0x81
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f993 2082 	ldrsb.w	r2, [r3, #130]	; 0x82
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8003456:	2b00      	cmp	r3, #0
 8003458:	d04d      	beq.n	80034f6 <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8003460:	2b01      	cmp	r3, #1
 8003462:	d11c      	bne.n	800349e <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f993 208e 	ldrsb.w	r2, [r3, #142]	; 0x8e
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f993 3083 	ldrsb.w	r3, [r3, #131]	; 0x83
 8003470:	429a      	cmp	r2, r3
 8003472:	da05      	bge.n	8003480 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f993 3084 	ldrsb.w	r3, [r3, #132]	; 0x84
 800348c:	429a      	cmp	r2, r3
 800348e:	dd32      	ble.n	80034f6 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f993 2084 	ldrsb.w	r2, [r3, #132]	; 0x84
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 800349c:	e02b      	b.n	80034f6 <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 80034a4:	461a      	mov	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 80034ac:	4619      	mov	r1, r3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 80034b4:	440b      	add	r3, r1
 80034b6:	429a      	cmp	r2, r3
 80034b8:	da0d      	bge.n	80034d6 <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 80034c0:	b2da      	uxtb	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	4413      	add	r3, r2
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	b25a      	sxtb	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 80034e2:	429a      	cmp	r2, r3
 80034e4:	dd07      	ble.n	80034f6 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f993 2080 	ldrsb.w	r2, [r3, #128]	; 0x80
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 80034f2:	e000      	b.n	80034f6 <u8g2_UpdateRefHeight+0xce>
    return;
 80034f4:	bf00      	nop
  }  
}
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  return 0;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	370c      	adds	r7, #12
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
	...

08003518 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4a04      	ldr	r2, [pc, #16]	; (8003534 <u8g2_SetFontPosBaseline+0x1c>)
 8003524:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003526:	bf00      	nop
 8003528:	370c      	adds	r7, #12
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	08003501 	.word	0x08003501

08003538 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003546:	683a      	ldr	r2, [r7, #0]
 8003548:	429a      	cmp	r2, r3
 800354a:	d00b      	beq.n	8003564 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	683a      	ldr	r2, [r7, #0]
 8003550:	659a      	str	r2, [r3, #88]	; 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	3374      	adds	r3, #116	; 0x74
 8003556:	6839      	ldr	r1, [r7, #0]
 8003558:	4618      	mov	r0, r3
 800355a:	f7ff fba7 	bl	8002cac <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f7ff ff62 	bl	8003428 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8003564:	bf00      	nop
 8003566:	3708      	adds	r7, #8
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 800356c:	b480      	push	{r7}
 800356e:	b087      	sub	sp, #28
 8003570:	af00      	add	r7, sp, #0
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	4611      	mov	r1, r2
 8003578:	461a      	mov	r2, r3
 800357a:	460b      	mov	r3, r1
 800357c:	80fb      	strh	r3, [r7, #6]
 800357e:	4613      	mov	r3, r2
 8003580:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	881b      	ldrh	r3, [r3, #0]
 8003586:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 8003588:	8afb      	ldrh	r3, [r7, #22]
 800358a:	82bb      	strh	r3, [r7, #20]
  b += *len;
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	881a      	ldrh	r2, [r3, #0]
 8003590:	8abb      	ldrh	r3, [r7, #20]
 8003592:	4413      	add	r3, r2
 8003594:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8003596:	8afa      	ldrh	r2, [r7, #22]
 8003598:	8abb      	ldrh	r3, [r7, #20]
 800359a:	429a      	cmp	r2, r3
 800359c:	d90b      	bls.n	80035b6 <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 800359e:	8afa      	ldrh	r2, [r7, #22]
 80035a0:	88bb      	ldrh	r3, [r7, #4]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d205      	bcs.n	80035b2 <u8g2_clip_intersection2+0x46>
    {
      b = d;
 80035a6:	88bb      	ldrh	r3, [r7, #4]
 80035a8:	82bb      	strh	r3, [r7, #20]
      b--;
 80035aa:	8abb      	ldrh	r3, [r7, #20]
 80035ac:	3b01      	subs	r3, #1
 80035ae:	82bb      	strh	r3, [r7, #20]
 80035b0:	e001      	b.n	80035b6 <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 80035b2:	88fb      	ldrh	r3, [r7, #6]
 80035b4:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 80035b6:	8afa      	ldrh	r2, [r7, #22]
 80035b8:	88bb      	ldrh	r3, [r7, #4]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d301      	bcc.n	80035c2 <u8g2_clip_intersection2+0x56>
    return 0;
 80035be:	2300      	movs	r3, #0
 80035c0:	e01c      	b.n	80035fc <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 80035c2:	8aba      	ldrh	r2, [r7, #20]
 80035c4:	88fb      	ldrh	r3, [r7, #6]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d801      	bhi.n	80035ce <u8g2_clip_intersection2+0x62>
    return 0;
 80035ca:	2300      	movs	r3, #0
 80035cc:	e016      	b.n	80035fc <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 80035ce:	8afa      	ldrh	r2, [r7, #22]
 80035d0:	88fb      	ldrh	r3, [r7, #6]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d201      	bcs.n	80035da <u8g2_clip_intersection2+0x6e>
    a = c;
 80035d6:	88fb      	ldrh	r3, [r7, #6]
 80035d8:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 80035da:	8aba      	ldrh	r2, [r7, #20]
 80035dc:	88bb      	ldrh	r3, [r7, #4]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d901      	bls.n	80035e6 <u8g2_clip_intersection2+0x7a>
    b = d;
 80035e2:	88bb      	ldrh	r3, [r7, #4]
 80035e4:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	8afa      	ldrh	r2, [r7, #22]
 80035ea:	801a      	strh	r2, [r3, #0]
  b -= a;
 80035ec:	8aba      	ldrh	r2, [r7, #20]
 80035ee:	8afb      	ldrh	r3, [r7, #22]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	82bb      	strh	r3, [r7, #20]
  *len = b;
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	8aba      	ldrh	r2, [r7, #20]
 80035f8:	801a      	strh	r2, [r3, #0]
  return 1;
 80035fa:	2301      	movs	r3, #1
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	371c      	adds	r7, #28
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8003608:	b590      	push	{r4, r7, lr}
 800360a:	b087      	sub	sp, #28
 800360c:	af02      	add	r7, sp, #8
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	4608      	mov	r0, r1
 8003612:	4611      	mov	r1, r2
 8003614:	461a      	mov	r2, r3
 8003616:	4603      	mov	r3, r0
 8003618:	817b      	strh	r3, [r7, #10]
 800361a:	460b      	mov	r3, r1
 800361c:	813b      	strh	r3, [r7, #8]
 800361e:	4613      	mov	r3, r2
 8003620:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003626:	893a      	ldrh	r2, [r7, #8]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8003630:	88f8      	ldrh	r0, [r7, #6]
 8003632:	893a      	ldrh	r2, [r7, #8]
 8003634:	8979      	ldrh	r1, [r7, #10]
 8003636:	f897 3020 	ldrb.w	r3, [r7, #32]
 800363a:	9300      	str	r3, [sp, #0]
 800363c:	4603      	mov	r3, r0
 800363e:	68f8      	ldr	r0, [r7, #12]
 8003640:	47a0      	blx	r4
}
 8003642:	bf00      	nop
 8003644:	3714      	adds	r7, #20
 8003646:	46bd      	mov	sp, r7
 8003648:	bd90      	pop	{r4, r7, pc}

0800364a <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800364a:	b590      	push	{r4, r7, lr}
 800364c:	b087      	sub	sp, #28
 800364e:	af02      	add	r7, sp, #8
 8003650:	60f8      	str	r0, [r7, #12]
 8003652:	4608      	mov	r0, r1
 8003654:	4611      	mov	r1, r2
 8003656:	461a      	mov	r2, r3
 8003658:	4603      	mov	r3, r0
 800365a:	817b      	strh	r3, [r7, #10]
 800365c:	460b      	mov	r3, r1
 800365e:	813b      	strh	r3, [r7, #8]
 8003660:	4613      	mov	r3, r2
 8003662:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800366a:	2b00      	cmp	r3, #0
 800366c:	d075      	beq.n	800375a <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 800366e:	88fb      	ldrh	r3, [r7, #6]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d072      	beq.n	800375a <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8003674:	88fb      	ldrh	r3, [r7, #6]
 8003676:	2b01      	cmp	r3, #1
 8003678:	d91a      	bls.n	80036b0 <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 800367a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800367e:	2b02      	cmp	r3, #2
 8003680:	d109      	bne.n	8003696 <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 8003682:	897a      	ldrh	r2, [r7, #10]
 8003684:	88fb      	ldrh	r3, [r7, #6]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	b29b      	uxth	r3, r3
 800368a:	817b      	strh	r3, [r7, #10]
	  x++;
 800368c:	897b      	ldrh	r3, [r7, #10]
 800368e:	3301      	adds	r3, #1
 8003690:	b29b      	uxth	r3, r3
 8003692:	817b      	strh	r3, [r7, #10]
 8003694:	e00c      	b.n	80036b0 <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 8003696:	f897 3020 	ldrb.w	r3, [r7, #32]
 800369a:	2b03      	cmp	r3, #3
 800369c:	d108      	bne.n	80036b0 <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 800369e:	893a      	ldrh	r2, [r7, #8]
 80036a0:	88fb      	ldrh	r3, [r7, #6]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	813b      	strh	r3, [r7, #8]
	  y++;
 80036a8:	893b      	ldrh	r3, [r7, #8]
 80036aa:	3301      	adds	r3, #1
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 80036b0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80036b4:	f003 0301 	and.w	r3, r3, #1
 80036b8:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 80036bc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d11a      	bne.n	80036fa <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 80036ca:	893b      	ldrh	r3, [r7, #8]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d83b      	bhi.n	8003748 <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 80036d6:	893b      	ldrh	r3, [r7, #8]
 80036d8:	429a      	cmp	r2, r3
 80036da:	d937      	bls.n	800374c <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80036e8:	1db9      	adds	r1, r7, #6
 80036ea:	f107 000a 	add.w	r0, r7, #10
 80036ee:	f7ff ff3d 	bl	800356c <u8g2_clip_intersection2>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d11a      	bne.n	800372e <u8g2_DrawHVLine+0xe4>
	  return;
 80036f8:	e02f      	b.n	800375a <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8003700:	897b      	ldrh	r3, [r7, #10]
 8003702:	429a      	cmp	r2, r3
 8003704:	d824      	bhi.n	8003750 <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800370c:	897b      	ldrh	r3, [r7, #10]
 800370e:	429a      	cmp	r2, r3
 8003710:	d920      	bls.n	8003754 <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800371e:	1db9      	adds	r1, r7, #6
 8003720:	f107 0008 	add.w	r0, r7, #8
 8003724:	f7ff ff22 	bl	800356c <u8g2_clip_intersection2>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d014      	beq.n	8003758 <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003732:	689c      	ldr	r4, [r3, #8]
 8003734:	8979      	ldrh	r1, [r7, #10]
 8003736:	893a      	ldrh	r2, [r7, #8]
 8003738:	88f8      	ldrh	r0, [r7, #6]
 800373a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800373e:	9300      	str	r3, [sp, #0]
 8003740:	4603      	mov	r3, r0
 8003742:	68f8      	ldr	r0, [r7, #12]
 8003744:	47a0      	blx	r4
 8003746:	e008      	b.n	800375a <u8g2_DrawHVLine+0x110>
	  return;
 8003748:	bf00      	nop
 800374a:	e006      	b.n	800375a <u8g2_DrawHVLine+0x110>
	  return;
 800374c:	bf00      	nop
 800374e:	e004      	b.n	800375a <u8g2_DrawHVLine+0x110>
	  return;
 8003750:	bf00      	nop
 8003752:	e002      	b.n	800375a <u8g2_DrawHVLine+0x110>
	  return;
 8003754:	bf00      	nop
 8003756:	e000      	b.n	800375a <u8g2_DrawHVLine+0x110>
	  return;
 8003758:	bf00      	nop
    }
}
 800375a:	3714      	adds	r7, #20
 800375c:	46bd      	mov	sp, r7
 800375e:	bd90      	pop	{r4, r7, pc}

08003760 <u8g2_DrawPixel>:
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
}

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af02      	add	r7, sp, #8
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	460b      	mov	r3, r1
 800376a:	807b      	strh	r3, [r7, #2]
 800376c:	4613      	mov	r3, r2
 800376e:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8003776:	883a      	ldrh	r2, [r7, #0]
 8003778:	429a      	cmp	r2, r3
 800377a:	d31a      	bcc.n	80037b2 <u8g2_DrawPixel+0x52>
    return;
  if ( y >= u8g2->user_y1 )
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8003782:	883a      	ldrh	r2, [r7, #0]
 8003784:	429a      	cmp	r2, r3
 8003786:	d216      	bcs.n	80037b6 <u8g2_DrawPixel+0x56>
    return;
  if ( x < u8g2->user_x0 )
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800378e:	887a      	ldrh	r2, [r7, #2]
 8003790:	429a      	cmp	r2, r3
 8003792:	d312      	bcc.n	80037ba <u8g2_DrawPixel+0x5a>
    return;
  if ( x >= u8g2->user_x1 )
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800379a:	887a      	ldrh	r2, [r7, #2]
 800379c:	429a      	cmp	r2, r3
 800379e:	d20e      	bcs.n	80037be <u8g2_DrawPixel+0x5e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 80037a0:	883a      	ldrh	r2, [r7, #0]
 80037a2:	8879      	ldrh	r1, [r7, #2]
 80037a4:	2300      	movs	r3, #0
 80037a6:	9300      	str	r3, [sp, #0]
 80037a8:	2301      	movs	r3, #1
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f7ff ff4d 	bl	800364a <u8g2_DrawHVLine>
 80037b0:	e006      	b.n	80037c0 <u8g2_DrawPixel+0x60>
    return;
 80037b2:	bf00      	nop
 80037b4:	e004      	b.n	80037c0 <u8g2_DrawPixel+0x60>
    return;
 80037b6:	bf00      	nop
 80037b8:	e002      	b.n	80037c0 <u8g2_DrawPixel+0x60>
    return;
 80037ba:	bf00      	nop
 80037bc:	e000      	b.n	80037c0 <u8g2_DrawPixel+0x60>
    return;
 80037be:	bf00      	nop
}
 80037c0:	3708      	adds	r7, #8
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}

080037c6 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 80037c6:	b490      	push	{r4, r7}
 80037c8:	b082      	sub	sp, #8
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	4604      	mov	r4, r0
 80037ce:	4608      	mov	r0, r1
 80037d0:	4611      	mov	r1, r2
 80037d2:	461a      	mov	r2, r3
 80037d4:	4623      	mov	r3, r4
 80037d6:	80fb      	strh	r3, [r7, #6]
 80037d8:	4603      	mov	r3, r0
 80037da:	80bb      	strh	r3, [r7, #4]
 80037dc:	460b      	mov	r3, r1
 80037de:	807b      	strh	r3, [r7, #2]
 80037e0:	4613      	mov	r3, r2
 80037e2:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 80037e4:	887a      	ldrh	r2, [r7, #2]
 80037e6:	88bb      	ldrh	r3, [r7, #4]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d20d      	bcs.n	8003808 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 80037ec:	883a      	ldrh	r2, [r7, #0]
 80037ee:	88fb      	ldrh	r3, [r7, #6]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d901      	bls.n	80037f8 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e014      	b.n	8003822 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 80037f8:	887a      	ldrh	r2, [r7, #2]
 80037fa:	883b      	ldrh	r3, [r7, #0]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d901      	bls.n	8003804 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8003800:	2301      	movs	r3, #1
 8003802:	e00e      	b.n	8003822 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8003804:	2300      	movs	r3, #0
 8003806:	e00c      	b.n	8003822 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8003808:	883a      	ldrh	r2, [r7, #0]
 800380a:	88fb      	ldrh	r3, [r7, #6]
 800380c:	429a      	cmp	r2, r3
 800380e:	d907      	bls.n	8003820 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8003810:	887a      	ldrh	r2, [r7, #2]
 8003812:	883b      	ldrh	r3, [r7, #0]
 8003814:	429a      	cmp	r2, r3
 8003816:	d901      	bls.n	800381c <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8003818:	2301      	movs	r3, #1
 800381a:	e002      	b.n	8003822 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 800381c:	2300      	movs	r3, #0
 800381e:	e000      	b.n	8003822 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8003820:	2300      	movs	r3, #0
    }
  }
}
 8003822:	4618      	mov	r0, r3
 8003824:	3708      	adds	r7, #8
 8003826:	46bd      	mov	sp, r7
 8003828:	bc90      	pop	{r4, r7}
 800382a:	4770      	bx	lr

0800382c <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	4608      	mov	r0, r1
 8003836:	4611      	mov	r1, r2
 8003838:	461a      	mov	r2, r3
 800383a:	4603      	mov	r3, r0
 800383c:	817b      	strh	r3, [r7, #10]
 800383e:	460b      	mov	r3, r1
 8003840:	813b      	strh	r3, [r7, #8]
 8003842:	4613      	mov	r3, r2
 8003844:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f8b3 104e 	ldrh.w	r1, [r3, #78]	; 0x4e
 8003852:	8b3b      	ldrh	r3, [r7, #24]
 8003854:	893a      	ldrh	r2, [r7, #8]
 8003856:	f7ff ffb6 	bl	80037c6 <u8g2_is_intersection_decision_tree>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d101      	bne.n	8003864 <u8g2_IsIntersection+0x38>
    return 0; 
 8003860:	2300      	movs	r3, #0
 8003862:	e00a      	b.n	800387a <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
 8003870:	88fb      	ldrh	r3, [r7, #6]
 8003872:	897a      	ldrh	r2, [r7, #10]
 8003874:	f7ff ffa7 	bl	80037c6 <u8g2_is_intersection_decision_tree>
 8003878:	4603      	mov	r3, r0
}
 800387a:	4618      	mov	r0, r3
 800387c:	3710      	adds	r7, #16
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}

08003882 <u8g2_DrawLine>:

#include "u8g2.h"


void u8g2_DrawLine(u8g2_t *u8g2, u8g2_uint_t x1, u8g2_uint_t y1, u8g2_uint_t x2, u8g2_uint_t y2)
{
 8003882:	b580      	push	{r7, lr}
 8003884:	b088      	sub	sp, #32
 8003886:	af00      	add	r7, sp, #0
 8003888:	60f8      	str	r0, [r7, #12]
 800388a:	4608      	mov	r0, r1
 800388c:	4611      	mov	r1, r2
 800388e:	461a      	mov	r2, r3
 8003890:	4603      	mov	r3, r0
 8003892:	817b      	strh	r3, [r7, #10]
 8003894:	460b      	mov	r3, r1
 8003896:	813b      	strh	r3, [r7, #8]
 8003898:	4613      	mov	r3, r2
 800389a:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t x,y;
  u8g2_uint_t dx, dy;
  u8g2_int_t err;
  u8g2_int_t ystep;

  uint8_t swapxy = 0;
 800389c:	2300      	movs	r3, #0
 800389e:	74fb      	strb	r3, [r7, #19]
  
  /* no intersection check at the moment, should be added... */

  if ( x1 > x2 ) dx = x1-x2; else dx = x2-x1;
 80038a0:	897a      	ldrh	r2, [r7, #10]
 80038a2:	88fb      	ldrh	r3, [r7, #6]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d904      	bls.n	80038b2 <u8g2_DrawLine+0x30>
 80038a8:	897a      	ldrh	r2, [r7, #10]
 80038aa:	88fb      	ldrh	r3, [r7, #6]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	837b      	strh	r3, [r7, #26]
 80038b0:	e003      	b.n	80038ba <u8g2_DrawLine+0x38>
 80038b2:	88fa      	ldrh	r2, [r7, #6]
 80038b4:	897b      	ldrh	r3, [r7, #10]
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	837b      	strh	r3, [r7, #26]
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;
 80038ba:	893a      	ldrh	r2, [r7, #8]
 80038bc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80038be:	429a      	cmp	r2, r3
 80038c0:	d904      	bls.n	80038cc <u8g2_DrawLine+0x4a>
 80038c2:	893a      	ldrh	r2, [r7, #8]
 80038c4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	833b      	strh	r3, [r7, #24]
 80038ca:	e003      	b.n	80038d4 <u8g2_DrawLine+0x52>
 80038cc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80038ce:	893b      	ldrh	r3, [r7, #8]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	833b      	strh	r3, [r7, #24]

  if ( dy > dx ) 
 80038d4:	8b3a      	ldrh	r2, [r7, #24]
 80038d6:	8b7b      	ldrh	r3, [r7, #26]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d913      	bls.n	8003904 <u8g2_DrawLine+0x82>
  {
    swapxy = 1;
 80038dc:	2301      	movs	r3, #1
 80038de:	74fb      	strb	r3, [r7, #19]
    tmp = dx; dx =dy; dy = tmp;
 80038e0:	8b7b      	ldrh	r3, [r7, #26]
 80038e2:	823b      	strh	r3, [r7, #16]
 80038e4:	8b3b      	ldrh	r3, [r7, #24]
 80038e6:	837b      	strh	r3, [r7, #26]
 80038e8:	8a3b      	ldrh	r3, [r7, #16]
 80038ea:	833b      	strh	r3, [r7, #24]
    tmp = x1; x1 =y1; y1 = tmp;
 80038ec:	897b      	ldrh	r3, [r7, #10]
 80038ee:	823b      	strh	r3, [r7, #16]
 80038f0:	893b      	ldrh	r3, [r7, #8]
 80038f2:	817b      	strh	r3, [r7, #10]
 80038f4:	8a3b      	ldrh	r3, [r7, #16]
 80038f6:	813b      	strh	r3, [r7, #8]
    tmp = x2; x2 =y2; y2 = tmp;
 80038f8:	88fb      	ldrh	r3, [r7, #6]
 80038fa:	823b      	strh	r3, [r7, #16]
 80038fc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80038fe:	80fb      	strh	r3, [r7, #6]
 8003900:	8a3b      	ldrh	r3, [r7, #16]
 8003902:	853b      	strh	r3, [r7, #40]	; 0x28
  }
  if ( x1 > x2 ) 
 8003904:	897a      	ldrh	r2, [r7, #10]
 8003906:	88fb      	ldrh	r3, [r7, #6]
 8003908:	429a      	cmp	r2, r3
 800390a:	d90b      	bls.n	8003924 <u8g2_DrawLine+0xa2>
  {
    tmp = x1; x1 =x2; x2 = tmp;
 800390c:	897b      	ldrh	r3, [r7, #10]
 800390e:	823b      	strh	r3, [r7, #16]
 8003910:	88fb      	ldrh	r3, [r7, #6]
 8003912:	817b      	strh	r3, [r7, #10]
 8003914:	8a3b      	ldrh	r3, [r7, #16]
 8003916:	80fb      	strh	r3, [r7, #6]
    tmp = y1; y1 =y2; y2 = tmp;
 8003918:	893b      	ldrh	r3, [r7, #8]
 800391a:	823b      	strh	r3, [r7, #16]
 800391c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800391e:	813b      	strh	r3, [r7, #8]
 8003920:	8a3b      	ldrh	r3, [r7, #16]
 8003922:	853b      	strh	r3, [r7, #40]	; 0x28
  }
  err = dx >> 1;
 8003924:	8b7b      	ldrh	r3, [r7, #26]
 8003926:	085b      	lsrs	r3, r3, #1
 8003928:	b29b      	uxth	r3, r3
 800392a:	82fb      	strh	r3, [r7, #22]
  if ( y2 > y1 ) ystep = 1; else ystep = -1;
 800392c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800392e:	893b      	ldrh	r3, [r7, #8]
 8003930:	429a      	cmp	r2, r3
 8003932:	d902      	bls.n	800393a <u8g2_DrawLine+0xb8>
 8003934:	2301      	movs	r3, #1
 8003936:	82bb      	strh	r3, [r7, #20]
 8003938:	e002      	b.n	8003940 <u8g2_DrawLine+0xbe>
 800393a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800393e:	82bb      	strh	r3, [r7, #20]
  y = y1;
 8003940:	893b      	ldrh	r3, [r7, #8]
 8003942:	83bb      	strh	r3, [r7, #28]

#ifndef  U8G2_16BIT
  if ( x2 == 255 )
    x2--;
#else
  if ( x2 == 0xffff )
 8003944:	88fb      	ldrh	r3, [r7, #6]
 8003946:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800394a:	4293      	cmp	r3, r2
 800394c:	d102      	bne.n	8003954 <u8g2_DrawLine+0xd2>
    x2--;
 800394e:	88fb      	ldrh	r3, [r7, #6]
 8003950:	3b01      	subs	r3, #1
 8003952:	80fb      	strh	r3, [r7, #6]
#endif

  for( x = x1; x <= x2; x++ )
 8003954:	897b      	ldrh	r3, [r7, #10]
 8003956:	83fb      	strh	r3, [r7, #30]
 8003958:	e024      	b.n	80039a4 <u8g2_DrawLine+0x122>
  {
    if ( swapxy == 0 ) 
 800395a:	7cfb      	ldrb	r3, [r7, #19]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d106      	bne.n	800396e <u8g2_DrawLine+0xec>
      u8g2_DrawPixel(u8g2, x, y); 
 8003960:	8bba      	ldrh	r2, [r7, #28]
 8003962:	8bfb      	ldrh	r3, [r7, #30]
 8003964:	4619      	mov	r1, r3
 8003966:	68f8      	ldr	r0, [r7, #12]
 8003968:	f7ff fefa 	bl	8003760 <u8g2_DrawPixel>
 800396c:	e005      	b.n	800397a <u8g2_DrawLine+0xf8>
    else 
      u8g2_DrawPixel(u8g2, y, x); 
 800396e:	8bfa      	ldrh	r2, [r7, #30]
 8003970:	8bbb      	ldrh	r3, [r7, #28]
 8003972:	4619      	mov	r1, r3
 8003974:	68f8      	ldr	r0, [r7, #12]
 8003976:	f7ff fef3 	bl	8003760 <u8g2_DrawPixel>
    err -= (u8g2_uint_t)dy;
 800397a:	8afa      	ldrh	r2, [r7, #22]
 800397c:	8b3b      	ldrh	r3, [r7, #24]
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	b29b      	uxth	r3, r3
 8003982:	82fb      	strh	r3, [r7, #22]
    if ( err < 0 ) 
 8003984:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003988:	2b00      	cmp	r3, #0
 800398a:	da08      	bge.n	800399e <u8g2_DrawLine+0x11c>
    {
      y += (u8g2_uint_t)ystep;
 800398c:	8aba      	ldrh	r2, [r7, #20]
 800398e:	8bbb      	ldrh	r3, [r7, #28]
 8003990:	4413      	add	r3, r2
 8003992:	83bb      	strh	r3, [r7, #28]
      err += (u8g2_uint_t)dx;
 8003994:	8afa      	ldrh	r2, [r7, #22]
 8003996:	8b7b      	ldrh	r3, [r7, #26]
 8003998:	4413      	add	r3, r2
 800399a:	b29b      	uxth	r3, r3
 800399c:	82fb      	strh	r3, [r7, #22]
  for( x = x1; x <= x2; x++ )
 800399e:	8bfb      	ldrh	r3, [r7, #30]
 80039a0:	3301      	adds	r3, #1
 80039a2:	83fb      	strh	r3, [r7, #30]
 80039a4:	8bfa      	ldrh	r2, [r7, #30]
 80039a6:	88fb      	ldrh	r3, [r7, #6]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d9d6      	bls.n	800395a <u8g2_DrawLine+0xd8>
    }
  }
}
 80039ac:	bf00      	nop
 80039ae:	bf00      	nop
 80039b0:	3720      	adds	r7, #32
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}

080039b6 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80039b6:	b480      	push	{r7}
 80039b8:	b089      	sub	sp, #36	; 0x24
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	60f8      	str	r0, [r7, #12]
 80039be:	4608      	mov	r0, r1
 80039c0:	4611      	mov	r1, r2
 80039c2:	461a      	mov	r2, r3
 80039c4:	4603      	mov	r3, r0
 80039c6:	817b      	strh	r3, [r7, #10]
 80039c8:	460b      	mov	r3, r1
 80039ca:	813b      	strh	r3, [r7, #8]
 80039cc:	4613      	mov	r3, r2
 80039ce:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 80039d0:	893b      	ldrh	r3, [r7, #8]
 80039d2:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 80039d4:	7efb      	ldrb	r3, [r7, #27]
 80039d6:	f003 0307 	and.w	r3, r3, #7
 80039da:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 80039dc:	2301      	movs	r3, #1
 80039de:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 80039e0:	7e3a      	ldrb	r2, [r7, #24]
 80039e2:	7efb      	ldrb	r3, [r7, #27]
 80039e4:	fa02 f303 	lsl.w	r3, r2, r3
 80039e8:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 80039ea:	2300      	movs	r3, #0
 80039ec:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 80039ee:	2300      	movs	r3, #0
 80039f0:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d801      	bhi.n	8003a00 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 80039fc:	7e3b      	ldrb	r3, [r7, #24]
 80039fe:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d001      	beq.n	8003a0e <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8003a0a:	7e3b      	ldrb	r3, [r7, #24]
 8003a0c:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8003a0e:	893b      	ldrh	r3, [r7, #8]
 8003a10:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 8003a12:	8afb      	ldrh	r3, [r7, #22]
 8003a14:	f023 0307 	bic.w	r3, r3, #7
 8003a18:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	7c1b      	ldrb	r3, [r3, #16]
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	8afa      	ldrh	r2, [r7, #22]
 8003a24:	fb12 f303 	smulbb	r3, r2, r3
 8003a28:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a2e:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 8003a30:	8afb      	ldrh	r3, [r7, #22]
 8003a32:	69fa      	ldr	r2, [r7, #28]
 8003a34:	4413      	add	r3, r2
 8003a36:	61fb      	str	r3, [r7, #28]
  ptr += x;
 8003a38:	897b      	ldrh	r3, [r7, #10]
 8003a3a:	69fa      	ldr	r2, [r7, #28]
 8003a3c:	4413      	add	r3, r2
 8003a3e:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 8003a40:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d117      	bne.n	8003a78 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	781a      	ldrb	r2, [r3, #0]
 8003a4c:	7ebb      	ldrb	r3, [r7, #26]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	b2da      	uxtb	r2, r3
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	781a      	ldrb	r2, [r3, #0]
 8003a5a:	7e7b      	ldrb	r3, [r7, #25]
 8003a5c:	4053      	eors	r3, r2
 8003a5e:	b2da      	uxtb	r2, r3
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	701a      	strb	r2, [r3, #0]
	ptr++;
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	3301      	adds	r3, #1
 8003a68:	61fb      	str	r3, [r7, #28]
	len--;
 8003a6a:	88fb      	ldrh	r3, [r7, #6]
 8003a6c:	3b01      	subs	r3, #1
 8003a6e:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 8003a70:	88fb      	ldrh	r3, [r7, #6]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d1e8      	bne.n	8003a48 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8003a76:	e038      	b.n	8003aea <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	781a      	ldrb	r2, [r3, #0]
 8003a7c:	7ebb      	ldrb	r3, [r7, #26]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	b2da      	uxtb	r2, r3
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	781a      	ldrb	r2, [r3, #0]
 8003a8a:	7e7b      	ldrb	r3, [r7, #25]
 8003a8c:	4053      	eors	r3, r2
 8003a8e:	b2da      	uxtb	r2, r3
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8003a94:	7efb      	ldrb	r3, [r7, #27]
 8003a96:	3301      	adds	r3, #1
 8003a98:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 8003a9a:	7efb      	ldrb	r3, [r7, #27]
 8003a9c:	f003 0307 	and.w	r3, r3, #7
 8003aa0:	76fb      	strb	r3, [r7, #27]
      len--;
 8003aa2:	88fb      	ldrh	r3, [r7, #6]
 8003aa4:	3b01      	subs	r3, #1
 8003aa6:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 8003aa8:	7efb      	ldrb	r3, [r7, #27]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d114      	bne.n	8003ad8 <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	4413      	add	r3, r2
 8003ab8:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d801      	bhi.n	8003ac8 <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d008      	beq.n	8003ae4 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	767b      	strb	r3, [r7, #25]
 8003ad6:	e005      	b.n	8003ae4 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 8003ad8:	7ebb      	ldrb	r3, [r7, #26]
 8003ada:	005b      	lsls	r3, r3, #1
 8003adc:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 8003ade:	7e7b      	ldrb	r3, [r7, #25]
 8003ae0:	005b      	lsls	r3, r3, #1
 8003ae2:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 8003ae4:	88fb      	ldrh	r3, [r7, #6]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d1c6      	bne.n	8003a78 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8003aea:	bf00      	nop
 8003aec:	3724      	adds	r7, #36	; 0x24
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr

08003af6 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8003af6:	b580      	push	{r7, lr}
 8003af8:	b082      	sub	sp, #8
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  u8g2->clip_y0 = 0;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b14:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b1e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  
  u8g2->cb->update_page_win(u8g2);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	4798      	blx	r3
}
 8003b2c:	bf00      	nop
 8003b2e:	3708      	adds	r7, #8
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	60b9      	str	r1, [r7, #8]
 8003b3e:	603b      	str	r3, [r7, #0]
 8003b40:	4613      	mov	r3, r2
 8003b42:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2200      	movs	r2, #0
 8003b48:	659a      	str	r2, [r3, #88]	; 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	683a      	ldr	r2, [r7, #0]
 8003b4e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	68ba      	ldr	r2, [r7, #8]
 8003b54:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	79fa      	ldrb	r2, [r7, #7]
 8003b5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  u8g2->bitmap_transparency = 0;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  
  u8g2->font_height_mode = 0; /* issue 2046 */
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
  u8g2->draw_color = 1;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2201      	movs	r2, #1
 8003b82:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  u8g2->is_auto_page_clear = 1;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
  
  u8g2->cb = u8g2_cb;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	69ba      	ldr	r2, [r7, #24]
 8003b92:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	68f8      	ldr	r0, [r7, #12]
 8003b9c:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8003b9e:	68f8      	ldr	r0, [r7, #12]
 8003ba0:	f7ff ffa9 	bl	8003af6 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	f7ff fcb7 	bl	8003518 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
#endif
}
 8003bb2:	bf00      	nop
 8003bb4:	3710      	adds	r7, #16
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}

08003bba <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8003bba:	b480      	push	{r7}
 8003bbc:	b085      	sub	sp, #20
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003bce:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8003bd0:	89fb      	ldrh	r3, [r7, #14]
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	89fa      	ldrh	r2, [r7, #14]
 8003bda:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  t = display_info->tile_width;
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	7c1b      	ldrb	r3, [r3, #16]
 8003be0:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 8003be2:	89fb      	ldrh	r3, [r7, #14]
 8003be4:	00db      	lsls	r3, r3, #3
 8003be6:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	89fa      	ldrh	r2, [r7, #14]
 8003bec:	875a      	strh	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003bf4:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8003bf6:	89fb      	ldrh	r3, [r7, #14]
 8003bf8:	00db      	lsls	r3, r3, #3
 8003bfa:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	89fa      	ldrh	r2, [r7, #14]
 8003c00:	87da      	strh	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_buf_height;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003c08:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8003c0a:	89fb      	ldrh	r3, [r7, #14]
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 8003c12:	4413      	add	r3, r2
 8003c14:	68ba      	ldr	r2, [r7, #8]
 8003c16:	7c52      	ldrb	r2, [r2, #17]
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	dd08      	ble.n	8003c2e <u8g2_update_dimension_common+0x74>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	7c5b      	ldrb	r3, [r3, #17]
 8003c20:	b29a      	uxth	r2, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8003c2e:	89fb      	ldrh	r3, [r7, #14]
 8003c30:	00db      	lsls	r3, r3, #3
 8003c32:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8003c50:	89fb      	ldrh	r3, [r7, #14]
 8003c52:	4413      	add	r3, r2
 8003c54:	b29a      	uxth	r2, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	8a9a      	ldrh	r2, [r3, #20]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  u8g2->height = display_info->pixel_height;
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	8ada      	ldrh	r2, [r3, #22]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 8003c70:	bf00      	nop
 8003c72:	3714      	adds	r7, #20
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af02      	add	r7, sp, #8
 8003c82:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f8b3 0052 	ldrh.w	r0, [r3, #82]	; 0x52
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003c9c:	9300      	str	r3, [sp, #0]
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f7ff fdc3 	bl	800382c <u8g2_IsIntersection>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d104      	bne.n	8003cb6 <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 8003cb4:	e03b      	b.n	8003d2e <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d205      	bcs.n	8003cda <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d905      	bls.n	8003cf6 <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d205      	bcs.n	8003d12 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d905      	bls.n	8003d2e <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 8003d2e:	bf00      	nop
 8003d30:	3708      	adds	r7, #8
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}

08003d36 <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 8003d36:	b580      	push	{r7, lr}
 8003d38:	b082      	sub	sp, #8
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f7ff ff3b 	bl	8003bba <u8g2_update_dimension_common>
}
 8003d44:	bf00      	nop
 8003d46:	3708      	adds	r7, #8
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  
  u8g2->user_y0 = u8g2->buf_y0;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  u8g2->user_y1 = u8g2->buf_y1;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f7ff ff7b 	bl	8003c7c <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8003d86:	bf00      	nop
 8003d88:	3708      	adds	r7, #8
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8003d8e:	b580      	push	{r7, lr}
 8003d90:	b086      	sub	sp, #24
 8003d92:	af02      	add	r7, sp, #8
 8003d94:	60f8      	str	r0, [r7, #12]
 8003d96:	4608      	mov	r0, r1
 8003d98:	4611      	mov	r1, r2
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	817b      	strh	r3, [r7, #10]
 8003da0:	460b      	mov	r3, r1
 8003da2:	813b      	strh	r3, [r7, #8]
 8003da4:	4613      	mov	r3, r2
 8003da6:	80fb      	strh	r3, [r7, #6]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8003da8:	88f8      	ldrh	r0, [r7, #6]
 8003daa:	893a      	ldrh	r2, [r7, #8]
 8003dac:	8979      	ldrh	r1, [r7, #10]
 8003dae:	7e3b      	ldrb	r3, [r7, #24]
 8003db0:	9300      	str	r3, [sp, #0]
 8003db2:	4603      	mov	r3, r0
 8003db4:	68f8      	ldr	r0, [r7, #12]
 8003db6:	f7ff fc27 	bl	8003608 <u8g2_draw_hv_line_2dir>
}
 8003dba:	bf00      	nop
 8003dbc:	3710      	adds	r7, #16
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}

08003dc2 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8003dc2:	b480      	push	{r7}
 8003dc4:	b083      	sub	sp, #12
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8003dd2:	bf00      	nop
 8003dd4:	370c      	adds	r7, #12
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr

08003dde <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8003dde:	b480      	push	{r7}
 8003de0:	b083      	sub	sp, #12
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
 8003de6:	460b      	mov	r3, r1
 8003de8:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8003dea:	78fb      	ldrb	r3, [r7, #3]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d002      	beq.n	8003df6 <u8x8_ascii_next+0x18>
 8003df0:	78fb      	ldrb	r3, [r7, #3]
 8003df2:	2b0a      	cmp	r3, #10
 8003df4:	d102      	bne.n	8003dfc <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 8003df6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003dfa:	e001      	b.n	8003e00 <u8x8_ascii_next+0x22>
  return b;
 8003dfc:	78fb      	ldrb	r3, [r7, #3]
 8003dfe:	b29b      	uxth	r3, r3
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	370c      	adds	r7, #12
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr

08003e0c <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 8003e0c:	b590      	push	{r4, r7, lr}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	460b      	mov	r3, r1
 8003e16:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	691c      	ldr	r4, [r3, #16]
 8003e1c:	78fa      	ldrb	r2, [r7, #3]
 8003e1e:	2300      	movs	r3, #0
 8003e20:	2120      	movs	r1, #32
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	47a0      	blx	r4
 8003e26:	4603      	mov	r3, r0
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd90      	pop	{r4, r7, pc}

08003e30 <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8003e30:	b590      	push	{r4, r7, lr}
 8003e32:	b085      	sub	sp, #20
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	460b      	mov	r3, r1
 8003e3a:	607a      	str	r2, [r7, #4]
 8003e3c:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	691c      	ldr	r4, [r3, #16]
 8003e42:	7afa      	ldrb	r2, [r7, #11]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2117      	movs	r1, #23
 8003e48:	68f8      	ldr	r0, [r7, #12]
 8003e4a:	47a0      	blx	r4
 8003e4c:	4603      	mov	r3, r0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3714      	adds	r7, #20
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd90      	pop	{r4, r7, pc}

08003e56 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8003e56:	b580      	push	{r7, lr}
 8003e58:	b082      	sub	sp, #8
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
 8003e5e:	460b      	mov	r3, r1
 8003e60:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8003e62:	1cfb      	adds	r3, r7, #3
 8003e64:	461a      	mov	r2, r3
 8003e66:	2101      	movs	r1, #1
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f7ff ffe1 	bl	8003e30 <u8x8_byte_SendBytes>
 8003e6e:	4603      	mov	r3, r0
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3708      	adds	r7, #8
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8003e78:	b590      	push	{r4, r7, lr}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	460b      	mov	r3, r1
 8003e82:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	68dc      	ldr	r4, [r3, #12]
 8003e88:	78fa      	ldrb	r2, [r7, #3]
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	2115      	movs	r1, #21
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	47a0      	blx	r4
 8003e92:	4603      	mov	r3, r0
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	370c      	adds	r7, #12
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd90      	pop	{r4, r7, pc}

08003e9c <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8003e9c:	b590      	push	{r4, r7, lr}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	460b      	mov	r3, r1
 8003ea6:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	68dc      	ldr	r4, [r3, #12]
 8003eac:	78fa      	ldrb	r2, [r7, #3]
 8003eae:	2300      	movs	r3, #0
 8003eb0:	2116      	movs	r1, #22
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	47a0      	blx	r4
 8003eb6:	4603      	mov	r3, r0
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	370c      	adds	r7, #12
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd90      	pop	{r4, r7, pc}

08003ec0 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8003ec0:	b590      	push	{r4, r7, lr}
 8003ec2:	b085      	sub	sp, #20
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	460b      	mov	r3, r1
 8003eca:	607a      	str	r2, [r7, #4]
 8003ecc:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	68dc      	ldr	r4, [r3, #12]
 8003ed2:	7afa      	ldrb	r2, [r7, #11]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2117      	movs	r1, #23
 8003ed8:	68f8      	ldr	r0, [r7, #12]
 8003eda:	47a0      	blx	r4
 8003edc:	4603      	mov	r3, r0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3714      	adds	r7, #20
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd90      	pop	{r4, r7, pc}

08003ee6 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8003ee6:	b590      	push	{r4, r7, lr}
 8003ee8:	b083      	sub	sp, #12
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	68dc      	ldr	r4, [r3, #12]
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	2118      	movs	r1, #24
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	47a0      	blx	r4
 8003efc:	4603      	mov	r3, r0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	370c      	adds	r7, #12
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd90      	pop	{r4, r7, pc}

08003f06 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8003f06:	b590      	push	{r4, r7, lr}
 8003f08:	b083      	sub	sp, #12
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	68dc      	ldr	r4, [r3, #12]
 8003f12:	2300      	movs	r3, #0
 8003f14:	2200      	movs	r2, #0
 8003f16:	2119      	movs	r1, #25
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	47a0      	blx	r4
 8003f1c:	4603      	mov	r3, r0
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	370c      	adds	r7, #12
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd90      	pop	{r4, r7, pc}

08003f26 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8003f26:	b590      	push	{r4, r7, lr}
 8003f28:	b085      	sub	sp, #20
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	6078      	str	r0, [r7, #4]
 8003f2e:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	73fb      	strb	r3, [r7, #15]
    data++;
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	3301      	adds	r3, #1
 8003f3a:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8003f3c:	7bfb      	ldrb	r3, [r7, #15]
 8003f3e:	2bfe      	cmp	r3, #254	; 0xfe
 8003f40:	d031      	beq.n	8003fa6 <u8x8_cad_SendSequence+0x80>
 8003f42:	2bfe      	cmp	r3, #254	; 0xfe
 8003f44:	dc3d      	bgt.n	8003fc2 <u8x8_cad_SendSequence+0x9c>
 8003f46:	2b19      	cmp	r3, #25
 8003f48:	dc3b      	bgt.n	8003fc2 <u8x8_cad_SendSequence+0x9c>
 8003f4a:	2b18      	cmp	r3, #24
 8003f4c:	da23      	bge.n	8003f96 <u8x8_cad_SendSequence+0x70>
 8003f4e:	2b16      	cmp	r3, #22
 8003f50:	dc02      	bgt.n	8003f58 <u8x8_cad_SendSequence+0x32>
 8003f52:	2b15      	cmp	r3, #21
 8003f54:	da03      	bge.n	8003f5e <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8003f56:	e034      	b.n	8003fc2 <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 8003f58:	2b17      	cmp	r3, #23
 8003f5a:	d00e      	beq.n	8003f7a <u8x8_cad_SendSequence+0x54>
	return;
 8003f5c:	e031      	b.n	8003fc2 <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	68dc      	ldr	r4, [r3, #12]
 8003f68:	7bba      	ldrb	r2, [r7, #14]
 8003f6a:	7bf9      	ldrb	r1, [r7, #15]
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	47a0      	blx	r4
	  data++;
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	3301      	adds	r3, #1
 8003f76:	603b      	str	r3, [r7, #0]
	  break;
 8003f78:	e022      	b.n	8003fc0 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8003f80:	f107 030e 	add.w	r3, r7, #14
 8003f84:	461a      	mov	r2, r3
 8003f86:	2101      	movs	r1, #1
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f7ff ff99 	bl	8003ec0 <u8x8_cad_SendData>
	  data++;
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	3301      	adds	r3, #1
 8003f92:	603b      	str	r3, [r7, #0]
	  break;
 8003f94:	e014      	b.n	8003fc0 <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	68dc      	ldr	r4, [r3, #12]
 8003f9a:	7bf9      	ldrb	r1, [r7, #15]
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	47a0      	blx	r4
	  break;
 8003fa4:	e00c      	b.n	8003fc0 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8003fac:	7bbb      	ldrb	r3, [r7, #14]
 8003fae:	461a      	mov	r2, r3
 8003fb0:	2129      	movs	r1, #41	; 0x29
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 f9d9 	bl	800436a <u8x8_gpio_call>
	  data++;
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	3301      	adds	r3, #1
 8003fbc:	603b      	str	r3, [r7, #0]
	  break;
 8003fbe:	bf00      	nop
    cmd = *data;
 8003fc0:	e7b6      	b.n	8003f30 <u8x8_cad_SendSequence+0xa>
	return;
 8003fc2:	bf00      	nop
    }
  }
}
 8003fc4:	3714      	adds	r7, #20
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd90      	pop	{r4, r7, pc}
	...

08003fcc <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8003fcc:	b590      	push	{r4, r7, lr}
 8003fce:	b085      	sub	sp, #20
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	607b      	str	r3, [r7, #4]
 8003fd6:	460b      	mov	r3, r1
 8003fd8:	72fb      	strb	r3, [r7, #11]
 8003fda:	4613      	mov	r3, r2
 8003fdc:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 8003fde:	7afb      	ldrb	r3, [r7, #11]
 8003fe0:	3b14      	subs	r3, #20
 8003fe2:	2b05      	cmp	r3, #5
 8003fe4:	d82f      	bhi.n	8004046 <u8x8_cad_001+0x7a>
 8003fe6:	a201      	add	r2, pc, #4	; (adr r2, 8003fec <u8x8_cad_001+0x20>)
 8003fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fec:	08004035 	.word	0x08004035
 8003ff0:	08004005 	.word	0x08004005
 8003ff4:	08004019 	.word	0x08004019
 8003ff8:	0800402d 	.word	0x0800402d
 8003ffc:	08004035 	.word	0x08004035
 8004000:	08004035 	.word	0x08004035
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 8004004:	2100      	movs	r1, #0
 8004006:	68f8      	ldr	r0, [r7, #12]
 8004008:	f7ff ff00 	bl	8003e0c <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 800400c:	7abb      	ldrb	r3, [r7, #10]
 800400e:	4619      	mov	r1, r3
 8004010:	68f8      	ldr	r0, [r7, #12]
 8004012:	f7ff ff20 	bl	8003e56 <u8x8_byte_SendByte>
      break;
 8004016:	e018      	b.n	800404a <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 8004018:	2100      	movs	r1, #0
 800401a:	68f8      	ldr	r0, [r7, #12]
 800401c:	f7ff fef6 	bl	8003e0c <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8004020:	7abb      	ldrb	r3, [r7, #10]
 8004022:	4619      	mov	r1, r3
 8004024:	68f8      	ldr	r0, [r7, #12]
 8004026:	f7ff ff16 	bl	8003e56 <u8x8_byte_SendByte>
      break;
 800402a:	e00e      	b.n	800404a <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 800402c:	2101      	movs	r1, #1
 800402e:	68f8      	ldr	r0, [r7, #12]
 8004030:	f7ff feec 	bl	8003e0c <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	691c      	ldr	r4, [r3, #16]
 8004038:	7aba      	ldrb	r2, [r7, #10]
 800403a:	7af9      	ldrb	r1, [r7, #11]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	47a0      	blx	r4
 8004042:	4603      	mov	r3, r0
 8004044:	e002      	b.n	800404c <u8x8_cad_001+0x80>
    default:
      return 0;
 8004046:	2300      	movs	r3, #0
 8004048:	e000      	b.n	800404c <u8x8_cad_001+0x80>
  }
  return 1;
 800404a:	2301      	movs	r3, #1
}
 800404c:	4618      	mov	r0, r3
 800404e:	3714      	adds	r7, #20
 8004050:	46bd      	mov	sp, r7
 8004052:	bd90      	pop	{r4, r7, pc}

08004054 <u8x8_d_ssd1306_sh1106_generic>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b086      	sub	sp, #24
 8004058:	af00      	add	r7, sp, #0
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	607b      	str	r3, [r7, #4]
 800405e:	460b      	mov	r3, r1
 8004060:	72fb      	strb	r3, [r7, #11]
 8004062:	4613      	mov	r3, r2
 8004064:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 8004066:	7afb      	ldrb	r3, [r7, #11]
 8004068:	3b0b      	subs	r3, #11
 800406a:	2b04      	cmp	r3, #4
 800406c:	f200 808a 	bhi.w	8004184 <u8x8_d_ssd1306_sh1106_generic+0x130>
 8004070:	a201      	add	r2, pc, #4	; (adr r2, 8004078 <u8x8_d_ssd1306_sh1106_generic+0x24>)
 8004072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004076:	bf00      	nop
 8004078:	0800408d 	.word	0x0800408d
 800407c:	08004185 	.word	0x08004185
 8004080:	080040a7 	.word	0x080040a7
 8004084:	080040d9 	.word	0x080040d9
 8004088:	080040f9 	.word	0x080040f9
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 800408c:	7abb      	ldrb	r3, [r7, #10]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d104      	bne.n	800409c <u8x8_d_ssd1306_sh1106_generic+0x48>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
 8004092:	4940      	ldr	r1, [pc, #256]	; (8004194 <u8x8_d_ssd1306_sh1106_generic+0x140>)
 8004094:	68f8      	ldr	r0, [r7, #12]
 8004096:	f7ff ff46 	bl	8003f26 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
      break;
 800409a:	e075      	b.n	8004188 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
 800409c:	493e      	ldr	r1, [pc, #248]	; (8004198 <u8x8_d_ssd1306_sh1106_generic+0x144>)
 800409e:	68f8      	ldr	r0, [r7, #12]
 80040a0:	f7ff ff41 	bl	8003f26 <u8x8_cad_SendSequence>
      break;
 80040a4:	e070      	b.n	8004188 <u8x8_d_ssd1306_sh1106_generic+0x134>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 80040a6:	7abb      	ldrb	r3, [r7, #10]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d10a      	bne.n	80040c2 <u8x8_d_ssd1306_sh1106_generic+0x6e>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
 80040ac:	493b      	ldr	r1, [pc, #236]	; (800419c <u8x8_d_ssd1306_sh1106_generic+0x148>)
 80040ae:	68f8      	ldr	r0, [r7, #12]
 80040b0:	f7ff ff39 	bl	8003f26 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	7c9a      	ldrb	r2, [r3, #18]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 80040c0:	e062      	b.n	8004188 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
 80040c2:	4937      	ldr	r1, [pc, #220]	; (80041a0 <u8x8_d_ssd1306_sh1106_generic+0x14c>)
 80040c4:	68f8      	ldr	r0, [r7, #12]
 80040c6:	f7ff ff2e 	bl	8003f26 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	7cda      	ldrb	r2, [r3, #19]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 80040d6:	e057      	b.n	8004188 <u8x8_d_ssd1306_sh1106_generic+0x134>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 80040d8:	68f8      	ldr	r0, [r7, #12]
 80040da:	f7ff ff04 	bl	8003ee6 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 80040de:	2181      	movs	r1, #129	; 0x81
 80040e0:	68f8      	ldr	r0, [r7, #12]
 80040e2:	f7ff fec9 	bl	8003e78 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
 80040e6:	7abb      	ldrb	r3, [r7, #10]
 80040e8:	4619      	mov	r1, r3
 80040ea:	68f8      	ldr	r0, [r7, #12]
 80040ec:	f7ff fed6 	bl	8003e9c <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 80040f0:	68f8      	ldr	r0, [r7, #12]
 80040f2:	f7ff ff08 	bl	8003f06 <u8x8_cad_EndTransfer>
      break;
 80040f6:	e047      	b.n	8004188 <u8x8_d_ssd1306_sh1106_generic+0x134>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 80040f8:	68f8      	ldr	r0, [r7, #12]
 80040fa:	f7ff fef4 	bl	8003ee6 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	795b      	ldrb	r3, [r3, #5]
 8004102:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 8004104:	7dfb      	ldrb	r3, [r7, #23]
 8004106:	00db      	lsls	r3, r3, #3
 8004108:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8004110:	7dfb      	ldrb	r3, [r7, #23]
 8004112:	4413      	add	r3, r2
 8004114:	75fb      	strb	r3, [r7, #23]
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 8004116:	2140      	movs	r1, #64	; 0x40
 8004118:	68f8      	ldr	r0, [r7, #12]
 800411a:	f7ff fead 	bl	8003e78 <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 800411e:	7dfb      	ldrb	r3, [r7, #23]
 8004120:	091b      	lsrs	r3, r3, #4
 8004122:	b2db      	uxtb	r3, r3
 8004124:	f043 0310 	orr.w	r3, r3, #16
 8004128:	b2db      	uxtb	r3, r3
 800412a:	4619      	mov	r1, r3
 800412c:	68f8      	ldr	r0, [r7, #12]
 800412e:	f7ff fea3 	bl	8003e78 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
 8004132:	7dfb      	ldrb	r3, [r7, #23]
 8004134:	f003 030f 	and.w	r3, r3, #15
 8004138:	b2db      	uxtb	r3, r3
 800413a:	4619      	mov	r1, r3
 800413c:	68f8      	ldr	r0, [r7, #12]
 800413e:	f7ff fead 	bl	8003e9c <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	799b      	ldrb	r3, [r3, #6]
 8004146:	f063 034f 	orn	r3, r3, #79	; 0x4f
 800414a:	b2db      	uxtb	r3, r3
 800414c:	4619      	mov	r1, r3
 800414e:	68f8      	ldr	r0, [r7, #12]
 8004150:	f7ff fea4 	bl	8003e9c <u8x8_cad_SendArg>

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	791b      	ldrb	r3, [r3, #4]
 8004158:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 8004160:	7dbb      	ldrb	r3, [r7, #22]
 8004162:	00db      	lsls	r3, r3, #3
 8004164:	b2db      	uxtb	r3, r3
 8004166:	693a      	ldr	r2, [r7, #16]
 8004168:	4619      	mov	r1, r3
 800416a:	68f8      	ldr	r0, [r7, #12]
 800416c:	f7ff fea8 	bl	8003ec0 <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 8004170:	7abb      	ldrb	r3, [r7, #10]
 8004172:	3b01      	subs	r3, #1
 8004174:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8004176:	7abb      	ldrb	r3, [r7, #10]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d1eb      	bne.n	8004154 <u8x8_d_ssd1306_sh1106_generic+0x100>
      
      u8x8_cad_EndTransfer(u8x8);
 800417c:	68f8      	ldr	r0, [r7, #12]
 800417e:	f7ff fec2 	bl	8003f06 <u8x8_cad_EndTransfer>
      break;
 8004182:	e001      	b.n	8004188 <u8x8_d_ssd1306_sh1106_generic+0x134>
    default:
      return 0;
 8004184:	2300      	movs	r3, #0
 8004186:	e000      	b.n	800418a <u8x8_d_ssd1306_sh1106_generic+0x136>
  }
  return 1;
 8004188:	2301      	movs	r3, #1
}
 800418a:	4618      	mov	r0, r3
 800418c:	3718      	adds	r7, #24
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	080048e8 	.word	0x080048e8
 8004198:	080048f0 	.word	0x080048f0
 800419c:	080048f8 	.word	0x080048f8
 80041a0:	08004900 	.word	0x08004900

080041a4 <u8x8_d_ssd1306_128x64_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	607b      	str	r3, [r7, #4]
 80041ae:	460b      	mov	r3, r1
 80041b0:	72fb      	strb	r3, [r7, #11]
 80041b2:	4613      	mov	r3, r2
 80041b4:	72bb      	strb	r3, [r7, #10]
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 80041b6:	7aba      	ldrb	r2, [r7, #10]
 80041b8:	7af9      	ldrb	r1, [r7, #11]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	68f8      	ldr	r0, [r7, #12]
 80041be:	f7ff ff49 	bl	8004054 <u8x8_d_ssd1306_sh1106_generic>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d001      	beq.n	80041cc <u8x8_d_ssd1306_128x64_noname+0x28>
    return 1;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e014      	b.n	80041f6 <u8x8_d_ssd1306_128x64_noname+0x52>
  
  switch(msg)
 80041cc:	7afb      	ldrb	r3, [r7, #11]
 80041ce:	2b09      	cmp	r3, #9
 80041d0:	d009      	beq.n	80041e6 <u8x8_d_ssd1306_128x64_noname+0x42>
 80041d2:	2b0a      	cmp	r3, #10
 80041d4:	d10c      	bne.n	80041f0 <u8x8_d_ssd1306_128x64_noname+0x4c>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 80041d6:	68f8      	ldr	r0, [r7, #12]
 80041d8:	f000 f82a 	bl	8004230 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
 80041dc:	4908      	ldr	r1, [pc, #32]	; (8004200 <u8x8_d_ssd1306_128x64_noname+0x5c>)
 80041de:	68f8      	ldr	r0, [r7, #12]
 80041e0:	f7ff fea1 	bl	8003f26 <u8x8_cad_SendSequence>
      break;
 80041e4:	e006      	b.n	80041f4 <u8x8_d_ssd1306_128x64_noname+0x50>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
 80041e6:	4907      	ldr	r1, [pc, #28]	; (8004204 <u8x8_d_ssd1306_128x64_noname+0x60>)
 80041e8:	68f8      	ldr	r0, [r7, #12]
 80041ea:	f000 f80d 	bl	8004208 <u8x8_d_helper_display_setup_memory>
      break;
 80041ee:	e001      	b.n	80041f4 <u8x8_d_ssd1306_128x64_noname+0x50>
    default:
      return 0;
 80041f0:	2300      	movs	r3, #0
 80041f2:	e000      	b.n	80041f6 <u8x8_d_ssd1306_128x64_noname+0x52>
  }
  return 1;
 80041f4:	2301      	movs	r3, #1
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3710      	adds	r7, #16
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	080048b0 	.word	0x080048b0
 8004204:	08004908 	.word	0x08004908

08004208 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	683a      	ldr	r2, [r7, #0]
 8004216:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	7c9a      	ldrb	r2, [r3, #18]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8004224:	bf00      	nop
 8004226:	370c      	adds	r7, #12
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr

08004230 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8004230:	b590      	push	{r4, r7, lr}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	695c      	ldr	r4, [r3, #20]
 800423c:	2300      	movs	r3, #0
 800423e:	2200      	movs	r2, #0
 8004240:	2128      	movs	r1, #40	; 0x28
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	68dc      	ldr	r4, [r3, #12]
 800424a:	2300      	movs	r3, #0
 800424c:	2200      	movs	r2, #0
 800424e:	2114      	movs	r1, #20
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8004254:	2201      	movs	r2, #1
 8004256:	214b      	movs	r1, #75	; 0x4b
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f000 f886 	bl	800436a <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	791b      	ldrb	r3, [r3, #4]
 8004264:	461a      	mov	r2, r3
 8004266:	2129      	movs	r1, #41	; 0x29
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f000 f87e 	bl	800436a <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 800426e:	2200      	movs	r2, #0
 8004270:	214b      	movs	r1, #75	; 0x4b
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 f879 	bl	800436a <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	791b      	ldrb	r3, [r3, #4]
 800427e:	461a      	mov	r2, r3
 8004280:	2129      	movs	r1, #41	; 0x29
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 f871 	bl	800436a <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8004288:	2201      	movs	r2, #1
 800428a:	214b      	movs	r1, #75	; 0x4b
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f000 f86c 	bl	800436a <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	795b      	ldrb	r3, [r3, #5]
 8004298:	461a      	mov	r2, r3
 800429a:	2129      	movs	r1, #41	; 0x29
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f000 f864 	bl	800436a <u8x8_gpio_call>
}    
 80042a2:	bf00      	nop
 80042a4:	370c      	adds	r7, #12
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd90      	pop	{r4, r7, pc}

080042aa <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 80042aa:	b590      	push	{r4, r7, lr}
 80042ac:	b085      	sub	sp, #20
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]
 80042b2:	4608      	mov	r0, r1
 80042b4:	4611      	mov	r1, r2
 80042b6:	461a      	mov	r2, r3
 80042b8:	4603      	mov	r3, r0
 80042ba:	70fb      	strb	r3, [r7, #3]
 80042bc:	460b      	mov	r3, r1
 80042be:	70bb      	strb	r3, [r7, #2]
 80042c0:	4613      	mov	r3, r2
 80042c2:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 80042c4:	78fb      	ldrb	r3, [r7, #3]
 80042c6:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 80042c8:	78bb      	ldrb	r3, [r7, #2]
 80042ca:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 80042cc:	787b      	ldrb	r3, [r7, #1]
 80042ce:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 80042d0:	6a3b      	ldr	r3, [r7, #32]
 80042d2:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	689c      	ldr	r4, [r3, #8]
 80042d8:	f107 0308 	add.w	r3, r7, #8
 80042dc:	2201      	movs	r2, #1
 80042de:	210f      	movs	r1, #15
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	47a0      	blx	r4
 80042e4:	4603      	mov	r3, r0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3714      	adds	r7, #20
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd90      	pop	{r4, r7, pc}

080042ee <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 80042ee:	b590      	push	{r4, r7, lr}
 80042f0:	b083      	sub	sp, #12
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	689c      	ldr	r4, [r3, #8]
 80042fa:	2300      	movs	r3, #0
 80042fc:	2200      	movs	r2, #0
 80042fe:	2109      	movs	r1, #9
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	47a0      	blx	r4
}
 8004304:	bf00      	nop
 8004306:	370c      	adds	r7, #12
 8004308:	46bd      	mov	sp, r7
 800430a:	bd90      	pop	{r4, r7, pc}

0800430c <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 800430c:	b590      	push	{r4, r7, lr}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	689c      	ldr	r4, [r3, #8]
 8004318:	2300      	movs	r3, #0
 800431a:	2200      	movs	r2, #0
 800431c:	210a      	movs	r1, #10
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	47a0      	blx	r4
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}
 8004322:	bf00      	nop
 8004324:	370c      	adds	r7, #12
 8004326:	46bd      	mov	sp, r7
 8004328:	bd90      	pop	{r4, r7, pc}

0800432a <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 800432a:	b590      	push	{r4, r7, lr}
 800432c:	b083      	sub	sp, #12
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
 8004332:	460b      	mov	r3, r1
 8004334:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	689c      	ldr	r4, [r3, #8]
 800433a:	78fa      	ldrb	r2, [r7, #3]
 800433c:	2300      	movs	r3, #0
 800433e:	210b      	movs	r1, #11
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	47a0      	blx	r4
}
 8004344:	bf00      	nop
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	bd90      	pop	{r4, r7, pc}

0800434c <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 800434c:	b590      	push	{r4, r7, lr}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	689c      	ldr	r4, [r3, #8]
 8004358:	2300      	movs	r3, #0
 800435a:	2200      	movs	r2, #0
 800435c:	2110      	movs	r1, #16
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	47a0      	blx	r4
}
 8004362:	bf00      	nop
 8004364:	370c      	adds	r7, #12
 8004366:	46bd      	mov	sp, r7
 8004368:	bd90      	pop	{r4, r7, pc}

0800436a <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 800436a:	b590      	push	{r4, r7, lr}
 800436c:	b083      	sub	sp, #12
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
 8004372:	460b      	mov	r3, r1
 8004374:	70fb      	strb	r3, [r7, #3]
 8004376:	4613      	mov	r3, r2
 8004378:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	695c      	ldr	r4, [r3, #20]
 800437e:	78ba      	ldrb	r2, [r7, #2]
 8004380:	78f9      	ldrb	r1, [r7, #3]
 8004382:	2300      	movs	r3, #0
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	47a0      	blx	r4
}
 8004388:	bf00      	nop
 800438a:	370c      	adds	r7, #12
 800438c:	46bd      	mov	sp, r7
 800438e:	bd90      	pop	{r4, r7, pc}

08004390 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8004390:	b480      	push	{r7}
 8004392:	b085      	sub	sp, #20
 8004394:	af00      	add	r7, sp, #0
 8004396:	60f8      	str	r0, [r7, #12]
 8004398:	607b      	str	r3, [r7, #4]
 800439a:	460b      	mov	r3, r1
 800439c:	72fb      	strb	r3, [r7, #11]
 800439e:	4613      	mov	r3, r2
 80043a0:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 80043a2:	2300      	movs	r3, #0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3714      	adds	r7, #20
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr

080043b0 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a11      	ldr	r2, [pc, #68]	; (8004408 <u8x8_SetupDefaults+0x58>)
 80043c2:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4a10      	ldr	r2, [pc, #64]	; (8004408 <u8x8_SetupDefaults+0x58>)
 80043c8:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a0e      	ldr	r2, [pc, #56]	; (8004408 <u8x8_SetupDefaults+0x58>)
 80043ce:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	4a0d      	ldr	r2, [pc, #52]	; (8004408 <u8x8_SetupDefaults+0x58>)
 80043d4:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	22ff      	movs	r2, #255	; 0xff
 80043f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	22ff      	movs	r2, #255	; 0xff
 80043f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 80043fc:	bf00      	nop
 80043fe:	370c      	adds	r7, #12
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr
 8004408:	08004391 	.word	0x08004391

0800440c <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b084      	sub	sp, #16
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	607a      	str	r2, [r7, #4]
 8004418:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 800441a:	68f8      	ldr	r0, [r7, #12]
 800441c:	f7ff ffc8 	bl	80043b0 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	68ba      	ldr	r2, [r7, #8]
 8004424:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	683a      	ldr	r2, [r7, #0]
 8004430:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	69ba      	ldr	r2, [r7, #24]
 8004436:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8004438:	68f8      	ldr	r0, [r7, #12]
 800443a:	f7ff ff58 	bl	80042ee <u8x8_SetupMemory>
}
 800443e:	bf00      	nop
 8004440:	3710      	adds	r7, #16
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
	...

08004448 <__libc_init_array>:
 8004448:	b570      	push	{r4, r5, r6, lr}
 800444a:	4d0d      	ldr	r5, [pc, #52]	; (8004480 <__libc_init_array+0x38>)
 800444c:	4c0d      	ldr	r4, [pc, #52]	; (8004484 <__libc_init_array+0x3c>)
 800444e:	1b64      	subs	r4, r4, r5
 8004450:	10a4      	asrs	r4, r4, #2
 8004452:	2600      	movs	r6, #0
 8004454:	42a6      	cmp	r6, r4
 8004456:	d109      	bne.n	800446c <__libc_init_array+0x24>
 8004458:	4d0b      	ldr	r5, [pc, #44]	; (8004488 <__libc_init_array+0x40>)
 800445a:	4c0c      	ldr	r4, [pc, #48]	; (800448c <__libc_init_array+0x44>)
 800445c:	f000 f87c 	bl	8004558 <_init>
 8004460:	1b64      	subs	r4, r4, r5
 8004462:	10a4      	asrs	r4, r4, #2
 8004464:	2600      	movs	r6, #0
 8004466:	42a6      	cmp	r6, r4
 8004468:	d105      	bne.n	8004476 <__libc_init_array+0x2e>
 800446a:	bd70      	pop	{r4, r5, r6, pc}
 800446c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004470:	4798      	blx	r3
 8004472:	3601      	adds	r6, #1
 8004474:	e7ee      	b.n	8004454 <__libc_init_array+0xc>
 8004476:	f855 3b04 	ldr.w	r3, [r5], #4
 800447a:	4798      	blx	r3
 800447c:	3601      	adds	r6, #1
 800447e:	e7f2      	b.n	8004466 <__libc_init_array+0x1e>
 8004480:	08004950 	.word	0x08004950
 8004484:	08004950 	.word	0x08004950
 8004488:	08004950 	.word	0x08004950
 800448c:	08004954 	.word	0x08004954

08004490 <__itoa>:
 8004490:	1e93      	subs	r3, r2, #2
 8004492:	2b22      	cmp	r3, #34	; 0x22
 8004494:	b510      	push	{r4, lr}
 8004496:	460c      	mov	r4, r1
 8004498:	d904      	bls.n	80044a4 <__itoa+0x14>
 800449a:	2300      	movs	r3, #0
 800449c:	700b      	strb	r3, [r1, #0]
 800449e:	461c      	mov	r4, r3
 80044a0:	4620      	mov	r0, r4
 80044a2:	bd10      	pop	{r4, pc}
 80044a4:	2a0a      	cmp	r2, #10
 80044a6:	d109      	bne.n	80044bc <__itoa+0x2c>
 80044a8:	2800      	cmp	r0, #0
 80044aa:	da07      	bge.n	80044bc <__itoa+0x2c>
 80044ac:	232d      	movs	r3, #45	; 0x2d
 80044ae:	700b      	strb	r3, [r1, #0]
 80044b0:	4240      	negs	r0, r0
 80044b2:	2101      	movs	r1, #1
 80044b4:	4421      	add	r1, r4
 80044b6:	f000 f80d 	bl	80044d4 <__utoa>
 80044ba:	e7f1      	b.n	80044a0 <__itoa+0x10>
 80044bc:	2100      	movs	r1, #0
 80044be:	e7f9      	b.n	80044b4 <__itoa+0x24>

080044c0 <itoa>:
 80044c0:	f7ff bfe6 	b.w	8004490 <__itoa>

080044c4 <memset>:
 80044c4:	4402      	add	r2, r0
 80044c6:	4603      	mov	r3, r0
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d100      	bne.n	80044ce <memset+0xa>
 80044cc:	4770      	bx	lr
 80044ce:	f803 1b01 	strb.w	r1, [r3], #1
 80044d2:	e7f9      	b.n	80044c8 <memset+0x4>

080044d4 <__utoa>:
 80044d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044d6:	4c1f      	ldr	r4, [pc, #124]	; (8004554 <__utoa+0x80>)
 80044d8:	b08b      	sub	sp, #44	; 0x2c
 80044da:	4605      	mov	r5, r0
 80044dc:	460b      	mov	r3, r1
 80044de:	466e      	mov	r6, sp
 80044e0:	f104 0c20 	add.w	ip, r4, #32
 80044e4:	6820      	ldr	r0, [r4, #0]
 80044e6:	6861      	ldr	r1, [r4, #4]
 80044e8:	4637      	mov	r7, r6
 80044ea:	c703      	stmia	r7!, {r0, r1}
 80044ec:	3408      	adds	r4, #8
 80044ee:	4564      	cmp	r4, ip
 80044f0:	463e      	mov	r6, r7
 80044f2:	d1f7      	bne.n	80044e4 <__utoa+0x10>
 80044f4:	7921      	ldrb	r1, [r4, #4]
 80044f6:	7139      	strb	r1, [r7, #4]
 80044f8:	1e91      	subs	r1, r2, #2
 80044fa:	6820      	ldr	r0, [r4, #0]
 80044fc:	6038      	str	r0, [r7, #0]
 80044fe:	2922      	cmp	r1, #34	; 0x22
 8004500:	f04f 0100 	mov.w	r1, #0
 8004504:	d904      	bls.n	8004510 <__utoa+0x3c>
 8004506:	7019      	strb	r1, [r3, #0]
 8004508:	460b      	mov	r3, r1
 800450a:	4618      	mov	r0, r3
 800450c:	b00b      	add	sp, #44	; 0x2c
 800450e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004510:	1e58      	subs	r0, r3, #1
 8004512:	4684      	mov	ip, r0
 8004514:	fbb5 f7f2 	udiv	r7, r5, r2
 8004518:	fb02 5617 	mls	r6, r2, r7, r5
 800451c:	3628      	adds	r6, #40	; 0x28
 800451e:	446e      	add	r6, sp
 8004520:	460c      	mov	r4, r1
 8004522:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8004526:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800452a:	462e      	mov	r6, r5
 800452c:	42b2      	cmp	r2, r6
 800452e:	f101 0101 	add.w	r1, r1, #1
 8004532:	463d      	mov	r5, r7
 8004534:	d9ee      	bls.n	8004514 <__utoa+0x40>
 8004536:	2200      	movs	r2, #0
 8004538:	545a      	strb	r2, [r3, r1]
 800453a:	1919      	adds	r1, r3, r4
 800453c:	1aa5      	subs	r5, r4, r2
 800453e:	42aa      	cmp	r2, r5
 8004540:	dae3      	bge.n	800450a <__utoa+0x36>
 8004542:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8004546:	780e      	ldrb	r6, [r1, #0]
 8004548:	7006      	strb	r6, [r0, #0]
 800454a:	3201      	adds	r2, #1
 800454c:	f801 5901 	strb.w	r5, [r1], #-1
 8004550:	e7f4      	b.n	800453c <__utoa+0x68>
 8004552:	bf00      	nop
 8004554:	08004920 	.word	0x08004920

08004558 <_init>:
 8004558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800455a:	bf00      	nop
 800455c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800455e:	bc08      	pop	{r3}
 8004560:	469e      	mov	lr, r3
 8004562:	4770      	bx	lr

08004564 <_fini>:
 8004564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004566:	bf00      	nop
 8004568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800456a:	bc08      	pop	{r3}
 800456c:	469e      	mov	lr, r3
 800456e:	4770      	bx	lr
