
oled_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003be4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000046c  08003cf0  08003cf0  00013cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800415c  0800415c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800415c  0800415c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800415c  0800415c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800415c  0800415c  0001415c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004160  08004160  00014160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004164  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000520  20000070  080041d4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000590  080041d4  00020590  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000467ba  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e14  00000000  00000000  00066853  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002e08  00000000  00000000  00069668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002c60  00000000  00000000  0006c470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018c5c  00000000  00000000  0006f0d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016c7f  00000000  00000000  00087d2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099f59  00000000  00000000  0009e9ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00138904  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ce74  00000000  00000000  00138954  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003cd8 	.word	0x08003cd8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003cd8 	.word	0x08003cd8

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b098      	sub	sp, #96	; 0x60
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fafb 	bl	800074c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f841 	bl	80001dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f8bb 	bl	80002d4 <MX_GPIO_Init>
  MX_SPI1_Init();
 800015e:	f000 f883 	bl	8000268 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

	u8g2_Setup_ssd1306_128x64_noname_f(&u8g2, U8G2_R0, u8x8_byte_stm32_hw_spi,
 8000162:	4b17      	ldr	r3, [pc, #92]	; (80001c0 <main+0x74>)
 8000164:	4a17      	ldr	r2, [pc, #92]	; (80001c4 <main+0x78>)
 8000166:	4918      	ldr	r1, [pc, #96]	; (80001c8 <main+0x7c>)
 8000168:	4818      	ldr	r0, [pc, #96]	; (80001cc <main+0x80>)
 800016a:	f001 fd21 	bl	8001bb0 <u8g2_Setup_ssd1306_128x64_noname_f>
			u8x8_stm32_gpio_and_delay);

	u8g2_InitDisplay(&u8g2);
 800016e:	4817      	ldr	r0, [pc, #92]	; (80001cc <main+0x80>)
 8000170:	f003 f869 	bl	8003246 <u8x8_InitDisplay>
	u8g2_SetPowerSave(&u8g2, 0);
 8000174:	2100      	movs	r1, #0
 8000176:	4815      	ldr	r0, [pc, #84]	; (80001cc <main+0x80>)
 8000178:	f003 f874 	bl	8003264 <u8x8_SetPowerSave>

	u8g2_SetFont(&u8g2, u8g2_font_5x7_tr);
 800017c:	4914      	ldr	r1, [pc, #80]	; (80001d0 <main+0x84>)
 800017e:	4813      	ldr	r0, [pc, #76]	; (80001cc <main+0x80>)
 8000180:	f002 f9b0 	bl	80024e4 <u8g2_SetFont>
	u8g2_SetDisplayRotation(&u8g2, U8G2_R2);
 8000184:	4913      	ldr	r1, [pc, #76]	; (80001d4 <main+0x88>)
 8000186:	4811      	ldr	r0, [pc, #68]	; (80001cc <main+0x80>)
 8000188:	f002 fc1e 	bl	80029c8 <u8g2_SetDisplayRotation>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	sprintf(str, "Hello :)");
 800018c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000190:	4911      	ldr	r1, [pc, #68]	; (80001d8 <main+0x8c>)
 8000192:	4618      	mov	r0, r3
 8000194:	f003 f926 	bl	80033e4 <siprintf>
	u8g2_FirstPage(&u8g2);
 8000198:	480c      	ldr	r0, [pc, #48]	; (80001cc <main+0x80>)
 800019a:	f001 fcb6 	bl	8001b0a <u8g2_FirstPage>




			do {
				u8g2_DrawStrX2(&u8g2, 5, 30, str);
 800019e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80001a2:	221e      	movs	r2, #30
 80001a4:	2105      	movs	r1, #5
 80001a6:	4809      	ldr	r0, [pc, #36]	; (80001cc <main+0x80>)
 80001a8:	f002 f8fe 	bl	80023a8 <u8g2_DrawStrX2>
				u8g2_NextPage(&u8g2);
 80001ac:	4807      	ldr	r0, [pc, #28]	; (80001cc <main+0x80>)
 80001ae:	f001 fcc0 	bl	8001b32 <u8g2_NextPage>
		} while (u8g2_NextPage(&u8g2));
 80001b2:	4806      	ldr	r0, [pc, #24]	; (80001cc <main+0x80>)
 80001b4:	f001 fcbd 	bl	8001b32 <u8g2_NextPage>
 80001b8:	4603      	mov	r3, r0
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	e7ef      	b.n	800019e <main+0x52>
 80001be:	bf00      	nop
 80001c0:	08000545 	.word	0x08000545
 80001c4:	0800063d 	.word	0x0800063d
 80001c8:	08004040 	.word	0x08004040
 80001cc:	200000e4 	.word	0x200000e4
 80001d0:	08003d1c 	.word	0x08003d1c
 80001d4:	0800404c 	.word	0x0800404c
 80001d8:	08003cf0 	.word	0x08003cf0

080001dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	b090      	sub	sp, #64	; 0x40
 80001e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001e2:	f107 0318 	add.w	r3, r7, #24
 80001e6:	2228      	movs	r2, #40	; 0x28
 80001e8:	2100      	movs	r1, #0
 80001ea:	4618      	mov	r0, r3
 80001ec:	f003 f8f2 	bl	80033d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001f0:	1d3b      	adds	r3, r7, #4
 80001f2:	2200      	movs	r2, #0
 80001f4:	601a      	str	r2, [r3, #0]
 80001f6:	605a      	str	r2, [r3, #4]
 80001f8:	609a      	str	r2, [r3, #8]
 80001fa:	60da      	str	r2, [r3, #12]
 80001fc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001fe:	2301      	movs	r3, #1
 8000200:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000202:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000206:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000208:	2300      	movs	r3, #0
 800020a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800020c:	2301      	movs	r3, #1
 800020e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000210:	2302      	movs	r3, #2
 8000212:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000214:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000218:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800021a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800021e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000220:	f107 0318 	add.w	r3, r7, #24
 8000224:	4618      	mov	r0, r3
 8000226:	f000 fd97 	bl	8000d58 <HAL_RCC_OscConfig>
 800022a:	4603      	mov	r3, r0
 800022c:	2b00      	cmp	r3, #0
 800022e:	d001      	beq.n	8000234 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000230:	f000 f8ae 	bl	8000390 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000234:	230f      	movs	r3, #15
 8000236:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000238:	2302      	movs	r3, #2
 800023a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800023c:	2300      	movs	r3, #0
 800023e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000240:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000244:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000246:	2300      	movs	r3, #0
 8000248:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800024a:	1d3b      	adds	r3, r7, #4
 800024c:	2102      	movs	r1, #2
 800024e:	4618      	mov	r0, r3
 8000250:	f001 f804 	bl	800125c <HAL_RCC_ClockConfig>
 8000254:	4603      	mov	r3, r0
 8000256:	2b00      	cmp	r3, #0
 8000258:	d001      	beq.n	800025e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800025a:	f000 f899 	bl	8000390 <Error_Handler>
  }
}
 800025e:	bf00      	nop
 8000260:	3740      	adds	r7, #64	; 0x40
 8000262:	46bd      	mov	sp, r7
 8000264:	bd80      	pop	{r7, pc}
	...

08000268 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800026c:	4b17      	ldr	r3, [pc, #92]	; (80002cc <MX_SPI1_Init+0x64>)
 800026e:	4a18      	ldr	r2, [pc, #96]	; (80002d0 <MX_SPI1_Init+0x68>)
 8000270:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000272:	4b16      	ldr	r3, [pc, #88]	; (80002cc <MX_SPI1_Init+0x64>)
 8000274:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000278:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800027a:	4b14      	ldr	r3, [pc, #80]	; (80002cc <MX_SPI1_Init+0x64>)
 800027c:	2200      	movs	r2, #0
 800027e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000280:	4b12      	ldr	r3, [pc, #72]	; (80002cc <MX_SPI1_Init+0x64>)
 8000282:	2200      	movs	r2, #0
 8000284:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000286:	4b11      	ldr	r3, [pc, #68]	; (80002cc <MX_SPI1_Init+0x64>)
 8000288:	2200      	movs	r2, #0
 800028a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800028c:	4b0f      	ldr	r3, [pc, #60]	; (80002cc <MX_SPI1_Init+0x64>)
 800028e:	2200      	movs	r2, #0
 8000290:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000292:	4b0e      	ldr	r3, [pc, #56]	; (80002cc <MX_SPI1_Init+0x64>)
 8000294:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000298:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800029a:	4b0c      	ldr	r3, [pc, #48]	; (80002cc <MX_SPI1_Init+0x64>)
 800029c:	2208      	movs	r2, #8
 800029e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80002a0:	4b0a      	ldr	r3, [pc, #40]	; (80002cc <MX_SPI1_Init+0x64>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80002a6:	4b09      	ldr	r3, [pc, #36]	; (80002cc <MX_SPI1_Init+0x64>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80002ac:	4b07      	ldr	r3, [pc, #28]	; (80002cc <MX_SPI1_Init+0x64>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80002b2:	4b06      	ldr	r3, [pc, #24]	; (80002cc <MX_SPI1_Init+0x64>)
 80002b4:	220a      	movs	r2, #10
 80002b6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <MX_SPI1_Init+0x64>)
 80002ba:	f001 f935 	bl	8001528 <HAL_SPI_Init>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d001      	beq.n	80002c8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80002c4:	f000 f864 	bl	8000390 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80002c8:	bf00      	nop
 80002ca:	bd80      	pop	{r7, pc}
 80002cc:	2000008c 	.word	0x2000008c
 80002d0:	40013000 	.word	0x40013000

080002d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b088      	sub	sp, #32
 80002d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002da:	f107 0310 	add.w	r3, r7, #16
 80002de:	2200      	movs	r2, #0
 80002e0:	601a      	str	r2, [r3, #0]
 80002e2:	605a      	str	r2, [r3, #4]
 80002e4:	609a      	str	r2, [r3, #8]
 80002e6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002e8:	4b26      	ldr	r3, [pc, #152]	; (8000384 <MX_GPIO_Init+0xb0>)
 80002ea:	699b      	ldr	r3, [r3, #24]
 80002ec:	4a25      	ldr	r2, [pc, #148]	; (8000384 <MX_GPIO_Init+0xb0>)
 80002ee:	f043 0320 	orr.w	r3, r3, #32
 80002f2:	6193      	str	r3, [r2, #24]
 80002f4:	4b23      	ldr	r3, [pc, #140]	; (8000384 <MX_GPIO_Init+0xb0>)
 80002f6:	699b      	ldr	r3, [r3, #24]
 80002f8:	f003 0320 	and.w	r3, r3, #32
 80002fc:	60fb      	str	r3, [r7, #12]
 80002fe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000300:	4b20      	ldr	r3, [pc, #128]	; (8000384 <MX_GPIO_Init+0xb0>)
 8000302:	699b      	ldr	r3, [r3, #24]
 8000304:	4a1f      	ldr	r2, [pc, #124]	; (8000384 <MX_GPIO_Init+0xb0>)
 8000306:	f043 0304 	orr.w	r3, r3, #4
 800030a:	6193      	str	r3, [r2, #24]
 800030c:	4b1d      	ldr	r3, [pc, #116]	; (8000384 <MX_GPIO_Init+0xb0>)
 800030e:	699b      	ldr	r3, [r3, #24]
 8000310:	f003 0304 	and.w	r3, r3, #4
 8000314:	60bb      	str	r3, [r7, #8]
 8000316:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000318:	4b1a      	ldr	r3, [pc, #104]	; (8000384 <MX_GPIO_Init+0xb0>)
 800031a:	699b      	ldr	r3, [r3, #24]
 800031c:	4a19      	ldr	r2, [pc, #100]	; (8000384 <MX_GPIO_Init+0xb0>)
 800031e:	f043 0308 	orr.w	r3, r3, #8
 8000322:	6193      	str	r3, [r2, #24]
 8000324:	4b17      	ldr	r3, [pc, #92]	; (8000384 <MX_GPIO_Init+0xb0>)
 8000326:	699b      	ldr	r3, [r3, #24]
 8000328:	f003 0308 	and.w	r3, r3, #8
 800032c:	607b      	str	r3, [r7, #4]
 800032e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OLED_RST_Pin|OLED_DC_Pin, GPIO_PIN_SET);
 8000330:	2201      	movs	r2, #1
 8000332:	2150      	movs	r1, #80	; 0x50
 8000334:	4814      	ldr	r0, [pc, #80]	; (8000388 <MX_GPIO_Init+0xb4>)
 8000336:	f000 fcf7 	bl	8000d28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_SET);
 800033a:	2201      	movs	r2, #1
 800033c:	2101      	movs	r1, #1
 800033e:	4813      	ldr	r0, [pc, #76]	; (800038c <MX_GPIO_Init+0xb8>)
 8000340:	f000 fcf2 	bl	8000d28 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_RST_Pin OLED_DC_Pin */
  GPIO_InitStruct.Pin = OLED_RST_Pin|OLED_DC_Pin;
 8000344:	2350      	movs	r3, #80	; 0x50
 8000346:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000348:	2301      	movs	r3, #1
 800034a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800034c:	2301      	movs	r3, #1
 800034e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000350:	2303      	movs	r3, #3
 8000352:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000354:	f107 0310 	add.w	r3, r7, #16
 8000358:	4619      	mov	r1, r3
 800035a:	480b      	ldr	r0, [pc, #44]	; (8000388 <MX_GPIO_Init+0xb4>)
 800035c:	f000 fb60 	bl	8000a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : OLED_CS_Pin */
  GPIO_InitStruct.Pin = OLED_CS_Pin;
 8000360:	2301      	movs	r3, #1
 8000362:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000364:	2301      	movs	r3, #1
 8000366:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000368:	2301      	movs	r3, #1
 800036a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800036c:	2303      	movs	r3, #3
 800036e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OLED_CS_GPIO_Port, &GPIO_InitStruct);
 8000370:	f107 0310 	add.w	r3, r7, #16
 8000374:	4619      	mov	r1, r3
 8000376:	4805      	ldr	r0, [pc, #20]	; (800038c <MX_GPIO_Init+0xb8>)
 8000378:	f000 fb52 	bl	8000a20 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800037c:	bf00      	nop
 800037e:	3720      	adds	r7, #32
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}
 8000384:	40021000 	.word	0x40021000
 8000388:	40010800 	.word	0x40010800
 800038c:	40010c00 	.word	0x40010c00

08000390 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000394:	b672      	cpsid	i
}
 8000396:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000398:	e7fe      	b.n	8000398 <Error_Handler+0x8>
	...

0800039c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800039c:	b480      	push	{r7}
 800039e:	b085      	sub	sp, #20
 80003a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003a2:	4b15      	ldr	r3, [pc, #84]	; (80003f8 <HAL_MspInit+0x5c>)
 80003a4:	699b      	ldr	r3, [r3, #24]
 80003a6:	4a14      	ldr	r2, [pc, #80]	; (80003f8 <HAL_MspInit+0x5c>)
 80003a8:	f043 0301 	orr.w	r3, r3, #1
 80003ac:	6193      	str	r3, [r2, #24]
 80003ae:	4b12      	ldr	r3, [pc, #72]	; (80003f8 <HAL_MspInit+0x5c>)
 80003b0:	699b      	ldr	r3, [r3, #24]
 80003b2:	f003 0301 	and.w	r3, r3, #1
 80003b6:	60bb      	str	r3, [r7, #8]
 80003b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003ba:	4b0f      	ldr	r3, [pc, #60]	; (80003f8 <HAL_MspInit+0x5c>)
 80003bc:	69db      	ldr	r3, [r3, #28]
 80003be:	4a0e      	ldr	r2, [pc, #56]	; (80003f8 <HAL_MspInit+0x5c>)
 80003c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003c4:	61d3      	str	r3, [r2, #28]
 80003c6:	4b0c      	ldr	r3, [pc, #48]	; (80003f8 <HAL_MspInit+0x5c>)
 80003c8:	69db      	ldr	r3, [r3, #28]
 80003ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003ce:	607b      	str	r3, [r7, #4]
 80003d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003d2:	4b0a      	ldr	r3, [pc, #40]	; (80003fc <HAL_MspInit+0x60>)
 80003d4:	685b      	ldr	r3, [r3, #4]
 80003d6:	60fb      	str	r3, [r7, #12]
 80003d8:	68fb      	ldr	r3, [r7, #12]
 80003da:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003de:	60fb      	str	r3, [r7, #12]
 80003e0:	68fb      	ldr	r3, [r7, #12]
 80003e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003e6:	60fb      	str	r3, [r7, #12]
 80003e8:	4a04      	ldr	r2, [pc, #16]	; (80003fc <HAL_MspInit+0x60>)
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003ee:	bf00      	nop
 80003f0:	3714      	adds	r7, #20
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bc80      	pop	{r7}
 80003f6:	4770      	bx	lr
 80003f8:	40021000 	.word	0x40021000
 80003fc:	40010000 	.word	0x40010000

08000400 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b088      	sub	sp, #32
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000408:	f107 0310 	add.w	r3, r7, #16
 800040c:	2200      	movs	r2, #0
 800040e:	601a      	str	r2, [r3, #0]
 8000410:	605a      	str	r2, [r3, #4]
 8000412:	609a      	str	r2, [r3, #8]
 8000414:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	4a15      	ldr	r2, [pc, #84]	; (8000470 <HAL_SPI_MspInit+0x70>)
 800041c:	4293      	cmp	r3, r2
 800041e:	d123      	bne.n	8000468 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000420:	4b14      	ldr	r3, [pc, #80]	; (8000474 <HAL_SPI_MspInit+0x74>)
 8000422:	699b      	ldr	r3, [r3, #24]
 8000424:	4a13      	ldr	r2, [pc, #76]	; (8000474 <HAL_SPI_MspInit+0x74>)
 8000426:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800042a:	6193      	str	r3, [r2, #24]
 800042c:	4b11      	ldr	r3, [pc, #68]	; (8000474 <HAL_SPI_MspInit+0x74>)
 800042e:	699b      	ldr	r3, [r3, #24]
 8000430:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000434:	60fb      	str	r3, [r7, #12]
 8000436:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000438:	4b0e      	ldr	r3, [pc, #56]	; (8000474 <HAL_SPI_MspInit+0x74>)
 800043a:	699b      	ldr	r3, [r3, #24]
 800043c:	4a0d      	ldr	r2, [pc, #52]	; (8000474 <HAL_SPI_MspInit+0x74>)
 800043e:	f043 0304 	orr.w	r3, r3, #4
 8000442:	6193      	str	r3, [r2, #24]
 8000444:	4b0b      	ldr	r3, [pc, #44]	; (8000474 <HAL_SPI_MspInit+0x74>)
 8000446:	699b      	ldr	r3, [r3, #24]
 8000448:	f003 0304 	and.w	r3, r3, #4
 800044c:	60bb      	str	r3, [r7, #8]
 800044e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000450:	23a0      	movs	r3, #160	; 0xa0
 8000452:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000454:	2302      	movs	r3, #2
 8000456:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000458:	2303      	movs	r3, #3
 800045a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800045c:	f107 0310 	add.w	r3, r7, #16
 8000460:	4619      	mov	r1, r3
 8000462:	4805      	ldr	r0, [pc, #20]	; (8000478 <HAL_SPI_MspInit+0x78>)
 8000464:	f000 fadc 	bl	8000a20 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000468:	bf00      	nop
 800046a:	3720      	adds	r7, #32
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}
 8000470:	40013000 	.word	0x40013000
 8000474:	40021000 	.word	0x40021000
 8000478:	40010800 	.word	0x40010800

0800047c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000480:	e7fe      	b.n	8000480 <NMI_Handler+0x4>

08000482 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000482:	b480      	push	{r7}
 8000484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000486:	e7fe      	b.n	8000486 <HardFault_Handler+0x4>

08000488 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800048c:	e7fe      	b.n	800048c <MemManage_Handler+0x4>

0800048e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800048e:	b480      	push	{r7}
 8000490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000492:	e7fe      	b.n	8000492 <BusFault_Handler+0x4>

08000494 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000498:	e7fe      	b.n	8000498 <UsageFault_Handler+0x4>

0800049a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800049a:	b480      	push	{r7}
 800049c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800049e:	bf00      	nop
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bc80      	pop	{r7}
 80004a4:	4770      	bx	lr

080004a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004a6:	b480      	push	{r7}
 80004a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004aa:	bf00      	nop
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bc80      	pop	{r7}
 80004b0:	4770      	bx	lr

080004b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004b2:	b480      	push	{r7}
 80004b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004b6:	bf00      	nop
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bc80      	pop	{r7}
 80004bc:	4770      	bx	lr

080004be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004be:	b580      	push	{r7, lr}
 80004c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004c2:	f000 f989 	bl	80007d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004c6:	bf00      	nop
 80004c8:	bd80      	pop	{r7, pc}
	...

080004cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b086      	sub	sp, #24
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004d4:	4a14      	ldr	r2, [pc, #80]	; (8000528 <_sbrk+0x5c>)
 80004d6:	4b15      	ldr	r3, [pc, #84]	; (800052c <_sbrk+0x60>)
 80004d8:	1ad3      	subs	r3, r2, r3
 80004da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004dc:	697b      	ldr	r3, [r7, #20]
 80004de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004e0:	4b13      	ldr	r3, [pc, #76]	; (8000530 <_sbrk+0x64>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d102      	bne.n	80004ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004e8:	4b11      	ldr	r3, [pc, #68]	; (8000530 <_sbrk+0x64>)
 80004ea:	4a12      	ldr	r2, [pc, #72]	; (8000534 <_sbrk+0x68>)
 80004ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004ee:	4b10      	ldr	r3, [pc, #64]	; (8000530 <_sbrk+0x64>)
 80004f0:	681a      	ldr	r2, [r3, #0]
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	4413      	add	r3, r2
 80004f6:	693a      	ldr	r2, [r7, #16]
 80004f8:	429a      	cmp	r2, r3
 80004fa:	d207      	bcs.n	800050c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004fc:	f002 ff40 	bl	8003380 <__errno>
 8000500:	4603      	mov	r3, r0
 8000502:	220c      	movs	r2, #12
 8000504:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000506:	f04f 33ff 	mov.w	r3, #4294967295
 800050a:	e009      	b.n	8000520 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800050c:	4b08      	ldr	r3, [pc, #32]	; (8000530 <_sbrk+0x64>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000512:	4b07      	ldr	r3, [pc, #28]	; (8000530 <_sbrk+0x64>)
 8000514:	681a      	ldr	r2, [r3, #0]
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	4413      	add	r3, r2
 800051a:	4a05      	ldr	r2, [pc, #20]	; (8000530 <_sbrk+0x64>)
 800051c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800051e:	68fb      	ldr	r3, [r7, #12]
}
 8000520:	4618      	mov	r0, r3
 8000522:	3718      	adds	r7, #24
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}
 8000528:	20005000 	.word	0x20005000
 800052c:	00000400 	.word	0x00000400
 8000530:	20000178 	.word	0x20000178
 8000534:	20000590 	.word	0x20000590

08000538 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800053c:	bf00      	nop
 800053e:	46bd      	mov	sp, r7
 8000540:	bc80      	pop	{r7}
 8000542:	4770      	bx	lr

08000544 <u8x8_stm32_gpio_and_delay>:
#define TX_TIMEOUT		100

extern SPI_HandleTypeDef hspi1;

uint8_t u8x8_stm32_gpio_and_delay(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0
 800054a:	60f8      	str	r0, [r7, #12]
 800054c:	607b      	str	r3, [r7, #4]
 800054e:	460b      	mov	r3, r1
 8000550:	72fb      	strb	r3, [r7, #11]
 8000552:	4613      	mov	r3, r2
 8000554:	72bb      	strb	r3, [r7, #10]
	/* STM32 supports HW SPI, Remove unused cases like U8X8_MSG_DELAY_XXX & U8X8_MSG_GPIO_XXX */
	switch(msg)
 8000556:	7afb      	ldrb	r3, [r7, #11]
 8000558:	3b28      	subs	r3, #40	; 0x28
 800055a:	2b23      	cmp	r3, #35	; 0x23
 800055c:	d864      	bhi.n	8000628 <u8x8_stm32_gpio_and_delay+0xe4>
 800055e:	a201      	add	r2, pc, #4	; (adr r2, 8000564 <u8x8_stm32_gpio_and_delay+0x20>)
 8000560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000564:	08000629 	.word	0x08000629
 8000568:	080005f5 	.word	0x080005f5
 800056c:	08000629 	.word	0x08000629
 8000570:	08000629 	.word	0x08000629
 8000574:	08000629 	.word	0x08000629
 8000578:	08000629 	.word	0x08000629
 800057c:	08000629 	.word	0x08000629
 8000580:	08000629 	.word	0x08000629
 8000584:	08000629 	.word	0x08000629
 8000588:	08000629 	.word	0x08000629
 800058c:	08000629 	.word	0x08000629
 8000590:	08000629 	.word	0x08000629
 8000594:	08000629 	.word	0x08000629
 8000598:	08000629 	.word	0x08000629
 800059c:	08000629 	.word	0x08000629
 80005a0:	08000629 	.word	0x08000629
 80005a4:	08000629 	.word	0x08000629
 80005a8:	08000629 	.word	0x08000629
 80005ac:	08000629 	.word	0x08000629
 80005b0:	08000629 	.word	0x08000629
 80005b4:	08000629 	.word	0x08000629
 80005b8:	08000629 	.word	0x08000629
 80005bc:	08000629 	.word	0x08000629
 80005c0:	08000629 	.word	0x08000629
 80005c4:	08000629 	.word	0x08000629
 80005c8:	08000629 	.word	0x08000629
 80005cc:	08000629 	.word	0x08000629
 80005d0:	08000629 	.word	0x08000629
 80005d4:	08000629 	.word	0x08000629
 80005d8:	08000629 	.word	0x08000629
 80005dc:	08000629 	.word	0x08000629
 80005e0:	08000629 	.word	0x08000629
 80005e4:	08000629 	.word	0x08000629
 80005e8:	080005ff 	.word	0x080005ff
 80005ec:	0800060d 	.word	0x0800060d
 80005f0:	0800061b 	.word	0x0800061b
	case U8X8_MSG_GPIO_AND_DELAY_INIT:
		/* Insert codes for initialization */
		break;
	case U8X8_MSG_DELAY_MILLI:
		/* ms Delay */
		HAL_Delay(arg_int);
 80005f4:	7abb      	ldrb	r3, [r7, #10]
 80005f6:	4618      	mov	r0, r3
 80005f8:	f000 f90a 	bl	8000810 <HAL_Delay>
		break;
 80005fc:	e014      	b.n	8000628 <u8x8_stm32_gpio_and_delay+0xe4>
	case U8X8_MSG_GPIO_CS:
		/* Insert codes for SS pin control */
		HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, arg_int);
 80005fe:	7abb      	ldrb	r3, [r7, #10]
 8000600:	461a      	mov	r2, r3
 8000602:	2101      	movs	r1, #1
 8000604:	480b      	ldr	r0, [pc, #44]	; (8000634 <u8x8_stm32_gpio_and_delay+0xf0>)
 8000606:	f000 fb8f 	bl	8000d28 <HAL_GPIO_WritePin>
		break;
 800060a:	e00d      	b.n	8000628 <u8x8_stm32_gpio_and_delay+0xe4>
	case U8X8_MSG_GPIO_DC:
		/* Insert codes for DC pin control */
		HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, arg_int);
 800060c:	7abb      	ldrb	r3, [r7, #10]
 800060e:	461a      	mov	r2, r3
 8000610:	2140      	movs	r1, #64	; 0x40
 8000612:	4809      	ldr	r0, [pc, #36]	; (8000638 <u8x8_stm32_gpio_and_delay+0xf4>)
 8000614:	f000 fb88 	bl	8000d28 <HAL_GPIO_WritePin>
		break;
 8000618:	e006      	b.n	8000628 <u8x8_stm32_gpio_and_delay+0xe4>
	case U8X8_MSG_GPIO_RESET:
		/* Insert codes for RST pin control */
		HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, arg_int);
 800061a:	7abb      	ldrb	r3, [r7, #10]
 800061c:	461a      	mov	r2, r3
 800061e:	2110      	movs	r1, #16
 8000620:	4805      	ldr	r0, [pc, #20]	; (8000638 <u8x8_stm32_gpio_and_delay+0xf4>)
 8000622:	f000 fb81 	bl	8000d28 <HAL_GPIO_WritePin>
		break;
 8000626:	bf00      	nop
	}
	return 1;
 8000628:	2301      	movs	r3, #1
}
 800062a:	4618      	mov	r0, r3
 800062c:	3710      	adds	r7, #16
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	40010c00 	.word	0x40010c00
 8000638:	40010800 	.word	0x40010800

0800063c <u8x8_byte_stm32_hw_spi>:

uint8_t u8x8_byte_stm32_hw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0
 8000642:	60f8      	str	r0, [r7, #12]
 8000644:	607b      	str	r3, [r7, #4]
 8000646:	460b      	mov	r3, r1
 8000648:	72fb      	strb	r3, [r7, #11]
 800064a:	4613      	mov	r3, r2
 800064c:	72bb      	strb	r3, [r7, #10]
	switch(msg) {
 800064e:	7afb      	ldrb	r3, [r7, #11]
 8000650:	3b14      	subs	r3, #20
 8000652:	2b0c      	cmp	r3, #12
 8000654:	d847      	bhi.n	80006e6 <u8x8_byte_stm32_hw_spi+0xaa>
 8000656:	a201      	add	r2, pc, #4	; (adr r2, 800065c <u8x8_byte_stm32_hw_spi+0x20>)
 8000658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800065c:	080006eb 	.word	0x080006eb
 8000660:	080006e7 	.word	0x080006e7
 8000664:	080006e7 	.word	0x080006e7
 8000668:	08000691 	.word	0x08000691
 800066c:	080006b7 	.word	0x080006b7
 8000670:	080006cf 	.word	0x080006cf
 8000674:	080006e7 	.word	0x080006e7
 8000678:	080006e7 	.word	0x080006e7
 800067c:	080006e7 	.word	0x080006e7
 8000680:	080006e7 	.word	0x080006e7
 8000684:	080006e7 	.word	0x080006e7
 8000688:	080006e7 	.word	0x080006e7
 800068c:	080006a9 	.word	0x080006a9
	case U8X8_MSG_BYTE_SEND:
		/* Insert codes to transmit data */
		if(HAL_SPI_Transmit(&hspi1, arg_ptr, arg_int, TX_TIMEOUT) != HAL_OK) return 0;
 8000690:	7abb      	ldrb	r3, [r7, #10]
 8000692:	b29a      	uxth	r2, r3
 8000694:	2364      	movs	r3, #100	; 0x64
 8000696:	6879      	ldr	r1, [r7, #4]
 8000698:	4818      	ldr	r0, [pc, #96]	; (80006fc <u8x8_byte_stm32_hw_spi+0xc0>)
 800069a:	f000 ffc9 	bl	8001630 <HAL_SPI_Transmit>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d024      	beq.n	80006ee <u8x8_byte_stm32_hw_spi+0xb2>
 80006a4:	2300      	movs	r3, #0
 80006a6:	e024      	b.n	80006f2 <u8x8_byte_stm32_hw_spi+0xb6>
	case U8X8_MSG_BYTE_INIT:
		/* Insert codes to begin SPI transmission */
		break;
	case U8X8_MSG_BYTE_SET_DC:
		/* Control DC pin, U8X8_MSG_GPIO_DC will be called */
		u8x8_gpio_SetDC(u8x8, arg_int);
 80006a8:	7abb      	ldrb	r3, [r7, #10]
 80006aa:	461a      	mov	r2, r3
 80006ac:	214a      	movs	r1, #74	; 0x4a
 80006ae:	68f8      	ldr	r0, [r7, #12]
 80006b0:	f002 fdf8 	bl	80032a4 <u8x8_gpio_call>
		break;
 80006b4:	e01c      	b.n	80006f0 <u8x8_byte_stm32_hw_spi+0xb4>
	case U8X8_MSG_BYTE_START_TRANSFER:
		/* Select slave, U8X8_MSG_GPIO_CS will be called */
		u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_enable_level);
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	461a      	mov	r2, r3
 80006be:	2149      	movs	r1, #73	; 0x49
 80006c0:	68f8      	ldr	r0, [r7, #12]
 80006c2:	f002 fdef 	bl	80032a4 <u8x8_gpio_call>
		HAL_Delay(1);
 80006c6:	2001      	movs	r0, #1
 80006c8:	f000 f8a2 	bl	8000810 <HAL_Delay>
		break;
 80006cc:	e010      	b.n	80006f0 <u8x8_byte_stm32_hw_spi+0xb4>
	case U8X8_MSG_BYTE_END_TRANSFER:
		HAL_Delay(1);
 80006ce:	2001      	movs	r0, #1
 80006d0:	f000 f89e 	bl	8000810 <HAL_Delay>
		/* Insert codes to end SPI transmission */
		u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	785b      	ldrb	r3, [r3, #1]
 80006da:	461a      	mov	r2, r3
 80006dc:	2149      	movs	r1, #73	; 0x49
 80006de:	68f8      	ldr	r0, [r7, #12]
 80006e0:	f002 fde0 	bl	80032a4 <u8x8_gpio_call>
		break;
 80006e4:	e004      	b.n	80006f0 <u8x8_byte_stm32_hw_spi+0xb4>
	default:
		return 0;
 80006e6:	2300      	movs	r3, #0
 80006e8:	e003      	b.n	80006f2 <u8x8_byte_stm32_hw_spi+0xb6>
		break;
 80006ea:	bf00      	nop
 80006ec:	e000      	b.n	80006f0 <u8x8_byte_stm32_hw_spi+0xb4>
		break;
 80006ee:	bf00      	nop
	}
	return 1;
 80006f0:	2301      	movs	r3, #1
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	3710      	adds	r7, #16
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	2000008c 	.word	0x2000008c

08000700 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000700:	480c      	ldr	r0, [pc, #48]	; (8000734 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000702:	490d      	ldr	r1, [pc, #52]	; (8000738 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000704:	4a0d      	ldr	r2, [pc, #52]	; (800073c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000706:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000708:	e002      	b.n	8000710 <LoopCopyDataInit>

0800070a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800070a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800070c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800070e:	3304      	adds	r3, #4

08000710 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000710:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000712:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000714:	d3f9      	bcc.n	800070a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000716:	4a0a      	ldr	r2, [pc, #40]	; (8000740 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000718:	4c0a      	ldr	r4, [pc, #40]	; (8000744 <LoopFillZerobss+0x22>)
  movs r3, #0
 800071a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800071c:	e001      	b.n	8000722 <LoopFillZerobss>

0800071e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800071e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000720:	3204      	adds	r2, #4

08000722 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000722:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000724:	d3fb      	bcc.n	800071e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000726:	f7ff ff07 	bl	8000538 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800072a:	f002 fe2f 	bl	800338c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800072e:	f7ff fd0d 	bl	800014c <main>
  bx lr
 8000732:	4770      	bx	lr
  ldr r0, =_sdata
 8000734:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000738:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800073c:	08004164 	.word	0x08004164
  ldr r2, =_sbss
 8000740:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000744:	20000590 	.word	0x20000590

08000748 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000748:	e7fe      	b.n	8000748 <ADC1_2_IRQHandler>
	...

0800074c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000750:	4b08      	ldr	r3, [pc, #32]	; (8000774 <HAL_Init+0x28>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a07      	ldr	r2, [pc, #28]	; (8000774 <HAL_Init+0x28>)
 8000756:	f043 0310 	orr.w	r3, r3, #16
 800075a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800075c:	2003      	movs	r0, #3
 800075e:	f000 f92b 	bl	80009b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000762:	200f      	movs	r0, #15
 8000764:	f000 f808 	bl	8000778 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000768:	f7ff fe18 	bl	800039c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800076c:	2300      	movs	r3, #0
}
 800076e:	4618      	mov	r0, r3
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	40022000 	.word	0x40022000

08000778 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000780:	4b12      	ldr	r3, [pc, #72]	; (80007cc <HAL_InitTick+0x54>)
 8000782:	681a      	ldr	r2, [r3, #0]
 8000784:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <HAL_InitTick+0x58>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	4619      	mov	r1, r3
 800078a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800078e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000792:	fbb2 f3f3 	udiv	r3, r2, r3
 8000796:	4618      	mov	r0, r3
 8000798:	f000 f935 	bl	8000a06 <HAL_SYSTICK_Config>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007a2:	2301      	movs	r3, #1
 80007a4:	e00e      	b.n	80007c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	2b0f      	cmp	r3, #15
 80007aa:	d80a      	bhi.n	80007c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007ac:	2200      	movs	r2, #0
 80007ae:	6879      	ldr	r1, [r7, #4]
 80007b0:	f04f 30ff 	mov.w	r0, #4294967295
 80007b4:	f000 f90b 	bl	80009ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007b8:	4a06      	ldr	r2, [pc, #24]	; (80007d4 <HAL_InitTick+0x5c>)
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007be:	2300      	movs	r3, #0
 80007c0:	e000      	b.n	80007c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007c2:	2301      	movs	r3, #1
}
 80007c4:	4618      	mov	r0, r3
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	20000000 	.word	0x20000000
 80007d0:	20000008 	.word	0x20000008
 80007d4:	20000004 	.word	0x20000004

080007d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007dc:	4b05      	ldr	r3, [pc, #20]	; (80007f4 <HAL_IncTick+0x1c>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	461a      	mov	r2, r3
 80007e2:	4b05      	ldr	r3, [pc, #20]	; (80007f8 <HAL_IncTick+0x20>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4413      	add	r3, r2
 80007e8:	4a03      	ldr	r2, [pc, #12]	; (80007f8 <HAL_IncTick+0x20>)
 80007ea:	6013      	str	r3, [r2, #0]
}
 80007ec:	bf00      	nop
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bc80      	pop	{r7}
 80007f2:	4770      	bx	lr
 80007f4:	20000008 	.word	0x20000008
 80007f8:	2000017c 	.word	0x2000017c

080007fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000800:	4b02      	ldr	r3, [pc, #8]	; (800080c <HAL_GetTick+0x10>)
 8000802:	681b      	ldr	r3, [r3, #0]
}
 8000804:	4618      	mov	r0, r3
 8000806:	46bd      	mov	sp, r7
 8000808:	bc80      	pop	{r7}
 800080a:	4770      	bx	lr
 800080c:	2000017c 	.word	0x2000017c

08000810 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000818:	f7ff fff0 	bl	80007fc <HAL_GetTick>
 800081c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000828:	d005      	beq.n	8000836 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800082a:	4b0a      	ldr	r3, [pc, #40]	; (8000854 <HAL_Delay+0x44>)
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	461a      	mov	r2, r3
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	4413      	add	r3, r2
 8000834:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000836:	bf00      	nop
 8000838:	f7ff ffe0 	bl	80007fc <HAL_GetTick>
 800083c:	4602      	mov	r2, r0
 800083e:	68bb      	ldr	r3, [r7, #8]
 8000840:	1ad3      	subs	r3, r2, r3
 8000842:	68fa      	ldr	r2, [r7, #12]
 8000844:	429a      	cmp	r2, r3
 8000846:	d8f7      	bhi.n	8000838 <HAL_Delay+0x28>
  {
  }
}
 8000848:	bf00      	nop
 800084a:	bf00      	nop
 800084c:	3710      	adds	r7, #16
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	20000008 	.word	0x20000008

08000858 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000858:	b480      	push	{r7}
 800085a:	b085      	sub	sp, #20
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	f003 0307 	and.w	r3, r3, #7
 8000866:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000868:	4b0c      	ldr	r3, [pc, #48]	; (800089c <__NVIC_SetPriorityGrouping+0x44>)
 800086a:	68db      	ldr	r3, [r3, #12]
 800086c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800086e:	68ba      	ldr	r2, [r7, #8]
 8000870:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000874:	4013      	ands	r3, r2
 8000876:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800087c:	68bb      	ldr	r3, [r7, #8]
 800087e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000880:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000884:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000888:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800088a:	4a04      	ldr	r2, [pc, #16]	; (800089c <__NVIC_SetPriorityGrouping+0x44>)
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	60d3      	str	r3, [r2, #12]
}
 8000890:	bf00      	nop
 8000892:	3714      	adds	r7, #20
 8000894:	46bd      	mov	sp, r7
 8000896:	bc80      	pop	{r7}
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	e000ed00 	.word	0xe000ed00

080008a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008a4:	4b04      	ldr	r3, [pc, #16]	; (80008b8 <__NVIC_GetPriorityGrouping+0x18>)
 80008a6:	68db      	ldr	r3, [r3, #12]
 80008a8:	0a1b      	lsrs	r3, r3, #8
 80008aa:	f003 0307 	and.w	r3, r3, #7
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bc80      	pop	{r7}
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	e000ed00 	.word	0xe000ed00

080008bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	6039      	str	r1, [r7, #0]
 80008c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	db0a      	blt.n	80008e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	b2da      	uxtb	r2, r3
 80008d4:	490c      	ldr	r1, [pc, #48]	; (8000908 <__NVIC_SetPriority+0x4c>)
 80008d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008da:	0112      	lsls	r2, r2, #4
 80008dc:	b2d2      	uxtb	r2, r2
 80008de:	440b      	add	r3, r1
 80008e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008e4:	e00a      	b.n	80008fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	b2da      	uxtb	r2, r3
 80008ea:	4908      	ldr	r1, [pc, #32]	; (800090c <__NVIC_SetPriority+0x50>)
 80008ec:	79fb      	ldrb	r3, [r7, #7]
 80008ee:	f003 030f 	and.w	r3, r3, #15
 80008f2:	3b04      	subs	r3, #4
 80008f4:	0112      	lsls	r2, r2, #4
 80008f6:	b2d2      	uxtb	r2, r2
 80008f8:	440b      	add	r3, r1
 80008fa:	761a      	strb	r2, [r3, #24]
}
 80008fc:	bf00      	nop
 80008fe:	370c      	adds	r7, #12
 8000900:	46bd      	mov	sp, r7
 8000902:	bc80      	pop	{r7}
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	e000e100 	.word	0xe000e100
 800090c:	e000ed00 	.word	0xe000ed00

08000910 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000910:	b480      	push	{r7}
 8000912:	b089      	sub	sp, #36	; 0x24
 8000914:	af00      	add	r7, sp, #0
 8000916:	60f8      	str	r0, [r7, #12]
 8000918:	60b9      	str	r1, [r7, #8]
 800091a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	f003 0307 	and.w	r3, r3, #7
 8000922:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000924:	69fb      	ldr	r3, [r7, #28]
 8000926:	f1c3 0307 	rsb	r3, r3, #7
 800092a:	2b04      	cmp	r3, #4
 800092c:	bf28      	it	cs
 800092e:	2304      	movcs	r3, #4
 8000930:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000932:	69fb      	ldr	r3, [r7, #28]
 8000934:	3304      	adds	r3, #4
 8000936:	2b06      	cmp	r3, #6
 8000938:	d902      	bls.n	8000940 <NVIC_EncodePriority+0x30>
 800093a:	69fb      	ldr	r3, [r7, #28]
 800093c:	3b03      	subs	r3, #3
 800093e:	e000      	b.n	8000942 <NVIC_EncodePriority+0x32>
 8000940:	2300      	movs	r3, #0
 8000942:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000944:	f04f 32ff 	mov.w	r2, #4294967295
 8000948:	69bb      	ldr	r3, [r7, #24]
 800094a:	fa02 f303 	lsl.w	r3, r2, r3
 800094e:	43da      	mvns	r2, r3
 8000950:	68bb      	ldr	r3, [r7, #8]
 8000952:	401a      	ands	r2, r3
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000958:	f04f 31ff 	mov.w	r1, #4294967295
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	fa01 f303 	lsl.w	r3, r1, r3
 8000962:	43d9      	mvns	r1, r3
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000968:	4313      	orrs	r3, r2
         );
}
 800096a:	4618      	mov	r0, r3
 800096c:	3724      	adds	r7, #36	; 0x24
 800096e:	46bd      	mov	sp, r7
 8000970:	bc80      	pop	{r7}
 8000972:	4770      	bx	lr

08000974 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	3b01      	subs	r3, #1
 8000980:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000984:	d301      	bcc.n	800098a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000986:	2301      	movs	r3, #1
 8000988:	e00f      	b.n	80009aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800098a:	4a0a      	ldr	r2, [pc, #40]	; (80009b4 <SysTick_Config+0x40>)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	3b01      	subs	r3, #1
 8000990:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000992:	210f      	movs	r1, #15
 8000994:	f04f 30ff 	mov.w	r0, #4294967295
 8000998:	f7ff ff90 	bl	80008bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800099c:	4b05      	ldr	r3, [pc, #20]	; (80009b4 <SysTick_Config+0x40>)
 800099e:	2200      	movs	r2, #0
 80009a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009a2:	4b04      	ldr	r3, [pc, #16]	; (80009b4 <SysTick_Config+0x40>)
 80009a4:	2207      	movs	r2, #7
 80009a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009a8:	2300      	movs	r3, #0
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	e000e010 	.word	0xe000e010

080009b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009c0:	6878      	ldr	r0, [r7, #4]
 80009c2:	f7ff ff49 	bl	8000858 <__NVIC_SetPriorityGrouping>
}
 80009c6:	bf00      	nop
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}

080009ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009ce:	b580      	push	{r7, lr}
 80009d0:	b086      	sub	sp, #24
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	4603      	mov	r3, r0
 80009d6:	60b9      	str	r1, [r7, #8]
 80009d8:	607a      	str	r2, [r7, #4]
 80009da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009dc:	2300      	movs	r3, #0
 80009de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009e0:	f7ff ff5e 	bl	80008a0 <__NVIC_GetPriorityGrouping>
 80009e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009e6:	687a      	ldr	r2, [r7, #4]
 80009e8:	68b9      	ldr	r1, [r7, #8]
 80009ea:	6978      	ldr	r0, [r7, #20]
 80009ec:	f7ff ff90 	bl	8000910 <NVIC_EncodePriority>
 80009f0:	4602      	mov	r2, r0
 80009f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009f6:	4611      	mov	r1, r2
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff ff5f 	bl	80008bc <__NVIC_SetPriority>
}
 80009fe:	bf00      	nop
 8000a00:	3718      	adds	r7, #24
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}

08000a06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a06:	b580      	push	{r7, lr}
 8000a08:	b082      	sub	sp, #8
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a0e:	6878      	ldr	r0, [r7, #4]
 8000a10:	f7ff ffb0 	bl	8000974 <SysTick_Config>
 8000a14:	4603      	mov	r3, r0
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
	...

08000a20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b08b      	sub	sp, #44	; 0x2c
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a32:	e169      	b.n	8000d08 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a34:	2201      	movs	r2, #1
 8000a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a38:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	69fa      	ldr	r2, [r7, #28]
 8000a44:	4013      	ands	r3, r2
 8000a46:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a48:	69ba      	ldr	r2, [r7, #24]
 8000a4a:	69fb      	ldr	r3, [r7, #28]
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	f040 8158 	bne.w	8000d02 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	685b      	ldr	r3, [r3, #4]
 8000a56:	4a9a      	ldr	r2, [pc, #616]	; (8000cc0 <HAL_GPIO_Init+0x2a0>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d05e      	beq.n	8000b1a <HAL_GPIO_Init+0xfa>
 8000a5c:	4a98      	ldr	r2, [pc, #608]	; (8000cc0 <HAL_GPIO_Init+0x2a0>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d875      	bhi.n	8000b4e <HAL_GPIO_Init+0x12e>
 8000a62:	4a98      	ldr	r2, [pc, #608]	; (8000cc4 <HAL_GPIO_Init+0x2a4>)
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d058      	beq.n	8000b1a <HAL_GPIO_Init+0xfa>
 8000a68:	4a96      	ldr	r2, [pc, #600]	; (8000cc4 <HAL_GPIO_Init+0x2a4>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d86f      	bhi.n	8000b4e <HAL_GPIO_Init+0x12e>
 8000a6e:	4a96      	ldr	r2, [pc, #600]	; (8000cc8 <HAL_GPIO_Init+0x2a8>)
 8000a70:	4293      	cmp	r3, r2
 8000a72:	d052      	beq.n	8000b1a <HAL_GPIO_Init+0xfa>
 8000a74:	4a94      	ldr	r2, [pc, #592]	; (8000cc8 <HAL_GPIO_Init+0x2a8>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d869      	bhi.n	8000b4e <HAL_GPIO_Init+0x12e>
 8000a7a:	4a94      	ldr	r2, [pc, #592]	; (8000ccc <HAL_GPIO_Init+0x2ac>)
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	d04c      	beq.n	8000b1a <HAL_GPIO_Init+0xfa>
 8000a80:	4a92      	ldr	r2, [pc, #584]	; (8000ccc <HAL_GPIO_Init+0x2ac>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d863      	bhi.n	8000b4e <HAL_GPIO_Init+0x12e>
 8000a86:	4a92      	ldr	r2, [pc, #584]	; (8000cd0 <HAL_GPIO_Init+0x2b0>)
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	d046      	beq.n	8000b1a <HAL_GPIO_Init+0xfa>
 8000a8c:	4a90      	ldr	r2, [pc, #576]	; (8000cd0 <HAL_GPIO_Init+0x2b0>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d85d      	bhi.n	8000b4e <HAL_GPIO_Init+0x12e>
 8000a92:	2b12      	cmp	r3, #18
 8000a94:	d82a      	bhi.n	8000aec <HAL_GPIO_Init+0xcc>
 8000a96:	2b12      	cmp	r3, #18
 8000a98:	d859      	bhi.n	8000b4e <HAL_GPIO_Init+0x12e>
 8000a9a:	a201      	add	r2, pc, #4	; (adr r2, 8000aa0 <HAL_GPIO_Init+0x80>)
 8000a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aa0:	08000b1b 	.word	0x08000b1b
 8000aa4:	08000af5 	.word	0x08000af5
 8000aa8:	08000b07 	.word	0x08000b07
 8000aac:	08000b49 	.word	0x08000b49
 8000ab0:	08000b4f 	.word	0x08000b4f
 8000ab4:	08000b4f 	.word	0x08000b4f
 8000ab8:	08000b4f 	.word	0x08000b4f
 8000abc:	08000b4f 	.word	0x08000b4f
 8000ac0:	08000b4f 	.word	0x08000b4f
 8000ac4:	08000b4f 	.word	0x08000b4f
 8000ac8:	08000b4f 	.word	0x08000b4f
 8000acc:	08000b4f 	.word	0x08000b4f
 8000ad0:	08000b4f 	.word	0x08000b4f
 8000ad4:	08000b4f 	.word	0x08000b4f
 8000ad8:	08000b4f 	.word	0x08000b4f
 8000adc:	08000b4f 	.word	0x08000b4f
 8000ae0:	08000b4f 	.word	0x08000b4f
 8000ae4:	08000afd 	.word	0x08000afd
 8000ae8:	08000b11 	.word	0x08000b11
 8000aec:	4a79      	ldr	r2, [pc, #484]	; (8000cd4 <HAL_GPIO_Init+0x2b4>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d013      	beq.n	8000b1a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000af2:	e02c      	b.n	8000b4e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	68db      	ldr	r3, [r3, #12]
 8000af8:	623b      	str	r3, [r7, #32]
          break;
 8000afa:	e029      	b.n	8000b50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	68db      	ldr	r3, [r3, #12]
 8000b00:	3304      	adds	r3, #4
 8000b02:	623b      	str	r3, [r7, #32]
          break;
 8000b04:	e024      	b.n	8000b50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	68db      	ldr	r3, [r3, #12]
 8000b0a:	3308      	adds	r3, #8
 8000b0c:	623b      	str	r3, [r7, #32]
          break;
 8000b0e:	e01f      	b.n	8000b50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	68db      	ldr	r3, [r3, #12]
 8000b14:	330c      	adds	r3, #12
 8000b16:	623b      	str	r3, [r7, #32]
          break;
 8000b18:	e01a      	b.n	8000b50 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	689b      	ldr	r3, [r3, #8]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d102      	bne.n	8000b28 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b22:	2304      	movs	r3, #4
 8000b24:	623b      	str	r3, [r7, #32]
          break;
 8000b26:	e013      	b.n	8000b50 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	689b      	ldr	r3, [r3, #8]
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d105      	bne.n	8000b3c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b30:	2308      	movs	r3, #8
 8000b32:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	69fa      	ldr	r2, [r7, #28]
 8000b38:	611a      	str	r2, [r3, #16]
          break;
 8000b3a:	e009      	b.n	8000b50 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b3c:	2308      	movs	r3, #8
 8000b3e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	69fa      	ldr	r2, [r7, #28]
 8000b44:	615a      	str	r2, [r3, #20]
          break;
 8000b46:	e003      	b.n	8000b50 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	623b      	str	r3, [r7, #32]
          break;
 8000b4c:	e000      	b.n	8000b50 <HAL_GPIO_Init+0x130>
          break;
 8000b4e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b50:	69bb      	ldr	r3, [r7, #24]
 8000b52:	2bff      	cmp	r3, #255	; 0xff
 8000b54:	d801      	bhi.n	8000b5a <HAL_GPIO_Init+0x13a>
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	e001      	b.n	8000b5e <HAL_GPIO_Init+0x13e>
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	3304      	adds	r3, #4
 8000b5e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b60:	69bb      	ldr	r3, [r7, #24]
 8000b62:	2bff      	cmp	r3, #255	; 0xff
 8000b64:	d802      	bhi.n	8000b6c <HAL_GPIO_Init+0x14c>
 8000b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b68:	009b      	lsls	r3, r3, #2
 8000b6a:	e002      	b.n	8000b72 <HAL_GPIO_Init+0x152>
 8000b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b6e:	3b08      	subs	r3, #8
 8000b70:	009b      	lsls	r3, r3, #2
 8000b72:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	210f      	movs	r1, #15
 8000b7a:	693b      	ldr	r3, [r7, #16]
 8000b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b80:	43db      	mvns	r3, r3
 8000b82:	401a      	ands	r2, r3
 8000b84:	6a39      	ldr	r1, [r7, #32]
 8000b86:	693b      	ldr	r3, [r7, #16]
 8000b88:	fa01 f303 	lsl.w	r3, r1, r3
 8000b8c:	431a      	orrs	r2, r3
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	f000 80b1 	beq.w	8000d02 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ba0:	4b4d      	ldr	r3, [pc, #308]	; (8000cd8 <HAL_GPIO_Init+0x2b8>)
 8000ba2:	699b      	ldr	r3, [r3, #24]
 8000ba4:	4a4c      	ldr	r2, [pc, #304]	; (8000cd8 <HAL_GPIO_Init+0x2b8>)
 8000ba6:	f043 0301 	orr.w	r3, r3, #1
 8000baa:	6193      	str	r3, [r2, #24]
 8000bac:	4b4a      	ldr	r3, [pc, #296]	; (8000cd8 <HAL_GPIO_Init+0x2b8>)
 8000bae:	699b      	ldr	r3, [r3, #24]
 8000bb0:	f003 0301 	and.w	r3, r3, #1
 8000bb4:	60bb      	str	r3, [r7, #8]
 8000bb6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000bb8:	4a48      	ldr	r2, [pc, #288]	; (8000cdc <HAL_GPIO_Init+0x2bc>)
 8000bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bbc:	089b      	lsrs	r3, r3, #2
 8000bbe:	3302      	adds	r3, #2
 8000bc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bc4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc8:	f003 0303 	and.w	r3, r3, #3
 8000bcc:	009b      	lsls	r3, r3, #2
 8000bce:	220f      	movs	r2, #15
 8000bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd4:	43db      	mvns	r3, r3
 8000bd6:	68fa      	ldr	r2, [r7, #12]
 8000bd8:	4013      	ands	r3, r2
 8000bda:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	4a40      	ldr	r2, [pc, #256]	; (8000ce0 <HAL_GPIO_Init+0x2c0>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d013      	beq.n	8000c0c <HAL_GPIO_Init+0x1ec>
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	4a3f      	ldr	r2, [pc, #252]	; (8000ce4 <HAL_GPIO_Init+0x2c4>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d00d      	beq.n	8000c08 <HAL_GPIO_Init+0x1e8>
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	4a3e      	ldr	r2, [pc, #248]	; (8000ce8 <HAL_GPIO_Init+0x2c8>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d007      	beq.n	8000c04 <HAL_GPIO_Init+0x1e4>
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	4a3d      	ldr	r2, [pc, #244]	; (8000cec <HAL_GPIO_Init+0x2cc>)
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d101      	bne.n	8000c00 <HAL_GPIO_Init+0x1e0>
 8000bfc:	2303      	movs	r3, #3
 8000bfe:	e006      	b.n	8000c0e <HAL_GPIO_Init+0x1ee>
 8000c00:	2304      	movs	r3, #4
 8000c02:	e004      	b.n	8000c0e <HAL_GPIO_Init+0x1ee>
 8000c04:	2302      	movs	r3, #2
 8000c06:	e002      	b.n	8000c0e <HAL_GPIO_Init+0x1ee>
 8000c08:	2301      	movs	r3, #1
 8000c0a:	e000      	b.n	8000c0e <HAL_GPIO_Init+0x1ee>
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c10:	f002 0203 	and.w	r2, r2, #3
 8000c14:	0092      	lsls	r2, r2, #2
 8000c16:	4093      	lsls	r3, r2
 8000c18:	68fa      	ldr	r2, [r7, #12]
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c1e:	492f      	ldr	r1, [pc, #188]	; (8000cdc <HAL_GPIO_Init+0x2bc>)
 8000c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c22:	089b      	lsrs	r3, r3, #2
 8000c24:	3302      	adds	r3, #2
 8000c26:	68fa      	ldr	r2, [r7, #12]
 8000c28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d006      	beq.n	8000c46 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c38:	4b2d      	ldr	r3, [pc, #180]	; (8000cf0 <HAL_GPIO_Init+0x2d0>)
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	492c      	ldr	r1, [pc, #176]	; (8000cf0 <HAL_GPIO_Init+0x2d0>)
 8000c3e:	69bb      	ldr	r3, [r7, #24]
 8000c40:	4313      	orrs	r3, r2
 8000c42:	600b      	str	r3, [r1, #0]
 8000c44:	e006      	b.n	8000c54 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c46:	4b2a      	ldr	r3, [pc, #168]	; (8000cf0 <HAL_GPIO_Init+0x2d0>)
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	69bb      	ldr	r3, [r7, #24]
 8000c4c:	43db      	mvns	r3, r3
 8000c4e:	4928      	ldr	r1, [pc, #160]	; (8000cf0 <HAL_GPIO_Init+0x2d0>)
 8000c50:	4013      	ands	r3, r2
 8000c52:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d006      	beq.n	8000c6e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c60:	4b23      	ldr	r3, [pc, #140]	; (8000cf0 <HAL_GPIO_Init+0x2d0>)
 8000c62:	685a      	ldr	r2, [r3, #4]
 8000c64:	4922      	ldr	r1, [pc, #136]	; (8000cf0 <HAL_GPIO_Init+0x2d0>)
 8000c66:	69bb      	ldr	r3, [r7, #24]
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	604b      	str	r3, [r1, #4]
 8000c6c:	e006      	b.n	8000c7c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c6e:	4b20      	ldr	r3, [pc, #128]	; (8000cf0 <HAL_GPIO_Init+0x2d0>)
 8000c70:	685a      	ldr	r2, [r3, #4]
 8000c72:	69bb      	ldr	r3, [r7, #24]
 8000c74:	43db      	mvns	r3, r3
 8000c76:	491e      	ldr	r1, [pc, #120]	; (8000cf0 <HAL_GPIO_Init+0x2d0>)
 8000c78:	4013      	ands	r3, r2
 8000c7a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d006      	beq.n	8000c96 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c88:	4b19      	ldr	r3, [pc, #100]	; (8000cf0 <HAL_GPIO_Init+0x2d0>)
 8000c8a:	689a      	ldr	r2, [r3, #8]
 8000c8c:	4918      	ldr	r1, [pc, #96]	; (8000cf0 <HAL_GPIO_Init+0x2d0>)
 8000c8e:	69bb      	ldr	r3, [r7, #24]
 8000c90:	4313      	orrs	r3, r2
 8000c92:	608b      	str	r3, [r1, #8]
 8000c94:	e006      	b.n	8000ca4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c96:	4b16      	ldr	r3, [pc, #88]	; (8000cf0 <HAL_GPIO_Init+0x2d0>)
 8000c98:	689a      	ldr	r2, [r3, #8]
 8000c9a:	69bb      	ldr	r3, [r7, #24]
 8000c9c:	43db      	mvns	r3, r3
 8000c9e:	4914      	ldr	r1, [pc, #80]	; (8000cf0 <HAL_GPIO_Init+0x2d0>)
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d021      	beq.n	8000cf4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000cb0:	4b0f      	ldr	r3, [pc, #60]	; (8000cf0 <HAL_GPIO_Init+0x2d0>)
 8000cb2:	68da      	ldr	r2, [r3, #12]
 8000cb4:	490e      	ldr	r1, [pc, #56]	; (8000cf0 <HAL_GPIO_Init+0x2d0>)
 8000cb6:	69bb      	ldr	r3, [r7, #24]
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	60cb      	str	r3, [r1, #12]
 8000cbc:	e021      	b.n	8000d02 <HAL_GPIO_Init+0x2e2>
 8000cbe:	bf00      	nop
 8000cc0:	10320000 	.word	0x10320000
 8000cc4:	10310000 	.word	0x10310000
 8000cc8:	10220000 	.word	0x10220000
 8000ccc:	10210000 	.word	0x10210000
 8000cd0:	10120000 	.word	0x10120000
 8000cd4:	10110000 	.word	0x10110000
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	40010000 	.word	0x40010000
 8000ce0:	40010800 	.word	0x40010800
 8000ce4:	40010c00 	.word	0x40010c00
 8000ce8:	40011000 	.word	0x40011000
 8000cec:	40011400 	.word	0x40011400
 8000cf0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000cf4:	4b0b      	ldr	r3, [pc, #44]	; (8000d24 <HAL_GPIO_Init+0x304>)
 8000cf6:	68da      	ldr	r2, [r3, #12]
 8000cf8:	69bb      	ldr	r3, [r7, #24]
 8000cfa:	43db      	mvns	r3, r3
 8000cfc:	4909      	ldr	r1, [pc, #36]	; (8000d24 <HAL_GPIO_Init+0x304>)
 8000cfe:	4013      	ands	r3, r2
 8000d00:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d04:	3301      	adds	r3, #1
 8000d06:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d0e:	fa22 f303 	lsr.w	r3, r2, r3
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f47f ae8e 	bne.w	8000a34 <HAL_GPIO_Init+0x14>
  }
}
 8000d18:	bf00      	nop
 8000d1a:	bf00      	nop
 8000d1c:	372c      	adds	r7, #44	; 0x2c
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bc80      	pop	{r7}
 8000d22:	4770      	bx	lr
 8000d24:	40010400 	.word	0x40010400

08000d28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	460b      	mov	r3, r1
 8000d32:	807b      	strh	r3, [r7, #2]
 8000d34:	4613      	mov	r3, r2
 8000d36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d38:	787b      	ldrb	r3, [r7, #1]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d003      	beq.n	8000d46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d3e:	887a      	ldrh	r2, [r7, #2]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d44:	e003      	b.n	8000d4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d46:	887b      	ldrh	r3, [r7, #2]
 8000d48:	041a      	lsls	r2, r3, #16
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	611a      	str	r2, [r3, #16]
}
 8000d4e:	bf00      	nop
 8000d50:	370c      	adds	r7, #12
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bc80      	pop	{r7}
 8000d56:	4770      	bx	lr

08000d58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b086      	sub	sp, #24
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d101      	bne.n	8000d6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d66:	2301      	movs	r3, #1
 8000d68:	e272      	b.n	8001250 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f000 8087 	beq.w	8000e86 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d78:	4b92      	ldr	r3, [pc, #584]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	f003 030c 	and.w	r3, r3, #12
 8000d80:	2b04      	cmp	r3, #4
 8000d82:	d00c      	beq.n	8000d9e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d84:	4b8f      	ldr	r3, [pc, #572]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f003 030c 	and.w	r3, r3, #12
 8000d8c:	2b08      	cmp	r3, #8
 8000d8e:	d112      	bne.n	8000db6 <HAL_RCC_OscConfig+0x5e>
 8000d90:	4b8c      	ldr	r3, [pc, #560]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d9c:	d10b      	bne.n	8000db6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d9e:	4b89      	ldr	r3, [pc, #548]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d06c      	beq.n	8000e84 <HAL_RCC_OscConfig+0x12c>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d168      	bne.n	8000e84 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
 8000db4:	e24c      	b.n	8001250 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dbe:	d106      	bne.n	8000dce <HAL_RCC_OscConfig+0x76>
 8000dc0:	4b80      	ldr	r3, [pc, #512]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a7f      	ldr	r2, [pc, #508]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000dc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dca:	6013      	str	r3, [r2, #0]
 8000dcc:	e02e      	b.n	8000e2c <HAL_RCC_OscConfig+0xd4>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d10c      	bne.n	8000df0 <HAL_RCC_OscConfig+0x98>
 8000dd6:	4b7b      	ldr	r3, [pc, #492]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a7a      	ldr	r2, [pc, #488]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000ddc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000de0:	6013      	str	r3, [r2, #0]
 8000de2:	4b78      	ldr	r3, [pc, #480]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a77      	ldr	r2, [pc, #476]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000de8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dec:	6013      	str	r3, [r2, #0]
 8000dee:	e01d      	b.n	8000e2c <HAL_RCC_OscConfig+0xd4>
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000df8:	d10c      	bne.n	8000e14 <HAL_RCC_OscConfig+0xbc>
 8000dfa:	4b72      	ldr	r3, [pc, #456]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a71      	ldr	r2, [pc, #452]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000e00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e04:	6013      	str	r3, [r2, #0]
 8000e06:	4b6f      	ldr	r3, [pc, #444]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a6e      	ldr	r2, [pc, #440]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000e0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e10:	6013      	str	r3, [r2, #0]
 8000e12:	e00b      	b.n	8000e2c <HAL_RCC_OscConfig+0xd4>
 8000e14:	4b6b      	ldr	r3, [pc, #428]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a6a      	ldr	r2, [pc, #424]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000e1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e1e:	6013      	str	r3, [r2, #0]
 8000e20:	4b68      	ldr	r3, [pc, #416]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a67      	ldr	r2, [pc, #412]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000e26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e2a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d013      	beq.n	8000e5c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e34:	f7ff fce2 	bl	80007fc <HAL_GetTick>
 8000e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e3a:	e008      	b.n	8000e4e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e3c:	f7ff fcde 	bl	80007fc <HAL_GetTick>
 8000e40:	4602      	mov	r2, r0
 8000e42:	693b      	ldr	r3, [r7, #16]
 8000e44:	1ad3      	subs	r3, r2, r3
 8000e46:	2b64      	cmp	r3, #100	; 0x64
 8000e48:	d901      	bls.n	8000e4e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000e4a:	2303      	movs	r3, #3
 8000e4c:	e200      	b.n	8001250 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e4e:	4b5d      	ldr	r3, [pc, #372]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d0f0      	beq.n	8000e3c <HAL_RCC_OscConfig+0xe4>
 8000e5a:	e014      	b.n	8000e86 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e5c:	f7ff fcce 	bl	80007fc <HAL_GetTick>
 8000e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e62:	e008      	b.n	8000e76 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e64:	f7ff fcca 	bl	80007fc <HAL_GetTick>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	2b64      	cmp	r3, #100	; 0x64
 8000e70:	d901      	bls.n	8000e76 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e72:	2303      	movs	r3, #3
 8000e74:	e1ec      	b.n	8001250 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e76:	4b53      	ldr	r3, [pc, #332]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d1f0      	bne.n	8000e64 <HAL_RCC_OscConfig+0x10c>
 8000e82:	e000      	b.n	8000e86 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f003 0302 	and.w	r3, r3, #2
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d063      	beq.n	8000f5a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e92:	4b4c      	ldr	r3, [pc, #304]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	f003 030c 	and.w	r3, r3, #12
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d00b      	beq.n	8000eb6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e9e:	4b49      	ldr	r3, [pc, #292]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f003 030c 	and.w	r3, r3, #12
 8000ea6:	2b08      	cmp	r3, #8
 8000ea8:	d11c      	bne.n	8000ee4 <HAL_RCC_OscConfig+0x18c>
 8000eaa:	4b46      	ldr	r3, [pc, #280]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d116      	bne.n	8000ee4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000eb6:	4b43      	ldr	r3, [pc, #268]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f003 0302 	and.w	r3, r3, #2
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d005      	beq.n	8000ece <HAL_RCC_OscConfig+0x176>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	691b      	ldr	r3, [r3, #16]
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d001      	beq.n	8000ece <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e1c0      	b.n	8001250 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ece:	4b3d      	ldr	r3, [pc, #244]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	695b      	ldr	r3, [r3, #20]
 8000eda:	00db      	lsls	r3, r3, #3
 8000edc:	4939      	ldr	r1, [pc, #228]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ee2:	e03a      	b.n	8000f5a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	691b      	ldr	r3, [r3, #16]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d020      	beq.n	8000f2e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000eec:	4b36      	ldr	r3, [pc, #216]	; (8000fc8 <HAL_RCC_OscConfig+0x270>)
 8000eee:	2201      	movs	r2, #1
 8000ef0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ef2:	f7ff fc83 	bl	80007fc <HAL_GetTick>
 8000ef6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ef8:	e008      	b.n	8000f0c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000efa:	f7ff fc7f 	bl	80007fc <HAL_GetTick>
 8000efe:	4602      	mov	r2, r0
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	1ad3      	subs	r3, r2, r3
 8000f04:	2b02      	cmp	r3, #2
 8000f06:	d901      	bls.n	8000f0c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	e1a1      	b.n	8001250 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f0c:	4b2d      	ldr	r3, [pc, #180]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f003 0302 	and.w	r3, r3, #2
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d0f0      	beq.n	8000efa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f18:	4b2a      	ldr	r3, [pc, #168]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	695b      	ldr	r3, [r3, #20]
 8000f24:	00db      	lsls	r3, r3, #3
 8000f26:	4927      	ldr	r1, [pc, #156]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	600b      	str	r3, [r1, #0]
 8000f2c:	e015      	b.n	8000f5a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f2e:	4b26      	ldr	r3, [pc, #152]	; (8000fc8 <HAL_RCC_OscConfig+0x270>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f34:	f7ff fc62 	bl	80007fc <HAL_GetTick>
 8000f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f3a:	e008      	b.n	8000f4e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f3c:	f7ff fc5e 	bl	80007fc <HAL_GetTick>
 8000f40:	4602      	mov	r2, r0
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	d901      	bls.n	8000f4e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	e180      	b.n	8001250 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f4e:	4b1d      	ldr	r3, [pc, #116]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f003 0302 	and.w	r3, r3, #2
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d1f0      	bne.n	8000f3c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f003 0308 	and.w	r3, r3, #8
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d03a      	beq.n	8000fdc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	699b      	ldr	r3, [r3, #24]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d019      	beq.n	8000fa2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f6e:	4b17      	ldr	r3, [pc, #92]	; (8000fcc <HAL_RCC_OscConfig+0x274>)
 8000f70:	2201      	movs	r2, #1
 8000f72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f74:	f7ff fc42 	bl	80007fc <HAL_GetTick>
 8000f78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f7a:	e008      	b.n	8000f8e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f7c:	f7ff fc3e 	bl	80007fc <HAL_GetTick>
 8000f80:	4602      	mov	r2, r0
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	2b02      	cmp	r3, #2
 8000f88:	d901      	bls.n	8000f8e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	e160      	b.n	8001250 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f8e:	4b0d      	ldr	r3, [pc, #52]	; (8000fc4 <HAL_RCC_OscConfig+0x26c>)
 8000f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f92:	f003 0302 	and.w	r3, r3, #2
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d0f0      	beq.n	8000f7c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f9a:	2001      	movs	r0, #1
 8000f9c:	f000 faa6 	bl	80014ec <RCC_Delay>
 8000fa0:	e01c      	b.n	8000fdc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000fa2:	4b0a      	ldr	r3, [pc, #40]	; (8000fcc <HAL_RCC_OscConfig+0x274>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fa8:	f7ff fc28 	bl	80007fc <HAL_GetTick>
 8000fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fae:	e00f      	b.n	8000fd0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fb0:	f7ff fc24 	bl	80007fc <HAL_GetTick>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	2b02      	cmp	r3, #2
 8000fbc:	d908      	bls.n	8000fd0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	e146      	b.n	8001250 <HAL_RCC_OscConfig+0x4f8>
 8000fc2:	bf00      	nop
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	42420000 	.word	0x42420000
 8000fcc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fd0:	4b92      	ldr	r3, [pc, #584]	; (800121c <HAL_RCC_OscConfig+0x4c4>)
 8000fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd4:	f003 0302 	and.w	r3, r3, #2
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d1e9      	bne.n	8000fb0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f003 0304 	and.w	r3, r3, #4
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	f000 80a6 	beq.w	8001136 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fea:	2300      	movs	r3, #0
 8000fec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fee:	4b8b      	ldr	r3, [pc, #556]	; (800121c <HAL_RCC_OscConfig+0x4c4>)
 8000ff0:	69db      	ldr	r3, [r3, #28]
 8000ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d10d      	bne.n	8001016 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ffa:	4b88      	ldr	r3, [pc, #544]	; (800121c <HAL_RCC_OscConfig+0x4c4>)
 8000ffc:	69db      	ldr	r3, [r3, #28]
 8000ffe:	4a87      	ldr	r2, [pc, #540]	; (800121c <HAL_RCC_OscConfig+0x4c4>)
 8001000:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001004:	61d3      	str	r3, [r2, #28]
 8001006:	4b85      	ldr	r3, [pc, #532]	; (800121c <HAL_RCC_OscConfig+0x4c4>)
 8001008:	69db      	ldr	r3, [r3, #28]
 800100a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800100e:	60bb      	str	r3, [r7, #8]
 8001010:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001012:	2301      	movs	r3, #1
 8001014:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001016:	4b82      	ldr	r3, [pc, #520]	; (8001220 <HAL_RCC_OscConfig+0x4c8>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800101e:	2b00      	cmp	r3, #0
 8001020:	d118      	bne.n	8001054 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001022:	4b7f      	ldr	r3, [pc, #508]	; (8001220 <HAL_RCC_OscConfig+0x4c8>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a7e      	ldr	r2, [pc, #504]	; (8001220 <HAL_RCC_OscConfig+0x4c8>)
 8001028:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800102c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800102e:	f7ff fbe5 	bl	80007fc <HAL_GetTick>
 8001032:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001034:	e008      	b.n	8001048 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001036:	f7ff fbe1 	bl	80007fc <HAL_GetTick>
 800103a:	4602      	mov	r2, r0
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	1ad3      	subs	r3, r2, r3
 8001040:	2b64      	cmp	r3, #100	; 0x64
 8001042:	d901      	bls.n	8001048 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001044:	2303      	movs	r3, #3
 8001046:	e103      	b.n	8001250 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001048:	4b75      	ldr	r3, [pc, #468]	; (8001220 <HAL_RCC_OscConfig+0x4c8>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001050:	2b00      	cmp	r3, #0
 8001052:	d0f0      	beq.n	8001036 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	2b01      	cmp	r3, #1
 800105a:	d106      	bne.n	800106a <HAL_RCC_OscConfig+0x312>
 800105c:	4b6f      	ldr	r3, [pc, #444]	; (800121c <HAL_RCC_OscConfig+0x4c4>)
 800105e:	6a1b      	ldr	r3, [r3, #32]
 8001060:	4a6e      	ldr	r2, [pc, #440]	; (800121c <HAL_RCC_OscConfig+0x4c4>)
 8001062:	f043 0301 	orr.w	r3, r3, #1
 8001066:	6213      	str	r3, [r2, #32]
 8001068:	e02d      	b.n	80010c6 <HAL_RCC_OscConfig+0x36e>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	68db      	ldr	r3, [r3, #12]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d10c      	bne.n	800108c <HAL_RCC_OscConfig+0x334>
 8001072:	4b6a      	ldr	r3, [pc, #424]	; (800121c <HAL_RCC_OscConfig+0x4c4>)
 8001074:	6a1b      	ldr	r3, [r3, #32]
 8001076:	4a69      	ldr	r2, [pc, #420]	; (800121c <HAL_RCC_OscConfig+0x4c4>)
 8001078:	f023 0301 	bic.w	r3, r3, #1
 800107c:	6213      	str	r3, [r2, #32]
 800107e:	4b67      	ldr	r3, [pc, #412]	; (800121c <HAL_RCC_OscConfig+0x4c4>)
 8001080:	6a1b      	ldr	r3, [r3, #32]
 8001082:	4a66      	ldr	r2, [pc, #408]	; (800121c <HAL_RCC_OscConfig+0x4c4>)
 8001084:	f023 0304 	bic.w	r3, r3, #4
 8001088:	6213      	str	r3, [r2, #32]
 800108a:	e01c      	b.n	80010c6 <HAL_RCC_OscConfig+0x36e>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	2b05      	cmp	r3, #5
 8001092:	d10c      	bne.n	80010ae <HAL_RCC_OscConfig+0x356>
 8001094:	4b61      	ldr	r3, [pc, #388]	; (800121c <HAL_RCC_OscConfig+0x4c4>)
 8001096:	6a1b      	ldr	r3, [r3, #32]
 8001098:	4a60      	ldr	r2, [pc, #384]	; (800121c <HAL_RCC_OscConfig+0x4c4>)
 800109a:	f043 0304 	orr.w	r3, r3, #4
 800109e:	6213      	str	r3, [r2, #32]
 80010a0:	4b5e      	ldr	r3, [pc, #376]	; (800121c <HAL_RCC_OscConfig+0x4c4>)
 80010a2:	6a1b      	ldr	r3, [r3, #32]
 80010a4:	4a5d      	ldr	r2, [pc, #372]	; (800121c <HAL_RCC_OscConfig+0x4c4>)
 80010a6:	f043 0301 	orr.w	r3, r3, #1
 80010aa:	6213      	str	r3, [r2, #32]
 80010ac:	e00b      	b.n	80010c6 <HAL_RCC_OscConfig+0x36e>
 80010ae:	4b5b      	ldr	r3, [pc, #364]	; (800121c <HAL_RCC_OscConfig+0x4c4>)
 80010b0:	6a1b      	ldr	r3, [r3, #32]
 80010b2:	4a5a      	ldr	r2, [pc, #360]	; (800121c <HAL_RCC_OscConfig+0x4c4>)
 80010b4:	f023 0301 	bic.w	r3, r3, #1
 80010b8:	6213      	str	r3, [r2, #32]
 80010ba:	4b58      	ldr	r3, [pc, #352]	; (800121c <HAL_RCC_OscConfig+0x4c4>)
 80010bc:	6a1b      	ldr	r3, [r3, #32]
 80010be:	4a57      	ldr	r2, [pc, #348]	; (800121c <HAL_RCC_OscConfig+0x4c4>)
 80010c0:	f023 0304 	bic.w	r3, r3, #4
 80010c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	68db      	ldr	r3, [r3, #12]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d015      	beq.n	80010fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010ce:	f7ff fb95 	bl	80007fc <HAL_GetTick>
 80010d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010d4:	e00a      	b.n	80010ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010d6:	f7ff fb91 	bl	80007fc <HAL_GetTick>
 80010da:	4602      	mov	r2, r0
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	1ad3      	subs	r3, r2, r3
 80010e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d901      	bls.n	80010ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80010e8:	2303      	movs	r3, #3
 80010ea:	e0b1      	b.n	8001250 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010ec:	4b4b      	ldr	r3, [pc, #300]	; (800121c <HAL_RCC_OscConfig+0x4c4>)
 80010ee:	6a1b      	ldr	r3, [r3, #32]
 80010f0:	f003 0302 	and.w	r3, r3, #2
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d0ee      	beq.n	80010d6 <HAL_RCC_OscConfig+0x37e>
 80010f8:	e014      	b.n	8001124 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010fa:	f7ff fb7f 	bl	80007fc <HAL_GetTick>
 80010fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001100:	e00a      	b.n	8001118 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001102:	f7ff fb7b 	bl	80007fc <HAL_GetTick>
 8001106:	4602      	mov	r2, r0
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001110:	4293      	cmp	r3, r2
 8001112:	d901      	bls.n	8001118 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001114:	2303      	movs	r3, #3
 8001116:	e09b      	b.n	8001250 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001118:	4b40      	ldr	r3, [pc, #256]	; (800121c <HAL_RCC_OscConfig+0x4c4>)
 800111a:	6a1b      	ldr	r3, [r3, #32]
 800111c:	f003 0302 	and.w	r3, r3, #2
 8001120:	2b00      	cmp	r3, #0
 8001122:	d1ee      	bne.n	8001102 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001124:	7dfb      	ldrb	r3, [r7, #23]
 8001126:	2b01      	cmp	r3, #1
 8001128:	d105      	bne.n	8001136 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800112a:	4b3c      	ldr	r3, [pc, #240]	; (800121c <HAL_RCC_OscConfig+0x4c4>)
 800112c:	69db      	ldr	r3, [r3, #28]
 800112e:	4a3b      	ldr	r2, [pc, #236]	; (800121c <HAL_RCC_OscConfig+0x4c4>)
 8001130:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001134:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	69db      	ldr	r3, [r3, #28]
 800113a:	2b00      	cmp	r3, #0
 800113c:	f000 8087 	beq.w	800124e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001140:	4b36      	ldr	r3, [pc, #216]	; (800121c <HAL_RCC_OscConfig+0x4c4>)
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f003 030c 	and.w	r3, r3, #12
 8001148:	2b08      	cmp	r3, #8
 800114a:	d061      	beq.n	8001210 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	69db      	ldr	r3, [r3, #28]
 8001150:	2b02      	cmp	r3, #2
 8001152:	d146      	bne.n	80011e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001154:	4b33      	ldr	r3, [pc, #204]	; (8001224 <HAL_RCC_OscConfig+0x4cc>)
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800115a:	f7ff fb4f 	bl	80007fc <HAL_GetTick>
 800115e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001160:	e008      	b.n	8001174 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001162:	f7ff fb4b 	bl	80007fc <HAL_GetTick>
 8001166:	4602      	mov	r2, r0
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	2b02      	cmp	r3, #2
 800116e:	d901      	bls.n	8001174 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001170:	2303      	movs	r3, #3
 8001172:	e06d      	b.n	8001250 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001174:	4b29      	ldr	r3, [pc, #164]	; (800121c <HAL_RCC_OscConfig+0x4c4>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800117c:	2b00      	cmp	r3, #0
 800117e:	d1f0      	bne.n	8001162 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6a1b      	ldr	r3, [r3, #32]
 8001184:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001188:	d108      	bne.n	800119c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800118a:	4b24      	ldr	r3, [pc, #144]	; (800121c <HAL_RCC_OscConfig+0x4c4>)
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	4921      	ldr	r1, [pc, #132]	; (800121c <HAL_RCC_OscConfig+0x4c4>)
 8001198:	4313      	orrs	r3, r2
 800119a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800119c:	4b1f      	ldr	r3, [pc, #124]	; (800121c <HAL_RCC_OscConfig+0x4c4>)
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6a19      	ldr	r1, [r3, #32]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ac:	430b      	orrs	r3, r1
 80011ae:	491b      	ldr	r1, [pc, #108]	; (800121c <HAL_RCC_OscConfig+0x4c4>)
 80011b0:	4313      	orrs	r3, r2
 80011b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011b4:	4b1b      	ldr	r3, [pc, #108]	; (8001224 <HAL_RCC_OscConfig+0x4cc>)
 80011b6:	2201      	movs	r2, #1
 80011b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ba:	f7ff fb1f 	bl	80007fc <HAL_GetTick>
 80011be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011c0:	e008      	b.n	80011d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011c2:	f7ff fb1b 	bl	80007fc <HAL_GetTick>
 80011c6:	4602      	mov	r2, r0
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	2b02      	cmp	r3, #2
 80011ce:	d901      	bls.n	80011d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80011d0:	2303      	movs	r3, #3
 80011d2:	e03d      	b.n	8001250 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011d4:	4b11      	ldr	r3, [pc, #68]	; (800121c <HAL_RCC_OscConfig+0x4c4>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d0f0      	beq.n	80011c2 <HAL_RCC_OscConfig+0x46a>
 80011e0:	e035      	b.n	800124e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011e2:	4b10      	ldr	r3, [pc, #64]	; (8001224 <HAL_RCC_OscConfig+0x4cc>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e8:	f7ff fb08 	bl	80007fc <HAL_GetTick>
 80011ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011ee:	e008      	b.n	8001202 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011f0:	f7ff fb04 	bl	80007fc <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d901      	bls.n	8001202 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80011fe:	2303      	movs	r3, #3
 8001200:	e026      	b.n	8001250 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001202:	4b06      	ldr	r3, [pc, #24]	; (800121c <HAL_RCC_OscConfig+0x4c4>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d1f0      	bne.n	80011f0 <HAL_RCC_OscConfig+0x498>
 800120e:	e01e      	b.n	800124e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	69db      	ldr	r3, [r3, #28]
 8001214:	2b01      	cmp	r3, #1
 8001216:	d107      	bne.n	8001228 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001218:	2301      	movs	r3, #1
 800121a:	e019      	b.n	8001250 <HAL_RCC_OscConfig+0x4f8>
 800121c:	40021000 	.word	0x40021000
 8001220:	40007000 	.word	0x40007000
 8001224:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001228:	4b0b      	ldr	r3, [pc, #44]	; (8001258 <HAL_RCC_OscConfig+0x500>)
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6a1b      	ldr	r3, [r3, #32]
 8001238:	429a      	cmp	r2, r3
 800123a:	d106      	bne.n	800124a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001246:	429a      	cmp	r2, r3
 8001248:	d001      	beq.n	800124e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e000      	b.n	8001250 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800124e:	2300      	movs	r3, #0
}
 8001250:	4618      	mov	r0, r3
 8001252:	3718      	adds	r7, #24
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	40021000 	.word	0x40021000

0800125c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d101      	bne.n	8001270 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800126c:	2301      	movs	r3, #1
 800126e:	e0d0      	b.n	8001412 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001270:	4b6a      	ldr	r3, [pc, #424]	; (800141c <HAL_RCC_ClockConfig+0x1c0>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f003 0307 	and.w	r3, r3, #7
 8001278:	683a      	ldr	r2, [r7, #0]
 800127a:	429a      	cmp	r2, r3
 800127c:	d910      	bls.n	80012a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800127e:	4b67      	ldr	r3, [pc, #412]	; (800141c <HAL_RCC_ClockConfig+0x1c0>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f023 0207 	bic.w	r2, r3, #7
 8001286:	4965      	ldr	r1, [pc, #404]	; (800141c <HAL_RCC_ClockConfig+0x1c0>)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	4313      	orrs	r3, r2
 800128c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800128e:	4b63      	ldr	r3, [pc, #396]	; (800141c <HAL_RCC_ClockConfig+0x1c0>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 0307 	and.w	r3, r3, #7
 8001296:	683a      	ldr	r2, [r7, #0]
 8001298:	429a      	cmp	r2, r3
 800129a:	d001      	beq.n	80012a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800129c:	2301      	movs	r3, #1
 800129e:	e0b8      	b.n	8001412 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 0302 	and.w	r3, r3, #2
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d020      	beq.n	80012ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 0304 	and.w	r3, r3, #4
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d005      	beq.n	80012c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012b8:	4b59      	ldr	r3, [pc, #356]	; (8001420 <HAL_RCC_ClockConfig+0x1c4>)
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	4a58      	ldr	r2, [pc, #352]	; (8001420 <HAL_RCC_ClockConfig+0x1c4>)
 80012be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80012c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f003 0308 	and.w	r3, r3, #8
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d005      	beq.n	80012dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012d0:	4b53      	ldr	r3, [pc, #332]	; (8001420 <HAL_RCC_ClockConfig+0x1c4>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	4a52      	ldr	r2, [pc, #328]	; (8001420 <HAL_RCC_ClockConfig+0x1c4>)
 80012d6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80012da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012dc:	4b50      	ldr	r3, [pc, #320]	; (8001420 <HAL_RCC_ClockConfig+0x1c4>)
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	494d      	ldr	r1, [pc, #308]	; (8001420 <HAL_RCC_ClockConfig+0x1c4>)
 80012ea:	4313      	orrs	r3, r2
 80012ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d040      	beq.n	800137c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d107      	bne.n	8001312 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001302:	4b47      	ldr	r3, [pc, #284]	; (8001420 <HAL_RCC_ClockConfig+0x1c4>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d115      	bne.n	800133a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e07f      	b.n	8001412 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	2b02      	cmp	r3, #2
 8001318:	d107      	bne.n	800132a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800131a:	4b41      	ldr	r3, [pc, #260]	; (8001420 <HAL_RCC_ClockConfig+0x1c4>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d109      	bne.n	800133a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e073      	b.n	8001412 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800132a:	4b3d      	ldr	r3, [pc, #244]	; (8001420 <HAL_RCC_ClockConfig+0x1c4>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	2b00      	cmp	r3, #0
 8001334:	d101      	bne.n	800133a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e06b      	b.n	8001412 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800133a:	4b39      	ldr	r3, [pc, #228]	; (8001420 <HAL_RCC_ClockConfig+0x1c4>)
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f023 0203 	bic.w	r2, r3, #3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	4936      	ldr	r1, [pc, #216]	; (8001420 <HAL_RCC_ClockConfig+0x1c4>)
 8001348:	4313      	orrs	r3, r2
 800134a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800134c:	f7ff fa56 	bl	80007fc <HAL_GetTick>
 8001350:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001352:	e00a      	b.n	800136a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001354:	f7ff fa52 	bl	80007fc <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001362:	4293      	cmp	r3, r2
 8001364:	d901      	bls.n	800136a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e053      	b.n	8001412 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800136a:	4b2d      	ldr	r3, [pc, #180]	; (8001420 <HAL_RCC_ClockConfig+0x1c4>)
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f003 020c 	and.w	r2, r3, #12
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	429a      	cmp	r2, r3
 800137a:	d1eb      	bne.n	8001354 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800137c:	4b27      	ldr	r3, [pc, #156]	; (800141c <HAL_RCC_ClockConfig+0x1c0>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 0307 	and.w	r3, r3, #7
 8001384:	683a      	ldr	r2, [r7, #0]
 8001386:	429a      	cmp	r2, r3
 8001388:	d210      	bcs.n	80013ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800138a:	4b24      	ldr	r3, [pc, #144]	; (800141c <HAL_RCC_ClockConfig+0x1c0>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f023 0207 	bic.w	r2, r3, #7
 8001392:	4922      	ldr	r1, [pc, #136]	; (800141c <HAL_RCC_ClockConfig+0x1c0>)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	4313      	orrs	r3, r2
 8001398:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800139a:	4b20      	ldr	r3, [pc, #128]	; (800141c <HAL_RCC_ClockConfig+0x1c0>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 0307 	and.w	r3, r3, #7
 80013a2:	683a      	ldr	r2, [r7, #0]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d001      	beq.n	80013ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	e032      	b.n	8001412 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f003 0304 	and.w	r3, r3, #4
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d008      	beq.n	80013ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013b8:	4b19      	ldr	r3, [pc, #100]	; (8001420 <HAL_RCC_ClockConfig+0x1c4>)
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	4916      	ldr	r1, [pc, #88]	; (8001420 <HAL_RCC_ClockConfig+0x1c4>)
 80013c6:	4313      	orrs	r3, r2
 80013c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 0308 	and.w	r3, r3, #8
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d009      	beq.n	80013ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80013d6:	4b12      	ldr	r3, [pc, #72]	; (8001420 <HAL_RCC_ClockConfig+0x1c4>)
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	691b      	ldr	r3, [r3, #16]
 80013e2:	00db      	lsls	r3, r3, #3
 80013e4:	490e      	ldr	r1, [pc, #56]	; (8001420 <HAL_RCC_ClockConfig+0x1c4>)
 80013e6:	4313      	orrs	r3, r2
 80013e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80013ea:	f000 f821 	bl	8001430 <HAL_RCC_GetSysClockFreq>
 80013ee:	4602      	mov	r2, r0
 80013f0:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <HAL_RCC_ClockConfig+0x1c4>)
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	091b      	lsrs	r3, r3, #4
 80013f6:	f003 030f 	and.w	r3, r3, #15
 80013fa:	490a      	ldr	r1, [pc, #40]	; (8001424 <HAL_RCC_ClockConfig+0x1c8>)
 80013fc:	5ccb      	ldrb	r3, [r1, r3]
 80013fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001402:	4a09      	ldr	r2, [pc, #36]	; (8001428 <HAL_RCC_ClockConfig+0x1cc>)
 8001404:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001406:	4b09      	ldr	r3, [pc, #36]	; (800142c <HAL_RCC_ClockConfig+0x1d0>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff f9b4 	bl	8000778 <HAL_InitTick>

  return HAL_OK;
 8001410:	2300      	movs	r3, #0
}
 8001412:	4618      	mov	r0, r3
 8001414:	3710      	adds	r7, #16
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40022000 	.word	0x40022000
 8001420:	40021000 	.word	0x40021000
 8001424:	08003d0c 	.word	0x08003d0c
 8001428:	20000000 	.word	0x20000000
 800142c:	20000004 	.word	0x20000004

08001430 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001430:	b490      	push	{r4, r7}
 8001432:	b08a      	sub	sp, #40	; 0x28
 8001434:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001436:	4b29      	ldr	r3, [pc, #164]	; (80014dc <HAL_RCC_GetSysClockFreq+0xac>)
 8001438:	1d3c      	adds	r4, r7, #4
 800143a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800143c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001440:	f240 2301 	movw	r3, #513	; 0x201
 8001444:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001446:	2300      	movs	r3, #0
 8001448:	61fb      	str	r3, [r7, #28]
 800144a:	2300      	movs	r3, #0
 800144c:	61bb      	str	r3, [r7, #24]
 800144e:	2300      	movs	r3, #0
 8001450:	627b      	str	r3, [r7, #36]	; 0x24
 8001452:	2300      	movs	r3, #0
 8001454:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001456:	2300      	movs	r3, #0
 8001458:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800145a:	4b21      	ldr	r3, [pc, #132]	; (80014e0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	f003 030c 	and.w	r3, r3, #12
 8001466:	2b04      	cmp	r3, #4
 8001468:	d002      	beq.n	8001470 <HAL_RCC_GetSysClockFreq+0x40>
 800146a:	2b08      	cmp	r3, #8
 800146c:	d003      	beq.n	8001476 <HAL_RCC_GetSysClockFreq+0x46>
 800146e:	e02b      	b.n	80014c8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001470:	4b1c      	ldr	r3, [pc, #112]	; (80014e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001472:	623b      	str	r3, [r7, #32]
      break;
 8001474:	e02b      	b.n	80014ce <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	0c9b      	lsrs	r3, r3, #18
 800147a:	f003 030f 	and.w	r3, r3, #15
 800147e:	3328      	adds	r3, #40	; 0x28
 8001480:	443b      	add	r3, r7
 8001482:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001486:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d012      	beq.n	80014b8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001492:	4b13      	ldr	r3, [pc, #76]	; (80014e0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	0c5b      	lsrs	r3, r3, #17
 8001498:	f003 0301 	and.w	r3, r3, #1
 800149c:	3328      	adds	r3, #40	; 0x28
 800149e:	443b      	add	r3, r7
 80014a0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80014a4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	4a0e      	ldr	r2, [pc, #56]	; (80014e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80014aa:	fb03 f202 	mul.w	r2, r3, r2
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80014b4:	627b      	str	r3, [r7, #36]	; 0x24
 80014b6:	e004      	b.n	80014c2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	4a0b      	ldr	r2, [pc, #44]	; (80014e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80014bc:	fb02 f303 	mul.w	r3, r2, r3
 80014c0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80014c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c4:	623b      	str	r3, [r7, #32]
      break;
 80014c6:	e002      	b.n	80014ce <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80014c8:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80014ca:	623b      	str	r3, [r7, #32]
      break;
 80014cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014ce:	6a3b      	ldr	r3, [r7, #32]
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3728      	adds	r7, #40	; 0x28
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bc90      	pop	{r4, r7}
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	08003cfc 	.word	0x08003cfc
 80014e0:	40021000 	.word	0x40021000
 80014e4:	007a1200 	.word	0x007a1200
 80014e8:	003d0900 	.word	0x003d0900

080014ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b085      	sub	sp, #20
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80014f4:	4b0a      	ldr	r3, [pc, #40]	; (8001520 <RCC_Delay+0x34>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a0a      	ldr	r2, [pc, #40]	; (8001524 <RCC_Delay+0x38>)
 80014fa:	fba2 2303 	umull	r2, r3, r2, r3
 80014fe:	0a5b      	lsrs	r3, r3, #9
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	fb02 f303 	mul.w	r3, r2, r3
 8001506:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001508:	bf00      	nop
  }
  while (Delay --);
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	1e5a      	subs	r2, r3, #1
 800150e:	60fa      	str	r2, [r7, #12]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d1f9      	bne.n	8001508 <RCC_Delay+0x1c>
}
 8001514:	bf00      	nop
 8001516:	bf00      	nop
 8001518:	3714      	adds	r7, #20
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr
 8001520:	20000000 	.word	0x20000000
 8001524:	10624dd3 	.word	0x10624dd3

08001528 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d101      	bne.n	800153a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e076      	b.n	8001628 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800153e:	2b00      	cmp	r3, #0
 8001540:	d108      	bne.n	8001554 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800154a:	d009      	beq.n	8001560 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2200      	movs	r2, #0
 8001550:	61da      	str	r2, [r3, #28]
 8001552:	e005      	b.n	8001560 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2200      	movs	r2, #0
 8001558:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2200      	movs	r2, #0
 800155e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2200      	movs	r2, #0
 8001564:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800156c:	b2db      	uxtb	r3, r3
 800156e:	2b00      	cmp	r3, #0
 8001570:	d106      	bne.n	8001580 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2200      	movs	r2, #0
 8001576:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f7fe ff40 	bl	8000400 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2202      	movs	r2, #2
 8001584:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001596:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80015a8:	431a      	orrs	r2, r3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	68db      	ldr	r3, [r3, #12]
 80015ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015b2:	431a      	orrs	r2, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	691b      	ldr	r3, [r3, #16]
 80015b8:	f003 0302 	and.w	r3, r3, #2
 80015bc:	431a      	orrs	r2, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	695b      	ldr	r3, [r3, #20]
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	431a      	orrs	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015d0:	431a      	orrs	r2, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	69db      	ldr	r3, [r3, #28]
 80015d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80015da:	431a      	orrs	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6a1b      	ldr	r3, [r3, #32]
 80015e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015e4:	ea42 0103 	orr.w	r1, r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	430a      	orrs	r2, r1
 80015f6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	699b      	ldr	r3, [r3, #24]
 80015fc:	0c1a      	lsrs	r2, r3, #16
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f002 0204 	and.w	r2, r2, #4
 8001606:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	69da      	ldr	r2, [r3, #28]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001616:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2200      	movs	r2, #0
 800161c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2201      	movs	r2, #1
 8001622:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001626:	2300      	movs	r3, #0
}
 8001628:	4618      	mov	r0, r3
 800162a:	3708      	adds	r7, #8
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}

08001630 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b088      	sub	sp, #32
 8001634:	af00      	add	r7, sp, #0
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	603b      	str	r3, [r7, #0]
 800163c:	4613      	mov	r3, r2
 800163e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001640:	2300      	movs	r3, #0
 8001642:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800164a:	2b01      	cmp	r3, #1
 800164c:	d101      	bne.n	8001652 <HAL_SPI_Transmit+0x22>
 800164e:	2302      	movs	r3, #2
 8001650:	e126      	b.n	80018a0 <HAL_SPI_Transmit+0x270>
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	2201      	movs	r2, #1
 8001656:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800165a:	f7ff f8cf 	bl	80007fc <HAL_GetTick>
 800165e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001660:	88fb      	ldrh	r3, [r7, #6]
 8001662:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800166a:	b2db      	uxtb	r3, r3
 800166c:	2b01      	cmp	r3, #1
 800166e:	d002      	beq.n	8001676 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001670:	2302      	movs	r3, #2
 8001672:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001674:	e10b      	b.n	800188e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d002      	beq.n	8001682 <HAL_SPI_Transmit+0x52>
 800167c:	88fb      	ldrh	r3, [r7, #6]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d102      	bne.n	8001688 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001686:	e102      	b.n	800188e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	2203      	movs	r2, #3
 800168c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	2200      	movs	r2, #0
 8001694:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	68ba      	ldr	r2, [r7, #8]
 800169a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	88fa      	ldrh	r2, [r7, #6]
 80016a0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	88fa      	ldrh	r2, [r7, #6]
 80016a6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2200      	movs	r2, #0
 80016ac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	2200      	movs	r2, #0
 80016b2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2200      	movs	r2, #0
 80016b8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	2200      	movs	r2, #0
 80016be:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2200      	movs	r2, #0
 80016c4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80016ce:	d10f      	bne.n	80016f0 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80016de:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80016ee:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016fa:	2b40      	cmp	r3, #64	; 0x40
 80016fc:	d007      	beq.n	800170e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800170c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	68db      	ldr	r3, [r3, #12]
 8001712:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001716:	d14b      	bne.n	80017b0 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d002      	beq.n	8001726 <HAL_SPI_Transmit+0xf6>
 8001720:	8afb      	ldrh	r3, [r7, #22]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d13e      	bne.n	80017a4 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	881a      	ldrh	r2, [r3, #0]
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	1c9a      	adds	r2, r3, #2
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001740:	b29b      	uxth	r3, r3
 8001742:	3b01      	subs	r3, #1
 8001744:	b29a      	uxth	r2, r3
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800174a:	e02b      	b.n	80017a4 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	2b02      	cmp	r3, #2
 8001758:	d112      	bne.n	8001780 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	881a      	ldrh	r2, [r3, #0]
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	1c9a      	adds	r2, r3, #2
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001774:	b29b      	uxth	r3, r3
 8001776:	3b01      	subs	r3, #1
 8001778:	b29a      	uxth	r2, r3
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	86da      	strh	r2, [r3, #54]	; 0x36
 800177e:	e011      	b.n	80017a4 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001780:	f7ff f83c 	bl	80007fc <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	683a      	ldr	r2, [r7, #0]
 800178c:	429a      	cmp	r2, r3
 800178e:	d803      	bhi.n	8001798 <HAL_SPI_Transmit+0x168>
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001796:	d102      	bne.n	800179e <HAL_SPI_Transmit+0x16e>
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d102      	bne.n	80017a4 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80017a2:	e074      	b.n	800188e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d1ce      	bne.n	800174c <HAL_SPI_Transmit+0x11c>
 80017ae:	e04c      	b.n	800184a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d002      	beq.n	80017be <HAL_SPI_Transmit+0x18e>
 80017b8:	8afb      	ldrh	r3, [r7, #22]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d140      	bne.n	8001840 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	330c      	adds	r3, #12
 80017c8:	7812      	ldrb	r2, [r2, #0]
 80017ca:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d0:	1c5a      	adds	r2, r3, #1
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80017da:	b29b      	uxth	r3, r3
 80017dc:	3b01      	subs	r3, #1
 80017de:	b29a      	uxth	r2, r3
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80017e4:	e02c      	b.n	8001840 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	f003 0302 	and.w	r3, r3, #2
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d113      	bne.n	800181c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	330c      	adds	r3, #12
 80017fe:	7812      	ldrb	r2, [r2, #0]
 8001800:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	1c5a      	adds	r2, r3, #1
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001810:	b29b      	uxth	r3, r3
 8001812:	3b01      	subs	r3, #1
 8001814:	b29a      	uxth	r2, r3
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	86da      	strh	r2, [r3, #54]	; 0x36
 800181a:	e011      	b.n	8001840 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800181c:	f7fe ffee 	bl	80007fc <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	683a      	ldr	r2, [r7, #0]
 8001828:	429a      	cmp	r2, r3
 800182a:	d803      	bhi.n	8001834 <HAL_SPI_Transmit+0x204>
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001832:	d102      	bne.n	800183a <HAL_SPI_Transmit+0x20a>
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d102      	bne.n	8001840 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800183e:	e026      	b.n	800188e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001844:	b29b      	uxth	r3, r3
 8001846:	2b00      	cmp	r3, #0
 8001848:	d1cd      	bne.n	80017e6 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	6839      	ldr	r1, [r7, #0]
 800184e:	68f8      	ldr	r0, [r7, #12]
 8001850:	f000 f8b2 	bl	80019b8 <SPI_EndRxTxTransaction>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d002      	beq.n	8001860 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	2220      	movs	r2, #32
 800185e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d10a      	bne.n	800187e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001868:	2300      	movs	r3, #0
 800186a:	613b      	str	r3, [r7, #16]
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	68db      	ldr	r3, [r3, #12]
 8001872:	613b      	str	r3, [r7, #16]
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	613b      	str	r3, [r7, #16]
 800187c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001882:	2b00      	cmp	r3, #0
 8001884:	d002      	beq.n	800188c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	77fb      	strb	r3, [r7, #31]
 800188a:	e000      	b.n	800188e <HAL_SPI_Transmit+0x25e>
  }

error:
 800188c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	2201      	movs	r2, #1
 8001892:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	2200      	movs	r2, #0
 800189a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800189e:	7ffb      	ldrb	r3, [r7, #31]
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3720      	adds	r7, #32
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b088      	sub	sp, #32
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	603b      	str	r3, [r7, #0]
 80018b4:	4613      	mov	r3, r2
 80018b6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80018b8:	f7fe ffa0 	bl	80007fc <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018c0:	1a9b      	subs	r3, r3, r2
 80018c2:	683a      	ldr	r2, [r7, #0]
 80018c4:	4413      	add	r3, r2
 80018c6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80018c8:	f7fe ff98 	bl	80007fc <HAL_GetTick>
 80018cc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80018ce:	4b39      	ldr	r3, [pc, #228]	; (80019b4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	015b      	lsls	r3, r3, #5
 80018d4:	0d1b      	lsrs	r3, r3, #20
 80018d6:	69fa      	ldr	r2, [r7, #28]
 80018d8:	fb02 f303 	mul.w	r3, r2, r3
 80018dc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80018de:	e054      	b.n	800198a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018e6:	d050      	beq.n	800198a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80018e8:	f7fe ff88 	bl	80007fc <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	69fa      	ldr	r2, [r7, #28]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d902      	bls.n	80018fe <SPI_WaitFlagStateUntilTimeout+0x56>
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d13d      	bne.n	800197a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	685a      	ldr	r2, [r3, #4]
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800190c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001916:	d111      	bne.n	800193c <SPI_WaitFlagStateUntilTimeout+0x94>
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001920:	d004      	beq.n	800192c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800192a:	d107      	bne.n	800193c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800193a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001940:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001944:	d10f      	bne.n	8001966 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001954:	601a      	str	r2, [r3, #0]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001964:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2201      	movs	r2, #1
 800196a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	2200      	movs	r2, #0
 8001972:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e017      	b.n	80019aa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d101      	bne.n	8001984 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001980:	2300      	movs	r3, #0
 8001982:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	3b01      	subs	r3, #1
 8001988:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	689a      	ldr	r2, [r3, #8]
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	4013      	ands	r3, r2
 8001994:	68ba      	ldr	r2, [r7, #8]
 8001996:	429a      	cmp	r2, r3
 8001998:	bf0c      	ite	eq
 800199a:	2301      	moveq	r3, #1
 800199c:	2300      	movne	r3, #0
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	461a      	mov	r2, r3
 80019a2:	79fb      	ldrb	r3, [r7, #7]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d19b      	bne.n	80018e0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3720      	adds	r7, #32
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20000000 	.word	0x20000000

080019b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b086      	sub	sp, #24
 80019bc:	af02      	add	r7, sp, #8
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	9300      	str	r3, [sp, #0]
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	2200      	movs	r2, #0
 80019cc:	2180      	movs	r1, #128	; 0x80
 80019ce:	68f8      	ldr	r0, [r7, #12]
 80019d0:	f7ff ff6a 	bl	80018a8 <SPI_WaitFlagStateUntilTimeout>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d007      	beq.n	80019ea <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019de:	f043 0220 	orr.w	r2, r3, #32
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e000      	b.n	80019ec <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80019ea:	2300      	movs	r3, #0
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3710      	adds	r7, #16
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	7c1b      	ldrb	r3, [r3, #16]
 8001a02:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	fb02 f303 	mul.w	r3, r2, r3
 8001a12:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	00db      	lsls	r3, r3, #3
 8001a18:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a1e:	68fa      	ldr	r2, [r7, #12]
 8001a20:	2100      	movs	r1, #0
 8001a22:	4618      	mov	r0, r3
 8001a24:	f001 fcd6 	bl	80033d4 <memset>
}
 8001a28:	bf00      	nop
 8001a2a:	3710      	adds	r7, #16
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b086      	sub	sp, #24
 8001a34:	af02      	add	r7, sp, #8
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	460b      	mov	r3, r1
 8001a3a:	70fb      	strb	r3, [r7, #3]
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	7c1b      	ldrb	r3, [r3, #16]
 8001a46:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8001a48:	78fb      	ldrb	r3, [r7, #3]
 8001a4a:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a50:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8001a52:	7bfb      	ldrb	r3, [r7, #15]
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	89ba      	ldrh	r2, [r7, #12]
 8001a58:	fb02 f303 	mul.w	r3, r2, r3
 8001a5c:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8001a5e:	89bb      	ldrh	r3, [r7, #12]
 8001a60:	00db      	lsls	r3, r3, #3
 8001a62:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8001a64:	89bb      	ldrh	r3, [r7, #12]
 8001a66:	68ba      	ldr	r2, [r7, #8]
 8001a68:	4413      	add	r3, r2
 8001a6a:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8001a6c:	7bf9      	ldrb	r1, [r7, #15]
 8001a6e:	78ba      	ldrb	r2, [r7, #2]
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	9300      	str	r3, [sp, #0]
 8001a74:	460b      	mov	r3, r1
 8001a76:	2100      	movs	r1, #0
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f001 fbb3 	bl	80031e4 <u8x8_DrawTile>
}
 8001a7e:	bf00      	nop
 8001a80:	3710      	adds	r7, #16
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b084      	sub	sp, #16
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a98:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001aa0:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	7c5b      	ldrb	r3, [r3, #17]
 8001aa8:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8001aaa:	7bba      	ldrb	r2, [r7, #14]
 8001aac:	7bfb      	ldrb	r3, [r7, #15]
 8001aae:	4619      	mov	r1, r3
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f7ff ffbd 	bl	8001a30 <u8g2_send_tile_row>
    src_row++;
 8001ab6:	7bfb      	ldrb	r3, [r7, #15]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8001abc:	7bbb      	ldrb	r3, [r7, #14]
 8001abe:	3301      	adds	r3, #1
 8001ac0:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8001ac2:	7bfa      	ldrb	r2, [r7, #15]
 8001ac4:	7b7b      	ldrb	r3, [r7, #13]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d203      	bcs.n	8001ad2 <u8g2_send_buffer+0x4c>
 8001aca:	7bba      	ldrb	r2, [r7, #14]
 8001acc:	7b3b      	ldrb	r3, [r7, #12]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d3eb      	bcc.n	8001aaa <u8g2_send_buffer+0x24>
}
 8001ad2:	bf00      	nop
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <u8g2_SetBufferCurrTileRow>:
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
}

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 8001ada:	b580      	push	{r7, lr}
 8001adc:	b082      	sub	sp, #8
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	78fa      	ldrb	r2, [r7, #3]
 8001aea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  u8g2->cb->update_dimension(u8g2);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	4798      	blx	r3
}
 8001b02:	bf00      	nop
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b082      	sub	sp, #8
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d002      	beq.n	8001b22 <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f7ff ff69 	bl	80019f4 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 8001b22:	2100      	movs	r1, #0
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f7ff ffd8 	bl	8001ada <u8g2_SetBufferCurrTileRow>
}
 8001b2a:	bf00      	nop
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b084      	sub	sp, #16
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f7ff ffa3 	bl	8001a86 <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001b46:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8001b4e:	7bfb      	ldrb	r3, [r7, #15]
 8001b50:	4413      	add	r3, r2
 8001b52:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	7c5b      	ldrb	r3, [r3, #17]
 8001b5a:	7bfa      	ldrb	r2, [r7, #15]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d304      	bcc.n	8001b6a <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f001 fb90 	bl	8003286 <u8x8_RefreshDisplay>
    return 0;
 8001b66:	2300      	movs	r3, #0
 8001b68:	e00d      	b.n	8001b86 <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d002      	beq.n	8001b7a <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f7ff ff3d 	bl	80019f4 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 8001b7a:	7bfb      	ldrb	r3, [r7, #15]
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f7ff ffab 	bl	8001ada <u8g2_SetBufferCurrTileRow>
  return 1;
 8001b84:	2301      	movs	r3, #1
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3710      	adds	r7, #16
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
	...

08001b90 <u8g2_m_16_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2208      	movs	r2, #8
 8001b9c:	701a      	strb	r2, [r3, #0]
  return buf;
 8001b9e:	4b03      	ldr	r3, [pc, #12]	; (8001bac <u8g2_m_16_8_f+0x1c>)
  #endif
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bc80      	pop	{r7}
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	20000180 	.word	0x20000180

08001bb0 <u8g2_Setup_ssd1306_128x64_noname_f>:
  buf = u8g2_m_16_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 f */
void u8g2_Setup_ssd1306_128x64_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b088      	sub	sp, #32
 8001bb4:	af02      	add	r7, sp, #8
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	607a      	str	r2, [r7, #4]
 8001bbc:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a0b      	ldr	r2, [pc, #44]	; (8001bf4 <u8g2_Setup_ssd1306_128x64_noname_f+0x44>)
 8001bc6:	490c      	ldr	r1, [pc, #48]	; (8001bf8 <u8g2_Setup_ssd1306_128x64_noname_f+0x48>)
 8001bc8:	68f8      	ldr	r0, [r7, #12]
 8001bca:	f001 fbbb 	bl	8003344 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 8001bce:	f107 0313 	add.w	r3, r7, #19
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7ff ffdc 	bl	8001b90 <u8g2_m_16_8_f>
 8001bd8:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8001bda:	7cfa      	ldrb	r2, [r7, #19]
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	9300      	str	r3, [sp, #0]
 8001be0:	4b06      	ldr	r3, [pc, #24]	; (8001bfc <u8g2_Setup_ssd1306_128x64_noname_f+0x4c>)
 8001be2:	6979      	ldr	r1, [r7, #20]
 8001be4:	68f8      	ldr	r0, [r7, #12]
 8001be6:	f000 feac 	bl	8002942 <u8g2_SetupBuffer>
}
 8001bea:	bf00      	nop
 8001bec:	3718      	adds	r7, #24
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	08002f09 	.word	0x08002f09
 8001bf8:	080030e1 	.word	0x080030e1
 8001bfc:	080027c7 	.word	0x080027c7

08001c00 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	460b      	mov	r3, r1
 8001c0a:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8001c0c:	78fb      	ldrb	r3, [r7, #3]
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	4413      	add	r3, r2
 8001c12:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	781b      	ldrb	r3, [r3, #0]
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bc80      	pop	{r7}
 8001c20:	4770      	bx	lr

08001c22 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 8001c22:	b480      	push	{r7}
 8001c24:	b085      	sub	sp, #20
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8001c2e:	78fb      	ldrb	r3, [r7, #3]
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	4413      	add	r3, r2
 8001c34:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	81fb      	strh	r3, [r7, #14]
    font++;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	3301      	adds	r3, #1
 8001c40:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8001c42:	89fb      	ldrh	r3, [r7, #14]
 8001c44:	021b      	lsls	r3, r3, #8
 8001c46:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	b29a      	uxth	r2, r3
 8001c4e:	89fb      	ldrh	r3, [r7, #14]
 8001c50:	4413      	add	r3, r2
 8001c52:	81fb      	strh	r3, [r7, #14]
    return pos;
 8001c54:	89fb      	ldrh	r3, [r7, #14]
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3714      	adds	r7, #20
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bc80      	pop	{r7}
 8001c5e:	4770      	bx	lr

08001c60 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	6838      	ldr	r0, [r7, #0]
 8001c6e:	f7ff ffc7 	bl	8001c00 <u8g2_font_get_byte>
 8001c72:	4603      	mov	r3, r0
 8001c74:	461a      	mov	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8001c7a:	2101      	movs	r1, #1
 8001c7c:	6838      	ldr	r0, [r7, #0]
 8001c7e:	f7ff ffbf 	bl	8001c00 <u8g2_font_get_byte>
 8001c82:	4603      	mov	r3, r0
 8001c84:	461a      	mov	r2, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8001c8a:	2102      	movs	r1, #2
 8001c8c:	6838      	ldr	r0, [r7, #0]
 8001c8e:	f7ff ffb7 	bl	8001c00 <u8g2_font_get_byte>
 8001c92:	4603      	mov	r3, r0
 8001c94:	461a      	mov	r2, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8001c9a:	2103      	movs	r1, #3
 8001c9c:	6838      	ldr	r0, [r7, #0]
 8001c9e:	f7ff ffaf 	bl	8001c00 <u8g2_font_get_byte>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8001caa:	2104      	movs	r1, #4
 8001cac:	6838      	ldr	r0, [r7, #0]
 8001cae:	f7ff ffa7 	bl	8001c00 <u8g2_font_get_byte>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 8001cba:	2105      	movs	r1, #5
 8001cbc:	6838      	ldr	r0, [r7, #0]
 8001cbe:	f7ff ff9f 	bl	8001c00 <u8g2_font_get_byte>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8001cca:	2106      	movs	r1, #6
 8001ccc:	6838      	ldr	r0, [r7, #0]
 8001cce:	f7ff ff97 	bl	8001c00 <u8g2_font_get_byte>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8001cda:	2107      	movs	r1, #7
 8001cdc:	6838      	ldr	r0, [r7, #0]
 8001cde:	f7ff ff8f 	bl	8001c00 <u8g2_font_get_byte>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 8001cea:	2108      	movs	r1, #8
 8001cec:	6838      	ldr	r0, [r7, #0]
 8001cee:	f7ff ff87 	bl	8001c00 <u8g2_font_get_byte>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 8001cfa:	2109      	movs	r1, #9
 8001cfc:	6838      	ldr	r0, [r7, #0]
 8001cfe:	f7ff ff7f 	bl	8001c00 <u8g2_font_get_byte>
 8001d02:	4603      	mov	r3, r0
 8001d04:	b25a      	sxtb	r2, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8001d0a:	210a      	movs	r1, #10
 8001d0c:	6838      	ldr	r0, [r7, #0]
 8001d0e:	f7ff ff77 	bl	8001c00 <u8g2_font_get_byte>
 8001d12:	4603      	mov	r3, r0
 8001d14:	b25a      	sxtb	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 8001d1a:	210b      	movs	r1, #11
 8001d1c:	6838      	ldr	r0, [r7, #0]
 8001d1e:	f7ff ff6f 	bl	8001c00 <u8g2_font_get_byte>
 8001d22:	4603      	mov	r3, r0
 8001d24:	b25a      	sxtb	r2, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 8001d2a:	210c      	movs	r1, #12
 8001d2c:	6838      	ldr	r0, [r7, #0]
 8001d2e:	f7ff ff67 	bl	8001c00 <u8g2_font_get_byte>
 8001d32:	4603      	mov	r3, r0
 8001d34:	b25a      	sxtb	r2, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8001d3a:	210d      	movs	r1, #13
 8001d3c:	6838      	ldr	r0, [r7, #0]
 8001d3e:	f7ff ff5f 	bl	8001c00 <u8g2_font_get_byte>
 8001d42:	4603      	mov	r3, r0
 8001d44:	b25a      	sxtb	r2, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 8001d4a:	210e      	movs	r1, #14
 8001d4c:	6838      	ldr	r0, [r7, #0]
 8001d4e:	f7ff ff57 	bl	8001c00 <u8g2_font_get_byte>
 8001d52:	4603      	mov	r3, r0
 8001d54:	b25a      	sxtb	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8001d5a:	210f      	movs	r1, #15
 8001d5c:	6838      	ldr	r0, [r7, #0]
 8001d5e:	f7ff ff4f 	bl	8001c00 <u8g2_font_get_byte>
 8001d62:	4603      	mov	r3, r0
 8001d64:	b25a      	sxtb	r2, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 8001d6a:	2110      	movs	r1, #16
 8001d6c:	6838      	ldr	r0, [r7, #0]
 8001d6e:	f7ff ff47 	bl	8001c00 <u8g2_font_get_byte>
 8001d72:	4603      	mov	r3, r0
 8001d74:	b25a      	sxtb	r2, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8001d7a:	2111      	movs	r1, #17
 8001d7c:	6838      	ldr	r0, [r7, #0]
 8001d7e:	f7ff ff50 	bl	8001c22 <u8g2_font_get_word>
 8001d82:	4603      	mov	r3, r0
 8001d84:	461a      	mov	r2, r3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8001d8a:	2113      	movs	r1, #19
 8001d8c:	6838      	ldr	r0, [r7, #0]
 8001d8e:	f7ff ff48 	bl	8001c22 <u8g2_font_get_word>
 8001d92:	4603      	mov	r3, r0
 8001d94:	461a      	mov	r2, r3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 8001d9a:	2115      	movs	r1, #21
 8001d9c:	6838      	ldr	r0, [r7, #0]
 8001d9e:	f7ff ff40 	bl	8001c22 <u8g2_font_get_word>
 8001da2:	4603      	mov	r3, r0
 8001da4:	461a      	mov	r2, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	82da      	strh	r2, [r3, #22]
#endif
}
 8001daa:	bf00      	nop
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 8001db2:	b480      	push	{r7}
 8001db4:	b085      	sub	sp, #20
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
 8001dba:	460b      	mov	r3, r1
 8001dbc:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	7b1b      	ldrb	r3, [r3, #12]
 8001dc2:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 8001dcc:	7bfa      	ldrb	r2, [r7, #15]
 8001dce:	7b7b      	ldrb	r3, [r7, #13]
 8001dd0:	fa42 f303 	asr.w	r3, r2, r3
 8001dd4:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 8001dd6:	7b7b      	ldrb	r3, [r7, #13]
 8001dd8:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 8001dda:	7bba      	ldrb	r2, [r7, #14]
 8001ddc:	78fb      	ldrb	r3, [r7, #3]
 8001dde:	4413      	add	r3, r2
 8001de0:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 8001de2:	7bbb      	ldrb	r3, [r7, #14]
 8001de4:	2b07      	cmp	r3, #7
 8001de6:	d91a      	bls.n	8001e1e <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8001de8:	2308      	movs	r3, #8
 8001dea:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 8001dec:	7b3a      	ldrb	r2, [r7, #12]
 8001dee:	7b7b      	ldrb	r3, [r7, #13]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	1c5a      	adds	r2, r3, #1
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	461a      	mov	r2, r3
 8001e06:	7b3b      	ldrb	r3, [r7, #12]
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	b25a      	sxtb	r2, r3
 8001e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	b25b      	sxtb	r3, r3
 8001e16:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8001e18:	7bbb      	ldrb	r3, [r7, #14]
 8001e1a:	3b08      	subs	r3, #8
 8001e1c:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 8001e1e:	78fb      	ldrb	r3, [r7, #3]
 8001e20:	f04f 32ff 	mov.w	r2, #4294967295
 8001e24:	fa02 f303 	lsl.w	r3, r2, r3
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	b2da      	uxtb	r2, r3
 8001e2e:	7bfb      	ldrb	r3, [r7, #15]
 8001e30:	4013      	ands	r3, r2
 8001e32:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	7bba      	ldrb	r2, [r7, #14]
 8001e38:	731a      	strb	r2, [r3, #12]
  return val;
 8001e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3714      	adds	r7, #20
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bc80      	pop	{r7}
 8001e44:	4770      	bx	lr

08001e46 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b084      	sub	sp, #16
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
 8001e4e:	460b      	mov	r3, r1
 8001e50:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8001e52:	78fb      	ldrb	r3, [r7, #3]
 8001e54:	4619      	mov	r1, r3
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f7ff ffab 	bl	8001db2 <u8g2_font_decode_get_unsigned_bits>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	73fb      	strb	r3, [r7, #15]
  d = 1;
 8001e60:	2301      	movs	r3, #1
 8001e62:	73bb      	strb	r3, [r7, #14]
  cnt--;
 8001e64:	78fb      	ldrb	r3, [r7, #3]
 8001e66:	3b01      	subs	r3, #1
 8001e68:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 8001e6a:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001e6e:	78fb      	ldrb	r3, [r7, #3]
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	73bb      	strb	r3, [r7, #14]
  v -= d;
 8001e76:	7bfa      	ldrb	r2, [r7, #15]
 8001e78:	7bbb      	ldrb	r3, [r7, #14]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	73fb      	strb	r3, [r7, #15]
  return v;
 8001e80:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3710      	adds	r7, #16
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <u8g2_font_2x_decode_len>:
  decode->y = ly;  
}


void u8g2_font_2x_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b088      	sub	sp, #32
 8001e90:	af02      	add	r7, sp, #8
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	460b      	mov	r3, r1
 8001e96:	70fb      	strb	r3, [r7, #3]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	3360      	adds	r3, #96	; 0x60
 8001ea0:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 8001ea2:	78fb      	ldrb	r3, [r7, #3]
 8001ea4:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001eac:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001eb4:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001ebc:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 8001ebe:	7bfa      	ldrb	r2, [r7, #15]
 8001ec0:	7d7b      	ldrb	r3, [r7, #21]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8001ec6:	7bfb      	ldrb	r3, [r7, #15]
 8001ec8:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 8001eca:	7dfa      	ldrb	r2, [r7, #23]
 8001ecc:	7bfb      	ldrb	r3, [r7, #15]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d201      	bcs.n	8001ed6 <u8g2_font_2x_decode_len+0x4a>
      current = cnt;
 8001ed2:	7dfb      	ldrb	r3, [r7, #23]
 8001ed4:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	889b      	ldrh	r3, [r3, #4]
 8001eda:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	88db      	ldrh	r3, [r3, #6]
 8001ee0:	817b      	strh	r3, [r7, #10]

    x += lx*2;
 8001ee2:	7d7b      	ldrb	r3, [r7, #21]
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	b29a      	uxth	r2, r3
 8001eea:	89bb      	ldrh	r3, [r7, #12]
 8001eec:	4413      	add	r3, r2
 8001eee:	81bb      	strh	r3, [r7, #12]
    y += ly*2;
 8001ef0:	7d3b      	ldrb	r3, [r7, #20]
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	b29a      	uxth	r2, r3
 8001ef8:	897b      	ldrh	r3, [r7, #10]
 8001efa:	4413      	add	r3, r2
 8001efc:	817b      	strh	r3, [r7, #10]
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 8001efe:	78bb      	ldrb	r3, [r7, #2]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d01d      	beq.n	8001f40 <u8g2_font_2x_decode_len+0xb4>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	7b9a      	ldrb	r2, [r3, #14]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 8001f0e:	7dbb      	ldrb	r3, [r7, #22]
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	897a      	ldrh	r2, [r7, #10]
 8001f18:	89b9      	ldrh	r1, [r7, #12]
 8001f1a:	2000      	movs	r0, #0
 8001f1c:	9000      	str	r0, [sp, #0]
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f000 fb68 	bl	80025f4 <u8g2_DrawHVLine>
	x, 
	y, 
	current*2, 
	0
      );
      u8g2_DrawHVLine(u8g2, 
 8001f24:	897b      	ldrh	r3, [r7, #10]
 8001f26:	3301      	adds	r3, #1
 8001f28:	b29a      	uxth	r2, r3
 8001f2a:	7dbb      	ldrb	r3, [r7, #22]
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	89b9      	ldrh	r1, [r7, #12]
 8001f34:	2000      	movs	r0, #0
 8001f36:	9000      	str	r0, [sp, #0]
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f000 fb5b 	bl	80025f4 <u8g2_DrawHVLine>
 8001f3e:	e020      	b.n	8001f82 <u8g2_font_2x_decode_len+0xf6>
	y+1, 
	current*2, 
	0
      );
    }
    else if ( decode->is_transparent == 0 )    
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	7b5b      	ldrb	r3, [r3, #13]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d11c      	bne.n	8001f82 <u8g2_font_2x_decode_len+0xf6>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	7bda      	ldrb	r2, [r3, #15]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 8001f52:	7dbb      	ldrb	r3, [r7, #22]
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	897a      	ldrh	r2, [r7, #10]
 8001f5c:	89b9      	ldrh	r1, [r7, #12]
 8001f5e:	2000      	movs	r0, #0
 8001f60:	9000      	str	r0, [sp, #0]
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 fb46 	bl	80025f4 <u8g2_DrawHVLine>
	x, 
	y, 
	current*2, 
	0
      );   
      u8g2_DrawHVLine(u8g2, 
 8001f68:	897b      	ldrh	r3, [r7, #10]
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	b29a      	uxth	r2, r3
 8001f6e:	7dbb      	ldrb	r3, [r7, #22]
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	89b9      	ldrh	r1, [r7, #12]
 8001f78:	2000      	movs	r0, #0
 8001f7a:	9000      	str	r0, [sp, #0]
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f000 fb39 	bl	80025f4 <u8g2_DrawHVLine>
	0
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8001f82:	7dfa      	ldrb	r2, [r7, #23]
 8001f84:	7bfb      	ldrb	r3, [r7, #15]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d309      	bcc.n	8001f9e <u8g2_font_2x_decode_len+0x112>
      break;
    cnt -= rem;
 8001f8a:	7dfa      	ldrb	r2, [r7, #23]
 8001f8c:	7bfb      	ldrb	r3, [r7, #15]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8001f92:	2300      	movs	r3, #0
 8001f94:	757b      	strb	r3, [r7, #21]
    ly++;
 8001f96:	7d3b      	ldrb	r3, [r7, #20]
 8001f98:	3301      	adds	r3, #1
 8001f9a:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8001f9c:	e78b      	b.n	8001eb6 <u8g2_font_2x_decode_len+0x2a>
      break;
 8001f9e:	bf00      	nop
  }
  lx += cnt;
 8001fa0:	7d7a      	ldrb	r2, [r7, #21]
 8001fa2:	7dfb      	ldrb	r3, [r7, #23]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 8001fa8:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	721a      	strb	r2, [r3, #8]
  decode->y = ly;
 8001fb0:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	725a      	strb	r2, [r3, #9]
  
}
 8001fb8:	bf00      	nop
 8001fba:	3718      	adds	r7, #24
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <u8g2_font_setup_decode>:


static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	3360      	adds	r3, #96	; 0x60
 8001fce:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	683a      	ldr	r2, [r7, #0]
 8001fd4:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	68f8      	ldr	r0, [r7, #12]
 8001fe6:	f7ff fee4 	bl	8001db2 <u8g2_font_decode_get_unsigned_bits>
 8001fea:	4603      	mov	r3, r0
 8001fec:	b25a      	sxtb	r2, r3
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	68f8      	ldr	r0, [r7, #12]
 8001ffc:	f7ff fed9 	bl	8001db2 <u8g2_font_decode_get_unsigned_bits>
 8002000:	4603      	mov	r3, r0
 8002002:	b25a      	sxtb	r2, r3
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	7b9b      	ldrb	r3, [r3, #14]
 8002016:	2b00      	cmp	r3, #0
 8002018:	bf0c      	ite	eq
 800201a:	2301      	moveq	r3, #1
 800201c:	2300      	movne	r3, #0
 800201e:	b2db      	uxtb	r3, r3
 8002020:	461a      	mov	r2, r3
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	73da      	strb	r2, [r3, #15]
}
 8002026:	bf00      	nop
 8002028:	3710      	adds	r7, #16
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <u8g2_font_2x_decode_glyph>:
  return d;
}


int8_t u8g2_font_2x_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 800202e:	b580      	push	{r7, lr}
 8002030:	b08a      	sub	sp, #40	; 0x28
 8002032:	af02      	add	r7, sp, #8
 8002034:	6078      	str	r0, [r7, #4]
 8002036:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	3360      	adds	r3, #96	; 0x60
 800203c:	61fb      	str	r3, [r7, #28]
    
  u8g2_font_setup_decode(u8g2, glyph_data);     /* set values in u8g2->font_decode data structure */
 800203e:	6839      	ldr	r1, [r7, #0]
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f7ff ffbd 	bl	8001fc0 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800204c:	76fb      	strb	r3, [r7, #27]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8002054:	4619      	mov	r1, r3
 8002056:	69f8      	ldr	r0, [r7, #28]
 8002058:	f7ff fef5 	bl	8001e46 <u8g2_font_decode_get_signed_bits>
 800205c:	4603      	mov	r3, r0
 800205e:	76bb      	strb	r3, [r7, #26]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8002066:	4619      	mov	r1, r3
 8002068:	69f8      	ldr	r0, [r7, #28]
 800206a:	f7ff feec 	bl	8001e46 <u8g2_font_decode_get_signed_bits>
 800206e:	4603      	mov	r3, r0
 8002070:	767b      	strb	r3, [r7, #25]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8002078:	4619      	mov	r1, r3
 800207a:	69f8      	ldr	r0, [r7, #28]
 800207c:	f7ff fee3 	bl	8001e46 <u8g2_font_decode_get_signed_bits>
 8002080:	4603      	mov	r3, r0
 8002082:	763b      	strb	r3, [r7, #24]
  
  if ( decode->glyph_width > 0 )
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800208a:	2b00      	cmp	r3, #0
 800208c:	dd7b      	ble.n	8002186 <u8g2_font_2x_decode_glyph+0x158>
  {
    decode->target_x += x;
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	889a      	ldrh	r2, [r3, #4]
 8002092:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8002096:	b29b      	uxth	r3, r3
 8002098:	4413      	add	r3, r2
 800209a:	b29a      	uxth	r2, r3
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	809a      	strh	r2, [r3, #4]
    decode->target_y -= 2*h+y;
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	88da      	ldrh	r2, [r3, #6]
 80020a4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	b299      	uxth	r1, r3
 80020ae:	f997 3019 	ldrsb.w	r3, [r7, #25]
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	440b      	add	r3, r1
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	b29a      	uxth	r2, r3
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	80da      	strh	r2, [r3, #6]

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	889b      	ldrh	r3, [r3, #4]
 80020c4:	82fb      	strh	r3, [r7, #22]
      y0 = decode->target_y;
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	88db      	ldrh	r3, [r3, #6]
 80020ca:	82bb      	strh	r3, [r7, #20]
      x1 = x0;
 80020cc:	8afb      	ldrh	r3, [r7, #22]
 80020ce:	827b      	strh	r3, [r7, #18]
      y1 = y0;
 80020d0:	8abb      	ldrh	r3, [r7, #20]
 80020d2:	823b      	strh	r3, [r7, #16]
      
      x1 += 2*decode->glyph_width;
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80020da:	b29b      	uxth	r3, r3
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	b29a      	uxth	r2, r3
 80020e0:	8a7b      	ldrh	r3, [r7, #18]
 80020e2:	4413      	add	r3, r2
 80020e4:	827b      	strh	r3, [r7, #18]
      y1 += 2*h;      
 80020e6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	b29a      	uxth	r2, r3
 80020f0:	8a3b      	ldrh	r3, [r7, #16]
 80020f2:	4413      	add	r3, r2
 80020f4:	823b      	strh	r3, [r7, #16]
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 80020f6:	8a78      	ldrh	r0, [r7, #18]
 80020f8:	8aba      	ldrh	r2, [r7, #20]
 80020fa:	8af9      	ldrh	r1, [r7, #22]
 80020fc:	8a3b      	ldrh	r3, [r7, #16]
 80020fe:	9300      	str	r3, [sp, #0]
 8002100:	4603      	mov	r3, r0
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 fb34 	bl	8002770 <u8g2_IsIntersection>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d102      	bne.n	8002114 <u8g2_font_2x_decode_glyph+0xe6>
	return d;
 800210e:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8002112:	e03c      	b.n	800218e <u8g2_font_2x_decode_glyph+0x160>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	2200      	movs	r2, #0
 8002118:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	2200      	movs	r2, #0
 800211e:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8002126:	4619      	mov	r1, r3
 8002128:	69f8      	ldr	r0, [r7, #28]
 800212a:	f7ff fe42 	bl	8001db2 <u8g2_font_decode_get_unsigned_bits>
 800212e:	4603      	mov	r3, r0
 8002130:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8002138:	4619      	mov	r1, r3
 800213a:	69f8      	ldr	r0, [r7, #28]
 800213c:	f7ff fe39 	bl	8001db2 <u8g2_font_decode_get_unsigned_bits>
 8002140:	4603      	mov	r3, r0
 8002142:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_2x_decode_len(u8g2, a, 0);
 8002144:	7bfb      	ldrb	r3, [r7, #15]
 8002146:	2200      	movs	r2, #0
 8002148:	4619      	mov	r1, r3
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f7ff fe9e 	bl	8001e8c <u8g2_font_2x_decode_len>
	u8g2_font_2x_decode_len(u8g2, b, 1);
 8002150:	7bbb      	ldrb	r3, [r7, #14]
 8002152:	2201      	movs	r2, #1
 8002154:	4619      	mov	r1, r3
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f7ff fe98 	bl	8001e8c <u8g2_font_2x_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 800215c:	2101      	movs	r1, #1
 800215e:	69f8      	ldr	r0, [r7, #28]
 8002160:	f7ff fe27 	bl	8001db2 <u8g2_font_decode_get_unsigned_bits>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1ec      	bne.n	8002144 <u8g2_font_2x_decode_glyph+0x116>

      if ( decode->y >= h )
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8002170:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8002174:	429a      	cmp	r2, r3
 8002176:	dd00      	ble.n	800217a <u8g2_font_2x_decode_glyph+0x14c>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8002178:	e7d2      	b.n	8002120 <u8g2_font_2x_decode_glyph+0xf2>
	break;
 800217a:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	7b9a      	ldrb	r2, [r3, #14]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  }
  return d*2;
 8002186:	7e3b      	ldrb	r3, [r7, #24]
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	b2db      	uxtb	r3, r3
 800218c:	b25b      	sxtb	r3, r3
}
 800218e:	4618      	mov	r0, r3
 8002190:	3720      	adds	r7, #32
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b086      	sub	sp, #24
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
 800219e:	460b      	mov	r3, r1
 80021a0:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021a6:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	3317      	adds	r3, #23
 80021ac:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 80021ae:	887b      	ldrh	r3, [r7, #2]
 80021b0:	2bff      	cmp	r3, #255	; 0xff
 80021b2:	d82a      	bhi.n	800220a <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 80021b4:	887b      	ldrh	r3, [r7, #2]
 80021b6:	2b60      	cmp	r3, #96	; 0x60
 80021b8:	d907      	bls.n	80021ca <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80021c0:	461a      	mov	r2, r3
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	4413      	add	r3, r2
 80021c6:	617b      	str	r3, [r7, #20]
 80021c8:	e009      	b.n	80021de <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 80021ca:	887b      	ldrh	r3, [r7, #2]
 80021cc:	2b40      	cmp	r3, #64	; 0x40
 80021ce:	d906      	bls.n	80021de <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 80021d6:	461a      	mov	r2, r3
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	4413      	add	r3, r2
 80021dc:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	3301      	adds	r3, #1
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d04e      	beq.n	8002286 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	887a      	ldrh	r2, [r7, #2]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d102      	bne.n	80021fa <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	3302      	adds	r3, #2
 80021f8:	e049      	b.n	800228e <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	3301      	adds	r3, #1
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	461a      	mov	r2, r3
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	4413      	add	r3, r2
 8002206:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8002208:	e7e9      	b.n	80021de <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8002210:	461a      	mov	r2, r3
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	4413      	add	r3, r2
 8002216:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 800221c:	2100      	movs	r1, #0
 800221e:	6938      	ldr	r0, [r7, #16]
 8002220:	f7ff fcff 	bl	8001c22 <u8g2_font_get_word>
 8002224:	4603      	mov	r3, r0
 8002226:	461a      	mov	r2, r3
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	4413      	add	r3, r2
 800222c:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 800222e:	2102      	movs	r1, #2
 8002230:	6938      	ldr	r0, [r7, #16]
 8002232:	f7ff fcf6 	bl	8001c22 <u8g2_font_get_word>
 8002236:	4603      	mov	r3, r0
 8002238:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	3304      	adds	r3, #4
 800223e:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 8002240:	89fa      	ldrh	r2, [r7, #14]
 8002242:	887b      	ldrh	r3, [r7, #2]
 8002244:	429a      	cmp	r2, r3
 8002246:	d3e9      	bcc.n	800221c <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 800224e:	89fb      	ldrh	r3, [r7, #14]
 8002250:	021b      	lsls	r3, r3, #8
 8002252:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	3301      	adds	r3, #1
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	b29a      	uxth	r2, r3
 800225c:	89fb      	ldrh	r3, [r7, #14]
 800225e:	4313      	orrs	r3, r2
 8002260:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 8002262:	89fb      	ldrh	r3, [r7, #14]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d010      	beq.n	800228a <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 8002268:	89fa      	ldrh	r2, [r7, #14]
 800226a:	887b      	ldrh	r3, [r7, #2]
 800226c:	429a      	cmp	r2, r3
 800226e:	d102      	bne.n	8002276 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	3303      	adds	r3, #3
 8002274:	e00b      	b.n	800228e <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	3302      	adds	r3, #2
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	461a      	mov	r2, r3
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	4413      	add	r3, r2
 8002282:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 8002284:	e7e0      	b.n	8002248 <u8g2_font_get_glyph_data+0xb2>
	break;
 8002286:	bf00      	nop
 8002288:	e000      	b.n	800228c <u8g2_font_get_glyph_data+0xf6>
	break;
 800228a:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	3718      	adds	r7, #24
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <u8g2_font_2x_draw_glyph>:
  }
  return dx;
}

static u8g2_uint_t u8g2_font_2x_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	b086      	sub	sp, #24
 800229a:	af00      	add	r7, sp, #0
 800229c:	60f8      	str	r0, [r7, #12]
 800229e:	4608      	mov	r0, r1
 80022a0:	4611      	mov	r1, r2
 80022a2:	461a      	mov	r2, r3
 80022a4:	4603      	mov	r3, r0
 80022a6:	817b      	strh	r3, [r7, #10]
 80022a8:	460b      	mov	r3, r1
 80022aa:	813b      	strh	r3, [r7, #8]
 80022ac:	4613      	mov	r3, r2
 80022ae:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t dx = 0;
 80022b0:	2300      	movs	r3, #0
 80022b2:	82fb      	strh	r3, [r7, #22]
  u8g2->font_decode.target_x = x;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	897a      	ldrh	r2, [r7, #10]
 80022b8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  u8g2->font_decode.target_y = y;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	893a      	ldrh	r2, [r7, #8]
 80022c0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 80022c4:	88fb      	ldrh	r3, [r7, #6]
 80022c6:	4619      	mov	r1, r3
 80022c8:	68f8      	ldr	r0, [r7, #12]
 80022ca:	f7ff ff64 	bl	8002196 <u8g2_font_get_glyph_data>
 80022ce:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d005      	beq.n	80022e2 <u8g2_font_2x_draw_glyph+0x4c>
  {
    dx = u8g2_font_2x_decode_glyph(u8g2, glyph_data);
 80022d6:	6939      	ldr	r1, [r7, #16]
 80022d8:	68f8      	ldr	r0, [r7, #12]
 80022da:	f7ff fea8 	bl	800202e <u8g2_font_2x_decode_glyph>
 80022de:	4603      	mov	r3, r0
 80022e0:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 80022e2:	8afb      	ldrh	r3, [r7, #22]
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3718      	adds	r7, #24
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <u8g2_DrawGlyphX2>:
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
}

u8g2_uint_t u8g2_DrawGlyphX2(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	4608      	mov	r0, r1
 80022f6:	4611      	mov	r1, r2
 80022f8:	461a      	mov	r2, r3
 80022fa:	4603      	mov	r3, r0
 80022fc:	817b      	strh	r3, [r7, #10]
 80022fe:	460b      	mov	r3, r1
 8002300:	813b      	strh	r3, [r7, #8]
 8002302:	4613      	mov	r3, r2
 8002304:	80fb      	strh	r3, [r7, #6]
  y += 2*u8g2->font_calc_vref(u8g2);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800230a:	68f8      	ldr	r0, [r7, #12]
 800230c:	4798      	blx	r3
 800230e:	4603      	mov	r3, r0
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	b29a      	uxth	r2, r3
 8002314:	893b      	ldrh	r3, [r7, #8]
 8002316:	4413      	add	r3, r2
 8002318:	813b      	strh	r3, [r7, #8]
  return u8g2_font_2x_draw_glyph(u8g2, x, y, encoding);
 800231a:	88fb      	ldrh	r3, [r7, #6]
 800231c:	893a      	ldrh	r2, [r7, #8]
 800231e:	8979      	ldrh	r1, [r7, #10]
 8002320:	68f8      	ldr	r0, [r7, #12]
 8002322:	f7ff ffb8 	bl	8002296 <u8g2_font_2x_draw_glyph>
 8002326:	4603      	mov	r3, r0
}
 8002328:	4618      	mov	r0, r3
 800232a:	3710      	adds	r7, #16
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <u8g2_draw_string_2x>:
  return sum;
}

static u8g2_uint_t u8g2_draw_string_2x(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string_2x(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b086      	sub	sp, #24
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	607b      	str	r3, [r7, #4]
 800233a:	460b      	mov	r3, r1
 800233c:	817b      	strh	r3, [r7, #10]
 800233e:	4613      	mov	r3, r2
 8002340:	813b      	strh	r3, [r7, #8]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8002342:	68f8      	ldr	r0, [r7, #12]
 8002344:	f000 fcdd 	bl	8002d02 <u8x8_utf8_init>
  sum = 0;
 8002348:	2300      	movs	r3, #0
 800234a:	82fb      	strh	r3, [r7, #22]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	7812      	ldrb	r2, [r2, #0]
 8002354:	4611      	mov	r1, r2
 8002356:	68f8      	ldr	r0, [r7, #12]
 8002358:	4798      	blx	r3
 800235a:	4603      	mov	r3, r0
 800235c:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 800235e:	8abb      	ldrh	r3, [r7, #20]
 8002360:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002364:	4293      	cmp	r3, r2
 8002366:	d018      	beq.n	800239a <u8g2_draw_string_2x+0x6a>
      break;
    str++;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	3301      	adds	r3, #1
 800236c:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 800236e:	8abb      	ldrh	r3, [r7, #20]
 8002370:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002374:	4293      	cmp	r3, r2
 8002376:	d0e9      	beq.n	800234c <u8g2_draw_string_2x+0x1c>
    {
      delta = u8g2_DrawGlyphX2(u8g2, x, y, e);
 8002378:	8abb      	ldrh	r3, [r7, #20]
 800237a:	893a      	ldrh	r2, [r7, #8]
 800237c:	8979      	ldrh	r1, [r7, #10]
 800237e:	68f8      	ldr	r0, [r7, #12]
 8002380:	f7ff ffb4 	bl	80022ec <u8g2_DrawGlyphX2>
 8002384:	4603      	mov	r3, r0
 8002386:	827b      	strh	r3, [r7, #18]
      x += delta;
 8002388:	897a      	ldrh	r2, [r7, #10]
 800238a:	8a7b      	ldrh	r3, [r7, #18]
 800238c:	4413      	add	r3, r2
 800238e:	817b      	strh	r3, [r7, #10]
      sum += delta;    
 8002390:	8afa      	ldrh	r2, [r7, #22]
 8002392:	8a7b      	ldrh	r3, [r7, #18]
 8002394:	4413      	add	r3, r2
 8002396:	82fb      	strh	r3, [r7, #22]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8002398:	e7d8      	b.n	800234c <u8g2_draw_string_2x+0x1c>
      break;
 800239a:	bf00      	nop
    }
  }
  return sum;
 800239c:	8afb      	ldrh	r3, [r7, #22]
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3718      	adds	r7, #24
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
	...

080023a8 <u8g2_DrawStrX2>:
  u8g2->u8x8.next_cb = u8x8_ascii_next;
  return u8g2_draw_string(u8g2, x, y, str);
}

u8g2_uint_t u8g2_DrawStrX2(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	607b      	str	r3, [r7, #4]
 80023b2:	460b      	mov	r3, r1
 80023b4:	817b      	strh	r3, [r7, #10]
 80023b6:	4613      	mov	r3, r2
 80023b8:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	4a06      	ldr	r2, [pc, #24]	; (80023d8 <u8g2_DrawStrX2+0x30>)
 80023be:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string_2x(u8g2, x, y, str);
 80023c0:	893a      	ldrh	r2, [r7, #8]
 80023c2:	8979      	ldrh	r1, [r7, #10]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	68f8      	ldr	r0, [r7, #12]
 80023c8:	f7ff ffb2 	bl	8002330 <u8g2_draw_string_2x>
 80023cc:	4603      	mov	r3, r0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3710      	adds	r7, #16
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	08002d1d 	.word	0x08002d1d

080023dc <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d05d      	beq.n	80024a8 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f993 2081 	ldrsb.w	r2, [r3, #129]	; 0x81
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f993 2082 	ldrsb.w	r2, [r3, #130]	; 0x82
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800240a:	2b00      	cmp	r3, #0
 800240c:	d04d      	beq.n	80024aa <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8002414:	2b01      	cmp	r3, #1
 8002416:	d11c      	bne.n	8002452 <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f993 208e 	ldrsb.w	r2, [r3, #142]	; 0x8e
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f993 3083 	ldrsb.w	r3, [r3, #131]	; 0x83
 8002424:	429a      	cmp	r2, r3
 8002426:	da05      	bge.n	8002434 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f993 3084 	ldrsb.w	r3, [r3, #132]	; 0x84
 8002440:	429a      	cmp	r2, r3
 8002442:	dd32      	ble.n	80024aa <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f993 2084 	ldrsb.w	r2, [r3, #132]	; 0x84
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8002450:	e02b      	b.n	80024aa <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 8002458:	461a      	mov	r2, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8002460:	4619      	mov	r1, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8002468:	440b      	add	r3, r1
 800246a:	429a      	cmp	r2, r3
 800246c:	da0d      	bge.n	800248a <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8002474:	b2da      	uxtb	r2, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 800247c:	b2db      	uxtb	r3, r3
 800247e:	4413      	add	r3, r2
 8002480:	b2db      	uxtb	r3, r3
 8002482:	b25a      	sxtb	r2, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8002496:	429a      	cmp	r2, r3
 8002498:	dd07      	ble.n	80024aa <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f993 2080 	ldrsb.w	r2, [r3, #128]	; 0x80
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 80024a6:	e000      	b.n	80024aa <u8g2_UpdateRefHeight+0xce>
    return;
 80024a8:	bf00      	nop
  }  
}
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bc80      	pop	{r7}
 80024b0:	4770      	bx	lr

080024b2 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 80024b2:	b480      	push	{r7}
 80024b4:	b083      	sub	sp, #12
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
  return 0;
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bc80      	pop	{r7}
 80024c4:	4770      	bx	lr
	...

080024c8 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	4a03      	ldr	r2, [pc, #12]	; (80024e0 <u8g2_SetFontPosBaseline+0x18>)
 80024d4:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80024d6:	bf00      	nop
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	bc80      	pop	{r7}
 80024de:	4770      	bx	lr
 80024e0:	080024b3 	.word	0x080024b3

080024e4 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f2:	683a      	ldr	r2, [r7, #0]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d00b      	beq.n	8002510 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	683a      	ldr	r2, [r7, #0]
 80024fc:	659a      	str	r2, [r3, #88]	; 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	3374      	adds	r3, #116	; 0x74
 8002502:	6839      	ldr	r1, [r7, #0]
 8002504:	4618      	mov	r0, r3
 8002506:	f7ff fbab 	bl	8001c60 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f7ff ff66 	bl	80023dc <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8002510:	bf00      	nop
 8002512:	3708      	adds	r7, #8
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}

08002518 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 8002518:	b480      	push	{r7}
 800251a:	b087      	sub	sp, #28
 800251c:	af00      	add	r7, sp, #0
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	60b9      	str	r1, [r7, #8]
 8002522:	4611      	mov	r1, r2
 8002524:	461a      	mov	r2, r3
 8002526:	460b      	mov	r3, r1
 8002528:	80fb      	strh	r3, [r7, #6]
 800252a:	4613      	mov	r3, r2
 800252c:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	881b      	ldrh	r3, [r3, #0]
 8002532:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 8002534:	8afb      	ldrh	r3, [r7, #22]
 8002536:	82bb      	strh	r3, [r7, #20]
  b += *len;
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	881a      	ldrh	r2, [r3, #0]
 800253c:	8abb      	ldrh	r3, [r7, #20]
 800253e:	4413      	add	r3, r2
 8002540:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8002542:	8afa      	ldrh	r2, [r7, #22]
 8002544:	8abb      	ldrh	r3, [r7, #20]
 8002546:	429a      	cmp	r2, r3
 8002548:	d90b      	bls.n	8002562 <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 800254a:	8afa      	ldrh	r2, [r7, #22]
 800254c:	88bb      	ldrh	r3, [r7, #4]
 800254e:	429a      	cmp	r2, r3
 8002550:	d205      	bcs.n	800255e <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8002552:	88bb      	ldrh	r3, [r7, #4]
 8002554:	82bb      	strh	r3, [r7, #20]
      b--;
 8002556:	8abb      	ldrh	r3, [r7, #20]
 8002558:	3b01      	subs	r3, #1
 800255a:	82bb      	strh	r3, [r7, #20]
 800255c:	e001      	b.n	8002562 <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 800255e:	88fb      	ldrh	r3, [r7, #6]
 8002560:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8002562:	8afa      	ldrh	r2, [r7, #22]
 8002564:	88bb      	ldrh	r3, [r7, #4]
 8002566:	429a      	cmp	r2, r3
 8002568:	d301      	bcc.n	800256e <u8g2_clip_intersection2+0x56>
    return 0;
 800256a:	2300      	movs	r3, #0
 800256c:	e01c      	b.n	80025a8 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 800256e:	8aba      	ldrh	r2, [r7, #20]
 8002570:	88fb      	ldrh	r3, [r7, #6]
 8002572:	429a      	cmp	r2, r3
 8002574:	d801      	bhi.n	800257a <u8g2_clip_intersection2+0x62>
    return 0;
 8002576:	2300      	movs	r3, #0
 8002578:	e016      	b.n	80025a8 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 800257a:	8afa      	ldrh	r2, [r7, #22]
 800257c:	88fb      	ldrh	r3, [r7, #6]
 800257e:	429a      	cmp	r2, r3
 8002580:	d201      	bcs.n	8002586 <u8g2_clip_intersection2+0x6e>
    a = c;
 8002582:	88fb      	ldrh	r3, [r7, #6]
 8002584:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 8002586:	8aba      	ldrh	r2, [r7, #20]
 8002588:	88bb      	ldrh	r3, [r7, #4]
 800258a:	429a      	cmp	r2, r3
 800258c:	d901      	bls.n	8002592 <u8g2_clip_intersection2+0x7a>
    b = d;
 800258e:	88bb      	ldrh	r3, [r7, #4]
 8002590:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	8afa      	ldrh	r2, [r7, #22]
 8002596:	801a      	strh	r2, [r3, #0]
  b -= a;
 8002598:	8aba      	ldrh	r2, [r7, #20]
 800259a:	8afb      	ldrh	r3, [r7, #22]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	82bb      	strh	r3, [r7, #20]
  *len = b;
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	8aba      	ldrh	r2, [r7, #20]
 80025a4:	801a      	strh	r2, [r3, #0]
  return 1;
 80025a6:	2301      	movs	r3, #1
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	371c      	adds	r7, #28
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bc80      	pop	{r7}
 80025b0:	4770      	bx	lr

080025b2 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80025b2:	b590      	push	{r4, r7, lr}
 80025b4:	b087      	sub	sp, #28
 80025b6:	af02      	add	r7, sp, #8
 80025b8:	60f8      	str	r0, [r7, #12]
 80025ba:	4608      	mov	r0, r1
 80025bc:	4611      	mov	r1, r2
 80025be:	461a      	mov	r2, r3
 80025c0:	4603      	mov	r3, r0
 80025c2:	817b      	strh	r3, [r7, #10]
 80025c4:	460b      	mov	r3, r1
 80025c6:	813b      	strh	r3, [r7, #8]
 80025c8:	4613      	mov	r3, r2
 80025ca:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025d0:	893a      	ldrh	r2, [r7, #8]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80025da:	88f8      	ldrh	r0, [r7, #6]
 80025dc:	893a      	ldrh	r2, [r7, #8]
 80025de:	8979      	ldrh	r1, [r7, #10]
 80025e0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80025e4:	9300      	str	r3, [sp, #0]
 80025e6:	4603      	mov	r3, r0
 80025e8:	68f8      	ldr	r0, [r7, #12]
 80025ea:	47a0      	blx	r4
}
 80025ec:	bf00      	nop
 80025ee:	3714      	adds	r7, #20
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd90      	pop	{r4, r7, pc}

080025f4 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80025f4:	b590      	push	{r4, r7, lr}
 80025f6:	b087      	sub	sp, #28
 80025f8:	af02      	add	r7, sp, #8
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	4608      	mov	r0, r1
 80025fe:	4611      	mov	r1, r2
 8002600:	461a      	mov	r2, r3
 8002602:	4603      	mov	r3, r0
 8002604:	817b      	strh	r3, [r7, #10]
 8002606:	460b      	mov	r3, r1
 8002608:	813b      	strh	r3, [r7, #8]
 800260a:	4613      	mov	r3, r2
 800260c:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8002614:	2b00      	cmp	r3, #0
 8002616:	d075      	beq.n	8002704 <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8002618:	88fb      	ldrh	r3, [r7, #6]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d072      	beq.n	8002704 <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 800261e:	88fb      	ldrh	r3, [r7, #6]
 8002620:	2b01      	cmp	r3, #1
 8002622:	d91a      	bls.n	800265a <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 8002624:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002628:	2b02      	cmp	r3, #2
 800262a:	d109      	bne.n	8002640 <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 800262c:	897a      	ldrh	r2, [r7, #10]
 800262e:	88fb      	ldrh	r3, [r7, #6]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	b29b      	uxth	r3, r3
 8002634:	817b      	strh	r3, [r7, #10]
	  x++;
 8002636:	897b      	ldrh	r3, [r7, #10]
 8002638:	3301      	adds	r3, #1
 800263a:	b29b      	uxth	r3, r3
 800263c:	817b      	strh	r3, [r7, #10]
 800263e:	e00c      	b.n	800265a <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 8002640:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002644:	2b03      	cmp	r3, #3
 8002646:	d108      	bne.n	800265a <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 8002648:	893a      	ldrh	r2, [r7, #8]
 800264a:	88fb      	ldrh	r3, [r7, #6]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	b29b      	uxth	r3, r3
 8002650:	813b      	strh	r3, [r7, #8]
	  y++;
 8002652:	893b      	ldrh	r3, [r7, #8]
 8002654:	3301      	adds	r3, #1
 8002656:	b29b      	uxth	r3, r3
 8002658:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 800265a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 8002666:	f897 3020 	ldrb.w	r3, [r7, #32]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d11a      	bne.n	80026a4 <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8002674:	893b      	ldrh	r3, [r7, #8]
 8002676:	429a      	cmp	r2, r3
 8002678:	d83b      	bhi.n	80026f2 <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8002680:	893b      	ldrh	r3, [r7, #8]
 8002682:	429a      	cmp	r2, r3
 8002684:	d937      	bls.n	80026f6 <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8002692:	1db9      	adds	r1, r7, #6
 8002694:	f107 000a 	add.w	r0, r7, #10
 8002698:	f7ff ff3e 	bl	8002518 <u8g2_clip_intersection2>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d11a      	bne.n	80026d8 <u8g2_DrawHVLine+0xe4>
	  return;
 80026a2:	e02f      	b.n	8002704 <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80026aa:	897b      	ldrh	r3, [r7, #10]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d824      	bhi.n	80026fa <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80026b6:	897b      	ldrh	r3, [r7, #10]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d920      	bls.n	80026fe <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 80026c8:	1db9      	adds	r1, r7, #6
 80026ca:	f107 0008 	add.w	r0, r7, #8
 80026ce:	f7ff ff23 	bl	8002518 <u8g2_clip_intersection2>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d014      	beq.n	8002702 <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026dc:	689c      	ldr	r4, [r3, #8]
 80026de:	8979      	ldrh	r1, [r7, #10]
 80026e0:	893a      	ldrh	r2, [r7, #8]
 80026e2:	88f8      	ldrh	r0, [r7, #6]
 80026e4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80026e8:	9300      	str	r3, [sp, #0]
 80026ea:	4603      	mov	r3, r0
 80026ec:	68f8      	ldr	r0, [r7, #12]
 80026ee:	47a0      	blx	r4
 80026f0:	e008      	b.n	8002704 <u8g2_DrawHVLine+0x110>
	  return;
 80026f2:	bf00      	nop
 80026f4:	e006      	b.n	8002704 <u8g2_DrawHVLine+0x110>
	  return;
 80026f6:	bf00      	nop
 80026f8:	e004      	b.n	8002704 <u8g2_DrawHVLine+0x110>
	  return;
 80026fa:	bf00      	nop
 80026fc:	e002      	b.n	8002704 <u8g2_DrawHVLine+0x110>
	  return;
 80026fe:	bf00      	nop
 8002700:	e000      	b.n	8002704 <u8g2_DrawHVLine+0x110>
	  return;
 8002702:	bf00      	nop
    }
}
 8002704:	3714      	adds	r7, #20
 8002706:	46bd      	mov	sp, r7
 8002708:	bd90      	pop	{r4, r7, pc}

0800270a <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 800270a:	b490      	push	{r4, r7}
 800270c:	b082      	sub	sp, #8
 800270e:	af00      	add	r7, sp, #0
 8002710:	4604      	mov	r4, r0
 8002712:	4608      	mov	r0, r1
 8002714:	4611      	mov	r1, r2
 8002716:	461a      	mov	r2, r3
 8002718:	4623      	mov	r3, r4
 800271a:	80fb      	strh	r3, [r7, #6]
 800271c:	4603      	mov	r3, r0
 800271e:	80bb      	strh	r3, [r7, #4]
 8002720:	460b      	mov	r3, r1
 8002722:	807b      	strh	r3, [r7, #2]
 8002724:	4613      	mov	r3, r2
 8002726:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 8002728:	887a      	ldrh	r2, [r7, #2]
 800272a:	88bb      	ldrh	r3, [r7, #4]
 800272c:	429a      	cmp	r2, r3
 800272e:	d20d      	bcs.n	800274c <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8002730:	883a      	ldrh	r2, [r7, #0]
 8002732:	88fb      	ldrh	r3, [r7, #6]
 8002734:	429a      	cmp	r2, r3
 8002736:	d901      	bls.n	800273c <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8002738:	2301      	movs	r3, #1
 800273a:	e014      	b.n	8002766 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 800273c:	887a      	ldrh	r2, [r7, #2]
 800273e:	883b      	ldrh	r3, [r7, #0]
 8002740:	429a      	cmp	r2, r3
 8002742:	d901      	bls.n	8002748 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8002744:	2301      	movs	r3, #1
 8002746:	e00e      	b.n	8002766 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8002748:	2300      	movs	r3, #0
 800274a:	e00c      	b.n	8002766 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 800274c:	883a      	ldrh	r2, [r7, #0]
 800274e:	88fb      	ldrh	r3, [r7, #6]
 8002750:	429a      	cmp	r2, r3
 8002752:	d907      	bls.n	8002764 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8002754:	887a      	ldrh	r2, [r7, #2]
 8002756:	883b      	ldrh	r3, [r7, #0]
 8002758:	429a      	cmp	r2, r3
 800275a:	d901      	bls.n	8002760 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 800275c:	2301      	movs	r3, #1
 800275e:	e002      	b.n	8002766 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8002760:	2300      	movs	r3, #0
 8002762:	e000      	b.n	8002766 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8002764:	2300      	movs	r3, #0
    }
  }
}
 8002766:	4618      	mov	r0, r3
 8002768:	3708      	adds	r7, #8
 800276a:	46bd      	mov	sp, r7
 800276c:	bc90      	pop	{r4, r7}
 800276e:	4770      	bx	lr

08002770 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	4608      	mov	r0, r1
 800277a:	4611      	mov	r1, r2
 800277c:	461a      	mov	r2, r3
 800277e:	4603      	mov	r3, r0
 8002780:	817b      	strh	r3, [r7, #10]
 8002782:	460b      	mov	r3, r1
 8002784:	813b      	strh	r3, [r7, #8]
 8002786:	4613      	mov	r3, r2
 8002788:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f8b3 104e 	ldrh.w	r1, [r3, #78]	; 0x4e
 8002796:	8b3b      	ldrh	r3, [r7, #24]
 8002798:	893a      	ldrh	r2, [r7, #8]
 800279a:	f7ff ffb6 	bl	800270a <u8g2_is_intersection_decision_tree>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d101      	bne.n	80027a8 <u8g2_IsIntersection+0x38>
    return 0; 
 80027a4:	2300      	movs	r3, #0
 80027a6:	e00a      	b.n	80027be <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
 80027b4:	88fb      	ldrh	r3, [r7, #6]
 80027b6:	897a      	ldrh	r2, [r7, #10]
 80027b8:	f7ff ffa7 	bl	800270a <u8g2_is_intersection_decision_tree>
 80027bc:	4603      	mov	r3, r0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3710      	adds	r7, #16
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80027c6:	b480      	push	{r7}
 80027c8:	b089      	sub	sp, #36	; 0x24
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	60f8      	str	r0, [r7, #12]
 80027ce:	4608      	mov	r0, r1
 80027d0:	4611      	mov	r1, r2
 80027d2:	461a      	mov	r2, r3
 80027d4:	4603      	mov	r3, r0
 80027d6:	817b      	strh	r3, [r7, #10]
 80027d8:	460b      	mov	r3, r1
 80027da:	813b      	strh	r3, [r7, #8]
 80027dc:	4613      	mov	r3, r2
 80027de:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 80027e0:	893b      	ldrh	r3, [r7, #8]
 80027e2:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 80027e4:	7efb      	ldrb	r3, [r7, #27]
 80027e6:	f003 0307 	and.w	r3, r3, #7
 80027ea:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 80027ec:	2301      	movs	r3, #1
 80027ee:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 80027f0:	7e3a      	ldrb	r2, [r7, #24]
 80027f2:	7efb      	ldrb	r3, [r7, #27]
 80027f4:	fa02 f303 	lsl.w	r3, r2, r3
 80027f8:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 80027fa:	2300      	movs	r3, #0
 80027fc:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 80027fe:	2300      	movs	r3, #0
 8002800:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8002808:	2b01      	cmp	r3, #1
 800280a:	d801      	bhi.n	8002810 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 800280c:	7e3b      	ldrb	r3, [r7, #24]
 800280e:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8002816:	2b01      	cmp	r3, #1
 8002818:	d001      	beq.n	800281e <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 800281a:	7e3b      	ldrb	r3, [r7, #24]
 800281c:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 800281e:	893b      	ldrh	r3, [r7, #8]
 8002820:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 8002822:	8afb      	ldrh	r3, [r7, #22]
 8002824:	f023 0307 	bic.w	r3, r3, #7
 8002828:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	7c1b      	ldrb	r3, [r3, #16]
 8002830:	b29b      	uxth	r3, r3
 8002832:	8afa      	ldrh	r2, [r7, #22]
 8002834:	fb02 f303 	mul.w	r3, r2, r3
 8002838:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800283e:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 8002840:	8afb      	ldrh	r3, [r7, #22]
 8002842:	69fa      	ldr	r2, [r7, #28]
 8002844:	4413      	add	r3, r2
 8002846:	61fb      	str	r3, [r7, #28]
  ptr += x;
 8002848:	897b      	ldrh	r3, [r7, #10]
 800284a:	69fa      	ldr	r2, [r7, #28]
 800284c:	4413      	add	r3, r2
 800284e:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 8002850:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002854:	2b00      	cmp	r3, #0
 8002856:	d117      	bne.n	8002888 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	781a      	ldrb	r2, [r3, #0]
 800285c:	7ebb      	ldrb	r3, [r7, #26]
 800285e:	4313      	orrs	r3, r2
 8002860:	b2da      	uxtb	r2, r3
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	781a      	ldrb	r2, [r3, #0]
 800286a:	7e7b      	ldrb	r3, [r7, #25]
 800286c:	4053      	eors	r3, r2
 800286e:	b2da      	uxtb	r2, r3
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	701a      	strb	r2, [r3, #0]
	ptr++;
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	3301      	adds	r3, #1
 8002878:	61fb      	str	r3, [r7, #28]
	len--;
 800287a:	88fb      	ldrh	r3, [r7, #6]
 800287c:	3b01      	subs	r3, #1
 800287e:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 8002880:	88fb      	ldrh	r3, [r7, #6]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1e8      	bne.n	8002858 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8002886:	e038      	b.n	80028fa <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	781a      	ldrb	r2, [r3, #0]
 800288c:	7ebb      	ldrb	r3, [r7, #26]
 800288e:	4313      	orrs	r3, r2
 8002890:	b2da      	uxtb	r2, r3
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	781a      	ldrb	r2, [r3, #0]
 800289a:	7e7b      	ldrb	r3, [r7, #25]
 800289c:	4053      	eors	r3, r2
 800289e:	b2da      	uxtb	r2, r3
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 80028a4:	7efb      	ldrb	r3, [r7, #27]
 80028a6:	3301      	adds	r3, #1
 80028a8:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 80028aa:	7efb      	ldrb	r3, [r7, #27]
 80028ac:	f003 0307 	and.w	r3, r3, #7
 80028b0:	76fb      	strb	r3, [r7, #27]
      len--;
 80028b2:	88fb      	ldrh	r3, [r7, #6]
 80028b4:	3b01      	subs	r3, #1
 80028b6:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 80028b8:	7efb      	ldrb	r3, [r7, #27]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d114      	bne.n	80028e8 <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80028c2:	461a      	mov	r2, r3
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	4413      	add	r3, r2
 80028c8:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d801      	bhi.n	80028d8 <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 80028d4:	2301      	movs	r3, #1
 80028d6:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d008      	beq.n	80028f4 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 80028e2:	2301      	movs	r3, #1
 80028e4:	767b      	strb	r3, [r7, #25]
 80028e6:	e005      	b.n	80028f4 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 80028e8:	7ebb      	ldrb	r3, [r7, #26]
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 80028ee:	7e7b      	ldrb	r3, [r7, #25]
 80028f0:	005b      	lsls	r3, r3, #1
 80028f2:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 80028f4:	88fb      	ldrh	r3, [r7, #6]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d1c6      	bne.n	8002888 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 80028fa:	bf00      	nop
 80028fc:	3724      	adds	r7, #36	; 0x24
 80028fe:	46bd      	mov	sp, r7
 8002900:	bc80      	pop	{r7}
 8002902:	4770      	bx	lr

08002904 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  u8g2->clip_y0 = 0;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002922:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800292c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  
  u8g2->cb->update_page_win(u8g2);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	4798      	blx	r3
}
 800293a:	bf00      	nop
 800293c:	3708      	adds	r7, #8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8002942:	b580      	push	{r7, lr}
 8002944:	b084      	sub	sp, #16
 8002946:	af00      	add	r7, sp, #0
 8002948:	60f8      	str	r0, [r7, #12]
 800294a:	60b9      	str	r1, [r7, #8]
 800294c:	603b      	str	r3, [r7, #0]
 800294e:	4613      	mov	r3, r2
 8002950:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2200      	movs	r2, #0
 8002956:	659a      	str	r2, [r3, #88]	; 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	683a      	ldr	r2, [r7, #0]
 800295c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	68ba      	ldr	r2, [r7, #8]
 8002962:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	79fa      	ldrb	r2, [r7, #7]
 8002968:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2200      	movs	r2, #0
 8002970:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  u8g2->bitmap_transparency = 0;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  
  u8g2->font_height_mode = 0; /* issue 2046 */
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
  u8g2->draw_color = 1;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  u8g2->is_auto_page_clear = 1;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
  
  u8g2->cb = u8g2_cb;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	69ba      	ldr	r2, [r7, #24]
 80029a0:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	68f8      	ldr	r0, [r7, #12]
 80029aa:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 80029ac:	68f8      	ldr	r0, [r7, #12]
 80029ae:	f7ff ffa9 	bl	8002904 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 80029b2:	68f8      	ldr	r0, [r7, #12]
 80029b4:	f7ff fd88 	bl	80024c8 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2200      	movs	r2, #0
 80029bc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
#endif
}
 80029c0:	bf00      	nop
 80029c2:	3710      	adds	r7, #16
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <u8g2_SetDisplayRotation>:
/*
  Usually the display rotation is set initially, but it could be done later also
  u8g2_cb can be U8G2_R0..U8G2_R3
*/
void u8g2_SetDisplayRotation(u8g2_t *u8g2, const u8g2_cb_t *u8g2_cb)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
  u8g2->cb = u8g2_cb;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	683a      	ldr	r2, [r7, #0]
 80029d6:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	4798      	blx	r3
}
 80029ec:	bf00      	nop
 80029ee:	3708      	adds	r7, #8
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b085      	sub	sp, #20
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a08:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8002a0a:	89fb      	ldrh	r3, [r7, #14]
 8002a0c:	00db      	lsls	r3, r3, #3
 8002a0e:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	89fa      	ldrh	r2, [r7, #14]
 8002a14:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  t = display_info->tile_width;
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	7c1b      	ldrb	r3, [r3, #16]
 8002a1a:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 8002a1c:	89fb      	ldrh	r3, [r7, #14]
 8002a1e:	00db      	lsls	r3, r3, #3
 8002a20:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	89fa      	ldrh	r2, [r7, #14]
 8002a26:	875a      	strh	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002a2e:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8002a30:	89fb      	ldrh	r3, [r7, #14]
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	89fa      	ldrh	r2, [r7, #14]
 8002a3a:	87da      	strh	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_buf_height;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a42:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8002a44:	89fb      	ldrh	r3, [r7, #14]
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 8002a4c:	4413      	add	r3, r2
 8002a4e:	68ba      	ldr	r2, [r7, #8]
 8002a50:	7c52      	ldrb	r2, [r2, #17]
 8002a52:	4293      	cmp	r3, r2
 8002a54:	dd08      	ble.n	8002a68 <u8g2_update_dimension_common+0x74>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	7c5b      	ldrb	r3, [r3, #17]
 8002a5a:	b29a      	uxth	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8002a68:	89fb      	ldrh	r3, [r7, #14]
 8002a6a:	00db      	lsls	r3, r3, #3
 8002a6c:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8002a8a:	89fb      	ldrh	r3, [r7, #14]
 8002a8c:	4413      	add	r3, r2
 8002a8e:	b29a      	uxth	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	8a9a      	ldrh	r2, [r3, #20]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  u8g2->height = display_info->pixel_height;
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	8ada      	ldrh	r2, [r3, #22]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 8002aaa:	bf00      	nop
 8002aac:	3714      	adds	r7, #20
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bc80      	pop	{r7}
 8002ab2:	4770      	bx	lr

08002ab4 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af02      	add	r7, sp, #8
 8002aba:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f8b3 0052 	ldrh.w	r0, [r3, #82]	; 0x52
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002ad4:	9300      	str	r3, [sp, #0]
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f7ff fe49 	bl	8002770 <u8g2_IsIntersection>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d104      	bne.n	8002aee <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 8002aec:	e03b      	b.n	8002b66 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2201      	movs	r2, #1
 8002af2:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d205      	bcs.n	8002b12 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d905      	bls.n	8002b2e <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d205      	bcs.n	8002b4a <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d905      	bls.n	8002b66 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 8002b66:	bf00      	nop
 8002b68:	3708      	adds	r7, #8
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b082      	sub	sp, #8
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f7ff ff3c 	bl	80029f4 <u8g2_update_dimension_common>
}
 8002b7c:	bf00      	nop
 8002b7e:	3708      	adds	r7, #8
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  
  u8g2->user_y0 = u8g2->buf_y0;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  u8g2->user_y1 = u8g2->buf_y1;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f7ff ff7b 	bl	8002ab4 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8002bbe:	bf00      	nop
 8002bc0:	3708      	adds	r7, #8
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <u8g2_update_dimension_r2>:
  u8g2_apply_clip_window(u8g2);
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}

void u8g2_update_dimension_r2(u8g2_t *u8g2)
{
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	b082      	sub	sp, #8
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f7ff ff10 	bl	80029f4 <u8g2_update_dimension_common>
}
 8002bd4:	bf00      	nop
 8002bd6:	3708      	adds	r7, #8
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <u8g2_update_page_win_r2>:

void u8g2_update_page_win_r2(u8g2_t *u8g2)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  u8g2->user_x1 = u8g2->width;	/* pixel_buf_width replaced with width */
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  
  /* there are ases where the height is not a multiple of 8. */
  /* in such a case u8g2->buf_y1 might be heigher than u8g2->height */
  u8g2->user_y0 = 0;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  if ( u8g2->height >= u8g2->buf_y1 )
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f8b3 2046 	ldrh.w	r2, [r3, #70]	; 0x46
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d30a      	bcc.n	8002c26 <u8g2_update_page_win_r2+0x4a>
    u8g2->user_y0 = u8g2->height - u8g2->buf_y1;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f8b3 2046 	ldrh.w	r2, [r3, #70]	; 0x46
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	b29a      	uxth	r2, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  u8g2->user_y1 = u8g2->height - u8g2->buf_y0;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f8b3 2046 	ldrh.w	r2, [r3, #70]	; 0x46
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	b29a      	uxth	r2, r3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f7ff ff39 	bl	8002ab4 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8002c42:	bf00      	nop
 8002c44:	3708      	adds	r7, #8
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b086      	sub	sp, #24
 8002c4e:	af02      	add	r7, sp, #8
 8002c50:	60f8      	str	r0, [r7, #12]
 8002c52:	4608      	mov	r0, r1
 8002c54:	4611      	mov	r1, r2
 8002c56:	461a      	mov	r2, r3
 8002c58:	4603      	mov	r3, r0
 8002c5a:	817b      	strh	r3, [r7, #10]
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	813b      	strh	r3, [r7, #8]
 8002c60:	4613      	mov	r3, r2
 8002c62:	80fb      	strh	r3, [r7, #6]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8002c64:	88f8      	ldrh	r0, [r7, #6]
 8002c66:	893a      	ldrh	r2, [r7, #8]
 8002c68:	8979      	ldrh	r1, [r7, #10]
 8002c6a:	7e3b      	ldrb	r3, [r7, #24]
 8002c6c:	9300      	str	r3, [sp, #0]
 8002c6e:	4603      	mov	r3, r0
 8002c70:	68f8      	ldr	r0, [r7, #12]
 8002c72:	f7ff fc9e 	bl	80025b2 <u8g2_draw_hv_line_2dir>
}
 8002c76:	bf00      	nop
 8002c78:	3710      	adds	r7, #16
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <u8g2_draw_l90_r2>:
  
  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
}

void u8g2_draw_l90_r2(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	b088      	sub	sp, #32
 8002c82:	af02      	add	r7, sp, #8
 8002c84:	60f8      	str	r0, [r7, #12]
 8002c86:	4608      	mov	r0, r1
 8002c88:	4611      	mov	r1, r2
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	817b      	strh	r3, [r7, #10]
 8002c90:	460b      	mov	r3, r1
 8002c92:	813b      	strh	r3, [r7, #8]
 8002c94:	4613      	mov	r3, r2
 8002c96:	80fb      	strh	r3, [r7, #6]
    yy -= len;
    yy++;
  }
  */

  yy = u8g2->height;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002c9e:	82bb      	strh	r3, [r7, #20]
  yy -= y;
 8002ca0:	8aba      	ldrh	r2, [r7, #20]
 8002ca2:	893b      	ldrh	r3, [r7, #8]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	82bb      	strh	r3, [r7, #20]
  
  xx = u8g2->width;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002cae:	82fb      	strh	r3, [r7, #22]
  xx -= x;
 8002cb0:	8afa      	ldrh	r2, [r7, #22]
 8002cb2:	897b      	ldrh	r3, [r7, #10]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	82fb      	strh	r3, [r7, #22]
  
  if ( dir == 0 )
 8002cb8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d107      	bne.n	8002cd0 <u8g2_draw_l90_r2+0x52>
  {
    yy--;
 8002cc0:	8abb      	ldrh	r3, [r7, #20]
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	82bb      	strh	r3, [r7, #20]
    xx -= len;
 8002cc6:	8afa      	ldrh	r2, [r7, #22]
 8002cc8:	88fb      	ldrh	r3, [r7, #6]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	82fb      	strh	r3, [r7, #22]
 8002cce:	e00a      	b.n	8002ce6 <u8g2_draw_l90_r2+0x68>
  }
  else if ( dir == 1 )
 8002cd0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d106      	bne.n	8002ce6 <u8g2_draw_l90_r2+0x68>
  {
    xx--;
 8002cd8:	8afb      	ldrh	r3, [r7, #22]
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	82fb      	strh	r3, [r7, #22]
    yy -= len;
 8002cde:	8aba      	ldrh	r2, [r7, #20]
 8002ce0:	88fb      	ldrh	r3, [r7, #6]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	82bb      	strh	r3, [r7, #20]
  }

  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 8002ce6:	88f8      	ldrh	r0, [r7, #6]
 8002ce8:	8aba      	ldrh	r2, [r7, #20]
 8002cea:	8af9      	ldrh	r1, [r7, #22]
 8002cec:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002cf0:	9300      	str	r3, [sp, #0]
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	68f8      	ldr	r0, [r7, #12]
 8002cf6:	f7ff fc5c 	bl	80025b2 <u8g2_draw_hv_line_2dir>
}
 8002cfa:	bf00      	nop
 8002cfc:	3718      	adds	r7, #24
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}

08002d02 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8002d02:	b480      	push	{r7}
 8002d04:	b083      	sub	sp, #12
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8002d12:	bf00      	nop
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bc80      	pop	{r7}
 8002d1a:	4770      	bx	lr

08002d1c <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	460b      	mov	r3, r1
 8002d26:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8002d28:	78fb      	ldrb	r3, [r7, #3]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d002      	beq.n	8002d34 <u8x8_ascii_next+0x18>
 8002d2e:	78fb      	ldrb	r3, [r7, #3]
 8002d30:	2b0a      	cmp	r3, #10
 8002d32:	d102      	bne.n	8002d3a <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 8002d34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d38:	e001      	b.n	8002d3e <u8x8_ascii_next+0x22>
  return b;
 8002d3a:	78fb      	ldrb	r3, [r7, #3]
 8002d3c:	b29b      	uxth	r3, r3
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	370c      	adds	r7, #12
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bc80      	pop	{r7}
 8002d46:	4770      	bx	lr

08002d48 <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 8002d48:	b590      	push	{r4, r7, lr}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	460b      	mov	r3, r1
 8002d52:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	691c      	ldr	r4, [r3, #16]
 8002d58:	78fa      	ldrb	r2, [r7, #3]
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	2120      	movs	r1, #32
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	47a0      	blx	r4
 8002d62:	4603      	mov	r3, r0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd90      	pop	{r4, r7, pc}

08002d6c <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8002d6c:	b590      	push	{r4, r7, lr}
 8002d6e:	b085      	sub	sp, #20
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	460b      	mov	r3, r1
 8002d76:	607a      	str	r2, [r7, #4]
 8002d78:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	691c      	ldr	r4, [r3, #16]
 8002d7e:	7afa      	ldrb	r2, [r7, #11]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2117      	movs	r1, #23
 8002d84:	68f8      	ldr	r0, [r7, #12]
 8002d86:	47a0      	blx	r4
 8002d88:	4603      	mov	r3, r0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3714      	adds	r7, #20
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd90      	pop	{r4, r7, pc}

08002d92 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b082      	sub	sp, #8
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8002d9e:	1cfb      	adds	r3, r7, #3
 8002da0:	461a      	mov	r2, r3
 8002da2:	2101      	movs	r1, #1
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f7ff ffe1 	bl	8002d6c <u8x8_byte_SendBytes>
 8002daa:	4603      	mov	r3, r0
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3708      	adds	r7, #8
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8002db4:	b590      	push	{r4, r7, lr}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	68dc      	ldr	r4, [r3, #12]
 8002dc4:	78fa      	ldrb	r2, [r7, #3]
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	2115      	movs	r1, #21
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	47a0      	blx	r4
 8002dce:	4603      	mov	r3, r0
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd90      	pop	{r4, r7, pc}

08002dd8 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8002dd8:	b590      	push	{r4, r7, lr}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	460b      	mov	r3, r1
 8002de2:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	68dc      	ldr	r4, [r3, #12]
 8002de8:	78fa      	ldrb	r2, [r7, #3]
 8002dea:	2300      	movs	r3, #0
 8002dec:	2116      	movs	r1, #22
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	47a0      	blx	r4
 8002df2:	4603      	mov	r3, r0
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd90      	pop	{r4, r7, pc}

08002dfc <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8002dfc:	b590      	push	{r4, r7, lr}
 8002dfe:	b085      	sub	sp, #20
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	460b      	mov	r3, r1
 8002e06:	607a      	str	r2, [r7, #4]
 8002e08:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	68dc      	ldr	r4, [r3, #12]
 8002e0e:	7afa      	ldrb	r2, [r7, #11]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2117      	movs	r1, #23
 8002e14:	68f8      	ldr	r0, [r7, #12]
 8002e16:	47a0      	blx	r4
 8002e18:	4603      	mov	r3, r0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3714      	adds	r7, #20
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd90      	pop	{r4, r7, pc}

08002e22 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8002e22:	b590      	push	{r4, r7, lr}
 8002e24:	b083      	sub	sp, #12
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	68dc      	ldr	r4, [r3, #12]
 8002e2e:	2300      	movs	r3, #0
 8002e30:	2200      	movs	r2, #0
 8002e32:	2118      	movs	r1, #24
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	47a0      	blx	r4
 8002e38:	4603      	mov	r3, r0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd90      	pop	{r4, r7, pc}

08002e42 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8002e42:	b590      	push	{r4, r7, lr}
 8002e44:	b083      	sub	sp, #12
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	68dc      	ldr	r4, [r3, #12]
 8002e4e:	2300      	movs	r3, #0
 8002e50:	2200      	movs	r2, #0
 8002e52:	2119      	movs	r1, #25
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	47a0      	blx	r4
 8002e58:	4603      	mov	r3, r0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	370c      	adds	r7, #12
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd90      	pop	{r4, r7, pc}

08002e62 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8002e62:	b590      	push	{r4, r7, lr}
 8002e64:	b085      	sub	sp, #20
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
 8002e6a:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	73fb      	strb	r3, [r7, #15]
    data++;
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	3301      	adds	r3, #1
 8002e76:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8002e78:	7bfb      	ldrb	r3, [r7, #15]
 8002e7a:	2bfe      	cmp	r3, #254	; 0xfe
 8002e7c:	d031      	beq.n	8002ee2 <u8x8_cad_SendSequence+0x80>
 8002e7e:	2bfe      	cmp	r3, #254	; 0xfe
 8002e80:	dc3d      	bgt.n	8002efe <u8x8_cad_SendSequence+0x9c>
 8002e82:	2b19      	cmp	r3, #25
 8002e84:	dc3b      	bgt.n	8002efe <u8x8_cad_SendSequence+0x9c>
 8002e86:	2b18      	cmp	r3, #24
 8002e88:	da23      	bge.n	8002ed2 <u8x8_cad_SendSequence+0x70>
 8002e8a:	2b16      	cmp	r3, #22
 8002e8c:	dc02      	bgt.n	8002e94 <u8x8_cad_SendSequence+0x32>
 8002e8e:	2b15      	cmp	r3, #21
 8002e90:	da03      	bge.n	8002e9a <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8002e92:	e034      	b.n	8002efe <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 8002e94:	2b17      	cmp	r3, #23
 8002e96:	d00e      	beq.n	8002eb6 <u8x8_cad_SendSequence+0x54>
	return;
 8002e98:	e031      	b.n	8002efe <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	68dc      	ldr	r4, [r3, #12]
 8002ea4:	7bba      	ldrb	r2, [r7, #14]
 8002ea6:	7bf9      	ldrb	r1, [r7, #15]
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	47a0      	blx	r4
	  data++;
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	603b      	str	r3, [r7, #0]
	  break;
 8002eb4:	e022      	b.n	8002efc <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8002ebc:	f107 030e 	add.w	r3, r7, #14
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	2101      	movs	r1, #1
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f7ff ff99 	bl	8002dfc <u8x8_cad_SendData>
	  data++;
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	3301      	adds	r3, #1
 8002ece:	603b      	str	r3, [r7, #0]
	  break;
 8002ed0:	e014      	b.n	8002efc <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	68dc      	ldr	r4, [r3, #12]
 8002ed6:	7bf9      	ldrb	r1, [r7, #15]
 8002ed8:	2300      	movs	r3, #0
 8002eda:	2200      	movs	r2, #0
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	47a0      	blx	r4
	  break;
 8002ee0:	e00c      	b.n	8002efc <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8002ee8:	7bbb      	ldrb	r3, [r7, #14]
 8002eea:	461a      	mov	r2, r3
 8002eec:	2129      	movs	r1, #41	; 0x29
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f000 f9d8 	bl	80032a4 <u8x8_gpio_call>
	  data++;
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	603b      	str	r3, [r7, #0]
	  break;
 8002efa:	bf00      	nop
    cmd = *data;
 8002efc:	e7b6      	b.n	8002e6c <u8x8_cad_SendSequence+0xa>
	return;
 8002efe:	bf00      	nop
    }
  }
}
 8002f00:	3714      	adds	r7, #20
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd90      	pop	{r4, r7, pc}
	...

08002f08 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002f08:	b590      	push	{r4, r7, lr}
 8002f0a:	b085      	sub	sp, #20
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	607b      	str	r3, [r7, #4]
 8002f12:	460b      	mov	r3, r1
 8002f14:	72fb      	strb	r3, [r7, #11]
 8002f16:	4613      	mov	r3, r2
 8002f18:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 8002f1a:	7afb      	ldrb	r3, [r7, #11]
 8002f1c:	3b14      	subs	r3, #20
 8002f1e:	2b05      	cmp	r3, #5
 8002f20:	d82f      	bhi.n	8002f82 <u8x8_cad_001+0x7a>
 8002f22:	a201      	add	r2, pc, #4	; (adr r2, 8002f28 <u8x8_cad_001+0x20>)
 8002f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f28:	08002f71 	.word	0x08002f71
 8002f2c:	08002f41 	.word	0x08002f41
 8002f30:	08002f55 	.word	0x08002f55
 8002f34:	08002f69 	.word	0x08002f69
 8002f38:	08002f71 	.word	0x08002f71
 8002f3c:	08002f71 	.word	0x08002f71
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 8002f40:	2100      	movs	r1, #0
 8002f42:	68f8      	ldr	r0, [r7, #12]
 8002f44:	f7ff ff00 	bl	8002d48 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8002f48:	7abb      	ldrb	r3, [r7, #10]
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	68f8      	ldr	r0, [r7, #12]
 8002f4e:	f7ff ff20 	bl	8002d92 <u8x8_byte_SendByte>
      break;
 8002f52:	e018      	b.n	8002f86 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 8002f54:	2100      	movs	r1, #0
 8002f56:	68f8      	ldr	r0, [r7, #12]
 8002f58:	f7ff fef6 	bl	8002d48 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8002f5c:	7abb      	ldrb	r3, [r7, #10]
 8002f5e:	4619      	mov	r1, r3
 8002f60:	68f8      	ldr	r0, [r7, #12]
 8002f62:	f7ff ff16 	bl	8002d92 <u8x8_byte_SendByte>
      break;
 8002f66:	e00e      	b.n	8002f86 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 8002f68:	2101      	movs	r1, #1
 8002f6a:	68f8      	ldr	r0, [r7, #12]
 8002f6c:	f7ff feec 	bl	8002d48 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	691c      	ldr	r4, [r3, #16]
 8002f74:	7aba      	ldrb	r2, [r7, #10]
 8002f76:	7af9      	ldrb	r1, [r7, #11]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	68f8      	ldr	r0, [r7, #12]
 8002f7c:	47a0      	blx	r4
 8002f7e:	4603      	mov	r3, r0
 8002f80:	e002      	b.n	8002f88 <u8x8_cad_001+0x80>
    default:
      return 0;
 8002f82:	2300      	movs	r3, #0
 8002f84:	e000      	b.n	8002f88 <u8x8_cad_001+0x80>
  }
  return 1;
 8002f86:	2301      	movs	r3, #1
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3714      	adds	r7, #20
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd90      	pop	{r4, r7, pc}

08002f90 <u8x8_d_ssd1306_sh1106_generic>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b086      	sub	sp, #24
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	607b      	str	r3, [r7, #4]
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	72fb      	strb	r3, [r7, #11]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 8002fa2:	7afb      	ldrb	r3, [r7, #11]
 8002fa4:	3b0b      	subs	r3, #11
 8002fa6:	2b04      	cmp	r3, #4
 8002fa8:	f200 808a 	bhi.w	80030c0 <u8x8_d_ssd1306_sh1106_generic+0x130>
 8002fac:	a201      	add	r2, pc, #4	; (adr r2, 8002fb4 <u8x8_d_ssd1306_sh1106_generic+0x24>)
 8002fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fb2:	bf00      	nop
 8002fb4:	08002fc9 	.word	0x08002fc9
 8002fb8:	080030c1 	.word	0x080030c1
 8002fbc:	08002fe3 	.word	0x08002fe3
 8002fc0:	08003015 	.word	0x08003015
 8002fc4:	08003035 	.word	0x08003035
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8002fc8:	7abb      	ldrb	r3, [r7, #10]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d104      	bne.n	8002fd8 <u8x8_d_ssd1306_sh1106_generic+0x48>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
 8002fce:	4940      	ldr	r1, [pc, #256]	; (80030d0 <u8x8_d_ssd1306_sh1106_generic+0x140>)
 8002fd0:	68f8      	ldr	r0, [r7, #12]
 8002fd2:	f7ff ff46 	bl	8002e62 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
      break;
 8002fd6:	e075      	b.n	80030c4 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
 8002fd8:	493e      	ldr	r1, [pc, #248]	; (80030d4 <u8x8_d_ssd1306_sh1106_generic+0x144>)
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	f7ff ff41 	bl	8002e62 <u8x8_cad_SendSequence>
      break;
 8002fe0:	e070      	b.n	80030c4 <u8x8_d_ssd1306_sh1106_generic+0x134>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 8002fe2:	7abb      	ldrb	r3, [r7, #10]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d10a      	bne.n	8002ffe <u8x8_d_ssd1306_sh1106_generic+0x6e>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
 8002fe8:	493b      	ldr	r1, [pc, #236]	; (80030d8 <u8x8_d_ssd1306_sh1106_generic+0x148>)
 8002fea:	68f8      	ldr	r0, [r7, #12]
 8002fec:	f7ff ff39 	bl	8002e62 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	7c9a      	ldrb	r2, [r3, #18]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 8002ffc:	e062      	b.n	80030c4 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
 8002ffe:	4937      	ldr	r1, [pc, #220]	; (80030dc <u8x8_d_ssd1306_sh1106_generic+0x14c>)
 8003000:	68f8      	ldr	r0, [r7, #12]
 8003002:	f7ff ff2e 	bl	8002e62 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	7cda      	ldrb	r2, [r3, #19]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 8003012:	e057      	b.n	80030c4 <u8x8_d_ssd1306_sh1106_generic+0x134>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8003014:	68f8      	ldr	r0, [r7, #12]
 8003016:	f7ff ff04 	bl	8002e22 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 800301a:	2181      	movs	r1, #129	; 0x81
 800301c:	68f8      	ldr	r0, [r7, #12]
 800301e:	f7ff fec9 	bl	8002db4 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
 8003022:	7abb      	ldrb	r3, [r7, #10]
 8003024:	4619      	mov	r1, r3
 8003026:	68f8      	ldr	r0, [r7, #12]
 8003028:	f7ff fed6 	bl	8002dd8 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 800302c:	68f8      	ldr	r0, [r7, #12]
 800302e:	f7ff ff08 	bl	8002e42 <u8x8_cad_EndTransfer>
      break;
 8003032:	e047      	b.n	80030c4 <u8x8_d_ssd1306_sh1106_generic+0x134>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8003034:	68f8      	ldr	r0, [r7, #12]
 8003036:	f7ff fef4 	bl	8002e22 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	795b      	ldrb	r3, [r3, #5]
 800303e:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 8003040:	7dfb      	ldrb	r3, [r7, #23]
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800304c:	7dfb      	ldrb	r3, [r7, #23]
 800304e:	4413      	add	r3, r2
 8003050:	75fb      	strb	r3, [r7, #23]
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 8003052:	2140      	movs	r1, #64	; 0x40
 8003054:	68f8      	ldr	r0, [r7, #12]
 8003056:	f7ff fead 	bl	8002db4 <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 800305a:	7dfb      	ldrb	r3, [r7, #23]
 800305c:	091b      	lsrs	r3, r3, #4
 800305e:	b2db      	uxtb	r3, r3
 8003060:	f043 0310 	orr.w	r3, r3, #16
 8003064:	b2db      	uxtb	r3, r3
 8003066:	4619      	mov	r1, r3
 8003068:	68f8      	ldr	r0, [r7, #12]
 800306a:	f7ff fea3 	bl	8002db4 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
 800306e:	7dfb      	ldrb	r3, [r7, #23]
 8003070:	f003 030f 	and.w	r3, r3, #15
 8003074:	b2db      	uxtb	r3, r3
 8003076:	4619      	mov	r1, r3
 8003078:	68f8      	ldr	r0, [r7, #12]
 800307a:	f7ff fead 	bl	8002dd8 <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	799b      	ldrb	r3, [r3, #6]
 8003082:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8003086:	b2db      	uxtb	r3, r3
 8003088:	4619      	mov	r1, r3
 800308a:	68f8      	ldr	r0, [r7, #12]
 800308c:	f7ff fea4 	bl	8002dd8 <u8x8_cad_SendArg>

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	791b      	ldrb	r3, [r3, #4]
 8003094:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 800309c:	7dbb      	ldrb	r3, [r7, #22]
 800309e:	00db      	lsls	r3, r3, #3
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	693a      	ldr	r2, [r7, #16]
 80030a4:	4619      	mov	r1, r3
 80030a6:	68f8      	ldr	r0, [r7, #12]
 80030a8:	f7ff fea8 	bl	8002dfc <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 80030ac:	7abb      	ldrb	r3, [r7, #10]
 80030ae:	3b01      	subs	r3, #1
 80030b0:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 80030b2:	7abb      	ldrb	r3, [r7, #10]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d1eb      	bne.n	8003090 <u8x8_d_ssd1306_sh1106_generic+0x100>
      
      u8x8_cad_EndTransfer(u8x8);
 80030b8:	68f8      	ldr	r0, [r7, #12]
 80030ba:	f7ff fec2 	bl	8002e42 <u8x8_cad_EndTransfer>
      break;
 80030be:	e001      	b.n	80030c4 <u8x8_d_ssd1306_sh1106_generic+0x134>
    default:
      return 0;
 80030c0:	2300      	movs	r3, #0
 80030c2:	e000      	b.n	80030c6 <u8x8_d_ssd1306_sh1106_generic+0x136>
  }
  return 1;
 80030c4:	2301      	movs	r3, #1
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3718      	adds	r7, #24
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	08004090 	.word	0x08004090
 80030d4:	08004098 	.word	0x08004098
 80030d8:	080040a0 	.word	0x080040a0
 80030dc:	080040a8 	.word	0x080040a8

080030e0 <u8x8_d_ssd1306_128x64_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	607b      	str	r3, [r7, #4]
 80030ea:	460b      	mov	r3, r1
 80030ec:	72fb      	strb	r3, [r7, #11]
 80030ee:	4613      	mov	r3, r2
 80030f0:	72bb      	strb	r3, [r7, #10]
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 80030f2:	7aba      	ldrb	r2, [r7, #10]
 80030f4:	7af9      	ldrb	r1, [r7, #11]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	68f8      	ldr	r0, [r7, #12]
 80030fa:	f7ff ff49 	bl	8002f90 <u8x8_d_ssd1306_sh1106_generic>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d001      	beq.n	8003108 <u8x8_d_ssd1306_128x64_noname+0x28>
    return 1;
 8003104:	2301      	movs	r3, #1
 8003106:	e014      	b.n	8003132 <u8x8_d_ssd1306_128x64_noname+0x52>
  
  switch(msg)
 8003108:	7afb      	ldrb	r3, [r7, #11]
 800310a:	2b09      	cmp	r3, #9
 800310c:	d009      	beq.n	8003122 <u8x8_d_ssd1306_128x64_noname+0x42>
 800310e:	2b0a      	cmp	r3, #10
 8003110:	d10c      	bne.n	800312c <u8x8_d_ssd1306_128x64_noname+0x4c>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 8003112:	68f8      	ldr	r0, [r7, #12]
 8003114:	f000 f829 	bl	800316a <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
 8003118:	4908      	ldr	r1, [pc, #32]	; (800313c <u8x8_d_ssd1306_128x64_noname+0x5c>)
 800311a:	68f8      	ldr	r0, [r7, #12]
 800311c:	f7ff fea1 	bl	8002e62 <u8x8_cad_SendSequence>
      break;
 8003120:	e006      	b.n	8003130 <u8x8_d_ssd1306_128x64_noname+0x50>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
 8003122:	4907      	ldr	r1, [pc, #28]	; (8003140 <u8x8_d_ssd1306_128x64_noname+0x60>)
 8003124:	68f8      	ldr	r0, [r7, #12]
 8003126:	f000 f80d 	bl	8003144 <u8x8_d_helper_display_setup_memory>
      break;
 800312a:	e001      	b.n	8003130 <u8x8_d_ssd1306_128x64_noname+0x50>
    default:
      return 0;
 800312c:	2300      	movs	r3, #0
 800312e:	e000      	b.n	8003132 <u8x8_d_ssd1306_128x64_noname+0x52>
  }
  return 1;
 8003130:	2301      	movs	r3, #1
}
 8003132:	4618      	mov	r0, r3
 8003134:	3710      	adds	r7, #16
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	08004058 	.word	0x08004058
 8003140:	080040b0 	.word	0x080040b0

08003144 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	683a      	ldr	r2, [r7, #0]
 8003152:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	7c9a      	ldrb	r2, [r3, #18]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8003160:	bf00      	nop
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	bc80      	pop	{r7}
 8003168:	4770      	bx	lr

0800316a <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 800316a:	b590      	push	{r4, r7, lr}
 800316c:	b083      	sub	sp, #12
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	695c      	ldr	r4, [r3, #20]
 8003176:	2300      	movs	r3, #0
 8003178:	2200      	movs	r2, #0
 800317a:	2128      	movs	r1, #40	; 0x28
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	68dc      	ldr	r4, [r3, #12]
 8003184:	2300      	movs	r3, #0
 8003186:	2200      	movs	r2, #0
 8003188:	2114      	movs	r1, #20
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 800318e:	2201      	movs	r2, #1
 8003190:	214b      	movs	r1, #75	; 0x4b
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 f886 	bl	80032a4 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	791b      	ldrb	r3, [r3, #4]
 800319e:	461a      	mov	r2, r3
 80031a0:	2129      	movs	r1, #41	; 0x29
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 f87e 	bl	80032a4 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 80031a8:	2200      	movs	r2, #0
 80031aa:	214b      	movs	r1, #75	; 0x4b
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f000 f879 	bl	80032a4 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	791b      	ldrb	r3, [r3, #4]
 80031b8:	461a      	mov	r2, r3
 80031ba:	2129      	movs	r1, #41	; 0x29
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f000 f871 	bl	80032a4 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 80031c2:	2201      	movs	r2, #1
 80031c4:	214b      	movs	r1, #75	; 0x4b
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 f86c 	bl	80032a4 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	795b      	ldrb	r3, [r3, #5]
 80031d2:	461a      	mov	r2, r3
 80031d4:	2129      	movs	r1, #41	; 0x29
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 f864 	bl	80032a4 <u8x8_gpio_call>
}    
 80031dc:	bf00      	nop
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd90      	pop	{r4, r7, pc}

080031e4 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 80031e4:	b590      	push	{r4, r7, lr}
 80031e6:	b085      	sub	sp, #20
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	4608      	mov	r0, r1
 80031ee:	4611      	mov	r1, r2
 80031f0:	461a      	mov	r2, r3
 80031f2:	4603      	mov	r3, r0
 80031f4:	70fb      	strb	r3, [r7, #3]
 80031f6:	460b      	mov	r3, r1
 80031f8:	70bb      	strb	r3, [r7, #2]
 80031fa:	4613      	mov	r3, r2
 80031fc:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 80031fe:	78fb      	ldrb	r3, [r7, #3]
 8003200:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8003202:	78bb      	ldrb	r3, [r7, #2]
 8003204:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8003206:	787b      	ldrb	r3, [r7, #1]
 8003208:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 800320a:	6a3b      	ldr	r3, [r7, #32]
 800320c:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	689c      	ldr	r4, [r3, #8]
 8003212:	f107 0308 	add.w	r3, r7, #8
 8003216:	2201      	movs	r2, #1
 8003218:	210f      	movs	r1, #15
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	47a0      	blx	r4
 800321e:	4603      	mov	r3, r0
}
 8003220:	4618      	mov	r0, r3
 8003222:	3714      	adds	r7, #20
 8003224:	46bd      	mov	sp, r7
 8003226:	bd90      	pop	{r4, r7, pc}

08003228 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8003228:	b590      	push	{r4, r7, lr}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	689c      	ldr	r4, [r3, #8]
 8003234:	2300      	movs	r3, #0
 8003236:	2200      	movs	r2, #0
 8003238:	2109      	movs	r1, #9
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	47a0      	blx	r4
}
 800323e:	bf00      	nop
 8003240:	370c      	adds	r7, #12
 8003242:	46bd      	mov	sp, r7
 8003244:	bd90      	pop	{r4, r7, pc}

08003246 <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8003246:	b590      	push	{r4, r7, lr}
 8003248:	b083      	sub	sp, #12
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	689c      	ldr	r4, [r3, #8]
 8003252:	2300      	movs	r3, #0
 8003254:	2200      	movs	r2, #0
 8003256:	210a      	movs	r1, #10
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	47a0      	blx	r4
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}
 800325c:	bf00      	nop
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	bd90      	pop	{r4, r7, pc}

08003264 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8003264:	b590      	push	{r4, r7, lr}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	460b      	mov	r3, r1
 800326e:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	689c      	ldr	r4, [r3, #8]
 8003274:	78fa      	ldrb	r2, [r7, #3]
 8003276:	2300      	movs	r3, #0
 8003278:	210b      	movs	r1, #11
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	47a0      	blx	r4
}
 800327e:	bf00      	nop
 8003280:	370c      	adds	r7, #12
 8003282:	46bd      	mov	sp, r7
 8003284:	bd90      	pop	{r4, r7, pc}

08003286 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8003286:	b590      	push	{r4, r7, lr}
 8003288:	b083      	sub	sp, #12
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	689c      	ldr	r4, [r3, #8]
 8003292:	2300      	movs	r3, #0
 8003294:	2200      	movs	r2, #0
 8003296:	2110      	movs	r1, #16
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	47a0      	blx	r4
}
 800329c:	bf00      	nop
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd90      	pop	{r4, r7, pc}

080032a4 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 80032a4:	b590      	push	{r4, r7, lr}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	460b      	mov	r3, r1
 80032ae:	70fb      	strb	r3, [r7, #3]
 80032b0:	4613      	mov	r3, r2
 80032b2:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	695c      	ldr	r4, [r3, #20]
 80032b8:	78ba      	ldrb	r2, [r7, #2]
 80032ba:	78f9      	ldrb	r1, [r7, #3]
 80032bc:	2300      	movs	r3, #0
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	47a0      	blx	r4
}
 80032c2:	bf00      	nop
 80032c4:	370c      	adds	r7, #12
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd90      	pop	{r4, r7, pc}

080032ca <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 80032ca:	b480      	push	{r7}
 80032cc:	b085      	sub	sp, #20
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	60f8      	str	r0, [r7, #12]
 80032d2:	607b      	str	r3, [r7, #4]
 80032d4:	460b      	mov	r3, r1
 80032d6:	72fb      	strb	r3, [r7, #11]
 80032d8:	4613      	mov	r3, r2
 80032da:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3714      	adds	r7, #20
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bc80      	pop	{r7}
 80032e6:	4770      	bx	lr

080032e8 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a11      	ldr	r2, [pc, #68]	; (8003340 <u8x8_SetupDefaults+0x58>)
 80032fa:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	4a10      	ldr	r2, [pc, #64]	; (8003340 <u8x8_SetupDefaults+0x58>)
 8003300:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a0e      	ldr	r2, [pc, #56]	; (8003340 <u8x8_SetupDefaults+0x58>)
 8003306:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4a0d      	ldr	r2, [pc, #52]	; (8003340 <u8x8_SetupDefaults+0x58>)
 800330c:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	22ff      	movs	r2, #255	; 0xff
 8003328:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	22ff      	movs	r2, #255	; 0xff
 8003330:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8003334:	bf00      	nop
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	bc80      	pop	{r7}
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop
 8003340:	080032cb 	.word	0x080032cb

08003344 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	607a      	str	r2, [r7, #4]
 8003350:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8003352:	68f8      	ldr	r0, [r7, #12]
 8003354:	f7ff ffc8 	bl	80032e8 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	68ba      	ldr	r2, [r7, #8]
 800335c:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	683a      	ldr	r2, [r7, #0]
 8003368:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	69ba      	ldr	r2, [r7, #24]
 800336e:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8003370:	68f8      	ldr	r0, [r7, #12]
 8003372:	f7ff ff59 	bl	8003228 <u8x8_SetupMemory>
}
 8003376:	bf00      	nop
 8003378:	3710      	adds	r7, #16
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
	...

08003380 <__errno>:
 8003380:	4b01      	ldr	r3, [pc, #4]	; (8003388 <__errno+0x8>)
 8003382:	6818      	ldr	r0, [r3, #0]
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	2000000c 	.word	0x2000000c

0800338c <__libc_init_array>:
 800338c:	b570      	push	{r4, r5, r6, lr}
 800338e:	2600      	movs	r6, #0
 8003390:	4d0c      	ldr	r5, [pc, #48]	; (80033c4 <__libc_init_array+0x38>)
 8003392:	4c0d      	ldr	r4, [pc, #52]	; (80033c8 <__libc_init_array+0x3c>)
 8003394:	1b64      	subs	r4, r4, r5
 8003396:	10a4      	asrs	r4, r4, #2
 8003398:	42a6      	cmp	r6, r4
 800339a:	d109      	bne.n	80033b0 <__libc_init_array+0x24>
 800339c:	f000 fc9c 	bl	8003cd8 <_init>
 80033a0:	2600      	movs	r6, #0
 80033a2:	4d0a      	ldr	r5, [pc, #40]	; (80033cc <__libc_init_array+0x40>)
 80033a4:	4c0a      	ldr	r4, [pc, #40]	; (80033d0 <__libc_init_array+0x44>)
 80033a6:	1b64      	subs	r4, r4, r5
 80033a8:	10a4      	asrs	r4, r4, #2
 80033aa:	42a6      	cmp	r6, r4
 80033ac:	d105      	bne.n	80033ba <__libc_init_array+0x2e>
 80033ae:	bd70      	pop	{r4, r5, r6, pc}
 80033b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80033b4:	4798      	blx	r3
 80033b6:	3601      	adds	r6, #1
 80033b8:	e7ee      	b.n	8003398 <__libc_init_array+0xc>
 80033ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80033be:	4798      	blx	r3
 80033c0:	3601      	adds	r6, #1
 80033c2:	e7f2      	b.n	80033aa <__libc_init_array+0x1e>
 80033c4:	0800415c 	.word	0x0800415c
 80033c8:	0800415c 	.word	0x0800415c
 80033cc:	0800415c 	.word	0x0800415c
 80033d0:	08004160 	.word	0x08004160

080033d4 <memset>:
 80033d4:	4603      	mov	r3, r0
 80033d6:	4402      	add	r2, r0
 80033d8:	4293      	cmp	r3, r2
 80033da:	d100      	bne.n	80033de <memset+0xa>
 80033dc:	4770      	bx	lr
 80033de:	f803 1b01 	strb.w	r1, [r3], #1
 80033e2:	e7f9      	b.n	80033d8 <memset+0x4>

080033e4 <siprintf>:
 80033e4:	b40e      	push	{r1, r2, r3}
 80033e6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80033ea:	b500      	push	{lr}
 80033ec:	b09c      	sub	sp, #112	; 0x70
 80033ee:	ab1d      	add	r3, sp, #116	; 0x74
 80033f0:	9002      	str	r0, [sp, #8]
 80033f2:	9006      	str	r0, [sp, #24]
 80033f4:	9107      	str	r1, [sp, #28]
 80033f6:	9104      	str	r1, [sp, #16]
 80033f8:	4808      	ldr	r0, [pc, #32]	; (800341c <siprintf+0x38>)
 80033fa:	4909      	ldr	r1, [pc, #36]	; (8003420 <siprintf+0x3c>)
 80033fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8003400:	9105      	str	r1, [sp, #20]
 8003402:	6800      	ldr	r0, [r0, #0]
 8003404:	a902      	add	r1, sp, #8
 8003406:	9301      	str	r3, [sp, #4]
 8003408:	f000 f8fe 	bl	8003608 <_svfiprintf_r>
 800340c:	2200      	movs	r2, #0
 800340e:	9b02      	ldr	r3, [sp, #8]
 8003410:	701a      	strb	r2, [r3, #0]
 8003412:	b01c      	add	sp, #112	; 0x70
 8003414:	f85d eb04 	ldr.w	lr, [sp], #4
 8003418:	b003      	add	sp, #12
 800341a:	4770      	bx	lr
 800341c:	2000000c 	.word	0x2000000c
 8003420:	ffff0208 	.word	0xffff0208

08003424 <__retarget_lock_acquire_recursive>:
 8003424:	4770      	bx	lr

08003426 <__retarget_lock_release_recursive>:
 8003426:	4770      	bx	lr

08003428 <sbrk_aligned>:
 8003428:	b570      	push	{r4, r5, r6, lr}
 800342a:	4e0e      	ldr	r6, [pc, #56]	; (8003464 <sbrk_aligned+0x3c>)
 800342c:	460c      	mov	r4, r1
 800342e:	6831      	ldr	r1, [r6, #0]
 8003430:	4605      	mov	r5, r0
 8003432:	b911      	cbnz	r1, 800343a <sbrk_aligned+0x12>
 8003434:	f000 fb7e 	bl	8003b34 <_sbrk_r>
 8003438:	6030      	str	r0, [r6, #0]
 800343a:	4621      	mov	r1, r4
 800343c:	4628      	mov	r0, r5
 800343e:	f000 fb79 	bl	8003b34 <_sbrk_r>
 8003442:	1c43      	adds	r3, r0, #1
 8003444:	d00a      	beq.n	800345c <sbrk_aligned+0x34>
 8003446:	1cc4      	adds	r4, r0, #3
 8003448:	f024 0403 	bic.w	r4, r4, #3
 800344c:	42a0      	cmp	r0, r4
 800344e:	d007      	beq.n	8003460 <sbrk_aligned+0x38>
 8003450:	1a21      	subs	r1, r4, r0
 8003452:	4628      	mov	r0, r5
 8003454:	f000 fb6e 	bl	8003b34 <_sbrk_r>
 8003458:	3001      	adds	r0, #1
 800345a:	d101      	bne.n	8003460 <sbrk_aligned+0x38>
 800345c:	f04f 34ff 	mov.w	r4, #4294967295
 8003460:	4620      	mov	r0, r4
 8003462:	bd70      	pop	{r4, r5, r6, pc}
 8003464:	20000588 	.word	0x20000588

08003468 <_malloc_r>:
 8003468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800346c:	1ccd      	adds	r5, r1, #3
 800346e:	f025 0503 	bic.w	r5, r5, #3
 8003472:	3508      	adds	r5, #8
 8003474:	2d0c      	cmp	r5, #12
 8003476:	bf38      	it	cc
 8003478:	250c      	movcc	r5, #12
 800347a:	2d00      	cmp	r5, #0
 800347c:	4607      	mov	r7, r0
 800347e:	db01      	blt.n	8003484 <_malloc_r+0x1c>
 8003480:	42a9      	cmp	r1, r5
 8003482:	d905      	bls.n	8003490 <_malloc_r+0x28>
 8003484:	230c      	movs	r3, #12
 8003486:	2600      	movs	r6, #0
 8003488:	603b      	str	r3, [r7, #0]
 800348a:	4630      	mov	r0, r6
 800348c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003490:	4e2e      	ldr	r6, [pc, #184]	; (800354c <_malloc_r+0xe4>)
 8003492:	f000 fb95 	bl	8003bc0 <__malloc_lock>
 8003496:	6833      	ldr	r3, [r6, #0]
 8003498:	461c      	mov	r4, r3
 800349a:	bb34      	cbnz	r4, 80034ea <_malloc_r+0x82>
 800349c:	4629      	mov	r1, r5
 800349e:	4638      	mov	r0, r7
 80034a0:	f7ff ffc2 	bl	8003428 <sbrk_aligned>
 80034a4:	1c43      	adds	r3, r0, #1
 80034a6:	4604      	mov	r4, r0
 80034a8:	d14d      	bne.n	8003546 <_malloc_r+0xde>
 80034aa:	6834      	ldr	r4, [r6, #0]
 80034ac:	4626      	mov	r6, r4
 80034ae:	2e00      	cmp	r6, #0
 80034b0:	d140      	bne.n	8003534 <_malloc_r+0xcc>
 80034b2:	6823      	ldr	r3, [r4, #0]
 80034b4:	4631      	mov	r1, r6
 80034b6:	4638      	mov	r0, r7
 80034b8:	eb04 0803 	add.w	r8, r4, r3
 80034bc:	f000 fb3a 	bl	8003b34 <_sbrk_r>
 80034c0:	4580      	cmp	r8, r0
 80034c2:	d13a      	bne.n	800353a <_malloc_r+0xd2>
 80034c4:	6821      	ldr	r1, [r4, #0]
 80034c6:	3503      	adds	r5, #3
 80034c8:	1a6d      	subs	r5, r5, r1
 80034ca:	f025 0503 	bic.w	r5, r5, #3
 80034ce:	3508      	adds	r5, #8
 80034d0:	2d0c      	cmp	r5, #12
 80034d2:	bf38      	it	cc
 80034d4:	250c      	movcc	r5, #12
 80034d6:	4638      	mov	r0, r7
 80034d8:	4629      	mov	r1, r5
 80034da:	f7ff ffa5 	bl	8003428 <sbrk_aligned>
 80034de:	3001      	adds	r0, #1
 80034e0:	d02b      	beq.n	800353a <_malloc_r+0xd2>
 80034e2:	6823      	ldr	r3, [r4, #0]
 80034e4:	442b      	add	r3, r5
 80034e6:	6023      	str	r3, [r4, #0]
 80034e8:	e00e      	b.n	8003508 <_malloc_r+0xa0>
 80034ea:	6822      	ldr	r2, [r4, #0]
 80034ec:	1b52      	subs	r2, r2, r5
 80034ee:	d41e      	bmi.n	800352e <_malloc_r+0xc6>
 80034f0:	2a0b      	cmp	r2, #11
 80034f2:	d916      	bls.n	8003522 <_malloc_r+0xba>
 80034f4:	1961      	adds	r1, r4, r5
 80034f6:	42a3      	cmp	r3, r4
 80034f8:	6025      	str	r5, [r4, #0]
 80034fa:	bf18      	it	ne
 80034fc:	6059      	strne	r1, [r3, #4]
 80034fe:	6863      	ldr	r3, [r4, #4]
 8003500:	bf08      	it	eq
 8003502:	6031      	streq	r1, [r6, #0]
 8003504:	5162      	str	r2, [r4, r5]
 8003506:	604b      	str	r3, [r1, #4]
 8003508:	4638      	mov	r0, r7
 800350a:	f104 060b 	add.w	r6, r4, #11
 800350e:	f000 fb5d 	bl	8003bcc <__malloc_unlock>
 8003512:	f026 0607 	bic.w	r6, r6, #7
 8003516:	1d23      	adds	r3, r4, #4
 8003518:	1af2      	subs	r2, r6, r3
 800351a:	d0b6      	beq.n	800348a <_malloc_r+0x22>
 800351c:	1b9b      	subs	r3, r3, r6
 800351e:	50a3      	str	r3, [r4, r2]
 8003520:	e7b3      	b.n	800348a <_malloc_r+0x22>
 8003522:	6862      	ldr	r2, [r4, #4]
 8003524:	42a3      	cmp	r3, r4
 8003526:	bf0c      	ite	eq
 8003528:	6032      	streq	r2, [r6, #0]
 800352a:	605a      	strne	r2, [r3, #4]
 800352c:	e7ec      	b.n	8003508 <_malloc_r+0xa0>
 800352e:	4623      	mov	r3, r4
 8003530:	6864      	ldr	r4, [r4, #4]
 8003532:	e7b2      	b.n	800349a <_malloc_r+0x32>
 8003534:	4634      	mov	r4, r6
 8003536:	6876      	ldr	r6, [r6, #4]
 8003538:	e7b9      	b.n	80034ae <_malloc_r+0x46>
 800353a:	230c      	movs	r3, #12
 800353c:	4638      	mov	r0, r7
 800353e:	603b      	str	r3, [r7, #0]
 8003540:	f000 fb44 	bl	8003bcc <__malloc_unlock>
 8003544:	e7a1      	b.n	800348a <_malloc_r+0x22>
 8003546:	6025      	str	r5, [r4, #0]
 8003548:	e7de      	b.n	8003508 <_malloc_r+0xa0>
 800354a:	bf00      	nop
 800354c:	20000584 	.word	0x20000584

08003550 <__ssputs_r>:
 8003550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003554:	688e      	ldr	r6, [r1, #8]
 8003556:	4682      	mov	sl, r0
 8003558:	429e      	cmp	r6, r3
 800355a:	460c      	mov	r4, r1
 800355c:	4690      	mov	r8, r2
 800355e:	461f      	mov	r7, r3
 8003560:	d838      	bhi.n	80035d4 <__ssputs_r+0x84>
 8003562:	898a      	ldrh	r2, [r1, #12]
 8003564:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003568:	d032      	beq.n	80035d0 <__ssputs_r+0x80>
 800356a:	6825      	ldr	r5, [r4, #0]
 800356c:	6909      	ldr	r1, [r1, #16]
 800356e:	3301      	adds	r3, #1
 8003570:	eba5 0901 	sub.w	r9, r5, r1
 8003574:	6965      	ldr	r5, [r4, #20]
 8003576:	444b      	add	r3, r9
 8003578:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800357c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003580:	106d      	asrs	r5, r5, #1
 8003582:	429d      	cmp	r5, r3
 8003584:	bf38      	it	cc
 8003586:	461d      	movcc	r5, r3
 8003588:	0553      	lsls	r3, r2, #21
 800358a:	d531      	bpl.n	80035f0 <__ssputs_r+0xa0>
 800358c:	4629      	mov	r1, r5
 800358e:	f7ff ff6b 	bl	8003468 <_malloc_r>
 8003592:	4606      	mov	r6, r0
 8003594:	b950      	cbnz	r0, 80035ac <__ssputs_r+0x5c>
 8003596:	230c      	movs	r3, #12
 8003598:	f04f 30ff 	mov.w	r0, #4294967295
 800359c:	f8ca 3000 	str.w	r3, [sl]
 80035a0:	89a3      	ldrh	r3, [r4, #12]
 80035a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035a6:	81a3      	strh	r3, [r4, #12]
 80035a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035ac:	464a      	mov	r2, r9
 80035ae:	6921      	ldr	r1, [r4, #16]
 80035b0:	f000 fade 	bl	8003b70 <memcpy>
 80035b4:	89a3      	ldrh	r3, [r4, #12]
 80035b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80035ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035be:	81a3      	strh	r3, [r4, #12]
 80035c0:	6126      	str	r6, [r4, #16]
 80035c2:	444e      	add	r6, r9
 80035c4:	6026      	str	r6, [r4, #0]
 80035c6:	463e      	mov	r6, r7
 80035c8:	6165      	str	r5, [r4, #20]
 80035ca:	eba5 0509 	sub.w	r5, r5, r9
 80035ce:	60a5      	str	r5, [r4, #8]
 80035d0:	42be      	cmp	r6, r7
 80035d2:	d900      	bls.n	80035d6 <__ssputs_r+0x86>
 80035d4:	463e      	mov	r6, r7
 80035d6:	4632      	mov	r2, r6
 80035d8:	4641      	mov	r1, r8
 80035da:	6820      	ldr	r0, [r4, #0]
 80035dc:	f000 fad6 	bl	8003b8c <memmove>
 80035e0:	68a3      	ldr	r3, [r4, #8]
 80035e2:	2000      	movs	r0, #0
 80035e4:	1b9b      	subs	r3, r3, r6
 80035e6:	60a3      	str	r3, [r4, #8]
 80035e8:	6823      	ldr	r3, [r4, #0]
 80035ea:	4433      	add	r3, r6
 80035ec:	6023      	str	r3, [r4, #0]
 80035ee:	e7db      	b.n	80035a8 <__ssputs_r+0x58>
 80035f0:	462a      	mov	r2, r5
 80035f2:	f000 fb39 	bl	8003c68 <_realloc_r>
 80035f6:	4606      	mov	r6, r0
 80035f8:	2800      	cmp	r0, #0
 80035fa:	d1e1      	bne.n	80035c0 <__ssputs_r+0x70>
 80035fc:	4650      	mov	r0, sl
 80035fe:	6921      	ldr	r1, [r4, #16]
 8003600:	f000 faea 	bl	8003bd8 <_free_r>
 8003604:	e7c7      	b.n	8003596 <__ssputs_r+0x46>
	...

08003608 <_svfiprintf_r>:
 8003608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800360c:	4698      	mov	r8, r3
 800360e:	898b      	ldrh	r3, [r1, #12]
 8003610:	4607      	mov	r7, r0
 8003612:	061b      	lsls	r3, r3, #24
 8003614:	460d      	mov	r5, r1
 8003616:	4614      	mov	r4, r2
 8003618:	b09d      	sub	sp, #116	; 0x74
 800361a:	d50e      	bpl.n	800363a <_svfiprintf_r+0x32>
 800361c:	690b      	ldr	r3, [r1, #16]
 800361e:	b963      	cbnz	r3, 800363a <_svfiprintf_r+0x32>
 8003620:	2140      	movs	r1, #64	; 0x40
 8003622:	f7ff ff21 	bl	8003468 <_malloc_r>
 8003626:	6028      	str	r0, [r5, #0]
 8003628:	6128      	str	r0, [r5, #16]
 800362a:	b920      	cbnz	r0, 8003636 <_svfiprintf_r+0x2e>
 800362c:	230c      	movs	r3, #12
 800362e:	603b      	str	r3, [r7, #0]
 8003630:	f04f 30ff 	mov.w	r0, #4294967295
 8003634:	e0d1      	b.n	80037da <_svfiprintf_r+0x1d2>
 8003636:	2340      	movs	r3, #64	; 0x40
 8003638:	616b      	str	r3, [r5, #20]
 800363a:	2300      	movs	r3, #0
 800363c:	9309      	str	r3, [sp, #36]	; 0x24
 800363e:	2320      	movs	r3, #32
 8003640:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003644:	2330      	movs	r3, #48	; 0x30
 8003646:	f04f 0901 	mov.w	r9, #1
 800364a:	f8cd 800c 	str.w	r8, [sp, #12]
 800364e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80037f4 <_svfiprintf_r+0x1ec>
 8003652:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003656:	4623      	mov	r3, r4
 8003658:	469a      	mov	sl, r3
 800365a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800365e:	b10a      	cbz	r2, 8003664 <_svfiprintf_r+0x5c>
 8003660:	2a25      	cmp	r2, #37	; 0x25
 8003662:	d1f9      	bne.n	8003658 <_svfiprintf_r+0x50>
 8003664:	ebba 0b04 	subs.w	fp, sl, r4
 8003668:	d00b      	beq.n	8003682 <_svfiprintf_r+0x7a>
 800366a:	465b      	mov	r3, fp
 800366c:	4622      	mov	r2, r4
 800366e:	4629      	mov	r1, r5
 8003670:	4638      	mov	r0, r7
 8003672:	f7ff ff6d 	bl	8003550 <__ssputs_r>
 8003676:	3001      	adds	r0, #1
 8003678:	f000 80aa 	beq.w	80037d0 <_svfiprintf_r+0x1c8>
 800367c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800367e:	445a      	add	r2, fp
 8003680:	9209      	str	r2, [sp, #36]	; 0x24
 8003682:	f89a 3000 	ldrb.w	r3, [sl]
 8003686:	2b00      	cmp	r3, #0
 8003688:	f000 80a2 	beq.w	80037d0 <_svfiprintf_r+0x1c8>
 800368c:	2300      	movs	r3, #0
 800368e:	f04f 32ff 	mov.w	r2, #4294967295
 8003692:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003696:	f10a 0a01 	add.w	sl, sl, #1
 800369a:	9304      	str	r3, [sp, #16]
 800369c:	9307      	str	r3, [sp, #28]
 800369e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80036a2:	931a      	str	r3, [sp, #104]	; 0x68
 80036a4:	4654      	mov	r4, sl
 80036a6:	2205      	movs	r2, #5
 80036a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036ac:	4851      	ldr	r0, [pc, #324]	; (80037f4 <_svfiprintf_r+0x1ec>)
 80036ae:	f000 fa51 	bl	8003b54 <memchr>
 80036b2:	9a04      	ldr	r2, [sp, #16]
 80036b4:	b9d8      	cbnz	r0, 80036ee <_svfiprintf_r+0xe6>
 80036b6:	06d0      	lsls	r0, r2, #27
 80036b8:	bf44      	itt	mi
 80036ba:	2320      	movmi	r3, #32
 80036bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80036c0:	0711      	lsls	r1, r2, #28
 80036c2:	bf44      	itt	mi
 80036c4:	232b      	movmi	r3, #43	; 0x2b
 80036c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80036ca:	f89a 3000 	ldrb.w	r3, [sl]
 80036ce:	2b2a      	cmp	r3, #42	; 0x2a
 80036d0:	d015      	beq.n	80036fe <_svfiprintf_r+0xf6>
 80036d2:	4654      	mov	r4, sl
 80036d4:	2000      	movs	r0, #0
 80036d6:	f04f 0c0a 	mov.w	ip, #10
 80036da:	9a07      	ldr	r2, [sp, #28]
 80036dc:	4621      	mov	r1, r4
 80036de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80036e2:	3b30      	subs	r3, #48	; 0x30
 80036e4:	2b09      	cmp	r3, #9
 80036e6:	d94e      	bls.n	8003786 <_svfiprintf_r+0x17e>
 80036e8:	b1b0      	cbz	r0, 8003718 <_svfiprintf_r+0x110>
 80036ea:	9207      	str	r2, [sp, #28]
 80036ec:	e014      	b.n	8003718 <_svfiprintf_r+0x110>
 80036ee:	eba0 0308 	sub.w	r3, r0, r8
 80036f2:	fa09 f303 	lsl.w	r3, r9, r3
 80036f6:	4313      	orrs	r3, r2
 80036f8:	46a2      	mov	sl, r4
 80036fa:	9304      	str	r3, [sp, #16]
 80036fc:	e7d2      	b.n	80036a4 <_svfiprintf_r+0x9c>
 80036fe:	9b03      	ldr	r3, [sp, #12]
 8003700:	1d19      	adds	r1, r3, #4
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	9103      	str	r1, [sp, #12]
 8003706:	2b00      	cmp	r3, #0
 8003708:	bfbb      	ittet	lt
 800370a:	425b      	neglt	r3, r3
 800370c:	f042 0202 	orrlt.w	r2, r2, #2
 8003710:	9307      	strge	r3, [sp, #28]
 8003712:	9307      	strlt	r3, [sp, #28]
 8003714:	bfb8      	it	lt
 8003716:	9204      	strlt	r2, [sp, #16]
 8003718:	7823      	ldrb	r3, [r4, #0]
 800371a:	2b2e      	cmp	r3, #46	; 0x2e
 800371c:	d10c      	bne.n	8003738 <_svfiprintf_r+0x130>
 800371e:	7863      	ldrb	r3, [r4, #1]
 8003720:	2b2a      	cmp	r3, #42	; 0x2a
 8003722:	d135      	bne.n	8003790 <_svfiprintf_r+0x188>
 8003724:	9b03      	ldr	r3, [sp, #12]
 8003726:	3402      	adds	r4, #2
 8003728:	1d1a      	adds	r2, r3, #4
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	9203      	str	r2, [sp, #12]
 800372e:	2b00      	cmp	r3, #0
 8003730:	bfb8      	it	lt
 8003732:	f04f 33ff 	movlt.w	r3, #4294967295
 8003736:	9305      	str	r3, [sp, #20]
 8003738:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80037f8 <_svfiprintf_r+0x1f0>
 800373c:	2203      	movs	r2, #3
 800373e:	4650      	mov	r0, sl
 8003740:	7821      	ldrb	r1, [r4, #0]
 8003742:	f000 fa07 	bl	8003b54 <memchr>
 8003746:	b140      	cbz	r0, 800375a <_svfiprintf_r+0x152>
 8003748:	2340      	movs	r3, #64	; 0x40
 800374a:	eba0 000a 	sub.w	r0, r0, sl
 800374e:	fa03 f000 	lsl.w	r0, r3, r0
 8003752:	9b04      	ldr	r3, [sp, #16]
 8003754:	3401      	adds	r4, #1
 8003756:	4303      	orrs	r3, r0
 8003758:	9304      	str	r3, [sp, #16]
 800375a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800375e:	2206      	movs	r2, #6
 8003760:	4826      	ldr	r0, [pc, #152]	; (80037fc <_svfiprintf_r+0x1f4>)
 8003762:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003766:	f000 f9f5 	bl	8003b54 <memchr>
 800376a:	2800      	cmp	r0, #0
 800376c:	d038      	beq.n	80037e0 <_svfiprintf_r+0x1d8>
 800376e:	4b24      	ldr	r3, [pc, #144]	; (8003800 <_svfiprintf_r+0x1f8>)
 8003770:	bb1b      	cbnz	r3, 80037ba <_svfiprintf_r+0x1b2>
 8003772:	9b03      	ldr	r3, [sp, #12]
 8003774:	3307      	adds	r3, #7
 8003776:	f023 0307 	bic.w	r3, r3, #7
 800377a:	3308      	adds	r3, #8
 800377c:	9303      	str	r3, [sp, #12]
 800377e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003780:	4433      	add	r3, r6
 8003782:	9309      	str	r3, [sp, #36]	; 0x24
 8003784:	e767      	b.n	8003656 <_svfiprintf_r+0x4e>
 8003786:	460c      	mov	r4, r1
 8003788:	2001      	movs	r0, #1
 800378a:	fb0c 3202 	mla	r2, ip, r2, r3
 800378e:	e7a5      	b.n	80036dc <_svfiprintf_r+0xd4>
 8003790:	2300      	movs	r3, #0
 8003792:	f04f 0c0a 	mov.w	ip, #10
 8003796:	4619      	mov	r1, r3
 8003798:	3401      	adds	r4, #1
 800379a:	9305      	str	r3, [sp, #20]
 800379c:	4620      	mov	r0, r4
 800379e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80037a2:	3a30      	subs	r2, #48	; 0x30
 80037a4:	2a09      	cmp	r2, #9
 80037a6:	d903      	bls.n	80037b0 <_svfiprintf_r+0x1a8>
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d0c5      	beq.n	8003738 <_svfiprintf_r+0x130>
 80037ac:	9105      	str	r1, [sp, #20]
 80037ae:	e7c3      	b.n	8003738 <_svfiprintf_r+0x130>
 80037b0:	4604      	mov	r4, r0
 80037b2:	2301      	movs	r3, #1
 80037b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80037b8:	e7f0      	b.n	800379c <_svfiprintf_r+0x194>
 80037ba:	ab03      	add	r3, sp, #12
 80037bc:	9300      	str	r3, [sp, #0]
 80037be:	462a      	mov	r2, r5
 80037c0:	4638      	mov	r0, r7
 80037c2:	4b10      	ldr	r3, [pc, #64]	; (8003804 <_svfiprintf_r+0x1fc>)
 80037c4:	a904      	add	r1, sp, #16
 80037c6:	f3af 8000 	nop.w
 80037ca:	1c42      	adds	r2, r0, #1
 80037cc:	4606      	mov	r6, r0
 80037ce:	d1d6      	bne.n	800377e <_svfiprintf_r+0x176>
 80037d0:	89ab      	ldrh	r3, [r5, #12]
 80037d2:	065b      	lsls	r3, r3, #25
 80037d4:	f53f af2c 	bmi.w	8003630 <_svfiprintf_r+0x28>
 80037d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80037da:	b01d      	add	sp, #116	; 0x74
 80037dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037e0:	ab03      	add	r3, sp, #12
 80037e2:	9300      	str	r3, [sp, #0]
 80037e4:	462a      	mov	r2, r5
 80037e6:	4638      	mov	r0, r7
 80037e8:	4b06      	ldr	r3, [pc, #24]	; (8003804 <_svfiprintf_r+0x1fc>)
 80037ea:	a904      	add	r1, sp, #16
 80037ec:	f000 f87c 	bl	80038e8 <_printf_i>
 80037f0:	e7eb      	b.n	80037ca <_svfiprintf_r+0x1c2>
 80037f2:	bf00      	nop
 80037f4:	08004128 	.word	0x08004128
 80037f8:	0800412e 	.word	0x0800412e
 80037fc:	08004132 	.word	0x08004132
 8003800:	00000000 	.word	0x00000000
 8003804:	08003551 	.word	0x08003551

08003808 <_printf_common>:
 8003808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800380c:	4616      	mov	r6, r2
 800380e:	4699      	mov	r9, r3
 8003810:	688a      	ldr	r2, [r1, #8]
 8003812:	690b      	ldr	r3, [r1, #16]
 8003814:	4607      	mov	r7, r0
 8003816:	4293      	cmp	r3, r2
 8003818:	bfb8      	it	lt
 800381a:	4613      	movlt	r3, r2
 800381c:	6033      	str	r3, [r6, #0]
 800381e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003822:	460c      	mov	r4, r1
 8003824:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003828:	b10a      	cbz	r2, 800382e <_printf_common+0x26>
 800382a:	3301      	adds	r3, #1
 800382c:	6033      	str	r3, [r6, #0]
 800382e:	6823      	ldr	r3, [r4, #0]
 8003830:	0699      	lsls	r1, r3, #26
 8003832:	bf42      	ittt	mi
 8003834:	6833      	ldrmi	r3, [r6, #0]
 8003836:	3302      	addmi	r3, #2
 8003838:	6033      	strmi	r3, [r6, #0]
 800383a:	6825      	ldr	r5, [r4, #0]
 800383c:	f015 0506 	ands.w	r5, r5, #6
 8003840:	d106      	bne.n	8003850 <_printf_common+0x48>
 8003842:	f104 0a19 	add.w	sl, r4, #25
 8003846:	68e3      	ldr	r3, [r4, #12]
 8003848:	6832      	ldr	r2, [r6, #0]
 800384a:	1a9b      	subs	r3, r3, r2
 800384c:	42ab      	cmp	r3, r5
 800384e:	dc28      	bgt.n	80038a2 <_printf_common+0x9a>
 8003850:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003854:	1e13      	subs	r3, r2, #0
 8003856:	6822      	ldr	r2, [r4, #0]
 8003858:	bf18      	it	ne
 800385a:	2301      	movne	r3, #1
 800385c:	0692      	lsls	r2, r2, #26
 800385e:	d42d      	bmi.n	80038bc <_printf_common+0xb4>
 8003860:	4649      	mov	r1, r9
 8003862:	4638      	mov	r0, r7
 8003864:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003868:	47c0      	blx	r8
 800386a:	3001      	adds	r0, #1
 800386c:	d020      	beq.n	80038b0 <_printf_common+0xa8>
 800386e:	6823      	ldr	r3, [r4, #0]
 8003870:	68e5      	ldr	r5, [r4, #12]
 8003872:	f003 0306 	and.w	r3, r3, #6
 8003876:	2b04      	cmp	r3, #4
 8003878:	bf18      	it	ne
 800387a:	2500      	movne	r5, #0
 800387c:	6832      	ldr	r2, [r6, #0]
 800387e:	f04f 0600 	mov.w	r6, #0
 8003882:	68a3      	ldr	r3, [r4, #8]
 8003884:	bf08      	it	eq
 8003886:	1aad      	subeq	r5, r5, r2
 8003888:	6922      	ldr	r2, [r4, #16]
 800388a:	bf08      	it	eq
 800388c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003890:	4293      	cmp	r3, r2
 8003892:	bfc4      	itt	gt
 8003894:	1a9b      	subgt	r3, r3, r2
 8003896:	18ed      	addgt	r5, r5, r3
 8003898:	341a      	adds	r4, #26
 800389a:	42b5      	cmp	r5, r6
 800389c:	d11a      	bne.n	80038d4 <_printf_common+0xcc>
 800389e:	2000      	movs	r0, #0
 80038a0:	e008      	b.n	80038b4 <_printf_common+0xac>
 80038a2:	2301      	movs	r3, #1
 80038a4:	4652      	mov	r2, sl
 80038a6:	4649      	mov	r1, r9
 80038a8:	4638      	mov	r0, r7
 80038aa:	47c0      	blx	r8
 80038ac:	3001      	adds	r0, #1
 80038ae:	d103      	bne.n	80038b8 <_printf_common+0xb0>
 80038b0:	f04f 30ff 	mov.w	r0, #4294967295
 80038b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038b8:	3501      	adds	r5, #1
 80038ba:	e7c4      	b.n	8003846 <_printf_common+0x3e>
 80038bc:	2030      	movs	r0, #48	; 0x30
 80038be:	18e1      	adds	r1, r4, r3
 80038c0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80038c4:	1c5a      	adds	r2, r3, #1
 80038c6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80038ca:	4422      	add	r2, r4
 80038cc:	3302      	adds	r3, #2
 80038ce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80038d2:	e7c5      	b.n	8003860 <_printf_common+0x58>
 80038d4:	2301      	movs	r3, #1
 80038d6:	4622      	mov	r2, r4
 80038d8:	4649      	mov	r1, r9
 80038da:	4638      	mov	r0, r7
 80038dc:	47c0      	blx	r8
 80038de:	3001      	adds	r0, #1
 80038e0:	d0e6      	beq.n	80038b0 <_printf_common+0xa8>
 80038e2:	3601      	adds	r6, #1
 80038e4:	e7d9      	b.n	800389a <_printf_common+0x92>
	...

080038e8 <_printf_i>:
 80038e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80038ec:	7e0f      	ldrb	r7, [r1, #24]
 80038ee:	4691      	mov	r9, r2
 80038f0:	2f78      	cmp	r7, #120	; 0x78
 80038f2:	4680      	mov	r8, r0
 80038f4:	460c      	mov	r4, r1
 80038f6:	469a      	mov	sl, r3
 80038f8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80038fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80038fe:	d807      	bhi.n	8003910 <_printf_i+0x28>
 8003900:	2f62      	cmp	r7, #98	; 0x62
 8003902:	d80a      	bhi.n	800391a <_printf_i+0x32>
 8003904:	2f00      	cmp	r7, #0
 8003906:	f000 80d9 	beq.w	8003abc <_printf_i+0x1d4>
 800390a:	2f58      	cmp	r7, #88	; 0x58
 800390c:	f000 80a4 	beq.w	8003a58 <_printf_i+0x170>
 8003910:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003914:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003918:	e03a      	b.n	8003990 <_printf_i+0xa8>
 800391a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800391e:	2b15      	cmp	r3, #21
 8003920:	d8f6      	bhi.n	8003910 <_printf_i+0x28>
 8003922:	a101      	add	r1, pc, #4	; (adr r1, 8003928 <_printf_i+0x40>)
 8003924:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003928:	08003981 	.word	0x08003981
 800392c:	08003995 	.word	0x08003995
 8003930:	08003911 	.word	0x08003911
 8003934:	08003911 	.word	0x08003911
 8003938:	08003911 	.word	0x08003911
 800393c:	08003911 	.word	0x08003911
 8003940:	08003995 	.word	0x08003995
 8003944:	08003911 	.word	0x08003911
 8003948:	08003911 	.word	0x08003911
 800394c:	08003911 	.word	0x08003911
 8003950:	08003911 	.word	0x08003911
 8003954:	08003aa3 	.word	0x08003aa3
 8003958:	080039c5 	.word	0x080039c5
 800395c:	08003a85 	.word	0x08003a85
 8003960:	08003911 	.word	0x08003911
 8003964:	08003911 	.word	0x08003911
 8003968:	08003ac5 	.word	0x08003ac5
 800396c:	08003911 	.word	0x08003911
 8003970:	080039c5 	.word	0x080039c5
 8003974:	08003911 	.word	0x08003911
 8003978:	08003911 	.word	0x08003911
 800397c:	08003a8d 	.word	0x08003a8d
 8003980:	682b      	ldr	r3, [r5, #0]
 8003982:	1d1a      	adds	r2, r3, #4
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	602a      	str	r2, [r5, #0]
 8003988:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800398c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003990:	2301      	movs	r3, #1
 8003992:	e0a4      	b.n	8003ade <_printf_i+0x1f6>
 8003994:	6820      	ldr	r0, [r4, #0]
 8003996:	6829      	ldr	r1, [r5, #0]
 8003998:	0606      	lsls	r6, r0, #24
 800399a:	f101 0304 	add.w	r3, r1, #4
 800399e:	d50a      	bpl.n	80039b6 <_printf_i+0xce>
 80039a0:	680e      	ldr	r6, [r1, #0]
 80039a2:	602b      	str	r3, [r5, #0]
 80039a4:	2e00      	cmp	r6, #0
 80039a6:	da03      	bge.n	80039b0 <_printf_i+0xc8>
 80039a8:	232d      	movs	r3, #45	; 0x2d
 80039aa:	4276      	negs	r6, r6
 80039ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039b0:	230a      	movs	r3, #10
 80039b2:	485e      	ldr	r0, [pc, #376]	; (8003b2c <_printf_i+0x244>)
 80039b4:	e019      	b.n	80039ea <_printf_i+0x102>
 80039b6:	680e      	ldr	r6, [r1, #0]
 80039b8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80039bc:	602b      	str	r3, [r5, #0]
 80039be:	bf18      	it	ne
 80039c0:	b236      	sxthne	r6, r6
 80039c2:	e7ef      	b.n	80039a4 <_printf_i+0xbc>
 80039c4:	682b      	ldr	r3, [r5, #0]
 80039c6:	6820      	ldr	r0, [r4, #0]
 80039c8:	1d19      	adds	r1, r3, #4
 80039ca:	6029      	str	r1, [r5, #0]
 80039cc:	0601      	lsls	r1, r0, #24
 80039ce:	d501      	bpl.n	80039d4 <_printf_i+0xec>
 80039d0:	681e      	ldr	r6, [r3, #0]
 80039d2:	e002      	b.n	80039da <_printf_i+0xf2>
 80039d4:	0646      	lsls	r6, r0, #25
 80039d6:	d5fb      	bpl.n	80039d0 <_printf_i+0xe8>
 80039d8:	881e      	ldrh	r6, [r3, #0]
 80039da:	2f6f      	cmp	r7, #111	; 0x6f
 80039dc:	bf0c      	ite	eq
 80039de:	2308      	moveq	r3, #8
 80039e0:	230a      	movne	r3, #10
 80039e2:	4852      	ldr	r0, [pc, #328]	; (8003b2c <_printf_i+0x244>)
 80039e4:	2100      	movs	r1, #0
 80039e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80039ea:	6865      	ldr	r5, [r4, #4]
 80039ec:	2d00      	cmp	r5, #0
 80039ee:	bfa8      	it	ge
 80039f0:	6821      	ldrge	r1, [r4, #0]
 80039f2:	60a5      	str	r5, [r4, #8]
 80039f4:	bfa4      	itt	ge
 80039f6:	f021 0104 	bicge.w	r1, r1, #4
 80039fa:	6021      	strge	r1, [r4, #0]
 80039fc:	b90e      	cbnz	r6, 8003a02 <_printf_i+0x11a>
 80039fe:	2d00      	cmp	r5, #0
 8003a00:	d04d      	beq.n	8003a9e <_printf_i+0x1b6>
 8003a02:	4615      	mov	r5, r2
 8003a04:	fbb6 f1f3 	udiv	r1, r6, r3
 8003a08:	fb03 6711 	mls	r7, r3, r1, r6
 8003a0c:	5dc7      	ldrb	r7, [r0, r7]
 8003a0e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003a12:	4637      	mov	r7, r6
 8003a14:	42bb      	cmp	r3, r7
 8003a16:	460e      	mov	r6, r1
 8003a18:	d9f4      	bls.n	8003a04 <_printf_i+0x11c>
 8003a1a:	2b08      	cmp	r3, #8
 8003a1c:	d10b      	bne.n	8003a36 <_printf_i+0x14e>
 8003a1e:	6823      	ldr	r3, [r4, #0]
 8003a20:	07de      	lsls	r6, r3, #31
 8003a22:	d508      	bpl.n	8003a36 <_printf_i+0x14e>
 8003a24:	6923      	ldr	r3, [r4, #16]
 8003a26:	6861      	ldr	r1, [r4, #4]
 8003a28:	4299      	cmp	r1, r3
 8003a2a:	bfde      	ittt	le
 8003a2c:	2330      	movle	r3, #48	; 0x30
 8003a2e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003a32:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003a36:	1b52      	subs	r2, r2, r5
 8003a38:	6122      	str	r2, [r4, #16]
 8003a3a:	464b      	mov	r3, r9
 8003a3c:	4621      	mov	r1, r4
 8003a3e:	4640      	mov	r0, r8
 8003a40:	f8cd a000 	str.w	sl, [sp]
 8003a44:	aa03      	add	r2, sp, #12
 8003a46:	f7ff fedf 	bl	8003808 <_printf_common>
 8003a4a:	3001      	adds	r0, #1
 8003a4c:	d14c      	bne.n	8003ae8 <_printf_i+0x200>
 8003a4e:	f04f 30ff 	mov.w	r0, #4294967295
 8003a52:	b004      	add	sp, #16
 8003a54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a58:	4834      	ldr	r0, [pc, #208]	; (8003b2c <_printf_i+0x244>)
 8003a5a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003a5e:	6829      	ldr	r1, [r5, #0]
 8003a60:	6823      	ldr	r3, [r4, #0]
 8003a62:	f851 6b04 	ldr.w	r6, [r1], #4
 8003a66:	6029      	str	r1, [r5, #0]
 8003a68:	061d      	lsls	r5, r3, #24
 8003a6a:	d514      	bpl.n	8003a96 <_printf_i+0x1ae>
 8003a6c:	07df      	lsls	r7, r3, #31
 8003a6e:	bf44      	itt	mi
 8003a70:	f043 0320 	orrmi.w	r3, r3, #32
 8003a74:	6023      	strmi	r3, [r4, #0]
 8003a76:	b91e      	cbnz	r6, 8003a80 <_printf_i+0x198>
 8003a78:	6823      	ldr	r3, [r4, #0]
 8003a7a:	f023 0320 	bic.w	r3, r3, #32
 8003a7e:	6023      	str	r3, [r4, #0]
 8003a80:	2310      	movs	r3, #16
 8003a82:	e7af      	b.n	80039e4 <_printf_i+0xfc>
 8003a84:	6823      	ldr	r3, [r4, #0]
 8003a86:	f043 0320 	orr.w	r3, r3, #32
 8003a8a:	6023      	str	r3, [r4, #0]
 8003a8c:	2378      	movs	r3, #120	; 0x78
 8003a8e:	4828      	ldr	r0, [pc, #160]	; (8003b30 <_printf_i+0x248>)
 8003a90:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003a94:	e7e3      	b.n	8003a5e <_printf_i+0x176>
 8003a96:	0659      	lsls	r1, r3, #25
 8003a98:	bf48      	it	mi
 8003a9a:	b2b6      	uxthmi	r6, r6
 8003a9c:	e7e6      	b.n	8003a6c <_printf_i+0x184>
 8003a9e:	4615      	mov	r5, r2
 8003aa0:	e7bb      	b.n	8003a1a <_printf_i+0x132>
 8003aa2:	682b      	ldr	r3, [r5, #0]
 8003aa4:	6826      	ldr	r6, [r4, #0]
 8003aa6:	1d18      	adds	r0, r3, #4
 8003aa8:	6961      	ldr	r1, [r4, #20]
 8003aaa:	6028      	str	r0, [r5, #0]
 8003aac:	0635      	lsls	r5, r6, #24
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	d501      	bpl.n	8003ab6 <_printf_i+0x1ce>
 8003ab2:	6019      	str	r1, [r3, #0]
 8003ab4:	e002      	b.n	8003abc <_printf_i+0x1d4>
 8003ab6:	0670      	lsls	r0, r6, #25
 8003ab8:	d5fb      	bpl.n	8003ab2 <_printf_i+0x1ca>
 8003aba:	8019      	strh	r1, [r3, #0]
 8003abc:	2300      	movs	r3, #0
 8003abe:	4615      	mov	r5, r2
 8003ac0:	6123      	str	r3, [r4, #16]
 8003ac2:	e7ba      	b.n	8003a3a <_printf_i+0x152>
 8003ac4:	682b      	ldr	r3, [r5, #0]
 8003ac6:	2100      	movs	r1, #0
 8003ac8:	1d1a      	adds	r2, r3, #4
 8003aca:	602a      	str	r2, [r5, #0]
 8003acc:	681d      	ldr	r5, [r3, #0]
 8003ace:	6862      	ldr	r2, [r4, #4]
 8003ad0:	4628      	mov	r0, r5
 8003ad2:	f000 f83f 	bl	8003b54 <memchr>
 8003ad6:	b108      	cbz	r0, 8003adc <_printf_i+0x1f4>
 8003ad8:	1b40      	subs	r0, r0, r5
 8003ada:	6060      	str	r0, [r4, #4]
 8003adc:	6863      	ldr	r3, [r4, #4]
 8003ade:	6123      	str	r3, [r4, #16]
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ae6:	e7a8      	b.n	8003a3a <_printf_i+0x152>
 8003ae8:	462a      	mov	r2, r5
 8003aea:	4649      	mov	r1, r9
 8003aec:	4640      	mov	r0, r8
 8003aee:	6923      	ldr	r3, [r4, #16]
 8003af0:	47d0      	blx	sl
 8003af2:	3001      	adds	r0, #1
 8003af4:	d0ab      	beq.n	8003a4e <_printf_i+0x166>
 8003af6:	6823      	ldr	r3, [r4, #0]
 8003af8:	079b      	lsls	r3, r3, #30
 8003afa:	d413      	bmi.n	8003b24 <_printf_i+0x23c>
 8003afc:	68e0      	ldr	r0, [r4, #12]
 8003afe:	9b03      	ldr	r3, [sp, #12]
 8003b00:	4298      	cmp	r0, r3
 8003b02:	bfb8      	it	lt
 8003b04:	4618      	movlt	r0, r3
 8003b06:	e7a4      	b.n	8003a52 <_printf_i+0x16a>
 8003b08:	2301      	movs	r3, #1
 8003b0a:	4632      	mov	r2, r6
 8003b0c:	4649      	mov	r1, r9
 8003b0e:	4640      	mov	r0, r8
 8003b10:	47d0      	blx	sl
 8003b12:	3001      	adds	r0, #1
 8003b14:	d09b      	beq.n	8003a4e <_printf_i+0x166>
 8003b16:	3501      	adds	r5, #1
 8003b18:	68e3      	ldr	r3, [r4, #12]
 8003b1a:	9903      	ldr	r1, [sp, #12]
 8003b1c:	1a5b      	subs	r3, r3, r1
 8003b1e:	42ab      	cmp	r3, r5
 8003b20:	dcf2      	bgt.n	8003b08 <_printf_i+0x220>
 8003b22:	e7eb      	b.n	8003afc <_printf_i+0x214>
 8003b24:	2500      	movs	r5, #0
 8003b26:	f104 0619 	add.w	r6, r4, #25
 8003b2a:	e7f5      	b.n	8003b18 <_printf_i+0x230>
 8003b2c:	08004139 	.word	0x08004139
 8003b30:	0800414a 	.word	0x0800414a

08003b34 <_sbrk_r>:
 8003b34:	b538      	push	{r3, r4, r5, lr}
 8003b36:	2300      	movs	r3, #0
 8003b38:	4d05      	ldr	r5, [pc, #20]	; (8003b50 <_sbrk_r+0x1c>)
 8003b3a:	4604      	mov	r4, r0
 8003b3c:	4608      	mov	r0, r1
 8003b3e:	602b      	str	r3, [r5, #0]
 8003b40:	f7fc fcc4 	bl	80004cc <_sbrk>
 8003b44:	1c43      	adds	r3, r0, #1
 8003b46:	d102      	bne.n	8003b4e <_sbrk_r+0x1a>
 8003b48:	682b      	ldr	r3, [r5, #0]
 8003b4a:	b103      	cbz	r3, 8003b4e <_sbrk_r+0x1a>
 8003b4c:	6023      	str	r3, [r4, #0]
 8003b4e:	bd38      	pop	{r3, r4, r5, pc}
 8003b50:	2000058c 	.word	0x2000058c

08003b54 <memchr>:
 8003b54:	4603      	mov	r3, r0
 8003b56:	b510      	push	{r4, lr}
 8003b58:	b2c9      	uxtb	r1, r1
 8003b5a:	4402      	add	r2, r0
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	4618      	mov	r0, r3
 8003b60:	d101      	bne.n	8003b66 <memchr+0x12>
 8003b62:	2000      	movs	r0, #0
 8003b64:	e003      	b.n	8003b6e <memchr+0x1a>
 8003b66:	7804      	ldrb	r4, [r0, #0]
 8003b68:	3301      	adds	r3, #1
 8003b6a:	428c      	cmp	r4, r1
 8003b6c:	d1f6      	bne.n	8003b5c <memchr+0x8>
 8003b6e:	bd10      	pop	{r4, pc}

08003b70 <memcpy>:
 8003b70:	440a      	add	r2, r1
 8003b72:	4291      	cmp	r1, r2
 8003b74:	f100 33ff 	add.w	r3, r0, #4294967295
 8003b78:	d100      	bne.n	8003b7c <memcpy+0xc>
 8003b7a:	4770      	bx	lr
 8003b7c:	b510      	push	{r4, lr}
 8003b7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b82:	4291      	cmp	r1, r2
 8003b84:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b88:	d1f9      	bne.n	8003b7e <memcpy+0xe>
 8003b8a:	bd10      	pop	{r4, pc}

08003b8c <memmove>:
 8003b8c:	4288      	cmp	r0, r1
 8003b8e:	b510      	push	{r4, lr}
 8003b90:	eb01 0402 	add.w	r4, r1, r2
 8003b94:	d902      	bls.n	8003b9c <memmove+0x10>
 8003b96:	4284      	cmp	r4, r0
 8003b98:	4623      	mov	r3, r4
 8003b9a:	d807      	bhi.n	8003bac <memmove+0x20>
 8003b9c:	1e43      	subs	r3, r0, #1
 8003b9e:	42a1      	cmp	r1, r4
 8003ba0:	d008      	beq.n	8003bb4 <memmove+0x28>
 8003ba2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003ba6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003baa:	e7f8      	b.n	8003b9e <memmove+0x12>
 8003bac:	4601      	mov	r1, r0
 8003bae:	4402      	add	r2, r0
 8003bb0:	428a      	cmp	r2, r1
 8003bb2:	d100      	bne.n	8003bb6 <memmove+0x2a>
 8003bb4:	bd10      	pop	{r4, pc}
 8003bb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003bba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003bbe:	e7f7      	b.n	8003bb0 <memmove+0x24>

08003bc0 <__malloc_lock>:
 8003bc0:	4801      	ldr	r0, [pc, #4]	; (8003bc8 <__malloc_lock+0x8>)
 8003bc2:	f7ff bc2f 	b.w	8003424 <__retarget_lock_acquire_recursive>
 8003bc6:	bf00      	nop
 8003bc8:	20000580 	.word	0x20000580

08003bcc <__malloc_unlock>:
 8003bcc:	4801      	ldr	r0, [pc, #4]	; (8003bd4 <__malloc_unlock+0x8>)
 8003bce:	f7ff bc2a 	b.w	8003426 <__retarget_lock_release_recursive>
 8003bd2:	bf00      	nop
 8003bd4:	20000580 	.word	0x20000580

08003bd8 <_free_r>:
 8003bd8:	b538      	push	{r3, r4, r5, lr}
 8003bda:	4605      	mov	r5, r0
 8003bdc:	2900      	cmp	r1, #0
 8003bde:	d040      	beq.n	8003c62 <_free_r+0x8a>
 8003be0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003be4:	1f0c      	subs	r4, r1, #4
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	bfb8      	it	lt
 8003bea:	18e4      	addlt	r4, r4, r3
 8003bec:	f7ff ffe8 	bl	8003bc0 <__malloc_lock>
 8003bf0:	4a1c      	ldr	r2, [pc, #112]	; (8003c64 <_free_r+0x8c>)
 8003bf2:	6813      	ldr	r3, [r2, #0]
 8003bf4:	b933      	cbnz	r3, 8003c04 <_free_r+0x2c>
 8003bf6:	6063      	str	r3, [r4, #4]
 8003bf8:	6014      	str	r4, [r2, #0]
 8003bfa:	4628      	mov	r0, r5
 8003bfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c00:	f7ff bfe4 	b.w	8003bcc <__malloc_unlock>
 8003c04:	42a3      	cmp	r3, r4
 8003c06:	d908      	bls.n	8003c1a <_free_r+0x42>
 8003c08:	6820      	ldr	r0, [r4, #0]
 8003c0a:	1821      	adds	r1, r4, r0
 8003c0c:	428b      	cmp	r3, r1
 8003c0e:	bf01      	itttt	eq
 8003c10:	6819      	ldreq	r1, [r3, #0]
 8003c12:	685b      	ldreq	r3, [r3, #4]
 8003c14:	1809      	addeq	r1, r1, r0
 8003c16:	6021      	streq	r1, [r4, #0]
 8003c18:	e7ed      	b.n	8003bf6 <_free_r+0x1e>
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	b10b      	cbz	r3, 8003c24 <_free_r+0x4c>
 8003c20:	42a3      	cmp	r3, r4
 8003c22:	d9fa      	bls.n	8003c1a <_free_r+0x42>
 8003c24:	6811      	ldr	r1, [r2, #0]
 8003c26:	1850      	adds	r0, r2, r1
 8003c28:	42a0      	cmp	r0, r4
 8003c2a:	d10b      	bne.n	8003c44 <_free_r+0x6c>
 8003c2c:	6820      	ldr	r0, [r4, #0]
 8003c2e:	4401      	add	r1, r0
 8003c30:	1850      	adds	r0, r2, r1
 8003c32:	4283      	cmp	r3, r0
 8003c34:	6011      	str	r1, [r2, #0]
 8003c36:	d1e0      	bne.n	8003bfa <_free_r+0x22>
 8003c38:	6818      	ldr	r0, [r3, #0]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	4401      	add	r1, r0
 8003c3e:	6011      	str	r1, [r2, #0]
 8003c40:	6053      	str	r3, [r2, #4]
 8003c42:	e7da      	b.n	8003bfa <_free_r+0x22>
 8003c44:	d902      	bls.n	8003c4c <_free_r+0x74>
 8003c46:	230c      	movs	r3, #12
 8003c48:	602b      	str	r3, [r5, #0]
 8003c4a:	e7d6      	b.n	8003bfa <_free_r+0x22>
 8003c4c:	6820      	ldr	r0, [r4, #0]
 8003c4e:	1821      	adds	r1, r4, r0
 8003c50:	428b      	cmp	r3, r1
 8003c52:	bf01      	itttt	eq
 8003c54:	6819      	ldreq	r1, [r3, #0]
 8003c56:	685b      	ldreq	r3, [r3, #4]
 8003c58:	1809      	addeq	r1, r1, r0
 8003c5a:	6021      	streq	r1, [r4, #0]
 8003c5c:	6063      	str	r3, [r4, #4]
 8003c5e:	6054      	str	r4, [r2, #4]
 8003c60:	e7cb      	b.n	8003bfa <_free_r+0x22>
 8003c62:	bd38      	pop	{r3, r4, r5, pc}
 8003c64:	20000584 	.word	0x20000584

08003c68 <_realloc_r>:
 8003c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c6c:	4680      	mov	r8, r0
 8003c6e:	4614      	mov	r4, r2
 8003c70:	460e      	mov	r6, r1
 8003c72:	b921      	cbnz	r1, 8003c7e <_realloc_r+0x16>
 8003c74:	4611      	mov	r1, r2
 8003c76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003c7a:	f7ff bbf5 	b.w	8003468 <_malloc_r>
 8003c7e:	b92a      	cbnz	r2, 8003c8c <_realloc_r+0x24>
 8003c80:	f7ff ffaa 	bl	8003bd8 <_free_r>
 8003c84:	4625      	mov	r5, r4
 8003c86:	4628      	mov	r0, r5
 8003c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c8c:	f000 f81b 	bl	8003cc6 <_malloc_usable_size_r>
 8003c90:	4284      	cmp	r4, r0
 8003c92:	4607      	mov	r7, r0
 8003c94:	d802      	bhi.n	8003c9c <_realloc_r+0x34>
 8003c96:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003c9a:	d812      	bhi.n	8003cc2 <_realloc_r+0x5a>
 8003c9c:	4621      	mov	r1, r4
 8003c9e:	4640      	mov	r0, r8
 8003ca0:	f7ff fbe2 	bl	8003468 <_malloc_r>
 8003ca4:	4605      	mov	r5, r0
 8003ca6:	2800      	cmp	r0, #0
 8003ca8:	d0ed      	beq.n	8003c86 <_realloc_r+0x1e>
 8003caa:	42bc      	cmp	r4, r7
 8003cac:	4622      	mov	r2, r4
 8003cae:	4631      	mov	r1, r6
 8003cb0:	bf28      	it	cs
 8003cb2:	463a      	movcs	r2, r7
 8003cb4:	f7ff ff5c 	bl	8003b70 <memcpy>
 8003cb8:	4631      	mov	r1, r6
 8003cba:	4640      	mov	r0, r8
 8003cbc:	f7ff ff8c 	bl	8003bd8 <_free_r>
 8003cc0:	e7e1      	b.n	8003c86 <_realloc_r+0x1e>
 8003cc2:	4635      	mov	r5, r6
 8003cc4:	e7df      	b.n	8003c86 <_realloc_r+0x1e>

08003cc6 <_malloc_usable_size_r>:
 8003cc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003cca:	1f18      	subs	r0, r3, #4
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	bfbc      	itt	lt
 8003cd0:	580b      	ldrlt	r3, [r1, r0]
 8003cd2:	18c0      	addlt	r0, r0, r3
 8003cd4:	4770      	bx	lr
	...

08003cd8 <_init>:
 8003cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cda:	bf00      	nop
 8003cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cde:	bc08      	pop	{r3}
 8003ce0:	469e      	mov	lr, r3
 8003ce2:	4770      	bx	lr

08003ce4 <_fini>:
 8003ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ce6:	bf00      	nop
 8003ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cea:	bc08      	pop	{r3}
 8003cec:	469e      	mov	lr, r3
 8003cee:	4770      	bx	lr
