
SPI_PIXY2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c50  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001bc  08004e00  08004e00  00014e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fbc  08004fbc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004fbc  08004fbc  00014fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004fc4  08004fc4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fc4  08004fc4  00014fc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004fc8  08004fc8  00014fc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004fcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000000f8  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000168  20000168  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bd37  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d95  00000000  00000000  0002bdd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009e8  00000000  00000000  0002db70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000920  00000000  00000000  0002e558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024288  00000000  00000000  0002ee78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c356  00000000  00000000  00053100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5131  00000000  00000000  0005f456  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00134587  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003138  00000000  00000000  001345d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004de8 	.word	0x08004de8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08004de8 	.word	0x08004de8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <reset>:

	int32_t m_prevError;
	int32_t m_integral;
}PIDLoop;

void reset(PIDLoop* pid) {
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
	pid->m_command = PIXY_RCS_CENTER_POS;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80005a2:	601a      	str	r2, [r3, #0]
	pid->m_prevError = 0x80000000L;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80005aa:	611a      	str	r2, [r3, #16]
}
 80005ac:	bf00      	nop
 80005ae:	370c      	adds	r7, #12
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr

080005b8 <PIDLoop_init>:

void PIDLoop_init(PIDLoop* pid,int32_t pgain, int32_t igain, int32_t dgain) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
 80005be:	60f8      	str	r0, [r7, #12]
 80005c0:	60b9      	str	r1, [r7, #8]
 80005c2:	607a      	str	r2, [r7, #4]
 80005c4:	603b      	str	r3, [r7, #0]
	pid->m_pgain = pgain;
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	68ba      	ldr	r2, [r7, #8]
 80005ca:	605a      	str	r2, [r3, #4]
	pid->m_igain = igain;
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	687a      	ldr	r2, [r7, #4]
 80005d0:	609a      	str	r2, [r3, #8]
	pid->m_dgain = dgain;
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	683a      	ldr	r2, [r7, #0]
 80005d6:	60da      	str	r2, [r3, #12]

	reset(pid);
 80005d8:	68f8      	ldr	r0, [r7, #12]
 80005da:	f7ff ffdb 	bl	8000594 <reset>
}
 80005de:	bf00      	nop
 80005e0:	3710      	adds	r7, #16
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
	...

080005e8 <PIDLoop_update>:

void PIDLoop_update(PIDLoop* pid,int32_t error) {
 80005e8:	b480      	push	{r7}
 80005ea:	b085      	sub	sp, #20
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
 80005f0:	6039      	str	r1, [r7, #0]
	int32_t pid_value;

	if (pid->m_prevError != 0x80000000L) {
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	691b      	ldr	r3, [r3, #16]
 80005f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80005fa:	d046      	beq.n	800068a <PIDLoop_update+0xa2>
		// integrate integral
		pid->m_integral += error;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	695a      	ldr	r2, [r3, #20]
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	441a      	add	r2, r3
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	615a      	str	r2, [r3, #20]
		// bound the integral
		if (pid->m_integral > PID_MAX_INTEGRAL)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	695b      	ldr	r3, [r3, #20]
 800060c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000610:	dd04      	ble.n	800061c <PIDLoop_update+0x34>
			pid->m_integral = PID_MAX_INTEGRAL;
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000618:	615a      	str	r2, [r3, #20]
 800061a:	e007      	b.n	800062c <PIDLoop_update+0x44>
		else if (pid->m_integral < -PID_MAX_INTEGRAL)
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	695b      	ldr	r3, [r3, #20]
 8000620:	f513 6ffa 	cmn.w	r3, #2000	; 0x7d0
 8000624:	da02      	bge.n	800062c <PIDLoop_update+0x44>
			pid->m_integral = -PID_MAX_INTEGRAL;
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	4a1c      	ldr	r2, [pc, #112]	; (800069c <PIDLoop_update+0xb4>)
 800062a:	615a      	str	r2, [r3, #20]

		// calculate PID term
		pid_value = (error * (pid->m_pgain) + (((pid->m_integral) * (pid->m_igain)) >> 4)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	685b      	ldr	r3, [r3, #4]
 8000630:	683a      	ldr	r2, [r7, #0]
 8000632:	fb03 f202 	mul.w	r2, r3, r2
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	695b      	ldr	r3, [r3, #20]
 800063a:	6879      	ldr	r1, [r7, #4]
 800063c:	6889      	ldr	r1, [r1, #8]
 800063e:	fb01 f303 	mul.w	r3, r1, r3
 8000642:	111b      	asrs	r3, r3, #4
 8000644:	441a      	add	r2, r3
				+ (error - (pid->m_prevError)) * (pid-> m_dgain)) >> 10;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	691b      	ldr	r3, [r3, #16]
 800064a:	6839      	ldr	r1, [r7, #0]
 800064c:	1acb      	subs	r3, r1, r3
 800064e:	6879      	ldr	r1, [r7, #4]
 8000650:	68c9      	ldr	r1, [r1, #12]
 8000652:	fb01 f303 	mul.w	r3, r1, r3
 8000656:	4413      	add	r3, r2
		pid_value = (error * (pid->m_pgain) + (((pid->m_integral) * (pid->m_igain)) >> 4)
 8000658:	129b      	asrs	r3, r3, #10
 800065a:	60fb      	str	r3, [r7, #12]

		pid->m_command += pid_value; // since servo is a position device, we integrate the pid term
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681a      	ldr	r2, [r3, #0]
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	441a      	add	r2, r3
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	601a      	str	r2, [r3, #0]
		if (pid->m_command > PIXY_RCS_MAX_POS)
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000670:	dd04      	ble.n	800067c <PIDLoop_update+0x94>
			pid->m_command = PIXY_RCS_MAX_POS;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	e006      	b.n	800068a <PIDLoop_update+0xa2>
		else if (pid->m_command < PIXY_RCS_MIN_POS)
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	2b00      	cmp	r3, #0
 8000682:	da02      	bge.n	800068a <PIDLoop_update+0xa2>
			pid->m_command = PIXY_RCS_MIN_POS;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]

	}

	// retain the previous error val so we can calc the derivative
	pid->m_prevError = error;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	683a      	ldr	r2, [r7, #0]
 800068e:	611a      	str	r2, [r3, #16]
}
 8000690:	bf00      	nop
 8000692:	3714      	adds	r7, #20
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr
 800069c:	fffff830 	.word	0xfffff830

080006a0 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
	(void) HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, 100);
 80006a8:	1d39      	adds	r1, r7, #4
 80006aa:	2364      	movs	r3, #100	; 0x64
 80006ac:	2201      	movs	r2, #1
 80006ae:	4804      	ldr	r0, [pc, #16]	; (80006c0 <__io_putchar+0x20>)
 80006b0:	f002 f9bf 	bl	8002a32 <HAL_UART_Transmit>
	return ch;
 80006b4:	687b      	ldr	r3, [r7, #4]
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	200000e4 	.word	0x200000e4

080006c4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b090      	sub	sp, #64	; 0x40
 80006c8:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80006ca:	f000 fb93 	bl	8000df4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80006ce:	f000 f87b 	bl	80007c8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80006d2:	f000 f949 	bl	8000968 <MX_GPIO_Init>
	MX_SPI2_Init();
 80006d6:	f000 f8e7 	bl	80008a8 <MX_SPI2_Init>
	MX_USART1_UART_Init();
 80006da:	f000 f91b 	bl	8000914 <MX_USART1_UART_Init>
	extern Pixy2 pixy;
	int32_t panOffset, tiltOffset;
	PIDLoop pan_pid;
	PIDLoop tilt_pid;

	pixy2_init(&hspi2, SPI_CS_GPIO_Port, SPI_CS_Pin);
 80006de:	2202      	movs	r2, #2
 80006e0:	4933      	ldr	r1, [pc, #204]	; (80007b0 <main+0xec>)
 80006e2:	4834      	ldr	r0, [pc, #208]	; (80007b4 <main+0xf0>)
 80006e4:	f002 ff1e 	bl	8003524 <pixy2_init>

	PIDLoop_init(&pan_pid, 400, 0, 400);
 80006e8:	f107 001c 	add.w	r0, r7, #28
 80006ec:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80006f0:	2200      	movs	r2, #0
 80006f2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80006f6:	f7ff ff5f 	bl	80005b8 <PIDLoop_init>
	PIDLoop_init(&tilt_pid, 500, 0, 500);
 80006fa:	1d38      	adds	r0, r7, #4
 80006fc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000700:	2200      	movs	r2, #0
 8000702:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000706:	f7ff ff57 	bl	80005b8 <PIDLoop_init>

	pixy2_printVersion();
 800070a:	f002 ff61 	bl	80035d0 <pixy2_printVersion>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		numBlocks = pixy2_getBlocks(true, CCC_SIG_ALL, 0xff);
 800070e:	22ff      	movs	r2, #255	; 0xff
 8000710:	21ff      	movs	r1, #255	; 0xff
 8000712:	2001      	movs	r0, #1
 8000714:	f002 fe92 	bl	800343c <pixy2_getBlocks>
 8000718:	4603      	mov	r3, r0
 800071a:	b2da      	uxtb	r2, r3
 800071c:	4b26      	ldr	r3, [pc, #152]	; (80007b8 <main+0xf4>)
 800071e:	701a      	strb	r2, [r3, #0]

		if (numBlocks) {
 8000720:	4b25      	ldr	r3, [pc, #148]	; (80007b8 <main+0xf4>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d039      	beq.n	800079c <main+0xd8>
			for (int i = 0; i < numBlocks; i++) {
 8000728:	2300      	movs	r3, #0
 800072a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800072c:	e005      	b.n	800073a <main+0x76>
				pixy2_printBlock(i);
 800072e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000730:	f002 ff7a 	bl	8003628 <pixy2_printBlock>
			for (int i = 0; i < numBlocks; i++) {
 8000734:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000736:	3301      	adds	r3, #1
 8000738:	63fb      	str	r3, [r7, #60]	; 0x3c
 800073a:	4b1f      	ldr	r3, [pc, #124]	; (80007b8 <main+0xf4>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	461a      	mov	r2, r3
 8000740:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000742:	4293      	cmp	r3, r2
 8000744:	dbf3      	blt.n	800072e <main+0x6a>
			}
			printf("\r\n");
 8000746:	481d      	ldr	r0, [pc, #116]	; (80007bc <main+0xf8>)
 8000748:	f003 fad4 	bl	8003cf4 <puts>

			panOffset = (int32_t) pixy.frameWidth / 2 - (int32_t) (blocks + 0)->m_x;
 800074c:	4b1c      	ldr	r3, [pc, #112]	; (80007c0 <main+0xfc>)
 800074e:	889b      	ldrh	r3, [r3, #4]
 8000750:	085b      	lsrs	r3, r3, #1
 8000752:	b29b      	uxth	r3, r3
 8000754:	461a      	mov	r2, r3
 8000756:	4b1b      	ldr	r3, [pc, #108]	; (80007c4 <main+0x100>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	885b      	ldrh	r3, [r3, #2]
 800075c:	1ad3      	subs	r3, r2, r3
 800075e:	63bb      	str	r3, [r7, #56]	; 0x38
			tiltOffset = (int32_t) (blocks + 0)->m_y
 8000760:	4b18      	ldr	r3, [pc, #96]	; (80007c4 <main+0x100>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	889b      	ldrh	r3, [r3, #4]
 8000766:	461a      	mov	r2, r3
					- (int32_t) pixy.frameHeight / 2;
 8000768:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <main+0xfc>)
 800076a:	88db      	ldrh	r3, [r3, #6]
 800076c:	085b      	lsrs	r3, r3, #1
 800076e:	b29b      	uxth	r3, r3
			tiltOffset = (int32_t) (blocks + 0)->m_y
 8000770:	1ad3      	subs	r3, r2, r3
 8000772:	637b      	str	r3, [r7, #52]	; 0x34

			PIDLoop_update(&pan_pid, panOffset);
 8000774:	f107 031c 	add.w	r3, r7, #28
 8000778:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800077a:	4618      	mov	r0, r3
 800077c:	f7ff ff34 	bl	80005e8 <PIDLoop_update>
			PIDLoop_update(&tilt_pid, tiltOffset);
 8000780:	1d3b      	adds	r3, r7, #4
 8000782:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000784:	4618      	mov	r0, r3
 8000786:	f7ff ff2f 	bl	80005e8 <PIDLoop_update>

			// set pan and tilt servos
			pixy2_setServos((uint16_t)(pan_pid.m_command), (uint16_t)(tilt_pid.m_command));
 800078a:	69fb      	ldr	r3, [r7, #28]
 800078c:	b29b      	uxth	r3, r3
 800078e:	687a      	ldr	r2, [r7, #4]
 8000790:	b292      	uxth	r2, r2
 8000792:	4611      	mov	r1, r2
 8000794:	4618      	mov	r0, r3
 8000796:	f002 fe19 	bl	80033cc <pixy2_setServos>
 800079a:	e7b8      	b.n	800070e <main+0x4a>
		} else {
			//reset(&pan_pid);
			//reset(&tilt_pid);
			pixy2_setServos((uint16_t)(pan_pid.m_command), (uint16_t)(tilt_pid.m_command));
 800079c:	69fb      	ldr	r3, [r7, #28]
 800079e:	b29b      	uxth	r3, r3
 80007a0:	687a      	ldr	r2, [r7, #4]
 80007a2:	b292      	uxth	r2, r2
 80007a4:	4611      	mov	r1, r2
 80007a6:	4618      	mov	r0, r3
 80007a8:	f002 fe10 	bl	80033cc <pixy2_setServos>
		numBlocks = pixy2_getBlocks(true, CCC_SIG_ALL, 0xff);
 80007ac:	e7af      	b.n	800070e <main+0x4a>
 80007ae:	bf00      	nop
 80007b0:	40020800 	.word	0x40020800
 80007b4:	2000008c 	.word	0x2000008c
 80007b8:	20000130 	.word	0x20000130
 80007bc:	08004e00 	.word	0x08004e00
 80007c0:	20000138 	.word	0x20000138
 80007c4:	20000134 	.word	0x20000134

080007c8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b094      	sub	sp, #80	; 0x50
 80007cc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80007ce:	f107 0320 	add.w	r3, r7, #32
 80007d2:	2230      	movs	r2, #48	; 0x30
 80007d4:	2100      	movs	r1, #0
 80007d6:	4618      	mov	r0, r3
 80007d8:	f003 f91e 	bl	8003a18 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80007dc:	f107 030c 	add.w	r3, r7, #12
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	605a      	str	r2, [r3, #4]
 80007e6:	609a      	str	r2, [r3, #8]
 80007e8:	60da      	str	r2, [r3, #12]
 80007ea:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80007ec:	2300      	movs	r3, #0
 80007ee:	60bb      	str	r3, [r7, #8]
 80007f0:	4b2b      	ldr	r3, [pc, #172]	; (80008a0 <SystemClock_Config+0xd8>)
 80007f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f4:	4a2a      	ldr	r2, [pc, #168]	; (80008a0 <SystemClock_Config+0xd8>)
 80007f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007fa:	6413      	str	r3, [r2, #64]	; 0x40
 80007fc:	4b28      	ldr	r3, [pc, #160]	; (80008a0 <SystemClock_Config+0xd8>)
 80007fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000800:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000804:	60bb      	str	r3, [r7, #8]
 8000806:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000808:	2300      	movs	r3, #0
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	4b25      	ldr	r3, [pc, #148]	; (80008a4 <SystemClock_Config+0xdc>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a24      	ldr	r2, [pc, #144]	; (80008a4 <SystemClock_Config+0xdc>)
 8000812:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000816:	6013      	str	r3, [r2, #0]
 8000818:	4b22      	ldr	r3, [pc, #136]	; (80008a4 <SystemClock_Config+0xdc>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000820:	607b      	str	r3, [r7, #4]
 8000822:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000824:	2301      	movs	r3, #1
 8000826:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000828:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800082c:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800082e:	2302      	movs	r3, #2
 8000830:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000832:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000836:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000838:	2304      	movs	r3, #4
 800083a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 180;
 800083c:	23b4      	movs	r3, #180	; 0xb4
 800083e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000840:	2302      	movs	r3, #2
 8000842:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000844:	2304      	movs	r3, #4
 8000846:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000848:	f107 0320 	add.w	r3, r7, #32
 800084c:	4618      	mov	r0, r3
 800084e:	f000 fe63 	bl	8001518 <HAL_RCC_OscConfig>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <SystemClock_Config+0x94>
		Error_Handler();
 8000858:	f000 f8e4 	bl	8000a24 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 800085c:	f000 fe0c 	bl	8001478 <HAL_PWREx_EnableOverDrive>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <SystemClock_Config+0xa2>
		Error_Handler();
 8000866:	f000 f8dd 	bl	8000a24 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800086a:	230f      	movs	r3, #15
 800086c:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800086e:	2302      	movs	r3, #2
 8000870:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000872:	2300      	movs	r3, #0
 8000874:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000876:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800087a:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800087c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000880:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8000882:	f107 030c 	add.w	r3, r7, #12
 8000886:	2105      	movs	r1, #5
 8000888:	4618      	mov	r0, r3
 800088a:	f001 f8bd 	bl	8001a08 <HAL_RCC_ClockConfig>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <SystemClock_Config+0xd0>
		Error_Handler();
 8000894:	f000 f8c6 	bl	8000a24 <Error_Handler>
	}
}
 8000898:	bf00      	nop
 800089a:	3750      	adds	r7, #80	; 0x50
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	40023800 	.word	0x40023800
 80008a4:	40007000 	.word	0x40007000

080008a8 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 80008ac:	4b17      	ldr	r3, [pc, #92]	; (800090c <MX_SPI2_Init+0x64>)
 80008ae:	4a18      	ldr	r2, [pc, #96]	; (8000910 <MX_SPI2_Init+0x68>)
 80008b0:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 80008b2:	4b16      	ldr	r3, [pc, #88]	; (800090c <MX_SPI2_Init+0x64>)
 80008b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008b8:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80008ba:	4b14      	ldr	r3, [pc, #80]	; (800090c <MX_SPI2_Init+0x64>)
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80008c0:	4b12      	ldr	r3, [pc, #72]	; (800090c <MX_SPI2_Init+0x64>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008c6:	4b11      	ldr	r3, [pc, #68]	; (800090c <MX_SPI2_Init+0x64>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80008cc:	4b0f      	ldr	r3, [pc, #60]	; (800090c <MX_SPI2_Init+0x64>)
 80008ce:	2201      	movs	r2, #1
 80008d0:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 80008d2:	4b0e      	ldr	r3, [pc, #56]	; (800090c <MX_SPI2_Init+0x64>)
 80008d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008d8:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008da:	4b0c      	ldr	r3, [pc, #48]	; (800090c <MX_SPI2_Init+0x64>)
 80008dc:	2200      	movs	r2, #0
 80008de:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008e0:	4b0a      	ldr	r3, [pc, #40]	; (800090c <MX_SPI2_Init+0x64>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008e6:	4b09      	ldr	r3, [pc, #36]	; (800090c <MX_SPI2_Init+0x64>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008ec:	4b07      	ldr	r3, [pc, #28]	; (800090c <MX_SPI2_Init+0x64>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 80008f2:	4b06      	ldr	r3, [pc, #24]	; (800090c <MX_SPI2_Init+0x64>)
 80008f4:	220a      	movs	r2, #10
 80008f6:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 80008f8:	4804      	ldr	r0, [pc, #16]	; (800090c <MX_SPI2_Init+0x64>)
 80008fa:	f001 faa5 	bl	8001e48 <HAL_SPI_Init>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_SPI2_Init+0x60>
		Error_Handler();
 8000904:	f000 f88e 	bl	8000a24 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8000908:	bf00      	nop
 800090a:	bd80      	pop	{r7, pc}
 800090c:	2000008c 	.word	0x2000008c
 8000910:	40003800 	.word	0x40003800

08000914 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000918:	4b11      	ldr	r3, [pc, #68]	; (8000960 <MX_USART1_UART_Init+0x4c>)
 800091a:	4a12      	ldr	r2, [pc, #72]	; (8000964 <MX_USART1_UART_Init+0x50>)
 800091c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 921600;
 800091e:	4b10      	ldr	r3, [pc, #64]	; (8000960 <MX_USART1_UART_Init+0x4c>)
 8000920:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8000924:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000926:	4b0e      	ldr	r3, [pc, #56]	; (8000960 <MX_USART1_UART_Init+0x4c>)
 8000928:	2200      	movs	r2, #0
 800092a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800092c:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <MX_USART1_UART_Init+0x4c>)
 800092e:	2200      	movs	r2, #0
 8000930:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000932:	4b0b      	ldr	r3, [pc, #44]	; (8000960 <MX_USART1_UART_Init+0x4c>)
 8000934:	2200      	movs	r2, #0
 8000936:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000938:	4b09      	ldr	r3, [pc, #36]	; (8000960 <MX_USART1_UART_Init+0x4c>)
 800093a:	220c      	movs	r2, #12
 800093c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800093e:	4b08      	ldr	r3, [pc, #32]	; (8000960 <MX_USART1_UART_Init+0x4c>)
 8000940:	2200      	movs	r2, #0
 8000942:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000944:	4b06      	ldr	r3, [pc, #24]	; (8000960 <MX_USART1_UART_Init+0x4c>)
 8000946:	2200      	movs	r2, #0
 8000948:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800094a:	4805      	ldr	r0, [pc, #20]	; (8000960 <MX_USART1_UART_Init+0x4c>)
 800094c:	f002 f824 	bl	8002998 <HAL_UART_Init>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8000956:	f000 f865 	bl	8000a24 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	200000e4 	.word	0x200000e4
 8000964:	40011000 	.word	0x40011000

08000968 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000968:	b580      	push	{r7, lr}
 800096a:	b08a      	sub	sp, #40	; 0x28
 800096c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800096e:	f107 0314 	add.w	r3, r7, #20
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	605a      	str	r2, [r3, #4]
 8000978:	609a      	str	r2, [r3, #8]
 800097a:	60da      	str	r2, [r3, #12]
 800097c:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	613b      	str	r3, [r7, #16]
 8000982:	4b26      	ldr	r3, [pc, #152]	; (8000a1c <MX_GPIO_Init+0xb4>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	4a25      	ldr	r2, [pc, #148]	; (8000a1c <MX_GPIO_Init+0xb4>)
 8000988:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
 800098e:	4b23      	ldr	r3, [pc, #140]	; (8000a1c <MX_GPIO_Init+0xb4>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000996:	613b      	str	r3, [r7, #16]
 8000998:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	4b1f      	ldr	r3, [pc, #124]	; (8000a1c <MX_GPIO_Init+0xb4>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	4a1e      	ldr	r2, [pc, #120]	; (8000a1c <MX_GPIO_Init+0xb4>)
 80009a4:	f043 0304 	orr.w	r3, r3, #4
 80009a8:	6313      	str	r3, [r2, #48]	; 0x30
 80009aa:	4b1c      	ldr	r3, [pc, #112]	; (8000a1c <MX_GPIO_Init+0xb4>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	f003 0304 	and.w	r3, r3, #4
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	60bb      	str	r3, [r7, #8]
 80009ba:	4b18      	ldr	r3, [pc, #96]	; (8000a1c <MX_GPIO_Init+0xb4>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	4a17      	ldr	r2, [pc, #92]	; (8000a1c <MX_GPIO_Init+0xb4>)
 80009c0:	f043 0302 	orr.w	r3, r3, #2
 80009c4:	6313      	str	r3, [r2, #48]	; 0x30
 80009c6:	4b15      	ldr	r3, [pc, #84]	; (8000a1c <MX_GPIO_Init+0xb4>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	f003 0302 	and.w	r3, r3, #2
 80009ce:	60bb      	str	r3, [r7, #8]
 80009d0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	607b      	str	r3, [r7, #4]
 80009d6:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <MX_GPIO_Init+0xb4>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a10      	ldr	r2, [pc, #64]	; (8000a1c <MX_GPIO_Init+0xb4>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <MX_GPIO_Init+0xb4>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	607b      	str	r3, [r7, #4]
 80009ec:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 80009ee:	2201      	movs	r2, #1
 80009f0:	2102      	movs	r1, #2
 80009f2:	480b      	ldr	r0, [pc, #44]	; (8000a20 <MX_GPIO_Init+0xb8>)
 80009f4:	f000 fd26 	bl	8001444 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : SPI_CS_Pin */
	GPIO_InitStruct.Pin = SPI_CS_Pin;
 80009f8:	2302      	movs	r3, #2
 80009fa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fc:	2301      	movs	r3, #1
 80009fe:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a00:	2301      	movs	r3, #1
 8000a02:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a04:	2302      	movs	r3, #2
 8000a06:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8000a08:	f107 0314 	add.w	r3, r7, #20
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4804      	ldr	r0, [pc, #16]	; (8000a20 <MX_GPIO_Init+0xb8>)
 8000a10:	f000 fb6c 	bl	80010ec <HAL_GPIO_Init>

}
 8000a14:	bf00      	nop
 8000a16:	3728      	adds	r7, #40	; 0x28
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	40020800 	.word	0x40020800

08000a24 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a28:	b672      	cpsid	i
}
 8000a2a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000a2c:	e7fe      	b.n	8000a2c <Error_Handler+0x8>
	...

08000a30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	607b      	str	r3, [r7, #4]
 8000a3a:	4b10      	ldr	r3, [pc, #64]	; (8000a7c <HAL_MspInit+0x4c>)
 8000a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3e:	4a0f      	ldr	r2, [pc, #60]	; (8000a7c <HAL_MspInit+0x4c>)
 8000a40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a44:	6453      	str	r3, [r2, #68]	; 0x44
 8000a46:	4b0d      	ldr	r3, [pc, #52]	; (8000a7c <HAL_MspInit+0x4c>)
 8000a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	603b      	str	r3, [r7, #0]
 8000a56:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <HAL_MspInit+0x4c>)
 8000a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5a:	4a08      	ldr	r2, [pc, #32]	; (8000a7c <HAL_MspInit+0x4c>)
 8000a5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a60:	6413      	str	r3, [r2, #64]	; 0x40
 8000a62:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <HAL_MspInit+0x4c>)
 8000a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a6a:	603b      	str	r3, [r7, #0]
 8000a6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	370c      	adds	r7, #12
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	40023800 	.word	0x40023800

08000a80 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b08a      	sub	sp, #40	; 0x28
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a88:	f107 0314 	add.w	r3, r7, #20
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]
 8000a94:	60da      	str	r2, [r3, #12]
 8000a96:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a28      	ldr	r2, [pc, #160]	; (8000b40 <HAL_SPI_MspInit+0xc0>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d14a      	bne.n	8000b38 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	613b      	str	r3, [r7, #16]
 8000aa6:	4b27      	ldr	r3, [pc, #156]	; (8000b44 <HAL_SPI_MspInit+0xc4>)
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aaa:	4a26      	ldr	r2, [pc, #152]	; (8000b44 <HAL_SPI_MspInit+0xc4>)
 8000aac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ab0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab2:	4b24      	ldr	r3, [pc, #144]	; (8000b44 <HAL_SPI_MspInit+0xc4>)
 8000ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aba:	613b      	str	r3, [r7, #16]
 8000abc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60fb      	str	r3, [r7, #12]
 8000ac2:	4b20      	ldr	r3, [pc, #128]	; (8000b44 <HAL_SPI_MspInit+0xc4>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	4a1f      	ldr	r2, [pc, #124]	; (8000b44 <HAL_SPI_MspInit+0xc4>)
 8000ac8:	f043 0304 	orr.w	r3, r3, #4
 8000acc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ace:	4b1d      	ldr	r3, [pc, #116]	; (8000b44 <HAL_SPI_MspInit+0xc4>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	f003 0304 	and.w	r3, r3, #4
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	60bb      	str	r3, [r7, #8]
 8000ade:	4b19      	ldr	r3, [pc, #100]	; (8000b44 <HAL_SPI_MspInit+0xc4>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	4a18      	ldr	r2, [pc, #96]	; (8000b44 <HAL_SPI_MspInit+0xc4>)
 8000ae4:	f043 0302 	orr.w	r3, r3, #2
 8000ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aea:	4b16      	ldr	r3, [pc, #88]	; (8000b44 <HAL_SPI_MspInit+0xc4>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	f003 0302 	and.w	r3, r3, #2
 8000af2:	60bb      	str	r3, [r7, #8]
 8000af4:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000af6:	230c      	movs	r3, #12
 8000af8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afa:	2302      	movs	r3, #2
 8000afc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b02:	2303      	movs	r3, #3
 8000b04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b06:	2305      	movs	r3, #5
 8000b08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b0a:	f107 0314 	add.w	r3, r7, #20
 8000b0e:	4619      	mov	r1, r3
 8000b10:	480d      	ldr	r0, [pc, #52]	; (8000b48 <HAL_SPI_MspInit+0xc8>)
 8000b12:	f000 faeb 	bl	80010ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b24:	2303      	movs	r3, #3
 8000b26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b28:	2305      	movs	r3, #5
 8000b2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b2c:	f107 0314 	add.w	r3, r7, #20
 8000b30:	4619      	mov	r1, r3
 8000b32:	4806      	ldr	r0, [pc, #24]	; (8000b4c <HAL_SPI_MspInit+0xcc>)
 8000b34:	f000 fada 	bl	80010ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000b38:	bf00      	nop
 8000b3a:	3728      	adds	r7, #40	; 0x28
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40003800 	.word	0x40003800
 8000b44:	40023800 	.word	0x40023800
 8000b48:	40020800 	.word	0x40020800
 8000b4c:	40020400 	.word	0x40020400

08000b50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b08a      	sub	sp, #40	; 0x28
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b58:	f107 0314 	add.w	r3, r7, #20
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a19      	ldr	r2, [pc, #100]	; (8000bd4 <HAL_UART_MspInit+0x84>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d12c      	bne.n	8000bcc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	613b      	str	r3, [r7, #16]
 8000b76:	4b18      	ldr	r3, [pc, #96]	; (8000bd8 <HAL_UART_MspInit+0x88>)
 8000b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7a:	4a17      	ldr	r2, [pc, #92]	; (8000bd8 <HAL_UART_MspInit+0x88>)
 8000b7c:	f043 0310 	orr.w	r3, r3, #16
 8000b80:	6453      	str	r3, [r2, #68]	; 0x44
 8000b82:	4b15      	ldr	r3, [pc, #84]	; (8000bd8 <HAL_UART_MspInit+0x88>)
 8000b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b86:	f003 0310 	and.w	r3, r3, #16
 8000b8a:	613b      	str	r3, [r7, #16]
 8000b8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <HAL_UART_MspInit+0x88>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	4a10      	ldr	r2, [pc, #64]	; (8000bd8 <HAL_UART_MspInit+0x88>)
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9e:	4b0e      	ldr	r3, [pc, #56]	; (8000bd8 <HAL_UART_MspInit+0x88>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000baa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000bae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb8:	2303      	movs	r3, #3
 8000bba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000bbc:	2307      	movs	r3, #7
 8000bbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc0:	f107 0314 	add.w	r3, r7, #20
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4805      	ldr	r0, [pc, #20]	; (8000bdc <HAL_UART_MspInit+0x8c>)
 8000bc8:	f000 fa90 	bl	80010ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000bcc:	bf00      	nop
 8000bce:	3728      	adds	r7, #40	; 0x28
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40011000 	.word	0x40011000
 8000bd8:	40023800 	.word	0x40023800
 8000bdc:	40020000 	.word	0x40020000

08000be0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000be4:	e7fe      	b.n	8000be4 <NMI_Handler+0x4>

08000be6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bea:	e7fe      	b.n	8000bea <HardFault_Handler+0x4>

08000bec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf0:	e7fe      	b.n	8000bf0 <MemManage_Handler+0x4>

08000bf2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bf6:	e7fe      	b.n	8000bf6 <BusFault_Handler+0x4>

08000bf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bfc:	e7fe      	b.n	8000bfc <UsageFault_Handler+0x4>

08000bfe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr

08000c0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr

08000c1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr

08000c28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c2c:	f000 f934 	bl	8000e98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c30:	bf00      	nop
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b086      	sub	sp, #24
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	60f8      	str	r0, [r7, #12]
 8000c3c:	60b9      	str	r1, [r7, #8]
 8000c3e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]
 8000c44:	e00a      	b.n	8000c5c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c46:	f3af 8000 	nop.w
 8000c4a:	4601      	mov	r1, r0
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	1c5a      	adds	r2, r3, #1
 8000c50:	60ba      	str	r2, [r7, #8]
 8000c52:	b2ca      	uxtb	r2, r1
 8000c54:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	3301      	adds	r3, #1
 8000c5a:	617b      	str	r3, [r7, #20]
 8000c5c:	697a      	ldr	r2, [r7, #20]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	dbf0      	blt.n	8000c46 <_read+0x12>
  }

  return len;
 8000c64:	687b      	ldr	r3, [r7, #4]
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3718      	adds	r7, #24
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b086      	sub	sp, #24
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	60f8      	str	r0, [r7, #12]
 8000c76:	60b9      	str	r1, [r7, #8]
 8000c78:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	617b      	str	r3, [r7, #20]
 8000c7e:	e009      	b.n	8000c94 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	1c5a      	adds	r2, r3, #1
 8000c84:	60ba      	str	r2, [r7, #8]
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff fd09 	bl	80006a0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	3301      	adds	r3, #1
 8000c92:	617b      	str	r3, [r7, #20]
 8000c94:	697a      	ldr	r2, [r7, #20]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	dbf1      	blt.n	8000c80 <_write+0x12>
  }
  return len;
 8000c9c:	687b      	ldr	r3, [r7, #4]
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3718      	adds	r7, #24
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <_close>:

int _close(int file)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	b083      	sub	sp, #12
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr

08000cbe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	b083      	sub	sp, #12
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	6078      	str	r0, [r7, #4]
 8000cc6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cce:	605a      	str	r2, [r3, #4]
  return 0;
 8000cd0:	2300      	movs	r3, #0
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr

08000cde <_isatty>:

int _isatty(int file)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	b083      	sub	sp, #12
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ce6:	2301      	movs	r3, #1
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr

08000cf4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b085      	sub	sp, #20
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	60b9      	str	r1, [r7, #8]
 8000cfe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d00:	2300      	movs	r3, #0
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3714      	adds	r7, #20
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
	...

08000d10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b086      	sub	sp, #24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d18:	4a14      	ldr	r2, [pc, #80]	; (8000d6c <_sbrk+0x5c>)
 8000d1a:	4b15      	ldr	r3, [pc, #84]	; (8000d70 <_sbrk+0x60>)
 8000d1c:	1ad3      	subs	r3, r2, r3
 8000d1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d24:	4b13      	ldr	r3, [pc, #76]	; (8000d74 <_sbrk+0x64>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d102      	bne.n	8000d32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d2c:	4b11      	ldr	r3, [pc, #68]	; (8000d74 <_sbrk+0x64>)
 8000d2e:	4a12      	ldr	r2, [pc, #72]	; (8000d78 <_sbrk+0x68>)
 8000d30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d32:	4b10      	ldr	r3, [pc, #64]	; (8000d74 <_sbrk+0x64>)
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4413      	add	r3, r2
 8000d3a:	693a      	ldr	r2, [r7, #16]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	d207      	bcs.n	8000d50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d40:	f002 fe38 	bl	80039b4 <__errno>
 8000d44:	4603      	mov	r3, r0
 8000d46:	220c      	movs	r2, #12
 8000d48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d4e:	e009      	b.n	8000d64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d50:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <_sbrk+0x64>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d56:	4b07      	ldr	r3, [pc, #28]	; (8000d74 <_sbrk+0x64>)
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	4a05      	ldr	r2, [pc, #20]	; (8000d74 <_sbrk+0x64>)
 8000d60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d62:	68fb      	ldr	r3, [r7, #12]
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3718      	adds	r7, #24
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	20030000 	.word	0x20030000
 8000d70:	00000400 	.word	0x00000400
 8000d74:	20000128 	.word	0x20000128
 8000d78:	20000168 	.word	0x20000168

08000d7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000d7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000db4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d80:	480d      	ldr	r0, [pc, #52]	; (8000db8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d82:	490e      	ldr	r1, [pc, #56]	; (8000dbc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d84:	4a0e      	ldr	r2, [pc, #56]	; (8000dc0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d88:	e002      	b.n	8000d90 <LoopCopyDataInit>

08000d8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d8e:	3304      	adds	r3, #4

08000d90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d94:	d3f9      	bcc.n	8000d8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d96:	4a0b      	ldr	r2, [pc, #44]	; (8000dc4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d98:	4c0b      	ldr	r4, [pc, #44]	; (8000dc8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d9c:	e001      	b.n	8000da2 <LoopFillZerobss>

08000d9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da0:	3204      	adds	r2, #4

08000da2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000da2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000da4:	d3fb      	bcc.n	8000d9e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000da6:	f000 f813 	bl	8000dd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000daa:	f002 fe09 	bl	80039c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dae:	f7ff fc89 	bl	80006c4 <main>
  bx  lr    
 8000db2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000db4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000db8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dbc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000dc0:	08004fcc 	.word	0x08004fcc
  ldr r2, =_sbss
 8000dc4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000dc8:	20000168 	.word	0x20000168

08000dcc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dcc:	e7fe      	b.n	8000dcc <ADC_IRQHandler>
	...

08000dd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dd4:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <SystemInit+0x20>)
 8000dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dda:	4a05      	ldr	r2, [pc, #20]	; (8000df0 <SystemInit+0x20>)
 8000ddc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000de0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	e000ed00 	.word	0xe000ed00

08000df4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000df8:	4b0e      	ldr	r3, [pc, #56]	; (8000e34 <HAL_Init+0x40>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a0d      	ldr	r2, [pc, #52]	; (8000e34 <HAL_Init+0x40>)
 8000dfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e04:	4b0b      	ldr	r3, [pc, #44]	; (8000e34 <HAL_Init+0x40>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a0a      	ldr	r2, [pc, #40]	; (8000e34 <HAL_Init+0x40>)
 8000e0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e10:	4b08      	ldr	r3, [pc, #32]	; (8000e34 <HAL_Init+0x40>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a07      	ldr	r2, [pc, #28]	; (8000e34 <HAL_Init+0x40>)
 8000e16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e1c:	2003      	movs	r0, #3
 8000e1e:	f000 f931 	bl	8001084 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e22:	200f      	movs	r0, #15
 8000e24:	f000 f808 	bl	8000e38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e28:	f7ff fe02 	bl	8000a30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e2c:	2300      	movs	r3, #0
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40023c00 	.word	0x40023c00

08000e38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e40:	4b12      	ldr	r3, [pc, #72]	; (8000e8c <HAL_InitTick+0x54>)
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	4b12      	ldr	r3, [pc, #72]	; (8000e90 <HAL_InitTick+0x58>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	4619      	mov	r1, r3
 8000e4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e56:	4618      	mov	r0, r3
 8000e58:	f000 f93b 	bl	80010d2 <HAL_SYSTICK_Config>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
 8000e64:	e00e      	b.n	8000e84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2b0f      	cmp	r3, #15
 8000e6a:	d80a      	bhi.n	8000e82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	6879      	ldr	r1, [r7, #4]
 8000e70:	f04f 30ff 	mov.w	r0, #4294967295
 8000e74:	f000 f911 	bl	800109a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e78:	4a06      	ldr	r2, [pc, #24]	; (8000e94 <HAL_InitTick+0x5c>)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	e000      	b.n	8000e84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	20000000 	.word	0x20000000
 8000e90:	20000008 	.word	0x20000008
 8000e94:	20000004 	.word	0x20000004

08000e98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e9c:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <HAL_IncTick+0x20>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <HAL_IncTick+0x24>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	4a04      	ldr	r2, [pc, #16]	; (8000ebc <HAL_IncTick+0x24>)
 8000eaa:	6013      	str	r3, [r2, #0]
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	20000008 	.word	0x20000008
 8000ebc:	2000012c 	.word	0x2000012c

08000ec0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec4:	4b03      	ldr	r3, [pc, #12]	; (8000ed4 <HAL_GetTick+0x14>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	2000012c 	.word	0x2000012c

08000ed8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ee0:	f7ff ffee 	bl	8000ec0 <HAL_GetTick>
 8000ee4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ef0:	d005      	beq.n	8000efe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ef2:	4b0a      	ldr	r3, [pc, #40]	; (8000f1c <HAL_Delay+0x44>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	4413      	add	r3, r2
 8000efc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000efe:	bf00      	nop
 8000f00:	f7ff ffde 	bl	8000ec0 <HAL_GetTick>
 8000f04:	4602      	mov	r2, r0
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	68fa      	ldr	r2, [r7, #12]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d8f7      	bhi.n	8000f00 <HAL_Delay+0x28>
  {
  }
}
 8000f10:	bf00      	nop
 8000f12:	bf00      	nop
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000008 	.word	0x20000008

08000f20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b085      	sub	sp, #20
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	f003 0307 	and.w	r3, r3, #7
 8000f2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f30:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <__NVIC_SetPriorityGrouping+0x44>)
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f36:	68ba      	ldr	r2, [r7, #8]
 8000f38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f52:	4a04      	ldr	r2, [pc, #16]	; (8000f64 <__NVIC_SetPriorityGrouping+0x44>)
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	60d3      	str	r3, [r2, #12]
}
 8000f58:	bf00      	nop
 8000f5a:	3714      	adds	r7, #20
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f6c:	4b04      	ldr	r3, [pc, #16]	; (8000f80 <__NVIC_GetPriorityGrouping+0x18>)
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	0a1b      	lsrs	r3, r3, #8
 8000f72:	f003 0307 	and.w	r3, r3, #7
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	6039      	str	r1, [r7, #0]
 8000f8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	db0a      	blt.n	8000fae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	b2da      	uxtb	r2, r3
 8000f9c:	490c      	ldr	r1, [pc, #48]	; (8000fd0 <__NVIC_SetPriority+0x4c>)
 8000f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa2:	0112      	lsls	r2, r2, #4
 8000fa4:	b2d2      	uxtb	r2, r2
 8000fa6:	440b      	add	r3, r1
 8000fa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fac:	e00a      	b.n	8000fc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	b2da      	uxtb	r2, r3
 8000fb2:	4908      	ldr	r1, [pc, #32]	; (8000fd4 <__NVIC_SetPriority+0x50>)
 8000fb4:	79fb      	ldrb	r3, [r7, #7]
 8000fb6:	f003 030f 	and.w	r3, r3, #15
 8000fba:	3b04      	subs	r3, #4
 8000fbc:	0112      	lsls	r2, r2, #4
 8000fbe:	b2d2      	uxtb	r2, r2
 8000fc0:	440b      	add	r3, r1
 8000fc2:	761a      	strb	r2, [r3, #24]
}
 8000fc4:	bf00      	nop
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	e000e100 	.word	0xe000e100
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b089      	sub	sp, #36	; 0x24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	60f8      	str	r0, [r7, #12]
 8000fe0:	60b9      	str	r1, [r7, #8]
 8000fe2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	f003 0307 	and.w	r3, r3, #7
 8000fea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	f1c3 0307 	rsb	r3, r3, #7
 8000ff2:	2b04      	cmp	r3, #4
 8000ff4:	bf28      	it	cs
 8000ff6:	2304      	movcs	r3, #4
 8000ff8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	3304      	adds	r3, #4
 8000ffe:	2b06      	cmp	r3, #6
 8001000:	d902      	bls.n	8001008 <NVIC_EncodePriority+0x30>
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	3b03      	subs	r3, #3
 8001006:	e000      	b.n	800100a <NVIC_EncodePriority+0x32>
 8001008:	2300      	movs	r3, #0
 800100a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800100c:	f04f 32ff 	mov.w	r2, #4294967295
 8001010:	69bb      	ldr	r3, [r7, #24]
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	43da      	mvns	r2, r3
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	401a      	ands	r2, r3
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001020:	f04f 31ff 	mov.w	r1, #4294967295
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	fa01 f303 	lsl.w	r3, r1, r3
 800102a:	43d9      	mvns	r1, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001030:	4313      	orrs	r3, r2
         );
}
 8001032:	4618      	mov	r0, r3
 8001034:	3724      	adds	r7, #36	; 0x24
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
	...

08001040 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	3b01      	subs	r3, #1
 800104c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001050:	d301      	bcc.n	8001056 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001052:	2301      	movs	r3, #1
 8001054:	e00f      	b.n	8001076 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001056:	4a0a      	ldr	r2, [pc, #40]	; (8001080 <SysTick_Config+0x40>)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3b01      	subs	r3, #1
 800105c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800105e:	210f      	movs	r1, #15
 8001060:	f04f 30ff 	mov.w	r0, #4294967295
 8001064:	f7ff ff8e 	bl	8000f84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001068:	4b05      	ldr	r3, [pc, #20]	; (8001080 <SysTick_Config+0x40>)
 800106a:	2200      	movs	r2, #0
 800106c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800106e:	4b04      	ldr	r3, [pc, #16]	; (8001080 <SysTick_Config+0x40>)
 8001070:	2207      	movs	r2, #7
 8001072:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	e000e010 	.word	0xe000e010

08001084 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f7ff ff47 	bl	8000f20 <__NVIC_SetPriorityGrouping>
}
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800109a:	b580      	push	{r7, lr}
 800109c:	b086      	sub	sp, #24
 800109e:	af00      	add	r7, sp, #0
 80010a0:	4603      	mov	r3, r0
 80010a2:	60b9      	str	r1, [r7, #8]
 80010a4:	607a      	str	r2, [r7, #4]
 80010a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010a8:	2300      	movs	r3, #0
 80010aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010ac:	f7ff ff5c 	bl	8000f68 <__NVIC_GetPriorityGrouping>
 80010b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010b2:	687a      	ldr	r2, [r7, #4]
 80010b4:	68b9      	ldr	r1, [r7, #8]
 80010b6:	6978      	ldr	r0, [r7, #20]
 80010b8:	f7ff ff8e 	bl	8000fd8 <NVIC_EncodePriority>
 80010bc:	4602      	mov	r2, r0
 80010be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010c2:	4611      	mov	r1, r2
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff ff5d 	bl	8000f84 <__NVIC_SetPriority>
}
 80010ca:	bf00      	nop
 80010cc:	3718      	adds	r7, #24
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b082      	sub	sp, #8
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f7ff ffb0 	bl	8001040 <SysTick_Config>
 80010e0:	4603      	mov	r3, r0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
	...

080010ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b089      	sub	sp, #36	; 0x24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010f6:	2300      	movs	r3, #0
 80010f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010fa:	2300      	movs	r3, #0
 80010fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010fe:	2300      	movs	r3, #0
 8001100:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001102:	2300      	movs	r3, #0
 8001104:	61fb      	str	r3, [r7, #28]
 8001106:	e177      	b.n	80013f8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001108:	2201      	movs	r2, #1
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	697a      	ldr	r2, [r7, #20]
 8001118:	4013      	ands	r3, r2
 800111a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800111c:	693a      	ldr	r2, [r7, #16]
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	429a      	cmp	r2, r3
 8001122:	f040 8166 	bne.w	80013f2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f003 0303 	and.w	r3, r3, #3
 800112e:	2b01      	cmp	r3, #1
 8001130:	d005      	beq.n	800113e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800113a:	2b02      	cmp	r3, #2
 800113c:	d130      	bne.n	80011a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	2203      	movs	r2, #3
 800114a:	fa02 f303 	lsl.w	r3, r2, r3
 800114e:	43db      	mvns	r3, r3
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	4013      	ands	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	68da      	ldr	r2, [r3, #12]
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4313      	orrs	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001174:	2201      	movs	r2, #1
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	43db      	mvns	r3, r3
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	4013      	ands	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	091b      	lsrs	r3, r3, #4
 800118a:	f003 0201 	and.w	r2, r3, #1
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	4313      	orrs	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f003 0303 	and.w	r3, r3, #3
 80011a8:	2b03      	cmp	r3, #3
 80011aa:	d017      	beq.n	80011dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	2203      	movs	r2, #3
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	43db      	mvns	r3, r3
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	4013      	ands	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	689a      	ldr	r2, [r3, #8]
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f003 0303 	and.w	r3, r3, #3
 80011e4:	2b02      	cmp	r3, #2
 80011e6:	d123      	bne.n	8001230 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	08da      	lsrs	r2, r3, #3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	3208      	adds	r2, #8
 80011f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	f003 0307 	and.w	r3, r3, #7
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	220f      	movs	r2, #15
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	43db      	mvns	r3, r3
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	4013      	ands	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	691a      	ldr	r2, [r3, #16]
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	f003 0307 	and.w	r3, r3, #7
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	4313      	orrs	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	08da      	lsrs	r2, r3, #3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	3208      	adds	r2, #8
 800122a:	69b9      	ldr	r1, [r7, #24]
 800122c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	2203      	movs	r2, #3
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	43db      	mvns	r3, r3
 8001242:	69ba      	ldr	r2, [r7, #24]
 8001244:	4013      	ands	r3, r2
 8001246:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f003 0203 	and.w	r2, r3, #3
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	4313      	orrs	r3, r2
 800125c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800126c:	2b00      	cmp	r3, #0
 800126e:	f000 80c0 	beq.w	80013f2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	60fb      	str	r3, [r7, #12]
 8001276:	4b66      	ldr	r3, [pc, #408]	; (8001410 <HAL_GPIO_Init+0x324>)
 8001278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127a:	4a65      	ldr	r2, [pc, #404]	; (8001410 <HAL_GPIO_Init+0x324>)
 800127c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001280:	6453      	str	r3, [r2, #68]	; 0x44
 8001282:	4b63      	ldr	r3, [pc, #396]	; (8001410 <HAL_GPIO_Init+0x324>)
 8001284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001286:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800128e:	4a61      	ldr	r2, [pc, #388]	; (8001414 <HAL_GPIO_Init+0x328>)
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	089b      	lsrs	r3, r3, #2
 8001294:	3302      	adds	r3, #2
 8001296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800129a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	f003 0303 	and.w	r3, r3, #3
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	220f      	movs	r2, #15
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	43db      	mvns	r3, r3
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	4013      	ands	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a58      	ldr	r2, [pc, #352]	; (8001418 <HAL_GPIO_Init+0x32c>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d037      	beq.n	800132a <HAL_GPIO_Init+0x23e>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a57      	ldr	r2, [pc, #348]	; (800141c <HAL_GPIO_Init+0x330>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d031      	beq.n	8001326 <HAL_GPIO_Init+0x23a>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a56      	ldr	r2, [pc, #344]	; (8001420 <HAL_GPIO_Init+0x334>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d02b      	beq.n	8001322 <HAL_GPIO_Init+0x236>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a55      	ldr	r2, [pc, #340]	; (8001424 <HAL_GPIO_Init+0x338>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d025      	beq.n	800131e <HAL_GPIO_Init+0x232>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a54      	ldr	r2, [pc, #336]	; (8001428 <HAL_GPIO_Init+0x33c>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d01f      	beq.n	800131a <HAL_GPIO_Init+0x22e>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a53      	ldr	r2, [pc, #332]	; (800142c <HAL_GPIO_Init+0x340>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d019      	beq.n	8001316 <HAL_GPIO_Init+0x22a>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a52      	ldr	r2, [pc, #328]	; (8001430 <HAL_GPIO_Init+0x344>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d013      	beq.n	8001312 <HAL_GPIO_Init+0x226>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a51      	ldr	r2, [pc, #324]	; (8001434 <HAL_GPIO_Init+0x348>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d00d      	beq.n	800130e <HAL_GPIO_Init+0x222>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a50      	ldr	r2, [pc, #320]	; (8001438 <HAL_GPIO_Init+0x34c>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d007      	beq.n	800130a <HAL_GPIO_Init+0x21e>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a4f      	ldr	r2, [pc, #316]	; (800143c <HAL_GPIO_Init+0x350>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d101      	bne.n	8001306 <HAL_GPIO_Init+0x21a>
 8001302:	2309      	movs	r3, #9
 8001304:	e012      	b.n	800132c <HAL_GPIO_Init+0x240>
 8001306:	230a      	movs	r3, #10
 8001308:	e010      	b.n	800132c <HAL_GPIO_Init+0x240>
 800130a:	2308      	movs	r3, #8
 800130c:	e00e      	b.n	800132c <HAL_GPIO_Init+0x240>
 800130e:	2307      	movs	r3, #7
 8001310:	e00c      	b.n	800132c <HAL_GPIO_Init+0x240>
 8001312:	2306      	movs	r3, #6
 8001314:	e00a      	b.n	800132c <HAL_GPIO_Init+0x240>
 8001316:	2305      	movs	r3, #5
 8001318:	e008      	b.n	800132c <HAL_GPIO_Init+0x240>
 800131a:	2304      	movs	r3, #4
 800131c:	e006      	b.n	800132c <HAL_GPIO_Init+0x240>
 800131e:	2303      	movs	r3, #3
 8001320:	e004      	b.n	800132c <HAL_GPIO_Init+0x240>
 8001322:	2302      	movs	r3, #2
 8001324:	e002      	b.n	800132c <HAL_GPIO_Init+0x240>
 8001326:	2301      	movs	r3, #1
 8001328:	e000      	b.n	800132c <HAL_GPIO_Init+0x240>
 800132a:	2300      	movs	r3, #0
 800132c:	69fa      	ldr	r2, [r7, #28]
 800132e:	f002 0203 	and.w	r2, r2, #3
 8001332:	0092      	lsls	r2, r2, #2
 8001334:	4093      	lsls	r3, r2
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	4313      	orrs	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800133c:	4935      	ldr	r1, [pc, #212]	; (8001414 <HAL_GPIO_Init+0x328>)
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	089b      	lsrs	r3, r3, #2
 8001342:	3302      	adds	r3, #2
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800134a:	4b3d      	ldr	r3, [pc, #244]	; (8001440 <HAL_GPIO_Init+0x354>)
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	43db      	mvns	r3, r3
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	4013      	ands	r3, r2
 8001358:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d003      	beq.n	800136e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	4313      	orrs	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800136e:	4a34      	ldr	r2, [pc, #208]	; (8001440 <HAL_GPIO_Init+0x354>)
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001374:	4b32      	ldr	r3, [pc, #200]	; (8001440 <HAL_GPIO_Init+0x354>)
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	43db      	mvns	r3, r3
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	4013      	ands	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800138c:	2b00      	cmp	r3, #0
 800138e:	d003      	beq.n	8001398 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	4313      	orrs	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001398:	4a29      	ldr	r2, [pc, #164]	; (8001440 <HAL_GPIO_Init+0x354>)
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800139e:	4b28      	ldr	r3, [pc, #160]	; (8001440 <HAL_GPIO_Init+0x354>)
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	43db      	mvns	r3, r3
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	4013      	ands	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d003      	beq.n	80013c2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	4313      	orrs	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013c2:	4a1f      	ldr	r2, [pc, #124]	; (8001440 <HAL_GPIO_Init+0x354>)
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013c8:	4b1d      	ldr	r3, [pc, #116]	; (8001440 <HAL_GPIO_Init+0x354>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	43db      	mvns	r3, r3
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	4013      	ands	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d003      	beq.n	80013ec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013ec:	4a14      	ldr	r2, [pc, #80]	; (8001440 <HAL_GPIO_Init+0x354>)
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	3301      	adds	r3, #1
 80013f6:	61fb      	str	r3, [r7, #28]
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	2b0f      	cmp	r3, #15
 80013fc:	f67f ae84 	bls.w	8001108 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001400:	bf00      	nop
 8001402:	bf00      	nop
 8001404:	3724      	adds	r7, #36	; 0x24
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	40023800 	.word	0x40023800
 8001414:	40013800 	.word	0x40013800
 8001418:	40020000 	.word	0x40020000
 800141c:	40020400 	.word	0x40020400
 8001420:	40020800 	.word	0x40020800
 8001424:	40020c00 	.word	0x40020c00
 8001428:	40021000 	.word	0x40021000
 800142c:	40021400 	.word	0x40021400
 8001430:	40021800 	.word	0x40021800
 8001434:	40021c00 	.word	0x40021c00
 8001438:	40022000 	.word	0x40022000
 800143c:	40022400 	.word	0x40022400
 8001440:	40013c00 	.word	0x40013c00

08001444 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	460b      	mov	r3, r1
 800144e:	807b      	strh	r3, [r7, #2]
 8001450:	4613      	mov	r3, r2
 8001452:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001454:	787b      	ldrb	r3, [r7, #1]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d003      	beq.n	8001462 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800145a:	887a      	ldrh	r2, [r7, #2]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001460:	e003      	b.n	800146a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001462:	887b      	ldrh	r3, [r7, #2]
 8001464:	041a      	lsls	r2, r3, #16
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	619a      	str	r2, [r3, #24]
}
 800146a:	bf00      	nop
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
	...

08001478 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800147e:	2300      	movs	r3, #0
 8001480:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	603b      	str	r3, [r7, #0]
 8001486:	4b20      	ldr	r3, [pc, #128]	; (8001508 <HAL_PWREx_EnableOverDrive+0x90>)
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	4a1f      	ldr	r2, [pc, #124]	; (8001508 <HAL_PWREx_EnableOverDrive+0x90>)
 800148c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001490:	6413      	str	r3, [r2, #64]	; 0x40
 8001492:	4b1d      	ldr	r3, [pc, #116]	; (8001508 <HAL_PWREx_EnableOverDrive+0x90>)
 8001494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800149a:	603b      	str	r3, [r7, #0]
 800149c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800149e:	4b1b      	ldr	r3, [pc, #108]	; (800150c <HAL_PWREx_EnableOverDrive+0x94>)
 80014a0:	2201      	movs	r2, #1
 80014a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014a4:	f7ff fd0c 	bl	8000ec0 <HAL_GetTick>
 80014a8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80014aa:	e009      	b.n	80014c0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80014ac:	f7ff fd08 	bl	8000ec0 <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014ba:	d901      	bls.n	80014c0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80014bc:	2303      	movs	r3, #3
 80014be:	e01f      	b.n	8001500 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80014c0:	4b13      	ldr	r3, [pc, #76]	; (8001510 <HAL_PWREx_EnableOverDrive+0x98>)
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014cc:	d1ee      	bne.n	80014ac <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80014ce:	4b11      	ldr	r3, [pc, #68]	; (8001514 <HAL_PWREx_EnableOverDrive+0x9c>)
 80014d0:	2201      	movs	r2, #1
 80014d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014d4:	f7ff fcf4 	bl	8000ec0 <HAL_GetTick>
 80014d8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80014da:	e009      	b.n	80014f0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80014dc:	f7ff fcf0 	bl	8000ec0 <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014ea:	d901      	bls.n	80014f0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80014ec:	2303      	movs	r3, #3
 80014ee:	e007      	b.n	8001500 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80014f0:	4b07      	ldr	r3, [pc, #28]	; (8001510 <HAL_PWREx_EnableOverDrive+0x98>)
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80014fc:	d1ee      	bne.n	80014dc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80014fe:	2300      	movs	r3, #0
}
 8001500:	4618      	mov	r0, r3
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40023800 	.word	0x40023800
 800150c:	420e0040 	.word	0x420e0040
 8001510:	40007000 	.word	0x40007000
 8001514:	420e0044 	.word	0x420e0044

08001518 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d101      	bne.n	800152a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e267      	b.n	80019fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	2b00      	cmp	r3, #0
 8001534:	d075      	beq.n	8001622 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001536:	4b88      	ldr	r3, [pc, #544]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	f003 030c 	and.w	r3, r3, #12
 800153e:	2b04      	cmp	r3, #4
 8001540:	d00c      	beq.n	800155c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001542:	4b85      	ldr	r3, [pc, #532]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800154a:	2b08      	cmp	r3, #8
 800154c:	d112      	bne.n	8001574 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800154e:	4b82      	ldr	r3, [pc, #520]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001556:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800155a:	d10b      	bne.n	8001574 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800155c:	4b7e      	ldr	r3, [pc, #504]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d05b      	beq.n	8001620 <HAL_RCC_OscConfig+0x108>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d157      	bne.n	8001620 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e242      	b.n	80019fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800157c:	d106      	bne.n	800158c <HAL_RCC_OscConfig+0x74>
 800157e:	4b76      	ldr	r3, [pc, #472]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a75      	ldr	r2, [pc, #468]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 8001584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001588:	6013      	str	r3, [r2, #0]
 800158a:	e01d      	b.n	80015c8 <HAL_RCC_OscConfig+0xb0>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001594:	d10c      	bne.n	80015b0 <HAL_RCC_OscConfig+0x98>
 8001596:	4b70      	ldr	r3, [pc, #448]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a6f      	ldr	r2, [pc, #444]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 800159c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015a0:	6013      	str	r3, [r2, #0]
 80015a2:	4b6d      	ldr	r3, [pc, #436]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a6c      	ldr	r2, [pc, #432]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 80015a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015ac:	6013      	str	r3, [r2, #0]
 80015ae:	e00b      	b.n	80015c8 <HAL_RCC_OscConfig+0xb0>
 80015b0:	4b69      	ldr	r3, [pc, #420]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a68      	ldr	r2, [pc, #416]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 80015b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015ba:	6013      	str	r3, [r2, #0]
 80015bc:	4b66      	ldr	r3, [pc, #408]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a65      	ldr	r2, [pc, #404]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 80015c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d013      	beq.n	80015f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d0:	f7ff fc76 	bl	8000ec0 <HAL_GetTick>
 80015d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015d6:	e008      	b.n	80015ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015d8:	f7ff fc72 	bl	8000ec0 <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	2b64      	cmp	r3, #100	; 0x64
 80015e4:	d901      	bls.n	80015ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e207      	b.n	80019fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ea:	4b5b      	ldr	r3, [pc, #364]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d0f0      	beq.n	80015d8 <HAL_RCC_OscConfig+0xc0>
 80015f6:	e014      	b.n	8001622 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f8:	f7ff fc62 	bl	8000ec0 <HAL_GetTick>
 80015fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015fe:	e008      	b.n	8001612 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001600:	f7ff fc5e 	bl	8000ec0 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	2b64      	cmp	r3, #100	; 0x64
 800160c:	d901      	bls.n	8001612 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e1f3      	b.n	80019fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001612:	4b51      	ldr	r3, [pc, #324]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d1f0      	bne.n	8001600 <HAL_RCC_OscConfig+0xe8>
 800161e:	e000      	b.n	8001622 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001620:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	2b00      	cmp	r3, #0
 800162c:	d063      	beq.n	80016f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800162e:	4b4a      	ldr	r3, [pc, #296]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	f003 030c 	and.w	r3, r3, #12
 8001636:	2b00      	cmp	r3, #0
 8001638:	d00b      	beq.n	8001652 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800163a:	4b47      	ldr	r3, [pc, #284]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001642:	2b08      	cmp	r3, #8
 8001644:	d11c      	bne.n	8001680 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001646:	4b44      	ldr	r3, [pc, #272]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d116      	bne.n	8001680 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001652:	4b41      	ldr	r3, [pc, #260]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	2b00      	cmp	r3, #0
 800165c:	d005      	beq.n	800166a <HAL_RCC_OscConfig+0x152>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	2b01      	cmp	r3, #1
 8001664:	d001      	beq.n	800166a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e1c7      	b.n	80019fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800166a:	4b3b      	ldr	r3, [pc, #236]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	691b      	ldr	r3, [r3, #16]
 8001676:	00db      	lsls	r3, r3, #3
 8001678:	4937      	ldr	r1, [pc, #220]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 800167a:	4313      	orrs	r3, r2
 800167c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800167e:	e03a      	b.n	80016f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d020      	beq.n	80016ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001688:	4b34      	ldr	r3, [pc, #208]	; (800175c <HAL_RCC_OscConfig+0x244>)
 800168a:	2201      	movs	r2, #1
 800168c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800168e:	f7ff fc17 	bl	8000ec0 <HAL_GetTick>
 8001692:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001694:	e008      	b.n	80016a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001696:	f7ff fc13 	bl	8000ec0 <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d901      	bls.n	80016a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80016a4:	2303      	movs	r3, #3
 80016a6:	e1a8      	b.n	80019fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016a8:	4b2b      	ldr	r3, [pc, #172]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0302 	and.w	r3, r3, #2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d0f0      	beq.n	8001696 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016b4:	4b28      	ldr	r3, [pc, #160]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	691b      	ldr	r3, [r3, #16]
 80016c0:	00db      	lsls	r3, r3, #3
 80016c2:	4925      	ldr	r1, [pc, #148]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 80016c4:	4313      	orrs	r3, r2
 80016c6:	600b      	str	r3, [r1, #0]
 80016c8:	e015      	b.n	80016f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016ca:	4b24      	ldr	r3, [pc, #144]	; (800175c <HAL_RCC_OscConfig+0x244>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d0:	f7ff fbf6 	bl	8000ec0 <HAL_GetTick>
 80016d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016d6:	e008      	b.n	80016ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016d8:	f7ff fbf2 	bl	8000ec0 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e187      	b.n	80019fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ea:	4b1b      	ldr	r3, [pc, #108]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1f0      	bne.n	80016d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0308 	and.w	r3, r3, #8
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d036      	beq.n	8001770 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	695b      	ldr	r3, [r3, #20]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d016      	beq.n	8001738 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800170a:	4b15      	ldr	r3, [pc, #84]	; (8001760 <HAL_RCC_OscConfig+0x248>)
 800170c:	2201      	movs	r2, #1
 800170e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001710:	f7ff fbd6 	bl	8000ec0 <HAL_GetTick>
 8001714:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001716:	e008      	b.n	800172a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001718:	f7ff fbd2 	bl	8000ec0 <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	2b02      	cmp	r3, #2
 8001724:	d901      	bls.n	800172a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e167      	b.n	80019fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800172a:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <HAL_RCC_OscConfig+0x240>)
 800172c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	2b00      	cmp	r3, #0
 8001734:	d0f0      	beq.n	8001718 <HAL_RCC_OscConfig+0x200>
 8001736:	e01b      	b.n	8001770 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001738:	4b09      	ldr	r3, [pc, #36]	; (8001760 <HAL_RCC_OscConfig+0x248>)
 800173a:	2200      	movs	r2, #0
 800173c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800173e:	f7ff fbbf 	bl	8000ec0 <HAL_GetTick>
 8001742:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001744:	e00e      	b.n	8001764 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001746:	f7ff fbbb 	bl	8000ec0 <HAL_GetTick>
 800174a:	4602      	mov	r2, r0
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	2b02      	cmp	r3, #2
 8001752:	d907      	bls.n	8001764 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001754:	2303      	movs	r3, #3
 8001756:	e150      	b.n	80019fa <HAL_RCC_OscConfig+0x4e2>
 8001758:	40023800 	.word	0x40023800
 800175c:	42470000 	.word	0x42470000
 8001760:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001764:	4b88      	ldr	r3, [pc, #544]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 8001766:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001768:	f003 0302 	and.w	r3, r3, #2
 800176c:	2b00      	cmp	r3, #0
 800176e:	d1ea      	bne.n	8001746 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0304 	and.w	r3, r3, #4
 8001778:	2b00      	cmp	r3, #0
 800177a:	f000 8097 	beq.w	80018ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800177e:	2300      	movs	r3, #0
 8001780:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001782:	4b81      	ldr	r3, [pc, #516]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 8001784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d10f      	bne.n	80017ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	60bb      	str	r3, [r7, #8]
 8001792:	4b7d      	ldr	r3, [pc, #500]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001796:	4a7c      	ldr	r2, [pc, #496]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 8001798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800179c:	6413      	str	r3, [r2, #64]	; 0x40
 800179e:	4b7a      	ldr	r3, [pc, #488]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 80017a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a6:	60bb      	str	r3, [r7, #8]
 80017a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017aa:	2301      	movs	r3, #1
 80017ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ae:	4b77      	ldr	r3, [pc, #476]	; (800198c <HAL_RCC_OscConfig+0x474>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d118      	bne.n	80017ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017ba:	4b74      	ldr	r3, [pc, #464]	; (800198c <HAL_RCC_OscConfig+0x474>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a73      	ldr	r2, [pc, #460]	; (800198c <HAL_RCC_OscConfig+0x474>)
 80017c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017c6:	f7ff fb7b 	bl	8000ec0 <HAL_GetTick>
 80017ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017cc:	e008      	b.n	80017e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017ce:	f7ff fb77 	bl	8000ec0 <HAL_GetTick>
 80017d2:	4602      	mov	r2, r0
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d901      	bls.n	80017e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	e10c      	b.n	80019fa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017e0:	4b6a      	ldr	r3, [pc, #424]	; (800198c <HAL_RCC_OscConfig+0x474>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d0f0      	beq.n	80017ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d106      	bne.n	8001802 <HAL_RCC_OscConfig+0x2ea>
 80017f4:	4b64      	ldr	r3, [pc, #400]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 80017f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017f8:	4a63      	ldr	r2, [pc, #396]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 80017fa:	f043 0301 	orr.w	r3, r3, #1
 80017fe:	6713      	str	r3, [r2, #112]	; 0x70
 8001800:	e01c      	b.n	800183c <HAL_RCC_OscConfig+0x324>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	2b05      	cmp	r3, #5
 8001808:	d10c      	bne.n	8001824 <HAL_RCC_OscConfig+0x30c>
 800180a:	4b5f      	ldr	r3, [pc, #380]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 800180c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800180e:	4a5e      	ldr	r2, [pc, #376]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 8001810:	f043 0304 	orr.w	r3, r3, #4
 8001814:	6713      	str	r3, [r2, #112]	; 0x70
 8001816:	4b5c      	ldr	r3, [pc, #368]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 8001818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800181a:	4a5b      	ldr	r2, [pc, #364]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 800181c:	f043 0301 	orr.w	r3, r3, #1
 8001820:	6713      	str	r3, [r2, #112]	; 0x70
 8001822:	e00b      	b.n	800183c <HAL_RCC_OscConfig+0x324>
 8001824:	4b58      	ldr	r3, [pc, #352]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 8001826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001828:	4a57      	ldr	r2, [pc, #348]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 800182a:	f023 0301 	bic.w	r3, r3, #1
 800182e:	6713      	str	r3, [r2, #112]	; 0x70
 8001830:	4b55      	ldr	r3, [pc, #340]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 8001832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001834:	4a54      	ldr	r2, [pc, #336]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 8001836:	f023 0304 	bic.w	r3, r3, #4
 800183a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d015      	beq.n	8001870 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001844:	f7ff fb3c 	bl	8000ec0 <HAL_GetTick>
 8001848:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800184a:	e00a      	b.n	8001862 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800184c:	f7ff fb38 	bl	8000ec0 <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	f241 3288 	movw	r2, #5000	; 0x1388
 800185a:	4293      	cmp	r3, r2
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e0cb      	b.n	80019fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001862:	4b49      	ldr	r3, [pc, #292]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 8001864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	2b00      	cmp	r3, #0
 800186c:	d0ee      	beq.n	800184c <HAL_RCC_OscConfig+0x334>
 800186e:	e014      	b.n	800189a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001870:	f7ff fb26 	bl	8000ec0 <HAL_GetTick>
 8001874:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001876:	e00a      	b.n	800188e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001878:	f7ff fb22 	bl	8000ec0 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	f241 3288 	movw	r2, #5000	; 0x1388
 8001886:	4293      	cmp	r3, r2
 8001888:	d901      	bls.n	800188e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e0b5      	b.n	80019fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800188e:	4b3e      	ldr	r3, [pc, #248]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 8001890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	2b00      	cmp	r3, #0
 8001898:	d1ee      	bne.n	8001878 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800189a:	7dfb      	ldrb	r3, [r7, #23]
 800189c:	2b01      	cmp	r3, #1
 800189e:	d105      	bne.n	80018ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018a0:	4b39      	ldr	r3, [pc, #228]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 80018a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a4:	4a38      	ldr	r2, [pc, #224]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 80018a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018aa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	699b      	ldr	r3, [r3, #24]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	f000 80a1 	beq.w	80019f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018b6:	4b34      	ldr	r3, [pc, #208]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f003 030c 	and.w	r3, r3, #12
 80018be:	2b08      	cmp	r3, #8
 80018c0:	d05c      	beq.n	800197c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	699b      	ldr	r3, [r3, #24]
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d141      	bne.n	800194e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ca:	4b31      	ldr	r3, [pc, #196]	; (8001990 <HAL_RCC_OscConfig+0x478>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d0:	f7ff faf6 	bl	8000ec0 <HAL_GetTick>
 80018d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018d6:	e008      	b.n	80018ea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018d8:	f7ff faf2 	bl	8000ec0 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e087      	b.n	80019fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ea:	4b27      	ldr	r3, [pc, #156]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d1f0      	bne.n	80018d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	69da      	ldr	r2, [r3, #28]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a1b      	ldr	r3, [r3, #32]
 80018fe:	431a      	orrs	r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001904:	019b      	lsls	r3, r3, #6
 8001906:	431a      	orrs	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800190c:	085b      	lsrs	r3, r3, #1
 800190e:	3b01      	subs	r3, #1
 8001910:	041b      	lsls	r3, r3, #16
 8001912:	431a      	orrs	r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001918:	061b      	lsls	r3, r3, #24
 800191a:	491b      	ldr	r1, [pc, #108]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 800191c:	4313      	orrs	r3, r2
 800191e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001920:	4b1b      	ldr	r3, [pc, #108]	; (8001990 <HAL_RCC_OscConfig+0x478>)
 8001922:	2201      	movs	r2, #1
 8001924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001926:	f7ff facb 	bl	8000ec0 <HAL_GetTick>
 800192a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800192c:	e008      	b.n	8001940 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800192e:	f7ff fac7 	bl	8000ec0 <HAL_GetTick>
 8001932:	4602      	mov	r2, r0
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	2b02      	cmp	r3, #2
 800193a:	d901      	bls.n	8001940 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	e05c      	b.n	80019fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001940:	4b11      	ldr	r3, [pc, #68]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d0f0      	beq.n	800192e <HAL_RCC_OscConfig+0x416>
 800194c:	e054      	b.n	80019f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800194e:	4b10      	ldr	r3, [pc, #64]	; (8001990 <HAL_RCC_OscConfig+0x478>)
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001954:	f7ff fab4 	bl	8000ec0 <HAL_GetTick>
 8001958:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800195a:	e008      	b.n	800196e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800195c:	f7ff fab0 	bl	8000ec0 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b02      	cmp	r3, #2
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e045      	b.n	80019fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800196e:	4b06      	ldr	r3, [pc, #24]	; (8001988 <HAL_RCC_OscConfig+0x470>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d1f0      	bne.n	800195c <HAL_RCC_OscConfig+0x444>
 800197a:	e03d      	b.n	80019f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	699b      	ldr	r3, [r3, #24]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d107      	bne.n	8001994 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e038      	b.n	80019fa <HAL_RCC_OscConfig+0x4e2>
 8001988:	40023800 	.word	0x40023800
 800198c:	40007000 	.word	0x40007000
 8001990:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001994:	4b1b      	ldr	r3, [pc, #108]	; (8001a04 <HAL_RCC_OscConfig+0x4ec>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	699b      	ldr	r3, [r3, #24]
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d028      	beq.n	80019f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d121      	bne.n	80019f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d11a      	bne.n	80019f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019be:	68fa      	ldr	r2, [r7, #12]
 80019c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80019c4:	4013      	ands	r3, r2
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80019ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d111      	bne.n	80019f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019da:	085b      	lsrs	r3, r3, #1
 80019dc:	3b01      	subs	r3, #1
 80019de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d107      	bne.n	80019f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d001      	beq.n	80019f8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e000      	b.n	80019fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3718      	adds	r7, #24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	40023800 	.word	0x40023800

08001a08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d101      	bne.n	8001a1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e0cc      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a1c:	4b68      	ldr	r3, [pc, #416]	; (8001bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 030f 	and.w	r3, r3, #15
 8001a24:	683a      	ldr	r2, [r7, #0]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d90c      	bls.n	8001a44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a2a:	4b65      	ldr	r3, [pc, #404]	; (8001bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a2c:	683a      	ldr	r2, [r7, #0]
 8001a2e:	b2d2      	uxtb	r2, r2
 8001a30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a32:	4b63      	ldr	r3, [pc, #396]	; (8001bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 030f 	and.w	r3, r3, #15
 8001a3a:	683a      	ldr	r2, [r7, #0]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d001      	beq.n	8001a44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e0b8      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0302 	and.w	r3, r3, #2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d020      	beq.n	8001a92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0304 	and.w	r3, r3, #4
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d005      	beq.n	8001a68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a5c:	4b59      	ldr	r3, [pc, #356]	; (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	4a58      	ldr	r2, [pc, #352]	; (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0308 	and.w	r3, r3, #8
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d005      	beq.n	8001a80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a74:	4b53      	ldr	r3, [pc, #332]	; (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	4a52      	ldr	r2, [pc, #328]	; (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a80:	4b50      	ldr	r3, [pc, #320]	; (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	494d      	ldr	r1, [pc, #308]	; (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d044      	beq.n	8001b28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d107      	bne.n	8001ab6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aa6:	4b47      	ldr	r3, [pc, #284]	; (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d119      	bne.n	8001ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e07f      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d003      	beq.n	8001ac6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ac2:	2b03      	cmp	r3, #3
 8001ac4:	d107      	bne.n	8001ad6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ac6:	4b3f      	ldr	r3, [pc, #252]	; (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d109      	bne.n	8001ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e06f      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ad6:	4b3b      	ldr	r3, [pc, #236]	; (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d101      	bne.n	8001ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e067      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ae6:	4b37      	ldr	r3, [pc, #220]	; (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f023 0203 	bic.w	r2, r3, #3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	4934      	ldr	r1, [pc, #208]	; (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001af4:	4313      	orrs	r3, r2
 8001af6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001af8:	f7ff f9e2 	bl	8000ec0 <HAL_GetTick>
 8001afc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001afe:	e00a      	b.n	8001b16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b00:	f7ff f9de 	bl	8000ec0 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e04f      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b16:	4b2b      	ldr	r3, [pc, #172]	; (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f003 020c 	and.w	r2, r3, #12
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d1eb      	bne.n	8001b00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b28:	4b25      	ldr	r3, [pc, #148]	; (8001bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 030f 	and.w	r3, r3, #15
 8001b30:	683a      	ldr	r2, [r7, #0]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d20c      	bcs.n	8001b50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b36:	4b22      	ldr	r3, [pc, #136]	; (8001bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b38:	683a      	ldr	r2, [r7, #0]
 8001b3a:	b2d2      	uxtb	r2, r2
 8001b3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b3e:	4b20      	ldr	r3, [pc, #128]	; (8001bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 030f 	and.w	r3, r3, #15
 8001b46:	683a      	ldr	r2, [r7, #0]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d001      	beq.n	8001b50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e032      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0304 	and.w	r3, r3, #4
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d008      	beq.n	8001b6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b5c:	4b19      	ldr	r3, [pc, #100]	; (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	4916      	ldr	r1, [pc, #88]	; (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0308 	and.w	r3, r3, #8
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d009      	beq.n	8001b8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b7a:	4b12      	ldr	r3, [pc, #72]	; (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	691b      	ldr	r3, [r3, #16]
 8001b86:	00db      	lsls	r3, r3, #3
 8001b88:	490e      	ldr	r1, [pc, #56]	; (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b8e:	f000 f821 	bl	8001bd4 <HAL_RCC_GetSysClockFreq>
 8001b92:	4602      	mov	r2, r0
 8001b94:	4b0b      	ldr	r3, [pc, #44]	; (8001bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	091b      	lsrs	r3, r3, #4
 8001b9a:	f003 030f 	and.w	r3, r3, #15
 8001b9e:	490a      	ldr	r1, [pc, #40]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001ba0:	5ccb      	ldrb	r3, [r1, r3]
 8001ba2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ba6:	4a09      	ldr	r2, [pc, #36]	; (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001ba8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001baa:	4b09      	ldr	r3, [pc, #36]	; (8001bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff f942 	bl	8000e38 <HAL_InitTick>

  return HAL_OK;
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3710      	adds	r7, #16
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40023c00 	.word	0x40023c00
 8001bc4:	40023800 	.word	0x40023800
 8001bc8:	08004f0c 	.word	0x08004f0c
 8001bcc:	20000000 	.word	0x20000000
 8001bd0:	20000004 	.word	0x20000004

08001bd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bd8:	b094      	sub	sp, #80	; 0x50
 8001bda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	647b      	str	r3, [r7, #68]	; 0x44
 8001be0:	2300      	movs	r3, #0
 8001be2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001be4:	2300      	movs	r3, #0
 8001be6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001be8:	2300      	movs	r3, #0
 8001bea:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bec:	4b79      	ldr	r3, [pc, #484]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f003 030c 	and.w	r3, r3, #12
 8001bf4:	2b08      	cmp	r3, #8
 8001bf6:	d00d      	beq.n	8001c14 <HAL_RCC_GetSysClockFreq+0x40>
 8001bf8:	2b08      	cmp	r3, #8
 8001bfa:	f200 80e1 	bhi.w	8001dc0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d002      	beq.n	8001c08 <HAL_RCC_GetSysClockFreq+0x34>
 8001c02:	2b04      	cmp	r3, #4
 8001c04:	d003      	beq.n	8001c0e <HAL_RCC_GetSysClockFreq+0x3a>
 8001c06:	e0db      	b.n	8001dc0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c08:	4b73      	ldr	r3, [pc, #460]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c0a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001c0c:	e0db      	b.n	8001dc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c0e:	4b73      	ldr	r3, [pc, #460]	; (8001ddc <HAL_RCC_GetSysClockFreq+0x208>)
 8001c10:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c12:	e0d8      	b.n	8001dc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c14:	4b6f      	ldr	r3, [pc, #444]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c1c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c1e:	4b6d      	ldr	r3, [pc, #436]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d063      	beq.n	8001cf2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c2a:	4b6a      	ldr	r3, [pc, #424]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	099b      	lsrs	r3, r3, #6
 8001c30:	2200      	movs	r2, #0
 8001c32:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c34:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c3c:	633b      	str	r3, [r7, #48]	; 0x30
 8001c3e:	2300      	movs	r3, #0
 8001c40:	637b      	str	r3, [r7, #52]	; 0x34
 8001c42:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001c46:	4622      	mov	r2, r4
 8001c48:	462b      	mov	r3, r5
 8001c4a:	f04f 0000 	mov.w	r0, #0
 8001c4e:	f04f 0100 	mov.w	r1, #0
 8001c52:	0159      	lsls	r1, r3, #5
 8001c54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c58:	0150      	lsls	r0, r2, #5
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	4621      	mov	r1, r4
 8001c60:	1a51      	subs	r1, r2, r1
 8001c62:	6139      	str	r1, [r7, #16]
 8001c64:	4629      	mov	r1, r5
 8001c66:	eb63 0301 	sbc.w	r3, r3, r1
 8001c6a:	617b      	str	r3, [r7, #20]
 8001c6c:	f04f 0200 	mov.w	r2, #0
 8001c70:	f04f 0300 	mov.w	r3, #0
 8001c74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c78:	4659      	mov	r1, fp
 8001c7a:	018b      	lsls	r3, r1, #6
 8001c7c:	4651      	mov	r1, sl
 8001c7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c82:	4651      	mov	r1, sl
 8001c84:	018a      	lsls	r2, r1, #6
 8001c86:	4651      	mov	r1, sl
 8001c88:	ebb2 0801 	subs.w	r8, r2, r1
 8001c8c:	4659      	mov	r1, fp
 8001c8e:	eb63 0901 	sbc.w	r9, r3, r1
 8001c92:	f04f 0200 	mov.w	r2, #0
 8001c96:	f04f 0300 	mov.w	r3, #0
 8001c9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ca2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ca6:	4690      	mov	r8, r2
 8001ca8:	4699      	mov	r9, r3
 8001caa:	4623      	mov	r3, r4
 8001cac:	eb18 0303 	adds.w	r3, r8, r3
 8001cb0:	60bb      	str	r3, [r7, #8]
 8001cb2:	462b      	mov	r3, r5
 8001cb4:	eb49 0303 	adc.w	r3, r9, r3
 8001cb8:	60fb      	str	r3, [r7, #12]
 8001cba:	f04f 0200 	mov.w	r2, #0
 8001cbe:	f04f 0300 	mov.w	r3, #0
 8001cc2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001cc6:	4629      	mov	r1, r5
 8001cc8:	024b      	lsls	r3, r1, #9
 8001cca:	4621      	mov	r1, r4
 8001ccc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001cd0:	4621      	mov	r1, r4
 8001cd2:	024a      	lsls	r2, r1, #9
 8001cd4:	4610      	mov	r0, r2
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cda:	2200      	movs	r2, #0
 8001cdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cde:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ce0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001ce4:	f7fe fad4 	bl	8000290 <__aeabi_uldivmod>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	460b      	mov	r3, r1
 8001cec:	4613      	mov	r3, r2
 8001cee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001cf0:	e058      	b.n	8001da4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cf2:	4b38      	ldr	r3, [pc, #224]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	099b      	lsrs	r3, r3, #6
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	4611      	mov	r1, r2
 8001cfe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d02:	623b      	str	r3, [r7, #32]
 8001d04:	2300      	movs	r3, #0
 8001d06:	627b      	str	r3, [r7, #36]	; 0x24
 8001d08:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d0c:	4642      	mov	r2, r8
 8001d0e:	464b      	mov	r3, r9
 8001d10:	f04f 0000 	mov.w	r0, #0
 8001d14:	f04f 0100 	mov.w	r1, #0
 8001d18:	0159      	lsls	r1, r3, #5
 8001d1a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d1e:	0150      	lsls	r0, r2, #5
 8001d20:	4602      	mov	r2, r0
 8001d22:	460b      	mov	r3, r1
 8001d24:	4641      	mov	r1, r8
 8001d26:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d2a:	4649      	mov	r1, r9
 8001d2c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d30:	f04f 0200 	mov.w	r2, #0
 8001d34:	f04f 0300 	mov.w	r3, #0
 8001d38:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001d3c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001d40:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001d44:	ebb2 040a 	subs.w	r4, r2, sl
 8001d48:	eb63 050b 	sbc.w	r5, r3, fp
 8001d4c:	f04f 0200 	mov.w	r2, #0
 8001d50:	f04f 0300 	mov.w	r3, #0
 8001d54:	00eb      	lsls	r3, r5, #3
 8001d56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d5a:	00e2      	lsls	r2, r4, #3
 8001d5c:	4614      	mov	r4, r2
 8001d5e:	461d      	mov	r5, r3
 8001d60:	4643      	mov	r3, r8
 8001d62:	18e3      	adds	r3, r4, r3
 8001d64:	603b      	str	r3, [r7, #0]
 8001d66:	464b      	mov	r3, r9
 8001d68:	eb45 0303 	adc.w	r3, r5, r3
 8001d6c:	607b      	str	r3, [r7, #4]
 8001d6e:	f04f 0200 	mov.w	r2, #0
 8001d72:	f04f 0300 	mov.w	r3, #0
 8001d76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d7a:	4629      	mov	r1, r5
 8001d7c:	028b      	lsls	r3, r1, #10
 8001d7e:	4621      	mov	r1, r4
 8001d80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d84:	4621      	mov	r1, r4
 8001d86:	028a      	lsls	r2, r1, #10
 8001d88:	4610      	mov	r0, r2
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d8e:	2200      	movs	r2, #0
 8001d90:	61bb      	str	r3, [r7, #24]
 8001d92:	61fa      	str	r2, [r7, #28]
 8001d94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d98:	f7fe fa7a 	bl	8000290 <__aeabi_uldivmod>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	460b      	mov	r3, r1
 8001da0:	4613      	mov	r3, r2
 8001da2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001da4:	4b0b      	ldr	r3, [pc, #44]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	0c1b      	lsrs	r3, r3, #16
 8001daa:	f003 0303 	and.w	r3, r3, #3
 8001dae:	3301      	adds	r3, #1
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001db4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001db6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dbc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001dbe:	e002      	b.n	8001dc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001dc0:	4b05      	ldr	r3, [pc, #20]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001dc2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001dc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3750      	adds	r7, #80	; 0x50
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001dd2:	bf00      	nop
 8001dd4:	40023800 	.word	0x40023800
 8001dd8:	00f42400 	.word	0x00f42400
 8001ddc:	007a1200 	.word	0x007a1200

08001de0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001de4:	4b03      	ldr	r3, [pc, #12]	; (8001df4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001de6:	681b      	ldr	r3, [r3, #0]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	20000000 	.word	0x20000000

08001df8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001dfc:	f7ff fff0 	bl	8001de0 <HAL_RCC_GetHCLKFreq>
 8001e00:	4602      	mov	r2, r0
 8001e02:	4b05      	ldr	r3, [pc, #20]	; (8001e18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	0a9b      	lsrs	r3, r3, #10
 8001e08:	f003 0307 	and.w	r3, r3, #7
 8001e0c:	4903      	ldr	r1, [pc, #12]	; (8001e1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e0e:	5ccb      	ldrb	r3, [r1, r3]
 8001e10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	40023800 	.word	0x40023800
 8001e1c:	08004f1c 	.word	0x08004f1c

08001e20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e24:	f7ff ffdc 	bl	8001de0 <HAL_RCC_GetHCLKFreq>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	4b05      	ldr	r3, [pc, #20]	; (8001e40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	0b5b      	lsrs	r3, r3, #13
 8001e30:	f003 0307 	and.w	r3, r3, #7
 8001e34:	4903      	ldr	r1, [pc, #12]	; (8001e44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e36:	5ccb      	ldrb	r3, [r1, r3]
 8001e38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	40023800 	.word	0x40023800
 8001e44:	08004f1c 	.word	0x08004f1c

08001e48 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d101      	bne.n	8001e5a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e07b      	b.n	8001f52 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d108      	bne.n	8001e74 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001e6a:	d009      	beq.n	8001e80 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	61da      	str	r2, [r3, #28]
 8001e72:	e005      	b.n	8001e80 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d106      	bne.n	8001ea0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f7fe fdf0 	bl	8000a80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2202      	movs	r2, #2
 8001ea4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001eb6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001ec8:	431a      	orrs	r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ed2:	431a      	orrs	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	691b      	ldr	r3, [r3, #16]
 8001ed8:	f003 0302 	and.w	r3, r3, #2
 8001edc:	431a      	orrs	r2, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	695b      	ldr	r3, [r3, #20]
 8001ee2:	f003 0301 	and.w	r3, r3, #1
 8001ee6:	431a      	orrs	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ef0:	431a      	orrs	r2, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	69db      	ldr	r3, [r3, #28]
 8001ef6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001efa:	431a      	orrs	r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6a1b      	ldr	r3, [r3, #32]
 8001f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f04:	ea42 0103 	orr.w	r1, r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f0c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	430a      	orrs	r2, r1
 8001f16:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	0c1b      	lsrs	r3, r3, #16
 8001f1e:	f003 0104 	and.w	r1, r3, #4
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f26:	f003 0210 	and.w	r2, r3, #16
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	430a      	orrs	r2, r1
 8001f30:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	69da      	ldr	r2, [r3, #28]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f40:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b088      	sub	sp, #32
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	60f8      	str	r0, [r7, #12]
 8001f62:	60b9      	str	r1, [r7, #8]
 8001f64:	603b      	str	r3, [r7, #0]
 8001f66:	4613      	mov	r3, r2
 8001f68:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d101      	bne.n	8001f7c <HAL_SPI_Transmit+0x22>
 8001f78:	2302      	movs	r3, #2
 8001f7a:	e126      	b.n	80021ca <HAL_SPI_Transmit+0x270>
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001f84:	f7fe ff9c 	bl	8000ec0 <HAL_GetTick>
 8001f88:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001f8a:	88fb      	ldrh	r3, [r7, #6]
 8001f8c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d002      	beq.n	8001fa0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001f9e:	e10b      	b.n	80021b8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d002      	beq.n	8001fac <HAL_SPI_Transmit+0x52>
 8001fa6:	88fb      	ldrh	r3, [r7, #6]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d102      	bne.n	8001fb2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001fb0:	e102      	b.n	80021b8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2203      	movs	r2, #3
 8001fb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	68ba      	ldr	r2, [r7, #8]
 8001fc4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	88fa      	ldrh	r2, [r7, #6]
 8001fca:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	88fa      	ldrh	r2, [r7, #6]
 8001fd0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2200      	movs	r2, #0
 8001fee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ff8:	d10f      	bne.n	800201a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002008:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002018:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002024:	2b40      	cmp	r3, #64	; 0x40
 8002026:	d007      	beq.n	8002038 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002036:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002040:	d14b      	bne.n	80020da <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d002      	beq.n	8002050 <HAL_SPI_Transmit+0xf6>
 800204a:	8afb      	ldrh	r3, [r7, #22]
 800204c:	2b01      	cmp	r3, #1
 800204e:	d13e      	bne.n	80020ce <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002054:	881a      	ldrh	r2, [r3, #0]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002060:	1c9a      	adds	r2, r3, #2
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800206a:	b29b      	uxth	r3, r3
 800206c:	3b01      	subs	r3, #1
 800206e:	b29a      	uxth	r2, r3
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002074:	e02b      	b.n	80020ce <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f003 0302 	and.w	r3, r3, #2
 8002080:	2b02      	cmp	r3, #2
 8002082:	d112      	bne.n	80020aa <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002088:	881a      	ldrh	r2, [r3, #0]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002094:	1c9a      	adds	r2, r3, #2
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800209e:	b29b      	uxth	r3, r3
 80020a0:	3b01      	subs	r3, #1
 80020a2:	b29a      	uxth	r2, r3
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	86da      	strh	r2, [r3, #54]	; 0x36
 80020a8:	e011      	b.n	80020ce <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80020aa:	f7fe ff09 	bl	8000ec0 <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	683a      	ldr	r2, [r7, #0]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d803      	bhi.n	80020c2 <HAL_SPI_Transmit+0x168>
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020c0:	d102      	bne.n	80020c8 <HAL_SPI_Transmit+0x16e>
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d102      	bne.n	80020ce <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	77fb      	strb	r3, [r7, #31]
          goto error;
 80020cc:	e074      	b.n	80021b8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d1ce      	bne.n	8002076 <HAL_SPI_Transmit+0x11c>
 80020d8:	e04c      	b.n	8002174 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d002      	beq.n	80020e8 <HAL_SPI_Transmit+0x18e>
 80020e2:	8afb      	ldrh	r3, [r7, #22]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d140      	bne.n	800216a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	330c      	adds	r3, #12
 80020f2:	7812      	ldrb	r2, [r2, #0]
 80020f4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fa:	1c5a      	adds	r2, r3, #1
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002104:	b29b      	uxth	r3, r3
 8002106:	3b01      	subs	r3, #1
 8002108:	b29a      	uxth	r2, r3
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800210e:	e02c      	b.n	800216a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	2b02      	cmp	r3, #2
 800211c:	d113      	bne.n	8002146 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	330c      	adds	r3, #12
 8002128:	7812      	ldrb	r2, [r2, #0]
 800212a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002130:	1c5a      	adds	r2, r3, #1
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800213a:	b29b      	uxth	r3, r3
 800213c:	3b01      	subs	r3, #1
 800213e:	b29a      	uxth	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	86da      	strh	r2, [r3, #54]	; 0x36
 8002144:	e011      	b.n	800216a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002146:	f7fe febb 	bl	8000ec0 <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	683a      	ldr	r2, [r7, #0]
 8002152:	429a      	cmp	r2, r3
 8002154:	d803      	bhi.n	800215e <HAL_SPI_Transmit+0x204>
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800215c:	d102      	bne.n	8002164 <HAL_SPI_Transmit+0x20a>
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d102      	bne.n	800216a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002168:	e026      	b.n	80021b8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800216e:	b29b      	uxth	r3, r3
 8002170:	2b00      	cmp	r3, #0
 8002172:	d1cd      	bne.n	8002110 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	6839      	ldr	r1, [r7, #0]
 8002178:	68f8      	ldr	r0, [r7, #12]
 800217a:	f000 fbcb 	bl	8002914 <SPI_EndRxTxTransaction>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d002      	beq.n	800218a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2220      	movs	r2, #32
 8002188:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d10a      	bne.n	80021a8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002192:	2300      	movs	r3, #0
 8002194:	613b      	str	r3, [r7, #16]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	613b      	str	r3, [r7, #16]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	613b      	str	r3, [r7, #16]
 80021a6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d002      	beq.n	80021b6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	77fb      	strb	r3, [r7, #31]
 80021b4:	e000      	b.n	80021b8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80021b6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2200      	movs	r2, #0
 80021c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80021c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3720      	adds	r7, #32
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b088      	sub	sp, #32
 80021d6:	af02      	add	r7, sp, #8
 80021d8:	60f8      	str	r0, [r7, #12]
 80021da:	60b9      	str	r1, [r7, #8]
 80021dc:	603b      	str	r3, [r7, #0]
 80021de:	4613      	mov	r3, r2
 80021e0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80021e2:	2300      	movs	r3, #0
 80021e4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80021ee:	d112      	bne.n	8002216 <HAL_SPI_Receive+0x44>
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d10e      	bne.n	8002216 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2204      	movs	r2, #4
 80021fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002200:	88fa      	ldrh	r2, [r7, #6]
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	9300      	str	r3, [sp, #0]
 8002206:	4613      	mov	r3, r2
 8002208:	68ba      	ldr	r2, [r7, #8]
 800220a:	68b9      	ldr	r1, [r7, #8]
 800220c:	68f8      	ldr	r0, [r7, #12]
 800220e:	f000 f8f1 	bl	80023f4 <HAL_SPI_TransmitReceive>
 8002212:	4603      	mov	r3, r0
 8002214:	e0ea      	b.n	80023ec <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800221c:	2b01      	cmp	r3, #1
 800221e:	d101      	bne.n	8002224 <HAL_SPI_Receive+0x52>
 8002220:	2302      	movs	r3, #2
 8002222:	e0e3      	b.n	80023ec <HAL_SPI_Receive+0x21a>
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2201      	movs	r2, #1
 8002228:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800222c:	f7fe fe48 	bl	8000ec0 <HAL_GetTick>
 8002230:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002238:	b2db      	uxtb	r3, r3
 800223a:	2b01      	cmp	r3, #1
 800223c:	d002      	beq.n	8002244 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800223e:	2302      	movs	r3, #2
 8002240:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002242:	e0ca      	b.n	80023da <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d002      	beq.n	8002250 <HAL_SPI_Receive+0x7e>
 800224a:	88fb      	ldrh	r3, [r7, #6]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d102      	bne.n	8002256 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002254:	e0c1      	b.n	80023da <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2204      	movs	r2, #4
 800225a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2200      	movs	r2, #0
 8002262:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	68ba      	ldr	r2, [r7, #8]
 8002268:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	88fa      	ldrh	r2, [r7, #6]
 800226e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	88fa      	ldrh	r2, [r7, #6]
 8002274:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2200      	movs	r2, #0
 800227a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2200      	movs	r2, #0
 8002280:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2200      	movs	r2, #0
 8002286:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2200      	movs	r2, #0
 800228c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2200      	movs	r2, #0
 8002292:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800229c:	d10f      	bne.n	80022be <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022ac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80022bc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022c8:	2b40      	cmp	r3, #64	; 0x40
 80022ca:	d007      	beq.n	80022dc <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022da:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d162      	bne.n	80023aa <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80022e4:	e02e      	b.n	8002344 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	f003 0301 	and.w	r3, r3, #1
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d115      	bne.n	8002320 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f103 020c 	add.w	r2, r3, #12
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002300:	7812      	ldrb	r2, [r2, #0]
 8002302:	b2d2      	uxtb	r2, r2
 8002304:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800230a:	1c5a      	adds	r2, r3, #1
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002314:	b29b      	uxth	r3, r3
 8002316:	3b01      	subs	r3, #1
 8002318:	b29a      	uxth	r2, r3
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800231e:	e011      	b.n	8002344 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002320:	f7fe fdce 	bl	8000ec0 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	683a      	ldr	r2, [r7, #0]
 800232c:	429a      	cmp	r2, r3
 800232e:	d803      	bhi.n	8002338 <HAL_SPI_Receive+0x166>
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002336:	d102      	bne.n	800233e <HAL_SPI_Receive+0x16c>
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d102      	bne.n	8002344 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002342:	e04a      	b.n	80023da <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002348:	b29b      	uxth	r3, r3
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1cb      	bne.n	80022e6 <HAL_SPI_Receive+0x114>
 800234e:	e031      	b.n	80023b4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	2b01      	cmp	r3, #1
 800235c:	d113      	bne.n	8002386 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	68da      	ldr	r2, [r3, #12]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002368:	b292      	uxth	r2, r2
 800236a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002370:	1c9a      	adds	r2, r3, #2
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800237a:	b29b      	uxth	r3, r3
 800237c:	3b01      	subs	r3, #1
 800237e:	b29a      	uxth	r2, r3
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002384:	e011      	b.n	80023aa <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002386:	f7fe fd9b 	bl	8000ec0 <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	683a      	ldr	r2, [r7, #0]
 8002392:	429a      	cmp	r2, r3
 8002394:	d803      	bhi.n	800239e <HAL_SPI_Receive+0x1cc>
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800239c:	d102      	bne.n	80023a4 <HAL_SPI_Receive+0x1d2>
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d102      	bne.n	80023aa <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80023a8:	e017      	b.n	80023da <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d1cd      	bne.n	8002350 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80023b4:	693a      	ldr	r2, [r7, #16]
 80023b6:	6839      	ldr	r1, [r7, #0]
 80023b8:	68f8      	ldr	r0, [r7, #12]
 80023ba:	f000 fa45 	bl	8002848 <SPI_EndRxTransaction>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d002      	beq.n	80023ca <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2220      	movs	r2, #32
 80023c8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d002      	beq.n	80023d8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	75fb      	strb	r3, [r7, #23]
 80023d6:	e000      	b.n	80023da <HAL_SPI_Receive+0x208>
  }

error :
 80023d8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2201      	movs	r2, #1
 80023de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80023ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3718      	adds	r7, #24
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b08c      	sub	sp, #48	; 0x30
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	607a      	str	r2, [r7, #4]
 8002400:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002402:	2301      	movs	r3, #1
 8002404:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002406:	2300      	movs	r3, #0
 8002408:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002412:	2b01      	cmp	r3, #1
 8002414:	d101      	bne.n	800241a <HAL_SPI_TransmitReceive+0x26>
 8002416:	2302      	movs	r3, #2
 8002418:	e18a      	b.n	8002730 <HAL_SPI_TransmitReceive+0x33c>
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2201      	movs	r2, #1
 800241e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002422:	f7fe fd4d 	bl	8000ec0 <HAL_GetTick>
 8002426:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800242e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002438:	887b      	ldrh	r3, [r7, #2]
 800243a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800243c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002440:	2b01      	cmp	r3, #1
 8002442:	d00f      	beq.n	8002464 <HAL_SPI_TransmitReceive+0x70>
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800244a:	d107      	bne.n	800245c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d103      	bne.n	800245c <HAL_SPI_TransmitReceive+0x68>
 8002454:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002458:	2b04      	cmp	r3, #4
 800245a:	d003      	beq.n	8002464 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800245c:	2302      	movs	r3, #2
 800245e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002462:	e15b      	b.n	800271c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d005      	beq.n	8002476 <HAL_SPI_TransmitReceive+0x82>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d002      	beq.n	8002476 <HAL_SPI_TransmitReceive+0x82>
 8002470:	887b      	ldrh	r3, [r7, #2]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d103      	bne.n	800247e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800247c:	e14e      	b.n	800271c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002484:	b2db      	uxtb	r3, r3
 8002486:	2b04      	cmp	r3, #4
 8002488:	d003      	beq.n	8002492 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2205      	movs	r2, #5
 800248e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2200      	movs	r2, #0
 8002496:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	887a      	ldrh	r2, [r7, #2]
 80024a2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	887a      	ldrh	r2, [r7, #2]
 80024a8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	68ba      	ldr	r2, [r7, #8]
 80024ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	887a      	ldrh	r2, [r7, #2]
 80024b4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	887a      	ldrh	r2, [r7, #2]
 80024ba:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2200      	movs	r2, #0
 80024c0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2200      	movs	r2, #0
 80024c6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024d2:	2b40      	cmp	r3, #64	; 0x40
 80024d4:	d007      	beq.n	80024e6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024ee:	d178      	bne.n	80025e2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d002      	beq.n	80024fe <HAL_SPI_TransmitReceive+0x10a>
 80024f8:	8b7b      	ldrh	r3, [r7, #26]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d166      	bne.n	80025cc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002502:	881a      	ldrh	r2, [r3, #0]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	1c9a      	adds	r2, r3, #2
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002518:	b29b      	uxth	r3, r3
 800251a:	3b01      	subs	r3, #1
 800251c:	b29a      	uxth	r2, r3
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002522:	e053      	b.n	80025cc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	2b02      	cmp	r3, #2
 8002530:	d11b      	bne.n	800256a <HAL_SPI_TransmitReceive+0x176>
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002536:	b29b      	uxth	r3, r3
 8002538:	2b00      	cmp	r3, #0
 800253a:	d016      	beq.n	800256a <HAL_SPI_TransmitReceive+0x176>
 800253c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800253e:	2b01      	cmp	r3, #1
 8002540:	d113      	bne.n	800256a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002546:	881a      	ldrh	r2, [r3, #0]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002552:	1c9a      	adds	r2, r3, #2
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800255c:	b29b      	uxth	r3, r3
 800255e:	3b01      	subs	r3, #1
 8002560:	b29a      	uxth	r2, r3
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002566:	2300      	movs	r3, #0
 8002568:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	f003 0301 	and.w	r3, r3, #1
 8002574:	2b01      	cmp	r3, #1
 8002576:	d119      	bne.n	80025ac <HAL_SPI_TransmitReceive+0x1b8>
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800257c:	b29b      	uxth	r3, r3
 800257e:	2b00      	cmp	r3, #0
 8002580:	d014      	beq.n	80025ac <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68da      	ldr	r2, [r3, #12]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800258c:	b292      	uxth	r2, r2
 800258e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002594:	1c9a      	adds	r2, r3, #2
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800259e:	b29b      	uxth	r3, r3
 80025a0:	3b01      	subs	r3, #1
 80025a2:	b29a      	uxth	r2, r3
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80025a8:	2301      	movs	r3, #1
 80025aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80025ac:	f7fe fc88 	bl	8000ec0 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d807      	bhi.n	80025cc <HAL_SPI_TransmitReceive+0x1d8>
 80025bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025c2:	d003      	beq.n	80025cc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80025ca:	e0a7      	b.n	800271c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d1a6      	bne.n	8002524 <HAL_SPI_TransmitReceive+0x130>
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025da:	b29b      	uxth	r3, r3
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1a1      	bne.n	8002524 <HAL_SPI_TransmitReceive+0x130>
 80025e0:	e07c      	b.n	80026dc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d002      	beq.n	80025f0 <HAL_SPI_TransmitReceive+0x1fc>
 80025ea:	8b7b      	ldrh	r3, [r7, #26]
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d16b      	bne.n	80026c8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	330c      	adds	r3, #12
 80025fa:	7812      	ldrb	r2, [r2, #0]
 80025fc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002602:	1c5a      	adds	r2, r3, #1
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800260c:	b29b      	uxth	r3, r3
 800260e:	3b01      	subs	r3, #1
 8002610:	b29a      	uxth	r2, r3
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002616:	e057      	b.n	80026c8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b02      	cmp	r3, #2
 8002624:	d11c      	bne.n	8002660 <HAL_SPI_TransmitReceive+0x26c>
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800262a:	b29b      	uxth	r3, r3
 800262c:	2b00      	cmp	r3, #0
 800262e:	d017      	beq.n	8002660 <HAL_SPI_TransmitReceive+0x26c>
 8002630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002632:	2b01      	cmp	r3, #1
 8002634:	d114      	bne.n	8002660 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	330c      	adds	r3, #12
 8002640:	7812      	ldrb	r2, [r2, #0]
 8002642:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002648:	1c5a      	adds	r2, r3, #1
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002652:	b29b      	uxth	r3, r3
 8002654:	3b01      	subs	r3, #1
 8002656:	b29a      	uxth	r2, r3
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800265c:	2300      	movs	r3, #0
 800265e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	2b01      	cmp	r3, #1
 800266c:	d119      	bne.n	80026a2 <HAL_SPI_TransmitReceive+0x2ae>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002672:	b29b      	uxth	r3, r3
 8002674:	2b00      	cmp	r3, #0
 8002676:	d014      	beq.n	80026a2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	68da      	ldr	r2, [r3, #12]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002682:	b2d2      	uxtb	r2, r2
 8002684:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800268a:	1c5a      	adds	r2, r3, #1
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002694:	b29b      	uxth	r3, r3
 8002696:	3b01      	subs	r3, #1
 8002698:	b29a      	uxth	r2, r3
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800269e:	2301      	movs	r3, #1
 80026a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80026a2:	f7fe fc0d 	bl	8000ec0 <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d803      	bhi.n	80026ba <HAL_SPI_TransmitReceive+0x2c6>
 80026b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026b8:	d102      	bne.n	80026c0 <HAL_SPI_TransmitReceive+0x2cc>
 80026ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d103      	bne.n	80026c8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80026c6:	e029      	b.n	800271c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d1a2      	bne.n	8002618 <HAL_SPI_TransmitReceive+0x224>
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d19d      	bne.n	8002618 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80026dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80026e0:	68f8      	ldr	r0, [r7, #12]
 80026e2:	f000 f917 	bl	8002914 <SPI_EndRxTxTransaction>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d006      	beq.n	80026fa <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2220      	movs	r2, #32
 80026f6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80026f8:	e010      	b.n	800271c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d10b      	bne.n	800271a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002702:	2300      	movs	r3, #0
 8002704:	617b      	str	r3, [r7, #20]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	617b      	str	r3, [r7, #20]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	617b      	str	r3, [r7, #20]
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	e000      	b.n	800271c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800271a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2200      	movs	r2, #0
 8002728:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800272c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002730:	4618      	mov	r0, r3
 8002732:	3730      	adds	r7, #48	; 0x30
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b088      	sub	sp, #32
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	603b      	str	r3, [r7, #0]
 8002744:	4613      	mov	r3, r2
 8002746:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002748:	f7fe fbba 	bl	8000ec0 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002750:	1a9b      	subs	r3, r3, r2
 8002752:	683a      	ldr	r2, [r7, #0]
 8002754:	4413      	add	r3, r2
 8002756:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002758:	f7fe fbb2 	bl	8000ec0 <HAL_GetTick>
 800275c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800275e:	4b39      	ldr	r3, [pc, #228]	; (8002844 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	015b      	lsls	r3, r3, #5
 8002764:	0d1b      	lsrs	r3, r3, #20
 8002766:	69fa      	ldr	r2, [r7, #28]
 8002768:	fb02 f303 	mul.w	r3, r2, r3
 800276c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800276e:	e054      	b.n	800281a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002776:	d050      	beq.n	800281a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002778:	f7fe fba2 	bl	8000ec0 <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	69fa      	ldr	r2, [r7, #28]
 8002784:	429a      	cmp	r2, r3
 8002786:	d902      	bls.n	800278e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d13d      	bne.n	800280a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	685a      	ldr	r2, [r3, #4]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800279c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027a6:	d111      	bne.n	80027cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027b0:	d004      	beq.n	80027bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027ba:	d107      	bne.n	80027cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027d4:	d10f      	bne.n	80027f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027e4:	601a      	str	r2, [r3, #0]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2201      	movs	r2, #1
 80027fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e017      	b.n	800283a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d101      	bne.n	8002814 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002810:	2300      	movs	r3, #0
 8002812:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	3b01      	subs	r3, #1
 8002818:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	689a      	ldr	r2, [r3, #8]
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	4013      	ands	r3, r2
 8002824:	68ba      	ldr	r2, [r7, #8]
 8002826:	429a      	cmp	r2, r3
 8002828:	bf0c      	ite	eq
 800282a:	2301      	moveq	r3, #1
 800282c:	2300      	movne	r3, #0
 800282e:	b2db      	uxtb	r3, r3
 8002830:	461a      	mov	r2, r3
 8002832:	79fb      	ldrb	r3, [r7, #7]
 8002834:	429a      	cmp	r2, r3
 8002836:	d19b      	bne.n	8002770 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3720      	adds	r7, #32
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	20000000 	.word	0x20000000

08002848 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b086      	sub	sp, #24
 800284c:	af02      	add	r7, sp, #8
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800285c:	d111      	bne.n	8002882 <SPI_EndRxTransaction+0x3a>
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002866:	d004      	beq.n	8002872 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002870:	d107      	bne.n	8002882 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002880:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800288a:	d12a      	bne.n	80028e2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002894:	d012      	beq.n	80028bc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	9300      	str	r3, [sp, #0]
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	2200      	movs	r2, #0
 800289e:	2180      	movs	r1, #128	; 0x80
 80028a0:	68f8      	ldr	r0, [r7, #12]
 80028a2:	f7ff ff49 	bl	8002738 <SPI_WaitFlagStateUntilTimeout>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d02d      	beq.n	8002908 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028b0:	f043 0220 	orr.w	r2, r3, #32
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e026      	b.n	800290a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	9300      	str	r3, [sp, #0]
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	2200      	movs	r2, #0
 80028c4:	2101      	movs	r1, #1
 80028c6:	68f8      	ldr	r0, [r7, #12]
 80028c8:	f7ff ff36 	bl	8002738 <SPI_WaitFlagStateUntilTimeout>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d01a      	beq.n	8002908 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d6:	f043 0220 	orr.w	r2, r3, #32
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e013      	b.n	800290a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	9300      	str	r3, [sp, #0]
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	2200      	movs	r2, #0
 80028ea:	2101      	movs	r1, #1
 80028ec:	68f8      	ldr	r0, [r7, #12]
 80028ee:	f7ff ff23 	bl	8002738 <SPI_WaitFlagStateUntilTimeout>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d007      	beq.n	8002908 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028fc:	f043 0220 	orr.w	r2, r3, #32
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e000      	b.n	800290a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3710      	adds	r7, #16
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
	...

08002914 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b088      	sub	sp, #32
 8002918:	af02      	add	r7, sp, #8
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002920:	4b1b      	ldr	r3, [pc, #108]	; (8002990 <SPI_EndRxTxTransaction+0x7c>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a1b      	ldr	r2, [pc, #108]	; (8002994 <SPI_EndRxTxTransaction+0x80>)
 8002926:	fba2 2303 	umull	r2, r3, r2, r3
 800292a:	0d5b      	lsrs	r3, r3, #21
 800292c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002930:	fb02 f303 	mul.w	r3, r2, r3
 8002934:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800293e:	d112      	bne.n	8002966 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	9300      	str	r3, [sp, #0]
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	2200      	movs	r2, #0
 8002948:	2180      	movs	r1, #128	; 0x80
 800294a:	68f8      	ldr	r0, [r7, #12]
 800294c:	f7ff fef4 	bl	8002738 <SPI_WaitFlagStateUntilTimeout>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d016      	beq.n	8002984 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800295a:	f043 0220 	orr.w	r2, r3, #32
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e00f      	b.n	8002986 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d00a      	beq.n	8002982 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	3b01      	subs	r3, #1
 8002970:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800297c:	2b80      	cmp	r3, #128	; 0x80
 800297e:	d0f2      	beq.n	8002966 <SPI_EndRxTxTransaction+0x52>
 8002980:	e000      	b.n	8002984 <SPI_EndRxTxTransaction+0x70>
        break;
 8002982:	bf00      	nop
  }

  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3718      	adds	r7, #24
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	20000000 	.word	0x20000000
 8002994:	165e9f81 	.word	0x165e9f81

08002998 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d101      	bne.n	80029aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e03f      	b.n	8002a2a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d106      	bne.n	80029c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f7fe f8c6 	bl	8000b50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2224      	movs	r2, #36	; 0x24
 80029c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68da      	ldr	r2, [r3, #12]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f000 f929 	bl	8002c34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	691a      	ldr	r2, [r3, #16]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	695a      	ldr	r2, [r3, #20]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	68da      	ldr	r2, [r3, #12]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2220      	movs	r2, #32
 8002a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2220      	movs	r2, #32
 8002a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3708      	adds	r7, #8
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}

08002a32 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a32:	b580      	push	{r7, lr}
 8002a34:	b08a      	sub	sp, #40	; 0x28
 8002a36:	af02      	add	r7, sp, #8
 8002a38:	60f8      	str	r0, [r7, #12]
 8002a3a:	60b9      	str	r1, [r7, #8]
 8002a3c:	603b      	str	r3, [r7, #0]
 8002a3e:	4613      	mov	r3, r2
 8002a40:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a42:	2300      	movs	r3, #0
 8002a44:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	2b20      	cmp	r3, #32
 8002a50:	d17c      	bne.n	8002b4c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d002      	beq.n	8002a5e <HAL_UART_Transmit+0x2c>
 8002a58:	88fb      	ldrh	r3, [r7, #6]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e075      	b.n	8002b4e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d101      	bne.n	8002a70 <HAL_UART_Transmit+0x3e>
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	e06e      	b.n	8002b4e <HAL_UART_Transmit+0x11c>
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2221      	movs	r2, #33	; 0x21
 8002a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a86:	f7fe fa1b 	bl	8000ec0 <HAL_GetTick>
 8002a8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	88fa      	ldrh	r2, [r7, #6]
 8002a90:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	88fa      	ldrh	r2, [r7, #6]
 8002a96:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002aa0:	d108      	bne.n	8002ab4 <HAL_UART_Transmit+0x82>
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d104      	bne.n	8002ab4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	61bb      	str	r3, [r7, #24]
 8002ab2:	e003      	b.n	8002abc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002ac4:	e02a      	b.n	8002b1c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	9300      	str	r3, [sp, #0]
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	2200      	movs	r2, #0
 8002ace:	2180      	movs	r1, #128	; 0x80
 8002ad0:	68f8      	ldr	r0, [r7, #12]
 8002ad2:	f000 f840 	bl	8002b56 <UART_WaitOnFlagUntilTimeout>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d001      	beq.n	8002ae0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e036      	b.n	8002b4e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d10b      	bne.n	8002afe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	881b      	ldrh	r3, [r3, #0]
 8002aea:	461a      	mov	r2, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002af4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	3302      	adds	r3, #2
 8002afa:	61bb      	str	r3, [r7, #24]
 8002afc:	e007      	b.n	8002b0e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	781a      	ldrb	r2, [r3, #0]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	3b01      	subs	r3, #1
 8002b16:	b29a      	uxth	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1cf      	bne.n	8002ac6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	9300      	str	r3, [sp, #0]
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	2140      	movs	r1, #64	; 0x40
 8002b30:	68f8      	ldr	r0, [r7, #12]
 8002b32:	f000 f810 	bl	8002b56 <UART_WaitOnFlagUntilTimeout>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d001      	beq.n	8002b40 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e006      	b.n	8002b4e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2220      	movs	r2, #32
 8002b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	e000      	b.n	8002b4e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002b4c:	2302      	movs	r3, #2
  }
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3720      	adds	r7, #32
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b090      	sub	sp, #64	; 0x40
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	60f8      	str	r0, [r7, #12]
 8002b5e:	60b9      	str	r1, [r7, #8]
 8002b60:	603b      	str	r3, [r7, #0]
 8002b62:	4613      	mov	r3, r2
 8002b64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b66:	e050      	b.n	8002c0a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b6e:	d04c      	beq.n	8002c0a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002b70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d007      	beq.n	8002b86 <UART_WaitOnFlagUntilTimeout+0x30>
 8002b76:	f7fe f9a3 	bl	8000ec0 <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d241      	bcs.n	8002c0a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	330c      	adds	r3, #12
 8002b8c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b90:	e853 3f00 	ldrex	r3, [r3]
 8002b94:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b98:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	330c      	adds	r3, #12
 8002ba4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ba6:	637a      	str	r2, [r7, #52]	; 0x34
 8002ba8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002baa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002bac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bae:	e841 2300 	strex	r3, r2, [r1]
 8002bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1e5      	bne.n	8002b86 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	3314      	adds	r3, #20
 8002bc0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	e853 3f00 	ldrex	r3, [r3]
 8002bc8:	613b      	str	r3, [r7, #16]
   return(result);
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	f023 0301 	bic.w	r3, r3, #1
 8002bd0:	63bb      	str	r3, [r7, #56]	; 0x38
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	3314      	adds	r3, #20
 8002bd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002bda:	623a      	str	r2, [r7, #32]
 8002bdc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bde:	69f9      	ldr	r1, [r7, #28]
 8002be0:	6a3a      	ldr	r2, [r7, #32]
 8002be2:	e841 2300 	strex	r3, r2, [r1]
 8002be6:	61bb      	str	r3, [r7, #24]
   return(result);
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d1e5      	bne.n	8002bba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2220      	movs	r2, #32
 8002bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2220      	movs	r2, #32
 8002bfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e00f      	b.n	8002c2a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	4013      	ands	r3, r2
 8002c14:	68ba      	ldr	r2, [r7, #8]
 8002c16:	429a      	cmp	r2, r3
 8002c18:	bf0c      	ite	eq
 8002c1a:	2301      	moveq	r3, #1
 8002c1c:	2300      	movne	r3, #0
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	461a      	mov	r2, r3
 8002c22:	79fb      	ldrb	r3, [r7, #7]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d09f      	beq.n	8002b68 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3740      	adds	r7, #64	; 0x40
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
	...

08002c34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c38:	b0c0      	sub	sp, #256	; 0x100
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	691b      	ldr	r3, [r3, #16]
 8002c48:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c50:	68d9      	ldr	r1, [r3, #12]
 8002c52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	ea40 0301 	orr.w	r3, r0, r1
 8002c5c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c62:	689a      	ldr	r2, [r3, #8]
 8002c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	431a      	orrs	r2, r3
 8002c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	431a      	orrs	r2, r3
 8002c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c78:	69db      	ldr	r3, [r3, #28]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002c8c:	f021 010c 	bic.w	r1, r1, #12
 8002c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002c9a:	430b      	orrs	r3, r1
 8002c9c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	695b      	ldr	r3, [r3, #20]
 8002ca6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002caa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cae:	6999      	ldr	r1, [r3, #24]
 8002cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	ea40 0301 	orr.w	r3, r0, r1
 8002cba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	4b8f      	ldr	r3, [pc, #572]	; (8002f00 <UART_SetConfig+0x2cc>)
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d005      	beq.n	8002cd4 <UART_SetConfig+0xa0>
 8002cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	4b8d      	ldr	r3, [pc, #564]	; (8002f04 <UART_SetConfig+0x2d0>)
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d104      	bne.n	8002cde <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002cd4:	f7ff f8a4 	bl	8001e20 <HAL_RCC_GetPCLK2Freq>
 8002cd8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002cdc:	e003      	b.n	8002ce6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002cde:	f7ff f88b 	bl	8001df8 <HAL_RCC_GetPCLK1Freq>
 8002ce2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ce6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cea:	69db      	ldr	r3, [r3, #28]
 8002cec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cf0:	f040 810c 	bne.w	8002f0c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002cf4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002cfe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002d02:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002d06:	4622      	mov	r2, r4
 8002d08:	462b      	mov	r3, r5
 8002d0a:	1891      	adds	r1, r2, r2
 8002d0c:	65b9      	str	r1, [r7, #88]	; 0x58
 8002d0e:	415b      	adcs	r3, r3
 8002d10:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d12:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002d16:	4621      	mov	r1, r4
 8002d18:	eb12 0801 	adds.w	r8, r2, r1
 8002d1c:	4629      	mov	r1, r5
 8002d1e:	eb43 0901 	adc.w	r9, r3, r1
 8002d22:	f04f 0200 	mov.w	r2, #0
 8002d26:	f04f 0300 	mov.w	r3, #0
 8002d2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d36:	4690      	mov	r8, r2
 8002d38:	4699      	mov	r9, r3
 8002d3a:	4623      	mov	r3, r4
 8002d3c:	eb18 0303 	adds.w	r3, r8, r3
 8002d40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002d44:	462b      	mov	r3, r5
 8002d46:	eb49 0303 	adc.w	r3, r9, r3
 8002d4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002d5a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002d5e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002d62:	460b      	mov	r3, r1
 8002d64:	18db      	adds	r3, r3, r3
 8002d66:	653b      	str	r3, [r7, #80]	; 0x50
 8002d68:	4613      	mov	r3, r2
 8002d6a:	eb42 0303 	adc.w	r3, r2, r3
 8002d6e:	657b      	str	r3, [r7, #84]	; 0x54
 8002d70:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002d74:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002d78:	f7fd fa8a 	bl	8000290 <__aeabi_uldivmod>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	460b      	mov	r3, r1
 8002d80:	4b61      	ldr	r3, [pc, #388]	; (8002f08 <UART_SetConfig+0x2d4>)
 8002d82:	fba3 2302 	umull	r2, r3, r3, r2
 8002d86:	095b      	lsrs	r3, r3, #5
 8002d88:	011c      	lsls	r4, r3, #4
 8002d8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002d94:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002d98:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002d9c:	4642      	mov	r2, r8
 8002d9e:	464b      	mov	r3, r9
 8002da0:	1891      	adds	r1, r2, r2
 8002da2:	64b9      	str	r1, [r7, #72]	; 0x48
 8002da4:	415b      	adcs	r3, r3
 8002da6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002da8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002dac:	4641      	mov	r1, r8
 8002dae:	eb12 0a01 	adds.w	sl, r2, r1
 8002db2:	4649      	mov	r1, r9
 8002db4:	eb43 0b01 	adc.w	fp, r3, r1
 8002db8:	f04f 0200 	mov.w	r2, #0
 8002dbc:	f04f 0300 	mov.w	r3, #0
 8002dc0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002dc4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002dc8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002dcc:	4692      	mov	sl, r2
 8002dce:	469b      	mov	fp, r3
 8002dd0:	4643      	mov	r3, r8
 8002dd2:	eb1a 0303 	adds.w	r3, sl, r3
 8002dd6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002dda:	464b      	mov	r3, r9
 8002ddc:	eb4b 0303 	adc.w	r3, fp, r3
 8002de0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002df0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002df4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002df8:	460b      	mov	r3, r1
 8002dfa:	18db      	adds	r3, r3, r3
 8002dfc:	643b      	str	r3, [r7, #64]	; 0x40
 8002dfe:	4613      	mov	r3, r2
 8002e00:	eb42 0303 	adc.w	r3, r2, r3
 8002e04:	647b      	str	r3, [r7, #68]	; 0x44
 8002e06:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002e0a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002e0e:	f7fd fa3f 	bl	8000290 <__aeabi_uldivmod>
 8002e12:	4602      	mov	r2, r0
 8002e14:	460b      	mov	r3, r1
 8002e16:	4611      	mov	r1, r2
 8002e18:	4b3b      	ldr	r3, [pc, #236]	; (8002f08 <UART_SetConfig+0x2d4>)
 8002e1a:	fba3 2301 	umull	r2, r3, r3, r1
 8002e1e:	095b      	lsrs	r3, r3, #5
 8002e20:	2264      	movs	r2, #100	; 0x64
 8002e22:	fb02 f303 	mul.w	r3, r2, r3
 8002e26:	1acb      	subs	r3, r1, r3
 8002e28:	00db      	lsls	r3, r3, #3
 8002e2a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002e2e:	4b36      	ldr	r3, [pc, #216]	; (8002f08 <UART_SetConfig+0x2d4>)
 8002e30:	fba3 2302 	umull	r2, r3, r3, r2
 8002e34:	095b      	lsrs	r3, r3, #5
 8002e36:	005b      	lsls	r3, r3, #1
 8002e38:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002e3c:	441c      	add	r4, r3
 8002e3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e42:	2200      	movs	r2, #0
 8002e44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002e48:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002e4c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002e50:	4642      	mov	r2, r8
 8002e52:	464b      	mov	r3, r9
 8002e54:	1891      	adds	r1, r2, r2
 8002e56:	63b9      	str	r1, [r7, #56]	; 0x38
 8002e58:	415b      	adcs	r3, r3
 8002e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e5c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002e60:	4641      	mov	r1, r8
 8002e62:	1851      	adds	r1, r2, r1
 8002e64:	6339      	str	r1, [r7, #48]	; 0x30
 8002e66:	4649      	mov	r1, r9
 8002e68:	414b      	adcs	r3, r1
 8002e6a:	637b      	str	r3, [r7, #52]	; 0x34
 8002e6c:	f04f 0200 	mov.w	r2, #0
 8002e70:	f04f 0300 	mov.w	r3, #0
 8002e74:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002e78:	4659      	mov	r1, fp
 8002e7a:	00cb      	lsls	r3, r1, #3
 8002e7c:	4651      	mov	r1, sl
 8002e7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e82:	4651      	mov	r1, sl
 8002e84:	00ca      	lsls	r2, r1, #3
 8002e86:	4610      	mov	r0, r2
 8002e88:	4619      	mov	r1, r3
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	4642      	mov	r2, r8
 8002e8e:	189b      	adds	r3, r3, r2
 8002e90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e94:	464b      	mov	r3, r9
 8002e96:	460a      	mov	r2, r1
 8002e98:	eb42 0303 	adc.w	r3, r2, r3
 8002e9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002eac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002eb0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	18db      	adds	r3, r3, r3
 8002eb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002eba:	4613      	mov	r3, r2
 8002ebc:	eb42 0303 	adc.w	r3, r2, r3
 8002ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ec2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ec6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002eca:	f7fd f9e1 	bl	8000290 <__aeabi_uldivmod>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	4b0d      	ldr	r3, [pc, #52]	; (8002f08 <UART_SetConfig+0x2d4>)
 8002ed4:	fba3 1302 	umull	r1, r3, r3, r2
 8002ed8:	095b      	lsrs	r3, r3, #5
 8002eda:	2164      	movs	r1, #100	; 0x64
 8002edc:	fb01 f303 	mul.w	r3, r1, r3
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	00db      	lsls	r3, r3, #3
 8002ee4:	3332      	adds	r3, #50	; 0x32
 8002ee6:	4a08      	ldr	r2, [pc, #32]	; (8002f08 <UART_SetConfig+0x2d4>)
 8002ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8002eec:	095b      	lsrs	r3, r3, #5
 8002eee:	f003 0207 	and.w	r2, r3, #7
 8002ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4422      	add	r2, r4
 8002efa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002efc:	e105      	b.n	800310a <UART_SetConfig+0x4d6>
 8002efe:	bf00      	nop
 8002f00:	40011000 	.word	0x40011000
 8002f04:	40011400 	.word	0x40011400
 8002f08:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f10:	2200      	movs	r2, #0
 8002f12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002f16:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002f1a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002f1e:	4642      	mov	r2, r8
 8002f20:	464b      	mov	r3, r9
 8002f22:	1891      	adds	r1, r2, r2
 8002f24:	6239      	str	r1, [r7, #32]
 8002f26:	415b      	adcs	r3, r3
 8002f28:	627b      	str	r3, [r7, #36]	; 0x24
 8002f2a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002f2e:	4641      	mov	r1, r8
 8002f30:	1854      	adds	r4, r2, r1
 8002f32:	4649      	mov	r1, r9
 8002f34:	eb43 0501 	adc.w	r5, r3, r1
 8002f38:	f04f 0200 	mov.w	r2, #0
 8002f3c:	f04f 0300 	mov.w	r3, #0
 8002f40:	00eb      	lsls	r3, r5, #3
 8002f42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f46:	00e2      	lsls	r2, r4, #3
 8002f48:	4614      	mov	r4, r2
 8002f4a:	461d      	mov	r5, r3
 8002f4c:	4643      	mov	r3, r8
 8002f4e:	18e3      	adds	r3, r4, r3
 8002f50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002f54:	464b      	mov	r3, r9
 8002f56:	eb45 0303 	adc.w	r3, r5, r3
 8002f5a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002f5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002f6a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002f6e:	f04f 0200 	mov.w	r2, #0
 8002f72:	f04f 0300 	mov.w	r3, #0
 8002f76:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002f7a:	4629      	mov	r1, r5
 8002f7c:	008b      	lsls	r3, r1, #2
 8002f7e:	4621      	mov	r1, r4
 8002f80:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f84:	4621      	mov	r1, r4
 8002f86:	008a      	lsls	r2, r1, #2
 8002f88:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002f8c:	f7fd f980 	bl	8000290 <__aeabi_uldivmod>
 8002f90:	4602      	mov	r2, r0
 8002f92:	460b      	mov	r3, r1
 8002f94:	4b60      	ldr	r3, [pc, #384]	; (8003118 <UART_SetConfig+0x4e4>)
 8002f96:	fba3 2302 	umull	r2, r3, r3, r2
 8002f9a:	095b      	lsrs	r3, r3, #5
 8002f9c:	011c      	lsls	r4, r3, #4
 8002f9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002fa8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002fac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002fb0:	4642      	mov	r2, r8
 8002fb2:	464b      	mov	r3, r9
 8002fb4:	1891      	adds	r1, r2, r2
 8002fb6:	61b9      	str	r1, [r7, #24]
 8002fb8:	415b      	adcs	r3, r3
 8002fba:	61fb      	str	r3, [r7, #28]
 8002fbc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fc0:	4641      	mov	r1, r8
 8002fc2:	1851      	adds	r1, r2, r1
 8002fc4:	6139      	str	r1, [r7, #16]
 8002fc6:	4649      	mov	r1, r9
 8002fc8:	414b      	adcs	r3, r1
 8002fca:	617b      	str	r3, [r7, #20]
 8002fcc:	f04f 0200 	mov.w	r2, #0
 8002fd0:	f04f 0300 	mov.w	r3, #0
 8002fd4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002fd8:	4659      	mov	r1, fp
 8002fda:	00cb      	lsls	r3, r1, #3
 8002fdc:	4651      	mov	r1, sl
 8002fde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002fe2:	4651      	mov	r1, sl
 8002fe4:	00ca      	lsls	r2, r1, #3
 8002fe6:	4610      	mov	r0, r2
 8002fe8:	4619      	mov	r1, r3
 8002fea:	4603      	mov	r3, r0
 8002fec:	4642      	mov	r2, r8
 8002fee:	189b      	adds	r3, r3, r2
 8002ff0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ff4:	464b      	mov	r3, r9
 8002ff6:	460a      	mov	r2, r1
 8002ff8:	eb42 0303 	adc.w	r3, r2, r3
 8002ffc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	67bb      	str	r3, [r7, #120]	; 0x78
 800300a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800300c:	f04f 0200 	mov.w	r2, #0
 8003010:	f04f 0300 	mov.w	r3, #0
 8003014:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003018:	4649      	mov	r1, r9
 800301a:	008b      	lsls	r3, r1, #2
 800301c:	4641      	mov	r1, r8
 800301e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003022:	4641      	mov	r1, r8
 8003024:	008a      	lsls	r2, r1, #2
 8003026:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800302a:	f7fd f931 	bl	8000290 <__aeabi_uldivmod>
 800302e:	4602      	mov	r2, r0
 8003030:	460b      	mov	r3, r1
 8003032:	4b39      	ldr	r3, [pc, #228]	; (8003118 <UART_SetConfig+0x4e4>)
 8003034:	fba3 1302 	umull	r1, r3, r3, r2
 8003038:	095b      	lsrs	r3, r3, #5
 800303a:	2164      	movs	r1, #100	; 0x64
 800303c:	fb01 f303 	mul.w	r3, r1, r3
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	011b      	lsls	r3, r3, #4
 8003044:	3332      	adds	r3, #50	; 0x32
 8003046:	4a34      	ldr	r2, [pc, #208]	; (8003118 <UART_SetConfig+0x4e4>)
 8003048:	fba2 2303 	umull	r2, r3, r2, r3
 800304c:	095b      	lsrs	r3, r3, #5
 800304e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003052:	441c      	add	r4, r3
 8003054:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003058:	2200      	movs	r2, #0
 800305a:	673b      	str	r3, [r7, #112]	; 0x70
 800305c:	677a      	str	r2, [r7, #116]	; 0x74
 800305e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003062:	4642      	mov	r2, r8
 8003064:	464b      	mov	r3, r9
 8003066:	1891      	adds	r1, r2, r2
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	415b      	adcs	r3, r3
 800306c:	60fb      	str	r3, [r7, #12]
 800306e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003072:	4641      	mov	r1, r8
 8003074:	1851      	adds	r1, r2, r1
 8003076:	6039      	str	r1, [r7, #0]
 8003078:	4649      	mov	r1, r9
 800307a:	414b      	adcs	r3, r1
 800307c:	607b      	str	r3, [r7, #4]
 800307e:	f04f 0200 	mov.w	r2, #0
 8003082:	f04f 0300 	mov.w	r3, #0
 8003086:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800308a:	4659      	mov	r1, fp
 800308c:	00cb      	lsls	r3, r1, #3
 800308e:	4651      	mov	r1, sl
 8003090:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003094:	4651      	mov	r1, sl
 8003096:	00ca      	lsls	r2, r1, #3
 8003098:	4610      	mov	r0, r2
 800309a:	4619      	mov	r1, r3
 800309c:	4603      	mov	r3, r0
 800309e:	4642      	mov	r2, r8
 80030a0:	189b      	adds	r3, r3, r2
 80030a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80030a4:	464b      	mov	r3, r9
 80030a6:	460a      	mov	r2, r1
 80030a8:	eb42 0303 	adc.w	r3, r2, r3
 80030ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80030ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	663b      	str	r3, [r7, #96]	; 0x60
 80030b8:	667a      	str	r2, [r7, #100]	; 0x64
 80030ba:	f04f 0200 	mov.w	r2, #0
 80030be:	f04f 0300 	mov.w	r3, #0
 80030c2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80030c6:	4649      	mov	r1, r9
 80030c8:	008b      	lsls	r3, r1, #2
 80030ca:	4641      	mov	r1, r8
 80030cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030d0:	4641      	mov	r1, r8
 80030d2:	008a      	lsls	r2, r1, #2
 80030d4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80030d8:	f7fd f8da 	bl	8000290 <__aeabi_uldivmod>
 80030dc:	4602      	mov	r2, r0
 80030de:	460b      	mov	r3, r1
 80030e0:	4b0d      	ldr	r3, [pc, #52]	; (8003118 <UART_SetConfig+0x4e4>)
 80030e2:	fba3 1302 	umull	r1, r3, r3, r2
 80030e6:	095b      	lsrs	r3, r3, #5
 80030e8:	2164      	movs	r1, #100	; 0x64
 80030ea:	fb01 f303 	mul.w	r3, r1, r3
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	011b      	lsls	r3, r3, #4
 80030f2:	3332      	adds	r3, #50	; 0x32
 80030f4:	4a08      	ldr	r2, [pc, #32]	; (8003118 <UART_SetConfig+0x4e4>)
 80030f6:	fba2 2303 	umull	r2, r3, r2, r3
 80030fa:	095b      	lsrs	r3, r3, #5
 80030fc:	f003 020f 	and.w	r2, r3, #15
 8003100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4422      	add	r2, r4
 8003108:	609a      	str	r2, [r3, #8]
}
 800310a:	bf00      	nop
 800310c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003110:	46bd      	mov	sp, r7
 8003112:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003116:	bf00      	nop
 8003118:	51eb851f 	.word	0x51eb851f

0800311c <getSync>:

Block *blocks = NULL;

Pixy2 pixy;

int16_t getSync() {
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
	uint8_t i, j, c, cprev;
	int16_t res;
	uint16_t start;

	// parse bytes until we find sync
	for (i = j = 0, cprev = 0; true; i++) {
 8003122:	2300      	movs	r3, #0
 8003124:	73bb      	strb	r3, [r7, #14]
 8003126:	7bbb      	ldrb	r3, [r7, #14]
 8003128:	73fb      	strb	r3, [r7, #15]
 800312a:	2300      	movs	r3, #0
 800312c:	737b      	strb	r3, [r7, #13]
		res = recv(&c, 1, NULL);
 800312e:	1cfb      	adds	r3, r7, #3
 8003130:	2200      	movs	r2, #0
 8003132:	2101      	movs	r1, #1
 8003134:	4618      	mov	r0, r3
 8003136:	f000 fbb7 	bl	80038a8 <recv>
 800313a:	4603      	mov	r3, r0
 800313c:	80fb      	strh	r3, [r7, #6]
		if (res >= PIXY_RESULT_OK) {
 800313e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003142:	2b00      	cmp	r3, #0
 8003144:	db1f      	blt.n	8003186 <getSync+0x6a>
			// since we're using little endian, previous byte is least significant byte
			start = cprev;
 8003146:	7b7b      	ldrb	r3, [r7, #13]
 8003148:	80bb      	strh	r3, [r7, #4]
			// current byte is most significant byte
			start |= c << 8;
 800314a:	78fb      	ldrb	r3, [r7, #3]
 800314c:	021b      	lsls	r3, r3, #8
 800314e:	b21a      	sxth	r2, r3
 8003150:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003154:	4313      	orrs	r3, r2
 8003156:	b21b      	sxth	r3, r3
 8003158:	80bb      	strh	r3, [r7, #4]
			cprev = c;
 800315a:	78fb      	ldrb	r3, [r7, #3]
 800315c:	737b      	strb	r3, [r7, #13]
			if (start == PIXY_CHECKSUM_SYNC) {
 800315e:	88bb      	ldrh	r3, [r7, #4]
 8003160:	f24c 12af 	movw	r2, #49583	; 0xc1af
 8003164:	4293      	cmp	r3, r2
 8003166:	d104      	bne.n	8003172 <getSync+0x56>
				pixy.m_cs = true;
 8003168:	4b19      	ldr	r3, [pc, #100]	; (80031d0 <getSync+0xb4>)
 800316a:	2201      	movs	r2, #1
 800316c:	749a      	strb	r2, [r3, #18]
				return PIXY_RESULT_OK;
 800316e:	2300      	movs	r3, #0
 8003170:	e029      	b.n	80031c6 <getSync+0xaa>
			}
			if (start == PIXY_NO_CHECKSUM_SYNC) {
 8003172:	88bb      	ldrh	r3, [r7, #4]
 8003174:	f24c 12ae 	movw	r2, #49582	; 0xc1ae
 8003178:	4293      	cmp	r3, r2
 800317a:	d104      	bne.n	8003186 <getSync+0x6a>
				pixy.m_cs = false;
 800317c:	4b14      	ldr	r3, [pc, #80]	; (80031d0 <getSync+0xb4>)
 800317e:	2200      	movs	r2, #0
 8003180:	749a      	strb	r2, [r3, #18]
				return PIXY_RESULT_OK;
 8003182:	2300      	movs	r3, #0
 8003184:	e01f      	b.n	80031c6 <getSync+0xaa>
			}
		}
		// If we've read some bytes and no sync, then wait and try again.
		// And do that several more times before we give up.
		// Pixy guarantees to respond within 100us.
		if (i >= 4) {
 8003186:	7bfb      	ldrb	r3, [r7, #15]
 8003188:	2b03      	cmp	r3, #3
 800318a:	d918      	bls.n	80031be <getSync+0xa2>
			if (j >= 4) {
 800318c:	7bbb      	ldrb	r3, [r7, #14]
 800318e:	2b03      	cmp	r3, #3
 8003190:	d905      	bls.n	800319e <getSync+0x82>
#ifdef PIXY_DEBUG
				printf("error: no response\r\n");
 8003192:	4810      	ldr	r0, [pc, #64]	; (80031d4 <getSync+0xb8>)
 8003194:	f000 fdae 	bl	8003cf4 <puts>
#endif
				return PIXY_RESULT_ERROR;
 8003198:	f04f 33ff 	mov.w	r3, #4294967295
 800319c:	e013      	b.n	80031c6 <getSync+0xaa>
			}

			//delay_us(25);
			for (int i = 0; i < 1800 * 25; i++)
 800319e:	2300      	movs	r3, #0
 80031a0:	60bb      	str	r3, [r7, #8]
 80031a2:	e002      	b.n	80031aa <getSync+0x8e>
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	3301      	adds	r3, #1
 80031a8:	60bb      	str	r3, [r7, #8]
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 80031b0:	4293      	cmp	r3, r2
 80031b2:	ddf7      	ble.n	80031a4 <getSync+0x88>
				;

			j++;
 80031b4:	7bbb      	ldrb	r3, [r7, #14]
 80031b6:	3301      	adds	r3, #1
 80031b8:	73bb      	strb	r3, [r7, #14]
			i = 0;
 80031ba:	2300      	movs	r3, #0
 80031bc:	73fb      	strb	r3, [r7, #15]
	for (i = j = 0, cprev = 0; true; i++) {
 80031be:	7bfb      	ldrb	r3, [r7, #15]
 80031c0:	3301      	adds	r3, #1
 80031c2:	73fb      	strb	r3, [r7, #15]
		res = recv(&c, 1, NULL);
 80031c4:	e7b3      	b.n	800312e <getSync+0x12>
		}
	}
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3710      	adds	r7, #16
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	20000138 	.word	0x20000138
 80031d4:	08004e04 	.word	0x08004e04

080031d8 <recvPacket>:

int16_t recvPacket() {
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
	uint16_t csCalc, csSerial;
	int16_t res;

	res = getSync();
 80031de:	f7ff ff9d 	bl	800311c <getSync>
 80031e2:	4603      	mov	r3, r0
 80031e4:	80fb      	strh	r3, [r7, #6]

	if (res < 0)
 80031e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	da02      	bge.n	80031f4 <recvPacket+0x1c>
		return res;
 80031ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031f2:	e068      	b.n	80032c6 <recvPacket+0xee>

	if (pixy.m_cs) {
 80031f4:	4b36      	ldr	r3, [pc, #216]	; (80032d0 <recvPacket+0xf8>)
 80031f6:	7c9b      	ldrb	r3, [r3, #18]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d038      	beq.n	800326e <recvPacket+0x96>
		res = recv(pixy.m_buf, 4, NULL);
 80031fc:	4b34      	ldr	r3, [pc, #208]	; (80032d0 <recvPacket+0xf8>)
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	2200      	movs	r2, #0
 8003202:	2104      	movs	r1, #4
 8003204:	4618      	mov	r0, r3
 8003206:	f000 fb4f 	bl	80038a8 <recv>
 800320a:	4603      	mov	r3, r0
 800320c:	80fb      	strh	r3, [r7, #6]

		if (res < 0)
 800320e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003212:	2b00      	cmp	r3, #0
 8003214:	da02      	bge.n	800321c <recvPacket+0x44>
			return res;
 8003216:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800321a:	e054      	b.n	80032c6 <recvPacket+0xee>

		pixy.m_type = pixy.m_buf[0];
 800321c:	4b2c      	ldr	r3, [pc, #176]	; (80032d0 <recvPacket+0xf8>)
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	781a      	ldrb	r2, [r3, #0]
 8003222:	4b2b      	ldr	r3, [pc, #172]	; (80032d0 <recvPacket+0xf8>)
 8003224:	741a      	strb	r2, [r3, #16]
		pixy.m_length = pixy.m_buf[1];
 8003226:	4b2a      	ldr	r3, [pc, #168]	; (80032d0 <recvPacket+0xf8>)
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	785a      	ldrb	r2, [r3, #1]
 800322c:	4b28      	ldr	r3, [pc, #160]	; (80032d0 <recvPacket+0xf8>)
 800322e:	745a      	strb	r2, [r3, #17]

		csSerial = *(uint16_t*) &(pixy.m_buf[2]);
 8003230:	4b27      	ldr	r3, [pc, #156]	; (80032d0 <recvPacket+0xf8>)
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	885b      	ldrh	r3, [r3, #2]
 8003236:	80bb      	strh	r3, [r7, #4]

		res = recv(pixy.m_buf, pixy.m_length, &csCalc);
 8003238:	4b25      	ldr	r3, [pc, #148]	; (80032d0 <recvPacket+0xf8>)
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	4a24      	ldr	r2, [pc, #144]	; (80032d0 <recvPacket+0xf8>)
 800323e:	7c51      	ldrb	r1, [r2, #17]
 8003240:	1cba      	adds	r2, r7, #2
 8003242:	4618      	mov	r0, r3
 8003244:	f000 fb30 	bl	80038a8 <recv>
 8003248:	4603      	mov	r3, r0
 800324a:	80fb      	strh	r3, [r7, #6]

		if (res < 0)
 800324c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003250:	2b00      	cmp	r3, #0
 8003252:	da02      	bge.n	800325a <recvPacket+0x82>
			return res;
 8003254:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003258:	e035      	b.n	80032c6 <recvPacket+0xee>

		if (csSerial != csCalc) {
 800325a:	887b      	ldrh	r3, [r7, #2]
 800325c:	88ba      	ldrh	r2, [r7, #4]
 800325e:	429a      	cmp	r2, r3
 8003260:	d030      	beq.n	80032c4 <recvPacket+0xec>
#ifdef PIXY_DEBUG
			printf("error: checksum\r\n");
 8003262:	481c      	ldr	r0, [pc, #112]	; (80032d4 <recvPacket+0xfc>)
 8003264:	f000 fd46 	bl	8003cf4 <puts>
#endif
			return PIXY_RESULT_CHECKSUM_ERROR;
 8003268:	f06f 0302 	mvn.w	r3, #2
 800326c:	e02b      	b.n	80032c6 <recvPacket+0xee>
		}
	} else {
		res = recv(pixy.m_buf, 2, NULL);
 800326e:	4b18      	ldr	r3, [pc, #96]	; (80032d0 <recvPacket+0xf8>)
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	2200      	movs	r2, #0
 8003274:	2102      	movs	r1, #2
 8003276:	4618      	mov	r0, r3
 8003278:	f000 fb16 	bl	80038a8 <recv>
 800327c:	4603      	mov	r3, r0
 800327e:	80fb      	strh	r3, [r7, #6]

		if (res < 0)
 8003280:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003284:	2b00      	cmp	r3, #0
 8003286:	da02      	bge.n	800328e <recvPacket+0xb6>
			return res;
 8003288:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800328c:	e01b      	b.n	80032c6 <recvPacket+0xee>

		pixy.m_type = pixy.m_buf[0];
 800328e:	4b10      	ldr	r3, [pc, #64]	; (80032d0 <recvPacket+0xf8>)
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	781a      	ldrb	r2, [r3, #0]
 8003294:	4b0e      	ldr	r3, [pc, #56]	; (80032d0 <recvPacket+0xf8>)
 8003296:	741a      	strb	r2, [r3, #16]
		pixy.m_length = pixy.m_buf[1];
 8003298:	4b0d      	ldr	r3, [pc, #52]	; (80032d0 <recvPacket+0xf8>)
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	785a      	ldrb	r2, [r3, #1]
 800329e:	4b0c      	ldr	r3, [pc, #48]	; (80032d0 <recvPacket+0xf8>)
 80032a0:	745a      	strb	r2, [r3, #17]

		res = recv(pixy.m_buf, pixy.m_length, NULL);
 80032a2:	4b0b      	ldr	r3, [pc, #44]	; (80032d0 <recvPacket+0xf8>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	4a0a      	ldr	r2, [pc, #40]	; (80032d0 <recvPacket+0xf8>)
 80032a8:	7c51      	ldrb	r1, [r2, #17]
 80032aa:	2200      	movs	r2, #0
 80032ac:	4618      	mov	r0, r3
 80032ae:	f000 fafb 	bl	80038a8 <recv>
 80032b2:	4603      	mov	r3, r0
 80032b4:	80fb      	strh	r3, [r7, #6]

		if (res < 0)
 80032b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	da02      	bge.n	80032c4 <recvPacket+0xec>
			return res;
 80032be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032c2:	e000      	b.n	80032c6 <recvPacket+0xee>
	}
	return PIXY_RESULT_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3708      	adds	r7, #8
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	20000138 	.word	0x20000138
 80032d4:	08004e18 	.word	0x08004e18

080032d8 <sendPacket>:

int16_t sendPacket() {
 80032d8:	b580      	push	{r7, lr}
 80032da:	af00      	add	r7, sp, #0
	// write header info at beginnig of buffer
	pixy.m_buf[0] = PIXY_NO_CHECKSUM_SYNC & 0xff;
 80032dc:	4b10      	ldr	r3, [pc, #64]	; (8003320 <sendPacket+0x48>)
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	22ae      	movs	r2, #174	; 0xae
 80032e2:	701a      	strb	r2, [r3, #0]
	pixy.m_buf[1] = PIXY_NO_CHECKSUM_SYNC >> 8;
 80032e4:	4b0e      	ldr	r3, [pc, #56]	; (8003320 <sendPacket+0x48>)
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	3301      	adds	r3, #1
 80032ea:	22c1      	movs	r2, #193	; 0xc1
 80032ec:	701a      	strb	r2, [r3, #0]
	pixy.m_buf[2] = pixy.m_type;
 80032ee:	4b0c      	ldr	r3, [pc, #48]	; (8003320 <sendPacket+0x48>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	3302      	adds	r3, #2
 80032f4:	4a0a      	ldr	r2, [pc, #40]	; (8003320 <sendPacket+0x48>)
 80032f6:	7c12      	ldrb	r2, [r2, #16]
 80032f8:	701a      	strb	r2, [r3, #0]
	pixy.m_buf[3] = pixy.m_length;
 80032fa:	4b09      	ldr	r3, [pc, #36]	; (8003320 <sendPacket+0x48>)
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	3303      	adds	r3, #3
 8003300:	4a07      	ldr	r2, [pc, #28]	; (8003320 <sendPacket+0x48>)
 8003302:	7c52      	ldrb	r2, [r2, #17]
 8003304:	701a      	strb	r2, [r3, #0]
	// send whole thing -- header and data in one call

	return send(pixy.m_buf, pixy.m_length + PIXY_SEND_HEADER_SIZE);
 8003306:	4b06      	ldr	r3, [pc, #24]	; (8003320 <sendPacket+0x48>)
 8003308:	689a      	ldr	r2, [r3, #8]
 800330a:	4b05      	ldr	r3, [pc, #20]	; (8003320 <sendPacket+0x48>)
 800330c:	7c5b      	ldrb	r3, [r3, #17]
 800330e:	3304      	adds	r3, #4
 8003310:	b2db      	uxtb	r3, r3
 8003312:	4619      	mov	r1, r3
 8003314:	4610      	mov	r0, r2
 8003316:	f000 fb17 	bl	8003948 <send>
 800331a:	4603      	mov	r3, r0
}
 800331c:	4618      	mov	r0, r3
 800331e:	bd80      	pop	{r7, pc}
 8003320:	20000138 	.word	0x20000138

08003324 <pixy2_getVersion>:

int8_t pixy2_getVersion() {
 8003324:	b580      	push	{r7, lr}
 8003326:	af00      	add	r7, sp, #0
	pixy.m_length = 0;
 8003328:	4b11      	ldr	r3, [pc, #68]	; (8003370 <pixy2_getVersion+0x4c>)
 800332a:	2200      	movs	r2, #0
 800332c:	745a      	strb	r2, [r3, #17]
	pixy.m_type = PIXY_TYPE_REQUEST_VERSION;
 800332e:	4b10      	ldr	r3, [pc, #64]	; (8003370 <pixy2_getVersion+0x4c>)
 8003330:	220e      	movs	r2, #14
 8003332:	741a      	strb	r2, [r3, #16]
	sendPacket();
 8003334:	f7ff ffd0 	bl	80032d8 <sendPacket>

	if (recvPacket() == 0) {
 8003338:	f7ff ff4e 	bl	80031d8 <recvPacket>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d112      	bne.n	8003368 <pixy2_getVersion+0x44>
		if (pixy.m_type == PIXY_TYPE_RESPONSE_VERSION) {
 8003342:	4b0b      	ldr	r3, [pc, #44]	; (8003370 <pixy2_getVersion+0x4c>)
 8003344:	7c1b      	ldrb	r3, [r3, #16]
 8003346:	2b0f      	cmp	r3, #15
 8003348:	d107      	bne.n	800335a <pixy2_getVersion+0x36>
			pixy.version = (Version*) pixy.m_buf;
 800334a:	4b09      	ldr	r3, [pc, #36]	; (8003370 <pixy2_getVersion+0x4c>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	4a08      	ldr	r2, [pc, #32]	; (8003370 <pixy2_getVersion+0x4c>)
 8003350:	6013      	str	r3, [r2, #0]
			return pixy.m_length;
 8003352:	4b07      	ldr	r3, [pc, #28]	; (8003370 <pixy2_getVersion+0x4c>)
 8003354:	7c5b      	ldrb	r3, [r3, #17]
 8003356:	b25b      	sxtb	r3, r3
 8003358:	e008      	b.n	800336c <pixy2_getVersion+0x48>
		} else if (pixy.m_type == PIXY_TYPE_RESPONSE_ERROR)
 800335a:	4b05      	ldr	r3, [pc, #20]	; (8003370 <pixy2_getVersion+0x4c>)
 800335c:	7c1b      	ldrb	r3, [r3, #16]
 800335e:	2b03      	cmp	r3, #3
 8003360:	d102      	bne.n	8003368 <pixy2_getVersion+0x44>
			return PIXY_RESULT_BUSY;
 8003362:	f06f 0301 	mvn.w	r3, #1
 8003366:	e001      	b.n	800336c <pixy2_getVersion+0x48>
	}
	return PIXY_RESULT_ERROR;  // some kind of bitstream error
 8003368:	f04f 33ff 	mov.w	r3, #4294967295
}
 800336c:	4618      	mov	r0, r3
 800336e:	bd80      	pop	{r7, pc}
 8003370:	20000138 	.word	0x20000138

08003374 <pixy2_getResolution>:

int8_t pixy2_getResolution() {
 8003374:	b580      	push	{r7, lr}
 8003376:	af00      	add	r7, sp, #0
	pixy.m_length = 1;
 8003378:	4b13      	ldr	r3, [pc, #76]	; (80033c8 <pixy2_getResolution+0x54>)
 800337a:	2201      	movs	r2, #1
 800337c:	745a      	strb	r2, [r3, #17]
	pixy.m_bufPayload[0] = 0; // for future types of queries
 800337e:	4b12      	ldr	r3, [pc, #72]	; (80033c8 <pixy2_getResolution+0x54>)
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	2200      	movs	r2, #0
 8003384:	701a      	strb	r2, [r3, #0]
	pixy.m_type = PIXY_TYPE_REQUEST_RESOLUTION;
 8003386:	4b10      	ldr	r3, [pc, #64]	; (80033c8 <pixy2_getResolution+0x54>)
 8003388:	220c      	movs	r2, #12
 800338a:	741a      	strb	r2, [r3, #16]
	sendPacket();
 800338c:	f7ff ffa4 	bl	80032d8 <sendPacket>
	if (recvPacket() == 0) {
 8003390:	f7ff ff22 	bl	80031d8 <recvPacket>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d112      	bne.n	80033c0 <pixy2_getResolution+0x4c>
		if (pixy.m_type == PIXY_TYPE_RESPONSE_RESOLUTION) {
 800339a:	4b0b      	ldr	r3, [pc, #44]	; (80033c8 <pixy2_getResolution+0x54>)
 800339c:	7c1b      	ldrb	r3, [r3, #16]
 800339e:	2b0d      	cmp	r3, #13
 80033a0:	d10b      	bne.n	80033ba <pixy2_getResolution+0x46>
			pixy.frameWidth = *(uint16_t*)pixy.m_buf;
 80033a2:	4b09      	ldr	r3, [pc, #36]	; (80033c8 <pixy2_getResolution+0x54>)
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	881a      	ldrh	r2, [r3, #0]
 80033a8:	4b07      	ldr	r3, [pc, #28]	; (80033c8 <pixy2_getResolution+0x54>)
 80033aa:	809a      	strh	r2, [r3, #4]
			pixy.frameHeight = *(uint16_t*) (pixy.m_buf + sizeof(uint16_t));
 80033ac:	4b06      	ldr	r3, [pc, #24]	; (80033c8 <pixy2_getResolution+0x54>)
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	885a      	ldrh	r2, [r3, #2]
 80033b2:	4b05      	ldr	r3, [pc, #20]	; (80033c8 <pixy2_getResolution+0x54>)
 80033b4:	80da      	strh	r2, [r3, #6]
			return PIXY_RESULT_OK; // success
 80033b6:	2300      	movs	r3, #0
 80033b8:	e004      	b.n	80033c4 <pixy2_getResolution+0x50>
		} else
			return PIXY_RESULT_ERROR;
 80033ba:	f04f 33ff 	mov.w	r3, #4294967295
 80033be:	e001      	b.n	80033c4 <pixy2_getResolution+0x50>
	} else
		return PIXY_RESULT_ERROR;  // some kind of bitstream error
 80033c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	20000138 	.word	0x20000138

080033cc <pixy2_setServos>:

int8_t pixy2_setServos(uint16_t s0, uint16_t s1)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	4603      	mov	r3, r0
 80033d4:	460a      	mov	r2, r1
 80033d6:	80fb      	strh	r3, [r7, #6]
 80033d8:	4613      	mov	r3, r2
 80033da:	80bb      	strh	r3, [r7, #4]
  uint32_t res;

  *(int16_t *)(pixy.m_bufPayload + 0) = s0;
 80033dc:	4b16      	ldr	r3, [pc, #88]	; (8003438 <pixy2_setServos+0x6c>)
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80033e4:	801a      	strh	r2, [r3, #0]
  *(int16_t *)(pixy.m_bufPayload + 2) = s1;
 80033e6:	4b14      	ldr	r3, [pc, #80]	; (8003438 <pixy2_setServos+0x6c>)
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	3302      	adds	r3, #2
 80033ec:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80033f0:	801a      	strh	r2, [r3, #0]
  pixy.m_length = 4;
 80033f2:	4b11      	ldr	r3, [pc, #68]	; (8003438 <pixy2_setServos+0x6c>)
 80033f4:	2204      	movs	r2, #4
 80033f6:	745a      	strb	r2, [r3, #17]
  pixy.m_type = PIXY_TYPE_REQUEST_SERVO;
 80033f8:	4b0f      	ldr	r3, [pc, #60]	; (8003438 <pixy2_setServos+0x6c>)
 80033fa:	2212      	movs	r2, #18
 80033fc:	741a      	strb	r2, [r3, #16]
  sendPacket();
 80033fe:	f7ff ff6b 	bl	80032d8 <sendPacket>
  if (recvPacket()==0 && pixy.m_type==PIXY_TYPE_RESPONSE_RESULT && pixy.m_length==4)
 8003402:	f7ff fee9 	bl	80031d8 <recvPacket>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d10e      	bne.n	800342a <pixy2_setServos+0x5e>
 800340c:	4b0a      	ldr	r3, [pc, #40]	; (8003438 <pixy2_setServos+0x6c>)
 800340e:	7c1b      	ldrb	r3, [r3, #16]
 8003410:	2b01      	cmp	r3, #1
 8003412:	d10a      	bne.n	800342a <pixy2_setServos+0x5e>
 8003414:	4b08      	ldr	r3, [pc, #32]	; (8003438 <pixy2_setServos+0x6c>)
 8003416:	7c5b      	ldrb	r3, [r3, #17]
 8003418:	2b04      	cmp	r3, #4
 800341a:	d106      	bne.n	800342a <pixy2_setServos+0x5e>
  {
    res = *(uint32_t *)pixy.m_buf;
 800341c:	4b06      	ldr	r3, [pc, #24]	; (8003438 <pixy2_setServos+0x6c>)
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	60fb      	str	r3, [r7, #12]
    return (int8_t)res;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	b25b      	sxtb	r3, r3
 8003428:	e001      	b.n	800342e <pixy2_setServos+0x62>
  }
  else
      return PIXY_RESULT_ERROR;  // some kind of bitstream error
 800342a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800342e:	4618      	mov	r0, r3
 8003430:	3710      	adds	r7, #16
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	20000138 	.word	0x20000138

0800343c <pixy2_getBlocks>:

int8_t pixy2_getBlocks(bool wait, uint8_t sigmap, uint8_t maxBlocks) {
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	4603      	mov	r3, r0
 8003444:	71fb      	strb	r3, [r7, #7]
 8003446:	460b      	mov	r3, r1
 8003448:	71bb      	strb	r3, [r7, #6]
 800344a:	4613      	mov	r3, r2
 800344c:	717b      	strb	r3, [r7, #5]
	blocks = NULL;
 800344e:	4b30      	ldr	r3, [pc, #192]	; (8003510 <pixy2_getBlocks+0xd4>)
 8003450:	2200      	movs	r2, #0
 8003452:	601a      	str	r2, [r3, #0]
	numBlocks = 0;
 8003454:	4b2f      	ldr	r3, [pc, #188]	; (8003514 <pixy2_getBlocks+0xd8>)
 8003456:	2200      	movs	r2, #0
 8003458:	701a      	strb	r2, [r3, #0]

	while (1) {
		// fill in request data
		pixy.m_bufPayload[0] = sigmap;
 800345a:	4b2f      	ldr	r3, [pc, #188]	; (8003518 <pixy2_getBlocks+0xdc>)
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	79ba      	ldrb	r2, [r7, #6]
 8003460:	701a      	strb	r2, [r3, #0]
		pixy.m_bufPayload[1] = maxBlocks;
 8003462:	4b2d      	ldr	r3, [pc, #180]	; (8003518 <pixy2_getBlocks+0xdc>)
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	3301      	adds	r3, #1
 8003468:	797a      	ldrb	r2, [r7, #5]
 800346a:	701a      	strb	r2, [r3, #0]
		pixy.m_length = 2;
 800346c:	4b2a      	ldr	r3, [pc, #168]	; (8003518 <pixy2_getBlocks+0xdc>)
 800346e:	2202      	movs	r2, #2
 8003470:	745a      	strb	r2, [r3, #17]
		pixy.m_type = CCC_REQUEST_BLOCKS;
 8003472:	4b29      	ldr	r3, [pc, #164]	; (8003518 <pixy2_getBlocks+0xdc>)
 8003474:	2220      	movs	r2, #32
 8003476:	741a      	strb	r2, [r3, #16]

		// send request
		sendPacket();
 8003478:	f7ff ff2e 	bl	80032d8 <sendPacket>
		if (recvPacket() == 0) {
 800347c:	f7ff feac 	bl	80031d8 <recvPacket>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d131      	bne.n	80034ea <pixy2_getBlocks+0xae>
			if (pixy.m_type == CCC_RESPONSE_BLOCKS) {
 8003486:	4b24      	ldr	r3, [pc, #144]	; (8003518 <pixy2_getBlocks+0xdc>)
 8003488:	7c1b      	ldrb	r3, [r3, #16]
 800348a:	2b21      	cmp	r3, #33	; 0x21
 800348c:	d111      	bne.n	80034b2 <pixy2_getBlocks+0x76>
				blocks = (Block*) pixy.m_buf;
 800348e:	4b22      	ldr	r3, [pc, #136]	; (8003518 <pixy2_getBlocks+0xdc>)
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	4a1f      	ldr	r2, [pc, #124]	; (8003510 <pixy2_getBlocks+0xd4>)
 8003494:	6013      	str	r3, [r2, #0]
				numBlocks = pixy.m_length / sizeof(Block);
 8003496:	4b20      	ldr	r3, [pc, #128]	; (8003518 <pixy2_getBlocks+0xdc>)
 8003498:	7c5b      	ldrb	r3, [r3, #17]
 800349a:	085b      	lsrs	r3, r3, #1
 800349c:	4a1f      	ldr	r2, [pc, #124]	; (800351c <pixy2_getBlocks+0xe0>)
 800349e:	fba2 2303 	umull	r2, r3, r2, r3
 80034a2:	089b      	lsrs	r3, r3, #2
 80034a4:	b2da      	uxtb	r2, r3
 80034a6:	4b1b      	ldr	r3, [pc, #108]	; (8003514 <pixy2_getBlocks+0xd8>)
 80034a8:	701a      	strb	r2, [r3, #0]

				return numBlocks;
 80034aa:	4b1a      	ldr	r3, [pc, #104]	; (8003514 <pixy2_getBlocks+0xd8>)
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	b25b      	sxtb	r3, r3
 80034b0:	e029      	b.n	8003506 <pixy2_getBlocks+0xca>
			}
			// deal with busy and program changing states from Pixy (we'll wait)
			else if (pixy.m_type == PIXY_TYPE_RESPONSE_ERROR) {
 80034b2:	4b19      	ldr	r3, [pc, #100]	; (8003518 <pixy2_getBlocks+0xdc>)
 80034b4:	7c1b      	ldrb	r3, [r3, #16]
 80034b6:	2b03      	cmp	r3, #3
 80034b8:	d11a      	bne.n	80034f0 <pixy2_getBlocks+0xb4>
				if ((int8_t) pixy.m_buf[0] == PIXY_RESULT_BUSY) {
 80034ba:	4b17      	ldr	r3, [pc, #92]	; (8003518 <pixy2_getBlocks+0xdc>)
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	2bfe      	cmp	r3, #254	; 0xfe
 80034c2:	d108      	bne.n	80034d6 <pixy2_getBlocks+0x9a>
					if (!wait)
 80034c4:	79fb      	ldrb	r3, [r7, #7]
 80034c6:	f083 0301 	eor.w	r3, r3, #1
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d00f      	beq.n	80034f0 <pixy2_getBlocks+0xb4>
						return PIXY_RESULT_BUSY; // new data not available yet
 80034d0:	f06f 0301 	mvn.w	r3, #1
 80034d4:	e017      	b.n	8003506 <pixy2_getBlocks+0xca>
				} else if ((int8_t) pixy.m_buf[0] != PIXY_RESULT_PROG_CHANGING)
 80034d6:	4b10      	ldr	r3, [pc, #64]	; (8003518 <pixy2_getBlocks+0xdc>)
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	2bfa      	cmp	r3, #250	; 0xfa
 80034de:	d007      	beq.n	80034f0 <pixy2_getBlocks+0xb4>
					return pixy.m_buf[0];
 80034e0:	4b0d      	ldr	r3, [pc, #52]	; (8003518 <pixy2_getBlocks+0xdc>)
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	b25b      	sxtb	r3, r3
 80034e8:	e00d      	b.n	8003506 <pixy2_getBlocks+0xca>
			}
		} else
			return PIXY_RESULT_ERROR;  // some kind of bitstream error
 80034ea:	f04f 33ff 	mov.w	r3, #4294967295
 80034ee:	e00a      	b.n	8003506 <pixy2_getBlocks+0xca>

		// If we're waiting for frame data, don't thrash Pixy with requests.
		// We can give up half a millisecond of latency (worst case)

		for (int i = 0; i < 1800 * 500; i++)
 80034f0:	2300      	movs	r3, #0
 80034f2:	60fb      	str	r3, [r7, #12]
 80034f4:	e002      	b.n	80034fc <pixy2_getBlocks+0xc0>
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	3301      	adds	r3, #1
 80034fa:	60fb      	str	r3, [r7, #12]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	4a08      	ldr	r2, [pc, #32]	; (8003520 <pixy2_getBlocks+0xe4>)
 8003500:	4293      	cmp	r3, r2
 8003502:	ddf8      	ble.n	80034f6 <pixy2_getBlocks+0xba>
		pixy.m_bufPayload[0] = sigmap;
 8003504:	e7a9      	b.n	800345a <pixy2_getBlocks+0x1e>
			;
	}
}
 8003506:	4618      	mov	r0, r3
 8003508:	3710      	adds	r7, #16
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	20000134 	.word	0x20000134
 8003514:	20000130 	.word	0x20000130
 8003518:	20000138 	.word	0x20000138
 800351c:	92492493 	.word	0x92492493
 8003520:	000dbb9f 	.word	0x000dbb9f

08003524 <pixy2_init>:

int8_t pixy2_init(SPI_HandleTypeDef *hspi, GPIO_TypeDef *port, uint16_t cs_pin) {
 8003524:	b580      	push	{r7, lr}
 8003526:	b086      	sub	sp, #24
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	4613      	mov	r3, r2
 8003530:	80fb      	strh	r3, [r7, #6]

	pixy.m_buf = (uint8_t*) malloc(PIXY_BUFFERSIZE);
 8003532:	f44f 7082 	mov.w	r0, #260	; 0x104
 8003536:	f000 fa67 	bl	8003a08 <malloc>
 800353a:	4603      	mov	r3, r0
 800353c:	461a      	mov	r2, r3
 800353e:	4b22      	ldr	r3, [pc, #136]	; (80035c8 <pixy2_init+0xa4>)
 8003540:	609a      	str	r2, [r3, #8]
	pixy.m_bufPayload = pixy.m_buf + PIXY_SEND_HEADER_SIZE;
 8003542:	4b21      	ldr	r3, [pc, #132]	; (80035c8 <pixy2_init+0xa4>)
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	3304      	adds	r3, #4
 8003548:	4a1f      	ldr	r2, [pc, #124]	; (80035c8 <pixy2_init+0xa4>)
 800354a:	60d3      	str	r3, [r2, #12]
	pixy.m_cs=false;
 800354c:	4b1e      	ldr	r3, [pc, #120]	; (80035c8 <pixy2_init+0xa4>)
 800354e:	2200      	movs	r2, #0
 8003550:	749a      	strb	r2, [r3, #18]
	pixy.version=NULL;
 8003552:	4b1d      	ldr	r3, [pc, #116]	; (80035c8 <pixy2_init+0xa4>)
 8003554:	2200      	movs	r2, #0
 8003556:	601a      	str	r2, [r3, #0]
	pixy.frameWidth = 0;
 8003558:	4b1b      	ldr	r3, [pc, #108]	; (80035c8 <pixy2_init+0xa4>)
 800355a:	2200      	movs	r2, #0
 800355c:	809a      	strh	r2, [r3, #4]
	pixy.frameHeight = 0;
 800355e:	4b1a      	ldr	r3, [pc, #104]	; (80035c8 <pixy2_init+0xa4>)
 8003560:	2200      	movs	r2, #0
 8003562:	80da      	strh	r2, [r3, #6]
	uint32_t t0;
	int8_t res;

	res = open(hspi, port, cs_pin);
 8003564:	88fb      	ldrh	r3, [r7, #6]
 8003566:	461a      	mov	r2, r3
 8003568:	68b9      	ldr	r1, [r7, #8]
 800356a:	68f8      	ldr	r0, [r7, #12]
 800356c:	f000 f97e 	bl	800386c <open>
 8003570:	4603      	mov	r3, r0
 8003572:	75fb      	strb	r3, [r7, #23]
	if (res < 0)
 8003574:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003578:	2b00      	cmp	r3, #0
 800357a:	da02      	bge.n	8003582 <pixy2_init+0x5e>
		return res;
 800357c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003580:	e01d      	b.n	80035be <pixy2_init+0x9a>

	// wait for pixy to be ready -- that is, Pixy takes a second or 2 boot up
	// getVersion is an effective "ping".  We timeout after 5s.

	for (t0 = HAL_GetTick(); HAL_GetTick() - t0 < 5000;) {
 8003582:	f7fd fc9d 	bl	8000ec0 <HAL_GetTick>
 8003586:	6138      	str	r0, [r7, #16]
 8003588:	e00e      	b.n	80035a8 <pixy2_init+0x84>
		if (pixy2_getVersion() >= 0) // successful version get -> pixy is ready
 800358a:	f7ff fecb 	bl	8003324 <pixy2_getVersion>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	db06      	blt.n	80035a2 <pixy2_init+0x7e>
				{
			printf("getVersion OK\r\n");
 8003594:	480d      	ldr	r0, [pc, #52]	; (80035cc <pixy2_init+0xa8>)
 8003596:	f000 fbad 	bl	8003cf4 <puts>
			pixy2_getResolution(); // get resolution so we have it
 800359a:	f7ff feeb 	bl	8003374 <pixy2_getResolution>
			return PIXY_RESULT_OK;
 800359e:	2300      	movs	r3, #0
 80035a0:	e00d      	b.n	80035be <pixy2_init+0x9a>
		}
		HAL_Delay(5);
 80035a2:	2005      	movs	r0, #5
 80035a4:	f7fd fc98 	bl	8000ed8 <HAL_Delay>
	for (t0 = HAL_GetTick(); HAL_GetTick() - t0 < 5000;) {
 80035a8:	f7fd fc8a 	bl	8000ec0 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	f241 3287 	movw	r2, #4999	; 0x1387
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d9e7      	bls.n	800358a <pixy2_init+0x66>
	}
	// timeout
	return PIXY_RESULT_TIMEOUT;
 80035ba:	f06f 0303 	mvn.w	r3, #3
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3718      	adds	r7, #24
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	20000138 	.word	0x20000138
 80035cc:	08004e2c 	.word	0x08004e2c

080035d0 <pixy2_printVersion>:

void pixy2_printVersion() {
 80035d0:	b5b0      	push	{r4, r5, r7, lr}
 80035d2:	b094      	sub	sp, #80	; 0x50
 80035d4:	af04      	add	r7, sp, #16
	char buf[64];
	sprintf(buf, "hardware ver: 0x%x firmware ver: %d.%d.%d %s\r\n",
			pixy.version->hardware, pixy.version->firmwareMajor, pixy.version->firmwareMinor,
 80035d6:	4b12      	ldr	r3, [pc, #72]	; (8003620 <pixy2_printVersion+0x50>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	881b      	ldrh	r3, [r3, #0]
	sprintf(buf, "hardware ver: 0x%x firmware ver: %d.%d.%d %s\r\n",
 80035dc:	461c      	mov	r4, r3
			pixy.version->hardware, pixy.version->firmwareMajor, pixy.version->firmwareMinor,
 80035de:	4b10      	ldr	r3, [pc, #64]	; (8003620 <pixy2_printVersion+0x50>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	789b      	ldrb	r3, [r3, #2]
	sprintf(buf, "hardware ver: 0x%x firmware ver: %d.%d.%d %s\r\n",
 80035e4:	461d      	mov	r5, r3
			pixy.version->hardware, pixy.version->firmwareMajor, pixy.version->firmwareMinor,
 80035e6:	4b0e      	ldr	r3, [pc, #56]	; (8003620 <pixy2_printVersion+0x50>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	78db      	ldrb	r3, [r3, #3]
	sprintf(buf, "hardware ver: 0x%x firmware ver: %d.%d.%d %s\r\n",
 80035ec:	461a      	mov	r2, r3
			pixy.version->firmwareBuild, pixy.version->firmwareType);
 80035ee:	4b0c      	ldr	r3, [pc, #48]	; (8003620 <pixy2_printVersion+0x50>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	889b      	ldrh	r3, [r3, #4]
	sprintf(buf, "hardware ver: 0x%x firmware ver: %d.%d.%d %s\r\n",
 80035f4:	4619      	mov	r1, r3
			pixy.version->firmwareBuild, pixy.version->firmwareType);
 80035f6:	4b0a      	ldr	r3, [pc, #40]	; (8003620 <pixy2_printVersion+0x50>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	3306      	adds	r3, #6
	sprintf(buf, "hardware ver: 0x%x firmware ver: %d.%d.%d %s\r\n",
 80035fc:	4638      	mov	r0, r7
 80035fe:	9302      	str	r3, [sp, #8]
 8003600:	9101      	str	r1, [sp, #4]
 8003602:	9200      	str	r2, [sp, #0]
 8003604:	462b      	mov	r3, r5
 8003606:	4622      	mov	r2, r4
 8003608:	4906      	ldr	r1, [pc, #24]	; (8003624 <pixy2_printVersion+0x54>)
 800360a:	f000 fb8b 	bl	8003d24 <siprintf>
	printf(buf);
 800360e:	463b      	mov	r3, r7
 8003610:	4618      	mov	r0, r3
 8003612:	f000 fae9 	bl	8003be8 <iprintf>
}
 8003616:	bf00      	nop
 8003618:	3740      	adds	r7, #64	; 0x40
 800361a:	46bd      	mov	sp, r7
 800361c:	bdb0      	pop	{r4, r5, r7, pc}
 800361e:	bf00      	nop
 8003620:	20000138 	.word	0x20000138
 8003624:	08004e3c 	.word	0x08004e3c

08003628 <pixy2_printBlock>:

void pixy2_printBlock(int n) {
 8003628:	b5f0      	push	{r4, r5, r6, r7, lr}
 800362a:	b0b3      	sub	sp, #204	; 0xcc
 800362c:	af08      	add	r7, sp, #32
 800362e:	60f8      	str	r0, [r7, #12]

	int i, j;
	char buf[128], sig[6], d;
	bool flag;

	if ((blocks + n)->m_signature > CCC_MAX_SIGNATURE) // color code! (CC)
 8003630:	4b8b      	ldr	r3, [pc, #556]	; (8003860 <pixy2_printBlock+0x238>)
 8003632:	6819      	ldr	r1, [r3, #0]
 8003634:	68fa      	ldr	r2, [r7, #12]
 8003636:	4613      	mov	r3, r2
 8003638:	00db      	lsls	r3, r3, #3
 800363a:	1a9b      	subs	r3, r3, r2
 800363c:	005b      	lsls	r3, r3, #1
 800363e:	440b      	add	r3, r1
 8003640:	881b      	ldrh	r3, [r3, #0]
 8003642:	2b07      	cmp	r3, #7
 8003644:	f240 80b1 	bls.w	80037aa <pixy2_printBlock+0x182>
	{
		// convert signature number to an octal string
		for (i = 12, j = 0, flag = false; i >= 0; i -= 3) {
 8003648:	230c      	movs	r3, #12
 800364a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800364e:	2300      	movs	r3, #0
 8003650:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003654:	2300      	movs	r3, #0
 8003656:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 800365a:	e038      	b.n	80036ce <pixy2_printBlock+0xa6>
			d = (((blocks + n)->m_signature) >> i) & 0x07;
 800365c:	4b80      	ldr	r3, [pc, #512]	; (8003860 <pixy2_printBlock+0x238>)
 800365e:	6819      	ldr	r1, [r3, #0]
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	4613      	mov	r3, r2
 8003664:	00db      	lsls	r3, r3, #3
 8003666:	1a9b      	subs	r3, r3, r2
 8003668:	005b      	lsls	r3, r3, #1
 800366a:	440b      	add	r3, r1
 800366c:	881b      	ldrh	r3, [r3, #0]
 800366e:	461a      	mov	r2, r3
 8003670:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003674:	fa42 f303 	asr.w	r3, r2, r3
 8003678:	b2db      	uxtb	r3, r3
 800367a:	f003 0307 	and.w	r3, r3, #7
 800367e:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
			if (d > 0 && !flag)
 8003682:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8003686:	2b00      	cmp	r3, #0
 8003688:	d009      	beq.n	800369e <pixy2_printBlock+0x76>
 800368a:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800368e:	f083 0301 	eor.w	r3, r3, #1
 8003692:	b2db      	uxtb	r3, r3
 8003694:	2b00      	cmp	r3, #0
 8003696:	d002      	beq.n	800369e <pixy2_printBlock+0x76>
				flag = true;
 8003698:	2301      	movs	r3, #1
 800369a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			if (flag)
 800369e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00e      	beq.n	80036c4 <pixy2_printBlock+0x9c>
				sig[j++] = d + '0';
 80036a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80036aa:	1c5a      	adds	r2, r3, #1
 80036ac:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 80036b0:	f897 209e 	ldrb.w	r2, [r7, #158]	; 0x9e
 80036b4:	3230      	adds	r2, #48	; 0x30
 80036b6:	b2d2      	uxtb	r2, r2
 80036b8:	33a0      	adds	r3, #160	; 0xa0
 80036ba:	f107 0108 	add.w	r1, r7, #8
 80036be:	440b      	add	r3, r1
 80036c0:	f803 2c94 	strb.w	r2, [r3, #-148]
		for (i = 12, j = 0, flag = false; i >= 0; i -= 3) {
 80036c4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80036c8:	3b03      	subs	r3, #3
 80036ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80036ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	dac2      	bge.n	800365c <pixy2_printBlock+0x34>
		}
		sig[j] = '\0';
 80036d6:	f107 0214 	add.w	r2, r7, #20
 80036da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80036de:	4413      	add	r3, r2
 80036e0:	2200      	movs	r2, #0
 80036e2:	701a      	strb	r2, [r3, #0]
		sprintf(buf,
				"CC block sig: %s (%d decimal) x: %d y: %d width: %d height: %d angle: %d index: %d age: %d\r\n",
				sig, (blocks + n)->m_signature, (blocks + n)->m_x,
 80036e4:	4b5e      	ldr	r3, [pc, #376]	; (8003860 <pixy2_printBlock+0x238>)
 80036e6:	6819      	ldr	r1, [r3, #0]
 80036e8:	68fa      	ldr	r2, [r7, #12]
 80036ea:	4613      	mov	r3, r2
 80036ec:	00db      	lsls	r3, r3, #3
 80036ee:	1a9b      	subs	r3, r3, r2
 80036f0:	005b      	lsls	r3, r3, #1
 80036f2:	440b      	add	r3, r1
 80036f4:	881b      	ldrh	r3, [r3, #0]
		sprintf(buf,
 80036f6:	469c      	mov	ip, r3
				sig, (blocks + n)->m_signature, (blocks + n)->m_x,
 80036f8:	4b59      	ldr	r3, [pc, #356]	; (8003860 <pixy2_printBlock+0x238>)
 80036fa:	6819      	ldr	r1, [r3, #0]
 80036fc:	68fa      	ldr	r2, [r7, #12]
 80036fe:	4613      	mov	r3, r2
 8003700:	00db      	lsls	r3, r3, #3
 8003702:	1a9b      	subs	r3, r3, r2
 8003704:	005b      	lsls	r3, r3, #1
 8003706:	440b      	add	r3, r1
 8003708:	885b      	ldrh	r3, [r3, #2]
		sprintf(buf,
 800370a:	461c      	mov	r4, r3
				(blocks + n)->m_y, (blocks + n)->m_width,
 800370c:	4b54      	ldr	r3, [pc, #336]	; (8003860 <pixy2_printBlock+0x238>)
 800370e:	6819      	ldr	r1, [r3, #0]
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	4613      	mov	r3, r2
 8003714:	00db      	lsls	r3, r3, #3
 8003716:	1a9b      	subs	r3, r3, r2
 8003718:	005b      	lsls	r3, r3, #1
 800371a:	440b      	add	r3, r1
 800371c:	889b      	ldrh	r3, [r3, #4]
		sprintf(buf,
 800371e:	461d      	mov	r5, r3
				(blocks + n)->m_y, (blocks + n)->m_width,
 8003720:	4b4f      	ldr	r3, [pc, #316]	; (8003860 <pixy2_printBlock+0x238>)
 8003722:	6819      	ldr	r1, [r3, #0]
 8003724:	68fa      	ldr	r2, [r7, #12]
 8003726:	4613      	mov	r3, r2
 8003728:	00db      	lsls	r3, r3, #3
 800372a:	1a9b      	subs	r3, r3, r2
 800372c:	005b      	lsls	r3, r3, #1
 800372e:	440b      	add	r3, r1
 8003730:	88db      	ldrh	r3, [r3, #6]
		sprintf(buf,
 8003732:	461e      	mov	r6, r3
				(blocks + n)->m_height, (blocks + n)->m_angle,
 8003734:	4b4a      	ldr	r3, [pc, #296]	; (8003860 <pixy2_printBlock+0x238>)
 8003736:	6819      	ldr	r1, [r3, #0]
 8003738:	68fa      	ldr	r2, [r7, #12]
 800373a:	4613      	mov	r3, r2
 800373c:	00db      	lsls	r3, r3, #3
 800373e:	1a9b      	subs	r3, r3, r2
 8003740:	005b      	lsls	r3, r3, #1
 8003742:	440b      	add	r3, r1
 8003744:	891b      	ldrh	r3, [r3, #8]
		sprintf(buf,
 8003746:	60bb      	str	r3, [r7, #8]
				(blocks + n)->m_height, (blocks + n)->m_angle,
 8003748:	4b45      	ldr	r3, [pc, #276]	; (8003860 <pixy2_printBlock+0x238>)
 800374a:	6819      	ldr	r1, [r3, #0]
 800374c:	68fa      	ldr	r2, [r7, #12]
 800374e:	4613      	mov	r3, r2
 8003750:	00db      	lsls	r3, r3, #3
 8003752:	1a9b      	subs	r3, r3, r2
 8003754:	005b      	lsls	r3, r3, #1
 8003756:	440b      	add	r3, r1
 8003758:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
		sprintf(buf,
 800375c:	607b      	str	r3, [r7, #4]
				(blocks + n)->m_index, (blocks + n)->m_age);
 800375e:	4b40      	ldr	r3, [pc, #256]	; (8003860 <pixy2_printBlock+0x238>)
 8003760:	6819      	ldr	r1, [r3, #0]
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	4613      	mov	r3, r2
 8003766:	00db      	lsls	r3, r3, #3
 8003768:	1a9b      	subs	r3, r3, r2
 800376a:	005b      	lsls	r3, r3, #1
 800376c:	440b      	add	r3, r1
 800376e:	7b1b      	ldrb	r3, [r3, #12]
		sprintf(buf,
 8003770:	603b      	str	r3, [r7, #0]
				(blocks + n)->m_index, (blocks + n)->m_age);
 8003772:	4b3b      	ldr	r3, [pc, #236]	; (8003860 <pixy2_printBlock+0x238>)
 8003774:	6819      	ldr	r1, [r3, #0]
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	4613      	mov	r3, r2
 800377a:	00db      	lsls	r3, r3, #3
 800377c:	1a9b      	subs	r3, r3, r2
 800377e:	005b      	lsls	r3, r3, #1
 8003780:	440b      	add	r3, r1
 8003782:	7b5b      	ldrb	r3, [r3, #13]
		sprintf(buf,
 8003784:	f107 0214 	add.w	r2, r7, #20
 8003788:	f107 001c 	add.w	r0, r7, #28
 800378c:	9306      	str	r3, [sp, #24]
 800378e:	6839      	ldr	r1, [r7, #0]
 8003790:	9105      	str	r1, [sp, #20]
 8003792:	6879      	ldr	r1, [r7, #4]
 8003794:	9104      	str	r1, [sp, #16]
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	9303      	str	r3, [sp, #12]
 800379a:	9602      	str	r6, [sp, #8]
 800379c:	9501      	str	r5, [sp, #4]
 800379e:	9400      	str	r4, [sp, #0]
 80037a0:	4663      	mov	r3, ip
 80037a2:	4930      	ldr	r1, [pc, #192]	; (8003864 <pixy2_printBlock+0x23c>)
 80037a4:	f000 fabe 	bl	8003d24 <siprintf>
 80037a8:	e051      	b.n	800384e <pixy2_printBlock+0x226>
	} else
		// regular block.  Note, angle is always zero, so no need to print

		sprintf(buf,
				"sig: %d x: %d y: %d width: %d height: %d index: %d age: %d\r\n",
				(blocks + n)->m_signature, (blocks + n)->m_x, (blocks + n)->m_y,
 80037aa:	4b2d      	ldr	r3, [pc, #180]	; (8003860 <pixy2_printBlock+0x238>)
 80037ac:	6819      	ldr	r1, [r3, #0]
 80037ae:	68fa      	ldr	r2, [r7, #12]
 80037b0:	4613      	mov	r3, r2
 80037b2:	00db      	lsls	r3, r3, #3
 80037b4:	1a9b      	subs	r3, r3, r2
 80037b6:	005b      	lsls	r3, r3, #1
 80037b8:	440b      	add	r3, r1
 80037ba:	881b      	ldrh	r3, [r3, #0]
		sprintf(buf,
 80037bc:	469c      	mov	ip, r3
				(blocks + n)->m_signature, (blocks + n)->m_x, (blocks + n)->m_y,
 80037be:	4b28      	ldr	r3, [pc, #160]	; (8003860 <pixy2_printBlock+0x238>)
 80037c0:	6819      	ldr	r1, [r3, #0]
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	4613      	mov	r3, r2
 80037c6:	00db      	lsls	r3, r3, #3
 80037c8:	1a9b      	subs	r3, r3, r2
 80037ca:	005b      	lsls	r3, r3, #1
 80037cc:	440b      	add	r3, r1
 80037ce:	885b      	ldrh	r3, [r3, #2]
		sprintf(buf,
 80037d0:	469e      	mov	lr, r3
				(blocks + n)->m_signature, (blocks + n)->m_x, (blocks + n)->m_y,
 80037d2:	4b23      	ldr	r3, [pc, #140]	; (8003860 <pixy2_printBlock+0x238>)
 80037d4:	6819      	ldr	r1, [r3, #0]
 80037d6:	68fa      	ldr	r2, [r7, #12]
 80037d8:	4613      	mov	r3, r2
 80037da:	00db      	lsls	r3, r3, #3
 80037dc:	1a9b      	subs	r3, r3, r2
 80037de:	005b      	lsls	r3, r3, #1
 80037e0:	440b      	add	r3, r1
 80037e2:	889b      	ldrh	r3, [r3, #4]
		sprintf(buf,
 80037e4:	461c      	mov	r4, r3
				(blocks + n)->m_width, (blocks + n)->m_height,
 80037e6:	4b1e      	ldr	r3, [pc, #120]	; (8003860 <pixy2_printBlock+0x238>)
 80037e8:	6819      	ldr	r1, [r3, #0]
 80037ea:	68fa      	ldr	r2, [r7, #12]
 80037ec:	4613      	mov	r3, r2
 80037ee:	00db      	lsls	r3, r3, #3
 80037f0:	1a9b      	subs	r3, r3, r2
 80037f2:	005b      	lsls	r3, r3, #1
 80037f4:	440b      	add	r3, r1
 80037f6:	88db      	ldrh	r3, [r3, #6]
		sprintf(buf,
 80037f8:	461d      	mov	r5, r3
				(blocks + n)->m_width, (blocks + n)->m_height,
 80037fa:	4b19      	ldr	r3, [pc, #100]	; (8003860 <pixy2_printBlock+0x238>)
 80037fc:	6819      	ldr	r1, [r3, #0]
 80037fe:	68fa      	ldr	r2, [r7, #12]
 8003800:	4613      	mov	r3, r2
 8003802:	00db      	lsls	r3, r3, #3
 8003804:	1a9b      	subs	r3, r3, r2
 8003806:	005b      	lsls	r3, r3, #1
 8003808:	440b      	add	r3, r1
 800380a:	891b      	ldrh	r3, [r3, #8]
		sprintf(buf,
 800380c:	461e      	mov	r6, r3
				(blocks + n)->m_index, (blocks + n)->m_age);
 800380e:	4b14      	ldr	r3, [pc, #80]	; (8003860 <pixy2_printBlock+0x238>)
 8003810:	6819      	ldr	r1, [r3, #0]
 8003812:	68fa      	ldr	r2, [r7, #12]
 8003814:	4613      	mov	r3, r2
 8003816:	00db      	lsls	r3, r3, #3
 8003818:	1a9b      	subs	r3, r3, r2
 800381a:	005b      	lsls	r3, r3, #1
 800381c:	440b      	add	r3, r1
 800381e:	7b1b      	ldrb	r3, [r3, #12]
		sprintf(buf,
 8003820:	60bb      	str	r3, [r7, #8]
				(blocks + n)->m_index, (blocks + n)->m_age);
 8003822:	4b0f      	ldr	r3, [pc, #60]	; (8003860 <pixy2_printBlock+0x238>)
 8003824:	6819      	ldr	r1, [r3, #0]
 8003826:	68fa      	ldr	r2, [r7, #12]
 8003828:	4613      	mov	r3, r2
 800382a:	00db      	lsls	r3, r3, #3
 800382c:	1a9b      	subs	r3, r3, r2
 800382e:	005b      	lsls	r3, r3, #1
 8003830:	440b      	add	r3, r1
 8003832:	7b5b      	ldrb	r3, [r3, #13]
		sprintf(buf,
 8003834:	f107 001c 	add.w	r0, r7, #28
 8003838:	9304      	str	r3, [sp, #16]
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	9303      	str	r3, [sp, #12]
 800383e:	9602      	str	r6, [sp, #8]
 8003840:	9501      	str	r5, [sp, #4]
 8003842:	9400      	str	r4, [sp, #0]
 8003844:	4673      	mov	r3, lr
 8003846:	4662      	mov	r2, ip
 8003848:	4907      	ldr	r1, [pc, #28]	; (8003868 <pixy2_printBlock+0x240>)
 800384a:	f000 fa6b 	bl	8003d24 <siprintf>
	printf(buf);
 800384e:	f107 031c 	add.w	r3, r7, #28
 8003852:	4618      	mov	r0, r3
 8003854:	f000 f9c8 	bl	8003be8 <iprintf>
}
 8003858:	bf00      	nop
 800385a:	37ac      	adds	r7, #172	; 0xac
 800385c:	46bd      	mov	sp, r7
 800385e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003860:	20000134 	.word	0x20000134
 8003864:	08004e6c 	.word	0x08004e6c
 8003868:	08004ecc 	.word	0x08004ecc

0800386c <open>:

SPI_HandleTypeDef* Pixy2_SPI;
GPIO_TypeDef* Pixy2_CS_Port;
uint16_t Pixy2_CS_Pin;

int8_t open(SPI_HandleTypeDef* hspi,GPIO_TypeDef* port,uint16_t cs_pin) {
 800386c:	b480      	push	{r7}
 800386e:	b085      	sub	sp, #20
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	4613      	mov	r3, r2
 8003878:	80fb      	strh	r3, [r7, #6]
		Pixy2_CS_Pin = cs_pin; // default slave select pin
 800387a:	4a08      	ldr	r2, [pc, #32]	; (800389c <open+0x30>)
 800387c:	88fb      	ldrh	r3, [r7, #6]
 800387e:	8013      	strh	r3, [r2, #0]
	Pixy2_CS_Port=port;
 8003880:	4a07      	ldr	r2, [pc, #28]	; (80038a0 <open+0x34>)
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	6013      	str	r3, [r2, #0]
	Pixy2_SPI=hspi;
 8003886:	4a07      	ldr	r2, [pc, #28]	; (80038a4 <open+0x38>)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6013      	str	r3, [r2, #0]

	return 0;
 800388c:	2300      	movs	r3, #0
}
 800388e:	4618      	mov	r0, r3
 8003890:	3714      	adds	r7, #20
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	20000154 	.word	0x20000154
 80038a0:	20000150 	.word	0x20000150
 80038a4:	2000014c 	.word	0x2000014c

080038a8 <recv>:

void close() {
}

int16_t recv(uint8_t *buf, uint8_t len, uint16_t *cs) {
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b086      	sub	sp, #24
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	460b      	mov	r3, r1
 80038b2:	607a      	str	r2, [r7, #4]
 80038b4:	72fb      	strb	r3, [r7, #11]
	uint8_t i;
	if (cs)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d002      	beq.n	80038c2 <recv+0x1a>
		*cs = 0;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(Pixy2_CS_Port, Pixy2_CS_Pin, GPIO_PIN_RESET);
 80038c2:	4b1e      	ldr	r3, [pc, #120]	; (800393c <recv+0x94>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a1e      	ldr	r2, [pc, #120]	; (8003940 <recv+0x98>)
 80038c8:	8811      	ldrh	r1, [r2, #0]
 80038ca:	2200      	movs	r2, #0
 80038cc:	4618      	mov	r0, r3
 80038ce:	f7fd fdb9 	bl	8001444 <HAL_GPIO_WritePin>



	for (i = 0; i < len; i++) {
 80038d2:	2300      	movs	r3, #0
 80038d4:	75fb      	strb	r3, [r7, #23]
 80038d6:	e01e      	b.n	8003916 <recv+0x6e>
		uint8_t data;
		HAL_SPI_Receive(Pixy2_SPI, &data, 1, 5000);
 80038d8:	4b1a      	ldr	r3, [pc, #104]	; (8003944 <recv+0x9c>)
 80038da:	6818      	ldr	r0, [r3, #0]
 80038dc:	f107 0116 	add.w	r1, r7, #22
 80038e0:	f241 3388 	movw	r3, #5000	; 0x1388
 80038e4:	2201      	movs	r2, #1
 80038e6:	f7fe fc74 	bl	80021d2 <HAL_SPI_Receive>
		buf[i] = data;
 80038ea:	7dfb      	ldrb	r3, [r7, #23]
 80038ec:	68fa      	ldr	r2, [r7, #12]
 80038ee:	4413      	add	r3, r2
 80038f0:	7dba      	ldrb	r2, [r7, #22]
 80038f2:	701a      	strb	r2, [r3, #0]
		if (cs)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d00a      	beq.n	8003910 <recv+0x68>
			*cs += buf[i];
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	881a      	ldrh	r2, [r3, #0]
 80038fe:	7dfb      	ldrb	r3, [r7, #23]
 8003900:	68f9      	ldr	r1, [r7, #12]
 8003902:	440b      	add	r3, r1
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	b29b      	uxth	r3, r3
 8003908:	4413      	add	r3, r2
 800390a:	b29a      	uxth	r2, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < len; i++) {
 8003910:	7dfb      	ldrb	r3, [r7, #23]
 8003912:	3301      	adds	r3, #1
 8003914:	75fb      	strb	r3, [r7, #23]
 8003916:	7dfa      	ldrb	r2, [r7, #23]
 8003918:	7afb      	ldrb	r3, [r7, #11]
 800391a:	429a      	cmp	r2, r3
 800391c:	d3dc      	bcc.n	80038d8 <recv+0x30>
	}

	HAL_GPIO_WritePin(Pixy2_CS_Port, Pixy2_CS_Pin, GPIO_PIN_SET);
 800391e:	4b07      	ldr	r3, [pc, #28]	; (800393c <recv+0x94>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a07      	ldr	r2, [pc, #28]	; (8003940 <recv+0x98>)
 8003924:	8811      	ldrh	r1, [r2, #0]
 8003926:	2201      	movs	r2, #1
 8003928:	4618      	mov	r0, r3
 800392a:	f7fd fd8b 	bl	8001444 <HAL_GPIO_WritePin>
	return len;
 800392e:	7afb      	ldrb	r3, [r7, #11]
 8003930:	b21b      	sxth	r3, r3
}
 8003932:	4618      	mov	r0, r3
 8003934:	3718      	adds	r7, #24
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	20000150 	.word	0x20000150
 8003940:	20000154 	.word	0x20000154
 8003944:	2000014c 	.word	0x2000014c

08003948 <send>:

int16_t send(uint8_t *buf, uint8_t len) {
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	460b      	mov	r3, r1
 8003952:	70fb      	strb	r3, [r7, #3]

	HAL_GPIO_WritePin(Pixy2_CS_Port, Pixy2_CS_Pin, GPIO_PIN_RESET);
 8003954:	4b14      	ldr	r3, [pc, #80]	; (80039a8 <send+0x60>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a14      	ldr	r2, [pc, #80]	; (80039ac <send+0x64>)
 800395a:	8811      	ldrh	r1, [r2, #0]
 800395c:	2200      	movs	r2, #0
 800395e:	4618      	mov	r0, r3
 8003960:	f7fd fd70 	bl	8001444 <HAL_GPIO_WritePin>


	for (int i = 0; i < len; i++) {
 8003964:	2300      	movs	r3, #0
 8003966:	60fb      	str	r3, [r7, #12]
 8003968:	e00c      	b.n	8003984 <send+0x3c>
		HAL_SPI_Transmit(Pixy2_SPI, (uint8_t*) &buf[i], 1, 5000);
 800396a:	4b11      	ldr	r3, [pc, #68]	; (80039b0 <send+0x68>)
 800396c:	6818      	ldr	r0, [r3, #0]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	18d1      	adds	r1, r2, r3
 8003974:	f241 3388 	movw	r3, #5000	; 0x1388
 8003978:	2201      	movs	r2, #1
 800397a:	f7fe faee 	bl	8001f5a <HAL_SPI_Transmit>
	for (int i = 0; i < len; i++) {
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	3301      	adds	r3, #1
 8003982:	60fb      	str	r3, [r7, #12]
 8003984:	78fb      	ldrb	r3, [r7, #3]
 8003986:	68fa      	ldr	r2, [r7, #12]
 8003988:	429a      	cmp	r2, r3
 800398a:	dbee      	blt.n	800396a <send+0x22>
	}


	HAL_GPIO_WritePin(Pixy2_CS_Port, Pixy2_CS_Pin, GPIO_PIN_SET);
 800398c:	4b06      	ldr	r3, [pc, #24]	; (80039a8 <send+0x60>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a06      	ldr	r2, [pc, #24]	; (80039ac <send+0x64>)
 8003992:	8811      	ldrh	r1, [r2, #0]
 8003994:	2201      	movs	r2, #1
 8003996:	4618      	mov	r0, r3
 8003998:	f7fd fd54 	bl	8001444 <HAL_GPIO_WritePin>

	return len;
 800399c:	78fb      	ldrb	r3, [r7, #3]
 800399e:	b21b      	sxth	r3, r3
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3710      	adds	r7, #16
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	20000150 	.word	0x20000150
 80039ac:	20000154 	.word	0x20000154
 80039b0:	2000014c 	.word	0x2000014c

080039b4 <__errno>:
 80039b4:	4b01      	ldr	r3, [pc, #4]	; (80039bc <__errno+0x8>)
 80039b6:	6818      	ldr	r0, [r3, #0]
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	2000000c 	.word	0x2000000c

080039c0 <__libc_init_array>:
 80039c0:	b570      	push	{r4, r5, r6, lr}
 80039c2:	4d0d      	ldr	r5, [pc, #52]	; (80039f8 <__libc_init_array+0x38>)
 80039c4:	4c0d      	ldr	r4, [pc, #52]	; (80039fc <__libc_init_array+0x3c>)
 80039c6:	1b64      	subs	r4, r4, r5
 80039c8:	10a4      	asrs	r4, r4, #2
 80039ca:	2600      	movs	r6, #0
 80039cc:	42a6      	cmp	r6, r4
 80039ce:	d109      	bne.n	80039e4 <__libc_init_array+0x24>
 80039d0:	4d0b      	ldr	r5, [pc, #44]	; (8003a00 <__libc_init_array+0x40>)
 80039d2:	4c0c      	ldr	r4, [pc, #48]	; (8003a04 <__libc_init_array+0x44>)
 80039d4:	f001 fa08 	bl	8004de8 <_init>
 80039d8:	1b64      	subs	r4, r4, r5
 80039da:	10a4      	asrs	r4, r4, #2
 80039dc:	2600      	movs	r6, #0
 80039de:	42a6      	cmp	r6, r4
 80039e0:	d105      	bne.n	80039ee <__libc_init_array+0x2e>
 80039e2:	bd70      	pop	{r4, r5, r6, pc}
 80039e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80039e8:	4798      	blx	r3
 80039ea:	3601      	adds	r6, #1
 80039ec:	e7ee      	b.n	80039cc <__libc_init_array+0xc>
 80039ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80039f2:	4798      	blx	r3
 80039f4:	3601      	adds	r6, #1
 80039f6:	e7f2      	b.n	80039de <__libc_init_array+0x1e>
 80039f8:	08004fc4 	.word	0x08004fc4
 80039fc:	08004fc4 	.word	0x08004fc4
 8003a00:	08004fc4 	.word	0x08004fc4
 8003a04:	08004fc8 	.word	0x08004fc8

08003a08 <malloc>:
 8003a08:	4b02      	ldr	r3, [pc, #8]	; (8003a14 <malloc+0xc>)
 8003a0a:	4601      	mov	r1, r0
 8003a0c:	6818      	ldr	r0, [r3, #0]
 8003a0e:	f000 b877 	b.w	8003b00 <_malloc_r>
 8003a12:	bf00      	nop
 8003a14:	2000000c 	.word	0x2000000c

08003a18 <memset>:
 8003a18:	4402      	add	r2, r0
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d100      	bne.n	8003a22 <memset+0xa>
 8003a20:	4770      	bx	lr
 8003a22:	f803 1b01 	strb.w	r1, [r3], #1
 8003a26:	e7f9      	b.n	8003a1c <memset+0x4>

08003a28 <_free_r>:
 8003a28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003a2a:	2900      	cmp	r1, #0
 8003a2c:	d044      	beq.n	8003ab8 <_free_r+0x90>
 8003a2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a32:	9001      	str	r0, [sp, #4]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	f1a1 0404 	sub.w	r4, r1, #4
 8003a3a:	bfb8      	it	lt
 8003a3c:	18e4      	addlt	r4, r4, r3
 8003a3e:	f000 fc71 	bl	8004324 <__malloc_lock>
 8003a42:	4a1e      	ldr	r2, [pc, #120]	; (8003abc <_free_r+0x94>)
 8003a44:	9801      	ldr	r0, [sp, #4]
 8003a46:	6813      	ldr	r3, [r2, #0]
 8003a48:	b933      	cbnz	r3, 8003a58 <_free_r+0x30>
 8003a4a:	6063      	str	r3, [r4, #4]
 8003a4c:	6014      	str	r4, [r2, #0]
 8003a4e:	b003      	add	sp, #12
 8003a50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003a54:	f000 bc6c 	b.w	8004330 <__malloc_unlock>
 8003a58:	42a3      	cmp	r3, r4
 8003a5a:	d908      	bls.n	8003a6e <_free_r+0x46>
 8003a5c:	6825      	ldr	r5, [r4, #0]
 8003a5e:	1961      	adds	r1, r4, r5
 8003a60:	428b      	cmp	r3, r1
 8003a62:	bf01      	itttt	eq
 8003a64:	6819      	ldreq	r1, [r3, #0]
 8003a66:	685b      	ldreq	r3, [r3, #4]
 8003a68:	1949      	addeq	r1, r1, r5
 8003a6a:	6021      	streq	r1, [r4, #0]
 8003a6c:	e7ed      	b.n	8003a4a <_free_r+0x22>
 8003a6e:	461a      	mov	r2, r3
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	b10b      	cbz	r3, 8003a78 <_free_r+0x50>
 8003a74:	42a3      	cmp	r3, r4
 8003a76:	d9fa      	bls.n	8003a6e <_free_r+0x46>
 8003a78:	6811      	ldr	r1, [r2, #0]
 8003a7a:	1855      	adds	r5, r2, r1
 8003a7c:	42a5      	cmp	r5, r4
 8003a7e:	d10b      	bne.n	8003a98 <_free_r+0x70>
 8003a80:	6824      	ldr	r4, [r4, #0]
 8003a82:	4421      	add	r1, r4
 8003a84:	1854      	adds	r4, r2, r1
 8003a86:	42a3      	cmp	r3, r4
 8003a88:	6011      	str	r1, [r2, #0]
 8003a8a:	d1e0      	bne.n	8003a4e <_free_r+0x26>
 8003a8c:	681c      	ldr	r4, [r3, #0]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	6053      	str	r3, [r2, #4]
 8003a92:	4421      	add	r1, r4
 8003a94:	6011      	str	r1, [r2, #0]
 8003a96:	e7da      	b.n	8003a4e <_free_r+0x26>
 8003a98:	d902      	bls.n	8003aa0 <_free_r+0x78>
 8003a9a:	230c      	movs	r3, #12
 8003a9c:	6003      	str	r3, [r0, #0]
 8003a9e:	e7d6      	b.n	8003a4e <_free_r+0x26>
 8003aa0:	6825      	ldr	r5, [r4, #0]
 8003aa2:	1961      	adds	r1, r4, r5
 8003aa4:	428b      	cmp	r3, r1
 8003aa6:	bf04      	itt	eq
 8003aa8:	6819      	ldreq	r1, [r3, #0]
 8003aaa:	685b      	ldreq	r3, [r3, #4]
 8003aac:	6063      	str	r3, [r4, #4]
 8003aae:	bf04      	itt	eq
 8003ab0:	1949      	addeq	r1, r1, r5
 8003ab2:	6021      	streq	r1, [r4, #0]
 8003ab4:	6054      	str	r4, [r2, #4]
 8003ab6:	e7ca      	b.n	8003a4e <_free_r+0x26>
 8003ab8:	b003      	add	sp, #12
 8003aba:	bd30      	pop	{r4, r5, pc}
 8003abc:	20000158 	.word	0x20000158

08003ac0 <sbrk_aligned>:
 8003ac0:	b570      	push	{r4, r5, r6, lr}
 8003ac2:	4e0e      	ldr	r6, [pc, #56]	; (8003afc <sbrk_aligned+0x3c>)
 8003ac4:	460c      	mov	r4, r1
 8003ac6:	6831      	ldr	r1, [r6, #0]
 8003ac8:	4605      	mov	r5, r0
 8003aca:	b911      	cbnz	r1, 8003ad2 <sbrk_aligned+0x12>
 8003acc:	f000 f91a 	bl	8003d04 <_sbrk_r>
 8003ad0:	6030      	str	r0, [r6, #0]
 8003ad2:	4621      	mov	r1, r4
 8003ad4:	4628      	mov	r0, r5
 8003ad6:	f000 f915 	bl	8003d04 <_sbrk_r>
 8003ada:	1c43      	adds	r3, r0, #1
 8003adc:	d00a      	beq.n	8003af4 <sbrk_aligned+0x34>
 8003ade:	1cc4      	adds	r4, r0, #3
 8003ae0:	f024 0403 	bic.w	r4, r4, #3
 8003ae4:	42a0      	cmp	r0, r4
 8003ae6:	d007      	beq.n	8003af8 <sbrk_aligned+0x38>
 8003ae8:	1a21      	subs	r1, r4, r0
 8003aea:	4628      	mov	r0, r5
 8003aec:	f000 f90a 	bl	8003d04 <_sbrk_r>
 8003af0:	3001      	adds	r0, #1
 8003af2:	d101      	bne.n	8003af8 <sbrk_aligned+0x38>
 8003af4:	f04f 34ff 	mov.w	r4, #4294967295
 8003af8:	4620      	mov	r0, r4
 8003afa:	bd70      	pop	{r4, r5, r6, pc}
 8003afc:	2000015c 	.word	0x2000015c

08003b00 <_malloc_r>:
 8003b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b04:	1ccd      	adds	r5, r1, #3
 8003b06:	f025 0503 	bic.w	r5, r5, #3
 8003b0a:	3508      	adds	r5, #8
 8003b0c:	2d0c      	cmp	r5, #12
 8003b0e:	bf38      	it	cc
 8003b10:	250c      	movcc	r5, #12
 8003b12:	2d00      	cmp	r5, #0
 8003b14:	4607      	mov	r7, r0
 8003b16:	db01      	blt.n	8003b1c <_malloc_r+0x1c>
 8003b18:	42a9      	cmp	r1, r5
 8003b1a:	d905      	bls.n	8003b28 <_malloc_r+0x28>
 8003b1c:	230c      	movs	r3, #12
 8003b1e:	603b      	str	r3, [r7, #0]
 8003b20:	2600      	movs	r6, #0
 8003b22:	4630      	mov	r0, r6
 8003b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b28:	4e2e      	ldr	r6, [pc, #184]	; (8003be4 <_malloc_r+0xe4>)
 8003b2a:	f000 fbfb 	bl	8004324 <__malloc_lock>
 8003b2e:	6833      	ldr	r3, [r6, #0]
 8003b30:	461c      	mov	r4, r3
 8003b32:	bb34      	cbnz	r4, 8003b82 <_malloc_r+0x82>
 8003b34:	4629      	mov	r1, r5
 8003b36:	4638      	mov	r0, r7
 8003b38:	f7ff ffc2 	bl	8003ac0 <sbrk_aligned>
 8003b3c:	1c43      	adds	r3, r0, #1
 8003b3e:	4604      	mov	r4, r0
 8003b40:	d14d      	bne.n	8003bde <_malloc_r+0xde>
 8003b42:	6834      	ldr	r4, [r6, #0]
 8003b44:	4626      	mov	r6, r4
 8003b46:	2e00      	cmp	r6, #0
 8003b48:	d140      	bne.n	8003bcc <_malloc_r+0xcc>
 8003b4a:	6823      	ldr	r3, [r4, #0]
 8003b4c:	4631      	mov	r1, r6
 8003b4e:	4638      	mov	r0, r7
 8003b50:	eb04 0803 	add.w	r8, r4, r3
 8003b54:	f000 f8d6 	bl	8003d04 <_sbrk_r>
 8003b58:	4580      	cmp	r8, r0
 8003b5a:	d13a      	bne.n	8003bd2 <_malloc_r+0xd2>
 8003b5c:	6821      	ldr	r1, [r4, #0]
 8003b5e:	3503      	adds	r5, #3
 8003b60:	1a6d      	subs	r5, r5, r1
 8003b62:	f025 0503 	bic.w	r5, r5, #3
 8003b66:	3508      	adds	r5, #8
 8003b68:	2d0c      	cmp	r5, #12
 8003b6a:	bf38      	it	cc
 8003b6c:	250c      	movcc	r5, #12
 8003b6e:	4629      	mov	r1, r5
 8003b70:	4638      	mov	r0, r7
 8003b72:	f7ff ffa5 	bl	8003ac0 <sbrk_aligned>
 8003b76:	3001      	adds	r0, #1
 8003b78:	d02b      	beq.n	8003bd2 <_malloc_r+0xd2>
 8003b7a:	6823      	ldr	r3, [r4, #0]
 8003b7c:	442b      	add	r3, r5
 8003b7e:	6023      	str	r3, [r4, #0]
 8003b80:	e00e      	b.n	8003ba0 <_malloc_r+0xa0>
 8003b82:	6822      	ldr	r2, [r4, #0]
 8003b84:	1b52      	subs	r2, r2, r5
 8003b86:	d41e      	bmi.n	8003bc6 <_malloc_r+0xc6>
 8003b88:	2a0b      	cmp	r2, #11
 8003b8a:	d916      	bls.n	8003bba <_malloc_r+0xba>
 8003b8c:	1961      	adds	r1, r4, r5
 8003b8e:	42a3      	cmp	r3, r4
 8003b90:	6025      	str	r5, [r4, #0]
 8003b92:	bf18      	it	ne
 8003b94:	6059      	strne	r1, [r3, #4]
 8003b96:	6863      	ldr	r3, [r4, #4]
 8003b98:	bf08      	it	eq
 8003b9a:	6031      	streq	r1, [r6, #0]
 8003b9c:	5162      	str	r2, [r4, r5]
 8003b9e:	604b      	str	r3, [r1, #4]
 8003ba0:	4638      	mov	r0, r7
 8003ba2:	f104 060b 	add.w	r6, r4, #11
 8003ba6:	f000 fbc3 	bl	8004330 <__malloc_unlock>
 8003baa:	f026 0607 	bic.w	r6, r6, #7
 8003bae:	1d23      	adds	r3, r4, #4
 8003bb0:	1af2      	subs	r2, r6, r3
 8003bb2:	d0b6      	beq.n	8003b22 <_malloc_r+0x22>
 8003bb4:	1b9b      	subs	r3, r3, r6
 8003bb6:	50a3      	str	r3, [r4, r2]
 8003bb8:	e7b3      	b.n	8003b22 <_malloc_r+0x22>
 8003bba:	6862      	ldr	r2, [r4, #4]
 8003bbc:	42a3      	cmp	r3, r4
 8003bbe:	bf0c      	ite	eq
 8003bc0:	6032      	streq	r2, [r6, #0]
 8003bc2:	605a      	strne	r2, [r3, #4]
 8003bc4:	e7ec      	b.n	8003ba0 <_malloc_r+0xa0>
 8003bc6:	4623      	mov	r3, r4
 8003bc8:	6864      	ldr	r4, [r4, #4]
 8003bca:	e7b2      	b.n	8003b32 <_malloc_r+0x32>
 8003bcc:	4634      	mov	r4, r6
 8003bce:	6876      	ldr	r6, [r6, #4]
 8003bd0:	e7b9      	b.n	8003b46 <_malloc_r+0x46>
 8003bd2:	230c      	movs	r3, #12
 8003bd4:	603b      	str	r3, [r7, #0]
 8003bd6:	4638      	mov	r0, r7
 8003bd8:	f000 fbaa 	bl	8004330 <__malloc_unlock>
 8003bdc:	e7a1      	b.n	8003b22 <_malloc_r+0x22>
 8003bde:	6025      	str	r5, [r4, #0]
 8003be0:	e7de      	b.n	8003ba0 <_malloc_r+0xa0>
 8003be2:	bf00      	nop
 8003be4:	20000158 	.word	0x20000158

08003be8 <iprintf>:
 8003be8:	b40f      	push	{r0, r1, r2, r3}
 8003bea:	4b0a      	ldr	r3, [pc, #40]	; (8003c14 <iprintf+0x2c>)
 8003bec:	b513      	push	{r0, r1, r4, lr}
 8003bee:	681c      	ldr	r4, [r3, #0]
 8003bf0:	b124      	cbz	r4, 8003bfc <iprintf+0x14>
 8003bf2:	69a3      	ldr	r3, [r4, #24]
 8003bf4:	b913      	cbnz	r3, 8003bfc <iprintf+0x14>
 8003bf6:	4620      	mov	r0, r4
 8003bf8:	f000 fa8e 	bl	8004118 <__sinit>
 8003bfc:	ab05      	add	r3, sp, #20
 8003bfe:	9a04      	ldr	r2, [sp, #16]
 8003c00:	68a1      	ldr	r1, [r4, #8]
 8003c02:	9301      	str	r3, [sp, #4]
 8003c04:	4620      	mov	r0, r4
 8003c06:	f000 fd1f 	bl	8004648 <_vfiprintf_r>
 8003c0a:	b002      	add	sp, #8
 8003c0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c10:	b004      	add	sp, #16
 8003c12:	4770      	bx	lr
 8003c14:	2000000c 	.word	0x2000000c

08003c18 <_puts_r>:
 8003c18:	b570      	push	{r4, r5, r6, lr}
 8003c1a:	460e      	mov	r6, r1
 8003c1c:	4605      	mov	r5, r0
 8003c1e:	b118      	cbz	r0, 8003c28 <_puts_r+0x10>
 8003c20:	6983      	ldr	r3, [r0, #24]
 8003c22:	b90b      	cbnz	r3, 8003c28 <_puts_r+0x10>
 8003c24:	f000 fa78 	bl	8004118 <__sinit>
 8003c28:	69ab      	ldr	r3, [r5, #24]
 8003c2a:	68ac      	ldr	r4, [r5, #8]
 8003c2c:	b913      	cbnz	r3, 8003c34 <_puts_r+0x1c>
 8003c2e:	4628      	mov	r0, r5
 8003c30:	f000 fa72 	bl	8004118 <__sinit>
 8003c34:	4b2c      	ldr	r3, [pc, #176]	; (8003ce8 <_puts_r+0xd0>)
 8003c36:	429c      	cmp	r4, r3
 8003c38:	d120      	bne.n	8003c7c <_puts_r+0x64>
 8003c3a:	686c      	ldr	r4, [r5, #4]
 8003c3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003c3e:	07db      	lsls	r3, r3, #31
 8003c40:	d405      	bmi.n	8003c4e <_puts_r+0x36>
 8003c42:	89a3      	ldrh	r3, [r4, #12]
 8003c44:	0598      	lsls	r0, r3, #22
 8003c46:	d402      	bmi.n	8003c4e <_puts_r+0x36>
 8003c48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003c4a:	f000 fb03 	bl	8004254 <__retarget_lock_acquire_recursive>
 8003c4e:	89a3      	ldrh	r3, [r4, #12]
 8003c50:	0719      	lsls	r1, r3, #28
 8003c52:	d51d      	bpl.n	8003c90 <_puts_r+0x78>
 8003c54:	6923      	ldr	r3, [r4, #16]
 8003c56:	b1db      	cbz	r3, 8003c90 <_puts_r+0x78>
 8003c58:	3e01      	subs	r6, #1
 8003c5a:	68a3      	ldr	r3, [r4, #8]
 8003c5c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003c60:	3b01      	subs	r3, #1
 8003c62:	60a3      	str	r3, [r4, #8]
 8003c64:	bb39      	cbnz	r1, 8003cb6 <_puts_r+0x9e>
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	da38      	bge.n	8003cdc <_puts_r+0xc4>
 8003c6a:	4622      	mov	r2, r4
 8003c6c:	210a      	movs	r1, #10
 8003c6e:	4628      	mov	r0, r5
 8003c70:	f000 f878 	bl	8003d64 <__swbuf_r>
 8003c74:	3001      	adds	r0, #1
 8003c76:	d011      	beq.n	8003c9c <_puts_r+0x84>
 8003c78:	250a      	movs	r5, #10
 8003c7a:	e011      	b.n	8003ca0 <_puts_r+0x88>
 8003c7c:	4b1b      	ldr	r3, [pc, #108]	; (8003cec <_puts_r+0xd4>)
 8003c7e:	429c      	cmp	r4, r3
 8003c80:	d101      	bne.n	8003c86 <_puts_r+0x6e>
 8003c82:	68ac      	ldr	r4, [r5, #8]
 8003c84:	e7da      	b.n	8003c3c <_puts_r+0x24>
 8003c86:	4b1a      	ldr	r3, [pc, #104]	; (8003cf0 <_puts_r+0xd8>)
 8003c88:	429c      	cmp	r4, r3
 8003c8a:	bf08      	it	eq
 8003c8c:	68ec      	ldreq	r4, [r5, #12]
 8003c8e:	e7d5      	b.n	8003c3c <_puts_r+0x24>
 8003c90:	4621      	mov	r1, r4
 8003c92:	4628      	mov	r0, r5
 8003c94:	f000 f8b8 	bl	8003e08 <__swsetup_r>
 8003c98:	2800      	cmp	r0, #0
 8003c9a:	d0dd      	beq.n	8003c58 <_puts_r+0x40>
 8003c9c:	f04f 35ff 	mov.w	r5, #4294967295
 8003ca0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003ca2:	07da      	lsls	r2, r3, #31
 8003ca4:	d405      	bmi.n	8003cb2 <_puts_r+0x9a>
 8003ca6:	89a3      	ldrh	r3, [r4, #12]
 8003ca8:	059b      	lsls	r3, r3, #22
 8003caa:	d402      	bmi.n	8003cb2 <_puts_r+0x9a>
 8003cac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003cae:	f000 fad2 	bl	8004256 <__retarget_lock_release_recursive>
 8003cb2:	4628      	mov	r0, r5
 8003cb4:	bd70      	pop	{r4, r5, r6, pc}
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	da04      	bge.n	8003cc4 <_puts_r+0xac>
 8003cba:	69a2      	ldr	r2, [r4, #24]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	dc06      	bgt.n	8003cce <_puts_r+0xb6>
 8003cc0:	290a      	cmp	r1, #10
 8003cc2:	d004      	beq.n	8003cce <_puts_r+0xb6>
 8003cc4:	6823      	ldr	r3, [r4, #0]
 8003cc6:	1c5a      	adds	r2, r3, #1
 8003cc8:	6022      	str	r2, [r4, #0]
 8003cca:	7019      	strb	r1, [r3, #0]
 8003ccc:	e7c5      	b.n	8003c5a <_puts_r+0x42>
 8003cce:	4622      	mov	r2, r4
 8003cd0:	4628      	mov	r0, r5
 8003cd2:	f000 f847 	bl	8003d64 <__swbuf_r>
 8003cd6:	3001      	adds	r0, #1
 8003cd8:	d1bf      	bne.n	8003c5a <_puts_r+0x42>
 8003cda:	e7df      	b.n	8003c9c <_puts_r+0x84>
 8003cdc:	6823      	ldr	r3, [r4, #0]
 8003cde:	250a      	movs	r5, #10
 8003ce0:	1c5a      	adds	r2, r3, #1
 8003ce2:	6022      	str	r2, [r4, #0]
 8003ce4:	701d      	strb	r5, [r3, #0]
 8003ce6:	e7db      	b.n	8003ca0 <_puts_r+0x88>
 8003ce8:	08004f48 	.word	0x08004f48
 8003cec:	08004f68 	.word	0x08004f68
 8003cf0:	08004f28 	.word	0x08004f28

08003cf4 <puts>:
 8003cf4:	4b02      	ldr	r3, [pc, #8]	; (8003d00 <puts+0xc>)
 8003cf6:	4601      	mov	r1, r0
 8003cf8:	6818      	ldr	r0, [r3, #0]
 8003cfa:	f7ff bf8d 	b.w	8003c18 <_puts_r>
 8003cfe:	bf00      	nop
 8003d00:	2000000c 	.word	0x2000000c

08003d04 <_sbrk_r>:
 8003d04:	b538      	push	{r3, r4, r5, lr}
 8003d06:	4d06      	ldr	r5, [pc, #24]	; (8003d20 <_sbrk_r+0x1c>)
 8003d08:	2300      	movs	r3, #0
 8003d0a:	4604      	mov	r4, r0
 8003d0c:	4608      	mov	r0, r1
 8003d0e:	602b      	str	r3, [r5, #0]
 8003d10:	f7fc fffe 	bl	8000d10 <_sbrk>
 8003d14:	1c43      	adds	r3, r0, #1
 8003d16:	d102      	bne.n	8003d1e <_sbrk_r+0x1a>
 8003d18:	682b      	ldr	r3, [r5, #0]
 8003d1a:	b103      	cbz	r3, 8003d1e <_sbrk_r+0x1a>
 8003d1c:	6023      	str	r3, [r4, #0]
 8003d1e:	bd38      	pop	{r3, r4, r5, pc}
 8003d20:	20000164 	.word	0x20000164

08003d24 <siprintf>:
 8003d24:	b40e      	push	{r1, r2, r3}
 8003d26:	b500      	push	{lr}
 8003d28:	b09c      	sub	sp, #112	; 0x70
 8003d2a:	ab1d      	add	r3, sp, #116	; 0x74
 8003d2c:	9002      	str	r0, [sp, #8]
 8003d2e:	9006      	str	r0, [sp, #24]
 8003d30:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003d34:	4809      	ldr	r0, [pc, #36]	; (8003d5c <siprintf+0x38>)
 8003d36:	9107      	str	r1, [sp, #28]
 8003d38:	9104      	str	r1, [sp, #16]
 8003d3a:	4909      	ldr	r1, [pc, #36]	; (8003d60 <siprintf+0x3c>)
 8003d3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d40:	9105      	str	r1, [sp, #20]
 8003d42:	6800      	ldr	r0, [r0, #0]
 8003d44:	9301      	str	r3, [sp, #4]
 8003d46:	a902      	add	r1, sp, #8
 8003d48:	f000 fb54 	bl	80043f4 <_svfiprintf_r>
 8003d4c:	9b02      	ldr	r3, [sp, #8]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	701a      	strb	r2, [r3, #0]
 8003d52:	b01c      	add	sp, #112	; 0x70
 8003d54:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d58:	b003      	add	sp, #12
 8003d5a:	4770      	bx	lr
 8003d5c:	2000000c 	.word	0x2000000c
 8003d60:	ffff0208 	.word	0xffff0208

08003d64 <__swbuf_r>:
 8003d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d66:	460e      	mov	r6, r1
 8003d68:	4614      	mov	r4, r2
 8003d6a:	4605      	mov	r5, r0
 8003d6c:	b118      	cbz	r0, 8003d76 <__swbuf_r+0x12>
 8003d6e:	6983      	ldr	r3, [r0, #24]
 8003d70:	b90b      	cbnz	r3, 8003d76 <__swbuf_r+0x12>
 8003d72:	f000 f9d1 	bl	8004118 <__sinit>
 8003d76:	4b21      	ldr	r3, [pc, #132]	; (8003dfc <__swbuf_r+0x98>)
 8003d78:	429c      	cmp	r4, r3
 8003d7a:	d12b      	bne.n	8003dd4 <__swbuf_r+0x70>
 8003d7c:	686c      	ldr	r4, [r5, #4]
 8003d7e:	69a3      	ldr	r3, [r4, #24]
 8003d80:	60a3      	str	r3, [r4, #8]
 8003d82:	89a3      	ldrh	r3, [r4, #12]
 8003d84:	071a      	lsls	r2, r3, #28
 8003d86:	d52f      	bpl.n	8003de8 <__swbuf_r+0x84>
 8003d88:	6923      	ldr	r3, [r4, #16]
 8003d8a:	b36b      	cbz	r3, 8003de8 <__swbuf_r+0x84>
 8003d8c:	6923      	ldr	r3, [r4, #16]
 8003d8e:	6820      	ldr	r0, [r4, #0]
 8003d90:	1ac0      	subs	r0, r0, r3
 8003d92:	6963      	ldr	r3, [r4, #20]
 8003d94:	b2f6      	uxtb	r6, r6
 8003d96:	4283      	cmp	r3, r0
 8003d98:	4637      	mov	r7, r6
 8003d9a:	dc04      	bgt.n	8003da6 <__swbuf_r+0x42>
 8003d9c:	4621      	mov	r1, r4
 8003d9e:	4628      	mov	r0, r5
 8003da0:	f000 f926 	bl	8003ff0 <_fflush_r>
 8003da4:	bb30      	cbnz	r0, 8003df4 <__swbuf_r+0x90>
 8003da6:	68a3      	ldr	r3, [r4, #8]
 8003da8:	3b01      	subs	r3, #1
 8003daa:	60a3      	str	r3, [r4, #8]
 8003dac:	6823      	ldr	r3, [r4, #0]
 8003dae:	1c5a      	adds	r2, r3, #1
 8003db0:	6022      	str	r2, [r4, #0]
 8003db2:	701e      	strb	r6, [r3, #0]
 8003db4:	6963      	ldr	r3, [r4, #20]
 8003db6:	3001      	adds	r0, #1
 8003db8:	4283      	cmp	r3, r0
 8003dba:	d004      	beq.n	8003dc6 <__swbuf_r+0x62>
 8003dbc:	89a3      	ldrh	r3, [r4, #12]
 8003dbe:	07db      	lsls	r3, r3, #31
 8003dc0:	d506      	bpl.n	8003dd0 <__swbuf_r+0x6c>
 8003dc2:	2e0a      	cmp	r6, #10
 8003dc4:	d104      	bne.n	8003dd0 <__swbuf_r+0x6c>
 8003dc6:	4621      	mov	r1, r4
 8003dc8:	4628      	mov	r0, r5
 8003dca:	f000 f911 	bl	8003ff0 <_fflush_r>
 8003dce:	b988      	cbnz	r0, 8003df4 <__swbuf_r+0x90>
 8003dd0:	4638      	mov	r0, r7
 8003dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003dd4:	4b0a      	ldr	r3, [pc, #40]	; (8003e00 <__swbuf_r+0x9c>)
 8003dd6:	429c      	cmp	r4, r3
 8003dd8:	d101      	bne.n	8003dde <__swbuf_r+0x7a>
 8003dda:	68ac      	ldr	r4, [r5, #8]
 8003ddc:	e7cf      	b.n	8003d7e <__swbuf_r+0x1a>
 8003dde:	4b09      	ldr	r3, [pc, #36]	; (8003e04 <__swbuf_r+0xa0>)
 8003de0:	429c      	cmp	r4, r3
 8003de2:	bf08      	it	eq
 8003de4:	68ec      	ldreq	r4, [r5, #12]
 8003de6:	e7ca      	b.n	8003d7e <__swbuf_r+0x1a>
 8003de8:	4621      	mov	r1, r4
 8003dea:	4628      	mov	r0, r5
 8003dec:	f000 f80c 	bl	8003e08 <__swsetup_r>
 8003df0:	2800      	cmp	r0, #0
 8003df2:	d0cb      	beq.n	8003d8c <__swbuf_r+0x28>
 8003df4:	f04f 37ff 	mov.w	r7, #4294967295
 8003df8:	e7ea      	b.n	8003dd0 <__swbuf_r+0x6c>
 8003dfa:	bf00      	nop
 8003dfc:	08004f48 	.word	0x08004f48
 8003e00:	08004f68 	.word	0x08004f68
 8003e04:	08004f28 	.word	0x08004f28

08003e08 <__swsetup_r>:
 8003e08:	4b32      	ldr	r3, [pc, #200]	; (8003ed4 <__swsetup_r+0xcc>)
 8003e0a:	b570      	push	{r4, r5, r6, lr}
 8003e0c:	681d      	ldr	r5, [r3, #0]
 8003e0e:	4606      	mov	r6, r0
 8003e10:	460c      	mov	r4, r1
 8003e12:	b125      	cbz	r5, 8003e1e <__swsetup_r+0x16>
 8003e14:	69ab      	ldr	r3, [r5, #24]
 8003e16:	b913      	cbnz	r3, 8003e1e <__swsetup_r+0x16>
 8003e18:	4628      	mov	r0, r5
 8003e1a:	f000 f97d 	bl	8004118 <__sinit>
 8003e1e:	4b2e      	ldr	r3, [pc, #184]	; (8003ed8 <__swsetup_r+0xd0>)
 8003e20:	429c      	cmp	r4, r3
 8003e22:	d10f      	bne.n	8003e44 <__swsetup_r+0x3c>
 8003e24:	686c      	ldr	r4, [r5, #4]
 8003e26:	89a3      	ldrh	r3, [r4, #12]
 8003e28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003e2c:	0719      	lsls	r1, r3, #28
 8003e2e:	d42c      	bmi.n	8003e8a <__swsetup_r+0x82>
 8003e30:	06dd      	lsls	r5, r3, #27
 8003e32:	d411      	bmi.n	8003e58 <__swsetup_r+0x50>
 8003e34:	2309      	movs	r3, #9
 8003e36:	6033      	str	r3, [r6, #0]
 8003e38:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003e3c:	81a3      	strh	r3, [r4, #12]
 8003e3e:	f04f 30ff 	mov.w	r0, #4294967295
 8003e42:	e03e      	b.n	8003ec2 <__swsetup_r+0xba>
 8003e44:	4b25      	ldr	r3, [pc, #148]	; (8003edc <__swsetup_r+0xd4>)
 8003e46:	429c      	cmp	r4, r3
 8003e48:	d101      	bne.n	8003e4e <__swsetup_r+0x46>
 8003e4a:	68ac      	ldr	r4, [r5, #8]
 8003e4c:	e7eb      	b.n	8003e26 <__swsetup_r+0x1e>
 8003e4e:	4b24      	ldr	r3, [pc, #144]	; (8003ee0 <__swsetup_r+0xd8>)
 8003e50:	429c      	cmp	r4, r3
 8003e52:	bf08      	it	eq
 8003e54:	68ec      	ldreq	r4, [r5, #12]
 8003e56:	e7e6      	b.n	8003e26 <__swsetup_r+0x1e>
 8003e58:	0758      	lsls	r0, r3, #29
 8003e5a:	d512      	bpl.n	8003e82 <__swsetup_r+0x7a>
 8003e5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e5e:	b141      	cbz	r1, 8003e72 <__swsetup_r+0x6a>
 8003e60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003e64:	4299      	cmp	r1, r3
 8003e66:	d002      	beq.n	8003e6e <__swsetup_r+0x66>
 8003e68:	4630      	mov	r0, r6
 8003e6a:	f7ff fddd 	bl	8003a28 <_free_r>
 8003e6e:	2300      	movs	r3, #0
 8003e70:	6363      	str	r3, [r4, #52]	; 0x34
 8003e72:	89a3      	ldrh	r3, [r4, #12]
 8003e74:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003e78:	81a3      	strh	r3, [r4, #12]
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	6063      	str	r3, [r4, #4]
 8003e7e:	6923      	ldr	r3, [r4, #16]
 8003e80:	6023      	str	r3, [r4, #0]
 8003e82:	89a3      	ldrh	r3, [r4, #12]
 8003e84:	f043 0308 	orr.w	r3, r3, #8
 8003e88:	81a3      	strh	r3, [r4, #12]
 8003e8a:	6923      	ldr	r3, [r4, #16]
 8003e8c:	b94b      	cbnz	r3, 8003ea2 <__swsetup_r+0x9a>
 8003e8e:	89a3      	ldrh	r3, [r4, #12]
 8003e90:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003e94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e98:	d003      	beq.n	8003ea2 <__swsetup_r+0x9a>
 8003e9a:	4621      	mov	r1, r4
 8003e9c:	4630      	mov	r0, r6
 8003e9e:	f000 fa01 	bl	80042a4 <__smakebuf_r>
 8003ea2:	89a0      	ldrh	r0, [r4, #12]
 8003ea4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003ea8:	f010 0301 	ands.w	r3, r0, #1
 8003eac:	d00a      	beq.n	8003ec4 <__swsetup_r+0xbc>
 8003eae:	2300      	movs	r3, #0
 8003eb0:	60a3      	str	r3, [r4, #8]
 8003eb2:	6963      	ldr	r3, [r4, #20]
 8003eb4:	425b      	negs	r3, r3
 8003eb6:	61a3      	str	r3, [r4, #24]
 8003eb8:	6923      	ldr	r3, [r4, #16]
 8003eba:	b943      	cbnz	r3, 8003ece <__swsetup_r+0xc6>
 8003ebc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003ec0:	d1ba      	bne.n	8003e38 <__swsetup_r+0x30>
 8003ec2:	bd70      	pop	{r4, r5, r6, pc}
 8003ec4:	0781      	lsls	r1, r0, #30
 8003ec6:	bf58      	it	pl
 8003ec8:	6963      	ldrpl	r3, [r4, #20]
 8003eca:	60a3      	str	r3, [r4, #8]
 8003ecc:	e7f4      	b.n	8003eb8 <__swsetup_r+0xb0>
 8003ece:	2000      	movs	r0, #0
 8003ed0:	e7f7      	b.n	8003ec2 <__swsetup_r+0xba>
 8003ed2:	bf00      	nop
 8003ed4:	2000000c 	.word	0x2000000c
 8003ed8:	08004f48 	.word	0x08004f48
 8003edc:	08004f68 	.word	0x08004f68
 8003ee0:	08004f28 	.word	0x08004f28

08003ee4 <__sflush_r>:
 8003ee4:	898a      	ldrh	r2, [r1, #12]
 8003ee6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003eea:	4605      	mov	r5, r0
 8003eec:	0710      	lsls	r0, r2, #28
 8003eee:	460c      	mov	r4, r1
 8003ef0:	d458      	bmi.n	8003fa4 <__sflush_r+0xc0>
 8003ef2:	684b      	ldr	r3, [r1, #4]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	dc05      	bgt.n	8003f04 <__sflush_r+0x20>
 8003ef8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	dc02      	bgt.n	8003f04 <__sflush_r+0x20>
 8003efe:	2000      	movs	r0, #0
 8003f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003f06:	2e00      	cmp	r6, #0
 8003f08:	d0f9      	beq.n	8003efe <__sflush_r+0x1a>
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003f10:	682f      	ldr	r7, [r5, #0]
 8003f12:	602b      	str	r3, [r5, #0]
 8003f14:	d032      	beq.n	8003f7c <__sflush_r+0x98>
 8003f16:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003f18:	89a3      	ldrh	r3, [r4, #12]
 8003f1a:	075a      	lsls	r2, r3, #29
 8003f1c:	d505      	bpl.n	8003f2a <__sflush_r+0x46>
 8003f1e:	6863      	ldr	r3, [r4, #4]
 8003f20:	1ac0      	subs	r0, r0, r3
 8003f22:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003f24:	b10b      	cbz	r3, 8003f2a <__sflush_r+0x46>
 8003f26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003f28:	1ac0      	subs	r0, r0, r3
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003f30:	6a21      	ldr	r1, [r4, #32]
 8003f32:	4628      	mov	r0, r5
 8003f34:	47b0      	blx	r6
 8003f36:	1c43      	adds	r3, r0, #1
 8003f38:	89a3      	ldrh	r3, [r4, #12]
 8003f3a:	d106      	bne.n	8003f4a <__sflush_r+0x66>
 8003f3c:	6829      	ldr	r1, [r5, #0]
 8003f3e:	291d      	cmp	r1, #29
 8003f40:	d82c      	bhi.n	8003f9c <__sflush_r+0xb8>
 8003f42:	4a2a      	ldr	r2, [pc, #168]	; (8003fec <__sflush_r+0x108>)
 8003f44:	40ca      	lsrs	r2, r1
 8003f46:	07d6      	lsls	r6, r2, #31
 8003f48:	d528      	bpl.n	8003f9c <__sflush_r+0xb8>
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	6062      	str	r2, [r4, #4]
 8003f4e:	04d9      	lsls	r1, r3, #19
 8003f50:	6922      	ldr	r2, [r4, #16]
 8003f52:	6022      	str	r2, [r4, #0]
 8003f54:	d504      	bpl.n	8003f60 <__sflush_r+0x7c>
 8003f56:	1c42      	adds	r2, r0, #1
 8003f58:	d101      	bne.n	8003f5e <__sflush_r+0x7a>
 8003f5a:	682b      	ldr	r3, [r5, #0]
 8003f5c:	b903      	cbnz	r3, 8003f60 <__sflush_r+0x7c>
 8003f5e:	6560      	str	r0, [r4, #84]	; 0x54
 8003f60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f62:	602f      	str	r7, [r5, #0]
 8003f64:	2900      	cmp	r1, #0
 8003f66:	d0ca      	beq.n	8003efe <__sflush_r+0x1a>
 8003f68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003f6c:	4299      	cmp	r1, r3
 8003f6e:	d002      	beq.n	8003f76 <__sflush_r+0x92>
 8003f70:	4628      	mov	r0, r5
 8003f72:	f7ff fd59 	bl	8003a28 <_free_r>
 8003f76:	2000      	movs	r0, #0
 8003f78:	6360      	str	r0, [r4, #52]	; 0x34
 8003f7a:	e7c1      	b.n	8003f00 <__sflush_r+0x1c>
 8003f7c:	6a21      	ldr	r1, [r4, #32]
 8003f7e:	2301      	movs	r3, #1
 8003f80:	4628      	mov	r0, r5
 8003f82:	47b0      	blx	r6
 8003f84:	1c41      	adds	r1, r0, #1
 8003f86:	d1c7      	bne.n	8003f18 <__sflush_r+0x34>
 8003f88:	682b      	ldr	r3, [r5, #0]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d0c4      	beq.n	8003f18 <__sflush_r+0x34>
 8003f8e:	2b1d      	cmp	r3, #29
 8003f90:	d001      	beq.n	8003f96 <__sflush_r+0xb2>
 8003f92:	2b16      	cmp	r3, #22
 8003f94:	d101      	bne.n	8003f9a <__sflush_r+0xb6>
 8003f96:	602f      	str	r7, [r5, #0]
 8003f98:	e7b1      	b.n	8003efe <__sflush_r+0x1a>
 8003f9a:	89a3      	ldrh	r3, [r4, #12]
 8003f9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fa0:	81a3      	strh	r3, [r4, #12]
 8003fa2:	e7ad      	b.n	8003f00 <__sflush_r+0x1c>
 8003fa4:	690f      	ldr	r7, [r1, #16]
 8003fa6:	2f00      	cmp	r7, #0
 8003fa8:	d0a9      	beq.n	8003efe <__sflush_r+0x1a>
 8003faa:	0793      	lsls	r3, r2, #30
 8003fac:	680e      	ldr	r6, [r1, #0]
 8003fae:	bf08      	it	eq
 8003fb0:	694b      	ldreq	r3, [r1, #20]
 8003fb2:	600f      	str	r7, [r1, #0]
 8003fb4:	bf18      	it	ne
 8003fb6:	2300      	movne	r3, #0
 8003fb8:	eba6 0807 	sub.w	r8, r6, r7
 8003fbc:	608b      	str	r3, [r1, #8]
 8003fbe:	f1b8 0f00 	cmp.w	r8, #0
 8003fc2:	dd9c      	ble.n	8003efe <__sflush_r+0x1a>
 8003fc4:	6a21      	ldr	r1, [r4, #32]
 8003fc6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003fc8:	4643      	mov	r3, r8
 8003fca:	463a      	mov	r2, r7
 8003fcc:	4628      	mov	r0, r5
 8003fce:	47b0      	blx	r6
 8003fd0:	2800      	cmp	r0, #0
 8003fd2:	dc06      	bgt.n	8003fe2 <__sflush_r+0xfe>
 8003fd4:	89a3      	ldrh	r3, [r4, #12]
 8003fd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fda:	81a3      	strh	r3, [r4, #12]
 8003fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8003fe0:	e78e      	b.n	8003f00 <__sflush_r+0x1c>
 8003fe2:	4407      	add	r7, r0
 8003fe4:	eba8 0800 	sub.w	r8, r8, r0
 8003fe8:	e7e9      	b.n	8003fbe <__sflush_r+0xda>
 8003fea:	bf00      	nop
 8003fec:	20400001 	.word	0x20400001

08003ff0 <_fflush_r>:
 8003ff0:	b538      	push	{r3, r4, r5, lr}
 8003ff2:	690b      	ldr	r3, [r1, #16]
 8003ff4:	4605      	mov	r5, r0
 8003ff6:	460c      	mov	r4, r1
 8003ff8:	b913      	cbnz	r3, 8004000 <_fflush_r+0x10>
 8003ffa:	2500      	movs	r5, #0
 8003ffc:	4628      	mov	r0, r5
 8003ffe:	bd38      	pop	{r3, r4, r5, pc}
 8004000:	b118      	cbz	r0, 800400a <_fflush_r+0x1a>
 8004002:	6983      	ldr	r3, [r0, #24]
 8004004:	b90b      	cbnz	r3, 800400a <_fflush_r+0x1a>
 8004006:	f000 f887 	bl	8004118 <__sinit>
 800400a:	4b14      	ldr	r3, [pc, #80]	; (800405c <_fflush_r+0x6c>)
 800400c:	429c      	cmp	r4, r3
 800400e:	d11b      	bne.n	8004048 <_fflush_r+0x58>
 8004010:	686c      	ldr	r4, [r5, #4]
 8004012:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d0ef      	beq.n	8003ffa <_fflush_r+0xa>
 800401a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800401c:	07d0      	lsls	r0, r2, #31
 800401e:	d404      	bmi.n	800402a <_fflush_r+0x3a>
 8004020:	0599      	lsls	r1, r3, #22
 8004022:	d402      	bmi.n	800402a <_fflush_r+0x3a>
 8004024:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004026:	f000 f915 	bl	8004254 <__retarget_lock_acquire_recursive>
 800402a:	4628      	mov	r0, r5
 800402c:	4621      	mov	r1, r4
 800402e:	f7ff ff59 	bl	8003ee4 <__sflush_r>
 8004032:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004034:	07da      	lsls	r2, r3, #31
 8004036:	4605      	mov	r5, r0
 8004038:	d4e0      	bmi.n	8003ffc <_fflush_r+0xc>
 800403a:	89a3      	ldrh	r3, [r4, #12]
 800403c:	059b      	lsls	r3, r3, #22
 800403e:	d4dd      	bmi.n	8003ffc <_fflush_r+0xc>
 8004040:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004042:	f000 f908 	bl	8004256 <__retarget_lock_release_recursive>
 8004046:	e7d9      	b.n	8003ffc <_fflush_r+0xc>
 8004048:	4b05      	ldr	r3, [pc, #20]	; (8004060 <_fflush_r+0x70>)
 800404a:	429c      	cmp	r4, r3
 800404c:	d101      	bne.n	8004052 <_fflush_r+0x62>
 800404e:	68ac      	ldr	r4, [r5, #8]
 8004050:	e7df      	b.n	8004012 <_fflush_r+0x22>
 8004052:	4b04      	ldr	r3, [pc, #16]	; (8004064 <_fflush_r+0x74>)
 8004054:	429c      	cmp	r4, r3
 8004056:	bf08      	it	eq
 8004058:	68ec      	ldreq	r4, [r5, #12]
 800405a:	e7da      	b.n	8004012 <_fflush_r+0x22>
 800405c:	08004f48 	.word	0x08004f48
 8004060:	08004f68 	.word	0x08004f68
 8004064:	08004f28 	.word	0x08004f28

08004068 <std>:
 8004068:	2300      	movs	r3, #0
 800406a:	b510      	push	{r4, lr}
 800406c:	4604      	mov	r4, r0
 800406e:	e9c0 3300 	strd	r3, r3, [r0]
 8004072:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004076:	6083      	str	r3, [r0, #8]
 8004078:	8181      	strh	r1, [r0, #12]
 800407a:	6643      	str	r3, [r0, #100]	; 0x64
 800407c:	81c2      	strh	r2, [r0, #14]
 800407e:	6183      	str	r3, [r0, #24]
 8004080:	4619      	mov	r1, r3
 8004082:	2208      	movs	r2, #8
 8004084:	305c      	adds	r0, #92	; 0x5c
 8004086:	f7ff fcc7 	bl	8003a18 <memset>
 800408a:	4b05      	ldr	r3, [pc, #20]	; (80040a0 <std+0x38>)
 800408c:	6263      	str	r3, [r4, #36]	; 0x24
 800408e:	4b05      	ldr	r3, [pc, #20]	; (80040a4 <std+0x3c>)
 8004090:	62a3      	str	r3, [r4, #40]	; 0x28
 8004092:	4b05      	ldr	r3, [pc, #20]	; (80040a8 <std+0x40>)
 8004094:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004096:	4b05      	ldr	r3, [pc, #20]	; (80040ac <std+0x44>)
 8004098:	6224      	str	r4, [r4, #32]
 800409a:	6323      	str	r3, [r4, #48]	; 0x30
 800409c:	bd10      	pop	{r4, pc}
 800409e:	bf00      	nop
 80040a0:	08004bd1 	.word	0x08004bd1
 80040a4:	08004bf3 	.word	0x08004bf3
 80040a8:	08004c2b 	.word	0x08004c2b
 80040ac:	08004c4f 	.word	0x08004c4f

080040b0 <_cleanup_r>:
 80040b0:	4901      	ldr	r1, [pc, #4]	; (80040b8 <_cleanup_r+0x8>)
 80040b2:	f000 b8af 	b.w	8004214 <_fwalk_reent>
 80040b6:	bf00      	nop
 80040b8:	08003ff1 	.word	0x08003ff1

080040bc <__sfmoreglue>:
 80040bc:	b570      	push	{r4, r5, r6, lr}
 80040be:	2268      	movs	r2, #104	; 0x68
 80040c0:	1e4d      	subs	r5, r1, #1
 80040c2:	4355      	muls	r5, r2
 80040c4:	460e      	mov	r6, r1
 80040c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80040ca:	f7ff fd19 	bl	8003b00 <_malloc_r>
 80040ce:	4604      	mov	r4, r0
 80040d0:	b140      	cbz	r0, 80040e4 <__sfmoreglue+0x28>
 80040d2:	2100      	movs	r1, #0
 80040d4:	e9c0 1600 	strd	r1, r6, [r0]
 80040d8:	300c      	adds	r0, #12
 80040da:	60a0      	str	r0, [r4, #8]
 80040dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80040e0:	f7ff fc9a 	bl	8003a18 <memset>
 80040e4:	4620      	mov	r0, r4
 80040e6:	bd70      	pop	{r4, r5, r6, pc}

080040e8 <__sfp_lock_acquire>:
 80040e8:	4801      	ldr	r0, [pc, #4]	; (80040f0 <__sfp_lock_acquire+0x8>)
 80040ea:	f000 b8b3 	b.w	8004254 <__retarget_lock_acquire_recursive>
 80040ee:	bf00      	nop
 80040f0:	20000161 	.word	0x20000161

080040f4 <__sfp_lock_release>:
 80040f4:	4801      	ldr	r0, [pc, #4]	; (80040fc <__sfp_lock_release+0x8>)
 80040f6:	f000 b8ae 	b.w	8004256 <__retarget_lock_release_recursive>
 80040fa:	bf00      	nop
 80040fc:	20000161 	.word	0x20000161

08004100 <__sinit_lock_acquire>:
 8004100:	4801      	ldr	r0, [pc, #4]	; (8004108 <__sinit_lock_acquire+0x8>)
 8004102:	f000 b8a7 	b.w	8004254 <__retarget_lock_acquire_recursive>
 8004106:	bf00      	nop
 8004108:	20000162 	.word	0x20000162

0800410c <__sinit_lock_release>:
 800410c:	4801      	ldr	r0, [pc, #4]	; (8004114 <__sinit_lock_release+0x8>)
 800410e:	f000 b8a2 	b.w	8004256 <__retarget_lock_release_recursive>
 8004112:	bf00      	nop
 8004114:	20000162 	.word	0x20000162

08004118 <__sinit>:
 8004118:	b510      	push	{r4, lr}
 800411a:	4604      	mov	r4, r0
 800411c:	f7ff fff0 	bl	8004100 <__sinit_lock_acquire>
 8004120:	69a3      	ldr	r3, [r4, #24]
 8004122:	b11b      	cbz	r3, 800412c <__sinit+0x14>
 8004124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004128:	f7ff bff0 	b.w	800410c <__sinit_lock_release>
 800412c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004130:	6523      	str	r3, [r4, #80]	; 0x50
 8004132:	4b13      	ldr	r3, [pc, #76]	; (8004180 <__sinit+0x68>)
 8004134:	4a13      	ldr	r2, [pc, #76]	; (8004184 <__sinit+0x6c>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	62a2      	str	r2, [r4, #40]	; 0x28
 800413a:	42a3      	cmp	r3, r4
 800413c:	bf04      	itt	eq
 800413e:	2301      	moveq	r3, #1
 8004140:	61a3      	streq	r3, [r4, #24]
 8004142:	4620      	mov	r0, r4
 8004144:	f000 f820 	bl	8004188 <__sfp>
 8004148:	6060      	str	r0, [r4, #4]
 800414a:	4620      	mov	r0, r4
 800414c:	f000 f81c 	bl	8004188 <__sfp>
 8004150:	60a0      	str	r0, [r4, #8]
 8004152:	4620      	mov	r0, r4
 8004154:	f000 f818 	bl	8004188 <__sfp>
 8004158:	2200      	movs	r2, #0
 800415a:	60e0      	str	r0, [r4, #12]
 800415c:	2104      	movs	r1, #4
 800415e:	6860      	ldr	r0, [r4, #4]
 8004160:	f7ff ff82 	bl	8004068 <std>
 8004164:	68a0      	ldr	r0, [r4, #8]
 8004166:	2201      	movs	r2, #1
 8004168:	2109      	movs	r1, #9
 800416a:	f7ff ff7d 	bl	8004068 <std>
 800416e:	68e0      	ldr	r0, [r4, #12]
 8004170:	2202      	movs	r2, #2
 8004172:	2112      	movs	r1, #18
 8004174:	f7ff ff78 	bl	8004068 <std>
 8004178:	2301      	movs	r3, #1
 800417a:	61a3      	str	r3, [r4, #24]
 800417c:	e7d2      	b.n	8004124 <__sinit+0xc>
 800417e:	bf00      	nop
 8004180:	08004f24 	.word	0x08004f24
 8004184:	080040b1 	.word	0x080040b1

08004188 <__sfp>:
 8004188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800418a:	4607      	mov	r7, r0
 800418c:	f7ff ffac 	bl	80040e8 <__sfp_lock_acquire>
 8004190:	4b1e      	ldr	r3, [pc, #120]	; (800420c <__sfp+0x84>)
 8004192:	681e      	ldr	r6, [r3, #0]
 8004194:	69b3      	ldr	r3, [r6, #24]
 8004196:	b913      	cbnz	r3, 800419e <__sfp+0x16>
 8004198:	4630      	mov	r0, r6
 800419a:	f7ff ffbd 	bl	8004118 <__sinit>
 800419e:	3648      	adds	r6, #72	; 0x48
 80041a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80041a4:	3b01      	subs	r3, #1
 80041a6:	d503      	bpl.n	80041b0 <__sfp+0x28>
 80041a8:	6833      	ldr	r3, [r6, #0]
 80041aa:	b30b      	cbz	r3, 80041f0 <__sfp+0x68>
 80041ac:	6836      	ldr	r6, [r6, #0]
 80041ae:	e7f7      	b.n	80041a0 <__sfp+0x18>
 80041b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80041b4:	b9d5      	cbnz	r5, 80041ec <__sfp+0x64>
 80041b6:	4b16      	ldr	r3, [pc, #88]	; (8004210 <__sfp+0x88>)
 80041b8:	60e3      	str	r3, [r4, #12]
 80041ba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80041be:	6665      	str	r5, [r4, #100]	; 0x64
 80041c0:	f000 f847 	bl	8004252 <__retarget_lock_init_recursive>
 80041c4:	f7ff ff96 	bl	80040f4 <__sfp_lock_release>
 80041c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80041cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80041d0:	6025      	str	r5, [r4, #0]
 80041d2:	61a5      	str	r5, [r4, #24]
 80041d4:	2208      	movs	r2, #8
 80041d6:	4629      	mov	r1, r5
 80041d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80041dc:	f7ff fc1c 	bl	8003a18 <memset>
 80041e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80041e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80041e8:	4620      	mov	r0, r4
 80041ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041ec:	3468      	adds	r4, #104	; 0x68
 80041ee:	e7d9      	b.n	80041a4 <__sfp+0x1c>
 80041f0:	2104      	movs	r1, #4
 80041f2:	4638      	mov	r0, r7
 80041f4:	f7ff ff62 	bl	80040bc <__sfmoreglue>
 80041f8:	4604      	mov	r4, r0
 80041fa:	6030      	str	r0, [r6, #0]
 80041fc:	2800      	cmp	r0, #0
 80041fe:	d1d5      	bne.n	80041ac <__sfp+0x24>
 8004200:	f7ff ff78 	bl	80040f4 <__sfp_lock_release>
 8004204:	230c      	movs	r3, #12
 8004206:	603b      	str	r3, [r7, #0]
 8004208:	e7ee      	b.n	80041e8 <__sfp+0x60>
 800420a:	bf00      	nop
 800420c:	08004f24 	.word	0x08004f24
 8004210:	ffff0001 	.word	0xffff0001

08004214 <_fwalk_reent>:
 8004214:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004218:	4606      	mov	r6, r0
 800421a:	4688      	mov	r8, r1
 800421c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004220:	2700      	movs	r7, #0
 8004222:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004226:	f1b9 0901 	subs.w	r9, r9, #1
 800422a:	d505      	bpl.n	8004238 <_fwalk_reent+0x24>
 800422c:	6824      	ldr	r4, [r4, #0]
 800422e:	2c00      	cmp	r4, #0
 8004230:	d1f7      	bne.n	8004222 <_fwalk_reent+0xe>
 8004232:	4638      	mov	r0, r7
 8004234:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004238:	89ab      	ldrh	r3, [r5, #12]
 800423a:	2b01      	cmp	r3, #1
 800423c:	d907      	bls.n	800424e <_fwalk_reent+0x3a>
 800423e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004242:	3301      	adds	r3, #1
 8004244:	d003      	beq.n	800424e <_fwalk_reent+0x3a>
 8004246:	4629      	mov	r1, r5
 8004248:	4630      	mov	r0, r6
 800424a:	47c0      	blx	r8
 800424c:	4307      	orrs	r7, r0
 800424e:	3568      	adds	r5, #104	; 0x68
 8004250:	e7e9      	b.n	8004226 <_fwalk_reent+0x12>

08004252 <__retarget_lock_init_recursive>:
 8004252:	4770      	bx	lr

08004254 <__retarget_lock_acquire_recursive>:
 8004254:	4770      	bx	lr

08004256 <__retarget_lock_release_recursive>:
 8004256:	4770      	bx	lr

08004258 <__swhatbuf_r>:
 8004258:	b570      	push	{r4, r5, r6, lr}
 800425a:	460e      	mov	r6, r1
 800425c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004260:	2900      	cmp	r1, #0
 8004262:	b096      	sub	sp, #88	; 0x58
 8004264:	4614      	mov	r4, r2
 8004266:	461d      	mov	r5, r3
 8004268:	da08      	bge.n	800427c <__swhatbuf_r+0x24>
 800426a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800426e:	2200      	movs	r2, #0
 8004270:	602a      	str	r2, [r5, #0]
 8004272:	061a      	lsls	r2, r3, #24
 8004274:	d410      	bmi.n	8004298 <__swhatbuf_r+0x40>
 8004276:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800427a:	e00e      	b.n	800429a <__swhatbuf_r+0x42>
 800427c:	466a      	mov	r2, sp
 800427e:	f000 fd0d 	bl	8004c9c <_fstat_r>
 8004282:	2800      	cmp	r0, #0
 8004284:	dbf1      	blt.n	800426a <__swhatbuf_r+0x12>
 8004286:	9a01      	ldr	r2, [sp, #4]
 8004288:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800428c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004290:	425a      	negs	r2, r3
 8004292:	415a      	adcs	r2, r3
 8004294:	602a      	str	r2, [r5, #0]
 8004296:	e7ee      	b.n	8004276 <__swhatbuf_r+0x1e>
 8004298:	2340      	movs	r3, #64	; 0x40
 800429a:	2000      	movs	r0, #0
 800429c:	6023      	str	r3, [r4, #0]
 800429e:	b016      	add	sp, #88	; 0x58
 80042a0:	bd70      	pop	{r4, r5, r6, pc}
	...

080042a4 <__smakebuf_r>:
 80042a4:	898b      	ldrh	r3, [r1, #12]
 80042a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80042a8:	079d      	lsls	r5, r3, #30
 80042aa:	4606      	mov	r6, r0
 80042ac:	460c      	mov	r4, r1
 80042ae:	d507      	bpl.n	80042c0 <__smakebuf_r+0x1c>
 80042b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80042b4:	6023      	str	r3, [r4, #0]
 80042b6:	6123      	str	r3, [r4, #16]
 80042b8:	2301      	movs	r3, #1
 80042ba:	6163      	str	r3, [r4, #20]
 80042bc:	b002      	add	sp, #8
 80042be:	bd70      	pop	{r4, r5, r6, pc}
 80042c0:	ab01      	add	r3, sp, #4
 80042c2:	466a      	mov	r2, sp
 80042c4:	f7ff ffc8 	bl	8004258 <__swhatbuf_r>
 80042c8:	9900      	ldr	r1, [sp, #0]
 80042ca:	4605      	mov	r5, r0
 80042cc:	4630      	mov	r0, r6
 80042ce:	f7ff fc17 	bl	8003b00 <_malloc_r>
 80042d2:	b948      	cbnz	r0, 80042e8 <__smakebuf_r+0x44>
 80042d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042d8:	059a      	lsls	r2, r3, #22
 80042da:	d4ef      	bmi.n	80042bc <__smakebuf_r+0x18>
 80042dc:	f023 0303 	bic.w	r3, r3, #3
 80042e0:	f043 0302 	orr.w	r3, r3, #2
 80042e4:	81a3      	strh	r3, [r4, #12]
 80042e6:	e7e3      	b.n	80042b0 <__smakebuf_r+0xc>
 80042e8:	4b0d      	ldr	r3, [pc, #52]	; (8004320 <__smakebuf_r+0x7c>)
 80042ea:	62b3      	str	r3, [r6, #40]	; 0x28
 80042ec:	89a3      	ldrh	r3, [r4, #12]
 80042ee:	6020      	str	r0, [r4, #0]
 80042f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042f4:	81a3      	strh	r3, [r4, #12]
 80042f6:	9b00      	ldr	r3, [sp, #0]
 80042f8:	6163      	str	r3, [r4, #20]
 80042fa:	9b01      	ldr	r3, [sp, #4]
 80042fc:	6120      	str	r0, [r4, #16]
 80042fe:	b15b      	cbz	r3, 8004318 <__smakebuf_r+0x74>
 8004300:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004304:	4630      	mov	r0, r6
 8004306:	f000 fcdb 	bl	8004cc0 <_isatty_r>
 800430a:	b128      	cbz	r0, 8004318 <__smakebuf_r+0x74>
 800430c:	89a3      	ldrh	r3, [r4, #12]
 800430e:	f023 0303 	bic.w	r3, r3, #3
 8004312:	f043 0301 	orr.w	r3, r3, #1
 8004316:	81a3      	strh	r3, [r4, #12]
 8004318:	89a0      	ldrh	r0, [r4, #12]
 800431a:	4305      	orrs	r5, r0
 800431c:	81a5      	strh	r5, [r4, #12]
 800431e:	e7cd      	b.n	80042bc <__smakebuf_r+0x18>
 8004320:	080040b1 	.word	0x080040b1

08004324 <__malloc_lock>:
 8004324:	4801      	ldr	r0, [pc, #4]	; (800432c <__malloc_lock+0x8>)
 8004326:	f7ff bf95 	b.w	8004254 <__retarget_lock_acquire_recursive>
 800432a:	bf00      	nop
 800432c:	20000160 	.word	0x20000160

08004330 <__malloc_unlock>:
 8004330:	4801      	ldr	r0, [pc, #4]	; (8004338 <__malloc_unlock+0x8>)
 8004332:	f7ff bf90 	b.w	8004256 <__retarget_lock_release_recursive>
 8004336:	bf00      	nop
 8004338:	20000160 	.word	0x20000160

0800433c <__ssputs_r>:
 800433c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004340:	688e      	ldr	r6, [r1, #8]
 8004342:	429e      	cmp	r6, r3
 8004344:	4682      	mov	sl, r0
 8004346:	460c      	mov	r4, r1
 8004348:	4690      	mov	r8, r2
 800434a:	461f      	mov	r7, r3
 800434c:	d838      	bhi.n	80043c0 <__ssputs_r+0x84>
 800434e:	898a      	ldrh	r2, [r1, #12]
 8004350:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004354:	d032      	beq.n	80043bc <__ssputs_r+0x80>
 8004356:	6825      	ldr	r5, [r4, #0]
 8004358:	6909      	ldr	r1, [r1, #16]
 800435a:	eba5 0901 	sub.w	r9, r5, r1
 800435e:	6965      	ldr	r5, [r4, #20]
 8004360:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004364:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004368:	3301      	adds	r3, #1
 800436a:	444b      	add	r3, r9
 800436c:	106d      	asrs	r5, r5, #1
 800436e:	429d      	cmp	r5, r3
 8004370:	bf38      	it	cc
 8004372:	461d      	movcc	r5, r3
 8004374:	0553      	lsls	r3, r2, #21
 8004376:	d531      	bpl.n	80043dc <__ssputs_r+0xa0>
 8004378:	4629      	mov	r1, r5
 800437a:	f7ff fbc1 	bl	8003b00 <_malloc_r>
 800437e:	4606      	mov	r6, r0
 8004380:	b950      	cbnz	r0, 8004398 <__ssputs_r+0x5c>
 8004382:	230c      	movs	r3, #12
 8004384:	f8ca 3000 	str.w	r3, [sl]
 8004388:	89a3      	ldrh	r3, [r4, #12]
 800438a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800438e:	81a3      	strh	r3, [r4, #12]
 8004390:	f04f 30ff 	mov.w	r0, #4294967295
 8004394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004398:	6921      	ldr	r1, [r4, #16]
 800439a:	464a      	mov	r2, r9
 800439c:	f000 fcb2 	bl	8004d04 <memcpy>
 80043a0:	89a3      	ldrh	r3, [r4, #12]
 80043a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80043a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043aa:	81a3      	strh	r3, [r4, #12]
 80043ac:	6126      	str	r6, [r4, #16]
 80043ae:	6165      	str	r5, [r4, #20]
 80043b0:	444e      	add	r6, r9
 80043b2:	eba5 0509 	sub.w	r5, r5, r9
 80043b6:	6026      	str	r6, [r4, #0]
 80043b8:	60a5      	str	r5, [r4, #8]
 80043ba:	463e      	mov	r6, r7
 80043bc:	42be      	cmp	r6, r7
 80043be:	d900      	bls.n	80043c2 <__ssputs_r+0x86>
 80043c0:	463e      	mov	r6, r7
 80043c2:	6820      	ldr	r0, [r4, #0]
 80043c4:	4632      	mov	r2, r6
 80043c6:	4641      	mov	r1, r8
 80043c8:	f000 fcaa 	bl	8004d20 <memmove>
 80043cc:	68a3      	ldr	r3, [r4, #8]
 80043ce:	1b9b      	subs	r3, r3, r6
 80043d0:	60a3      	str	r3, [r4, #8]
 80043d2:	6823      	ldr	r3, [r4, #0]
 80043d4:	4433      	add	r3, r6
 80043d6:	6023      	str	r3, [r4, #0]
 80043d8:	2000      	movs	r0, #0
 80043da:	e7db      	b.n	8004394 <__ssputs_r+0x58>
 80043dc:	462a      	mov	r2, r5
 80043de:	f000 fcb9 	bl	8004d54 <_realloc_r>
 80043e2:	4606      	mov	r6, r0
 80043e4:	2800      	cmp	r0, #0
 80043e6:	d1e1      	bne.n	80043ac <__ssputs_r+0x70>
 80043e8:	6921      	ldr	r1, [r4, #16]
 80043ea:	4650      	mov	r0, sl
 80043ec:	f7ff fb1c 	bl	8003a28 <_free_r>
 80043f0:	e7c7      	b.n	8004382 <__ssputs_r+0x46>
	...

080043f4 <_svfiprintf_r>:
 80043f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043f8:	4698      	mov	r8, r3
 80043fa:	898b      	ldrh	r3, [r1, #12]
 80043fc:	061b      	lsls	r3, r3, #24
 80043fe:	b09d      	sub	sp, #116	; 0x74
 8004400:	4607      	mov	r7, r0
 8004402:	460d      	mov	r5, r1
 8004404:	4614      	mov	r4, r2
 8004406:	d50e      	bpl.n	8004426 <_svfiprintf_r+0x32>
 8004408:	690b      	ldr	r3, [r1, #16]
 800440a:	b963      	cbnz	r3, 8004426 <_svfiprintf_r+0x32>
 800440c:	2140      	movs	r1, #64	; 0x40
 800440e:	f7ff fb77 	bl	8003b00 <_malloc_r>
 8004412:	6028      	str	r0, [r5, #0]
 8004414:	6128      	str	r0, [r5, #16]
 8004416:	b920      	cbnz	r0, 8004422 <_svfiprintf_r+0x2e>
 8004418:	230c      	movs	r3, #12
 800441a:	603b      	str	r3, [r7, #0]
 800441c:	f04f 30ff 	mov.w	r0, #4294967295
 8004420:	e0d1      	b.n	80045c6 <_svfiprintf_r+0x1d2>
 8004422:	2340      	movs	r3, #64	; 0x40
 8004424:	616b      	str	r3, [r5, #20]
 8004426:	2300      	movs	r3, #0
 8004428:	9309      	str	r3, [sp, #36]	; 0x24
 800442a:	2320      	movs	r3, #32
 800442c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004430:	f8cd 800c 	str.w	r8, [sp, #12]
 8004434:	2330      	movs	r3, #48	; 0x30
 8004436:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80045e0 <_svfiprintf_r+0x1ec>
 800443a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800443e:	f04f 0901 	mov.w	r9, #1
 8004442:	4623      	mov	r3, r4
 8004444:	469a      	mov	sl, r3
 8004446:	f813 2b01 	ldrb.w	r2, [r3], #1
 800444a:	b10a      	cbz	r2, 8004450 <_svfiprintf_r+0x5c>
 800444c:	2a25      	cmp	r2, #37	; 0x25
 800444e:	d1f9      	bne.n	8004444 <_svfiprintf_r+0x50>
 8004450:	ebba 0b04 	subs.w	fp, sl, r4
 8004454:	d00b      	beq.n	800446e <_svfiprintf_r+0x7a>
 8004456:	465b      	mov	r3, fp
 8004458:	4622      	mov	r2, r4
 800445a:	4629      	mov	r1, r5
 800445c:	4638      	mov	r0, r7
 800445e:	f7ff ff6d 	bl	800433c <__ssputs_r>
 8004462:	3001      	adds	r0, #1
 8004464:	f000 80aa 	beq.w	80045bc <_svfiprintf_r+0x1c8>
 8004468:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800446a:	445a      	add	r2, fp
 800446c:	9209      	str	r2, [sp, #36]	; 0x24
 800446e:	f89a 3000 	ldrb.w	r3, [sl]
 8004472:	2b00      	cmp	r3, #0
 8004474:	f000 80a2 	beq.w	80045bc <_svfiprintf_r+0x1c8>
 8004478:	2300      	movs	r3, #0
 800447a:	f04f 32ff 	mov.w	r2, #4294967295
 800447e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004482:	f10a 0a01 	add.w	sl, sl, #1
 8004486:	9304      	str	r3, [sp, #16]
 8004488:	9307      	str	r3, [sp, #28]
 800448a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800448e:	931a      	str	r3, [sp, #104]	; 0x68
 8004490:	4654      	mov	r4, sl
 8004492:	2205      	movs	r2, #5
 8004494:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004498:	4851      	ldr	r0, [pc, #324]	; (80045e0 <_svfiprintf_r+0x1ec>)
 800449a:	f7fb fea9 	bl	80001f0 <memchr>
 800449e:	9a04      	ldr	r2, [sp, #16]
 80044a0:	b9d8      	cbnz	r0, 80044da <_svfiprintf_r+0xe6>
 80044a2:	06d0      	lsls	r0, r2, #27
 80044a4:	bf44      	itt	mi
 80044a6:	2320      	movmi	r3, #32
 80044a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80044ac:	0711      	lsls	r1, r2, #28
 80044ae:	bf44      	itt	mi
 80044b0:	232b      	movmi	r3, #43	; 0x2b
 80044b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80044b6:	f89a 3000 	ldrb.w	r3, [sl]
 80044ba:	2b2a      	cmp	r3, #42	; 0x2a
 80044bc:	d015      	beq.n	80044ea <_svfiprintf_r+0xf6>
 80044be:	9a07      	ldr	r2, [sp, #28]
 80044c0:	4654      	mov	r4, sl
 80044c2:	2000      	movs	r0, #0
 80044c4:	f04f 0c0a 	mov.w	ip, #10
 80044c8:	4621      	mov	r1, r4
 80044ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80044ce:	3b30      	subs	r3, #48	; 0x30
 80044d0:	2b09      	cmp	r3, #9
 80044d2:	d94e      	bls.n	8004572 <_svfiprintf_r+0x17e>
 80044d4:	b1b0      	cbz	r0, 8004504 <_svfiprintf_r+0x110>
 80044d6:	9207      	str	r2, [sp, #28]
 80044d8:	e014      	b.n	8004504 <_svfiprintf_r+0x110>
 80044da:	eba0 0308 	sub.w	r3, r0, r8
 80044de:	fa09 f303 	lsl.w	r3, r9, r3
 80044e2:	4313      	orrs	r3, r2
 80044e4:	9304      	str	r3, [sp, #16]
 80044e6:	46a2      	mov	sl, r4
 80044e8:	e7d2      	b.n	8004490 <_svfiprintf_r+0x9c>
 80044ea:	9b03      	ldr	r3, [sp, #12]
 80044ec:	1d19      	adds	r1, r3, #4
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	9103      	str	r1, [sp, #12]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	bfbb      	ittet	lt
 80044f6:	425b      	neglt	r3, r3
 80044f8:	f042 0202 	orrlt.w	r2, r2, #2
 80044fc:	9307      	strge	r3, [sp, #28]
 80044fe:	9307      	strlt	r3, [sp, #28]
 8004500:	bfb8      	it	lt
 8004502:	9204      	strlt	r2, [sp, #16]
 8004504:	7823      	ldrb	r3, [r4, #0]
 8004506:	2b2e      	cmp	r3, #46	; 0x2e
 8004508:	d10c      	bne.n	8004524 <_svfiprintf_r+0x130>
 800450a:	7863      	ldrb	r3, [r4, #1]
 800450c:	2b2a      	cmp	r3, #42	; 0x2a
 800450e:	d135      	bne.n	800457c <_svfiprintf_r+0x188>
 8004510:	9b03      	ldr	r3, [sp, #12]
 8004512:	1d1a      	adds	r2, r3, #4
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	9203      	str	r2, [sp, #12]
 8004518:	2b00      	cmp	r3, #0
 800451a:	bfb8      	it	lt
 800451c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004520:	3402      	adds	r4, #2
 8004522:	9305      	str	r3, [sp, #20]
 8004524:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80045f0 <_svfiprintf_r+0x1fc>
 8004528:	7821      	ldrb	r1, [r4, #0]
 800452a:	2203      	movs	r2, #3
 800452c:	4650      	mov	r0, sl
 800452e:	f7fb fe5f 	bl	80001f0 <memchr>
 8004532:	b140      	cbz	r0, 8004546 <_svfiprintf_r+0x152>
 8004534:	2340      	movs	r3, #64	; 0x40
 8004536:	eba0 000a 	sub.w	r0, r0, sl
 800453a:	fa03 f000 	lsl.w	r0, r3, r0
 800453e:	9b04      	ldr	r3, [sp, #16]
 8004540:	4303      	orrs	r3, r0
 8004542:	3401      	adds	r4, #1
 8004544:	9304      	str	r3, [sp, #16]
 8004546:	f814 1b01 	ldrb.w	r1, [r4], #1
 800454a:	4826      	ldr	r0, [pc, #152]	; (80045e4 <_svfiprintf_r+0x1f0>)
 800454c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004550:	2206      	movs	r2, #6
 8004552:	f7fb fe4d 	bl	80001f0 <memchr>
 8004556:	2800      	cmp	r0, #0
 8004558:	d038      	beq.n	80045cc <_svfiprintf_r+0x1d8>
 800455a:	4b23      	ldr	r3, [pc, #140]	; (80045e8 <_svfiprintf_r+0x1f4>)
 800455c:	bb1b      	cbnz	r3, 80045a6 <_svfiprintf_r+0x1b2>
 800455e:	9b03      	ldr	r3, [sp, #12]
 8004560:	3307      	adds	r3, #7
 8004562:	f023 0307 	bic.w	r3, r3, #7
 8004566:	3308      	adds	r3, #8
 8004568:	9303      	str	r3, [sp, #12]
 800456a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800456c:	4433      	add	r3, r6
 800456e:	9309      	str	r3, [sp, #36]	; 0x24
 8004570:	e767      	b.n	8004442 <_svfiprintf_r+0x4e>
 8004572:	fb0c 3202 	mla	r2, ip, r2, r3
 8004576:	460c      	mov	r4, r1
 8004578:	2001      	movs	r0, #1
 800457a:	e7a5      	b.n	80044c8 <_svfiprintf_r+0xd4>
 800457c:	2300      	movs	r3, #0
 800457e:	3401      	adds	r4, #1
 8004580:	9305      	str	r3, [sp, #20]
 8004582:	4619      	mov	r1, r3
 8004584:	f04f 0c0a 	mov.w	ip, #10
 8004588:	4620      	mov	r0, r4
 800458a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800458e:	3a30      	subs	r2, #48	; 0x30
 8004590:	2a09      	cmp	r2, #9
 8004592:	d903      	bls.n	800459c <_svfiprintf_r+0x1a8>
 8004594:	2b00      	cmp	r3, #0
 8004596:	d0c5      	beq.n	8004524 <_svfiprintf_r+0x130>
 8004598:	9105      	str	r1, [sp, #20]
 800459a:	e7c3      	b.n	8004524 <_svfiprintf_r+0x130>
 800459c:	fb0c 2101 	mla	r1, ip, r1, r2
 80045a0:	4604      	mov	r4, r0
 80045a2:	2301      	movs	r3, #1
 80045a4:	e7f0      	b.n	8004588 <_svfiprintf_r+0x194>
 80045a6:	ab03      	add	r3, sp, #12
 80045a8:	9300      	str	r3, [sp, #0]
 80045aa:	462a      	mov	r2, r5
 80045ac:	4b0f      	ldr	r3, [pc, #60]	; (80045ec <_svfiprintf_r+0x1f8>)
 80045ae:	a904      	add	r1, sp, #16
 80045b0:	4638      	mov	r0, r7
 80045b2:	f3af 8000 	nop.w
 80045b6:	1c42      	adds	r2, r0, #1
 80045b8:	4606      	mov	r6, r0
 80045ba:	d1d6      	bne.n	800456a <_svfiprintf_r+0x176>
 80045bc:	89ab      	ldrh	r3, [r5, #12]
 80045be:	065b      	lsls	r3, r3, #25
 80045c0:	f53f af2c 	bmi.w	800441c <_svfiprintf_r+0x28>
 80045c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80045c6:	b01d      	add	sp, #116	; 0x74
 80045c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045cc:	ab03      	add	r3, sp, #12
 80045ce:	9300      	str	r3, [sp, #0]
 80045d0:	462a      	mov	r2, r5
 80045d2:	4b06      	ldr	r3, [pc, #24]	; (80045ec <_svfiprintf_r+0x1f8>)
 80045d4:	a904      	add	r1, sp, #16
 80045d6:	4638      	mov	r0, r7
 80045d8:	f000 f9d4 	bl	8004984 <_printf_i>
 80045dc:	e7eb      	b.n	80045b6 <_svfiprintf_r+0x1c2>
 80045de:	bf00      	nop
 80045e0:	08004f88 	.word	0x08004f88
 80045e4:	08004f92 	.word	0x08004f92
 80045e8:	00000000 	.word	0x00000000
 80045ec:	0800433d 	.word	0x0800433d
 80045f0:	08004f8e 	.word	0x08004f8e

080045f4 <__sfputc_r>:
 80045f4:	6893      	ldr	r3, [r2, #8]
 80045f6:	3b01      	subs	r3, #1
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	b410      	push	{r4}
 80045fc:	6093      	str	r3, [r2, #8]
 80045fe:	da08      	bge.n	8004612 <__sfputc_r+0x1e>
 8004600:	6994      	ldr	r4, [r2, #24]
 8004602:	42a3      	cmp	r3, r4
 8004604:	db01      	blt.n	800460a <__sfputc_r+0x16>
 8004606:	290a      	cmp	r1, #10
 8004608:	d103      	bne.n	8004612 <__sfputc_r+0x1e>
 800460a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800460e:	f7ff bba9 	b.w	8003d64 <__swbuf_r>
 8004612:	6813      	ldr	r3, [r2, #0]
 8004614:	1c58      	adds	r0, r3, #1
 8004616:	6010      	str	r0, [r2, #0]
 8004618:	7019      	strb	r1, [r3, #0]
 800461a:	4608      	mov	r0, r1
 800461c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004620:	4770      	bx	lr

08004622 <__sfputs_r>:
 8004622:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004624:	4606      	mov	r6, r0
 8004626:	460f      	mov	r7, r1
 8004628:	4614      	mov	r4, r2
 800462a:	18d5      	adds	r5, r2, r3
 800462c:	42ac      	cmp	r4, r5
 800462e:	d101      	bne.n	8004634 <__sfputs_r+0x12>
 8004630:	2000      	movs	r0, #0
 8004632:	e007      	b.n	8004644 <__sfputs_r+0x22>
 8004634:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004638:	463a      	mov	r2, r7
 800463a:	4630      	mov	r0, r6
 800463c:	f7ff ffda 	bl	80045f4 <__sfputc_r>
 8004640:	1c43      	adds	r3, r0, #1
 8004642:	d1f3      	bne.n	800462c <__sfputs_r+0xa>
 8004644:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004648 <_vfiprintf_r>:
 8004648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800464c:	460d      	mov	r5, r1
 800464e:	b09d      	sub	sp, #116	; 0x74
 8004650:	4614      	mov	r4, r2
 8004652:	4698      	mov	r8, r3
 8004654:	4606      	mov	r6, r0
 8004656:	b118      	cbz	r0, 8004660 <_vfiprintf_r+0x18>
 8004658:	6983      	ldr	r3, [r0, #24]
 800465a:	b90b      	cbnz	r3, 8004660 <_vfiprintf_r+0x18>
 800465c:	f7ff fd5c 	bl	8004118 <__sinit>
 8004660:	4b89      	ldr	r3, [pc, #548]	; (8004888 <_vfiprintf_r+0x240>)
 8004662:	429d      	cmp	r5, r3
 8004664:	d11b      	bne.n	800469e <_vfiprintf_r+0x56>
 8004666:	6875      	ldr	r5, [r6, #4]
 8004668:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800466a:	07d9      	lsls	r1, r3, #31
 800466c:	d405      	bmi.n	800467a <_vfiprintf_r+0x32>
 800466e:	89ab      	ldrh	r3, [r5, #12]
 8004670:	059a      	lsls	r2, r3, #22
 8004672:	d402      	bmi.n	800467a <_vfiprintf_r+0x32>
 8004674:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004676:	f7ff fded 	bl	8004254 <__retarget_lock_acquire_recursive>
 800467a:	89ab      	ldrh	r3, [r5, #12]
 800467c:	071b      	lsls	r3, r3, #28
 800467e:	d501      	bpl.n	8004684 <_vfiprintf_r+0x3c>
 8004680:	692b      	ldr	r3, [r5, #16]
 8004682:	b9eb      	cbnz	r3, 80046c0 <_vfiprintf_r+0x78>
 8004684:	4629      	mov	r1, r5
 8004686:	4630      	mov	r0, r6
 8004688:	f7ff fbbe 	bl	8003e08 <__swsetup_r>
 800468c:	b1c0      	cbz	r0, 80046c0 <_vfiprintf_r+0x78>
 800468e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004690:	07dc      	lsls	r4, r3, #31
 8004692:	d50e      	bpl.n	80046b2 <_vfiprintf_r+0x6a>
 8004694:	f04f 30ff 	mov.w	r0, #4294967295
 8004698:	b01d      	add	sp, #116	; 0x74
 800469a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800469e:	4b7b      	ldr	r3, [pc, #492]	; (800488c <_vfiprintf_r+0x244>)
 80046a0:	429d      	cmp	r5, r3
 80046a2:	d101      	bne.n	80046a8 <_vfiprintf_r+0x60>
 80046a4:	68b5      	ldr	r5, [r6, #8]
 80046a6:	e7df      	b.n	8004668 <_vfiprintf_r+0x20>
 80046a8:	4b79      	ldr	r3, [pc, #484]	; (8004890 <_vfiprintf_r+0x248>)
 80046aa:	429d      	cmp	r5, r3
 80046ac:	bf08      	it	eq
 80046ae:	68f5      	ldreq	r5, [r6, #12]
 80046b0:	e7da      	b.n	8004668 <_vfiprintf_r+0x20>
 80046b2:	89ab      	ldrh	r3, [r5, #12]
 80046b4:	0598      	lsls	r0, r3, #22
 80046b6:	d4ed      	bmi.n	8004694 <_vfiprintf_r+0x4c>
 80046b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80046ba:	f7ff fdcc 	bl	8004256 <__retarget_lock_release_recursive>
 80046be:	e7e9      	b.n	8004694 <_vfiprintf_r+0x4c>
 80046c0:	2300      	movs	r3, #0
 80046c2:	9309      	str	r3, [sp, #36]	; 0x24
 80046c4:	2320      	movs	r3, #32
 80046c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80046ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80046ce:	2330      	movs	r3, #48	; 0x30
 80046d0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004894 <_vfiprintf_r+0x24c>
 80046d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80046d8:	f04f 0901 	mov.w	r9, #1
 80046dc:	4623      	mov	r3, r4
 80046de:	469a      	mov	sl, r3
 80046e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80046e4:	b10a      	cbz	r2, 80046ea <_vfiprintf_r+0xa2>
 80046e6:	2a25      	cmp	r2, #37	; 0x25
 80046e8:	d1f9      	bne.n	80046de <_vfiprintf_r+0x96>
 80046ea:	ebba 0b04 	subs.w	fp, sl, r4
 80046ee:	d00b      	beq.n	8004708 <_vfiprintf_r+0xc0>
 80046f0:	465b      	mov	r3, fp
 80046f2:	4622      	mov	r2, r4
 80046f4:	4629      	mov	r1, r5
 80046f6:	4630      	mov	r0, r6
 80046f8:	f7ff ff93 	bl	8004622 <__sfputs_r>
 80046fc:	3001      	adds	r0, #1
 80046fe:	f000 80aa 	beq.w	8004856 <_vfiprintf_r+0x20e>
 8004702:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004704:	445a      	add	r2, fp
 8004706:	9209      	str	r2, [sp, #36]	; 0x24
 8004708:	f89a 3000 	ldrb.w	r3, [sl]
 800470c:	2b00      	cmp	r3, #0
 800470e:	f000 80a2 	beq.w	8004856 <_vfiprintf_r+0x20e>
 8004712:	2300      	movs	r3, #0
 8004714:	f04f 32ff 	mov.w	r2, #4294967295
 8004718:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800471c:	f10a 0a01 	add.w	sl, sl, #1
 8004720:	9304      	str	r3, [sp, #16]
 8004722:	9307      	str	r3, [sp, #28]
 8004724:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004728:	931a      	str	r3, [sp, #104]	; 0x68
 800472a:	4654      	mov	r4, sl
 800472c:	2205      	movs	r2, #5
 800472e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004732:	4858      	ldr	r0, [pc, #352]	; (8004894 <_vfiprintf_r+0x24c>)
 8004734:	f7fb fd5c 	bl	80001f0 <memchr>
 8004738:	9a04      	ldr	r2, [sp, #16]
 800473a:	b9d8      	cbnz	r0, 8004774 <_vfiprintf_r+0x12c>
 800473c:	06d1      	lsls	r1, r2, #27
 800473e:	bf44      	itt	mi
 8004740:	2320      	movmi	r3, #32
 8004742:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004746:	0713      	lsls	r3, r2, #28
 8004748:	bf44      	itt	mi
 800474a:	232b      	movmi	r3, #43	; 0x2b
 800474c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004750:	f89a 3000 	ldrb.w	r3, [sl]
 8004754:	2b2a      	cmp	r3, #42	; 0x2a
 8004756:	d015      	beq.n	8004784 <_vfiprintf_r+0x13c>
 8004758:	9a07      	ldr	r2, [sp, #28]
 800475a:	4654      	mov	r4, sl
 800475c:	2000      	movs	r0, #0
 800475e:	f04f 0c0a 	mov.w	ip, #10
 8004762:	4621      	mov	r1, r4
 8004764:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004768:	3b30      	subs	r3, #48	; 0x30
 800476a:	2b09      	cmp	r3, #9
 800476c:	d94e      	bls.n	800480c <_vfiprintf_r+0x1c4>
 800476e:	b1b0      	cbz	r0, 800479e <_vfiprintf_r+0x156>
 8004770:	9207      	str	r2, [sp, #28]
 8004772:	e014      	b.n	800479e <_vfiprintf_r+0x156>
 8004774:	eba0 0308 	sub.w	r3, r0, r8
 8004778:	fa09 f303 	lsl.w	r3, r9, r3
 800477c:	4313      	orrs	r3, r2
 800477e:	9304      	str	r3, [sp, #16]
 8004780:	46a2      	mov	sl, r4
 8004782:	e7d2      	b.n	800472a <_vfiprintf_r+0xe2>
 8004784:	9b03      	ldr	r3, [sp, #12]
 8004786:	1d19      	adds	r1, r3, #4
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	9103      	str	r1, [sp, #12]
 800478c:	2b00      	cmp	r3, #0
 800478e:	bfbb      	ittet	lt
 8004790:	425b      	neglt	r3, r3
 8004792:	f042 0202 	orrlt.w	r2, r2, #2
 8004796:	9307      	strge	r3, [sp, #28]
 8004798:	9307      	strlt	r3, [sp, #28]
 800479a:	bfb8      	it	lt
 800479c:	9204      	strlt	r2, [sp, #16]
 800479e:	7823      	ldrb	r3, [r4, #0]
 80047a0:	2b2e      	cmp	r3, #46	; 0x2e
 80047a2:	d10c      	bne.n	80047be <_vfiprintf_r+0x176>
 80047a4:	7863      	ldrb	r3, [r4, #1]
 80047a6:	2b2a      	cmp	r3, #42	; 0x2a
 80047a8:	d135      	bne.n	8004816 <_vfiprintf_r+0x1ce>
 80047aa:	9b03      	ldr	r3, [sp, #12]
 80047ac:	1d1a      	adds	r2, r3, #4
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	9203      	str	r2, [sp, #12]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	bfb8      	it	lt
 80047b6:	f04f 33ff 	movlt.w	r3, #4294967295
 80047ba:	3402      	adds	r4, #2
 80047bc:	9305      	str	r3, [sp, #20]
 80047be:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80048a4 <_vfiprintf_r+0x25c>
 80047c2:	7821      	ldrb	r1, [r4, #0]
 80047c4:	2203      	movs	r2, #3
 80047c6:	4650      	mov	r0, sl
 80047c8:	f7fb fd12 	bl	80001f0 <memchr>
 80047cc:	b140      	cbz	r0, 80047e0 <_vfiprintf_r+0x198>
 80047ce:	2340      	movs	r3, #64	; 0x40
 80047d0:	eba0 000a 	sub.w	r0, r0, sl
 80047d4:	fa03 f000 	lsl.w	r0, r3, r0
 80047d8:	9b04      	ldr	r3, [sp, #16]
 80047da:	4303      	orrs	r3, r0
 80047dc:	3401      	adds	r4, #1
 80047de:	9304      	str	r3, [sp, #16]
 80047e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047e4:	482c      	ldr	r0, [pc, #176]	; (8004898 <_vfiprintf_r+0x250>)
 80047e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80047ea:	2206      	movs	r2, #6
 80047ec:	f7fb fd00 	bl	80001f0 <memchr>
 80047f0:	2800      	cmp	r0, #0
 80047f2:	d03f      	beq.n	8004874 <_vfiprintf_r+0x22c>
 80047f4:	4b29      	ldr	r3, [pc, #164]	; (800489c <_vfiprintf_r+0x254>)
 80047f6:	bb1b      	cbnz	r3, 8004840 <_vfiprintf_r+0x1f8>
 80047f8:	9b03      	ldr	r3, [sp, #12]
 80047fa:	3307      	adds	r3, #7
 80047fc:	f023 0307 	bic.w	r3, r3, #7
 8004800:	3308      	adds	r3, #8
 8004802:	9303      	str	r3, [sp, #12]
 8004804:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004806:	443b      	add	r3, r7
 8004808:	9309      	str	r3, [sp, #36]	; 0x24
 800480a:	e767      	b.n	80046dc <_vfiprintf_r+0x94>
 800480c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004810:	460c      	mov	r4, r1
 8004812:	2001      	movs	r0, #1
 8004814:	e7a5      	b.n	8004762 <_vfiprintf_r+0x11a>
 8004816:	2300      	movs	r3, #0
 8004818:	3401      	adds	r4, #1
 800481a:	9305      	str	r3, [sp, #20]
 800481c:	4619      	mov	r1, r3
 800481e:	f04f 0c0a 	mov.w	ip, #10
 8004822:	4620      	mov	r0, r4
 8004824:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004828:	3a30      	subs	r2, #48	; 0x30
 800482a:	2a09      	cmp	r2, #9
 800482c:	d903      	bls.n	8004836 <_vfiprintf_r+0x1ee>
 800482e:	2b00      	cmp	r3, #0
 8004830:	d0c5      	beq.n	80047be <_vfiprintf_r+0x176>
 8004832:	9105      	str	r1, [sp, #20]
 8004834:	e7c3      	b.n	80047be <_vfiprintf_r+0x176>
 8004836:	fb0c 2101 	mla	r1, ip, r1, r2
 800483a:	4604      	mov	r4, r0
 800483c:	2301      	movs	r3, #1
 800483e:	e7f0      	b.n	8004822 <_vfiprintf_r+0x1da>
 8004840:	ab03      	add	r3, sp, #12
 8004842:	9300      	str	r3, [sp, #0]
 8004844:	462a      	mov	r2, r5
 8004846:	4b16      	ldr	r3, [pc, #88]	; (80048a0 <_vfiprintf_r+0x258>)
 8004848:	a904      	add	r1, sp, #16
 800484a:	4630      	mov	r0, r6
 800484c:	f3af 8000 	nop.w
 8004850:	4607      	mov	r7, r0
 8004852:	1c78      	adds	r0, r7, #1
 8004854:	d1d6      	bne.n	8004804 <_vfiprintf_r+0x1bc>
 8004856:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004858:	07d9      	lsls	r1, r3, #31
 800485a:	d405      	bmi.n	8004868 <_vfiprintf_r+0x220>
 800485c:	89ab      	ldrh	r3, [r5, #12]
 800485e:	059a      	lsls	r2, r3, #22
 8004860:	d402      	bmi.n	8004868 <_vfiprintf_r+0x220>
 8004862:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004864:	f7ff fcf7 	bl	8004256 <__retarget_lock_release_recursive>
 8004868:	89ab      	ldrh	r3, [r5, #12]
 800486a:	065b      	lsls	r3, r3, #25
 800486c:	f53f af12 	bmi.w	8004694 <_vfiprintf_r+0x4c>
 8004870:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004872:	e711      	b.n	8004698 <_vfiprintf_r+0x50>
 8004874:	ab03      	add	r3, sp, #12
 8004876:	9300      	str	r3, [sp, #0]
 8004878:	462a      	mov	r2, r5
 800487a:	4b09      	ldr	r3, [pc, #36]	; (80048a0 <_vfiprintf_r+0x258>)
 800487c:	a904      	add	r1, sp, #16
 800487e:	4630      	mov	r0, r6
 8004880:	f000 f880 	bl	8004984 <_printf_i>
 8004884:	e7e4      	b.n	8004850 <_vfiprintf_r+0x208>
 8004886:	bf00      	nop
 8004888:	08004f48 	.word	0x08004f48
 800488c:	08004f68 	.word	0x08004f68
 8004890:	08004f28 	.word	0x08004f28
 8004894:	08004f88 	.word	0x08004f88
 8004898:	08004f92 	.word	0x08004f92
 800489c:	00000000 	.word	0x00000000
 80048a0:	08004623 	.word	0x08004623
 80048a4:	08004f8e 	.word	0x08004f8e

080048a8 <_printf_common>:
 80048a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048ac:	4616      	mov	r6, r2
 80048ae:	4699      	mov	r9, r3
 80048b0:	688a      	ldr	r2, [r1, #8]
 80048b2:	690b      	ldr	r3, [r1, #16]
 80048b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80048b8:	4293      	cmp	r3, r2
 80048ba:	bfb8      	it	lt
 80048bc:	4613      	movlt	r3, r2
 80048be:	6033      	str	r3, [r6, #0]
 80048c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80048c4:	4607      	mov	r7, r0
 80048c6:	460c      	mov	r4, r1
 80048c8:	b10a      	cbz	r2, 80048ce <_printf_common+0x26>
 80048ca:	3301      	adds	r3, #1
 80048cc:	6033      	str	r3, [r6, #0]
 80048ce:	6823      	ldr	r3, [r4, #0]
 80048d0:	0699      	lsls	r1, r3, #26
 80048d2:	bf42      	ittt	mi
 80048d4:	6833      	ldrmi	r3, [r6, #0]
 80048d6:	3302      	addmi	r3, #2
 80048d8:	6033      	strmi	r3, [r6, #0]
 80048da:	6825      	ldr	r5, [r4, #0]
 80048dc:	f015 0506 	ands.w	r5, r5, #6
 80048e0:	d106      	bne.n	80048f0 <_printf_common+0x48>
 80048e2:	f104 0a19 	add.w	sl, r4, #25
 80048e6:	68e3      	ldr	r3, [r4, #12]
 80048e8:	6832      	ldr	r2, [r6, #0]
 80048ea:	1a9b      	subs	r3, r3, r2
 80048ec:	42ab      	cmp	r3, r5
 80048ee:	dc26      	bgt.n	800493e <_printf_common+0x96>
 80048f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80048f4:	1e13      	subs	r3, r2, #0
 80048f6:	6822      	ldr	r2, [r4, #0]
 80048f8:	bf18      	it	ne
 80048fa:	2301      	movne	r3, #1
 80048fc:	0692      	lsls	r2, r2, #26
 80048fe:	d42b      	bmi.n	8004958 <_printf_common+0xb0>
 8004900:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004904:	4649      	mov	r1, r9
 8004906:	4638      	mov	r0, r7
 8004908:	47c0      	blx	r8
 800490a:	3001      	adds	r0, #1
 800490c:	d01e      	beq.n	800494c <_printf_common+0xa4>
 800490e:	6823      	ldr	r3, [r4, #0]
 8004910:	68e5      	ldr	r5, [r4, #12]
 8004912:	6832      	ldr	r2, [r6, #0]
 8004914:	f003 0306 	and.w	r3, r3, #6
 8004918:	2b04      	cmp	r3, #4
 800491a:	bf08      	it	eq
 800491c:	1aad      	subeq	r5, r5, r2
 800491e:	68a3      	ldr	r3, [r4, #8]
 8004920:	6922      	ldr	r2, [r4, #16]
 8004922:	bf0c      	ite	eq
 8004924:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004928:	2500      	movne	r5, #0
 800492a:	4293      	cmp	r3, r2
 800492c:	bfc4      	itt	gt
 800492e:	1a9b      	subgt	r3, r3, r2
 8004930:	18ed      	addgt	r5, r5, r3
 8004932:	2600      	movs	r6, #0
 8004934:	341a      	adds	r4, #26
 8004936:	42b5      	cmp	r5, r6
 8004938:	d11a      	bne.n	8004970 <_printf_common+0xc8>
 800493a:	2000      	movs	r0, #0
 800493c:	e008      	b.n	8004950 <_printf_common+0xa8>
 800493e:	2301      	movs	r3, #1
 8004940:	4652      	mov	r2, sl
 8004942:	4649      	mov	r1, r9
 8004944:	4638      	mov	r0, r7
 8004946:	47c0      	blx	r8
 8004948:	3001      	adds	r0, #1
 800494a:	d103      	bne.n	8004954 <_printf_common+0xac>
 800494c:	f04f 30ff 	mov.w	r0, #4294967295
 8004950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004954:	3501      	adds	r5, #1
 8004956:	e7c6      	b.n	80048e6 <_printf_common+0x3e>
 8004958:	18e1      	adds	r1, r4, r3
 800495a:	1c5a      	adds	r2, r3, #1
 800495c:	2030      	movs	r0, #48	; 0x30
 800495e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004962:	4422      	add	r2, r4
 8004964:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004968:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800496c:	3302      	adds	r3, #2
 800496e:	e7c7      	b.n	8004900 <_printf_common+0x58>
 8004970:	2301      	movs	r3, #1
 8004972:	4622      	mov	r2, r4
 8004974:	4649      	mov	r1, r9
 8004976:	4638      	mov	r0, r7
 8004978:	47c0      	blx	r8
 800497a:	3001      	adds	r0, #1
 800497c:	d0e6      	beq.n	800494c <_printf_common+0xa4>
 800497e:	3601      	adds	r6, #1
 8004980:	e7d9      	b.n	8004936 <_printf_common+0x8e>
	...

08004984 <_printf_i>:
 8004984:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004988:	7e0f      	ldrb	r7, [r1, #24]
 800498a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800498c:	2f78      	cmp	r7, #120	; 0x78
 800498e:	4691      	mov	r9, r2
 8004990:	4680      	mov	r8, r0
 8004992:	460c      	mov	r4, r1
 8004994:	469a      	mov	sl, r3
 8004996:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800499a:	d807      	bhi.n	80049ac <_printf_i+0x28>
 800499c:	2f62      	cmp	r7, #98	; 0x62
 800499e:	d80a      	bhi.n	80049b6 <_printf_i+0x32>
 80049a0:	2f00      	cmp	r7, #0
 80049a2:	f000 80d8 	beq.w	8004b56 <_printf_i+0x1d2>
 80049a6:	2f58      	cmp	r7, #88	; 0x58
 80049a8:	f000 80a3 	beq.w	8004af2 <_printf_i+0x16e>
 80049ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80049b4:	e03a      	b.n	8004a2c <_printf_i+0xa8>
 80049b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80049ba:	2b15      	cmp	r3, #21
 80049bc:	d8f6      	bhi.n	80049ac <_printf_i+0x28>
 80049be:	a101      	add	r1, pc, #4	; (adr r1, 80049c4 <_printf_i+0x40>)
 80049c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80049c4:	08004a1d 	.word	0x08004a1d
 80049c8:	08004a31 	.word	0x08004a31
 80049cc:	080049ad 	.word	0x080049ad
 80049d0:	080049ad 	.word	0x080049ad
 80049d4:	080049ad 	.word	0x080049ad
 80049d8:	080049ad 	.word	0x080049ad
 80049dc:	08004a31 	.word	0x08004a31
 80049e0:	080049ad 	.word	0x080049ad
 80049e4:	080049ad 	.word	0x080049ad
 80049e8:	080049ad 	.word	0x080049ad
 80049ec:	080049ad 	.word	0x080049ad
 80049f0:	08004b3d 	.word	0x08004b3d
 80049f4:	08004a61 	.word	0x08004a61
 80049f8:	08004b1f 	.word	0x08004b1f
 80049fc:	080049ad 	.word	0x080049ad
 8004a00:	080049ad 	.word	0x080049ad
 8004a04:	08004b5f 	.word	0x08004b5f
 8004a08:	080049ad 	.word	0x080049ad
 8004a0c:	08004a61 	.word	0x08004a61
 8004a10:	080049ad 	.word	0x080049ad
 8004a14:	080049ad 	.word	0x080049ad
 8004a18:	08004b27 	.word	0x08004b27
 8004a1c:	682b      	ldr	r3, [r5, #0]
 8004a1e:	1d1a      	adds	r2, r3, #4
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	602a      	str	r2, [r5, #0]
 8004a24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e0a3      	b.n	8004b78 <_printf_i+0x1f4>
 8004a30:	6820      	ldr	r0, [r4, #0]
 8004a32:	6829      	ldr	r1, [r5, #0]
 8004a34:	0606      	lsls	r6, r0, #24
 8004a36:	f101 0304 	add.w	r3, r1, #4
 8004a3a:	d50a      	bpl.n	8004a52 <_printf_i+0xce>
 8004a3c:	680e      	ldr	r6, [r1, #0]
 8004a3e:	602b      	str	r3, [r5, #0]
 8004a40:	2e00      	cmp	r6, #0
 8004a42:	da03      	bge.n	8004a4c <_printf_i+0xc8>
 8004a44:	232d      	movs	r3, #45	; 0x2d
 8004a46:	4276      	negs	r6, r6
 8004a48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a4c:	485e      	ldr	r0, [pc, #376]	; (8004bc8 <_printf_i+0x244>)
 8004a4e:	230a      	movs	r3, #10
 8004a50:	e019      	b.n	8004a86 <_printf_i+0x102>
 8004a52:	680e      	ldr	r6, [r1, #0]
 8004a54:	602b      	str	r3, [r5, #0]
 8004a56:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004a5a:	bf18      	it	ne
 8004a5c:	b236      	sxthne	r6, r6
 8004a5e:	e7ef      	b.n	8004a40 <_printf_i+0xbc>
 8004a60:	682b      	ldr	r3, [r5, #0]
 8004a62:	6820      	ldr	r0, [r4, #0]
 8004a64:	1d19      	adds	r1, r3, #4
 8004a66:	6029      	str	r1, [r5, #0]
 8004a68:	0601      	lsls	r1, r0, #24
 8004a6a:	d501      	bpl.n	8004a70 <_printf_i+0xec>
 8004a6c:	681e      	ldr	r6, [r3, #0]
 8004a6e:	e002      	b.n	8004a76 <_printf_i+0xf2>
 8004a70:	0646      	lsls	r6, r0, #25
 8004a72:	d5fb      	bpl.n	8004a6c <_printf_i+0xe8>
 8004a74:	881e      	ldrh	r6, [r3, #0]
 8004a76:	4854      	ldr	r0, [pc, #336]	; (8004bc8 <_printf_i+0x244>)
 8004a78:	2f6f      	cmp	r7, #111	; 0x6f
 8004a7a:	bf0c      	ite	eq
 8004a7c:	2308      	moveq	r3, #8
 8004a7e:	230a      	movne	r3, #10
 8004a80:	2100      	movs	r1, #0
 8004a82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a86:	6865      	ldr	r5, [r4, #4]
 8004a88:	60a5      	str	r5, [r4, #8]
 8004a8a:	2d00      	cmp	r5, #0
 8004a8c:	bfa2      	ittt	ge
 8004a8e:	6821      	ldrge	r1, [r4, #0]
 8004a90:	f021 0104 	bicge.w	r1, r1, #4
 8004a94:	6021      	strge	r1, [r4, #0]
 8004a96:	b90e      	cbnz	r6, 8004a9c <_printf_i+0x118>
 8004a98:	2d00      	cmp	r5, #0
 8004a9a:	d04d      	beq.n	8004b38 <_printf_i+0x1b4>
 8004a9c:	4615      	mov	r5, r2
 8004a9e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004aa2:	fb03 6711 	mls	r7, r3, r1, r6
 8004aa6:	5dc7      	ldrb	r7, [r0, r7]
 8004aa8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004aac:	4637      	mov	r7, r6
 8004aae:	42bb      	cmp	r3, r7
 8004ab0:	460e      	mov	r6, r1
 8004ab2:	d9f4      	bls.n	8004a9e <_printf_i+0x11a>
 8004ab4:	2b08      	cmp	r3, #8
 8004ab6:	d10b      	bne.n	8004ad0 <_printf_i+0x14c>
 8004ab8:	6823      	ldr	r3, [r4, #0]
 8004aba:	07de      	lsls	r6, r3, #31
 8004abc:	d508      	bpl.n	8004ad0 <_printf_i+0x14c>
 8004abe:	6923      	ldr	r3, [r4, #16]
 8004ac0:	6861      	ldr	r1, [r4, #4]
 8004ac2:	4299      	cmp	r1, r3
 8004ac4:	bfde      	ittt	le
 8004ac6:	2330      	movle	r3, #48	; 0x30
 8004ac8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004acc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004ad0:	1b52      	subs	r2, r2, r5
 8004ad2:	6122      	str	r2, [r4, #16]
 8004ad4:	f8cd a000 	str.w	sl, [sp]
 8004ad8:	464b      	mov	r3, r9
 8004ada:	aa03      	add	r2, sp, #12
 8004adc:	4621      	mov	r1, r4
 8004ade:	4640      	mov	r0, r8
 8004ae0:	f7ff fee2 	bl	80048a8 <_printf_common>
 8004ae4:	3001      	adds	r0, #1
 8004ae6:	d14c      	bne.n	8004b82 <_printf_i+0x1fe>
 8004ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8004aec:	b004      	add	sp, #16
 8004aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004af2:	4835      	ldr	r0, [pc, #212]	; (8004bc8 <_printf_i+0x244>)
 8004af4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004af8:	6829      	ldr	r1, [r5, #0]
 8004afa:	6823      	ldr	r3, [r4, #0]
 8004afc:	f851 6b04 	ldr.w	r6, [r1], #4
 8004b00:	6029      	str	r1, [r5, #0]
 8004b02:	061d      	lsls	r5, r3, #24
 8004b04:	d514      	bpl.n	8004b30 <_printf_i+0x1ac>
 8004b06:	07df      	lsls	r7, r3, #31
 8004b08:	bf44      	itt	mi
 8004b0a:	f043 0320 	orrmi.w	r3, r3, #32
 8004b0e:	6023      	strmi	r3, [r4, #0]
 8004b10:	b91e      	cbnz	r6, 8004b1a <_printf_i+0x196>
 8004b12:	6823      	ldr	r3, [r4, #0]
 8004b14:	f023 0320 	bic.w	r3, r3, #32
 8004b18:	6023      	str	r3, [r4, #0]
 8004b1a:	2310      	movs	r3, #16
 8004b1c:	e7b0      	b.n	8004a80 <_printf_i+0xfc>
 8004b1e:	6823      	ldr	r3, [r4, #0]
 8004b20:	f043 0320 	orr.w	r3, r3, #32
 8004b24:	6023      	str	r3, [r4, #0]
 8004b26:	2378      	movs	r3, #120	; 0x78
 8004b28:	4828      	ldr	r0, [pc, #160]	; (8004bcc <_printf_i+0x248>)
 8004b2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004b2e:	e7e3      	b.n	8004af8 <_printf_i+0x174>
 8004b30:	0659      	lsls	r1, r3, #25
 8004b32:	bf48      	it	mi
 8004b34:	b2b6      	uxthmi	r6, r6
 8004b36:	e7e6      	b.n	8004b06 <_printf_i+0x182>
 8004b38:	4615      	mov	r5, r2
 8004b3a:	e7bb      	b.n	8004ab4 <_printf_i+0x130>
 8004b3c:	682b      	ldr	r3, [r5, #0]
 8004b3e:	6826      	ldr	r6, [r4, #0]
 8004b40:	6961      	ldr	r1, [r4, #20]
 8004b42:	1d18      	adds	r0, r3, #4
 8004b44:	6028      	str	r0, [r5, #0]
 8004b46:	0635      	lsls	r5, r6, #24
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	d501      	bpl.n	8004b50 <_printf_i+0x1cc>
 8004b4c:	6019      	str	r1, [r3, #0]
 8004b4e:	e002      	b.n	8004b56 <_printf_i+0x1d2>
 8004b50:	0670      	lsls	r0, r6, #25
 8004b52:	d5fb      	bpl.n	8004b4c <_printf_i+0x1c8>
 8004b54:	8019      	strh	r1, [r3, #0]
 8004b56:	2300      	movs	r3, #0
 8004b58:	6123      	str	r3, [r4, #16]
 8004b5a:	4615      	mov	r5, r2
 8004b5c:	e7ba      	b.n	8004ad4 <_printf_i+0x150>
 8004b5e:	682b      	ldr	r3, [r5, #0]
 8004b60:	1d1a      	adds	r2, r3, #4
 8004b62:	602a      	str	r2, [r5, #0]
 8004b64:	681d      	ldr	r5, [r3, #0]
 8004b66:	6862      	ldr	r2, [r4, #4]
 8004b68:	2100      	movs	r1, #0
 8004b6a:	4628      	mov	r0, r5
 8004b6c:	f7fb fb40 	bl	80001f0 <memchr>
 8004b70:	b108      	cbz	r0, 8004b76 <_printf_i+0x1f2>
 8004b72:	1b40      	subs	r0, r0, r5
 8004b74:	6060      	str	r0, [r4, #4]
 8004b76:	6863      	ldr	r3, [r4, #4]
 8004b78:	6123      	str	r3, [r4, #16]
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b80:	e7a8      	b.n	8004ad4 <_printf_i+0x150>
 8004b82:	6923      	ldr	r3, [r4, #16]
 8004b84:	462a      	mov	r2, r5
 8004b86:	4649      	mov	r1, r9
 8004b88:	4640      	mov	r0, r8
 8004b8a:	47d0      	blx	sl
 8004b8c:	3001      	adds	r0, #1
 8004b8e:	d0ab      	beq.n	8004ae8 <_printf_i+0x164>
 8004b90:	6823      	ldr	r3, [r4, #0]
 8004b92:	079b      	lsls	r3, r3, #30
 8004b94:	d413      	bmi.n	8004bbe <_printf_i+0x23a>
 8004b96:	68e0      	ldr	r0, [r4, #12]
 8004b98:	9b03      	ldr	r3, [sp, #12]
 8004b9a:	4298      	cmp	r0, r3
 8004b9c:	bfb8      	it	lt
 8004b9e:	4618      	movlt	r0, r3
 8004ba0:	e7a4      	b.n	8004aec <_printf_i+0x168>
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	4632      	mov	r2, r6
 8004ba6:	4649      	mov	r1, r9
 8004ba8:	4640      	mov	r0, r8
 8004baa:	47d0      	blx	sl
 8004bac:	3001      	adds	r0, #1
 8004bae:	d09b      	beq.n	8004ae8 <_printf_i+0x164>
 8004bb0:	3501      	adds	r5, #1
 8004bb2:	68e3      	ldr	r3, [r4, #12]
 8004bb4:	9903      	ldr	r1, [sp, #12]
 8004bb6:	1a5b      	subs	r3, r3, r1
 8004bb8:	42ab      	cmp	r3, r5
 8004bba:	dcf2      	bgt.n	8004ba2 <_printf_i+0x21e>
 8004bbc:	e7eb      	b.n	8004b96 <_printf_i+0x212>
 8004bbe:	2500      	movs	r5, #0
 8004bc0:	f104 0619 	add.w	r6, r4, #25
 8004bc4:	e7f5      	b.n	8004bb2 <_printf_i+0x22e>
 8004bc6:	bf00      	nop
 8004bc8:	08004f99 	.word	0x08004f99
 8004bcc:	08004faa 	.word	0x08004faa

08004bd0 <__sread>:
 8004bd0:	b510      	push	{r4, lr}
 8004bd2:	460c      	mov	r4, r1
 8004bd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bd8:	f000 f8ec 	bl	8004db4 <_read_r>
 8004bdc:	2800      	cmp	r0, #0
 8004bde:	bfab      	itete	ge
 8004be0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004be2:	89a3      	ldrhlt	r3, [r4, #12]
 8004be4:	181b      	addge	r3, r3, r0
 8004be6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004bea:	bfac      	ite	ge
 8004bec:	6563      	strge	r3, [r4, #84]	; 0x54
 8004bee:	81a3      	strhlt	r3, [r4, #12]
 8004bf0:	bd10      	pop	{r4, pc}

08004bf2 <__swrite>:
 8004bf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bf6:	461f      	mov	r7, r3
 8004bf8:	898b      	ldrh	r3, [r1, #12]
 8004bfa:	05db      	lsls	r3, r3, #23
 8004bfc:	4605      	mov	r5, r0
 8004bfe:	460c      	mov	r4, r1
 8004c00:	4616      	mov	r6, r2
 8004c02:	d505      	bpl.n	8004c10 <__swrite+0x1e>
 8004c04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c08:	2302      	movs	r3, #2
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f000 f868 	bl	8004ce0 <_lseek_r>
 8004c10:	89a3      	ldrh	r3, [r4, #12]
 8004c12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c1a:	81a3      	strh	r3, [r4, #12]
 8004c1c:	4632      	mov	r2, r6
 8004c1e:	463b      	mov	r3, r7
 8004c20:	4628      	mov	r0, r5
 8004c22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c26:	f000 b817 	b.w	8004c58 <_write_r>

08004c2a <__sseek>:
 8004c2a:	b510      	push	{r4, lr}
 8004c2c:	460c      	mov	r4, r1
 8004c2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c32:	f000 f855 	bl	8004ce0 <_lseek_r>
 8004c36:	1c43      	adds	r3, r0, #1
 8004c38:	89a3      	ldrh	r3, [r4, #12]
 8004c3a:	bf15      	itete	ne
 8004c3c:	6560      	strne	r0, [r4, #84]	; 0x54
 8004c3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004c42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004c46:	81a3      	strheq	r3, [r4, #12]
 8004c48:	bf18      	it	ne
 8004c4a:	81a3      	strhne	r3, [r4, #12]
 8004c4c:	bd10      	pop	{r4, pc}

08004c4e <__sclose>:
 8004c4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c52:	f000 b813 	b.w	8004c7c <_close_r>
	...

08004c58 <_write_r>:
 8004c58:	b538      	push	{r3, r4, r5, lr}
 8004c5a:	4d07      	ldr	r5, [pc, #28]	; (8004c78 <_write_r+0x20>)
 8004c5c:	4604      	mov	r4, r0
 8004c5e:	4608      	mov	r0, r1
 8004c60:	4611      	mov	r1, r2
 8004c62:	2200      	movs	r2, #0
 8004c64:	602a      	str	r2, [r5, #0]
 8004c66:	461a      	mov	r2, r3
 8004c68:	f7fc f801 	bl	8000c6e <_write>
 8004c6c:	1c43      	adds	r3, r0, #1
 8004c6e:	d102      	bne.n	8004c76 <_write_r+0x1e>
 8004c70:	682b      	ldr	r3, [r5, #0]
 8004c72:	b103      	cbz	r3, 8004c76 <_write_r+0x1e>
 8004c74:	6023      	str	r3, [r4, #0]
 8004c76:	bd38      	pop	{r3, r4, r5, pc}
 8004c78:	20000164 	.word	0x20000164

08004c7c <_close_r>:
 8004c7c:	b538      	push	{r3, r4, r5, lr}
 8004c7e:	4d06      	ldr	r5, [pc, #24]	; (8004c98 <_close_r+0x1c>)
 8004c80:	2300      	movs	r3, #0
 8004c82:	4604      	mov	r4, r0
 8004c84:	4608      	mov	r0, r1
 8004c86:	602b      	str	r3, [r5, #0]
 8004c88:	f7fc f80d 	bl	8000ca6 <_close>
 8004c8c:	1c43      	adds	r3, r0, #1
 8004c8e:	d102      	bne.n	8004c96 <_close_r+0x1a>
 8004c90:	682b      	ldr	r3, [r5, #0]
 8004c92:	b103      	cbz	r3, 8004c96 <_close_r+0x1a>
 8004c94:	6023      	str	r3, [r4, #0]
 8004c96:	bd38      	pop	{r3, r4, r5, pc}
 8004c98:	20000164 	.word	0x20000164

08004c9c <_fstat_r>:
 8004c9c:	b538      	push	{r3, r4, r5, lr}
 8004c9e:	4d07      	ldr	r5, [pc, #28]	; (8004cbc <_fstat_r+0x20>)
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	4604      	mov	r4, r0
 8004ca4:	4608      	mov	r0, r1
 8004ca6:	4611      	mov	r1, r2
 8004ca8:	602b      	str	r3, [r5, #0]
 8004caa:	f7fc f808 	bl	8000cbe <_fstat>
 8004cae:	1c43      	adds	r3, r0, #1
 8004cb0:	d102      	bne.n	8004cb8 <_fstat_r+0x1c>
 8004cb2:	682b      	ldr	r3, [r5, #0]
 8004cb4:	b103      	cbz	r3, 8004cb8 <_fstat_r+0x1c>
 8004cb6:	6023      	str	r3, [r4, #0]
 8004cb8:	bd38      	pop	{r3, r4, r5, pc}
 8004cba:	bf00      	nop
 8004cbc:	20000164 	.word	0x20000164

08004cc0 <_isatty_r>:
 8004cc0:	b538      	push	{r3, r4, r5, lr}
 8004cc2:	4d06      	ldr	r5, [pc, #24]	; (8004cdc <_isatty_r+0x1c>)
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	4604      	mov	r4, r0
 8004cc8:	4608      	mov	r0, r1
 8004cca:	602b      	str	r3, [r5, #0]
 8004ccc:	f7fc f807 	bl	8000cde <_isatty>
 8004cd0:	1c43      	adds	r3, r0, #1
 8004cd2:	d102      	bne.n	8004cda <_isatty_r+0x1a>
 8004cd4:	682b      	ldr	r3, [r5, #0]
 8004cd6:	b103      	cbz	r3, 8004cda <_isatty_r+0x1a>
 8004cd8:	6023      	str	r3, [r4, #0]
 8004cda:	bd38      	pop	{r3, r4, r5, pc}
 8004cdc:	20000164 	.word	0x20000164

08004ce0 <_lseek_r>:
 8004ce0:	b538      	push	{r3, r4, r5, lr}
 8004ce2:	4d07      	ldr	r5, [pc, #28]	; (8004d00 <_lseek_r+0x20>)
 8004ce4:	4604      	mov	r4, r0
 8004ce6:	4608      	mov	r0, r1
 8004ce8:	4611      	mov	r1, r2
 8004cea:	2200      	movs	r2, #0
 8004cec:	602a      	str	r2, [r5, #0]
 8004cee:	461a      	mov	r2, r3
 8004cf0:	f7fc f800 	bl	8000cf4 <_lseek>
 8004cf4:	1c43      	adds	r3, r0, #1
 8004cf6:	d102      	bne.n	8004cfe <_lseek_r+0x1e>
 8004cf8:	682b      	ldr	r3, [r5, #0]
 8004cfa:	b103      	cbz	r3, 8004cfe <_lseek_r+0x1e>
 8004cfc:	6023      	str	r3, [r4, #0]
 8004cfe:	bd38      	pop	{r3, r4, r5, pc}
 8004d00:	20000164 	.word	0x20000164

08004d04 <memcpy>:
 8004d04:	440a      	add	r2, r1
 8004d06:	4291      	cmp	r1, r2
 8004d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d0c:	d100      	bne.n	8004d10 <memcpy+0xc>
 8004d0e:	4770      	bx	lr
 8004d10:	b510      	push	{r4, lr}
 8004d12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d1a:	4291      	cmp	r1, r2
 8004d1c:	d1f9      	bne.n	8004d12 <memcpy+0xe>
 8004d1e:	bd10      	pop	{r4, pc}

08004d20 <memmove>:
 8004d20:	4288      	cmp	r0, r1
 8004d22:	b510      	push	{r4, lr}
 8004d24:	eb01 0402 	add.w	r4, r1, r2
 8004d28:	d902      	bls.n	8004d30 <memmove+0x10>
 8004d2a:	4284      	cmp	r4, r0
 8004d2c:	4623      	mov	r3, r4
 8004d2e:	d807      	bhi.n	8004d40 <memmove+0x20>
 8004d30:	1e43      	subs	r3, r0, #1
 8004d32:	42a1      	cmp	r1, r4
 8004d34:	d008      	beq.n	8004d48 <memmove+0x28>
 8004d36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004d3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004d3e:	e7f8      	b.n	8004d32 <memmove+0x12>
 8004d40:	4402      	add	r2, r0
 8004d42:	4601      	mov	r1, r0
 8004d44:	428a      	cmp	r2, r1
 8004d46:	d100      	bne.n	8004d4a <memmove+0x2a>
 8004d48:	bd10      	pop	{r4, pc}
 8004d4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004d4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004d52:	e7f7      	b.n	8004d44 <memmove+0x24>

08004d54 <_realloc_r>:
 8004d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d58:	4680      	mov	r8, r0
 8004d5a:	4614      	mov	r4, r2
 8004d5c:	460e      	mov	r6, r1
 8004d5e:	b921      	cbnz	r1, 8004d6a <_realloc_r+0x16>
 8004d60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d64:	4611      	mov	r1, r2
 8004d66:	f7fe becb 	b.w	8003b00 <_malloc_r>
 8004d6a:	b92a      	cbnz	r2, 8004d78 <_realloc_r+0x24>
 8004d6c:	f7fe fe5c 	bl	8003a28 <_free_r>
 8004d70:	4625      	mov	r5, r4
 8004d72:	4628      	mov	r0, r5
 8004d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d78:	f000 f82e 	bl	8004dd8 <_malloc_usable_size_r>
 8004d7c:	4284      	cmp	r4, r0
 8004d7e:	4607      	mov	r7, r0
 8004d80:	d802      	bhi.n	8004d88 <_realloc_r+0x34>
 8004d82:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004d86:	d812      	bhi.n	8004dae <_realloc_r+0x5a>
 8004d88:	4621      	mov	r1, r4
 8004d8a:	4640      	mov	r0, r8
 8004d8c:	f7fe feb8 	bl	8003b00 <_malloc_r>
 8004d90:	4605      	mov	r5, r0
 8004d92:	2800      	cmp	r0, #0
 8004d94:	d0ed      	beq.n	8004d72 <_realloc_r+0x1e>
 8004d96:	42bc      	cmp	r4, r7
 8004d98:	4622      	mov	r2, r4
 8004d9a:	4631      	mov	r1, r6
 8004d9c:	bf28      	it	cs
 8004d9e:	463a      	movcs	r2, r7
 8004da0:	f7ff ffb0 	bl	8004d04 <memcpy>
 8004da4:	4631      	mov	r1, r6
 8004da6:	4640      	mov	r0, r8
 8004da8:	f7fe fe3e 	bl	8003a28 <_free_r>
 8004dac:	e7e1      	b.n	8004d72 <_realloc_r+0x1e>
 8004dae:	4635      	mov	r5, r6
 8004db0:	e7df      	b.n	8004d72 <_realloc_r+0x1e>
	...

08004db4 <_read_r>:
 8004db4:	b538      	push	{r3, r4, r5, lr}
 8004db6:	4d07      	ldr	r5, [pc, #28]	; (8004dd4 <_read_r+0x20>)
 8004db8:	4604      	mov	r4, r0
 8004dba:	4608      	mov	r0, r1
 8004dbc:	4611      	mov	r1, r2
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	602a      	str	r2, [r5, #0]
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	f7fb ff36 	bl	8000c34 <_read>
 8004dc8:	1c43      	adds	r3, r0, #1
 8004dca:	d102      	bne.n	8004dd2 <_read_r+0x1e>
 8004dcc:	682b      	ldr	r3, [r5, #0]
 8004dce:	b103      	cbz	r3, 8004dd2 <_read_r+0x1e>
 8004dd0:	6023      	str	r3, [r4, #0]
 8004dd2:	bd38      	pop	{r3, r4, r5, pc}
 8004dd4:	20000164 	.word	0x20000164

08004dd8 <_malloc_usable_size_r>:
 8004dd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ddc:	1f18      	subs	r0, r3, #4
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	bfbc      	itt	lt
 8004de2:	580b      	ldrlt	r3, [r1, r0]
 8004de4:	18c0      	addlt	r0, r0, r3
 8004de6:	4770      	bx	lr

08004de8 <_init>:
 8004de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dea:	bf00      	nop
 8004dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dee:	bc08      	pop	{r3}
 8004df0:	469e      	mov	lr, r3
 8004df2:	4770      	bx	lr

08004df4 <_fini>:
 8004df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004df6:	bf00      	nop
 8004df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dfa:	bc08      	pop	{r3}
 8004dfc:	469e      	mov	lr, r3
 8004dfe:	4770      	bx	lr
