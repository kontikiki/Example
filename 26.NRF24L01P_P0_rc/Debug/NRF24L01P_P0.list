
NRF24L01P_P0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ce8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ab0  08005df4  08005df4  00015df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068a4  080068a4  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  080068a4  080068a4  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080068a4  080068a4  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068a4  080068a4  000168a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080068a8  080068a8  000168a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080068ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000778  2000006c  08006918  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007e4  08006918  000207e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY
 13 .debug_info   000473d4  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003835  00000000  00000000  000674ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000034a8  00000000  00000000  0006ace8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000027a4  00000000  00000000  0006e190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019b28  00000000  00000000  00070934  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d8f5  00000000  00000000  0008a45c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a294f  00000000  00000000  000a7d51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000ebfc  00000000  00000000  0014a6a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0015929c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000006c 	.word	0x2000006c
 8000128:	00000000 	.word	0x00000000
 800012c:	08005ddc 	.word	0x08005ddc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000070 	.word	0x20000070
 8000148:	08005ddc 	.word	0x08005ddc

0800014c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000152:	f000 fe99 	bl	8000e88 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000156:	f000 f983 	bl	8000460 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800015a:	f000 fb47 	bl	80007ec <MX_GPIO_Init>
	MX_SPI1_Init();
 800015e:	f000 f9c5 	bl	80004ec <MX_SPI1_Init>
	MX_SPI2_Init();
 8000162:	f000 f9f9 	bl	8000558 <MX_SPI2_Init>
	MX_TIM1_Init();
 8000166:	f000 fa2d 	bl	80005c4 <MX_TIM1_Init>
	MX_TIM2_Init();
 800016a:	f000 facb 	bl	8000704 <MX_TIM2_Init>

	/* USER CODE BEGIN 2 */

	u8g2_Setup_ssd1306_128x64_noname_f(&u8g2, U8G2_R0, u8x8_byte_stm32_hw_spi,
 800016e:	4baa      	ldr	r3, [pc, #680]	; (8000418 <main+0x2cc>)
 8000170:	4aaa      	ldr	r2, [pc, #680]	; (800041c <main+0x2d0>)
 8000172:	49ab      	ldr	r1, [pc, #684]	; (8000420 <main+0x2d4>)
 8000174:	48ab      	ldr	r0, [pc, #684]	; (8000424 <main+0x2d8>)
 8000176:	f003 fd21 	bl	8003bbc <u8g2_Setup_ssd1306_128x64_noname_f>
			u8x8_stm32_gpio_and_delay);

	u8g2_InitDisplay(&u8g2);
 800017a:	48aa      	ldr	r0, [pc, #680]	; (8000424 <main+0x2d8>)
 800017c:	f005 f8df 	bl	800533e <u8x8_InitDisplay>
	u8g2_SetPowerSave(&u8g2, 0);
 8000180:	2100      	movs	r1, #0
 8000182:	48a8      	ldr	r0, [pc, #672]	; (8000424 <main+0x2d8>)
 8000184:	f005 f8ea 	bl	800535c <u8x8_SetPowerSave>
	u8g2_SetFont(&u8g2, u8g2_font_inb16_mr);
 8000188:	49a7      	ldr	r1, [pc, #668]	; (8000428 <main+0x2dc>)
 800018a:	48a6      	ldr	r0, [pc, #664]	; (8000424 <main+0x2d8>)
 800018c:	f004 fac0 	bl	8004710 <u8g2_SetFont>

	nrf24l01p_rx_init(2500, _1Mbps, P0_address, P1_address);
 8000190:	4ba6      	ldr	r3, [pc, #664]	; (800042c <main+0x2e0>)
 8000192:	4aa7      	ldr	r2, [pc, #668]	; (8000430 <main+0x2e4>)
 8000194:	2100      	movs	r1, #0
 8000196:	f640 10c4 	movw	r0, #2500	; 0x9c4
 800019a:	f003 fa09 	bl	80035b0 <nrf24l01p_rx_init>
	nrf24l01p_prx_mode();
 800019e:	f003 fa9f 	bl	80036e0 <nrf24l01p_prx_mode>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80001a2:	2100      	movs	r1, #0
 80001a4:	48a3      	ldr	r0, [pc, #652]	; (8000434 <main+0x2e8>)
 80001a6:	f002 fbc5 	bl	8002934 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80001aa:	2100      	movs	r1, #0
 80001ac:	48a2      	ldr	r0, [pc, #648]	; (8000438 <main+0x2ec>)
 80001ae:	f002 fbc1 	bl	8002934 <HAL_TIM_PWM_Start>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
			if (nrf24l01p_rx_flag == 1) {
 80001b2:	4ba2      	ldr	r3, [pc, #648]	; (800043c <main+0x2f0>)
 80001b4:	781b      	ldrb	r3, [r3, #0]
 80001b6:	2b01      	cmp	r3, #1
 80001b8:	d1fb      	bne.n	80001b2 <main+0x66>
				// nrf24l01p_prx_mode();
				nrf24l01p_rx_flag = 0;
 80001ba:	4ba0      	ldr	r3, [pc, #640]	; (800043c <main+0x2f0>)
 80001bc:	2200      	movs	r2, #0
 80001be:	701a      	strb	r2, [r3, #0]

				nrf24l01p_rx_receive(rx_data, sizeof(rx_data));
 80001c0:	2120      	movs	r1, #32
 80001c2:	489f      	ldr	r0, [pc, #636]	; (8000440 <main+0x2f4>)
 80001c4:	f003 fa2b 	bl	800361e <nrf24l01p_rx_receive>

				adc_value1 = rx_data[0];
 80001c8:	4b9d      	ldr	r3, [pc, #628]	; (8000440 <main+0x2f4>)
 80001ca:	781b      	ldrb	r3, [r3, #0]
 80001cc:	b29a      	uxth	r2, r3
 80001ce:	4b9d      	ldr	r3, [pc, #628]	; (8000444 <main+0x2f8>)
 80001d0:	801a      	strh	r2, [r3, #0]
				adc_value1 |= (((uint16_t) rx_data[1]) << 8);
 80001d2:	4b9b      	ldr	r3, [pc, #620]	; (8000440 <main+0x2f4>)
 80001d4:	785b      	ldrb	r3, [r3, #1]
 80001d6:	021b      	lsls	r3, r3, #8
 80001d8:	b21a      	sxth	r2, r3
 80001da:	4b9a      	ldr	r3, [pc, #616]	; (8000444 <main+0x2f8>)
 80001dc:	881b      	ldrh	r3, [r3, #0]
 80001de:	b21b      	sxth	r3, r3
 80001e0:	4313      	orrs	r3, r2
 80001e2:	b21b      	sxth	r3, r3
 80001e4:	b29a      	uxth	r2, r3
 80001e6:	4b97      	ldr	r3, [pc, #604]	; (8000444 <main+0x2f8>)
 80001e8:	801a      	strh	r2, [r3, #0]

				adc_value2 = rx_data[2];
 80001ea:	4b95      	ldr	r3, [pc, #596]	; (8000440 <main+0x2f4>)
 80001ec:	789b      	ldrb	r3, [r3, #2]
 80001ee:	b29a      	uxth	r2, r3
 80001f0:	4b95      	ldr	r3, [pc, #596]	; (8000448 <main+0x2fc>)
 80001f2:	801a      	strh	r2, [r3, #0]
				adc_value2 |= (((uint16_t) rx_data[3]) << 8);
 80001f4:	4b92      	ldr	r3, [pc, #584]	; (8000440 <main+0x2f4>)
 80001f6:	78db      	ldrb	r3, [r3, #3]
 80001f8:	021b      	lsls	r3, r3, #8
 80001fa:	b21a      	sxth	r2, r3
 80001fc:	4b92      	ldr	r3, [pc, #584]	; (8000448 <main+0x2fc>)
 80001fe:	881b      	ldrh	r3, [r3, #0]
 8000200:	b21b      	sxth	r3, r3
 8000202:	4313      	orrs	r3, r2
 8000204:	b21b      	sxth	r3, r3
 8000206:	b29a      	uxth	r2, r3
 8000208:	4b8f      	ldr	r3, [pc, #572]	; (8000448 <main+0x2fc>)
 800020a:	801a      	strh	r2, [r3, #0]

				x = adc_value1 - 2048;
 800020c:	4b8d      	ldr	r3, [pc, #564]	; (8000444 <main+0x2f8>)
 800020e:	881b      	ldrh	r3, [r3, #0]
 8000210:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8000214:	b29b      	uxth	r3, r3
 8000216:	b21a      	sxth	r2, r3
 8000218:	4b8c      	ldr	r3, [pc, #560]	; (800044c <main+0x300>)
 800021a:	801a      	strh	r2, [r3, #0]
				y = adc_value2 - 2048;
 800021c:	4b8a      	ldr	r3, [pc, #552]	; (8000448 <main+0x2fc>)
 800021e:	881b      	ldrh	r3, [r3, #0]
 8000220:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8000224:	b29b      	uxth	r3, r3
 8000226:	b21a      	sxth	r2, r3
 8000228:	4b89      	ldr	r3, [pc, #548]	; (8000450 <main+0x304>)
 800022a:	801a      	strh	r2, [r3, #0]

				memset(buff, 0, sizeof(buff));
 800022c:	220a      	movs	r2, #10
 800022e:	2100      	movs	r1, #0
 8000230:	4888      	ldr	r0, [pc, #544]	; (8000454 <main+0x308>)
 8000232:	f005 f941 	bl	80054b8 <memset>
				sprintf(buff, "%d,%d\n", y, x);
 8000236:	4b86      	ldr	r3, [pc, #536]	; (8000450 <main+0x304>)
 8000238:	f9b3 3000 	ldrsh.w	r3, [r3]
 800023c:	461a      	mov	r2, r3
 800023e:	4b83      	ldr	r3, [pc, #524]	; (800044c <main+0x300>)
 8000240:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000244:	4984      	ldr	r1, [pc, #528]	; (8000458 <main+0x30c>)
 8000246:	4883      	ldr	r0, [pc, #524]	; (8000454 <main+0x308>)
 8000248:	f005 f916 	bl	8005478 <siprintf>

				u8g2_FirstPage(&u8g2);
 800024c:	4875      	ldr	r0, [pc, #468]	; (8000424 <main+0x2d8>)
 800024e:	f003 fc63 	bl	8003b18 <u8g2_FirstPage>
				do {
					u8g2_DrawStr(&u8g2, 5, 21, (const char*) buff);
 8000252:	4b80      	ldr	r3, [pc, #512]	; (8000454 <main+0x308>)
 8000254:	2215      	movs	r2, #21
 8000256:	2105      	movs	r1, #5
 8000258:	4872      	ldr	r0, [pc, #456]	; (8000424 <main+0x2d8>)
 800025a:	f004 f9bb 	bl	80045d4 <u8g2_DrawStr>
				} while (u8g2_NextPage(&u8g2));
 800025e:	4871      	ldr	r0, [pc, #452]	; (8000424 <main+0x2d8>)
 8000260:	f003 fc6e 	bl	8003b40 <u8g2_NextPage>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d1f3      	bne.n	8000252 <main+0x106>

				if (x >= 0) {
 800026a:	4b78      	ldr	r3, [pc, #480]	; (800044c <main+0x300>)
 800026c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000270:	2b00      	cmp	r3, #0
 8000272:	db63      	blt.n	800033c <main+0x1f0>
					HAL_GPIO_WritePin(MOTOR1_PHASE_GPIO_Port, MOTOR1_PHASE_Pin,
 8000274:	2200      	movs	r2, #0
 8000276:	f44f 7100 	mov.w	r1, #512	; 0x200
 800027a:	4878      	ldr	r0, [pc, #480]	; (800045c <main+0x310>)
 800027c:	f001 f91c 	bl	80014b8 <HAL_GPIO_WritePin>
							GPIO_PIN_RESET);
					if (y >= 0) {
 8000280:	4b73      	ldr	r3, [pc, #460]	; (8000450 <main+0x304>)
 8000282:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000286:	2b00      	cmp	r3, #0
 8000288:	db28      	blt.n	80002dc <main+0x190>
						HAL_GPIO_WritePin(MOTOR2_PHASE_GPIO_Port,
 800028a:	2200      	movs	r2, #0
 800028c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000290:	4872      	ldr	r0, [pc, #456]	; (800045c <main+0x310>)
 8000292:	f001 f911 	bl	80014b8 <HAL_GPIO_WritePin>
								MOTOR2_PHASE_Pin, GPIO_PIN_RESET);
						uint8_t i = 100 * x / 2048;
 8000296:	4b6d      	ldr	r3, [pc, #436]	; (800044c <main+0x300>)
 8000298:	f9b3 3000 	ldrsh.w	r3, [r3]
 800029c:	461a      	mov	r2, r3
 800029e:	2364      	movs	r3, #100	; 0x64
 80002a0:	fb02 f303 	mul.w	r3, r2, r3
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	da01      	bge.n	80002ac <main+0x160>
 80002a8:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80002ac:	12db      	asrs	r3, r3, #11
 80002ae:	707b      	strb	r3, [r7, #1]
						uint8_t j = 100 * y / 2048;
 80002b0:	4b67      	ldr	r3, [pc, #412]	; (8000450 <main+0x304>)
 80002b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80002b6:	461a      	mov	r2, r3
 80002b8:	2364      	movs	r3, #100	; 0x64
 80002ba:	fb02 f303 	mul.w	r3, r2, r3
 80002be:	2b00      	cmp	r3, #0
 80002c0:	da01      	bge.n	80002c6 <main+0x17a>
 80002c2:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80002c6:	12db      	asrs	r3, r3, #11
 80002c8:	703b      	strb	r3, [r7, #0]
						htim1.Instance->CCR1 = i;
 80002ca:	4b5a      	ldr	r3, [pc, #360]	; (8000434 <main+0x2e8>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	787a      	ldrb	r2, [r7, #1]
 80002d0:	635a      	str	r2, [r3, #52]	; 0x34
						htim2.Instance->CCR1 = j;
 80002d2:	4b59      	ldr	r3, [pc, #356]	; (8000438 <main+0x2ec>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	783a      	ldrb	r2, [r7, #0]
 80002d8:	635a      	str	r2, [r3, #52]	; 0x34
 80002da:	e098      	b.n	800040e <main+0x2c2>

					} else if (y < 0) {
 80002dc:	4b5c      	ldr	r3, [pc, #368]	; (8000450 <main+0x304>)
 80002de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f280 8093 	bge.w	800040e <main+0x2c2>
						HAL_GPIO_WritePin(MOTOR2_PHASE_GPIO_Port,
 80002e8:	2201      	movs	r2, #1
 80002ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002ee:	485b      	ldr	r0, [pc, #364]	; (800045c <main+0x310>)
 80002f0:	f001 f8e2 	bl	80014b8 <HAL_GPIO_WritePin>
								MOTOR2_PHASE_Pin, GPIO_PIN_SET);
						uint8_t i = 100 * x / 2048;
 80002f4:	4b55      	ldr	r3, [pc, #340]	; (800044c <main+0x300>)
 80002f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80002fa:	461a      	mov	r2, r3
 80002fc:	2364      	movs	r3, #100	; 0x64
 80002fe:	fb02 f303 	mul.w	r3, r2, r3
 8000302:	2b00      	cmp	r3, #0
 8000304:	da01      	bge.n	800030a <main+0x1be>
 8000306:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800030a:	12db      	asrs	r3, r3, #11
 800030c:	70fb      	strb	r3, [r7, #3]
						uint8_t j = 100 * (y * (-1)) / 2048;
 800030e:	4b50      	ldr	r3, [pc, #320]	; (8000450 <main+0x304>)
 8000310:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000314:	461a      	mov	r2, r3
 8000316:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800031a:	fb02 f303 	mul.w	r3, r2, r3
 800031e:	2b00      	cmp	r3, #0
 8000320:	da01      	bge.n	8000326 <main+0x1da>
 8000322:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8000326:	12db      	asrs	r3, r3, #11
 8000328:	70bb      	strb	r3, [r7, #2]
						htim1.Instance->CCR1 = i;
 800032a:	4b42      	ldr	r3, [pc, #264]	; (8000434 <main+0x2e8>)
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	78fa      	ldrb	r2, [r7, #3]
 8000330:	635a      	str	r2, [r3, #52]	; 0x34
						htim2.Instance->CCR1 = j;
 8000332:	4b41      	ldr	r3, [pc, #260]	; (8000438 <main+0x2ec>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	78ba      	ldrb	r2, [r7, #2]
 8000338:	635a      	str	r2, [r3, #52]	; 0x34
 800033a:	e068      	b.n	800040e <main+0x2c2>
					}
				} else if (x < 0) {
 800033c:	4b43      	ldr	r3, [pc, #268]	; (800044c <main+0x300>)
 800033e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000342:	2b00      	cmp	r3, #0
 8000344:	da63      	bge.n	800040e <main+0x2c2>
					HAL_GPIO_WritePin(MOTOR1_PHASE_GPIO_Port, MOTOR1_PHASE_Pin,
 8000346:	2201      	movs	r2, #1
 8000348:	f44f 7100 	mov.w	r1, #512	; 0x200
 800034c:	4843      	ldr	r0, [pc, #268]	; (800045c <main+0x310>)
 800034e:	f001 f8b3 	bl	80014b8 <HAL_GPIO_WritePin>
							GPIO_PIN_SET);
					if (y >= 0) {
 8000352:	4b3f      	ldr	r3, [pc, #252]	; (8000450 <main+0x304>)
 8000354:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000358:	2b00      	cmp	r3, #0
 800035a:	db29      	blt.n	80003b0 <main+0x264>
						HAL_GPIO_WritePin(MOTOR2_PHASE_GPIO_Port,
 800035c:	2200      	movs	r2, #0
 800035e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000362:	483e      	ldr	r0, [pc, #248]	; (800045c <main+0x310>)
 8000364:	f001 f8a8 	bl	80014b8 <HAL_GPIO_WritePin>
						MOTOR2_PHASE_Pin, GPIO_PIN_RESET);

						uint8_t i = 100 * (x * (-1)) / 2048;
 8000368:	4b38      	ldr	r3, [pc, #224]	; (800044c <main+0x300>)
 800036a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800036e:	461a      	mov	r2, r3
 8000370:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8000374:	fb02 f303 	mul.w	r3, r2, r3
 8000378:	2b00      	cmp	r3, #0
 800037a:	da01      	bge.n	8000380 <main+0x234>
 800037c:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8000380:	12db      	asrs	r3, r3, #11
 8000382:	717b      	strb	r3, [r7, #5]
						uint8_t j = 100 * y / 2048;
 8000384:	4b32      	ldr	r3, [pc, #200]	; (8000450 <main+0x304>)
 8000386:	f9b3 3000 	ldrsh.w	r3, [r3]
 800038a:	461a      	mov	r2, r3
 800038c:	2364      	movs	r3, #100	; 0x64
 800038e:	fb02 f303 	mul.w	r3, r2, r3
 8000392:	2b00      	cmp	r3, #0
 8000394:	da01      	bge.n	800039a <main+0x24e>
 8000396:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800039a:	12db      	asrs	r3, r3, #11
 800039c:	713b      	strb	r3, [r7, #4]
						htim1.Instance->CCR1 = i;
 800039e:	4b25      	ldr	r3, [pc, #148]	; (8000434 <main+0x2e8>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	797a      	ldrb	r2, [r7, #5]
 80003a4:	635a      	str	r2, [r3, #52]	; 0x34
						htim2.Instance->CCR1 = j;
 80003a6:	4b24      	ldr	r3, [pc, #144]	; (8000438 <main+0x2ec>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	793a      	ldrb	r2, [r7, #4]
 80003ac:	635a      	str	r2, [r3, #52]	; 0x34
 80003ae:	e02e      	b.n	800040e <main+0x2c2>
					} else if (y < 0) {
 80003b0:	4b27      	ldr	r3, [pc, #156]	; (8000450 <main+0x304>)
 80003b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	da29      	bge.n	800040e <main+0x2c2>
						HAL_GPIO_WritePin(MOTOR2_PHASE_GPIO_Port,
 80003ba:	2201      	movs	r2, #1
 80003bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003c0:	4826      	ldr	r0, [pc, #152]	; (800045c <main+0x310>)
 80003c2:	f001 f879 	bl	80014b8 <HAL_GPIO_WritePin>
						MOTOR2_PHASE_Pin, GPIO_PIN_SET);

						uint8_t i = 100 * (x * (-1)) / 2048;
 80003c6:	4b21      	ldr	r3, [pc, #132]	; (800044c <main+0x300>)
 80003c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80003cc:	461a      	mov	r2, r3
 80003ce:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80003d2:	fb02 f303 	mul.w	r3, r2, r3
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	da01      	bge.n	80003de <main+0x292>
 80003da:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80003de:	12db      	asrs	r3, r3, #11
 80003e0:	71fb      	strb	r3, [r7, #7]
						uint8_t j = 100 * (y * (-1)) / 2048;
 80003e2:	4b1b      	ldr	r3, [pc, #108]	; (8000450 <main+0x304>)
 80003e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80003e8:	461a      	mov	r2, r3
 80003ea:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80003ee:	fb02 f303 	mul.w	r3, r2, r3
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	da01      	bge.n	80003fa <main+0x2ae>
 80003f6:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80003fa:	12db      	asrs	r3, r3, #11
 80003fc:	71bb      	strb	r3, [r7, #6]
						htim1.Instance->CCR1 = i;
 80003fe:	4b0d      	ldr	r3, [pc, #52]	; (8000434 <main+0x2e8>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	79fa      	ldrb	r2, [r7, #7]
 8000404:	635a      	str	r2, [r3, #52]	; 0x34
						htim2.Instance->CCR1 = j;
 8000406:	4b0c      	ldr	r3, [pc, #48]	; (8000438 <main+0x2ec>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	79ba      	ldrb	r2, [r7, #6]
 800040c:	635a      	str	r2, [r3, #52]	; 0x34
					}
				}

				HAL_Delay(100);
 800040e:	2064      	movs	r0, #100	; 0x64
 8000410:	f000 fd9c 	bl	8000f4c <HAL_Delay>
			if (nrf24l01p_rx_flag == 1) {
 8000414:	e6cd      	b.n	80001b2 <main+0x66>
 8000416:	bf00      	nop
 8000418:	08000c81 	.word	0x08000c81
 800041c:	08000d79 	.word	0x08000d79
 8000420:	080067f4 	.word	0x080067f4
 8000424:	20000200 	.word	0x20000200
 8000428:	08005e20 	.word	0x08005e20
 800042c:	20000008 	.word	0x20000008
 8000430:	20000000 	.word	0x20000000
 8000434:	20000138 	.word	0x20000138
 8000438:	20000180 	.word	0x20000180
 800043c:	200001c8 	.word	0x200001c8
 8000440:	200001e0 	.word	0x200001e0
 8000444:	200001ca 	.word	0x200001ca
 8000448:	200001cc 	.word	0x200001cc
 800044c:	200001ce 	.word	0x200001ce
 8000450:	200001d0 	.word	0x200001d0
 8000454:	200001d4 	.word	0x200001d4
 8000458:	08005df4 	.word	0x08005df4
 800045c:	40010800 	.word	0x40010800

08000460 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000460:	b580      	push	{r7, lr}
 8000462:	b090      	sub	sp, #64	; 0x40
 8000464:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000466:	f107 0318 	add.w	r3, r7, #24
 800046a:	2228      	movs	r2, #40	; 0x28
 800046c:	2100      	movs	r1, #0
 800046e:	4618      	mov	r0, r3
 8000470:	f005 f822 	bl	80054b8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000474:	1d3b      	adds	r3, r7, #4
 8000476:	2200      	movs	r2, #0
 8000478:	601a      	str	r2, [r3, #0]
 800047a:	605a      	str	r2, [r3, #4]
 800047c:	609a      	str	r2, [r3, #8]
 800047e:	60da      	str	r2, [r3, #12]
 8000480:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000482:	2301      	movs	r3, #1
 8000484:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000486:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800048a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800048c:	2300      	movs	r3, #0
 800048e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000490:	2301      	movs	r3, #1
 8000492:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000494:	2302      	movs	r3, #2
 8000496:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000498:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800049c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800049e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80004a2:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80004a4:	f107 0318 	add.w	r3, r7, #24
 80004a8:	4618      	mov	r0, r3
 80004aa:	f001 f835 	bl	8001518 <HAL_RCC_OscConfig>
 80004ae:	4603      	mov	r3, r0
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d001      	beq.n	80004b8 <SystemClock_Config+0x58>
		Error_Handler();
 80004b4:	f000 fa46 	bl	8000944 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80004b8:	230f      	movs	r3, #15
 80004ba:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004bc:	2302      	movs	r3, #2
 80004be:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004c0:	2300      	movs	r3, #0
 80004c2:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004c8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004ca:	2300      	movs	r3, #0
 80004cc:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80004ce:	1d3b      	adds	r3, r7, #4
 80004d0:	2102      	movs	r1, #2
 80004d2:	4618      	mov	r0, r3
 80004d4:	f001 faa2 	bl	8001a1c <HAL_RCC_ClockConfig>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <SystemClock_Config+0x82>
		Error_Handler();
 80004de:	f000 fa31 	bl	8000944 <Error_Handler>
	}
}
 80004e2:	bf00      	nop
 80004e4:	3740      	adds	r7, #64	; 0x40
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
	...

080004ec <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80004f0:	4b17      	ldr	r3, [pc, #92]	; (8000550 <MX_SPI1_Init+0x64>)
 80004f2:	4a18      	ldr	r2, [pc, #96]	; (8000554 <MX_SPI1_Init+0x68>)
 80004f4:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80004f6:	4b16      	ldr	r3, [pc, #88]	; (8000550 <MX_SPI1_Init+0x64>)
 80004f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80004fc:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80004fe:	4b14      	ldr	r3, [pc, #80]	; (8000550 <MX_SPI1_Init+0x64>)
 8000500:	2200      	movs	r2, #0
 8000502:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000504:	4b12      	ldr	r3, [pc, #72]	; (8000550 <MX_SPI1_Init+0x64>)
 8000506:	2200      	movs	r2, #0
 8000508:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800050a:	4b11      	ldr	r3, [pc, #68]	; (8000550 <MX_SPI1_Init+0x64>)
 800050c:	2200      	movs	r2, #0
 800050e:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000510:	4b0f      	ldr	r3, [pc, #60]	; (8000550 <MX_SPI1_Init+0x64>)
 8000512:	2200      	movs	r2, #0
 8000514:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000516:	4b0e      	ldr	r3, [pc, #56]	; (8000550 <MX_SPI1_Init+0x64>)
 8000518:	f44f 7200 	mov.w	r2, #512	; 0x200
 800051c:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800051e:	4b0c      	ldr	r3, [pc, #48]	; (8000550 <MX_SPI1_Init+0x64>)
 8000520:	2218      	movs	r2, #24
 8000522:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000524:	4b0a      	ldr	r3, [pc, #40]	; (8000550 <MX_SPI1_Init+0x64>)
 8000526:	2200      	movs	r2, #0
 8000528:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800052a:	4b09      	ldr	r3, [pc, #36]	; (8000550 <MX_SPI1_Init+0x64>)
 800052c:	2200      	movs	r2, #0
 800052e:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000530:	4b07      	ldr	r3, [pc, #28]	; (8000550 <MX_SPI1_Init+0x64>)
 8000532:	2200      	movs	r2, #0
 8000534:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8000536:	4b06      	ldr	r3, [pc, #24]	; (8000550 <MX_SPI1_Init+0x64>)
 8000538:	220a      	movs	r2, #10
 800053a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 800053c:	4804      	ldr	r0, [pc, #16]	; (8000550 <MX_SPI1_Init+0x64>)
 800053e:	f001 fbc9 	bl	8001cd4 <HAL_SPI_Init>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <MX_SPI1_Init+0x60>
		Error_Handler();
 8000548:	f000 f9fc 	bl	8000944 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 800054c:	bf00      	nop
 800054e:	bd80      	pop	{r7, pc}
 8000550:	20000088 	.word	0x20000088
 8000554:	40013000 	.word	0x40013000

08000558 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 800055c:	4b17      	ldr	r3, [pc, #92]	; (80005bc <MX_SPI2_Init+0x64>)
 800055e:	4a18      	ldr	r2, [pc, #96]	; (80005c0 <MX_SPI2_Init+0x68>)
 8000560:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8000562:	4b16      	ldr	r3, [pc, #88]	; (80005bc <MX_SPI2_Init+0x64>)
 8000564:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000568:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800056a:	4b14      	ldr	r3, [pc, #80]	; (80005bc <MX_SPI2_Init+0x64>)
 800056c:	2200      	movs	r2, #0
 800056e:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000570:	4b12      	ldr	r3, [pc, #72]	; (80005bc <MX_SPI2_Init+0x64>)
 8000572:	2200      	movs	r2, #0
 8000574:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000576:	4b11      	ldr	r3, [pc, #68]	; (80005bc <MX_SPI2_Init+0x64>)
 8000578:	2200      	movs	r2, #0
 800057a:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800057c:	4b0f      	ldr	r3, [pc, #60]	; (80005bc <MX_SPI2_Init+0x64>)
 800057e:	2200      	movs	r2, #0
 8000580:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8000582:	4b0e      	ldr	r3, [pc, #56]	; (80005bc <MX_SPI2_Init+0x64>)
 8000584:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000588:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800058a:	4b0c      	ldr	r3, [pc, #48]	; (80005bc <MX_SPI2_Init+0x64>)
 800058c:	2218      	movs	r2, #24
 800058e:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000590:	4b0a      	ldr	r3, [pc, #40]	; (80005bc <MX_SPI2_Init+0x64>)
 8000592:	2200      	movs	r2, #0
 8000594:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000596:	4b09      	ldr	r3, [pc, #36]	; (80005bc <MX_SPI2_Init+0x64>)
 8000598:	2200      	movs	r2, #0
 800059a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800059c:	4b07      	ldr	r3, [pc, #28]	; (80005bc <MX_SPI2_Init+0x64>)
 800059e:	2200      	movs	r2, #0
 80005a0:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 80005a2:	4b06      	ldr	r3, [pc, #24]	; (80005bc <MX_SPI2_Init+0x64>)
 80005a4:	220a      	movs	r2, #10
 80005a6:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 80005a8:	4804      	ldr	r0, [pc, #16]	; (80005bc <MX_SPI2_Init+0x64>)
 80005aa:	f001 fb93 	bl	8001cd4 <HAL_SPI_Init>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <MX_SPI2_Init+0x60>
		Error_Handler();
 80005b4:	f000 f9c6 	bl	8000944 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 80005b8:	bf00      	nop
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	200000e0 	.word	0x200000e0
 80005c0:	40003800 	.word	0x40003800

080005c4 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b096      	sub	sp, #88	; 0x58
 80005c8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80005ca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	605a      	str	r2, [r3, #4]
 80005d4:	609a      	str	r2, [r3, #8]
 80005d6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80005d8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80005e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
 80005ee:	60da      	str	r2, [r3, #12]
 80005f0:	611a      	str	r2, [r3, #16]
 80005f2:	615a      	str	r2, [r3, #20]
 80005f4:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80005f6:	1d3b      	adds	r3, r7, #4
 80005f8:	2220      	movs	r2, #32
 80005fa:	2100      	movs	r1, #0
 80005fc:	4618      	mov	r0, r3
 80005fe:	f004 ff5b 	bl	80054b8 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000602:	4b3e      	ldr	r3, [pc, #248]	; (80006fc <MX_TIM1_Init+0x138>)
 8000604:	4a3e      	ldr	r2, [pc, #248]	; (8000700 <MX_TIM1_Init+0x13c>)
 8000606:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 35;
 8000608:	4b3c      	ldr	r3, [pc, #240]	; (80006fc <MX_TIM1_Init+0x138>)
 800060a:	2223      	movs	r2, #35	; 0x23
 800060c:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800060e:	4b3b      	ldr	r3, [pc, #236]	; (80006fc <MX_TIM1_Init+0x138>)
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 99;
 8000614:	4b39      	ldr	r3, [pc, #228]	; (80006fc <MX_TIM1_Init+0x138>)
 8000616:	2263      	movs	r2, #99	; 0x63
 8000618:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800061a:	4b38      	ldr	r3, [pc, #224]	; (80006fc <MX_TIM1_Init+0x138>)
 800061c:	2200      	movs	r2, #0
 800061e:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000620:	4b36      	ldr	r3, [pc, #216]	; (80006fc <MX_TIM1_Init+0x138>)
 8000622:	2200      	movs	r2, #0
 8000624:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000626:	4b35      	ldr	r3, [pc, #212]	; (80006fc <MX_TIM1_Init+0x138>)
 8000628:	2200      	movs	r2, #0
 800062a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 800062c:	4833      	ldr	r0, [pc, #204]	; (80006fc <MX_TIM1_Init+0x138>)
 800062e:	f002 f8d9 	bl	80027e4 <HAL_TIM_Base_Init>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <MX_TIM1_Init+0x78>
		Error_Handler();
 8000638:	f000 f984 	bl	8000944 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800063c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000640:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8000642:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000646:	4619      	mov	r1, r3
 8000648:	482c      	ldr	r0, [pc, #176]	; (80006fc <MX_TIM1_Init+0x138>)
 800064a:	f002 fad7 	bl	8002bfc <HAL_TIM_ConfigClockSource>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_TIM1_Init+0x94>
		Error_Handler();
 8000654:	f000 f976 	bl	8000944 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8000658:	4828      	ldr	r0, [pc, #160]	; (80006fc <MX_TIM1_Init+0x138>)
 800065a:	f002 f912 	bl	8002882 <HAL_TIM_PWM_Init>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_TIM1_Init+0xa4>
		Error_Handler();
 8000664:	f000 f96e 	bl	8000944 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000668:	2300      	movs	r3, #0
 800066a:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800066c:	2300      	movs	r3, #0
 800066e:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8000670:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000674:	4619      	mov	r1, r3
 8000676:	4821      	ldr	r0, [pc, #132]	; (80006fc <MX_TIM1_Init+0x138>)
 8000678:	f002 fe2c 	bl	80032d4 <HAL_TIMEx_MasterConfigSynchronization>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <MX_TIM1_Init+0xc2>
			!= HAL_OK) {
		Error_Handler();
 8000682:	f000 f95f 	bl	8000944 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000686:	2360      	movs	r3, #96	; 0x60
 8000688:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 800068a:	2300      	movs	r3, #0
 800068c:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800068e:	2300      	movs	r3, #0
 8000690:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000692:	2300      	movs	r3, #0
 8000694:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000696:	2300      	movs	r3, #0
 8000698:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800069a:	2300      	movs	r3, #0
 800069c:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800069e:	2300      	movs	r3, #0
 80006a0:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 80006a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006a6:	2200      	movs	r2, #0
 80006a8:	4619      	mov	r1, r3
 80006aa:	4814      	ldr	r0, [pc, #80]	; (80006fc <MX_TIM1_Init+0x138>)
 80006ac:	f002 f9e4 	bl	8002a78 <HAL_TIM_PWM_ConfigChannel>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_TIM1_Init+0xf6>
			!= HAL_OK) {
		Error_Handler();
 80006b6:	f000 f945 	bl	8000944 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80006ba:	2300      	movs	r3, #0
 80006bc:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80006be:	2300      	movs	r3, #0
 80006c0:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80006c2:	2300      	movs	r3, #0
 80006c4:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80006ca:	2300      	movs	r3, #0
 80006cc:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80006ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006d2:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80006d4:	2300      	movs	r3, #0
 80006d6:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 80006d8:	1d3b      	adds	r3, r7, #4
 80006da:	4619      	mov	r1, r3
 80006dc:	4807      	ldr	r0, [pc, #28]	; (80006fc <MX_TIM1_Init+0x138>)
 80006de:	f002 fe57 	bl	8003390 <HAL_TIMEx_ConfigBreakDeadTime>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_TIM1_Init+0x128>
			!= HAL_OK) {
		Error_Handler();
 80006e8:	f000 f92c 	bl	8000944 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 80006ec:	4803      	ldr	r0, [pc, #12]	; (80006fc <MX_TIM1_Init+0x138>)
 80006ee:	f000 fa0b 	bl	8000b08 <HAL_TIM_MspPostInit>

}
 80006f2:	bf00      	nop
 80006f4:	3758      	adds	r7, #88	; 0x58
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	20000138 	.word	0x20000138
 8000700:	40012c00 	.word	0x40012c00

08000704 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000704:	b580      	push	{r7, lr}
 8000706:	b08e      	sub	sp, #56	; 0x38
 8000708:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800070a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	605a      	str	r2, [r3, #4]
 8000714:	609a      	str	r2, [r3, #8]
 8000716:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000718:	f107 0320 	add.w	r3, r7, #32
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000722:	1d3b      	adds	r3, r7, #4
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
 800072a:	609a      	str	r2, [r3, #8]
 800072c:	60da      	str	r2, [r3, #12]
 800072e:	611a      	str	r2, [r3, #16]
 8000730:	615a      	str	r2, [r3, #20]
 8000732:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000734:	4b2c      	ldr	r3, [pc, #176]	; (80007e8 <MX_TIM2_Init+0xe4>)
 8000736:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800073a:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 35;
 800073c:	4b2a      	ldr	r3, [pc, #168]	; (80007e8 <MX_TIM2_Init+0xe4>)
 800073e:	2223      	movs	r2, #35	; 0x23
 8000740:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000742:	4b29      	ldr	r3, [pc, #164]	; (80007e8 <MX_TIM2_Init+0xe4>)
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 99;
 8000748:	4b27      	ldr	r3, [pc, #156]	; (80007e8 <MX_TIM2_Init+0xe4>)
 800074a:	2263      	movs	r2, #99	; 0x63
 800074c:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800074e:	4b26      	ldr	r3, [pc, #152]	; (80007e8 <MX_TIM2_Init+0xe4>)
 8000750:	2200      	movs	r2, #0
 8000752:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000754:	4b24      	ldr	r3, [pc, #144]	; (80007e8 <MX_TIM2_Init+0xe4>)
 8000756:	2200      	movs	r2, #0
 8000758:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 800075a:	4823      	ldr	r0, [pc, #140]	; (80007e8 <MX_TIM2_Init+0xe4>)
 800075c:	f002 f842 	bl	80027e4 <HAL_TIM_Base_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_TIM2_Init+0x66>
		Error_Handler();
 8000766:	f000 f8ed 	bl	8000944 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800076a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800076e:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000770:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000774:	4619      	mov	r1, r3
 8000776:	481c      	ldr	r0, [pc, #112]	; (80007e8 <MX_TIM2_Init+0xe4>)
 8000778:	f002 fa40 	bl	8002bfc <HAL_TIM_ConfigClockSource>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_TIM2_Init+0x82>
		Error_Handler();
 8000782:	f000 f8df 	bl	8000944 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8000786:	4818      	ldr	r0, [pc, #96]	; (80007e8 <MX_TIM2_Init+0xe4>)
 8000788:	f002 f87b 	bl	8002882 <HAL_TIM_PWM_Init>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_TIM2_Init+0x92>
		Error_Handler();
 8000792:	f000 f8d7 	bl	8000944 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000796:	2300      	movs	r3, #0
 8000798:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800079a:	2300      	movs	r3, #0
 800079c:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800079e:	f107 0320 	add.w	r3, r7, #32
 80007a2:	4619      	mov	r1, r3
 80007a4:	4810      	ldr	r0, [pc, #64]	; (80007e8 <MX_TIM2_Init+0xe4>)
 80007a6:	f002 fd95 	bl	80032d4 <HAL_TIMEx_MasterConfigSynchronization>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_TIM2_Init+0xb0>
			!= HAL_OK) {
		Error_Handler();
 80007b0:	f000 f8c8 	bl	8000944 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007b4:	2360      	movs	r3, #96	; 0x60
 80007b6:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80007b8:	2300      	movs	r3, #0
 80007ba:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007bc:	2300      	movs	r3, #0
 80007be:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007c0:	2300      	movs	r3, #0
 80007c2:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 80007c4:	1d3b      	adds	r3, r7, #4
 80007c6:	2200      	movs	r2, #0
 80007c8:	4619      	mov	r1, r3
 80007ca:	4807      	ldr	r0, [pc, #28]	; (80007e8 <MX_TIM2_Init+0xe4>)
 80007cc:	f002 f954 	bl	8002a78 <HAL_TIM_PWM_ConfigChannel>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_TIM2_Init+0xd6>
			!= HAL_OK) {
		Error_Handler();
 80007d6:	f000 f8b5 	bl	8000944 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 80007da:	4803      	ldr	r0, [pc, #12]	; (80007e8 <MX_TIM2_Init+0xe4>)
 80007dc:	f000 f994 	bl	8000b08 <HAL_TIM_MspPostInit>

}
 80007e0:	bf00      	nop
 80007e2:	3738      	adds	r7, #56	; 0x38
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	20000180 	.word	0x20000180

080007ec <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b088      	sub	sp, #32
 80007f0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80007f2:	f107 0310 	add.w	r3, r7, #16
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000800:	4b43      	ldr	r3, [pc, #268]	; (8000910 <MX_GPIO_Init+0x124>)
 8000802:	699b      	ldr	r3, [r3, #24]
 8000804:	4a42      	ldr	r2, [pc, #264]	; (8000910 <MX_GPIO_Init+0x124>)
 8000806:	f043 0320 	orr.w	r3, r3, #32
 800080a:	6193      	str	r3, [r2, #24]
 800080c:	4b40      	ldr	r3, [pc, #256]	; (8000910 <MX_GPIO_Init+0x124>)
 800080e:	699b      	ldr	r3, [r3, #24]
 8000810:	f003 0320 	and.w	r3, r3, #32
 8000814:	60fb      	str	r3, [r7, #12]
 8000816:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000818:	4b3d      	ldr	r3, [pc, #244]	; (8000910 <MX_GPIO_Init+0x124>)
 800081a:	699b      	ldr	r3, [r3, #24]
 800081c:	4a3c      	ldr	r2, [pc, #240]	; (8000910 <MX_GPIO_Init+0x124>)
 800081e:	f043 0304 	orr.w	r3, r3, #4
 8000822:	6193      	str	r3, [r2, #24]
 8000824:	4b3a      	ldr	r3, [pc, #232]	; (8000910 <MX_GPIO_Init+0x124>)
 8000826:	699b      	ldr	r3, [r3, #24]
 8000828:	f003 0304 	and.w	r3, r3, #4
 800082c:	60bb      	str	r3, [r7, #8]
 800082e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000830:	4b37      	ldr	r3, [pc, #220]	; (8000910 <MX_GPIO_Init+0x124>)
 8000832:	699b      	ldr	r3, [r3, #24]
 8000834:	4a36      	ldr	r2, [pc, #216]	; (8000910 <MX_GPIO_Init+0x124>)
 8000836:	f043 0308 	orr.w	r3, r3, #8
 800083a:	6193      	str	r3, [r2, #24]
 800083c:	4b34      	ldr	r3, [pc, #208]	; (8000910 <MX_GPIO_Init+0x124>)
 800083e:	699b      	ldr	r3, [r3, #24]
 8000840:	f003 0308 	and.w	r3, r3, #8
 8000844:	607b      	str	r3, [r7, #4]
 8000846:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, CSN_Pin | MOTOR2_PHASE_Pin, GPIO_PIN_SET);
 8000848:	2201      	movs	r2, #1
 800084a:	f44f 6181 	mov.w	r1, #1032	; 0x408
 800084e:	4831      	ldr	r0, [pc, #196]	; (8000914 <MX_GPIO_Init+0x128>)
 8000850:	f000 fe32 	bl	80014b8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, CE_Pin | MOTOR1_PHASE_Pin, GPIO_PIN_RESET);
 8000854:	2200      	movs	r2, #0
 8000856:	f44f 7104 	mov.w	r1, #528	; 0x210
 800085a:	482e      	ldr	r0, [pc, #184]	; (8000914 <MX_GPIO_Init+0x128>)
 800085c:	f000 fe2c 	bl	80014b8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, OLED_RST_Pin | OLED_DC_Pin | OLED_CS_Pin,
 8000860:	2201      	movs	r2, #1
 8000862:	f44f 41b0 	mov.w	r1, #22528	; 0x5800
 8000866:	482c      	ldr	r0, [pc, #176]	; (8000918 <MX_GPIO_Init+0x12c>)
 8000868:	f000 fe26 	bl	80014b8 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin : IRQ_Pin */
	GPIO_InitStruct.Pin = IRQ_Pin;
 800086c:	2304      	movs	r3, #4
 800086e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000870:	4b2a      	ldr	r3, [pc, #168]	; (800091c <MX_GPIO_Init+0x130>)
 8000872:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000874:	2301      	movs	r3, #1
 8000876:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 8000878:	f107 0310 	add.w	r3, r7, #16
 800087c:	4619      	mov	r1, r3
 800087e:	4825      	ldr	r0, [pc, #148]	; (8000914 <MX_GPIO_Init+0x128>)
 8000880:	f000 fc96 	bl	80011b0 <HAL_GPIO_Init>

	/*Configure GPIO pin : CSN_Pin */
	GPIO_InitStruct.Pin = CSN_Pin;
 8000884:	2308      	movs	r3, #8
 8000886:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000888:	2301      	movs	r3, #1
 800088a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800088c:	2301      	movs	r3, #1
 800088e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000890:	2303      	movs	r3, #3
 8000892:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(CSN_GPIO_Port, &GPIO_InitStruct);
 8000894:	f107 0310 	add.w	r3, r7, #16
 8000898:	4619      	mov	r1, r3
 800089a:	481e      	ldr	r0, [pc, #120]	; (8000914 <MX_GPIO_Init+0x128>)
 800089c:	f000 fc88 	bl	80011b0 <HAL_GPIO_Init>

	/*Configure GPIO pin : CE_Pin */
	GPIO_InitStruct.Pin = CE_Pin;
 80008a0:	2310      	movs	r3, #16
 80008a2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a4:	2301      	movs	r3, #1
 80008a6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008a8:	2302      	movs	r3, #2
 80008aa:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008ac:	2303      	movs	r3, #3
 80008ae:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(CE_GPIO_Port, &GPIO_InitStruct);
 80008b0:	f107 0310 	add.w	r3, r7, #16
 80008b4:	4619      	mov	r1, r3
 80008b6:	4817      	ldr	r0, [pc, #92]	; (8000914 <MX_GPIO_Init+0x128>)
 80008b8:	f000 fc7a 	bl	80011b0 <HAL_GPIO_Init>

	/*Configure GPIO pins : OLED_RST_Pin OLED_DC_Pin OLED_CS_Pin */
	GPIO_InitStruct.Pin = OLED_RST_Pin | OLED_DC_Pin | OLED_CS_Pin;
 80008bc:	f44f 43b0 	mov.w	r3, #22528	; 0x5800
 80008c0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c2:	2301      	movs	r3, #1
 80008c4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008c6:	2301      	movs	r3, #1
 80008c8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008ca:	2303      	movs	r3, #3
 80008cc:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ce:	f107 0310 	add.w	r3, r7, #16
 80008d2:	4619      	mov	r1, r3
 80008d4:	4810      	ldr	r0, [pc, #64]	; (8000918 <MX_GPIO_Init+0x12c>)
 80008d6:	f000 fc6b 	bl	80011b0 <HAL_GPIO_Init>

	/*Configure GPIO pins : MOTOR1_PHASE_Pin MOTOR2_PHASE_Pin */
	GPIO_InitStruct.Pin = MOTOR1_PHASE_Pin | MOTOR2_PHASE_Pin;
 80008da:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80008de:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e0:	2301      	movs	r3, #1
 80008e2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008e8:	2303      	movs	r3, #3
 80008ea:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ec:	f107 0310 	add.w	r3, r7, #16
 80008f0:	4619      	mov	r1, r3
 80008f2:	4808      	ldr	r0, [pc, #32]	; (8000914 <MX_GPIO_Init+0x128>)
 80008f4:	f000 fc5c 	bl	80011b0 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80008f8:	2200      	movs	r2, #0
 80008fa:	2100      	movs	r1, #0
 80008fc:	2008      	movs	r0, #8
 80008fe:	f000 fc20 	bl	8001142 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000902:	2008      	movs	r0, #8
 8000904:	f000 fc39 	bl	800117a <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000908:	bf00      	nop
 800090a:	3720      	adds	r7, #32
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40021000 	.word	0x40021000
 8000914:	40010800 	.word	0x40010800
 8000918:	40010c00 	.word	0x40010c00
 800091c:	10210000 	.word	0x10210000

08000920 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	4603      	mov	r3, r0
 8000928:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == NRF24L01P_IRQ_PIN_NUMBER) {
 800092a:	88fb      	ldrh	r3, [r7, #6]
 800092c:	2b04      	cmp	r3, #4
 800092e:	d102      	bne.n	8000936 <HAL_GPIO_EXTI_Callback+0x16>
		nrf24l01p_rx_flag = 1;
 8000930:	4b03      	ldr	r3, [pc, #12]	; (8000940 <HAL_GPIO_EXTI_Callback+0x20>)
 8000932:	2201      	movs	r2, #1
 8000934:	701a      	strb	r2, [r3, #0]
		 nrf24l01p_prx_mode();
		 }
		 */

	}
}
 8000936:	bf00      	nop
 8000938:	370c      	adds	r7, #12
 800093a:	46bd      	mov	sp, r7
 800093c:	bc80      	pop	{r7}
 800093e:	4770      	bx	lr
 8000940:	200001c8 	.word	0x200001c8

08000944 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000948:	b672      	cpsid	i
}
 800094a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800094c:	e7fe      	b.n	800094c <Error_Handler+0x8>
	...

08000950 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000950:	b480      	push	{r7}
 8000952:	b085      	sub	sp, #20
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000956:	4b15      	ldr	r3, [pc, #84]	; (80009ac <HAL_MspInit+0x5c>)
 8000958:	699b      	ldr	r3, [r3, #24]
 800095a:	4a14      	ldr	r2, [pc, #80]	; (80009ac <HAL_MspInit+0x5c>)
 800095c:	f043 0301 	orr.w	r3, r3, #1
 8000960:	6193      	str	r3, [r2, #24]
 8000962:	4b12      	ldr	r3, [pc, #72]	; (80009ac <HAL_MspInit+0x5c>)
 8000964:	699b      	ldr	r3, [r3, #24]
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	60bb      	str	r3, [r7, #8]
 800096c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800096e:	4b0f      	ldr	r3, [pc, #60]	; (80009ac <HAL_MspInit+0x5c>)
 8000970:	69db      	ldr	r3, [r3, #28]
 8000972:	4a0e      	ldr	r2, [pc, #56]	; (80009ac <HAL_MspInit+0x5c>)
 8000974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000978:	61d3      	str	r3, [r2, #28]
 800097a:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <HAL_MspInit+0x5c>)
 800097c:	69db      	ldr	r3, [r3, #28]
 800097e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000986:	4b0a      	ldr	r3, [pc, #40]	; (80009b0 <HAL_MspInit+0x60>)
 8000988:	685b      	ldr	r3, [r3, #4]
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	4a04      	ldr	r2, [pc, #16]	; (80009b0 <HAL_MspInit+0x60>)
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a2:	bf00      	nop
 80009a4:	3714      	adds	r7, #20
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bc80      	pop	{r7}
 80009aa:	4770      	bx	lr
 80009ac:	40021000 	.word	0x40021000
 80009b0:	40010000 	.word	0x40010000

080009b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b08a      	sub	sp, #40	; 0x28
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009bc:	f107 0318 	add.w	r3, r7, #24
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	605a      	str	r2, [r3, #4]
 80009c6:	609a      	str	r2, [r3, #8]
 80009c8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4a31      	ldr	r2, [pc, #196]	; (8000a94 <HAL_SPI_MspInit+0xe0>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d130      	bne.n	8000a36 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009d4:	4b30      	ldr	r3, [pc, #192]	; (8000a98 <HAL_SPI_MspInit+0xe4>)
 80009d6:	699b      	ldr	r3, [r3, #24]
 80009d8:	4a2f      	ldr	r2, [pc, #188]	; (8000a98 <HAL_SPI_MspInit+0xe4>)
 80009da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009de:	6193      	str	r3, [r2, #24]
 80009e0:	4b2d      	ldr	r3, [pc, #180]	; (8000a98 <HAL_SPI_MspInit+0xe4>)
 80009e2:	699b      	ldr	r3, [r3, #24]
 80009e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009e8:	617b      	str	r3, [r7, #20]
 80009ea:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ec:	4b2a      	ldr	r3, [pc, #168]	; (8000a98 <HAL_SPI_MspInit+0xe4>)
 80009ee:	699b      	ldr	r3, [r3, #24]
 80009f0:	4a29      	ldr	r2, [pc, #164]	; (8000a98 <HAL_SPI_MspInit+0xe4>)
 80009f2:	f043 0304 	orr.w	r3, r3, #4
 80009f6:	6193      	str	r3, [r2, #24]
 80009f8:	4b27      	ldr	r3, [pc, #156]	; (8000a98 <HAL_SPI_MspInit+0xe4>)
 80009fa:	699b      	ldr	r3, [r3, #24]
 80009fc:	f003 0304 	and.w	r3, r3, #4
 8000a00:	613b      	str	r3, [r7, #16]
 8000a02:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000a04:	23a0      	movs	r3, #160	; 0xa0
 8000a06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a0c:	2303      	movs	r3, #3
 8000a0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a10:	f107 0318 	add.w	r3, r7, #24
 8000a14:	4619      	mov	r1, r3
 8000a16:	4821      	ldr	r0, [pc, #132]	; (8000a9c <HAL_SPI_MspInit+0xe8>)
 8000a18:	f000 fbca 	bl	80011b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a1c:	2340      	movs	r3, #64	; 0x40
 8000a1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a20:	2300      	movs	r3, #0
 8000a22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a28:	f107 0318 	add.w	r3, r7, #24
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	481b      	ldr	r0, [pc, #108]	; (8000a9c <HAL_SPI_MspInit+0xe8>)
 8000a30:	f000 fbbe 	bl	80011b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000a34:	e029      	b.n	8000a8a <HAL_SPI_MspInit+0xd6>
  else if(hspi->Instance==SPI2)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4a19      	ldr	r2, [pc, #100]	; (8000aa0 <HAL_SPI_MspInit+0xec>)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d124      	bne.n	8000a8a <HAL_SPI_MspInit+0xd6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a40:	4b15      	ldr	r3, [pc, #84]	; (8000a98 <HAL_SPI_MspInit+0xe4>)
 8000a42:	69db      	ldr	r3, [r3, #28]
 8000a44:	4a14      	ldr	r2, [pc, #80]	; (8000a98 <HAL_SPI_MspInit+0xe4>)
 8000a46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a4a:	61d3      	str	r3, [r2, #28]
 8000a4c:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <HAL_SPI_MspInit+0xe4>)
 8000a4e:	69db      	ldr	r3, [r3, #28]
 8000a50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a54:	60fb      	str	r3, [r7, #12]
 8000a56:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a58:	4b0f      	ldr	r3, [pc, #60]	; (8000a98 <HAL_SPI_MspInit+0xe4>)
 8000a5a:	699b      	ldr	r3, [r3, #24]
 8000a5c:	4a0e      	ldr	r2, [pc, #56]	; (8000a98 <HAL_SPI_MspInit+0xe4>)
 8000a5e:	f043 0308 	orr.w	r3, r3, #8
 8000a62:	6193      	str	r3, [r2, #24]
 8000a64:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <HAL_SPI_MspInit+0xe4>)
 8000a66:	699b      	ldr	r3, [r3, #24]
 8000a68:	f003 0308 	and.w	r3, r3, #8
 8000a6c:	60bb      	str	r3, [r7, #8]
 8000a6e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000a70:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000a74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a76:	2302      	movs	r3, #2
 8000a78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a7a:	2303      	movs	r3, #3
 8000a7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a7e:	f107 0318 	add.w	r3, r7, #24
 8000a82:	4619      	mov	r1, r3
 8000a84:	4807      	ldr	r0, [pc, #28]	; (8000aa4 <HAL_SPI_MspInit+0xf0>)
 8000a86:	f000 fb93 	bl	80011b0 <HAL_GPIO_Init>
}
 8000a8a:	bf00      	nop
 8000a8c:	3728      	adds	r7, #40	; 0x28
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40013000 	.word	0x40013000
 8000a98:	40021000 	.word	0x40021000
 8000a9c:	40010800 	.word	0x40010800
 8000aa0:	40003800 	.word	0x40003800
 8000aa4:	40010c00 	.word	0x40010c00

08000aa8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b085      	sub	sp, #20
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a12      	ldr	r2, [pc, #72]	; (8000b00 <HAL_TIM_Base_MspInit+0x58>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d10c      	bne.n	8000ad4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000aba:	4b12      	ldr	r3, [pc, #72]	; (8000b04 <HAL_TIM_Base_MspInit+0x5c>)
 8000abc:	699b      	ldr	r3, [r3, #24]
 8000abe:	4a11      	ldr	r2, [pc, #68]	; (8000b04 <HAL_TIM_Base_MspInit+0x5c>)
 8000ac0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ac4:	6193      	str	r3, [r2, #24]
 8000ac6:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <HAL_TIM_Base_MspInit+0x5c>)
 8000ac8:	699b      	ldr	r3, [r3, #24]
 8000aca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000ad2:	e010      	b.n	8000af6 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000adc:	d10b      	bne.n	8000af6 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ade:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <HAL_TIM_Base_MspInit+0x5c>)
 8000ae0:	69db      	ldr	r3, [r3, #28]
 8000ae2:	4a08      	ldr	r2, [pc, #32]	; (8000b04 <HAL_TIM_Base_MspInit+0x5c>)
 8000ae4:	f043 0301 	orr.w	r3, r3, #1
 8000ae8:	61d3      	str	r3, [r2, #28]
 8000aea:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <HAL_TIM_Base_MspInit+0x5c>)
 8000aec:	69db      	ldr	r3, [r3, #28]
 8000aee:	f003 0301 	and.w	r3, r3, #1
 8000af2:	60bb      	str	r3, [r7, #8]
 8000af4:	68bb      	ldr	r3, [r7, #8]
}
 8000af6:	bf00      	nop
 8000af8:	3714      	adds	r7, #20
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bc80      	pop	{r7}
 8000afe:	4770      	bx	lr
 8000b00:	40012c00 	.word	0x40012c00
 8000b04:	40021000 	.word	0x40021000

08000b08 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b088      	sub	sp, #32
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b10:	f107 0310 	add.w	r3, r7, #16
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
 8000b1c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4a1f      	ldr	r2, [pc, #124]	; (8000ba0 <HAL_TIM_MspPostInit+0x98>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d119      	bne.n	8000b5c <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b28:	4b1e      	ldr	r3, [pc, #120]	; (8000ba4 <HAL_TIM_MspPostInit+0x9c>)
 8000b2a:	699b      	ldr	r3, [r3, #24]
 8000b2c:	4a1d      	ldr	r2, [pc, #116]	; (8000ba4 <HAL_TIM_MspPostInit+0x9c>)
 8000b2e:	f043 0304 	orr.w	r3, r3, #4
 8000b32:	6193      	str	r3, [r2, #24]
 8000b34:	4b1b      	ldr	r3, [pc, #108]	; (8000ba4 <HAL_TIM_MspPostInit+0x9c>)
 8000b36:	699b      	ldr	r3, [r3, #24]
 8000b38:	f003 0304 	and.w	r3, r3, #4
 8000b3c:	60fb      	str	r3, [r7, #12]
 8000b3e:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b44:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b46:	2302      	movs	r3, #2
 8000b48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4e:	f107 0310 	add.w	r3, r7, #16
 8000b52:	4619      	mov	r1, r3
 8000b54:	4814      	ldr	r0, [pc, #80]	; (8000ba8 <HAL_TIM_MspPostInit+0xa0>)
 8000b56:	f000 fb2b 	bl	80011b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000b5a:	e01c      	b.n	8000b96 <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM2)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b64:	d117      	bne.n	8000b96 <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b66:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <HAL_TIM_MspPostInit+0x9c>)
 8000b68:	699b      	ldr	r3, [r3, #24]
 8000b6a:	4a0e      	ldr	r2, [pc, #56]	; (8000ba4 <HAL_TIM_MspPostInit+0x9c>)
 8000b6c:	f043 0304 	orr.w	r3, r3, #4
 8000b70:	6193      	str	r3, [r2, #24]
 8000b72:	4b0c      	ldr	r3, [pc, #48]	; (8000ba4 <HAL_TIM_MspPostInit+0x9c>)
 8000b74:	699b      	ldr	r3, [r3, #24]
 8000b76:	f003 0304 	and.w	r3, r3, #4
 8000b7a:	60bb      	str	r3, [r7, #8]
 8000b7c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b82:	2302      	movs	r3, #2
 8000b84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b86:	2302      	movs	r3, #2
 8000b88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8a:	f107 0310 	add.w	r3, r7, #16
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4805      	ldr	r0, [pc, #20]	; (8000ba8 <HAL_TIM_MspPostInit+0xa0>)
 8000b92:	f000 fb0d 	bl	80011b0 <HAL_GPIO_Init>
}
 8000b96:	bf00      	nop
 8000b98:	3720      	adds	r7, #32
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40012c00 	.word	0x40012c00
 8000ba4:	40021000 	.word	0x40021000
 8000ba8:	40010800 	.word	0x40010800

08000bac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bb0:	e7fe      	b.n	8000bb0 <NMI_Handler+0x4>

08000bb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bb6:	e7fe      	b.n	8000bb6 <HardFault_Handler+0x4>

08000bb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <MemManage_Handler+0x4>

08000bbe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bc2:	e7fe      	b.n	8000bc2 <BusFault_Handler+0x4>

08000bc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc8:	e7fe      	b.n	8000bc8 <UsageFault_Handler+0x4>

08000bca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bc80      	pop	{r7}
 8000bd4:	4770      	bx	lr

08000bd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bc80      	pop	{r7}
 8000be0:	4770      	bx	lr

08000be2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bc80      	pop	{r7}
 8000bec:	4770      	bx	lr

08000bee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bf2:	f000 f98f 	bl	8000f14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRQ_Pin);
 8000bfe:	2004      	movs	r0, #4
 8000c00:	f000 fc72 	bl	80014e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000c04:	bf00      	nop
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b086      	sub	sp, #24
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c10:	4a14      	ldr	r2, [pc, #80]	; (8000c64 <_sbrk+0x5c>)
 8000c12:	4b15      	ldr	r3, [pc, #84]	; (8000c68 <_sbrk+0x60>)
 8000c14:	1ad3      	subs	r3, r2, r3
 8000c16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c1c:	4b13      	ldr	r3, [pc, #76]	; (8000c6c <_sbrk+0x64>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d102      	bne.n	8000c2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c24:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <_sbrk+0x64>)
 8000c26:	4a12      	ldr	r2, [pc, #72]	; (8000c70 <_sbrk+0x68>)
 8000c28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c2a:	4b10      	ldr	r3, [pc, #64]	; (8000c6c <_sbrk+0x64>)
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4413      	add	r3, r2
 8000c32:	693a      	ldr	r2, [r7, #16]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	d207      	bcs.n	8000c48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c38:	f004 fc46 	bl	80054c8 <__errno>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	220c      	movs	r2, #12
 8000c40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c42:	f04f 33ff 	mov.w	r3, #4294967295
 8000c46:	e009      	b.n	8000c5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c48:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <_sbrk+0x64>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c4e:	4b07      	ldr	r3, [pc, #28]	; (8000c6c <_sbrk+0x64>)
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4413      	add	r3, r2
 8000c56:	4a05      	ldr	r2, [pc, #20]	; (8000c6c <_sbrk+0x64>)
 8000c58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c5a:	68fb      	ldr	r3, [r7, #12]
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	3718      	adds	r7, #24
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	20005000 	.word	0x20005000
 8000c68:	00000400 	.word	0x00000400
 8000c6c:	20000294 	.word	0x20000294
 8000c70:	200007e8 	.word	0x200007e8

08000c74 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bc80      	pop	{r7}
 8000c7e:	4770      	bx	lr

08000c80 <u8x8_stm32_gpio_and_delay>:
#define TX_TIMEOUT		100

extern SPI_HandleTypeDef hspi2;

uint8_t u8x8_stm32_gpio_and_delay(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	60f8      	str	r0, [r7, #12]
 8000c88:	607b      	str	r3, [r7, #4]
 8000c8a:	460b      	mov	r3, r1
 8000c8c:	72fb      	strb	r3, [r7, #11]
 8000c8e:	4613      	mov	r3, r2
 8000c90:	72bb      	strb	r3, [r7, #10]
	/* STM32 supports HW SPI, Remove unused cases like U8X8_MSG_DELAY_XXX & U8X8_MSG_GPIO_XXX */
	switch(msg)
 8000c92:	7afb      	ldrb	r3, [r7, #11]
 8000c94:	3b28      	subs	r3, #40	; 0x28
 8000c96:	2b23      	cmp	r3, #35	; 0x23
 8000c98:	d867      	bhi.n	8000d6a <u8x8_stm32_gpio_and_delay+0xea>
 8000c9a:	a201      	add	r2, pc, #4	; (adr r2, 8000ca0 <u8x8_stm32_gpio_and_delay+0x20>)
 8000c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ca0:	08000d6b 	.word	0x08000d6b
 8000ca4:	08000d31 	.word	0x08000d31
 8000ca8:	08000d6b 	.word	0x08000d6b
 8000cac:	08000d6b 	.word	0x08000d6b
 8000cb0:	08000d6b 	.word	0x08000d6b
 8000cb4:	08000d6b 	.word	0x08000d6b
 8000cb8:	08000d6b 	.word	0x08000d6b
 8000cbc:	08000d6b 	.word	0x08000d6b
 8000cc0:	08000d6b 	.word	0x08000d6b
 8000cc4:	08000d6b 	.word	0x08000d6b
 8000cc8:	08000d6b 	.word	0x08000d6b
 8000ccc:	08000d6b 	.word	0x08000d6b
 8000cd0:	08000d6b 	.word	0x08000d6b
 8000cd4:	08000d6b 	.word	0x08000d6b
 8000cd8:	08000d6b 	.word	0x08000d6b
 8000cdc:	08000d6b 	.word	0x08000d6b
 8000ce0:	08000d6b 	.word	0x08000d6b
 8000ce4:	08000d6b 	.word	0x08000d6b
 8000ce8:	08000d6b 	.word	0x08000d6b
 8000cec:	08000d6b 	.word	0x08000d6b
 8000cf0:	08000d6b 	.word	0x08000d6b
 8000cf4:	08000d6b 	.word	0x08000d6b
 8000cf8:	08000d6b 	.word	0x08000d6b
 8000cfc:	08000d6b 	.word	0x08000d6b
 8000d00:	08000d6b 	.word	0x08000d6b
 8000d04:	08000d6b 	.word	0x08000d6b
 8000d08:	08000d6b 	.word	0x08000d6b
 8000d0c:	08000d6b 	.word	0x08000d6b
 8000d10:	08000d6b 	.word	0x08000d6b
 8000d14:	08000d6b 	.word	0x08000d6b
 8000d18:	08000d6b 	.word	0x08000d6b
 8000d1c:	08000d6b 	.word	0x08000d6b
 8000d20:	08000d6b 	.word	0x08000d6b
 8000d24:	08000d3b 	.word	0x08000d3b
 8000d28:	08000d4b 	.word	0x08000d4b
 8000d2c:	08000d5b 	.word	0x08000d5b
	case U8X8_MSG_GPIO_AND_DELAY_INIT:
		/* Insert codes for initialization */
		break;
	case U8X8_MSG_DELAY_MILLI:
		/* ms Delay */
		HAL_Delay(arg_int);
 8000d30:	7abb      	ldrb	r3, [r7, #10]
 8000d32:	4618      	mov	r0, r3
 8000d34:	f000 f90a 	bl	8000f4c <HAL_Delay>
		break;
 8000d38:	e017      	b.n	8000d6a <u8x8_stm32_gpio_and_delay+0xea>
	case U8X8_MSG_GPIO_CS:
		/* Insert codes for SS pin control */
		HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, arg_int);
 8000d3a:	7abb      	ldrb	r3, [r7, #10]
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d42:	480c      	ldr	r0, [pc, #48]	; (8000d74 <u8x8_stm32_gpio_and_delay+0xf4>)
 8000d44:	f000 fbb8 	bl	80014b8 <HAL_GPIO_WritePin>
		break;
 8000d48:	e00f      	b.n	8000d6a <u8x8_stm32_gpio_and_delay+0xea>
	case U8X8_MSG_GPIO_DC:
		/* Insert codes for DC pin control */
		HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, arg_int);
 8000d4a:	7abb      	ldrb	r3, [r7, #10]
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d52:	4808      	ldr	r0, [pc, #32]	; (8000d74 <u8x8_stm32_gpio_and_delay+0xf4>)
 8000d54:	f000 fbb0 	bl	80014b8 <HAL_GPIO_WritePin>
		break;
 8000d58:	e007      	b.n	8000d6a <u8x8_stm32_gpio_and_delay+0xea>
	case U8X8_MSG_GPIO_RESET:
		/* Insert codes for RST pin control */
		HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, arg_int);
 8000d5a:	7abb      	ldrb	r3, [r7, #10]
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d62:	4804      	ldr	r0, [pc, #16]	; (8000d74 <u8x8_stm32_gpio_and_delay+0xf4>)
 8000d64:	f000 fba8 	bl	80014b8 <HAL_GPIO_WritePin>
		break;
 8000d68:	bf00      	nop
	}
	return 1;
 8000d6a:	2301      	movs	r3, #1
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3710      	adds	r7, #16
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	40010c00 	.word	0x40010c00

08000d78 <u8x8_byte_stm32_hw_spi>:

uint8_t u8x8_byte_stm32_hw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	60f8      	str	r0, [r7, #12]
 8000d80:	607b      	str	r3, [r7, #4]
 8000d82:	460b      	mov	r3, r1
 8000d84:	72fb      	strb	r3, [r7, #11]
 8000d86:	4613      	mov	r3, r2
 8000d88:	72bb      	strb	r3, [r7, #10]
	switch(msg) {
 8000d8a:	7afb      	ldrb	r3, [r7, #11]
 8000d8c:	3b14      	subs	r3, #20
 8000d8e:	2b0c      	cmp	r3, #12
 8000d90:	d847      	bhi.n	8000e22 <u8x8_byte_stm32_hw_spi+0xaa>
 8000d92:	a201      	add	r2, pc, #4	; (adr r2, 8000d98 <u8x8_byte_stm32_hw_spi+0x20>)
 8000d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d98:	08000e27 	.word	0x08000e27
 8000d9c:	08000e23 	.word	0x08000e23
 8000da0:	08000e23 	.word	0x08000e23
 8000da4:	08000dcd 	.word	0x08000dcd
 8000da8:	08000df3 	.word	0x08000df3
 8000dac:	08000e0b 	.word	0x08000e0b
 8000db0:	08000e23 	.word	0x08000e23
 8000db4:	08000e23 	.word	0x08000e23
 8000db8:	08000e23 	.word	0x08000e23
 8000dbc:	08000e23 	.word	0x08000e23
 8000dc0:	08000e23 	.word	0x08000e23
 8000dc4:	08000e23 	.word	0x08000e23
 8000dc8:	08000de5 	.word	0x08000de5
	case U8X8_MSG_BYTE_SEND:
		/* Insert codes to transmit data */
		if(HAL_SPI_Transmit(&hspi2, arg_ptr, arg_int, TX_TIMEOUT) != HAL_OK) return 0;
 8000dcc:	7abb      	ldrb	r3, [r7, #10]
 8000dce:	b29a      	uxth	r2, r3
 8000dd0:	2364      	movs	r3, #100	; 0x64
 8000dd2:	6879      	ldr	r1, [r7, #4]
 8000dd4:	4818      	ldr	r0, [pc, #96]	; (8000e38 <u8x8_byte_stm32_hw_spi+0xc0>)
 8000dd6:	f001 f801 	bl	8001ddc <HAL_SPI_Transmit>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d024      	beq.n	8000e2a <u8x8_byte_stm32_hw_spi+0xb2>
 8000de0:	2300      	movs	r3, #0
 8000de2:	e024      	b.n	8000e2e <u8x8_byte_stm32_hw_spi+0xb6>
	case U8X8_MSG_BYTE_INIT:
		/* Insert codes to begin SPI transmission */
		break;
	case U8X8_MSG_BYTE_SET_DC:
		/* Control DC pin, U8X8_MSG_GPIO_DC will be called */
		u8x8_gpio_SetDC(u8x8, arg_int);
 8000de4:	7abb      	ldrb	r3, [r7, #10]
 8000de6:	461a      	mov	r2, r3
 8000de8:	214a      	movs	r1, #74	; 0x4a
 8000dea:	68f8      	ldr	r0, [r7, #12]
 8000dec:	f004 fad6 	bl	800539c <u8x8_gpio_call>
		break;
 8000df0:	e01c      	b.n	8000e2c <u8x8_byte_stm32_hw_spi+0xb4>
	case U8X8_MSG_BYTE_START_TRANSFER:
		/* Select slave, U8X8_MSG_GPIO_CS will be called */
		u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_enable_level);
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	461a      	mov	r2, r3
 8000dfa:	2149      	movs	r1, #73	; 0x49
 8000dfc:	68f8      	ldr	r0, [r7, #12]
 8000dfe:	f004 facd 	bl	800539c <u8x8_gpio_call>
		HAL_Delay(1);
 8000e02:	2001      	movs	r0, #1
 8000e04:	f000 f8a2 	bl	8000f4c <HAL_Delay>
		break;
 8000e08:	e010      	b.n	8000e2c <u8x8_byte_stm32_hw_spi+0xb4>
	case U8X8_MSG_BYTE_END_TRANSFER:
		HAL_Delay(1);
 8000e0a:	2001      	movs	r0, #1
 8000e0c:	f000 f89e 	bl	8000f4c <HAL_Delay>
		/* Insert codes to end SPI transmission */
		u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	785b      	ldrb	r3, [r3, #1]
 8000e16:	461a      	mov	r2, r3
 8000e18:	2149      	movs	r1, #73	; 0x49
 8000e1a:	68f8      	ldr	r0, [r7, #12]
 8000e1c:	f004 fabe 	bl	800539c <u8x8_gpio_call>
		break;
 8000e20:	e004      	b.n	8000e2c <u8x8_byte_stm32_hw_spi+0xb4>
	default:
		return 0;
 8000e22:	2300      	movs	r3, #0
 8000e24:	e003      	b.n	8000e2e <u8x8_byte_stm32_hw_spi+0xb6>
		break;
 8000e26:	bf00      	nop
 8000e28:	e000      	b.n	8000e2c <u8x8_byte_stm32_hw_spi+0xb4>
		break;
 8000e2a:	bf00      	nop
	}
	return 1;
 8000e2c:	2301      	movs	r3, #1
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3710      	adds	r7, #16
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	200000e0 	.word	0x200000e0

08000e3c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e3c:	f7ff ff1a 	bl	8000c74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e40:	480b      	ldr	r0, [pc, #44]	; (8000e70 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e42:	490c      	ldr	r1, [pc, #48]	; (8000e74 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e44:	4a0c      	ldr	r2, [pc, #48]	; (8000e78 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e48:	e002      	b.n	8000e50 <LoopCopyDataInit>

08000e4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e4e:	3304      	adds	r3, #4

08000e50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e54:	d3f9      	bcc.n	8000e4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e56:	4a09      	ldr	r2, [pc, #36]	; (8000e7c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e58:	4c09      	ldr	r4, [pc, #36]	; (8000e80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e5c:	e001      	b.n	8000e62 <LoopFillZerobss>

08000e5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e60:	3204      	adds	r2, #4

08000e62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e64:	d3fb      	bcc.n	8000e5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e66:	f004 fb35 	bl	80054d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e6a:	f7ff f96f 	bl	800014c <main>
  bx lr
 8000e6e:	4770      	bx	lr
  ldr r0, =_sdata
 8000e70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e74:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000e78:	080068ac 	.word	0x080068ac
  ldr r2, =_sbss
 8000e7c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000e80:	200007e4 	.word	0x200007e4

08000e84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e84:	e7fe      	b.n	8000e84 <ADC1_2_IRQHandler>
	...

08000e88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e8c:	4b08      	ldr	r3, [pc, #32]	; (8000eb0 <HAL_Init+0x28>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a07      	ldr	r2, [pc, #28]	; (8000eb0 <HAL_Init+0x28>)
 8000e92:	f043 0310 	orr.w	r3, r3, #16
 8000e96:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e98:	2003      	movs	r0, #3
 8000e9a:	f000 f947 	bl	800112c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e9e:	200f      	movs	r0, #15
 8000ea0:	f000 f808 	bl	8000eb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ea4:	f7ff fd54 	bl	8000950 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ea8:	2300      	movs	r3, #0
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40022000 	.word	0x40022000

08000eb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ebc:	4b12      	ldr	r3, [pc, #72]	; (8000f08 <HAL_InitTick+0x54>)
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <HAL_InitTick+0x58>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f000 f95f 	bl	8001196 <HAL_SYSTICK_Config>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e00e      	b.n	8000f00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2b0f      	cmp	r3, #15
 8000ee6:	d80a      	bhi.n	8000efe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	6879      	ldr	r1, [r7, #4]
 8000eec:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef0:	f000 f927 	bl	8001142 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ef4:	4a06      	ldr	r2, [pc, #24]	; (8000f10 <HAL_InitTick+0x5c>)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000efa:	2300      	movs	r3, #0
 8000efc:	e000      	b.n	8000f00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	20000010 	.word	0x20000010
 8000f0c:	20000018 	.word	0x20000018
 8000f10:	20000014 	.word	0x20000014

08000f14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f18:	4b05      	ldr	r3, [pc, #20]	; (8000f30 <HAL_IncTick+0x1c>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	4b05      	ldr	r3, [pc, #20]	; (8000f34 <HAL_IncTick+0x20>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4413      	add	r3, r2
 8000f24:	4a03      	ldr	r2, [pc, #12]	; (8000f34 <HAL_IncTick+0x20>)
 8000f26:	6013      	str	r3, [r2, #0]
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bc80      	pop	{r7}
 8000f2e:	4770      	bx	lr
 8000f30:	20000018 	.word	0x20000018
 8000f34:	20000298 	.word	0x20000298

08000f38 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f3c:	4b02      	ldr	r3, [pc, #8]	; (8000f48 <HAL_GetTick+0x10>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bc80      	pop	{r7}
 8000f46:	4770      	bx	lr
 8000f48:	20000298 	.word	0x20000298

08000f4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f54:	f7ff fff0 	bl	8000f38 <HAL_GetTick>
 8000f58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f64:	d005      	beq.n	8000f72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f66:	4b0a      	ldr	r3, [pc, #40]	; (8000f90 <HAL_Delay+0x44>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	4413      	add	r3, r2
 8000f70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f72:	bf00      	nop
 8000f74:	f7ff ffe0 	bl	8000f38 <HAL_GetTick>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	68fa      	ldr	r2, [r7, #12]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	d8f7      	bhi.n	8000f74 <HAL_Delay+0x28>
  {
  }
}
 8000f84:	bf00      	nop
 8000f86:	bf00      	nop
 8000f88:	3710      	adds	r7, #16
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20000018 	.word	0x20000018

08000f94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	f003 0307 	and.w	r3, r3, #7
 8000fa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fa4:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000faa:	68ba      	ldr	r2, [r7, #8]
 8000fac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fc6:	4a04      	ldr	r2, [pc, #16]	; (8000fd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	60d3      	str	r3, [r2, #12]
}
 8000fcc:	bf00      	nop
 8000fce:	3714      	adds	r7, #20
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bc80      	pop	{r7}
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	e000ed00 	.word	0xe000ed00

08000fdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fe0:	4b04      	ldr	r3, [pc, #16]	; (8000ff4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	0a1b      	lsrs	r3, r3, #8
 8000fe6:	f003 0307 	and.w	r3, r3, #7
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bc80      	pop	{r7}
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001006:	2b00      	cmp	r3, #0
 8001008:	db0b      	blt.n	8001022 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	f003 021f 	and.w	r2, r3, #31
 8001010:	4906      	ldr	r1, [pc, #24]	; (800102c <__NVIC_EnableIRQ+0x34>)
 8001012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001016:	095b      	lsrs	r3, r3, #5
 8001018:	2001      	movs	r0, #1
 800101a:	fa00 f202 	lsl.w	r2, r0, r2
 800101e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001022:	bf00      	nop
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	bc80      	pop	{r7}
 800102a:	4770      	bx	lr
 800102c:	e000e100 	.word	0xe000e100

08001030 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	6039      	str	r1, [r7, #0]
 800103a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800103c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001040:	2b00      	cmp	r3, #0
 8001042:	db0a      	blt.n	800105a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	b2da      	uxtb	r2, r3
 8001048:	490c      	ldr	r1, [pc, #48]	; (800107c <__NVIC_SetPriority+0x4c>)
 800104a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104e:	0112      	lsls	r2, r2, #4
 8001050:	b2d2      	uxtb	r2, r2
 8001052:	440b      	add	r3, r1
 8001054:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001058:	e00a      	b.n	8001070 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	b2da      	uxtb	r2, r3
 800105e:	4908      	ldr	r1, [pc, #32]	; (8001080 <__NVIC_SetPriority+0x50>)
 8001060:	79fb      	ldrb	r3, [r7, #7]
 8001062:	f003 030f 	and.w	r3, r3, #15
 8001066:	3b04      	subs	r3, #4
 8001068:	0112      	lsls	r2, r2, #4
 800106a:	b2d2      	uxtb	r2, r2
 800106c:	440b      	add	r3, r1
 800106e:	761a      	strb	r2, [r3, #24]
}
 8001070:	bf00      	nop
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	bc80      	pop	{r7}
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	e000e100 	.word	0xe000e100
 8001080:	e000ed00 	.word	0xe000ed00

08001084 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001084:	b480      	push	{r7}
 8001086:	b089      	sub	sp, #36	; 0x24
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	60b9      	str	r1, [r7, #8]
 800108e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	f003 0307 	and.w	r3, r3, #7
 8001096:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	f1c3 0307 	rsb	r3, r3, #7
 800109e:	2b04      	cmp	r3, #4
 80010a0:	bf28      	it	cs
 80010a2:	2304      	movcs	r3, #4
 80010a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	3304      	adds	r3, #4
 80010aa:	2b06      	cmp	r3, #6
 80010ac:	d902      	bls.n	80010b4 <NVIC_EncodePriority+0x30>
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	3b03      	subs	r3, #3
 80010b2:	e000      	b.n	80010b6 <NVIC_EncodePriority+0x32>
 80010b4:	2300      	movs	r3, #0
 80010b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b8:	f04f 32ff 	mov.w	r2, #4294967295
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	43da      	mvns	r2, r3
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	401a      	ands	r2, r3
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010cc:	f04f 31ff 	mov.w	r1, #4294967295
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	fa01 f303 	lsl.w	r3, r1, r3
 80010d6:	43d9      	mvns	r1, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010dc:	4313      	orrs	r3, r2
         );
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3724      	adds	r7, #36	; 0x24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bc80      	pop	{r7}
 80010e6:	4770      	bx	lr

080010e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	3b01      	subs	r3, #1
 80010f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010f8:	d301      	bcc.n	80010fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010fa:	2301      	movs	r3, #1
 80010fc:	e00f      	b.n	800111e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010fe:	4a0a      	ldr	r2, [pc, #40]	; (8001128 <SysTick_Config+0x40>)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	3b01      	subs	r3, #1
 8001104:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001106:	210f      	movs	r1, #15
 8001108:	f04f 30ff 	mov.w	r0, #4294967295
 800110c:	f7ff ff90 	bl	8001030 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001110:	4b05      	ldr	r3, [pc, #20]	; (8001128 <SysTick_Config+0x40>)
 8001112:	2200      	movs	r2, #0
 8001114:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001116:	4b04      	ldr	r3, [pc, #16]	; (8001128 <SysTick_Config+0x40>)
 8001118:	2207      	movs	r2, #7
 800111a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800111c:	2300      	movs	r3, #0
}
 800111e:	4618      	mov	r0, r3
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	e000e010 	.word	0xe000e010

0800112c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f7ff ff2d 	bl	8000f94 <__NVIC_SetPriorityGrouping>
}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001142:	b580      	push	{r7, lr}
 8001144:	b086      	sub	sp, #24
 8001146:	af00      	add	r7, sp, #0
 8001148:	4603      	mov	r3, r0
 800114a:	60b9      	str	r1, [r7, #8]
 800114c:	607a      	str	r2, [r7, #4]
 800114e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001150:	2300      	movs	r3, #0
 8001152:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001154:	f7ff ff42 	bl	8000fdc <__NVIC_GetPriorityGrouping>
 8001158:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	68b9      	ldr	r1, [r7, #8]
 800115e:	6978      	ldr	r0, [r7, #20]
 8001160:	f7ff ff90 	bl	8001084 <NVIC_EncodePriority>
 8001164:	4602      	mov	r2, r0
 8001166:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800116a:	4611      	mov	r1, r2
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff ff5f 	bl	8001030 <__NVIC_SetPriority>
}
 8001172:	bf00      	nop
 8001174:	3718      	adds	r7, #24
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	b082      	sub	sp, #8
 800117e:	af00      	add	r7, sp, #0
 8001180:	4603      	mov	r3, r0
 8001182:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff ff35 	bl	8000ff8 <__NVIC_EnableIRQ>
}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	b082      	sub	sp, #8
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f7ff ffa2 	bl	80010e8 <SysTick_Config>
 80011a4:	4603      	mov	r3, r0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
	...

080011b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b08b      	sub	sp, #44	; 0x2c
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011ba:	2300      	movs	r3, #0
 80011bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80011be:	2300      	movs	r3, #0
 80011c0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011c2:	e169      	b.n	8001498 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80011c4:	2201      	movs	r2, #1
 80011c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	69fa      	ldr	r2, [r7, #28]
 80011d4:	4013      	ands	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	429a      	cmp	r2, r3
 80011de:	f040 8158 	bne.w	8001492 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	4a9a      	ldr	r2, [pc, #616]	; (8001450 <HAL_GPIO_Init+0x2a0>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d05e      	beq.n	80012aa <HAL_GPIO_Init+0xfa>
 80011ec:	4a98      	ldr	r2, [pc, #608]	; (8001450 <HAL_GPIO_Init+0x2a0>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d875      	bhi.n	80012de <HAL_GPIO_Init+0x12e>
 80011f2:	4a98      	ldr	r2, [pc, #608]	; (8001454 <HAL_GPIO_Init+0x2a4>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d058      	beq.n	80012aa <HAL_GPIO_Init+0xfa>
 80011f8:	4a96      	ldr	r2, [pc, #600]	; (8001454 <HAL_GPIO_Init+0x2a4>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d86f      	bhi.n	80012de <HAL_GPIO_Init+0x12e>
 80011fe:	4a96      	ldr	r2, [pc, #600]	; (8001458 <HAL_GPIO_Init+0x2a8>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d052      	beq.n	80012aa <HAL_GPIO_Init+0xfa>
 8001204:	4a94      	ldr	r2, [pc, #592]	; (8001458 <HAL_GPIO_Init+0x2a8>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d869      	bhi.n	80012de <HAL_GPIO_Init+0x12e>
 800120a:	4a94      	ldr	r2, [pc, #592]	; (800145c <HAL_GPIO_Init+0x2ac>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d04c      	beq.n	80012aa <HAL_GPIO_Init+0xfa>
 8001210:	4a92      	ldr	r2, [pc, #584]	; (800145c <HAL_GPIO_Init+0x2ac>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d863      	bhi.n	80012de <HAL_GPIO_Init+0x12e>
 8001216:	4a92      	ldr	r2, [pc, #584]	; (8001460 <HAL_GPIO_Init+0x2b0>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d046      	beq.n	80012aa <HAL_GPIO_Init+0xfa>
 800121c:	4a90      	ldr	r2, [pc, #576]	; (8001460 <HAL_GPIO_Init+0x2b0>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d85d      	bhi.n	80012de <HAL_GPIO_Init+0x12e>
 8001222:	2b12      	cmp	r3, #18
 8001224:	d82a      	bhi.n	800127c <HAL_GPIO_Init+0xcc>
 8001226:	2b12      	cmp	r3, #18
 8001228:	d859      	bhi.n	80012de <HAL_GPIO_Init+0x12e>
 800122a:	a201      	add	r2, pc, #4	; (adr r2, 8001230 <HAL_GPIO_Init+0x80>)
 800122c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001230:	080012ab 	.word	0x080012ab
 8001234:	08001285 	.word	0x08001285
 8001238:	08001297 	.word	0x08001297
 800123c:	080012d9 	.word	0x080012d9
 8001240:	080012df 	.word	0x080012df
 8001244:	080012df 	.word	0x080012df
 8001248:	080012df 	.word	0x080012df
 800124c:	080012df 	.word	0x080012df
 8001250:	080012df 	.word	0x080012df
 8001254:	080012df 	.word	0x080012df
 8001258:	080012df 	.word	0x080012df
 800125c:	080012df 	.word	0x080012df
 8001260:	080012df 	.word	0x080012df
 8001264:	080012df 	.word	0x080012df
 8001268:	080012df 	.word	0x080012df
 800126c:	080012df 	.word	0x080012df
 8001270:	080012df 	.word	0x080012df
 8001274:	0800128d 	.word	0x0800128d
 8001278:	080012a1 	.word	0x080012a1
 800127c:	4a79      	ldr	r2, [pc, #484]	; (8001464 <HAL_GPIO_Init+0x2b4>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d013      	beq.n	80012aa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001282:	e02c      	b.n	80012de <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	623b      	str	r3, [r7, #32]
          break;
 800128a:	e029      	b.n	80012e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	3304      	adds	r3, #4
 8001292:	623b      	str	r3, [r7, #32]
          break;
 8001294:	e024      	b.n	80012e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	3308      	adds	r3, #8
 800129c:	623b      	str	r3, [r7, #32]
          break;
 800129e:	e01f      	b.n	80012e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	330c      	adds	r3, #12
 80012a6:	623b      	str	r3, [r7, #32]
          break;
 80012a8:	e01a      	b.n	80012e0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d102      	bne.n	80012b8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80012b2:	2304      	movs	r3, #4
 80012b4:	623b      	str	r3, [r7, #32]
          break;
 80012b6:	e013      	b.n	80012e0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d105      	bne.n	80012cc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012c0:	2308      	movs	r3, #8
 80012c2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	69fa      	ldr	r2, [r7, #28]
 80012c8:	611a      	str	r2, [r3, #16]
          break;
 80012ca:	e009      	b.n	80012e0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012cc:	2308      	movs	r3, #8
 80012ce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	69fa      	ldr	r2, [r7, #28]
 80012d4:	615a      	str	r2, [r3, #20]
          break;
 80012d6:	e003      	b.n	80012e0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80012d8:	2300      	movs	r3, #0
 80012da:	623b      	str	r3, [r7, #32]
          break;
 80012dc:	e000      	b.n	80012e0 <HAL_GPIO_Init+0x130>
          break;
 80012de:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	2bff      	cmp	r3, #255	; 0xff
 80012e4:	d801      	bhi.n	80012ea <HAL_GPIO_Init+0x13a>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	e001      	b.n	80012ee <HAL_GPIO_Init+0x13e>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	3304      	adds	r3, #4
 80012ee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	2bff      	cmp	r3, #255	; 0xff
 80012f4:	d802      	bhi.n	80012fc <HAL_GPIO_Init+0x14c>
 80012f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	e002      	b.n	8001302 <HAL_GPIO_Init+0x152>
 80012fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fe:	3b08      	subs	r3, #8
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	210f      	movs	r1, #15
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	fa01 f303 	lsl.w	r3, r1, r3
 8001310:	43db      	mvns	r3, r3
 8001312:	401a      	ands	r2, r3
 8001314:	6a39      	ldr	r1, [r7, #32]
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	fa01 f303 	lsl.w	r3, r1, r3
 800131c:	431a      	orrs	r2, r3
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800132a:	2b00      	cmp	r3, #0
 800132c:	f000 80b1 	beq.w	8001492 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001330:	4b4d      	ldr	r3, [pc, #308]	; (8001468 <HAL_GPIO_Init+0x2b8>)
 8001332:	699b      	ldr	r3, [r3, #24]
 8001334:	4a4c      	ldr	r2, [pc, #304]	; (8001468 <HAL_GPIO_Init+0x2b8>)
 8001336:	f043 0301 	orr.w	r3, r3, #1
 800133a:	6193      	str	r3, [r2, #24]
 800133c:	4b4a      	ldr	r3, [pc, #296]	; (8001468 <HAL_GPIO_Init+0x2b8>)
 800133e:	699b      	ldr	r3, [r3, #24]
 8001340:	f003 0301 	and.w	r3, r3, #1
 8001344:	60bb      	str	r3, [r7, #8]
 8001346:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001348:	4a48      	ldr	r2, [pc, #288]	; (800146c <HAL_GPIO_Init+0x2bc>)
 800134a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800134c:	089b      	lsrs	r3, r3, #2
 800134e:	3302      	adds	r3, #2
 8001350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001354:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001358:	f003 0303 	and.w	r3, r3, #3
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	220f      	movs	r2, #15
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	43db      	mvns	r3, r3
 8001366:	68fa      	ldr	r2, [r7, #12]
 8001368:	4013      	ands	r3, r2
 800136a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	4a40      	ldr	r2, [pc, #256]	; (8001470 <HAL_GPIO_Init+0x2c0>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d013      	beq.n	800139c <HAL_GPIO_Init+0x1ec>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	4a3f      	ldr	r2, [pc, #252]	; (8001474 <HAL_GPIO_Init+0x2c4>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d00d      	beq.n	8001398 <HAL_GPIO_Init+0x1e8>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	4a3e      	ldr	r2, [pc, #248]	; (8001478 <HAL_GPIO_Init+0x2c8>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d007      	beq.n	8001394 <HAL_GPIO_Init+0x1e4>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	4a3d      	ldr	r2, [pc, #244]	; (800147c <HAL_GPIO_Init+0x2cc>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d101      	bne.n	8001390 <HAL_GPIO_Init+0x1e0>
 800138c:	2303      	movs	r3, #3
 800138e:	e006      	b.n	800139e <HAL_GPIO_Init+0x1ee>
 8001390:	2304      	movs	r3, #4
 8001392:	e004      	b.n	800139e <HAL_GPIO_Init+0x1ee>
 8001394:	2302      	movs	r3, #2
 8001396:	e002      	b.n	800139e <HAL_GPIO_Init+0x1ee>
 8001398:	2301      	movs	r3, #1
 800139a:	e000      	b.n	800139e <HAL_GPIO_Init+0x1ee>
 800139c:	2300      	movs	r3, #0
 800139e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013a0:	f002 0203 	and.w	r2, r2, #3
 80013a4:	0092      	lsls	r2, r2, #2
 80013a6:	4093      	lsls	r3, r2
 80013a8:	68fa      	ldr	r2, [r7, #12]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80013ae:	492f      	ldr	r1, [pc, #188]	; (800146c <HAL_GPIO_Init+0x2bc>)
 80013b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b2:	089b      	lsrs	r3, r3, #2
 80013b4:	3302      	adds	r3, #2
 80013b6:	68fa      	ldr	r2, [r7, #12]
 80013b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d006      	beq.n	80013d6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80013c8:	4b2d      	ldr	r3, [pc, #180]	; (8001480 <HAL_GPIO_Init+0x2d0>)
 80013ca:	689a      	ldr	r2, [r3, #8]
 80013cc:	492c      	ldr	r1, [pc, #176]	; (8001480 <HAL_GPIO_Init+0x2d0>)
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	608b      	str	r3, [r1, #8]
 80013d4:	e006      	b.n	80013e4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80013d6:	4b2a      	ldr	r3, [pc, #168]	; (8001480 <HAL_GPIO_Init+0x2d0>)
 80013d8:	689a      	ldr	r2, [r3, #8]
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	43db      	mvns	r3, r3
 80013de:	4928      	ldr	r1, [pc, #160]	; (8001480 <HAL_GPIO_Init+0x2d0>)
 80013e0:	4013      	ands	r3, r2
 80013e2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d006      	beq.n	80013fe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80013f0:	4b23      	ldr	r3, [pc, #140]	; (8001480 <HAL_GPIO_Init+0x2d0>)
 80013f2:	68da      	ldr	r2, [r3, #12]
 80013f4:	4922      	ldr	r1, [pc, #136]	; (8001480 <HAL_GPIO_Init+0x2d0>)
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	60cb      	str	r3, [r1, #12]
 80013fc:	e006      	b.n	800140c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80013fe:	4b20      	ldr	r3, [pc, #128]	; (8001480 <HAL_GPIO_Init+0x2d0>)
 8001400:	68da      	ldr	r2, [r3, #12]
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	43db      	mvns	r3, r3
 8001406:	491e      	ldr	r1, [pc, #120]	; (8001480 <HAL_GPIO_Init+0x2d0>)
 8001408:	4013      	ands	r3, r2
 800140a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d006      	beq.n	8001426 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001418:	4b19      	ldr	r3, [pc, #100]	; (8001480 <HAL_GPIO_Init+0x2d0>)
 800141a:	685a      	ldr	r2, [r3, #4]
 800141c:	4918      	ldr	r1, [pc, #96]	; (8001480 <HAL_GPIO_Init+0x2d0>)
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	4313      	orrs	r3, r2
 8001422:	604b      	str	r3, [r1, #4]
 8001424:	e006      	b.n	8001434 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001426:	4b16      	ldr	r3, [pc, #88]	; (8001480 <HAL_GPIO_Init+0x2d0>)
 8001428:	685a      	ldr	r2, [r3, #4]
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	43db      	mvns	r3, r3
 800142e:	4914      	ldr	r1, [pc, #80]	; (8001480 <HAL_GPIO_Init+0x2d0>)
 8001430:	4013      	ands	r3, r2
 8001432:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d021      	beq.n	8001484 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001440:	4b0f      	ldr	r3, [pc, #60]	; (8001480 <HAL_GPIO_Init+0x2d0>)
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	490e      	ldr	r1, [pc, #56]	; (8001480 <HAL_GPIO_Init+0x2d0>)
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	4313      	orrs	r3, r2
 800144a:	600b      	str	r3, [r1, #0]
 800144c:	e021      	b.n	8001492 <HAL_GPIO_Init+0x2e2>
 800144e:	bf00      	nop
 8001450:	10320000 	.word	0x10320000
 8001454:	10310000 	.word	0x10310000
 8001458:	10220000 	.word	0x10220000
 800145c:	10210000 	.word	0x10210000
 8001460:	10120000 	.word	0x10120000
 8001464:	10110000 	.word	0x10110000
 8001468:	40021000 	.word	0x40021000
 800146c:	40010000 	.word	0x40010000
 8001470:	40010800 	.word	0x40010800
 8001474:	40010c00 	.word	0x40010c00
 8001478:	40011000 	.word	0x40011000
 800147c:	40011400 	.word	0x40011400
 8001480:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001484:	4b0b      	ldr	r3, [pc, #44]	; (80014b4 <HAL_GPIO_Init+0x304>)
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	43db      	mvns	r3, r3
 800148c:	4909      	ldr	r1, [pc, #36]	; (80014b4 <HAL_GPIO_Init+0x304>)
 800148e:	4013      	ands	r3, r2
 8001490:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001494:	3301      	adds	r3, #1
 8001496:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149e:	fa22 f303 	lsr.w	r3, r2, r3
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	f47f ae8e 	bne.w	80011c4 <HAL_GPIO_Init+0x14>
  }
}
 80014a8:	bf00      	nop
 80014aa:	bf00      	nop
 80014ac:	372c      	adds	r7, #44	; 0x2c
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bc80      	pop	{r7}
 80014b2:	4770      	bx	lr
 80014b4:	40010400 	.word	0x40010400

080014b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	460b      	mov	r3, r1
 80014c2:	807b      	strh	r3, [r7, #2]
 80014c4:	4613      	mov	r3, r2
 80014c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014c8:	787b      	ldrb	r3, [r7, #1]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d003      	beq.n	80014d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014ce:	887a      	ldrh	r2, [r7, #2]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80014d4:	e003      	b.n	80014de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80014d6:	887b      	ldrh	r3, [r7, #2]
 80014d8:	041a      	lsls	r2, r3, #16
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	611a      	str	r2, [r3, #16]
}
 80014de:	bf00      	nop
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bc80      	pop	{r7}
 80014e6:	4770      	bx	lr

080014e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80014f2:	4b08      	ldr	r3, [pc, #32]	; (8001514 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014f4:	695a      	ldr	r2, [r3, #20]
 80014f6:	88fb      	ldrh	r3, [r7, #6]
 80014f8:	4013      	ands	r3, r2
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d006      	beq.n	800150c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014fe:	4a05      	ldr	r2, [pc, #20]	; (8001514 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001500:	88fb      	ldrh	r3, [r7, #6]
 8001502:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001504:	88fb      	ldrh	r3, [r7, #6]
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff fa0a 	bl	8000920 <HAL_GPIO_EXTI_Callback>
  }
}
 800150c:	bf00      	nop
 800150e:	3708      	adds	r7, #8
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	40010400 	.word	0x40010400

08001518 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d101      	bne.n	800152a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e272      	b.n	8001a10 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	2b00      	cmp	r3, #0
 8001534:	f000 8087 	beq.w	8001646 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001538:	4b92      	ldr	r3, [pc, #584]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f003 030c 	and.w	r3, r3, #12
 8001540:	2b04      	cmp	r3, #4
 8001542:	d00c      	beq.n	800155e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001544:	4b8f      	ldr	r3, [pc, #572]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f003 030c 	and.w	r3, r3, #12
 800154c:	2b08      	cmp	r3, #8
 800154e:	d112      	bne.n	8001576 <HAL_RCC_OscConfig+0x5e>
 8001550:	4b8c      	ldr	r3, [pc, #560]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800155c:	d10b      	bne.n	8001576 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800155e:	4b89      	ldr	r3, [pc, #548]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d06c      	beq.n	8001644 <HAL_RCC_OscConfig+0x12c>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d168      	bne.n	8001644 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e24c      	b.n	8001a10 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800157e:	d106      	bne.n	800158e <HAL_RCC_OscConfig+0x76>
 8001580:	4b80      	ldr	r3, [pc, #512]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a7f      	ldr	r2, [pc, #508]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 8001586:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800158a:	6013      	str	r3, [r2, #0]
 800158c:	e02e      	b.n	80015ec <HAL_RCC_OscConfig+0xd4>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d10c      	bne.n	80015b0 <HAL_RCC_OscConfig+0x98>
 8001596:	4b7b      	ldr	r3, [pc, #492]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a7a      	ldr	r2, [pc, #488]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 800159c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015a0:	6013      	str	r3, [r2, #0]
 80015a2:	4b78      	ldr	r3, [pc, #480]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a77      	ldr	r2, [pc, #476]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 80015a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015ac:	6013      	str	r3, [r2, #0]
 80015ae:	e01d      	b.n	80015ec <HAL_RCC_OscConfig+0xd4>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015b8:	d10c      	bne.n	80015d4 <HAL_RCC_OscConfig+0xbc>
 80015ba:	4b72      	ldr	r3, [pc, #456]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a71      	ldr	r2, [pc, #452]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 80015c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015c4:	6013      	str	r3, [r2, #0]
 80015c6:	4b6f      	ldr	r3, [pc, #444]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a6e      	ldr	r2, [pc, #440]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 80015cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015d0:	6013      	str	r3, [r2, #0]
 80015d2:	e00b      	b.n	80015ec <HAL_RCC_OscConfig+0xd4>
 80015d4:	4b6b      	ldr	r3, [pc, #428]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a6a      	ldr	r2, [pc, #424]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 80015da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015de:	6013      	str	r3, [r2, #0]
 80015e0:	4b68      	ldr	r3, [pc, #416]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a67      	ldr	r2, [pc, #412]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 80015e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d013      	beq.n	800161c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f4:	f7ff fca0 	bl	8000f38 <HAL_GetTick>
 80015f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015fa:	e008      	b.n	800160e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015fc:	f7ff fc9c 	bl	8000f38 <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b64      	cmp	r3, #100	; 0x64
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e200      	b.n	8001a10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800160e:	4b5d      	ldr	r3, [pc, #372]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d0f0      	beq.n	80015fc <HAL_RCC_OscConfig+0xe4>
 800161a:	e014      	b.n	8001646 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800161c:	f7ff fc8c 	bl	8000f38 <HAL_GetTick>
 8001620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001622:	e008      	b.n	8001636 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001624:	f7ff fc88 	bl	8000f38 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	2b64      	cmp	r3, #100	; 0x64
 8001630:	d901      	bls.n	8001636 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e1ec      	b.n	8001a10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001636:	4b53      	ldr	r3, [pc, #332]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d1f0      	bne.n	8001624 <HAL_RCC_OscConfig+0x10c>
 8001642:	e000      	b.n	8001646 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001644:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d063      	beq.n	800171a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001652:	4b4c      	ldr	r3, [pc, #304]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f003 030c 	and.w	r3, r3, #12
 800165a:	2b00      	cmp	r3, #0
 800165c:	d00b      	beq.n	8001676 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800165e:	4b49      	ldr	r3, [pc, #292]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f003 030c 	and.w	r3, r3, #12
 8001666:	2b08      	cmp	r3, #8
 8001668:	d11c      	bne.n	80016a4 <HAL_RCC_OscConfig+0x18c>
 800166a:	4b46      	ldr	r3, [pc, #280]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d116      	bne.n	80016a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001676:	4b43      	ldr	r3, [pc, #268]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0302 	and.w	r3, r3, #2
 800167e:	2b00      	cmp	r3, #0
 8001680:	d005      	beq.n	800168e <HAL_RCC_OscConfig+0x176>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	691b      	ldr	r3, [r3, #16]
 8001686:	2b01      	cmp	r3, #1
 8001688:	d001      	beq.n	800168e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e1c0      	b.n	8001a10 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800168e:	4b3d      	ldr	r3, [pc, #244]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	695b      	ldr	r3, [r3, #20]
 800169a:	00db      	lsls	r3, r3, #3
 800169c:	4939      	ldr	r1, [pc, #228]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 800169e:	4313      	orrs	r3, r2
 80016a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016a2:	e03a      	b.n	800171a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	691b      	ldr	r3, [r3, #16]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d020      	beq.n	80016ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016ac:	4b36      	ldr	r3, [pc, #216]	; (8001788 <HAL_RCC_OscConfig+0x270>)
 80016ae:	2201      	movs	r2, #1
 80016b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b2:	f7ff fc41 	bl	8000f38 <HAL_GetTick>
 80016b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016b8:	e008      	b.n	80016cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016ba:	f7ff fc3d 	bl	8000f38 <HAL_GetTick>
 80016be:	4602      	mov	r2, r0
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d901      	bls.n	80016cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e1a1      	b.n	8001a10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016cc:	4b2d      	ldr	r3, [pc, #180]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0302 	and.w	r3, r3, #2
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d0f0      	beq.n	80016ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016d8:	4b2a      	ldr	r3, [pc, #168]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	695b      	ldr	r3, [r3, #20]
 80016e4:	00db      	lsls	r3, r3, #3
 80016e6:	4927      	ldr	r1, [pc, #156]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 80016e8:	4313      	orrs	r3, r2
 80016ea:	600b      	str	r3, [r1, #0]
 80016ec:	e015      	b.n	800171a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016ee:	4b26      	ldr	r3, [pc, #152]	; (8001788 <HAL_RCC_OscConfig+0x270>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f4:	f7ff fc20 	bl	8000f38 <HAL_GetTick>
 80016f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016fa:	e008      	b.n	800170e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016fc:	f7ff fc1c 	bl	8000f38 <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	2b02      	cmp	r3, #2
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e180      	b.n	8001a10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800170e:	4b1d      	ldr	r3, [pc, #116]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	2b00      	cmp	r3, #0
 8001718:	d1f0      	bne.n	80016fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0308 	and.w	r3, r3, #8
 8001722:	2b00      	cmp	r3, #0
 8001724:	d03a      	beq.n	800179c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	699b      	ldr	r3, [r3, #24]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d019      	beq.n	8001762 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800172e:	4b17      	ldr	r3, [pc, #92]	; (800178c <HAL_RCC_OscConfig+0x274>)
 8001730:	2201      	movs	r2, #1
 8001732:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001734:	f7ff fc00 	bl	8000f38 <HAL_GetTick>
 8001738:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800173a:	e008      	b.n	800174e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800173c:	f7ff fbfc 	bl	8000f38 <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	2b02      	cmp	r3, #2
 8001748:	d901      	bls.n	800174e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e160      	b.n	8001a10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800174e:	4b0d      	ldr	r3, [pc, #52]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 8001750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	2b00      	cmp	r3, #0
 8001758:	d0f0      	beq.n	800173c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800175a:	2001      	movs	r0, #1
 800175c:	f000 fa9c 	bl	8001c98 <RCC_Delay>
 8001760:	e01c      	b.n	800179c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001762:	4b0a      	ldr	r3, [pc, #40]	; (800178c <HAL_RCC_OscConfig+0x274>)
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001768:	f7ff fbe6 	bl	8000f38 <HAL_GetTick>
 800176c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800176e:	e00f      	b.n	8001790 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001770:	f7ff fbe2 	bl	8000f38 <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b02      	cmp	r3, #2
 800177c:	d908      	bls.n	8001790 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e146      	b.n	8001a10 <HAL_RCC_OscConfig+0x4f8>
 8001782:	bf00      	nop
 8001784:	40021000 	.word	0x40021000
 8001788:	42420000 	.word	0x42420000
 800178c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001790:	4b92      	ldr	r3, [pc, #584]	; (80019dc <HAL_RCC_OscConfig+0x4c4>)
 8001792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001794:	f003 0302 	and.w	r3, r3, #2
 8001798:	2b00      	cmp	r3, #0
 800179a:	d1e9      	bne.n	8001770 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0304 	and.w	r3, r3, #4
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	f000 80a6 	beq.w	80018f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017aa:	2300      	movs	r3, #0
 80017ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017ae:	4b8b      	ldr	r3, [pc, #556]	; (80019dc <HAL_RCC_OscConfig+0x4c4>)
 80017b0:	69db      	ldr	r3, [r3, #28]
 80017b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d10d      	bne.n	80017d6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017ba:	4b88      	ldr	r3, [pc, #544]	; (80019dc <HAL_RCC_OscConfig+0x4c4>)
 80017bc:	69db      	ldr	r3, [r3, #28]
 80017be:	4a87      	ldr	r2, [pc, #540]	; (80019dc <HAL_RCC_OscConfig+0x4c4>)
 80017c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017c4:	61d3      	str	r3, [r2, #28]
 80017c6:	4b85      	ldr	r3, [pc, #532]	; (80019dc <HAL_RCC_OscConfig+0x4c4>)
 80017c8:	69db      	ldr	r3, [r3, #28]
 80017ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ce:	60bb      	str	r3, [r7, #8]
 80017d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017d2:	2301      	movs	r3, #1
 80017d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017d6:	4b82      	ldr	r3, [pc, #520]	; (80019e0 <HAL_RCC_OscConfig+0x4c8>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d118      	bne.n	8001814 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017e2:	4b7f      	ldr	r3, [pc, #508]	; (80019e0 <HAL_RCC_OscConfig+0x4c8>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a7e      	ldr	r2, [pc, #504]	; (80019e0 <HAL_RCC_OscConfig+0x4c8>)
 80017e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017ee:	f7ff fba3 	bl	8000f38 <HAL_GetTick>
 80017f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017f4:	e008      	b.n	8001808 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017f6:	f7ff fb9f 	bl	8000f38 <HAL_GetTick>
 80017fa:	4602      	mov	r2, r0
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	2b64      	cmp	r3, #100	; 0x64
 8001802:	d901      	bls.n	8001808 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001804:	2303      	movs	r3, #3
 8001806:	e103      	b.n	8001a10 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001808:	4b75      	ldr	r3, [pc, #468]	; (80019e0 <HAL_RCC_OscConfig+0x4c8>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001810:	2b00      	cmp	r3, #0
 8001812:	d0f0      	beq.n	80017f6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d106      	bne.n	800182a <HAL_RCC_OscConfig+0x312>
 800181c:	4b6f      	ldr	r3, [pc, #444]	; (80019dc <HAL_RCC_OscConfig+0x4c4>)
 800181e:	6a1b      	ldr	r3, [r3, #32]
 8001820:	4a6e      	ldr	r2, [pc, #440]	; (80019dc <HAL_RCC_OscConfig+0x4c4>)
 8001822:	f043 0301 	orr.w	r3, r3, #1
 8001826:	6213      	str	r3, [r2, #32]
 8001828:	e02d      	b.n	8001886 <HAL_RCC_OscConfig+0x36e>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	68db      	ldr	r3, [r3, #12]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d10c      	bne.n	800184c <HAL_RCC_OscConfig+0x334>
 8001832:	4b6a      	ldr	r3, [pc, #424]	; (80019dc <HAL_RCC_OscConfig+0x4c4>)
 8001834:	6a1b      	ldr	r3, [r3, #32]
 8001836:	4a69      	ldr	r2, [pc, #420]	; (80019dc <HAL_RCC_OscConfig+0x4c4>)
 8001838:	f023 0301 	bic.w	r3, r3, #1
 800183c:	6213      	str	r3, [r2, #32]
 800183e:	4b67      	ldr	r3, [pc, #412]	; (80019dc <HAL_RCC_OscConfig+0x4c4>)
 8001840:	6a1b      	ldr	r3, [r3, #32]
 8001842:	4a66      	ldr	r2, [pc, #408]	; (80019dc <HAL_RCC_OscConfig+0x4c4>)
 8001844:	f023 0304 	bic.w	r3, r3, #4
 8001848:	6213      	str	r3, [r2, #32]
 800184a:	e01c      	b.n	8001886 <HAL_RCC_OscConfig+0x36e>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	2b05      	cmp	r3, #5
 8001852:	d10c      	bne.n	800186e <HAL_RCC_OscConfig+0x356>
 8001854:	4b61      	ldr	r3, [pc, #388]	; (80019dc <HAL_RCC_OscConfig+0x4c4>)
 8001856:	6a1b      	ldr	r3, [r3, #32]
 8001858:	4a60      	ldr	r2, [pc, #384]	; (80019dc <HAL_RCC_OscConfig+0x4c4>)
 800185a:	f043 0304 	orr.w	r3, r3, #4
 800185e:	6213      	str	r3, [r2, #32]
 8001860:	4b5e      	ldr	r3, [pc, #376]	; (80019dc <HAL_RCC_OscConfig+0x4c4>)
 8001862:	6a1b      	ldr	r3, [r3, #32]
 8001864:	4a5d      	ldr	r2, [pc, #372]	; (80019dc <HAL_RCC_OscConfig+0x4c4>)
 8001866:	f043 0301 	orr.w	r3, r3, #1
 800186a:	6213      	str	r3, [r2, #32]
 800186c:	e00b      	b.n	8001886 <HAL_RCC_OscConfig+0x36e>
 800186e:	4b5b      	ldr	r3, [pc, #364]	; (80019dc <HAL_RCC_OscConfig+0x4c4>)
 8001870:	6a1b      	ldr	r3, [r3, #32]
 8001872:	4a5a      	ldr	r2, [pc, #360]	; (80019dc <HAL_RCC_OscConfig+0x4c4>)
 8001874:	f023 0301 	bic.w	r3, r3, #1
 8001878:	6213      	str	r3, [r2, #32]
 800187a:	4b58      	ldr	r3, [pc, #352]	; (80019dc <HAL_RCC_OscConfig+0x4c4>)
 800187c:	6a1b      	ldr	r3, [r3, #32]
 800187e:	4a57      	ldr	r2, [pc, #348]	; (80019dc <HAL_RCC_OscConfig+0x4c4>)
 8001880:	f023 0304 	bic.w	r3, r3, #4
 8001884:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	68db      	ldr	r3, [r3, #12]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d015      	beq.n	80018ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800188e:	f7ff fb53 	bl	8000f38 <HAL_GetTick>
 8001892:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001894:	e00a      	b.n	80018ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001896:	f7ff fb4f 	bl	8000f38 <HAL_GetTick>
 800189a:	4602      	mov	r2, r0
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d901      	bls.n	80018ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80018a8:	2303      	movs	r3, #3
 80018aa:	e0b1      	b.n	8001a10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018ac:	4b4b      	ldr	r3, [pc, #300]	; (80019dc <HAL_RCC_OscConfig+0x4c4>)
 80018ae:	6a1b      	ldr	r3, [r3, #32]
 80018b0:	f003 0302 	and.w	r3, r3, #2
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d0ee      	beq.n	8001896 <HAL_RCC_OscConfig+0x37e>
 80018b8:	e014      	b.n	80018e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ba:	f7ff fb3d 	bl	8000f38 <HAL_GetTick>
 80018be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018c0:	e00a      	b.n	80018d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018c2:	f7ff fb39 	bl	8000f38 <HAL_GetTick>
 80018c6:	4602      	mov	r2, r0
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d901      	bls.n	80018d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e09b      	b.n	8001a10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018d8:	4b40      	ldr	r3, [pc, #256]	; (80019dc <HAL_RCC_OscConfig+0x4c4>)
 80018da:	6a1b      	ldr	r3, [r3, #32]
 80018dc:	f003 0302 	and.w	r3, r3, #2
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d1ee      	bne.n	80018c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80018e4:	7dfb      	ldrb	r3, [r7, #23]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d105      	bne.n	80018f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018ea:	4b3c      	ldr	r3, [pc, #240]	; (80019dc <HAL_RCC_OscConfig+0x4c4>)
 80018ec:	69db      	ldr	r3, [r3, #28]
 80018ee:	4a3b      	ldr	r2, [pc, #236]	; (80019dc <HAL_RCC_OscConfig+0x4c4>)
 80018f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	69db      	ldr	r3, [r3, #28]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	f000 8087 	beq.w	8001a0e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001900:	4b36      	ldr	r3, [pc, #216]	; (80019dc <HAL_RCC_OscConfig+0x4c4>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f003 030c 	and.w	r3, r3, #12
 8001908:	2b08      	cmp	r3, #8
 800190a:	d061      	beq.n	80019d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	69db      	ldr	r3, [r3, #28]
 8001910:	2b02      	cmp	r3, #2
 8001912:	d146      	bne.n	80019a2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001914:	4b33      	ldr	r3, [pc, #204]	; (80019e4 <HAL_RCC_OscConfig+0x4cc>)
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800191a:	f7ff fb0d 	bl	8000f38 <HAL_GetTick>
 800191e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001920:	e008      	b.n	8001934 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001922:	f7ff fb09 	bl	8000f38 <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	2b02      	cmp	r3, #2
 800192e:	d901      	bls.n	8001934 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e06d      	b.n	8001a10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001934:	4b29      	ldr	r3, [pc, #164]	; (80019dc <HAL_RCC_OscConfig+0x4c4>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800193c:	2b00      	cmp	r3, #0
 800193e:	d1f0      	bne.n	8001922 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6a1b      	ldr	r3, [r3, #32]
 8001944:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001948:	d108      	bne.n	800195c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800194a:	4b24      	ldr	r3, [pc, #144]	; (80019dc <HAL_RCC_OscConfig+0x4c4>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	4921      	ldr	r1, [pc, #132]	; (80019dc <HAL_RCC_OscConfig+0x4c4>)
 8001958:	4313      	orrs	r3, r2
 800195a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800195c:	4b1f      	ldr	r3, [pc, #124]	; (80019dc <HAL_RCC_OscConfig+0x4c4>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6a19      	ldr	r1, [r3, #32]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196c:	430b      	orrs	r3, r1
 800196e:	491b      	ldr	r1, [pc, #108]	; (80019dc <HAL_RCC_OscConfig+0x4c4>)
 8001970:	4313      	orrs	r3, r2
 8001972:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001974:	4b1b      	ldr	r3, [pc, #108]	; (80019e4 <HAL_RCC_OscConfig+0x4cc>)
 8001976:	2201      	movs	r2, #1
 8001978:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800197a:	f7ff fadd 	bl	8000f38 <HAL_GetTick>
 800197e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001980:	e008      	b.n	8001994 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001982:	f7ff fad9 	bl	8000f38 <HAL_GetTick>
 8001986:	4602      	mov	r2, r0
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	2b02      	cmp	r3, #2
 800198e:	d901      	bls.n	8001994 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001990:	2303      	movs	r3, #3
 8001992:	e03d      	b.n	8001a10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001994:	4b11      	ldr	r3, [pc, #68]	; (80019dc <HAL_RCC_OscConfig+0x4c4>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d0f0      	beq.n	8001982 <HAL_RCC_OscConfig+0x46a>
 80019a0:	e035      	b.n	8001a0e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019a2:	4b10      	ldr	r3, [pc, #64]	; (80019e4 <HAL_RCC_OscConfig+0x4cc>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a8:	f7ff fac6 	bl	8000f38 <HAL_GetTick>
 80019ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019ae:	e008      	b.n	80019c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019b0:	f7ff fac2 	bl	8000f38 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e026      	b.n	8001a10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019c2:	4b06      	ldr	r3, [pc, #24]	; (80019dc <HAL_RCC_OscConfig+0x4c4>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d1f0      	bne.n	80019b0 <HAL_RCC_OscConfig+0x498>
 80019ce:	e01e      	b.n	8001a0e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	69db      	ldr	r3, [r3, #28]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d107      	bne.n	80019e8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e019      	b.n	8001a10 <HAL_RCC_OscConfig+0x4f8>
 80019dc:	40021000 	.word	0x40021000
 80019e0:	40007000 	.word	0x40007000
 80019e4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80019e8:	4b0b      	ldr	r3, [pc, #44]	; (8001a18 <HAL_RCC_OscConfig+0x500>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6a1b      	ldr	r3, [r3, #32]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d106      	bne.n	8001a0a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d001      	beq.n	8001a0e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e000      	b.n	8001a10 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001a0e:	2300      	movs	r3, #0
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3718      	adds	r7, #24
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	40021000 	.word	0x40021000

08001a1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d101      	bne.n	8001a30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e0d0      	b.n	8001bd2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a30:	4b6a      	ldr	r3, [pc, #424]	; (8001bdc <HAL_RCC_ClockConfig+0x1c0>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0307 	and.w	r3, r3, #7
 8001a38:	683a      	ldr	r2, [r7, #0]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d910      	bls.n	8001a60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a3e:	4b67      	ldr	r3, [pc, #412]	; (8001bdc <HAL_RCC_ClockConfig+0x1c0>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f023 0207 	bic.w	r2, r3, #7
 8001a46:	4965      	ldr	r1, [pc, #404]	; (8001bdc <HAL_RCC_ClockConfig+0x1c0>)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a4e:	4b63      	ldr	r3, [pc, #396]	; (8001bdc <HAL_RCC_ClockConfig+0x1c0>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0307 	and.w	r3, r3, #7
 8001a56:	683a      	ldr	r2, [r7, #0]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d001      	beq.n	8001a60 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e0b8      	b.n	8001bd2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0302 	and.w	r3, r3, #2
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d020      	beq.n	8001aae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0304 	and.w	r3, r3, #4
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d005      	beq.n	8001a84 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a78:	4b59      	ldr	r3, [pc, #356]	; (8001be0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	4a58      	ldr	r2, [pc, #352]	; (8001be0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a7e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a82:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0308 	and.w	r3, r3, #8
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d005      	beq.n	8001a9c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a90:	4b53      	ldr	r3, [pc, #332]	; (8001be0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	4a52      	ldr	r2, [pc, #328]	; (8001be0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a96:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001a9a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a9c:	4b50      	ldr	r3, [pc, #320]	; (8001be0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	494d      	ldr	r1, [pc, #308]	; (8001be0 <HAL_RCC_ClockConfig+0x1c4>)
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0301 	and.w	r3, r3, #1
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d040      	beq.n	8001b3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d107      	bne.n	8001ad2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ac2:	4b47      	ldr	r3, [pc, #284]	; (8001be0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d115      	bne.n	8001afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e07f      	b.n	8001bd2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d107      	bne.n	8001aea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ada:	4b41      	ldr	r3, [pc, #260]	; (8001be0 <HAL_RCC_ClockConfig+0x1c4>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d109      	bne.n	8001afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e073      	b.n	8001bd2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aea:	4b3d      	ldr	r3, [pc, #244]	; (8001be0 <HAL_RCC_ClockConfig+0x1c4>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d101      	bne.n	8001afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e06b      	b.n	8001bd2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001afa:	4b39      	ldr	r3, [pc, #228]	; (8001be0 <HAL_RCC_ClockConfig+0x1c4>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f023 0203 	bic.w	r2, r3, #3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	4936      	ldr	r1, [pc, #216]	; (8001be0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b0c:	f7ff fa14 	bl	8000f38 <HAL_GetTick>
 8001b10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b12:	e00a      	b.n	8001b2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b14:	f7ff fa10 	bl	8000f38 <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e053      	b.n	8001bd2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b2a:	4b2d      	ldr	r3, [pc, #180]	; (8001be0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f003 020c 	and.w	r2, r3, #12
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d1eb      	bne.n	8001b14 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b3c:	4b27      	ldr	r3, [pc, #156]	; (8001bdc <HAL_RCC_ClockConfig+0x1c0>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0307 	and.w	r3, r3, #7
 8001b44:	683a      	ldr	r2, [r7, #0]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d210      	bcs.n	8001b6c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b4a:	4b24      	ldr	r3, [pc, #144]	; (8001bdc <HAL_RCC_ClockConfig+0x1c0>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f023 0207 	bic.w	r2, r3, #7
 8001b52:	4922      	ldr	r1, [pc, #136]	; (8001bdc <HAL_RCC_ClockConfig+0x1c0>)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b5a:	4b20      	ldr	r3, [pc, #128]	; (8001bdc <HAL_RCC_ClockConfig+0x1c0>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0307 	and.w	r3, r3, #7
 8001b62:	683a      	ldr	r2, [r7, #0]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d001      	beq.n	8001b6c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e032      	b.n	8001bd2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0304 	and.w	r3, r3, #4
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d008      	beq.n	8001b8a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b78:	4b19      	ldr	r3, [pc, #100]	; (8001be0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	4916      	ldr	r1, [pc, #88]	; (8001be0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b86:	4313      	orrs	r3, r2
 8001b88:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0308 	and.w	r3, r3, #8
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d009      	beq.n	8001baa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b96:	4b12      	ldr	r3, [pc, #72]	; (8001be0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	691b      	ldr	r3, [r3, #16]
 8001ba2:	00db      	lsls	r3, r3, #3
 8001ba4:	490e      	ldr	r1, [pc, #56]	; (8001be0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001baa:	f000 f821 	bl	8001bf0 <HAL_RCC_GetSysClockFreq>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	4b0b      	ldr	r3, [pc, #44]	; (8001be0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	091b      	lsrs	r3, r3, #4
 8001bb6:	f003 030f 	and.w	r3, r3, #15
 8001bba:	490a      	ldr	r1, [pc, #40]	; (8001be4 <HAL_RCC_ClockConfig+0x1c8>)
 8001bbc:	5ccb      	ldrb	r3, [r1, r3]
 8001bbe:	fa22 f303 	lsr.w	r3, r2, r3
 8001bc2:	4a09      	ldr	r2, [pc, #36]	; (8001be8 <HAL_RCC_ClockConfig+0x1cc>)
 8001bc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001bc6:	4b09      	ldr	r3, [pc, #36]	; (8001bec <HAL_RCC_ClockConfig+0x1d0>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7ff f972 	bl	8000eb4 <HAL_InitTick>

  return HAL_OK;
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3710      	adds	r7, #16
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	40022000 	.word	0x40022000
 8001be0:	40021000 	.word	0x40021000
 8001be4:	08005dfc 	.word	0x08005dfc
 8001be8:	20000010 	.word	0x20000010
 8001bec:	20000014 	.word	0x20000014

08001bf0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b087      	sub	sp, #28
 8001bf4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60fb      	str	r3, [r7, #12]
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	60bb      	str	r3, [r7, #8]
 8001bfe:	2300      	movs	r3, #0
 8001c00:	617b      	str	r3, [r7, #20]
 8001c02:	2300      	movs	r3, #0
 8001c04:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001c06:	2300      	movs	r3, #0
 8001c08:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c0a:	4b1e      	ldr	r3, [pc, #120]	; (8001c84 <HAL_RCC_GetSysClockFreq+0x94>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f003 030c 	and.w	r3, r3, #12
 8001c16:	2b04      	cmp	r3, #4
 8001c18:	d002      	beq.n	8001c20 <HAL_RCC_GetSysClockFreq+0x30>
 8001c1a:	2b08      	cmp	r3, #8
 8001c1c:	d003      	beq.n	8001c26 <HAL_RCC_GetSysClockFreq+0x36>
 8001c1e:	e027      	b.n	8001c70 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c20:	4b19      	ldr	r3, [pc, #100]	; (8001c88 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c22:	613b      	str	r3, [r7, #16]
      break;
 8001c24:	e027      	b.n	8001c76 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	0c9b      	lsrs	r3, r3, #18
 8001c2a:	f003 030f 	and.w	r3, r3, #15
 8001c2e:	4a17      	ldr	r2, [pc, #92]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001c30:	5cd3      	ldrb	r3, [r2, r3]
 8001c32:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d010      	beq.n	8001c60 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c3e:	4b11      	ldr	r3, [pc, #68]	; (8001c84 <HAL_RCC_GetSysClockFreq+0x94>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	0c5b      	lsrs	r3, r3, #17
 8001c44:	f003 0301 	and.w	r3, r3, #1
 8001c48:	4a11      	ldr	r2, [pc, #68]	; (8001c90 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001c4a:	5cd3      	ldrb	r3, [r2, r3]
 8001c4c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a0d      	ldr	r2, [pc, #52]	; (8001c88 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c52:	fb03 f202 	mul.w	r2, r3, r2
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c5c:	617b      	str	r3, [r7, #20]
 8001c5e:	e004      	b.n	8001c6a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	4a0c      	ldr	r2, [pc, #48]	; (8001c94 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001c64:	fb02 f303 	mul.w	r3, r2, r3
 8001c68:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	613b      	str	r3, [r7, #16]
      break;
 8001c6e:	e002      	b.n	8001c76 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c70:	4b05      	ldr	r3, [pc, #20]	; (8001c88 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c72:	613b      	str	r3, [r7, #16]
      break;
 8001c74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c76:	693b      	ldr	r3, [r7, #16]
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	371c      	adds	r7, #28
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bc80      	pop	{r7}
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	40021000 	.word	0x40021000
 8001c88:	007a1200 	.word	0x007a1200
 8001c8c:	08005e0c 	.word	0x08005e0c
 8001c90:	08005e1c 	.word	0x08005e1c
 8001c94:	003d0900 	.word	0x003d0900

08001c98 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ca0:	4b0a      	ldr	r3, [pc, #40]	; (8001ccc <RCC_Delay+0x34>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a0a      	ldr	r2, [pc, #40]	; (8001cd0 <RCC_Delay+0x38>)
 8001ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8001caa:	0a5b      	lsrs	r3, r3, #9
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	fb02 f303 	mul.w	r3, r2, r3
 8001cb2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001cb4:	bf00      	nop
  }
  while (Delay --);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	1e5a      	subs	r2, r3, #1
 8001cba:	60fa      	str	r2, [r7, #12]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d1f9      	bne.n	8001cb4 <RCC_Delay+0x1c>
}
 8001cc0:	bf00      	nop
 8001cc2:	bf00      	nop
 8001cc4:	3714      	adds	r7, #20
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bc80      	pop	{r7}
 8001cca:	4770      	bx	lr
 8001ccc:	20000010 	.word	0x20000010
 8001cd0:	10624dd3 	.word	0x10624dd3

08001cd4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d101      	bne.n	8001ce6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e076      	b.n	8001dd4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d108      	bne.n	8001d00 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001cf6:	d009      	beq.n	8001d0c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	61da      	str	r2, [r3, #28]
 8001cfe:	e005      	b.n	8001d0c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2200      	movs	r2, #0
 8001d04:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d106      	bne.n	8001d2c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f7fe fe44 	bl	80009b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2202      	movs	r2, #2
 8001d30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d42:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001d54:	431a      	orrs	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d5e:	431a      	orrs	r2, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	691b      	ldr	r3, [r3, #16]
 8001d64:	f003 0302 	and.w	r3, r3, #2
 8001d68:	431a      	orrs	r2, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	695b      	ldr	r3, [r3, #20]
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	431a      	orrs	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	699b      	ldr	r3, [r3, #24]
 8001d78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d7c:	431a      	orrs	r2, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	69db      	ldr	r3, [r3, #28]
 8001d82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d86:	431a      	orrs	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6a1b      	ldr	r3, [r3, #32]
 8001d8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d90:	ea42 0103 	orr.w	r1, r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d98:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	430a      	orrs	r2, r1
 8001da2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	699b      	ldr	r3, [r3, #24]
 8001da8:	0c1a      	lsrs	r2, r3, #16
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f002 0204 	and.w	r2, r2, #4
 8001db2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	69da      	ldr	r2, [r3, #28]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dc2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2201      	movs	r2, #1
 8001dce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001dd2:	2300      	movs	r3, #0
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3708      	adds	r7, #8
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b088      	sub	sp, #32
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	60f8      	str	r0, [r7, #12]
 8001de4:	60b9      	str	r1, [r7, #8]
 8001de6:	603b      	str	r3, [r7, #0]
 8001de8:	4613      	mov	r3, r2
 8001dea:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001dec:	2300      	movs	r3, #0
 8001dee:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d101      	bne.n	8001dfe <HAL_SPI_Transmit+0x22>
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	e12d      	b.n	800205a <HAL_SPI_Transmit+0x27e>
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2201      	movs	r2, #1
 8001e02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001e06:	f7ff f897 	bl	8000f38 <HAL_GetTick>
 8001e0a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001e0c:	88fb      	ldrh	r3, [r7, #6]
 8001e0e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d002      	beq.n	8001e22 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001e20:	e116      	b.n	8002050 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d002      	beq.n	8001e2e <HAL_SPI_Transmit+0x52>
 8001e28:	88fb      	ldrh	r3, [r7, #6]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d102      	bne.n	8001e34 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001e32:	e10d      	b.n	8002050 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2203      	movs	r2, #3
 8001e38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	68ba      	ldr	r2, [r7, #8]
 8001e46:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	88fa      	ldrh	r2, [r7, #6]
 8001e4c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	88fa      	ldrh	r2, [r7, #6]
 8001e52:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2200      	movs	r2, #0
 8001e58:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2200      	movs	r2, #0
 8001e64:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e7a:	d10f      	bne.n	8001e9c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e8a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e9a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ea6:	2b40      	cmp	r3, #64	; 0x40
 8001ea8:	d007      	beq.n	8001eba <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001eb8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ec2:	d14f      	bne.n	8001f64 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d002      	beq.n	8001ed2 <HAL_SPI_Transmit+0xf6>
 8001ecc:	8afb      	ldrh	r3, [r7, #22]
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d142      	bne.n	8001f58 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed6:	881a      	ldrh	r2, [r3, #0]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee2:	1c9a      	adds	r2, r3, #2
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	b29a      	uxth	r2, r3
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001ef6:	e02f      	b.n	8001f58 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d112      	bne.n	8001f2c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0a:	881a      	ldrh	r2, [r3, #0]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f16:	1c9a      	adds	r2, r3, #2
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	3b01      	subs	r3, #1
 8001f24:	b29a      	uxth	r2, r3
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	86da      	strh	r2, [r3, #54]	; 0x36
 8001f2a:	e015      	b.n	8001f58 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f2c:	f7ff f804 	bl	8000f38 <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	683a      	ldr	r2, [r7, #0]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d803      	bhi.n	8001f44 <HAL_SPI_Transmit+0x168>
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f42:	d102      	bne.n	8001f4a <HAL_SPI_Transmit+0x16e>
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d106      	bne.n	8001f58 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2201      	movs	r2, #1
 8001f52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8001f56:	e07b      	b.n	8002050 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d1ca      	bne.n	8001ef8 <HAL_SPI_Transmit+0x11c>
 8001f62:	e050      	b.n	8002006 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d002      	beq.n	8001f72 <HAL_SPI_Transmit+0x196>
 8001f6c:	8afb      	ldrh	r3, [r7, #22]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d144      	bne.n	8001ffc <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	330c      	adds	r3, #12
 8001f7c:	7812      	ldrb	r2, [r2, #0]
 8001f7e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f84:	1c5a      	adds	r2, r3, #1
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	3b01      	subs	r3, #1
 8001f92:	b29a      	uxth	r2, r3
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001f98:	e030      	b.n	8001ffc <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f003 0302 	and.w	r3, r3, #2
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d113      	bne.n	8001fd0 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	330c      	adds	r3, #12
 8001fb2:	7812      	ldrb	r2, [r2, #0]
 8001fb4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	1c5a      	adds	r2, r3, #1
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	86da      	strh	r2, [r3, #54]	; 0x36
 8001fce:	e015      	b.n	8001ffc <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001fd0:	f7fe ffb2 	bl	8000f38 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	683a      	ldr	r2, [r7, #0]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d803      	bhi.n	8001fe8 <HAL_SPI_Transmit+0x20c>
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fe6:	d102      	bne.n	8001fee <HAL_SPI_Transmit+0x212>
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d106      	bne.n	8001ffc <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8001ffa:	e029      	b.n	8002050 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002000:	b29b      	uxth	r3, r3
 8002002:	2b00      	cmp	r3, #0
 8002004:	d1c9      	bne.n	8001f9a <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	6839      	ldr	r1, [r7, #0]
 800200a:	68f8      	ldr	r0, [r7, #12]
 800200c:	f000 fbcc 	bl	80027a8 <SPI_EndRxTxTransaction>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d002      	beq.n	800201c <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2220      	movs	r2, #32
 800201a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d10a      	bne.n	800203a <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002024:	2300      	movs	r3, #0
 8002026:	613b      	str	r3, [r7, #16]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	613b      	str	r3, [r7, #16]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	613b      	str	r3, [r7, #16]
 8002038:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800203e:	2b00      	cmp	r3, #0
 8002040:	d002      	beq.n	8002048 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	77fb      	strb	r3, [r7, #31]
 8002046:	e003      	b.n	8002050 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2200      	movs	r2, #0
 8002054:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002058:	7ffb      	ldrb	r3, [r7, #31]
}
 800205a:	4618      	mov	r0, r3
 800205c:	3720      	adds	r7, #32
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}

08002062 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002062:	b580      	push	{r7, lr}
 8002064:	b088      	sub	sp, #32
 8002066:	af02      	add	r7, sp, #8
 8002068:	60f8      	str	r0, [r7, #12]
 800206a:	60b9      	str	r1, [r7, #8]
 800206c:	603b      	str	r3, [r7, #0]
 800206e:	4613      	mov	r3, r2
 8002070:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002072:	2300      	movs	r3, #0
 8002074:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800207c:	b2db      	uxtb	r3, r3
 800207e:	2b01      	cmp	r3, #1
 8002080:	d002      	beq.n	8002088 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8002082:	2302      	movs	r3, #2
 8002084:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002086:	e0fb      	b.n	8002280 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002090:	d112      	bne.n	80020b8 <HAL_SPI_Receive+0x56>
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d10e      	bne.n	80020b8 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2204      	movs	r2, #4
 800209e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80020a2:	88fa      	ldrh	r2, [r7, #6]
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	9300      	str	r3, [sp, #0]
 80020a8:	4613      	mov	r3, r2
 80020aa:	68ba      	ldr	r2, [r7, #8]
 80020ac:	68b9      	ldr	r1, [r7, #8]
 80020ae:	68f8      	ldr	r0, [r7, #12]
 80020b0:	f000 f8ef 	bl	8002292 <HAL_SPI_TransmitReceive>
 80020b4:	4603      	mov	r3, r0
 80020b6:	e0e8      	b.n	800228a <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d101      	bne.n	80020c6 <HAL_SPI_Receive+0x64>
 80020c2:	2302      	movs	r3, #2
 80020c4:	e0e1      	b.n	800228a <HAL_SPI_Receive+0x228>
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2201      	movs	r2, #1
 80020ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80020ce:	f7fe ff33 	bl	8000f38 <HAL_GetTick>
 80020d2:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d002      	beq.n	80020e0 <HAL_SPI_Receive+0x7e>
 80020da:	88fb      	ldrh	r3, [r7, #6]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d102      	bne.n	80020e6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80020e4:	e0cc      	b.n	8002280 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2204      	movs	r2, #4
 80020ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2200      	movs	r2, #0
 80020f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	68ba      	ldr	r2, [r7, #8]
 80020f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	88fa      	ldrh	r2, [r7, #6]
 80020fe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	88fa      	ldrh	r2, [r7, #6]
 8002104:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2200      	movs	r2, #0
 800210a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2200      	movs	r2, #0
 8002110:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2200      	movs	r2, #0
 8002116:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2200      	movs	r2, #0
 800211c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2200      	movs	r2, #0
 8002122:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800212c:	d10f      	bne.n	800214e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800213c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800214c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002158:	2b40      	cmp	r3, #64	; 0x40
 800215a:	d007      	beq.n	800216c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800216a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d16a      	bne.n	800224a <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002174:	e032      	b.n	80021dc <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	f003 0301 	and.w	r3, r3, #1
 8002180:	2b01      	cmp	r3, #1
 8002182:	d115      	bne.n	80021b0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f103 020c 	add.w	r2, r3, #12
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002190:	7812      	ldrb	r2, [r2, #0]
 8002192:	b2d2      	uxtb	r2, r2
 8002194:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800219a:	1c5a      	adds	r2, r3, #1
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	3b01      	subs	r3, #1
 80021a8:	b29a      	uxth	r2, r3
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	87da      	strh	r2, [r3, #62]	; 0x3e
 80021ae:	e015      	b.n	80021dc <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80021b0:	f7fe fec2 	bl	8000f38 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	683a      	ldr	r2, [r7, #0]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d803      	bhi.n	80021c8 <HAL_SPI_Receive+0x166>
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021c6:	d102      	bne.n	80021ce <HAL_SPI_Receive+0x16c>
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d106      	bne.n	80021dc <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2201      	movs	r2, #1
 80021d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80021da:	e051      	b.n	8002280 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d1c7      	bne.n	8002176 <HAL_SPI_Receive+0x114>
 80021e6:	e035      	b.n	8002254 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d113      	bne.n	800221e <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	68da      	ldr	r2, [r3, #12]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002200:	b292      	uxth	r2, r2
 8002202:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002208:	1c9a      	adds	r2, r3, #2
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002212:	b29b      	uxth	r3, r3
 8002214:	3b01      	subs	r3, #1
 8002216:	b29a      	uxth	r2, r3
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800221c:	e015      	b.n	800224a <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800221e:	f7fe fe8b 	bl	8000f38 <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	683a      	ldr	r2, [r7, #0]
 800222a:	429a      	cmp	r2, r3
 800222c:	d803      	bhi.n	8002236 <HAL_SPI_Receive+0x1d4>
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002234:	d102      	bne.n	800223c <HAL_SPI_Receive+0x1da>
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d106      	bne.n	800224a <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002248:	e01a      	b.n	8002280 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800224e:	b29b      	uxth	r3, r3
 8002250:	2b00      	cmp	r3, #0
 8002252:	d1c9      	bne.n	80021e8 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002254:	693a      	ldr	r2, [r7, #16]
 8002256:	6839      	ldr	r1, [r7, #0]
 8002258:	68f8      	ldr	r0, [r7, #12]
 800225a:	f000 fa53 	bl	8002704 <SPI_EndRxTransaction>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d002      	beq.n	800226a <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2220      	movs	r2, #32
 8002268:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800226e:	2b00      	cmp	r3, #0
 8002270:	d002      	beq.n	8002278 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	75fb      	strb	r3, [r7, #23]
 8002276:	e003      	b.n	8002280 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2201      	movs	r2, #1
 800227c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2200      	movs	r2, #0
 8002284:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002288:	7dfb      	ldrb	r3, [r7, #23]
}
 800228a:	4618      	mov	r0, r3
 800228c:	3718      	adds	r7, #24
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}

08002292 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002292:	b580      	push	{r7, lr}
 8002294:	b08c      	sub	sp, #48	; 0x30
 8002296:	af00      	add	r7, sp, #0
 8002298:	60f8      	str	r0, [r7, #12]
 800229a:	60b9      	str	r1, [r7, #8]
 800229c:	607a      	str	r2, [r7, #4]
 800229e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80022a0:	2301      	movs	r3, #1
 80022a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80022a4:	2300      	movs	r3, #0
 80022a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d101      	bne.n	80022b8 <HAL_SPI_TransmitReceive+0x26>
 80022b4:	2302      	movs	r3, #2
 80022b6:	e198      	b.n	80025ea <HAL_SPI_TransmitReceive+0x358>
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80022c0:	f7fe fe3a 	bl	8000f38 <HAL_GetTick>
 80022c4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80022cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80022d6:	887b      	ldrh	r3, [r7, #2]
 80022d8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80022da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d00f      	beq.n	8002302 <HAL_SPI_TransmitReceive+0x70>
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80022e8:	d107      	bne.n	80022fa <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d103      	bne.n	80022fa <HAL_SPI_TransmitReceive+0x68>
 80022f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80022f6:	2b04      	cmp	r3, #4
 80022f8:	d003      	beq.n	8002302 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80022fa:	2302      	movs	r3, #2
 80022fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002300:	e16d      	b.n	80025de <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d005      	beq.n	8002314 <HAL_SPI_TransmitReceive+0x82>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d002      	beq.n	8002314 <HAL_SPI_TransmitReceive+0x82>
 800230e:	887b      	ldrh	r3, [r7, #2]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d103      	bne.n	800231c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800231a:	e160      	b.n	80025de <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002322:	b2db      	uxtb	r3, r3
 8002324:	2b04      	cmp	r3, #4
 8002326:	d003      	beq.n	8002330 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2205      	movs	r2, #5
 800232c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2200      	movs	r2, #0
 8002334:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	887a      	ldrh	r2, [r7, #2]
 8002340:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	887a      	ldrh	r2, [r7, #2]
 8002346:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	68ba      	ldr	r2, [r7, #8]
 800234c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	887a      	ldrh	r2, [r7, #2]
 8002352:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	887a      	ldrh	r2, [r7, #2]
 8002358:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2200      	movs	r2, #0
 800235e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2200      	movs	r2, #0
 8002364:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002370:	2b40      	cmp	r3, #64	; 0x40
 8002372:	d007      	beq.n	8002384 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002382:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800238c:	d17c      	bne.n	8002488 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d002      	beq.n	800239c <HAL_SPI_TransmitReceive+0x10a>
 8002396:	8b7b      	ldrh	r3, [r7, #26]
 8002398:	2b01      	cmp	r3, #1
 800239a:	d16a      	bne.n	8002472 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a0:	881a      	ldrh	r2, [r3, #0]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ac:	1c9a      	adds	r2, r3, #2
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	3b01      	subs	r3, #1
 80023ba:	b29a      	uxth	r2, r3
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80023c0:	e057      	b.n	8002472 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d11b      	bne.n	8002408 <HAL_SPI_TransmitReceive+0x176>
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d016      	beq.n	8002408 <HAL_SPI_TransmitReceive+0x176>
 80023da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d113      	bne.n	8002408 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e4:	881a      	ldrh	r2, [r3, #0]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f0:	1c9a      	adds	r2, r3, #2
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	3b01      	subs	r3, #1
 80023fe:	b29a      	uxth	r2, r3
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002404:	2300      	movs	r3, #0
 8002406:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	2b01      	cmp	r3, #1
 8002414:	d119      	bne.n	800244a <HAL_SPI_TransmitReceive+0x1b8>
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800241a:	b29b      	uxth	r3, r3
 800241c:	2b00      	cmp	r3, #0
 800241e:	d014      	beq.n	800244a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	68da      	ldr	r2, [r3, #12]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800242a:	b292      	uxth	r2, r2
 800242c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002432:	1c9a      	adds	r2, r3, #2
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800243c:	b29b      	uxth	r3, r3
 800243e:	3b01      	subs	r3, #1
 8002440:	b29a      	uxth	r2, r3
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002446:	2301      	movs	r3, #1
 8002448:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800244a:	f7fe fd75 	bl	8000f38 <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002456:	429a      	cmp	r2, r3
 8002458:	d80b      	bhi.n	8002472 <HAL_SPI_TransmitReceive+0x1e0>
 800245a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800245c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002460:	d007      	beq.n	8002472 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8002470:	e0b5      	b.n	80025de <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002476:	b29b      	uxth	r3, r3
 8002478:	2b00      	cmp	r3, #0
 800247a:	d1a2      	bne.n	80023c2 <HAL_SPI_TransmitReceive+0x130>
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002480:	b29b      	uxth	r3, r3
 8002482:	2b00      	cmp	r3, #0
 8002484:	d19d      	bne.n	80023c2 <HAL_SPI_TransmitReceive+0x130>
 8002486:	e080      	b.n	800258a <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d002      	beq.n	8002496 <HAL_SPI_TransmitReceive+0x204>
 8002490:	8b7b      	ldrh	r3, [r7, #26]
 8002492:	2b01      	cmp	r3, #1
 8002494:	d16f      	bne.n	8002576 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	330c      	adds	r3, #12
 80024a0:	7812      	ldrb	r2, [r2, #0]
 80024a2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a8:	1c5a      	adds	r2, r3, #1
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	3b01      	subs	r3, #1
 80024b6:	b29a      	uxth	r2, r3
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024bc:	e05b      	b.n	8002576 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f003 0302 	and.w	r3, r3, #2
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d11c      	bne.n	8002506 <HAL_SPI_TransmitReceive+0x274>
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d017      	beq.n	8002506 <HAL_SPI_TransmitReceive+0x274>
 80024d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d114      	bne.n	8002506 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	330c      	adds	r3, #12
 80024e6:	7812      	ldrb	r2, [r2, #0]
 80024e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ee:	1c5a      	adds	r2, r3, #1
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	3b01      	subs	r3, #1
 80024fc:	b29a      	uxth	r2, r3
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002502:	2300      	movs	r3, #0
 8002504:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f003 0301 	and.w	r3, r3, #1
 8002510:	2b01      	cmp	r3, #1
 8002512:	d119      	bne.n	8002548 <HAL_SPI_TransmitReceive+0x2b6>
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002518:	b29b      	uxth	r3, r3
 800251a:	2b00      	cmp	r3, #0
 800251c:	d014      	beq.n	8002548 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	68da      	ldr	r2, [r3, #12]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002528:	b2d2      	uxtb	r2, r2
 800252a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002530:	1c5a      	adds	r2, r3, #1
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800253a:	b29b      	uxth	r3, r3
 800253c:	3b01      	subs	r3, #1
 800253e:	b29a      	uxth	r2, r3
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002544:	2301      	movs	r3, #1
 8002546:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002548:	f7fe fcf6 	bl	8000f38 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002554:	429a      	cmp	r2, r3
 8002556:	d803      	bhi.n	8002560 <HAL_SPI_TransmitReceive+0x2ce>
 8002558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800255a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800255e:	d102      	bne.n	8002566 <HAL_SPI_TransmitReceive+0x2d4>
 8002560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002562:	2b00      	cmp	r3, #0
 8002564:	d107      	bne.n	8002576 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8002574:	e033      	b.n	80025de <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800257a:	b29b      	uxth	r3, r3
 800257c:	2b00      	cmp	r3, #0
 800257e:	d19e      	bne.n	80024be <HAL_SPI_TransmitReceive+0x22c>
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002584:	b29b      	uxth	r3, r3
 8002586:	2b00      	cmp	r3, #0
 8002588:	d199      	bne.n	80024be <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800258a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800258c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800258e:	68f8      	ldr	r0, [r7, #12]
 8002590:	f000 f90a 	bl	80027a8 <SPI_EndRxTxTransaction>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d006      	beq.n	80025a8 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2220      	movs	r2, #32
 80025a4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80025a6:	e01a      	b.n	80025de <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d10a      	bne.n	80025c6 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80025b0:	2300      	movs	r3, #0
 80025b2:	617b      	str	r3, [r7, #20]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	617b      	str	r3, [r7, #20]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	617b      	str	r3, [r7, #20]
 80025c4:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d003      	beq.n	80025d6 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80025d4:	e003      	b.n	80025de <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2201      	movs	r2, #1
 80025da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80025e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3730      	adds	r7, #48	; 0x30
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
	...

080025f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b088      	sub	sp, #32
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	603b      	str	r3, [r7, #0]
 8002600:	4613      	mov	r3, r2
 8002602:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002604:	f7fe fc98 	bl	8000f38 <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800260c:	1a9b      	subs	r3, r3, r2
 800260e:	683a      	ldr	r2, [r7, #0]
 8002610:	4413      	add	r3, r2
 8002612:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002614:	f7fe fc90 	bl	8000f38 <HAL_GetTick>
 8002618:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800261a:	4b39      	ldr	r3, [pc, #228]	; (8002700 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	015b      	lsls	r3, r3, #5
 8002620:	0d1b      	lsrs	r3, r3, #20
 8002622:	69fa      	ldr	r2, [r7, #28]
 8002624:	fb02 f303 	mul.w	r3, r2, r3
 8002628:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800262a:	e054      	b.n	80026d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002632:	d050      	beq.n	80026d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002634:	f7fe fc80 	bl	8000f38 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	69fa      	ldr	r2, [r7, #28]
 8002640:	429a      	cmp	r2, r3
 8002642:	d902      	bls.n	800264a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d13d      	bne.n	80026c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	685a      	ldr	r2, [r3, #4]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002658:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002662:	d111      	bne.n	8002688 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800266c:	d004      	beq.n	8002678 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002676:	d107      	bne.n	8002688 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002686:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800268c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002690:	d10f      	bne.n	80026b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026a0:	601a      	str	r2, [r3, #0]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2201      	movs	r2, #1
 80026b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e017      	b.n	80026f6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d101      	bne.n	80026d0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80026cc:	2300      	movs	r3, #0
 80026ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	3b01      	subs	r3, #1
 80026d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	689a      	ldr	r2, [r3, #8]
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	4013      	ands	r3, r2
 80026e0:	68ba      	ldr	r2, [r7, #8]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	bf0c      	ite	eq
 80026e6:	2301      	moveq	r3, #1
 80026e8:	2300      	movne	r3, #0
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	461a      	mov	r2, r3
 80026ee:	79fb      	ldrb	r3, [r7, #7]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d19b      	bne.n	800262c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3720      	adds	r7, #32
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	20000010 	.word	0x20000010

08002704 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b086      	sub	sp, #24
 8002708:	af02      	add	r7, sp, #8
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002718:	d111      	bne.n	800273e <SPI_EndRxTransaction+0x3a>
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002722:	d004      	beq.n	800272e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800272c:	d107      	bne.n	800273e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800273c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002746:	d117      	bne.n	8002778 <SPI_EndRxTransaction+0x74>
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002750:	d112      	bne.n	8002778 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	9300      	str	r3, [sp, #0]
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	2200      	movs	r2, #0
 800275a:	2101      	movs	r1, #1
 800275c:	68f8      	ldr	r0, [r7, #12]
 800275e:	f7ff ff49 	bl	80025f4 <SPI_WaitFlagStateUntilTimeout>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d01a      	beq.n	800279e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800276c:	f043 0220 	orr.w	r2, r3, #32
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e013      	b.n	80027a0 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	9300      	str	r3, [sp, #0]
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	2200      	movs	r2, #0
 8002780:	2180      	movs	r1, #128	; 0x80
 8002782:	68f8      	ldr	r0, [r7, #12]
 8002784:	f7ff ff36 	bl	80025f4 <SPI_WaitFlagStateUntilTimeout>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d007      	beq.n	800279e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002792:	f043 0220 	orr.w	r2, r3, #32
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e000      	b.n	80027a0 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800279e:	2300      	movs	r3, #0
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3710      	adds	r7, #16
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b086      	sub	sp, #24
 80027ac:	af02      	add	r7, sp, #8
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	60b9      	str	r1, [r7, #8]
 80027b2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	9300      	str	r3, [sp, #0]
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	2200      	movs	r2, #0
 80027bc:	2180      	movs	r1, #128	; 0x80
 80027be:	68f8      	ldr	r0, [r7, #12]
 80027c0:	f7ff ff18 	bl	80025f4 <SPI_WaitFlagStateUntilTimeout>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d007      	beq.n	80027da <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ce:	f043 0220 	orr.w	r2, r3, #32
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e000      	b.n	80027dc <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80027da:	2300      	movs	r3, #0
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3710      	adds	r7, #16
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d101      	bne.n	80027f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e041      	b.n	800287a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d106      	bne.n	8002810 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f7fe f94c 	bl	8000aa8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2202      	movs	r2, #2
 8002814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	3304      	adds	r3, #4
 8002820:	4619      	mov	r1, r3
 8002822:	4610      	mov	r0, r2
 8002824:	f000 fab2 	bl	8002d8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3708      	adds	r7, #8
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}

08002882 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002882:	b580      	push	{r7, lr}
 8002884:	b082      	sub	sp, #8
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d101      	bne.n	8002894 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e041      	b.n	8002918 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800289a:	b2db      	uxtb	r3, r3
 800289c:	2b00      	cmp	r3, #0
 800289e:	d106      	bne.n	80028ae <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f000 f839 	bl	8002920 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2202      	movs	r2, #2
 80028b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	3304      	adds	r3, #4
 80028be:	4619      	mov	r1, r3
 80028c0:	4610      	mov	r0, r2
 80028c2:	f000 fa63 	bl	8002d8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2201      	movs	r2, #1
 80028ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2201      	movs	r2, #1
 80028d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2201      	movs	r2, #1
 80028da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2201      	movs	r2, #1
 80028e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2201      	movs	r2, #1
 80028ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2201      	movs	r2, #1
 80028f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2201      	movs	r2, #1
 80028fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2201      	movs	r2, #1
 8002902:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2201      	movs	r2, #1
 800290a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2201      	movs	r2, #1
 8002912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002916:	2300      	movs	r3, #0
}
 8002918:	4618      	mov	r0, r3
 800291a:	3708      	adds	r7, #8
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002928:	bf00      	nop
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	bc80      	pop	{r7}
 8002930:	4770      	bx	lr
	...

08002934 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d109      	bne.n	8002958 <HAL_TIM_PWM_Start+0x24>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800294a:	b2db      	uxtb	r3, r3
 800294c:	2b01      	cmp	r3, #1
 800294e:	bf14      	ite	ne
 8002950:	2301      	movne	r3, #1
 8002952:	2300      	moveq	r3, #0
 8002954:	b2db      	uxtb	r3, r3
 8002956:	e022      	b.n	800299e <HAL_TIM_PWM_Start+0x6a>
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	2b04      	cmp	r3, #4
 800295c:	d109      	bne.n	8002972 <HAL_TIM_PWM_Start+0x3e>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2b01      	cmp	r3, #1
 8002968:	bf14      	ite	ne
 800296a:	2301      	movne	r3, #1
 800296c:	2300      	moveq	r3, #0
 800296e:	b2db      	uxtb	r3, r3
 8002970:	e015      	b.n	800299e <HAL_TIM_PWM_Start+0x6a>
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	2b08      	cmp	r3, #8
 8002976:	d109      	bne.n	800298c <HAL_TIM_PWM_Start+0x58>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800297e:	b2db      	uxtb	r3, r3
 8002980:	2b01      	cmp	r3, #1
 8002982:	bf14      	ite	ne
 8002984:	2301      	movne	r3, #1
 8002986:	2300      	moveq	r3, #0
 8002988:	b2db      	uxtb	r3, r3
 800298a:	e008      	b.n	800299e <HAL_TIM_PWM_Start+0x6a>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002992:	b2db      	uxtb	r3, r3
 8002994:	2b01      	cmp	r3, #1
 8002996:	bf14      	ite	ne
 8002998:	2301      	movne	r3, #1
 800299a:	2300      	moveq	r3, #0
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e05e      	b.n	8002a64 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d104      	bne.n	80029b6 <HAL_TIM_PWM_Start+0x82>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2202      	movs	r2, #2
 80029b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029b4:	e013      	b.n	80029de <HAL_TIM_PWM_Start+0xaa>
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	2b04      	cmp	r3, #4
 80029ba:	d104      	bne.n	80029c6 <HAL_TIM_PWM_Start+0x92>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2202      	movs	r2, #2
 80029c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029c4:	e00b      	b.n	80029de <HAL_TIM_PWM_Start+0xaa>
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	2b08      	cmp	r3, #8
 80029ca:	d104      	bne.n	80029d6 <HAL_TIM_PWM_Start+0xa2>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2202      	movs	r2, #2
 80029d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029d4:	e003      	b.n	80029de <HAL_TIM_PWM_Start+0xaa>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2202      	movs	r2, #2
 80029da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2201      	movs	r2, #1
 80029e4:	6839      	ldr	r1, [r7, #0]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f000 fc50 	bl	800328c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a1e      	ldr	r2, [pc, #120]	; (8002a6c <HAL_TIM_PWM_Start+0x138>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d107      	bne.n	8002a06 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a04:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a18      	ldr	r2, [pc, #96]	; (8002a6c <HAL_TIM_PWM_Start+0x138>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d00e      	beq.n	8002a2e <HAL_TIM_PWM_Start+0xfa>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a18:	d009      	beq.n	8002a2e <HAL_TIM_PWM_Start+0xfa>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a14      	ldr	r2, [pc, #80]	; (8002a70 <HAL_TIM_PWM_Start+0x13c>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d004      	beq.n	8002a2e <HAL_TIM_PWM_Start+0xfa>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a12      	ldr	r2, [pc, #72]	; (8002a74 <HAL_TIM_PWM_Start+0x140>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d111      	bne.n	8002a52 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f003 0307 	and.w	r3, r3, #7
 8002a38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2b06      	cmp	r3, #6
 8002a3e:	d010      	beq.n	8002a62 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f042 0201 	orr.w	r2, r2, #1
 8002a4e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a50:	e007      	b.n	8002a62 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f042 0201 	orr.w	r2, r2, #1
 8002a60:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a62:	2300      	movs	r3, #0
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3710      	adds	r7, #16
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	40012c00 	.word	0x40012c00
 8002a70:	40000400 	.word	0x40000400
 8002a74:	40000800 	.word	0x40000800

08002a78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a84:	2300      	movs	r3, #0
 8002a86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d101      	bne.n	8002a96 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002a92:	2302      	movs	r3, #2
 8002a94:	e0ae      	b.n	8002bf4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2201      	movs	r2, #1
 8002a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2b0c      	cmp	r3, #12
 8002aa2:	f200 809f 	bhi.w	8002be4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002aa6:	a201      	add	r2, pc, #4	; (adr r2, 8002aac <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aac:	08002ae1 	.word	0x08002ae1
 8002ab0:	08002be5 	.word	0x08002be5
 8002ab4:	08002be5 	.word	0x08002be5
 8002ab8:	08002be5 	.word	0x08002be5
 8002abc:	08002b21 	.word	0x08002b21
 8002ac0:	08002be5 	.word	0x08002be5
 8002ac4:	08002be5 	.word	0x08002be5
 8002ac8:	08002be5 	.word	0x08002be5
 8002acc:	08002b63 	.word	0x08002b63
 8002ad0:	08002be5 	.word	0x08002be5
 8002ad4:	08002be5 	.word	0x08002be5
 8002ad8:	08002be5 	.word	0x08002be5
 8002adc:	08002ba3 	.word	0x08002ba3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68b9      	ldr	r1, [r7, #8]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f000 f9b2 	bl	8002e50 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	699a      	ldr	r2, [r3, #24]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f042 0208 	orr.w	r2, r2, #8
 8002afa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	699a      	ldr	r2, [r3, #24]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f022 0204 	bic.w	r2, r2, #4
 8002b0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	6999      	ldr	r1, [r3, #24]
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	691a      	ldr	r2, [r3, #16]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	430a      	orrs	r2, r1
 8002b1c:	619a      	str	r2, [r3, #24]
      break;
 8002b1e:	e064      	b.n	8002bea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	68b9      	ldr	r1, [r7, #8]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f000 f9f8 	bl	8002f1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	699a      	ldr	r2, [r3, #24]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	699a      	ldr	r2, [r3, #24]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	6999      	ldr	r1, [r3, #24]
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	021a      	lsls	r2, r3, #8
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	430a      	orrs	r2, r1
 8002b5e:	619a      	str	r2, [r3, #24]
      break;
 8002b60:	e043      	b.n	8002bea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	68b9      	ldr	r1, [r7, #8]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f000 fa41 	bl	8002ff0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	69da      	ldr	r2, [r3, #28]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f042 0208 	orr.w	r2, r2, #8
 8002b7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	69da      	ldr	r2, [r3, #28]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f022 0204 	bic.w	r2, r2, #4
 8002b8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	69d9      	ldr	r1, [r3, #28]
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	691a      	ldr	r2, [r3, #16]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	61da      	str	r2, [r3, #28]
      break;
 8002ba0:	e023      	b.n	8002bea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	68b9      	ldr	r1, [r7, #8]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f000 fa8b 	bl	80030c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	69da      	ldr	r2, [r3, #28]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	69da      	ldr	r2, [r3, #28]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	69d9      	ldr	r1, [r3, #28]
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	691b      	ldr	r3, [r3, #16]
 8002bd8:	021a      	lsls	r2, r3, #8
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	430a      	orrs	r2, r1
 8002be0:	61da      	str	r2, [r3, #28]
      break;
 8002be2:	e002      	b.n	8002bea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	75fb      	strb	r3, [r7, #23]
      break;
 8002be8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002bf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3718      	adds	r7, #24
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c06:	2300      	movs	r3, #0
 8002c08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d101      	bne.n	8002c18 <HAL_TIM_ConfigClockSource+0x1c>
 8002c14:	2302      	movs	r3, #2
 8002c16:	e0b4      	b.n	8002d82 <HAL_TIM_ConfigClockSource+0x186>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2202      	movs	r2, #2
 8002c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	68ba      	ldr	r2, [r7, #8]
 8002c46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c50:	d03e      	beq.n	8002cd0 <HAL_TIM_ConfigClockSource+0xd4>
 8002c52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c56:	f200 8087 	bhi.w	8002d68 <HAL_TIM_ConfigClockSource+0x16c>
 8002c5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c5e:	f000 8086 	beq.w	8002d6e <HAL_TIM_ConfigClockSource+0x172>
 8002c62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c66:	d87f      	bhi.n	8002d68 <HAL_TIM_ConfigClockSource+0x16c>
 8002c68:	2b70      	cmp	r3, #112	; 0x70
 8002c6a:	d01a      	beq.n	8002ca2 <HAL_TIM_ConfigClockSource+0xa6>
 8002c6c:	2b70      	cmp	r3, #112	; 0x70
 8002c6e:	d87b      	bhi.n	8002d68 <HAL_TIM_ConfigClockSource+0x16c>
 8002c70:	2b60      	cmp	r3, #96	; 0x60
 8002c72:	d050      	beq.n	8002d16 <HAL_TIM_ConfigClockSource+0x11a>
 8002c74:	2b60      	cmp	r3, #96	; 0x60
 8002c76:	d877      	bhi.n	8002d68 <HAL_TIM_ConfigClockSource+0x16c>
 8002c78:	2b50      	cmp	r3, #80	; 0x50
 8002c7a:	d03c      	beq.n	8002cf6 <HAL_TIM_ConfigClockSource+0xfa>
 8002c7c:	2b50      	cmp	r3, #80	; 0x50
 8002c7e:	d873      	bhi.n	8002d68 <HAL_TIM_ConfigClockSource+0x16c>
 8002c80:	2b40      	cmp	r3, #64	; 0x40
 8002c82:	d058      	beq.n	8002d36 <HAL_TIM_ConfigClockSource+0x13a>
 8002c84:	2b40      	cmp	r3, #64	; 0x40
 8002c86:	d86f      	bhi.n	8002d68 <HAL_TIM_ConfigClockSource+0x16c>
 8002c88:	2b30      	cmp	r3, #48	; 0x30
 8002c8a:	d064      	beq.n	8002d56 <HAL_TIM_ConfigClockSource+0x15a>
 8002c8c:	2b30      	cmp	r3, #48	; 0x30
 8002c8e:	d86b      	bhi.n	8002d68 <HAL_TIM_ConfigClockSource+0x16c>
 8002c90:	2b20      	cmp	r3, #32
 8002c92:	d060      	beq.n	8002d56 <HAL_TIM_ConfigClockSource+0x15a>
 8002c94:	2b20      	cmp	r3, #32
 8002c96:	d867      	bhi.n	8002d68 <HAL_TIM_ConfigClockSource+0x16c>
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d05c      	beq.n	8002d56 <HAL_TIM_ConfigClockSource+0x15a>
 8002c9c:	2b10      	cmp	r3, #16
 8002c9e:	d05a      	beq.n	8002d56 <HAL_TIM_ConfigClockSource+0x15a>
 8002ca0:	e062      	b.n	8002d68 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002cb2:	f000 facc 	bl	800324e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002cc4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	68ba      	ldr	r2, [r7, #8]
 8002ccc:	609a      	str	r2, [r3, #8]
      break;
 8002cce:	e04f      	b.n	8002d70 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ce0:	f000 fab5 	bl	800324e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	689a      	ldr	r2, [r3, #8]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cf2:	609a      	str	r2, [r3, #8]
      break;
 8002cf4:	e03c      	b.n	8002d70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d02:	461a      	mov	r2, r3
 8002d04:	f000 fa2c 	bl	8003160 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2150      	movs	r1, #80	; 0x50
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f000 fa83 	bl	800321a <TIM_ITRx_SetConfig>
      break;
 8002d14:	e02c      	b.n	8002d70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d22:	461a      	mov	r2, r3
 8002d24:	f000 fa4a 	bl	80031bc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2160      	movs	r1, #96	; 0x60
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f000 fa73 	bl	800321a <TIM_ITRx_SetConfig>
      break;
 8002d34:	e01c      	b.n	8002d70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d42:	461a      	mov	r2, r3
 8002d44:	f000 fa0c 	bl	8003160 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2140      	movs	r1, #64	; 0x40
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f000 fa63 	bl	800321a <TIM_ITRx_SetConfig>
      break;
 8002d54:	e00c      	b.n	8002d70 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4619      	mov	r1, r3
 8002d60:	4610      	mov	r0, r2
 8002d62:	f000 fa5a 	bl	800321a <TIM_ITRx_SetConfig>
      break;
 8002d66:	e003      	b.n	8002d70 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d6c:	e000      	b.n	8002d70 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002d6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3710      	adds	r7, #16
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
	...

08002d8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b085      	sub	sp, #20
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	4a29      	ldr	r2, [pc, #164]	; (8002e44 <TIM_Base_SetConfig+0xb8>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d00b      	beq.n	8002dbc <TIM_Base_SetConfig+0x30>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002daa:	d007      	beq.n	8002dbc <TIM_Base_SetConfig+0x30>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	4a26      	ldr	r2, [pc, #152]	; (8002e48 <TIM_Base_SetConfig+0xbc>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d003      	beq.n	8002dbc <TIM_Base_SetConfig+0x30>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	4a25      	ldr	r2, [pc, #148]	; (8002e4c <TIM_Base_SetConfig+0xc0>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d108      	bne.n	8002dce <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	68fa      	ldr	r2, [r7, #12]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a1c      	ldr	r2, [pc, #112]	; (8002e44 <TIM_Base_SetConfig+0xb8>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d00b      	beq.n	8002dee <TIM_Base_SetConfig+0x62>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ddc:	d007      	beq.n	8002dee <TIM_Base_SetConfig+0x62>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a19      	ldr	r2, [pc, #100]	; (8002e48 <TIM_Base_SetConfig+0xbc>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d003      	beq.n	8002dee <TIM_Base_SetConfig+0x62>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a18      	ldr	r2, [pc, #96]	; (8002e4c <TIM_Base_SetConfig+0xc0>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d108      	bne.n	8002e00 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002df4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	68db      	ldr	r3, [r3, #12]
 8002dfa:	68fa      	ldr	r2, [r7, #12]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	695b      	ldr	r3, [r3, #20]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	689a      	ldr	r2, [r3, #8]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	4a07      	ldr	r2, [pc, #28]	; (8002e44 <TIM_Base_SetConfig+0xb8>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d103      	bne.n	8002e34 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	691a      	ldr	r2, [r3, #16]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	615a      	str	r2, [r3, #20]
}
 8002e3a:	bf00      	nop
 8002e3c:	3714      	adds	r7, #20
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bc80      	pop	{r7}
 8002e42:	4770      	bx	lr
 8002e44:	40012c00 	.word	0x40012c00
 8002e48:	40000400 	.word	0x40000400
 8002e4c:	40000800 	.word	0x40000800

08002e50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b087      	sub	sp, #28
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a1b      	ldr	r3, [r3, #32]
 8002e5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a1b      	ldr	r3, [r3, #32]
 8002e64:	f023 0201 	bic.w	r2, r3, #1
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	699b      	ldr	r3, [r3, #24]
 8002e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f023 0303 	bic.w	r3, r3, #3
 8002e86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	68fa      	ldr	r2, [r7, #12]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	f023 0302 	bic.w	r3, r3, #2
 8002e98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	697a      	ldr	r2, [r7, #20]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	4a1c      	ldr	r2, [pc, #112]	; (8002f18 <TIM_OC1_SetConfig+0xc8>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d10c      	bne.n	8002ec6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	f023 0308 	bic.w	r3, r3, #8
 8002eb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	697a      	ldr	r2, [r7, #20]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	f023 0304 	bic.w	r3, r3, #4
 8002ec4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a13      	ldr	r2, [pc, #76]	; (8002f18 <TIM_OC1_SetConfig+0xc8>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d111      	bne.n	8002ef2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ed4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002edc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	693a      	ldr	r2, [r7, #16]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	699b      	ldr	r3, [r3, #24]
 8002eec:	693a      	ldr	r2, [r7, #16]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	693a      	ldr	r2, [r7, #16]
 8002ef6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	68fa      	ldr	r2, [r7, #12]
 8002efc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	685a      	ldr	r2, [r3, #4]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	697a      	ldr	r2, [r7, #20]
 8002f0a:	621a      	str	r2, [r3, #32]
}
 8002f0c:	bf00      	nop
 8002f0e:	371c      	adds	r7, #28
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bc80      	pop	{r7}
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	40012c00 	.word	0x40012c00

08002f1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b087      	sub	sp, #28
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a1b      	ldr	r3, [r3, #32]
 8002f2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a1b      	ldr	r3, [r3, #32]
 8002f30:	f023 0210 	bic.w	r2, r3, #16
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	021b      	lsls	r3, r3, #8
 8002f5a:	68fa      	ldr	r2, [r7, #12]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	f023 0320 	bic.w	r3, r3, #32
 8002f66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	011b      	lsls	r3, r3, #4
 8002f6e:	697a      	ldr	r2, [r7, #20]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	4a1d      	ldr	r2, [pc, #116]	; (8002fec <TIM_OC2_SetConfig+0xd0>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d10d      	bne.n	8002f98 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	011b      	lsls	r3, r3, #4
 8002f8a:	697a      	ldr	r2, [r7, #20]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f96:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4a14      	ldr	r2, [pc, #80]	; (8002fec <TIM_OC2_SetConfig+0xd0>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d113      	bne.n	8002fc8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002fa6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002fae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	695b      	ldr	r3, [r3, #20]
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	693a      	ldr	r2, [r7, #16]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	693a      	ldr	r2, [r7, #16]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	693a      	ldr	r2, [r7, #16]
 8002fcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	68fa      	ldr	r2, [r7, #12]
 8002fd2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685a      	ldr	r2, [r3, #4]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	697a      	ldr	r2, [r7, #20]
 8002fe0:	621a      	str	r2, [r3, #32]
}
 8002fe2:	bf00      	nop
 8002fe4:	371c      	adds	r7, #28
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bc80      	pop	{r7}
 8002fea:	4770      	bx	lr
 8002fec:	40012c00 	.word	0x40012c00

08002ff0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b087      	sub	sp, #28
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a1b      	ldr	r3, [r3, #32]
 8002ffe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a1b      	ldr	r3, [r3, #32]
 8003004:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	69db      	ldr	r3, [r3, #28]
 8003016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800301e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f023 0303 	bic.w	r3, r3, #3
 8003026:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68fa      	ldr	r2, [r7, #12]
 800302e:	4313      	orrs	r3, r2
 8003030:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003038:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	021b      	lsls	r3, r3, #8
 8003040:	697a      	ldr	r2, [r7, #20]
 8003042:	4313      	orrs	r3, r2
 8003044:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a1d      	ldr	r2, [pc, #116]	; (80030c0 <TIM_OC3_SetConfig+0xd0>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d10d      	bne.n	800306a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003054:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	021b      	lsls	r3, r3, #8
 800305c:	697a      	ldr	r2, [r7, #20]
 800305e:	4313      	orrs	r3, r2
 8003060:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003068:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a14      	ldr	r2, [pc, #80]	; (80030c0 <TIM_OC3_SetConfig+0xd0>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d113      	bne.n	800309a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003078:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003080:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	695b      	ldr	r3, [r3, #20]
 8003086:	011b      	lsls	r3, r3, #4
 8003088:	693a      	ldr	r2, [r7, #16]
 800308a:	4313      	orrs	r3, r2
 800308c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	699b      	ldr	r3, [r3, #24]
 8003092:	011b      	lsls	r3, r3, #4
 8003094:	693a      	ldr	r2, [r7, #16]
 8003096:	4313      	orrs	r3, r2
 8003098:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	693a      	ldr	r2, [r7, #16]
 800309e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	685a      	ldr	r2, [r3, #4]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	697a      	ldr	r2, [r7, #20]
 80030b2:	621a      	str	r2, [r3, #32]
}
 80030b4:	bf00      	nop
 80030b6:	371c      	adds	r7, #28
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bc80      	pop	{r7}
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	40012c00 	.word	0x40012c00

080030c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b087      	sub	sp, #28
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a1b      	ldr	r3, [r3, #32]
 80030d2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a1b      	ldr	r3, [r3, #32]
 80030d8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	69db      	ldr	r3, [r3, #28]
 80030ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	021b      	lsls	r3, r3, #8
 8003102:	68fa      	ldr	r2, [r7, #12]
 8003104:	4313      	orrs	r3, r2
 8003106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800310e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	031b      	lsls	r3, r3, #12
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	4313      	orrs	r3, r2
 800311a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	4a0f      	ldr	r2, [pc, #60]	; (800315c <TIM_OC4_SetConfig+0x98>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d109      	bne.n	8003138 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800312a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	695b      	ldr	r3, [r3, #20]
 8003130:	019b      	lsls	r3, r3, #6
 8003132:	697a      	ldr	r2, [r7, #20]
 8003134:	4313      	orrs	r3, r2
 8003136:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	697a      	ldr	r2, [r7, #20]
 800313c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	68fa      	ldr	r2, [r7, #12]
 8003142:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685a      	ldr	r2, [r3, #4]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	693a      	ldr	r2, [r7, #16]
 8003150:	621a      	str	r2, [r3, #32]
}
 8003152:	bf00      	nop
 8003154:	371c      	adds	r7, #28
 8003156:	46bd      	mov	sp, r7
 8003158:	bc80      	pop	{r7}
 800315a:	4770      	bx	lr
 800315c:	40012c00 	.word	0x40012c00

08003160 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003160:	b480      	push	{r7}
 8003162:	b087      	sub	sp, #28
 8003164:	af00      	add	r7, sp, #0
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	60b9      	str	r1, [r7, #8]
 800316a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6a1b      	ldr	r3, [r3, #32]
 8003170:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6a1b      	ldr	r3, [r3, #32]
 8003176:	f023 0201 	bic.w	r2, r3, #1
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	699b      	ldr	r3, [r3, #24]
 8003182:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800318a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	011b      	lsls	r3, r3, #4
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	4313      	orrs	r3, r2
 8003194:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	f023 030a 	bic.w	r3, r3, #10
 800319c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800319e:	697a      	ldr	r2, [r7, #20]
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	693a      	ldr	r2, [r7, #16]
 80031aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	697a      	ldr	r2, [r7, #20]
 80031b0:	621a      	str	r2, [r3, #32]
}
 80031b2:	bf00      	nop
 80031b4:	371c      	adds	r7, #28
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bc80      	pop	{r7}
 80031ba:	4770      	bx	lr

080031bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031bc:	b480      	push	{r7}
 80031be:	b087      	sub	sp, #28
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6a1b      	ldr	r3, [r3, #32]
 80031cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6a1b      	ldr	r3, [r3, #32]
 80031d2:	f023 0210 	bic.w	r2, r3, #16
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	699b      	ldr	r3, [r3, #24]
 80031de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80031e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	031b      	lsls	r3, r3, #12
 80031ec:	693a      	ldr	r2, [r7, #16]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80031f8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	011b      	lsls	r3, r3, #4
 80031fe:	697a      	ldr	r2, [r7, #20]
 8003200:	4313      	orrs	r3, r2
 8003202:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	693a      	ldr	r2, [r7, #16]
 8003208:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	697a      	ldr	r2, [r7, #20]
 800320e:	621a      	str	r2, [r3, #32]
}
 8003210:	bf00      	nop
 8003212:	371c      	adds	r7, #28
 8003214:	46bd      	mov	sp, r7
 8003216:	bc80      	pop	{r7}
 8003218:	4770      	bx	lr

0800321a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800321a:	b480      	push	{r7}
 800321c:	b085      	sub	sp, #20
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
 8003222:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003230:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003232:	683a      	ldr	r2, [r7, #0]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	4313      	orrs	r3, r2
 8003238:	f043 0307 	orr.w	r3, r3, #7
 800323c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	68fa      	ldr	r2, [r7, #12]
 8003242:	609a      	str	r2, [r3, #8]
}
 8003244:	bf00      	nop
 8003246:	3714      	adds	r7, #20
 8003248:	46bd      	mov	sp, r7
 800324a:	bc80      	pop	{r7}
 800324c:	4770      	bx	lr

0800324e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800324e:	b480      	push	{r7}
 8003250:	b087      	sub	sp, #28
 8003252:	af00      	add	r7, sp, #0
 8003254:	60f8      	str	r0, [r7, #12]
 8003256:	60b9      	str	r1, [r7, #8]
 8003258:	607a      	str	r2, [r7, #4]
 800325a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003268:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	021a      	lsls	r2, r3, #8
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	431a      	orrs	r2, r3
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	4313      	orrs	r3, r2
 8003276:	697a      	ldr	r2, [r7, #20]
 8003278:	4313      	orrs	r3, r2
 800327a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	697a      	ldr	r2, [r7, #20]
 8003280:	609a      	str	r2, [r3, #8]
}
 8003282:	bf00      	nop
 8003284:	371c      	adds	r7, #28
 8003286:	46bd      	mov	sp, r7
 8003288:	bc80      	pop	{r7}
 800328a:	4770      	bx	lr

0800328c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800328c:	b480      	push	{r7}
 800328e:	b087      	sub	sp, #28
 8003290:	af00      	add	r7, sp, #0
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	f003 031f 	and.w	r3, r3, #31
 800329e:	2201      	movs	r2, #1
 80032a0:	fa02 f303 	lsl.w	r3, r2, r3
 80032a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6a1a      	ldr	r2, [r3, #32]
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	43db      	mvns	r3, r3
 80032ae:	401a      	ands	r2, r3
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6a1a      	ldr	r2, [r3, #32]
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	f003 031f 	and.w	r3, r3, #31
 80032be:	6879      	ldr	r1, [r7, #4]
 80032c0:	fa01 f303 	lsl.w	r3, r1, r3
 80032c4:	431a      	orrs	r2, r3
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	621a      	str	r2, [r3, #32]
}
 80032ca:	bf00      	nop
 80032cc:	371c      	adds	r7, #28
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bc80      	pop	{r7}
 80032d2:	4770      	bx	lr

080032d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b085      	sub	sp, #20
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d101      	bne.n	80032ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80032e8:	2302      	movs	r3, #2
 80032ea:	e046      	b.n	800337a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2202      	movs	r2, #2
 80032f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003312:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68fa      	ldr	r2, [r7, #12]
 800331a:	4313      	orrs	r3, r2
 800331c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a16      	ldr	r2, [pc, #88]	; (8003384 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d00e      	beq.n	800334e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003338:	d009      	beq.n	800334e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a12      	ldr	r2, [pc, #72]	; (8003388 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d004      	beq.n	800334e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a10      	ldr	r2, [pc, #64]	; (800338c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d10c      	bne.n	8003368 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003354:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	68ba      	ldr	r2, [r7, #8]
 800335c:	4313      	orrs	r3, r2
 800335e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68ba      	ldr	r2, [r7, #8]
 8003366:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003378:	2300      	movs	r3, #0
}
 800337a:	4618      	mov	r0, r3
 800337c:	3714      	adds	r7, #20
 800337e:	46bd      	mov	sp, r7
 8003380:	bc80      	pop	{r7}
 8003382:	4770      	bx	lr
 8003384:	40012c00 	.word	0x40012c00
 8003388:	40000400 	.word	0x40000400
 800338c:	40000800 	.word	0x40000800

08003390 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003390:	b480      	push	{r7}
 8003392:	b085      	sub	sp, #20
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800339a:	2300      	movs	r3, #0
 800339c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d101      	bne.n	80033ac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80033a8:	2302      	movs	r3, #2
 80033aa:	e03d      	b.n	8003428 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	4313      	orrs	r3, r2
 80033c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	4313      	orrs	r3, r2
 80033dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	691b      	ldr	r3, [r3, #16]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	695b      	ldr	r3, [r3, #20]
 8003404:	4313      	orrs	r3, r2
 8003406:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	69db      	ldr	r3, [r3, #28]
 8003412:	4313      	orrs	r3, r2
 8003414:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68fa      	ldr	r2, [r7, #12]
 800341c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003426:	2300      	movs	r3, #0
}
 8003428:	4618      	mov	r0, r3
 800342a:	3714      	adds	r7, #20
 800342c:	46bd      	mov	sp, r7
 800342e:	bc80      	pop	{r7}
 8003430:	4770      	bx	lr
	...

08003434 <cs_high>:
 * 
 */

#include "nrf24l01p.h"

static void cs_high() {
 8003434:	b580      	push	{r7, lr}
 8003436:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER,
 8003438:	2201      	movs	r2, #1
 800343a:	2108      	movs	r1, #8
 800343c:	4802      	ldr	r0, [pc, #8]	; (8003448 <cs_high+0x14>)
 800343e:	f7fe f83b 	bl	80014b8 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
}
 8003442:	bf00      	nop
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	40010800 	.word	0x40010800

0800344c <cs_low>:

static void cs_low() {
 800344c:	b580      	push	{r7, lr}
 800344e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER,
 8003450:	2200      	movs	r2, #0
 8003452:	2108      	movs	r1, #8
 8003454:	4802      	ldr	r0, [pc, #8]	; (8003460 <cs_low+0x14>)
 8003456:	f7fe f82f 	bl	80014b8 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
}
 800345a:	bf00      	nop
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	40010800 	.word	0x40010800

08003464 <ce_high>:

static void ce_high() {
 8003464:	b580      	push	{r7, lr}
 8003466:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER,
 8003468:	2201      	movs	r2, #1
 800346a:	2110      	movs	r1, #16
 800346c:	4802      	ldr	r0, [pc, #8]	; (8003478 <ce_high+0x14>)
 800346e:	f7fe f823 	bl	80014b8 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
}
 8003472:	bf00      	nop
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	40010800 	.word	0x40010800

0800347c <ce_low>:

static void ce_low() {
 800347c:	b580      	push	{r7, lr}
 800347e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER,
 8003480:	2200      	movs	r2, #0
 8003482:	2110      	movs	r1, #16
 8003484:	4802      	ldr	r0, [pc, #8]	; (8003490 <ce_low+0x14>)
 8003486:	f7fe f817 	bl	80014b8 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
}
 800348a:	bf00      	nop
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	40010800 	.word	0x40010800

08003494 <read_register>:

uint8_t read_register(uint8_t reg) {
 8003494:	b580      	push	{r7, lr}
 8003496:	b086      	sub	sp, #24
 8003498:	af02      	add	r7, sp, #8
 800349a:	4603      	mov	r3, r0
 800349c:	71fb      	strb	r3, [r7, #7]
	uint8_t command = NRF24L01P_CMD_R_REGISTER | reg;
 800349e:	79fb      	ldrb	r3, [r7, #7]
 80034a0:	73fb      	strb	r3, [r7, #15]
	uint8_t status;
	uint8_t read_val;

	cs_low();
 80034a2:	f7ff ffd3 	bl	800344c <cs_low>
	HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 80034a6:	f107 020e 	add.w	r2, r7, #14
 80034aa:	f107 010f 	add.w	r1, r7, #15
 80034ae:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80034b2:	9300      	str	r3, [sp, #0]
 80034b4:	2301      	movs	r3, #1
 80034b6:	4809      	ldr	r0, [pc, #36]	; (80034dc <read_register+0x48>)
 80034b8:	f7fe feeb 	bl	8002292 <HAL_SPI_TransmitReceive>
	HAL_SPI_Receive(NRF24L01P_SPI, &read_val, 1, 2000);
 80034bc:	f107 010d 	add.w	r1, r7, #13
 80034c0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80034c4:	2201      	movs	r2, #1
 80034c6:	4805      	ldr	r0, [pc, #20]	; (80034dc <read_register+0x48>)
 80034c8:	f7fe fdcb 	bl	8002062 <HAL_SPI_Receive>
	cs_high();
 80034cc:	f7ff ffb2 	bl	8003434 <cs_high>

	return read_val;
 80034d0:	7b7b      	ldrb	r3, [r7, #13]
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3710      	adds	r7, #16
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	20000088 	.word	0x20000088

080034e0 <write_register>:

static uint8_t write_register(uint8_t reg, uint8_t value) {
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b086      	sub	sp, #24
 80034e4:	af02      	add	r7, sp, #8
 80034e6:	4603      	mov	r3, r0
 80034e8:	460a      	mov	r2, r1
 80034ea:	71fb      	strb	r3, [r7, #7]
 80034ec:	4613      	mov	r3, r2
 80034ee:	71bb      	strb	r3, [r7, #6]
	uint8_t command = NRF24L01P_CMD_W_REGISTER | reg;
 80034f0:	79fb      	ldrb	r3, [r7, #7]
 80034f2:	f043 0320 	orr.w	r3, r3, #32
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	73fb      	strb	r3, [r7, #15]
	uint8_t status;
	uint8_t write_val = value;
 80034fa:	79bb      	ldrb	r3, [r7, #6]
 80034fc:	737b      	strb	r3, [r7, #13]

	cs_low();
 80034fe:	f7ff ffa5 	bl	800344c <cs_low>
	HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8003502:	f107 020e 	add.w	r2, r7, #14
 8003506:	f107 010f 	add.w	r1, r7, #15
 800350a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800350e:	9300      	str	r3, [sp, #0]
 8003510:	2301      	movs	r3, #1
 8003512:	4809      	ldr	r0, [pc, #36]	; (8003538 <write_register+0x58>)
 8003514:	f7fe febd 	bl	8002292 <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(NRF24L01P_SPI, &write_val, 1, 2000);
 8003518:	f107 010d 	add.w	r1, r7, #13
 800351c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003520:	2201      	movs	r2, #1
 8003522:	4805      	ldr	r0, [pc, #20]	; (8003538 <write_register+0x58>)
 8003524:	f7fe fc5a 	bl	8001ddc <HAL_SPI_Transmit>
	cs_high();
 8003528:	f7ff ff84 	bl	8003434 <cs_high>

	return write_val;
 800352c:	7b7b      	ldrb	r3, [r7, #13]
}
 800352e:	4618      	mov	r0, r3
 8003530:	3710      	adds	r7, #16
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	20000088 	.word	0x20000088

0800353c <write_register_multi>:

void write_register_multi(uint8_t reg, uint8_t *address) {
 800353c:	b580      	push	{r7, lr}
 800353e:	b086      	sub	sp, #24
 8003540:	af02      	add	r7, sp, #8
 8003542:	4603      	mov	r3, r0
 8003544:	6039      	str	r1, [r7, #0]
 8003546:	71fb      	strb	r3, [r7, #7]
	uint8_t command = NRF24L01P_CMD_W_REGISTER | reg;
 8003548:	79fb      	ldrb	r3, [r7, #7]
 800354a:	f043 0320 	orr.w	r3, r3, #32
 800354e:	b2db      	uxtb	r3, r3
 8003550:	73bb      	strb	r3, [r7, #14]
	uint8_t status;
	uint8_t bytes[5];
	for (uint8_t i = 0; i < 5; i++) {
 8003552:	2300      	movs	r3, #0
 8003554:	73fb      	strb	r3, [r7, #15]
 8003556:	e00b      	b.n	8003570 <write_register_multi+0x34>
		bytes[i] = address [i];
 8003558:	7bfb      	ldrb	r3, [r7, #15]
 800355a:	683a      	ldr	r2, [r7, #0]
 800355c:	441a      	add	r2, r3
 800355e:	7bfb      	ldrb	r3, [r7, #15]
 8003560:	7812      	ldrb	r2, [r2, #0]
 8003562:	3310      	adds	r3, #16
 8003564:	443b      	add	r3, r7
 8003566:	f803 2c08 	strb.w	r2, [r3, #-8]
	for (uint8_t i = 0; i < 5; i++) {
 800356a:	7bfb      	ldrb	r3, [r7, #15]
 800356c:	3301      	adds	r3, #1
 800356e:	73fb      	strb	r3, [r7, #15]
 8003570:	7bfb      	ldrb	r3, [r7, #15]
 8003572:	2b04      	cmp	r3, #4
 8003574:	d9f0      	bls.n	8003558 <write_register_multi+0x1c>
	}
	cs_low();
 8003576:	f7ff ff69 	bl	800344c <cs_low>
	HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 800357a:	f107 020d 	add.w	r2, r7, #13
 800357e:	f107 010e 	add.w	r1, r7, #14
 8003582:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003586:	9300      	str	r3, [sp, #0]
 8003588:	2301      	movs	r3, #1
 800358a:	4808      	ldr	r0, [pc, #32]	; (80035ac <write_register_multi+0x70>)
 800358c:	f7fe fe81 	bl	8002292 <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(NRF24L01P_SPI, bytes, 5, 2000);
 8003590:	f107 0108 	add.w	r1, r7, #8
 8003594:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003598:	2205      	movs	r2, #5
 800359a:	4804      	ldr	r0, [pc, #16]	; (80035ac <write_register_multi+0x70>)
 800359c:	f7fe fc1e 	bl	8001ddc <HAL_SPI_Transmit>
	cs_high();
 80035a0:	f7ff ff48 	bl	8003434 <cs_high>

	// return address;
}
 80035a4:	bf00      	nop
 80035a6:	3710      	adds	r7, #16
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	20000088 	.word	0x20000088

080035b0 <nrf24l01p_rx_init>:

/* nRF24L01+ Main Functions */
void nrf24l01p_rx_init(channel MHz, air_data_rate bps,uint8_t* address1,uint8_t* address2) {
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60ba      	str	r2, [r7, #8]
 80035b8:	607b      	str	r3, [r7, #4]
 80035ba:	4603      	mov	r3, r0
 80035bc:	81fb      	strh	r3, [r7, #14]
 80035be:	460b      	mov	r3, r1
 80035c0:	737b      	strb	r3, [r7, #13]
	nrf24l01p_reset();
 80035c2:	f000 f83d 	bl	8003640 <nrf24l01p_reset>

	nrf24l01p_prx_mode();
 80035c6:	f000 f88b 	bl	80036e0 <nrf24l01p_prx_mode>
	nrf24l01p_power_up();
 80035ca:	f000 f935 	bl	8003838 <nrf24l01p_power_up>

	nrf24l01p_rx_set_payload_widths(NRF24L01P_PAYLOAD_LENGTH);
 80035ce:	2020      	movs	r0, #32
 80035d0:	f000 f910 	bl	80037f4 <nrf24l01p_rx_set_payload_widths>

	nrf24l01p_set_rf_channel(MHz);
 80035d4:	89fb      	ldrh	r3, [r7, #14]
 80035d6:	4618      	mov	r0, r3
 80035d8:	f000 f9ba 	bl	8003950 <nrf24l01p_set_rf_channel>
	nrf24l01p_set_rf_air_data_rate(bps);
 80035dc:	7b7b      	ldrb	r3, [r7, #13]
 80035de:	4618      	mov	r0, r3
 80035e0:	f000 f9e6 	bl	80039b0 <nrf24l01p_set_rf_air_data_rate>
	nrf24l01p_set_rf_tx_output_power(_0dBm);
 80035e4:	2003      	movs	r0, #3
 80035e6:	f000 f9c6 	bl	8003976 <nrf24l01p_set_rf_tx_output_power>

	nrf24l01p_set_crc_length(1);
 80035ea:	2001      	movs	r0, #1
 80035ec:	f000 f939 	bl	8003862 <nrf24l01p_set_crc_length>
	nrf24l01p_set_address_widths(5);
 80035f0:	2005      	movs	r0, #5
 80035f2:	f000 f959 	bl	80038a8 <nrf24l01p_set_address_widths>

	write_register_multi(NRF24L01P_REG_RX_ADDR_P0,address1);
 80035f6:	68b9      	ldr	r1, [r7, #8]
 80035f8:	200a      	movs	r0, #10
 80035fa:	f7ff ff9f 	bl	800353c <write_register_multi>
	write_register_multi(NRF24L01P_REG_TX_ADDR,address2);
 80035fe:	6879      	ldr	r1, [r7, #4]
 8003600:	2010      	movs	r0, #16
 8003602:	f7ff ff9b 	bl	800353c <write_register_multi>

	nrf24l01p_auto_retransmit_count(3);
 8003606:	2003      	movs	r0, #3
 8003608:	f000 f95e 	bl	80038c8 <nrf24l01p_auto_retransmit_count>
	nrf24l01p_auto_retransmit_delay(250);
 800360c:	20fa      	movs	r0, #250	; 0xfa
 800360e:	f000 f977 	bl	8003900 <nrf24l01p_auto_retransmit_delay>

	ce_high();
 8003612:	f7ff ff27 	bl	8003464 <ce_high>
}
 8003616:	bf00      	nop
 8003618:	3710      	adds	r7, #16
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}

0800361e <nrf24l01p_rx_receive>:
	nrf24l01p_auto_retransmit_delay(250);

	ce_high();
}

void nrf24l01p_rx_receive(uint8_t *rx_payload,uint8_t size) {
 800361e:	b580      	push	{r7, lr}
 8003620:	b082      	sub	sp, #8
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
 8003626:	460b      	mov	r3, r1
 8003628:	70fb      	strb	r3, [r7, #3]
	nrf24l01p_read_rx_fifo(rx_payload,size);
 800362a:	78fb      	ldrb	r3, [r7, #3]
 800362c:	4619      	mov	r1, r3
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 f870 	bl	8003714 <nrf24l01p_read_rx_fifo>
	nrf24l01p_clear_rx_dr();
 8003634:	f000 f8ec 	bl	8003810 <nrf24l01p_clear_rx_dr>

	//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
}
 8003638:	bf00      	nop
 800363a:	3708      	adds	r7, #8
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <nrf24l01p_reset>:
		nrf24l01p_clear_max_rt();
	}
}

/* nRF24L01+ Sub Functions */
void nrf24l01p_reset() {
 8003640:	b580      	push	{r7, lr}
 8003642:	af00      	add	r7, sp, #0
	// Reset pins
	cs_high();
 8003644:	f7ff fef6 	bl	8003434 <cs_high>
	ce_low();
 8003648:	f7ff ff18 	bl	800347c <ce_low>

	// Reset registers
	write_register(NRF24L01P_REG_CONFIG, 0x08);
 800364c:	2108      	movs	r1, #8
 800364e:	2000      	movs	r0, #0
 8003650:	f7ff ff46 	bl	80034e0 <write_register>
	write_register(NRF24L01P_REG_EN_AA, 0x3C);
 8003654:	213c      	movs	r1, #60	; 0x3c
 8003656:	2001      	movs	r0, #1
 8003658:	f7ff ff42 	bl	80034e0 <write_register>
	write_register(NRF24L01P_REG_EN_RXADDR, 0x03);
 800365c:	2103      	movs	r1, #3
 800365e:	2002      	movs	r0, #2
 8003660:	f7ff ff3e 	bl	80034e0 <write_register>
	write_register(NRF24L01P_REG_SETUP_AW, 0x03);
 8003664:	2103      	movs	r1, #3
 8003666:	2003      	movs	r0, #3
 8003668:	f7ff ff3a 	bl	80034e0 <write_register>
	write_register(NRF24L01P_REG_SETUP_RETR, 0x03);
 800366c:	2103      	movs	r1, #3
 800366e:	2004      	movs	r0, #4
 8003670:	f7ff ff36 	bl	80034e0 <write_register>
	write_register(NRF24L01P_REG_RF_CH, 0x02);
 8003674:	2102      	movs	r1, #2
 8003676:	2005      	movs	r0, #5
 8003678:	f7ff ff32 	bl	80034e0 <write_register>
	write_register(NRF24L01P_REG_RF_SETUP, 0x07);
 800367c:	2107      	movs	r1, #7
 800367e:	2006      	movs	r0, #6
 8003680:	f7ff ff2e 	bl	80034e0 <write_register>
	write_register(NRF24L01P_REG_STATUS, 0x7E);
 8003684:	217e      	movs	r1, #126	; 0x7e
 8003686:	2007      	movs	r0, #7
 8003688:	f7ff ff2a 	bl	80034e0 <write_register>
	write_register(NRF24L01P_REG_RX_PW_P0, 0x20);
 800368c:	2120      	movs	r1, #32
 800368e:	2011      	movs	r0, #17
 8003690:	f7ff ff26 	bl	80034e0 <write_register>
	write_register(NRF24L01P_REG_RX_PW_P1, 0x20);
 8003694:	2120      	movs	r1, #32
 8003696:	2012      	movs	r0, #18
 8003698:	f7ff ff22 	bl	80034e0 <write_register>
	write_register(NRF24L01P_REG_RX_PW_P2, 0x00);
 800369c:	2100      	movs	r1, #0
 800369e:	2013      	movs	r0, #19
 80036a0:	f7ff ff1e 	bl	80034e0 <write_register>
	write_register(NRF24L01P_REG_RX_PW_P3, 0x00);
 80036a4:	2100      	movs	r1, #0
 80036a6:	2014      	movs	r0, #20
 80036a8:	f7ff ff1a 	bl	80034e0 <write_register>
	write_register(NRF24L01P_REG_RX_PW_P4, 0x00);
 80036ac:	2100      	movs	r1, #0
 80036ae:	2015      	movs	r0, #21
 80036b0:	f7ff ff16 	bl	80034e0 <write_register>
	write_register(NRF24L01P_REG_RX_PW_P5, 0x00);
 80036b4:	2100      	movs	r1, #0
 80036b6:	2016      	movs	r0, #22
 80036b8:	f7ff ff12 	bl	80034e0 <write_register>
	write_register(NRF24L01P_REG_FIFO_STATUS, 0x11);
 80036bc:	2111      	movs	r1, #17
 80036be:	2017      	movs	r0, #23
 80036c0:	f7ff ff0e 	bl	80034e0 <write_register>
	write_register(NRF24L01P_REG_DYNPD, 0x00);
 80036c4:	2100      	movs	r1, #0
 80036c6:	201c      	movs	r0, #28
 80036c8:	f7ff ff0a 	bl	80034e0 <write_register>
	write_register(NRF24L01P_REG_FEATURE, 0x00);
 80036cc:	2100      	movs	r1, #0
 80036ce:	201d      	movs	r0, #29
 80036d0:	f7ff ff06 	bl	80034e0 <write_register>

	// Reset FIFO
	nrf24l01p_flush_rx_fifo();
 80036d4:	f000 f844 	bl	8003760 <nrf24l01p_flush_rx_fifo>
	nrf24l01p_flush_tx_fifo();
 80036d8:	f000 f85a 	bl	8003790 <nrf24l01p_flush_tx_fifo>
}
 80036dc:	bf00      	nop
 80036de:	bd80      	pop	{r7, pc}

080036e0 <nrf24l01p_prx_mode>:

void nrf24l01p_prx_mode() {
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
	ce_low();
 80036e6:	f7ff fec9 	bl	800347c <ce_low>

	uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 80036ea:	2000      	movs	r0, #0
 80036ec:	f7ff fed2 	bl	8003494 <read_register>
 80036f0:	4603      	mov	r3, r0
 80036f2:	71fb      	strb	r3, [r7, #7]
	new_config |= 1 << 0;
 80036f4:	79fb      	ldrb	r3, [r7, #7]
 80036f6:	f043 0301 	orr.w	r3, r3, #1
 80036fa:	71fb      	strb	r3, [r7, #7]

	write_register(NRF24L01P_REG_CONFIG, new_config);
 80036fc:	79fb      	ldrb	r3, [r7, #7]
 80036fe:	4619      	mov	r1, r3
 8003700:	2000      	movs	r0, #0
 8003702:	f7ff feed 	bl	80034e0 <write_register>

	ce_high();
 8003706:	f7ff fead 	bl	8003464 <ce_high>
}
 800370a:	bf00      	nop
 800370c:	3708      	adds	r7, #8
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
	...

08003714 <nrf24l01p_read_rx_fifo>:
	write_register(NRF24L01P_REG_CONFIG, new_config);

	ce_high();
}

uint8_t nrf24l01p_read_rx_fifo(uint8_t *rx_payload,uint8_t size) {
 8003714:	b580      	push	{r7, lr}
 8003716:	b086      	sub	sp, #24
 8003718:	af02      	add	r7, sp, #8
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	460b      	mov	r3, r1
 800371e:	70fb      	strb	r3, [r7, #3]
	uint8_t command = NRF24L01P_CMD_R_RX_PAYLOAD;
 8003720:	2361      	movs	r3, #97	; 0x61
 8003722:	73fb      	strb	r3, [r7, #15]
	uint8_t status;

	cs_low();
 8003724:	f7ff fe92 	bl	800344c <cs_low>
	HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8003728:	f107 020e 	add.w	r2, r7, #14
 800372c:	f107 010f 	add.w	r1, r7, #15
 8003730:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003734:	9300      	str	r3, [sp, #0]
 8003736:	2301      	movs	r3, #1
 8003738:	4808      	ldr	r0, [pc, #32]	; (800375c <nrf24l01p_read_rx_fifo+0x48>)
 800373a:	f7fe fdaa 	bl	8002292 <HAL_SPI_TransmitReceive>
	HAL_SPI_Receive(NRF24L01P_SPI, rx_payload, size, 2000);
 800373e:	78fb      	ldrb	r3, [r7, #3]
 8003740:	b29a      	uxth	r2, r3
 8003742:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003746:	6879      	ldr	r1, [r7, #4]
 8003748:	4804      	ldr	r0, [pc, #16]	; (800375c <nrf24l01p_read_rx_fifo+0x48>)
 800374a:	f7fe fc8a 	bl	8002062 <HAL_SPI_Receive>
	//HAL_SPI_Receive(NRF24L01P_SPI, rx_payload, NRF24L01P_PAYLOAD_LENGTH, 2000);
	cs_high();
 800374e:	f7ff fe71 	bl	8003434 <cs_high>

	return status;
 8003752:	7bbb      	ldrb	r3, [r7, #14]
}
 8003754:	4618      	mov	r0, r3
 8003756:	3710      	adds	r7, #16
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	20000088 	.word	0x20000088

08003760 <nrf24l01p_flush_rx_fifo>:
	cs_high();

	return status;
}

void nrf24l01p_flush_rx_fifo() {
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af02      	add	r7, sp, #8
	uint8_t command = NRF24L01P_CMD_FLUSH_RX;
 8003766:	23e2      	movs	r3, #226	; 0xe2
 8003768:	71fb      	strb	r3, [r7, #7]
	uint8_t status;

	cs_low();
 800376a:	f7ff fe6f 	bl	800344c <cs_low>
	HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 800376e:	1dba      	adds	r2, r7, #6
 8003770:	1df9      	adds	r1, r7, #7
 8003772:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003776:	9300      	str	r3, [sp, #0]
 8003778:	2301      	movs	r3, #1
 800377a:	4804      	ldr	r0, [pc, #16]	; (800378c <nrf24l01p_flush_rx_fifo+0x2c>)
 800377c:	f7fe fd89 	bl	8002292 <HAL_SPI_TransmitReceive>
	cs_high();
 8003780:	f7ff fe58 	bl	8003434 <cs_high>
}
 8003784:	bf00      	nop
 8003786:	3708      	adds	r7, #8
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	20000088 	.word	0x20000088

08003790 <nrf24l01p_flush_tx_fifo>:

void nrf24l01p_flush_tx_fifo() {
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af02      	add	r7, sp, #8
	uint8_t command = NRF24L01P_CMD_FLUSH_TX;
 8003796:	23e1      	movs	r3, #225	; 0xe1
 8003798:	71fb      	strb	r3, [r7, #7]
	uint8_t status;

	cs_low();
 800379a:	f7ff fe57 	bl	800344c <cs_low>
	HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 800379e:	1dba      	adds	r2, r7, #6
 80037a0:	1df9      	adds	r1, r7, #7
 80037a2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80037a6:	9300      	str	r3, [sp, #0]
 80037a8:	2301      	movs	r3, #1
 80037aa:	4804      	ldr	r0, [pc, #16]	; (80037bc <nrf24l01p_flush_tx_fifo+0x2c>)
 80037ac:	f7fe fd71 	bl	8002292 <HAL_SPI_TransmitReceive>
	cs_high();
 80037b0:	f7ff fe40 	bl	8003434 <cs_high>
}
 80037b4:	bf00      	nop
 80037b6:	3708      	adds	r7, #8
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	20000088 	.word	0x20000088

080037c0 <nrf24l01p_get_status>:

uint8_t nrf24l01p_get_status() {
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af02      	add	r7, sp, #8
	uint8_t command = NRF24L01P_CMD_NOP;
 80037c6:	23ff      	movs	r3, #255	; 0xff
 80037c8:	71fb      	strb	r3, [r7, #7]
	uint8_t status;

	cs_low();
 80037ca:	f7ff fe3f 	bl	800344c <cs_low>
	HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 80037ce:	1dba      	adds	r2, r7, #6
 80037d0:	1df9      	adds	r1, r7, #7
 80037d2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80037d6:	9300      	str	r3, [sp, #0]
 80037d8:	2301      	movs	r3, #1
 80037da:	4805      	ldr	r0, [pc, #20]	; (80037f0 <nrf24l01p_get_status+0x30>)
 80037dc:	f7fe fd59 	bl	8002292 <HAL_SPI_TransmitReceive>
	cs_high();
 80037e0:	f7ff fe28 	bl	8003434 <cs_high>

	return status;
 80037e4:	79bb      	ldrb	r3, [r7, #6]
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3708      	adds	r7, #8
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	20000088 	.word	0x20000088

080037f4 <nrf24l01p_rx_set_payload_widths>:

uint8_t nrf24l01p_get_fifo_status() {
	return read_register(NRF24L01P_REG_FIFO_STATUS);
}

void nrf24l01p_rx_set_payload_widths(widths bytes) {
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	4603      	mov	r3, r0
 80037fc:	71fb      	strb	r3, [r7, #7]
	write_register(NRF24L01P_REG_RX_PW_P0, bytes);
 80037fe:	79fb      	ldrb	r3, [r7, #7]
 8003800:	4619      	mov	r1, r3
 8003802:	2011      	movs	r0, #17
 8003804:	f7ff fe6c 	bl	80034e0 <write_register>
}
 8003808:	bf00      	nop
 800380a:	3708      	adds	r7, #8
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <nrf24l01p_clear_rx_dr>:

void nrf24l01p_clear_rx_dr() {
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
	uint8_t new_status = nrf24l01p_get_status();
 8003816:	f7ff ffd3 	bl	80037c0 <nrf24l01p_get_status>
 800381a:	4603      	mov	r3, r0
 800381c:	71fb      	strb	r3, [r7, #7]
	new_status |= 0x40;
 800381e:	79fb      	ldrb	r3, [r7, #7]
 8003820:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003824:	71fb      	strb	r3, [r7, #7]

	write_register(NRF24L01P_REG_STATUS, new_status);
 8003826:	79fb      	ldrb	r3, [r7, #7]
 8003828:	4619      	mov	r1, r3
 800382a:	2007      	movs	r0, #7
 800382c:	f7ff fe58 	bl	80034e0 <write_register>
}
 8003830:	bf00      	nop
 8003832:	3708      	adds	r7, #8
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <nrf24l01p_power_up>:
	new_status |= 0x10;

	write_register(NRF24L01P_REG_STATUS, new_status);
}

void nrf24l01p_power_up() {
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
	uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 800383e:	2000      	movs	r0, #0
 8003840:	f7ff fe28 	bl	8003494 <read_register>
 8003844:	4603      	mov	r3, r0
 8003846:	71fb      	strb	r3, [r7, #7]
	new_config |= 1 << 1;
 8003848:	79fb      	ldrb	r3, [r7, #7]
 800384a:	f043 0302 	orr.w	r3, r3, #2
 800384e:	71fb      	strb	r3, [r7, #7]

	write_register(NRF24L01P_REG_CONFIG, new_config);
 8003850:	79fb      	ldrb	r3, [r7, #7]
 8003852:	4619      	mov	r1, r3
 8003854:	2000      	movs	r0, #0
 8003856:	f7ff fe43 	bl	80034e0 <write_register>
}
 800385a:	bf00      	nop
 800385c:	3708      	adds	r7, #8
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}

08003862 <nrf24l01p_set_crc_length>:
	new_config &= 0xFD;

	write_register(NRF24L01P_REG_CONFIG, new_config);
}

void nrf24l01p_set_crc_length(length bytes) {
 8003862:	b580      	push	{r7, lr}
 8003864:	b084      	sub	sp, #16
 8003866:	af00      	add	r7, sp, #0
 8003868:	4603      	mov	r3, r0
 800386a:	71fb      	strb	r3, [r7, #7]
	uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 800386c:	2000      	movs	r0, #0
 800386e:	f7ff fe11 	bl	8003494 <read_register>
 8003872:	4603      	mov	r3, r0
 8003874:	73fb      	strb	r3, [r7, #15]

	switch (bytes) {
 8003876:	79fb      	ldrb	r3, [r7, #7]
 8003878:	2b01      	cmp	r3, #1
 800387a:	d002      	beq.n	8003882 <nrf24l01p_set_crc_length+0x20>
 800387c:	2b02      	cmp	r3, #2
 800387e:	d005      	beq.n	800388c <nrf24l01p_set_crc_length+0x2a>
 8003880:	e009      	b.n	8003896 <nrf24l01p_set_crc_length+0x34>
	// CRCO bit in CONFIG resiger set 0
	case 1:
		new_config &= 0xFB;
 8003882:	7bfb      	ldrb	r3, [r7, #15]
 8003884:	f023 0304 	bic.w	r3, r3, #4
 8003888:	73fb      	strb	r3, [r7, #15]
		break;
 800388a:	e004      	b.n	8003896 <nrf24l01p_set_crc_length+0x34>
		// CRCO bit in CONFIG resiger set 1
	case 2:
		new_config |= 1 << 2;
 800388c:	7bfb      	ldrb	r3, [r7, #15]
 800388e:	f043 0304 	orr.w	r3, r3, #4
 8003892:	73fb      	strb	r3, [r7, #15]
		break;
 8003894:	bf00      	nop
	}

	write_register(NRF24L01P_REG_CONFIG, new_config);
 8003896:	7bfb      	ldrb	r3, [r7, #15]
 8003898:	4619      	mov	r1, r3
 800389a:	2000      	movs	r0, #0
 800389c:	f7ff fe20 	bl	80034e0 <write_register>
}
 80038a0:	bf00      	nop
 80038a2:	3710      	adds	r7, #16
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <nrf24l01p_set_address_widths>:

void nrf24l01p_set_address_widths(widths bytes) {
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	4603      	mov	r3, r0
 80038b0:	71fb      	strb	r3, [r7, #7]
	write_register(NRF24L01P_REG_SETUP_AW, bytes - 2);
 80038b2:	79fb      	ldrb	r3, [r7, #7]
 80038b4:	3b02      	subs	r3, #2
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	4619      	mov	r1, r3
 80038ba:	2003      	movs	r0, #3
 80038bc:	f7ff fe10 	bl	80034e0 <write_register>
}
 80038c0:	bf00      	nop
 80038c2:	3708      	adds	r7, #8
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <nrf24l01p_auto_retransmit_count>:

void nrf24l01p_auto_retransmit_count(count cnt) {
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	4603      	mov	r3, r0
 80038d0:	71fb      	strb	r3, [r7, #7]
	uint8_t new_setup_retr = read_register(NRF24L01P_REG_SETUP_RETR);
 80038d2:	2004      	movs	r0, #4
 80038d4:	f7ff fdde 	bl	8003494 <read_register>
 80038d8:	4603      	mov	r3, r0
 80038da:	73fb      	strb	r3, [r7, #15]

	// Reset ARC register 0
	new_setup_retr |= 0xF0;
 80038dc:	7bfb      	ldrb	r3, [r7, #15]
 80038de:	f063 030f 	orn	r3, r3, #15
 80038e2:	73fb      	strb	r3, [r7, #15]
	new_setup_retr |= cnt;
 80038e4:	7bfa      	ldrb	r2, [r7, #15]
 80038e6:	79fb      	ldrb	r3, [r7, #7]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	73fb      	strb	r3, [r7, #15]
	write_register(NRF24L01P_REG_SETUP_RETR, new_setup_retr);
 80038ec:	7bfb      	ldrb	r3, [r7, #15]
 80038ee:	4619      	mov	r1, r3
 80038f0:	2004      	movs	r0, #4
 80038f2:	f7ff fdf5 	bl	80034e0 <write_register>
}
 80038f6:	bf00      	nop
 80038f8:	3710      	adds	r7, #16
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
	...

08003900 <nrf24l01p_auto_retransmit_delay>:

void nrf24l01p_auto_retransmit_delay(delay us) {
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	4603      	mov	r3, r0
 8003908:	80fb      	strh	r3, [r7, #6]
	uint8_t new_setup_retr = read_register(NRF24L01P_REG_SETUP_RETR);
 800390a:	2004      	movs	r0, #4
 800390c:	f7ff fdc2 	bl	8003494 <read_register>
 8003910:	4603      	mov	r3, r0
 8003912:	73fb      	strb	r3, [r7, #15]

	// Reset ARD register 0
	new_setup_retr |= 0x0F;
 8003914:	7bfb      	ldrb	r3, [r7, #15]
 8003916:	f043 030f 	orr.w	r3, r3, #15
 800391a:	73fb      	strb	r3, [r7, #15]
	new_setup_retr |= ((us / 250) - 1) << 4;
 800391c:	88fb      	ldrh	r3, [r7, #6]
 800391e:	4a0b      	ldr	r2, [pc, #44]	; (800394c <nrf24l01p_auto_retransmit_delay+0x4c>)
 8003920:	fba2 2303 	umull	r2, r3, r2, r3
 8003924:	091b      	lsrs	r3, r3, #4
 8003926:	b29b      	uxth	r3, r3
 8003928:	3b01      	subs	r3, #1
 800392a:	011b      	lsls	r3, r3, #4
 800392c:	b25a      	sxtb	r2, r3
 800392e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003932:	4313      	orrs	r3, r2
 8003934:	b25b      	sxtb	r3, r3
 8003936:	73fb      	strb	r3, [r7, #15]
	write_register(NRF24L01P_REG_SETUP_RETR, new_setup_retr);
 8003938:	7bfb      	ldrb	r3, [r7, #15]
 800393a:	4619      	mov	r1, r3
 800393c:	2004      	movs	r0, #4
 800393e:	f7ff fdcf 	bl	80034e0 <write_register>
}
 8003942:	bf00      	nop
 8003944:	3710      	adds	r7, #16
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	10624dd3 	.word	0x10624dd3

08003950 <nrf24l01p_set_rf_channel>:

void nrf24l01p_set_rf_channel(channel MHz) {
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	4603      	mov	r3, r0
 8003958:	80fb      	strh	r3, [r7, #6]
	uint16_t new_rf_ch = MHz - 2400;
 800395a:	88fb      	ldrh	r3, [r7, #6]
 800395c:	f5a3 6316 	sub.w	r3, r3, #2400	; 0x960
 8003960:	81fb      	strh	r3, [r7, #14]
	write_register(NRF24L01P_REG_RF_CH, new_rf_ch);
 8003962:	89fb      	ldrh	r3, [r7, #14]
 8003964:	b2db      	uxtb	r3, r3
 8003966:	4619      	mov	r1, r3
 8003968:	2005      	movs	r0, #5
 800396a:	f7ff fdb9 	bl	80034e0 <write_register>
}
 800396e:	bf00      	nop
 8003970:	3710      	adds	r7, #16
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}

08003976 <nrf24l01p_set_rf_tx_output_power>:

void nrf24l01p_set_rf_tx_output_power(output_power dBm) {
 8003976:	b580      	push	{r7, lr}
 8003978:	b084      	sub	sp, #16
 800397a:	af00      	add	r7, sp, #0
 800397c:	4603      	mov	r3, r0
 800397e:	71fb      	strb	r3, [r7, #7]
	uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xF9;
 8003980:	2006      	movs	r0, #6
 8003982:	f7ff fd87 	bl	8003494 <read_register>
 8003986:	4603      	mov	r3, r0
 8003988:	f023 0306 	bic.w	r3, r3, #6
 800398c:	73fb      	strb	r3, [r7, #15]
	new_rf_setup |= (dBm << 1);
 800398e:	79fb      	ldrb	r3, [r7, #7]
 8003990:	005b      	lsls	r3, r3, #1
 8003992:	b25a      	sxtb	r2, r3
 8003994:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003998:	4313      	orrs	r3, r2
 800399a:	b25b      	sxtb	r3, r3
 800399c:	73fb      	strb	r3, [r7, #15]

	write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 800399e:	7bfb      	ldrb	r3, [r7, #15]
 80039a0:	4619      	mov	r1, r3
 80039a2:	2006      	movs	r0, #6
 80039a4:	f7ff fd9c 	bl	80034e0 <write_register>
}
 80039a8:	bf00      	nop
 80039aa:	3710      	adds	r7, #16
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <nrf24l01p_set_rf_air_data_rate>:

void nrf24l01p_set_rf_air_data_rate(air_data_rate bps) {
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	4603      	mov	r3, r0
 80039b8:	71fb      	strb	r3, [r7, #7]
	// Set value to 0
	uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xD7;
 80039ba:	2006      	movs	r0, #6
 80039bc:	f7ff fd6a 	bl	8003494 <read_register>
 80039c0:	4603      	mov	r3, r0
 80039c2:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80039c6:	73fb      	strb	r3, [r7, #15]

	switch (bps) {
 80039c8:	79fb      	ldrb	r3, [r7, #7]
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d00a      	beq.n	80039e4 <nrf24l01p_set_rf_air_data_rate+0x34>
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	dc0e      	bgt.n	80039f0 <nrf24l01p_set_rf_air_data_rate+0x40>
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00b      	beq.n	80039ee <nrf24l01p_set_rf_air_data_rate+0x3e>
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d10a      	bne.n	80039f0 <nrf24l01p_set_rf_air_data_rate+0x40>
	case _1Mbps:
		break;
	case _2Mbps:
		new_rf_setup |= 1 << 3;
 80039da:	7bfb      	ldrb	r3, [r7, #15]
 80039dc:	f043 0308 	orr.w	r3, r3, #8
 80039e0:	73fb      	strb	r3, [r7, #15]
		break;
 80039e2:	e005      	b.n	80039f0 <nrf24l01p_set_rf_air_data_rate+0x40>
	case _250kbps:
		new_rf_setup |= 1 << 5;
 80039e4:	7bfb      	ldrb	r3, [r7, #15]
 80039e6:	f043 0320 	orr.w	r3, r3, #32
 80039ea:	73fb      	strb	r3, [r7, #15]
		break;
 80039ec:	e000      	b.n	80039f0 <nrf24l01p_set_rf_air_data_rate+0x40>
		break;
 80039ee:	bf00      	nop
	}
	write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 80039f0:	7bfb      	ldrb	r3, [r7, #15]
 80039f2:	4619      	mov	r1, r3
 80039f4:	2006      	movs	r0, #6
 80039f6:	f7ff fd73 	bl	80034e0 <write_register>
}
 80039fa:	bf00      	nop
 80039fc:	3710      	adds	r7, #16
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8003a02:	b580      	push	{r7, lr}
 8003a04:	b084      	sub	sp, #16
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	7c1b      	ldrb	r3, [r3, #16]
 8003a10:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a18:	461a      	mov	r2, r3
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	fb02 f303 	mul.w	r3, r2, r3
 8003a20:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	00db      	lsls	r3, r3, #3
 8003a26:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a2c:	68fa      	ldr	r2, [r7, #12]
 8003a2e:	2100      	movs	r1, #0
 8003a30:	4618      	mov	r0, r3
 8003a32:	f001 fd41 	bl	80054b8 <memset>
}
 8003a36:	bf00      	nop
 8003a38:	3710      	adds	r7, #16
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}

08003a3e <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8003a3e:	b580      	push	{r7, lr}
 8003a40:	b086      	sub	sp, #24
 8003a42:	af02      	add	r7, sp, #8
 8003a44:	6078      	str	r0, [r7, #4]
 8003a46:	460b      	mov	r3, r1
 8003a48:	70fb      	strb	r3, [r7, #3]
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	7c1b      	ldrb	r3, [r3, #16]
 8003a54:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8003a56:	78fb      	ldrb	r3, [r7, #3]
 8003a58:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a5e:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8003a60:	7bfb      	ldrb	r3, [r7, #15]
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	89ba      	ldrh	r2, [r7, #12]
 8003a66:	fb02 f303 	mul.w	r3, r2, r3
 8003a6a:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8003a6c:	89bb      	ldrh	r3, [r7, #12]
 8003a6e:	00db      	lsls	r3, r3, #3
 8003a70:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8003a72:	89bb      	ldrh	r3, [r7, #12]
 8003a74:	68ba      	ldr	r2, [r7, #8]
 8003a76:	4413      	add	r3, r2
 8003a78:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8003a7a:	7bf9      	ldrb	r1, [r7, #15]
 8003a7c:	78ba      	ldrb	r2, [r7, #2]
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	9300      	str	r3, [sp, #0]
 8003a82:	460b      	mov	r3, r1
 8003a84:	2100      	movs	r1, #0
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f001 fc28 	bl	80052dc <u8x8_DrawTile>
}
 8003a8c:	bf00      	nop
 8003a8e:	3710      	adds	r7, #16
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003aa6:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003aae:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	7c5b      	ldrb	r3, [r3, #17]
 8003ab6:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8003ab8:	7bba      	ldrb	r2, [r7, #14]
 8003aba:	7bfb      	ldrb	r3, [r7, #15]
 8003abc:	4619      	mov	r1, r3
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f7ff ffbd 	bl	8003a3e <u8g2_send_tile_row>
    src_row++;
 8003ac4:	7bfb      	ldrb	r3, [r7, #15]
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8003aca:	7bbb      	ldrb	r3, [r7, #14]
 8003acc:	3301      	adds	r3, #1
 8003ace:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8003ad0:	7bfa      	ldrb	r2, [r7, #15]
 8003ad2:	7b7b      	ldrb	r3, [r7, #13]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d203      	bcs.n	8003ae0 <u8g2_send_buffer+0x4c>
 8003ad8:	7bba      	ldrb	r2, [r7, #14]
 8003ada:	7b3b      	ldrb	r3, [r7, #12]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d3eb      	bcc.n	8003ab8 <u8g2_send_buffer+0x24>
}
 8003ae0:	bf00      	nop
 8003ae2:	3710      	adds	r7, #16
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <u8g2_SetBufferCurrTileRow>:
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
}

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b082      	sub	sp, #8
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	460b      	mov	r3, r1
 8003af2:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	78fa      	ldrb	r2, [r7, #3]
 8003af8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  u8g2->cb->update_dimension(u8g2);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	4798      	blx	r3
}
 8003b10:	bf00      	nop
 8003b12:	3708      	adds	r7, #8
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d002      	beq.n	8003b30 <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f7ff ff69 	bl	8003a02 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 8003b30:	2100      	movs	r1, #0
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f7ff ffd8 	bl	8003ae8 <u8g2_SetBufferCurrTileRow>
}
 8003b38:	bf00      	nop
 8003b3a:	3708      	adds	r7, #8
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f7ff ffa3 	bl	8003a94 <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003b54:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8003b5c:	7bfb      	ldrb	r3, [r7, #15]
 8003b5e:	4413      	add	r3, r2
 8003b60:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	7c5b      	ldrb	r3, [r3, #17]
 8003b68:	7bfa      	ldrb	r2, [r7, #15]
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d304      	bcc.n	8003b78 <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f001 fc05 	bl	800537e <u8x8_RefreshDisplay>
    return 0;
 8003b74:	2300      	movs	r3, #0
 8003b76:	e00d      	b.n	8003b94 <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d002      	beq.n	8003b88 <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f7ff ff3d 	bl	8003a02 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 8003b88:	7bfb      	ldrb	r3, [r7, #15]
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f7ff ffab 	bl	8003ae8 <u8g2_SetBufferCurrTileRow>
  return 1;
 8003b92:	2301      	movs	r3, #1
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3710      	adds	r7, #16
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <u8g2_m_16_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2208      	movs	r2, #8
 8003ba8:	701a      	strb	r2, [r3, #0]
  return buf;
 8003baa:	4b03      	ldr	r3, [pc, #12]	; (8003bb8 <u8g2_m_16_8_f+0x1c>)
  #endif
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	370c      	adds	r7, #12
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bc80      	pop	{r7}
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop
 8003bb8:	2000029c 	.word	0x2000029c

08003bbc <u8g2_Setup_ssd1306_128x64_noname_f>:
  buf = u8g2_m_16_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 f */
void u8g2_Setup_ssd1306_128x64_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b088      	sub	sp, #32
 8003bc0:	af02      	add	r7, sp, #8
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	607a      	str	r2, [r7, #4]
 8003bc8:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	9300      	str	r3, [sp, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a0b      	ldr	r2, [pc, #44]	; (8003c00 <u8g2_Setup_ssd1306_128x64_noname_f+0x44>)
 8003bd2:	490c      	ldr	r1, [pc, #48]	; (8003c04 <u8g2_Setup_ssd1306_128x64_noname_f+0x48>)
 8003bd4:	68f8      	ldr	r0, [r7, #12]
 8003bd6:	f001 fc31 	bl	800543c <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 8003bda:	f107 0313 	add.w	r3, r7, #19
 8003bde:	4618      	mov	r0, r3
 8003be0:	f7ff ffdc 	bl	8003b9c <u8g2_m_16_8_f>
 8003be4:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8003be6:	7cfa      	ldrb	r2, [r7, #19]
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	9300      	str	r3, [sp, #0]
 8003bec:	4b06      	ldr	r3, [pc, #24]	; (8003c08 <u8g2_Setup_ssd1306_128x64_noname_f+0x4c>)
 8003bee:	6979      	ldr	r1, [r7, #20]
 8003bf0:	68f8      	ldr	r0, [r7, #12]
 8003bf2:	f000 ffbc 	bl	8004b6e <u8g2_SetupBuffer>
}
 8003bf6:	bf00      	nop
 8003bf8:	3718      	adds	r7, #24
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	08005001 	.word	0x08005001
 8003c04:	080051d9 	.word	0x080051d9
 8003c08:	080049f3 	.word	0x080049f3

08003c0c <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	460b      	mov	r3, r1
 8003c16:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8003c18:	78fb      	ldrb	r3, [r7, #3]
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	781b      	ldrb	r3, [r3, #0]
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bc80      	pop	{r7}
 8003c2c:	4770      	bx	lr

08003c2e <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 8003c2e:	b480      	push	{r7}
 8003c30:	b085      	sub	sp, #20
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	6078      	str	r0, [r7, #4]
 8003c36:	460b      	mov	r3, r1
 8003c38:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8003c3a:	78fb      	ldrb	r3, [r7, #3]
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	4413      	add	r3, r2
 8003c40:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	81fb      	strh	r3, [r7, #14]
    font++;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8003c4e:	89fb      	ldrh	r3, [r7, #14]
 8003c50:	021b      	lsls	r3, r3, #8
 8003c52:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	b29a      	uxth	r2, r3
 8003c5a:	89fb      	ldrh	r3, [r7, #14]
 8003c5c:	4413      	add	r3, r2
 8003c5e:	81fb      	strh	r3, [r7, #14]
    return pos;
 8003c60:	89fb      	ldrh	r3, [r7, #14]
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3714      	adds	r7, #20
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bc80      	pop	{r7}
 8003c6a:	4770      	bx	lr

08003c6c <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b082      	sub	sp, #8
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8003c76:	2100      	movs	r1, #0
 8003c78:	6838      	ldr	r0, [r7, #0]
 8003c7a:	f7ff ffc7 	bl	8003c0c <u8g2_font_get_byte>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	461a      	mov	r2, r3
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8003c86:	2101      	movs	r1, #1
 8003c88:	6838      	ldr	r0, [r7, #0]
 8003c8a:	f7ff ffbf 	bl	8003c0c <u8g2_font_get_byte>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	461a      	mov	r2, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8003c96:	2102      	movs	r1, #2
 8003c98:	6838      	ldr	r0, [r7, #0]
 8003c9a:	f7ff ffb7 	bl	8003c0c <u8g2_font_get_byte>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8003ca6:	2103      	movs	r1, #3
 8003ca8:	6838      	ldr	r0, [r7, #0]
 8003caa:	f7ff ffaf 	bl	8003c0c <u8g2_font_get_byte>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8003cb6:	2104      	movs	r1, #4
 8003cb8:	6838      	ldr	r0, [r7, #0]
 8003cba:	f7ff ffa7 	bl	8003c0c <u8g2_font_get_byte>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 8003cc6:	2105      	movs	r1, #5
 8003cc8:	6838      	ldr	r0, [r7, #0]
 8003cca:	f7ff ff9f 	bl	8003c0c <u8g2_font_get_byte>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8003cd6:	2106      	movs	r1, #6
 8003cd8:	6838      	ldr	r0, [r7, #0]
 8003cda:	f7ff ff97 	bl	8003c0c <u8g2_font_get_byte>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8003ce6:	2107      	movs	r1, #7
 8003ce8:	6838      	ldr	r0, [r7, #0]
 8003cea:	f7ff ff8f 	bl	8003c0c <u8g2_font_get_byte>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 8003cf6:	2108      	movs	r1, #8
 8003cf8:	6838      	ldr	r0, [r7, #0]
 8003cfa:	f7ff ff87 	bl	8003c0c <u8g2_font_get_byte>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	461a      	mov	r2, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 8003d06:	2109      	movs	r1, #9
 8003d08:	6838      	ldr	r0, [r7, #0]
 8003d0a:	f7ff ff7f 	bl	8003c0c <u8g2_font_get_byte>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	b25a      	sxtb	r2, r3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8003d16:	210a      	movs	r1, #10
 8003d18:	6838      	ldr	r0, [r7, #0]
 8003d1a:	f7ff ff77 	bl	8003c0c <u8g2_font_get_byte>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	b25a      	sxtb	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 8003d26:	210b      	movs	r1, #11
 8003d28:	6838      	ldr	r0, [r7, #0]
 8003d2a:	f7ff ff6f 	bl	8003c0c <u8g2_font_get_byte>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	b25a      	sxtb	r2, r3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 8003d36:	210c      	movs	r1, #12
 8003d38:	6838      	ldr	r0, [r7, #0]
 8003d3a:	f7ff ff67 	bl	8003c0c <u8g2_font_get_byte>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	b25a      	sxtb	r2, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8003d46:	210d      	movs	r1, #13
 8003d48:	6838      	ldr	r0, [r7, #0]
 8003d4a:	f7ff ff5f 	bl	8003c0c <u8g2_font_get_byte>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	b25a      	sxtb	r2, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 8003d56:	210e      	movs	r1, #14
 8003d58:	6838      	ldr	r0, [r7, #0]
 8003d5a:	f7ff ff57 	bl	8003c0c <u8g2_font_get_byte>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	b25a      	sxtb	r2, r3
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8003d66:	210f      	movs	r1, #15
 8003d68:	6838      	ldr	r0, [r7, #0]
 8003d6a:	f7ff ff4f 	bl	8003c0c <u8g2_font_get_byte>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	b25a      	sxtb	r2, r3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 8003d76:	2110      	movs	r1, #16
 8003d78:	6838      	ldr	r0, [r7, #0]
 8003d7a:	f7ff ff47 	bl	8003c0c <u8g2_font_get_byte>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	b25a      	sxtb	r2, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8003d86:	2111      	movs	r1, #17
 8003d88:	6838      	ldr	r0, [r7, #0]
 8003d8a:	f7ff ff50 	bl	8003c2e <u8g2_font_get_word>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	461a      	mov	r2, r3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8003d96:	2113      	movs	r1, #19
 8003d98:	6838      	ldr	r0, [r7, #0]
 8003d9a:	f7ff ff48 	bl	8003c2e <u8g2_font_get_word>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	461a      	mov	r2, r3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 8003da6:	2115      	movs	r1, #21
 8003da8:	6838      	ldr	r0, [r7, #0]
 8003daa:	f7ff ff40 	bl	8003c2e <u8g2_font_get_word>
 8003dae:	4603      	mov	r3, r0
 8003db0:	461a      	mov	r2, r3
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	82da      	strh	r2, [r3, #22]
#endif
}
 8003db6:	bf00      	nop
 8003db8:	3708      	adds	r7, #8
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}

08003dbe <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 8003dbe:	b480      	push	{r7}
 8003dc0:	b085      	sub	sp, #20
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
 8003dc6:	460b      	mov	r3, r1
 8003dc8:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	7b1b      	ldrb	r3, [r3, #12]
 8003dce:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 8003dd8:	7bfa      	ldrb	r2, [r7, #15]
 8003dda:	7b7b      	ldrb	r3, [r7, #13]
 8003ddc:	fa42 f303 	asr.w	r3, r2, r3
 8003de0:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 8003de2:	7b7b      	ldrb	r3, [r7, #13]
 8003de4:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 8003de6:	7bba      	ldrb	r2, [r7, #14]
 8003de8:	78fb      	ldrb	r3, [r7, #3]
 8003dea:	4413      	add	r3, r2
 8003dec:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 8003dee:	7bbb      	ldrb	r3, [r7, #14]
 8003df0:	2b07      	cmp	r3, #7
 8003df2:	d91a      	bls.n	8003e2a <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8003df4:	2308      	movs	r3, #8
 8003df6:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 8003df8:	7b3a      	ldrb	r2, [r7, #12]
 8003dfa:	7b7b      	ldrb	r3, [r7, #13]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	1c5a      	adds	r2, r3, #1
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	461a      	mov	r2, r3
 8003e12:	7b3b      	ldrb	r3, [r7, #12]
 8003e14:	fa02 f303 	lsl.w	r3, r2, r3
 8003e18:	b25a      	sxtb	r2, r3
 8003e1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	b25b      	sxtb	r3, r3
 8003e22:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8003e24:	7bbb      	ldrb	r3, [r7, #14]
 8003e26:	3b08      	subs	r3, #8
 8003e28:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 8003e2a:	78fb      	ldrb	r3, [r7, #3]
 8003e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8003e30:	fa02 f303 	lsl.w	r3, r2, r3
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	43db      	mvns	r3, r3
 8003e38:	b2da      	uxtb	r2, r3
 8003e3a:	7bfb      	ldrb	r3, [r7, #15]
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	7bba      	ldrb	r2, [r7, #14]
 8003e44:	731a      	strb	r2, [r3, #12]
  return val;
 8003e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3714      	adds	r7, #20
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bc80      	pop	{r7}
 8003e50:	4770      	bx	lr

08003e52 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 8003e52:	b580      	push	{r7, lr}
 8003e54:	b084      	sub	sp, #16
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
 8003e5a:	460b      	mov	r3, r1
 8003e5c:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8003e5e:	78fb      	ldrb	r3, [r7, #3]
 8003e60:	4619      	mov	r1, r3
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f7ff ffab 	bl	8003dbe <u8g2_font_decode_get_unsigned_bits>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	73fb      	strb	r3, [r7, #15]
  d = 1;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	73bb      	strb	r3, [r7, #14]
  cnt--;
 8003e70:	78fb      	ldrb	r3, [r7, #3]
 8003e72:	3b01      	subs	r3, #1
 8003e74:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 8003e76:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8003e7a:	78fb      	ldrb	r3, [r7, #3]
 8003e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e80:	73bb      	strb	r3, [r7, #14]
  v -= d;
 8003e82:	7bfa      	ldrb	r2, [r7, #15]
 8003e84:	7bbb      	ldrb	r3, [r7, #14]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	73fb      	strb	r3, [r7, #15]
  return v;
 8003e8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3710      	adds	r7, #16
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 8003e98:	b490      	push	{r4, r7}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	4604      	mov	r4, r0
 8003ea0:	4608      	mov	r0, r1
 8003ea2:	4611      	mov	r1, r2
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	4623      	mov	r3, r4
 8003ea8:	80fb      	strh	r3, [r7, #6]
 8003eaa:	4603      	mov	r3, r0
 8003eac:	717b      	strb	r3, [r7, #5]
 8003eae:	460b      	mov	r3, r1
 8003eb0:	713b      	strb	r3, [r7, #4]
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 8003eb6:	78fb      	ldrb	r3, [r7, #3]
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d014      	beq.n	8003ee6 <u8g2_add_vector_y+0x4e>
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	dc19      	bgt.n	8003ef4 <u8g2_add_vector_y+0x5c>
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d002      	beq.n	8003eca <u8g2_add_vector_y+0x32>
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d007      	beq.n	8003ed8 <u8g2_add_vector_y+0x40>
 8003ec8:	e014      	b.n	8003ef4 <u8g2_add_vector_y+0x5c>
  {
    case 0:
      dy += y;
 8003eca:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8003ece:	b29a      	uxth	r2, r3
 8003ed0:	88fb      	ldrh	r3, [r7, #6]
 8003ed2:	4413      	add	r3, r2
 8003ed4:	80fb      	strh	r3, [r7, #6]
      break;
 8003ed6:	e014      	b.n	8003f02 <u8g2_add_vector_y+0x6a>
    case 1:
      dy += x;
 8003ed8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8003edc:	b29a      	uxth	r2, r3
 8003ede:	88fb      	ldrh	r3, [r7, #6]
 8003ee0:	4413      	add	r3, r2
 8003ee2:	80fb      	strh	r3, [r7, #6]
      break;
 8003ee4:	e00d      	b.n	8003f02 <u8g2_add_vector_y+0x6a>
    case 2:
      dy -= y;
 8003ee6:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	88fa      	ldrh	r2, [r7, #6]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	80fb      	strh	r3, [r7, #6]
      break;
 8003ef2:	e006      	b.n	8003f02 <u8g2_add_vector_y+0x6a>
    default:
      dy -= x;
 8003ef4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	88fa      	ldrh	r2, [r7, #6]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	80fb      	strh	r3, [r7, #6]
      break;      
 8003f00:	bf00      	nop
  }
  return dy;
 8003f02:	88fb      	ldrh	r3, [r7, #6]
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3708      	adds	r7, #8
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bc90      	pop	{r4, r7}
 8003f0c:	4770      	bx	lr

08003f0e <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 8003f0e:	b490      	push	{r4, r7}
 8003f10:	b082      	sub	sp, #8
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	4604      	mov	r4, r0
 8003f16:	4608      	mov	r0, r1
 8003f18:	4611      	mov	r1, r2
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	4623      	mov	r3, r4
 8003f1e:	80fb      	strh	r3, [r7, #6]
 8003f20:	4603      	mov	r3, r0
 8003f22:	717b      	strb	r3, [r7, #5]
 8003f24:	460b      	mov	r3, r1
 8003f26:	713b      	strb	r3, [r7, #4]
 8003f28:	4613      	mov	r3, r2
 8003f2a:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 8003f2c:	78fb      	ldrb	r3, [r7, #3]
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d014      	beq.n	8003f5c <u8g2_add_vector_x+0x4e>
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	dc19      	bgt.n	8003f6a <u8g2_add_vector_x+0x5c>
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d002      	beq.n	8003f40 <u8g2_add_vector_x+0x32>
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d007      	beq.n	8003f4e <u8g2_add_vector_x+0x40>
 8003f3e:	e014      	b.n	8003f6a <u8g2_add_vector_x+0x5c>
  {
    case 0:
      dx += x;
 8003f40:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8003f44:	b29a      	uxth	r2, r3
 8003f46:	88fb      	ldrh	r3, [r7, #6]
 8003f48:	4413      	add	r3, r2
 8003f4a:	80fb      	strh	r3, [r7, #6]
      break;
 8003f4c:	e014      	b.n	8003f78 <u8g2_add_vector_x+0x6a>
    case 1:
      dx -= y;
 8003f4e:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	88fa      	ldrh	r2, [r7, #6]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	80fb      	strh	r3, [r7, #6]
      break;
 8003f5a:	e00d      	b.n	8003f78 <u8g2_add_vector_x+0x6a>
    case 2:
      dx -= x;
 8003f5c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	88fa      	ldrh	r2, [r7, #6]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	80fb      	strh	r3, [r7, #6]
      break;
 8003f68:	e006      	b.n	8003f78 <u8g2_add_vector_x+0x6a>
    default:
      dx += y;
 8003f6a:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8003f6e:	b29a      	uxth	r2, r3
 8003f70:	88fb      	ldrh	r3, [r7, #6]
 8003f72:	4413      	add	r3, r2
 8003f74:	80fb      	strh	r3, [r7, #6]
      break;      
 8003f76:	bf00      	nop
  }
  return dx;
 8003f78:	88fb      	ldrh	r3, [r7, #6]
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3708      	adds	r7, #8
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bc90      	pop	{r4, r7}
 8003f82:	4770      	bx	lr

08003f84 <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b088      	sub	sp, #32
 8003f88:	af02      	add	r7, sp, #8
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	460b      	mov	r3, r1
 8003f8e:	70fb      	strb	r3, [r7, #3]
 8003f90:	4613      	mov	r3, r2
 8003f92:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	3360      	adds	r3, #96	; 0x60
 8003f98:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 8003f9a:	78fb      	ldrb	r3, [r7, #3]
 8003f9c:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8003fa4:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8003fac:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8003fb4:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 8003fb6:	7bfa      	ldrb	r2, [r7, #15]
 8003fb8:	7d7b      	ldrb	r3, [r7, #21]
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8003fbe:	7bfb      	ldrb	r3, [r7, #15]
 8003fc0:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 8003fc2:	7dfa      	ldrb	r2, [r7, #23]
 8003fc4:	7bfb      	ldrb	r3, [r7, #15]
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d201      	bcs.n	8003fce <u8g2_font_decode_len+0x4a>
      current = cnt;
 8003fca:	7dfb      	ldrb	r3, [r7, #23]
 8003fcc:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	889b      	ldrh	r3, [r3, #4]
 8003fd2:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	88db      	ldrh	r3, [r3, #6]
 8003fd8:	817b      	strh	r3, [r7, #10]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8003fda:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8003fde:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	7c1b      	ldrb	r3, [r3, #16]
 8003fe6:	89b8      	ldrh	r0, [r7, #12]
 8003fe8:	f7ff ff91 	bl	8003f0e <u8g2_add_vector_x>
 8003fec:	4603      	mov	r3, r0
 8003fee:	81bb      	strh	r3, [r7, #12]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8003ff0:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8003ff4:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	7c1b      	ldrb	r3, [r3, #16]
 8003ffc:	8978      	ldrh	r0, [r7, #10]
 8003ffe:	f7ff ff4b 	bl	8003e98 <u8g2_add_vector_y>
 8004002:	4603      	mov	r3, r0
 8004004:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 8004006:	78bb      	ldrb	r3, [r7, #2]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d010      	beq.n	800402e <u8g2_font_decode_len+0xaa>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	7b9a      	ldrb	r2, [r3, #14]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 8004016:	7dbb      	ldrb	r3, [r7, #22]
 8004018:	b298      	uxth	r0, r3
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	7c1b      	ldrb	r3, [r3, #16]
 800401e:	897a      	ldrh	r2, [r7, #10]
 8004020:	89b9      	ldrh	r1, [r7, #12]
 8004022:	9300      	str	r3, [sp, #0]
 8004024:	4603      	mov	r3, r0
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 fbfa 	bl	8004820 <u8g2_DrawHVLine>
 800402c:	e013      	b.n	8004056 <u8g2_font_decode_len+0xd2>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	7b5b      	ldrb	r3, [r3, #13]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d10f      	bne.n	8004056 <u8g2_font_decode_len+0xd2>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	7bda      	ldrb	r2, [r3, #15]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 8004040:	7dbb      	ldrb	r3, [r7, #22]
 8004042:	b298      	uxth	r0, r3
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	7c1b      	ldrb	r3, [r3, #16]
 8004048:	897a      	ldrh	r2, [r7, #10]
 800404a:	89b9      	ldrh	r1, [r7, #12]
 800404c:	9300      	str	r3, [sp, #0]
 800404e:	4603      	mov	r3, r0
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f000 fbe5 	bl	8004820 <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8004056:	7dfa      	ldrb	r2, [r7, #23]
 8004058:	7bfb      	ldrb	r3, [r7, #15]
 800405a:	429a      	cmp	r2, r3
 800405c:	d309      	bcc.n	8004072 <u8g2_font_decode_len+0xee>
      break;
    cnt -= rem;
 800405e:	7dfa      	ldrb	r2, [r7, #23]
 8004060:	7bfb      	ldrb	r3, [r7, #15]
 8004062:	1ad3      	subs	r3, r2, r3
 8004064:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8004066:	2300      	movs	r3, #0
 8004068:	757b      	strb	r3, [r7, #21]
    ly++;
 800406a:	7d3b      	ldrb	r3, [r7, #20]
 800406c:	3301      	adds	r3, #1
 800406e:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8004070:	e79d      	b.n	8003fae <u8g2_font_decode_len+0x2a>
      break;
 8004072:	bf00      	nop
  }
  lx += cnt;
 8004074:	7d7a      	ldrb	r2, [r7, #21]
 8004076:	7dfb      	ldrb	r3, [r7, #23]
 8004078:	4413      	add	r3, r2
 800407a:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 800407c:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	721a      	strb	r2, [r3, #8]
  decode->y = ly;  
 8004084:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	725a      	strb	r2, [r3, #9]
}
 800408c:	bf00      	nop
 800408e:	3718      	adds	r7, #24
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}

08004094 <u8g2_font_setup_decode>:
  
}


static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	3360      	adds	r3, #96	; 0x60
 80040a2:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	683a      	ldr	r2, [r7, #0]
 80040a8:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2200      	movs	r2, #0
 80040ae:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 80040b6:	4619      	mov	r1, r3
 80040b8:	68f8      	ldr	r0, [r7, #12]
 80040ba:	f7ff fe80 	bl	8003dbe <u8g2_font_decode_get_unsigned_bits>
 80040be:	4603      	mov	r3, r0
 80040c0:	b25a      	sxtb	r2, r3
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 80040cc:	4619      	mov	r1, r3
 80040ce:	68f8      	ldr	r0, [r7, #12]
 80040d0:	f7ff fe75 	bl	8003dbe <u8g2_font_decode_get_unsigned_bits>
 80040d4:	4603      	mov	r3, r0
 80040d6:	b25a      	sxtb	r2, r3
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	7b9b      	ldrb	r3, [r3, #14]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	bf0c      	ite	eq
 80040ee:	2301      	moveq	r3, #1
 80040f0:	2300      	movne	r3, #0
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	461a      	mov	r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	73da      	strb	r2, [r3, #15]
}
 80040fa:	bf00      	nop
 80040fc:	3710      	adds	r7, #16
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
	...

08004104 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b08a      	sub	sp, #40	; 0x28
 8004108:	af02      	add	r7, sp, #8
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	3360      	adds	r3, #96	; 0x60
 8004112:	617b      	str	r3, [r7, #20]
    
  u8g2_font_setup_decode(u8g2, glyph_data);     /* set values in u8g2->font_decode data structure */
 8004114:	6839      	ldr	r1, [r7, #0]
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f7ff ffbc 	bl	8004094 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8004122:	74fb      	strb	r3, [r7, #19]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800412a:	4619      	mov	r1, r3
 800412c:	6978      	ldr	r0, [r7, #20]
 800412e:	f7ff fe90 	bl	8003e52 <u8g2_font_decode_get_signed_bits>
 8004132:	4603      	mov	r3, r0
 8004134:	74bb      	strb	r3, [r7, #18]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 800413c:	4619      	mov	r1, r3
 800413e:	6978      	ldr	r0, [r7, #20]
 8004140:	f7ff fe87 	bl	8003e52 <u8g2_font_decode_get_signed_bits>
 8004144:	4603      	mov	r3, r0
 8004146:	747b      	strb	r3, [r7, #17]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800414e:	4619      	mov	r1, r3
 8004150:	6978      	ldr	r0, [r7, #20]
 8004152:	f7ff fe7e 	bl	8003e52 <u8g2_font_decode_get_signed_bits>
 8004156:	4603      	mov	r3, r0
 8004158:	743b      	strb	r3, [r7, #16]
  
  if ( decode->glyph_width > 0 )
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8004160:	2b00      	cmp	r3, #0
 8004162:	f340 80d7 	ble.w	8004314 <u8g2_font_decode_glyph+0x210>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	8898      	ldrh	r0, [r3, #4]
 800416a:	7cfa      	ldrb	r2, [r7, #19]
 800416c:	7c7b      	ldrb	r3, [r7, #17]
 800416e:	4413      	add	r3, r2
 8004170:	b2db      	uxtb	r3, r3
 8004172:	425b      	negs	r3, r3
 8004174:	b2db      	uxtb	r3, r3
 8004176:	b25a      	sxtb	r2, r3
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	7c1b      	ldrb	r3, [r3, #16]
 800417c:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8004180:	f7ff fec5 	bl	8003f0e <u8g2_add_vector_x>
 8004184:	4603      	mov	r3, r0
 8004186:	461a      	mov	r2, r3
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	809a      	strh	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	88d8      	ldrh	r0, [r3, #6]
 8004190:	7cfa      	ldrb	r2, [r7, #19]
 8004192:	7c7b      	ldrb	r3, [r7, #17]
 8004194:	4413      	add	r3, r2
 8004196:	b2db      	uxtb	r3, r3
 8004198:	425b      	negs	r3, r3
 800419a:	b2db      	uxtb	r3, r3
 800419c:	b25a      	sxtb	r2, r3
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	7c1b      	ldrb	r3, [r3, #16]
 80041a2:	f997 1012 	ldrsb.w	r1, [r7, #18]
 80041a6:	f7ff fe77 	bl	8003e98 <u8g2_add_vector_y>
 80041aa:	4603      	mov	r3, r0
 80041ac:	461a      	mov	r2, r3
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	80da      	strh	r2, [r3, #6]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	889b      	ldrh	r3, [r3, #4]
 80041b6:	83fb      	strh	r3, [r7, #30]
      y0 = decode->target_y;
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	88db      	ldrh	r3, [r3, #6]
 80041bc:	837b      	strh	r3, [r7, #26]
      x1 = x0;
 80041be:	8bfb      	ldrh	r3, [r7, #30]
 80041c0:	83bb      	strh	r3, [r7, #28]
      y1 = y0;
 80041c2:	8b7b      	ldrh	r3, [r7, #26]
 80041c4:	833b      	strh	r3, [r7, #24]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	7c1b      	ldrb	r3, [r3, #16]
 80041ca:	2b03      	cmp	r3, #3
 80041cc:	d85a      	bhi.n	8004284 <u8g2_font_decode_glyph+0x180>
 80041ce:	a201      	add	r2, pc, #4	; (adr r2, 80041d4 <u8g2_font_decode_glyph+0xd0>)
 80041d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041d4:	080041e5 	.word	0x080041e5
 80041d8:	08004201 	.word	0x08004201
 80041dc:	08004229 	.word	0x08004229
 80041e0:	0800425d 	.word	0x0800425d
      {
	case 0:
	    x1 += decode->glyph_width;
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80041ea:	b29a      	uxth	r2, r3
 80041ec:	8bbb      	ldrh	r3, [r7, #28]
 80041ee:	4413      	add	r3, r2
 80041f0:	83bb      	strh	r3, [r7, #28]
	    y1 += h;
 80041f2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80041f6:	b29a      	uxth	r2, r3
 80041f8:	8b3b      	ldrh	r3, [r7, #24]
 80041fa:	4413      	add	r3, r2
 80041fc:	833b      	strh	r3, [r7, #24]
	    break;
 80041fe:	e041      	b.n	8004284 <u8g2_font_decode_glyph+0x180>
	case 1:
	    x0 -= h;
 8004200:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004204:	b29b      	uxth	r3, r3
 8004206:	8bfa      	ldrh	r2, [r7, #30]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800420c:	8bfb      	ldrh	r3, [r7, #30]
 800420e:	3301      	adds	r3, #1
 8004210:	83fb      	strh	r3, [r7, #30]
	    x1++;
 8004212:	8bbb      	ldrh	r3, [r7, #28]
 8004214:	3301      	adds	r3, #1
 8004216:	83bb      	strh	r3, [r7, #28]
	    y1 += decode->glyph_width;
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800421e:	b29a      	uxth	r2, r3
 8004220:	8b3b      	ldrh	r3, [r7, #24]
 8004222:	4413      	add	r3, r2
 8004224:	833b      	strh	r3, [r7, #24]
	    break;
 8004226:	e02d      	b.n	8004284 <u8g2_font_decode_glyph+0x180>
	case 2:
	    x0 -= decode->glyph_width;
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800422e:	b29b      	uxth	r3, r3
 8004230:	8bfa      	ldrh	r2, [r7, #30]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8004236:	8bfb      	ldrh	r3, [r7, #30]
 8004238:	3301      	adds	r3, #1
 800423a:	83fb      	strh	r3, [r7, #30]
	    x1++;
 800423c:	8bbb      	ldrh	r3, [r7, #28]
 800423e:	3301      	adds	r3, #1
 8004240:	83bb      	strh	r3, [r7, #28]
	    y0 -= h;
 8004242:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004246:	b29b      	uxth	r3, r3
 8004248:	8b7a      	ldrh	r2, [r7, #26]
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800424e:	8b7b      	ldrh	r3, [r7, #26]
 8004250:	3301      	adds	r3, #1
 8004252:	837b      	strh	r3, [r7, #26]
	    y1++;
 8004254:	8b3b      	ldrh	r3, [r7, #24]
 8004256:	3301      	adds	r3, #1
 8004258:	833b      	strh	r3, [r7, #24]
	    break;	  
 800425a:	e013      	b.n	8004284 <u8g2_font_decode_glyph+0x180>
	case 3:
	    x1 += h;
 800425c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004260:	b29a      	uxth	r2, r3
 8004262:	8bbb      	ldrh	r3, [r7, #28]
 8004264:	4413      	add	r3, r2
 8004266:	83bb      	strh	r3, [r7, #28]
	    y0 -= decode->glyph_width;
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800426e:	b29b      	uxth	r3, r3
 8004270:	8b7a      	ldrh	r2, [r7, #26]
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8004276:	8b7b      	ldrh	r3, [r7, #26]
 8004278:	3301      	adds	r3, #1
 800427a:	837b      	strh	r3, [r7, #26]
	    y1++;
 800427c:	8b3b      	ldrh	r3, [r7, #24]
 800427e:	3301      	adds	r3, #1
 8004280:	833b      	strh	r3, [r7, #24]
	    break;	  
 8004282:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8004284:	8bb8      	ldrh	r0, [r7, #28]
 8004286:	8b7a      	ldrh	r2, [r7, #26]
 8004288:	8bf9      	ldrh	r1, [r7, #30]
 800428a:	8b3b      	ldrh	r3, [r7, #24]
 800428c:	9300      	str	r3, [sp, #0]
 800428e:	4603      	mov	r3, r0
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f000 fb83 	bl	800499c <u8g2_IsIntersection>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d102      	bne.n	80042a2 <u8g2_font_decode_glyph+0x19e>
	return d;
 800429c:	f997 3010 	ldrsb.w	r3, [r7, #16]
 80042a0:	e03a      	b.n	8004318 <u8g2_font_decode_glyph+0x214>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	2200      	movs	r2, #0
 80042a6:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	2200      	movs	r2, #0
 80042ac:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 80042b4:	4619      	mov	r1, r3
 80042b6:	6978      	ldr	r0, [r7, #20]
 80042b8:	f7ff fd81 	bl	8003dbe <u8g2_font_decode_get_unsigned_bits>
 80042bc:	4603      	mov	r3, r0
 80042be:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 80042c6:	4619      	mov	r1, r3
 80042c8:	6978      	ldr	r0, [r7, #20]
 80042ca:	f7ff fd78 	bl	8003dbe <u8g2_font_decode_get_unsigned_bits>
 80042ce:	4603      	mov	r3, r0
 80042d0:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 80042d2:	7bfb      	ldrb	r3, [r7, #15]
 80042d4:	2200      	movs	r2, #0
 80042d6:	4619      	mov	r1, r3
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f7ff fe53 	bl	8003f84 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 80042de:	7bbb      	ldrb	r3, [r7, #14]
 80042e0:	2201      	movs	r2, #1
 80042e2:	4619      	mov	r1, r3
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f7ff fe4d 	bl	8003f84 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 80042ea:	2101      	movs	r1, #1
 80042ec:	6978      	ldr	r0, [r7, #20]
 80042ee:	f7ff fd66 	bl	8003dbe <u8g2_font_decode_get_unsigned_bits>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d1ec      	bne.n	80042d2 <u8g2_font_decode_glyph+0x1ce>

      if ( decode->y >= h )
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80042fe:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8004302:	429a      	cmp	r2, r3
 8004304:	dd00      	ble.n	8004308 <u8g2_font_decode_glyph+0x204>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8004306:	e7d2      	b.n	80042ae <u8g2_font_decode_glyph+0x1aa>
	break;
 8004308:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	7b9a      	ldrb	r2, [r3, #14]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  }
  return d;
 8004314:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 8004318:	4618      	mov	r0, r3
 800431a:	3720      	adds	r7, #32
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}

08004320 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b086      	sub	sp, #24
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	460b      	mov	r3, r1
 800432a:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004330:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	3317      	adds	r3, #23
 8004336:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 8004338:	887b      	ldrh	r3, [r7, #2]
 800433a:	2bff      	cmp	r3, #255	; 0xff
 800433c:	d82a      	bhi.n	8004394 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 800433e:	887b      	ldrh	r3, [r7, #2]
 8004340:	2b60      	cmp	r3, #96	; 0x60
 8004342:	d907      	bls.n	8004354 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800434a:	461a      	mov	r2, r3
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	4413      	add	r3, r2
 8004350:	617b      	str	r3, [r7, #20]
 8004352:	e009      	b.n	8004368 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8004354:	887b      	ldrh	r3, [r7, #2]
 8004356:	2b40      	cmp	r3, #64	; 0x40
 8004358:	d906      	bls.n	8004368 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8004360:	461a      	mov	r2, r3
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	4413      	add	r3, r2
 8004366:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	3301      	adds	r3, #1
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d04e      	beq.n	8004410 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	b29b      	uxth	r3, r3
 8004378:	887a      	ldrh	r2, [r7, #2]
 800437a:	429a      	cmp	r2, r3
 800437c:	d102      	bne.n	8004384 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	3302      	adds	r3, #2
 8004382:	e049      	b.n	8004418 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	3301      	adds	r3, #1
 8004388:	781b      	ldrb	r3, [r3, #0]
 800438a:	461a      	mov	r2, r3
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	4413      	add	r3, r2
 8004390:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8004392:	e7e9      	b.n	8004368 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 800439a:	461a      	mov	r2, r3
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	4413      	add	r3, r2
 80043a0:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 80043a6:	2100      	movs	r1, #0
 80043a8:	6938      	ldr	r0, [r7, #16]
 80043aa:	f7ff fc40 	bl	8003c2e <u8g2_font_get_word>
 80043ae:	4603      	mov	r3, r0
 80043b0:	461a      	mov	r2, r3
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	4413      	add	r3, r2
 80043b6:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 80043b8:	2102      	movs	r1, #2
 80043ba:	6938      	ldr	r0, [r7, #16]
 80043bc:	f7ff fc37 	bl	8003c2e <u8g2_font_get_word>
 80043c0:	4603      	mov	r3, r0
 80043c2:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	3304      	adds	r3, #4
 80043c8:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 80043ca:	89fa      	ldrh	r2, [r7, #14]
 80043cc:	887b      	ldrh	r3, [r7, #2]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d3e9      	bcc.n	80043a6 <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 80043d8:	89fb      	ldrh	r3, [r7, #14]
 80043da:	021b      	lsls	r3, r3, #8
 80043dc:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	3301      	adds	r3, #1
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	b29a      	uxth	r2, r3
 80043e6:	89fb      	ldrh	r3, [r7, #14]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 80043ec:	89fb      	ldrh	r3, [r7, #14]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d010      	beq.n	8004414 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 80043f2:	89fa      	ldrh	r2, [r7, #14]
 80043f4:	887b      	ldrh	r3, [r7, #2]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d102      	bne.n	8004400 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	3303      	adds	r3, #3
 80043fe:	e00b      	b.n	8004418 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	3302      	adds	r3, #2
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	461a      	mov	r2, r3
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	4413      	add	r3, r2
 800440c:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 800440e:	e7e0      	b.n	80043d2 <u8g2_font_get_glyph_data+0xb2>
	break;
 8004410:	bf00      	nop
 8004412:	e000      	b.n	8004416 <u8g2_font_get_glyph_data+0xf6>
	break;
 8004414:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 8004416:	2300      	movs	r3, #0
}
 8004418:	4618      	mov	r0, r3
 800441a:	3718      	adds	r7, #24
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}

08004420 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b086      	sub	sp, #24
 8004424:	af00      	add	r7, sp, #0
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	4608      	mov	r0, r1
 800442a:	4611      	mov	r1, r2
 800442c:	461a      	mov	r2, r3
 800442e:	4603      	mov	r3, r0
 8004430:	817b      	strh	r3, [r7, #10]
 8004432:	460b      	mov	r3, r1
 8004434:	813b      	strh	r3, [r7, #8]
 8004436:	4613      	mov	r3, r2
 8004438:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t dx = 0;
 800443a:	2300      	movs	r3, #0
 800443c:	82fb      	strh	r3, [r7, #22]
  u8g2->font_decode.target_x = x;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	897a      	ldrh	r2, [r7, #10]
 8004442:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  u8g2->font_decode.target_y = y;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	893a      	ldrh	r2, [r7, #8]
 800444a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 800444e:	88fb      	ldrh	r3, [r7, #6]
 8004450:	4619      	mov	r1, r3
 8004452:	68f8      	ldr	r0, [r7, #12]
 8004454:	f7ff ff64 	bl	8004320 <u8g2_font_get_glyph_data>
 8004458:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d005      	beq.n	800446c <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8004460:	6939      	ldr	r1, [r7, #16]
 8004462:	68f8      	ldr	r0, [r7, #12]
 8004464:	f7ff fe4e 	bl	8004104 <u8g2_font_decode_glyph>
 8004468:	4603      	mov	r3, r0
 800446a:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 800446c:	8afb      	ldrh	r3, [r7, #22]
}
 800446e:	4618      	mov	r0, r3
 8004470:	3718      	adds	r7, #24
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
	...

08004478 <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b084      	sub	sp, #16
 800447c:	af00      	add	r7, sp, #0
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	4608      	mov	r0, r1
 8004482:	4611      	mov	r1, r2
 8004484:	461a      	mov	r2, r3
 8004486:	4603      	mov	r3, r0
 8004488:	817b      	strh	r3, [r7, #10]
 800448a:	460b      	mov	r3, r1
 800448c:	813b      	strh	r3, [r7, #8]
 800448e:	4613      	mov	r3, r2
 8004490:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004498:	2b03      	cmp	r3, #3
 800449a:	d833      	bhi.n	8004504 <u8g2_DrawGlyph+0x8c>
 800449c:	a201      	add	r2, pc, #4	; (adr r2, 80044a4 <u8g2_DrawGlyph+0x2c>)
 800449e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a2:	bf00      	nop
 80044a4:	080044b5 	.word	0x080044b5
 80044a8:	080044c9 	.word	0x080044c9
 80044ac:	080044dd 	.word	0x080044dd
 80044b0:	080044f1 	.word	0x080044f1
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044b8:	68f8      	ldr	r0, [r7, #12]
 80044ba:	4798      	blx	r3
 80044bc:	4603      	mov	r3, r0
 80044be:	461a      	mov	r2, r3
 80044c0:	893b      	ldrh	r3, [r7, #8]
 80044c2:	4413      	add	r3, r2
 80044c4:	813b      	strh	r3, [r7, #8]
      break;
 80044c6:	e01d      	b.n	8004504 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044cc:	68f8      	ldr	r0, [r7, #12]
 80044ce:	4798      	blx	r3
 80044d0:	4603      	mov	r3, r0
 80044d2:	461a      	mov	r2, r3
 80044d4:	897b      	ldrh	r3, [r7, #10]
 80044d6:	1a9b      	subs	r3, r3, r2
 80044d8:	817b      	strh	r3, [r7, #10]
      break;
 80044da:	e013      	b.n	8004504 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044e0:	68f8      	ldr	r0, [r7, #12]
 80044e2:	4798      	blx	r3
 80044e4:	4603      	mov	r3, r0
 80044e6:	461a      	mov	r2, r3
 80044e8:	893b      	ldrh	r3, [r7, #8]
 80044ea:	1a9b      	subs	r3, r3, r2
 80044ec:	813b      	strh	r3, [r7, #8]
      break;
 80044ee:	e009      	b.n	8004504 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044f4:	68f8      	ldr	r0, [r7, #12]
 80044f6:	4798      	blx	r3
 80044f8:	4603      	mov	r3, r0
 80044fa:	461a      	mov	r2, r3
 80044fc:	897b      	ldrh	r3, [r7, #10]
 80044fe:	4413      	add	r3, r2
 8004500:	817b      	strh	r3, [r7, #10]
      break;
 8004502:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8004504:	88fb      	ldrh	r3, [r7, #6]
 8004506:	893a      	ldrh	r2, [r7, #8]
 8004508:	8979      	ldrh	r1, [r7, #10]
 800450a:	68f8      	ldr	r0, [r7, #12]
 800450c:	f7ff ff88 	bl	8004420 <u8g2_font_draw_glyph>
 8004510:	4603      	mov	r3, r0
}
 8004512:	4618      	mov	r0, r3
 8004514:	3710      	adds	r7, #16
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop

0800451c <u8g2_draw_string>:
  return u8g2_font_2x_draw_glyph(u8g2, x, y, encoding);
}

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b086      	sub	sp, #24
 8004520:	af00      	add	r7, sp, #0
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	607b      	str	r3, [r7, #4]
 8004526:	460b      	mov	r3, r1
 8004528:	817b      	strh	r3, [r7, #10]
 800452a:	4613      	mov	r3, r2
 800452c:	813b      	strh	r3, [r7, #8]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 800452e:	68f8      	ldr	r0, [r7, #12]
 8004530:	f000 fc63 	bl	8004dfa <u8x8_utf8_init>
  sum = 0;
 8004534:	2300      	movs	r3, #0
 8004536:	82fb      	strh	r3, [r7, #22]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	7812      	ldrb	r2, [r2, #0]
 8004540:	4611      	mov	r1, r2
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	4798      	blx	r3
 8004546:	4603      	mov	r3, r0
 8004548:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 800454a:	8abb      	ldrh	r3, [r7, #20]
 800454c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004550:	4293      	cmp	r3, r2
 8004552:	d038      	beq.n	80045c6 <u8g2_draw_string+0xaa>
      break;
    str++;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	3301      	adds	r3, #1
 8004558:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 800455a:	8abb      	ldrh	r3, [r7, #20]
 800455c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004560:	4293      	cmp	r3, r2
 8004562:	d0e9      	beq.n	8004538 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8004564:	8abb      	ldrh	r3, [r7, #20]
 8004566:	893a      	ldrh	r2, [r7, #8]
 8004568:	8979      	ldrh	r1, [r7, #10]
 800456a:	68f8      	ldr	r0, [r7, #12]
 800456c:	f7ff ff84 	bl	8004478 <u8g2_DrawGlyph>
 8004570:	4603      	mov	r3, r0
 8004572:	827b      	strh	r3, [r7, #18]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800457a:	2b03      	cmp	r3, #3
 800457c:	d81e      	bhi.n	80045bc <u8g2_draw_string+0xa0>
 800457e:	a201      	add	r2, pc, #4	; (adr r2, 8004584 <u8g2_draw_string+0x68>)
 8004580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004584:	08004595 	.word	0x08004595
 8004588:	0800459f 	.word	0x0800459f
 800458c:	080045a9 	.word	0x080045a9
 8004590:	080045b3 	.word	0x080045b3
      {
	case 0:
	  x += delta;
 8004594:	897a      	ldrh	r2, [r7, #10]
 8004596:	8a7b      	ldrh	r3, [r7, #18]
 8004598:	4413      	add	r3, r2
 800459a:	817b      	strh	r3, [r7, #10]
	  break;
 800459c:	e00e      	b.n	80045bc <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 800459e:	893a      	ldrh	r2, [r7, #8]
 80045a0:	8a7b      	ldrh	r3, [r7, #18]
 80045a2:	4413      	add	r3, r2
 80045a4:	813b      	strh	r3, [r7, #8]
	  break;
 80045a6:	e009      	b.n	80045bc <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 80045a8:	897a      	ldrh	r2, [r7, #10]
 80045aa:	8a7b      	ldrh	r3, [r7, #18]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	817b      	strh	r3, [r7, #10]
	  break;
 80045b0:	e004      	b.n	80045bc <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 80045b2:	893a      	ldrh	r2, [r7, #8]
 80045b4:	8a7b      	ldrh	r3, [r7, #18]
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	813b      	strh	r3, [r7, #8]
	  break;
 80045ba:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 80045bc:	8afa      	ldrh	r2, [r7, #22]
 80045be:	8a7b      	ldrh	r3, [r7, #18]
 80045c0:	4413      	add	r3, r2
 80045c2:	82fb      	strh	r3, [r7, #22]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80045c4:	e7b8      	b.n	8004538 <u8g2_draw_string+0x1c>
      break;
 80045c6:	bf00      	nop
    }
  }
  return sum;
 80045c8:	8afb      	ldrh	r3, [r7, #22]
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3718      	adds	r7, #24
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop

080045d4 <u8g2_DrawStr>:
  }
  return sum;
}

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	607b      	str	r3, [r7, #4]
 80045de:	460b      	mov	r3, r1
 80045e0:	817b      	strh	r3, [r7, #10]
 80045e2:	4613      	mov	r3, r2
 80045e4:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	4a06      	ldr	r2, [pc, #24]	; (8004604 <u8g2_DrawStr+0x30>)
 80045ea:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 80045ec:	893a      	ldrh	r2, [r7, #8]
 80045ee:	8979      	ldrh	r1, [r7, #10]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	68f8      	ldr	r0, [r7, #12]
 80045f4:	f7ff ff92 	bl	800451c <u8g2_draw_string>
 80045f8:	4603      	mov	r3, r0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3710      	adds	r7, #16
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	08004e15 	.word	0x08004e15

08004608 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004614:	2b00      	cmp	r3, #0
 8004616:	d05d      	beq.n	80046d4 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f993 2081 	ldrsb.w	r2, [r3, #129]	; 0x81
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f993 2082 	ldrsb.w	r2, [r3, #130]	; 0x82
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8004636:	2b00      	cmp	r3, #0
 8004638:	d04d      	beq.n	80046d6 <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8004640:	2b01      	cmp	r3, #1
 8004642:	d11c      	bne.n	800467e <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f993 208e 	ldrsb.w	r2, [r3, #142]	; 0x8e
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f993 3083 	ldrsb.w	r3, [r3, #131]	; 0x83
 8004650:	429a      	cmp	r2, r3
 8004652:	da05      	bge.n	8004660 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f993 3084 	ldrsb.w	r3, [r3, #132]	; 0x84
 800466c:	429a      	cmp	r2, r3
 800466e:	dd32      	ble.n	80046d6 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f993 2084 	ldrsb.w	r2, [r3, #132]	; 0x84
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 800467c:	e02b      	b.n	80046d6 <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 8004684:	461a      	mov	r2, r3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 800468c:	4619      	mov	r1, r3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8004694:	440b      	add	r3, r1
 8004696:	429a      	cmp	r2, r3
 8004698:	da0d      	bge.n	80046b6 <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 80046a0:	b2da      	uxtb	r2, r3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	4413      	add	r3, r2
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	b25a      	sxtb	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 80046c2:	429a      	cmp	r2, r3
 80046c4:	dd07      	ble.n	80046d6 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f993 2080 	ldrsb.w	r2, [r3, #128]	; 0x80
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 80046d2:	e000      	b.n	80046d6 <u8g2_UpdateRefHeight+0xce>
    return;
 80046d4:	bf00      	nop
  }  
}
 80046d6:	370c      	adds	r7, #12
 80046d8:	46bd      	mov	sp, r7
 80046da:	bc80      	pop	{r7}
 80046dc:	4770      	bx	lr

080046de <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 80046de:	b480      	push	{r7}
 80046e0:	b083      	sub	sp, #12
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
  return 0;
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	370c      	adds	r7, #12
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bc80      	pop	{r7}
 80046f0:	4770      	bx	lr
	...

080046f4 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	4a03      	ldr	r2, [pc, #12]	; (800470c <u8g2_SetFontPosBaseline+0x18>)
 8004700:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004702:	bf00      	nop
 8004704:	370c      	adds	r7, #12
 8004706:	46bd      	mov	sp, r7
 8004708:	bc80      	pop	{r7}
 800470a:	4770      	bx	lr
 800470c:	080046df 	.word	0x080046df

08004710 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b082      	sub	sp, #8
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800471e:	683a      	ldr	r2, [r7, #0]
 8004720:	429a      	cmp	r2, r3
 8004722:	d00b      	beq.n	800473c <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	683a      	ldr	r2, [r7, #0]
 8004728:	659a      	str	r2, [r3, #88]	; 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	3374      	adds	r3, #116	; 0x74
 800472e:	6839      	ldr	r1, [r7, #0]
 8004730:	4618      	mov	r0, r3
 8004732:	f7ff fa9b 	bl	8003c6c <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f7ff ff66 	bl	8004608 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 800473c:	bf00      	nop
 800473e:	3708      	adds	r7, #8
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}

08004744 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 8004744:	b480      	push	{r7}
 8004746:	b087      	sub	sp, #28
 8004748:	af00      	add	r7, sp, #0
 800474a:	60f8      	str	r0, [r7, #12]
 800474c:	60b9      	str	r1, [r7, #8]
 800474e:	4611      	mov	r1, r2
 8004750:	461a      	mov	r2, r3
 8004752:	460b      	mov	r3, r1
 8004754:	80fb      	strh	r3, [r7, #6]
 8004756:	4613      	mov	r3, r2
 8004758:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	881b      	ldrh	r3, [r3, #0]
 800475e:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 8004760:	8afb      	ldrh	r3, [r7, #22]
 8004762:	82bb      	strh	r3, [r7, #20]
  b += *len;
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	881a      	ldrh	r2, [r3, #0]
 8004768:	8abb      	ldrh	r3, [r7, #20]
 800476a:	4413      	add	r3, r2
 800476c:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 800476e:	8afa      	ldrh	r2, [r7, #22]
 8004770:	8abb      	ldrh	r3, [r7, #20]
 8004772:	429a      	cmp	r2, r3
 8004774:	d90b      	bls.n	800478e <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 8004776:	8afa      	ldrh	r2, [r7, #22]
 8004778:	88bb      	ldrh	r3, [r7, #4]
 800477a:	429a      	cmp	r2, r3
 800477c:	d205      	bcs.n	800478a <u8g2_clip_intersection2+0x46>
    {
      b = d;
 800477e:	88bb      	ldrh	r3, [r7, #4]
 8004780:	82bb      	strh	r3, [r7, #20]
      b--;
 8004782:	8abb      	ldrh	r3, [r7, #20]
 8004784:	3b01      	subs	r3, #1
 8004786:	82bb      	strh	r3, [r7, #20]
 8004788:	e001      	b.n	800478e <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 800478a:	88fb      	ldrh	r3, [r7, #6]
 800478c:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 800478e:	8afa      	ldrh	r2, [r7, #22]
 8004790:	88bb      	ldrh	r3, [r7, #4]
 8004792:	429a      	cmp	r2, r3
 8004794:	d301      	bcc.n	800479a <u8g2_clip_intersection2+0x56>
    return 0;
 8004796:	2300      	movs	r3, #0
 8004798:	e01c      	b.n	80047d4 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 800479a:	8aba      	ldrh	r2, [r7, #20]
 800479c:	88fb      	ldrh	r3, [r7, #6]
 800479e:	429a      	cmp	r2, r3
 80047a0:	d801      	bhi.n	80047a6 <u8g2_clip_intersection2+0x62>
    return 0;
 80047a2:	2300      	movs	r3, #0
 80047a4:	e016      	b.n	80047d4 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 80047a6:	8afa      	ldrh	r2, [r7, #22]
 80047a8:	88fb      	ldrh	r3, [r7, #6]
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d201      	bcs.n	80047b2 <u8g2_clip_intersection2+0x6e>
    a = c;
 80047ae:	88fb      	ldrh	r3, [r7, #6]
 80047b0:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 80047b2:	8aba      	ldrh	r2, [r7, #20]
 80047b4:	88bb      	ldrh	r3, [r7, #4]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d901      	bls.n	80047be <u8g2_clip_intersection2+0x7a>
    b = d;
 80047ba:	88bb      	ldrh	r3, [r7, #4]
 80047bc:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	8afa      	ldrh	r2, [r7, #22]
 80047c2:	801a      	strh	r2, [r3, #0]
  b -= a;
 80047c4:	8aba      	ldrh	r2, [r7, #20]
 80047c6:	8afb      	ldrh	r3, [r7, #22]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	82bb      	strh	r3, [r7, #20]
  *len = b;
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	8aba      	ldrh	r2, [r7, #20]
 80047d0:	801a      	strh	r2, [r3, #0]
  return 1;
 80047d2:	2301      	movs	r3, #1
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	371c      	adds	r7, #28
 80047d8:	46bd      	mov	sp, r7
 80047da:	bc80      	pop	{r7}
 80047dc:	4770      	bx	lr

080047de <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80047de:	b590      	push	{r4, r7, lr}
 80047e0:	b087      	sub	sp, #28
 80047e2:	af02      	add	r7, sp, #8
 80047e4:	60f8      	str	r0, [r7, #12]
 80047e6:	4608      	mov	r0, r1
 80047e8:	4611      	mov	r1, r2
 80047ea:	461a      	mov	r2, r3
 80047ec:	4603      	mov	r3, r0
 80047ee:	817b      	strh	r3, [r7, #10]
 80047f0:	460b      	mov	r3, r1
 80047f2:	813b      	strh	r3, [r7, #8]
 80047f4:	4613      	mov	r3, r2
 80047f6:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047fc:	893a      	ldrh	r2, [r7, #8]
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8004806:	88f8      	ldrh	r0, [r7, #6]
 8004808:	893a      	ldrh	r2, [r7, #8]
 800480a:	8979      	ldrh	r1, [r7, #10]
 800480c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004810:	9300      	str	r3, [sp, #0]
 8004812:	4603      	mov	r3, r0
 8004814:	68f8      	ldr	r0, [r7, #12]
 8004816:	47a0      	blx	r4
}
 8004818:	bf00      	nop
 800481a:	3714      	adds	r7, #20
 800481c:	46bd      	mov	sp, r7
 800481e:	bd90      	pop	{r4, r7, pc}

08004820 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8004820:	b590      	push	{r4, r7, lr}
 8004822:	b087      	sub	sp, #28
 8004824:	af02      	add	r7, sp, #8
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	4608      	mov	r0, r1
 800482a:	4611      	mov	r1, r2
 800482c:	461a      	mov	r2, r3
 800482e:	4603      	mov	r3, r0
 8004830:	817b      	strh	r3, [r7, #10]
 8004832:	460b      	mov	r3, r1
 8004834:	813b      	strh	r3, [r7, #8]
 8004836:	4613      	mov	r3, r2
 8004838:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8004840:	2b00      	cmp	r3, #0
 8004842:	d075      	beq.n	8004930 <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8004844:	88fb      	ldrh	r3, [r7, #6]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d072      	beq.n	8004930 <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 800484a:	88fb      	ldrh	r3, [r7, #6]
 800484c:	2b01      	cmp	r3, #1
 800484e:	d91a      	bls.n	8004886 <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 8004850:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004854:	2b02      	cmp	r3, #2
 8004856:	d109      	bne.n	800486c <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 8004858:	897a      	ldrh	r2, [r7, #10]
 800485a:	88fb      	ldrh	r3, [r7, #6]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	b29b      	uxth	r3, r3
 8004860:	817b      	strh	r3, [r7, #10]
	  x++;
 8004862:	897b      	ldrh	r3, [r7, #10]
 8004864:	3301      	adds	r3, #1
 8004866:	b29b      	uxth	r3, r3
 8004868:	817b      	strh	r3, [r7, #10]
 800486a:	e00c      	b.n	8004886 <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 800486c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004870:	2b03      	cmp	r3, #3
 8004872:	d108      	bne.n	8004886 <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 8004874:	893a      	ldrh	r2, [r7, #8]
 8004876:	88fb      	ldrh	r3, [r7, #6]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	b29b      	uxth	r3, r3
 800487c:	813b      	strh	r3, [r7, #8]
	  y++;
 800487e:	893b      	ldrh	r3, [r7, #8]
 8004880:	3301      	adds	r3, #1
 8004882:	b29b      	uxth	r3, r3
 8004884:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 8004886:	f897 3020 	ldrb.w	r3, [r7, #32]
 800488a:	f003 0301 	and.w	r3, r3, #1
 800488e:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 8004892:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d11a      	bne.n	80048d0 <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 80048a0:	893b      	ldrh	r3, [r7, #8]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d83b      	bhi.n	800491e <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 80048ac:	893b      	ldrh	r3, [r7, #8]
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d937      	bls.n	8004922 <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80048be:	1db9      	adds	r1, r7, #6
 80048c0:	f107 000a 	add.w	r0, r7, #10
 80048c4:	f7ff ff3e 	bl	8004744 <u8g2_clip_intersection2>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d11a      	bne.n	8004904 <u8g2_DrawHVLine+0xe4>
	  return;
 80048ce:	e02f      	b.n	8004930 <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80048d6:	897b      	ldrh	r3, [r7, #10]
 80048d8:	429a      	cmp	r2, r3
 80048da:	d824      	bhi.n	8004926 <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80048e2:	897b      	ldrh	r3, [r7, #10]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d920      	bls.n	800492a <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 80048f4:	1db9      	adds	r1, r7, #6
 80048f6:	f107 0008 	add.w	r0, r7, #8
 80048fa:	f7ff ff23 	bl	8004744 <u8g2_clip_intersection2>
 80048fe:	4603      	mov	r3, r0
 8004900:	2b00      	cmp	r3, #0
 8004902:	d014      	beq.n	800492e <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004908:	689c      	ldr	r4, [r3, #8]
 800490a:	8979      	ldrh	r1, [r7, #10]
 800490c:	893a      	ldrh	r2, [r7, #8]
 800490e:	88f8      	ldrh	r0, [r7, #6]
 8004910:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004914:	9300      	str	r3, [sp, #0]
 8004916:	4603      	mov	r3, r0
 8004918:	68f8      	ldr	r0, [r7, #12]
 800491a:	47a0      	blx	r4
 800491c:	e008      	b.n	8004930 <u8g2_DrawHVLine+0x110>
	  return;
 800491e:	bf00      	nop
 8004920:	e006      	b.n	8004930 <u8g2_DrawHVLine+0x110>
	  return;
 8004922:	bf00      	nop
 8004924:	e004      	b.n	8004930 <u8g2_DrawHVLine+0x110>
	  return;
 8004926:	bf00      	nop
 8004928:	e002      	b.n	8004930 <u8g2_DrawHVLine+0x110>
	  return;
 800492a:	bf00      	nop
 800492c:	e000      	b.n	8004930 <u8g2_DrawHVLine+0x110>
	  return;
 800492e:	bf00      	nop
    }
}
 8004930:	3714      	adds	r7, #20
 8004932:	46bd      	mov	sp, r7
 8004934:	bd90      	pop	{r4, r7, pc}

08004936 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8004936:	b490      	push	{r4, r7}
 8004938:	b082      	sub	sp, #8
 800493a:	af00      	add	r7, sp, #0
 800493c:	4604      	mov	r4, r0
 800493e:	4608      	mov	r0, r1
 8004940:	4611      	mov	r1, r2
 8004942:	461a      	mov	r2, r3
 8004944:	4623      	mov	r3, r4
 8004946:	80fb      	strh	r3, [r7, #6]
 8004948:	4603      	mov	r3, r0
 800494a:	80bb      	strh	r3, [r7, #4]
 800494c:	460b      	mov	r3, r1
 800494e:	807b      	strh	r3, [r7, #2]
 8004950:	4613      	mov	r3, r2
 8004952:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 8004954:	887a      	ldrh	r2, [r7, #2]
 8004956:	88bb      	ldrh	r3, [r7, #4]
 8004958:	429a      	cmp	r2, r3
 800495a:	d20d      	bcs.n	8004978 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 800495c:	883a      	ldrh	r2, [r7, #0]
 800495e:	88fb      	ldrh	r3, [r7, #6]
 8004960:	429a      	cmp	r2, r3
 8004962:	d901      	bls.n	8004968 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8004964:	2301      	movs	r3, #1
 8004966:	e014      	b.n	8004992 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8004968:	887a      	ldrh	r2, [r7, #2]
 800496a:	883b      	ldrh	r3, [r7, #0]
 800496c:	429a      	cmp	r2, r3
 800496e:	d901      	bls.n	8004974 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8004970:	2301      	movs	r3, #1
 8004972:	e00e      	b.n	8004992 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8004974:	2300      	movs	r3, #0
 8004976:	e00c      	b.n	8004992 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8004978:	883a      	ldrh	r2, [r7, #0]
 800497a:	88fb      	ldrh	r3, [r7, #6]
 800497c:	429a      	cmp	r2, r3
 800497e:	d907      	bls.n	8004990 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8004980:	887a      	ldrh	r2, [r7, #2]
 8004982:	883b      	ldrh	r3, [r7, #0]
 8004984:	429a      	cmp	r2, r3
 8004986:	d901      	bls.n	800498c <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8004988:	2301      	movs	r3, #1
 800498a:	e002      	b.n	8004992 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 800498c:	2300      	movs	r3, #0
 800498e:	e000      	b.n	8004992 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8004990:	2300      	movs	r3, #0
    }
  }
}
 8004992:	4618      	mov	r0, r3
 8004994:	3708      	adds	r7, #8
 8004996:	46bd      	mov	sp, r7
 8004998:	bc90      	pop	{r4, r7}
 800499a:	4770      	bx	lr

0800499c <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b084      	sub	sp, #16
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	4608      	mov	r0, r1
 80049a6:	4611      	mov	r1, r2
 80049a8:	461a      	mov	r2, r3
 80049aa:	4603      	mov	r3, r0
 80049ac:	817b      	strh	r3, [r7, #10]
 80049ae:	460b      	mov	r3, r1
 80049b0:	813b      	strh	r3, [r7, #8]
 80049b2:	4613      	mov	r3, r2
 80049b4:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f8b3 104e 	ldrh.w	r1, [r3, #78]	; 0x4e
 80049c2:	8b3b      	ldrh	r3, [r7, #24]
 80049c4:	893a      	ldrh	r2, [r7, #8]
 80049c6:	f7ff ffb6 	bl	8004936 <u8g2_is_intersection_decision_tree>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d101      	bne.n	80049d4 <u8g2_IsIntersection+0x38>
    return 0; 
 80049d0:	2300      	movs	r3, #0
 80049d2:	e00a      	b.n	80049ea <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
 80049e0:	88fb      	ldrh	r3, [r7, #6]
 80049e2:	897a      	ldrh	r2, [r7, #10]
 80049e4:	f7ff ffa7 	bl	8004936 <u8g2_is_intersection_decision_tree>
 80049e8:	4603      	mov	r3, r0
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3710      	adds	r7, #16
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}

080049f2 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80049f2:	b480      	push	{r7}
 80049f4:	b089      	sub	sp, #36	; 0x24
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	60f8      	str	r0, [r7, #12]
 80049fa:	4608      	mov	r0, r1
 80049fc:	4611      	mov	r1, r2
 80049fe:	461a      	mov	r2, r3
 8004a00:	4603      	mov	r3, r0
 8004a02:	817b      	strh	r3, [r7, #10]
 8004a04:	460b      	mov	r3, r1
 8004a06:	813b      	strh	r3, [r7, #8]
 8004a08:	4613      	mov	r3, r2
 8004a0a:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8004a0c:	893b      	ldrh	r3, [r7, #8]
 8004a0e:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8004a10:	7efb      	ldrb	r3, [r7, #27]
 8004a12:	f003 0307 	and.w	r3, r3, #7
 8004a16:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 8004a1c:	7e3a      	ldrb	r2, [r7, #24]
 8004a1e:	7efb      	ldrb	r3, [r7, #27]
 8004a20:	fa02 f303 	lsl.w	r3, r2, r3
 8004a24:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 8004a26:	2300      	movs	r3, #0
 8004a28:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d801      	bhi.n	8004a3c <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8004a38:	7e3b      	ldrb	r3, [r7, #24]
 8004a3a:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d001      	beq.n	8004a4a <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8004a46:	7e3b      	ldrb	r3, [r7, #24]
 8004a48:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8004a4a:	893b      	ldrh	r3, [r7, #8]
 8004a4c:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 8004a4e:	8afb      	ldrh	r3, [r7, #22]
 8004a50:	f023 0307 	bic.w	r3, r3, #7
 8004a54:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	7c1b      	ldrb	r3, [r3, #16]
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	8afa      	ldrh	r2, [r7, #22]
 8004a60:	fb02 f303 	mul.w	r3, r2, r3
 8004a64:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a6a:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 8004a6c:	8afb      	ldrh	r3, [r7, #22]
 8004a6e:	69fa      	ldr	r2, [r7, #28]
 8004a70:	4413      	add	r3, r2
 8004a72:	61fb      	str	r3, [r7, #28]
  ptr += x;
 8004a74:	897b      	ldrh	r3, [r7, #10]
 8004a76:	69fa      	ldr	r2, [r7, #28]
 8004a78:	4413      	add	r3, r2
 8004a7a:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 8004a7c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d117      	bne.n	8004ab4 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	781a      	ldrb	r2, [r3, #0]
 8004a88:	7ebb      	ldrb	r3, [r7, #26]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	b2da      	uxtb	r2, r3
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	781a      	ldrb	r2, [r3, #0]
 8004a96:	7e7b      	ldrb	r3, [r7, #25]
 8004a98:	4053      	eors	r3, r2
 8004a9a:	b2da      	uxtb	r2, r3
 8004a9c:	69fb      	ldr	r3, [r7, #28]
 8004a9e:	701a      	strb	r2, [r3, #0]
	ptr++;
 8004aa0:	69fb      	ldr	r3, [r7, #28]
 8004aa2:	3301      	adds	r3, #1
 8004aa4:	61fb      	str	r3, [r7, #28]
	len--;
 8004aa6:	88fb      	ldrh	r3, [r7, #6]
 8004aa8:	3b01      	subs	r3, #1
 8004aaa:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 8004aac:	88fb      	ldrh	r3, [r7, #6]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d1e8      	bne.n	8004a84 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8004ab2:	e038      	b.n	8004b26 <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 8004ab4:	69fb      	ldr	r3, [r7, #28]
 8004ab6:	781a      	ldrb	r2, [r3, #0]
 8004ab8:	7ebb      	ldrb	r3, [r7, #26]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	b2da      	uxtb	r2, r3
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	781a      	ldrb	r2, [r3, #0]
 8004ac6:	7e7b      	ldrb	r3, [r7, #25]
 8004ac8:	4053      	eors	r3, r2
 8004aca:	b2da      	uxtb	r2, r3
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8004ad0:	7efb      	ldrb	r3, [r7, #27]
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 8004ad6:	7efb      	ldrb	r3, [r7, #27]
 8004ad8:	f003 0307 	and.w	r3, r3, #7
 8004adc:	76fb      	strb	r3, [r7, #27]
      len--;
 8004ade:	88fb      	ldrh	r3, [r7, #6]
 8004ae0:	3b01      	subs	r3, #1
 8004ae2:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 8004ae4:	7efb      	ldrb	r3, [r7, #27]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d114      	bne.n	8004b14 <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8004aee:	461a      	mov	r2, r3
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	4413      	add	r3, r2
 8004af4:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d801      	bhi.n	8004b04 <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 8004b00:	2301      	movs	r3, #1
 8004b02:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d008      	beq.n	8004b20 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	767b      	strb	r3, [r7, #25]
 8004b12:	e005      	b.n	8004b20 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 8004b14:	7ebb      	ldrb	r3, [r7, #26]
 8004b16:	005b      	lsls	r3, r3, #1
 8004b18:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 8004b1a:	7e7b      	ldrb	r3, [r7, #25]
 8004b1c:	005b      	lsls	r3, r3, #1
 8004b1e:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 8004b20:	88fb      	ldrh	r3, [r7, #6]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d1c6      	bne.n	8004ab4 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8004b26:	bf00      	nop
 8004b28:	3724      	adds	r7, #36	; 0x24
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bc80      	pop	{r7}
 8004b2e:	4770      	bx	lr

08004b30 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b082      	sub	sp, #8
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  u8g2->clip_y0 = 0;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b4e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b58:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  
  u8g2->cb->update_page_win(u8g2);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	4798      	blx	r3
}
 8004b66:	bf00      	nop
 8004b68:	3708      	adds	r7, #8
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}

08004b6e <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8004b6e:	b580      	push	{r7, lr}
 8004b70:	b084      	sub	sp, #16
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	60f8      	str	r0, [r7, #12]
 8004b76:	60b9      	str	r1, [r7, #8]
 8004b78:	603b      	str	r3, [r7, #0]
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2200      	movs	r2, #0
 8004b82:	659a      	str	r2, [r3, #88]	; 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	683a      	ldr	r2, [r7, #0]
 8004b88:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	68ba      	ldr	r2, [r7, #8]
 8004b8e:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	79fa      	ldrb	r2, [r7, #7]
 8004b94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  u8g2->bitmap_transparency = 0;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  
  u8g2->font_height_mode = 0; /* issue 2046 */
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
  u8g2->draw_color = 1;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  u8g2->is_auto_page_clear = 1;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
  
  u8g2->cb = u8g2_cb;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	69ba      	ldr	r2, [r7, #24]
 8004bcc:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	68f8      	ldr	r0, [r7, #12]
 8004bd6:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8004bd8:	68f8      	ldr	r0, [r7, #12]
 8004bda:	f7ff ffa9 	bl	8004b30 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8004bde:	68f8      	ldr	r0, [r7, #12]
 8004be0:	f7ff fd88 	bl	80046f4 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
#endif
}
 8004bec:	bf00      	nop
 8004bee:	3710      	adds	r7, #16
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b085      	sub	sp, #20
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004c08:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8004c0a:	89fb      	ldrh	r3, [r7, #14]
 8004c0c:	00db      	lsls	r3, r3, #3
 8004c0e:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	89fa      	ldrh	r2, [r7, #14]
 8004c14:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  t = display_info->tile_width;
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	7c1b      	ldrb	r3, [r3, #16]
 8004c1a:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 8004c1c:	89fb      	ldrh	r3, [r7, #14]
 8004c1e:	00db      	lsls	r3, r3, #3
 8004c20:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	89fa      	ldrh	r2, [r7, #14]
 8004c26:	875a      	strh	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004c2e:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8004c30:	89fb      	ldrh	r3, [r7, #14]
 8004c32:	00db      	lsls	r3, r3, #3
 8004c34:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	89fa      	ldrh	r2, [r7, #14]
 8004c3a:	87da      	strh	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_buf_height;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004c42:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8004c44:	89fb      	ldrh	r3, [r7, #14]
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 8004c4c:	4413      	add	r3, r2
 8004c4e:	68ba      	ldr	r2, [r7, #8]
 8004c50:	7c52      	ldrb	r2, [r2, #17]
 8004c52:	4293      	cmp	r3, r2
 8004c54:	dd08      	ble.n	8004c68 <u8g2_update_dimension_common+0x74>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	7c5b      	ldrb	r3, [r3, #17]
 8004c5a:	b29a      	uxth	r2, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8004c68:	89fb      	ldrh	r3, [r7, #14]
 8004c6a:	00db      	lsls	r3, r3, #3
 8004c6c:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8004c8a:	89fb      	ldrh	r3, [r7, #14]
 8004c8c:	4413      	add	r3, r2
 8004c8e:	b29a      	uxth	r2, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	8a9a      	ldrh	r2, [r3, #20]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  u8g2->height = display_info->pixel_height;
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	8ada      	ldrh	r2, [r3, #22]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 8004caa:	bf00      	nop
 8004cac:	3714      	adds	r7, #20
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bc80      	pop	{r7}
 8004cb2:	4770      	bx	lr

08004cb4 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b084      	sub	sp, #16
 8004cb8:	af02      	add	r7, sp, #8
 8004cba:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f8b3 0052 	ldrh.w	r0, [r3, #82]	; 0x52
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004cd4:	9300      	str	r3, [sp, #0]
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f7ff fe5f 	bl	800499c <u8g2_IsIntersection>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d104      	bne.n	8004cee <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 8004cec:	e03b      	b.n	8004d66 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d205      	bcs.n	8004d12 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d905      	bls.n	8004d2e <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d205      	bcs.n	8004d4a <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d905      	bls.n	8004d66 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 8004d66:	bf00      	nop
 8004d68:	3708      	adds	r7, #8
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}

08004d6e <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 8004d6e:	b580      	push	{r7, lr}
 8004d70:	b082      	sub	sp, #8
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f7ff ff3c 	bl	8004bf4 <u8g2_update_dimension_common>
}
 8004d7c:	bf00      	nop
 8004d7e:	3708      	adds	r7, #8
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b082      	sub	sp, #8
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  
  u8g2->user_y0 = u8g2->buf_y0;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  u8g2->user_y1 = u8g2->buf_y1;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f7ff ff7b 	bl	8004cb4 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8004dbe:	bf00      	nop
 8004dc0:	3708      	adds	r7, #8
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}

08004dc6 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8004dc6:	b580      	push	{r7, lr}
 8004dc8:	b086      	sub	sp, #24
 8004dca:	af02      	add	r7, sp, #8
 8004dcc:	60f8      	str	r0, [r7, #12]
 8004dce:	4608      	mov	r0, r1
 8004dd0:	4611      	mov	r1, r2
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	817b      	strh	r3, [r7, #10]
 8004dd8:	460b      	mov	r3, r1
 8004dda:	813b      	strh	r3, [r7, #8]
 8004ddc:	4613      	mov	r3, r2
 8004dde:	80fb      	strh	r3, [r7, #6]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8004de0:	88f8      	ldrh	r0, [r7, #6]
 8004de2:	893a      	ldrh	r2, [r7, #8]
 8004de4:	8979      	ldrh	r1, [r7, #10]
 8004de6:	7e3b      	ldrb	r3, [r7, #24]
 8004de8:	9300      	str	r3, [sp, #0]
 8004dea:	4603      	mov	r3, r0
 8004dec:	68f8      	ldr	r0, [r7, #12]
 8004dee:	f7ff fcf6 	bl	80047de <u8g2_draw_hv_line_2dir>
}
 8004df2:	bf00      	nop
 8004df4:	3710      	adds	r7, #16
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}

08004dfa <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8004dfa:	b480      	push	{r7}
 8004dfc:	b083      	sub	sp, #12
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8004e0a:	bf00      	nop
 8004e0c:	370c      	adds	r7, #12
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bc80      	pop	{r7}
 8004e12:	4770      	bx	lr

08004e14 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	460b      	mov	r3, r1
 8004e1e:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8004e20:	78fb      	ldrb	r3, [r7, #3]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d002      	beq.n	8004e2c <u8x8_ascii_next+0x18>
 8004e26:	78fb      	ldrb	r3, [r7, #3]
 8004e28:	2b0a      	cmp	r3, #10
 8004e2a:	d102      	bne.n	8004e32 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 8004e2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004e30:	e001      	b.n	8004e36 <u8x8_ascii_next+0x22>
  return b;
 8004e32:	78fb      	ldrb	r3, [r7, #3]
 8004e34:	b29b      	uxth	r3, r3
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	370c      	adds	r7, #12
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bc80      	pop	{r7}
 8004e3e:	4770      	bx	lr

08004e40 <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 8004e40:	b590      	push	{r4, r7, lr}
 8004e42:	b083      	sub	sp, #12
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	460b      	mov	r3, r1
 8004e4a:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	691c      	ldr	r4, [r3, #16]
 8004e50:	78fa      	ldrb	r2, [r7, #3]
 8004e52:	2300      	movs	r3, #0
 8004e54:	2120      	movs	r1, #32
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	47a0      	blx	r4
 8004e5a:	4603      	mov	r3, r0
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd90      	pop	{r4, r7, pc}

08004e64 <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8004e64:	b590      	push	{r4, r7, lr}
 8004e66:	b085      	sub	sp, #20
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	460b      	mov	r3, r1
 8004e6e:	607a      	str	r2, [r7, #4]
 8004e70:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	691c      	ldr	r4, [r3, #16]
 8004e76:	7afa      	ldrb	r2, [r7, #11]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2117      	movs	r1, #23
 8004e7c:	68f8      	ldr	r0, [r7, #12]
 8004e7e:	47a0      	blx	r4
 8004e80:	4603      	mov	r3, r0
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3714      	adds	r7, #20
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd90      	pop	{r4, r7, pc}

08004e8a <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8004e8a:	b580      	push	{r7, lr}
 8004e8c:	b082      	sub	sp, #8
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	6078      	str	r0, [r7, #4]
 8004e92:	460b      	mov	r3, r1
 8004e94:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8004e96:	1cfb      	adds	r3, r7, #3
 8004e98:	461a      	mov	r2, r3
 8004e9a:	2101      	movs	r1, #1
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f7ff ffe1 	bl	8004e64 <u8x8_byte_SendBytes>
 8004ea2:	4603      	mov	r3, r0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3708      	adds	r7, #8
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8004eac:	b590      	push	{r4, r7, lr}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	460b      	mov	r3, r1
 8004eb6:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	68dc      	ldr	r4, [r3, #12]
 8004ebc:	78fa      	ldrb	r2, [r7, #3]
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	2115      	movs	r1, #21
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	47a0      	blx	r4
 8004ec6:	4603      	mov	r3, r0
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	370c      	adds	r7, #12
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd90      	pop	{r4, r7, pc}

08004ed0 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8004ed0:	b590      	push	{r4, r7, lr}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	460b      	mov	r3, r1
 8004eda:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	68dc      	ldr	r4, [r3, #12]
 8004ee0:	78fa      	ldrb	r2, [r7, #3]
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	2116      	movs	r1, #22
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	47a0      	blx	r4
 8004eea:	4603      	mov	r3, r0
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	370c      	adds	r7, #12
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd90      	pop	{r4, r7, pc}

08004ef4 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8004ef4:	b590      	push	{r4, r7, lr}
 8004ef6:	b085      	sub	sp, #20
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	460b      	mov	r3, r1
 8004efe:	607a      	str	r2, [r7, #4]
 8004f00:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	68dc      	ldr	r4, [r3, #12]
 8004f06:	7afa      	ldrb	r2, [r7, #11]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2117      	movs	r1, #23
 8004f0c:	68f8      	ldr	r0, [r7, #12]
 8004f0e:	47a0      	blx	r4
 8004f10:	4603      	mov	r3, r0
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3714      	adds	r7, #20
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd90      	pop	{r4, r7, pc}

08004f1a <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8004f1a:	b590      	push	{r4, r7, lr}
 8004f1c:	b083      	sub	sp, #12
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	68dc      	ldr	r4, [r3, #12]
 8004f26:	2300      	movs	r3, #0
 8004f28:	2200      	movs	r2, #0
 8004f2a:	2118      	movs	r1, #24
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	47a0      	blx	r4
 8004f30:	4603      	mov	r3, r0
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	370c      	adds	r7, #12
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd90      	pop	{r4, r7, pc}

08004f3a <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8004f3a:	b590      	push	{r4, r7, lr}
 8004f3c:	b083      	sub	sp, #12
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	68dc      	ldr	r4, [r3, #12]
 8004f46:	2300      	movs	r3, #0
 8004f48:	2200      	movs	r2, #0
 8004f4a:	2119      	movs	r1, #25
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	47a0      	blx	r4
 8004f50:	4603      	mov	r3, r0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	370c      	adds	r7, #12
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd90      	pop	{r4, r7, pc}

08004f5a <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8004f5a:	b590      	push	{r4, r7, lr}
 8004f5c:	b085      	sub	sp, #20
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
 8004f62:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	73fb      	strb	r3, [r7, #15]
    data++;
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	3301      	adds	r3, #1
 8004f6e:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8004f70:	7bfb      	ldrb	r3, [r7, #15]
 8004f72:	2bfe      	cmp	r3, #254	; 0xfe
 8004f74:	d031      	beq.n	8004fda <u8x8_cad_SendSequence+0x80>
 8004f76:	2bfe      	cmp	r3, #254	; 0xfe
 8004f78:	dc3d      	bgt.n	8004ff6 <u8x8_cad_SendSequence+0x9c>
 8004f7a:	2b19      	cmp	r3, #25
 8004f7c:	dc3b      	bgt.n	8004ff6 <u8x8_cad_SendSequence+0x9c>
 8004f7e:	2b18      	cmp	r3, #24
 8004f80:	da23      	bge.n	8004fca <u8x8_cad_SendSequence+0x70>
 8004f82:	2b16      	cmp	r3, #22
 8004f84:	dc02      	bgt.n	8004f8c <u8x8_cad_SendSequence+0x32>
 8004f86:	2b15      	cmp	r3, #21
 8004f88:	da03      	bge.n	8004f92 <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8004f8a:	e034      	b.n	8004ff6 <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 8004f8c:	2b17      	cmp	r3, #23
 8004f8e:	d00e      	beq.n	8004fae <u8x8_cad_SendSequence+0x54>
	return;
 8004f90:	e031      	b.n	8004ff6 <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	781b      	ldrb	r3, [r3, #0]
 8004f96:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	68dc      	ldr	r4, [r3, #12]
 8004f9c:	7bba      	ldrb	r2, [r7, #14]
 8004f9e:	7bf9      	ldrb	r1, [r7, #15]
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	47a0      	blx	r4
	  data++;
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	3301      	adds	r3, #1
 8004faa:	603b      	str	r3, [r7, #0]
	  break;
 8004fac:	e022      	b.n	8004ff4 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	781b      	ldrb	r3, [r3, #0]
 8004fb2:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8004fb4:	f107 030e 	add.w	r3, r7, #14
 8004fb8:	461a      	mov	r2, r3
 8004fba:	2101      	movs	r1, #1
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f7ff ff99 	bl	8004ef4 <u8x8_cad_SendData>
	  data++;
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	3301      	adds	r3, #1
 8004fc6:	603b      	str	r3, [r7, #0]
	  break;
 8004fc8:	e014      	b.n	8004ff4 <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	68dc      	ldr	r4, [r3, #12]
 8004fce:	7bf9      	ldrb	r1, [r7, #15]
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	47a0      	blx	r4
	  break;
 8004fd8:	e00c      	b.n	8004ff4 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8004fe0:	7bbb      	ldrb	r3, [r7, #14]
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	2129      	movs	r1, #41	; 0x29
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f000 f9d8 	bl	800539c <u8x8_gpio_call>
	  data++;
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	3301      	adds	r3, #1
 8004ff0:	603b      	str	r3, [r7, #0]
	  break;
 8004ff2:	bf00      	nop
    cmd = *data;
 8004ff4:	e7b6      	b.n	8004f64 <u8x8_cad_SendSequence+0xa>
	return;
 8004ff6:	bf00      	nop
    }
  }
}
 8004ff8:	3714      	adds	r7, #20
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd90      	pop	{r4, r7, pc}
	...

08005000 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8005000:	b590      	push	{r4, r7, lr}
 8005002:	b085      	sub	sp, #20
 8005004:	af00      	add	r7, sp, #0
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	607b      	str	r3, [r7, #4]
 800500a:	460b      	mov	r3, r1
 800500c:	72fb      	strb	r3, [r7, #11]
 800500e:	4613      	mov	r3, r2
 8005010:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 8005012:	7afb      	ldrb	r3, [r7, #11]
 8005014:	3b14      	subs	r3, #20
 8005016:	2b05      	cmp	r3, #5
 8005018:	d82f      	bhi.n	800507a <u8x8_cad_001+0x7a>
 800501a:	a201      	add	r2, pc, #4	; (adr r2, 8005020 <u8x8_cad_001+0x20>)
 800501c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005020:	08005069 	.word	0x08005069
 8005024:	08005039 	.word	0x08005039
 8005028:	0800504d 	.word	0x0800504d
 800502c:	08005061 	.word	0x08005061
 8005030:	08005069 	.word	0x08005069
 8005034:	08005069 	.word	0x08005069
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 8005038:	2100      	movs	r1, #0
 800503a:	68f8      	ldr	r0, [r7, #12]
 800503c:	f7ff ff00 	bl	8004e40 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8005040:	7abb      	ldrb	r3, [r7, #10]
 8005042:	4619      	mov	r1, r3
 8005044:	68f8      	ldr	r0, [r7, #12]
 8005046:	f7ff ff20 	bl	8004e8a <u8x8_byte_SendByte>
      break;
 800504a:	e018      	b.n	800507e <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 800504c:	2100      	movs	r1, #0
 800504e:	68f8      	ldr	r0, [r7, #12]
 8005050:	f7ff fef6 	bl	8004e40 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8005054:	7abb      	ldrb	r3, [r7, #10]
 8005056:	4619      	mov	r1, r3
 8005058:	68f8      	ldr	r0, [r7, #12]
 800505a:	f7ff ff16 	bl	8004e8a <u8x8_byte_SendByte>
      break;
 800505e:	e00e      	b.n	800507e <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 8005060:	2101      	movs	r1, #1
 8005062:	68f8      	ldr	r0, [r7, #12]
 8005064:	f7ff feec 	bl	8004e40 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	691c      	ldr	r4, [r3, #16]
 800506c:	7aba      	ldrb	r2, [r7, #10]
 800506e:	7af9      	ldrb	r1, [r7, #11]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	68f8      	ldr	r0, [r7, #12]
 8005074:	47a0      	blx	r4
 8005076:	4603      	mov	r3, r0
 8005078:	e002      	b.n	8005080 <u8x8_cad_001+0x80>
    default:
      return 0;
 800507a:	2300      	movs	r3, #0
 800507c:	e000      	b.n	8005080 <u8x8_cad_001+0x80>
  }
  return 1;
 800507e:	2301      	movs	r3, #1
}
 8005080:	4618      	mov	r0, r3
 8005082:	3714      	adds	r7, #20
 8005084:	46bd      	mov	sp, r7
 8005086:	bd90      	pop	{r4, r7, pc}

08005088 <u8x8_d_ssd1306_sh1106_generic>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b086      	sub	sp, #24
 800508c:	af00      	add	r7, sp, #0
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	607b      	str	r3, [r7, #4]
 8005092:	460b      	mov	r3, r1
 8005094:	72fb      	strb	r3, [r7, #11]
 8005096:	4613      	mov	r3, r2
 8005098:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 800509a:	7afb      	ldrb	r3, [r7, #11]
 800509c:	3b0b      	subs	r3, #11
 800509e:	2b04      	cmp	r3, #4
 80050a0:	f200 808a 	bhi.w	80051b8 <u8x8_d_ssd1306_sh1106_generic+0x130>
 80050a4:	a201      	add	r2, pc, #4	; (adr r2, 80050ac <u8x8_d_ssd1306_sh1106_generic+0x24>)
 80050a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050aa:	bf00      	nop
 80050ac:	080050c1 	.word	0x080050c1
 80050b0:	080051b9 	.word	0x080051b9
 80050b4:	080050db 	.word	0x080050db
 80050b8:	0800510d 	.word	0x0800510d
 80050bc:	0800512d 	.word	0x0800512d
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 80050c0:	7abb      	ldrb	r3, [r7, #10]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d104      	bne.n	80050d0 <u8x8_d_ssd1306_sh1106_generic+0x48>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
 80050c6:	4940      	ldr	r1, [pc, #256]	; (80051c8 <u8x8_d_ssd1306_sh1106_generic+0x140>)
 80050c8:	68f8      	ldr	r0, [r7, #12]
 80050ca:	f7ff ff46 	bl	8004f5a <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
      break;
 80050ce:	e075      	b.n	80051bc <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
 80050d0:	493e      	ldr	r1, [pc, #248]	; (80051cc <u8x8_d_ssd1306_sh1106_generic+0x144>)
 80050d2:	68f8      	ldr	r0, [r7, #12]
 80050d4:	f7ff ff41 	bl	8004f5a <u8x8_cad_SendSequence>
      break;
 80050d8:	e070      	b.n	80051bc <u8x8_d_ssd1306_sh1106_generic+0x134>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 80050da:	7abb      	ldrb	r3, [r7, #10]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d10a      	bne.n	80050f6 <u8x8_d_ssd1306_sh1106_generic+0x6e>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
 80050e0:	493b      	ldr	r1, [pc, #236]	; (80051d0 <u8x8_d_ssd1306_sh1106_generic+0x148>)
 80050e2:	68f8      	ldr	r0, [r7, #12]
 80050e4:	f7ff ff39 	bl	8004f5a <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	7c9a      	ldrb	r2, [r3, #18]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 80050f4:	e062      	b.n	80051bc <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
 80050f6:	4937      	ldr	r1, [pc, #220]	; (80051d4 <u8x8_d_ssd1306_sh1106_generic+0x14c>)
 80050f8:	68f8      	ldr	r0, [r7, #12]
 80050fa:	f7ff ff2e 	bl	8004f5a <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	7cda      	ldrb	r2, [r3, #19]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 800510a:	e057      	b.n	80051bc <u8x8_d_ssd1306_sh1106_generic+0x134>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 800510c:	68f8      	ldr	r0, [r7, #12]
 800510e:	f7ff ff04 	bl	8004f1a <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8005112:	2181      	movs	r1, #129	; 0x81
 8005114:	68f8      	ldr	r0, [r7, #12]
 8005116:	f7ff fec9 	bl	8004eac <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
 800511a:	7abb      	ldrb	r3, [r7, #10]
 800511c:	4619      	mov	r1, r3
 800511e:	68f8      	ldr	r0, [r7, #12]
 8005120:	f7ff fed6 	bl	8004ed0 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8005124:	68f8      	ldr	r0, [r7, #12]
 8005126:	f7ff ff08 	bl	8004f3a <u8x8_cad_EndTransfer>
      break;
 800512a:	e047      	b.n	80051bc <u8x8_d_ssd1306_sh1106_generic+0x134>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 800512c:	68f8      	ldr	r0, [r7, #12]
 800512e:	f7ff fef4 	bl	8004f1a <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	795b      	ldrb	r3, [r3, #5]
 8005136:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 8005138:	7dfb      	ldrb	r3, [r7, #23]
 800513a:	00db      	lsls	r3, r3, #3
 800513c:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8005144:	7dfb      	ldrb	r3, [r7, #23]
 8005146:	4413      	add	r3, r2
 8005148:	75fb      	strb	r3, [r7, #23]
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 800514a:	2140      	movs	r1, #64	; 0x40
 800514c:	68f8      	ldr	r0, [r7, #12]
 800514e:	f7ff fead 	bl	8004eac <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8005152:	7dfb      	ldrb	r3, [r7, #23]
 8005154:	091b      	lsrs	r3, r3, #4
 8005156:	b2db      	uxtb	r3, r3
 8005158:	f043 0310 	orr.w	r3, r3, #16
 800515c:	b2db      	uxtb	r3, r3
 800515e:	4619      	mov	r1, r3
 8005160:	68f8      	ldr	r0, [r7, #12]
 8005162:	f7ff fea3 	bl	8004eac <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
 8005166:	7dfb      	ldrb	r3, [r7, #23]
 8005168:	f003 030f 	and.w	r3, r3, #15
 800516c:	b2db      	uxtb	r3, r3
 800516e:	4619      	mov	r1, r3
 8005170:	68f8      	ldr	r0, [r7, #12]
 8005172:	f7ff fead 	bl	8004ed0 <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	799b      	ldrb	r3, [r3, #6]
 800517a:	f063 034f 	orn	r3, r3, #79	; 0x4f
 800517e:	b2db      	uxtb	r3, r3
 8005180:	4619      	mov	r1, r3
 8005182:	68f8      	ldr	r0, [r7, #12]
 8005184:	f7ff fea4 	bl	8004ed0 <u8x8_cad_SendArg>

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	791b      	ldrb	r3, [r3, #4]
 800518c:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 8005194:	7dbb      	ldrb	r3, [r7, #22]
 8005196:	00db      	lsls	r3, r3, #3
 8005198:	b2db      	uxtb	r3, r3
 800519a:	693a      	ldr	r2, [r7, #16]
 800519c:	4619      	mov	r1, r3
 800519e:	68f8      	ldr	r0, [r7, #12]
 80051a0:	f7ff fea8 	bl	8004ef4 <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 80051a4:	7abb      	ldrb	r3, [r7, #10]
 80051a6:	3b01      	subs	r3, #1
 80051a8:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 80051aa:	7abb      	ldrb	r3, [r7, #10]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d1eb      	bne.n	8005188 <u8x8_d_ssd1306_sh1106_generic+0x100>
      
      u8x8_cad_EndTransfer(u8x8);
 80051b0:	68f8      	ldr	r0, [r7, #12]
 80051b2:	f7ff fec2 	bl	8004f3a <u8x8_cad_EndTransfer>
      break;
 80051b6:	e001      	b.n	80051bc <u8x8_d_ssd1306_sh1106_generic+0x134>
    default:
      return 0;
 80051b8:	2300      	movs	r3, #0
 80051ba:	e000      	b.n	80051be <u8x8_d_ssd1306_sh1106_generic+0x136>
  }
  return 1;
 80051bc:	2301      	movs	r3, #1
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3718      	adds	r7, #24
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
 80051c6:	bf00      	nop
 80051c8:	08006838 	.word	0x08006838
 80051cc:	08006840 	.word	0x08006840
 80051d0:	08006848 	.word	0x08006848
 80051d4:	08006850 	.word	0x08006850

080051d8 <u8x8_d_ssd1306_128x64_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b084      	sub	sp, #16
 80051dc:	af00      	add	r7, sp, #0
 80051de:	60f8      	str	r0, [r7, #12]
 80051e0:	607b      	str	r3, [r7, #4]
 80051e2:	460b      	mov	r3, r1
 80051e4:	72fb      	strb	r3, [r7, #11]
 80051e6:	4613      	mov	r3, r2
 80051e8:	72bb      	strb	r3, [r7, #10]
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 80051ea:	7aba      	ldrb	r2, [r7, #10]
 80051ec:	7af9      	ldrb	r1, [r7, #11]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	68f8      	ldr	r0, [r7, #12]
 80051f2:	f7ff ff49 	bl	8005088 <u8x8_d_ssd1306_sh1106_generic>
 80051f6:	4603      	mov	r3, r0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d001      	beq.n	8005200 <u8x8_d_ssd1306_128x64_noname+0x28>
    return 1;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e014      	b.n	800522a <u8x8_d_ssd1306_128x64_noname+0x52>
  
  switch(msg)
 8005200:	7afb      	ldrb	r3, [r7, #11]
 8005202:	2b09      	cmp	r3, #9
 8005204:	d009      	beq.n	800521a <u8x8_d_ssd1306_128x64_noname+0x42>
 8005206:	2b0a      	cmp	r3, #10
 8005208:	d10c      	bne.n	8005224 <u8x8_d_ssd1306_128x64_noname+0x4c>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 800520a:	68f8      	ldr	r0, [r7, #12]
 800520c:	f000 f829 	bl	8005262 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
 8005210:	4908      	ldr	r1, [pc, #32]	; (8005234 <u8x8_d_ssd1306_128x64_noname+0x5c>)
 8005212:	68f8      	ldr	r0, [r7, #12]
 8005214:	f7ff fea1 	bl	8004f5a <u8x8_cad_SendSequence>
      break;
 8005218:	e006      	b.n	8005228 <u8x8_d_ssd1306_128x64_noname+0x50>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
 800521a:	4907      	ldr	r1, [pc, #28]	; (8005238 <u8x8_d_ssd1306_128x64_noname+0x60>)
 800521c:	68f8      	ldr	r0, [r7, #12]
 800521e:	f000 f80d 	bl	800523c <u8x8_d_helper_display_setup_memory>
      break;
 8005222:	e001      	b.n	8005228 <u8x8_d_ssd1306_128x64_noname+0x50>
    default:
      return 0;
 8005224:	2300      	movs	r3, #0
 8005226:	e000      	b.n	800522a <u8x8_d_ssd1306_128x64_noname+0x52>
  }
  return 1;
 8005228:	2301      	movs	r3, #1
}
 800522a:	4618      	mov	r0, r3
 800522c:	3710      	adds	r7, #16
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	08006800 	.word	0x08006800
 8005238:	08006858 	.word	0x08006858

0800523c <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 800523c:	b480      	push	{r7}
 800523e:	b083      	sub	sp, #12
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	683a      	ldr	r2, [r7, #0]
 800524a:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	7c9a      	ldrb	r2, [r3, #18]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8005258:	bf00      	nop
 800525a:	370c      	adds	r7, #12
 800525c:	46bd      	mov	sp, r7
 800525e:	bc80      	pop	{r7}
 8005260:	4770      	bx	lr

08005262 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8005262:	b590      	push	{r4, r7, lr}
 8005264:	b083      	sub	sp, #12
 8005266:	af00      	add	r7, sp, #0
 8005268:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	695c      	ldr	r4, [r3, #20]
 800526e:	2300      	movs	r3, #0
 8005270:	2200      	movs	r2, #0
 8005272:	2128      	movs	r1, #40	; 0x28
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	68dc      	ldr	r4, [r3, #12]
 800527c:	2300      	movs	r3, #0
 800527e:	2200      	movs	r2, #0
 8005280:	2114      	movs	r1, #20
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8005286:	2201      	movs	r2, #1
 8005288:	214b      	movs	r1, #75	; 0x4b
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f000 f886 	bl	800539c <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	791b      	ldrb	r3, [r3, #4]
 8005296:	461a      	mov	r2, r3
 8005298:	2129      	movs	r1, #41	; 0x29
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f000 f87e 	bl	800539c <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 80052a0:	2200      	movs	r2, #0
 80052a2:	214b      	movs	r1, #75	; 0x4b
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f000 f879 	bl	800539c <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	791b      	ldrb	r3, [r3, #4]
 80052b0:	461a      	mov	r2, r3
 80052b2:	2129      	movs	r1, #41	; 0x29
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f000 f871 	bl	800539c <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 80052ba:	2201      	movs	r2, #1
 80052bc:	214b      	movs	r1, #75	; 0x4b
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f000 f86c 	bl	800539c <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	795b      	ldrb	r3, [r3, #5]
 80052ca:	461a      	mov	r2, r3
 80052cc:	2129      	movs	r1, #41	; 0x29
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 f864 	bl	800539c <u8x8_gpio_call>
}    
 80052d4:	bf00      	nop
 80052d6:	370c      	adds	r7, #12
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd90      	pop	{r4, r7, pc}

080052dc <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 80052dc:	b590      	push	{r4, r7, lr}
 80052de:	b085      	sub	sp, #20
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	4608      	mov	r0, r1
 80052e6:	4611      	mov	r1, r2
 80052e8:	461a      	mov	r2, r3
 80052ea:	4603      	mov	r3, r0
 80052ec:	70fb      	strb	r3, [r7, #3]
 80052ee:	460b      	mov	r3, r1
 80052f0:	70bb      	strb	r3, [r7, #2]
 80052f2:	4613      	mov	r3, r2
 80052f4:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 80052f6:	78fb      	ldrb	r3, [r7, #3]
 80052f8:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 80052fa:	78bb      	ldrb	r3, [r7, #2]
 80052fc:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 80052fe:	787b      	ldrb	r3, [r7, #1]
 8005300:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8005302:	6a3b      	ldr	r3, [r7, #32]
 8005304:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	689c      	ldr	r4, [r3, #8]
 800530a:	f107 0308 	add.w	r3, r7, #8
 800530e:	2201      	movs	r2, #1
 8005310:	210f      	movs	r1, #15
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	47a0      	blx	r4
 8005316:	4603      	mov	r3, r0
}
 8005318:	4618      	mov	r0, r3
 800531a:	3714      	adds	r7, #20
 800531c:	46bd      	mov	sp, r7
 800531e:	bd90      	pop	{r4, r7, pc}

08005320 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8005320:	b590      	push	{r4, r7, lr}
 8005322:	b083      	sub	sp, #12
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	689c      	ldr	r4, [r3, #8]
 800532c:	2300      	movs	r3, #0
 800532e:	2200      	movs	r2, #0
 8005330:	2109      	movs	r1, #9
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	47a0      	blx	r4
}
 8005336:	bf00      	nop
 8005338:	370c      	adds	r7, #12
 800533a:	46bd      	mov	sp, r7
 800533c:	bd90      	pop	{r4, r7, pc}

0800533e <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 800533e:	b590      	push	{r4, r7, lr}
 8005340:	b083      	sub	sp, #12
 8005342:	af00      	add	r7, sp, #0
 8005344:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	689c      	ldr	r4, [r3, #8]
 800534a:	2300      	movs	r3, #0
 800534c:	2200      	movs	r2, #0
 800534e:	210a      	movs	r1, #10
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	47a0      	blx	r4
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}
 8005354:	bf00      	nop
 8005356:	370c      	adds	r7, #12
 8005358:	46bd      	mov	sp, r7
 800535a:	bd90      	pop	{r4, r7, pc}

0800535c <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 800535c:	b590      	push	{r4, r7, lr}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	460b      	mov	r3, r1
 8005366:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	689c      	ldr	r4, [r3, #8]
 800536c:	78fa      	ldrb	r2, [r7, #3]
 800536e:	2300      	movs	r3, #0
 8005370:	210b      	movs	r1, #11
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	47a0      	blx	r4
}
 8005376:	bf00      	nop
 8005378:	370c      	adds	r7, #12
 800537a:	46bd      	mov	sp, r7
 800537c:	bd90      	pop	{r4, r7, pc}

0800537e <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 800537e:	b590      	push	{r4, r7, lr}
 8005380:	b083      	sub	sp, #12
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	689c      	ldr	r4, [r3, #8]
 800538a:	2300      	movs	r3, #0
 800538c:	2200      	movs	r2, #0
 800538e:	2110      	movs	r1, #16
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	47a0      	blx	r4
}
 8005394:	bf00      	nop
 8005396:	370c      	adds	r7, #12
 8005398:	46bd      	mov	sp, r7
 800539a:	bd90      	pop	{r4, r7, pc}

0800539c <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 800539c:	b590      	push	{r4, r7, lr}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	460b      	mov	r3, r1
 80053a6:	70fb      	strb	r3, [r7, #3]
 80053a8:	4613      	mov	r3, r2
 80053aa:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	695c      	ldr	r4, [r3, #20]
 80053b0:	78ba      	ldrb	r2, [r7, #2]
 80053b2:	78f9      	ldrb	r1, [r7, #3]
 80053b4:	2300      	movs	r3, #0
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	47a0      	blx	r4
}
 80053ba:	bf00      	nop
 80053bc:	370c      	adds	r7, #12
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd90      	pop	{r4, r7, pc}

080053c2 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 80053c2:	b480      	push	{r7}
 80053c4:	b085      	sub	sp, #20
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	60f8      	str	r0, [r7, #12]
 80053ca:	607b      	str	r3, [r7, #4]
 80053cc:	460b      	mov	r3, r1
 80053ce:	72fb      	strb	r3, [r7, #11]
 80053d0:	4613      	mov	r3, r2
 80053d2:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3714      	adds	r7, #20
 80053da:	46bd      	mov	sp, r7
 80053dc:	bc80      	pop	{r7}
 80053de:	4770      	bx	lr

080053e0 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b083      	sub	sp, #12
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a11      	ldr	r2, [pc, #68]	; (8005438 <u8x8_SetupDefaults+0x58>)
 80053f2:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	4a10      	ldr	r2, [pc, #64]	; (8005438 <u8x8_SetupDefaults+0x58>)
 80053f8:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4a0e      	ldr	r2, [pc, #56]	; (8005438 <u8x8_SetupDefaults+0x58>)
 80053fe:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	4a0d      	ldr	r2, [pc, #52]	; (8005438 <u8x8_SetupDefaults+0x58>)
 8005404:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	22ff      	movs	r2, #255	; 0xff
 8005420:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	22ff      	movs	r2, #255	; 0xff
 8005428:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 800542c:	bf00      	nop
 800542e:	370c      	adds	r7, #12
 8005430:	46bd      	mov	sp, r7
 8005432:	bc80      	pop	{r7}
 8005434:	4770      	bx	lr
 8005436:	bf00      	nop
 8005438:	080053c3 	.word	0x080053c3

0800543c <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b084      	sub	sp, #16
 8005440:	af00      	add	r7, sp, #0
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	607a      	str	r2, [r7, #4]
 8005448:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 800544a:	68f8      	ldr	r0, [r7, #12]
 800544c:	f7ff ffc8 	bl	80053e0 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	68ba      	ldr	r2, [r7, #8]
 8005454:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	683a      	ldr	r2, [r7, #0]
 8005460:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	69ba      	ldr	r2, [r7, #24]
 8005466:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8005468:	68f8      	ldr	r0, [r7, #12]
 800546a:	f7ff ff59 	bl	8005320 <u8x8_SetupMemory>
}
 800546e:	bf00      	nop
 8005470:	3710      	adds	r7, #16
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
	...

08005478 <siprintf>:
 8005478:	b40e      	push	{r1, r2, r3}
 800547a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800547e:	b500      	push	{lr}
 8005480:	b09c      	sub	sp, #112	; 0x70
 8005482:	ab1d      	add	r3, sp, #116	; 0x74
 8005484:	9002      	str	r0, [sp, #8]
 8005486:	9006      	str	r0, [sp, #24]
 8005488:	9107      	str	r1, [sp, #28]
 800548a:	9104      	str	r1, [sp, #16]
 800548c:	4808      	ldr	r0, [pc, #32]	; (80054b0 <siprintf+0x38>)
 800548e:	4909      	ldr	r1, [pc, #36]	; (80054b4 <siprintf+0x3c>)
 8005490:	f853 2b04 	ldr.w	r2, [r3], #4
 8005494:	9105      	str	r1, [sp, #20]
 8005496:	6800      	ldr	r0, [r0, #0]
 8005498:	a902      	add	r1, sp, #8
 800549a:	9301      	str	r3, [sp, #4]
 800549c:	f000 f98e 	bl	80057bc <_svfiprintf_r>
 80054a0:	2200      	movs	r2, #0
 80054a2:	9b02      	ldr	r3, [sp, #8]
 80054a4:	701a      	strb	r2, [r3, #0]
 80054a6:	b01c      	add	sp, #112	; 0x70
 80054a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80054ac:	b003      	add	sp, #12
 80054ae:	4770      	bx	lr
 80054b0:	20000068 	.word	0x20000068
 80054b4:	ffff0208 	.word	0xffff0208

080054b8 <memset>:
 80054b8:	4603      	mov	r3, r0
 80054ba:	4402      	add	r2, r0
 80054bc:	4293      	cmp	r3, r2
 80054be:	d100      	bne.n	80054c2 <memset+0xa>
 80054c0:	4770      	bx	lr
 80054c2:	f803 1b01 	strb.w	r1, [r3], #1
 80054c6:	e7f9      	b.n	80054bc <memset+0x4>

080054c8 <__errno>:
 80054c8:	4b01      	ldr	r3, [pc, #4]	; (80054d0 <__errno+0x8>)
 80054ca:	6818      	ldr	r0, [r3, #0]
 80054cc:	4770      	bx	lr
 80054ce:	bf00      	nop
 80054d0:	20000068 	.word	0x20000068

080054d4 <__libc_init_array>:
 80054d4:	b570      	push	{r4, r5, r6, lr}
 80054d6:	2600      	movs	r6, #0
 80054d8:	4d0c      	ldr	r5, [pc, #48]	; (800550c <__libc_init_array+0x38>)
 80054da:	4c0d      	ldr	r4, [pc, #52]	; (8005510 <__libc_init_array+0x3c>)
 80054dc:	1b64      	subs	r4, r4, r5
 80054de:	10a4      	asrs	r4, r4, #2
 80054e0:	42a6      	cmp	r6, r4
 80054e2:	d109      	bne.n	80054f8 <__libc_init_array+0x24>
 80054e4:	f000 fc7a 	bl	8005ddc <_init>
 80054e8:	2600      	movs	r6, #0
 80054ea:	4d0a      	ldr	r5, [pc, #40]	; (8005514 <__libc_init_array+0x40>)
 80054ec:	4c0a      	ldr	r4, [pc, #40]	; (8005518 <__libc_init_array+0x44>)
 80054ee:	1b64      	subs	r4, r4, r5
 80054f0:	10a4      	asrs	r4, r4, #2
 80054f2:	42a6      	cmp	r6, r4
 80054f4:	d105      	bne.n	8005502 <__libc_init_array+0x2e>
 80054f6:	bd70      	pop	{r4, r5, r6, pc}
 80054f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80054fc:	4798      	blx	r3
 80054fe:	3601      	adds	r6, #1
 8005500:	e7ee      	b.n	80054e0 <__libc_init_array+0xc>
 8005502:	f855 3b04 	ldr.w	r3, [r5], #4
 8005506:	4798      	blx	r3
 8005508:	3601      	adds	r6, #1
 800550a:	e7f2      	b.n	80054f2 <__libc_init_array+0x1e>
 800550c:	080068a4 	.word	0x080068a4
 8005510:	080068a4 	.word	0x080068a4
 8005514:	080068a4 	.word	0x080068a4
 8005518:	080068a8 	.word	0x080068a8

0800551c <__retarget_lock_acquire_recursive>:
 800551c:	4770      	bx	lr

0800551e <__retarget_lock_release_recursive>:
 800551e:	4770      	bx	lr

08005520 <_free_r>:
 8005520:	b538      	push	{r3, r4, r5, lr}
 8005522:	4605      	mov	r5, r0
 8005524:	2900      	cmp	r1, #0
 8005526:	d040      	beq.n	80055aa <_free_r+0x8a>
 8005528:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800552c:	1f0c      	subs	r4, r1, #4
 800552e:	2b00      	cmp	r3, #0
 8005530:	bfb8      	it	lt
 8005532:	18e4      	addlt	r4, r4, r3
 8005534:	f000 f8dc 	bl	80056f0 <__malloc_lock>
 8005538:	4a1c      	ldr	r2, [pc, #112]	; (80055ac <_free_r+0x8c>)
 800553a:	6813      	ldr	r3, [r2, #0]
 800553c:	b933      	cbnz	r3, 800554c <_free_r+0x2c>
 800553e:	6063      	str	r3, [r4, #4]
 8005540:	6014      	str	r4, [r2, #0]
 8005542:	4628      	mov	r0, r5
 8005544:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005548:	f000 b8d8 	b.w	80056fc <__malloc_unlock>
 800554c:	42a3      	cmp	r3, r4
 800554e:	d908      	bls.n	8005562 <_free_r+0x42>
 8005550:	6820      	ldr	r0, [r4, #0]
 8005552:	1821      	adds	r1, r4, r0
 8005554:	428b      	cmp	r3, r1
 8005556:	bf01      	itttt	eq
 8005558:	6819      	ldreq	r1, [r3, #0]
 800555a:	685b      	ldreq	r3, [r3, #4]
 800555c:	1809      	addeq	r1, r1, r0
 800555e:	6021      	streq	r1, [r4, #0]
 8005560:	e7ed      	b.n	800553e <_free_r+0x1e>
 8005562:	461a      	mov	r2, r3
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	b10b      	cbz	r3, 800556c <_free_r+0x4c>
 8005568:	42a3      	cmp	r3, r4
 800556a:	d9fa      	bls.n	8005562 <_free_r+0x42>
 800556c:	6811      	ldr	r1, [r2, #0]
 800556e:	1850      	adds	r0, r2, r1
 8005570:	42a0      	cmp	r0, r4
 8005572:	d10b      	bne.n	800558c <_free_r+0x6c>
 8005574:	6820      	ldr	r0, [r4, #0]
 8005576:	4401      	add	r1, r0
 8005578:	1850      	adds	r0, r2, r1
 800557a:	4283      	cmp	r3, r0
 800557c:	6011      	str	r1, [r2, #0]
 800557e:	d1e0      	bne.n	8005542 <_free_r+0x22>
 8005580:	6818      	ldr	r0, [r3, #0]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	4408      	add	r0, r1
 8005586:	6010      	str	r0, [r2, #0]
 8005588:	6053      	str	r3, [r2, #4]
 800558a:	e7da      	b.n	8005542 <_free_r+0x22>
 800558c:	d902      	bls.n	8005594 <_free_r+0x74>
 800558e:	230c      	movs	r3, #12
 8005590:	602b      	str	r3, [r5, #0]
 8005592:	e7d6      	b.n	8005542 <_free_r+0x22>
 8005594:	6820      	ldr	r0, [r4, #0]
 8005596:	1821      	adds	r1, r4, r0
 8005598:	428b      	cmp	r3, r1
 800559a:	bf01      	itttt	eq
 800559c:	6819      	ldreq	r1, [r3, #0]
 800559e:	685b      	ldreq	r3, [r3, #4]
 80055a0:	1809      	addeq	r1, r1, r0
 80055a2:	6021      	streq	r1, [r4, #0]
 80055a4:	6063      	str	r3, [r4, #4]
 80055a6:	6054      	str	r4, [r2, #4]
 80055a8:	e7cb      	b.n	8005542 <_free_r+0x22>
 80055aa:	bd38      	pop	{r3, r4, r5, pc}
 80055ac:	200007dc 	.word	0x200007dc

080055b0 <sbrk_aligned>:
 80055b0:	b570      	push	{r4, r5, r6, lr}
 80055b2:	4e0e      	ldr	r6, [pc, #56]	; (80055ec <sbrk_aligned+0x3c>)
 80055b4:	460c      	mov	r4, r1
 80055b6:	6831      	ldr	r1, [r6, #0]
 80055b8:	4605      	mov	r5, r0
 80055ba:	b911      	cbnz	r1, 80055c2 <sbrk_aligned+0x12>
 80055bc:	f000 fbaa 	bl	8005d14 <_sbrk_r>
 80055c0:	6030      	str	r0, [r6, #0]
 80055c2:	4621      	mov	r1, r4
 80055c4:	4628      	mov	r0, r5
 80055c6:	f000 fba5 	bl	8005d14 <_sbrk_r>
 80055ca:	1c43      	adds	r3, r0, #1
 80055cc:	d00a      	beq.n	80055e4 <sbrk_aligned+0x34>
 80055ce:	1cc4      	adds	r4, r0, #3
 80055d0:	f024 0403 	bic.w	r4, r4, #3
 80055d4:	42a0      	cmp	r0, r4
 80055d6:	d007      	beq.n	80055e8 <sbrk_aligned+0x38>
 80055d8:	1a21      	subs	r1, r4, r0
 80055da:	4628      	mov	r0, r5
 80055dc:	f000 fb9a 	bl	8005d14 <_sbrk_r>
 80055e0:	3001      	adds	r0, #1
 80055e2:	d101      	bne.n	80055e8 <sbrk_aligned+0x38>
 80055e4:	f04f 34ff 	mov.w	r4, #4294967295
 80055e8:	4620      	mov	r0, r4
 80055ea:	bd70      	pop	{r4, r5, r6, pc}
 80055ec:	200007e0 	.word	0x200007e0

080055f0 <_malloc_r>:
 80055f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055f4:	1ccd      	adds	r5, r1, #3
 80055f6:	f025 0503 	bic.w	r5, r5, #3
 80055fa:	3508      	adds	r5, #8
 80055fc:	2d0c      	cmp	r5, #12
 80055fe:	bf38      	it	cc
 8005600:	250c      	movcc	r5, #12
 8005602:	2d00      	cmp	r5, #0
 8005604:	4607      	mov	r7, r0
 8005606:	db01      	blt.n	800560c <_malloc_r+0x1c>
 8005608:	42a9      	cmp	r1, r5
 800560a:	d905      	bls.n	8005618 <_malloc_r+0x28>
 800560c:	230c      	movs	r3, #12
 800560e:	2600      	movs	r6, #0
 8005610:	603b      	str	r3, [r7, #0]
 8005612:	4630      	mov	r0, r6
 8005614:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005618:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80056ec <_malloc_r+0xfc>
 800561c:	f000 f868 	bl	80056f0 <__malloc_lock>
 8005620:	f8d8 3000 	ldr.w	r3, [r8]
 8005624:	461c      	mov	r4, r3
 8005626:	bb5c      	cbnz	r4, 8005680 <_malloc_r+0x90>
 8005628:	4629      	mov	r1, r5
 800562a:	4638      	mov	r0, r7
 800562c:	f7ff ffc0 	bl	80055b0 <sbrk_aligned>
 8005630:	1c43      	adds	r3, r0, #1
 8005632:	4604      	mov	r4, r0
 8005634:	d155      	bne.n	80056e2 <_malloc_r+0xf2>
 8005636:	f8d8 4000 	ldr.w	r4, [r8]
 800563a:	4626      	mov	r6, r4
 800563c:	2e00      	cmp	r6, #0
 800563e:	d145      	bne.n	80056cc <_malloc_r+0xdc>
 8005640:	2c00      	cmp	r4, #0
 8005642:	d048      	beq.n	80056d6 <_malloc_r+0xe6>
 8005644:	6823      	ldr	r3, [r4, #0]
 8005646:	4631      	mov	r1, r6
 8005648:	4638      	mov	r0, r7
 800564a:	eb04 0903 	add.w	r9, r4, r3
 800564e:	f000 fb61 	bl	8005d14 <_sbrk_r>
 8005652:	4581      	cmp	r9, r0
 8005654:	d13f      	bne.n	80056d6 <_malloc_r+0xe6>
 8005656:	6821      	ldr	r1, [r4, #0]
 8005658:	4638      	mov	r0, r7
 800565a:	1a6d      	subs	r5, r5, r1
 800565c:	4629      	mov	r1, r5
 800565e:	f7ff ffa7 	bl	80055b0 <sbrk_aligned>
 8005662:	3001      	adds	r0, #1
 8005664:	d037      	beq.n	80056d6 <_malloc_r+0xe6>
 8005666:	6823      	ldr	r3, [r4, #0]
 8005668:	442b      	add	r3, r5
 800566a:	6023      	str	r3, [r4, #0]
 800566c:	f8d8 3000 	ldr.w	r3, [r8]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d038      	beq.n	80056e6 <_malloc_r+0xf6>
 8005674:	685a      	ldr	r2, [r3, #4]
 8005676:	42a2      	cmp	r2, r4
 8005678:	d12b      	bne.n	80056d2 <_malloc_r+0xe2>
 800567a:	2200      	movs	r2, #0
 800567c:	605a      	str	r2, [r3, #4]
 800567e:	e00f      	b.n	80056a0 <_malloc_r+0xb0>
 8005680:	6822      	ldr	r2, [r4, #0]
 8005682:	1b52      	subs	r2, r2, r5
 8005684:	d41f      	bmi.n	80056c6 <_malloc_r+0xd6>
 8005686:	2a0b      	cmp	r2, #11
 8005688:	d917      	bls.n	80056ba <_malloc_r+0xca>
 800568a:	1961      	adds	r1, r4, r5
 800568c:	42a3      	cmp	r3, r4
 800568e:	6025      	str	r5, [r4, #0]
 8005690:	bf18      	it	ne
 8005692:	6059      	strne	r1, [r3, #4]
 8005694:	6863      	ldr	r3, [r4, #4]
 8005696:	bf08      	it	eq
 8005698:	f8c8 1000 	streq.w	r1, [r8]
 800569c:	5162      	str	r2, [r4, r5]
 800569e:	604b      	str	r3, [r1, #4]
 80056a0:	4638      	mov	r0, r7
 80056a2:	f104 060b 	add.w	r6, r4, #11
 80056a6:	f000 f829 	bl	80056fc <__malloc_unlock>
 80056aa:	f026 0607 	bic.w	r6, r6, #7
 80056ae:	1d23      	adds	r3, r4, #4
 80056b0:	1af2      	subs	r2, r6, r3
 80056b2:	d0ae      	beq.n	8005612 <_malloc_r+0x22>
 80056b4:	1b9b      	subs	r3, r3, r6
 80056b6:	50a3      	str	r3, [r4, r2]
 80056b8:	e7ab      	b.n	8005612 <_malloc_r+0x22>
 80056ba:	42a3      	cmp	r3, r4
 80056bc:	6862      	ldr	r2, [r4, #4]
 80056be:	d1dd      	bne.n	800567c <_malloc_r+0x8c>
 80056c0:	f8c8 2000 	str.w	r2, [r8]
 80056c4:	e7ec      	b.n	80056a0 <_malloc_r+0xb0>
 80056c6:	4623      	mov	r3, r4
 80056c8:	6864      	ldr	r4, [r4, #4]
 80056ca:	e7ac      	b.n	8005626 <_malloc_r+0x36>
 80056cc:	4634      	mov	r4, r6
 80056ce:	6876      	ldr	r6, [r6, #4]
 80056d0:	e7b4      	b.n	800563c <_malloc_r+0x4c>
 80056d2:	4613      	mov	r3, r2
 80056d4:	e7cc      	b.n	8005670 <_malloc_r+0x80>
 80056d6:	230c      	movs	r3, #12
 80056d8:	4638      	mov	r0, r7
 80056da:	603b      	str	r3, [r7, #0]
 80056dc:	f000 f80e 	bl	80056fc <__malloc_unlock>
 80056e0:	e797      	b.n	8005612 <_malloc_r+0x22>
 80056e2:	6025      	str	r5, [r4, #0]
 80056e4:	e7dc      	b.n	80056a0 <_malloc_r+0xb0>
 80056e6:	605b      	str	r3, [r3, #4]
 80056e8:	deff      	udf	#255	; 0xff
 80056ea:	bf00      	nop
 80056ec:	200007dc 	.word	0x200007dc

080056f0 <__malloc_lock>:
 80056f0:	4801      	ldr	r0, [pc, #4]	; (80056f8 <__malloc_lock+0x8>)
 80056f2:	f7ff bf13 	b.w	800551c <__retarget_lock_acquire_recursive>
 80056f6:	bf00      	nop
 80056f8:	200007d8 	.word	0x200007d8

080056fc <__malloc_unlock>:
 80056fc:	4801      	ldr	r0, [pc, #4]	; (8005704 <__malloc_unlock+0x8>)
 80056fe:	f7ff bf0e 	b.w	800551e <__retarget_lock_release_recursive>
 8005702:	bf00      	nop
 8005704:	200007d8 	.word	0x200007d8

08005708 <__ssputs_r>:
 8005708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800570c:	461f      	mov	r7, r3
 800570e:	688e      	ldr	r6, [r1, #8]
 8005710:	4682      	mov	sl, r0
 8005712:	42be      	cmp	r6, r7
 8005714:	460c      	mov	r4, r1
 8005716:	4690      	mov	r8, r2
 8005718:	680b      	ldr	r3, [r1, #0]
 800571a:	d82c      	bhi.n	8005776 <__ssputs_r+0x6e>
 800571c:	898a      	ldrh	r2, [r1, #12]
 800571e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005722:	d026      	beq.n	8005772 <__ssputs_r+0x6a>
 8005724:	6965      	ldr	r5, [r4, #20]
 8005726:	6909      	ldr	r1, [r1, #16]
 8005728:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800572c:	eba3 0901 	sub.w	r9, r3, r1
 8005730:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005734:	1c7b      	adds	r3, r7, #1
 8005736:	444b      	add	r3, r9
 8005738:	106d      	asrs	r5, r5, #1
 800573a:	429d      	cmp	r5, r3
 800573c:	bf38      	it	cc
 800573e:	461d      	movcc	r5, r3
 8005740:	0553      	lsls	r3, r2, #21
 8005742:	d527      	bpl.n	8005794 <__ssputs_r+0x8c>
 8005744:	4629      	mov	r1, r5
 8005746:	f7ff ff53 	bl	80055f0 <_malloc_r>
 800574a:	4606      	mov	r6, r0
 800574c:	b360      	cbz	r0, 80057a8 <__ssputs_r+0xa0>
 800574e:	464a      	mov	r2, r9
 8005750:	6921      	ldr	r1, [r4, #16]
 8005752:	f000 fafd 	bl	8005d50 <memcpy>
 8005756:	89a3      	ldrh	r3, [r4, #12]
 8005758:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800575c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005760:	81a3      	strh	r3, [r4, #12]
 8005762:	6126      	str	r6, [r4, #16]
 8005764:	444e      	add	r6, r9
 8005766:	6026      	str	r6, [r4, #0]
 8005768:	463e      	mov	r6, r7
 800576a:	6165      	str	r5, [r4, #20]
 800576c:	eba5 0509 	sub.w	r5, r5, r9
 8005770:	60a5      	str	r5, [r4, #8]
 8005772:	42be      	cmp	r6, r7
 8005774:	d900      	bls.n	8005778 <__ssputs_r+0x70>
 8005776:	463e      	mov	r6, r7
 8005778:	4632      	mov	r2, r6
 800577a:	4641      	mov	r1, r8
 800577c:	6820      	ldr	r0, [r4, #0]
 800577e:	f000 faaf 	bl	8005ce0 <memmove>
 8005782:	2000      	movs	r0, #0
 8005784:	68a3      	ldr	r3, [r4, #8]
 8005786:	1b9b      	subs	r3, r3, r6
 8005788:	60a3      	str	r3, [r4, #8]
 800578a:	6823      	ldr	r3, [r4, #0]
 800578c:	4433      	add	r3, r6
 800578e:	6023      	str	r3, [r4, #0]
 8005790:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005794:	462a      	mov	r2, r5
 8005796:	f000 fae9 	bl	8005d6c <_realloc_r>
 800579a:	4606      	mov	r6, r0
 800579c:	2800      	cmp	r0, #0
 800579e:	d1e0      	bne.n	8005762 <__ssputs_r+0x5a>
 80057a0:	4650      	mov	r0, sl
 80057a2:	6921      	ldr	r1, [r4, #16]
 80057a4:	f7ff febc 	bl	8005520 <_free_r>
 80057a8:	230c      	movs	r3, #12
 80057aa:	f8ca 3000 	str.w	r3, [sl]
 80057ae:	89a3      	ldrh	r3, [r4, #12]
 80057b0:	f04f 30ff 	mov.w	r0, #4294967295
 80057b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057b8:	81a3      	strh	r3, [r4, #12]
 80057ba:	e7e9      	b.n	8005790 <__ssputs_r+0x88>

080057bc <_svfiprintf_r>:
 80057bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057c0:	4698      	mov	r8, r3
 80057c2:	898b      	ldrh	r3, [r1, #12]
 80057c4:	4607      	mov	r7, r0
 80057c6:	061b      	lsls	r3, r3, #24
 80057c8:	460d      	mov	r5, r1
 80057ca:	4614      	mov	r4, r2
 80057cc:	b09d      	sub	sp, #116	; 0x74
 80057ce:	d50e      	bpl.n	80057ee <_svfiprintf_r+0x32>
 80057d0:	690b      	ldr	r3, [r1, #16]
 80057d2:	b963      	cbnz	r3, 80057ee <_svfiprintf_r+0x32>
 80057d4:	2140      	movs	r1, #64	; 0x40
 80057d6:	f7ff ff0b 	bl	80055f0 <_malloc_r>
 80057da:	6028      	str	r0, [r5, #0]
 80057dc:	6128      	str	r0, [r5, #16]
 80057de:	b920      	cbnz	r0, 80057ea <_svfiprintf_r+0x2e>
 80057e0:	230c      	movs	r3, #12
 80057e2:	603b      	str	r3, [r7, #0]
 80057e4:	f04f 30ff 	mov.w	r0, #4294967295
 80057e8:	e0d0      	b.n	800598c <_svfiprintf_r+0x1d0>
 80057ea:	2340      	movs	r3, #64	; 0x40
 80057ec:	616b      	str	r3, [r5, #20]
 80057ee:	2300      	movs	r3, #0
 80057f0:	9309      	str	r3, [sp, #36]	; 0x24
 80057f2:	2320      	movs	r3, #32
 80057f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80057f8:	2330      	movs	r3, #48	; 0x30
 80057fa:	f04f 0901 	mov.w	r9, #1
 80057fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8005802:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80059a4 <_svfiprintf_r+0x1e8>
 8005806:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800580a:	4623      	mov	r3, r4
 800580c:	469a      	mov	sl, r3
 800580e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005812:	b10a      	cbz	r2, 8005818 <_svfiprintf_r+0x5c>
 8005814:	2a25      	cmp	r2, #37	; 0x25
 8005816:	d1f9      	bne.n	800580c <_svfiprintf_r+0x50>
 8005818:	ebba 0b04 	subs.w	fp, sl, r4
 800581c:	d00b      	beq.n	8005836 <_svfiprintf_r+0x7a>
 800581e:	465b      	mov	r3, fp
 8005820:	4622      	mov	r2, r4
 8005822:	4629      	mov	r1, r5
 8005824:	4638      	mov	r0, r7
 8005826:	f7ff ff6f 	bl	8005708 <__ssputs_r>
 800582a:	3001      	adds	r0, #1
 800582c:	f000 80a9 	beq.w	8005982 <_svfiprintf_r+0x1c6>
 8005830:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005832:	445a      	add	r2, fp
 8005834:	9209      	str	r2, [sp, #36]	; 0x24
 8005836:	f89a 3000 	ldrb.w	r3, [sl]
 800583a:	2b00      	cmp	r3, #0
 800583c:	f000 80a1 	beq.w	8005982 <_svfiprintf_r+0x1c6>
 8005840:	2300      	movs	r3, #0
 8005842:	f04f 32ff 	mov.w	r2, #4294967295
 8005846:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800584a:	f10a 0a01 	add.w	sl, sl, #1
 800584e:	9304      	str	r3, [sp, #16]
 8005850:	9307      	str	r3, [sp, #28]
 8005852:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005856:	931a      	str	r3, [sp, #104]	; 0x68
 8005858:	4654      	mov	r4, sl
 800585a:	2205      	movs	r2, #5
 800585c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005860:	4850      	ldr	r0, [pc, #320]	; (80059a4 <_svfiprintf_r+0x1e8>)
 8005862:	f000 fa67 	bl	8005d34 <memchr>
 8005866:	9a04      	ldr	r2, [sp, #16]
 8005868:	b9d8      	cbnz	r0, 80058a2 <_svfiprintf_r+0xe6>
 800586a:	06d0      	lsls	r0, r2, #27
 800586c:	bf44      	itt	mi
 800586e:	2320      	movmi	r3, #32
 8005870:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005874:	0711      	lsls	r1, r2, #28
 8005876:	bf44      	itt	mi
 8005878:	232b      	movmi	r3, #43	; 0x2b
 800587a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800587e:	f89a 3000 	ldrb.w	r3, [sl]
 8005882:	2b2a      	cmp	r3, #42	; 0x2a
 8005884:	d015      	beq.n	80058b2 <_svfiprintf_r+0xf6>
 8005886:	4654      	mov	r4, sl
 8005888:	2000      	movs	r0, #0
 800588a:	f04f 0c0a 	mov.w	ip, #10
 800588e:	9a07      	ldr	r2, [sp, #28]
 8005890:	4621      	mov	r1, r4
 8005892:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005896:	3b30      	subs	r3, #48	; 0x30
 8005898:	2b09      	cmp	r3, #9
 800589a:	d94d      	bls.n	8005938 <_svfiprintf_r+0x17c>
 800589c:	b1b0      	cbz	r0, 80058cc <_svfiprintf_r+0x110>
 800589e:	9207      	str	r2, [sp, #28]
 80058a0:	e014      	b.n	80058cc <_svfiprintf_r+0x110>
 80058a2:	eba0 0308 	sub.w	r3, r0, r8
 80058a6:	fa09 f303 	lsl.w	r3, r9, r3
 80058aa:	4313      	orrs	r3, r2
 80058ac:	46a2      	mov	sl, r4
 80058ae:	9304      	str	r3, [sp, #16]
 80058b0:	e7d2      	b.n	8005858 <_svfiprintf_r+0x9c>
 80058b2:	9b03      	ldr	r3, [sp, #12]
 80058b4:	1d19      	adds	r1, r3, #4
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	9103      	str	r1, [sp, #12]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	bfbb      	ittet	lt
 80058be:	425b      	neglt	r3, r3
 80058c0:	f042 0202 	orrlt.w	r2, r2, #2
 80058c4:	9307      	strge	r3, [sp, #28]
 80058c6:	9307      	strlt	r3, [sp, #28]
 80058c8:	bfb8      	it	lt
 80058ca:	9204      	strlt	r2, [sp, #16]
 80058cc:	7823      	ldrb	r3, [r4, #0]
 80058ce:	2b2e      	cmp	r3, #46	; 0x2e
 80058d0:	d10c      	bne.n	80058ec <_svfiprintf_r+0x130>
 80058d2:	7863      	ldrb	r3, [r4, #1]
 80058d4:	2b2a      	cmp	r3, #42	; 0x2a
 80058d6:	d134      	bne.n	8005942 <_svfiprintf_r+0x186>
 80058d8:	9b03      	ldr	r3, [sp, #12]
 80058da:	3402      	adds	r4, #2
 80058dc:	1d1a      	adds	r2, r3, #4
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	9203      	str	r2, [sp, #12]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	bfb8      	it	lt
 80058e6:	f04f 33ff 	movlt.w	r3, #4294967295
 80058ea:	9305      	str	r3, [sp, #20]
 80058ec:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80059a8 <_svfiprintf_r+0x1ec>
 80058f0:	2203      	movs	r2, #3
 80058f2:	4650      	mov	r0, sl
 80058f4:	7821      	ldrb	r1, [r4, #0]
 80058f6:	f000 fa1d 	bl	8005d34 <memchr>
 80058fa:	b138      	cbz	r0, 800590c <_svfiprintf_r+0x150>
 80058fc:	2240      	movs	r2, #64	; 0x40
 80058fe:	9b04      	ldr	r3, [sp, #16]
 8005900:	eba0 000a 	sub.w	r0, r0, sl
 8005904:	4082      	lsls	r2, r0
 8005906:	4313      	orrs	r3, r2
 8005908:	3401      	adds	r4, #1
 800590a:	9304      	str	r3, [sp, #16]
 800590c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005910:	2206      	movs	r2, #6
 8005912:	4826      	ldr	r0, [pc, #152]	; (80059ac <_svfiprintf_r+0x1f0>)
 8005914:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005918:	f000 fa0c 	bl	8005d34 <memchr>
 800591c:	2800      	cmp	r0, #0
 800591e:	d038      	beq.n	8005992 <_svfiprintf_r+0x1d6>
 8005920:	4b23      	ldr	r3, [pc, #140]	; (80059b0 <_svfiprintf_r+0x1f4>)
 8005922:	bb1b      	cbnz	r3, 800596c <_svfiprintf_r+0x1b0>
 8005924:	9b03      	ldr	r3, [sp, #12]
 8005926:	3307      	adds	r3, #7
 8005928:	f023 0307 	bic.w	r3, r3, #7
 800592c:	3308      	adds	r3, #8
 800592e:	9303      	str	r3, [sp, #12]
 8005930:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005932:	4433      	add	r3, r6
 8005934:	9309      	str	r3, [sp, #36]	; 0x24
 8005936:	e768      	b.n	800580a <_svfiprintf_r+0x4e>
 8005938:	460c      	mov	r4, r1
 800593a:	2001      	movs	r0, #1
 800593c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005940:	e7a6      	b.n	8005890 <_svfiprintf_r+0xd4>
 8005942:	2300      	movs	r3, #0
 8005944:	f04f 0c0a 	mov.w	ip, #10
 8005948:	4619      	mov	r1, r3
 800594a:	3401      	adds	r4, #1
 800594c:	9305      	str	r3, [sp, #20]
 800594e:	4620      	mov	r0, r4
 8005950:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005954:	3a30      	subs	r2, #48	; 0x30
 8005956:	2a09      	cmp	r2, #9
 8005958:	d903      	bls.n	8005962 <_svfiprintf_r+0x1a6>
 800595a:	2b00      	cmp	r3, #0
 800595c:	d0c6      	beq.n	80058ec <_svfiprintf_r+0x130>
 800595e:	9105      	str	r1, [sp, #20]
 8005960:	e7c4      	b.n	80058ec <_svfiprintf_r+0x130>
 8005962:	4604      	mov	r4, r0
 8005964:	2301      	movs	r3, #1
 8005966:	fb0c 2101 	mla	r1, ip, r1, r2
 800596a:	e7f0      	b.n	800594e <_svfiprintf_r+0x192>
 800596c:	ab03      	add	r3, sp, #12
 800596e:	9300      	str	r3, [sp, #0]
 8005970:	462a      	mov	r2, r5
 8005972:	4638      	mov	r0, r7
 8005974:	4b0f      	ldr	r3, [pc, #60]	; (80059b4 <_svfiprintf_r+0x1f8>)
 8005976:	a904      	add	r1, sp, #16
 8005978:	f3af 8000 	nop.w
 800597c:	1c42      	adds	r2, r0, #1
 800597e:	4606      	mov	r6, r0
 8005980:	d1d6      	bne.n	8005930 <_svfiprintf_r+0x174>
 8005982:	89ab      	ldrh	r3, [r5, #12]
 8005984:	065b      	lsls	r3, r3, #25
 8005986:	f53f af2d 	bmi.w	80057e4 <_svfiprintf_r+0x28>
 800598a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800598c:	b01d      	add	sp, #116	; 0x74
 800598e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005992:	ab03      	add	r3, sp, #12
 8005994:	9300      	str	r3, [sp, #0]
 8005996:	462a      	mov	r2, r5
 8005998:	4638      	mov	r0, r7
 800599a:	4b06      	ldr	r3, [pc, #24]	; (80059b4 <_svfiprintf_r+0x1f8>)
 800599c:	a904      	add	r1, sp, #16
 800599e:	f000 f87d 	bl	8005a9c <_printf_i>
 80059a2:	e7eb      	b.n	800597c <_svfiprintf_r+0x1c0>
 80059a4:	08006870 	.word	0x08006870
 80059a8:	08006876 	.word	0x08006876
 80059ac:	0800687a 	.word	0x0800687a
 80059b0:	00000000 	.word	0x00000000
 80059b4:	08005709 	.word	0x08005709

080059b8 <_printf_common>:
 80059b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059bc:	4616      	mov	r6, r2
 80059be:	4699      	mov	r9, r3
 80059c0:	688a      	ldr	r2, [r1, #8]
 80059c2:	690b      	ldr	r3, [r1, #16]
 80059c4:	4607      	mov	r7, r0
 80059c6:	4293      	cmp	r3, r2
 80059c8:	bfb8      	it	lt
 80059ca:	4613      	movlt	r3, r2
 80059cc:	6033      	str	r3, [r6, #0]
 80059ce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80059d2:	460c      	mov	r4, r1
 80059d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80059d8:	b10a      	cbz	r2, 80059de <_printf_common+0x26>
 80059da:	3301      	adds	r3, #1
 80059dc:	6033      	str	r3, [r6, #0]
 80059de:	6823      	ldr	r3, [r4, #0]
 80059e0:	0699      	lsls	r1, r3, #26
 80059e2:	bf42      	ittt	mi
 80059e4:	6833      	ldrmi	r3, [r6, #0]
 80059e6:	3302      	addmi	r3, #2
 80059e8:	6033      	strmi	r3, [r6, #0]
 80059ea:	6825      	ldr	r5, [r4, #0]
 80059ec:	f015 0506 	ands.w	r5, r5, #6
 80059f0:	d106      	bne.n	8005a00 <_printf_common+0x48>
 80059f2:	f104 0a19 	add.w	sl, r4, #25
 80059f6:	68e3      	ldr	r3, [r4, #12]
 80059f8:	6832      	ldr	r2, [r6, #0]
 80059fa:	1a9b      	subs	r3, r3, r2
 80059fc:	42ab      	cmp	r3, r5
 80059fe:	dc2b      	bgt.n	8005a58 <_printf_common+0xa0>
 8005a00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005a04:	1e13      	subs	r3, r2, #0
 8005a06:	6822      	ldr	r2, [r4, #0]
 8005a08:	bf18      	it	ne
 8005a0a:	2301      	movne	r3, #1
 8005a0c:	0692      	lsls	r2, r2, #26
 8005a0e:	d430      	bmi.n	8005a72 <_printf_common+0xba>
 8005a10:	4649      	mov	r1, r9
 8005a12:	4638      	mov	r0, r7
 8005a14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a18:	47c0      	blx	r8
 8005a1a:	3001      	adds	r0, #1
 8005a1c:	d023      	beq.n	8005a66 <_printf_common+0xae>
 8005a1e:	6823      	ldr	r3, [r4, #0]
 8005a20:	6922      	ldr	r2, [r4, #16]
 8005a22:	f003 0306 	and.w	r3, r3, #6
 8005a26:	2b04      	cmp	r3, #4
 8005a28:	bf14      	ite	ne
 8005a2a:	2500      	movne	r5, #0
 8005a2c:	6833      	ldreq	r3, [r6, #0]
 8005a2e:	f04f 0600 	mov.w	r6, #0
 8005a32:	bf08      	it	eq
 8005a34:	68e5      	ldreq	r5, [r4, #12]
 8005a36:	f104 041a 	add.w	r4, r4, #26
 8005a3a:	bf08      	it	eq
 8005a3c:	1aed      	subeq	r5, r5, r3
 8005a3e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005a42:	bf08      	it	eq
 8005a44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	bfc4      	itt	gt
 8005a4c:	1a9b      	subgt	r3, r3, r2
 8005a4e:	18ed      	addgt	r5, r5, r3
 8005a50:	42b5      	cmp	r5, r6
 8005a52:	d11a      	bne.n	8005a8a <_printf_common+0xd2>
 8005a54:	2000      	movs	r0, #0
 8005a56:	e008      	b.n	8005a6a <_printf_common+0xb2>
 8005a58:	2301      	movs	r3, #1
 8005a5a:	4652      	mov	r2, sl
 8005a5c:	4649      	mov	r1, r9
 8005a5e:	4638      	mov	r0, r7
 8005a60:	47c0      	blx	r8
 8005a62:	3001      	adds	r0, #1
 8005a64:	d103      	bne.n	8005a6e <_printf_common+0xb6>
 8005a66:	f04f 30ff 	mov.w	r0, #4294967295
 8005a6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a6e:	3501      	adds	r5, #1
 8005a70:	e7c1      	b.n	80059f6 <_printf_common+0x3e>
 8005a72:	2030      	movs	r0, #48	; 0x30
 8005a74:	18e1      	adds	r1, r4, r3
 8005a76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a7a:	1c5a      	adds	r2, r3, #1
 8005a7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a80:	4422      	add	r2, r4
 8005a82:	3302      	adds	r3, #2
 8005a84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a88:	e7c2      	b.n	8005a10 <_printf_common+0x58>
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	4622      	mov	r2, r4
 8005a8e:	4649      	mov	r1, r9
 8005a90:	4638      	mov	r0, r7
 8005a92:	47c0      	blx	r8
 8005a94:	3001      	adds	r0, #1
 8005a96:	d0e6      	beq.n	8005a66 <_printf_common+0xae>
 8005a98:	3601      	adds	r6, #1
 8005a9a:	e7d9      	b.n	8005a50 <_printf_common+0x98>

08005a9c <_printf_i>:
 8005a9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005aa0:	7e0f      	ldrb	r7, [r1, #24]
 8005aa2:	4691      	mov	r9, r2
 8005aa4:	2f78      	cmp	r7, #120	; 0x78
 8005aa6:	4680      	mov	r8, r0
 8005aa8:	460c      	mov	r4, r1
 8005aaa:	469a      	mov	sl, r3
 8005aac:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005aae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005ab2:	d807      	bhi.n	8005ac4 <_printf_i+0x28>
 8005ab4:	2f62      	cmp	r7, #98	; 0x62
 8005ab6:	d80a      	bhi.n	8005ace <_printf_i+0x32>
 8005ab8:	2f00      	cmp	r7, #0
 8005aba:	f000 80d5 	beq.w	8005c68 <_printf_i+0x1cc>
 8005abe:	2f58      	cmp	r7, #88	; 0x58
 8005ac0:	f000 80c1 	beq.w	8005c46 <_printf_i+0x1aa>
 8005ac4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ac8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005acc:	e03a      	b.n	8005b44 <_printf_i+0xa8>
 8005ace:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005ad2:	2b15      	cmp	r3, #21
 8005ad4:	d8f6      	bhi.n	8005ac4 <_printf_i+0x28>
 8005ad6:	a101      	add	r1, pc, #4	; (adr r1, 8005adc <_printf_i+0x40>)
 8005ad8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005adc:	08005b35 	.word	0x08005b35
 8005ae0:	08005b49 	.word	0x08005b49
 8005ae4:	08005ac5 	.word	0x08005ac5
 8005ae8:	08005ac5 	.word	0x08005ac5
 8005aec:	08005ac5 	.word	0x08005ac5
 8005af0:	08005ac5 	.word	0x08005ac5
 8005af4:	08005b49 	.word	0x08005b49
 8005af8:	08005ac5 	.word	0x08005ac5
 8005afc:	08005ac5 	.word	0x08005ac5
 8005b00:	08005ac5 	.word	0x08005ac5
 8005b04:	08005ac5 	.word	0x08005ac5
 8005b08:	08005c4f 	.word	0x08005c4f
 8005b0c:	08005b75 	.word	0x08005b75
 8005b10:	08005c09 	.word	0x08005c09
 8005b14:	08005ac5 	.word	0x08005ac5
 8005b18:	08005ac5 	.word	0x08005ac5
 8005b1c:	08005c71 	.word	0x08005c71
 8005b20:	08005ac5 	.word	0x08005ac5
 8005b24:	08005b75 	.word	0x08005b75
 8005b28:	08005ac5 	.word	0x08005ac5
 8005b2c:	08005ac5 	.word	0x08005ac5
 8005b30:	08005c11 	.word	0x08005c11
 8005b34:	682b      	ldr	r3, [r5, #0]
 8005b36:	1d1a      	adds	r2, r3, #4
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	602a      	str	r2, [r5, #0]
 8005b3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b44:	2301      	movs	r3, #1
 8005b46:	e0a0      	b.n	8005c8a <_printf_i+0x1ee>
 8005b48:	6820      	ldr	r0, [r4, #0]
 8005b4a:	682b      	ldr	r3, [r5, #0]
 8005b4c:	0607      	lsls	r7, r0, #24
 8005b4e:	f103 0104 	add.w	r1, r3, #4
 8005b52:	6029      	str	r1, [r5, #0]
 8005b54:	d501      	bpl.n	8005b5a <_printf_i+0xbe>
 8005b56:	681e      	ldr	r6, [r3, #0]
 8005b58:	e003      	b.n	8005b62 <_printf_i+0xc6>
 8005b5a:	0646      	lsls	r6, r0, #25
 8005b5c:	d5fb      	bpl.n	8005b56 <_printf_i+0xba>
 8005b5e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005b62:	2e00      	cmp	r6, #0
 8005b64:	da03      	bge.n	8005b6e <_printf_i+0xd2>
 8005b66:	232d      	movs	r3, #45	; 0x2d
 8005b68:	4276      	negs	r6, r6
 8005b6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b6e:	230a      	movs	r3, #10
 8005b70:	4859      	ldr	r0, [pc, #356]	; (8005cd8 <_printf_i+0x23c>)
 8005b72:	e012      	b.n	8005b9a <_printf_i+0xfe>
 8005b74:	682b      	ldr	r3, [r5, #0]
 8005b76:	6820      	ldr	r0, [r4, #0]
 8005b78:	1d19      	adds	r1, r3, #4
 8005b7a:	6029      	str	r1, [r5, #0]
 8005b7c:	0605      	lsls	r5, r0, #24
 8005b7e:	d501      	bpl.n	8005b84 <_printf_i+0xe8>
 8005b80:	681e      	ldr	r6, [r3, #0]
 8005b82:	e002      	b.n	8005b8a <_printf_i+0xee>
 8005b84:	0641      	lsls	r1, r0, #25
 8005b86:	d5fb      	bpl.n	8005b80 <_printf_i+0xe4>
 8005b88:	881e      	ldrh	r6, [r3, #0]
 8005b8a:	2f6f      	cmp	r7, #111	; 0x6f
 8005b8c:	bf0c      	ite	eq
 8005b8e:	2308      	moveq	r3, #8
 8005b90:	230a      	movne	r3, #10
 8005b92:	4851      	ldr	r0, [pc, #324]	; (8005cd8 <_printf_i+0x23c>)
 8005b94:	2100      	movs	r1, #0
 8005b96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005b9a:	6865      	ldr	r5, [r4, #4]
 8005b9c:	2d00      	cmp	r5, #0
 8005b9e:	bfa8      	it	ge
 8005ba0:	6821      	ldrge	r1, [r4, #0]
 8005ba2:	60a5      	str	r5, [r4, #8]
 8005ba4:	bfa4      	itt	ge
 8005ba6:	f021 0104 	bicge.w	r1, r1, #4
 8005baa:	6021      	strge	r1, [r4, #0]
 8005bac:	b90e      	cbnz	r6, 8005bb2 <_printf_i+0x116>
 8005bae:	2d00      	cmp	r5, #0
 8005bb0:	d04b      	beq.n	8005c4a <_printf_i+0x1ae>
 8005bb2:	4615      	mov	r5, r2
 8005bb4:	fbb6 f1f3 	udiv	r1, r6, r3
 8005bb8:	fb03 6711 	mls	r7, r3, r1, r6
 8005bbc:	5dc7      	ldrb	r7, [r0, r7]
 8005bbe:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005bc2:	4637      	mov	r7, r6
 8005bc4:	42bb      	cmp	r3, r7
 8005bc6:	460e      	mov	r6, r1
 8005bc8:	d9f4      	bls.n	8005bb4 <_printf_i+0x118>
 8005bca:	2b08      	cmp	r3, #8
 8005bcc:	d10b      	bne.n	8005be6 <_printf_i+0x14a>
 8005bce:	6823      	ldr	r3, [r4, #0]
 8005bd0:	07de      	lsls	r6, r3, #31
 8005bd2:	d508      	bpl.n	8005be6 <_printf_i+0x14a>
 8005bd4:	6923      	ldr	r3, [r4, #16]
 8005bd6:	6861      	ldr	r1, [r4, #4]
 8005bd8:	4299      	cmp	r1, r3
 8005bda:	bfde      	ittt	le
 8005bdc:	2330      	movle	r3, #48	; 0x30
 8005bde:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005be2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005be6:	1b52      	subs	r2, r2, r5
 8005be8:	6122      	str	r2, [r4, #16]
 8005bea:	464b      	mov	r3, r9
 8005bec:	4621      	mov	r1, r4
 8005bee:	4640      	mov	r0, r8
 8005bf0:	f8cd a000 	str.w	sl, [sp]
 8005bf4:	aa03      	add	r2, sp, #12
 8005bf6:	f7ff fedf 	bl	80059b8 <_printf_common>
 8005bfa:	3001      	adds	r0, #1
 8005bfc:	d14a      	bne.n	8005c94 <_printf_i+0x1f8>
 8005bfe:	f04f 30ff 	mov.w	r0, #4294967295
 8005c02:	b004      	add	sp, #16
 8005c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c08:	6823      	ldr	r3, [r4, #0]
 8005c0a:	f043 0320 	orr.w	r3, r3, #32
 8005c0e:	6023      	str	r3, [r4, #0]
 8005c10:	2778      	movs	r7, #120	; 0x78
 8005c12:	4832      	ldr	r0, [pc, #200]	; (8005cdc <_printf_i+0x240>)
 8005c14:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005c18:	6823      	ldr	r3, [r4, #0]
 8005c1a:	6829      	ldr	r1, [r5, #0]
 8005c1c:	061f      	lsls	r7, r3, #24
 8005c1e:	f851 6b04 	ldr.w	r6, [r1], #4
 8005c22:	d402      	bmi.n	8005c2a <_printf_i+0x18e>
 8005c24:	065f      	lsls	r7, r3, #25
 8005c26:	bf48      	it	mi
 8005c28:	b2b6      	uxthmi	r6, r6
 8005c2a:	07df      	lsls	r7, r3, #31
 8005c2c:	bf48      	it	mi
 8005c2e:	f043 0320 	orrmi.w	r3, r3, #32
 8005c32:	6029      	str	r1, [r5, #0]
 8005c34:	bf48      	it	mi
 8005c36:	6023      	strmi	r3, [r4, #0]
 8005c38:	b91e      	cbnz	r6, 8005c42 <_printf_i+0x1a6>
 8005c3a:	6823      	ldr	r3, [r4, #0]
 8005c3c:	f023 0320 	bic.w	r3, r3, #32
 8005c40:	6023      	str	r3, [r4, #0]
 8005c42:	2310      	movs	r3, #16
 8005c44:	e7a6      	b.n	8005b94 <_printf_i+0xf8>
 8005c46:	4824      	ldr	r0, [pc, #144]	; (8005cd8 <_printf_i+0x23c>)
 8005c48:	e7e4      	b.n	8005c14 <_printf_i+0x178>
 8005c4a:	4615      	mov	r5, r2
 8005c4c:	e7bd      	b.n	8005bca <_printf_i+0x12e>
 8005c4e:	682b      	ldr	r3, [r5, #0]
 8005c50:	6826      	ldr	r6, [r4, #0]
 8005c52:	1d18      	adds	r0, r3, #4
 8005c54:	6961      	ldr	r1, [r4, #20]
 8005c56:	6028      	str	r0, [r5, #0]
 8005c58:	0635      	lsls	r5, r6, #24
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	d501      	bpl.n	8005c62 <_printf_i+0x1c6>
 8005c5e:	6019      	str	r1, [r3, #0]
 8005c60:	e002      	b.n	8005c68 <_printf_i+0x1cc>
 8005c62:	0670      	lsls	r0, r6, #25
 8005c64:	d5fb      	bpl.n	8005c5e <_printf_i+0x1c2>
 8005c66:	8019      	strh	r1, [r3, #0]
 8005c68:	2300      	movs	r3, #0
 8005c6a:	4615      	mov	r5, r2
 8005c6c:	6123      	str	r3, [r4, #16]
 8005c6e:	e7bc      	b.n	8005bea <_printf_i+0x14e>
 8005c70:	682b      	ldr	r3, [r5, #0]
 8005c72:	2100      	movs	r1, #0
 8005c74:	1d1a      	adds	r2, r3, #4
 8005c76:	602a      	str	r2, [r5, #0]
 8005c78:	681d      	ldr	r5, [r3, #0]
 8005c7a:	6862      	ldr	r2, [r4, #4]
 8005c7c:	4628      	mov	r0, r5
 8005c7e:	f000 f859 	bl	8005d34 <memchr>
 8005c82:	b108      	cbz	r0, 8005c88 <_printf_i+0x1ec>
 8005c84:	1b40      	subs	r0, r0, r5
 8005c86:	6060      	str	r0, [r4, #4]
 8005c88:	6863      	ldr	r3, [r4, #4]
 8005c8a:	6123      	str	r3, [r4, #16]
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c92:	e7aa      	b.n	8005bea <_printf_i+0x14e>
 8005c94:	462a      	mov	r2, r5
 8005c96:	4649      	mov	r1, r9
 8005c98:	4640      	mov	r0, r8
 8005c9a:	6923      	ldr	r3, [r4, #16]
 8005c9c:	47d0      	blx	sl
 8005c9e:	3001      	adds	r0, #1
 8005ca0:	d0ad      	beq.n	8005bfe <_printf_i+0x162>
 8005ca2:	6823      	ldr	r3, [r4, #0]
 8005ca4:	079b      	lsls	r3, r3, #30
 8005ca6:	d413      	bmi.n	8005cd0 <_printf_i+0x234>
 8005ca8:	68e0      	ldr	r0, [r4, #12]
 8005caa:	9b03      	ldr	r3, [sp, #12]
 8005cac:	4298      	cmp	r0, r3
 8005cae:	bfb8      	it	lt
 8005cb0:	4618      	movlt	r0, r3
 8005cb2:	e7a6      	b.n	8005c02 <_printf_i+0x166>
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	4632      	mov	r2, r6
 8005cb8:	4649      	mov	r1, r9
 8005cba:	4640      	mov	r0, r8
 8005cbc:	47d0      	blx	sl
 8005cbe:	3001      	adds	r0, #1
 8005cc0:	d09d      	beq.n	8005bfe <_printf_i+0x162>
 8005cc2:	3501      	adds	r5, #1
 8005cc4:	68e3      	ldr	r3, [r4, #12]
 8005cc6:	9903      	ldr	r1, [sp, #12]
 8005cc8:	1a5b      	subs	r3, r3, r1
 8005cca:	42ab      	cmp	r3, r5
 8005ccc:	dcf2      	bgt.n	8005cb4 <_printf_i+0x218>
 8005cce:	e7eb      	b.n	8005ca8 <_printf_i+0x20c>
 8005cd0:	2500      	movs	r5, #0
 8005cd2:	f104 0619 	add.w	r6, r4, #25
 8005cd6:	e7f5      	b.n	8005cc4 <_printf_i+0x228>
 8005cd8:	08006881 	.word	0x08006881
 8005cdc:	08006892 	.word	0x08006892

08005ce0 <memmove>:
 8005ce0:	4288      	cmp	r0, r1
 8005ce2:	b510      	push	{r4, lr}
 8005ce4:	eb01 0402 	add.w	r4, r1, r2
 8005ce8:	d902      	bls.n	8005cf0 <memmove+0x10>
 8005cea:	4284      	cmp	r4, r0
 8005cec:	4623      	mov	r3, r4
 8005cee:	d807      	bhi.n	8005d00 <memmove+0x20>
 8005cf0:	1e43      	subs	r3, r0, #1
 8005cf2:	42a1      	cmp	r1, r4
 8005cf4:	d008      	beq.n	8005d08 <memmove+0x28>
 8005cf6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005cfa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005cfe:	e7f8      	b.n	8005cf2 <memmove+0x12>
 8005d00:	4601      	mov	r1, r0
 8005d02:	4402      	add	r2, r0
 8005d04:	428a      	cmp	r2, r1
 8005d06:	d100      	bne.n	8005d0a <memmove+0x2a>
 8005d08:	bd10      	pop	{r4, pc}
 8005d0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005d0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005d12:	e7f7      	b.n	8005d04 <memmove+0x24>

08005d14 <_sbrk_r>:
 8005d14:	b538      	push	{r3, r4, r5, lr}
 8005d16:	2300      	movs	r3, #0
 8005d18:	4d05      	ldr	r5, [pc, #20]	; (8005d30 <_sbrk_r+0x1c>)
 8005d1a:	4604      	mov	r4, r0
 8005d1c:	4608      	mov	r0, r1
 8005d1e:	602b      	str	r3, [r5, #0]
 8005d20:	f7fa ff72 	bl	8000c08 <_sbrk>
 8005d24:	1c43      	adds	r3, r0, #1
 8005d26:	d102      	bne.n	8005d2e <_sbrk_r+0x1a>
 8005d28:	682b      	ldr	r3, [r5, #0]
 8005d2a:	b103      	cbz	r3, 8005d2e <_sbrk_r+0x1a>
 8005d2c:	6023      	str	r3, [r4, #0]
 8005d2e:	bd38      	pop	{r3, r4, r5, pc}
 8005d30:	200007d4 	.word	0x200007d4

08005d34 <memchr>:
 8005d34:	4603      	mov	r3, r0
 8005d36:	b510      	push	{r4, lr}
 8005d38:	b2c9      	uxtb	r1, r1
 8005d3a:	4402      	add	r2, r0
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	4618      	mov	r0, r3
 8005d40:	d101      	bne.n	8005d46 <memchr+0x12>
 8005d42:	2000      	movs	r0, #0
 8005d44:	e003      	b.n	8005d4e <memchr+0x1a>
 8005d46:	7804      	ldrb	r4, [r0, #0]
 8005d48:	3301      	adds	r3, #1
 8005d4a:	428c      	cmp	r4, r1
 8005d4c:	d1f6      	bne.n	8005d3c <memchr+0x8>
 8005d4e:	bd10      	pop	{r4, pc}

08005d50 <memcpy>:
 8005d50:	440a      	add	r2, r1
 8005d52:	4291      	cmp	r1, r2
 8005d54:	f100 33ff 	add.w	r3, r0, #4294967295
 8005d58:	d100      	bne.n	8005d5c <memcpy+0xc>
 8005d5a:	4770      	bx	lr
 8005d5c:	b510      	push	{r4, lr}
 8005d5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d62:	4291      	cmp	r1, r2
 8005d64:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d68:	d1f9      	bne.n	8005d5e <memcpy+0xe>
 8005d6a:	bd10      	pop	{r4, pc}

08005d6c <_realloc_r>:
 8005d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d70:	4680      	mov	r8, r0
 8005d72:	4614      	mov	r4, r2
 8005d74:	460e      	mov	r6, r1
 8005d76:	b921      	cbnz	r1, 8005d82 <_realloc_r+0x16>
 8005d78:	4611      	mov	r1, r2
 8005d7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d7e:	f7ff bc37 	b.w	80055f0 <_malloc_r>
 8005d82:	b92a      	cbnz	r2, 8005d90 <_realloc_r+0x24>
 8005d84:	f7ff fbcc 	bl	8005520 <_free_r>
 8005d88:	4625      	mov	r5, r4
 8005d8a:	4628      	mov	r0, r5
 8005d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d90:	f000 f81b 	bl	8005dca <_malloc_usable_size_r>
 8005d94:	4284      	cmp	r4, r0
 8005d96:	4607      	mov	r7, r0
 8005d98:	d802      	bhi.n	8005da0 <_realloc_r+0x34>
 8005d9a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005d9e:	d812      	bhi.n	8005dc6 <_realloc_r+0x5a>
 8005da0:	4621      	mov	r1, r4
 8005da2:	4640      	mov	r0, r8
 8005da4:	f7ff fc24 	bl	80055f0 <_malloc_r>
 8005da8:	4605      	mov	r5, r0
 8005daa:	2800      	cmp	r0, #0
 8005dac:	d0ed      	beq.n	8005d8a <_realloc_r+0x1e>
 8005dae:	42bc      	cmp	r4, r7
 8005db0:	4622      	mov	r2, r4
 8005db2:	4631      	mov	r1, r6
 8005db4:	bf28      	it	cs
 8005db6:	463a      	movcs	r2, r7
 8005db8:	f7ff ffca 	bl	8005d50 <memcpy>
 8005dbc:	4631      	mov	r1, r6
 8005dbe:	4640      	mov	r0, r8
 8005dc0:	f7ff fbae 	bl	8005520 <_free_r>
 8005dc4:	e7e1      	b.n	8005d8a <_realloc_r+0x1e>
 8005dc6:	4635      	mov	r5, r6
 8005dc8:	e7df      	b.n	8005d8a <_realloc_r+0x1e>

08005dca <_malloc_usable_size_r>:
 8005dca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005dce:	1f18      	subs	r0, r3, #4
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	bfbc      	itt	lt
 8005dd4:	580b      	ldrlt	r3, [r1, r0]
 8005dd6:	18c0      	addlt	r0, r0, r3
 8005dd8:	4770      	bx	lr
	...

08005ddc <_init>:
 8005ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dde:	bf00      	nop
 8005de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005de2:	bc08      	pop	{r3}
 8005de4:	469e      	mov	lr, r3
 8005de6:	4770      	bx	lr

08005de8 <_fini>:
 8005de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dea:	bf00      	nop
 8005dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dee:	bc08      	pop	{r3}
 8005df0:	469e      	mov	lr, r3
 8005df2:	4770      	bx	lr
