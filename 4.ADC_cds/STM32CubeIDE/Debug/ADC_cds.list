
ADC_cds.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000478c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  0800493c  0800493c  0001493c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049f4  080049f4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080049f4  080049f4  000149f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080049fc  080049fc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049fc  080049fc  000149fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a00  08004a00  00014a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004a04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000000d4  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000144  20000144  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bbc3  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ed7  00000000  00000000  0002bc63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000980  00000000  00000000  0002db40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000008b8  00000000  00000000  0002e4c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024ba7  00000000  00000000  0002ed78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c1a7  00000000  00000000  0005391f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dfbf7  00000000  00000000  0005fac6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013f6bd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002db0  00000000  00000000  0013f710  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004924 	.word	0x08004924

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08004924 	.word	0x08004924

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <__io_putchar>:

int adcVal[4];
int i=0;

int __io_putchar (int ch)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 100);
 800059c:	1d39      	adds	r1, r7, #4
 800059e:	2364      	movs	r3, #100	; 0x64
 80005a0:	2201      	movs	r2, #1
 80005a2:	4804      	ldr	r0, [pc, #16]	; (80005b4 <__io_putchar+0x20>)
 80005a4:	f002 f9c1 	bl	800292a <HAL_UART_Transmit>
  return ch;
 80005a8:	687b      	ldr	r3, [r7, #4]
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	3708      	adds	r7, #8
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	200000d4 	.word	0x200000d4

080005b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005bc:	f000 fb76 	bl	8000cac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c0:	f000 f844 	bl	800064c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c4:	f000 f972 	bl	80008ac <MX_GPIO_Init>
  MX_ADC1_Init();
 80005c8:	f000 f8c4 	bl	8000754 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80005cc:	f000 f944 	bl	8000858 <MX_USART1_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80005d0:	f000 f8ac 	bl	800072c <MX_NVIC_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  HAL_ADC_Start(&hadc1);
 80005d4:	4818      	ldr	r0, [pc, #96]	; (8000638 <main+0x80>)
 80005d6:	f000 fc1f 	bl	8000e18 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1,HAL_MAX_DELAY);
 80005da:	f04f 31ff 	mov.w	r1, #4294967295
 80005de:	4816      	ldr	r0, [pc, #88]	; (8000638 <main+0x80>)
 80005e0:	f000 fd1f 	bl	8001022 <HAL_ADC_PollForConversion>
	  adcVal[i] = HAL_ADC_GetValue(&hadc1);
 80005e4:	4814      	ldr	r0, [pc, #80]	; (8000638 <main+0x80>)
 80005e6:	f000 feb7 	bl	8001358 <HAL_ADC_GetValue>
 80005ea:	4602      	mov	r2, r0
 80005ec:	4b13      	ldr	r3, [pc, #76]	; (800063c <main+0x84>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4611      	mov	r1, r2
 80005f2:	4a13      	ldr	r2, [pc, #76]	; (8000640 <main+0x88>)
 80005f4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  printf("%d ",adcVal[i]);
 80005f8:	4b10      	ldr	r3, [pc, #64]	; (800063c <main+0x84>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a10      	ldr	r2, [pc, #64]	; (8000640 <main+0x88>)
 80005fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000602:	4619      	mov	r1, r3
 8000604:	480f      	ldr	r0, [pc, #60]	; (8000644 <main+0x8c>)
 8000606:	f003 f989 	bl	800391c <iprintf>

	  if(i==3)
 800060a:	4b0c      	ldr	r3, [pc, #48]	; (800063c <main+0x84>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	2b03      	cmp	r3, #3
 8000610:	d105      	bne.n	800061e <main+0x66>
	  	{
	  		printf("\r\n");
 8000612:	480d      	ldr	r0, [pc, #52]	; (8000648 <main+0x90>)
 8000614:	f003 fa08 	bl	8003a28 <puts>
	  		HAL_ADC_Stop(&hadc1);
 8000618:	4807      	ldr	r0, [pc, #28]	; (8000638 <main+0x80>)
 800061a:	f000 fccf 	bl	8000fbc <HAL_ADC_Stop>
	  	}

	  	i++;
 800061e:	4b07      	ldr	r3, [pc, #28]	; (800063c <main+0x84>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	3301      	adds	r3, #1
 8000624:	4a05      	ldr	r2, [pc, #20]	; (800063c <main+0x84>)
 8000626:	6013      	str	r3, [r2, #0]


	  	if(i>3)
 8000628:	4b04      	ldr	r3, [pc, #16]	; (800063c <main+0x84>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	2b03      	cmp	r3, #3
 800062e:	ddd1      	ble.n	80005d4 <main+0x1c>
	  		i=0;
 8000630:	4b02      	ldr	r3, [pc, #8]	; (800063c <main+0x84>)
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
  {
 8000636:	e7cd      	b.n	80005d4 <main+0x1c>
 8000638:	2000008c 	.word	0x2000008c
 800063c:	20000128 	.word	0x20000128
 8000640:	20000118 	.word	0x20000118
 8000644:	0800493c 	.word	0x0800493c
 8000648:	08004940 	.word	0x08004940

0800064c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b094      	sub	sp, #80	; 0x50
 8000650:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000652:	f107 0320 	add.w	r3, r7, #32
 8000656:	2230      	movs	r2, #48	; 0x30
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f003 f956 	bl	800390c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000660:	f107 030c 	add.w	r3, r7, #12
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000670:	2300      	movs	r3, #0
 8000672:	60bb      	str	r3, [r7, #8]
 8000674:	4b2b      	ldr	r3, [pc, #172]	; (8000724 <SystemClock_Config+0xd8>)
 8000676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000678:	4a2a      	ldr	r2, [pc, #168]	; (8000724 <SystemClock_Config+0xd8>)
 800067a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800067e:	6413      	str	r3, [r2, #64]	; 0x40
 8000680:	4b28      	ldr	r3, [pc, #160]	; (8000724 <SystemClock_Config+0xd8>)
 8000682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000684:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000688:	60bb      	str	r3, [r7, #8]
 800068a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800068c:	2300      	movs	r3, #0
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	4b25      	ldr	r3, [pc, #148]	; (8000728 <SystemClock_Config+0xdc>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a24      	ldr	r2, [pc, #144]	; (8000728 <SystemClock_Config+0xdc>)
 8000696:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800069a:	6013      	str	r3, [r2, #0]
 800069c:	4b22      	ldr	r3, [pc, #136]	; (8000728 <SystemClock_Config+0xdc>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006a4:	607b      	str	r3, [r7, #4]
 80006a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006a8:	2301      	movs	r3, #1
 80006aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b2:	2302      	movs	r3, #2
 80006b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006bc:	2304      	movs	r3, #4
 80006be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80006c0:	23b4      	movs	r3, #180	; 0xb4
 80006c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006c4:	2302      	movs	r3, #2
 80006c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006c8:	2304      	movs	r3, #4
 80006ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006cc:	f107 0320 	add.w	r3, r7, #32
 80006d0:	4618      	mov	r0, r3
 80006d2:	f001 fc45 	bl	8001f60 <HAL_RCC_OscConfig>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006dc:	f000 f90e 	bl	80008fc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006e0:	f001 fbee 	bl	8001ec0 <HAL_PWREx_EnableOverDrive>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80006ea:	f000 f907 	bl	80008fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ee:	230f      	movs	r3, #15
 80006f0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f2:	2302      	movs	r3, #2
 80006f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006fa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000700:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000704:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000706:	f107 030c 	add.w	r3, r7, #12
 800070a:	2105      	movs	r1, #5
 800070c:	4618      	mov	r0, r3
 800070e:	f001 fe9f 	bl	8002450 <HAL_RCC_ClockConfig>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000718:	f000 f8f0 	bl	80008fc <Error_Handler>
  }
}
 800071c:	bf00      	nop
 800071e:	3750      	adds	r7, #80	; 0x50
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	40023800 	.word	0x40023800
 8000728:	40007000 	.word	0x40007000

0800072c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000730:	2200      	movs	r2, #0
 8000732:	2100      	movs	r1, #0
 8000734:	2025      	movs	r0, #37	; 0x25
 8000736:	f001 f94e 	bl	80019d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 800073a:	2025      	movs	r0, #37	; 0x25
 800073c:	f001 f967 	bl	8001a0e <HAL_NVIC_EnableIRQ>
  /* ADC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000740:	2200      	movs	r2, #0
 8000742:	2100      	movs	r1, #0
 8000744:	2012      	movs	r0, #18
 8000746:	f001 f946 	bl	80019d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 800074a:	2012      	movs	r0, #18
 800074c:	f001 f95f 	bl	8001a0e <HAL_NVIC_EnableIRQ>
}
 8000750:	bf00      	nop
 8000752:	bd80      	pop	{r7, pc}

08000754 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800075a:	463b      	mov	r3, r7
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000766:	4b38      	ldr	r3, [pc, #224]	; (8000848 <MX_ADC1_Init+0xf4>)
 8000768:	4a38      	ldr	r2, [pc, #224]	; (800084c <MX_ADC1_Init+0xf8>)
 800076a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800076c:	4b36      	ldr	r3, [pc, #216]	; (8000848 <MX_ADC1_Init+0xf4>)
 800076e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000772:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000774:	4b34      	ldr	r3, [pc, #208]	; (8000848 <MX_ADC1_Init+0xf4>)
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800077a:	4b33      	ldr	r3, [pc, #204]	; (8000848 <MX_ADC1_Init+0xf4>)
 800077c:	2201      	movs	r2, #1
 800077e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000780:	4b31      	ldr	r3, [pc, #196]	; (8000848 <MX_ADC1_Init+0xf4>)
 8000782:	2200      	movs	r2, #0
 8000784:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8000786:	4b30      	ldr	r3, [pc, #192]	; (8000848 <MX_ADC1_Init+0xf4>)
 8000788:	2201      	movs	r2, #1
 800078a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 800078e:	4b2e      	ldr	r3, [pc, #184]	; (8000848 <MX_ADC1_Init+0xf4>)
 8000790:	2201      	movs	r2, #1
 8000792:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000794:	4b2c      	ldr	r3, [pc, #176]	; (8000848 <MX_ADC1_Init+0xf4>)
 8000796:	2200      	movs	r2, #0
 8000798:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800079a:	4b2b      	ldr	r3, [pc, #172]	; (8000848 <MX_ADC1_Init+0xf4>)
 800079c:	4a2c      	ldr	r2, [pc, #176]	; (8000850 <MX_ADC1_Init+0xfc>)
 800079e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007a0:	4b29      	ldr	r3, [pc, #164]	; (8000848 <MX_ADC1_Init+0xf4>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 80007a6:	4b28      	ldr	r3, [pc, #160]	; (8000848 <MX_ADC1_Init+0xf4>)
 80007a8:	2204      	movs	r2, #4
 80007aa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007ac:	4b26      	ldr	r3, [pc, #152]	; (8000848 <MX_ADC1_Init+0xf4>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007b4:	4b24      	ldr	r3, [pc, #144]	; (8000848 <MX_ADC1_Init+0xf4>)
 80007b6:	2201      	movs	r2, #1
 80007b8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007ba:	4823      	ldr	r0, [pc, #140]	; (8000848 <MX_ADC1_Init+0xf4>)
 80007bc:	f000 fae8 	bl	8000d90 <HAL_ADC_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_ADC1_Init+0x76>
  {
    Error_Handler();
 80007c6:	f000 f899 	bl	80008fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80007ca:	2303      	movs	r3, #3
 80007cc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007ce:	2301      	movs	r3, #1
 80007d0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 80007d2:	2304      	movs	r3, #4
 80007d4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d6:	463b      	mov	r3, r7
 80007d8:	4619      	mov	r1, r3
 80007da:	481b      	ldr	r0, [pc, #108]	; (8000848 <MX_ADC1_Init+0xf4>)
 80007dc:	f000 fde8 	bl	80013b0 <HAL_ADC_ConfigChannel>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 80007e6:	f000 f889 	bl	80008fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80007ea:	2305      	movs	r3, #5
 80007ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80007ee:	2302      	movs	r3, #2
 80007f0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007f2:	463b      	mov	r3, r7
 80007f4:	4619      	mov	r1, r3
 80007f6:	4814      	ldr	r0, [pc, #80]	; (8000848 <MX_ADC1_Init+0xf4>)
 80007f8:	f000 fdda 	bl	80013b0 <HAL_ADC_ConfigChannel>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000802:	f000 f87b 	bl	80008fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000806:	2306      	movs	r3, #6
 8000808:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800080a:	2303      	movs	r3, #3
 800080c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800080e:	463b      	mov	r3, r7
 8000810:	4619      	mov	r1, r3
 8000812:	480d      	ldr	r0, [pc, #52]	; (8000848 <MX_ADC1_Init+0xf4>)
 8000814:	f000 fdcc 	bl	80013b0 <HAL_ADC_ConfigChannel>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 800081e:	f000 f86d 	bl	80008fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000822:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <MX_ADC1_Init+0x100>)
 8000824:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000826:	2304      	movs	r3, #4
 8000828:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800082a:	463b      	mov	r3, r7
 800082c:	4619      	mov	r1, r3
 800082e:	4806      	ldr	r0, [pc, #24]	; (8000848 <MX_ADC1_Init+0xf4>)
 8000830:	f000 fdbe 	bl	80013b0 <HAL_ADC_ConfigChannel>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 800083a:	f000 f85f 	bl	80008fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800083e:	bf00      	nop
 8000840:	3710      	adds	r7, #16
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	2000008c 	.word	0x2000008c
 800084c:	40012000 	.word	0x40012000
 8000850:	0f000001 	.word	0x0f000001
 8000854:	10000012 	.word	0x10000012

08000858 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800085c:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <MX_USART1_UART_Init+0x4c>)
 800085e:	4a12      	ldr	r2, [pc, #72]	; (80008a8 <MX_USART1_UART_Init+0x50>)
 8000860:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000862:	4b10      	ldr	r3, [pc, #64]	; (80008a4 <MX_USART1_UART_Init+0x4c>)
 8000864:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000868:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800086a:	4b0e      	ldr	r3, [pc, #56]	; (80008a4 <MX_USART1_UART_Init+0x4c>)
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000870:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <MX_USART1_UART_Init+0x4c>)
 8000872:	2200      	movs	r2, #0
 8000874:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000876:	4b0b      	ldr	r3, [pc, #44]	; (80008a4 <MX_USART1_UART_Init+0x4c>)
 8000878:	2200      	movs	r2, #0
 800087a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800087c:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <MX_USART1_UART_Init+0x4c>)
 800087e:	220c      	movs	r2, #12
 8000880:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000882:	4b08      	ldr	r3, [pc, #32]	; (80008a4 <MX_USART1_UART_Init+0x4c>)
 8000884:	2200      	movs	r2, #0
 8000886:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000888:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <MX_USART1_UART_Init+0x4c>)
 800088a:	2200      	movs	r2, #0
 800088c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800088e:	4805      	ldr	r0, [pc, #20]	; (80008a4 <MX_USART1_UART_Init+0x4c>)
 8000890:	f001 fffe 	bl	8002890 <HAL_UART_Init>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800089a:	f000 f82f 	bl	80008fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	200000d4 	.word	0x200000d4
 80008a8:	40011000 	.word	0x40011000

080008ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	607b      	str	r3, [r7, #4]
 80008b6:	4b10      	ldr	r3, [pc, #64]	; (80008f8 <MX_GPIO_Init+0x4c>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a0f      	ldr	r2, [pc, #60]	; (80008f8 <MX_GPIO_Init+0x4c>)
 80008bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b0d      	ldr	r3, [pc, #52]	; (80008f8 <MX_GPIO_Init+0x4c>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	603b      	str	r3, [r7, #0]
 80008d2:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <MX_GPIO_Init+0x4c>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a08      	ldr	r2, [pc, #32]	; (80008f8 <MX_GPIO_Init+0x4c>)
 80008d8:	f043 0301 	orr.w	r3, r3, #1
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <MX_GPIO_Init+0x4c>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0301 	and.w	r3, r3, #1
 80008e6:	603b      	str	r3, [r7, #0]
 80008e8:	683b      	ldr	r3, [r7, #0]

}
 80008ea:	bf00      	nop
 80008ec:	370c      	adds	r7, #12
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	40023800 	.word	0x40023800

080008fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000900:	b672      	cpsid	i
}
 8000902:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000904:	e7fe      	b.n	8000904 <Error_Handler+0x8>
	...

08000908 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	607b      	str	r3, [r7, #4]
 8000912:	4b10      	ldr	r3, [pc, #64]	; (8000954 <HAL_MspInit+0x4c>)
 8000914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000916:	4a0f      	ldr	r2, [pc, #60]	; (8000954 <HAL_MspInit+0x4c>)
 8000918:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800091c:	6453      	str	r3, [r2, #68]	; 0x44
 800091e:	4b0d      	ldr	r3, [pc, #52]	; (8000954 <HAL_MspInit+0x4c>)
 8000920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000922:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000926:	607b      	str	r3, [r7, #4]
 8000928:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	603b      	str	r3, [r7, #0]
 800092e:	4b09      	ldr	r3, [pc, #36]	; (8000954 <HAL_MspInit+0x4c>)
 8000930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000932:	4a08      	ldr	r2, [pc, #32]	; (8000954 <HAL_MspInit+0x4c>)
 8000934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000938:	6413      	str	r3, [r2, #64]	; 0x40
 800093a:	4b06      	ldr	r3, [pc, #24]	; (8000954 <HAL_MspInit+0x4c>)
 800093c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000942:	603b      	str	r3, [r7, #0]
 8000944:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000946:	bf00      	nop
 8000948:	370c      	adds	r7, #12
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	40023800 	.word	0x40023800

08000958 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b08a      	sub	sp, #40	; 0x28
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000960:	f107 0314 	add.w	r3, r7, #20
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
 800096a:	609a      	str	r2, [r3, #8]
 800096c:	60da      	str	r2, [r3, #12]
 800096e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a17      	ldr	r2, [pc, #92]	; (80009d4 <HAL_ADC_MspInit+0x7c>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d127      	bne.n	80009ca <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	613b      	str	r3, [r7, #16]
 800097e:	4b16      	ldr	r3, [pc, #88]	; (80009d8 <HAL_ADC_MspInit+0x80>)
 8000980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000982:	4a15      	ldr	r2, [pc, #84]	; (80009d8 <HAL_ADC_MspInit+0x80>)
 8000984:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000988:	6453      	str	r3, [r2, #68]	; 0x44
 800098a:	4b13      	ldr	r3, [pc, #76]	; (80009d8 <HAL_ADC_MspInit+0x80>)
 800098c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800098e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000992:	613b      	str	r3, [r7, #16]
 8000994:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	60fb      	str	r3, [r7, #12]
 800099a:	4b0f      	ldr	r3, [pc, #60]	; (80009d8 <HAL_ADC_MspInit+0x80>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	4a0e      	ldr	r2, [pc, #56]	; (80009d8 <HAL_ADC_MspInit+0x80>)
 80009a0:	f043 0301 	orr.w	r3, r3, #1
 80009a4:	6313      	str	r3, [r2, #48]	; 0x30
 80009a6:	4b0c      	ldr	r3, [pc, #48]	; (80009d8 <HAL_ADC_MspInit+0x80>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	f003 0301 	and.w	r3, r3, #1
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6;
 80009b2:	2368      	movs	r3, #104	; 0x68
 80009b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009b6:	2303      	movs	r3, #3
 80009b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009be:	f107 0314 	add.w	r3, r7, #20
 80009c2:	4619      	mov	r1, r3
 80009c4:	4805      	ldr	r0, [pc, #20]	; (80009dc <HAL_ADC_MspInit+0x84>)
 80009c6:	f001 f8cf 	bl	8001b68 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80009ca:	bf00      	nop
 80009cc:	3728      	adds	r7, #40	; 0x28
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40012000 	.word	0x40012000
 80009d8:	40023800 	.word	0x40023800
 80009dc:	40020000 	.word	0x40020000

080009e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08a      	sub	sp, #40	; 0x28
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e8:	f107 0314 	add.w	r3, r7, #20
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
 80009f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a19      	ldr	r2, [pc, #100]	; (8000a64 <HAL_UART_MspInit+0x84>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d12c      	bne.n	8000a5c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	613b      	str	r3, [r7, #16]
 8000a06:	4b18      	ldr	r3, [pc, #96]	; (8000a68 <HAL_UART_MspInit+0x88>)
 8000a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0a:	4a17      	ldr	r2, [pc, #92]	; (8000a68 <HAL_UART_MspInit+0x88>)
 8000a0c:	f043 0310 	orr.w	r3, r3, #16
 8000a10:	6453      	str	r3, [r2, #68]	; 0x44
 8000a12:	4b15      	ldr	r3, [pc, #84]	; (8000a68 <HAL_UART_MspInit+0x88>)
 8000a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a16:	f003 0310 	and.w	r3, r3, #16
 8000a1a:	613b      	str	r3, [r7, #16]
 8000a1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	60fb      	str	r3, [r7, #12]
 8000a22:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <HAL_UART_MspInit+0x88>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a10      	ldr	r2, [pc, #64]	; (8000a68 <HAL_UART_MspInit+0x88>)
 8000a28:	f043 0301 	orr.w	r3, r3, #1
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <HAL_UART_MspInit+0x88>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0301 	and.w	r3, r3, #1
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a3a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a40:	2302      	movs	r3, #2
 8000a42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a48:	2303      	movs	r3, #3
 8000a4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a4c:	2307      	movs	r3, #7
 8000a4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	4619      	mov	r1, r3
 8000a56:	4805      	ldr	r0, [pc, #20]	; (8000a6c <HAL_UART_MspInit+0x8c>)
 8000a58:	f001 f886 	bl	8001b68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a5c:	bf00      	nop
 8000a5e:	3728      	adds	r7, #40	; 0x28
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	40011000 	.word	0x40011000
 8000a68:	40023800 	.word	0x40023800
 8000a6c:	40020000 	.word	0x40020000

08000a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <NMI_Handler+0x4>

08000a76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a7a:	e7fe      	b.n	8000a7a <HardFault_Handler+0x4>

08000a7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <MemManage_Handler+0x4>

08000a82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a86:	e7fe      	b.n	8000a86 <BusFault_Handler+0x4>

08000a88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <UsageFault_Handler+0x4>

08000a8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr

08000a9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aa0:	bf00      	nop
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr

08000aaa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr

08000ab8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000abc:	f000 f948 	bl	8000d50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ac0:	bf00      	nop
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000ac8:	4802      	ldr	r0, [pc, #8]	; (8000ad4 <ADC_IRQHandler+0x10>)
 8000aca:	f000 fb35 	bl	8001138 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	2000008c 	.word	0x2000008c

08000ad8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000adc:	4802      	ldr	r0, [pc, #8]	; (8000ae8 <USART1_IRQHandler+0x10>)
 8000ade:	f001 ffb7 	bl	8002a50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	200000d4 	.word	0x200000d4

08000aec <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b086      	sub	sp, #24
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	60f8      	str	r0, [r7, #12]
 8000af4:	60b9      	str	r1, [r7, #8]
 8000af6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000af8:	2300      	movs	r3, #0
 8000afa:	617b      	str	r3, [r7, #20]
 8000afc:	e00a      	b.n	8000b14 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000afe:	f3af 8000 	nop.w
 8000b02:	4601      	mov	r1, r0
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	1c5a      	adds	r2, r3, #1
 8000b08:	60ba      	str	r2, [r7, #8]
 8000b0a:	b2ca      	uxtb	r2, r1
 8000b0c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	3301      	adds	r3, #1
 8000b12:	617b      	str	r3, [r7, #20]
 8000b14:	697a      	ldr	r2, [r7, #20]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	dbf0      	blt.n	8000afe <_read+0x12>
	}

return len;
 8000b1c:	687b      	ldr	r3, [r7, #4]
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3718      	adds	r7, #24
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b086      	sub	sp, #24
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	60f8      	str	r0, [r7, #12]
 8000b2e:	60b9      	str	r1, [r7, #8]
 8000b30:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b32:	2300      	movs	r3, #0
 8000b34:	617b      	str	r3, [r7, #20]
 8000b36:	e009      	b.n	8000b4c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	1c5a      	adds	r2, r3, #1
 8000b3c:	60ba      	str	r2, [r7, #8]
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff fd27 	bl	8000594 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	617b      	str	r3, [r7, #20]
 8000b4c:	697a      	ldr	r2, [r7, #20]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	dbf1      	blt.n	8000b38 <_write+0x12>
	}
	return len;
 8000b54:	687b      	ldr	r3, [r7, #4]
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3718      	adds	r7, #24
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <_close>:

int _close(int file)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	b083      	sub	sp, #12
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	6078      	str	r0, [r7, #4]
	return -1;
 8000b66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	370c      	adds	r7, #12
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr

08000b76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b76:	b480      	push	{r7}
 8000b78:	b083      	sub	sp, #12
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	6078      	str	r0, [r7, #4]
 8000b7e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b86:	605a      	str	r2, [r3, #4]
	return 0;
 8000b88:	2300      	movs	r3, #0
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr

08000b96 <_isatty>:

int _isatty(int file)
{
 8000b96:	b480      	push	{r7}
 8000b98:	b083      	sub	sp, #12
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	6078      	str	r0, [r7, #4]
	return 1;
 8000b9e:	2301      	movs	r3, #1
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	370c      	adds	r7, #12
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr

08000bac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b085      	sub	sp, #20
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	60f8      	str	r0, [r7, #12]
 8000bb4:	60b9      	str	r1, [r7, #8]
 8000bb6:	607a      	str	r2, [r7, #4]
	return 0;
 8000bb8:	2300      	movs	r3, #0
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3714      	adds	r7, #20
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
	...

08000bc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bd0:	4a14      	ldr	r2, [pc, #80]	; (8000c24 <_sbrk+0x5c>)
 8000bd2:	4b15      	ldr	r3, [pc, #84]	; (8000c28 <_sbrk+0x60>)
 8000bd4:	1ad3      	subs	r3, r2, r3
 8000bd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bdc:	4b13      	ldr	r3, [pc, #76]	; (8000c2c <_sbrk+0x64>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d102      	bne.n	8000bea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000be4:	4b11      	ldr	r3, [pc, #68]	; (8000c2c <_sbrk+0x64>)
 8000be6:	4a12      	ldr	r2, [pc, #72]	; (8000c30 <_sbrk+0x68>)
 8000be8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bea:	4b10      	ldr	r3, [pc, #64]	; (8000c2c <_sbrk+0x64>)
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d207      	bcs.n	8000c08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bf8:	f002 fe5e 	bl	80038b8 <__errno>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	220c      	movs	r2, #12
 8000c00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c02:	f04f 33ff 	mov.w	r3, #4294967295
 8000c06:	e009      	b.n	8000c1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c08:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <_sbrk+0x64>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c0e:	4b07      	ldr	r3, [pc, #28]	; (8000c2c <_sbrk+0x64>)
 8000c10:	681a      	ldr	r2, [r3, #0]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4413      	add	r3, r2
 8000c16:	4a05      	ldr	r2, [pc, #20]	; (8000c2c <_sbrk+0x64>)
 8000c18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c1a:	68fb      	ldr	r3, [r7, #12]
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	3718      	adds	r7, #24
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	20030000 	.word	0x20030000
 8000c28:	00000400 	.word	0x00000400
 8000c2c:	2000012c 	.word	0x2000012c
 8000c30:	20000148 	.word	0x20000148

08000c34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000c34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c6c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c38:	480d      	ldr	r0, [pc, #52]	; (8000c70 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c3a:	490e      	ldr	r1, [pc, #56]	; (8000c74 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c3c:	4a0e      	ldr	r2, [pc, #56]	; (8000c78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c40:	e002      	b.n	8000c48 <LoopCopyDataInit>

08000c42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c46:	3304      	adds	r3, #4

08000c48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c4c:	d3f9      	bcc.n	8000c42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c4e:	4a0b      	ldr	r2, [pc, #44]	; (8000c7c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c50:	4c0b      	ldr	r4, [pc, #44]	; (8000c80 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c54:	e001      	b.n	8000c5a <LoopFillZerobss>

08000c56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c58:	3204      	adds	r2, #4

08000c5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c5c:	d3fb      	bcc.n	8000c56 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c5e:	f000 f813 	bl	8000c88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c62:	f002 fe2f 	bl	80038c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c66:	f7ff fca7 	bl	80005b8 <main>
  bx  lr    
 8000c6a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000c6c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000c70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c74:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c78:	08004a04 	.word	0x08004a04
  ldr r2, =_sbss
 8000c7c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c80:	20000144 	.word	0x20000144

08000c84 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c84:	e7fe      	b.n	8000c84 <CAN1_RX0_IRQHandler>
	...

08000c88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c8c:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <SystemInit+0x20>)
 8000c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c92:	4a05      	ldr	r2, [pc, #20]	; (8000ca8 <SystemInit+0x20>)
 8000c94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cb0:	4b0e      	ldr	r3, [pc, #56]	; (8000cec <HAL_Init+0x40>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a0d      	ldr	r2, [pc, #52]	; (8000cec <HAL_Init+0x40>)
 8000cb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cbc:	4b0b      	ldr	r3, [pc, #44]	; (8000cec <HAL_Init+0x40>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a0a      	ldr	r2, [pc, #40]	; (8000cec <HAL_Init+0x40>)
 8000cc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cc8:	4b08      	ldr	r3, [pc, #32]	; (8000cec <HAL_Init+0x40>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a07      	ldr	r2, [pc, #28]	; (8000cec <HAL_Init+0x40>)
 8000cce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cd4:	2003      	movs	r0, #3
 8000cd6:	f000 fe73 	bl	80019c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cda:	200f      	movs	r0, #15
 8000cdc:	f000 f808 	bl	8000cf0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ce0:	f7ff fe12 	bl	8000908 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ce4:	2300      	movs	r3, #0
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40023c00 	.word	0x40023c00

08000cf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cf8:	4b12      	ldr	r3, [pc, #72]	; (8000d44 <HAL_InitTick+0x54>)
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	4b12      	ldr	r3, [pc, #72]	; (8000d48 <HAL_InitTick+0x58>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	4619      	mov	r1, r3
 8000d02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f000 fe8b 	bl	8001a2a <HAL_SYSTICK_Config>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	e00e      	b.n	8000d3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2b0f      	cmp	r3, #15
 8000d22:	d80a      	bhi.n	8000d3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d24:	2200      	movs	r2, #0
 8000d26:	6879      	ldr	r1, [r7, #4]
 8000d28:	f04f 30ff 	mov.w	r0, #4294967295
 8000d2c:	f000 fe53 	bl	80019d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d30:	4a06      	ldr	r2, [pc, #24]	; (8000d4c <HAL_InitTick+0x5c>)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d36:	2300      	movs	r3, #0
 8000d38:	e000      	b.n	8000d3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d3a:	2301      	movs	r3, #1
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	20000000 	.word	0x20000000
 8000d48:	20000008 	.word	0x20000008
 8000d4c:	20000004 	.word	0x20000004

08000d50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d54:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <HAL_IncTick+0x20>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	461a      	mov	r2, r3
 8000d5a:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <HAL_IncTick+0x24>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4413      	add	r3, r2
 8000d60:	4a04      	ldr	r2, [pc, #16]	; (8000d74 <HAL_IncTick+0x24>)
 8000d62:	6013      	str	r3, [r2, #0]
}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	20000008 	.word	0x20000008
 8000d74:	20000130 	.word	0x20000130

08000d78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d7c:	4b03      	ldr	r3, [pc, #12]	; (8000d8c <HAL_GetTick+0x14>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	20000130 	.word	0x20000130

08000d90 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d101      	bne.n	8000da6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
 8000da4:	e033      	b.n	8000e0e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d109      	bne.n	8000dc2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	f7ff fdd2 	bl	8000958 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2200      	movs	r2, #0
 8000db8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc6:	f003 0310 	and.w	r3, r3, #16
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d118      	bne.n	8000e00 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000dd6:	f023 0302 	bic.w	r3, r3, #2
 8000dda:	f043 0202 	orr.w	r2, r3, #2
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	f000 fc16 	bl	8001614 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2200      	movs	r2, #0
 8000dec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df2:	f023 0303 	bic.w	r3, r3, #3
 8000df6:	f043 0201 	orr.w	r2, r3, #1
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	641a      	str	r2, [r3, #64]	; 0x40
 8000dfe:	e001      	b.n	8000e04 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000e00:	2301      	movs	r3, #1
 8000e02:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2200      	movs	r2, #0
 8000e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3710      	adds	r7, #16
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
	...

08000e18 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b085      	sub	sp, #20
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000e20:	2300      	movs	r3, #0
 8000e22:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d101      	bne.n	8000e32 <HAL_ADC_Start+0x1a>
 8000e2e:	2302      	movs	r3, #2
 8000e30:	e0b2      	b.n	8000f98 <HAL_ADC_Start+0x180>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2201      	movs	r2, #1
 8000e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	689b      	ldr	r3, [r3, #8]
 8000e40:	f003 0301 	and.w	r3, r3, #1
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d018      	beq.n	8000e7a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	689a      	ldr	r2, [r3, #8]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f042 0201 	orr.w	r2, r2, #1
 8000e56:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000e58:	4b52      	ldr	r3, [pc, #328]	; (8000fa4 <HAL_ADC_Start+0x18c>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a52      	ldr	r2, [pc, #328]	; (8000fa8 <HAL_ADC_Start+0x190>)
 8000e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e62:	0c9a      	lsrs	r2, r3, #18
 8000e64:	4613      	mov	r3, r2
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	4413      	add	r3, r2
 8000e6a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000e6c:	e002      	b.n	8000e74 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000e6e:	68bb      	ldr	r3, [r7, #8]
 8000e70:	3b01      	subs	r3, #1
 8000e72:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d1f9      	bne.n	8000e6e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	689b      	ldr	r3, [r3, #8]
 8000e80:	f003 0301 	and.w	r3, r3, #1
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d17a      	bne.n	8000f7e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000e90:	f023 0301 	bic.w	r3, r3, #1
 8000e94:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d007      	beq.n	8000eba <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000eb2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ec2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000ec6:	d106      	bne.n	8000ed6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ecc:	f023 0206 	bic.w	r2, r3, #6
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	645a      	str	r2, [r3, #68]	; 0x44
 8000ed4:	e002      	b.n	8000edc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2200      	movs	r2, #0
 8000eda:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2200      	movs	r2, #0
 8000ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000ee4:	4b31      	ldr	r3, [pc, #196]	; (8000fac <HAL_ADC_Start+0x194>)
 8000ee6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000ef0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f003 031f 	and.w	r3, r3, #31
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d12a      	bne.n	8000f54 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a2b      	ldr	r2, [pc, #172]	; (8000fb0 <HAL_ADC_Start+0x198>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d015      	beq.n	8000f34 <HAL_ADC_Start+0x11c>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a29      	ldr	r2, [pc, #164]	; (8000fb4 <HAL_ADC_Start+0x19c>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d105      	bne.n	8000f1e <HAL_ADC_Start+0x106>
 8000f12:	4b26      	ldr	r3, [pc, #152]	; (8000fac <HAL_ADC_Start+0x194>)
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	f003 031f 	and.w	r3, r3, #31
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d00a      	beq.n	8000f34 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a25      	ldr	r2, [pc, #148]	; (8000fb8 <HAL_ADC_Start+0x1a0>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d136      	bne.n	8000f96 <HAL_ADC_Start+0x17e>
 8000f28:	4b20      	ldr	r3, [pc, #128]	; (8000fac <HAL_ADC_Start+0x194>)
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f003 0310 	and.w	r3, r3, #16
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d130      	bne.n	8000f96 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d129      	bne.n	8000f96 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	689a      	ldr	r2, [r3, #8]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000f50:	609a      	str	r2, [r3, #8]
 8000f52:	e020      	b.n	8000f96 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a15      	ldr	r2, [pc, #84]	; (8000fb0 <HAL_ADC_Start+0x198>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d11b      	bne.n	8000f96 <HAL_ADC_Start+0x17e>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	689b      	ldr	r3, [r3, #8]
 8000f64:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d114      	bne.n	8000f96 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	689a      	ldr	r2, [r3, #8]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	e00b      	b.n	8000f96 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f82:	f043 0210 	orr.w	r2, r3, #16
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8e:	f043 0201 	orr.w	r2, r3, #1
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8000f96:	2300      	movs	r3, #0
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3714      	adds	r7, #20
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	20000000 	.word	0x20000000
 8000fa8:	431bde83 	.word	0x431bde83
 8000fac:	40012300 	.word	0x40012300
 8000fb0:	40012000 	.word	0x40012000
 8000fb4:	40012100 	.word	0x40012100
 8000fb8:	40012200 	.word	0x40012200

08000fbc <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d101      	bne.n	8000fd2 <HAL_ADC_Stop+0x16>
 8000fce:	2302      	movs	r3, #2
 8000fd0:	e021      	b.n	8001016 <HAL_ADC_Stop+0x5a>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	689a      	ldr	r2, [r3, #8]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f022 0201 	bic.w	r2, r2, #1
 8000fe8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	f003 0301 	and.w	r3, r3, #1
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d109      	bne.n	800100c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001000:	f023 0301 	bic.w	r3, r3, #1
 8001004:	f043 0201 	orr.w	r2, r3, #1
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2200      	movs	r2, #0
 8001010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001014:	2300      	movs	r3, #0
}
 8001016:	4618      	mov	r0, r3
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr

08001022 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	b084      	sub	sp, #16
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
 800102a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800102c:	2300      	movs	r3, #0
 800102e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800103a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800103e:	d113      	bne.n	8001068 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800104a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800104e:	d10b      	bne.n	8001068 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001054:	f043 0220 	orr.w	r2, r3, #32
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2200      	movs	r2, #0
 8001060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001064:	2301      	movs	r3, #1
 8001066:	e063      	b.n	8001130 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001068:	f7ff fe86 	bl	8000d78 <HAL_GetTick>
 800106c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800106e:	e021      	b.n	80010b4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001076:	d01d      	beq.n	80010b4 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d007      	beq.n	800108e <HAL_ADC_PollForConversion+0x6c>
 800107e:	f7ff fe7b 	bl	8000d78 <HAL_GetTick>
 8001082:	4602      	mov	r2, r0
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	1ad3      	subs	r3, r2, r3
 8001088:	683a      	ldr	r2, [r7, #0]
 800108a:	429a      	cmp	r2, r3
 800108c:	d212      	bcs.n	80010b4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f003 0302 	and.w	r3, r3, #2
 8001098:	2b02      	cmp	r3, #2
 800109a:	d00b      	beq.n	80010b4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a0:	f043 0204 	orr.w	r2, r3, #4
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2200      	movs	r2, #0
 80010ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80010b0:	2303      	movs	r3, #3
 80010b2:	e03d      	b.n	8001130 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f003 0302 	and.w	r3, r3, #2
 80010be:	2b02      	cmp	r3, #2
 80010c0:	d1d6      	bne.n	8001070 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f06f 0212 	mvn.w	r2, #18
 80010ca:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d123      	bne.n	800112e <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d11f      	bne.n	800112e <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010f4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d006      	beq.n	800110a <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001106:	2b00      	cmp	r3, #0
 8001108:	d111      	bne.n	800112e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d105      	bne.n	800112e <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001126:	f043 0201 	orr.w	r2, r3, #1
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800112e:	2300      	movs	r3, #0
}
 8001130:	4618      	mov	r0, r3
 8001132:	3710      	adds	r7, #16
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}

08001138 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001140:	2300      	movs	r3, #0
 8001142:	617b      	str	r3, [r7, #20]
 8001144:	2300      	movs	r3, #0
 8001146:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	f003 0302 	and.w	r3, r3, #2
 800115e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	f003 0320 	and.w	r3, r3, #32
 8001166:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d049      	beq.n	8001202 <HAL_ADC_IRQHandler+0xca>
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d046      	beq.n	8001202 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001178:	f003 0310 	and.w	r3, r3, #16
 800117c:	2b00      	cmp	r3, #0
 800117e:	d105      	bne.n	800118c <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001184:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d12b      	bne.n	80011f2 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d127      	bne.n	80011f2 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011a8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d006      	beq.n	80011be <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d119      	bne.n	80011f2 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	685a      	ldr	r2, [r3, #4]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f022 0220 	bic.w	r2, r2, #32
 80011cc:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d105      	bne.n	80011f2 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ea:	f043 0201 	orr.w	r2, r3, #1
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f000 f8bd 	bl	8001372 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f06f 0212 	mvn.w	r2, #18
 8001200:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	f003 0304 	and.w	r3, r3, #4
 8001208:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001210:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d057      	beq.n	80012c8 <HAL_ADC_IRQHandler+0x190>
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d054      	beq.n	80012c8 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001222:	f003 0310 	and.w	r3, r3, #16
 8001226:	2b00      	cmp	r3, #0
 8001228:	d105      	bne.n	8001236 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d139      	bne.n	80012b8 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800124a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800124e:	2b00      	cmp	r3, #0
 8001250:	d006      	beq.n	8001260 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800125c:	2b00      	cmp	r3, #0
 800125e:	d12b      	bne.n	80012b8 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800126a:	2b00      	cmp	r3, #0
 800126c:	d124      	bne.n	80012b8 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001278:	2b00      	cmp	r3, #0
 800127a:	d11d      	bne.n	80012b8 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001280:	2b00      	cmp	r3, #0
 8001282:	d119      	bne.n	80012b8 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	685a      	ldr	r2, [r3, #4]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001292:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001298:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d105      	bne.n	80012b8 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b0:	f043 0201 	orr.w	r2, r3, #1
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f000 faa7 	bl	800180c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f06f 020c 	mvn.w	r2, #12
 80012c6:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	f003 0301 	and.w	r3, r3, #1
 80012ce:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012d6:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d017      	beq.n	800130e <HAL_ADC_IRQHandler+0x1d6>
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d014      	beq.n	800130e <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d10d      	bne.n	800130e <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f000 f841 	bl	8001386 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f06f 0201 	mvn.w	r2, #1
 800130c:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	f003 0320 	and.w	r3, r3, #32
 8001314:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800131c:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d015      	beq.n	8001350 <HAL_ADC_IRQHandler+0x218>
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d012      	beq.n	8001350 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132e:	f043 0202 	orr.w	r2, r3, #2
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f06f 0220 	mvn.w	r2, #32
 800133e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f000 f82a 	bl	800139a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f06f 0220 	mvn.w	r2, #32
 800134e:	601a      	str	r2, [r3, #0]
  }
}
 8001350:	bf00      	nop
 8001352:	3718      	adds	r7, #24
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001366:	4618      	mov	r0, r3
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr

08001372 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001372:	b480      	push	{r7}
 8001374:	b083      	sub	sp, #12
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800137a:	bf00      	nop
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr

08001386 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001386:	b480      	push	{r7}
 8001388:	b083      	sub	sp, #12
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800138e:	bf00      	nop
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr

0800139a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800139a:	b480      	push	{r7}
 800139c:	b083      	sub	sp, #12
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80013a2:	bf00      	nop
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
	...

080013b0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80013ba:	2300      	movs	r3, #0
 80013bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d101      	bne.n	80013cc <HAL_ADC_ConfigChannel+0x1c>
 80013c8:	2302      	movs	r3, #2
 80013ca:	e113      	b.n	80015f4 <HAL_ADC_ConfigChannel+0x244>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2201      	movs	r2, #1
 80013d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2b09      	cmp	r3, #9
 80013da:	d925      	bls.n	8001428 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	68d9      	ldr	r1, [r3, #12]
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	461a      	mov	r2, r3
 80013ea:	4613      	mov	r3, r2
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	4413      	add	r3, r2
 80013f0:	3b1e      	subs	r3, #30
 80013f2:	2207      	movs	r2, #7
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	43da      	mvns	r2, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	400a      	ands	r2, r1
 8001400:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	68d9      	ldr	r1, [r3, #12]
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	689a      	ldr	r2, [r3, #8]
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	b29b      	uxth	r3, r3
 8001412:	4618      	mov	r0, r3
 8001414:	4603      	mov	r3, r0
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	4403      	add	r3, r0
 800141a:	3b1e      	subs	r3, #30
 800141c:	409a      	lsls	r2, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	430a      	orrs	r2, r1
 8001424:	60da      	str	r2, [r3, #12]
 8001426:	e022      	b.n	800146e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	6919      	ldr	r1, [r3, #16]
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	b29b      	uxth	r3, r3
 8001434:	461a      	mov	r2, r3
 8001436:	4613      	mov	r3, r2
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	4413      	add	r3, r2
 800143c:	2207      	movs	r2, #7
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	43da      	mvns	r2, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	400a      	ands	r2, r1
 800144a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	6919      	ldr	r1, [r3, #16]
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	689a      	ldr	r2, [r3, #8]
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	b29b      	uxth	r3, r3
 800145c:	4618      	mov	r0, r3
 800145e:	4603      	mov	r3, r0
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	4403      	add	r3, r0
 8001464:	409a      	lsls	r2, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	430a      	orrs	r2, r1
 800146c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	2b06      	cmp	r3, #6
 8001474:	d824      	bhi.n	80014c0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685a      	ldr	r2, [r3, #4]
 8001480:	4613      	mov	r3, r2
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	4413      	add	r3, r2
 8001486:	3b05      	subs	r3, #5
 8001488:	221f      	movs	r2, #31
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	43da      	mvns	r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	400a      	ands	r2, r1
 8001496:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	4618      	mov	r0, r3
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685a      	ldr	r2, [r3, #4]
 80014aa:	4613      	mov	r3, r2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	4413      	add	r3, r2
 80014b0:	3b05      	subs	r3, #5
 80014b2:	fa00 f203 	lsl.w	r2, r0, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	430a      	orrs	r2, r1
 80014bc:	635a      	str	r2, [r3, #52]	; 0x34
 80014be:	e04c      	b.n	800155a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	2b0c      	cmp	r3, #12
 80014c6:	d824      	bhi.n	8001512 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685a      	ldr	r2, [r3, #4]
 80014d2:	4613      	mov	r3, r2
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	4413      	add	r3, r2
 80014d8:	3b23      	subs	r3, #35	; 0x23
 80014da:	221f      	movs	r2, #31
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	43da      	mvns	r2, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	400a      	ands	r2, r1
 80014e8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	4618      	mov	r0, r3
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685a      	ldr	r2, [r3, #4]
 80014fc:	4613      	mov	r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	4413      	add	r3, r2
 8001502:	3b23      	subs	r3, #35	; 0x23
 8001504:	fa00 f203 	lsl.w	r2, r0, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	430a      	orrs	r2, r1
 800150e:	631a      	str	r2, [r3, #48]	; 0x30
 8001510:	e023      	b.n	800155a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685a      	ldr	r2, [r3, #4]
 800151c:	4613      	mov	r3, r2
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	4413      	add	r3, r2
 8001522:	3b41      	subs	r3, #65	; 0x41
 8001524:	221f      	movs	r2, #31
 8001526:	fa02 f303 	lsl.w	r3, r2, r3
 800152a:	43da      	mvns	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	400a      	ands	r2, r1
 8001532:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	b29b      	uxth	r3, r3
 8001540:	4618      	mov	r0, r3
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685a      	ldr	r2, [r3, #4]
 8001546:	4613      	mov	r3, r2
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	4413      	add	r3, r2
 800154c:	3b41      	subs	r3, #65	; 0x41
 800154e:	fa00 f203 	lsl.w	r2, r0, r3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	430a      	orrs	r2, r1
 8001558:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800155a:	4b29      	ldr	r3, [pc, #164]	; (8001600 <HAL_ADC_ConfigChannel+0x250>)
 800155c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a28      	ldr	r2, [pc, #160]	; (8001604 <HAL_ADC_ConfigChannel+0x254>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d10f      	bne.n	8001588 <HAL_ADC_ConfigChannel+0x1d8>
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2b12      	cmp	r3, #18
 800156e:	d10b      	bne.n	8001588 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a1d      	ldr	r2, [pc, #116]	; (8001604 <HAL_ADC_ConfigChannel+0x254>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d12b      	bne.n	80015ea <HAL_ADC_ConfigChannel+0x23a>
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a1c      	ldr	r2, [pc, #112]	; (8001608 <HAL_ADC_ConfigChannel+0x258>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d003      	beq.n	80015a4 <HAL_ADC_ConfigChannel+0x1f4>
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2b11      	cmp	r3, #17
 80015a2:	d122      	bne.n	80015ea <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a11      	ldr	r2, [pc, #68]	; (8001608 <HAL_ADC_ConfigChannel+0x258>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d111      	bne.n	80015ea <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80015c6:	4b11      	ldr	r3, [pc, #68]	; (800160c <HAL_ADC_ConfigChannel+0x25c>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a11      	ldr	r2, [pc, #68]	; (8001610 <HAL_ADC_ConfigChannel+0x260>)
 80015cc:	fba2 2303 	umull	r2, r3, r2, r3
 80015d0:	0c9a      	lsrs	r2, r3, #18
 80015d2:	4613      	mov	r3, r2
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	4413      	add	r3, r2
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015dc:	e002      	b.n	80015e4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	3b01      	subs	r3, #1
 80015e2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d1f9      	bne.n	80015de <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2200      	movs	r2, #0
 80015ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80015f2:	2300      	movs	r3, #0
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3714      	adds	r7, #20
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	40012300 	.word	0x40012300
 8001604:	40012000 	.word	0x40012000
 8001608:	10000012 	.word	0x10000012
 800160c:	20000000 	.word	0x20000000
 8001610:	431bde83 	.word	0x431bde83

08001614 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001614:	b480      	push	{r7}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800161c:	4b79      	ldr	r3, [pc, #484]	; (8001804 <ADC_Init+0x1f0>)
 800161e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	685a      	ldr	r2, [r3, #4]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	431a      	orrs	r2, r3
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	685a      	ldr	r2, [r3, #4]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001648:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	6859      	ldr	r1, [r3, #4]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	691b      	ldr	r3, [r3, #16]
 8001654:	021a      	lsls	r2, r3, #8
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	430a      	orrs	r2, r1
 800165c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	685a      	ldr	r2, [r3, #4]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800166c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	6859      	ldr	r1, [r3, #4]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	689a      	ldr	r2, [r3, #8]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	430a      	orrs	r2, r1
 800167e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	689a      	ldr	r2, [r3, #8]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800168e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	6899      	ldr	r1, [r3, #8]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	68da      	ldr	r2, [r3, #12]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	430a      	orrs	r2, r1
 80016a0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a6:	4a58      	ldr	r2, [pc, #352]	; (8001808 <ADC_Init+0x1f4>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d022      	beq.n	80016f2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	689a      	ldr	r2, [r3, #8]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016ba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	6899      	ldr	r1, [r3, #8]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	430a      	orrs	r2, r1
 80016cc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	689a      	ldr	r2, [r3, #8]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	6899      	ldr	r1, [r3, #8]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	430a      	orrs	r2, r1
 80016ee:	609a      	str	r2, [r3, #8]
 80016f0:	e00f      	b.n	8001712 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	689a      	ldr	r2, [r3, #8]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001700:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	689a      	ldr	r2, [r3, #8]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001710:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	689a      	ldr	r2, [r3, #8]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f022 0202 	bic.w	r2, r2, #2
 8001720:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	6899      	ldr	r1, [r3, #8]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	7e1b      	ldrb	r3, [r3, #24]
 800172c:	005a      	lsls	r2, r3, #1
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	430a      	orrs	r2, r1
 8001734:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	f893 3020 	ldrb.w	r3, [r3, #32]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d01b      	beq.n	8001778 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	685a      	ldr	r2, [r3, #4]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800174e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	685a      	ldr	r2, [r3, #4]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800175e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	6859      	ldr	r1, [r3, #4]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176a:	3b01      	subs	r3, #1
 800176c:	035a      	lsls	r2, r3, #13
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	430a      	orrs	r2, r1
 8001774:	605a      	str	r2, [r3, #4]
 8001776:	e007      	b.n	8001788 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	685a      	ldr	r2, [r3, #4]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001786:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001796:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	69db      	ldr	r3, [r3, #28]
 80017a2:	3b01      	subs	r3, #1
 80017a4:	051a      	lsls	r2, r3, #20
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	430a      	orrs	r2, r1
 80017ac:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	689a      	ldr	r2, [r3, #8]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80017bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	6899      	ldr	r1, [r3, #8]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80017ca:	025a      	lsls	r2, r3, #9
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	430a      	orrs	r2, r1
 80017d2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	689a      	ldr	r2, [r3, #8]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	6899      	ldr	r1, [r3, #8]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	695b      	ldr	r3, [r3, #20]
 80017ee:	029a      	lsls	r2, r3, #10
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	430a      	orrs	r2, r1
 80017f6:	609a      	str	r2, [r3, #8]
}
 80017f8:	bf00      	nop
 80017fa:	3714      	adds	r7, #20
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	40012300 	.word	0x40012300
 8001808:	0f000001 	.word	0x0f000001

0800180c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001814:	bf00      	nop
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001820:	b480      	push	{r7}
 8001822:	b085      	sub	sp, #20
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f003 0307 	and.w	r3, r3, #7
 800182e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001830:	4b0c      	ldr	r3, [pc, #48]	; (8001864 <__NVIC_SetPriorityGrouping+0x44>)
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001836:	68ba      	ldr	r2, [r7, #8]
 8001838:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800183c:	4013      	ands	r3, r2
 800183e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001848:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800184c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001850:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001852:	4a04      	ldr	r2, [pc, #16]	; (8001864 <__NVIC_SetPriorityGrouping+0x44>)
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	60d3      	str	r3, [r2, #12]
}
 8001858:	bf00      	nop
 800185a:	3714      	adds	r7, #20
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	e000ed00 	.word	0xe000ed00

08001868 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800186c:	4b04      	ldr	r3, [pc, #16]	; (8001880 <__NVIC_GetPriorityGrouping+0x18>)
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	0a1b      	lsrs	r3, r3, #8
 8001872:	f003 0307 	and.w	r3, r3, #7
}
 8001876:	4618      	mov	r0, r3
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	e000ed00 	.word	0xe000ed00

08001884 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800188e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001892:	2b00      	cmp	r3, #0
 8001894:	db0b      	blt.n	80018ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001896:	79fb      	ldrb	r3, [r7, #7]
 8001898:	f003 021f 	and.w	r2, r3, #31
 800189c:	4907      	ldr	r1, [pc, #28]	; (80018bc <__NVIC_EnableIRQ+0x38>)
 800189e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a2:	095b      	lsrs	r3, r3, #5
 80018a4:	2001      	movs	r0, #1
 80018a6:	fa00 f202 	lsl.w	r2, r0, r2
 80018aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018ae:	bf00      	nop
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	e000e100 	.word	0xe000e100

080018c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	6039      	str	r1, [r7, #0]
 80018ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	db0a      	blt.n	80018ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	b2da      	uxtb	r2, r3
 80018d8:	490c      	ldr	r1, [pc, #48]	; (800190c <__NVIC_SetPriority+0x4c>)
 80018da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018de:	0112      	lsls	r2, r2, #4
 80018e0:	b2d2      	uxtb	r2, r2
 80018e2:	440b      	add	r3, r1
 80018e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018e8:	e00a      	b.n	8001900 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	b2da      	uxtb	r2, r3
 80018ee:	4908      	ldr	r1, [pc, #32]	; (8001910 <__NVIC_SetPriority+0x50>)
 80018f0:	79fb      	ldrb	r3, [r7, #7]
 80018f2:	f003 030f 	and.w	r3, r3, #15
 80018f6:	3b04      	subs	r3, #4
 80018f8:	0112      	lsls	r2, r2, #4
 80018fa:	b2d2      	uxtb	r2, r2
 80018fc:	440b      	add	r3, r1
 80018fe:	761a      	strb	r2, [r3, #24]
}
 8001900:	bf00      	nop
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr
 800190c:	e000e100 	.word	0xe000e100
 8001910:	e000ed00 	.word	0xe000ed00

08001914 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001914:	b480      	push	{r7}
 8001916:	b089      	sub	sp, #36	; 0x24
 8001918:	af00      	add	r7, sp, #0
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	60b9      	str	r1, [r7, #8]
 800191e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f003 0307 	and.w	r3, r3, #7
 8001926:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	f1c3 0307 	rsb	r3, r3, #7
 800192e:	2b04      	cmp	r3, #4
 8001930:	bf28      	it	cs
 8001932:	2304      	movcs	r3, #4
 8001934:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	3304      	adds	r3, #4
 800193a:	2b06      	cmp	r3, #6
 800193c:	d902      	bls.n	8001944 <NVIC_EncodePriority+0x30>
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	3b03      	subs	r3, #3
 8001942:	e000      	b.n	8001946 <NVIC_EncodePriority+0x32>
 8001944:	2300      	movs	r3, #0
 8001946:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001948:	f04f 32ff 	mov.w	r2, #4294967295
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	43da      	mvns	r2, r3
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	401a      	ands	r2, r3
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800195c:	f04f 31ff 	mov.w	r1, #4294967295
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	fa01 f303 	lsl.w	r3, r1, r3
 8001966:	43d9      	mvns	r1, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800196c:	4313      	orrs	r3, r2
         );
}
 800196e:	4618      	mov	r0, r3
 8001970:	3724      	adds	r7, #36	; 0x24
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
	...

0800197c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	3b01      	subs	r3, #1
 8001988:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800198c:	d301      	bcc.n	8001992 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800198e:	2301      	movs	r3, #1
 8001990:	e00f      	b.n	80019b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001992:	4a0a      	ldr	r2, [pc, #40]	; (80019bc <SysTick_Config+0x40>)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3b01      	subs	r3, #1
 8001998:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800199a:	210f      	movs	r1, #15
 800199c:	f04f 30ff 	mov.w	r0, #4294967295
 80019a0:	f7ff ff8e 	bl	80018c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019a4:	4b05      	ldr	r3, [pc, #20]	; (80019bc <SysTick_Config+0x40>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019aa:	4b04      	ldr	r3, [pc, #16]	; (80019bc <SysTick_Config+0x40>)
 80019ac:	2207      	movs	r2, #7
 80019ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	e000e010 	.word	0xe000e010

080019c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f7ff ff29 	bl	8001820 <__NVIC_SetPriorityGrouping>
}
 80019ce:	bf00      	nop
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b086      	sub	sp, #24
 80019da:	af00      	add	r7, sp, #0
 80019dc:	4603      	mov	r3, r0
 80019de:	60b9      	str	r1, [r7, #8]
 80019e0:	607a      	str	r2, [r7, #4]
 80019e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019e4:	2300      	movs	r3, #0
 80019e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019e8:	f7ff ff3e 	bl	8001868 <__NVIC_GetPriorityGrouping>
 80019ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	68b9      	ldr	r1, [r7, #8]
 80019f2:	6978      	ldr	r0, [r7, #20]
 80019f4:	f7ff ff8e 	bl	8001914 <NVIC_EncodePriority>
 80019f8:	4602      	mov	r2, r0
 80019fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019fe:	4611      	mov	r1, r2
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff ff5d 	bl	80018c0 <__NVIC_SetPriority>
}
 8001a06:	bf00      	nop
 8001a08:	3718      	adds	r7, #24
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b082      	sub	sp, #8
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	4603      	mov	r3, r0
 8001a16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff ff31 	bl	8001884 <__NVIC_EnableIRQ>
}
 8001a22:	bf00      	nop
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b082      	sub	sp, #8
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f7ff ffa2 	bl	800197c <SysTick_Config>
 8001a38:	4603      	mov	r3, r0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b084      	sub	sp, #16
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a4e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001a50:	f7ff f992 	bl	8000d78 <HAL_GetTick>
 8001a54:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d008      	beq.n	8001a74 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2280      	movs	r2, #128	; 0x80
 8001a66:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e052      	b.n	8001b1a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f022 0216 	bic.w	r2, r2, #22
 8001a82:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	695a      	ldr	r2, [r3, #20]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a92:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d103      	bne.n	8001aa4 <HAL_DMA_Abort+0x62>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d007      	beq.n	8001ab4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f022 0208 	bic.w	r2, r2, #8
 8001ab2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f022 0201 	bic.w	r2, r2, #1
 8001ac2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ac4:	e013      	b.n	8001aee <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ac6:	f7ff f957 	bl	8000d78 <HAL_GetTick>
 8001aca:	4602      	mov	r2, r0
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	2b05      	cmp	r3, #5
 8001ad2:	d90c      	bls.n	8001aee <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2220      	movs	r2, #32
 8001ad8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2203      	movs	r2, #3
 8001ade:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e015      	b.n	8001b1a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0301 	and.w	r3, r3, #1
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d1e4      	bne.n	8001ac6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b00:	223f      	movs	r2, #63	; 0x3f
 8001b02:	409a      	lsls	r2, r3
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b22:	b480      	push	{r7}
 8001b24:	b083      	sub	sp, #12
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d004      	beq.n	8001b40 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2280      	movs	r2, #128	; 0x80
 8001b3a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e00c      	b.n	8001b5a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2205      	movs	r2, #5
 8001b44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f022 0201 	bic.w	r2, r2, #1
 8001b56:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
	...

08001b68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b089      	sub	sp, #36	; 0x24
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b72:	2300      	movs	r3, #0
 8001b74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b76:	2300      	movs	r3, #0
 8001b78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b7e:	2300      	movs	r3, #0
 8001b80:	61fb      	str	r3, [r7, #28]
 8001b82:	e177      	b.n	8001e74 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b84:	2201      	movs	r2, #1
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	697a      	ldr	r2, [r7, #20]
 8001b94:	4013      	ands	r3, r2
 8001b96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b98:	693a      	ldr	r2, [r7, #16]
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	f040 8166 	bne.w	8001e6e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f003 0303 	and.w	r3, r3, #3
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d005      	beq.n	8001bba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d130      	bne.n	8001c1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	2203      	movs	r2, #3
 8001bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bca:	43db      	mvns	r3, r3
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	68da      	ldr	r2, [r3, #12]
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	69ba      	ldr	r2, [r7, #24]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	091b      	lsrs	r3, r3, #4
 8001c06:	f003 0201 	and.w	r2, r3, #1
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f003 0303 	and.w	r3, r3, #3
 8001c24:	2b03      	cmp	r3, #3
 8001c26:	d017      	beq.n	8001c58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	2203      	movs	r2, #3
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	43db      	mvns	r3, r3
 8001c3a:	69ba      	ldr	r2, [r7, #24]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	689a      	ldr	r2, [r3, #8]
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f003 0303 	and.w	r3, r3, #3
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d123      	bne.n	8001cac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	08da      	lsrs	r2, r3, #3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	3208      	adds	r2, #8
 8001c6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	f003 0307 	and.w	r3, r3, #7
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	220f      	movs	r2, #15
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	43db      	mvns	r3, r3
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	4013      	ands	r3, r2
 8001c86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	691a      	ldr	r2, [r3, #16]
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	f003 0307 	and.w	r3, r3, #7
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	08da      	lsrs	r2, r3, #3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	3208      	adds	r2, #8
 8001ca6:	69b9      	ldr	r1, [r7, #24]
 8001ca8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	2203      	movs	r2, #3
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f003 0203 	and.w	r2, r3, #3
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	f000 80c0 	beq.w	8001e6e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cee:	2300      	movs	r3, #0
 8001cf0:	60fb      	str	r3, [r7, #12]
 8001cf2:	4b66      	ldr	r3, [pc, #408]	; (8001e8c <HAL_GPIO_Init+0x324>)
 8001cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf6:	4a65      	ldr	r2, [pc, #404]	; (8001e8c <HAL_GPIO_Init+0x324>)
 8001cf8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cfc:	6453      	str	r3, [r2, #68]	; 0x44
 8001cfe:	4b63      	ldr	r3, [pc, #396]	; (8001e8c <HAL_GPIO_Init+0x324>)
 8001d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d06:	60fb      	str	r3, [r7, #12]
 8001d08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d0a:	4a61      	ldr	r2, [pc, #388]	; (8001e90 <HAL_GPIO_Init+0x328>)
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	089b      	lsrs	r3, r3, #2
 8001d10:	3302      	adds	r3, #2
 8001d12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	f003 0303 	and.w	r3, r3, #3
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	220f      	movs	r2, #15
 8001d22:	fa02 f303 	lsl.w	r3, r2, r3
 8001d26:	43db      	mvns	r3, r3
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a58      	ldr	r2, [pc, #352]	; (8001e94 <HAL_GPIO_Init+0x32c>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d037      	beq.n	8001da6 <HAL_GPIO_Init+0x23e>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a57      	ldr	r2, [pc, #348]	; (8001e98 <HAL_GPIO_Init+0x330>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d031      	beq.n	8001da2 <HAL_GPIO_Init+0x23a>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a56      	ldr	r2, [pc, #344]	; (8001e9c <HAL_GPIO_Init+0x334>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d02b      	beq.n	8001d9e <HAL_GPIO_Init+0x236>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a55      	ldr	r2, [pc, #340]	; (8001ea0 <HAL_GPIO_Init+0x338>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d025      	beq.n	8001d9a <HAL_GPIO_Init+0x232>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a54      	ldr	r2, [pc, #336]	; (8001ea4 <HAL_GPIO_Init+0x33c>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d01f      	beq.n	8001d96 <HAL_GPIO_Init+0x22e>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a53      	ldr	r2, [pc, #332]	; (8001ea8 <HAL_GPIO_Init+0x340>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d019      	beq.n	8001d92 <HAL_GPIO_Init+0x22a>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a52      	ldr	r2, [pc, #328]	; (8001eac <HAL_GPIO_Init+0x344>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d013      	beq.n	8001d8e <HAL_GPIO_Init+0x226>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a51      	ldr	r2, [pc, #324]	; (8001eb0 <HAL_GPIO_Init+0x348>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d00d      	beq.n	8001d8a <HAL_GPIO_Init+0x222>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a50      	ldr	r2, [pc, #320]	; (8001eb4 <HAL_GPIO_Init+0x34c>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d007      	beq.n	8001d86 <HAL_GPIO_Init+0x21e>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a4f      	ldr	r2, [pc, #316]	; (8001eb8 <HAL_GPIO_Init+0x350>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d101      	bne.n	8001d82 <HAL_GPIO_Init+0x21a>
 8001d7e:	2309      	movs	r3, #9
 8001d80:	e012      	b.n	8001da8 <HAL_GPIO_Init+0x240>
 8001d82:	230a      	movs	r3, #10
 8001d84:	e010      	b.n	8001da8 <HAL_GPIO_Init+0x240>
 8001d86:	2308      	movs	r3, #8
 8001d88:	e00e      	b.n	8001da8 <HAL_GPIO_Init+0x240>
 8001d8a:	2307      	movs	r3, #7
 8001d8c:	e00c      	b.n	8001da8 <HAL_GPIO_Init+0x240>
 8001d8e:	2306      	movs	r3, #6
 8001d90:	e00a      	b.n	8001da8 <HAL_GPIO_Init+0x240>
 8001d92:	2305      	movs	r3, #5
 8001d94:	e008      	b.n	8001da8 <HAL_GPIO_Init+0x240>
 8001d96:	2304      	movs	r3, #4
 8001d98:	e006      	b.n	8001da8 <HAL_GPIO_Init+0x240>
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e004      	b.n	8001da8 <HAL_GPIO_Init+0x240>
 8001d9e:	2302      	movs	r3, #2
 8001da0:	e002      	b.n	8001da8 <HAL_GPIO_Init+0x240>
 8001da2:	2301      	movs	r3, #1
 8001da4:	e000      	b.n	8001da8 <HAL_GPIO_Init+0x240>
 8001da6:	2300      	movs	r3, #0
 8001da8:	69fa      	ldr	r2, [r7, #28]
 8001daa:	f002 0203 	and.w	r2, r2, #3
 8001dae:	0092      	lsls	r2, r2, #2
 8001db0:	4093      	lsls	r3, r2
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001db8:	4935      	ldr	r1, [pc, #212]	; (8001e90 <HAL_GPIO_Init+0x328>)
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	089b      	lsrs	r3, r3, #2
 8001dbe:	3302      	adds	r3, #2
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dc6:	4b3d      	ldr	r3, [pc, #244]	; (8001ebc <HAL_GPIO_Init+0x354>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	43db      	mvns	r3, r3
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d003      	beq.n	8001dea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dea:	4a34      	ldr	r2, [pc, #208]	; (8001ebc <HAL_GPIO_Init+0x354>)
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001df0:	4b32      	ldr	r3, [pc, #200]	; (8001ebc <HAL_GPIO_Init+0x354>)
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	43db      	mvns	r3, r3
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d003      	beq.n	8001e14 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e14:	4a29      	ldr	r2, [pc, #164]	; (8001ebc <HAL_GPIO_Init+0x354>)
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e1a:	4b28      	ldr	r3, [pc, #160]	; (8001ebc <HAL_GPIO_Init+0x354>)
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	43db      	mvns	r3, r3
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	4013      	ands	r3, r2
 8001e28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d003      	beq.n	8001e3e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e3e:	4a1f      	ldr	r2, [pc, #124]	; (8001ebc <HAL_GPIO_Init+0x354>)
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e44:	4b1d      	ldr	r3, [pc, #116]	; (8001ebc <HAL_GPIO_Init+0x354>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	4013      	ands	r3, r2
 8001e52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d003      	beq.n	8001e68 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e68:	4a14      	ldr	r2, [pc, #80]	; (8001ebc <HAL_GPIO_Init+0x354>)
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	3301      	adds	r3, #1
 8001e72:	61fb      	str	r3, [r7, #28]
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	2b0f      	cmp	r3, #15
 8001e78:	f67f ae84 	bls.w	8001b84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e7c:	bf00      	nop
 8001e7e:	bf00      	nop
 8001e80:	3724      	adds	r7, #36	; 0x24
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	40023800 	.word	0x40023800
 8001e90:	40013800 	.word	0x40013800
 8001e94:	40020000 	.word	0x40020000
 8001e98:	40020400 	.word	0x40020400
 8001e9c:	40020800 	.word	0x40020800
 8001ea0:	40020c00 	.word	0x40020c00
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	40021400 	.word	0x40021400
 8001eac:	40021800 	.word	0x40021800
 8001eb0:	40021c00 	.word	0x40021c00
 8001eb4:	40022000 	.word	0x40022000
 8001eb8:	40022400 	.word	0x40022400
 8001ebc:	40013c00 	.word	0x40013c00

08001ec0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001eca:	2300      	movs	r3, #0
 8001ecc:	603b      	str	r3, [r7, #0]
 8001ece:	4b20      	ldr	r3, [pc, #128]	; (8001f50 <HAL_PWREx_EnableOverDrive+0x90>)
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed2:	4a1f      	ldr	r2, [pc, #124]	; (8001f50 <HAL_PWREx_EnableOverDrive+0x90>)
 8001ed4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ed8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eda:	4b1d      	ldr	r3, [pc, #116]	; (8001f50 <HAL_PWREx_EnableOverDrive+0x90>)
 8001edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee2:	603b      	str	r3, [r7, #0]
 8001ee4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001ee6:	4b1b      	ldr	r3, [pc, #108]	; (8001f54 <HAL_PWREx_EnableOverDrive+0x94>)
 8001ee8:	2201      	movs	r2, #1
 8001eea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001eec:	f7fe ff44 	bl	8000d78 <HAL_GetTick>
 8001ef0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001ef2:	e009      	b.n	8001f08 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001ef4:	f7fe ff40 	bl	8000d78 <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f02:	d901      	bls.n	8001f08 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e01f      	b.n	8001f48 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001f08:	4b13      	ldr	r3, [pc, #76]	; (8001f58 <HAL_PWREx_EnableOverDrive+0x98>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f14:	d1ee      	bne.n	8001ef4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001f16:	4b11      	ldr	r3, [pc, #68]	; (8001f5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f18:	2201      	movs	r2, #1
 8001f1a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f1c:	f7fe ff2c 	bl	8000d78 <HAL_GetTick>
 8001f20:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001f22:	e009      	b.n	8001f38 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001f24:	f7fe ff28 	bl	8000d78 <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f32:	d901      	bls.n	8001f38 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e007      	b.n	8001f48 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001f38:	4b07      	ldr	r3, [pc, #28]	; (8001f58 <HAL_PWREx_EnableOverDrive+0x98>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001f44:	d1ee      	bne.n	8001f24 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001f46:	2300      	movs	r3, #0
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	40023800 	.word	0x40023800
 8001f54:	420e0040 	.word	0x420e0040
 8001f58:	40007000 	.word	0x40007000
 8001f5c:	420e0044 	.word	0x420e0044

08001f60 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b086      	sub	sp, #24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e267      	b.n	8002442 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d075      	beq.n	800206a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f7e:	4b88      	ldr	r3, [pc, #544]	; (80021a0 <HAL_RCC_OscConfig+0x240>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f003 030c 	and.w	r3, r3, #12
 8001f86:	2b04      	cmp	r3, #4
 8001f88:	d00c      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f8a:	4b85      	ldr	r3, [pc, #532]	; (80021a0 <HAL_RCC_OscConfig+0x240>)
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f92:	2b08      	cmp	r3, #8
 8001f94:	d112      	bne.n	8001fbc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f96:	4b82      	ldr	r3, [pc, #520]	; (80021a0 <HAL_RCC_OscConfig+0x240>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fa2:	d10b      	bne.n	8001fbc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fa4:	4b7e      	ldr	r3, [pc, #504]	; (80021a0 <HAL_RCC_OscConfig+0x240>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d05b      	beq.n	8002068 <HAL_RCC_OscConfig+0x108>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d157      	bne.n	8002068 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e242      	b.n	8002442 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fc4:	d106      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x74>
 8001fc6:	4b76      	ldr	r3, [pc, #472]	; (80021a0 <HAL_RCC_OscConfig+0x240>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a75      	ldr	r2, [pc, #468]	; (80021a0 <HAL_RCC_OscConfig+0x240>)
 8001fcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fd0:	6013      	str	r3, [r2, #0]
 8001fd2:	e01d      	b.n	8002010 <HAL_RCC_OscConfig+0xb0>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fdc:	d10c      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x98>
 8001fde:	4b70      	ldr	r3, [pc, #448]	; (80021a0 <HAL_RCC_OscConfig+0x240>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a6f      	ldr	r2, [pc, #444]	; (80021a0 <HAL_RCC_OscConfig+0x240>)
 8001fe4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fe8:	6013      	str	r3, [r2, #0]
 8001fea:	4b6d      	ldr	r3, [pc, #436]	; (80021a0 <HAL_RCC_OscConfig+0x240>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a6c      	ldr	r2, [pc, #432]	; (80021a0 <HAL_RCC_OscConfig+0x240>)
 8001ff0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ff4:	6013      	str	r3, [r2, #0]
 8001ff6:	e00b      	b.n	8002010 <HAL_RCC_OscConfig+0xb0>
 8001ff8:	4b69      	ldr	r3, [pc, #420]	; (80021a0 <HAL_RCC_OscConfig+0x240>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a68      	ldr	r2, [pc, #416]	; (80021a0 <HAL_RCC_OscConfig+0x240>)
 8001ffe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002002:	6013      	str	r3, [r2, #0]
 8002004:	4b66      	ldr	r3, [pc, #408]	; (80021a0 <HAL_RCC_OscConfig+0x240>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a65      	ldr	r2, [pc, #404]	; (80021a0 <HAL_RCC_OscConfig+0x240>)
 800200a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800200e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d013      	beq.n	8002040 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002018:	f7fe feae 	bl	8000d78 <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002020:	f7fe feaa 	bl	8000d78 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b64      	cmp	r3, #100	; 0x64
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e207      	b.n	8002442 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002032:	4b5b      	ldr	r3, [pc, #364]	; (80021a0 <HAL_RCC_OscConfig+0x240>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d0f0      	beq.n	8002020 <HAL_RCC_OscConfig+0xc0>
 800203e:	e014      	b.n	800206a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002040:	f7fe fe9a 	bl	8000d78 <HAL_GetTick>
 8002044:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002046:	e008      	b.n	800205a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002048:	f7fe fe96 	bl	8000d78 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b64      	cmp	r3, #100	; 0x64
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e1f3      	b.n	8002442 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800205a:	4b51      	ldr	r3, [pc, #324]	; (80021a0 <HAL_RCC_OscConfig+0x240>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d1f0      	bne.n	8002048 <HAL_RCC_OscConfig+0xe8>
 8002066:	e000      	b.n	800206a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002068:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d063      	beq.n	800213e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002076:	4b4a      	ldr	r3, [pc, #296]	; (80021a0 <HAL_RCC_OscConfig+0x240>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f003 030c 	and.w	r3, r3, #12
 800207e:	2b00      	cmp	r3, #0
 8002080:	d00b      	beq.n	800209a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002082:	4b47      	ldr	r3, [pc, #284]	; (80021a0 <HAL_RCC_OscConfig+0x240>)
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800208a:	2b08      	cmp	r3, #8
 800208c:	d11c      	bne.n	80020c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800208e:	4b44      	ldr	r3, [pc, #272]	; (80021a0 <HAL_RCC_OscConfig+0x240>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d116      	bne.n	80020c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800209a:	4b41      	ldr	r3, [pc, #260]	; (80021a0 <HAL_RCC_OscConfig+0x240>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d005      	beq.n	80020b2 <HAL_RCC_OscConfig+0x152>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d001      	beq.n	80020b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e1c7      	b.n	8002442 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020b2:	4b3b      	ldr	r3, [pc, #236]	; (80021a0 <HAL_RCC_OscConfig+0x240>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	4937      	ldr	r1, [pc, #220]	; (80021a0 <HAL_RCC_OscConfig+0x240>)
 80020c2:	4313      	orrs	r3, r2
 80020c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020c6:	e03a      	b.n	800213e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d020      	beq.n	8002112 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020d0:	4b34      	ldr	r3, [pc, #208]	; (80021a4 <HAL_RCC_OscConfig+0x244>)
 80020d2:	2201      	movs	r2, #1
 80020d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d6:	f7fe fe4f 	bl	8000d78 <HAL_GetTick>
 80020da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020dc:	e008      	b.n	80020f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020de:	f7fe fe4b 	bl	8000d78 <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d901      	bls.n	80020f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e1a8      	b.n	8002442 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020f0:	4b2b      	ldr	r3, [pc, #172]	; (80021a0 <HAL_RCC_OscConfig+0x240>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0302 	and.w	r3, r3, #2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d0f0      	beq.n	80020de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020fc:	4b28      	ldr	r3, [pc, #160]	; (80021a0 <HAL_RCC_OscConfig+0x240>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	691b      	ldr	r3, [r3, #16]
 8002108:	00db      	lsls	r3, r3, #3
 800210a:	4925      	ldr	r1, [pc, #148]	; (80021a0 <HAL_RCC_OscConfig+0x240>)
 800210c:	4313      	orrs	r3, r2
 800210e:	600b      	str	r3, [r1, #0]
 8002110:	e015      	b.n	800213e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002112:	4b24      	ldr	r3, [pc, #144]	; (80021a4 <HAL_RCC_OscConfig+0x244>)
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002118:	f7fe fe2e 	bl	8000d78 <HAL_GetTick>
 800211c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800211e:	e008      	b.n	8002132 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002120:	f7fe fe2a 	bl	8000d78 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b02      	cmp	r3, #2
 800212c:	d901      	bls.n	8002132 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e187      	b.n	8002442 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002132:	4b1b      	ldr	r3, [pc, #108]	; (80021a0 <HAL_RCC_OscConfig+0x240>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	2b00      	cmp	r3, #0
 800213c:	d1f0      	bne.n	8002120 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0308 	and.w	r3, r3, #8
 8002146:	2b00      	cmp	r3, #0
 8002148:	d036      	beq.n	80021b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	695b      	ldr	r3, [r3, #20]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d016      	beq.n	8002180 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002152:	4b15      	ldr	r3, [pc, #84]	; (80021a8 <HAL_RCC_OscConfig+0x248>)
 8002154:	2201      	movs	r2, #1
 8002156:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002158:	f7fe fe0e 	bl	8000d78 <HAL_GetTick>
 800215c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800215e:	e008      	b.n	8002172 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002160:	f7fe fe0a 	bl	8000d78 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	2b02      	cmp	r3, #2
 800216c:	d901      	bls.n	8002172 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e167      	b.n	8002442 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002172:	4b0b      	ldr	r3, [pc, #44]	; (80021a0 <HAL_RCC_OscConfig+0x240>)
 8002174:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002176:	f003 0302 	and.w	r3, r3, #2
 800217a:	2b00      	cmp	r3, #0
 800217c:	d0f0      	beq.n	8002160 <HAL_RCC_OscConfig+0x200>
 800217e:	e01b      	b.n	80021b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002180:	4b09      	ldr	r3, [pc, #36]	; (80021a8 <HAL_RCC_OscConfig+0x248>)
 8002182:	2200      	movs	r2, #0
 8002184:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002186:	f7fe fdf7 	bl	8000d78 <HAL_GetTick>
 800218a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800218c:	e00e      	b.n	80021ac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800218e:	f7fe fdf3 	bl	8000d78 <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	2b02      	cmp	r3, #2
 800219a:	d907      	bls.n	80021ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e150      	b.n	8002442 <HAL_RCC_OscConfig+0x4e2>
 80021a0:	40023800 	.word	0x40023800
 80021a4:	42470000 	.word	0x42470000
 80021a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021ac:	4b88      	ldr	r3, [pc, #544]	; (80023d0 <HAL_RCC_OscConfig+0x470>)
 80021ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021b0:	f003 0302 	and.w	r3, r3, #2
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d1ea      	bne.n	800218e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0304 	and.w	r3, r3, #4
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	f000 8097 	beq.w	80022f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021c6:	2300      	movs	r3, #0
 80021c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021ca:	4b81      	ldr	r3, [pc, #516]	; (80023d0 <HAL_RCC_OscConfig+0x470>)
 80021cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d10f      	bne.n	80021f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021d6:	2300      	movs	r3, #0
 80021d8:	60bb      	str	r3, [r7, #8]
 80021da:	4b7d      	ldr	r3, [pc, #500]	; (80023d0 <HAL_RCC_OscConfig+0x470>)
 80021dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021de:	4a7c      	ldr	r2, [pc, #496]	; (80023d0 <HAL_RCC_OscConfig+0x470>)
 80021e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021e4:	6413      	str	r3, [r2, #64]	; 0x40
 80021e6:	4b7a      	ldr	r3, [pc, #488]	; (80023d0 <HAL_RCC_OscConfig+0x470>)
 80021e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ee:	60bb      	str	r3, [r7, #8]
 80021f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021f2:	2301      	movs	r3, #1
 80021f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021f6:	4b77      	ldr	r3, [pc, #476]	; (80023d4 <HAL_RCC_OscConfig+0x474>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d118      	bne.n	8002234 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002202:	4b74      	ldr	r3, [pc, #464]	; (80023d4 <HAL_RCC_OscConfig+0x474>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a73      	ldr	r2, [pc, #460]	; (80023d4 <HAL_RCC_OscConfig+0x474>)
 8002208:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800220c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800220e:	f7fe fdb3 	bl	8000d78 <HAL_GetTick>
 8002212:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002214:	e008      	b.n	8002228 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002216:	f7fe fdaf 	bl	8000d78 <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	2b02      	cmp	r3, #2
 8002222:	d901      	bls.n	8002228 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e10c      	b.n	8002442 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002228:	4b6a      	ldr	r3, [pc, #424]	; (80023d4 <HAL_RCC_OscConfig+0x474>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002230:	2b00      	cmp	r3, #0
 8002232:	d0f0      	beq.n	8002216 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	2b01      	cmp	r3, #1
 800223a:	d106      	bne.n	800224a <HAL_RCC_OscConfig+0x2ea>
 800223c:	4b64      	ldr	r3, [pc, #400]	; (80023d0 <HAL_RCC_OscConfig+0x470>)
 800223e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002240:	4a63      	ldr	r2, [pc, #396]	; (80023d0 <HAL_RCC_OscConfig+0x470>)
 8002242:	f043 0301 	orr.w	r3, r3, #1
 8002246:	6713      	str	r3, [r2, #112]	; 0x70
 8002248:	e01c      	b.n	8002284 <HAL_RCC_OscConfig+0x324>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	2b05      	cmp	r3, #5
 8002250:	d10c      	bne.n	800226c <HAL_RCC_OscConfig+0x30c>
 8002252:	4b5f      	ldr	r3, [pc, #380]	; (80023d0 <HAL_RCC_OscConfig+0x470>)
 8002254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002256:	4a5e      	ldr	r2, [pc, #376]	; (80023d0 <HAL_RCC_OscConfig+0x470>)
 8002258:	f043 0304 	orr.w	r3, r3, #4
 800225c:	6713      	str	r3, [r2, #112]	; 0x70
 800225e:	4b5c      	ldr	r3, [pc, #368]	; (80023d0 <HAL_RCC_OscConfig+0x470>)
 8002260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002262:	4a5b      	ldr	r2, [pc, #364]	; (80023d0 <HAL_RCC_OscConfig+0x470>)
 8002264:	f043 0301 	orr.w	r3, r3, #1
 8002268:	6713      	str	r3, [r2, #112]	; 0x70
 800226a:	e00b      	b.n	8002284 <HAL_RCC_OscConfig+0x324>
 800226c:	4b58      	ldr	r3, [pc, #352]	; (80023d0 <HAL_RCC_OscConfig+0x470>)
 800226e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002270:	4a57      	ldr	r2, [pc, #348]	; (80023d0 <HAL_RCC_OscConfig+0x470>)
 8002272:	f023 0301 	bic.w	r3, r3, #1
 8002276:	6713      	str	r3, [r2, #112]	; 0x70
 8002278:	4b55      	ldr	r3, [pc, #340]	; (80023d0 <HAL_RCC_OscConfig+0x470>)
 800227a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800227c:	4a54      	ldr	r2, [pc, #336]	; (80023d0 <HAL_RCC_OscConfig+0x470>)
 800227e:	f023 0304 	bic.w	r3, r3, #4
 8002282:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d015      	beq.n	80022b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800228c:	f7fe fd74 	bl	8000d78 <HAL_GetTick>
 8002290:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002292:	e00a      	b.n	80022aa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002294:	f7fe fd70 	bl	8000d78 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	f241 3288 	movw	r2, #5000	; 0x1388
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d901      	bls.n	80022aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e0cb      	b.n	8002442 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022aa:	4b49      	ldr	r3, [pc, #292]	; (80023d0 <HAL_RCC_OscConfig+0x470>)
 80022ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ae:	f003 0302 	and.w	r3, r3, #2
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d0ee      	beq.n	8002294 <HAL_RCC_OscConfig+0x334>
 80022b6:	e014      	b.n	80022e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022b8:	f7fe fd5e 	bl	8000d78 <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022be:	e00a      	b.n	80022d6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022c0:	f7fe fd5a 	bl	8000d78 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e0b5      	b.n	8002442 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022d6:	4b3e      	ldr	r3, [pc, #248]	; (80023d0 <HAL_RCC_OscConfig+0x470>)
 80022d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1ee      	bne.n	80022c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022e2:	7dfb      	ldrb	r3, [r7, #23]
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d105      	bne.n	80022f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022e8:	4b39      	ldr	r3, [pc, #228]	; (80023d0 <HAL_RCC_OscConfig+0x470>)
 80022ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ec:	4a38      	ldr	r2, [pc, #224]	; (80023d0 <HAL_RCC_OscConfig+0x470>)
 80022ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022f2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	f000 80a1 	beq.w	8002440 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022fe:	4b34      	ldr	r3, [pc, #208]	; (80023d0 <HAL_RCC_OscConfig+0x470>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f003 030c 	and.w	r3, r3, #12
 8002306:	2b08      	cmp	r3, #8
 8002308:	d05c      	beq.n	80023c4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	699b      	ldr	r3, [r3, #24]
 800230e:	2b02      	cmp	r3, #2
 8002310:	d141      	bne.n	8002396 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002312:	4b31      	ldr	r3, [pc, #196]	; (80023d8 <HAL_RCC_OscConfig+0x478>)
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002318:	f7fe fd2e 	bl	8000d78 <HAL_GetTick>
 800231c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800231e:	e008      	b.n	8002332 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002320:	f7fe fd2a 	bl	8000d78 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b02      	cmp	r3, #2
 800232c:	d901      	bls.n	8002332 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e087      	b.n	8002442 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002332:	4b27      	ldr	r3, [pc, #156]	; (80023d0 <HAL_RCC_OscConfig+0x470>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d1f0      	bne.n	8002320 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	69da      	ldr	r2, [r3, #28]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6a1b      	ldr	r3, [r3, #32]
 8002346:	431a      	orrs	r2, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234c:	019b      	lsls	r3, r3, #6
 800234e:	431a      	orrs	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002354:	085b      	lsrs	r3, r3, #1
 8002356:	3b01      	subs	r3, #1
 8002358:	041b      	lsls	r3, r3, #16
 800235a:	431a      	orrs	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002360:	061b      	lsls	r3, r3, #24
 8002362:	491b      	ldr	r1, [pc, #108]	; (80023d0 <HAL_RCC_OscConfig+0x470>)
 8002364:	4313      	orrs	r3, r2
 8002366:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002368:	4b1b      	ldr	r3, [pc, #108]	; (80023d8 <HAL_RCC_OscConfig+0x478>)
 800236a:	2201      	movs	r2, #1
 800236c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800236e:	f7fe fd03 	bl	8000d78 <HAL_GetTick>
 8002372:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002374:	e008      	b.n	8002388 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002376:	f7fe fcff 	bl	8000d78 <HAL_GetTick>
 800237a:	4602      	mov	r2, r0
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	2b02      	cmp	r3, #2
 8002382:	d901      	bls.n	8002388 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	e05c      	b.n	8002442 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002388:	4b11      	ldr	r3, [pc, #68]	; (80023d0 <HAL_RCC_OscConfig+0x470>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d0f0      	beq.n	8002376 <HAL_RCC_OscConfig+0x416>
 8002394:	e054      	b.n	8002440 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002396:	4b10      	ldr	r3, [pc, #64]	; (80023d8 <HAL_RCC_OscConfig+0x478>)
 8002398:	2200      	movs	r2, #0
 800239a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800239c:	f7fe fcec 	bl	8000d78 <HAL_GetTick>
 80023a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023a2:	e008      	b.n	80023b6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023a4:	f7fe fce8 	bl	8000d78 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e045      	b.n	8002442 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023b6:	4b06      	ldr	r3, [pc, #24]	; (80023d0 <HAL_RCC_OscConfig+0x470>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d1f0      	bne.n	80023a4 <HAL_RCC_OscConfig+0x444>
 80023c2:	e03d      	b.n	8002440 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	699b      	ldr	r3, [r3, #24]
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d107      	bne.n	80023dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e038      	b.n	8002442 <HAL_RCC_OscConfig+0x4e2>
 80023d0:	40023800 	.word	0x40023800
 80023d4:	40007000 	.word	0x40007000
 80023d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80023dc:	4b1b      	ldr	r3, [pc, #108]	; (800244c <HAL_RCC_OscConfig+0x4ec>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	699b      	ldr	r3, [r3, #24]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d028      	beq.n	800243c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d121      	bne.n	800243c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002402:	429a      	cmp	r2, r3
 8002404:	d11a      	bne.n	800243c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002406:	68fa      	ldr	r2, [r7, #12]
 8002408:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800240c:	4013      	ands	r3, r2
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002412:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002414:	4293      	cmp	r3, r2
 8002416:	d111      	bne.n	800243c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002422:	085b      	lsrs	r3, r3, #1
 8002424:	3b01      	subs	r3, #1
 8002426:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002428:	429a      	cmp	r2, r3
 800242a:	d107      	bne.n	800243c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002436:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002438:	429a      	cmp	r2, r3
 800243a:	d001      	beq.n	8002440 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e000      	b.n	8002442 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3718      	adds	r7, #24
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	40023800 	.word	0x40023800

08002450 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d101      	bne.n	8002464 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e0cc      	b.n	80025fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002464:	4b68      	ldr	r3, [pc, #416]	; (8002608 <HAL_RCC_ClockConfig+0x1b8>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 030f 	and.w	r3, r3, #15
 800246c:	683a      	ldr	r2, [r7, #0]
 800246e:	429a      	cmp	r2, r3
 8002470:	d90c      	bls.n	800248c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002472:	4b65      	ldr	r3, [pc, #404]	; (8002608 <HAL_RCC_ClockConfig+0x1b8>)
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	b2d2      	uxtb	r2, r2
 8002478:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800247a:	4b63      	ldr	r3, [pc, #396]	; (8002608 <HAL_RCC_ClockConfig+0x1b8>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 030f 	and.w	r3, r3, #15
 8002482:	683a      	ldr	r2, [r7, #0]
 8002484:	429a      	cmp	r2, r3
 8002486:	d001      	beq.n	800248c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e0b8      	b.n	80025fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0302 	and.w	r3, r3, #2
 8002494:	2b00      	cmp	r3, #0
 8002496:	d020      	beq.n	80024da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0304 	and.w	r3, r3, #4
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d005      	beq.n	80024b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024a4:	4b59      	ldr	r3, [pc, #356]	; (800260c <HAL_RCC_ClockConfig+0x1bc>)
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	4a58      	ldr	r2, [pc, #352]	; (800260c <HAL_RCC_ClockConfig+0x1bc>)
 80024aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80024ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0308 	and.w	r3, r3, #8
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d005      	beq.n	80024c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024bc:	4b53      	ldr	r3, [pc, #332]	; (800260c <HAL_RCC_ClockConfig+0x1bc>)
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	4a52      	ldr	r2, [pc, #328]	; (800260c <HAL_RCC_ClockConfig+0x1bc>)
 80024c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80024c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024c8:	4b50      	ldr	r3, [pc, #320]	; (800260c <HAL_RCC_ClockConfig+0x1bc>)
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	494d      	ldr	r1, [pc, #308]	; (800260c <HAL_RCC_ClockConfig+0x1bc>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d044      	beq.n	8002570 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d107      	bne.n	80024fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ee:	4b47      	ldr	r3, [pc, #284]	; (800260c <HAL_RCC_ClockConfig+0x1bc>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d119      	bne.n	800252e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e07f      	b.n	80025fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	2b02      	cmp	r3, #2
 8002504:	d003      	beq.n	800250e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800250a:	2b03      	cmp	r3, #3
 800250c:	d107      	bne.n	800251e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800250e:	4b3f      	ldr	r3, [pc, #252]	; (800260c <HAL_RCC_ClockConfig+0x1bc>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d109      	bne.n	800252e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e06f      	b.n	80025fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800251e:	4b3b      	ldr	r3, [pc, #236]	; (800260c <HAL_RCC_ClockConfig+0x1bc>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d101      	bne.n	800252e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e067      	b.n	80025fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800252e:	4b37      	ldr	r3, [pc, #220]	; (800260c <HAL_RCC_ClockConfig+0x1bc>)
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f023 0203 	bic.w	r2, r3, #3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	4934      	ldr	r1, [pc, #208]	; (800260c <HAL_RCC_ClockConfig+0x1bc>)
 800253c:	4313      	orrs	r3, r2
 800253e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002540:	f7fe fc1a 	bl	8000d78 <HAL_GetTick>
 8002544:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002546:	e00a      	b.n	800255e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002548:	f7fe fc16 	bl	8000d78 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	f241 3288 	movw	r2, #5000	; 0x1388
 8002556:	4293      	cmp	r3, r2
 8002558:	d901      	bls.n	800255e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e04f      	b.n	80025fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800255e:	4b2b      	ldr	r3, [pc, #172]	; (800260c <HAL_RCC_ClockConfig+0x1bc>)
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f003 020c 	and.w	r2, r3, #12
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	429a      	cmp	r2, r3
 800256e:	d1eb      	bne.n	8002548 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002570:	4b25      	ldr	r3, [pc, #148]	; (8002608 <HAL_RCC_ClockConfig+0x1b8>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 030f 	and.w	r3, r3, #15
 8002578:	683a      	ldr	r2, [r7, #0]
 800257a:	429a      	cmp	r2, r3
 800257c:	d20c      	bcs.n	8002598 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800257e:	4b22      	ldr	r3, [pc, #136]	; (8002608 <HAL_RCC_ClockConfig+0x1b8>)
 8002580:	683a      	ldr	r2, [r7, #0]
 8002582:	b2d2      	uxtb	r2, r2
 8002584:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002586:	4b20      	ldr	r3, [pc, #128]	; (8002608 <HAL_RCC_ClockConfig+0x1b8>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 030f 	and.w	r3, r3, #15
 800258e:	683a      	ldr	r2, [r7, #0]
 8002590:	429a      	cmp	r2, r3
 8002592:	d001      	beq.n	8002598 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e032      	b.n	80025fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0304 	and.w	r3, r3, #4
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d008      	beq.n	80025b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025a4:	4b19      	ldr	r3, [pc, #100]	; (800260c <HAL_RCC_ClockConfig+0x1bc>)
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	4916      	ldr	r1, [pc, #88]	; (800260c <HAL_RCC_ClockConfig+0x1bc>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0308 	and.w	r3, r3, #8
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d009      	beq.n	80025d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025c2:	4b12      	ldr	r3, [pc, #72]	; (800260c <HAL_RCC_ClockConfig+0x1bc>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	00db      	lsls	r3, r3, #3
 80025d0:	490e      	ldr	r1, [pc, #56]	; (800260c <HAL_RCC_ClockConfig+0x1bc>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025d6:	f000 f821 	bl	800261c <HAL_RCC_GetSysClockFreq>
 80025da:	4602      	mov	r2, r0
 80025dc:	4b0b      	ldr	r3, [pc, #44]	; (800260c <HAL_RCC_ClockConfig+0x1bc>)
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	091b      	lsrs	r3, r3, #4
 80025e2:	f003 030f 	and.w	r3, r3, #15
 80025e6:	490a      	ldr	r1, [pc, #40]	; (8002610 <HAL_RCC_ClockConfig+0x1c0>)
 80025e8:	5ccb      	ldrb	r3, [r1, r3]
 80025ea:	fa22 f303 	lsr.w	r3, r2, r3
 80025ee:	4a09      	ldr	r2, [pc, #36]	; (8002614 <HAL_RCC_ClockConfig+0x1c4>)
 80025f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80025f2:	4b09      	ldr	r3, [pc, #36]	; (8002618 <HAL_RCC_ClockConfig+0x1c8>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7fe fb7a 	bl	8000cf0 <HAL_InitTick>

  return HAL_OK;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3710      	adds	r7, #16
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	40023c00 	.word	0x40023c00
 800260c:	40023800 	.word	0x40023800
 8002610:	08004944 	.word	0x08004944
 8002614:	20000000 	.word	0x20000000
 8002618:	20000004 	.word	0x20000004

0800261c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800261c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002620:	b094      	sub	sp, #80	; 0x50
 8002622:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002624:	2300      	movs	r3, #0
 8002626:	647b      	str	r3, [r7, #68]	; 0x44
 8002628:	2300      	movs	r3, #0
 800262a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800262c:	2300      	movs	r3, #0
 800262e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002630:	2300      	movs	r3, #0
 8002632:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002634:	4b79      	ldr	r3, [pc, #484]	; (800281c <HAL_RCC_GetSysClockFreq+0x200>)
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	f003 030c 	and.w	r3, r3, #12
 800263c:	2b08      	cmp	r3, #8
 800263e:	d00d      	beq.n	800265c <HAL_RCC_GetSysClockFreq+0x40>
 8002640:	2b08      	cmp	r3, #8
 8002642:	f200 80e1 	bhi.w	8002808 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002646:	2b00      	cmp	r3, #0
 8002648:	d002      	beq.n	8002650 <HAL_RCC_GetSysClockFreq+0x34>
 800264a:	2b04      	cmp	r3, #4
 800264c:	d003      	beq.n	8002656 <HAL_RCC_GetSysClockFreq+0x3a>
 800264e:	e0db      	b.n	8002808 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002650:	4b73      	ldr	r3, [pc, #460]	; (8002820 <HAL_RCC_GetSysClockFreq+0x204>)
 8002652:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002654:	e0db      	b.n	800280e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002656:	4b73      	ldr	r3, [pc, #460]	; (8002824 <HAL_RCC_GetSysClockFreq+0x208>)
 8002658:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800265a:	e0d8      	b.n	800280e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800265c:	4b6f      	ldr	r3, [pc, #444]	; (800281c <HAL_RCC_GetSysClockFreq+0x200>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002664:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002666:	4b6d      	ldr	r3, [pc, #436]	; (800281c <HAL_RCC_GetSysClockFreq+0x200>)
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d063      	beq.n	800273a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002672:	4b6a      	ldr	r3, [pc, #424]	; (800281c <HAL_RCC_GetSysClockFreq+0x200>)
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	099b      	lsrs	r3, r3, #6
 8002678:	2200      	movs	r2, #0
 800267a:	63bb      	str	r3, [r7, #56]	; 0x38
 800267c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800267e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002680:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002684:	633b      	str	r3, [r7, #48]	; 0x30
 8002686:	2300      	movs	r3, #0
 8002688:	637b      	str	r3, [r7, #52]	; 0x34
 800268a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800268e:	4622      	mov	r2, r4
 8002690:	462b      	mov	r3, r5
 8002692:	f04f 0000 	mov.w	r0, #0
 8002696:	f04f 0100 	mov.w	r1, #0
 800269a:	0159      	lsls	r1, r3, #5
 800269c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026a0:	0150      	lsls	r0, r2, #5
 80026a2:	4602      	mov	r2, r0
 80026a4:	460b      	mov	r3, r1
 80026a6:	4621      	mov	r1, r4
 80026a8:	1a51      	subs	r1, r2, r1
 80026aa:	6139      	str	r1, [r7, #16]
 80026ac:	4629      	mov	r1, r5
 80026ae:	eb63 0301 	sbc.w	r3, r3, r1
 80026b2:	617b      	str	r3, [r7, #20]
 80026b4:	f04f 0200 	mov.w	r2, #0
 80026b8:	f04f 0300 	mov.w	r3, #0
 80026bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80026c0:	4659      	mov	r1, fp
 80026c2:	018b      	lsls	r3, r1, #6
 80026c4:	4651      	mov	r1, sl
 80026c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026ca:	4651      	mov	r1, sl
 80026cc:	018a      	lsls	r2, r1, #6
 80026ce:	4651      	mov	r1, sl
 80026d0:	ebb2 0801 	subs.w	r8, r2, r1
 80026d4:	4659      	mov	r1, fp
 80026d6:	eb63 0901 	sbc.w	r9, r3, r1
 80026da:	f04f 0200 	mov.w	r2, #0
 80026de:	f04f 0300 	mov.w	r3, #0
 80026e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026ee:	4690      	mov	r8, r2
 80026f0:	4699      	mov	r9, r3
 80026f2:	4623      	mov	r3, r4
 80026f4:	eb18 0303 	adds.w	r3, r8, r3
 80026f8:	60bb      	str	r3, [r7, #8]
 80026fa:	462b      	mov	r3, r5
 80026fc:	eb49 0303 	adc.w	r3, r9, r3
 8002700:	60fb      	str	r3, [r7, #12]
 8002702:	f04f 0200 	mov.w	r2, #0
 8002706:	f04f 0300 	mov.w	r3, #0
 800270a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800270e:	4629      	mov	r1, r5
 8002710:	024b      	lsls	r3, r1, #9
 8002712:	4621      	mov	r1, r4
 8002714:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002718:	4621      	mov	r1, r4
 800271a:	024a      	lsls	r2, r1, #9
 800271c:	4610      	mov	r0, r2
 800271e:	4619      	mov	r1, r3
 8002720:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002722:	2200      	movs	r2, #0
 8002724:	62bb      	str	r3, [r7, #40]	; 0x28
 8002726:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002728:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800272c:	f7fd fdb0 	bl	8000290 <__aeabi_uldivmod>
 8002730:	4602      	mov	r2, r0
 8002732:	460b      	mov	r3, r1
 8002734:	4613      	mov	r3, r2
 8002736:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002738:	e058      	b.n	80027ec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800273a:	4b38      	ldr	r3, [pc, #224]	; (800281c <HAL_RCC_GetSysClockFreq+0x200>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	099b      	lsrs	r3, r3, #6
 8002740:	2200      	movs	r2, #0
 8002742:	4618      	mov	r0, r3
 8002744:	4611      	mov	r1, r2
 8002746:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800274a:	623b      	str	r3, [r7, #32]
 800274c:	2300      	movs	r3, #0
 800274e:	627b      	str	r3, [r7, #36]	; 0x24
 8002750:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002754:	4642      	mov	r2, r8
 8002756:	464b      	mov	r3, r9
 8002758:	f04f 0000 	mov.w	r0, #0
 800275c:	f04f 0100 	mov.w	r1, #0
 8002760:	0159      	lsls	r1, r3, #5
 8002762:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002766:	0150      	lsls	r0, r2, #5
 8002768:	4602      	mov	r2, r0
 800276a:	460b      	mov	r3, r1
 800276c:	4641      	mov	r1, r8
 800276e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002772:	4649      	mov	r1, r9
 8002774:	eb63 0b01 	sbc.w	fp, r3, r1
 8002778:	f04f 0200 	mov.w	r2, #0
 800277c:	f04f 0300 	mov.w	r3, #0
 8002780:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002784:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002788:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800278c:	ebb2 040a 	subs.w	r4, r2, sl
 8002790:	eb63 050b 	sbc.w	r5, r3, fp
 8002794:	f04f 0200 	mov.w	r2, #0
 8002798:	f04f 0300 	mov.w	r3, #0
 800279c:	00eb      	lsls	r3, r5, #3
 800279e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027a2:	00e2      	lsls	r2, r4, #3
 80027a4:	4614      	mov	r4, r2
 80027a6:	461d      	mov	r5, r3
 80027a8:	4643      	mov	r3, r8
 80027aa:	18e3      	adds	r3, r4, r3
 80027ac:	603b      	str	r3, [r7, #0]
 80027ae:	464b      	mov	r3, r9
 80027b0:	eb45 0303 	adc.w	r3, r5, r3
 80027b4:	607b      	str	r3, [r7, #4]
 80027b6:	f04f 0200 	mov.w	r2, #0
 80027ba:	f04f 0300 	mov.w	r3, #0
 80027be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027c2:	4629      	mov	r1, r5
 80027c4:	028b      	lsls	r3, r1, #10
 80027c6:	4621      	mov	r1, r4
 80027c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027cc:	4621      	mov	r1, r4
 80027ce:	028a      	lsls	r2, r1, #10
 80027d0:	4610      	mov	r0, r2
 80027d2:	4619      	mov	r1, r3
 80027d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027d6:	2200      	movs	r2, #0
 80027d8:	61bb      	str	r3, [r7, #24]
 80027da:	61fa      	str	r2, [r7, #28]
 80027dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027e0:	f7fd fd56 	bl	8000290 <__aeabi_uldivmod>
 80027e4:	4602      	mov	r2, r0
 80027e6:	460b      	mov	r3, r1
 80027e8:	4613      	mov	r3, r2
 80027ea:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80027ec:	4b0b      	ldr	r3, [pc, #44]	; (800281c <HAL_RCC_GetSysClockFreq+0x200>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	0c1b      	lsrs	r3, r3, #16
 80027f2:	f003 0303 	and.w	r3, r3, #3
 80027f6:	3301      	adds	r3, #1
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80027fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80027fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002800:	fbb2 f3f3 	udiv	r3, r2, r3
 8002804:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002806:	e002      	b.n	800280e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002808:	4b05      	ldr	r3, [pc, #20]	; (8002820 <HAL_RCC_GetSysClockFreq+0x204>)
 800280a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800280c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800280e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002810:	4618      	mov	r0, r3
 8002812:	3750      	adds	r7, #80	; 0x50
 8002814:	46bd      	mov	sp, r7
 8002816:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800281a:	bf00      	nop
 800281c:	40023800 	.word	0x40023800
 8002820:	00f42400 	.word	0x00f42400
 8002824:	007a1200 	.word	0x007a1200

08002828 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800282c:	4b03      	ldr	r3, [pc, #12]	; (800283c <HAL_RCC_GetHCLKFreq+0x14>)
 800282e:	681b      	ldr	r3, [r3, #0]
}
 8002830:	4618      	mov	r0, r3
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	20000000 	.word	0x20000000

08002840 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002844:	f7ff fff0 	bl	8002828 <HAL_RCC_GetHCLKFreq>
 8002848:	4602      	mov	r2, r0
 800284a:	4b05      	ldr	r3, [pc, #20]	; (8002860 <HAL_RCC_GetPCLK1Freq+0x20>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	0a9b      	lsrs	r3, r3, #10
 8002850:	f003 0307 	and.w	r3, r3, #7
 8002854:	4903      	ldr	r1, [pc, #12]	; (8002864 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002856:	5ccb      	ldrb	r3, [r1, r3]
 8002858:	fa22 f303 	lsr.w	r3, r2, r3
}
 800285c:	4618      	mov	r0, r3
 800285e:	bd80      	pop	{r7, pc}
 8002860:	40023800 	.word	0x40023800
 8002864:	08004954 	.word	0x08004954

08002868 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800286c:	f7ff ffdc 	bl	8002828 <HAL_RCC_GetHCLKFreq>
 8002870:	4602      	mov	r2, r0
 8002872:	4b05      	ldr	r3, [pc, #20]	; (8002888 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	0b5b      	lsrs	r3, r3, #13
 8002878:	f003 0307 	and.w	r3, r3, #7
 800287c:	4903      	ldr	r1, [pc, #12]	; (800288c <HAL_RCC_GetPCLK2Freq+0x24>)
 800287e:	5ccb      	ldrb	r3, [r1, r3]
 8002880:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002884:	4618      	mov	r0, r3
 8002886:	bd80      	pop	{r7, pc}
 8002888:	40023800 	.word	0x40023800
 800288c:	08004954 	.word	0x08004954

08002890 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d101      	bne.n	80028a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e03f      	b.n	8002922 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d106      	bne.n	80028bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f7fe f892 	bl	80009e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2224      	movs	r2, #36	; 0x24
 80028c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	68da      	ldr	r2, [r3, #12]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f000 fd7b 	bl	80033d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	691a      	ldr	r2, [r3, #16]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	695a      	ldr	r2, [r3, #20]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	68da      	ldr	r2, [r3, #12]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002908:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2220      	movs	r2, #32
 8002914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2220      	movs	r2, #32
 800291c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	3708      	adds	r7, #8
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}

0800292a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800292a:	b580      	push	{r7, lr}
 800292c:	b08a      	sub	sp, #40	; 0x28
 800292e:	af02      	add	r7, sp, #8
 8002930:	60f8      	str	r0, [r7, #12]
 8002932:	60b9      	str	r1, [r7, #8]
 8002934:	603b      	str	r3, [r7, #0]
 8002936:	4613      	mov	r3, r2
 8002938:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800293a:	2300      	movs	r3, #0
 800293c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002944:	b2db      	uxtb	r3, r3
 8002946:	2b20      	cmp	r3, #32
 8002948:	d17c      	bne.n	8002a44 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d002      	beq.n	8002956 <HAL_UART_Transmit+0x2c>
 8002950:	88fb      	ldrh	r3, [r7, #6]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d101      	bne.n	800295a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e075      	b.n	8002a46 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002960:	2b01      	cmp	r3, #1
 8002962:	d101      	bne.n	8002968 <HAL_UART_Transmit+0x3e>
 8002964:	2302      	movs	r3, #2
 8002966:	e06e      	b.n	8002a46 <HAL_UART_Transmit+0x11c>
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2200      	movs	r2, #0
 8002974:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2221      	movs	r2, #33	; 0x21
 800297a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800297e:	f7fe f9fb 	bl	8000d78 <HAL_GetTick>
 8002982:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	88fa      	ldrh	r2, [r7, #6]
 8002988:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	88fa      	ldrh	r2, [r7, #6]
 800298e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002998:	d108      	bne.n	80029ac <HAL_UART_Transmit+0x82>
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d104      	bne.n	80029ac <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80029a2:	2300      	movs	r3, #0
 80029a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	61bb      	str	r3, [r7, #24]
 80029aa:	e003      	b.n	80029b4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029b0:	2300      	movs	r3, #0
 80029b2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80029bc:	e02a      	b.n	8002a14 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	9300      	str	r3, [sp, #0]
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	2200      	movs	r2, #0
 80029c6:	2180      	movs	r1, #128	; 0x80
 80029c8:	68f8      	ldr	r0, [r7, #12]
 80029ca:	f000 faf9 	bl	8002fc0 <UART_WaitOnFlagUntilTimeout>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e036      	b.n	8002a46 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d10b      	bne.n	80029f6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	881b      	ldrh	r3, [r3, #0]
 80029e2:	461a      	mov	r2, r3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029ec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	3302      	adds	r3, #2
 80029f2:	61bb      	str	r3, [r7, #24]
 80029f4:	e007      	b.n	8002a06 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	781a      	ldrb	r2, [r3, #0]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	3301      	adds	r3, #1
 8002a04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	3b01      	subs	r3, #1
 8002a0e:	b29a      	uxth	r2, r3
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d1cf      	bne.n	80029be <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	9300      	str	r3, [sp, #0]
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	2200      	movs	r2, #0
 8002a26:	2140      	movs	r1, #64	; 0x40
 8002a28:	68f8      	ldr	r0, [r7, #12]
 8002a2a:	f000 fac9 	bl	8002fc0 <UART_WaitOnFlagUntilTimeout>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d001      	beq.n	8002a38 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e006      	b.n	8002a46 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2220      	movs	r2, #32
 8002a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002a40:	2300      	movs	r3, #0
 8002a42:	e000      	b.n	8002a46 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002a44:	2302      	movs	r3, #2
  }
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3720      	adds	r7, #32
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
	...

08002a50 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b0ba      	sub	sp, #232	; 0xe8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002a76:	2300      	movs	r3, #0
 8002a78:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002a82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a86:	f003 030f 	and.w	r3, r3, #15
 8002a8a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002a8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d10f      	bne.n	8002ab6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a9a:	f003 0320 	and.w	r3, r3, #32
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d009      	beq.n	8002ab6 <HAL_UART_IRQHandler+0x66>
 8002aa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002aa6:	f003 0320 	and.w	r3, r3, #32
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d003      	beq.n	8002ab6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 fbd3 	bl	800325a <UART_Receive_IT>
      return;
 8002ab4:	e256      	b.n	8002f64 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002ab6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	f000 80de 	beq.w	8002c7c <HAL_UART_IRQHandler+0x22c>
 8002ac0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ac4:	f003 0301 	and.w	r3, r3, #1
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d106      	bne.n	8002ada <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002acc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ad0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	f000 80d1 	beq.w	8002c7c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002ada:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d00b      	beq.n	8002afe <HAL_UART_IRQHandler+0xae>
 8002ae6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d005      	beq.n	8002afe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af6:	f043 0201 	orr.w	r2, r3, #1
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002afe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b02:	f003 0304 	and.w	r3, r3, #4
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d00b      	beq.n	8002b22 <HAL_UART_IRQHandler+0xd2>
 8002b0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d005      	beq.n	8002b22 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1a:	f043 0202 	orr.w	r2, r3, #2
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d00b      	beq.n	8002b46 <HAL_UART_IRQHandler+0xf6>
 8002b2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d005      	beq.n	8002b46 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3e:	f043 0204 	orr.w	r2, r3, #4
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002b46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b4a:	f003 0308 	and.w	r3, r3, #8
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d011      	beq.n	8002b76 <HAL_UART_IRQHandler+0x126>
 8002b52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b56:	f003 0320 	and.w	r3, r3, #32
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d105      	bne.n	8002b6a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002b5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d005      	beq.n	8002b76 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6e:	f043 0208 	orr.w	r2, r3, #8
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	f000 81ed 	beq.w	8002f5a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b84:	f003 0320 	and.w	r3, r3, #32
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d008      	beq.n	8002b9e <HAL_UART_IRQHandler+0x14e>
 8002b8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b90:	f003 0320 	and.w	r3, r3, #32
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d002      	beq.n	8002b9e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f000 fb5e 	bl	800325a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	695b      	ldr	r3, [r3, #20]
 8002ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ba8:	2b40      	cmp	r3, #64	; 0x40
 8002baa:	bf0c      	ite	eq
 8002bac:	2301      	moveq	r3, #1
 8002bae:	2300      	movne	r3, #0
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bba:	f003 0308 	and.w	r3, r3, #8
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d103      	bne.n	8002bca <HAL_UART_IRQHandler+0x17a>
 8002bc2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d04f      	beq.n	8002c6a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f000 fa66 	bl	800309c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	695b      	ldr	r3, [r3, #20]
 8002bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bda:	2b40      	cmp	r3, #64	; 0x40
 8002bdc:	d141      	bne.n	8002c62 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	3314      	adds	r3, #20
 8002be4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002be8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002bec:	e853 3f00 	ldrex	r3, [r3]
 8002bf0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002bf4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002bf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bfc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	3314      	adds	r3, #20
 8002c06:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002c0a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002c0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c12:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002c16:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002c1a:	e841 2300 	strex	r3, r2, [r1]
 8002c1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002c22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d1d9      	bne.n	8002bde <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d013      	beq.n	8002c5a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c36:	4a7d      	ldr	r2, [pc, #500]	; (8002e2c <HAL_UART_IRQHandler+0x3dc>)
 8002c38:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7fe ff6f 	bl	8001b22 <HAL_DMA_Abort_IT>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d016      	beq.n	8002c78 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c54:	4610      	mov	r0, r2
 8002c56:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c58:	e00e      	b.n	8002c78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f000 f99a 	bl	8002f94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c60:	e00a      	b.n	8002c78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f000 f996 	bl	8002f94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c68:	e006      	b.n	8002c78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f000 f992 	bl	8002f94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002c76:	e170      	b.n	8002f5a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c78:	bf00      	nop
    return;
 8002c7a:	e16e      	b.n	8002f5a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	f040 814a 	bne.w	8002f1a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c8a:	f003 0310 	and.w	r3, r3, #16
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f000 8143 	beq.w	8002f1a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002c94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c98:	f003 0310 	and.w	r3, r3, #16
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	f000 813c 	beq.w	8002f1a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	60bb      	str	r3, [r7, #8]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	60bb      	str	r3, [r7, #8]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	60bb      	str	r3, [r7, #8]
 8002cb6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cc2:	2b40      	cmp	r3, #64	; 0x40
 8002cc4:	f040 80b4 	bne.w	8002e30 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002cd4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f000 8140 	beq.w	8002f5e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002ce2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	f080 8139 	bcs.w	8002f5e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002cf2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf8:	69db      	ldr	r3, [r3, #28]
 8002cfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cfe:	f000 8088 	beq.w	8002e12 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	330c      	adds	r3, #12
 8002d08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d10:	e853 3f00 	ldrex	r3, [r3]
 8002d14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002d18:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d20:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	330c      	adds	r3, #12
 8002d2a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002d2e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002d32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d36:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002d3a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002d3e:	e841 2300 	strex	r3, r2, [r1]
 8002d42:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002d46:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d1d9      	bne.n	8002d02 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	3314      	adds	r3, #20
 8002d54:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d58:	e853 3f00 	ldrex	r3, [r3]
 8002d5c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002d5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d60:	f023 0301 	bic.w	r3, r3, #1
 8002d64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	3314      	adds	r3, #20
 8002d6e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002d72:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002d76:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d78:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002d7a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002d7e:	e841 2300 	strex	r3, r2, [r1]
 8002d82:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002d84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d1e1      	bne.n	8002d4e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	3314      	adds	r3, #20
 8002d90:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d94:	e853 3f00 	ldrex	r3, [r3]
 8002d98:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002d9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002da0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	3314      	adds	r3, #20
 8002daa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002dae:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002db0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002db2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002db4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002db6:	e841 2300 	strex	r3, r2, [r1]
 8002dba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002dbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d1e3      	bne.n	8002d8a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2220      	movs	r2, #32
 8002dc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	330c      	adds	r3, #12
 8002dd6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dda:	e853 3f00 	ldrex	r3, [r3]
 8002dde:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002de0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002de2:	f023 0310 	bic.w	r3, r3, #16
 8002de6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	330c      	adds	r3, #12
 8002df0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002df4:	65ba      	str	r2, [r7, #88]	; 0x58
 8002df6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002df8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002dfa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002dfc:	e841 2300 	strex	r3, r2, [r1]
 8002e00:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002e02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d1e3      	bne.n	8002dd0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7fe fe18 	bl	8001a42 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	4619      	mov	r1, r3
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f000 f8c0 	bl	8002fa8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002e28:	e099      	b.n	8002f5e <HAL_UART_IRQHandler+0x50e>
 8002e2a:	bf00      	nop
 8002e2c:	08003163 	.word	0x08003163
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	f000 808b 	beq.w	8002f62 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002e4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	f000 8086 	beq.w	8002f62 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	330c      	adds	r3, #12
 8002e5c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e60:	e853 3f00 	ldrex	r3, [r3]
 8002e64:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002e6c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	330c      	adds	r3, #12
 8002e76:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002e7a:	647a      	str	r2, [r7, #68]	; 0x44
 8002e7c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e7e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002e80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e82:	e841 2300 	strex	r3, r2, [r1]
 8002e86:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002e88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d1e3      	bne.n	8002e56 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	3314      	adds	r3, #20
 8002e94:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e98:	e853 3f00 	ldrex	r3, [r3]
 8002e9c:	623b      	str	r3, [r7, #32]
   return(result);
 8002e9e:	6a3b      	ldr	r3, [r7, #32]
 8002ea0:	f023 0301 	bic.w	r3, r3, #1
 8002ea4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	3314      	adds	r3, #20
 8002eae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002eb2:	633a      	str	r2, [r7, #48]	; 0x30
 8002eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eb6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002eb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002eba:	e841 2300 	strex	r3, r2, [r1]
 8002ebe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d1e3      	bne.n	8002e8e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2220      	movs	r2, #32
 8002eca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	330c      	adds	r3, #12
 8002eda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	e853 3f00 	ldrex	r3, [r3]
 8002ee2:	60fb      	str	r3, [r7, #12]
   return(result);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f023 0310 	bic.w	r3, r3, #16
 8002eea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	330c      	adds	r3, #12
 8002ef4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002ef8:	61fa      	str	r2, [r7, #28]
 8002efa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002efc:	69b9      	ldr	r1, [r7, #24]
 8002efe:	69fa      	ldr	r2, [r7, #28]
 8002f00:	e841 2300 	strex	r3, r2, [r1]
 8002f04:	617b      	str	r3, [r7, #20]
   return(result);
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d1e3      	bne.n	8002ed4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002f0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002f10:	4619      	mov	r1, r3
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f000 f848 	bl	8002fa8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002f18:	e023      	b.n	8002f62 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002f1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d009      	beq.n	8002f3a <HAL_UART_IRQHandler+0x4ea>
 8002f26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d003      	beq.n	8002f3a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 f929 	bl	800318a <UART_Transmit_IT>
    return;
 8002f38:	e014      	b.n	8002f64 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002f3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00e      	beq.n	8002f64 <HAL_UART_IRQHandler+0x514>
 8002f46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d008      	beq.n	8002f64 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 f969 	bl	800322a <UART_EndTransmit_IT>
    return;
 8002f58:	e004      	b.n	8002f64 <HAL_UART_IRQHandler+0x514>
    return;
 8002f5a:	bf00      	nop
 8002f5c:	e002      	b.n	8002f64 <HAL_UART_IRQHandler+0x514>
      return;
 8002f5e:	bf00      	nop
 8002f60:	e000      	b.n	8002f64 <HAL_UART_IRQHandler+0x514>
      return;
 8002f62:	bf00      	nop
  }
}
 8002f64:	37e8      	adds	r7, #232	; 0xe8
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop

08002f6c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002f74:	bf00      	nop
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002f88:	bf00      	nop
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002f9c:	bf00      	nop
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002fb4:	bf00      	nop
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b090      	sub	sp, #64	; 0x40
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	603b      	str	r3, [r7, #0]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fd0:	e050      	b.n	8003074 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd8:	d04c      	beq.n	8003074 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002fda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d007      	beq.n	8002ff0 <UART_WaitOnFlagUntilTimeout+0x30>
 8002fe0:	f7fd feca 	bl	8000d78 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d241      	bcs.n	8003074 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	330c      	adds	r3, #12
 8002ff6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ffa:	e853 3f00 	ldrex	r3, [r3]
 8002ffe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003002:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003006:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	330c      	adds	r3, #12
 800300e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003010:	637a      	str	r2, [r7, #52]	; 0x34
 8003012:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003014:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003016:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003018:	e841 2300 	strex	r3, r2, [r1]
 800301c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800301e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003020:	2b00      	cmp	r3, #0
 8003022:	d1e5      	bne.n	8002ff0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	3314      	adds	r3, #20
 800302a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	e853 3f00 	ldrex	r3, [r3]
 8003032:	613b      	str	r3, [r7, #16]
   return(result);
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	f023 0301 	bic.w	r3, r3, #1
 800303a:	63bb      	str	r3, [r7, #56]	; 0x38
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	3314      	adds	r3, #20
 8003042:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003044:	623a      	str	r2, [r7, #32]
 8003046:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003048:	69f9      	ldr	r1, [r7, #28]
 800304a:	6a3a      	ldr	r2, [r7, #32]
 800304c:	e841 2300 	strex	r3, r2, [r1]
 8003050:	61bb      	str	r3, [r7, #24]
   return(result);
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d1e5      	bne.n	8003024 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2220      	movs	r2, #32
 800305c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2220      	movs	r2, #32
 8003064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2200      	movs	r2, #0
 800306c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e00f      	b.n	8003094 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	4013      	ands	r3, r2
 800307e:	68ba      	ldr	r2, [r7, #8]
 8003080:	429a      	cmp	r2, r3
 8003082:	bf0c      	ite	eq
 8003084:	2301      	moveq	r3, #1
 8003086:	2300      	movne	r3, #0
 8003088:	b2db      	uxtb	r3, r3
 800308a:	461a      	mov	r2, r3
 800308c:	79fb      	ldrb	r3, [r7, #7]
 800308e:	429a      	cmp	r2, r3
 8003090:	d09f      	beq.n	8002fd2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	3740      	adds	r7, #64	; 0x40
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800309c:	b480      	push	{r7}
 800309e:	b095      	sub	sp, #84	; 0x54
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	330c      	adds	r3, #12
 80030aa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ae:	e853 3f00 	ldrex	r3, [r3]
 80030b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80030b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80030ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	330c      	adds	r3, #12
 80030c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80030c4:	643a      	str	r2, [r7, #64]	; 0x40
 80030c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80030ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80030cc:	e841 2300 	strex	r3, r2, [r1]
 80030d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80030d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d1e5      	bne.n	80030a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	3314      	adds	r3, #20
 80030de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030e0:	6a3b      	ldr	r3, [r7, #32]
 80030e2:	e853 3f00 	ldrex	r3, [r3]
 80030e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	f023 0301 	bic.w	r3, r3, #1
 80030ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	3314      	adds	r3, #20
 80030f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80030fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003100:	e841 2300 	strex	r3, r2, [r1]
 8003104:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003108:	2b00      	cmp	r3, #0
 800310a:	d1e5      	bne.n	80030d8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003110:	2b01      	cmp	r3, #1
 8003112:	d119      	bne.n	8003148 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	330c      	adds	r3, #12
 800311a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	e853 3f00 	ldrex	r3, [r3]
 8003122:	60bb      	str	r3, [r7, #8]
   return(result);
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	f023 0310 	bic.w	r3, r3, #16
 800312a:	647b      	str	r3, [r7, #68]	; 0x44
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	330c      	adds	r3, #12
 8003132:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003134:	61ba      	str	r2, [r7, #24]
 8003136:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003138:	6979      	ldr	r1, [r7, #20]
 800313a:	69ba      	ldr	r2, [r7, #24]
 800313c:	e841 2300 	strex	r3, r2, [r1]
 8003140:	613b      	str	r3, [r7, #16]
   return(result);
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d1e5      	bne.n	8003114 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2220      	movs	r2, #32
 800314c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003156:	bf00      	nop
 8003158:	3754      	adds	r7, #84	; 0x54
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr

08003162 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003162:	b580      	push	{r7, lr}
 8003164:	b084      	sub	sp, #16
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800316e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2200      	movs	r2, #0
 8003174:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800317c:	68f8      	ldr	r0, [r7, #12]
 800317e:	f7ff ff09 	bl	8002f94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003182:	bf00      	nop
 8003184:	3710      	adds	r7, #16
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}

0800318a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800318a:	b480      	push	{r7}
 800318c:	b085      	sub	sp, #20
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b21      	cmp	r3, #33	; 0x21
 800319c:	d13e      	bne.n	800321c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031a6:	d114      	bne.n	80031d2 <UART_Transmit_IT+0x48>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d110      	bne.n	80031d2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a1b      	ldr	r3, [r3, #32]
 80031b4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	881b      	ldrh	r3, [r3, #0]
 80031ba:	461a      	mov	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031c4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a1b      	ldr	r3, [r3, #32]
 80031ca:	1c9a      	adds	r2, r3, #2
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	621a      	str	r2, [r3, #32]
 80031d0:	e008      	b.n	80031e4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a1b      	ldr	r3, [r3, #32]
 80031d6:	1c59      	adds	r1, r3, #1
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	6211      	str	r1, [r2, #32]
 80031dc:	781a      	ldrb	r2, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	3b01      	subs	r3, #1
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	4619      	mov	r1, r3
 80031f2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d10f      	bne.n	8003218 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	68da      	ldr	r2, [r3, #12]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003206:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	68da      	ldr	r2, [r3, #12]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003216:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003218:	2300      	movs	r3, #0
 800321a:	e000      	b.n	800321e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800321c:	2302      	movs	r3, #2
  }
}
 800321e:	4618      	mov	r0, r3
 8003220:	3714      	adds	r7, #20
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr

0800322a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800322a:	b580      	push	{r7, lr}
 800322c:	b082      	sub	sp, #8
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	68da      	ldr	r2, [r3, #12]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003240:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2220      	movs	r2, #32
 8003246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f7ff fe8e 	bl	8002f6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3708      	adds	r7, #8
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}

0800325a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800325a:	b580      	push	{r7, lr}
 800325c:	b08c      	sub	sp, #48	; 0x30
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2b22      	cmp	r3, #34	; 0x22
 800326c:	f040 80ab 	bne.w	80033c6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003278:	d117      	bne.n	80032aa <UART_Receive_IT+0x50>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d113      	bne.n	80032aa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003282:	2300      	movs	r3, #0
 8003284:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	b29b      	uxth	r3, r3
 8003294:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003298:	b29a      	uxth	r2, r3
 800329a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800329c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a2:	1c9a      	adds	r2, r3, #2
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	629a      	str	r2, [r3, #40]	; 0x28
 80032a8:	e026      	b.n	80032f8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80032b0:	2300      	movs	r3, #0
 80032b2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032bc:	d007      	beq.n	80032ce <UART_Receive_IT+0x74>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d10a      	bne.n	80032dc <UART_Receive_IT+0x82>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d106      	bne.n	80032dc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	b2da      	uxtb	r2, r3
 80032d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032d8:	701a      	strb	r2, [r3, #0]
 80032da:	e008      	b.n	80032ee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032e8:	b2da      	uxtb	r2, r3
 80032ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f2:	1c5a      	adds	r2, r3, #1
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	3b01      	subs	r3, #1
 8003300:	b29b      	uxth	r3, r3
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	4619      	mov	r1, r3
 8003306:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003308:	2b00      	cmp	r3, #0
 800330a:	d15a      	bne.n	80033c2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68da      	ldr	r2, [r3, #12]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f022 0220 	bic.w	r2, r2, #32
 800331a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	68da      	ldr	r2, [r3, #12]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800332a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	695a      	ldr	r2, [r3, #20]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f022 0201 	bic.w	r2, r2, #1
 800333a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2220      	movs	r2, #32
 8003340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003348:	2b01      	cmp	r3, #1
 800334a:	d135      	bne.n	80033b8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	330c      	adds	r3, #12
 8003358:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	e853 3f00 	ldrex	r3, [r3]
 8003360:	613b      	str	r3, [r7, #16]
   return(result);
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	f023 0310 	bic.w	r3, r3, #16
 8003368:	627b      	str	r3, [r7, #36]	; 0x24
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	330c      	adds	r3, #12
 8003370:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003372:	623a      	str	r2, [r7, #32]
 8003374:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003376:	69f9      	ldr	r1, [r7, #28]
 8003378:	6a3a      	ldr	r2, [r7, #32]
 800337a:	e841 2300 	strex	r3, r2, [r1]
 800337e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1e5      	bne.n	8003352 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0310 	and.w	r3, r3, #16
 8003390:	2b10      	cmp	r3, #16
 8003392:	d10a      	bne.n	80033aa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003394:	2300      	movs	r3, #0
 8003396:	60fb      	str	r3, [r7, #12]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	60fb      	str	r3, [r7, #12]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	60fb      	str	r3, [r7, #12]
 80033a8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80033ae:	4619      	mov	r1, r3
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f7ff fdf9 	bl	8002fa8 <HAL_UARTEx_RxEventCallback>
 80033b6:	e002      	b.n	80033be <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f7ff fde1 	bl	8002f80 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80033be:	2300      	movs	r3, #0
 80033c0:	e002      	b.n	80033c8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80033c2:	2300      	movs	r3, #0
 80033c4:	e000      	b.n	80033c8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80033c6:	2302      	movs	r3, #2
  }
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3730      	adds	r7, #48	; 0x30
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033d4:	b0c0      	sub	sp, #256	; 0x100
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	691b      	ldr	r3, [r3, #16]
 80033e4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80033e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ec:	68d9      	ldr	r1, [r3, #12]
 80033ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	ea40 0301 	orr.w	r3, r0, r1
 80033f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80033fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033fe:	689a      	ldr	r2, [r3, #8]
 8003400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003404:	691b      	ldr	r3, [r3, #16]
 8003406:	431a      	orrs	r2, r3
 8003408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	431a      	orrs	r2, r3
 8003410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003414:	69db      	ldr	r3, [r3, #28]
 8003416:	4313      	orrs	r3, r2
 8003418:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800341c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003428:	f021 010c 	bic.w	r1, r1, #12
 800342c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003436:	430b      	orrs	r3, r1
 8003438:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800343a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003446:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800344a:	6999      	ldr	r1, [r3, #24]
 800344c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	ea40 0301 	orr.w	r3, r0, r1
 8003456:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	4b8f      	ldr	r3, [pc, #572]	; (800369c <UART_SetConfig+0x2cc>)
 8003460:	429a      	cmp	r2, r3
 8003462:	d005      	beq.n	8003470 <UART_SetConfig+0xa0>
 8003464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	4b8d      	ldr	r3, [pc, #564]	; (80036a0 <UART_SetConfig+0x2d0>)
 800346c:	429a      	cmp	r2, r3
 800346e:	d104      	bne.n	800347a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003470:	f7ff f9fa 	bl	8002868 <HAL_RCC_GetPCLK2Freq>
 8003474:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003478:	e003      	b.n	8003482 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800347a:	f7ff f9e1 	bl	8002840 <HAL_RCC_GetPCLK1Freq>
 800347e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003482:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003486:	69db      	ldr	r3, [r3, #28]
 8003488:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800348c:	f040 810c 	bne.w	80036a8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003490:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003494:	2200      	movs	r2, #0
 8003496:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800349a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800349e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80034a2:	4622      	mov	r2, r4
 80034a4:	462b      	mov	r3, r5
 80034a6:	1891      	adds	r1, r2, r2
 80034a8:	65b9      	str	r1, [r7, #88]	; 0x58
 80034aa:	415b      	adcs	r3, r3
 80034ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034ae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80034b2:	4621      	mov	r1, r4
 80034b4:	eb12 0801 	adds.w	r8, r2, r1
 80034b8:	4629      	mov	r1, r5
 80034ba:	eb43 0901 	adc.w	r9, r3, r1
 80034be:	f04f 0200 	mov.w	r2, #0
 80034c2:	f04f 0300 	mov.w	r3, #0
 80034c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034d2:	4690      	mov	r8, r2
 80034d4:	4699      	mov	r9, r3
 80034d6:	4623      	mov	r3, r4
 80034d8:	eb18 0303 	adds.w	r3, r8, r3
 80034dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80034e0:	462b      	mov	r3, r5
 80034e2:	eb49 0303 	adc.w	r3, r9, r3
 80034e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80034ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80034f6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80034fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80034fe:	460b      	mov	r3, r1
 8003500:	18db      	adds	r3, r3, r3
 8003502:	653b      	str	r3, [r7, #80]	; 0x50
 8003504:	4613      	mov	r3, r2
 8003506:	eb42 0303 	adc.w	r3, r2, r3
 800350a:	657b      	str	r3, [r7, #84]	; 0x54
 800350c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003510:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003514:	f7fc febc 	bl	8000290 <__aeabi_uldivmod>
 8003518:	4602      	mov	r2, r0
 800351a:	460b      	mov	r3, r1
 800351c:	4b61      	ldr	r3, [pc, #388]	; (80036a4 <UART_SetConfig+0x2d4>)
 800351e:	fba3 2302 	umull	r2, r3, r3, r2
 8003522:	095b      	lsrs	r3, r3, #5
 8003524:	011c      	lsls	r4, r3, #4
 8003526:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800352a:	2200      	movs	r2, #0
 800352c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003530:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003534:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003538:	4642      	mov	r2, r8
 800353a:	464b      	mov	r3, r9
 800353c:	1891      	adds	r1, r2, r2
 800353e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003540:	415b      	adcs	r3, r3
 8003542:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003544:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003548:	4641      	mov	r1, r8
 800354a:	eb12 0a01 	adds.w	sl, r2, r1
 800354e:	4649      	mov	r1, r9
 8003550:	eb43 0b01 	adc.w	fp, r3, r1
 8003554:	f04f 0200 	mov.w	r2, #0
 8003558:	f04f 0300 	mov.w	r3, #0
 800355c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003560:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003564:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003568:	4692      	mov	sl, r2
 800356a:	469b      	mov	fp, r3
 800356c:	4643      	mov	r3, r8
 800356e:	eb1a 0303 	adds.w	r3, sl, r3
 8003572:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003576:	464b      	mov	r3, r9
 8003578:	eb4b 0303 	adc.w	r3, fp, r3
 800357c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800358c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003590:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003594:	460b      	mov	r3, r1
 8003596:	18db      	adds	r3, r3, r3
 8003598:	643b      	str	r3, [r7, #64]	; 0x40
 800359a:	4613      	mov	r3, r2
 800359c:	eb42 0303 	adc.w	r3, r2, r3
 80035a0:	647b      	str	r3, [r7, #68]	; 0x44
 80035a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80035a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80035aa:	f7fc fe71 	bl	8000290 <__aeabi_uldivmod>
 80035ae:	4602      	mov	r2, r0
 80035b0:	460b      	mov	r3, r1
 80035b2:	4611      	mov	r1, r2
 80035b4:	4b3b      	ldr	r3, [pc, #236]	; (80036a4 <UART_SetConfig+0x2d4>)
 80035b6:	fba3 2301 	umull	r2, r3, r3, r1
 80035ba:	095b      	lsrs	r3, r3, #5
 80035bc:	2264      	movs	r2, #100	; 0x64
 80035be:	fb02 f303 	mul.w	r3, r2, r3
 80035c2:	1acb      	subs	r3, r1, r3
 80035c4:	00db      	lsls	r3, r3, #3
 80035c6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80035ca:	4b36      	ldr	r3, [pc, #216]	; (80036a4 <UART_SetConfig+0x2d4>)
 80035cc:	fba3 2302 	umull	r2, r3, r3, r2
 80035d0:	095b      	lsrs	r3, r3, #5
 80035d2:	005b      	lsls	r3, r3, #1
 80035d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80035d8:	441c      	add	r4, r3
 80035da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035de:	2200      	movs	r2, #0
 80035e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80035e4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80035e8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80035ec:	4642      	mov	r2, r8
 80035ee:	464b      	mov	r3, r9
 80035f0:	1891      	adds	r1, r2, r2
 80035f2:	63b9      	str	r1, [r7, #56]	; 0x38
 80035f4:	415b      	adcs	r3, r3
 80035f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80035fc:	4641      	mov	r1, r8
 80035fe:	1851      	adds	r1, r2, r1
 8003600:	6339      	str	r1, [r7, #48]	; 0x30
 8003602:	4649      	mov	r1, r9
 8003604:	414b      	adcs	r3, r1
 8003606:	637b      	str	r3, [r7, #52]	; 0x34
 8003608:	f04f 0200 	mov.w	r2, #0
 800360c:	f04f 0300 	mov.w	r3, #0
 8003610:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003614:	4659      	mov	r1, fp
 8003616:	00cb      	lsls	r3, r1, #3
 8003618:	4651      	mov	r1, sl
 800361a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800361e:	4651      	mov	r1, sl
 8003620:	00ca      	lsls	r2, r1, #3
 8003622:	4610      	mov	r0, r2
 8003624:	4619      	mov	r1, r3
 8003626:	4603      	mov	r3, r0
 8003628:	4642      	mov	r2, r8
 800362a:	189b      	adds	r3, r3, r2
 800362c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003630:	464b      	mov	r3, r9
 8003632:	460a      	mov	r2, r1
 8003634:	eb42 0303 	adc.w	r3, r2, r3
 8003638:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800363c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003648:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800364c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003650:	460b      	mov	r3, r1
 8003652:	18db      	adds	r3, r3, r3
 8003654:	62bb      	str	r3, [r7, #40]	; 0x28
 8003656:	4613      	mov	r3, r2
 8003658:	eb42 0303 	adc.w	r3, r2, r3
 800365c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800365e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003662:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003666:	f7fc fe13 	bl	8000290 <__aeabi_uldivmod>
 800366a:	4602      	mov	r2, r0
 800366c:	460b      	mov	r3, r1
 800366e:	4b0d      	ldr	r3, [pc, #52]	; (80036a4 <UART_SetConfig+0x2d4>)
 8003670:	fba3 1302 	umull	r1, r3, r3, r2
 8003674:	095b      	lsrs	r3, r3, #5
 8003676:	2164      	movs	r1, #100	; 0x64
 8003678:	fb01 f303 	mul.w	r3, r1, r3
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	00db      	lsls	r3, r3, #3
 8003680:	3332      	adds	r3, #50	; 0x32
 8003682:	4a08      	ldr	r2, [pc, #32]	; (80036a4 <UART_SetConfig+0x2d4>)
 8003684:	fba2 2303 	umull	r2, r3, r2, r3
 8003688:	095b      	lsrs	r3, r3, #5
 800368a:	f003 0207 	and.w	r2, r3, #7
 800368e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4422      	add	r2, r4
 8003696:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003698:	e105      	b.n	80038a6 <UART_SetConfig+0x4d6>
 800369a:	bf00      	nop
 800369c:	40011000 	.word	0x40011000
 80036a0:	40011400 	.word	0x40011400
 80036a4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036ac:	2200      	movs	r2, #0
 80036ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80036b2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80036b6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80036ba:	4642      	mov	r2, r8
 80036bc:	464b      	mov	r3, r9
 80036be:	1891      	adds	r1, r2, r2
 80036c0:	6239      	str	r1, [r7, #32]
 80036c2:	415b      	adcs	r3, r3
 80036c4:	627b      	str	r3, [r7, #36]	; 0x24
 80036c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80036ca:	4641      	mov	r1, r8
 80036cc:	1854      	adds	r4, r2, r1
 80036ce:	4649      	mov	r1, r9
 80036d0:	eb43 0501 	adc.w	r5, r3, r1
 80036d4:	f04f 0200 	mov.w	r2, #0
 80036d8:	f04f 0300 	mov.w	r3, #0
 80036dc:	00eb      	lsls	r3, r5, #3
 80036de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036e2:	00e2      	lsls	r2, r4, #3
 80036e4:	4614      	mov	r4, r2
 80036e6:	461d      	mov	r5, r3
 80036e8:	4643      	mov	r3, r8
 80036ea:	18e3      	adds	r3, r4, r3
 80036ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80036f0:	464b      	mov	r3, r9
 80036f2:	eb45 0303 	adc.w	r3, r5, r3
 80036f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80036fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003706:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800370a:	f04f 0200 	mov.w	r2, #0
 800370e:	f04f 0300 	mov.w	r3, #0
 8003712:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003716:	4629      	mov	r1, r5
 8003718:	008b      	lsls	r3, r1, #2
 800371a:	4621      	mov	r1, r4
 800371c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003720:	4621      	mov	r1, r4
 8003722:	008a      	lsls	r2, r1, #2
 8003724:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003728:	f7fc fdb2 	bl	8000290 <__aeabi_uldivmod>
 800372c:	4602      	mov	r2, r0
 800372e:	460b      	mov	r3, r1
 8003730:	4b60      	ldr	r3, [pc, #384]	; (80038b4 <UART_SetConfig+0x4e4>)
 8003732:	fba3 2302 	umull	r2, r3, r3, r2
 8003736:	095b      	lsrs	r3, r3, #5
 8003738:	011c      	lsls	r4, r3, #4
 800373a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800373e:	2200      	movs	r2, #0
 8003740:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003744:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003748:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800374c:	4642      	mov	r2, r8
 800374e:	464b      	mov	r3, r9
 8003750:	1891      	adds	r1, r2, r2
 8003752:	61b9      	str	r1, [r7, #24]
 8003754:	415b      	adcs	r3, r3
 8003756:	61fb      	str	r3, [r7, #28]
 8003758:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800375c:	4641      	mov	r1, r8
 800375e:	1851      	adds	r1, r2, r1
 8003760:	6139      	str	r1, [r7, #16]
 8003762:	4649      	mov	r1, r9
 8003764:	414b      	adcs	r3, r1
 8003766:	617b      	str	r3, [r7, #20]
 8003768:	f04f 0200 	mov.w	r2, #0
 800376c:	f04f 0300 	mov.w	r3, #0
 8003770:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003774:	4659      	mov	r1, fp
 8003776:	00cb      	lsls	r3, r1, #3
 8003778:	4651      	mov	r1, sl
 800377a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800377e:	4651      	mov	r1, sl
 8003780:	00ca      	lsls	r2, r1, #3
 8003782:	4610      	mov	r0, r2
 8003784:	4619      	mov	r1, r3
 8003786:	4603      	mov	r3, r0
 8003788:	4642      	mov	r2, r8
 800378a:	189b      	adds	r3, r3, r2
 800378c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003790:	464b      	mov	r3, r9
 8003792:	460a      	mov	r2, r1
 8003794:	eb42 0303 	adc.w	r3, r2, r3
 8003798:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800379c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	67bb      	str	r3, [r7, #120]	; 0x78
 80037a6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80037a8:	f04f 0200 	mov.w	r2, #0
 80037ac:	f04f 0300 	mov.w	r3, #0
 80037b0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80037b4:	4649      	mov	r1, r9
 80037b6:	008b      	lsls	r3, r1, #2
 80037b8:	4641      	mov	r1, r8
 80037ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037be:	4641      	mov	r1, r8
 80037c0:	008a      	lsls	r2, r1, #2
 80037c2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80037c6:	f7fc fd63 	bl	8000290 <__aeabi_uldivmod>
 80037ca:	4602      	mov	r2, r0
 80037cc:	460b      	mov	r3, r1
 80037ce:	4b39      	ldr	r3, [pc, #228]	; (80038b4 <UART_SetConfig+0x4e4>)
 80037d0:	fba3 1302 	umull	r1, r3, r3, r2
 80037d4:	095b      	lsrs	r3, r3, #5
 80037d6:	2164      	movs	r1, #100	; 0x64
 80037d8:	fb01 f303 	mul.w	r3, r1, r3
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	011b      	lsls	r3, r3, #4
 80037e0:	3332      	adds	r3, #50	; 0x32
 80037e2:	4a34      	ldr	r2, [pc, #208]	; (80038b4 <UART_SetConfig+0x4e4>)
 80037e4:	fba2 2303 	umull	r2, r3, r2, r3
 80037e8:	095b      	lsrs	r3, r3, #5
 80037ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037ee:	441c      	add	r4, r3
 80037f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037f4:	2200      	movs	r2, #0
 80037f6:	673b      	str	r3, [r7, #112]	; 0x70
 80037f8:	677a      	str	r2, [r7, #116]	; 0x74
 80037fa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80037fe:	4642      	mov	r2, r8
 8003800:	464b      	mov	r3, r9
 8003802:	1891      	adds	r1, r2, r2
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	415b      	adcs	r3, r3
 8003808:	60fb      	str	r3, [r7, #12]
 800380a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800380e:	4641      	mov	r1, r8
 8003810:	1851      	adds	r1, r2, r1
 8003812:	6039      	str	r1, [r7, #0]
 8003814:	4649      	mov	r1, r9
 8003816:	414b      	adcs	r3, r1
 8003818:	607b      	str	r3, [r7, #4]
 800381a:	f04f 0200 	mov.w	r2, #0
 800381e:	f04f 0300 	mov.w	r3, #0
 8003822:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003826:	4659      	mov	r1, fp
 8003828:	00cb      	lsls	r3, r1, #3
 800382a:	4651      	mov	r1, sl
 800382c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003830:	4651      	mov	r1, sl
 8003832:	00ca      	lsls	r2, r1, #3
 8003834:	4610      	mov	r0, r2
 8003836:	4619      	mov	r1, r3
 8003838:	4603      	mov	r3, r0
 800383a:	4642      	mov	r2, r8
 800383c:	189b      	adds	r3, r3, r2
 800383e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003840:	464b      	mov	r3, r9
 8003842:	460a      	mov	r2, r1
 8003844:	eb42 0303 	adc.w	r3, r2, r3
 8003848:	66fb      	str	r3, [r7, #108]	; 0x6c
 800384a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	663b      	str	r3, [r7, #96]	; 0x60
 8003854:	667a      	str	r2, [r7, #100]	; 0x64
 8003856:	f04f 0200 	mov.w	r2, #0
 800385a:	f04f 0300 	mov.w	r3, #0
 800385e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003862:	4649      	mov	r1, r9
 8003864:	008b      	lsls	r3, r1, #2
 8003866:	4641      	mov	r1, r8
 8003868:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800386c:	4641      	mov	r1, r8
 800386e:	008a      	lsls	r2, r1, #2
 8003870:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003874:	f7fc fd0c 	bl	8000290 <__aeabi_uldivmod>
 8003878:	4602      	mov	r2, r0
 800387a:	460b      	mov	r3, r1
 800387c:	4b0d      	ldr	r3, [pc, #52]	; (80038b4 <UART_SetConfig+0x4e4>)
 800387e:	fba3 1302 	umull	r1, r3, r3, r2
 8003882:	095b      	lsrs	r3, r3, #5
 8003884:	2164      	movs	r1, #100	; 0x64
 8003886:	fb01 f303 	mul.w	r3, r1, r3
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	011b      	lsls	r3, r3, #4
 800388e:	3332      	adds	r3, #50	; 0x32
 8003890:	4a08      	ldr	r2, [pc, #32]	; (80038b4 <UART_SetConfig+0x4e4>)
 8003892:	fba2 2303 	umull	r2, r3, r2, r3
 8003896:	095b      	lsrs	r3, r3, #5
 8003898:	f003 020f 	and.w	r2, r3, #15
 800389c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4422      	add	r2, r4
 80038a4:	609a      	str	r2, [r3, #8]
}
 80038a6:	bf00      	nop
 80038a8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80038ac:	46bd      	mov	sp, r7
 80038ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038b2:	bf00      	nop
 80038b4:	51eb851f 	.word	0x51eb851f

080038b8 <__errno>:
 80038b8:	4b01      	ldr	r3, [pc, #4]	; (80038c0 <__errno+0x8>)
 80038ba:	6818      	ldr	r0, [r3, #0]
 80038bc:	4770      	bx	lr
 80038be:	bf00      	nop
 80038c0:	2000000c 	.word	0x2000000c

080038c4 <__libc_init_array>:
 80038c4:	b570      	push	{r4, r5, r6, lr}
 80038c6:	4d0d      	ldr	r5, [pc, #52]	; (80038fc <__libc_init_array+0x38>)
 80038c8:	4c0d      	ldr	r4, [pc, #52]	; (8003900 <__libc_init_array+0x3c>)
 80038ca:	1b64      	subs	r4, r4, r5
 80038cc:	10a4      	asrs	r4, r4, #2
 80038ce:	2600      	movs	r6, #0
 80038d0:	42a6      	cmp	r6, r4
 80038d2:	d109      	bne.n	80038e8 <__libc_init_array+0x24>
 80038d4:	4d0b      	ldr	r5, [pc, #44]	; (8003904 <__libc_init_array+0x40>)
 80038d6:	4c0c      	ldr	r4, [pc, #48]	; (8003908 <__libc_init_array+0x44>)
 80038d8:	f001 f824 	bl	8004924 <_init>
 80038dc:	1b64      	subs	r4, r4, r5
 80038de:	10a4      	asrs	r4, r4, #2
 80038e0:	2600      	movs	r6, #0
 80038e2:	42a6      	cmp	r6, r4
 80038e4:	d105      	bne.n	80038f2 <__libc_init_array+0x2e>
 80038e6:	bd70      	pop	{r4, r5, r6, pc}
 80038e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80038ec:	4798      	blx	r3
 80038ee:	3601      	adds	r6, #1
 80038f0:	e7ee      	b.n	80038d0 <__libc_init_array+0xc>
 80038f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80038f6:	4798      	blx	r3
 80038f8:	3601      	adds	r6, #1
 80038fa:	e7f2      	b.n	80038e2 <__libc_init_array+0x1e>
 80038fc:	080049fc 	.word	0x080049fc
 8003900:	080049fc 	.word	0x080049fc
 8003904:	080049fc 	.word	0x080049fc
 8003908:	08004a00 	.word	0x08004a00

0800390c <memset>:
 800390c:	4402      	add	r2, r0
 800390e:	4603      	mov	r3, r0
 8003910:	4293      	cmp	r3, r2
 8003912:	d100      	bne.n	8003916 <memset+0xa>
 8003914:	4770      	bx	lr
 8003916:	f803 1b01 	strb.w	r1, [r3], #1
 800391a:	e7f9      	b.n	8003910 <memset+0x4>

0800391c <iprintf>:
 800391c:	b40f      	push	{r0, r1, r2, r3}
 800391e:	4b0a      	ldr	r3, [pc, #40]	; (8003948 <iprintf+0x2c>)
 8003920:	b513      	push	{r0, r1, r4, lr}
 8003922:	681c      	ldr	r4, [r3, #0]
 8003924:	b124      	cbz	r4, 8003930 <iprintf+0x14>
 8003926:	69a3      	ldr	r3, [r4, #24]
 8003928:	b913      	cbnz	r3, 8003930 <iprintf+0x14>
 800392a:	4620      	mov	r0, r4
 800392c:	f000 fa5e 	bl	8003dec <__sinit>
 8003930:	ab05      	add	r3, sp, #20
 8003932:	9a04      	ldr	r2, [sp, #16]
 8003934:	68a1      	ldr	r1, [r4, #8]
 8003936:	9301      	str	r3, [sp, #4]
 8003938:	4620      	mov	r0, r4
 800393a:	f000 fc67 	bl	800420c <_vfiprintf_r>
 800393e:	b002      	add	sp, #8
 8003940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003944:	b004      	add	sp, #16
 8003946:	4770      	bx	lr
 8003948:	2000000c 	.word	0x2000000c

0800394c <_puts_r>:
 800394c:	b570      	push	{r4, r5, r6, lr}
 800394e:	460e      	mov	r6, r1
 8003950:	4605      	mov	r5, r0
 8003952:	b118      	cbz	r0, 800395c <_puts_r+0x10>
 8003954:	6983      	ldr	r3, [r0, #24]
 8003956:	b90b      	cbnz	r3, 800395c <_puts_r+0x10>
 8003958:	f000 fa48 	bl	8003dec <__sinit>
 800395c:	69ab      	ldr	r3, [r5, #24]
 800395e:	68ac      	ldr	r4, [r5, #8]
 8003960:	b913      	cbnz	r3, 8003968 <_puts_r+0x1c>
 8003962:	4628      	mov	r0, r5
 8003964:	f000 fa42 	bl	8003dec <__sinit>
 8003968:	4b2c      	ldr	r3, [pc, #176]	; (8003a1c <_puts_r+0xd0>)
 800396a:	429c      	cmp	r4, r3
 800396c:	d120      	bne.n	80039b0 <_puts_r+0x64>
 800396e:	686c      	ldr	r4, [r5, #4]
 8003970:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003972:	07db      	lsls	r3, r3, #31
 8003974:	d405      	bmi.n	8003982 <_puts_r+0x36>
 8003976:	89a3      	ldrh	r3, [r4, #12]
 8003978:	0598      	lsls	r0, r3, #22
 800397a:	d402      	bmi.n	8003982 <_puts_r+0x36>
 800397c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800397e:	f000 fad3 	bl	8003f28 <__retarget_lock_acquire_recursive>
 8003982:	89a3      	ldrh	r3, [r4, #12]
 8003984:	0719      	lsls	r1, r3, #28
 8003986:	d51d      	bpl.n	80039c4 <_puts_r+0x78>
 8003988:	6923      	ldr	r3, [r4, #16]
 800398a:	b1db      	cbz	r3, 80039c4 <_puts_r+0x78>
 800398c:	3e01      	subs	r6, #1
 800398e:	68a3      	ldr	r3, [r4, #8]
 8003990:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003994:	3b01      	subs	r3, #1
 8003996:	60a3      	str	r3, [r4, #8]
 8003998:	bb39      	cbnz	r1, 80039ea <_puts_r+0x9e>
 800399a:	2b00      	cmp	r3, #0
 800399c:	da38      	bge.n	8003a10 <_puts_r+0xc4>
 800399e:	4622      	mov	r2, r4
 80039a0:	210a      	movs	r1, #10
 80039a2:	4628      	mov	r0, r5
 80039a4:	f000 f848 	bl	8003a38 <__swbuf_r>
 80039a8:	3001      	adds	r0, #1
 80039aa:	d011      	beq.n	80039d0 <_puts_r+0x84>
 80039ac:	250a      	movs	r5, #10
 80039ae:	e011      	b.n	80039d4 <_puts_r+0x88>
 80039b0:	4b1b      	ldr	r3, [pc, #108]	; (8003a20 <_puts_r+0xd4>)
 80039b2:	429c      	cmp	r4, r3
 80039b4:	d101      	bne.n	80039ba <_puts_r+0x6e>
 80039b6:	68ac      	ldr	r4, [r5, #8]
 80039b8:	e7da      	b.n	8003970 <_puts_r+0x24>
 80039ba:	4b1a      	ldr	r3, [pc, #104]	; (8003a24 <_puts_r+0xd8>)
 80039bc:	429c      	cmp	r4, r3
 80039be:	bf08      	it	eq
 80039c0:	68ec      	ldreq	r4, [r5, #12]
 80039c2:	e7d5      	b.n	8003970 <_puts_r+0x24>
 80039c4:	4621      	mov	r1, r4
 80039c6:	4628      	mov	r0, r5
 80039c8:	f000 f888 	bl	8003adc <__swsetup_r>
 80039cc:	2800      	cmp	r0, #0
 80039ce:	d0dd      	beq.n	800398c <_puts_r+0x40>
 80039d0:	f04f 35ff 	mov.w	r5, #4294967295
 80039d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80039d6:	07da      	lsls	r2, r3, #31
 80039d8:	d405      	bmi.n	80039e6 <_puts_r+0x9a>
 80039da:	89a3      	ldrh	r3, [r4, #12]
 80039dc:	059b      	lsls	r3, r3, #22
 80039de:	d402      	bmi.n	80039e6 <_puts_r+0x9a>
 80039e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80039e2:	f000 faa2 	bl	8003f2a <__retarget_lock_release_recursive>
 80039e6:	4628      	mov	r0, r5
 80039e8:	bd70      	pop	{r4, r5, r6, pc}
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	da04      	bge.n	80039f8 <_puts_r+0xac>
 80039ee:	69a2      	ldr	r2, [r4, #24]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	dc06      	bgt.n	8003a02 <_puts_r+0xb6>
 80039f4:	290a      	cmp	r1, #10
 80039f6:	d004      	beq.n	8003a02 <_puts_r+0xb6>
 80039f8:	6823      	ldr	r3, [r4, #0]
 80039fa:	1c5a      	adds	r2, r3, #1
 80039fc:	6022      	str	r2, [r4, #0]
 80039fe:	7019      	strb	r1, [r3, #0]
 8003a00:	e7c5      	b.n	800398e <_puts_r+0x42>
 8003a02:	4622      	mov	r2, r4
 8003a04:	4628      	mov	r0, r5
 8003a06:	f000 f817 	bl	8003a38 <__swbuf_r>
 8003a0a:	3001      	adds	r0, #1
 8003a0c:	d1bf      	bne.n	800398e <_puts_r+0x42>
 8003a0e:	e7df      	b.n	80039d0 <_puts_r+0x84>
 8003a10:	6823      	ldr	r3, [r4, #0]
 8003a12:	250a      	movs	r5, #10
 8003a14:	1c5a      	adds	r2, r3, #1
 8003a16:	6022      	str	r2, [r4, #0]
 8003a18:	701d      	strb	r5, [r3, #0]
 8003a1a:	e7db      	b.n	80039d4 <_puts_r+0x88>
 8003a1c:	08004980 	.word	0x08004980
 8003a20:	080049a0 	.word	0x080049a0
 8003a24:	08004960 	.word	0x08004960

08003a28 <puts>:
 8003a28:	4b02      	ldr	r3, [pc, #8]	; (8003a34 <puts+0xc>)
 8003a2a:	4601      	mov	r1, r0
 8003a2c:	6818      	ldr	r0, [r3, #0]
 8003a2e:	f7ff bf8d 	b.w	800394c <_puts_r>
 8003a32:	bf00      	nop
 8003a34:	2000000c 	.word	0x2000000c

08003a38 <__swbuf_r>:
 8003a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a3a:	460e      	mov	r6, r1
 8003a3c:	4614      	mov	r4, r2
 8003a3e:	4605      	mov	r5, r0
 8003a40:	b118      	cbz	r0, 8003a4a <__swbuf_r+0x12>
 8003a42:	6983      	ldr	r3, [r0, #24]
 8003a44:	b90b      	cbnz	r3, 8003a4a <__swbuf_r+0x12>
 8003a46:	f000 f9d1 	bl	8003dec <__sinit>
 8003a4a:	4b21      	ldr	r3, [pc, #132]	; (8003ad0 <__swbuf_r+0x98>)
 8003a4c:	429c      	cmp	r4, r3
 8003a4e:	d12b      	bne.n	8003aa8 <__swbuf_r+0x70>
 8003a50:	686c      	ldr	r4, [r5, #4]
 8003a52:	69a3      	ldr	r3, [r4, #24]
 8003a54:	60a3      	str	r3, [r4, #8]
 8003a56:	89a3      	ldrh	r3, [r4, #12]
 8003a58:	071a      	lsls	r2, r3, #28
 8003a5a:	d52f      	bpl.n	8003abc <__swbuf_r+0x84>
 8003a5c:	6923      	ldr	r3, [r4, #16]
 8003a5e:	b36b      	cbz	r3, 8003abc <__swbuf_r+0x84>
 8003a60:	6923      	ldr	r3, [r4, #16]
 8003a62:	6820      	ldr	r0, [r4, #0]
 8003a64:	1ac0      	subs	r0, r0, r3
 8003a66:	6963      	ldr	r3, [r4, #20]
 8003a68:	b2f6      	uxtb	r6, r6
 8003a6a:	4283      	cmp	r3, r0
 8003a6c:	4637      	mov	r7, r6
 8003a6e:	dc04      	bgt.n	8003a7a <__swbuf_r+0x42>
 8003a70:	4621      	mov	r1, r4
 8003a72:	4628      	mov	r0, r5
 8003a74:	f000 f926 	bl	8003cc4 <_fflush_r>
 8003a78:	bb30      	cbnz	r0, 8003ac8 <__swbuf_r+0x90>
 8003a7a:	68a3      	ldr	r3, [r4, #8]
 8003a7c:	3b01      	subs	r3, #1
 8003a7e:	60a3      	str	r3, [r4, #8]
 8003a80:	6823      	ldr	r3, [r4, #0]
 8003a82:	1c5a      	adds	r2, r3, #1
 8003a84:	6022      	str	r2, [r4, #0]
 8003a86:	701e      	strb	r6, [r3, #0]
 8003a88:	6963      	ldr	r3, [r4, #20]
 8003a8a:	3001      	adds	r0, #1
 8003a8c:	4283      	cmp	r3, r0
 8003a8e:	d004      	beq.n	8003a9a <__swbuf_r+0x62>
 8003a90:	89a3      	ldrh	r3, [r4, #12]
 8003a92:	07db      	lsls	r3, r3, #31
 8003a94:	d506      	bpl.n	8003aa4 <__swbuf_r+0x6c>
 8003a96:	2e0a      	cmp	r6, #10
 8003a98:	d104      	bne.n	8003aa4 <__swbuf_r+0x6c>
 8003a9a:	4621      	mov	r1, r4
 8003a9c:	4628      	mov	r0, r5
 8003a9e:	f000 f911 	bl	8003cc4 <_fflush_r>
 8003aa2:	b988      	cbnz	r0, 8003ac8 <__swbuf_r+0x90>
 8003aa4:	4638      	mov	r0, r7
 8003aa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003aa8:	4b0a      	ldr	r3, [pc, #40]	; (8003ad4 <__swbuf_r+0x9c>)
 8003aaa:	429c      	cmp	r4, r3
 8003aac:	d101      	bne.n	8003ab2 <__swbuf_r+0x7a>
 8003aae:	68ac      	ldr	r4, [r5, #8]
 8003ab0:	e7cf      	b.n	8003a52 <__swbuf_r+0x1a>
 8003ab2:	4b09      	ldr	r3, [pc, #36]	; (8003ad8 <__swbuf_r+0xa0>)
 8003ab4:	429c      	cmp	r4, r3
 8003ab6:	bf08      	it	eq
 8003ab8:	68ec      	ldreq	r4, [r5, #12]
 8003aba:	e7ca      	b.n	8003a52 <__swbuf_r+0x1a>
 8003abc:	4621      	mov	r1, r4
 8003abe:	4628      	mov	r0, r5
 8003ac0:	f000 f80c 	bl	8003adc <__swsetup_r>
 8003ac4:	2800      	cmp	r0, #0
 8003ac6:	d0cb      	beq.n	8003a60 <__swbuf_r+0x28>
 8003ac8:	f04f 37ff 	mov.w	r7, #4294967295
 8003acc:	e7ea      	b.n	8003aa4 <__swbuf_r+0x6c>
 8003ace:	bf00      	nop
 8003ad0:	08004980 	.word	0x08004980
 8003ad4:	080049a0 	.word	0x080049a0
 8003ad8:	08004960 	.word	0x08004960

08003adc <__swsetup_r>:
 8003adc:	4b32      	ldr	r3, [pc, #200]	; (8003ba8 <__swsetup_r+0xcc>)
 8003ade:	b570      	push	{r4, r5, r6, lr}
 8003ae0:	681d      	ldr	r5, [r3, #0]
 8003ae2:	4606      	mov	r6, r0
 8003ae4:	460c      	mov	r4, r1
 8003ae6:	b125      	cbz	r5, 8003af2 <__swsetup_r+0x16>
 8003ae8:	69ab      	ldr	r3, [r5, #24]
 8003aea:	b913      	cbnz	r3, 8003af2 <__swsetup_r+0x16>
 8003aec:	4628      	mov	r0, r5
 8003aee:	f000 f97d 	bl	8003dec <__sinit>
 8003af2:	4b2e      	ldr	r3, [pc, #184]	; (8003bac <__swsetup_r+0xd0>)
 8003af4:	429c      	cmp	r4, r3
 8003af6:	d10f      	bne.n	8003b18 <__swsetup_r+0x3c>
 8003af8:	686c      	ldr	r4, [r5, #4]
 8003afa:	89a3      	ldrh	r3, [r4, #12]
 8003afc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003b00:	0719      	lsls	r1, r3, #28
 8003b02:	d42c      	bmi.n	8003b5e <__swsetup_r+0x82>
 8003b04:	06dd      	lsls	r5, r3, #27
 8003b06:	d411      	bmi.n	8003b2c <__swsetup_r+0x50>
 8003b08:	2309      	movs	r3, #9
 8003b0a:	6033      	str	r3, [r6, #0]
 8003b0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003b10:	81a3      	strh	r3, [r4, #12]
 8003b12:	f04f 30ff 	mov.w	r0, #4294967295
 8003b16:	e03e      	b.n	8003b96 <__swsetup_r+0xba>
 8003b18:	4b25      	ldr	r3, [pc, #148]	; (8003bb0 <__swsetup_r+0xd4>)
 8003b1a:	429c      	cmp	r4, r3
 8003b1c:	d101      	bne.n	8003b22 <__swsetup_r+0x46>
 8003b1e:	68ac      	ldr	r4, [r5, #8]
 8003b20:	e7eb      	b.n	8003afa <__swsetup_r+0x1e>
 8003b22:	4b24      	ldr	r3, [pc, #144]	; (8003bb4 <__swsetup_r+0xd8>)
 8003b24:	429c      	cmp	r4, r3
 8003b26:	bf08      	it	eq
 8003b28:	68ec      	ldreq	r4, [r5, #12]
 8003b2a:	e7e6      	b.n	8003afa <__swsetup_r+0x1e>
 8003b2c:	0758      	lsls	r0, r3, #29
 8003b2e:	d512      	bpl.n	8003b56 <__swsetup_r+0x7a>
 8003b30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003b32:	b141      	cbz	r1, 8003b46 <__swsetup_r+0x6a>
 8003b34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003b38:	4299      	cmp	r1, r3
 8003b3a:	d002      	beq.n	8003b42 <__swsetup_r+0x66>
 8003b3c:	4630      	mov	r0, r6
 8003b3e:	f000 fa5b 	bl	8003ff8 <_free_r>
 8003b42:	2300      	movs	r3, #0
 8003b44:	6363      	str	r3, [r4, #52]	; 0x34
 8003b46:	89a3      	ldrh	r3, [r4, #12]
 8003b48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003b4c:	81a3      	strh	r3, [r4, #12]
 8003b4e:	2300      	movs	r3, #0
 8003b50:	6063      	str	r3, [r4, #4]
 8003b52:	6923      	ldr	r3, [r4, #16]
 8003b54:	6023      	str	r3, [r4, #0]
 8003b56:	89a3      	ldrh	r3, [r4, #12]
 8003b58:	f043 0308 	orr.w	r3, r3, #8
 8003b5c:	81a3      	strh	r3, [r4, #12]
 8003b5e:	6923      	ldr	r3, [r4, #16]
 8003b60:	b94b      	cbnz	r3, 8003b76 <__swsetup_r+0x9a>
 8003b62:	89a3      	ldrh	r3, [r4, #12]
 8003b64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003b68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b6c:	d003      	beq.n	8003b76 <__swsetup_r+0x9a>
 8003b6e:	4621      	mov	r1, r4
 8003b70:	4630      	mov	r0, r6
 8003b72:	f000 fa01 	bl	8003f78 <__smakebuf_r>
 8003b76:	89a0      	ldrh	r0, [r4, #12]
 8003b78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003b7c:	f010 0301 	ands.w	r3, r0, #1
 8003b80:	d00a      	beq.n	8003b98 <__swsetup_r+0xbc>
 8003b82:	2300      	movs	r3, #0
 8003b84:	60a3      	str	r3, [r4, #8]
 8003b86:	6963      	ldr	r3, [r4, #20]
 8003b88:	425b      	negs	r3, r3
 8003b8a:	61a3      	str	r3, [r4, #24]
 8003b8c:	6923      	ldr	r3, [r4, #16]
 8003b8e:	b943      	cbnz	r3, 8003ba2 <__swsetup_r+0xc6>
 8003b90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003b94:	d1ba      	bne.n	8003b0c <__swsetup_r+0x30>
 8003b96:	bd70      	pop	{r4, r5, r6, pc}
 8003b98:	0781      	lsls	r1, r0, #30
 8003b9a:	bf58      	it	pl
 8003b9c:	6963      	ldrpl	r3, [r4, #20]
 8003b9e:	60a3      	str	r3, [r4, #8]
 8003ba0:	e7f4      	b.n	8003b8c <__swsetup_r+0xb0>
 8003ba2:	2000      	movs	r0, #0
 8003ba4:	e7f7      	b.n	8003b96 <__swsetup_r+0xba>
 8003ba6:	bf00      	nop
 8003ba8:	2000000c 	.word	0x2000000c
 8003bac:	08004980 	.word	0x08004980
 8003bb0:	080049a0 	.word	0x080049a0
 8003bb4:	08004960 	.word	0x08004960

08003bb8 <__sflush_r>:
 8003bb8:	898a      	ldrh	r2, [r1, #12]
 8003bba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bbe:	4605      	mov	r5, r0
 8003bc0:	0710      	lsls	r0, r2, #28
 8003bc2:	460c      	mov	r4, r1
 8003bc4:	d458      	bmi.n	8003c78 <__sflush_r+0xc0>
 8003bc6:	684b      	ldr	r3, [r1, #4]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	dc05      	bgt.n	8003bd8 <__sflush_r+0x20>
 8003bcc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	dc02      	bgt.n	8003bd8 <__sflush_r+0x20>
 8003bd2:	2000      	movs	r0, #0
 8003bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003bd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003bda:	2e00      	cmp	r6, #0
 8003bdc:	d0f9      	beq.n	8003bd2 <__sflush_r+0x1a>
 8003bde:	2300      	movs	r3, #0
 8003be0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003be4:	682f      	ldr	r7, [r5, #0]
 8003be6:	602b      	str	r3, [r5, #0]
 8003be8:	d032      	beq.n	8003c50 <__sflush_r+0x98>
 8003bea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003bec:	89a3      	ldrh	r3, [r4, #12]
 8003bee:	075a      	lsls	r2, r3, #29
 8003bf0:	d505      	bpl.n	8003bfe <__sflush_r+0x46>
 8003bf2:	6863      	ldr	r3, [r4, #4]
 8003bf4:	1ac0      	subs	r0, r0, r3
 8003bf6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003bf8:	b10b      	cbz	r3, 8003bfe <__sflush_r+0x46>
 8003bfa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003bfc:	1ac0      	subs	r0, r0, r3
 8003bfe:	2300      	movs	r3, #0
 8003c00:	4602      	mov	r2, r0
 8003c02:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003c04:	6a21      	ldr	r1, [r4, #32]
 8003c06:	4628      	mov	r0, r5
 8003c08:	47b0      	blx	r6
 8003c0a:	1c43      	adds	r3, r0, #1
 8003c0c:	89a3      	ldrh	r3, [r4, #12]
 8003c0e:	d106      	bne.n	8003c1e <__sflush_r+0x66>
 8003c10:	6829      	ldr	r1, [r5, #0]
 8003c12:	291d      	cmp	r1, #29
 8003c14:	d82c      	bhi.n	8003c70 <__sflush_r+0xb8>
 8003c16:	4a2a      	ldr	r2, [pc, #168]	; (8003cc0 <__sflush_r+0x108>)
 8003c18:	40ca      	lsrs	r2, r1
 8003c1a:	07d6      	lsls	r6, r2, #31
 8003c1c:	d528      	bpl.n	8003c70 <__sflush_r+0xb8>
 8003c1e:	2200      	movs	r2, #0
 8003c20:	6062      	str	r2, [r4, #4]
 8003c22:	04d9      	lsls	r1, r3, #19
 8003c24:	6922      	ldr	r2, [r4, #16]
 8003c26:	6022      	str	r2, [r4, #0]
 8003c28:	d504      	bpl.n	8003c34 <__sflush_r+0x7c>
 8003c2a:	1c42      	adds	r2, r0, #1
 8003c2c:	d101      	bne.n	8003c32 <__sflush_r+0x7a>
 8003c2e:	682b      	ldr	r3, [r5, #0]
 8003c30:	b903      	cbnz	r3, 8003c34 <__sflush_r+0x7c>
 8003c32:	6560      	str	r0, [r4, #84]	; 0x54
 8003c34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003c36:	602f      	str	r7, [r5, #0]
 8003c38:	2900      	cmp	r1, #0
 8003c3a:	d0ca      	beq.n	8003bd2 <__sflush_r+0x1a>
 8003c3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003c40:	4299      	cmp	r1, r3
 8003c42:	d002      	beq.n	8003c4a <__sflush_r+0x92>
 8003c44:	4628      	mov	r0, r5
 8003c46:	f000 f9d7 	bl	8003ff8 <_free_r>
 8003c4a:	2000      	movs	r0, #0
 8003c4c:	6360      	str	r0, [r4, #52]	; 0x34
 8003c4e:	e7c1      	b.n	8003bd4 <__sflush_r+0x1c>
 8003c50:	6a21      	ldr	r1, [r4, #32]
 8003c52:	2301      	movs	r3, #1
 8003c54:	4628      	mov	r0, r5
 8003c56:	47b0      	blx	r6
 8003c58:	1c41      	adds	r1, r0, #1
 8003c5a:	d1c7      	bne.n	8003bec <__sflush_r+0x34>
 8003c5c:	682b      	ldr	r3, [r5, #0]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d0c4      	beq.n	8003bec <__sflush_r+0x34>
 8003c62:	2b1d      	cmp	r3, #29
 8003c64:	d001      	beq.n	8003c6a <__sflush_r+0xb2>
 8003c66:	2b16      	cmp	r3, #22
 8003c68:	d101      	bne.n	8003c6e <__sflush_r+0xb6>
 8003c6a:	602f      	str	r7, [r5, #0]
 8003c6c:	e7b1      	b.n	8003bd2 <__sflush_r+0x1a>
 8003c6e:	89a3      	ldrh	r3, [r4, #12]
 8003c70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c74:	81a3      	strh	r3, [r4, #12]
 8003c76:	e7ad      	b.n	8003bd4 <__sflush_r+0x1c>
 8003c78:	690f      	ldr	r7, [r1, #16]
 8003c7a:	2f00      	cmp	r7, #0
 8003c7c:	d0a9      	beq.n	8003bd2 <__sflush_r+0x1a>
 8003c7e:	0793      	lsls	r3, r2, #30
 8003c80:	680e      	ldr	r6, [r1, #0]
 8003c82:	bf08      	it	eq
 8003c84:	694b      	ldreq	r3, [r1, #20]
 8003c86:	600f      	str	r7, [r1, #0]
 8003c88:	bf18      	it	ne
 8003c8a:	2300      	movne	r3, #0
 8003c8c:	eba6 0807 	sub.w	r8, r6, r7
 8003c90:	608b      	str	r3, [r1, #8]
 8003c92:	f1b8 0f00 	cmp.w	r8, #0
 8003c96:	dd9c      	ble.n	8003bd2 <__sflush_r+0x1a>
 8003c98:	6a21      	ldr	r1, [r4, #32]
 8003c9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003c9c:	4643      	mov	r3, r8
 8003c9e:	463a      	mov	r2, r7
 8003ca0:	4628      	mov	r0, r5
 8003ca2:	47b0      	blx	r6
 8003ca4:	2800      	cmp	r0, #0
 8003ca6:	dc06      	bgt.n	8003cb6 <__sflush_r+0xfe>
 8003ca8:	89a3      	ldrh	r3, [r4, #12]
 8003caa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cae:	81a3      	strh	r3, [r4, #12]
 8003cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8003cb4:	e78e      	b.n	8003bd4 <__sflush_r+0x1c>
 8003cb6:	4407      	add	r7, r0
 8003cb8:	eba8 0800 	sub.w	r8, r8, r0
 8003cbc:	e7e9      	b.n	8003c92 <__sflush_r+0xda>
 8003cbe:	bf00      	nop
 8003cc0:	20400001 	.word	0x20400001

08003cc4 <_fflush_r>:
 8003cc4:	b538      	push	{r3, r4, r5, lr}
 8003cc6:	690b      	ldr	r3, [r1, #16]
 8003cc8:	4605      	mov	r5, r0
 8003cca:	460c      	mov	r4, r1
 8003ccc:	b913      	cbnz	r3, 8003cd4 <_fflush_r+0x10>
 8003cce:	2500      	movs	r5, #0
 8003cd0:	4628      	mov	r0, r5
 8003cd2:	bd38      	pop	{r3, r4, r5, pc}
 8003cd4:	b118      	cbz	r0, 8003cde <_fflush_r+0x1a>
 8003cd6:	6983      	ldr	r3, [r0, #24]
 8003cd8:	b90b      	cbnz	r3, 8003cde <_fflush_r+0x1a>
 8003cda:	f000 f887 	bl	8003dec <__sinit>
 8003cde:	4b14      	ldr	r3, [pc, #80]	; (8003d30 <_fflush_r+0x6c>)
 8003ce0:	429c      	cmp	r4, r3
 8003ce2:	d11b      	bne.n	8003d1c <_fflush_r+0x58>
 8003ce4:	686c      	ldr	r4, [r5, #4]
 8003ce6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d0ef      	beq.n	8003cce <_fflush_r+0xa>
 8003cee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003cf0:	07d0      	lsls	r0, r2, #31
 8003cf2:	d404      	bmi.n	8003cfe <_fflush_r+0x3a>
 8003cf4:	0599      	lsls	r1, r3, #22
 8003cf6:	d402      	bmi.n	8003cfe <_fflush_r+0x3a>
 8003cf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003cfa:	f000 f915 	bl	8003f28 <__retarget_lock_acquire_recursive>
 8003cfe:	4628      	mov	r0, r5
 8003d00:	4621      	mov	r1, r4
 8003d02:	f7ff ff59 	bl	8003bb8 <__sflush_r>
 8003d06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003d08:	07da      	lsls	r2, r3, #31
 8003d0a:	4605      	mov	r5, r0
 8003d0c:	d4e0      	bmi.n	8003cd0 <_fflush_r+0xc>
 8003d0e:	89a3      	ldrh	r3, [r4, #12]
 8003d10:	059b      	lsls	r3, r3, #22
 8003d12:	d4dd      	bmi.n	8003cd0 <_fflush_r+0xc>
 8003d14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d16:	f000 f908 	bl	8003f2a <__retarget_lock_release_recursive>
 8003d1a:	e7d9      	b.n	8003cd0 <_fflush_r+0xc>
 8003d1c:	4b05      	ldr	r3, [pc, #20]	; (8003d34 <_fflush_r+0x70>)
 8003d1e:	429c      	cmp	r4, r3
 8003d20:	d101      	bne.n	8003d26 <_fflush_r+0x62>
 8003d22:	68ac      	ldr	r4, [r5, #8]
 8003d24:	e7df      	b.n	8003ce6 <_fflush_r+0x22>
 8003d26:	4b04      	ldr	r3, [pc, #16]	; (8003d38 <_fflush_r+0x74>)
 8003d28:	429c      	cmp	r4, r3
 8003d2a:	bf08      	it	eq
 8003d2c:	68ec      	ldreq	r4, [r5, #12]
 8003d2e:	e7da      	b.n	8003ce6 <_fflush_r+0x22>
 8003d30:	08004980 	.word	0x08004980
 8003d34:	080049a0 	.word	0x080049a0
 8003d38:	08004960 	.word	0x08004960

08003d3c <std>:
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	b510      	push	{r4, lr}
 8003d40:	4604      	mov	r4, r0
 8003d42:	e9c0 3300 	strd	r3, r3, [r0]
 8003d46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003d4a:	6083      	str	r3, [r0, #8]
 8003d4c:	8181      	strh	r1, [r0, #12]
 8003d4e:	6643      	str	r3, [r0, #100]	; 0x64
 8003d50:	81c2      	strh	r2, [r0, #14]
 8003d52:	6183      	str	r3, [r0, #24]
 8003d54:	4619      	mov	r1, r3
 8003d56:	2208      	movs	r2, #8
 8003d58:	305c      	adds	r0, #92	; 0x5c
 8003d5a:	f7ff fdd7 	bl	800390c <memset>
 8003d5e:	4b05      	ldr	r3, [pc, #20]	; (8003d74 <std+0x38>)
 8003d60:	6263      	str	r3, [r4, #36]	; 0x24
 8003d62:	4b05      	ldr	r3, [pc, #20]	; (8003d78 <std+0x3c>)
 8003d64:	62a3      	str	r3, [r4, #40]	; 0x28
 8003d66:	4b05      	ldr	r3, [pc, #20]	; (8003d7c <std+0x40>)
 8003d68:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003d6a:	4b05      	ldr	r3, [pc, #20]	; (8003d80 <std+0x44>)
 8003d6c:	6224      	str	r4, [r4, #32]
 8003d6e:	6323      	str	r3, [r4, #48]	; 0x30
 8003d70:	bd10      	pop	{r4, pc}
 8003d72:	bf00      	nop
 8003d74:	080047b5 	.word	0x080047b5
 8003d78:	080047d7 	.word	0x080047d7
 8003d7c:	0800480f 	.word	0x0800480f
 8003d80:	08004833 	.word	0x08004833

08003d84 <_cleanup_r>:
 8003d84:	4901      	ldr	r1, [pc, #4]	; (8003d8c <_cleanup_r+0x8>)
 8003d86:	f000 b8af 	b.w	8003ee8 <_fwalk_reent>
 8003d8a:	bf00      	nop
 8003d8c:	08003cc5 	.word	0x08003cc5

08003d90 <__sfmoreglue>:
 8003d90:	b570      	push	{r4, r5, r6, lr}
 8003d92:	2268      	movs	r2, #104	; 0x68
 8003d94:	1e4d      	subs	r5, r1, #1
 8003d96:	4355      	muls	r5, r2
 8003d98:	460e      	mov	r6, r1
 8003d9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003d9e:	f000 f997 	bl	80040d0 <_malloc_r>
 8003da2:	4604      	mov	r4, r0
 8003da4:	b140      	cbz	r0, 8003db8 <__sfmoreglue+0x28>
 8003da6:	2100      	movs	r1, #0
 8003da8:	e9c0 1600 	strd	r1, r6, [r0]
 8003dac:	300c      	adds	r0, #12
 8003dae:	60a0      	str	r0, [r4, #8]
 8003db0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003db4:	f7ff fdaa 	bl	800390c <memset>
 8003db8:	4620      	mov	r0, r4
 8003dba:	bd70      	pop	{r4, r5, r6, pc}

08003dbc <__sfp_lock_acquire>:
 8003dbc:	4801      	ldr	r0, [pc, #4]	; (8003dc4 <__sfp_lock_acquire+0x8>)
 8003dbe:	f000 b8b3 	b.w	8003f28 <__retarget_lock_acquire_recursive>
 8003dc2:	bf00      	nop
 8003dc4:	20000135 	.word	0x20000135

08003dc8 <__sfp_lock_release>:
 8003dc8:	4801      	ldr	r0, [pc, #4]	; (8003dd0 <__sfp_lock_release+0x8>)
 8003dca:	f000 b8ae 	b.w	8003f2a <__retarget_lock_release_recursive>
 8003dce:	bf00      	nop
 8003dd0:	20000135 	.word	0x20000135

08003dd4 <__sinit_lock_acquire>:
 8003dd4:	4801      	ldr	r0, [pc, #4]	; (8003ddc <__sinit_lock_acquire+0x8>)
 8003dd6:	f000 b8a7 	b.w	8003f28 <__retarget_lock_acquire_recursive>
 8003dda:	bf00      	nop
 8003ddc:	20000136 	.word	0x20000136

08003de0 <__sinit_lock_release>:
 8003de0:	4801      	ldr	r0, [pc, #4]	; (8003de8 <__sinit_lock_release+0x8>)
 8003de2:	f000 b8a2 	b.w	8003f2a <__retarget_lock_release_recursive>
 8003de6:	bf00      	nop
 8003de8:	20000136 	.word	0x20000136

08003dec <__sinit>:
 8003dec:	b510      	push	{r4, lr}
 8003dee:	4604      	mov	r4, r0
 8003df0:	f7ff fff0 	bl	8003dd4 <__sinit_lock_acquire>
 8003df4:	69a3      	ldr	r3, [r4, #24]
 8003df6:	b11b      	cbz	r3, 8003e00 <__sinit+0x14>
 8003df8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003dfc:	f7ff bff0 	b.w	8003de0 <__sinit_lock_release>
 8003e00:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003e04:	6523      	str	r3, [r4, #80]	; 0x50
 8003e06:	4b13      	ldr	r3, [pc, #76]	; (8003e54 <__sinit+0x68>)
 8003e08:	4a13      	ldr	r2, [pc, #76]	; (8003e58 <__sinit+0x6c>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	62a2      	str	r2, [r4, #40]	; 0x28
 8003e0e:	42a3      	cmp	r3, r4
 8003e10:	bf04      	itt	eq
 8003e12:	2301      	moveq	r3, #1
 8003e14:	61a3      	streq	r3, [r4, #24]
 8003e16:	4620      	mov	r0, r4
 8003e18:	f000 f820 	bl	8003e5c <__sfp>
 8003e1c:	6060      	str	r0, [r4, #4]
 8003e1e:	4620      	mov	r0, r4
 8003e20:	f000 f81c 	bl	8003e5c <__sfp>
 8003e24:	60a0      	str	r0, [r4, #8]
 8003e26:	4620      	mov	r0, r4
 8003e28:	f000 f818 	bl	8003e5c <__sfp>
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	60e0      	str	r0, [r4, #12]
 8003e30:	2104      	movs	r1, #4
 8003e32:	6860      	ldr	r0, [r4, #4]
 8003e34:	f7ff ff82 	bl	8003d3c <std>
 8003e38:	68a0      	ldr	r0, [r4, #8]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	2109      	movs	r1, #9
 8003e3e:	f7ff ff7d 	bl	8003d3c <std>
 8003e42:	68e0      	ldr	r0, [r4, #12]
 8003e44:	2202      	movs	r2, #2
 8003e46:	2112      	movs	r1, #18
 8003e48:	f7ff ff78 	bl	8003d3c <std>
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	61a3      	str	r3, [r4, #24]
 8003e50:	e7d2      	b.n	8003df8 <__sinit+0xc>
 8003e52:	bf00      	nop
 8003e54:	0800495c 	.word	0x0800495c
 8003e58:	08003d85 	.word	0x08003d85

08003e5c <__sfp>:
 8003e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e5e:	4607      	mov	r7, r0
 8003e60:	f7ff ffac 	bl	8003dbc <__sfp_lock_acquire>
 8003e64:	4b1e      	ldr	r3, [pc, #120]	; (8003ee0 <__sfp+0x84>)
 8003e66:	681e      	ldr	r6, [r3, #0]
 8003e68:	69b3      	ldr	r3, [r6, #24]
 8003e6a:	b913      	cbnz	r3, 8003e72 <__sfp+0x16>
 8003e6c:	4630      	mov	r0, r6
 8003e6e:	f7ff ffbd 	bl	8003dec <__sinit>
 8003e72:	3648      	adds	r6, #72	; 0x48
 8003e74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	d503      	bpl.n	8003e84 <__sfp+0x28>
 8003e7c:	6833      	ldr	r3, [r6, #0]
 8003e7e:	b30b      	cbz	r3, 8003ec4 <__sfp+0x68>
 8003e80:	6836      	ldr	r6, [r6, #0]
 8003e82:	e7f7      	b.n	8003e74 <__sfp+0x18>
 8003e84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003e88:	b9d5      	cbnz	r5, 8003ec0 <__sfp+0x64>
 8003e8a:	4b16      	ldr	r3, [pc, #88]	; (8003ee4 <__sfp+0x88>)
 8003e8c:	60e3      	str	r3, [r4, #12]
 8003e8e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003e92:	6665      	str	r5, [r4, #100]	; 0x64
 8003e94:	f000 f847 	bl	8003f26 <__retarget_lock_init_recursive>
 8003e98:	f7ff ff96 	bl	8003dc8 <__sfp_lock_release>
 8003e9c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003ea0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003ea4:	6025      	str	r5, [r4, #0]
 8003ea6:	61a5      	str	r5, [r4, #24]
 8003ea8:	2208      	movs	r2, #8
 8003eaa:	4629      	mov	r1, r5
 8003eac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003eb0:	f7ff fd2c 	bl	800390c <memset>
 8003eb4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003eb8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003ebc:	4620      	mov	r0, r4
 8003ebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ec0:	3468      	adds	r4, #104	; 0x68
 8003ec2:	e7d9      	b.n	8003e78 <__sfp+0x1c>
 8003ec4:	2104      	movs	r1, #4
 8003ec6:	4638      	mov	r0, r7
 8003ec8:	f7ff ff62 	bl	8003d90 <__sfmoreglue>
 8003ecc:	4604      	mov	r4, r0
 8003ece:	6030      	str	r0, [r6, #0]
 8003ed0:	2800      	cmp	r0, #0
 8003ed2:	d1d5      	bne.n	8003e80 <__sfp+0x24>
 8003ed4:	f7ff ff78 	bl	8003dc8 <__sfp_lock_release>
 8003ed8:	230c      	movs	r3, #12
 8003eda:	603b      	str	r3, [r7, #0]
 8003edc:	e7ee      	b.n	8003ebc <__sfp+0x60>
 8003ede:	bf00      	nop
 8003ee0:	0800495c 	.word	0x0800495c
 8003ee4:	ffff0001 	.word	0xffff0001

08003ee8 <_fwalk_reent>:
 8003ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003eec:	4606      	mov	r6, r0
 8003eee:	4688      	mov	r8, r1
 8003ef0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003ef4:	2700      	movs	r7, #0
 8003ef6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003efa:	f1b9 0901 	subs.w	r9, r9, #1
 8003efe:	d505      	bpl.n	8003f0c <_fwalk_reent+0x24>
 8003f00:	6824      	ldr	r4, [r4, #0]
 8003f02:	2c00      	cmp	r4, #0
 8003f04:	d1f7      	bne.n	8003ef6 <_fwalk_reent+0xe>
 8003f06:	4638      	mov	r0, r7
 8003f08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f0c:	89ab      	ldrh	r3, [r5, #12]
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d907      	bls.n	8003f22 <_fwalk_reent+0x3a>
 8003f12:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003f16:	3301      	adds	r3, #1
 8003f18:	d003      	beq.n	8003f22 <_fwalk_reent+0x3a>
 8003f1a:	4629      	mov	r1, r5
 8003f1c:	4630      	mov	r0, r6
 8003f1e:	47c0      	blx	r8
 8003f20:	4307      	orrs	r7, r0
 8003f22:	3568      	adds	r5, #104	; 0x68
 8003f24:	e7e9      	b.n	8003efa <_fwalk_reent+0x12>

08003f26 <__retarget_lock_init_recursive>:
 8003f26:	4770      	bx	lr

08003f28 <__retarget_lock_acquire_recursive>:
 8003f28:	4770      	bx	lr

08003f2a <__retarget_lock_release_recursive>:
 8003f2a:	4770      	bx	lr

08003f2c <__swhatbuf_r>:
 8003f2c:	b570      	push	{r4, r5, r6, lr}
 8003f2e:	460e      	mov	r6, r1
 8003f30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f34:	2900      	cmp	r1, #0
 8003f36:	b096      	sub	sp, #88	; 0x58
 8003f38:	4614      	mov	r4, r2
 8003f3a:	461d      	mov	r5, r3
 8003f3c:	da08      	bge.n	8003f50 <__swhatbuf_r+0x24>
 8003f3e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003f42:	2200      	movs	r2, #0
 8003f44:	602a      	str	r2, [r5, #0]
 8003f46:	061a      	lsls	r2, r3, #24
 8003f48:	d410      	bmi.n	8003f6c <__swhatbuf_r+0x40>
 8003f4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f4e:	e00e      	b.n	8003f6e <__swhatbuf_r+0x42>
 8003f50:	466a      	mov	r2, sp
 8003f52:	f000 fc95 	bl	8004880 <_fstat_r>
 8003f56:	2800      	cmp	r0, #0
 8003f58:	dbf1      	blt.n	8003f3e <__swhatbuf_r+0x12>
 8003f5a:	9a01      	ldr	r2, [sp, #4]
 8003f5c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003f60:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003f64:	425a      	negs	r2, r3
 8003f66:	415a      	adcs	r2, r3
 8003f68:	602a      	str	r2, [r5, #0]
 8003f6a:	e7ee      	b.n	8003f4a <__swhatbuf_r+0x1e>
 8003f6c:	2340      	movs	r3, #64	; 0x40
 8003f6e:	2000      	movs	r0, #0
 8003f70:	6023      	str	r3, [r4, #0]
 8003f72:	b016      	add	sp, #88	; 0x58
 8003f74:	bd70      	pop	{r4, r5, r6, pc}
	...

08003f78 <__smakebuf_r>:
 8003f78:	898b      	ldrh	r3, [r1, #12]
 8003f7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003f7c:	079d      	lsls	r5, r3, #30
 8003f7e:	4606      	mov	r6, r0
 8003f80:	460c      	mov	r4, r1
 8003f82:	d507      	bpl.n	8003f94 <__smakebuf_r+0x1c>
 8003f84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003f88:	6023      	str	r3, [r4, #0]
 8003f8a:	6123      	str	r3, [r4, #16]
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	6163      	str	r3, [r4, #20]
 8003f90:	b002      	add	sp, #8
 8003f92:	bd70      	pop	{r4, r5, r6, pc}
 8003f94:	ab01      	add	r3, sp, #4
 8003f96:	466a      	mov	r2, sp
 8003f98:	f7ff ffc8 	bl	8003f2c <__swhatbuf_r>
 8003f9c:	9900      	ldr	r1, [sp, #0]
 8003f9e:	4605      	mov	r5, r0
 8003fa0:	4630      	mov	r0, r6
 8003fa2:	f000 f895 	bl	80040d0 <_malloc_r>
 8003fa6:	b948      	cbnz	r0, 8003fbc <__smakebuf_r+0x44>
 8003fa8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003fac:	059a      	lsls	r2, r3, #22
 8003fae:	d4ef      	bmi.n	8003f90 <__smakebuf_r+0x18>
 8003fb0:	f023 0303 	bic.w	r3, r3, #3
 8003fb4:	f043 0302 	orr.w	r3, r3, #2
 8003fb8:	81a3      	strh	r3, [r4, #12]
 8003fba:	e7e3      	b.n	8003f84 <__smakebuf_r+0xc>
 8003fbc:	4b0d      	ldr	r3, [pc, #52]	; (8003ff4 <__smakebuf_r+0x7c>)
 8003fbe:	62b3      	str	r3, [r6, #40]	; 0x28
 8003fc0:	89a3      	ldrh	r3, [r4, #12]
 8003fc2:	6020      	str	r0, [r4, #0]
 8003fc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fc8:	81a3      	strh	r3, [r4, #12]
 8003fca:	9b00      	ldr	r3, [sp, #0]
 8003fcc:	6163      	str	r3, [r4, #20]
 8003fce:	9b01      	ldr	r3, [sp, #4]
 8003fd0:	6120      	str	r0, [r4, #16]
 8003fd2:	b15b      	cbz	r3, 8003fec <__smakebuf_r+0x74>
 8003fd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003fd8:	4630      	mov	r0, r6
 8003fda:	f000 fc63 	bl	80048a4 <_isatty_r>
 8003fde:	b128      	cbz	r0, 8003fec <__smakebuf_r+0x74>
 8003fe0:	89a3      	ldrh	r3, [r4, #12]
 8003fe2:	f023 0303 	bic.w	r3, r3, #3
 8003fe6:	f043 0301 	orr.w	r3, r3, #1
 8003fea:	81a3      	strh	r3, [r4, #12]
 8003fec:	89a0      	ldrh	r0, [r4, #12]
 8003fee:	4305      	orrs	r5, r0
 8003ff0:	81a5      	strh	r5, [r4, #12]
 8003ff2:	e7cd      	b.n	8003f90 <__smakebuf_r+0x18>
 8003ff4:	08003d85 	.word	0x08003d85

08003ff8 <_free_r>:
 8003ff8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003ffa:	2900      	cmp	r1, #0
 8003ffc:	d044      	beq.n	8004088 <_free_r+0x90>
 8003ffe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004002:	9001      	str	r0, [sp, #4]
 8004004:	2b00      	cmp	r3, #0
 8004006:	f1a1 0404 	sub.w	r4, r1, #4
 800400a:	bfb8      	it	lt
 800400c:	18e4      	addlt	r4, r4, r3
 800400e:	f000 fc6b 	bl	80048e8 <__malloc_lock>
 8004012:	4a1e      	ldr	r2, [pc, #120]	; (800408c <_free_r+0x94>)
 8004014:	9801      	ldr	r0, [sp, #4]
 8004016:	6813      	ldr	r3, [r2, #0]
 8004018:	b933      	cbnz	r3, 8004028 <_free_r+0x30>
 800401a:	6063      	str	r3, [r4, #4]
 800401c:	6014      	str	r4, [r2, #0]
 800401e:	b003      	add	sp, #12
 8004020:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004024:	f000 bc66 	b.w	80048f4 <__malloc_unlock>
 8004028:	42a3      	cmp	r3, r4
 800402a:	d908      	bls.n	800403e <_free_r+0x46>
 800402c:	6825      	ldr	r5, [r4, #0]
 800402e:	1961      	adds	r1, r4, r5
 8004030:	428b      	cmp	r3, r1
 8004032:	bf01      	itttt	eq
 8004034:	6819      	ldreq	r1, [r3, #0]
 8004036:	685b      	ldreq	r3, [r3, #4]
 8004038:	1949      	addeq	r1, r1, r5
 800403a:	6021      	streq	r1, [r4, #0]
 800403c:	e7ed      	b.n	800401a <_free_r+0x22>
 800403e:	461a      	mov	r2, r3
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	b10b      	cbz	r3, 8004048 <_free_r+0x50>
 8004044:	42a3      	cmp	r3, r4
 8004046:	d9fa      	bls.n	800403e <_free_r+0x46>
 8004048:	6811      	ldr	r1, [r2, #0]
 800404a:	1855      	adds	r5, r2, r1
 800404c:	42a5      	cmp	r5, r4
 800404e:	d10b      	bne.n	8004068 <_free_r+0x70>
 8004050:	6824      	ldr	r4, [r4, #0]
 8004052:	4421      	add	r1, r4
 8004054:	1854      	adds	r4, r2, r1
 8004056:	42a3      	cmp	r3, r4
 8004058:	6011      	str	r1, [r2, #0]
 800405a:	d1e0      	bne.n	800401e <_free_r+0x26>
 800405c:	681c      	ldr	r4, [r3, #0]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	6053      	str	r3, [r2, #4]
 8004062:	4421      	add	r1, r4
 8004064:	6011      	str	r1, [r2, #0]
 8004066:	e7da      	b.n	800401e <_free_r+0x26>
 8004068:	d902      	bls.n	8004070 <_free_r+0x78>
 800406a:	230c      	movs	r3, #12
 800406c:	6003      	str	r3, [r0, #0]
 800406e:	e7d6      	b.n	800401e <_free_r+0x26>
 8004070:	6825      	ldr	r5, [r4, #0]
 8004072:	1961      	adds	r1, r4, r5
 8004074:	428b      	cmp	r3, r1
 8004076:	bf04      	itt	eq
 8004078:	6819      	ldreq	r1, [r3, #0]
 800407a:	685b      	ldreq	r3, [r3, #4]
 800407c:	6063      	str	r3, [r4, #4]
 800407e:	bf04      	itt	eq
 8004080:	1949      	addeq	r1, r1, r5
 8004082:	6021      	streq	r1, [r4, #0]
 8004084:	6054      	str	r4, [r2, #4]
 8004086:	e7ca      	b.n	800401e <_free_r+0x26>
 8004088:	b003      	add	sp, #12
 800408a:	bd30      	pop	{r4, r5, pc}
 800408c:	20000138 	.word	0x20000138

08004090 <sbrk_aligned>:
 8004090:	b570      	push	{r4, r5, r6, lr}
 8004092:	4e0e      	ldr	r6, [pc, #56]	; (80040cc <sbrk_aligned+0x3c>)
 8004094:	460c      	mov	r4, r1
 8004096:	6831      	ldr	r1, [r6, #0]
 8004098:	4605      	mov	r5, r0
 800409a:	b911      	cbnz	r1, 80040a2 <sbrk_aligned+0x12>
 800409c:	f000 fb7a 	bl	8004794 <_sbrk_r>
 80040a0:	6030      	str	r0, [r6, #0]
 80040a2:	4621      	mov	r1, r4
 80040a4:	4628      	mov	r0, r5
 80040a6:	f000 fb75 	bl	8004794 <_sbrk_r>
 80040aa:	1c43      	adds	r3, r0, #1
 80040ac:	d00a      	beq.n	80040c4 <sbrk_aligned+0x34>
 80040ae:	1cc4      	adds	r4, r0, #3
 80040b0:	f024 0403 	bic.w	r4, r4, #3
 80040b4:	42a0      	cmp	r0, r4
 80040b6:	d007      	beq.n	80040c8 <sbrk_aligned+0x38>
 80040b8:	1a21      	subs	r1, r4, r0
 80040ba:	4628      	mov	r0, r5
 80040bc:	f000 fb6a 	bl	8004794 <_sbrk_r>
 80040c0:	3001      	adds	r0, #1
 80040c2:	d101      	bne.n	80040c8 <sbrk_aligned+0x38>
 80040c4:	f04f 34ff 	mov.w	r4, #4294967295
 80040c8:	4620      	mov	r0, r4
 80040ca:	bd70      	pop	{r4, r5, r6, pc}
 80040cc:	2000013c 	.word	0x2000013c

080040d0 <_malloc_r>:
 80040d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040d4:	1ccd      	adds	r5, r1, #3
 80040d6:	f025 0503 	bic.w	r5, r5, #3
 80040da:	3508      	adds	r5, #8
 80040dc:	2d0c      	cmp	r5, #12
 80040de:	bf38      	it	cc
 80040e0:	250c      	movcc	r5, #12
 80040e2:	2d00      	cmp	r5, #0
 80040e4:	4607      	mov	r7, r0
 80040e6:	db01      	blt.n	80040ec <_malloc_r+0x1c>
 80040e8:	42a9      	cmp	r1, r5
 80040ea:	d905      	bls.n	80040f8 <_malloc_r+0x28>
 80040ec:	230c      	movs	r3, #12
 80040ee:	603b      	str	r3, [r7, #0]
 80040f0:	2600      	movs	r6, #0
 80040f2:	4630      	mov	r0, r6
 80040f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040f8:	4e2e      	ldr	r6, [pc, #184]	; (80041b4 <_malloc_r+0xe4>)
 80040fa:	f000 fbf5 	bl	80048e8 <__malloc_lock>
 80040fe:	6833      	ldr	r3, [r6, #0]
 8004100:	461c      	mov	r4, r3
 8004102:	bb34      	cbnz	r4, 8004152 <_malloc_r+0x82>
 8004104:	4629      	mov	r1, r5
 8004106:	4638      	mov	r0, r7
 8004108:	f7ff ffc2 	bl	8004090 <sbrk_aligned>
 800410c:	1c43      	adds	r3, r0, #1
 800410e:	4604      	mov	r4, r0
 8004110:	d14d      	bne.n	80041ae <_malloc_r+0xde>
 8004112:	6834      	ldr	r4, [r6, #0]
 8004114:	4626      	mov	r6, r4
 8004116:	2e00      	cmp	r6, #0
 8004118:	d140      	bne.n	800419c <_malloc_r+0xcc>
 800411a:	6823      	ldr	r3, [r4, #0]
 800411c:	4631      	mov	r1, r6
 800411e:	4638      	mov	r0, r7
 8004120:	eb04 0803 	add.w	r8, r4, r3
 8004124:	f000 fb36 	bl	8004794 <_sbrk_r>
 8004128:	4580      	cmp	r8, r0
 800412a:	d13a      	bne.n	80041a2 <_malloc_r+0xd2>
 800412c:	6821      	ldr	r1, [r4, #0]
 800412e:	3503      	adds	r5, #3
 8004130:	1a6d      	subs	r5, r5, r1
 8004132:	f025 0503 	bic.w	r5, r5, #3
 8004136:	3508      	adds	r5, #8
 8004138:	2d0c      	cmp	r5, #12
 800413a:	bf38      	it	cc
 800413c:	250c      	movcc	r5, #12
 800413e:	4629      	mov	r1, r5
 8004140:	4638      	mov	r0, r7
 8004142:	f7ff ffa5 	bl	8004090 <sbrk_aligned>
 8004146:	3001      	adds	r0, #1
 8004148:	d02b      	beq.n	80041a2 <_malloc_r+0xd2>
 800414a:	6823      	ldr	r3, [r4, #0]
 800414c:	442b      	add	r3, r5
 800414e:	6023      	str	r3, [r4, #0]
 8004150:	e00e      	b.n	8004170 <_malloc_r+0xa0>
 8004152:	6822      	ldr	r2, [r4, #0]
 8004154:	1b52      	subs	r2, r2, r5
 8004156:	d41e      	bmi.n	8004196 <_malloc_r+0xc6>
 8004158:	2a0b      	cmp	r2, #11
 800415a:	d916      	bls.n	800418a <_malloc_r+0xba>
 800415c:	1961      	adds	r1, r4, r5
 800415e:	42a3      	cmp	r3, r4
 8004160:	6025      	str	r5, [r4, #0]
 8004162:	bf18      	it	ne
 8004164:	6059      	strne	r1, [r3, #4]
 8004166:	6863      	ldr	r3, [r4, #4]
 8004168:	bf08      	it	eq
 800416a:	6031      	streq	r1, [r6, #0]
 800416c:	5162      	str	r2, [r4, r5]
 800416e:	604b      	str	r3, [r1, #4]
 8004170:	4638      	mov	r0, r7
 8004172:	f104 060b 	add.w	r6, r4, #11
 8004176:	f000 fbbd 	bl	80048f4 <__malloc_unlock>
 800417a:	f026 0607 	bic.w	r6, r6, #7
 800417e:	1d23      	adds	r3, r4, #4
 8004180:	1af2      	subs	r2, r6, r3
 8004182:	d0b6      	beq.n	80040f2 <_malloc_r+0x22>
 8004184:	1b9b      	subs	r3, r3, r6
 8004186:	50a3      	str	r3, [r4, r2]
 8004188:	e7b3      	b.n	80040f2 <_malloc_r+0x22>
 800418a:	6862      	ldr	r2, [r4, #4]
 800418c:	42a3      	cmp	r3, r4
 800418e:	bf0c      	ite	eq
 8004190:	6032      	streq	r2, [r6, #0]
 8004192:	605a      	strne	r2, [r3, #4]
 8004194:	e7ec      	b.n	8004170 <_malloc_r+0xa0>
 8004196:	4623      	mov	r3, r4
 8004198:	6864      	ldr	r4, [r4, #4]
 800419a:	e7b2      	b.n	8004102 <_malloc_r+0x32>
 800419c:	4634      	mov	r4, r6
 800419e:	6876      	ldr	r6, [r6, #4]
 80041a0:	e7b9      	b.n	8004116 <_malloc_r+0x46>
 80041a2:	230c      	movs	r3, #12
 80041a4:	603b      	str	r3, [r7, #0]
 80041a6:	4638      	mov	r0, r7
 80041a8:	f000 fba4 	bl	80048f4 <__malloc_unlock>
 80041ac:	e7a1      	b.n	80040f2 <_malloc_r+0x22>
 80041ae:	6025      	str	r5, [r4, #0]
 80041b0:	e7de      	b.n	8004170 <_malloc_r+0xa0>
 80041b2:	bf00      	nop
 80041b4:	20000138 	.word	0x20000138

080041b8 <__sfputc_r>:
 80041b8:	6893      	ldr	r3, [r2, #8]
 80041ba:	3b01      	subs	r3, #1
 80041bc:	2b00      	cmp	r3, #0
 80041be:	b410      	push	{r4}
 80041c0:	6093      	str	r3, [r2, #8]
 80041c2:	da08      	bge.n	80041d6 <__sfputc_r+0x1e>
 80041c4:	6994      	ldr	r4, [r2, #24]
 80041c6:	42a3      	cmp	r3, r4
 80041c8:	db01      	blt.n	80041ce <__sfputc_r+0x16>
 80041ca:	290a      	cmp	r1, #10
 80041cc:	d103      	bne.n	80041d6 <__sfputc_r+0x1e>
 80041ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80041d2:	f7ff bc31 	b.w	8003a38 <__swbuf_r>
 80041d6:	6813      	ldr	r3, [r2, #0]
 80041d8:	1c58      	adds	r0, r3, #1
 80041da:	6010      	str	r0, [r2, #0]
 80041dc:	7019      	strb	r1, [r3, #0]
 80041de:	4608      	mov	r0, r1
 80041e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80041e4:	4770      	bx	lr

080041e6 <__sfputs_r>:
 80041e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041e8:	4606      	mov	r6, r0
 80041ea:	460f      	mov	r7, r1
 80041ec:	4614      	mov	r4, r2
 80041ee:	18d5      	adds	r5, r2, r3
 80041f0:	42ac      	cmp	r4, r5
 80041f2:	d101      	bne.n	80041f8 <__sfputs_r+0x12>
 80041f4:	2000      	movs	r0, #0
 80041f6:	e007      	b.n	8004208 <__sfputs_r+0x22>
 80041f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041fc:	463a      	mov	r2, r7
 80041fe:	4630      	mov	r0, r6
 8004200:	f7ff ffda 	bl	80041b8 <__sfputc_r>
 8004204:	1c43      	adds	r3, r0, #1
 8004206:	d1f3      	bne.n	80041f0 <__sfputs_r+0xa>
 8004208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800420c <_vfiprintf_r>:
 800420c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004210:	460d      	mov	r5, r1
 8004212:	b09d      	sub	sp, #116	; 0x74
 8004214:	4614      	mov	r4, r2
 8004216:	4698      	mov	r8, r3
 8004218:	4606      	mov	r6, r0
 800421a:	b118      	cbz	r0, 8004224 <_vfiprintf_r+0x18>
 800421c:	6983      	ldr	r3, [r0, #24]
 800421e:	b90b      	cbnz	r3, 8004224 <_vfiprintf_r+0x18>
 8004220:	f7ff fde4 	bl	8003dec <__sinit>
 8004224:	4b89      	ldr	r3, [pc, #548]	; (800444c <_vfiprintf_r+0x240>)
 8004226:	429d      	cmp	r5, r3
 8004228:	d11b      	bne.n	8004262 <_vfiprintf_r+0x56>
 800422a:	6875      	ldr	r5, [r6, #4]
 800422c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800422e:	07d9      	lsls	r1, r3, #31
 8004230:	d405      	bmi.n	800423e <_vfiprintf_r+0x32>
 8004232:	89ab      	ldrh	r3, [r5, #12]
 8004234:	059a      	lsls	r2, r3, #22
 8004236:	d402      	bmi.n	800423e <_vfiprintf_r+0x32>
 8004238:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800423a:	f7ff fe75 	bl	8003f28 <__retarget_lock_acquire_recursive>
 800423e:	89ab      	ldrh	r3, [r5, #12]
 8004240:	071b      	lsls	r3, r3, #28
 8004242:	d501      	bpl.n	8004248 <_vfiprintf_r+0x3c>
 8004244:	692b      	ldr	r3, [r5, #16]
 8004246:	b9eb      	cbnz	r3, 8004284 <_vfiprintf_r+0x78>
 8004248:	4629      	mov	r1, r5
 800424a:	4630      	mov	r0, r6
 800424c:	f7ff fc46 	bl	8003adc <__swsetup_r>
 8004250:	b1c0      	cbz	r0, 8004284 <_vfiprintf_r+0x78>
 8004252:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004254:	07dc      	lsls	r4, r3, #31
 8004256:	d50e      	bpl.n	8004276 <_vfiprintf_r+0x6a>
 8004258:	f04f 30ff 	mov.w	r0, #4294967295
 800425c:	b01d      	add	sp, #116	; 0x74
 800425e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004262:	4b7b      	ldr	r3, [pc, #492]	; (8004450 <_vfiprintf_r+0x244>)
 8004264:	429d      	cmp	r5, r3
 8004266:	d101      	bne.n	800426c <_vfiprintf_r+0x60>
 8004268:	68b5      	ldr	r5, [r6, #8]
 800426a:	e7df      	b.n	800422c <_vfiprintf_r+0x20>
 800426c:	4b79      	ldr	r3, [pc, #484]	; (8004454 <_vfiprintf_r+0x248>)
 800426e:	429d      	cmp	r5, r3
 8004270:	bf08      	it	eq
 8004272:	68f5      	ldreq	r5, [r6, #12]
 8004274:	e7da      	b.n	800422c <_vfiprintf_r+0x20>
 8004276:	89ab      	ldrh	r3, [r5, #12]
 8004278:	0598      	lsls	r0, r3, #22
 800427a:	d4ed      	bmi.n	8004258 <_vfiprintf_r+0x4c>
 800427c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800427e:	f7ff fe54 	bl	8003f2a <__retarget_lock_release_recursive>
 8004282:	e7e9      	b.n	8004258 <_vfiprintf_r+0x4c>
 8004284:	2300      	movs	r3, #0
 8004286:	9309      	str	r3, [sp, #36]	; 0x24
 8004288:	2320      	movs	r3, #32
 800428a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800428e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004292:	2330      	movs	r3, #48	; 0x30
 8004294:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004458 <_vfiprintf_r+0x24c>
 8004298:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800429c:	f04f 0901 	mov.w	r9, #1
 80042a0:	4623      	mov	r3, r4
 80042a2:	469a      	mov	sl, r3
 80042a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80042a8:	b10a      	cbz	r2, 80042ae <_vfiprintf_r+0xa2>
 80042aa:	2a25      	cmp	r2, #37	; 0x25
 80042ac:	d1f9      	bne.n	80042a2 <_vfiprintf_r+0x96>
 80042ae:	ebba 0b04 	subs.w	fp, sl, r4
 80042b2:	d00b      	beq.n	80042cc <_vfiprintf_r+0xc0>
 80042b4:	465b      	mov	r3, fp
 80042b6:	4622      	mov	r2, r4
 80042b8:	4629      	mov	r1, r5
 80042ba:	4630      	mov	r0, r6
 80042bc:	f7ff ff93 	bl	80041e6 <__sfputs_r>
 80042c0:	3001      	adds	r0, #1
 80042c2:	f000 80aa 	beq.w	800441a <_vfiprintf_r+0x20e>
 80042c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80042c8:	445a      	add	r2, fp
 80042ca:	9209      	str	r2, [sp, #36]	; 0x24
 80042cc:	f89a 3000 	ldrb.w	r3, [sl]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	f000 80a2 	beq.w	800441a <_vfiprintf_r+0x20e>
 80042d6:	2300      	movs	r3, #0
 80042d8:	f04f 32ff 	mov.w	r2, #4294967295
 80042dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80042e0:	f10a 0a01 	add.w	sl, sl, #1
 80042e4:	9304      	str	r3, [sp, #16]
 80042e6:	9307      	str	r3, [sp, #28]
 80042e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80042ec:	931a      	str	r3, [sp, #104]	; 0x68
 80042ee:	4654      	mov	r4, sl
 80042f0:	2205      	movs	r2, #5
 80042f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042f6:	4858      	ldr	r0, [pc, #352]	; (8004458 <_vfiprintf_r+0x24c>)
 80042f8:	f7fb ff7a 	bl	80001f0 <memchr>
 80042fc:	9a04      	ldr	r2, [sp, #16]
 80042fe:	b9d8      	cbnz	r0, 8004338 <_vfiprintf_r+0x12c>
 8004300:	06d1      	lsls	r1, r2, #27
 8004302:	bf44      	itt	mi
 8004304:	2320      	movmi	r3, #32
 8004306:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800430a:	0713      	lsls	r3, r2, #28
 800430c:	bf44      	itt	mi
 800430e:	232b      	movmi	r3, #43	; 0x2b
 8004310:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004314:	f89a 3000 	ldrb.w	r3, [sl]
 8004318:	2b2a      	cmp	r3, #42	; 0x2a
 800431a:	d015      	beq.n	8004348 <_vfiprintf_r+0x13c>
 800431c:	9a07      	ldr	r2, [sp, #28]
 800431e:	4654      	mov	r4, sl
 8004320:	2000      	movs	r0, #0
 8004322:	f04f 0c0a 	mov.w	ip, #10
 8004326:	4621      	mov	r1, r4
 8004328:	f811 3b01 	ldrb.w	r3, [r1], #1
 800432c:	3b30      	subs	r3, #48	; 0x30
 800432e:	2b09      	cmp	r3, #9
 8004330:	d94e      	bls.n	80043d0 <_vfiprintf_r+0x1c4>
 8004332:	b1b0      	cbz	r0, 8004362 <_vfiprintf_r+0x156>
 8004334:	9207      	str	r2, [sp, #28]
 8004336:	e014      	b.n	8004362 <_vfiprintf_r+0x156>
 8004338:	eba0 0308 	sub.w	r3, r0, r8
 800433c:	fa09 f303 	lsl.w	r3, r9, r3
 8004340:	4313      	orrs	r3, r2
 8004342:	9304      	str	r3, [sp, #16]
 8004344:	46a2      	mov	sl, r4
 8004346:	e7d2      	b.n	80042ee <_vfiprintf_r+0xe2>
 8004348:	9b03      	ldr	r3, [sp, #12]
 800434a:	1d19      	adds	r1, r3, #4
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	9103      	str	r1, [sp, #12]
 8004350:	2b00      	cmp	r3, #0
 8004352:	bfbb      	ittet	lt
 8004354:	425b      	neglt	r3, r3
 8004356:	f042 0202 	orrlt.w	r2, r2, #2
 800435a:	9307      	strge	r3, [sp, #28]
 800435c:	9307      	strlt	r3, [sp, #28]
 800435e:	bfb8      	it	lt
 8004360:	9204      	strlt	r2, [sp, #16]
 8004362:	7823      	ldrb	r3, [r4, #0]
 8004364:	2b2e      	cmp	r3, #46	; 0x2e
 8004366:	d10c      	bne.n	8004382 <_vfiprintf_r+0x176>
 8004368:	7863      	ldrb	r3, [r4, #1]
 800436a:	2b2a      	cmp	r3, #42	; 0x2a
 800436c:	d135      	bne.n	80043da <_vfiprintf_r+0x1ce>
 800436e:	9b03      	ldr	r3, [sp, #12]
 8004370:	1d1a      	adds	r2, r3, #4
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	9203      	str	r2, [sp, #12]
 8004376:	2b00      	cmp	r3, #0
 8004378:	bfb8      	it	lt
 800437a:	f04f 33ff 	movlt.w	r3, #4294967295
 800437e:	3402      	adds	r4, #2
 8004380:	9305      	str	r3, [sp, #20]
 8004382:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004468 <_vfiprintf_r+0x25c>
 8004386:	7821      	ldrb	r1, [r4, #0]
 8004388:	2203      	movs	r2, #3
 800438a:	4650      	mov	r0, sl
 800438c:	f7fb ff30 	bl	80001f0 <memchr>
 8004390:	b140      	cbz	r0, 80043a4 <_vfiprintf_r+0x198>
 8004392:	2340      	movs	r3, #64	; 0x40
 8004394:	eba0 000a 	sub.w	r0, r0, sl
 8004398:	fa03 f000 	lsl.w	r0, r3, r0
 800439c:	9b04      	ldr	r3, [sp, #16]
 800439e:	4303      	orrs	r3, r0
 80043a0:	3401      	adds	r4, #1
 80043a2:	9304      	str	r3, [sp, #16]
 80043a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043a8:	482c      	ldr	r0, [pc, #176]	; (800445c <_vfiprintf_r+0x250>)
 80043aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80043ae:	2206      	movs	r2, #6
 80043b0:	f7fb ff1e 	bl	80001f0 <memchr>
 80043b4:	2800      	cmp	r0, #0
 80043b6:	d03f      	beq.n	8004438 <_vfiprintf_r+0x22c>
 80043b8:	4b29      	ldr	r3, [pc, #164]	; (8004460 <_vfiprintf_r+0x254>)
 80043ba:	bb1b      	cbnz	r3, 8004404 <_vfiprintf_r+0x1f8>
 80043bc:	9b03      	ldr	r3, [sp, #12]
 80043be:	3307      	adds	r3, #7
 80043c0:	f023 0307 	bic.w	r3, r3, #7
 80043c4:	3308      	adds	r3, #8
 80043c6:	9303      	str	r3, [sp, #12]
 80043c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043ca:	443b      	add	r3, r7
 80043cc:	9309      	str	r3, [sp, #36]	; 0x24
 80043ce:	e767      	b.n	80042a0 <_vfiprintf_r+0x94>
 80043d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80043d4:	460c      	mov	r4, r1
 80043d6:	2001      	movs	r0, #1
 80043d8:	e7a5      	b.n	8004326 <_vfiprintf_r+0x11a>
 80043da:	2300      	movs	r3, #0
 80043dc:	3401      	adds	r4, #1
 80043de:	9305      	str	r3, [sp, #20]
 80043e0:	4619      	mov	r1, r3
 80043e2:	f04f 0c0a 	mov.w	ip, #10
 80043e6:	4620      	mov	r0, r4
 80043e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80043ec:	3a30      	subs	r2, #48	; 0x30
 80043ee:	2a09      	cmp	r2, #9
 80043f0:	d903      	bls.n	80043fa <_vfiprintf_r+0x1ee>
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d0c5      	beq.n	8004382 <_vfiprintf_r+0x176>
 80043f6:	9105      	str	r1, [sp, #20]
 80043f8:	e7c3      	b.n	8004382 <_vfiprintf_r+0x176>
 80043fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80043fe:	4604      	mov	r4, r0
 8004400:	2301      	movs	r3, #1
 8004402:	e7f0      	b.n	80043e6 <_vfiprintf_r+0x1da>
 8004404:	ab03      	add	r3, sp, #12
 8004406:	9300      	str	r3, [sp, #0]
 8004408:	462a      	mov	r2, r5
 800440a:	4b16      	ldr	r3, [pc, #88]	; (8004464 <_vfiprintf_r+0x258>)
 800440c:	a904      	add	r1, sp, #16
 800440e:	4630      	mov	r0, r6
 8004410:	f3af 8000 	nop.w
 8004414:	4607      	mov	r7, r0
 8004416:	1c78      	adds	r0, r7, #1
 8004418:	d1d6      	bne.n	80043c8 <_vfiprintf_r+0x1bc>
 800441a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800441c:	07d9      	lsls	r1, r3, #31
 800441e:	d405      	bmi.n	800442c <_vfiprintf_r+0x220>
 8004420:	89ab      	ldrh	r3, [r5, #12]
 8004422:	059a      	lsls	r2, r3, #22
 8004424:	d402      	bmi.n	800442c <_vfiprintf_r+0x220>
 8004426:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004428:	f7ff fd7f 	bl	8003f2a <__retarget_lock_release_recursive>
 800442c:	89ab      	ldrh	r3, [r5, #12]
 800442e:	065b      	lsls	r3, r3, #25
 8004430:	f53f af12 	bmi.w	8004258 <_vfiprintf_r+0x4c>
 8004434:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004436:	e711      	b.n	800425c <_vfiprintf_r+0x50>
 8004438:	ab03      	add	r3, sp, #12
 800443a:	9300      	str	r3, [sp, #0]
 800443c:	462a      	mov	r2, r5
 800443e:	4b09      	ldr	r3, [pc, #36]	; (8004464 <_vfiprintf_r+0x258>)
 8004440:	a904      	add	r1, sp, #16
 8004442:	4630      	mov	r0, r6
 8004444:	f000 f880 	bl	8004548 <_printf_i>
 8004448:	e7e4      	b.n	8004414 <_vfiprintf_r+0x208>
 800444a:	bf00      	nop
 800444c:	08004980 	.word	0x08004980
 8004450:	080049a0 	.word	0x080049a0
 8004454:	08004960 	.word	0x08004960
 8004458:	080049c0 	.word	0x080049c0
 800445c:	080049ca 	.word	0x080049ca
 8004460:	00000000 	.word	0x00000000
 8004464:	080041e7 	.word	0x080041e7
 8004468:	080049c6 	.word	0x080049c6

0800446c <_printf_common>:
 800446c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004470:	4616      	mov	r6, r2
 8004472:	4699      	mov	r9, r3
 8004474:	688a      	ldr	r2, [r1, #8]
 8004476:	690b      	ldr	r3, [r1, #16]
 8004478:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800447c:	4293      	cmp	r3, r2
 800447e:	bfb8      	it	lt
 8004480:	4613      	movlt	r3, r2
 8004482:	6033      	str	r3, [r6, #0]
 8004484:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004488:	4607      	mov	r7, r0
 800448a:	460c      	mov	r4, r1
 800448c:	b10a      	cbz	r2, 8004492 <_printf_common+0x26>
 800448e:	3301      	adds	r3, #1
 8004490:	6033      	str	r3, [r6, #0]
 8004492:	6823      	ldr	r3, [r4, #0]
 8004494:	0699      	lsls	r1, r3, #26
 8004496:	bf42      	ittt	mi
 8004498:	6833      	ldrmi	r3, [r6, #0]
 800449a:	3302      	addmi	r3, #2
 800449c:	6033      	strmi	r3, [r6, #0]
 800449e:	6825      	ldr	r5, [r4, #0]
 80044a0:	f015 0506 	ands.w	r5, r5, #6
 80044a4:	d106      	bne.n	80044b4 <_printf_common+0x48>
 80044a6:	f104 0a19 	add.w	sl, r4, #25
 80044aa:	68e3      	ldr	r3, [r4, #12]
 80044ac:	6832      	ldr	r2, [r6, #0]
 80044ae:	1a9b      	subs	r3, r3, r2
 80044b0:	42ab      	cmp	r3, r5
 80044b2:	dc26      	bgt.n	8004502 <_printf_common+0x96>
 80044b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80044b8:	1e13      	subs	r3, r2, #0
 80044ba:	6822      	ldr	r2, [r4, #0]
 80044bc:	bf18      	it	ne
 80044be:	2301      	movne	r3, #1
 80044c0:	0692      	lsls	r2, r2, #26
 80044c2:	d42b      	bmi.n	800451c <_printf_common+0xb0>
 80044c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80044c8:	4649      	mov	r1, r9
 80044ca:	4638      	mov	r0, r7
 80044cc:	47c0      	blx	r8
 80044ce:	3001      	adds	r0, #1
 80044d0:	d01e      	beq.n	8004510 <_printf_common+0xa4>
 80044d2:	6823      	ldr	r3, [r4, #0]
 80044d4:	68e5      	ldr	r5, [r4, #12]
 80044d6:	6832      	ldr	r2, [r6, #0]
 80044d8:	f003 0306 	and.w	r3, r3, #6
 80044dc:	2b04      	cmp	r3, #4
 80044de:	bf08      	it	eq
 80044e0:	1aad      	subeq	r5, r5, r2
 80044e2:	68a3      	ldr	r3, [r4, #8]
 80044e4:	6922      	ldr	r2, [r4, #16]
 80044e6:	bf0c      	ite	eq
 80044e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80044ec:	2500      	movne	r5, #0
 80044ee:	4293      	cmp	r3, r2
 80044f0:	bfc4      	itt	gt
 80044f2:	1a9b      	subgt	r3, r3, r2
 80044f4:	18ed      	addgt	r5, r5, r3
 80044f6:	2600      	movs	r6, #0
 80044f8:	341a      	adds	r4, #26
 80044fa:	42b5      	cmp	r5, r6
 80044fc:	d11a      	bne.n	8004534 <_printf_common+0xc8>
 80044fe:	2000      	movs	r0, #0
 8004500:	e008      	b.n	8004514 <_printf_common+0xa8>
 8004502:	2301      	movs	r3, #1
 8004504:	4652      	mov	r2, sl
 8004506:	4649      	mov	r1, r9
 8004508:	4638      	mov	r0, r7
 800450a:	47c0      	blx	r8
 800450c:	3001      	adds	r0, #1
 800450e:	d103      	bne.n	8004518 <_printf_common+0xac>
 8004510:	f04f 30ff 	mov.w	r0, #4294967295
 8004514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004518:	3501      	adds	r5, #1
 800451a:	e7c6      	b.n	80044aa <_printf_common+0x3e>
 800451c:	18e1      	adds	r1, r4, r3
 800451e:	1c5a      	adds	r2, r3, #1
 8004520:	2030      	movs	r0, #48	; 0x30
 8004522:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004526:	4422      	add	r2, r4
 8004528:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800452c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004530:	3302      	adds	r3, #2
 8004532:	e7c7      	b.n	80044c4 <_printf_common+0x58>
 8004534:	2301      	movs	r3, #1
 8004536:	4622      	mov	r2, r4
 8004538:	4649      	mov	r1, r9
 800453a:	4638      	mov	r0, r7
 800453c:	47c0      	blx	r8
 800453e:	3001      	adds	r0, #1
 8004540:	d0e6      	beq.n	8004510 <_printf_common+0xa4>
 8004542:	3601      	adds	r6, #1
 8004544:	e7d9      	b.n	80044fa <_printf_common+0x8e>
	...

08004548 <_printf_i>:
 8004548:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800454c:	7e0f      	ldrb	r7, [r1, #24]
 800454e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004550:	2f78      	cmp	r7, #120	; 0x78
 8004552:	4691      	mov	r9, r2
 8004554:	4680      	mov	r8, r0
 8004556:	460c      	mov	r4, r1
 8004558:	469a      	mov	sl, r3
 800455a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800455e:	d807      	bhi.n	8004570 <_printf_i+0x28>
 8004560:	2f62      	cmp	r7, #98	; 0x62
 8004562:	d80a      	bhi.n	800457a <_printf_i+0x32>
 8004564:	2f00      	cmp	r7, #0
 8004566:	f000 80d8 	beq.w	800471a <_printf_i+0x1d2>
 800456a:	2f58      	cmp	r7, #88	; 0x58
 800456c:	f000 80a3 	beq.w	80046b6 <_printf_i+0x16e>
 8004570:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004574:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004578:	e03a      	b.n	80045f0 <_printf_i+0xa8>
 800457a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800457e:	2b15      	cmp	r3, #21
 8004580:	d8f6      	bhi.n	8004570 <_printf_i+0x28>
 8004582:	a101      	add	r1, pc, #4	; (adr r1, 8004588 <_printf_i+0x40>)
 8004584:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004588:	080045e1 	.word	0x080045e1
 800458c:	080045f5 	.word	0x080045f5
 8004590:	08004571 	.word	0x08004571
 8004594:	08004571 	.word	0x08004571
 8004598:	08004571 	.word	0x08004571
 800459c:	08004571 	.word	0x08004571
 80045a0:	080045f5 	.word	0x080045f5
 80045a4:	08004571 	.word	0x08004571
 80045a8:	08004571 	.word	0x08004571
 80045ac:	08004571 	.word	0x08004571
 80045b0:	08004571 	.word	0x08004571
 80045b4:	08004701 	.word	0x08004701
 80045b8:	08004625 	.word	0x08004625
 80045bc:	080046e3 	.word	0x080046e3
 80045c0:	08004571 	.word	0x08004571
 80045c4:	08004571 	.word	0x08004571
 80045c8:	08004723 	.word	0x08004723
 80045cc:	08004571 	.word	0x08004571
 80045d0:	08004625 	.word	0x08004625
 80045d4:	08004571 	.word	0x08004571
 80045d8:	08004571 	.word	0x08004571
 80045dc:	080046eb 	.word	0x080046eb
 80045e0:	682b      	ldr	r3, [r5, #0]
 80045e2:	1d1a      	adds	r2, r3, #4
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	602a      	str	r2, [r5, #0]
 80045e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80045f0:	2301      	movs	r3, #1
 80045f2:	e0a3      	b.n	800473c <_printf_i+0x1f4>
 80045f4:	6820      	ldr	r0, [r4, #0]
 80045f6:	6829      	ldr	r1, [r5, #0]
 80045f8:	0606      	lsls	r6, r0, #24
 80045fa:	f101 0304 	add.w	r3, r1, #4
 80045fe:	d50a      	bpl.n	8004616 <_printf_i+0xce>
 8004600:	680e      	ldr	r6, [r1, #0]
 8004602:	602b      	str	r3, [r5, #0]
 8004604:	2e00      	cmp	r6, #0
 8004606:	da03      	bge.n	8004610 <_printf_i+0xc8>
 8004608:	232d      	movs	r3, #45	; 0x2d
 800460a:	4276      	negs	r6, r6
 800460c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004610:	485e      	ldr	r0, [pc, #376]	; (800478c <_printf_i+0x244>)
 8004612:	230a      	movs	r3, #10
 8004614:	e019      	b.n	800464a <_printf_i+0x102>
 8004616:	680e      	ldr	r6, [r1, #0]
 8004618:	602b      	str	r3, [r5, #0]
 800461a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800461e:	bf18      	it	ne
 8004620:	b236      	sxthne	r6, r6
 8004622:	e7ef      	b.n	8004604 <_printf_i+0xbc>
 8004624:	682b      	ldr	r3, [r5, #0]
 8004626:	6820      	ldr	r0, [r4, #0]
 8004628:	1d19      	adds	r1, r3, #4
 800462a:	6029      	str	r1, [r5, #0]
 800462c:	0601      	lsls	r1, r0, #24
 800462e:	d501      	bpl.n	8004634 <_printf_i+0xec>
 8004630:	681e      	ldr	r6, [r3, #0]
 8004632:	e002      	b.n	800463a <_printf_i+0xf2>
 8004634:	0646      	lsls	r6, r0, #25
 8004636:	d5fb      	bpl.n	8004630 <_printf_i+0xe8>
 8004638:	881e      	ldrh	r6, [r3, #0]
 800463a:	4854      	ldr	r0, [pc, #336]	; (800478c <_printf_i+0x244>)
 800463c:	2f6f      	cmp	r7, #111	; 0x6f
 800463e:	bf0c      	ite	eq
 8004640:	2308      	moveq	r3, #8
 8004642:	230a      	movne	r3, #10
 8004644:	2100      	movs	r1, #0
 8004646:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800464a:	6865      	ldr	r5, [r4, #4]
 800464c:	60a5      	str	r5, [r4, #8]
 800464e:	2d00      	cmp	r5, #0
 8004650:	bfa2      	ittt	ge
 8004652:	6821      	ldrge	r1, [r4, #0]
 8004654:	f021 0104 	bicge.w	r1, r1, #4
 8004658:	6021      	strge	r1, [r4, #0]
 800465a:	b90e      	cbnz	r6, 8004660 <_printf_i+0x118>
 800465c:	2d00      	cmp	r5, #0
 800465e:	d04d      	beq.n	80046fc <_printf_i+0x1b4>
 8004660:	4615      	mov	r5, r2
 8004662:	fbb6 f1f3 	udiv	r1, r6, r3
 8004666:	fb03 6711 	mls	r7, r3, r1, r6
 800466a:	5dc7      	ldrb	r7, [r0, r7]
 800466c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004670:	4637      	mov	r7, r6
 8004672:	42bb      	cmp	r3, r7
 8004674:	460e      	mov	r6, r1
 8004676:	d9f4      	bls.n	8004662 <_printf_i+0x11a>
 8004678:	2b08      	cmp	r3, #8
 800467a:	d10b      	bne.n	8004694 <_printf_i+0x14c>
 800467c:	6823      	ldr	r3, [r4, #0]
 800467e:	07de      	lsls	r6, r3, #31
 8004680:	d508      	bpl.n	8004694 <_printf_i+0x14c>
 8004682:	6923      	ldr	r3, [r4, #16]
 8004684:	6861      	ldr	r1, [r4, #4]
 8004686:	4299      	cmp	r1, r3
 8004688:	bfde      	ittt	le
 800468a:	2330      	movle	r3, #48	; 0x30
 800468c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004690:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004694:	1b52      	subs	r2, r2, r5
 8004696:	6122      	str	r2, [r4, #16]
 8004698:	f8cd a000 	str.w	sl, [sp]
 800469c:	464b      	mov	r3, r9
 800469e:	aa03      	add	r2, sp, #12
 80046a0:	4621      	mov	r1, r4
 80046a2:	4640      	mov	r0, r8
 80046a4:	f7ff fee2 	bl	800446c <_printf_common>
 80046a8:	3001      	adds	r0, #1
 80046aa:	d14c      	bne.n	8004746 <_printf_i+0x1fe>
 80046ac:	f04f 30ff 	mov.w	r0, #4294967295
 80046b0:	b004      	add	sp, #16
 80046b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046b6:	4835      	ldr	r0, [pc, #212]	; (800478c <_printf_i+0x244>)
 80046b8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80046bc:	6829      	ldr	r1, [r5, #0]
 80046be:	6823      	ldr	r3, [r4, #0]
 80046c0:	f851 6b04 	ldr.w	r6, [r1], #4
 80046c4:	6029      	str	r1, [r5, #0]
 80046c6:	061d      	lsls	r5, r3, #24
 80046c8:	d514      	bpl.n	80046f4 <_printf_i+0x1ac>
 80046ca:	07df      	lsls	r7, r3, #31
 80046cc:	bf44      	itt	mi
 80046ce:	f043 0320 	orrmi.w	r3, r3, #32
 80046d2:	6023      	strmi	r3, [r4, #0]
 80046d4:	b91e      	cbnz	r6, 80046de <_printf_i+0x196>
 80046d6:	6823      	ldr	r3, [r4, #0]
 80046d8:	f023 0320 	bic.w	r3, r3, #32
 80046dc:	6023      	str	r3, [r4, #0]
 80046de:	2310      	movs	r3, #16
 80046e0:	e7b0      	b.n	8004644 <_printf_i+0xfc>
 80046e2:	6823      	ldr	r3, [r4, #0]
 80046e4:	f043 0320 	orr.w	r3, r3, #32
 80046e8:	6023      	str	r3, [r4, #0]
 80046ea:	2378      	movs	r3, #120	; 0x78
 80046ec:	4828      	ldr	r0, [pc, #160]	; (8004790 <_printf_i+0x248>)
 80046ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80046f2:	e7e3      	b.n	80046bc <_printf_i+0x174>
 80046f4:	0659      	lsls	r1, r3, #25
 80046f6:	bf48      	it	mi
 80046f8:	b2b6      	uxthmi	r6, r6
 80046fa:	e7e6      	b.n	80046ca <_printf_i+0x182>
 80046fc:	4615      	mov	r5, r2
 80046fe:	e7bb      	b.n	8004678 <_printf_i+0x130>
 8004700:	682b      	ldr	r3, [r5, #0]
 8004702:	6826      	ldr	r6, [r4, #0]
 8004704:	6961      	ldr	r1, [r4, #20]
 8004706:	1d18      	adds	r0, r3, #4
 8004708:	6028      	str	r0, [r5, #0]
 800470a:	0635      	lsls	r5, r6, #24
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	d501      	bpl.n	8004714 <_printf_i+0x1cc>
 8004710:	6019      	str	r1, [r3, #0]
 8004712:	e002      	b.n	800471a <_printf_i+0x1d2>
 8004714:	0670      	lsls	r0, r6, #25
 8004716:	d5fb      	bpl.n	8004710 <_printf_i+0x1c8>
 8004718:	8019      	strh	r1, [r3, #0]
 800471a:	2300      	movs	r3, #0
 800471c:	6123      	str	r3, [r4, #16]
 800471e:	4615      	mov	r5, r2
 8004720:	e7ba      	b.n	8004698 <_printf_i+0x150>
 8004722:	682b      	ldr	r3, [r5, #0]
 8004724:	1d1a      	adds	r2, r3, #4
 8004726:	602a      	str	r2, [r5, #0]
 8004728:	681d      	ldr	r5, [r3, #0]
 800472a:	6862      	ldr	r2, [r4, #4]
 800472c:	2100      	movs	r1, #0
 800472e:	4628      	mov	r0, r5
 8004730:	f7fb fd5e 	bl	80001f0 <memchr>
 8004734:	b108      	cbz	r0, 800473a <_printf_i+0x1f2>
 8004736:	1b40      	subs	r0, r0, r5
 8004738:	6060      	str	r0, [r4, #4]
 800473a:	6863      	ldr	r3, [r4, #4]
 800473c:	6123      	str	r3, [r4, #16]
 800473e:	2300      	movs	r3, #0
 8004740:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004744:	e7a8      	b.n	8004698 <_printf_i+0x150>
 8004746:	6923      	ldr	r3, [r4, #16]
 8004748:	462a      	mov	r2, r5
 800474a:	4649      	mov	r1, r9
 800474c:	4640      	mov	r0, r8
 800474e:	47d0      	blx	sl
 8004750:	3001      	adds	r0, #1
 8004752:	d0ab      	beq.n	80046ac <_printf_i+0x164>
 8004754:	6823      	ldr	r3, [r4, #0]
 8004756:	079b      	lsls	r3, r3, #30
 8004758:	d413      	bmi.n	8004782 <_printf_i+0x23a>
 800475a:	68e0      	ldr	r0, [r4, #12]
 800475c:	9b03      	ldr	r3, [sp, #12]
 800475e:	4298      	cmp	r0, r3
 8004760:	bfb8      	it	lt
 8004762:	4618      	movlt	r0, r3
 8004764:	e7a4      	b.n	80046b0 <_printf_i+0x168>
 8004766:	2301      	movs	r3, #1
 8004768:	4632      	mov	r2, r6
 800476a:	4649      	mov	r1, r9
 800476c:	4640      	mov	r0, r8
 800476e:	47d0      	blx	sl
 8004770:	3001      	adds	r0, #1
 8004772:	d09b      	beq.n	80046ac <_printf_i+0x164>
 8004774:	3501      	adds	r5, #1
 8004776:	68e3      	ldr	r3, [r4, #12]
 8004778:	9903      	ldr	r1, [sp, #12]
 800477a:	1a5b      	subs	r3, r3, r1
 800477c:	42ab      	cmp	r3, r5
 800477e:	dcf2      	bgt.n	8004766 <_printf_i+0x21e>
 8004780:	e7eb      	b.n	800475a <_printf_i+0x212>
 8004782:	2500      	movs	r5, #0
 8004784:	f104 0619 	add.w	r6, r4, #25
 8004788:	e7f5      	b.n	8004776 <_printf_i+0x22e>
 800478a:	bf00      	nop
 800478c:	080049d1 	.word	0x080049d1
 8004790:	080049e2 	.word	0x080049e2

08004794 <_sbrk_r>:
 8004794:	b538      	push	{r3, r4, r5, lr}
 8004796:	4d06      	ldr	r5, [pc, #24]	; (80047b0 <_sbrk_r+0x1c>)
 8004798:	2300      	movs	r3, #0
 800479a:	4604      	mov	r4, r0
 800479c:	4608      	mov	r0, r1
 800479e:	602b      	str	r3, [r5, #0]
 80047a0:	f7fc fa12 	bl	8000bc8 <_sbrk>
 80047a4:	1c43      	adds	r3, r0, #1
 80047a6:	d102      	bne.n	80047ae <_sbrk_r+0x1a>
 80047a8:	682b      	ldr	r3, [r5, #0]
 80047aa:	b103      	cbz	r3, 80047ae <_sbrk_r+0x1a>
 80047ac:	6023      	str	r3, [r4, #0]
 80047ae:	bd38      	pop	{r3, r4, r5, pc}
 80047b0:	20000140 	.word	0x20000140

080047b4 <__sread>:
 80047b4:	b510      	push	{r4, lr}
 80047b6:	460c      	mov	r4, r1
 80047b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047bc:	f000 f8a0 	bl	8004900 <_read_r>
 80047c0:	2800      	cmp	r0, #0
 80047c2:	bfab      	itete	ge
 80047c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80047c6:	89a3      	ldrhlt	r3, [r4, #12]
 80047c8:	181b      	addge	r3, r3, r0
 80047ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80047ce:	bfac      	ite	ge
 80047d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80047d2:	81a3      	strhlt	r3, [r4, #12]
 80047d4:	bd10      	pop	{r4, pc}

080047d6 <__swrite>:
 80047d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047da:	461f      	mov	r7, r3
 80047dc:	898b      	ldrh	r3, [r1, #12]
 80047de:	05db      	lsls	r3, r3, #23
 80047e0:	4605      	mov	r5, r0
 80047e2:	460c      	mov	r4, r1
 80047e4:	4616      	mov	r6, r2
 80047e6:	d505      	bpl.n	80047f4 <__swrite+0x1e>
 80047e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047ec:	2302      	movs	r3, #2
 80047ee:	2200      	movs	r2, #0
 80047f0:	f000 f868 	bl	80048c4 <_lseek_r>
 80047f4:	89a3      	ldrh	r3, [r4, #12]
 80047f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80047fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80047fe:	81a3      	strh	r3, [r4, #12]
 8004800:	4632      	mov	r2, r6
 8004802:	463b      	mov	r3, r7
 8004804:	4628      	mov	r0, r5
 8004806:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800480a:	f000 b817 	b.w	800483c <_write_r>

0800480e <__sseek>:
 800480e:	b510      	push	{r4, lr}
 8004810:	460c      	mov	r4, r1
 8004812:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004816:	f000 f855 	bl	80048c4 <_lseek_r>
 800481a:	1c43      	adds	r3, r0, #1
 800481c:	89a3      	ldrh	r3, [r4, #12]
 800481e:	bf15      	itete	ne
 8004820:	6560      	strne	r0, [r4, #84]	; 0x54
 8004822:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004826:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800482a:	81a3      	strheq	r3, [r4, #12]
 800482c:	bf18      	it	ne
 800482e:	81a3      	strhne	r3, [r4, #12]
 8004830:	bd10      	pop	{r4, pc}

08004832 <__sclose>:
 8004832:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004836:	f000 b813 	b.w	8004860 <_close_r>
	...

0800483c <_write_r>:
 800483c:	b538      	push	{r3, r4, r5, lr}
 800483e:	4d07      	ldr	r5, [pc, #28]	; (800485c <_write_r+0x20>)
 8004840:	4604      	mov	r4, r0
 8004842:	4608      	mov	r0, r1
 8004844:	4611      	mov	r1, r2
 8004846:	2200      	movs	r2, #0
 8004848:	602a      	str	r2, [r5, #0]
 800484a:	461a      	mov	r2, r3
 800484c:	f7fc f96b 	bl	8000b26 <_write>
 8004850:	1c43      	adds	r3, r0, #1
 8004852:	d102      	bne.n	800485a <_write_r+0x1e>
 8004854:	682b      	ldr	r3, [r5, #0]
 8004856:	b103      	cbz	r3, 800485a <_write_r+0x1e>
 8004858:	6023      	str	r3, [r4, #0]
 800485a:	bd38      	pop	{r3, r4, r5, pc}
 800485c:	20000140 	.word	0x20000140

08004860 <_close_r>:
 8004860:	b538      	push	{r3, r4, r5, lr}
 8004862:	4d06      	ldr	r5, [pc, #24]	; (800487c <_close_r+0x1c>)
 8004864:	2300      	movs	r3, #0
 8004866:	4604      	mov	r4, r0
 8004868:	4608      	mov	r0, r1
 800486a:	602b      	str	r3, [r5, #0]
 800486c:	f7fc f977 	bl	8000b5e <_close>
 8004870:	1c43      	adds	r3, r0, #1
 8004872:	d102      	bne.n	800487a <_close_r+0x1a>
 8004874:	682b      	ldr	r3, [r5, #0]
 8004876:	b103      	cbz	r3, 800487a <_close_r+0x1a>
 8004878:	6023      	str	r3, [r4, #0]
 800487a:	bd38      	pop	{r3, r4, r5, pc}
 800487c:	20000140 	.word	0x20000140

08004880 <_fstat_r>:
 8004880:	b538      	push	{r3, r4, r5, lr}
 8004882:	4d07      	ldr	r5, [pc, #28]	; (80048a0 <_fstat_r+0x20>)
 8004884:	2300      	movs	r3, #0
 8004886:	4604      	mov	r4, r0
 8004888:	4608      	mov	r0, r1
 800488a:	4611      	mov	r1, r2
 800488c:	602b      	str	r3, [r5, #0]
 800488e:	f7fc f972 	bl	8000b76 <_fstat>
 8004892:	1c43      	adds	r3, r0, #1
 8004894:	d102      	bne.n	800489c <_fstat_r+0x1c>
 8004896:	682b      	ldr	r3, [r5, #0]
 8004898:	b103      	cbz	r3, 800489c <_fstat_r+0x1c>
 800489a:	6023      	str	r3, [r4, #0]
 800489c:	bd38      	pop	{r3, r4, r5, pc}
 800489e:	bf00      	nop
 80048a0:	20000140 	.word	0x20000140

080048a4 <_isatty_r>:
 80048a4:	b538      	push	{r3, r4, r5, lr}
 80048a6:	4d06      	ldr	r5, [pc, #24]	; (80048c0 <_isatty_r+0x1c>)
 80048a8:	2300      	movs	r3, #0
 80048aa:	4604      	mov	r4, r0
 80048ac:	4608      	mov	r0, r1
 80048ae:	602b      	str	r3, [r5, #0]
 80048b0:	f7fc f971 	bl	8000b96 <_isatty>
 80048b4:	1c43      	adds	r3, r0, #1
 80048b6:	d102      	bne.n	80048be <_isatty_r+0x1a>
 80048b8:	682b      	ldr	r3, [r5, #0]
 80048ba:	b103      	cbz	r3, 80048be <_isatty_r+0x1a>
 80048bc:	6023      	str	r3, [r4, #0]
 80048be:	bd38      	pop	{r3, r4, r5, pc}
 80048c0:	20000140 	.word	0x20000140

080048c4 <_lseek_r>:
 80048c4:	b538      	push	{r3, r4, r5, lr}
 80048c6:	4d07      	ldr	r5, [pc, #28]	; (80048e4 <_lseek_r+0x20>)
 80048c8:	4604      	mov	r4, r0
 80048ca:	4608      	mov	r0, r1
 80048cc:	4611      	mov	r1, r2
 80048ce:	2200      	movs	r2, #0
 80048d0:	602a      	str	r2, [r5, #0]
 80048d2:	461a      	mov	r2, r3
 80048d4:	f7fc f96a 	bl	8000bac <_lseek>
 80048d8:	1c43      	adds	r3, r0, #1
 80048da:	d102      	bne.n	80048e2 <_lseek_r+0x1e>
 80048dc:	682b      	ldr	r3, [r5, #0]
 80048de:	b103      	cbz	r3, 80048e2 <_lseek_r+0x1e>
 80048e0:	6023      	str	r3, [r4, #0]
 80048e2:	bd38      	pop	{r3, r4, r5, pc}
 80048e4:	20000140 	.word	0x20000140

080048e8 <__malloc_lock>:
 80048e8:	4801      	ldr	r0, [pc, #4]	; (80048f0 <__malloc_lock+0x8>)
 80048ea:	f7ff bb1d 	b.w	8003f28 <__retarget_lock_acquire_recursive>
 80048ee:	bf00      	nop
 80048f0:	20000134 	.word	0x20000134

080048f4 <__malloc_unlock>:
 80048f4:	4801      	ldr	r0, [pc, #4]	; (80048fc <__malloc_unlock+0x8>)
 80048f6:	f7ff bb18 	b.w	8003f2a <__retarget_lock_release_recursive>
 80048fa:	bf00      	nop
 80048fc:	20000134 	.word	0x20000134

08004900 <_read_r>:
 8004900:	b538      	push	{r3, r4, r5, lr}
 8004902:	4d07      	ldr	r5, [pc, #28]	; (8004920 <_read_r+0x20>)
 8004904:	4604      	mov	r4, r0
 8004906:	4608      	mov	r0, r1
 8004908:	4611      	mov	r1, r2
 800490a:	2200      	movs	r2, #0
 800490c:	602a      	str	r2, [r5, #0]
 800490e:	461a      	mov	r2, r3
 8004910:	f7fc f8ec 	bl	8000aec <_read>
 8004914:	1c43      	adds	r3, r0, #1
 8004916:	d102      	bne.n	800491e <_read_r+0x1e>
 8004918:	682b      	ldr	r3, [r5, #0]
 800491a:	b103      	cbz	r3, 800491e <_read_r+0x1e>
 800491c:	6023      	str	r3, [r4, #0]
 800491e:	bd38      	pop	{r3, r4, r5, pc}
 8004920:	20000140 	.word	0x20000140

08004924 <_init>:
 8004924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004926:	bf00      	nop
 8004928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800492a:	bc08      	pop	{r3}
 800492c:	469e      	mov	lr, r3
 800492e:	4770      	bx	lr

08004930 <_fini>:
 8004930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004932:	bf00      	nop
 8004934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004936:	bc08      	pop	{r3}
 8004938:	469e      	mov	lr, r3
 800493a:	4770      	bx	lr
