
STM32F103_particulate_sensor_7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c6c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ec  08005d78  08005d78  00015d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006264  08006264  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  08006264  08006264  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006264  08006264  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006264  08006264  00016264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006268  08006268  00016268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800626c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006ac  20000088  080062f4  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000734  080062f4  00020734  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004e860  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b98  00000000  00000000  0006e911  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003670  00000000  00000000  000724b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000034a8  00000000  00000000  00075b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a539  00000000  00000000  00078fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f1c8  00000000  00000000  00093501  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a48e1  00000000  00000000  000b26c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00156faa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000f41c  00000000  00000000  00156ffc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000088 	.word	0x20000088
 8000128:	00000000 	.word	0x00000000
 800012c:	08005d60 	.word	0x08005d60

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000008c 	.word	0x2000008c
 8000148:	08005d60 	.word	0x08005d60

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b0a6      	sub	sp, #152	; 0x98
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char str[32];
	char str2[32];
	char str3[32];
	int state = 0;
 8000152:	2300      	movs	r3, #0
 8000154:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	int pre_tick = 0;
 8000158:	2300      	movs	r3, #0
 800015a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	int first = 0;
 800015e:	2300      	movs	r3, #0
 8000160:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000164:	f001 f8d6 	bl	8001314 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000168:	f000 fb2c 	bl	80007c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016c:	f000 fc8c 	bl	8000a88 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000170:	f000 fb88 	bl	8000884 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000174:	f000 fc0a 	bl	800098c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000178:	f000 fc32 	bl	80009e0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800017c:	f000 fbb8 	bl	80008f0 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8000180:	f000 fc58 	bl	8000a34 <MX_USART3_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000184:	f000 fb62 	bl	800084c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 8000188:	48b9      	ldr	r0, [pc, #740]	; (8000470 <main+0x324>)
 800018a:	f002 fb8b 	bl	80028a4 <HAL_TIM_Base_Start_IT>
	u8g2_Setup_ssd1306_128x64_noname_f(&u8g2, U8G2_R0, u8x8_byte_stm32_hw_spi,
 800018e:	4bb9      	ldr	r3, [pc, #740]	; (8000474 <main+0x328>)
 8000190:	4ab9      	ldr	r2, [pc, #740]	; (8000478 <main+0x32c>)
 8000192:	49ba      	ldr	r1, [pc, #744]	; (800047c <main+0x330>)
 8000194:	48ba      	ldr	r0, [pc, #744]	; (8000480 <main+0x334>)
 8000196:	f003 fd4f 	bl	8003c38 <u8g2_Setup_ssd1306_128x64_noname_f>
			u8x8_stm32_gpio_and_delay);

	u8g2_InitDisplay(&u8g2);
 800019a:	48b9      	ldr	r0, [pc, #740]	; (8000480 <main+0x334>)
 800019c:	f005 f897 	bl	80052ce <u8x8_InitDisplay>
	u8g2_SetPowerSave(&u8g2, 0);
 80001a0:	2100      	movs	r1, #0
 80001a2:	48b7      	ldr	r0, [pc, #732]	; (8000480 <main+0x334>)
 80001a4:	f005 f8a2 	bl	80052ec <u8x8_SetPowerSave>

	u8g2_SetFont(&u8g2, u8g2_font_5x7_tr);
 80001a8:	49b6      	ldr	r1, [pc, #728]	; (8000484 <main+0x338>)
 80001aa:	48b5      	ldr	r0, [pc, #724]	; (8000480 <main+0x334>)
 80001ac:	f004 f9de 	bl	800456c <u8g2_SetFont>
	u8g2_SetDisplayRotation(&u8g2, U8G2_R2);
 80001b0:	49b5      	ldr	r1, [pc, #724]	; (8000488 <main+0x33c>)
 80001b2:	48b3      	ldr	r0, [pc, #716]	; (8000480 <main+0x334>)
 80001b4:	f004 fc4c 	bl	8004a50 <u8g2_SetDisplayRotation>

	HAL_UART_Receive_IT(&huart3, &cmd, 1);
 80001b8:	2201      	movs	r2, #1
 80001ba:	49b4      	ldr	r1, [pc, #720]	; (800048c <main+0x340>)
 80001bc:	48b4      	ldr	r0, [pc, #720]	; (8000490 <main+0x344>)
 80001be:	f002 fffa 	bl	80031b6 <HAL_UART_Receive_IT>

	/* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
	__HAL_UART_ENABLE_IT(&huart2, UART_IT_ERR);
 80001c2:	4bb4      	ldr	r3, [pc, #720]	; (8000494 <main+0x348>)
 80001c4:	681b      	ldr	r3, [r3, #0]
 80001c6:	695a      	ldr	r2, [r3, #20]
 80001c8:	4bb2      	ldr	r3, [pc, #712]	; (8000494 <main+0x348>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	f042 0201 	orr.w	r2, r2, #1
 80001d0:	615a      	str	r2, [r3, #20]
	/* Enable the UART Data Register not empty Interrupt */
	__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 80001d2:	4bb0      	ldr	r3, [pc, #704]	; (8000494 <main+0x348>)
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	68da      	ldr	r2, [r3, #12]
 80001d8:	4bae      	ldr	r3, [pc, #696]	; (8000494 <main+0x348>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	f042 0220 	orr.w	r2, r2, #32
 80001e0:	60da      	str	r2, [r3, #12]
	rxBufferInit(&uart_rx);
 80001e2:	48ad      	ldr	r0, [pc, #692]	; (8000498 <main+0x34c>)
 80001e4:	f000 ffaa 	bl	800113c <rxBufferInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		if (timerFlag == 1) {
 80001e8:	4bac      	ldr	r3, [pc, #688]	; (800049c <main+0x350>)
 80001ea:	781b      	ldrb	r3, [r3, #0]
 80001ec:	b2db      	uxtb	r3, r3
 80001ee:	2b01      	cmp	r3, #1
 80001f0:	d12a      	bne.n	8000248 <main+0xfc>

			state = 2;
 80001f2:	2302      	movs	r3, #2
 80001f4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

			if (first++ > 0) {
 80001f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80001fc:	1c5a      	adds	r2, r3, #1
 80001fe:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8000202:	2b00      	cmp	r3, #0
 8000204:	dd09      	ble.n	800021a <main+0xce>
				sprintf(str, "1 min TIMER");
 8000206:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800020a:	49a5      	ldr	r1, [pc, #660]	; (80004a0 <main+0x354>)
 800020c:	4618      	mov	r0, r3
 800020e:	f005 f92d 	bl	800546c <siprintf>
				first = 1;
 8000212:	2301      	movs	r3, #1
 8000214:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000218:	e005      	b.n	8000226 <main+0xda>

			} else {
				sprintf(str, "Hello :)");
 800021a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800021e:	49a1      	ldr	r1, [pc, #644]	; (80004a4 <main+0x358>)
 8000220:	4618      	mov	r0, r3
 8000222:	f005 f923 	bl	800546c <siprintf>
			}

			u8g2_FirstPage(&u8g2);
 8000226:	4896      	ldr	r0, [pc, #600]	; (8000480 <main+0x334>)
 8000228:	f003 fcb3 	bl	8003b92 <u8g2_FirstPage>
			do {
				u8g2_DrawStrX2(&u8g2, 5, 30, str);
 800022c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000230:	221e      	movs	r2, #30
 8000232:	2105      	movs	r1, #5
 8000234:	4892      	ldr	r0, [pc, #584]	; (8000480 <main+0x334>)
 8000236:	f004 f8fb 	bl	8004430 <u8g2_DrawStrX2>

			} while (u8g2_NextPage(&u8g2));
 800023a:	4891      	ldr	r0, [pc, #580]	; (8000480 <main+0x334>)
 800023c:	f003 fcbd 	bl	8003bba <u8g2_NextPage>
 8000240:	4603      	mov	r3, r0
 8000242:	2b00      	cmp	r3, #0
 8000244:	d1f2      	bne.n	800022c <main+0xe0>
 8000246:	e01d      	b.n	8000284 <main+0x138>

		}

		else if (btnFlag == 1) {
 8000248:	4b97      	ldr	r3, [pc, #604]	; (80004a8 <main+0x35c>)
 800024a:	781b      	ldrb	r3, [r3, #0]
 800024c:	b2db      	uxtb	r3, r3
 800024e:	2b01      	cmp	r3, #1
 8000250:	d118      	bne.n	8000284 <main+0x138>

			state = 4;
 8000252:	2304      	movs	r3, #4
 8000254:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
			sprintf(str, "BUTTON!");
 8000258:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800025c:	4993      	ldr	r1, [pc, #588]	; (80004ac <main+0x360>)
 800025e:	4618      	mov	r0, r3
 8000260:	f005 f904 	bl	800546c <siprintf>
			u8g2_FirstPage(&u8g2);
 8000264:	4886      	ldr	r0, [pc, #536]	; (8000480 <main+0x334>)
 8000266:	f003 fc94 	bl	8003b92 <u8g2_FirstPage>
			do {
				u8g2_DrawStrX2(&u8g2, 5, 30, str);
 800026a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800026e:	221e      	movs	r2, #30
 8000270:	2105      	movs	r1, #5
 8000272:	4883      	ldr	r0, [pc, #524]	; (8000480 <main+0x334>)
 8000274:	f004 f8dc 	bl	8004430 <u8g2_DrawStrX2>

			} while (u8g2_NextPage(&u8g2));
 8000278:	4881      	ldr	r0, [pc, #516]	; (8000480 <main+0x334>)
 800027a:	f003 fc9e 	bl	8003bba <u8g2_NextPage>
 800027e:	4603      	mov	r3, r0
 8000280:	2b00      	cmp	r3, #0
 8000282:	d1f2      	bne.n	800026a <main+0x11e>

		}

		if (state == 1) {
 8000284:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000288:	2b01      	cmp	r3, #1
 800028a:	f040 811d 	bne.w	80004c8 <main+0x37c>
			state = 3;
 800028e:	2303      	movs	r3, #3
 8000290:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
			sprintf(str, "MEASURING...");
 8000294:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000298:	4985      	ldr	r1, [pc, #532]	; (80004b0 <main+0x364>)
 800029a:	4618      	mov	r0, r3
 800029c:	f005 f8e6 	bl	800546c <siprintf>
			u8g2_FirstPage(&u8g2);
 80002a0:	4877      	ldr	r0, [pc, #476]	; (8000480 <main+0x334>)
 80002a2:	f003 fc76 	bl	8003b92 <u8g2_FirstPage>
			do {
				u8g2_DrawStrX2(&u8g2, 5, 30, str);
 80002a6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80002aa:	221e      	movs	r2, #30
 80002ac:	2105      	movs	r1, #5
 80002ae:	4874      	ldr	r0, [pc, #464]	; (8000480 <main+0x334>)
 80002b0:	f004 f8be 	bl	8004430 <u8g2_DrawStrX2>

			} while (u8g2_NextPage(&u8g2));
 80002b4:	4872      	ldr	r0, [pc, #456]	; (8000480 <main+0x334>)
 80002b6:	f003 fc80 	bl	8003bba <u8g2_NextPage>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d1f2      	bne.n	80002a6 <main+0x15a>
			/*
			 pre_tick = HAL_GetTick();
			 while ((HAL_GetTick() - pre_tick) < 5000)
			 ;
			 */
			memset(buff, 0, 55);
 80002c0:	2237      	movs	r2, #55	; 0x37
 80002c2:	2100      	movs	r1, #0
 80002c4:	487b      	ldr	r0, [pc, #492]	; (80004b4 <main+0x368>)
 80002c6:	f005 f8c9 	bl	800545c <memset>
			HAL_UART_Transmit(&huart2, (uint8_t*) getDataCommand, 5, 5000);
 80002ca:	f241 3388 	movw	r3, #5000	; 0x1388
 80002ce:	2205      	movs	r2, #5
 80002d0:	4979      	ldr	r1, [pc, #484]	; (80004b8 <main+0x36c>)
 80002d2:	4870      	ldr	r0, [pc, #448]	; (8000494 <main+0x348>)
 80002d4:	f002 fedd 	bl	8003092 <HAL_UART_Transmit>

			pre_tick = HAL_GetTick();
 80002d8:	f001 f874 	bl	80013c4 <HAL_GetTick>
 80002dc:	4603      	mov	r3, r0
 80002de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			while ((HAL_GetTick() - pre_tick) < 1000)
 80002e2:	bf00      	nop
 80002e4:	f001 f86e 	bl	80013c4 <HAL_GetTick>
 80002e8:	4602      	mov	r2, r0
 80002ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80002ee:	1ad3      	subs	r3, r2, r3
 80002f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80002f4:	d3f6      	bcc.n	80002e4 <main+0x198>
				;

			uint8_t num = uart_available(&uart_rx);
 80002f6:	4868      	ldr	r0, [pc, #416]	; (8000498 <main+0x34c>)
 80002f8:	f000 ff98 	bl	800122c <uart_available>
 80002fc:	4603      	mov	r3, r0
 80002fe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			uint8_t i;
			for (i = 0; i < num; i++) {
 8000302:	2300      	movs	r3, #0
 8000304:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8000308:	e013      	b.n	8000332 <main+0x1e6>
				int ch = pop(&uart_rx);
 800030a:	4863      	ldr	r0, [pc, #396]	; (8000498 <main+0x34c>)
 800030c:	f000 ff5c 	bl	80011c8 <pop>
 8000310:	4603      	mov	r3, r0
 8000312:	663b      	str	r3, [r7, #96]	; 0x60
				if (ch != -1) {
 8000314:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800031a:	d005      	beq.n	8000328 <main+0x1dc>

					buff[i] = ch;
 800031c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000320:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000322:	b2d1      	uxtb	r1, r2
 8000324:	4a63      	ldr	r2, [pc, #396]	; (80004b4 <main+0x368>)
 8000326:	54d1      	strb	r1, [r2, r3]
			for (i = 0; i < num; i++) {
 8000328:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800032c:	3301      	adds	r3, #1
 800032e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8000332:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 8000336:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800033a:	429a      	cmp	r2, r3
 800033c:	d3e5      	bcc.n	800030a <main+0x1be>
				}
			}
			HAL_UART_Transmit(&huart3, buff, num, 500);
 800033e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000342:	b29a      	uxth	r2, r3
 8000344:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000348:	495a      	ldr	r1, [pc, #360]	; (80004b4 <main+0x368>)
 800034a:	4851      	ldr	r0, [pc, #324]	; (8000490 <main+0x344>)
 800034c:	f002 fea1 	bl	8003092 <HAL_UART_Transmit>

			if ((buff[0] == 0x16 && buff[1] == 0x35)) {
 8000350:	4b58      	ldr	r3, [pc, #352]	; (80004b4 <main+0x368>)
 8000352:	781b      	ldrb	r3, [r3, #0]
 8000354:	2b16      	cmp	r3, #22
 8000356:	f47f af47 	bne.w	80001e8 <main+0x9c>
 800035a:	4b56      	ldr	r3, [pc, #344]	; (80004b4 <main+0x368>)
 800035c:	785b      	ldrb	r3, [r3, #1]
 800035e:	2b35      	cmp	r3, #53	; 0x35
 8000360:	f47f af42 	bne.w	80001e8 <main+0x9c>
				if (buff[2] == 0x0B) {
 8000364:	4b53      	ldr	r3, [pc, #332]	; (80004b4 <main+0x368>)
 8000366:	789b      	ldrb	r3, [r3, #2]
 8000368:	2b0b      	cmp	r3, #11
 800036a:	f47f af3d 	bne.w	80001e8 <main+0x9c>
					int val = 0;
 800036e:	2300      	movs	r3, #0
 8000370:	66bb      	str	r3, [r7, #104]	; 0x68
					/*
					 val |= (buff[3] << 24) | (buff[4] << 16) | (buff[5] << 8)
					 | buff[6];
					 */
					val = (buff[3] << 24) + (buff[4] << 16) + (buff[5] << 8)
 8000372:	4b50      	ldr	r3, [pc, #320]	; (80004b4 <main+0x368>)
 8000374:	78db      	ldrb	r3, [r3, #3]
 8000376:	061a      	lsls	r2, r3, #24
 8000378:	4b4e      	ldr	r3, [pc, #312]	; (80004b4 <main+0x368>)
 800037a:	791b      	ldrb	r3, [r3, #4]
 800037c:	041b      	lsls	r3, r3, #16
 800037e:	441a      	add	r2, r3
 8000380:	4b4c      	ldr	r3, [pc, #304]	; (80004b4 <main+0x368>)
 8000382:	795b      	ldrb	r3, [r3, #5]
 8000384:	021b      	lsls	r3, r3, #8
 8000386:	4413      	add	r3, r2
							+ (buff[6]);
 8000388:	4a4a      	ldr	r2, [pc, #296]	; (80004b4 <main+0x368>)
 800038a:	7992      	ldrb	r2, [r2, #6]
					val = (buff[3] << 24) + (buff[4] << 16) + (buff[5] << 8)
 800038c:	4413      	add	r3, r2
 800038e:	66bb      	str	r3, [r7, #104]	; 0x68
					sprintf(str, "PM1.0 : %d\r\n", val);
 8000390:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000394:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000396:	4949      	ldr	r1, [pc, #292]	; (80004bc <main+0x370>)
 8000398:	4618      	mov	r0, r3
 800039a:	f005 f867 	bl	800546c <siprintf>
#ifndef OLED
	  					HAL_UART_Transmit(&huart1, (uint8_t*) str, sizeof(str),
	  							100);
	  #endif
					val = 0;
 800039e:	2300      	movs	r3, #0
 80003a0:	66bb      	str	r3, [r7, #104]	; 0x68
					val = (buff[7] << 24) + (buff[8] << 16) + (buff[9] << 8)
 80003a2:	4b44      	ldr	r3, [pc, #272]	; (80004b4 <main+0x368>)
 80003a4:	79db      	ldrb	r3, [r3, #7]
 80003a6:	061a      	lsls	r2, r3, #24
 80003a8:	4b42      	ldr	r3, [pc, #264]	; (80004b4 <main+0x368>)
 80003aa:	7a1b      	ldrb	r3, [r3, #8]
 80003ac:	041b      	lsls	r3, r3, #16
 80003ae:	441a      	add	r2, r3
 80003b0:	4b40      	ldr	r3, [pc, #256]	; (80004b4 <main+0x368>)
 80003b2:	7a5b      	ldrb	r3, [r3, #9]
 80003b4:	021b      	lsls	r3, r3, #8
 80003b6:	4413      	add	r3, r2
							+ (buff[10]);
 80003b8:	4a3e      	ldr	r2, [pc, #248]	; (80004b4 <main+0x368>)
 80003ba:	7a92      	ldrb	r2, [r2, #10]
					val = (buff[7] << 24) + (buff[8] << 16) + (buff[9] << 8)
 80003bc:	4413      	add	r3, r2
 80003be:	66bb      	str	r3, [r7, #104]	; 0x68
					/*
					 val |= (buff[7] << 24) | (buff[8] << 16) | (buff[9] << 8)
					 | buff[10];
					 */
					sprintf(str2, "PM2.5 : %d\r\n", val);
 80003c0:	f107 0320 	add.w	r3, r7, #32
 80003c4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80003c6:	493e      	ldr	r1, [pc, #248]	; (80004c0 <main+0x374>)
 80003c8:	4618      	mov	r0, r3
 80003ca:	f005 f84f 	bl	800546c <siprintf>
#ifndef OLED
	  					HAL_UART_Transmit(&huart1, (uint8_t*) str2, sizeof(str2),
	  							5000);
	  #endif
					val = 0;
 80003ce:	2300      	movs	r3, #0
 80003d0:	66bb      	str	r3, [r7, #104]	; 0x68
					val = (buff[11] << 24) + (buff[12] << 16) + (buff[13] << 8)
 80003d2:	4b38      	ldr	r3, [pc, #224]	; (80004b4 <main+0x368>)
 80003d4:	7adb      	ldrb	r3, [r3, #11]
 80003d6:	061a      	lsls	r2, r3, #24
 80003d8:	4b36      	ldr	r3, [pc, #216]	; (80004b4 <main+0x368>)
 80003da:	7b1b      	ldrb	r3, [r3, #12]
 80003dc:	041b      	lsls	r3, r3, #16
 80003de:	441a      	add	r2, r3
 80003e0:	4b34      	ldr	r3, [pc, #208]	; (80004b4 <main+0x368>)
 80003e2:	7b5b      	ldrb	r3, [r3, #13]
 80003e4:	021b      	lsls	r3, r3, #8
 80003e6:	4413      	add	r3, r2
							+ (buff[14]);
 80003e8:	4a32      	ldr	r2, [pc, #200]	; (80004b4 <main+0x368>)
 80003ea:	7b92      	ldrb	r2, [r2, #14]
					val = (buff[11] << 24) + (buff[12] << 16) + (buff[13] << 8)
 80003ec:	4413      	add	r3, r2
 80003ee:	66bb      	str	r3, [r7, #104]	; 0x68
					/*
					 val |= (buff[11] << 24) | (buff[12] << 16) | (buff[13] << 8)
					 | buff[14];
					 */
					sprintf(str3, "PM10 : %d\r\n", val);
 80003f0:	463b      	mov	r3, r7
 80003f2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80003f4:	4933      	ldr	r1, [pc, #204]	; (80004c4 <main+0x378>)
 80003f6:	4618      	mov	r0, r3
 80003f8:	f005 f838 	bl	800546c <siprintf>

#ifndef OLED
	  					HAL_UART_Transmit(&huart1, (uint8_t*) str3, sizeof(str3),
	  												5000);
	  #else
					u8g2_FirstPage(&u8g2);
 80003fc:	4820      	ldr	r0, [pc, #128]	; (8000480 <main+0x334>)
 80003fe:	f003 fbc8 	bl	8003b92 <u8g2_FirstPage>
					do {
						u8g2_DrawStrX2(&u8g2, 5, 15, str);
 8000402:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000406:	220f      	movs	r2, #15
 8000408:	2105      	movs	r1, #5
 800040a:	481d      	ldr	r0, [pc, #116]	; (8000480 <main+0x334>)
 800040c:	f004 f810 	bl	8004430 <u8g2_DrawStrX2>
						u8g2_DrawStrX2(&u8g2, 5, 30, str2);
 8000410:	f107 0320 	add.w	r3, r7, #32
 8000414:	221e      	movs	r2, #30
 8000416:	2105      	movs	r1, #5
 8000418:	4819      	ldr	r0, [pc, #100]	; (8000480 <main+0x334>)
 800041a:	f004 f809 	bl	8004430 <u8g2_DrawStrX2>
						u8g2_DrawStrX2(&u8g2, 5, 45, str3);
 800041e:	463b      	mov	r3, r7
 8000420:	222d      	movs	r2, #45	; 0x2d
 8000422:	2105      	movs	r1, #5
 8000424:	4816      	ldr	r0, [pc, #88]	; (8000480 <main+0x334>)
 8000426:	f004 f803 	bl	8004430 <u8g2_DrawStrX2>
					} while (u8g2_NextPage(&u8g2));
 800042a:	4815      	ldr	r0, [pc, #84]	; (8000480 <main+0x334>)
 800042c:	f003 fbc5 	bl	8003bba <u8g2_NextPage>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d1e5      	bne.n	8000402 <main+0x2b6>
					int pre_tick = HAL_GetTick();
 8000436:	f000 ffc5 	bl	80013c4 <HAL_GetTick>
 800043a:	4603      	mov	r3, r0
 800043c:	667b      	str	r3, [r7, #100]	; 0x64
					while ((HAL_GetTick() - pre_tick) < 1000)
 800043e:	bf00      	nop
 8000440:	f000 ffc0 	bl	80013c4 <HAL_GetTick>
 8000444:	4602      	mov	r2, r0
 8000446:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000448:	1ad3      	subs	r3, r2, r3
 800044a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800044e:	d3f7      	bcc.n	8000440 <main+0x2f4>
						;

#endif

					memset(str, 0, sizeof(str));
 8000450:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000454:	2220      	movs	r2, #32
 8000456:	2100      	movs	r1, #0
 8000458:	4618      	mov	r0, r3
 800045a:	f004 ffff 	bl	800545c <memset>
					memset(str2, 0, sizeof(str2));
 800045e:	f107 0320 	add.w	r3, r7, #32
 8000462:	2220      	movs	r2, #32
 8000464:	2100      	movs	r1, #0
 8000466:	4618      	mov	r0, r3
 8000468:	f004 fff8 	bl	800545c <memset>
 800046c:	e6bc      	b.n	80001e8 <main+0x9c>
 800046e:	bf00      	nop
 8000470:	200000fc 	.word	0x200000fc
 8000474:	08000f81 	.word	0x08000f81
 8000478:	08001079 	.word	0x08001079
 800047c:	08006148 	.word	0x08006148
 8000480:	2000024c 	.word	0x2000024c
 8000484:	08005e24 	.word	0x08005e24
 8000488:	08006154 	.word	0x08006154
 800048c:	20000247 	.word	0x20000247
 8000490:	200001cc 	.word	0x200001cc
 8000494:	20000188 	.word	0x20000188
 8000498:	200002e4 	.word	0x200002e4
 800049c:	20000249 	.word	0x20000249
 80004a0:	08005d78 	.word	0x08005d78
 80004a4:	08005d84 	.word	0x08005d84
 80004a8:	20000248 	.word	0x20000248
 80004ac:	08005d90 	.word	0x08005d90
 80004b0:	08005d98 	.word	0x08005d98
 80004b4:	20000210 	.word	0x20000210
 80004b8:	20000000 	.word	0x20000000
 80004bc:	08005da8 	.word	0x08005da8
 80004c0:	08005db8 	.word	0x08005db8
 80004c4:	08005dc8 	.word	0x08005dc8
				}

			}
		}

		else if (state == 2) {
 80004c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80004cc:	2b02      	cmp	r3, #2
 80004ce:	d14e      	bne.n	800056e <main+0x422>
			state = 1;
 80004d0:	2301      	movs	r3, #1
 80004d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

			memset(buff, 0, 55);
 80004d6:	2237      	movs	r2, #55	; 0x37
 80004d8:	2100      	movs	r1, #0
 80004da:	48ad      	ldr	r0, [pc, #692]	; (8000790 <main+0x644>)
 80004dc:	f004 ffbe 	bl	800545c <memset>
			HAL_UART_Transmit(&huart2, (uint8_t*) openCommand, 6, 5000);
 80004e0:	f241 3388 	movw	r3, #5000	; 0x1388
 80004e4:	2206      	movs	r2, #6
 80004e6:	49ab      	ldr	r1, [pc, #684]	; (8000794 <main+0x648>)
 80004e8:	48ab      	ldr	r0, [pc, #684]	; (8000798 <main+0x64c>)
 80004ea:	f002 fdd2 	bl	8003092 <HAL_UART_Transmit>
			pre_tick = HAL_GetTick();
 80004ee:	f000 ff69 	bl	80013c4 <HAL_GetTick>
 80004f2:	4603      	mov	r3, r0
 80004f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			while ((HAL_GetTick() - pre_tick) < 1000)
 80004f8:	bf00      	nop
 80004fa:	f000 ff63 	bl	80013c4 <HAL_GetTick>
 80004fe:	4602      	mov	r2, r0
 8000500:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000504:	1ad3      	subs	r3, r2, r3
 8000506:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800050a:	d3f6      	bcc.n	80004fa <main+0x3ae>
				;

			uint8_t num = uart_available(&uart_rx);
 800050c:	48a3      	ldr	r0, [pc, #652]	; (800079c <main+0x650>)
 800050e:	f000 fe8d 	bl	800122c <uart_available>
 8000512:	4603      	mov	r3, r0
 8000514:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

			uint8_t i;

			for (i = 0; i < num; i++) {
 8000518:	2300      	movs	r3, #0
 800051a:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 800051e:	e013      	b.n	8000548 <main+0x3fc>
				int ch = pop(&uart_rx);
 8000520:	489e      	ldr	r0, [pc, #632]	; (800079c <main+0x650>)
 8000522:	f000 fe51 	bl	80011c8 <pop>
 8000526:	4603      	mov	r3, r0
 8000528:	673b      	str	r3, [r7, #112]	; 0x70
				if (ch != -1) {
 800052a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800052c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000530:	d005      	beq.n	800053e <main+0x3f2>
					buff[i] = ch;
 8000532:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8000536:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000538:	b2d1      	uxtb	r1, r2
 800053a:	4a95      	ldr	r2, [pc, #596]	; (8000790 <main+0x644>)
 800053c:	54d1      	strb	r1, [r2, r3]
			for (i = 0; i < num; i++) {
 800053e:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8000542:	3301      	adds	r3, #1
 8000544:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 8000548:	f897 208e 	ldrb.w	r2, [r7, #142]	; 0x8e
 800054c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000550:	429a      	cmp	r2, r3
 8000552:	d3e5      	bcc.n	8000520 <main+0x3d4>
				}
			}
			timerFlag = 0;
 8000554:	4b92      	ldr	r3, [pc, #584]	; (80007a0 <main+0x654>)
 8000556:	2200      	movs	r2, #0
 8000558:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, buff, num, 500);
 800055a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800055e:	b29a      	uxth	r2, r3
 8000560:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000564:	498a      	ldr	r1, [pc, #552]	; (8000790 <main+0x644>)
 8000566:	488f      	ldr	r0, [pc, #572]	; (80007a4 <main+0x658>)
 8000568:	f002 fd93 	bl	8003092 <HAL_UART_Transmit>
 800056c:	e63c      	b.n	80001e8 <main+0x9c>

		} else if (state == 3) {
 800056e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000572:	2b03      	cmp	r3, #3
 8000574:	d14b      	bne.n	800060e <main+0x4c2>
			state = 0;
 8000576:	2300      	movs	r3, #0
 8000578:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

			memset(buff, 0, 55);
 800057c:	2237      	movs	r2, #55	; 0x37
 800057e:	2100      	movs	r1, #0
 8000580:	4883      	ldr	r0, [pc, #524]	; (8000790 <main+0x644>)
 8000582:	f004 ff6b 	bl	800545c <memset>
			HAL_UART_Transmit(&huart2, (uint8_t*) closeCommand, 6, 5000);
 8000586:	f241 3388 	movw	r3, #5000	; 0x1388
 800058a:	2206      	movs	r2, #6
 800058c:	4986      	ldr	r1, [pc, #536]	; (80007a8 <main+0x65c>)
 800058e:	4882      	ldr	r0, [pc, #520]	; (8000798 <main+0x64c>)
 8000590:	f002 fd7f 	bl	8003092 <HAL_UART_Transmit>
			pre_tick = HAL_GetTick();
 8000594:	f000 ff16 	bl	80013c4 <HAL_GetTick>
 8000598:	4603      	mov	r3, r0
 800059a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			while ((HAL_GetTick() - pre_tick) < 1000)
 800059e:	bf00      	nop
 80005a0:	f000 ff10 	bl	80013c4 <HAL_GetTick>
 80005a4:	4602      	mov	r2, r0
 80005a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80005aa:	1ad3      	subs	r3, r2, r3
 80005ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80005b0:	d3f6      	bcc.n	80005a0 <main+0x454>
				;

			uint8_t num = uart_available(&uart_rx);
 80005b2:	487a      	ldr	r0, [pc, #488]	; (800079c <main+0x650>)
 80005b4:	f000 fe3a 	bl	800122c <uart_available>
 80005b8:	4603      	mov	r3, r0
 80005ba:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			uint8_t i;

			for (i = 0; i < num; i++) {
 80005be:	2300      	movs	r3, #0
 80005c0:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
 80005c4:	e013      	b.n	80005ee <main+0x4a2>
				int ch = pop(&uart_rx);
 80005c6:	4875      	ldr	r0, [pc, #468]	; (800079c <main+0x650>)
 80005c8:	f000 fdfe 	bl	80011c8 <pop>
 80005cc:	4603      	mov	r3, r0
 80005ce:	67bb      	str	r3, [r7, #120]	; 0x78
				if (ch != -1) {
 80005d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80005d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005d6:	d005      	beq.n	80005e4 <main+0x498>
					buff[i] = ch;
 80005d8:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 80005dc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80005de:	b2d1      	uxtb	r1, r2
 80005e0:	4a6b      	ldr	r2, [pc, #428]	; (8000790 <main+0x644>)
 80005e2:	54d1      	strb	r1, [r2, r3]
			for (i = 0; i < num; i++) {
 80005e4:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 80005e8:	3301      	adds	r3, #1
 80005ea:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
 80005ee:	f897 208d 	ldrb.w	r2, [r7, #141]	; 0x8d
 80005f2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80005f6:	429a      	cmp	r2, r3
 80005f8:	d3e5      	bcc.n	80005c6 <main+0x47a>
				}
			}
			HAL_UART_Transmit(&huart3, buff, num, 500);
 80005fa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80005fe:	b29a      	uxth	r2, r3
 8000600:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000604:	4962      	ldr	r1, [pc, #392]	; (8000790 <main+0x644>)
 8000606:	4867      	ldr	r0, [pc, #412]	; (80007a4 <main+0x658>)
 8000608:	f002 fd43 	bl	8003092 <HAL_UART_Transmit>
 800060c:	e5ec      	b.n	80001e8 <main+0x9c>
		} else if (state == 0) {
 800060e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000612:	2b00      	cmp	r3, #0
 8000614:	d164      	bne.n	80006e0 <main+0x594>

			sprintf(str, "   ^   ^");
 8000616:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800061a:	4964      	ldr	r1, [pc, #400]	; (80007ac <main+0x660>)
 800061c:	4618      	mov	r0, r3
 800061e:	f004 ff25 	bl	800546c <siprintf>
			sprintf(str2, "     o");
 8000622:	f107 0320 	add.w	r3, r7, #32
 8000626:	4962      	ldr	r1, [pc, #392]	; (80007b0 <main+0x664>)
 8000628:	4618      	mov	r0, r3
 800062a:	f004 ff1f 	bl	800546c <siprintf>
			u8g2_FirstPage(&u8g2);
 800062e:	4861      	ldr	r0, [pc, #388]	; (80007b4 <main+0x668>)
 8000630:	f003 faaf 	bl	8003b92 <u8g2_FirstPage>
			do {
				u8g2_DrawStrX2(&u8g2, 5, 30, str);
 8000634:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000638:	221e      	movs	r2, #30
 800063a:	2105      	movs	r1, #5
 800063c:	485d      	ldr	r0, [pc, #372]	; (80007b4 <main+0x668>)
 800063e:	f003 fef7 	bl	8004430 <u8g2_DrawStrX2>
				u8g2_DrawStrX2(&u8g2, 5, 45, str2);
 8000642:	f107 0320 	add.w	r3, r7, #32
 8000646:	222d      	movs	r2, #45	; 0x2d
 8000648:	2105      	movs	r1, #5
 800064a:	485a      	ldr	r0, [pc, #360]	; (80007b4 <main+0x668>)
 800064c:	f003 fef0 	bl	8004430 <u8g2_DrawStrX2>

			} while (u8g2_NextPage(&u8g2));
 8000650:	4858      	ldr	r0, [pc, #352]	; (80007b4 <main+0x668>)
 8000652:	f003 fab2 	bl	8003bba <u8g2_NextPage>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d1eb      	bne.n	8000634 <main+0x4e8>

			pre_tick = HAL_GetTick();
 800065c:	f000 feb2 	bl	80013c4 <HAL_GetTick>
 8000660:	4603      	mov	r3, r0
 8000662:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			while ((HAL_GetTick() - pre_tick) < 1000)
 8000666:	bf00      	nop
 8000668:	f000 feac 	bl	80013c4 <HAL_GetTick>
 800066c:	4602      	mov	r2, r0
 800066e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000672:	1ad3      	subs	r3, r2, r3
 8000674:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000678:	d3f6      	bcc.n	8000668 <main+0x51c>
				;

			sprintf(str, "   -   -");
 800067a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800067e:	494e      	ldr	r1, [pc, #312]	; (80007b8 <main+0x66c>)
 8000680:	4618      	mov	r0, r3
 8000682:	f004 fef3 	bl	800546c <siprintf>
			sprintf(str2, "     _");
 8000686:	f107 0320 	add.w	r3, r7, #32
 800068a:	494c      	ldr	r1, [pc, #304]	; (80007bc <main+0x670>)
 800068c:	4618      	mov	r0, r3
 800068e:	f004 feed 	bl	800546c <siprintf>
			u8g2_FirstPage(&u8g2);
 8000692:	4848      	ldr	r0, [pc, #288]	; (80007b4 <main+0x668>)
 8000694:	f003 fa7d 	bl	8003b92 <u8g2_FirstPage>
			do {
				u8g2_DrawStrX2(&u8g2, 5, 30, str);
 8000698:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800069c:	221e      	movs	r2, #30
 800069e:	2105      	movs	r1, #5
 80006a0:	4844      	ldr	r0, [pc, #272]	; (80007b4 <main+0x668>)
 80006a2:	f003 fec5 	bl	8004430 <u8g2_DrawStrX2>
				u8g2_DrawStrX2(&u8g2, 5, 45, str2);
 80006a6:	f107 0320 	add.w	r3, r7, #32
 80006aa:	222d      	movs	r2, #45	; 0x2d
 80006ac:	2105      	movs	r1, #5
 80006ae:	4841      	ldr	r0, [pc, #260]	; (80007b4 <main+0x668>)
 80006b0:	f003 febe 	bl	8004430 <u8g2_DrawStrX2>

			} while (u8g2_NextPage(&u8g2));
 80006b4:	483f      	ldr	r0, [pc, #252]	; (80007b4 <main+0x668>)
 80006b6:	f003 fa80 	bl	8003bba <u8g2_NextPage>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d1eb      	bne.n	8000698 <main+0x54c>

			pre_tick = HAL_GetTick();
 80006c0:	f000 fe80 	bl	80013c4 <HAL_GetTick>
 80006c4:	4603      	mov	r3, r0
 80006c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			while ((HAL_GetTick() - pre_tick) < 1000)
 80006ca:	bf00      	nop
 80006cc:	f000 fe7a 	bl	80013c4 <HAL_GetTick>
 80006d0:	4602      	mov	r2, r0
 80006d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80006d6:	1ad3      	subs	r3, r2, r3
 80006d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80006dc:	d3f6      	bcc.n	80006cc <main+0x580>
 80006de:	e583      	b.n	80001e8 <main+0x9c>
				;
		} else if (state == 4) {
 80006e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80006e4:	2b04      	cmp	r3, #4
 80006e6:	f47f ad7f 	bne.w	80001e8 <main+0x9c>
			state = 1;
 80006ea:	2301      	movs	r3, #1
 80006ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

			memset(buff, 0, 55);
 80006f0:	2237      	movs	r2, #55	; 0x37
 80006f2:	2100      	movs	r1, #0
 80006f4:	4826      	ldr	r0, [pc, #152]	; (8000790 <main+0x644>)
 80006f6:	f004 feb1 	bl	800545c <memset>
			HAL_UART_Transmit(&huart2, (uint8_t*) openCommand, 6, 5000);
 80006fa:	f241 3388 	movw	r3, #5000	; 0x1388
 80006fe:	2206      	movs	r2, #6
 8000700:	4924      	ldr	r1, [pc, #144]	; (8000794 <main+0x648>)
 8000702:	4825      	ldr	r0, [pc, #148]	; (8000798 <main+0x64c>)
 8000704:	f002 fcc5 	bl	8003092 <HAL_UART_Transmit>
			pre_tick = HAL_GetTick();
 8000708:	f000 fe5c 	bl	80013c4 <HAL_GetTick>
 800070c:	4603      	mov	r3, r0
 800070e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			while ((HAL_GetTick() - pre_tick) < 1000)
 8000712:	bf00      	nop
 8000714:	f000 fe56 	bl	80013c4 <HAL_GetTick>
 8000718:	4602      	mov	r2, r0
 800071a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800071e:	1ad3      	subs	r3, r2, r3
 8000720:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000724:	d3f6      	bcc.n	8000714 <main+0x5c8>
				;

			uint8_t num = uart_available(&uart_rx);
 8000726:	481d      	ldr	r0, [pc, #116]	; (800079c <main+0x650>)
 8000728:	f000 fd80 	bl	800122c <uart_available>
 800072c:	4603      	mov	r3, r0
 800072e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

			uint8_t i;

			for (i = 0; i < num; i++) {
 8000732:	2300      	movs	r3, #0
 8000734:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
 8000738:	e016      	b.n	8000768 <main+0x61c>
				int ch = pop(&uart_rx);
 800073a:	4818      	ldr	r0, [pc, #96]	; (800079c <main+0x650>)
 800073c:	f000 fd44 	bl	80011c8 <pop>
 8000740:	4603      	mov	r3, r0
 8000742:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				if (ch != -1) {
 8000746:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800074a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800074e:	d006      	beq.n	800075e <main+0x612>
					buff[i] = ch;
 8000750:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8000754:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000758:	b2d1      	uxtb	r1, r2
 800075a:	4a0d      	ldr	r2, [pc, #52]	; (8000790 <main+0x644>)
 800075c:	54d1      	strb	r1, [r2, r3]
			for (i = 0; i < num; i++) {
 800075e:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8000762:	3301      	adds	r3, #1
 8000764:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
 8000768:	f897 208c 	ldrb.w	r2, [r7, #140]	; 0x8c
 800076c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000770:	429a      	cmp	r2, r3
 8000772:	d3e2      	bcc.n	800073a <main+0x5ee>
				}
			}
			btnFlag = 0;
 8000774:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <main+0x674>)
 8000776:	2200      	movs	r2, #0
 8000778:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, buff, num, 500);
 800077a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800077e:	b29a      	uxth	r2, r3
 8000780:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000784:	4902      	ldr	r1, [pc, #8]	; (8000790 <main+0x644>)
 8000786:	4807      	ldr	r0, [pc, #28]	; (80007a4 <main+0x658>)
 8000788:	f002 fc83 	bl	8003092 <HAL_UART_Transmit>
		if (timerFlag == 1) {
 800078c:	e52c      	b.n	80001e8 <main+0x9c>
 800078e:	bf00      	nop
 8000790:	20000210 	.word	0x20000210
 8000794:	20000010 	.word	0x20000010
 8000798:	20000188 	.word	0x20000188
 800079c:	200002e4 	.word	0x200002e4
 80007a0:	20000249 	.word	0x20000249
 80007a4:	200001cc 	.word	0x200001cc
 80007a8:	20000008 	.word	0x20000008
 80007ac:	08005dd4 	.word	0x08005dd4
 80007b0:	08005de0 	.word	0x08005de0
 80007b4:	2000024c 	.word	0x2000024c
 80007b8:	08005de8 	.word	0x08005de8
 80007bc:	08005df4 	.word	0x08005df4
 80007c0:	20000248 	.word	0x20000248

080007c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b090      	sub	sp, #64	; 0x40
 80007c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ca:	f107 0318 	add.w	r3, r7, #24
 80007ce:	2228      	movs	r2, #40	; 0x28
 80007d0:	2100      	movs	r1, #0
 80007d2:	4618      	mov	r0, r3
 80007d4:	f004 fe42 	bl	800545c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d8:	1d3b      	adds	r3, r7, #4
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]
 80007e4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007e6:	2301      	movs	r3, #1
 80007e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80007f0:	2300      	movs	r3, #0
 80007f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007f4:	2301      	movs	r3, #1
 80007f6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f8:	2302      	movs	r3, #2
 80007fa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000800:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000802:	2300      	movs	r3, #0
 8000804:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000806:	f107 0318 	add.w	r3, r7, #24
 800080a:	4618      	mov	r0, r3
 800080c:	f001 f97a 	bl	8001b04 <HAL_RCC_OscConfig>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <SystemClock_Config+0x56>
  {
    Error_Handler();
 8000816:	f000 f9e1 	bl	8000bdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800081a:	230f      	movs	r3, #15
 800081c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800081e:	2302      	movs	r3, #2
 8000820:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000822:	2380      	movs	r3, #128	; 0x80
 8000824:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000826:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800082a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800082c:	2300      	movs	r3, #0
 800082e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000830:	1d3b      	adds	r3, r7, #4
 8000832:	2100      	movs	r1, #0
 8000834:	4618      	mov	r0, r3
 8000836:	f001 fbe7 	bl	8002008 <HAL_RCC_ClockConfig>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000840:	f000 f9cc 	bl	8000bdc <Error_Handler>
  }
}
 8000844:	bf00      	nop
 8000846:	3740      	adds	r7, #64	; 0x40
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}

0800084c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000850:	2200      	movs	r2, #0
 8000852:	2100      	movs	r1, #0
 8000854:	2026      	movs	r0, #38	; 0x26
 8000856:	f000 feba 	bl	80015ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 800085a:	2026      	movs	r0, #38	; 0x26
 800085c:	f000 fed3 	bl	8001606 <HAL_NVIC_EnableIRQ>
  /* EXTI0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000860:	2200      	movs	r2, #0
 8000862:	2100      	movs	r1, #0
 8000864:	2006      	movs	r0, #6
 8000866:	f000 feb2 	bl	80015ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800086a:	2006      	movs	r0, #6
 800086c:	f000 fecb 	bl	8001606 <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000870:	2200      	movs	r2, #0
 8000872:	2100      	movs	r1, #0
 8000874:	201c      	movs	r0, #28
 8000876:	f000 feaa 	bl	80015ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800087a:	201c      	movs	r0, #28
 800087c:	f000 fec3 	bl	8001606 <HAL_NVIC_EnableIRQ>
}
 8000880:	bf00      	nop
 8000882:	bd80      	pop	{r7, pc}

08000884 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000888:	4b17      	ldr	r3, [pc, #92]	; (80008e8 <MX_SPI1_Init+0x64>)
 800088a:	4a18      	ldr	r2, [pc, #96]	; (80008ec <MX_SPI1_Init+0x68>)
 800088c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800088e:	4b16      	ldr	r3, [pc, #88]	; (80008e8 <MX_SPI1_Init+0x64>)
 8000890:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000894:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000896:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <MX_SPI1_Init+0x64>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800089c:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <MX_SPI1_Init+0x64>)
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008a2:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <MX_SPI1_Init+0x64>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008a8:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <MX_SPI1_Init+0x64>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008ae:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <MX_SPI1_Init+0x64>)
 80008b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008b4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008b6:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <MX_SPI1_Init+0x64>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008bc:	4b0a      	ldr	r3, [pc, #40]	; (80008e8 <MX_SPI1_Init+0x64>)
 80008be:	2200      	movs	r2, #0
 80008c0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008c2:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <MX_SPI1_Init+0x64>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008c8:	4b07      	ldr	r3, [pc, #28]	; (80008e8 <MX_SPI1_Init+0x64>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008ce:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <MX_SPI1_Init+0x64>)
 80008d0:	220a      	movs	r2, #10
 80008d2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008d4:	4804      	ldr	r0, [pc, #16]	; (80008e8 <MX_SPI1_Init+0x64>)
 80008d6:	f001 fd2f 	bl	8002338 <HAL_SPI_Init>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80008e0:	f000 f97c 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008e4:	bf00      	nop
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	200000a4 	.word	0x200000a4
 80008ec:	40013000 	.word	0x40013000

080008f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b086      	sub	sp, #24
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008f6:	f107 0308 	add.w	r3, r7, #8
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]
 8000900:	609a      	str	r2, [r3, #8]
 8000902:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000904:	463b      	mov	r3, r7
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800090c:	4b1e      	ldr	r3, [pc, #120]	; (8000988 <MX_TIM2_Init+0x98>)
 800090e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000912:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47999;
 8000914:	4b1c      	ldr	r3, [pc, #112]	; (8000988 <MX_TIM2_Init+0x98>)
 8000916:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 800091a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800091c:	4b1a      	ldr	r3, [pc, #104]	; (8000988 <MX_TIM2_Init+0x98>)
 800091e:	2200      	movs	r2, #0
 8000920:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8000922:	4b19      	ldr	r3, [pc, #100]	; (8000988 <MX_TIM2_Init+0x98>)
 8000924:	f242 720f 	movw	r2, #9999	; 0x270f
 8000928:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800092a:	4b17      	ldr	r3, [pc, #92]	; (8000988 <MX_TIM2_Init+0x98>)
 800092c:	2200      	movs	r2, #0
 800092e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000930:	4b15      	ldr	r3, [pc, #84]	; (8000988 <MX_TIM2_Init+0x98>)
 8000932:	2200      	movs	r2, #0
 8000934:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000936:	4814      	ldr	r0, [pc, #80]	; (8000988 <MX_TIM2_Init+0x98>)
 8000938:	f001 ff64 	bl	8002804 <HAL_TIM_Base_Init>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000942:	f000 f94b 	bl	8000bdc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000946:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800094a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800094c:	f107 0308 	add.w	r3, r7, #8
 8000950:	4619      	mov	r1, r3
 8000952:	480d      	ldr	r0, [pc, #52]	; (8000988 <MX_TIM2_Init+0x98>)
 8000954:	f002 f900 	bl	8002b58 <HAL_TIM_ConfigClockSource>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800095e:	f000 f93d 	bl	8000bdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000962:	2300      	movs	r3, #0
 8000964:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000966:	2300      	movs	r3, #0
 8000968:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800096a:	463b      	mov	r3, r7
 800096c:	4619      	mov	r1, r3
 800096e:	4806      	ldr	r0, [pc, #24]	; (8000988 <MX_TIM2_Init+0x98>)
 8000970:	f002 fad2 	bl	8002f18 <HAL_TIMEx_MasterConfigSynchronization>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800097a:	f000 f92f 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800097e:	bf00      	nop
 8000980:	3718      	adds	r7, #24
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	200000fc 	.word	0x200000fc

0800098c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000990:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <MX_USART1_UART_Init+0x4c>)
 8000992:	4a12      	ldr	r2, [pc, #72]	; (80009dc <MX_USART1_UART_Init+0x50>)
 8000994:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000996:	4b10      	ldr	r3, [pc, #64]	; (80009d8 <MX_USART1_UART_Init+0x4c>)
 8000998:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800099c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800099e:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <MX_USART1_UART_Init+0x4c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009a4:	4b0c      	ldr	r3, [pc, #48]	; (80009d8 <MX_USART1_UART_Init+0x4c>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009aa:	4b0b      	ldr	r3, [pc, #44]	; (80009d8 <MX_USART1_UART_Init+0x4c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009b0:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <MX_USART1_UART_Init+0x4c>)
 80009b2:	220c      	movs	r2, #12
 80009b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009b6:	4b08      	ldr	r3, [pc, #32]	; (80009d8 <MX_USART1_UART_Init+0x4c>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009bc:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <MX_USART1_UART_Init+0x4c>)
 80009be:	2200      	movs	r2, #0
 80009c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009c2:	4805      	ldr	r0, [pc, #20]	; (80009d8 <MX_USART1_UART_Init+0x4c>)
 80009c4:	f002 fb18 	bl	8002ff8 <HAL_UART_Init>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009ce:	f000 f905 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	20000144 	.word	0x20000144
 80009dc:	40013800 	.word	0x40013800

080009e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009e4:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <MX_USART2_UART_Init+0x4c>)
 80009e6:	4a12      	ldr	r2, [pc, #72]	; (8000a30 <MX_USART2_UART_Init+0x50>)
 80009e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80009ea:	4b10      	ldr	r3, [pc, #64]	; (8000a2c <MX_USART2_UART_Init+0x4c>)
 80009ec:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80009f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009f2:	4b0e      	ldr	r3, [pc, #56]	; (8000a2c <MX_USART2_UART_Init+0x4c>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009f8:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <MX_USART2_UART_Init+0x4c>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009fe:	4b0b      	ldr	r3, [pc, #44]	; (8000a2c <MX_USART2_UART_Init+0x4c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a04:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <MX_USART2_UART_Init+0x4c>)
 8000a06:	220c      	movs	r2, #12
 8000a08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a0a:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <MX_USART2_UART_Init+0x4c>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a10:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <MX_USART2_UART_Init+0x4c>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a16:	4805      	ldr	r0, [pc, #20]	; (8000a2c <MX_USART2_UART_Init+0x4c>)
 8000a18:	f002 faee 	bl	8002ff8 <HAL_UART_Init>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a22:	f000 f8db 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	20000188 	.word	0x20000188
 8000a30:	40004400 	.word	0x40004400

08000a34 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a38:	4b11      	ldr	r3, [pc, #68]	; (8000a80 <MX_USART3_UART_Init+0x4c>)
 8000a3a:	4a12      	ldr	r2, [pc, #72]	; (8000a84 <MX_USART3_UART_Init+0x50>)
 8000a3c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000a3e:	4b10      	ldr	r3, [pc, #64]	; (8000a80 <MX_USART3_UART_Init+0x4c>)
 8000a40:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a44:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a46:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <MX_USART3_UART_Init+0x4c>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <MX_USART3_UART_Init+0x4c>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a52:	4b0b      	ldr	r3, [pc, #44]	; (8000a80 <MX_USART3_UART_Init+0x4c>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a58:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <MX_USART3_UART_Init+0x4c>)
 8000a5a:	220c      	movs	r2, #12
 8000a5c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a5e:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <MX_USART3_UART_Init+0x4c>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a64:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <MX_USART3_UART_Init+0x4c>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a6a:	4805      	ldr	r0, [pc, #20]	; (8000a80 <MX_USART3_UART_Init+0x4c>)
 8000a6c:	f002 fac4 	bl	8002ff8 <HAL_UART_Init>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000a76:	f000 f8b1 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	200001cc 	.word	0x200001cc
 8000a84:	40004800 	.word	0x40004800

08000a88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b088      	sub	sp, #32
 8000a8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8e:	f107 0310 	add.w	r3, r7, #16
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	609a      	str	r2, [r3, #8]
 8000a9a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a9c:	4b37      	ldr	r3, [pc, #220]	; (8000b7c <MX_GPIO_Init+0xf4>)
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	4a36      	ldr	r2, [pc, #216]	; (8000b7c <MX_GPIO_Init+0xf4>)
 8000aa2:	f043 0320 	orr.w	r3, r3, #32
 8000aa6:	6193      	str	r3, [r2, #24]
 8000aa8:	4b34      	ldr	r3, [pc, #208]	; (8000b7c <MX_GPIO_Init+0xf4>)
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	f003 0320 	and.w	r3, r3, #32
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab4:	4b31      	ldr	r3, [pc, #196]	; (8000b7c <MX_GPIO_Init+0xf4>)
 8000ab6:	699b      	ldr	r3, [r3, #24]
 8000ab8:	4a30      	ldr	r2, [pc, #192]	; (8000b7c <MX_GPIO_Init+0xf4>)
 8000aba:	f043 0304 	orr.w	r3, r3, #4
 8000abe:	6193      	str	r3, [r2, #24]
 8000ac0:	4b2e      	ldr	r3, [pc, #184]	; (8000b7c <MX_GPIO_Init+0xf4>)
 8000ac2:	699b      	ldr	r3, [r3, #24]
 8000ac4:	f003 0304 	and.w	r3, r3, #4
 8000ac8:	60bb      	str	r3, [r7, #8]
 8000aca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000acc:	4b2b      	ldr	r3, [pc, #172]	; (8000b7c <MX_GPIO_Init+0xf4>)
 8000ace:	699b      	ldr	r3, [r3, #24]
 8000ad0:	4a2a      	ldr	r2, [pc, #168]	; (8000b7c <MX_GPIO_Init+0xf4>)
 8000ad2:	f043 0308 	orr.w	r3, r3, #8
 8000ad6:	6193      	str	r3, [r2, #24]
 8000ad8:	4b28      	ldr	r3, [pc, #160]	; (8000b7c <MX_GPIO_Init+0xf4>)
 8000ada:	699b      	ldr	r3, [r3, #24]
 8000adc:	f003 0308 	and.w	r3, r3, #8
 8000ae0:	607b      	str	r3, [r7, #4]
 8000ae2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OLED_RST_Pin|OLED_DC_Pin, GPIO_PIN_SET);
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	2150      	movs	r1, #80	; 0x50
 8000ae8:	4825      	ldr	r0, [pc, #148]	; (8000b80 <MX_GPIO_Init+0xf8>)
 8000aea:	f000 ffdb 	bl	8001aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_SET);
 8000aee:	2201      	movs	r2, #1
 8000af0:	2101      	movs	r1, #1
 8000af2:	4824      	ldr	r0, [pc, #144]	; (8000b84 <MX_GPIO_Init+0xfc>)
 8000af4:	f000 ffd6 	bl	8001aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000af8:	2200      	movs	r2, #0
 8000afa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000afe:	4821      	ldr	r0, [pc, #132]	; (8000b84 <MX_GPIO_Init+0xfc>)
 8000b00:	f000 ffd0 	bl	8001aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : btn0_Pin */
  GPIO_InitStruct.Pin = btn0_Pin;
 8000b04:	2301      	movs	r3, #1
 8000b06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b08:	4b1f      	ldr	r3, [pc, #124]	; (8000b88 <MX_GPIO_Init+0x100>)
 8000b0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(btn0_GPIO_Port, &GPIO_InitStruct);
 8000b10:	f107 0310 	add.w	r3, r7, #16
 8000b14:	4619      	mov	r1, r3
 8000b16:	481a      	ldr	r0, [pc, #104]	; (8000b80 <MX_GPIO_Init+0xf8>)
 8000b18:	f000 fe40 	bl	800179c <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_RST_Pin OLED_DC_Pin */
  GPIO_InitStruct.Pin = OLED_RST_Pin|OLED_DC_Pin;
 8000b1c:	2350      	movs	r3, #80	; 0x50
 8000b1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b20:	2301      	movs	r3, #1
 8000b22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b24:	2301      	movs	r3, #1
 8000b26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b28:	2303      	movs	r3, #3
 8000b2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2c:	f107 0310 	add.w	r3, r7, #16
 8000b30:	4619      	mov	r1, r3
 8000b32:	4813      	ldr	r0, [pc, #76]	; (8000b80 <MX_GPIO_Init+0xf8>)
 8000b34:	f000 fe32 	bl	800179c <HAL_GPIO_Init>

  /*Configure GPIO pin : OLED_CS_Pin */
  GPIO_InitStruct.Pin = OLED_CS_Pin;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b40:	2301      	movs	r3, #1
 8000b42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b44:	2303      	movs	r3, #3
 8000b46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OLED_CS_GPIO_Port, &GPIO_InitStruct);
 8000b48:	f107 0310 	add.w	r3, r7, #16
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	480d      	ldr	r0, [pc, #52]	; (8000b84 <MX_GPIO_Init+0xfc>)
 8000b50:	f000 fe24 	bl	800179c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000b54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b62:	2302      	movs	r3, #2
 8000b64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b66:	f107 0310 	add.w	r3, r7, #16
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4805      	ldr	r0, [pc, #20]	; (8000b84 <MX_GPIO_Init+0xfc>)
 8000b6e:	f000 fe15 	bl	800179c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b72:	bf00      	nop
 8000b74:	3720      	adds	r7, #32
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40021000 	.word	0x40021000
 8000b80:	40010800 	.word	0x40010800
 8000b84:	40010c00 	.word	0x40010c00
 8000b88:	10210000 	.word	0x10210000

08000b8c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
//GPIO PIN OUTPUT HIGH
	if (htim->Instance == htim2.Instance) {
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	4b05      	ldr	r3, [pc, #20]	; (8000bb0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	d102      	bne.n	8000ba6 <HAL_TIM_PeriodElapsedCallback+0x1a>
		timerFlag = 1;
 8000ba0:	4b04      	ldr	r3, [pc, #16]	; (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	701a      	strb	r2, [r3, #0]

	}
}
 8000ba6:	bf00      	nop
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bc80      	pop	{r7}
 8000bae:	4770      	bx	lr
 8000bb0:	200000fc 	.word	0x200000fc
 8000bb4:	20000249 	.word	0x20000249

08000bb8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == btn0_Pin) {
 8000bc2:	88fb      	ldrh	r3, [r7, #6]
 8000bc4:	2b01      	cmp	r3, #1
 8000bc6:	d102      	bne.n	8000bce <HAL_GPIO_EXTI_Callback+0x16>

		btnFlag = 1;
 8000bc8:	4b03      	ldr	r3, [pc, #12]	; (8000bd8 <HAL_GPIO_EXTI_Callback+0x20>)
 8000bca:	2201      	movs	r2, #1
 8000bcc:	701a      	strb	r2, [r3, #0]

	}
}
 8000bce:	bf00      	nop
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bc80      	pop	{r7}
 8000bd6:	4770      	bx	lr
 8000bd8:	20000248 	.word	0x20000248

08000bdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be0:	b672      	cpsid	i
}
 8000be2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000be4:	e7fe      	b.n	8000be4 <Error_Handler+0x8>
	...

08000be8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b085      	sub	sp, #20
 8000bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bee:	4b15      	ldr	r3, [pc, #84]	; (8000c44 <HAL_MspInit+0x5c>)
 8000bf0:	699b      	ldr	r3, [r3, #24]
 8000bf2:	4a14      	ldr	r2, [pc, #80]	; (8000c44 <HAL_MspInit+0x5c>)
 8000bf4:	f043 0301 	orr.w	r3, r3, #1
 8000bf8:	6193      	str	r3, [r2, #24]
 8000bfa:	4b12      	ldr	r3, [pc, #72]	; (8000c44 <HAL_MspInit+0x5c>)
 8000bfc:	699b      	ldr	r3, [r3, #24]
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	60bb      	str	r3, [r7, #8]
 8000c04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c06:	4b0f      	ldr	r3, [pc, #60]	; (8000c44 <HAL_MspInit+0x5c>)
 8000c08:	69db      	ldr	r3, [r3, #28]
 8000c0a:	4a0e      	ldr	r2, [pc, #56]	; (8000c44 <HAL_MspInit+0x5c>)
 8000c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c10:	61d3      	str	r3, [r2, #28]
 8000c12:	4b0c      	ldr	r3, [pc, #48]	; (8000c44 <HAL_MspInit+0x5c>)
 8000c14:	69db      	ldr	r3, [r3, #28]
 8000c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c1a:	607b      	str	r3, [r7, #4]
 8000c1c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c1e:	4b0a      	ldr	r3, [pc, #40]	; (8000c48 <HAL_MspInit+0x60>)
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	4a04      	ldr	r2, [pc, #16]	; (8000c48 <HAL_MspInit+0x60>)
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	3714      	adds	r7, #20
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bc80      	pop	{r7}
 8000c42:	4770      	bx	lr
 8000c44:	40021000 	.word	0x40021000
 8000c48:	40010000 	.word	0x40010000

08000c4c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b088      	sub	sp, #32
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c54:	f107 0310 	add.w	r3, r7, #16
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a15      	ldr	r2, [pc, #84]	; (8000cbc <HAL_SPI_MspInit+0x70>)
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d123      	bne.n	8000cb4 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c6c:	4b14      	ldr	r3, [pc, #80]	; (8000cc0 <HAL_SPI_MspInit+0x74>)
 8000c6e:	699b      	ldr	r3, [r3, #24]
 8000c70:	4a13      	ldr	r2, [pc, #76]	; (8000cc0 <HAL_SPI_MspInit+0x74>)
 8000c72:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c76:	6193      	str	r3, [r2, #24]
 8000c78:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <HAL_SPI_MspInit+0x74>)
 8000c7a:	699b      	ldr	r3, [r3, #24]
 8000c7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c80:	60fb      	str	r3, [r7, #12]
 8000c82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c84:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <HAL_SPI_MspInit+0x74>)
 8000c86:	699b      	ldr	r3, [r3, #24]
 8000c88:	4a0d      	ldr	r2, [pc, #52]	; (8000cc0 <HAL_SPI_MspInit+0x74>)
 8000c8a:	f043 0304 	orr.w	r3, r3, #4
 8000c8e:	6193      	str	r3, [r2, #24]
 8000c90:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <HAL_SPI_MspInit+0x74>)
 8000c92:	699b      	ldr	r3, [r3, #24]
 8000c94:	f003 0304 	and.w	r3, r3, #4
 8000c98:	60bb      	str	r3, [r7, #8]
 8000c9a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000c9c:	23a0      	movs	r3, #160	; 0xa0
 8000c9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ca4:	2303      	movs	r3, #3
 8000ca6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca8:	f107 0310 	add.w	r3, r7, #16
 8000cac:	4619      	mov	r1, r3
 8000cae:	4805      	ldr	r0, [pc, #20]	; (8000cc4 <HAL_SPI_MspInit+0x78>)
 8000cb0:	f000 fd74 	bl	800179c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000cb4:	bf00      	nop
 8000cb6:	3720      	adds	r7, #32
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	40013000 	.word	0x40013000
 8000cc0:	40021000 	.word	0x40021000
 8000cc4:	40010800 	.word	0x40010800

08000cc8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b085      	sub	sp, #20
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cd8:	d10b      	bne.n	8000cf2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cda:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <HAL_TIM_Base_MspInit+0x34>)
 8000cdc:	69db      	ldr	r3, [r3, #28]
 8000cde:	4a07      	ldr	r2, [pc, #28]	; (8000cfc <HAL_TIM_Base_MspInit+0x34>)
 8000ce0:	f043 0301 	orr.w	r3, r3, #1
 8000ce4:	61d3      	str	r3, [r2, #28]
 8000ce6:	4b05      	ldr	r3, [pc, #20]	; (8000cfc <HAL_TIM_Base_MspInit+0x34>)
 8000ce8:	69db      	ldr	r3, [r3, #28]
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000cf2:	bf00      	nop
 8000cf4:	3714      	adds	r7, #20
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bc80      	pop	{r7}
 8000cfa:	4770      	bx	lr
 8000cfc:	40021000 	.word	0x40021000

08000d00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08c      	sub	sp, #48	; 0x30
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d08:	f107 0320 	add.w	r3, r7, #32
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]
 8000d14:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4a53      	ldr	r2, [pc, #332]	; (8000e68 <HAL_UART_MspInit+0x168>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d132      	bne.n	8000d86 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d20:	4b52      	ldr	r3, [pc, #328]	; (8000e6c <HAL_UART_MspInit+0x16c>)
 8000d22:	699b      	ldr	r3, [r3, #24]
 8000d24:	4a51      	ldr	r2, [pc, #324]	; (8000e6c <HAL_UART_MspInit+0x16c>)
 8000d26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d2a:	6193      	str	r3, [r2, #24]
 8000d2c:	4b4f      	ldr	r3, [pc, #316]	; (8000e6c <HAL_UART_MspInit+0x16c>)
 8000d2e:	699b      	ldr	r3, [r3, #24]
 8000d30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d34:	61fb      	str	r3, [r7, #28]
 8000d36:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d38:	4b4c      	ldr	r3, [pc, #304]	; (8000e6c <HAL_UART_MspInit+0x16c>)
 8000d3a:	699b      	ldr	r3, [r3, #24]
 8000d3c:	4a4b      	ldr	r2, [pc, #300]	; (8000e6c <HAL_UART_MspInit+0x16c>)
 8000d3e:	f043 0304 	orr.w	r3, r3, #4
 8000d42:	6193      	str	r3, [r2, #24]
 8000d44:	4b49      	ldr	r3, [pc, #292]	; (8000e6c <HAL_UART_MspInit+0x16c>)
 8000d46:	699b      	ldr	r3, [r3, #24]
 8000d48:	f003 0304 	and.w	r3, r3, #4
 8000d4c:	61bb      	str	r3, [r7, #24]
 8000d4e:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d56:	2302      	movs	r3, #2
 8000d58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d5a:	2303      	movs	r3, #3
 8000d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d5e:	f107 0320 	add.w	r3, r7, #32
 8000d62:	4619      	mov	r1, r3
 8000d64:	4842      	ldr	r0, [pc, #264]	; (8000e70 <HAL_UART_MspInit+0x170>)
 8000d66:	f000 fd19 	bl	800179c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d70:	2300      	movs	r3, #0
 8000d72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d78:	f107 0320 	add.w	r3, r7, #32
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	483c      	ldr	r0, [pc, #240]	; (8000e70 <HAL_UART_MspInit+0x170>)
 8000d80:	f000 fd0c 	bl	800179c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d84:	e06c      	b.n	8000e60 <HAL_UART_MspInit+0x160>
  else if(huart->Instance==USART2)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a3a      	ldr	r2, [pc, #232]	; (8000e74 <HAL_UART_MspInit+0x174>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d130      	bne.n	8000df2 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d90:	4b36      	ldr	r3, [pc, #216]	; (8000e6c <HAL_UART_MspInit+0x16c>)
 8000d92:	69db      	ldr	r3, [r3, #28]
 8000d94:	4a35      	ldr	r2, [pc, #212]	; (8000e6c <HAL_UART_MspInit+0x16c>)
 8000d96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d9a:	61d3      	str	r3, [r2, #28]
 8000d9c:	4b33      	ldr	r3, [pc, #204]	; (8000e6c <HAL_UART_MspInit+0x16c>)
 8000d9e:	69db      	ldr	r3, [r3, #28]
 8000da0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000da4:	617b      	str	r3, [r7, #20]
 8000da6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da8:	4b30      	ldr	r3, [pc, #192]	; (8000e6c <HAL_UART_MspInit+0x16c>)
 8000daa:	699b      	ldr	r3, [r3, #24]
 8000dac:	4a2f      	ldr	r2, [pc, #188]	; (8000e6c <HAL_UART_MspInit+0x16c>)
 8000dae:	f043 0304 	orr.w	r3, r3, #4
 8000db2:	6193      	str	r3, [r2, #24]
 8000db4:	4b2d      	ldr	r3, [pc, #180]	; (8000e6c <HAL_UART_MspInit+0x16c>)
 8000db6:	699b      	ldr	r3, [r3, #24]
 8000db8:	f003 0304 	and.w	r3, r3, #4
 8000dbc:	613b      	str	r3, [r7, #16]
 8000dbe:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000dc0:	2304      	movs	r3, #4
 8000dc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dc8:	2303      	movs	r3, #3
 8000dca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dcc:	f107 0320 	add.w	r3, r7, #32
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4827      	ldr	r0, [pc, #156]	; (8000e70 <HAL_UART_MspInit+0x170>)
 8000dd4:	f000 fce2 	bl	800179c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000dd8:	2308      	movs	r3, #8
 8000dda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de4:	f107 0320 	add.w	r3, r7, #32
 8000de8:	4619      	mov	r1, r3
 8000dea:	4821      	ldr	r0, [pc, #132]	; (8000e70 <HAL_UART_MspInit+0x170>)
 8000dec:	f000 fcd6 	bl	800179c <HAL_GPIO_Init>
}
 8000df0:	e036      	b.n	8000e60 <HAL_UART_MspInit+0x160>
  else if(huart->Instance==USART3)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a20      	ldr	r2, [pc, #128]	; (8000e78 <HAL_UART_MspInit+0x178>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d131      	bne.n	8000e60 <HAL_UART_MspInit+0x160>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000dfc:	4b1b      	ldr	r3, [pc, #108]	; (8000e6c <HAL_UART_MspInit+0x16c>)
 8000dfe:	69db      	ldr	r3, [r3, #28]
 8000e00:	4a1a      	ldr	r2, [pc, #104]	; (8000e6c <HAL_UART_MspInit+0x16c>)
 8000e02:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e06:	61d3      	str	r3, [r2, #28]
 8000e08:	4b18      	ldr	r3, [pc, #96]	; (8000e6c <HAL_UART_MspInit+0x16c>)
 8000e0a:	69db      	ldr	r3, [r3, #28]
 8000e0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e10:	60fb      	str	r3, [r7, #12]
 8000e12:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e14:	4b15      	ldr	r3, [pc, #84]	; (8000e6c <HAL_UART_MspInit+0x16c>)
 8000e16:	699b      	ldr	r3, [r3, #24]
 8000e18:	4a14      	ldr	r2, [pc, #80]	; (8000e6c <HAL_UART_MspInit+0x16c>)
 8000e1a:	f043 0308 	orr.w	r3, r3, #8
 8000e1e:	6193      	str	r3, [r2, #24]
 8000e20:	4b12      	ldr	r3, [pc, #72]	; (8000e6c <HAL_UART_MspInit+0x16c>)
 8000e22:	699b      	ldr	r3, [r3, #24]
 8000e24:	f003 0308 	and.w	r3, r3, #8
 8000e28:	60bb      	str	r3, [r7, #8]
 8000e2a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e32:	2302      	movs	r3, #2
 8000e34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e36:	2303      	movs	r3, #3
 8000e38:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e3a:	f107 0320 	add.w	r3, r7, #32
 8000e3e:	4619      	mov	r1, r3
 8000e40:	480e      	ldr	r0, [pc, #56]	; (8000e7c <HAL_UART_MspInit+0x17c>)
 8000e42:	f000 fcab 	bl	800179c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000e46:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e54:	f107 0320 	add.w	r3, r7, #32
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4808      	ldr	r0, [pc, #32]	; (8000e7c <HAL_UART_MspInit+0x17c>)
 8000e5c:	f000 fc9e 	bl	800179c <HAL_GPIO_Init>
}
 8000e60:	bf00      	nop
 8000e62:	3730      	adds	r7, #48	; 0x30
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	40013800 	.word	0x40013800
 8000e6c:	40021000 	.word	0x40021000
 8000e70:	40010800 	.word	0x40010800
 8000e74:	40004400 	.word	0x40004400
 8000e78:	40004800 	.word	0x40004800
 8000e7c:	40010c00 	.word	0x40010c00

08000e80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e84:	e7fe      	b.n	8000e84 <NMI_Handler+0x4>

08000e86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e8a:	e7fe      	b.n	8000e8a <HardFault_Handler+0x4>

08000e8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e90:	e7fe      	b.n	8000e90 <MemManage_Handler+0x4>

08000e92 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e96:	e7fe      	b.n	8000e96 <BusFault_Handler+0x4>

08000e98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e9c:	e7fe      	b.n	8000e9c <UsageFault_Handler+0x4>

08000e9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bc80      	pop	{r7}
 8000ea8:	4770      	bx	lr

08000eaa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bc80      	pop	{r7}
 8000eb4:	4770      	bx	lr

08000eb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bc80      	pop	{r7}
 8000ec0:	4770      	bx	lr

08000ec2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ec6:	f000 fa6b 	bl	80013a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(btn0_Pin);
 8000ed2:	2001      	movs	r0, #1
 8000ed4:	f000 fdfe 	bl	8001ad4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000ed8:	bf00      	nop
 8000eda:	bd80      	pop	{r7, pc}

08000edc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ee0:	4802      	ldr	r0, [pc, #8]	; (8000eec <TIM2_IRQHandler+0x10>)
 8000ee2:	f001 fd31 	bl	8002948 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	200000fc 	.word	0x200000fc

08000ef0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
Uart_isr(&huart2);
 8000ef4:	4803      	ldr	r0, [pc, #12]	; (8000f04 <USART2_IRQHandler+0x14>)
 8000ef6:	f000 f9bf 	bl	8001278 <Uart_isr>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000efa:	4802      	ldr	r0, [pc, #8]	; (8000f04 <USART2_IRQHandler+0x14>)
 8000efc:	f002 f98c 	bl	8003218 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f00:	bf00      	nop
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20000188 	.word	0x20000188

08000f08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b086      	sub	sp, #24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f10:	4a14      	ldr	r2, [pc, #80]	; (8000f64 <_sbrk+0x5c>)
 8000f12:	4b15      	ldr	r3, [pc, #84]	; (8000f68 <_sbrk+0x60>)
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f1c:	4b13      	ldr	r3, [pc, #76]	; (8000f6c <_sbrk+0x64>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d102      	bne.n	8000f2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f24:	4b11      	ldr	r3, [pc, #68]	; (8000f6c <_sbrk+0x64>)
 8000f26:	4a12      	ldr	r2, [pc, #72]	; (8000f70 <_sbrk+0x68>)
 8000f28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f2a:	4b10      	ldr	r3, [pc, #64]	; (8000f6c <_sbrk+0x64>)
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4413      	add	r3, r2
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d207      	bcs.n	8000f48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f38:	f004 fa66 	bl	8005408 <__errno>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	220c      	movs	r2, #12
 8000f40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f42:	f04f 33ff 	mov.w	r3, #4294967295
 8000f46:	e009      	b.n	8000f5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f48:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <_sbrk+0x64>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f4e:	4b07      	ldr	r3, [pc, #28]	; (8000f6c <_sbrk+0x64>)
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4413      	add	r3, r2
 8000f56:	4a05      	ldr	r2, [pc, #20]	; (8000f6c <_sbrk+0x64>)
 8000f58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f5a:	68fb      	ldr	r3, [r7, #12]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3718      	adds	r7, #24
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20005000 	.word	0x20005000
 8000f68:	00000400 	.word	0x00000400
 8000f6c:	200002e0 	.word	0x200002e0
 8000f70:	20000738 	.word	0x20000738

08000f74 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bc80      	pop	{r7}
 8000f7e:	4770      	bx	lr

08000f80 <u8x8_stm32_gpio_and_delay>:
#define TX_TIMEOUT		100

extern SPI_HandleTypeDef hspi1;

uint8_t u8x8_stm32_gpio_and_delay(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	60f8      	str	r0, [r7, #12]
 8000f88:	607b      	str	r3, [r7, #4]
 8000f8a:	460b      	mov	r3, r1
 8000f8c:	72fb      	strb	r3, [r7, #11]
 8000f8e:	4613      	mov	r3, r2
 8000f90:	72bb      	strb	r3, [r7, #10]
	/* STM32 supports HW SPI, Remove unused cases like U8X8_MSG_DELAY_XXX & U8X8_MSG_GPIO_XXX */
	switch(msg)
 8000f92:	7afb      	ldrb	r3, [r7, #11]
 8000f94:	3b28      	subs	r3, #40	; 0x28
 8000f96:	2b23      	cmp	r3, #35	; 0x23
 8000f98:	d864      	bhi.n	8001064 <u8x8_stm32_gpio_and_delay+0xe4>
 8000f9a:	a201      	add	r2, pc, #4	; (adr r2, 8000fa0 <u8x8_stm32_gpio_and_delay+0x20>)
 8000f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fa0:	08001065 	.word	0x08001065
 8000fa4:	08001031 	.word	0x08001031
 8000fa8:	08001065 	.word	0x08001065
 8000fac:	08001065 	.word	0x08001065
 8000fb0:	08001065 	.word	0x08001065
 8000fb4:	08001065 	.word	0x08001065
 8000fb8:	08001065 	.word	0x08001065
 8000fbc:	08001065 	.word	0x08001065
 8000fc0:	08001065 	.word	0x08001065
 8000fc4:	08001065 	.word	0x08001065
 8000fc8:	08001065 	.word	0x08001065
 8000fcc:	08001065 	.word	0x08001065
 8000fd0:	08001065 	.word	0x08001065
 8000fd4:	08001065 	.word	0x08001065
 8000fd8:	08001065 	.word	0x08001065
 8000fdc:	08001065 	.word	0x08001065
 8000fe0:	08001065 	.word	0x08001065
 8000fe4:	08001065 	.word	0x08001065
 8000fe8:	08001065 	.word	0x08001065
 8000fec:	08001065 	.word	0x08001065
 8000ff0:	08001065 	.word	0x08001065
 8000ff4:	08001065 	.word	0x08001065
 8000ff8:	08001065 	.word	0x08001065
 8000ffc:	08001065 	.word	0x08001065
 8001000:	08001065 	.word	0x08001065
 8001004:	08001065 	.word	0x08001065
 8001008:	08001065 	.word	0x08001065
 800100c:	08001065 	.word	0x08001065
 8001010:	08001065 	.word	0x08001065
 8001014:	08001065 	.word	0x08001065
 8001018:	08001065 	.word	0x08001065
 800101c:	08001065 	.word	0x08001065
 8001020:	08001065 	.word	0x08001065
 8001024:	0800103b 	.word	0x0800103b
 8001028:	08001049 	.word	0x08001049
 800102c:	08001057 	.word	0x08001057
	case U8X8_MSG_GPIO_AND_DELAY_INIT:
		/* Insert codes for initialization */
		break;
	case U8X8_MSG_DELAY_MILLI:
		/* ms Delay */
		HAL_Delay(arg_int);
 8001030:	7abb      	ldrb	r3, [r7, #10]
 8001032:	4618      	mov	r0, r3
 8001034:	f000 f9d0 	bl	80013d8 <HAL_Delay>
		break;
 8001038:	e014      	b.n	8001064 <u8x8_stm32_gpio_and_delay+0xe4>
	case U8X8_MSG_GPIO_CS:
		/* Insert codes for SS pin control */
		HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, arg_int);
 800103a:	7abb      	ldrb	r3, [r7, #10]
 800103c:	461a      	mov	r2, r3
 800103e:	2101      	movs	r1, #1
 8001040:	480b      	ldr	r0, [pc, #44]	; (8001070 <u8x8_stm32_gpio_and_delay+0xf0>)
 8001042:	f000 fd2f 	bl	8001aa4 <HAL_GPIO_WritePin>
		break;
 8001046:	e00d      	b.n	8001064 <u8x8_stm32_gpio_and_delay+0xe4>
	case U8X8_MSG_GPIO_DC:
		/* Insert codes for DC pin control */
		HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, arg_int);
 8001048:	7abb      	ldrb	r3, [r7, #10]
 800104a:	461a      	mov	r2, r3
 800104c:	2140      	movs	r1, #64	; 0x40
 800104e:	4809      	ldr	r0, [pc, #36]	; (8001074 <u8x8_stm32_gpio_and_delay+0xf4>)
 8001050:	f000 fd28 	bl	8001aa4 <HAL_GPIO_WritePin>
		break;
 8001054:	e006      	b.n	8001064 <u8x8_stm32_gpio_and_delay+0xe4>
	case U8X8_MSG_GPIO_RESET:
		/* Insert codes for RST pin control */
		HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, arg_int);
 8001056:	7abb      	ldrb	r3, [r7, #10]
 8001058:	461a      	mov	r2, r3
 800105a:	2110      	movs	r1, #16
 800105c:	4805      	ldr	r0, [pc, #20]	; (8001074 <u8x8_stm32_gpio_and_delay+0xf4>)
 800105e:	f000 fd21 	bl	8001aa4 <HAL_GPIO_WritePin>
		break;
 8001062:	bf00      	nop
	}
	return 1;
 8001064:	2301      	movs	r3, #1
}
 8001066:	4618      	mov	r0, r3
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40010c00 	.word	0x40010c00
 8001074:	40010800 	.word	0x40010800

08001078 <u8x8_byte_stm32_hw_spi>:

uint8_t u8x8_byte_stm32_hw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	607b      	str	r3, [r7, #4]
 8001082:	460b      	mov	r3, r1
 8001084:	72fb      	strb	r3, [r7, #11]
 8001086:	4613      	mov	r3, r2
 8001088:	72bb      	strb	r3, [r7, #10]
	switch(msg) {
 800108a:	7afb      	ldrb	r3, [r7, #11]
 800108c:	3b14      	subs	r3, #20
 800108e:	2b0c      	cmp	r3, #12
 8001090:	d847      	bhi.n	8001122 <u8x8_byte_stm32_hw_spi+0xaa>
 8001092:	a201      	add	r2, pc, #4	; (adr r2, 8001098 <u8x8_byte_stm32_hw_spi+0x20>)
 8001094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001098:	08001127 	.word	0x08001127
 800109c:	08001123 	.word	0x08001123
 80010a0:	08001123 	.word	0x08001123
 80010a4:	080010cd 	.word	0x080010cd
 80010a8:	080010f3 	.word	0x080010f3
 80010ac:	0800110b 	.word	0x0800110b
 80010b0:	08001123 	.word	0x08001123
 80010b4:	08001123 	.word	0x08001123
 80010b8:	08001123 	.word	0x08001123
 80010bc:	08001123 	.word	0x08001123
 80010c0:	08001123 	.word	0x08001123
 80010c4:	08001123 	.word	0x08001123
 80010c8:	080010e5 	.word	0x080010e5
	case U8X8_MSG_BYTE_SEND:
		/* Insert codes to transmit data */
		if(HAL_SPI_Transmit(&hspi1, arg_ptr, arg_int, TX_TIMEOUT) != HAL_OK) return 0;
 80010cc:	7abb      	ldrb	r3, [r7, #10]
 80010ce:	b29a      	uxth	r2, r3
 80010d0:	2364      	movs	r3, #100	; 0x64
 80010d2:	6879      	ldr	r1, [r7, #4]
 80010d4:	4818      	ldr	r0, [pc, #96]	; (8001138 <u8x8_byte_stm32_hw_spi+0xc0>)
 80010d6:	f001 f9b3 	bl	8002440 <HAL_SPI_Transmit>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d024      	beq.n	800112a <u8x8_byte_stm32_hw_spi+0xb2>
 80010e0:	2300      	movs	r3, #0
 80010e2:	e024      	b.n	800112e <u8x8_byte_stm32_hw_spi+0xb6>
	case U8X8_MSG_BYTE_INIT:
		/* Insert codes to begin SPI transmission */
		break;
	case U8X8_MSG_BYTE_SET_DC:
		/* Control DC pin, U8X8_MSG_GPIO_DC will be called */
		u8x8_gpio_SetDC(u8x8, arg_int);
 80010e4:	7abb      	ldrb	r3, [r7, #10]
 80010e6:	461a      	mov	r2, r3
 80010e8:	214a      	movs	r1, #74	; 0x4a
 80010ea:	68f8      	ldr	r0, [r7, #12]
 80010ec:	f004 f91e 	bl	800532c <u8x8_gpio_call>
		break;
 80010f0:	e01c      	b.n	800112c <u8x8_byte_stm32_hw_spi+0xb4>
	case U8X8_MSG_BYTE_START_TRANSFER:
		/* Select slave, U8X8_MSG_GPIO_CS will be called */
		u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_enable_level);
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	461a      	mov	r2, r3
 80010fa:	2149      	movs	r1, #73	; 0x49
 80010fc:	68f8      	ldr	r0, [r7, #12]
 80010fe:	f004 f915 	bl	800532c <u8x8_gpio_call>
		HAL_Delay(1);
 8001102:	2001      	movs	r0, #1
 8001104:	f000 f968 	bl	80013d8 <HAL_Delay>
		break;
 8001108:	e010      	b.n	800112c <u8x8_byte_stm32_hw_spi+0xb4>
	case U8X8_MSG_BYTE_END_TRANSFER:
		HAL_Delay(1);
 800110a:	2001      	movs	r0, #1
 800110c:	f000 f964 	bl	80013d8 <HAL_Delay>
		/* Insert codes to end SPI transmission */
		u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	785b      	ldrb	r3, [r3, #1]
 8001116:	461a      	mov	r2, r3
 8001118:	2149      	movs	r1, #73	; 0x49
 800111a:	68f8      	ldr	r0, [r7, #12]
 800111c:	f004 f906 	bl	800532c <u8x8_gpio_call>
		break;
 8001120:	e004      	b.n	800112c <u8x8_byte_stm32_hw_spi+0xb4>
	default:
		return 0;
 8001122:	2300      	movs	r3, #0
 8001124:	e003      	b.n	800112e <u8x8_byte_stm32_hw_spi+0xb6>
		break;
 8001126:	bf00      	nop
 8001128:	e000      	b.n	800112c <u8x8_byte_stm32_hw_spi+0xb4>
		break;
 800112a:	bf00      	nop
	}
	return 1;
 800112c:	2301      	movs	r3, #1
}
 800112e:	4618      	mov	r0, r3
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	200000a4 	.word	0x200000a4

0800113c <rxBufferInit>:
#include "uart.h"

ring_buffer_t uart_rx={{0},0,0};
extern UART_HandleTypeDef huart2;

void rxBufferInit(ring_buffer_t *uart) {
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
	uart->head = 0;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2200      	movs	r2, #0
 8001148:	871a      	strh	r2, [r3, #56]	; 0x38
	uart->tail = 0;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2200      	movs	r2, #0
 800114e:	875a      	strh	r2, [r3, #58]	; 0x3a
	memset(uart->buffer, 0, sizeof(RX_BUFFER_SIZE));
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2204      	movs	r2, #4
 8001154:	2100      	movs	r1, #0
 8001156:	4618      	mov	r0, r3
 8001158:	f004 f980 	bl	800545c <memset>
}
 800115c:	bf00      	nop
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <push>:

void push(ring_buffer_t *uart, uint8_t ch) {
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	460b      	mov	r3, r1
 800116e:	70fb      	strb	r3, [r7, #3]
	uint16_t i = (unsigned int) (uart->head + 1) % RX_BUFFER_SIZE;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001174:	b29b      	uxth	r3, r3
 8001176:	3301      	adds	r3, #1
 8001178:	4619      	mov	r1, r3
 800117a:	4b12      	ldr	r3, [pc, #72]	; (80011c4 <push+0x60>)
 800117c:	fba3 2301 	umull	r2, r3, r3, r1
 8001180:	1aca      	subs	r2, r1, r3
 8001182:	0852      	lsrs	r2, r2, #1
 8001184:	4413      	add	r3, r2
 8001186:	095a      	lsrs	r2, r3, #5
 8001188:	4613      	mov	r3, r2
 800118a:	00db      	lsls	r3, r3, #3
 800118c:	1a9b      	subs	r3, r3, r2
 800118e:	00db      	lsls	r3, r3, #3
 8001190:	1a9b      	subs	r3, r3, r2
 8001192:	1aca      	subs	r2, r1, r3
 8001194:	4613      	mov	r3, r2
 8001196:	81fb      	strh	r3, [r7, #14]
	if (i != uart->tail) {
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800119c:	b29b      	uxth	r3, r3
 800119e:	89fa      	ldrh	r2, [r7, #14]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d009      	beq.n	80011b8 <push+0x54>
		uart->buffer[uart->head] = ch;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	4619      	mov	r1, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	78fa      	ldrb	r2, [r7, #3]
 80011b0:	545a      	strb	r2, [r3, r1]
		uart->head = i;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	89fa      	ldrh	r2, [r7, #14]
 80011b6:	871a      	strh	r2, [r3, #56]	; 0x38
	}
}
 80011b8:	bf00      	nop
 80011ba:	3714      	adds	r7, #20
 80011bc:	46bd      	mov	sp, r7
 80011be:	bc80      	pop	{r7}
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	29e4129f 	.word	0x29e4129f

080011c8 <pop>:

uint8_t pop(ring_buffer_t *uart) {
 80011c8:	b480      	push	{r7}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]

	if (uart->head == uart->tail) {
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80011d4:	b29a      	uxth	r2, r3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80011da:	b29b      	uxth	r3, r3
 80011dc:	429a      	cmp	r2, r3
 80011de:	d101      	bne.n	80011e4 <pop+0x1c>
		return -1;
 80011e0:	23ff      	movs	r3, #255	; 0xff
 80011e2:	e01c      	b.n	800121e <pop+0x56>
	} else {

		unsigned char cpop = uart->buffer[uart->tail];
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80011e8:	b29b      	uxth	r3, r3
 80011ea:	461a      	mov	r2, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	5c9b      	ldrb	r3, [r3, r2]
 80011f0:	73fb      	strb	r3, [r7, #15]
		uart->tail = (uint16_t) (uart->tail + 1) % RX_BUFFER_SIZE;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	3301      	adds	r3, #1
 80011fa:	b29a      	uxth	r2, r3
 80011fc:	4b0a      	ldr	r3, [pc, #40]	; (8001228 <pop+0x60>)
 80011fe:	fba3 1302 	umull	r1, r3, r3, r2
 8001202:	1ad1      	subs	r1, r2, r3
 8001204:	0849      	lsrs	r1, r1, #1
 8001206:	440b      	add	r3, r1
 8001208:	0959      	lsrs	r1, r3, #5
 800120a:	460b      	mov	r3, r1
 800120c:	00db      	lsls	r3, r3, #3
 800120e:	1a5b      	subs	r3, r3, r1
 8001210:	00db      	lsls	r3, r3, #3
 8001212:	1a5b      	subs	r3, r3, r1
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	b29a      	uxth	r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	875a      	strh	r2, [r3, #58]	; 0x3a

		return cpop;
 800121c:	7bfb      	ldrb	r3, [r7, #15]

	}
}
 800121e:	4618      	mov	r0, r3
 8001220:	3714      	adds	r7, #20
 8001222:	46bd      	mov	sp, r7
 8001224:	bc80      	pop	{r7}
 8001226:	4770      	bx	lr
 8001228:	29e4129f 	.word	0x29e4129f

0800122c <uart_available>:

int8_t uart_available(ring_buffer_t *uart) {
 800122c:	b480      	push	{r7}
 800122e:	b085      	sub	sp, #20
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]

	uint8_t n = (unsigned int) (RX_BUFFER_SIZE + (uart->head) - (uart->tail))
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001238:	b29b      	uxth	r3, r3
 800123a:	3337      	adds	r3, #55	; 0x37
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	8f52      	ldrh	r2, [r2, #58]	; 0x3a
 8001240:	b292      	uxth	r2, r2
 8001242:	1a9b      	subs	r3, r3, r2
 8001244:	4619      	mov	r1, r3
			% RX_BUFFER_SIZE;
 8001246:	4b0b      	ldr	r3, [pc, #44]	; (8001274 <uart_available+0x48>)
 8001248:	fba3 2301 	umull	r2, r3, r3, r1
 800124c:	1aca      	subs	r2, r1, r3
 800124e:	0852      	lsrs	r2, r2, #1
 8001250:	4413      	add	r3, r2
 8001252:	095a      	lsrs	r2, r3, #5
 8001254:	4613      	mov	r3, r2
 8001256:	00db      	lsls	r3, r3, #3
 8001258:	1a9b      	subs	r3, r3, r2
 800125a:	00db      	lsls	r3, r3, #3
 800125c:	1a9b      	subs	r3, r3, r2
 800125e:	1aca      	subs	r2, r1, r3
	uint8_t n = (unsigned int) (RX_BUFFER_SIZE + (uart->head) - (uart->tail))
 8001260:	4613      	mov	r3, r2
 8001262:	73fb      	strb	r3, [r7, #15]
	return n;
 8001264:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001268:	4618      	mov	r0, r3
 800126a:	3714      	adds	r7, #20
 800126c:	46bd      	mov	sp, r7
 800126e:	bc80      	pop	{r7}
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	29e4129f 	.word	0x29e4129f

08001278 <Uart_isr>:

void Uart_isr(UART_HandleTypeDef *huart) {
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
	uint32_t isrflags = READ_REG(huart->Instance->SR);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	617b      	str	r3, [r7, #20]
	uint32_t cr1its = READ_REG(huart->Instance->CR1);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	68db      	ldr	r3, [r3, #12]
 800128e:	613b      	str	r3, [r7, #16]

	/* if DR is not empty and the Rx Int is enabled */
	if (((isrflags & USART_SR_RXNE) != RESET)
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	f003 0320 	and.w	r3, r3, #32
 8001296:	2b00      	cmp	r3, #0
 8001298:	d011      	beq.n	80012be <Uart_isr+0x46>
			&& ((cr1its & USART_CR1_RXNEIE) != RESET)) {
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	f003 0320 	and.w	r3, r3, #32
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d00c      	beq.n	80012be <Uart_isr+0x46>
		 * @note   RXNE flag can be also cleared by a read to the USART_DR register.
		 * @note   TC flag can be also cleared by software sequence: a read operation to
		 *          USART_SR register followed by a write operation to USART_DR register.
		 * @note   TXE flag is cleared only by a write to the USART_DR register.
		 *********************/
		huart->Instance->SR; /* Read status register */
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	681b      	ldr	r3, [r3, #0]
		unsigned char c = huart->Instance->DR; /* Read data register */
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	73fb      	strb	r3, [r7, #15]
		push(&uart_rx, c);  // store data in buffer
 80012b2:	7bfb      	ldrb	r3, [r7, #15]
 80012b4:	4619      	mov	r1, r3
 80012b6:	4803      	ldr	r0, [pc, #12]	; (80012c4 <Uart_isr+0x4c>)
 80012b8:	f7ff ff54 	bl	8001164 <push>
		return;
 80012bc:	bf00      	nop
	}
}
 80012be:	3718      	adds	r7, #24
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	200002e4 	.word	0x200002e4

080012c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012c8:	480c      	ldr	r0, [pc, #48]	; (80012fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012ca:	490d      	ldr	r1, [pc, #52]	; (8001300 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012cc:	4a0d      	ldr	r2, [pc, #52]	; (8001304 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012d0:	e002      	b.n	80012d8 <LoopCopyDataInit>

080012d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012d6:	3304      	adds	r3, #4

080012d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012dc:	d3f9      	bcc.n	80012d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012de:	4a0a      	ldr	r2, [pc, #40]	; (8001308 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012e0:	4c0a      	ldr	r4, [pc, #40]	; (800130c <LoopFillZerobss+0x22>)
  movs r3, #0
 80012e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012e4:	e001      	b.n	80012ea <LoopFillZerobss>

080012e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012e8:	3204      	adds	r2, #4

080012ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012ec:	d3fb      	bcc.n	80012e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012ee:	f7ff fe41 	bl	8000f74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012f2:	f004 f88f 	bl	8005414 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012f6:	f7fe ff29 	bl	800014c <main>
  bx lr
 80012fa:	4770      	bx	lr
  ldr r0, =_sdata
 80012fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001300:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001304:	0800626c 	.word	0x0800626c
  ldr r2, =_sbss
 8001308:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 800130c:	20000734 	.word	0x20000734

08001310 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001310:	e7fe      	b.n	8001310 <ADC1_2_IRQHandler>
	...

08001314 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001318:	4b08      	ldr	r3, [pc, #32]	; (800133c <HAL_Init+0x28>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a07      	ldr	r2, [pc, #28]	; (800133c <HAL_Init+0x28>)
 800131e:	f043 0310 	orr.w	r3, r3, #16
 8001322:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001324:	2003      	movs	r0, #3
 8001326:	f000 f947 	bl	80015b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800132a:	200f      	movs	r0, #15
 800132c:	f000 f808 	bl	8001340 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001330:	f7ff fc5a 	bl	8000be8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001334:	2300      	movs	r3, #0
}
 8001336:	4618      	mov	r0, r3
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40022000 	.word	0x40022000

08001340 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001348:	4b12      	ldr	r3, [pc, #72]	; (8001394 <HAL_InitTick+0x54>)
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	4b12      	ldr	r3, [pc, #72]	; (8001398 <HAL_InitTick+0x58>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	4619      	mov	r1, r3
 8001352:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001356:	fbb3 f3f1 	udiv	r3, r3, r1
 800135a:	fbb2 f3f3 	udiv	r3, r2, r3
 800135e:	4618      	mov	r0, r3
 8001360:	f000 f95f 	bl	8001622 <HAL_SYSTICK_Config>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e00e      	b.n	800138c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2b0f      	cmp	r3, #15
 8001372:	d80a      	bhi.n	800138a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001374:	2200      	movs	r2, #0
 8001376:	6879      	ldr	r1, [r7, #4]
 8001378:	f04f 30ff 	mov.w	r0, #4294967295
 800137c:	f000 f927 	bl	80015ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001380:	4a06      	ldr	r2, [pc, #24]	; (800139c <HAL_InitTick+0x5c>)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001386:	2300      	movs	r3, #0
 8001388:	e000      	b.n	800138c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
}
 800138c:	4618      	mov	r0, r3
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	20000018 	.word	0x20000018
 8001398:	20000020 	.word	0x20000020
 800139c:	2000001c 	.word	0x2000001c

080013a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013a4:	4b05      	ldr	r3, [pc, #20]	; (80013bc <HAL_IncTick+0x1c>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	461a      	mov	r2, r3
 80013aa:	4b05      	ldr	r3, [pc, #20]	; (80013c0 <HAL_IncTick+0x20>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4413      	add	r3, r2
 80013b0:	4a03      	ldr	r2, [pc, #12]	; (80013c0 <HAL_IncTick+0x20>)
 80013b2:	6013      	str	r3, [r2, #0]
}
 80013b4:	bf00      	nop
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc80      	pop	{r7}
 80013ba:	4770      	bx	lr
 80013bc:	20000020 	.word	0x20000020
 80013c0:	20000320 	.word	0x20000320

080013c4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  return uwTick;
 80013c8:	4b02      	ldr	r3, [pc, #8]	; (80013d4 <HAL_GetTick+0x10>)
 80013ca:	681b      	ldr	r3, [r3, #0]
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bc80      	pop	{r7}
 80013d2:	4770      	bx	lr
 80013d4:	20000320 	.word	0x20000320

080013d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013e0:	f7ff fff0 	bl	80013c4 <HAL_GetTick>
 80013e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013f0:	d005      	beq.n	80013fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013f2:	4b0a      	ldr	r3, [pc, #40]	; (800141c <HAL_Delay+0x44>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	461a      	mov	r2, r3
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	4413      	add	r3, r2
 80013fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013fe:	bf00      	nop
 8001400:	f7ff ffe0 	bl	80013c4 <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	68fa      	ldr	r2, [r7, #12]
 800140c:	429a      	cmp	r2, r3
 800140e:	d8f7      	bhi.n	8001400 <HAL_Delay+0x28>
  {
  }
}
 8001410:	bf00      	nop
 8001412:	bf00      	nop
 8001414:	3710      	adds	r7, #16
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	20000020 	.word	0x20000020

08001420 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f003 0307 	and.w	r3, r3, #7
 800142e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001430:	4b0c      	ldr	r3, [pc, #48]	; (8001464 <__NVIC_SetPriorityGrouping+0x44>)
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001436:	68ba      	ldr	r2, [r7, #8]
 8001438:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800143c:	4013      	ands	r3, r2
 800143e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001448:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800144c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001450:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001452:	4a04      	ldr	r2, [pc, #16]	; (8001464 <__NVIC_SetPriorityGrouping+0x44>)
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	60d3      	str	r3, [r2, #12]
}
 8001458:	bf00      	nop
 800145a:	3714      	adds	r7, #20
 800145c:	46bd      	mov	sp, r7
 800145e:	bc80      	pop	{r7}
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800146c:	4b04      	ldr	r3, [pc, #16]	; (8001480 <__NVIC_GetPriorityGrouping+0x18>)
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	0a1b      	lsrs	r3, r3, #8
 8001472:	f003 0307 	and.w	r3, r3, #7
}
 8001476:	4618      	mov	r0, r3
 8001478:	46bd      	mov	sp, r7
 800147a:	bc80      	pop	{r7}
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	e000ed00 	.word	0xe000ed00

08001484 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800148e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001492:	2b00      	cmp	r3, #0
 8001494:	db0b      	blt.n	80014ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001496:	79fb      	ldrb	r3, [r7, #7]
 8001498:	f003 021f 	and.w	r2, r3, #31
 800149c:	4906      	ldr	r1, [pc, #24]	; (80014b8 <__NVIC_EnableIRQ+0x34>)
 800149e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a2:	095b      	lsrs	r3, r3, #5
 80014a4:	2001      	movs	r0, #1
 80014a6:	fa00 f202 	lsl.w	r2, r0, r2
 80014aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014ae:	bf00      	nop
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc80      	pop	{r7}
 80014b6:	4770      	bx	lr
 80014b8:	e000e100 	.word	0xe000e100

080014bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	6039      	str	r1, [r7, #0]
 80014c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	db0a      	blt.n	80014e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	b2da      	uxtb	r2, r3
 80014d4:	490c      	ldr	r1, [pc, #48]	; (8001508 <__NVIC_SetPriority+0x4c>)
 80014d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014da:	0112      	lsls	r2, r2, #4
 80014dc:	b2d2      	uxtb	r2, r2
 80014de:	440b      	add	r3, r1
 80014e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014e4:	e00a      	b.n	80014fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	b2da      	uxtb	r2, r3
 80014ea:	4908      	ldr	r1, [pc, #32]	; (800150c <__NVIC_SetPriority+0x50>)
 80014ec:	79fb      	ldrb	r3, [r7, #7]
 80014ee:	f003 030f 	and.w	r3, r3, #15
 80014f2:	3b04      	subs	r3, #4
 80014f4:	0112      	lsls	r2, r2, #4
 80014f6:	b2d2      	uxtb	r2, r2
 80014f8:	440b      	add	r3, r1
 80014fa:	761a      	strb	r2, [r3, #24]
}
 80014fc:	bf00      	nop
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	bc80      	pop	{r7}
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	e000e100 	.word	0xe000e100
 800150c:	e000ed00 	.word	0xe000ed00

08001510 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001510:	b480      	push	{r7}
 8001512:	b089      	sub	sp, #36	; 0x24
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	f003 0307 	and.w	r3, r3, #7
 8001522:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	f1c3 0307 	rsb	r3, r3, #7
 800152a:	2b04      	cmp	r3, #4
 800152c:	bf28      	it	cs
 800152e:	2304      	movcs	r3, #4
 8001530:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	3304      	adds	r3, #4
 8001536:	2b06      	cmp	r3, #6
 8001538:	d902      	bls.n	8001540 <NVIC_EncodePriority+0x30>
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	3b03      	subs	r3, #3
 800153e:	e000      	b.n	8001542 <NVIC_EncodePriority+0x32>
 8001540:	2300      	movs	r3, #0
 8001542:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001544:	f04f 32ff 	mov.w	r2, #4294967295
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	fa02 f303 	lsl.w	r3, r2, r3
 800154e:	43da      	mvns	r2, r3
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	401a      	ands	r2, r3
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001558:	f04f 31ff 	mov.w	r1, #4294967295
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	fa01 f303 	lsl.w	r3, r1, r3
 8001562:	43d9      	mvns	r1, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001568:	4313      	orrs	r3, r2
         );
}
 800156a:	4618      	mov	r0, r3
 800156c:	3724      	adds	r7, #36	; 0x24
 800156e:	46bd      	mov	sp, r7
 8001570:	bc80      	pop	{r7}
 8001572:	4770      	bx	lr

08001574 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	3b01      	subs	r3, #1
 8001580:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001584:	d301      	bcc.n	800158a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001586:	2301      	movs	r3, #1
 8001588:	e00f      	b.n	80015aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800158a:	4a0a      	ldr	r2, [pc, #40]	; (80015b4 <SysTick_Config+0x40>)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	3b01      	subs	r3, #1
 8001590:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001592:	210f      	movs	r1, #15
 8001594:	f04f 30ff 	mov.w	r0, #4294967295
 8001598:	f7ff ff90 	bl	80014bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800159c:	4b05      	ldr	r3, [pc, #20]	; (80015b4 <SysTick_Config+0x40>)
 800159e:	2200      	movs	r2, #0
 80015a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015a2:	4b04      	ldr	r3, [pc, #16]	; (80015b4 <SysTick_Config+0x40>)
 80015a4:	2207      	movs	r2, #7
 80015a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	e000e010 	.word	0xe000e010

080015b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f7ff ff2d 	bl	8001420 <__NVIC_SetPriorityGrouping>
}
 80015c6:	bf00      	nop
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b086      	sub	sp, #24
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	4603      	mov	r3, r0
 80015d6:	60b9      	str	r1, [r7, #8]
 80015d8:	607a      	str	r2, [r7, #4]
 80015da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015dc:	2300      	movs	r3, #0
 80015de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015e0:	f7ff ff42 	bl	8001468 <__NVIC_GetPriorityGrouping>
 80015e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	68b9      	ldr	r1, [r7, #8]
 80015ea:	6978      	ldr	r0, [r7, #20]
 80015ec:	f7ff ff90 	bl	8001510 <NVIC_EncodePriority>
 80015f0:	4602      	mov	r2, r0
 80015f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015f6:	4611      	mov	r1, r2
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff ff5f 	bl	80014bc <__NVIC_SetPriority>
}
 80015fe:	bf00      	nop
 8001600:	3718      	adds	r7, #24
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	b082      	sub	sp, #8
 800160a:	af00      	add	r7, sp, #0
 800160c:	4603      	mov	r3, r0
 800160e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff ff35 	bl	8001484 <__NVIC_EnableIRQ>
}
 800161a:	bf00      	nop
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}

08001622 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001622:	b580      	push	{r7, lr}
 8001624:	b082      	sub	sp, #8
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f7ff ffa2 	bl	8001574 <SysTick_Config>
 8001630:	4603      	mov	r3, r0
}
 8001632:	4618      	mov	r0, r3
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}

0800163a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800163a:	b480      	push	{r7}
 800163c:	b085      	sub	sp, #20
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001642:	2300      	movs	r3, #0
 8001644:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800164c:	2b02      	cmp	r3, #2
 800164e:	d008      	beq.n	8001662 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2204      	movs	r2, #4
 8001654:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e020      	b.n	80016a4 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f022 020e 	bic.w	r2, r2, #14
 8001670:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f022 0201 	bic.w	r2, r2, #1
 8001680:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800168a:	2101      	movs	r1, #1
 800168c:	fa01 f202 	lsl.w	r2, r1, r2
 8001690:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2201      	movs	r2, #1
 8001696:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2200      	movs	r2, #0
 800169e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80016a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3714      	adds	r7, #20
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bc80      	pop	{r7}
 80016ac:	4770      	bx	lr
	...

080016b0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016b8:	2300      	movs	r3, #0
 80016ba:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d005      	beq.n	80016d2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2204      	movs	r2, #4
 80016ca:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	73fb      	strb	r3, [r7, #15]
 80016d0:	e051      	b.n	8001776 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f022 020e 	bic.w	r2, r2, #14
 80016e0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f022 0201 	bic.w	r2, r2, #1
 80016f0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a22      	ldr	r2, [pc, #136]	; (8001780 <HAL_DMA_Abort_IT+0xd0>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d029      	beq.n	8001750 <HAL_DMA_Abort_IT+0xa0>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a20      	ldr	r2, [pc, #128]	; (8001784 <HAL_DMA_Abort_IT+0xd4>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d022      	beq.n	800174c <HAL_DMA_Abort_IT+0x9c>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a1f      	ldr	r2, [pc, #124]	; (8001788 <HAL_DMA_Abort_IT+0xd8>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d01a      	beq.n	8001746 <HAL_DMA_Abort_IT+0x96>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a1d      	ldr	r2, [pc, #116]	; (800178c <HAL_DMA_Abort_IT+0xdc>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d012      	beq.n	8001740 <HAL_DMA_Abort_IT+0x90>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a1c      	ldr	r2, [pc, #112]	; (8001790 <HAL_DMA_Abort_IT+0xe0>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d00a      	beq.n	800173a <HAL_DMA_Abort_IT+0x8a>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a1a      	ldr	r2, [pc, #104]	; (8001794 <HAL_DMA_Abort_IT+0xe4>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d102      	bne.n	8001734 <HAL_DMA_Abort_IT+0x84>
 800172e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001732:	e00e      	b.n	8001752 <HAL_DMA_Abort_IT+0xa2>
 8001734:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001738:	e00b      	b.n	8001752 <HAL_DMA_Abort_IT+0xa2>
 800173a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800173e:	e008      	b.n	8001752 <HAL_DMA_Abort_IT+0xa2>
 8001740:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001744:	e005      	b.n	8001752 <HAL_DMA_Abort_IT+0xa2>
 8001746:	f44f 7380 	mov.w	r3, #256	; 0x100
 800174a:	e002      	b.n	8001752 <HAL_DMA_Abort_IT+0xa2>
 800174c:	2310      	movs	r3, #16
 800174e:	e000      	b.n	8001752 <HAL_DMA_Abort_IT+0xa2>
 8001750:	2301      	movs	r3, #1
 8001752:	4a11      	ldr	r2, [pc, #68]	; (8001798 <HAL_DMA_Abort_IT+0xe8>)
 8001754:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2201      	movs	r2, #1
 800175a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800176a:	2b00      	cmp	r3, #0
 800176c:	d003      	beq.n	8001776 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	4798      	blx	r3
    } 
  }
  return status;
 8001776:	7bfb      	ldrb	r3, [r7, #15]
}
 8001778:	4618      	mov	r0, r3
 800177a:	3710      	adds	r7, #16
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	40020008 	.word	0x40020008
 8001784:	4002001c 	.word	0x4002001c
 8001788:	40020030 	.word	0x40020030
 800178c:	40020044 	.word	0x40020044
 8001790:	40020058 	.word	0x40020058
 8001794:	4002006c 	.word	0x4002006c
 8001798:	40020000 	.word	0x40020000

0800179c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800179c:	b480      	push	{r7}
 800179e:	b08b      	sub	sp, #44	; 0x2c
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017a6:	2300      	movs	r3, #0
 80017a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017aa:	2300      	movs	r3, #0
 80017ac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017ae:	e169      	b.n	8001a84 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017b0:	2201      	movs	r2, #1
 80017b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	69fa      	ldr	r2, [r7, #28]
 80017c0:	4013      	ands	r3, r2
 80017c2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	f040 8158 	bne.w	8001a7e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	4a9a      	ldr	r2, [pc, #616]	; (8001a3c <HAL_GPIO_Init+0x2a0>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d05e      	beq.n	8001896 <HAL_GPIO_Init+0xfa>
 80017d8:	4a98      	ldr	r2, [pc, #608]	; (8001a3c <HAL_GPIO_Init+0x2a0>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d875      	bhi.n	80018ca <HAL_GPIO_Init+0x12e>
 80017de:	4a98      	ldr	r2, [pc, #608]	; (8001a40 <HAL_GPIO_Init+0x2a4>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d058      	beq.n	8001896 <HAL_GPIO_Init+0xfa>
 80017e4:	4a96      	ldr	r2, [pc, #600]	; (8001a40 <HAL_GPIO_Init+0x2a4>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d86f      	bhi.n	80018ca <HAL_GPIO_Init+0x12e>
 80017ea:	4a96      	ldr	r2, [pc, #600]	; (8001a44 <HAL_GPIO_Init+0x2a8>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d052      	beq.n	8001896 <HAL_GPIO_Init+0xfa>
 80017f0:	4a94      	ldr	r2, [pc, #592]	; (8001a44 <HAL_GPIO_Init+0x2a8>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d869      	bhi.n	80018ca <HAL_GPIO_Init+0x12e>
 80017f6:	4a94      	ldr	r2, [pc, #592]	; (8001a48 <HAL_GPIO_Init+0x2ac>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d04c      	beq.n	8001896 <HAL_GPIO_Init+0xfa>
 80017fc:	4a92      	ldr	r2, [pc, #584]	; (8001a48 <HAL_GPIO_Init+0x2ac>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d863      	bhi.n	80018ca <HAL_GPIO_Init+0x12e>
 8001802:	4a92      	ldr	r2, [pc, #584]	; (8001a4c <HAL_GPIO_Init+0x2b0>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d046      	beq.n	8001896 <HAL_GPIO_Init+0xfa>
 8001808:	4a90      	ldr	r2, [pc, #576]	; (8001a4c <HAL_GPIO_Init+0x2b0>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d85d      	bhi.n	80018ca <HAL_GPIO_Init+0x12e>
 800180e:	2b12      	cmp	r3, #18
 8001810:	d82a      	bhi.n	8001868 <HAL_GPIO_Init+0xcc>
 8001812:	2b12      	cmp	r3, #18
 8001814:	d859      	bhi.n	80018ca <HAL_GPIO_Init+0x12e>
 8001816:	a201      	add	r2, pc, #4	; (adr r2, 800181c <HAL_GPIO_Init+0x80>)
 8001818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800181c:	08001897 	.word	0x08001897
 8001820:	08001871 	.word	0x08001871
 8001824:	08001883 	.word	0x08001883
 8001828:	080018c5 	.word	0x080018c5
 800182c:	080018cb 	.word	0x080018cb
 8001830:	080018cb 	.word	0x080018cb
 8001834:	080018cb 	.word	0x080018cb
 8001838:	080018cb 	.word	0x080018cb
 800183c:	080018cb 	.word	0x080018cb
 8001840:	080018cb 	.word	0x080018cb
 8001844:	080018cb 	.word	0x080018cb
 8001848:	080018cb 	.word	0x080018cb
 800184c:	080018cb 	.word	0x080018cb
 8001850:	080018cb 	.word	0x080018cb
 8001854:	080018cb 	.word	0x080018cb
 8001858:	080018cb 	.word	0x080018cb
 800185c:	080018cb 	.word	0x080018cb
 8001860:	08001879 	.word	0x08001879
 8001864:	0800188d 	.word	0x0800188d
 8001868:	4a79      	ldr	r2, [pc, #484]	; (8001a50 <HAL_GPIO_Init+0x2b4>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d013      	beq.n	8001896 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800186e:	e02c      	b.n	80018ca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	623b      	str	r3, [r7, #32]
          break;
 8001876:	e029      	b.n	80018cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	3304      	adds	r3, #4
 800187e:	623b      	str	r3, [r7, #32]
          break;
 8001880:	e024      	b.n	80018cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	68db      	ldr	r3, [r3, #12]
 8001886:	3308      	adds	r3, #8
 8001888:	623b      	str	r3, [r7, #32]
          break;
 800188a:	e01f      	b.n	80018cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	330c      	adds	r3, #12
 8001892:	623b      	str	r3, [r7, #32]
          break;
 8001894:	e01a      	b.n	80018cc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d102      	bne.n	80018a4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800189e:	2304      	movs	r3, #4
 80018a0:	623b      	str	r3, [r7, #32]
          break;
 80018a2:	e013      	b.n	80018cc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d105      	bne.n	80018b8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018ac:	2308      	movs	r3, #8
 80018ae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	69fa      	ldr	r2, [r7, #28]
 80018b4:	611a      	str	r2, [r3, #16]
          break;
 80018b6:	e009      	b.n	80018cc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018b8:	2308      	movs	r3, #8
 80018ba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	69fa      	ldr	r2, [r7, #28]
 80018c0:	615a      	str	r2, [r3, #20]
          break;
 80018c2:	e003      	b.n	80018cc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018c4:	2300      	movs	r3, #0
 80018c6:	623b      	str	r3, [r7, #32]
          break;
 80018c8:	e000      	b.n	80018cc <HAL_GPIO_Init+0x130>
          break;
 80018ca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	2bff      	cmp	r3, #255	; 0xff
 80018d0:	d801      	bhi.n	80018d6 <HAL_GPIO_Init+0x13a>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	e001      	b.n	80018da <HAL_GPIO_Init+0x13e>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	3304      	adds	r3, #4
 80018da:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	2bff      	cmp	r3, #255	; 0xff
 80018e0:	d802      	bhi.n	80018e8 <HAL_GPIO_Init+0x14c>
 80018e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	e002      	b.n	80018ee <HAL_GPIO_Init+0x152>
 80018e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ea:	3b08      	subs	r3, #8
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	210f      	movs	r1, #15
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	fa01 f303 	lsl.w	r3, r1, r3
 80018fc:	43db      	mvns	r3, r3
 80018fe:	401a      	ands	r2, r3
 8001900:	6a39      	ldr	r1, [r7, #32]
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	fa01 f303 	lsl.w	r3, r1, r3
 8001908:	431a      	orrs	r2, r3
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001916:	2b00      	cmp	r3, #0
 8001918:	f000 80b1 	beq.w	8001a7e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800191c:	4b4d      	ldr	r3, [pc, #308]	; (8001a54 <HAL_GPIO_Init+0x2b8>)
 800191e:	699b      	ldr	r3, [r3, #24]
 8001920:	4a4c      	ldr	r2, [pc, #304]	; (8001a54 <HAL_GPIO_Init+0x2b8>)
 8001922:	f043 0301 	orr.w	r3, r3, #1
 8001926:	6193      	str	r3, [r2, #24]
 8001928:	4b4a      	ldr	r3, [pc, #296]	; (8001a54 <HAL_GPIO_Init+0x2b8>)
 800192a:	699b      	ldr	r3, [r3, #24]
 800192c:	f003 0301 	and.w	r3, r3, #1
 8001930:	60bb      	str	r3, [r7, #8]
 8001932:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001934:	4a48      	ldr	r2, [pc, #288]	; (8001a58 <HAL_GPIO_Init+0x2bc>)
 8001936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001938:	089b      	lsrs	r3, r3, #2
 800193a:	3302      	adds	r3, #2
 800193c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001940:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001944:	f003 0303 	and.w	r3, r3, #3
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	220f      	movs	r2, #15
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	43db      	mvns	r3, r3
 8001952:	68fa      	ldr	r2, [r7, #12]
 8001954:	4013      	ands	r3, r2
 8001956:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	4a40      	ldr	r2, [pc, #256]	; (8001a5c <HAL_GPIO_Init+0x2c0>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d013      	beq.n	8001988 <HAL_GPIO_Init+0x1ec>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	4a3f      	ldr	r2, [pc, #252]	; (8001a60 <HAL_GPIO_Init+0x2c4>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d00d      	beq.n	8001984 <HAL_GPIO_Init+0x1e8>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	4a3e      	ldr	r2, [pc, #248]	; (8001a64 <HAL_GPIO_Init+0x2c8>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d007      	beq.n	8001980 <HAL_GPIO_Init+0x1e4>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	4a3d      	ldr	r2, [pc, #244]	; (8001a68 <HAL_GPIO_Init+0x2cc>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d101      	bne.n	800197c <HAL_GPIO_Init+0x1e0>
 8001978:	2303      	movs	r3, #3
 800197a:	e006      	b.n	800198a <HAL_GPIO_Init+0x1ee>
 800197c:	2304      	movs	r3, #4
 800197e:	e004      	b.n	800198a <HAL_GPIO_Init+0x1ee>
 8001980:	2302      	movs	r3, #2
 8001982:	e002      	b.n	800198a <HAL_GPIO_Init+0x1ee>
 8001984:	2301      	movs	r3, #1
 8001986:	e000      	b.n	800198a <HAL_GPIO_Init+0x1ee>
 8001988:	2300      	movs	r3, #0
 800198a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800198c:	f002 0203 	and.w	r2, r2, #3
 8001990:	0092      	lsls	r2, r2, #2
 8001992:	4093      	lsls	r3, r2
 8001994:	68fa      	ldr	r2, [r7, #12]
 8001996:	4313      	orrs	r3, r2
 8001998:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800199a:	492f      	ldr	r1, [pc, #188]	; (8001a58 <HAL_GPIO_Init+0x2bc>)
 800199c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199e:	089b      	lsrs	r3, r3, #2
 80019a0:	3302      	adds	r3, #2
 80019a2:	68fa      	ldr	r2, [r7, #12]
 80019a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d006      	beq.n	80019c2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019b4:	4b2d      	ldr	r3, [pc, #180]	; (8001a6c <HAL_GPIO_Init+0x2d0>)
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	492c      	ldr	r1, [pc, #176]	; (8001a6c <HAL_GPIO_Init+0x2d0>)
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	4313      	orrs	r3, r2
 80019be:	600b      	str	r3, [r1, #0]
 80019c0:	e006      	b.n	80019d0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019c2:	4b2a      	ldr	r3, [pc, #168]	; (8001a6c <HAL_GPIO_Init+0x2d0>)
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	43db      	mvns	r3, r3
 80019ca:	4928      	ldr	r1, [pc, #160]	; (8001a6c <HAL_GPIO_Init+0x2d0>)
 80019cc:	4013      	ands	r3, r2
 80019ce:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d006      	beq.n	80019ea <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019dc:	4b23      	ldr	r3, [pc, #140]	; (8001a6c <HAL_GPIO_Init+0x2d0>)
 80019de:	685a      	ldr	r2, [r3, #4]
 80019e0:	4922      	ldr	r1, [pc, #136]	; (8001a6c <HAL_GPIO_Init+0x2d0>)
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	604b      	str	r3, [r1, #4]
 80019e8:	e006      	b.n	80019f8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019ea:	4b20      	ldr	r3, [pc, #128]	; (8001a6c <HAL_GPIO_Init+0x2d0>)
 80019ec:	685a      	ldr	r2, [r3, #4]
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	43db      	mvns	r3, r3
 80019f2:	491e      	ldr	r1, [pc, #120]	; (8001a6c <HAL_GPIO_Init+0x2d0>)
 80019f4:	4013      	ands	r3, r2
 80019f6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d006      	beq.n	8001a12 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a04:	4b19      	ldr	r3, [pc, #100]	; (8001a6c <HAL_GPIO_Init+0x2d0>)
 8001a06:	689a      	ldr	r2, [r3, #8]
 8001a08:	4918      	ldr	r1, [pc, #96]	; (8001a6c <HAL_GPIO_Init+0x2d0>)
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	608b      	str	r3, [r1, #8]
 8001a10:	e006      	b.n	8001a20 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a12:	4b16      	ldr	r3, [pc, #88]	; (8001a6c <HAL_GPIO_Init+0x2d0>)
 8001a14:	689a      	ldr	r2, [r3, #8]
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	4914      	ldr	r1, [pc, #80]	; (8001a6c <HAL_GPIO_Init+0x2d0>)
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d021      	beq.n	8001a70 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a2c:	4b0f      	ldr	r3, [pc, #60]	; (8001a6c <HAL_GPIO_Init+0x2d0>)
 8001a2e:	68da      	ldr	r2, [r3, #12]
 8001a30:	490e      	ldr	r1, [pc, #56]	; (8001a6c <HAL_GPIO_Init+0x2d0>)
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	60cb      	str	r3, [r1, #12]
 8001a38:	e021      	b.n	8001a7e <HAL_GPIO_Init+0x2e2>
 8001a3a:	bf00      	nop
 8001a3c:	10320000 	.word	0x10320000
 8001a40:	10310000 	.word	0x10310000
 8001a44:	10220000 	.word	0x10220000
 8001a48:	10210000 	.word	0x10210000
 8001a4c:	10120000 	.word	0x10120000
 8001a50:	10110000 	.word	0x10110000
 8001a54:	40021000 	.word	0x40021000
 8001a58:	40010000 	.word	0x40010000
 8001a5c:	40010800 	.word	0x40010800
 8001a60:	40010c00 	.word	0x40010c00
 8001a64:	40011000 	.word	0x40011000
 8001a68:	40011400 	.word	0x40011400
 8001a6c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a70:	4b0b      	ldr	r3, [pc, #44]	; (8001aa0 <HAL_GPIO_Init+0x304>)
 8001a72:	68da      	ldr	r2, [r3, #12]
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	43db      	mvns	r3, r3
 8001a78:	4909      	ldr	r1, [pc, #36]	; (8001aa0 <HAL_GPIO_Init+0x304>)
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a80:	3301      	adds	r3, #1
 8001a82:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	f47f ae8e 	bne.w	80017b0 <HAL_GPIO_Init+0x14>
  }
}
 8001a94:	bf00      	nop
 8001a96:	bf00      	nop
 8001a98:	372c      	adds	r7, #44	; 0x2c
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bc80      	pop	{r7}
 8001a9e:	4770      	bx	lr
 8001aa0:	40010400 	.word	0x40010400

08001aa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	460b      	mov	r3, r1
 8001aae:	807b      	strh	r3, [r7, #2]
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ab4:	787b      	ldrb	r3, [r7, #1]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d003      	beq.n	8001ac2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001aba:	887a      	ldrh	r2, [r7, #2]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ac0:	e003      	b.n	8001aca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ac2:	887b      	ldrh	r3, [r7, #2]
 8001ac4:	041a      	lsls	r2, r3, #16
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	611a      	str	r2, [r3, #16]
}
 8001aca:	bf00      	nop
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bc80      	pop	{r7}
 8001ad2:	4770      	bx	lr

08001ad4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	4603      	mov	r3, r0
 8001adc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001ade:	4b08      	ldr	r3, [pc, #32]	; (8001b00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ae0:	695a      	ldr	r2, [r3, #20]
 8001ae2:	88fb      	ldrh	r3, [r7, #6]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d006      	beq.n	8001af8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001aea:	4a05      	ldr	r2, [pc, #20]	; (8001b00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001aec:	88fb      	ldrh	r3, [r7, #6]
 8001aee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001af0:	88fb      	ldrh	r3, [r7, #6]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff f860 	bl	8000bb8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001af8:	bf00      	nop
 8001afa:	3708      	adds	r7, #8
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	40010400 	.word	0x40010400

08001b04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d101      	bne.n	8001b16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e272      	b.n	8001ffc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	f000 8087 	beq.w	8001c32 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b24:	4b92      	ldr	r3, [pc, #584]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f003 030c 	and.w	r3, r3, #12
 8001b2c:	2b04      	cmp	r3, #4
 8001b2e:	d00c      	beq.n	8001b4a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b30:	4b8f      	ldr	r3, [pc, #572]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f003 030c 	and.w	r3, r3, #12
 8001b38:	2b08      	cmp	r3, #8
 8001b3a:	d112      	bne.n	8001b62 <HAL_RCC_OscConfig+0x5e>
 8001b3c:	4b8c      	ldr	r3, [pc, #560]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b48:	d10b      	bne.n	8001b62 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b4a:	4b89      	ldr	r3, [pc, #548]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d06c      	beq.n	8001c30 <HAL_RCC_OscConfig+0x12c>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d168      	bne.n	8001c30 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e24c      	b.n	8001ffc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b6a:	d106      	bne.n	8001b7a <HAL_RCC_OscConfig+0x76>
 8001b6c:	4b80      	ldr	r3, [pc, #512]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a7f      	ldr	r2, [pc, #508]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001b72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b76:	6013      	str	r3, [r2, #0]
 8001b78:	e02e      	b.n	8001bd8 <HAL_RCC_OscConfig+0xd4>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d10c      	bne.n	8001b9c <HAL_RCC_OscConfig+0x98>
 8001b82:	4b7b      	ldr	r3, [pc, #492]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a7a      	ldr	r2, [pc, #488]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001b88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b8c:	6013      	str	r3, [r2, #0]
 8001b8e:	4b78      	ldr	r3, [pc, #480]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a77      	ldr	r2, [pc, #476]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001b94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b98:	6013      	str	r3, [r2, #0]
 8001b9a:	e01d      	b.n	8001bd8 <HAL_RCC_OscConfig+0xd4>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ba4:	d10c      	bne.n	8001bc0 <HAL_RCC_OscConfig+0xbc>
 8001ba6:	4b72      	ldr	r3, [pc, #456]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a71      	ldr	r2, [pc, #452]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001bac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bb0:	6013      	str	r3, [r2, #0]
 8001bb2:	4b6f      	ldr	r3, [pc, #444]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a6e      	ldr	r2, [pc, #440]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001bb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bbc:	6013      	str	r3, [r2, #0]
 8001bbe:	e00b      	b.n	8001bd8 <HAL_RCC_OscConfig+0xd4>
 8001bc0:	4b6b      	ldr	r3, [pc, #428]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a6a      	ldr	r2, [pc, #424]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001bc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bca:	6013      	str	r3, [r2, #0]
 8001bcc:	4b68      	ldr	r3, [pc, #416]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a67      	ldr	r2, [pc, #412]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001bd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bd6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d013      	beq.n	8001c08 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be0:	f7ff fbf0 	bl	80013c4 <HAL_GetTick>
 8001be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001be6:	e008      	b.n	8001bfa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001be8:	f7ff fbec 	bl	80013c4 <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b64      	cmp	r3, #100	; 0x64
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e200      	b.n	8001ffc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bfa:	4b5d      	ldr	r3, [pc, #372]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d0f0      	beq.n	8001be8 <HAL_RCC_OscConfig+0xe4>
 8001c06:	e014      	b.n	8001c32 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c08:	f7ff fbdc 	bl	80013c4 <HAL_GetTick>
 8001c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c0e:	e008      	b.n	8001c22 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c10:	f7ff fbd8 	bl	80013c4 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	2b64      	cmp	r3, #100	; 0x64
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e1ec      	b.n	8001ffc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c22:	4b53      	ldr	r3, [pc, #332]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d1f0      	bne.n	8001c10 <HAL_RCC_OscConfig+0x10c>
 8001c2e:	e000      	b.n	8001c32 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d063      	beq.n	8001d06 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c3e:	4b4c      	ldr	r3, [pc, #304]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f003 030c 	and.w	r3, r3, #12
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d00b      	beq.n	8001c62 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c4a:	4b49      	ldr	r3, [pc, #292]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f003 030c 	and.w	r3, r3, #12
 8001c52:	2b08      	cmp	r3, #8
 8001c54:	d11c      	bne.n	8001c90 <HAL_RCC_OscConfig+0x18c>
 8001c56:	4b46      	ldr	r3, [pc, #280]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d116      	bne.n	8001c90 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c62:	4b43      	ldr	r3, [pc, #268]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d005      	beq.n	8001c7a <HAL_RCC_OscConfig+0x176>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	691b      	ldr	r3, [r3, #16]
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d001      	beq.n	8001c7a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e1c0      	b.n	8001ffc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c7a:	4b3d      	ldr	r3, [pc, #244]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	695b      	ldr	r3, [r3, #20]
 8001c86:	00db      	lsls	r3, r3, #3
 8001c88:	4939      	ldr	r1, [pc, #228]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c8e:	e03a      	b.n	8001d06 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	691b      	ldr	r3, [r3, #16]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d020      	beq.n	8001cda <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c98:	4b36      	ldr	r3, [pc, #216]	; (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c9e:	f7ff fb91 	bl	80013c4 <HAL_GetTick>
 8001ca2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ca4:	e008      	b.n	8001cb8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ca6:	f7ff fb8d 	bl	80013c4 <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d901      	bls.n	8001cb8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e1a1      	b.n	8001ffc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cb8:	4b2d      	ldr	r3, [pc, #180]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0302 	and.w	r3, r3, #2
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d0f0      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cc4:	4b2a      	ldr	r3, [pc, #168]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	695b      	ldr	r3, [r3, #20]
 8001cd0:	00db      	lsls	r3, r3, #3
 8001cd2:	4927      	ldr	r1, [pc, #156]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	600b      	str	r3, [r1, #0]
 8001cd8:	e015      	b.n	8001d06 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cda:	4b26      	ldr	r3, [pc, #152]	; (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce0:	f7ff fb70 	bl	80013c4 <HAL_GetTick>
 8001ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ce6:	e008      	b.n	8001cfa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ce8:	f7ff fb6c 	bl	80013c4 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e180      	b.n	8001ffc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cfa:	4b1d      	ldr	r3, [pc, #116]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d1f0      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0308 	and.w	r3, r3, #8
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d03a      	beq.n	8001d88 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	699b      	ldr	r3, [r3, #24]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d019      	beq.n	8001d4e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d1a:	4b17      	ldr	r3, [pc, #92]	; (8001d78 <HAL_RCC_OscConfig+0x274>)
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d20:	f7ff fb50 	bl	80013c4 <HAL_GetTick>
 8001d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d26:	e008      	b.n	8001d3a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d28:	f7ff fb4c 	bl	80013c4 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e160      	b.n	8001ffc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d3a:	4b0d      	ldr	r3, [pc, #52]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d0f0      	beq.n	8001d28 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d46:	2001      	movs	r0, #1
 8001d48:	f000 fad8 	bl	80022fc <RCC_Delay>
 8001d4c:	e01c      	b.n	8001d88 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d4e:	4b0a      	ldr	r3, [pc, #40]	; (8001d78 <HAL_RCC_OscConfig+0x274>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d54:	f7ff fb36 	bl	80013c4 <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d5a:	e00f      	b.n	8001d7c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d5c:	f7ff fb32 	bl	80013c4 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d908      	bls.n	8001d7c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e146      	b.n	8001ffc <HAL_RCC_OscConfig+0x4f8>
 8001d6e:	bf00      	nop
 8001d70:	40021000 	.word	0x40021000
 8001d74:	42420000 	.word	0x42420000
 8001d78:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d7c:	4b92      	ldr	r3, [pc, #584]	; (8001fc8 <HAL_RCC_OscConfig+0x4c4>)
 8001d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d80:	f003 0302 	and.w	r3, r3, #2
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d1e9      	bne.n	8001d5c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0304 	and.w	r3, r3, #4
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	f000 80a6 	beq.w	8001ee2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d96:	2300      	movs	r3, #0
 8001d98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d9a:	4b8b      	ldr	r3, [pc, #556]	; (8001fc8 <HAL_RCC_OscConfig+0x4c4>)
 8001d9c:	69db      	ldr	r3, [r3, #28]
 8001d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d10d      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001da6:	4b88      	ldr	r3, [pc, #544]	; (8001fc8 <HAL_RCC_OscConfig+0x4c4>)
 8001da8:	69db      	ldr	r3, [r3, #28]
 8001daa:	4a87      	ldr	r2, [pc, #540]	; (8001fc8 <HAL_RCC_OscConfig+0x4c4>)
 8001dac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001db0:	61d3      	str	r3, [r2, #28]
 8001db2:	4b85      	ldr	r3, [pc, #532]	; (8001fc8 <HAL_RCC_OscConfig+0x4c4>)
 8001db4:	69db      	ldr	r3, [r3, #28]
 8001db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dba:	60bb      	str	r3, [r7, #8]
 8001dbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dc2:	4b82      	ldr	r3, [pc, #520]	; (8001fcc <HAL_RCC_OscConfig+0x4c8>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d118      	bne.n	8001e00 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dce:	4b7f      	ldr	r3, [pc, #508]	; (8001fcc <HAL_RCC_OscConfig+0x4c8>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a7e      	ldr	r2, [pc, #504]	; (8001fcc <HAL_RCC_OscConfig+0x4c8>)
 8001dd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dda:	f7ff faf3 	bl	80013c4 <HAL_GetTick>
 8001dde:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001de0:	e008      	b.n	8001df4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001de2:	f7ff faef 	bl	80013c4 <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	2b64      	cmp	r3, #100	; 0x64
 8001dee:	d901      	bls.n	8001df4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e103      	b.n	8001ffc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df4:	4b75      	ldr	r3, [pc, #468]	; (8001fcc <HAL_RCC_OscConfig+0x4c8>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d0f0      	beq.n	8001de2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d106      	bne.n	8001e16 <HAL_RCC_OscConfig+0x312>
 8001e08:	4b6f      	ldr	r3, [pc, #444]	; (8001fc8 <HAL_RCC_OscConfig+0x4c4>)
 8001e0a:	6a1b      	ldr	r3, [r3, #32]
 8001e0c:	4a6e      	ldr	r2, [pc, #440]	; (8001fc8 <HAL_RCC_OscConfig+0x4c4>)
 8001e0e:	f043 0301 	orr.w	r3, r3, #1
 8001e12:	6213      	str	r3, [r2, #32]
 8001e14:	e02d      	b.n	8001e72 <HAL_RCC_OscConfig+0x36e>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d10c      	bne.n	8001e38 <HAL_RCC_OscConfig+0x334>
 8001e1e:	4b6a      	ldr	r3, [pc, #424]	; (8001fc8 <HAL_RCC_OscConfig+0x4c4>)
 8001e20:	6a1b      	ldr	r3, [r3, #32]
 8001e22:	4a69      	ldr	r2, [pc, #420]	; (8001fc8 <HAL_RCC_OscConfig+0x4c4>)
 8001e24:	f023 0301 	bic.w	r3, r3, #1
 8001e28:	6213      	str	r3, [r2, #32]
 8001e2a:	4b67      	ldr	r3, [pc, #412]	; (8001fc8 <HAL_RCC_OscConfig+0x4c4>)
 8001e2c:	6a1b      	ldr	r3, [r3, #32]
 8001e2e:	4a66      	ldr	r2, [pc, #408]	; (8001fc8 <HAL_RCC_OscConfig+0x4c4>)
 8001e30:	f023 0304 	bic.w	r3, r3, #4
 8001e34:	6213      	str	r3, [r2, #32]
 8001e36:	e01c      	b.n	8001e72 <HAL_RCC_OscConfig+0x36e>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	2b05      	cmp	r3, #5
 8001e3e:	d10c      	bne.n	8001e5a <HAL_RCC_OscConfig+0x356>
 8001e40:	4b61      	ldr	r3, [pc, #388]	; (8001fc8 <HAL_RCC_OscConfig+0x4c4>)
 8001e42:	6a1b      	ldr	r3, [r3, #32]
 8001e44:	4a60      	ldr	r2, [pc, #384]	; (8001fc8 <HAL_RCC_OscConfig+0x4c4>)
 8001e46:	f043 0304 	orr.w	r3, r3, #4
 8001e4a:	6213      	str	r3, [r2, #32]
 8001e4c:	4b5e      	ldr	r3, [pc, #376]	; (8001fc8 <HAL_RCC_OscConfig+0x4c4>)
 8001e4e:	6a1b      	ldr	r3, [r3, #32]
 8001e50:	4a5d      	ldr	r2, [pc, #372]	; (8001fc8 <HAL_RCC_OscConfig+0x4c4>)
 8001e52:	f043 0301 	orr.w	r3, r3, #1
 8001e56:	6213      	str	r3, [r2, #32]
 8001e58:	e00b      	b.n	8001e72 <HAL_RCC_OscConfig+0x36e>
 8001e5a:	4b5b      	ldr	r3, [pc, #364]	; (8001fc8 <HAL_RCC_OscConfig+0x4c4>)
 8001e5c:	6a1b      	ldr	r3, [r3, #32]
 8001e5e:	4a5a      	ldr	r2, [pc, #360]	; (8001fc8 <HAL_RCC_OscConfig+0x4c4>)
 8001e60:	f023 0301 	bic.w	r3, r3, #1
 8001e64:	6213      	str	r3, [r2, #32]
 8001e66:	4b58      	ldr	r3, [pc, #352]	; (8001fc8 <HAL_RCC_OscConfig+0x4c4>)
 8001e68:	6a1b      	ldr	r3, [r3, #32]
 8001e6a:	4a57      	ldr	r2, [pc, #348]	; (8001fc8 <HAL_RCC_OscConfig+0x4c4>)
 8001e6c:	f023 0304 	bic.w	r3, r3, #4
 8001e70:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d015      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e7a:	f7ff faa3 	bl	80013c4 <HAL_GetTick>
 8001e7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e80:	e00a      	b.n	8001e98 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e82:	f7ff fa9f 	bl	80013c4 <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d901      	bls.n	8001e98 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e0b1      	b.n	8001ffc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e98:	4b4b      	ldr	r3, [pc, #300]	; (8001fc8 <HAL_RCC_OscConfig+0x4c4>)
 8001e9a:	6a1b      	ldr	r3, [r3, #32]
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d0ee      	beq.n	8001e82 <HAL_RCC_OscConfig+0x37e>
 8001ea4:	e014      	b.n	8001ed0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ea6:	f7ff fa8d 	bl	80013c4 <HAL_GetTick>
 8001eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eac:	e00a      	b.n	8001ec4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eae:	f7ff fa89 	bl	80013c4 <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d901      	bls.n	8001ec4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e09b      	b.n	8001ffc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ec4:	4b40      	ldr	r3, [pc, #256]	; (8001fc8 <HAL_RCC_OscConfig+0x4c4>)
 8001ec6:	6a1b      	ldr	r3, [r3, #32]
 8001ec8:	f003 0302 	and.w	r3, r3, #2
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d1ee      	bne.n	8001eae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ed0:	7dfb      	ldrb	r3, [r7, #23]
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d105      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ed6:	4b3c      	ldr	r3, [pc, #240]	; (8001fc8 <HAL_RCC_OscConfig+0x4c4>)
 8001ed8:	69db      	ldr	r3, [r3, #28]
 8001eda:	4a3b      	ldr	r2, [pc, #236]	; (8001fc8 <HAL_RCC_OscConfig+0x4c4>)
 8001edc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ee0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	69db      	ldr	r3, [r3, #28]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	f000 8087 	beq.w	8001ffa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001eec:	4b36      	ldr	r3, [pc, #216]	; (8001fc8 <HAL_RCC_OscConfig+0x4c4>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f003 030c 	and.w	r3, r3, #12
 8001ef4:	2b08      	cmp	r3, #8
 8001ef6:	d061      	beq.n	8001fbc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	69db      	ldr	r3, [r3, #28]
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d146      	bne.n	8001f8e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f00:	4b33      	ldr	r3, [pc, #204]	; (8001fd0 <HAL_RCC_OscConfig+0x4cc>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f06:	f7ff fa5d 	bl	80013c4 <HAL_GetTick>
 8001f0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f0c:	e008      	b.n	8001f20 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f0e:	f7ff fa59 	bl	80013c4 <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d901      	bls.n	8001f20 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e06d      	b.n	8001ffc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f20:	4b29      	ldr	r3, [pc, #164]	; (8001fc8 <HAL_RCC_OscConfig+0x4c4>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d1f0      	bne.n	8001f0e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a1b      	ldr	r3, [r3, #32]
 8001f30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f34:	d108      	bne.n	8001f48 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f36:	4b24      	ldr	r3, [pc, #144]	; (8001fc8 <HAL_RCC_OscConfig+0x4c4>)
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	4921      	ldr	r1, [pc, #132]	; (8001fc8 <HAL_RCC_OscConfig+0x4c4>)
 8001f44:	4313      	orrs	r3, r2
 8001f46:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f48:	4b1f      	ldr	r3, [pc, #124]	; (8001fc8 <HAL_RCC_OscConfig+0x4c4>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a19      	ldr	r1, [r3, #32]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f58:	430b      	orrs	r3, r1
 8001f5a:	491b      	ldr	r1, [pc, #108]	; (8001fc8 <HAL_RCC_OscConfig+0x4c4>)
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f60:	4b1b      	ldr	r3, [pc, #108]	; (8001fd0 <HAL_RCC_OscConfig+0x4cc>)
 8001f62:	2201      	movs	r2, #1
 8001f64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f66:	f7ff fa2d 	bl	80013c4 <HAL_GetTick>
 8001f6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f6c:	e008      	b.n	8001f80 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f6e:	f7ff fa29 	bl	80013c4 <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e03d      	b.n	8001ffc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f80:	4b11      	ldr	r3, [pc, #68]	; (8001fc8 <HAL_RCC_OscConfig+0x4c4>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d0f0      	beq.n	8001f6e <HAL_RCC_OscConfig+0x46a>
 8001f8c:	e035      	b.n	8001ffa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f8e:	4b10      	ldr	r3, [pc, #64]	; (8001fd0 <HAL_RCC_OscConfig+0x4cc>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f94:	f7ff fa16 	bl	80013c4 <HAL_GetTick>
 8001f98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f9a:	e008      	b.n	8001fae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f9c:	f7ff fa12 	bl	80013c4 <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e026      	b.n	8001ffc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fae:	4b06      	ldr	r3, [pc, #24]	; (8001fc8 <HAL_RCC_OscConfig+0x4c4>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d1f0      	bne.n	8001f9c <HAL_RCC_OscConfig+0x498>
 8001fba:	e01e      	b.n	8001ffa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	69db      	ldr	r3, [r3, #28]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d107      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e019      	b.n	8001ffc <HAL_RCC_OscConfig+0x4f8>
 8001fc8:	40021000 	.word	0x40021000
 8001fcc:	40007000 	.word	0x40007000
 8001fd0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fd4:	4b0b      	ldr	r3, [pc, #44]	; (8002004 <HAL_RCC_OscConfig+0x500>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a1b      	ldr	r3, [r3, #32]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d106      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d001      	beq.n	8001ffa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e000      	b.n	8001ffc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3718      	adds	r7, #24
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	40021000 	.word	0x40021000

08002008 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d101      	bne.n	800201c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e0d0      	b.n	80021be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800201c:	4b6a      	ldr	r3, [pc, #424]	; (80021c8 <HAL_RCC_ClockConfig+0x1c0>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0307 	and.w	r3, r3, #7
 8002024:	683a      	ldr	r2, [r7, #0]
 8002026:	429a      	cmp	r2, r3
 8002028:	d910      	bls.n	800204c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800202a:	4b67      	ldr	r3, [pc, #412]	; (80021c8 <HAL_RCC_ClockConfig+0x1c0>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f023 0207 	bic.w	r2, r3, #7
 8002032:	4965      	ldr	r1, [pc, #404]	; (80021c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	4313      	orrs	r3, r2
 8002038:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800203a:	4b63      	ldr	r3, [pc, #396]	; (80021c8 <HAL_RCC_ClockConfig+0x1c0>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0307 	and.w	r3, r3, #7
 8002042:	683a      	ldr	r2, [r7, #0]
 8002044:	429a      	cmp	r2, r3
 8002046:	d001      	beq.n	800204c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e0b8      	b.n	80021be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0302 	and.w	r3, r3, #2
 8002054:	2b00      	cmp	r3, #0
 8002056:	d020      	beq.n	800209a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0304 	and.w	r3, r3, #4
 8002060:	2b00      	cmp	r3, #0
 8002062:	d005      	beq.n	8002070 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002064:	4b59      	ldr	r3, [pc, #356]	; (80021cc <HAL_RCC_ClockConfig+0x1c4>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	4a58      	ldr	r2, [pc, #352]	; (80021cc <HAL_RCC_ClockConfig+0x1c4>)
 800206a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800206e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0308 	and.w	r3, r3, #8
 8002078:	2b00      	cmp	r3, #0
 800207a:	d005      	beq.n	8002088 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800207c:	4b53      	ldr	r3, [pc, #332]	; (80021cc <HAL_RCC_ClockConfig+0x1c4>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	4a52      	ldr	r2, [pc, #328]	; (80021cc <HAL_RCC_ClockConfig+0x1c4>)
 8002082:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002086:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002088:	4b50      	ldr	r3, [pc, #320]	; (80021cc <HAL_RCC_ClockConfig+0x1c4>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	494d      	ldr	r1, [pc, #308]	; (80021cc <HAL_RCC_ClockConfig+0x1c4>)
 8002096:	4313      	orrs	r3, r2
 8002098:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d040      	beq.n	8002128 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d107      	bne.n	80020be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ae:	4b47      	ldr	r3, [pc, #284]	; (80021cc <HAL_RCC_ClockConfig+0x1c4>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d115      	bne.n	80020e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e07f      	b.n	80021be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d107      	bne.n	80020d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020c6:	4b41      	ldr	r3, [pc, #260]	; (80021cc <HAL_RCC_ClockConfig+0x1c4>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d109      	bne.n	80020e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e073      	b.n	80021be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020d6:	4b3d      	ldr	r3, [pc, #244]	; (80021cc <HAL_RCC_ClockConfig+0x1c4>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d101      	bne.n	80020e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e06b      	b.n	80021be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020e6:	4b39      	ldr	r3, [pc, #228]	; (80021cc <HAL_RCC_ClockConfig+0x1c4>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f023 0203 	bic.w	r2, r3, #3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	4936      	ldr	r1, [pc, #216]	; (80021cc <HAL_RCC_ClockConfig+0x1c4>)
 80020f4:	4313      	orrs	r3, r2
 80020f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020f8:	f7ff f964 	bl	80013c4 <HAL_GetTick>
 80020fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020fe:	e00a      	b.n	8002116 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002100:	f7ff f960 	bl	80013c4 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	f241 3288 	movw	r2, #5000	; 0x1388
 800210e:	4293      	cmp	r3, r2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e053      	b.n	80021be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002116:	4b2d      	ldr	r3, [pc, #180]	; (80021cc <HAL_RCC_ClockConfig+0x1c4>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f003 020c 	and.w	r2, r3, #12
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	429a      	cmp	r2, r3
 8002126:	d1eb      	bne.n	8002100 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002128:	4b27      	ldr	r3, [pc, #156]	; (80021c8 <HAL_RCC_ClockConfig+0x1c0>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0307 	and.w	r3, r3, #7
 8002130:	683a      	ldr	r2, [r7, #0]
 8002132:	429a      	cmp	r2, r3
 8002134:	d210      	bcs.n	8002158 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002136:	4b24      	ldr	r3, [pc, #144]	; (80021c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f023 0207 	bic.w	r2, r3, #7
 800213e:	4922      	ldr	r1, [pc, #136]	; (80021c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	4313      	orrs	r3, r2
 8002144:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002146:	4b20      	ldr	r3, [pc, #128]	; (80021c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0307 	and.w	r3, r3, #7
 800214e:	683a      	ldr	r2, [r7, #0]
 8002150:	429a      	cmp	r2, r3
 8002152:	d001      	beq.n	8002158 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e032      	b.n	80021be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0304 	and.w	r3, r3, #4
 8002160:	2b00      	cmp	r3, #0
 8002162:	d008      	beq.n	8002176 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002164:	4b19      	ldr	r3, [pc, #100]	; (80021cc <HAL_RCC_ClockConfig+0x1c4>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	4916      	ldr	r1, [pc, #88]	; (80021cc <HAL_RCC_ClockConfig+0x1c4>)
 8002172:	4313      	orrs	r3, r2
 8002174:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0308 	and.w	r3, r3, #8
 800217e:	2b00      	cmp	r3, #0
 8002180:	d009      	beq.n	8002196 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002182:	4b12      	ldr	r3, [pc, #72]	; (80021cc <HAL_RCC_ClockConfig+0x1c4>)
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	00db      	lsls	r3, r3, #3
 8002190:	490e      	ldr	r1, [pc, #56]	; (80021cc <HAL_RCC_ClockConfig+0x1c4>)
 8002192:	4313      	orrs	r3, r2
 8002194:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002196:	f000 f821 	bl	80021dc <HAL_RCC_GetSysClockFreq>
 800219a:	4602      	mov	r2, r0
 800219c:	4b0b      	ldr	r3, [pc, #44]	; (80021cc <HAL_RCC_ClockConfig+0x1c4>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	091b      	lsrs	r3, r3, #4
 80021a2:	f003 030f 	and.w	r3, r3, #15
 80021a6:	490a      	ldr	r1, [pc, #40]	; (80021d0 <HAL_RCC_ClockConfig+0x1c8>)
 80021a8:	5ccb      	ldrb	r3, [r1, r3]
 80021aa:	fa22 f303 	lsr.w	r3, r2, r3
 80021ae:	4a09      	ldr	r2, [pc, #36]	; (80021d4 <HAL_RCC_ClockConfig+0x1cc>)
 80021b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021b2:	4b09      	ldr	r3, [pc, #36]	; (80021d8 <HAL_RCC_ClockConfig+0x1d0>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7ff f8c2 	bl	8001340 <HAL_InitTick>

  return HAL_OK;
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3710      	adds	r7, #16
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	40022000 	.word	0x40022000
 80021cc:	40021000 	.word	0x40021000
 80021d0:	08005e0c 	.word	0x08005e0c
 80021d4:	20000018 	.word	0x20000018
 80021d8:	2000001c 	.word	0x2000001c

080021dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021dc:	b490      	push	{r4, r7}
 80021de:	b08a      	sub	sp, #40	; 0x28
 80021e0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80021e2:	4b29      	ldr	r3, [pc, #164]	; (8002288 <HAL_RCC_GetSysClockFreq+0xac>)
 80021e4:	1d3c      	adds	r4, r7, #4
 80021e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80021ec:	f240 2301 	movw	r3, #513	; 0x201
 80021f0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021f2:	2300      	movs	r3, #0
 80021f4:	61fb      	str	r3, [r7, #28]
 80021f6:	2300      	movs	r3, #0
 80021f8:	61bb      	str	r3, [r7, #24]
 80021fa:	2300      	movs	r3, #0
 80021fc:	627b      	str	r3, [r7, #36]	; 0x24
 80021fe:	2300      	movs	r3, #0
 8002200:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002202:	2300      	movs	r3, #0
 8002204:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002206:	4b21      	ldr	r3, [pc, #132]	; (800228c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	f003 030c 	and.w	r3, r3, #12
 8002212:	2b04      	cmp	r3, #4
 8002214:	d002      	beq.n	800221c <HAL_RCC_GetSysClockFreq+0x40>
 8002216:	2b08      	cmp	r3, #8
 8002218:	d003      	beq.n	8002222 <HAL_RCC_GetSysClockFreq+0x46>
 800221a:	e02b      	b.n	8002274 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800221c:	4b1c      	ldr	r3, [pc, #112]	; (8002290 <HAL_RCC_GetSysClockFreq+0xb4>)
 800221e:	623b      	str	r3, [r7, #32]
      break;
 8002220:	e02b      	b.n	800227a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	0c9b      	lsrs	r3, r3, #18
 8002226:	f003 030f 	and.w	r3, r3, #15
 800222a:	3328      	adds	r3, #40	; 0x28
 800222c:	443b      	add	r3, r7
 800222e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002232:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d012      	beq.n	8002264 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800223e:	4b13      	ldr	r3, [pc, #76]	; (800228c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	0c5b      	lsrs	r3, r3, #17
 8002244:	f003 0301 	and.w	r3, r3, #1
 8002248:	3328      	adds	r3, #40	; 0x28
 800224a:	443b      	add	r3, r7
 800224c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002250:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	4a0e      	ldr	r2, [pc, #56]	; (8002290 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002256:	fb03 f202 	mul.w	r2, r3, r2
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002260:	627b      	str	r3, [r7, #36]	; 0x24
 8002262:	e004      	b.n	800226e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	4a0b      	ldr	r2, [pc, #44]	; (8002294 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002268:	fb02 f303 	mul.w	r3, r2, r3
 800226c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800226e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002270:	623b      	str	r3, [r7, #32]
      break;
 8002272:	e002      	b.n	800227a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002274:	4b06      	ldr	r3, [pc, #24]	; (8002290 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002276:	623b      	str	r3, [r7, #32]
      break;
 8002278:	bf00      	nop
    }
  }
  return sysclockfreq;
 800227a:	6a3b      	ldr	r3, [r7, #32]
}
 800227c:	4618      	mov	r0, r3
 800227e:	3728      	adds	r7, #40	; 0x28
 8002280:	46bd      	mov	sp, r7
 8002282:	bc90      	pop	{r4, r7}
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	08005dfc 	.word	0x08005dfc
 800228c:	40021000 	.word	0x40021000
 8002290:	007a1200 	.word	0x007a1200
 8002294:	003d0900 	.word	0x003d0900

08002298 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800229c:	4b02      	ldr	r3, [pc, #8]	; (80022a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800229e:	681b      	ldr	r3, [r3, #0]
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bc80      	pop	{r7}
 80022a6:	4770      	bx	lr
 80022a8:	20000018 	.word	0x20000018

080022ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80022b0:	f7ff fff2 	bl	8002298 <HAL_RCC_GetHCLKFreq>
 80022b4:	4602      	mov	r2, r0
 80022b6:	4b05      	ldr	r3, [pc, #20]	; (80022cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	0a1b      	lsrs	r3, r3, #8
 80022bc:	f003 0307 	and.w	r3, r3, #7
 80022c0:	4903      	ldr	r1, [pc, #12]	; (80022d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022c2:	5ccb      	ldrb	r3, [r1, r3]
 80022c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	40021000 	.word	0x40021000
 80022d0:	08005e1c 	.word	0x08005e1c

080022d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80022d8:	f7ff ffde 	bl	8002298 <HAL_RCC_GetHCLKFreq>
 80022dc:	4602      	mov	r2, r0
 80022de:	4b05      	ldr	r3, [pc, #20]	; (80022f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	0adb      	lsrs	r3, r3, #11
 80022e4:	f003 0307 	and.w	r3, r3, #7
 80022e8:	4903      	ldr	r1, [pc, #12]	; (80022f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022ea:	5ccb      	ldrb	r3, [r1, r3]
 80022ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40021000 	.word	0x40021000
 80022f8:	08005e1c 	.word	0x08005e1c

080022fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002304:	4b0a      	ldr	r3, [pc, #40]	; (8002330 <RCC_Delay+0x34>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a0a      	ldr	r2, [pc, #40]	; (8002334 <RCC_Delay+0x38>)
 800230a:	fba2 2303 	umull	r2, r3, r2, r3
 800230e:	0a5b      	lsrs	r3, r3, #9
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	fb02 f303 	mul.w	r3, r2, r3
 8002316:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002318:	bf00      	nop
  }
  while (Delay --);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	1e5a      	subs	r2, r3, #1
 800231e:	60fa      	str	r2, [r7, #12]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d1f9      	bne.n	8002318 <RCC_Delay+0x1c>
}
 8002324:	bf00      	nop
 8002326:	bf00      	nop
 8002328:	3714      	adds	r7, #20
 800232a:	46bd      	mov	sp, r7
 800232c:	bc80      	pop	{r7}
 800232e:	4770      	bx	lr
 8002330:	20000018 	.word	0x20000018
 8002334:	10624dd3 	.word	0x10624dd3

08002338 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e076      	b.n	8002438 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234e:	2b00      	cmp	r3, #0
 8002350:	d108      	bne.n	8002364 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800235a:	d009      	beq.n	8002370 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	61da      	str	r2, [r3, #28]
 8002362:	e005      	b.n	8002370 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800237c:	b2db      	uxtb	r3, r3
 800237e:	2b00      	cmp	r3, #0
 8002380:	d106      	bne.n	8002390 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f7fe fc5e 	bl	8000c4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2202      	movs	r2, #2
 8002394:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023a6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80023b8:	431a      	orrs	r2, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023c2:	431a      	orrs	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	691b      	ldr	r3, [r3, #16]
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	431a      	orrs	r2, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	695b      	ldr	r3, [r3, #20]
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	431a      	orrs	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023e0:	431a      	orrs	r2, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	69db      	ldr	r3, [r3, #28]
 80023e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023ea:	431a      	orrs	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6a1b      	ldr	r3, [r3, #32]
 80023f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023f4:	ea42 0103 	orr.w	r1, r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023fc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	430a      	orrs	r2, r1
 8002406:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	699b      	ldr	r3, [r3, #24]
 800240c:	0c1a      	lsrs	r2, r3, #16
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f002 0204 	and.w	r2, r2, #4
 8002416:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	69da      	ldr	r2, [r3, #28]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002426:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2201      	movs	r2, #1
 8002432:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002436:	2300      	movs	r3, #0
}
 8002438:	4618      	mov	r0, r3
 800243a:	3708      	adds	r7, #8
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b088      	sub	sp, #32
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	603b      	str	r3, [r7, #0]
 800244c:	4613      	mov	r3, r2
 800244e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002450:	2300      	movs	r3, #0
 8002452:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800245a:	2b01      	cmp	r3, #1
 800245c:	d101      	bne.n	8002462 <HAL_SPI_Transmit+0x22>
 800245e:	2302      	movs	r3, #2
 8002460:	e126      	b.n	80026b0 <HAL_SPI_Transmit+0x270>
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2201      	movs	r2, #1
 8002466:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800246a:	f7fe ffab 	bl	80013c4 <HAL_GetTick>
 800246e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002470:	88fb      	ldrh	r3, [r7, #6]
 8002472:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800247a:	b2db      	uxtb	r3, r3
 800247c:	2b01      	cmp	r3, #1
 800247e:	d002      	beq.n	8002486 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002480:	2302      	movs	r3, #2
 8002482:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002484:	e10b      	b.n	800269e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d002      	beq.n	8002492 <HAL_SPI_Transmit+0x52>
 800248c:	88fb      	ldrh	r3, [r7, #6]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d102      	bne.n	8002498 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002496:	e102      	b.n	800269e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2203      	movs	r2, #3
 800249c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2200      	movs	r2, #0
 80024a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	68ba      	ldr	r2, [r7, #8]
 80024aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	88fa      	ldrh	r2, [r7, #6]
 80024b0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	88fa      	ldrh	r2, [r7, #6]
 80024b6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2200      	movs	r2, #0
 80024bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2200      	movs	r2, #0
 80024c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2200      	movs	r2, #0
 80024c8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2200      	movs	r2, #0
 80024ce:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2200      	movs	r2, #0
 80024d4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024de:	d10f      	bne.n	8002500 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024ee:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024fe:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800250a:	2b40      	cmp	r3, #64	; 0x40
 800250c:	d007      	beq.n	800251e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800251c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002526:	d14b      	bne.n	80025c0 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d002      	beq.n	8002536 <HAL_SPI_Transmit+0xf6>
 8002530:	8afb      	ldrh	r3, [r7, #22]
 8002532:	2b01      	cmp	r3, #1
 8002534:	d13e      	bne.n	80025b4 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253a:	881a      	ldrh	r2, [r3, #0]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002546:	1c9a      	adds	r2, r3, #2
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002550:	b29b      	uxth	r3, r3
 8002552:	3b01      	subs	r3, #1
 8002554:	b29a      	uxth	r2, r3
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800255a:	e02b      	b.n	80025b4 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	2b02      	cmp	r3, #2
 8002568:	d112      	bne.n	8002590 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256e:	881a      	ldrh	r2, [r3, #0]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257a:	1c9a      	adds	r2, r3, #2
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002584:	b29b      	uxth	r3, r3
 8002586:	3b01      	subs	r3, #1
 8002588:	b29a      	uxth	r2, r3
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	86da      	strh	r2, [r3, #54]	; 0x36
 800258e:	e011      	b.n	80025b4 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002590:	f7fe ff18 	bl	80013c4 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	683a      	ldr	r2, [r7, #0]
 800259c:	429a      	cmp	r2, r3
 800259e:	d803      	bhi.n	80025a8 <HAL_SPI_Transmit+0x168>
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025a6:	d102      	bne.n	80025ae <HAL_SPI_Transmit+0x16e>
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d102      	bne.n	80025b4 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80025b2:	e074      	b.n	800269e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d1ce      	bne.n	800255c <HAL_SPI_Transmit+0x11c>
 80025be:	e04c      	b.n	800265a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d002      	beq.n	80025ce <HAL_SPI_Transmit+0x18e>
 80025c8:	8afb      	ldrh	r3, [r7, #22]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d140      	bne.n	8002650 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	330c      	adds	r3, #12
 80025d8:	7812      	ldrb	r2, [r2, #0]
 80025da:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e0:	1c5a      	adds	r2, r3, #1
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	3b01      	subs	r3, #1
 80025ee:	b29a      	uxth	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80025f4:	e02c      	b.n	8002650 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f003 0302 	and.w	r3, r3, #2
 8002600:	2b02      	cmp	r3, #2
 8002602:	d113      	bne.n	800262c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	330c      	adds	r3, #12
 800260e:	7812      	ldrb	r2, [r2, #0]
 8002610:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002616:	1c5a      	adds	r2, r3, #1
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002620:	b29b      	uxth	r3, r3
 8002622:	3b01      	subs	r3, #1
 8002624:	b29a      	uxth	r2, r3
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	86da      	strh	r2, [r3, #54]	; 0x36
 800262a:	e011      	b.n	8002650 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800262c:	f7fe feca 	bl	80013c4 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	683a      	ldr	r2, [r7, #0]
 8002638:	429a      	cmp	r2, r3
 800263a:	d803      	bhi.n	8002644 <HAL_SPI_Transmit+0x204>
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002642:	d102      	bne.n	800264a <HAL_SPI_Transmit+0x20a>
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d102      	bne.n	8002650 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800264e:	e026      	b.n	800269e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002654:	b29b      	uxth	r3, r3
 8002656:	2b00      	cmp	r3, #0
 8002658:	d1cd      	bne.n	80025f6 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	6839      	ldr	r1, [r7, #0]
 800265e:	68f8      	ldr	r0, [r7, #12]
 8002660:	f000 f8b2 	bl	80027c8 <SPI_EndRxTxTransaction>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d002      	beq.n	8002670 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2220      	movs	r2, #32
 800266e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d10a      	bne.n	800268e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002678:	2300      	movs	r3, #0
 800267a:	613b      	str	r3, [r7, #16]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	613b      	str	r3, [r7, #16]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	613b      	str	r3, [r7, #16]
 800268c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002692:	2b00      	cmp	r3, #0
 8002694:	d002      	beq.n	800269c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	77fb      	strb	r3, [r7, #31]
 800269a:	e000      	b.n	800269e <HAL_SPI_Transmit+0x25e>
  }

error:
 800269c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2201      	movs	r2, #1
 80026a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80026ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3720      	adds	r7, #32
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b088      	sub	sp, #32
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	603b      	str	r3, [r7, #0]
 80026c4:	4613      	mov	r3, r2
 80026c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80026c8:	f7fe fe7c 	bl	80013c4 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d0:	1a9b      	subs	r3, r3, r2
 80026d2:	683a      	ldr	r2, [r7, #0]
 80026d4:	4413      	add	r3, r2
 80026d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80026d8:	f7fe fe74 	bl	80013c4 <HAL_GetTick>
 80026dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80026de:	4b39      	ldr	r3, [pc, #228]	; (80027c4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	015b      	lsls	r3, r3, #5
 80026e4:	0d1b      	lsrs	r3, r3, #20
 80026e6:	69fa      	ldr	r2, [r7, #28]
 80026e8:	fb02 f303 	mul.w	r3, r2, r3
 80026ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80026ee:	e054      	b.n	800279a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f6:	d050      	beq.n	800279a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80026f8:	f7fe fe64 	bl	80013c4 <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	69fa      	ldr	r2, [r7, #28]
 8002704:	429a      	cmp	r2, r3
 8002706:	d902      	bls.n	800270e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d13d      	bne.n	800278a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	685a      	ldr	r2, [r3, #4]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800271c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002726:	d111      	bne.n	800274c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002730:	d004      	beq.n	800273c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800273a:	d107      	bne.n	800274c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800274a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002750:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002754:	d10f      	bne.n	8002776 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002764:	601a      	str	r2, [r3, #0]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002774:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2201      	movs	r2, #1
 800277a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e017      	b.n	80027ba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d101      	bne.n	8002794 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002790:	2300      	movs	r3, #0
 8002792:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	3b01      	subs	r3, #1
 8002798:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	689a      	ldr	r2, [r3, #8]
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	4013      	ands	r3, r2
 80027a4:	68ba      	ldr	r2, [r7, #8]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	bf0c      	ite	eq
 80027aa:	2301      	moveq	r3, #1
 80027ac:	2300      	movne	r3, #0
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	461a      	mov	r2, r3
 80027b2:	79fb      	ldrb	r3, [r7, #7]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d19b      	bne.n	80026f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3720      	adds	r7, #32
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	20000018 	.word	0x20000018

080027c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b086      	sub	sp, #24
 80027cc:	af02      	add	r7, sp, #8
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	9300      	str	r3, [sp, #0]
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	2200      	movs	r2, #0
 80027dc:	2180      	movs	r1, #128	; 0x80
 80027de:	68f8      	ldr	r0, [r7, #12]
 80027e0:	f7ff ff6a 	bl	80026b8 <SPI_WaitFlagStateUntilTimeout>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d007      	beq.n	80027fa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ee:	f043 0220 	orr.w	r2, r3, #32
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e000      	b.n	80027fc <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80027fa:	2300      	movs	r3, #0
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3710      	adds	r7, #16
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d101      	bne.n	8002816 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e041      	b.n	800289a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b00      	cmp	r3, #0
 8002820:	d106      	bne.n	8002830 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f7fe fa4c 	bl	8000cc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2202      	movs	r2, #2
 8002834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	3304      	adds	r3, #4
 8002840:	4619      	mov	r1, r3
 8002842:	4610      	mov	r0, r2
 8002844:	f000 fa70 	bl	8002d28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3708      	adds	r7, #8
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
	...

080028a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d001      	beq.n	80028bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e03a      	b.n	8002932 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2202      	movs	r2, #2
 80028c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	68da      	ldr	r2, [r3, #12]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f042 0201 	orr.w	r2, r2, #1
 80028d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a18      	ldr	r2, [pc, #96]	; (800293c <HAL_TIM_Base_Start_IT+0x98>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d00e      	beq.n	80028fc <HAL_TIM_Base_Start_IT+0x58>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028e6:	d009      	beq.n	80028fc <HAL_TIM_Base_Start_IT+0x58>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a14      	ldr	r2, [pc, #80]	; (8002940 <HAL_TIM_Base_Start_IT+0x9c>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d004      	beq.n	80028fc <HAL_TIM_Base_Start_IT+0x58>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a13      	ldr	r2, [pc, #76]	; (8002944 <HAL_TIM_Base_Start_IT+0xa0>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d111      	bne.n	8002920 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f003 0307 	and.w	r3, r3, #7
 8002906:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2b06      	cmp	r3, #6
 800290c:	d010      	beq.n	8002930 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f042 0201 	orr.w	r2, r2, #1
 800291c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800291e:	e007      	b.n	8002930 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f042 0201 	orr.w	r2, r2, #1
 800292e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	3714      	adds	r7, #20
 8002936:	46bd      	mov	sp, r7
 8002938:	bc80      	pop	{r7}
 800293a:	4770      	bx	lr
 800293c:	40012c00 	.word	0x40012c00
 8002940:	40000400 	.word	0x40000400
 8002944:	40000800 	.word	0x40000800

08002948 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	2b02      	cmp	r3, #2
 800295c:	d122      	bne.n	80029a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	2b02      	cmp	r3, #2
 800296a:	d11b      	bne.n	80029a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f06f 0202 	mvn.w	r2, #2
 8002974:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2201      	movs	r2, #1
 800297a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	699b      	ldr	r3, [r3, #24]
 8002982:	f003 0303 	and.w	r3, r3, #3
 8002986:	2b00      	cmp	r3, #0
 8002988:	d003      	beq.n	8002992 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 f9b1 	bl	8002cf2 <HAL_TIM_IC_CaptureCallback>
 8002990:	e005      	b.n	800299e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 f9a4 	bl	8002ce0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f000 f9b3 	bl	8002d04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	f003 0304 	and.w	r3, r3, #4
 80029ae:	2b04      	cmp	r3, #4
 80029b0:	d122      	bne.n	80029f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	f003 0304 	and.w	r3, r3, #4
 80029bc:	2b04      	cmp	r3, #4
 80029be:	d11b      	bne.n	80029f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f06f 0204 	mvn.w	r2, #4
 80029c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2202      	movs	r2, #2
 80029ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d003      	beq.n	80029e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 f987 	bl	8002cf2 <HAL_TIM_IC_CaptureCallback>
 80029e4:	e005      	b.n	80029f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 f97a 	bl	8002ce0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f000 f989 	bl	8002d04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	f003 0308 	and.w	r3, r3, #8
 8002a02:	2b08      	cmp	r3, #8
 8002a04:	d122      	bne.n	8002a4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	f003 0308 	and.w	r3, r3, #8
 8002a10:	2b08      	cmp	r3, #8
 8002a12:	d11b      	bne.n	8002a4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f06f 0208 	mvn.w	r2, #8
 8002a1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2204      	movs	r2, #4
 8002a22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	69db      	ldr	r3, [r3, #28]
 8002a2a:	f003 0303 	and.w	r3, r3, #3
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d003      	beq.n	8002a3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f000 f95d 	bl	8002cf2 <HAL_TIM_IC_CaptureCallback>
 8002a38:	e005      	b.n	8002a46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 f950 	bl	8002ce0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f000 f95f 	bl	8002d04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	f003 0310 	and.w	r3, r3, #16
 8002a56:	2b10      	cmp	r3, #16
 8002a58:	d122      	bne.n	8002aa0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	f003 0310 	and.w	r3, r3, #16
 8002a64:	2b10      	cmp	r3, #16
 8002a66:	d11b      	bne.n	8002aa0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f06f 0210 	mvn.w	r2, #16
 8002a70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2208      	movs	r2, #8
 8002a76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	69db      	ldr	r3, [r3, #28]
 8002a7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 f933 	bl	8002cf2 <HAL_TIM_IC_CaptureCallback>
 8002a8c:	e005      	b.n	8002a9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 f926 	bl	8002ce0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f000 f935 	bl	8002d04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d10e      	bne.n	8002acc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	f003 0301 	and.w	r3, r3, #1
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d107      	bne.n	8002acc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f06f 0201 	mvn.w	r2, #1
 8002ac4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f7fe f860 	bl	8000b8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ad6:	2b80      	cmp	r3, #128	; 0x80
 8002ad8:	d10e      	bne.n	8002af8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ae4:	2b80      	cmp	r3, #128	; 0x80
 8002ae6:	d107      	bne.n	8002af8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002af0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 fa77 	bl	8002fe6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b02:	2b40      	cmp	r3, #64	; 0x40
 8002b04:	d10e      	bne.n	8002b24 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b10:	2b40      	cmp	r3, #64	; 0x40
 8002b12:	d107      	bne.n	8002b24 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 f8f9 	bl	8002d16 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	f003 0320 	and.w	r3, r3, #32
 8002b2e:	2b20      	cmp	r3, #32
 8002b30:	d10e      	bne.n	8002b50 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	f003 0320 	and.w	r3, r3, #32
 8002b3c:	2b20      	cmp	r3, #32
 8002b3e:	d107      	bne.n	8002b50 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f06f 0220 	mvn.w	r2, #32
 8002b48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 fa42 	bl	8002fd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b50:	bf00      	nop
 8002b52:	3708      	adds	r7, #8
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d101      	bne.n	8002b70 <HAL_TIM_ConfigClockSource+0x18>
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	e0b3      	b.n	8002cd8 <HAL_TIM_ConfigClockSource+0x180>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2202      	movs	r2, #2
 8002b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b8e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b96:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ba8:	d03e      	beq.n	8002c28 <HAL_TIM_ConfigClockSource+0xd0>
 8002baa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bae:	f200 8087 	bhi.w	8002cc0 <HAL_TIM_ConfigClockSource+0x168>
 8002bb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bb6:	f000 8085 	beq.w	8002cc4 <HAL_TIM_ConfigClockSource+0x16c>
 8002bba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bbe:	d87f      	bhi.n	8002cc0 <HAL_TIM_ConfigClockSource+0x168>
 8002bc0:	2b70      	cmp	r3, #112	; 0x70
 8002bc2:	d01a      	beq.n	8002bfa <HAL_TIM_ConfigClockSource+0xa2>
 8002bc4:	2b70      	cmp	r3, #112	; 0x70
 8002bc6:	d87b      	bhi.n	8002cc0 <HAL_TIM_ConfigClockSource+0x168>
 8002bc8:	2b60      	cmp	r3, #96	; 0x60
 8002bca:	d050      	beq.n	8002c6e <HAL_TIM_ConfigClockSource+0x116>
 8002bcc:	2b60      	cmp	r3, #96	; 0x60
 8002bce:	d877      	bhi.n	8002cc0 <HAL_TIM_ConfigClockSource+0x168>
 8002bd0:	2b50      	cmp	r3, #80	; 0x50
 8002bd2:	d03c      	beq.n	8002c4e <HAL_TIM_ConfigClockSource+0xf6>
 8002bd4:	2b50      	cmp	r3, #80	; 0x50
 8002bd6:	d873      	bhi.n	8002cc0 <HAL_TIM_ConfigClockSource+0x168>
 8002bd8:	2b40      	cmp	r3, #64	; 0x40
 8002bda:	d058      	beq.n	8002c8e <HAL_TIM_ConfigClockSource+0x136>
 8002bdc:	2b40      	cmp	r3, #64	; 0x40
 8002bde:	d86f      	bhi.n	8002cc0 <HAL_TIM_ConfigClockSource+0x168>
 8002be0:	2b30      	cmp	r3, #48	; 0x30
 8002be2:	d064      	beq.n	8002cae <HAL_TIM_ConfigClockSource+0x156>
 8002be4:	2b30      	cmp	r3, #48	; 0x30
 8002be6:	d86b      	bhi.n	8002cc0 <HAL_TIM_ConfigClockSource+0x168>
 8002be8:	2b20      	cmp	r3, #32
 8002bea:	d060      	beq.n	8002cae <HAL_TIM_ConfigClockSource+0x156>
 8002bec:	2b20      	cmp	r3, #32
 8002bee:	d867      	bhi.n	8002cc0 <HAL_TIM_ConfigClockSource+0x168>
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d05c      	beq.n	8002cae <HAL_TIM_ConfigClockSource+0x156>
 8002bf4:	2b10      	cmp	r3, #16
 8002bf6:	d05a      	beq.n	8002cae <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002bf8:	e062      	b.n	8002cc0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6818      	ldr	r0, [r3, #0]
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	6899      	ldr	r1, [r3, #8]
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685a      	ldr	r2, [r3, #4]
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	f000 f966 	bl	8002eda <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c1c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68fa      	ldr	r2, [r7, #12]
 8002c24:	609a      	str	r2, [r3, #8]
      break;
 8002c26:	e04e      	b.n	8002cc6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6818      	ldr	r0, [r3, #0]
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	6899      	ldr	r1, [r3, #8]
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685a      	ldr	r2, [r3, #4]
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	f000 f94f 	bl	8002eda <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	689a      	ldr	r2, [r3, #8]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c4a:	609a      	str	r2, [r3, #8]
      break;
 8002c4c:	e03b      	b.n	8002cc6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6818      	ldr	r0, [r3, #0]
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	6859      	ldr	r1, [r3, #4]
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	f000 f8c6 	bl	8002dec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2150      	movs	r1, #80	; 0x50
 8002c66:	4618      	mov	r0, r3
 8002c68:	f000 f91d 	bl	8002ea6 <TIM_ITRx_SetConfig>
      break;
 8002c6c:	e02b      	b.n	8002cc6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6818      	ldr	r0, [r3, #0]
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	6859      	ldr	r1, [r3, #4]
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	f000 f8e4 	bl	8002e48 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2160      	movs	r1, #96	; 0x60
 8002c86:	4618      	mov	r0, r3
 8002c88:	f000 f90d 	bl	8002ea6 <TIM_ITRx_SetConfig>
      break;
 8002c8c:	e01b      	b.n	8002cc6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6818      	ldr	r0, [r3, #0]
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	6859      	ldr	r1, [r3, #4]
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	f000 f8a6 	bl	8002dec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2140      	movs	r1, #64	; 0x40
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f000 f8fd 	bl	8002ea6 <TIM_ITRx_SetConfig>
      break;
 8002cac:	e00b      	b.n	8002cc6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	4610      	mov	r0, r2
 8002cba:	f000 f8f4 	bl	8002ea6 <TIM_ITRx_SetConfig>
        break;
 8002cbe:	e002      	b.n	8002cc6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002cc0:	bf00      	nop
 8002cc2:	e000      	b.n	8002cc6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002cc4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002cd6:	2300      	movs	r3, #0
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3710      	adds	r7, #16
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ce8:	bf00      	nop
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bc80      	pop	{r7}
 8002cf0:	4770      	bx	lr

08002cf2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002cf2:	b480      	push	{r7}
 8002cf4:	b083      	sub	sp, #12
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002cfa:	bf00      	nop
 8002cfc:	370c      	adds	r7, #12
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bc80      	pop	{r7}
 8002d02:	4770      	bx	lr

08002d04 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d0c:	bf00      	nop
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bc80      	pop	{r7}
 8002d14:	4770      	bx	lr

08002d16 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d16:	b480      	push	{r7}
 8002d18:	b083      	sub	sp, #12
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d1e:	bf00      	nop
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bc80      	pop	{r7}
 8002d26:	4770      	bx	lr

08002d28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b085      	sub	sp, #20
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a29      	ldr	r2, [pc, #164]	; (8002de0 <TIM_Base_SetConfig+0xb8>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d00b      	beq.n	8002d58 <TIM_Base_SetConfig+0x30>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d46:	d007      	beq.n	8002d58 <TIM_Base_SetConfig+0x30>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4a26      	ldr	r2, [pc, #152]	; (8002de4 <TIM_Base_SetConfig+0xbc>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d003      	beq.n	8002d58 <TIM_Base_SetConfig+0x30>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4a25      	ldr	r2, [pc, #148]	; (8002de8 <TIM_Base_SetConfig+0xc0>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d108      	bne.n	8002d6a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a1c      	ldr	r2, [pc, #112]	; (8002de0 <TIM_Base_SetConfig+0xb8>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d00b      	beq.n	8002d8a <TIM_Base_SetConfig+0x62>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d78:	d007      	beq.n	8002d8a <TIM_Base_SetConfig+0x62>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a19      	ldr	r2, [pc, #100]	; (8002de4 <TIM_Base_SetConfig+0xbc>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d003      	beq.n	8002d8a <TIM_Base_SetConfig+0x62>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a18      	ldr	r2, [pc, #96]	; (8002de8 <TIM_Base_SetConfig+0xc0>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d108      	bne.n	8002d9c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	68fa      	ldr	r2, [r7, #12]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	695b      	ldr	r3, [r3, #20]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	68fa      	ldr	r2, [r7, #12]
 8002dae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	689a      	ldr	r2, [r3, #8]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	4a07      	ldr	r2, [pc, #28]	; (8002de0 <TIM_Base_SetConfig+0xb8>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d103      	bne.n	8002dd0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	691a      	ldr	r2, [r3, #16]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	615a      	str	r2, [r3, #20]
}
 8002dd6:	bf00      	nop
 8002dd8:	3714      	adds	r7, #20
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bc80      	pop	{r7}
 8002dde:	4770      	bx	lr
 8002de0:	40012c00 	.word	0x40012c00
 8002de4:	40000400 	.word	0x40000400
 8002de8:	40000800 	.word	0x40000800

08002dec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b087      	sub	sp, #28
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6a1b      	ldr	r3, [r3, #32]
 8002dfc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6a1b      	ldr	r3, [r3, #32]
 8002e02:	f023 0201 	bic.w	r2, r3, #1
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	011b      	lsls	r3, r3, #4
 8002e1c:	693a      	ldr	r2, [r7, #16]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	f023 030a 	bic.w	r3, r3, #10
 8002e28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e2a:	697a      	ldr	r2, [r7, #20]
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	693a      	ldr	r2, [r7, #16]
 8002e36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	697a      	ldr	r2, [r7, #20]
 8002e3c:	621a      	str	r2, [r3, #32]
}
 8002e3e:	bf00      	nop
 8002e40:	371c      	adds	r7, #28
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bc80      	pop	{r7}
 8002e46:	4770      	bx	lr

08002e48 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b087      	sub	sp, #28
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6a1b      	ldr	r3, [r3, #32]
 8002e58:	f023 0210 	bic.w	r2, r3, #16
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	699b      	ldr	r3, [r3, #24]
 8002e64:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6a1b      	ldr	r3, [r3, #32]
 8002e6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e72:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	031b      	lsls	r3, r3, #12
 8002e78:	697a      	ldr	r2, [r7, #20]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e84:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	011b      	lsls	r3, r3, #4
 8002e8a:	693a      	ldr	r2, [r7, #16]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	697a      	ldr	r2, [r7, #20]
 8002e94:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	693a      	ldr	r2, [r7, #16]
 8002e9a:	621a      	str	r2, [r3, #32]
}
 8002e9c:	bf00      	nop
 8002e9e:	371c      	adds	r7, #28
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bc80      	pop	{r7}
 8002ea4:	4770      	bx	lr

08002ea6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ea6:	b480      	push	{r7}
 8002ea8:	b085      	sub	sp, #20
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
 8002eae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ebc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ebe:	683a      	ldr	r2, [r7, #0]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	f043 0307 	orr.w	r3, r3, #7
 8002ec8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	68fa      	ldr	r2, [r7, #12]
 8002ece:	609a      	str	r2, [r3, #8]
}
 8002ed0:	bf00      	nop
 8002ed2:	3714      	adds	r7, #20
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bc80      	pop	{r7}
 8002ed8:	4770      	bx	lr

08002eda <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002eda:	b480      	push	{r7}
 8002edc:	b087      	sub	sp, #28
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	60f8      	str	r0, [r7, #12]
 8002ee2:	60b9      	str	r1, [r7, #8]
 8002ee4:	607a      	str	r2, [r7, #4]
 8002ee6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ef4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	021a      	lsls	r2, r3, #8
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	431a      	orrs	r2, r3
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	697a      	ldr	r2, [r7, #20]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	697a      	ldr	r2, [r7, #20]
 8002f0c:	609a      	str	r2, [r3, #8]
}
 8002f0e:	bf00      	nop
 8002f10:	371c      	adds	r7, #28
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bc80      	pop	{r7}
 8002f16:	4770      	bx	lr

08002f18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d101      	bne.n	8002f30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f2c:	2302      	movs	r3, #2
 8002f2e:	e046      	b.n	8002fbe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2202      	movs	r2, #2
 8002f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	68fa      	ldr	r2, [r7, #12]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68fa      	ldr	r2, [r7, #12]
 8002f68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a16      	ldr	r2, [pc, #88]	; (8002fc8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d00e      	beq.n	8002f92 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f7c:	d009      	beq.n	8002f92 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a12      	ldr	r2, [pc, #72]	; (8002fcc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d004      	beq.n	8002f92 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a10      	ldr	r2, [pc, #64]	; (8002fd0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d10c      	bne.n	8002fac <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	68ba      	ldr	r2, [r7, #8]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68ba      	ldr	r2, [r7, #8]
 8002faa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3714      	adds	r7, #20
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bc80      	pop	{r7}
 8002fc6:	4770      	bx	lr
 8002fc8:	40012c00 	.word	0x40012c00
 8002fcc:	40000400 	.word	0x40000400
 8002fd0:	40000800 	.word	0x40000800

08002fd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002fdc:	bf00      	nop
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bc80      	pop	{r7}
 8002fe4:	4770      	bx	lr

08002fe6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002fe6:	b480      	push	{r7}
 8002fe8:	b083      	sub	sp, #12
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002fee:	bf00      	nop
 8002ff0:	370c      	adds	r7, #12
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bc80      	pop	{r7}
 8002ff6:	4770      	bx	lr

08002ff8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e03f      	b.n	800308a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003010:	b2db      	uxtb	r3, r3
 8003012:	2b00      	cmp	r3, #0
 8003014:	d106      	bne.n	8003024 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f7fd fe6e 	bl	8000d00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2224      	movs	r2, #36	; 0x24
 8003028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	68da      	ldr	r2, [r3, #12]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800303a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f000 fc8f 	bl	8003960 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	691a      	ldr	r2, [r3, #16]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003050:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	695a      	ldr	r2, [r3, #20]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003060:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	68da      	ldr	r2, [r3, #12]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003070:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2220      	movs	r2, #32
 800307c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2220      	movs	r2, #32
 8003084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	3708      	adds	r7, #8
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003092:	b580      	push	{r7, lr}
 8003094:	b08a      	sub	sp, #40	; 0x28
 8003096:	af02      	add	r7, sp, #8
 8003098:	60f8      	str	r0, [r7, #12]
 800309a:	60b9      	str	r1, [r7, #8]
 800309c:	603b      	str	r3, [r7, #0]
 800309e:	4613      	mov	r3, r2
 80030a0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80030a2:	2300      	movs	r3, #0
 80030a4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b20      	cmp	r3, #32
 80030b0:	d17c      	bne.n	80031ac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d002      	beq.n	80030be <HAL_UART_Transmit+0x2c>
 80030b8:	88fb      	ldrh	r3, [r7, #6]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d101      	bne.n	80030c2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e075      	b.n	80031ae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d101      	bne.n	80030d0 <HAL_UART_Transmit+0x3e>
 80030cc:	2302      	movs	r3, #2
 80030ce:	e06e      	b.n	80031ae <HAL_UART_Transmit+0x11c>
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2200      	movs	r2, #0
 80030dc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2221      	movs	r2, #33	; 0x21
 80030e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030e6:	f7fe f96d 	bl	80013c4 <HAL_GetTick>
 80030ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	88fa      	ldrh	r2, [r7, #6]
 80030f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	88fa      	ldrh	r2, [r7, #6]
 80030f6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003100:	d108      	bne.n	8003114 <HAL_UART_Transmit+0x82>
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d104      	bne.n	8003114 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800310a:	2300      	movs	r3, #0
 800310c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	61bb      	str	r3, [r7, #24]
 8003112:	e003      	b.n	800311c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003118:	2300      	movs	r3, #0
 800311a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003124:	e02a      	b.n	800317c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	9300      	str	r3, [sp, #0]
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	2200      	movs	r2, #0
 800312e:	2180      	movs	r1, #128	; 0x80
 8003130:	68f8      	ldr	r0, [r7, #12]
 8003132:	f000 fa41 	bl	80035b8 <UART_WaitOnFlagUntilTimeout>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d001      	beq.n	8003140 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	e036      	b.n	80031ae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d10b      	bne.n	800315e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003146:	69bb      	ldr	r3, [r7, #24]
 8003148:	881b      	ldrh	r3, [r3, #0]
 800314a:	461a      	mov	r2, r3
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003154:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	3302      	adds	r3, #2
 800315a:	61bb      	str	r3, [r7, #24]
 800315c:	e007      	b.n	800316e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	781a      	ldrb	r2, [r3, #0]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	3301      	adds	r3, #1
 800316c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003172:	b29b      	uxth	r3, r3
 8003174:	3b01      	subs	r3, #1
 8003176:	b29a      	uxth	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003180:	b29b      	uxth	r3, r3
 8003182:	2b00      	cmp	r3, #0
 8003184:	d1cf      	bne.n	8003126 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	9300      	str	r3, [sp, #0]
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	2200      	movs	r2, #0
 800318e:	2140      	movs	r1, #64	; 0x40
 8003190:	68f8      	ldr	r0, [r7, #12]
 8003192:	f000 fa11 	bl	80035b8 <UART_WaitOnFlagUntilTimeout>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d001      	beq.n	80031a0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e006      	b.n	80031ae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2220      	movs	r2, #32
 80031a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80031a8:	2300      	movs	r3, #0
 80031aa:	e000      	b.n	80031ae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80031ac:	2302      	movs	r3, #2
  }
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3720      	adds	r7, #32
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b084      	sub	sp, #16
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	60f8      	str	r0, [r7, #12]
 80031be:	60b9      	str	r1, [r7, #8]
 80031c0:	4613      	mov	r3, r2
 80031c2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	2b20      	cmp	r3, #32
 80031ce:	d11d      	bne.n	800320c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d002      	beq.n	80031dc <HAL_UART_Receive_IT+0x26>
 80031d6:	88fb      	ldrh	r3, [r7, #6]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d101      	bne.n	80031e0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e016      	b.n	800320e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d101      	bne.n	80031ee <HAL_UART_Receive_IT+0x38>
 80031ea:	2302      	movs	r3, #2
 80031ec:	e00f      	b.n	800320e <HAL_UART_Receive_IT+0x58>
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2201      	movs	r2, #1
 80031f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2200      	movs	r2, #0
 80031fa:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80031fc:	88fb      	ldrh	r3, [r7, #6]
 80031fe:	461a      	mov	r2, r3
 8003200:	68b9      	ldr	r1, [r7, #8]
 8003202:	68f8      	ldr	r0, [r7, #12]
 8003204:	f000 fa22 	bl	800364c <UART_Start_Receive_IT>
 8003208:	4603      	mov	r3, r0
 800320a:	e000      	b.n	800320e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800320c:	2302      	movs	r3, #2
  }
}
 800320e:	4618      	mov	r0, r3
 8003210:	3710      	adds	r7, #16
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
	...

08003218 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b08a      	sub	sp, #40	; 0x28
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003238:	2300      	movs	r3, #0
 800323a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800323c:	2300      	movs	r3, #0
 800323e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003242:	f003 030f 	and.w	r3, r3, #15
 8003246:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d10d      	bne.n	800326a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800324e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003250:	f003 0320 	and.w	r3, r3, #32
 8003254:	2b00      	cmp	r3, #0
 8003256:	d008      	beq.n	800326a <HAL_UART_IRQHandler+0x52>
 8003258:	6a3b      	ldr	r3, [r7, #32]
 800325a:	f003 0320 	and.w	r3, r3, #32
 800325e:	2b00      	cmp	r3, #0
 8003260:	d003      	beq.n	800326a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 fad2 	bl	800380c <UART_Receive_IT>
      return;
 8003268:	e17b      	b.n	8003562 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	2b00      	cmp	r3, #0
 800326e:	f000 80b1 	beq.w	80033d4 <HAL_UART_IRQHandler+0x1bc>
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	f003 0301 	and.w	r3, r3, #1
 8003278:	2b00      	cmp	r3, #0
 800327a:	d105      	bne.n	8003288 <HAL_UART_IRQHandler+0x70>
 800327c:	6a3b      	ldr	r3, [r7, #32]
 800327e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003282:	2b00      	cmp	r3, #0
 8003284:	f000 80a6 	beq.w	80033d4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	2b00      	cmp	r3, #0
 8003290:	d00a      	beq.n	80032a8 <HAL_UART_IRQHandler+0x90>
 8003292:	6a3b      	ldr	r3, [r7, #32]
 8003294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003298:	2b00      	cmp	r3, #0
 800329a:	d005      	beq.n	80032a8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a0:	f043 0201 	orr.w	r2, r3, #1
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80032a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032aa:	f003 0304 	and.w	r3, r3, #4
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d00a      	beq.n	80032c8 <HAL_UART_IRQHandler+0xb0>
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	f003 0301 	and.w	r3, r3, #1
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d005      	beq.n	80032c8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c0:	f043 0202 	orr.w	r2, r3, #2
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80032c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00a      	beq.n	80032e8 <HAL_UART_IRQHandler+0xd0>
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	f003 0301 	and.w	r3, r3, #1
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d005      	beq.n	80032e8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e0:	f043 0204 	orr.w	r2, r3, #4
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80032e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ea:	f003 0308 	and.w	r3, r3, #8
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d00f      	beq.n	8003312 <HAL_UART_IRQHandler+0xfa>
 80032f2:	6a3b      	ldr	r3, [r7, #32]
 80032f4:	f003 0320 	and.w	r3, r3, #32
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d104      	bne.n	8003306 <HAL_UART_IRQHandler+0xee>
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	f003 0301 	and.w	r3, r3, #1
 8003302:	2b00      	cmp	r3, #0
 8003304:	d005      	beq.n	8003312 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330a:	f043 0208 	orr.w	r2, r3, #8
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003316:	2b00      	cmp	r3, #0
 8003318:	f000 811e 	beq.w	8003558 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800331c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331e:	f003 0320 	and.w	r3, r3, #32
 8003322:	2b00      	cmp	r3, #0
 8003324:	d007      	beq.n	8003336 <HAL_UART_IRQHandler+0x11e>
 8003326:	6a3b      	ldr	r3, [r7, #32]
 8003328:	f003 0320 	and.w	r3, r3, #32
 800332c:	2b00      	cmp	r3, #0
 800332e:	d002      	beq.n	8003336 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f000 fa6b 	bl	800380c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	695b      	ldr	r3, [r3, #20]
 800333c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003340:	2b00      	cmp	r3, #0
 8003342:	bf14      	ite	ne
 8003344:	2301      	movne	r3, #1
 8003346:	2300      	moveq	r3, #0
 8003348:	b2db      	uxtb	r3, r3
 800334a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003350:	f003 0308 	and.w	r3, r3, #8
 8003354:	2b00      	cmp	r3, #0
 8003356:	d102      	bne.n	800335e <HAL_UART_IRQHandler+0x146>
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d031      	beq.n	80033c2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f000 f9ad 	bl	80036be <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800336e:	2b00      	cmp	r3, #0
 8003370:	d023      	beq.n	80033ba <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	695a      	ldr	r2, [r3, #20]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003380:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003386:	2b00      	cmp	r3, #0
 8003388:	d013      	beq.n	80033b2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800338e:	4a76      	ldr	r2, [pc, #472]	; (8003568 <HAL_UART_IRQHandler+0x350>)
 8003390:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003396:	4618      	mov	r0, r3
 8003398:	f7fe f98a 	bl	80016b0 <HAL_DMA_Abort_IT>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d016      	beq.n	80033d0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80033ac:	4610      	mov	r0, r2
 80033ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033b0:	e00e      	b.n	80033d0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f000 f8ec 	bl	8003590 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033b8:	e00a      	b.n	80033d0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 f8e8 	bl	8003590 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033c0:	e006      	b.n	80033d0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 f8e4 	bl	8003590 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80033ce:	e0c3      	b.n	8003558 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033d0:	bf00      	nop
    return;
 80033d2:	e0c1      	b.n	8003558 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d8:	2b01      	cmp	r3, #1
 80033da:	f040 80a1 	bne.w	8003520 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80033de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e0:	f003 0310 	and.w	r3, r3, #16
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	f000 809b 	beq.w	8003520 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80033ea:	6a3b      	ldr	r3, [r7, #32]
 80033ec:	f003 0310 	and.w	r3, r3, #16
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	f000 8095 	beq.w	8003520 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80033f6:	2300      	movs	r3, #0
 80033f8:	60fb      	str	r3, [r7, #12]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	60fb      	str	r3, [r7, #12]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	60fb      	str	r3, [r7, #12]
 800340a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	695b      	ldr	r3, [r3, #20]
 8003412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003416:	2b00      	cmp	r3, #0
 8003418:	d04e      	beq.n	80034b8 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003424:	8a3b      	ldrh	r3, [r7, #16]
 8003426:	2b00      	cmp	r3, #0
 8003428:	f000 8098 	beq.w	800355c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003430:	8a3a      	ldrh	r2, [r7, #16]
 8003432:	429a      	cmp	r2, r3
 8003434:	f080 8092 	bcs.w	800355c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	8a3a      	ldrh	r2, [r7, #16]
 800343c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003442:	699b      	ldr	r3, [r3, #24]
 8003444:	2b20      	cmp	r3, #32
 8003446:	d02b      	beq.n	80034a0 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	68da      	ldr	r2, [r3, #12]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003456:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	695a      	ldr	r2, [r3, #20]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f022 0201 	bic.w	r2, r2, #1
 8003466:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	695a      	ldr	r2, [r3, #20]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003476:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2220      	movs	r2, #32
 800347c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	68da      	ldr	r2, [r3, #12]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f022 0210 	bic.w	r2, r2, #16
 8003494:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800349a:	4618      	mov	r0, r3
 800349c:	f7fe f8cd 	bl	800163a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	4619      	mov	r1, r3
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f000 f876 	bl	80035a2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80034b6:	e051      	b.n	800355c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d047      	beq.n	8003560 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80034d0:	8a7b      	ldrh	r3, [r7, #18]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d044      	beq.n	8003560 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	68da      	ldr	r2, [r3, #12]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80034e4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	695a      	ldr	r2, [r3, #20]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f022 0201 	bic.w	r2, r2, #1
 80034f4:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2220      	movs	r2, #32
 80034fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68da      	ldr	r2, [r3, #12]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f022 0210 	bic.w	r2, r2, #16
 8003512:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003514:	8a7b      	ldrh	r3, [r7, #18]
 8003516:	4619      	mov	r1, r3
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f000 f842 	bl	80035a2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800351e:	e01f      	b.n	8003560 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003526:	2b00      	cmp	r3, #0
 8003528:	d008      	beq.n	800353c <HAL_UART_IRQHandler+0x324>
 800352a:	6a3b      	ldr	r3, [r7, #32]
 800352c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003530:	2b00      	cmp	r3, #0
 8003532:	d003      	beq.n	800353c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f000 f902 	bl	800373e <UART_Transmit_IT>
    return;
 800353a:	e012      	b.n	8003562 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800353c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003542:	2b00      	cmp	r3, #0
 8003544:	d00d      	beq.n	8003562 <HAL_UART_IRQHandler+0x34a>
 8003546:	6a3b      	ldr	r3, [r7, #32]
 8003548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800354c:	2b00      	cmp	r3, #0
 800354e:	d008      	beq.n	8003562 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f000 f943 	bl	80037dc <UART_EndTransmit_IT>
    return;
 8003556:	e004      	b.n	8003562 <HAL_UART_IRQHandler+0x34a>
    return;
 8003558:	bf00      	nop
 800355a:	e002      	b.n	8003562 <HAL_UART_IRQHandler+0x34a>
      return;
 800355c:	bf00      	nop
 800355e:	e000      	b.n	8003562 <HAL_UART_IRQHandler+0x34a>
      return;
 8003560:	bf00      	nop
  }
}
 8003562:	3728      	adds	r7, #40	; 0x28
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	08003717 	.word	0x08003717

0800356c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003574:	bf00      	nop
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	bc80      	pop	{r7}
 800357c:	4770      	bx	lr

0800357e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800357e:	b480      	push	{r7}
 8003580:	b083      	sub	sp, #12
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003586:	bf00      	nop
 8003588:	370c      	adds	r7, #12
 800358a:	46bd      	mov	sp, r7
 800358c:	bc80      	pop	{r7}
 800358e:	4770      	bx	lr

08003590 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003598:	bf00      	nop
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	bc80      	pop	{r7}
 80035a0:	4770      	bx	lr

080035a2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80035a2:	b480      	push	{r7}
 80035a4:	b083      	sub	sp, #12
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
 80035aa:	460b      	mov	r3, r1
 80035ac:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80035ae:	bf00      	nop
 80035b0:	370c      	adds	r7, #12
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bc80      	pop	{r7}
 80035b6:	4770      	bx	lr

080035b8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	603b      	str	r3, [r7, #0]
 80035c4:	4613      	mov	r3, r2
 80035c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035c8:	e02c      	b.n	8003624 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d0:	d028      	beq.n	8003624 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d007      	beq.n	80035e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80035d8:	f7fd fef4 	bl	80013c4 <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	69ba      	ldr	r2, [r7, #24]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d21d      	bcs.n	8003624 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	68da      	ldr	r2, [r3, #12]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80035f6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	695a      	ldr	r2, [r3, #20]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f022 0201 	bic.w	r2, r2, #1
 8003606:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2220      	movs	r2, #32
 800360c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2220      	movs	r2, #32
 8003614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	e00f      	b.n	8003644 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	4013      	ands	r3, r2
 800362e:	68ba      	ldr	r2, [r7, #8]
 8003630:	429a      	cmp	r2, r3
 8003632:	bf0c      	ite	eq
 8003634:	2301      	moveq	r3, #1
 8003636:	2300      	movne	r3, #0
 8003638:	b2db      	uxtb	r3, r3
 800363a:	461a      	mov	r2, r3
 800363c:	79fb      	ldrb	r3, [r7, #7]
 800363e:	429a      	cmp	r2, r3
 8003640:	d0c3      	beq.n	80035ca <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003642:	2300      	movs	r3, #0
}
 8003644:	4618      	mov	r0, r3
 8003646:	3710      	adds	r7, #16
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800364c:	b480      	push	{r7}
 800364e:	b085      	sub	sp, #20
 8003650:	af00      	add	r7, sp, #0
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	4613      	mov	r3, r2
 8003658:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	68ba      	ldr	r2, [r7, #8]
 800365e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	88fa      	ldrh	r2, [r7, #6]
 8003664:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	88fa      	ldrh	r2, [r7, #6]
 800366a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2200      	movs	r2, #0
 8003670:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2222      	movs	r2, #34	; 0x22
 8003676:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	68da      	ldr	r2, [r3, #12]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003690:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	695a      	ldr	r2, [r3, #20]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f042 0201 	orr.w	r2, r2, #1
 80036a0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68da      	ldr	r2, [r3, #12]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f042 0220 	orr.w	r2, r2, #32
 80036b0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80036b2:	2300      	movs	r3, #0
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3714      	adds	r7, #20
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bc80      	pop	{r7}
 80036bc:	4770      	bx	lr

080036be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036be:	b480      	push	{r7}
 80036c0:	b083      	sub	sp, #12
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	68da      	ldr	r2, [r3, #12]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80036d4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	695a      	ldr	r2, [r3, #20]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f022 0201 	bic.w	r2, r2, #1
 80036e4:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d107      	bne.n	80036fe <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68da      	ldr	r2, [r3, #12]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f022 0210 	bic.w	r2, r2, #16
 80036fc:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2220      	movs	r2, #32
 8003702:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800370c:	bf00      	nop
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	bc80      	pop	{r7}
 8003714:	4770      	bx	lr

08003716 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003716:	b580      	push	{r7, lr}
 8003718:	b084      	sub	sp, #16
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003722:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2200      	movs	r2, #0
 8003728:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2200      	movs	r2, #0
 800372e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003730:	68f8      	ldr	r0, [r7, #12]
 8003732:	f7ff ff2d 	bl	8003590 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003736:	bf00      	nop
 8003738:	3710      	adds	r7, #16
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}

0800373e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800373e:	b480      	push	{r7}
 8003740:	b085      	sub	sp, #20
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800374c:	b2db      	uxtb	r3, r3
 800374e:	2b21      	cmp	r3, #33	; 0x21
 8003750:	d13e      	bne.n	80037d0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800375a:	d114      	bne.n	8003786 <UART_Transmit_IT+0x48>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	691b      	ldr	r3, [r3, #16]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d110      	bne.n	8003786 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a1b      	ldr	r3, [r3, #32]
 8003768:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	881b      	ldrh	r3, [r3, #0]
 800376e:	461a      	mov	r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003778:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a1b      	ldr	r3, [r3, #32]
 800377e:	1c9a      	adds	r2, r3, #2
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	621a      	str	r2, [r3, #32]
 8003784:	e008      	b.n	8003798 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a1b      	ldr	r3, [r3, #32]
 800378a:	1c59      	adds	r1, r3, #1
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	6211      	str	r1, [r2, #32]
 8003790:	781a      	ldrb	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800379c:	b29b      	uxth	r3, r3
 800379e:	3b01      	subs	r3, #1
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	4619      	mov	r1, r3
 80037a6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d10f      	bne.n	80037cc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68da      	ldr	r2, [r3, #12]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037ba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68da      	ldr	r2, [r3, #12]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037ca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80037cc:	2300      	movs	r3, #0
 80037ce:	e000      	b.n	80037d2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80037d0:	2302      	movs	r3, #2
  }
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3714      	adds	r7, #20
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bc80      	pop	{r7}
 80037da:	4770      	bx	lr

080037dc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68da      	ldr	r2, [r3, #12]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037f2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2220      	movs	r2, #32
 80037f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f7ff feb5 	bl	800356c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003802:	2300      	movs	r3, #0
}
 8003804:	4618      	mov	r0, r3
 8003806:	3708      	adds	r7, #8
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}

0800380c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b086      	sub	sp, #24
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800381a:	b2db      	uxtb	r3, r3
 800381c:	2b22      	cmp	r3, #34	; 0x22
 800381e:	f040 8099 	bne.w	8003954 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800382a:	d117      	bne.n	800385c <UART_Receive_IT+0x50>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	691b      	ldr	r3, [r3, #16]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d113      	bne.n	800385c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003834:	2300      	movs	r3, #0
 8003836:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800383c:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	b29b      	uxth	r3, r3
 8003846:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800384a:	b29a      	uxth	r2, r3
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003854:	1c9a      	adds	r2, r3, #2
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	629a      	str	r2, [r3, #40]	; 0x28
 800385a:	e026      	b.n	80038aa <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003860:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003862:	2300      	movs	r3, #0
 8003864:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800386e:	d007      	beq.n	8003880 <UART_Receive_IT+0x74>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d10a      	bne.n	800388e <UART_Receive_IT+0x82>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	691b      	ldr	r3, [r3, #16]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d106      	bne.n	800388e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	b2da      	uxtb	r2, r3
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	701a      	strb	r2, [r3, #0]
 800388c:	e008      	b.n	80038a0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	b2db      	uxtb	r3, r3
 8003896:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800389a:	b2da      	uxtb	r2, r3
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a4:	1c5a      	adds	r2, r3, #1
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	3b01      	subs	r3, #1
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	4619      	mov	r1, r3
 80038b8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d148      	bne.n	8003950 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68da      	ldr	r2, [r3, #12]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f022 0220 	bic.w	r2, r2, #32
 80038cc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68da      	ldr	r2, [r3, #12]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038dc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	695a      	ldr	r2, [r3, #20]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f022 0201 	bic.w	r2, r2, #1
 80038ec:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2220      	movs	r2, #32
 80038f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d123      	bne.n	8003946 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68da      	ldr	r2, [r3, #12]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f022 0210 	bic.w	r2, r2, #16
 8003912:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0310 	and.w	r3, r3, #16
 800391e:	2b10      	cmp	r3, #16
 8003920:	d10a      	bne.n	8003938 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003922:	2300      	movs	r3, #0
 8003924:	60fb      	str	r3, [r7, #12]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	60fb      	str	r3, [r7, #12]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	60fb      	str	r3, [r7, #12]
 8003936:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800393c:	4619      	mov	r1, r3
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f7ff fe2f 	bl	80035a2 <HAL_UARTEx_RxEventCallback>
 8003944:	e002      	b.n	800394c <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f7ff fe19 	bl	800357e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800394c:	2300      	movs	r3, #0
 800394e:	e002      	b.n	8003956 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003950:	2300      	movs	r3, #0
 8003952:	e000      	b.n	8003956 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003954:	2302      	movs	r3, #2
  }
}
 8003956:	4618      	mov	r0, r3
 8003958:	3718      	adds	r7, #24
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
	...

08003960 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	68da      	ldr	r2, [r3, #12]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	430a      	orrs	r2, r1
 800397c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	689a      	ldr	r2, [r3, #8]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	431a      	orrs	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	695b      	ldr	r3, [r3, #20]
 800398c:	4313      	orrs	r3, r2
 800398e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800399a:	f023 030c 	bic.w	r3, r3, #12
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	6812      	ldr	r2, [r2, #0]
 80039a2:	68b9      	ldr	r1, [r7, #8]
 80039a4:	430b      	orrs	r3, r1
 80039a6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	695b      	ldr	r3, [r3, #20]
 80039ae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	699a      	ldr	r2, [r3, #24]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	430a      	orrs	r2, r1
 80039bc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a2c      	ldr	r2, [pc, #176]	; (8003a74 <UART_SetConfig+0x114>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d103      	bne.n	80039d0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80039c8:	f7fe fc84 	bl	80022d4 <HAL_RCC_GetPCLK2Freq>
 80039cc:	60f8      	str	r0, [r7, #12]
 80039ce:	e002      	b.n	80039d6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80039d0:	f7fe fc6c 	bl	80022ac <HAL_RCC_GetPCLK1Freq>
 80039d4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039d6:	68fa      	ldr	r2, [r7, #12]
 80039d8:	4613      	mov	r3, r2
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	4413      	add	r3, r2
 80039de:	009a      	lsls	r2, r3, #2
 80039e0:	441a      	add	r2, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ec:	4a22      	ldr	r2, [pc, #136]	; (8003a78 <UART_SetConfig+0x118>)
 80039ee:	fba2 2303 	umull	r2, r3, r2, r3
 80039f2:	095b      	lsrs	r3, r3, #5
 80039f4:	0119      	lsls	r1, r3, #4
 80039f6:	68fa      	ldr	r2, [r7, #12]
 80039f8:	4613      	mov	r3, r2
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	4413      	add	r3, r2
 80039fe:	009a      	lsls	r2, r3, #2
 8003a00:	441a      	add	r2, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a0c:	4b1a      	ldr	r3, [pc, #104]	; (8003a78 <UART_SetConfig+0x118>)
 8003a0e:	fba3 0302 	umull	r0, r3, r3, r2
 8003a12:	095b      	lsrs	r3, r3, #5
 8003a14:	2064      	movs	r0, #100	; 0x64
 8003a16:	fb00 f303 	mul.w	r3, r0, r3
 8003a1a:	1ad3      	subs	r3, r2, r3
 8003a1c:	011b      	lsls	r3, r3, #4
 8003a1e:	3332      	adds	r3, #50	; 0x32
 8003a20:	4a15      	ldr	r2, [pc, #84]	; (8003a78 <UART_SetConfig+0x118>)
 8003a22:	fba2 2303 	umull	r2, r3, r2, r3
 8003a26:	095b      	lsrs	r3, r3, #5
 8003a28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a2c:	4419      	add	r1, r3
 8003a2e:	68fa      	ldr	r2, [r7, #12]
 8003a30:	4613      	mov	r3, r2
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	4413      	add	r3, r2
 8003a36:	009a      	lsls	r2, r3, #2
 8003a38:	441a      	add	r2, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a44:	4b0c      	ldr	r3, [pc, #48]	; (8003a78 <UART_SetConfig+0x118>)
 8003a46:	fba3 0302 	umull	r0, r3, r3, r2
 8003a4a:	095b      	lsrs	r3, r3, #5
 8003a4c:	2064      	movs	r0, #100	; 0x64
 8003a4e:	fb00 f303 	mul.w	r3, r0, r3
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	011b      	lsls	r3, r3, #4
 8003a56:	3332      	adds	r3, #50	; 0x32
 8003a58:	4a07      	ldr	r2, [pc, #28]	; (8003a78 <UART_SetConfig+0x118>)
 8003a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a5e:	095b      	lsrs	r3, r3, #5
 8003a60:	f003 020f 	and.w	r2, r3, #15
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	440a      	add	r2, r1
 8003a6a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003a6c:	bf00      	nop
 8003a6e:	3710      	adds	r7, #16
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	40013800 	.word	0x40013800
 8003a78:	51eb851f 	.word	0x51eb851f

08003a7c <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	7c1b      	ldrb	r3, [r3, #16]
 8003a8a:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a92:	461a      	mov	r2, r3
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	fb02 f303 	mul.w	r3, r2, r3
 8003a9a:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	00db      	lsls	r3, r3, #3
 8003aa0:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aa6:	68fa      	ldr	r2, [r7, #12]
 8003aa8:	2100      	movs	r1, #0
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f001 fcd6 	bl	800545c <memset>
}
 8003ab0:	bf00      	nop
 8003ab2:	3710      	adds	r7, #16
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b086      	sub	sp, #24
 8003abc:	af02      	add	r7, sp, #8
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	70fb      	strb	r3, [r7, #3]
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	7c1b      	ldrb	r3, [r3, #16]
 8003ace:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8003ad0:	78fb      	ldrb	r3, [r7, #3]
 8003ad2:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ad8:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8003ada:	7bfb      	ldrb	r3, [r7, #15]
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	89ba      	ldrh	r2, [r7, #12]
 8003ae0:	fb02 f303 	mul.w	r3, r2, r3
 8003ae4:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8003ae6:	89bb      	ldrh	r3, [r7, #12]
 8003ae8:	00db      	lsls	r3, r3, #3
 8003aea:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8003aec:	89bb      	ldrh	r3, [r7, #12]
 8003aee:	68ba      	ldr	r2, [r7, #8]
 8003af0:	4413      	add	r3, r2
 8003af2:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8003af4:	7bf9      	ldrb	r1, [r7, #15]
 8003af6:	78ba      	ldrb	r2, [r7, #2]
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	9300      	str	r3, [sp, #0]
 8003afc:	460b      	mov	r3, r1
 8003afe:	2100      	movs	r1, #0
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f001 fbb3 	bl	800526c <u8x8_DrawTile>
}
 8003b06:	bf00      	nop
 8003b08:	3710      	adds	r7, #16
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b084      	sub	sp, #16
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8003b16:	2300      	movs	r3, #0
 8003b18:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003b20:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003b28:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	7c5b      	ldrb	r3, [r3, #17]
 8003b30:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8003b32:	7bba      	ldrb	r2, [r7, #14]
 8003b34:	7bfb      	ldrb	r3, [r7, #15]
 8003b36:	4619      	mov	r1, r3
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f7ff ffbd 	bl	8003ab8 <u8g2_send_tile_row>
    src_row++;
 8003b3e:	7bfb      	ldrb	r3, [r7, #15]
 8003b40:	3301      	adds	r3, #1
 8003b42:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8003b44:	7bbb      	ldrb	r3, [r7, #14]
 8003b46:	3301      	adds	r3, #1
 8003b48:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8003b4a:	7bfa      	ldrb	r2, [r7, #15]
 8003b4c:	7b7b      	ldrb	r3, [r7, #13]
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d203      	bcs.n	8003b5a <u8g2_send_buffer+0x4c>
 8003b52:	7bba      	ldrb	r2, [r7, #14]
 8003b54:	7b3b      	ldrb	r3, [r7, #12]
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d3eb      	bcc.n	8003b32 <u8g2_send_buffer+0x24>
}
 8003b5a:	bf00      	nop
 8003b5c:	3710      	adds	r7, #16
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}

08003b62 <u8g2_SetBufferCurrTileRow>:
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
}

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 8003b62:	b580      	push	{r7, lr}
 8003b64:	b082      	sub	sp, #8
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
 8003b6a:	460b      	mov	r3, r1
 8003b6c:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	78fa      	ldrb	r2, [r7, #3]
 8003b72:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  u8g2->cb->update_dimension(u8g2);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	4798      	blx	r3
}
 8003b8a:	bf00      	nop
 8003b8c:	3708      	adds	r7, #8
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}

08003b92 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 8003b92:	b580      	push	{r7, lr}
 8003b94:	b082      	sub	sp, #8
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d002      	beq.n	8003baa <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f7ff ff69 	bl	8003a7c <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 8003baa:	2100      	movs	r1, #0
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f7ff ffd8 	bl	8003b62 <u8g2_SetBufferCurrTileRow>
}
 8003bb2:	bf00      	nop
 8003bb4:	3708      	adds	r7, #8
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}

08003bba <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 8003bba:	b580      	push	{r7, lr}
 8003bbc:	b084      	sub	sp, #16
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f7ff ffa3 	bl	8003b0e <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003bce:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8003bd6:	7bfb      	ldrb	r3, [r7, #15]
 8003bd8:	4413      	add	r3, r2
 8003bda:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	7c5b      	ldrb	r3, [r3, #17]
 8003be2:	7bfa      	ldrb	r2, [r7, #15]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d304      	bcc.n	8003bf2 <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f001 fb90 	bl	800530e <u8x8_RefreshDisplay>
    return 0;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	e00d      	b.n	8003c0e <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d002      	beq.n	8003c02 <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f7ff ff3d 	bl	8003a7c <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 8003c02:	7bfb      	ldrb	r3, [r7, #15]
 8003c04:	4619      	mov	r1, r3
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f7ff ffab 	bl	8003b62 <u8g2_SetBufferCurrTileRow>
  return 1;
 8003c0c:	2301      	movs	r3, #1
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3710      	adds	r7, #16
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
	...

08003c18 <u8g2_m_16_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2208      	movs	r2, #8
 8003c24:	701a      	strb	r2, [r3, #0]
  return buf;
 8003c26:	4b03      	ldr	r3, [pc, #12]	; (8003c34 <u8g2_m_16_8_f+0x1c>)
  #endif
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bc80      	pop	{r7}
 8003c30:	4770      	bx	lr
 8003c32:	bf00      	nop
 8003c34:	20000324 	.word	0x20000324

08003c38 <u8g2_Setup_ssd1306_128x64_noname_f>:
  buf = u8g2_m_16_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 f */
void u8g2_Setup_ssd1306_128x64_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b088      	sub	sp, #32
 8003c3c:	af02      	add	r7, sp, #8
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	607a      	str	r2, [r7, #4]
 8003c44:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	9300      	str	r3, [sp, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a0b      	ldr	r2, [pc, #44]	; (8003c7c <u8g2_Setup_ssd1306_128x64_noname_f+0x44>)
 8003c4e:	490c      	ldr	r1, [pc, #48]	; (8003c80 <u8g2_Setup_ssd1306_128x64_noname_f+0x48>)
 8003c50:	68f8      	ldr	r0, [r7, #12]
 8003c52:	f001 fbbb 	bl	80053cc <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 8003c56:	f107 0313 	add.w	r3, r7, #19
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f7ff ffdc 	bl	8003c18 <u8g2_m_16_8_f>
 8003c60:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8003c62:	7cfa      	ldrb	r2, [r7, #19]
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	9300      	str	r3, [sp, #0]
 8003c68:	4b06      	ldr	r3, [pc, #24]	; (8003c84 <u8g2_Setup_ssd1306_128x64_noname_f+0x4c>)
 8003c6a:	6979      	ldr	r1, [r7, #20]
 8003c6c:	68f8      	ldr	r0, [r7, #12]
 8003c6e:	f000 feac 	bl	80049ca <u8g2_SetupBuffer>
}
 8003c72:	bf00      	nop
 8003c74:	3718      	adds	r7, #24
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	08004f91 	.word	0x08004f91
 8003c80:	08005169 	.word	0x08005169
 8003c84:	0800484f 	.word	0x0800484f

08003c88 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	460b      	mov	r3, r1
 8003c92:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8003c94:	78fb      	ldrb	r3, [r7, #3]
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	4413      	add	r3, r2
 8003c9a:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	781b      	ldrb	r3, [r3, #0]
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bc80      	pop	{r7}
 8003ca8:	4770      	bx	lr

08003caa <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 8003caa:	b480      	push	{r7}
 8003cac:	b085      	sub	sp, #20
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
 8003cb2:	460b      	mov	r3, r1
 8003cb4:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8003cb6:	78fb      	ldrb	r3, [r7, #3]
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	4413      	add	r3, r2
 8003cbc:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	81fb      	strh	r3, [r7, #14]
    font++;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8003cca:	89fb      	ldrh	r3, [r7, #14]
 8003ccc:	021b      	lsls	r3, r3, #8
 8003cce:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	b29a      	uxth	r2, r3
 8003cd6:	89fb      	ldrh	r3, [r7, #14]
 8003cd8:	4413      	add	r3, r2
 8003cda:	81fb      	strh	r3, [r7, #14]
    return pos;
 8003cdc:	89fb      	ldrh	r3, [r7, #14]
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3714      	adds	r7, #20
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bc80      	pop	{r7}
 8003ce6:	4770      	bx	lr

08003ce8 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8003cf2:	2100      	movs	r1, #0
 8003cf4:	6838      	ldr	r0, [r7, #0]
 8003cf6:	f7ff ffc7 	bl	8003c88 <u8g2_font_get_byte>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8003d02:	2101      	movs	r1, #1
 8003d04:	6838      	ldr	r0, [r7, #0]
 8003d06:	f7ff ffbf 	bl	8003c88 <u8g2_font_get_byte>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8003d12:	2102      	movs	r1, #2
 8003d14:	6838      	ldr	r0, [r7, #0]
 8003d16:	f7ff ffb7 	bl	8003c88 <u8g2_font_get_byte>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8003d22:	2103      	movs	r1, #3
 8003d24:	6838      	ldr	r0, [r7, #0]
 8003d26:	f7ff ffaf 	bl	8003c88 <u8g2_font_get_byte>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8003d32:	2104      	movs	r1, #4
 8003d34:	6838      	ldr	r0, [r7, #0]
 8003d36:	f7ff ffa7 	bl	8003c88 <u8g2_font_get_byte>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 8003d42:	2105      	movs	r1, #5
 8003d44:	6838      	ldr	r0, [r7, #0]
 8003d46:	f7ff ff9f 	bl	8003c88 <u8g2_font_get_byte>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8003d52:	2106      	movs	r1, #6
 8003d54:	6838      	ldr	r0, [r7, #0]
 8003d56:	f7ff ff97 	bl	8003c88 <u8g2_font_get_byte>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8003d62:	2107      	movs	r1, #7
 8003d64:	6838      	ldr	r0, [r7, #0]
 8003d66:	f7ff ff8f 	bl	8003c88 <u8g2_font_get_byte>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 8003d72:	2108      	movs	r1, #8
 8003d74:	6838      	ldr	r0, [r7, #0]
 8003d76:	f7ff ff87 	bl	8003c88 <u8g2_font_get_byte>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 8003d82:	2109      	movs	r1, #9
 8003d84:	6838      	ldr	r0, [r7, #0]
 8003d86:	f7ff ff7f 	bl	8003c88 <u8g2_font_get_byte>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	b25a      	sxtb	r2, r3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8003d92:	210a      	movs	r1, #10
 8003d94:	6838      	ldr	r0, [r7, #0]
 8003d96:	f7ff ff77 	bl	8003c88 <u8g2_font_get_byte>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	b25a      	sxtb	r2, r3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 8003da2:	210b      	movs	r1, #11
 8003da4:	6838      	ldr	r0, [r7, #0]
 8003da6:	f7ff ff6f 	bl	8003c88 <u8g2_font_get_byte>
 8003daa:	4603      	mov	r3, r0
 8003dac:	b25a      	sxtb	r2, r3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 8003db2:	210c      	movs	r1, #12
 8003db4:	6838      	ldr	r0, [r7, #0]
 8003db6:	f7ff ff67 	bl	8003c88 <u8g2_font_get_byte>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	b25a      	sxtb	r2, r3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8003dc2:	210d      	movs	r1, #13
 8003dc4:	6838      	ldr	r0, [r7, #0]
 8003dc6:	f7ff ff5f 	bl	8003c88 <u8g2_font_get_byte>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	b25a      	sxtb	r2, r3
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 8003dd2:	210e      	movs	r1, #14
 8003dd4:	6838      	ldr	r0, [r7, #0]
 8003dd6:	f7ff ff57 	bl	8003c88 <u8g2_font_get_byte>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	b25a      	sxtb	r2, r3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8003de2:	210f      	movs	r1, #15
 8003de4:	6838      	ldr	r0, [r7, #0]
 8003de6:	f7ff ff4f 	bl	8003c88 <u8g2_font_get_byte>
 8003dea:	4603      	mov	r3, r0
 8003dec:	b25a      	sxtb	r2, r3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 8003df2:	2110      	movs	r1, #16
 8003df4:	6838      	ldr	r0, [r7, #0]
 8003df6:	f7ff ff47 	bl	8003c88 <u8g2_font_get_byte>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	b25a      	sxtb	r2, r3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8003e02:	2111      	movs	r1, #17
 8003e04:	6838      	ldr	r0, [r7, #0]
 8003e06:	f7ff ff50 	bl	8003caa <u8g2_font_get_word>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8003e12:	2113      	movs	r1, #19
 8003e14:	6838      	ldr	r0, [r7, #0]
 8003e16:	f7ff ff48 	bl	8003caa <u8g2_font_get_word>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 8003e22:	2115      	movs	r1, #21
 8003e24:	6838      	ldr	r0, [r7, #0]
 8003e26:	f7ff ff40 	bl	8003caa <u8g2_font_get_word>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	82da      	strh	r2, [r3, #22]
#endif
}
 8003e32:	bf00      	nop
 8003e34:	3708      	adds	r7, #8
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}

08003e3a <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 8003e3a:	b480      	push	{r7}
 8003e3c:	b085      	sub	sp, #20
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
 8003e42:	460b      	mov	r3, r1
 8003e44:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	7b1b      	ldrb	r3, [r3, #12]
 8003e4a:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	781b      	ldrb	r3, [r3, #0]
 8003e52:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 8003e54:	7bfa      	ldrb	r2, [r7, #15]
 8003e56:	7b7b      	ldrb	r3, [r7, #13]
 8003e58:	fa42 f303 	asr.w	r3, r2, r3
 8003e5c:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 8003e5e:	7b7b      	ldrb	r3, [r7, #13]
 8003e60:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 8003e62:	7bba      	ldrb	r2, [r7, #14]
 8003e64:	78fb      	ldrb	r3, [r7, #3]
 8003e66:	4413      	add	r3, r2
 8003e68:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 8003e6a:	7bbb      	ldrb	r3, [r7, #14]
 8003e6c:	2b07      	cmp	r3, #7
 8003e6e:	d91a      	bls.n	8003ea6 <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8003e70:	2308      	movs	r3, #8
 8003e72:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 8003e74:	7b3a      	ldrb	r2, [r7, #12]
 8003e76:	7b7b      	ldrb	r3, [r7, #13]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	1c5a      	adds	r2, r3, #1
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	7b3b      	ldrb	r3, [r7, #12]
 8003e90:	fa02 f303 	lsl.w	r3, r2, r3
 8003e94:	b25a      	sxtb	r2, r3
 8003e96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	b25b      	sxtb	r3, r3
 8003e9e:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8003ea0:	7bbb      	ldrb	r3, [r7, #14]
 8003ea2:	3b08      	subs	r3, #8
 8003ea4:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 8003ea6:	78fb      	ldrb	r3, [r7, #3]
 8003ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8003eac:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	43db      	mvns	r3, r3
 8003eb4:	b2da      	uxtb	r2, r3
 8003eb6:	7bfb      	ldrb	r3, [r7, #15]
 8003eb8:	4013      	ands	r3, r2
 8003eba:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	7bba      	ldrb	r2, [r7, #14]
 8003ec0:	731a      	strb	r2, [r3, #12]
  return val;
 8003ec2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3714      	adds	r7, #20
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bc80      	pop	{r7}
 8003ecc:	4770      	bx	lr

08003ece <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 8003ece:	b580      	push	{r7, lr}
 8003ed0:	b084      	sub	sp, #16
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
 8003ed6:	460b      	mov	r3, r1
 8003ed8:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8003eda:	78fb      	ldrb	r3, [r7, #3]
 8003edc:	4619      	mov	r1, r3
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f7ff ffab 	bl	8003e3a <u8g2_font_decode_get_unsigned_bits>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	73fb      	strb	r3, [r7, #15]
  d = 1;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	73bb      	strb	r3, [r7, #14]
  cnt--;
 8003eec:	78fb      	ldrb	r3, [r7, #3]
 8003eee:	3b01      	subs	r3, #1
 8003ef0:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 8003ef2:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8003ef6:	78fb      	ldrb	r3, [r7, #3]
 8003ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8003efc:	73bb      	strb	r3, [r7, #14]
  v -= d;
 8003efe:	7bfa      	ldrb	r2, [r7, #15]
 8003f00:	7bbb      	ldrb	r3, [r7, #14]
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	73fb      	strb	r3, [r7, #15]
  return v;
 8003f08:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3710      	adds	r7, #16
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <u8g2_font_2x_decode_len>:
  decode->y = ly;  
}


void u8g2_font_2x_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b088      	sub	sp, #32
 8003f18:	af02      	add	r7, sp, #8
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	70fb      	strb	r3, [r7, #3]
 8003f20:	4613      	mov	r3, r2
 8003f22:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	3360      	adds	r3, #96	; 0x60
 8003f28:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 8003f2a:	78fb      	ldrb	r3, [r7, #3]
 8003f2c:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8003f34:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8003f3c:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8003f44:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 8003f46:	7bfa      	ldrb	r2, [r7, #15]
 8003f48:	7d7b      	ldrb	r3, [r7, #21]
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8003f4e:	7bfb      	ldrb	r3, [r7, #15]
 8003f50:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 8003f52:	7dfa      	ldrb	r2, [r7, #23]
 8003f54:	7bfb      	ldrb	r3, [r7, #15]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d201      	bcs.n	8003f5e <u8g2_font_2x_decode_len+0x4a>
      current = cnt;
 8003f5a:	7dfb      	ldrb	r3, [r7, #23]
 8003f5c:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	889b      	ldrh	r3, [r3, #4]
 8003f62:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	88db      	ldrh	r3, [r3, #6]
 8003f68:	817b      	strh	r3, [r7, #10]

    x += lx*2;
 8003f6a:	7d7b      	ldrb	r3, [r7, #21]
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	005b      	lsls	r3, r3, #1
 8003f70:	b29a      	uxth	r2, r3
 8003f72:	89bb      	ldrh	r3, [r7, #12]
 8003f74:	4413      	add	r3, r2
 8003f76:	81bb      	strh	r3, [r7, #12]
    y += ly*2;
 8003f78:	7d3b      	ldrb	r3, [r7, #20]
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	005b      	lsls	r3, r3, #1
 8003f7e:	b29a      	uxth	r2, r3
 8003f80:	897b      	ldrh	r3, [r7, #10]
 8003f82:	4413      	add	r3, r2
 8003f84:	817b      	strh	r3, [r7, #10]
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 8003f86:	78bb      	ldrb	r3, [r7, #2]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d01d      	beq.n	8003fc8 <u8g2_font_2x_decode_len+0xb4>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	7b9a      	ldrb	r2, [r3, #14]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 8003f96:	7dbb      	ldrb	r3, [r7, #22]
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	005b      	lsls	r3, r3, #1
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	897a      	ldrh	r2, [r7, #10]
 8003fa0:	89b9      	ldrh	r1, [r7, #12]
 8003fa2:	2000      	movs	r0, #0
 8003fa4:	9000      	str	r0, [sp, #0]
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 fb68 	bl	800467c <u8g2_DrawHVLine>
	x, 
	y, 
	current*2, 
	0
      );
      u8g2_DrawHVLine(u8g2, 
 8003fac:	897b      	ldrh	r3, [r7, #10]
 8003fae:	3301      	adds	r3, #1
 8003fb0:	b29a      	uxth	r2, r3
 8003fb2:	7dbb      	ldrb	r3, [r7, #22]
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	005b      	lsls	r3, r3, #1
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	89b9      	ldrh	r1, [r7, #12]
 8003fbc:	2000      	movs	r0, #0
 8003fbe:	9000      	str	r0, [sp, #0]
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f000 fb5b 	bl	800467c <u8g2_DrawHVLine>
 8003fc6:	e020      	b.n	800400a <u8g2_font_2x_decode_len+0xf6>
	y+1, 
	current*2, 
	0
      );
    }
    else if ( decode->is_transparent == 0 )    
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	7b5b      	ldrb	r3, [r3, #13]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d11c      	bne.n	800400a <u8g2_font_2x_decode_len+0xf6>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	7bda      	ldrb	r2, [r3, #15]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 8003fda:	7dbb      	ldrb	r3, [r7, #22]
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	005b      	lsls	r3, r3, #1
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	897a      	ldrh	r2, [r7, #10]
 8003fe4:	89b9      	ldrh	r1, [r7, #12]
 8003fe6:	2000      	movs	r0, #0
 8003fe8:	9000      	str	r0, [sp, #0]
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 fb46 	bl	800467c <u8g2_DrawHVLine>
	x, 
	y, 
	current*2, 
	0
      );   
      u8g2_DrawHVLine(u8g2, 
 8003ff0:	897b      	ldrh	r3, [r7, #10]
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	b29a      	uxth	r2, r3
 8003ff6:	7dbb      	ldrb	r3, [r7, #22]
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	005b      	lsls	r3, r3, #1
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	89b9      	ldrh	r1, [r7, #12]
 8004000:	2000      	movs	r0, #0
 8004002:	9000      	str	r0, [sp, #0]
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f000 fb39 	bl	800467c <u8g2_DrawHVLine>
	0
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 800400a:	7dfa      	ldrb	r2, [r7, #23]
 800400c:	7bfb      	ldrb	r3, [r7, #15]
 800400e:	429a      	cmp	r2, r3
 8004010:	d309      	bcc.n	8004026 <u8g2_font_2x_decode_len+0x112>
      break;
    cnt -= rem;
 8004012:	7dfa      	ldrb	r2, [r7, #23]
 8004014:	7bfb      	ldrb	r3, [r7, #15]
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 800401a:	2300      	movs	r3, #0
 800401c:	757b      	strb	r3, [r7, #21]
    ly++;
 800401e:	7d3b      	ldrb	r3, [r7, #20]
 8004020:	3301      	adds	r3, #1
 8004022:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8004024:	e78b      	b.n	8003f3e <u8g2_font_2x_decode_len+0x2a>
      break;
 8004026:	bf00      	nop
  }
  lx += cnt;
 8004028:	7d7a      	ldrb	r2, [r7, #21]
 800402a:	7dfb      	ldrb	r3, [r7, #23]
 800402c:	4413      	add	r3, r2
 800402e:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 8004030:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	721a      	strb	r2, [r3, #8]
  decode->y = ly;
 8004038:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	725a      	strb	r2, [r3, #9]
  
}
 8004040:	bf00      	nop
 8004042:	3718      	adds	r7, #24
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}

08004048 <u8g2_font_setup_decode>:


static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	3360      	adds	r3, #96	; 0x60
 8004056:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	683a      	ldr	r2, [r7, #0]
 800405c:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2200      	movs	r2, #0
 8004062:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800406a:	4619      	mov	r1, r3
 800406c:	68f8      	ldr	r0, [r7, #12]
 800406e:	f7ff fee4 	bl	8003e3a <u8g2_font_decode_get_unsigned_bits>
 8004072:	4603      	mov	r3, r0
 8004074:	b25a      	sxtb	r2, r3
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8004080:	4619      	mov	r1, r3
 8004082:	68f8      	ldr	r0, [r7, #12]
 8004084:	f7ff fed9 	bl	8003e3a <u8g2_font_decode_get_unsigned_bits>
 8004088:	4603      	mov	r3, r0
 800408a:	b25a      	sxtb	r2, r3
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	7b9b      	ldrb	r3, [r3, #14]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	bf0c      	ite	eq
 80040a2:	2301      	moveq	r3, #1
 80040a4:	2300      	movne	r3, #0
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	461a      	mov	r2, r3
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	73da      	strb	r2, [r3, #15]
}
 80040ae:	bf00      	nop
 80040b0:	3710      	adds	r7, #16
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}

080040b6 <u8g2_font_2x_decode_glyph>:
  return d;
}


int8_t u8g2_font_2x_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 80040b6:	b580      	push	{r7, lr}
 80040b8:	b08a      	sub	sp, #40	; 0x28
 80040ba:	af02      	add	r7, sp, #8
 80040bc:	6078      	str	r0, [r7, #4]
 80040be:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	3360      	adds	r3, #96	; 0x60
 80040c4:	61fb      	str	r3, [r7, #28]
    
  u8g2_font_setup_decode(u8g2, glyph_data);     /* set values in u8g2->font_decode data structure */
 80040c6:	6839      	ldr	r1, [r7, #0]
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f7ff ffbd 	bl	8004048 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 80040d4:	76fb      	strb	r3, [r7, #27]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 80040dc:	4619      	mov	r1, r3
 80040de:	69f8      	ldr	r0, [r7, #28]
 80040e0:	f7ff fef5 	bl	8003ece <u8g2_font_decode_get_signed_bits>
 80040e4:	4603      	mov	r3, r0
 80040e6:	76bb      	strb	r3, [r7, #26]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 80040ee:	4619      	mov	r1, r3
 80040f0:	69f8      	ldr	r0, [r7, #28]
 80040f2:	f7ff feec 	bl	8003ece <u8g2_font_decode_get_signed_bits>
 80040f6:	4603      	mov	r3, r0
 80040f8:	767b      	strb	r3, [r7, #25]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004100:	4619      	mov	r1, r3
 8004102:	69f8      	ldr	r0, [r7, #28]
 8004104:	f7ff fee3 	bl	8003ece <u8g2_font_decode_get_signed_bits>
 8004108:	4603      	mov	r3, r0
 800410a:	763b      	strb	r3, [r7, #24]
  
  if ( decode->glyph_width > 0 )
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8004112:	2b00      	cmp	r3, #0
 8004114:	dd7b      	ble.n	800420e <u8g2_font_2x_decode_glyph+0x158>
  {
    decode->target_x += x;
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	889a      	ldrh	r2, [r3, #4]
 800411a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800411e:	b29b      	uxth	r3, r3
 8004120:	4413      	add	r3, r2
 8004122:	b29a      	uxth	r2, r3
 8004124:	69fb      	ldr	r3, [r7, #28]
 8004126:	809a      	strh	r2, [r3, #4]
    decode->target_y -= 2*h+y;
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	88da      	ldrh	r2, [r3, #6]
 800412c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8004130:	b29b      	uxth	r3, r3
 8004132:	005b      	lsls	r3, r3, #1
 8004134:	b299      	uxth	r1, r3
 8004136:	f997 3019 	ldrsb.w	r3, [r7, #25]
 800413a:	b29b      	uxth	r3, r3
 800413c:	440b      	add	r3, r1
 800413e:	b29b      	uxth	r3, r3
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	b29a      	uxth	r2, r3
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	80da      	strh	r2, [r3, #6]

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 8004148:	69fb      	ldr	r3, [r7, #28]
 800414a:	889b      	ldrh	r3, [r3, #4]
 800414c:	82fb      	strh	r3, [r7, #22]
      y0 = decode->target_y;
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	88db      	ldrh	r3, [r3, #6]
 8004152:	82bb      	strh	r3, [r7, #20]
      x1 = x0;
 8004154:	8afb      	ldrh	r3, [r7, #22]
 8004156:	827b      	strh	r3, [r7, #18]
      y1 = y0;
 8004158:	8abb      	ldrh	r3, [r7, #20]
 800415a:	823b      	strh	r3, [r7, #16]
      
      x1 += 2*decode->glyph_width;
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8004162:	b29b      	uxth	r3, r3
 8004164:	005b      	lsls	r3, r3, #1
 8004166:	b29a      	uxth	r2, r3
 8004168:	8a7b      	ldrh	r3, [r7, #18]
 800416a:	4413      	add	r3, r2
 800416c:	827b      	strh	r3, [r7, #18]
      y1 += 2*h;      
 800416e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8004172:	b29b      	uxth	r3, r3
 8004174:	005b      	lsls	r3, r3, #1
 8004176:	b29a      	uxth	r2, r3
 8004178:	8a3b      	ldrh	r3, [r7, #16]
 800417a:	4413      	add	r3, r2
 800417c:	823b      	strh	r3, [r7, #16]
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 800417e:	8a78      	ldrh	r0, [r7, #18]
 8004180:	8aba      	ldrh	r2, [r7, #20]
 8004182:	8af9      	ldrh	r1, [r7, #22]
 8004184:	8a3b      	ldrh	r3, [r7, #16]
 8004186:	9300      	str	r3, [sp, #0]
 8004188:	4603      	mov	r3, r0
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 fb34 	bl	80047f8 <u8g2_IsIntersection>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d102      	bne.n	800419c <u8g2_font_2x_decode_glyph+0xe6>
	return d;
 8004196:	f997 3018 	ldrsb.w	r3, [r7, #24]
 800419a:	e03c      	b.n	8004216 <u8g2_font_2x_decode_glyph+0x160>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	2200      	movs	r2, #0
 80041a0:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	2200      	movs	r2, #0
 80041a6:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 80041ae:	4619      	mov	r1, r3
 80041b0:	69f8      	ldr	r0, [r7, #28]
 80041b2:	f7ff fe42 	bl	8003e3a <u8g2_font_decode_get_unsigned_bits>
 80041b6:	4603      	mov	r3, r0
 80041b8:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 80041c0:	4619      	mov	r1, r3
 80041c2:	69f8      	ldr	r0, [r7, #28]
 80041c4:	f7ff fe39 	bl	8003e3a <u8g2_font_decode_get_unsigned_bits>
 80041c8:	4603      	mov	r3, r0
 80041ca:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_2x_decode_len(u8g2, a, 0);
 80041cc:	7bfb      	ldrb	r3, [r7, #15]
 80041ce:	2200      	movs	r2, #0
 80041d0:	4619      	mov	r1, r3
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f7ff fe9e 	bl	8003f14 <u8g2_font_2x_decode_len>
	u8g2_font_2x_decode_len(u8g2, b, 1);
 80041d8:	7bbb      	ldrb	r3, [r7, #14]
 80041da:	2201      	movs	r2, #1
 80041dc:	4619      	mov	r1, r3
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f7ff fe98 	bl	8003f14 <u8g2_font_2x_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 80041e4:	2101      	movs	r1, #1
 80041e6:	69f8      	ldr	r0, [r7, #28]
 80041e8:	f7ff fe27 	bl	8003e3a <u8g2_font_decode_get_unsigned_bits>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d1ec      	bne.n	80041cc <u8g2_font_2x_decode_glyph+0x116>

      if ( decode->y >= h )
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80041f8:	f997 201b 	ldrsb.w	r2, [r7, #27]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	dd00      	ble.n	8004202 <u8g2_font_2x_decode_glyph+0x14c>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8004200:	e7d2      	b.n	80041a8 <u8g2_font_2x_decode_glyph+0xf2>
	break;
 8004202:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	7b9a      	ldrb	r2, [r3, #14]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  }
  return d*2;
 800420e:	7e3b      	ldrb	r3, [r7, #24]
 8004210:	005b      	lsls	r3, r3, #1
 8004212:	b2db      	uxtb	r3, r3
 8004214:	b25b      	sxtb	r3, r3
}
 8004216:	4618      	mov	r0, r3
 8004218:	3720      	adds	r7, #32
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}

0800421e <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 800421e:	b580      	push	{r7, lr}
 8004220:	b086      	sub	sp, #24
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
 8004226:	460b      	mov	r3, r1
 8004228:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800422e:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	3317      	adds	r3, #23
 8004234:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 8004236:	887b      	ldrh	r3, [r7, #2]
 8004238:	2bff      	cmp	r3, #255	; 0xff
 800423a:	d82a      	bhi.n	8004292 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 800423c:	887b      	ldrh	r3, [r7, #2]
 800423e:	2b60      	cmp	r3, #96	; 0x60
 8004240:	d907      	bls.n	8004252 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8004248:	461a      	mov	r2, r3
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	4413      	add	r3, r2
 800424e:	617b      	str	r3, [r7, #20]
 8004250:	e009      	b.n	8004266 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8004252:	887b      	ldrh	r3, [r7, #2]
 8004254:	2b40      	cmp	r3, #64	; 0x40
 8004256:	d906      	bls.n	8004266 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800425e:	461a      	mov	r2, r3
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	4413      	add	r3, r2
 8004264:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	3301      	adds	r3, #1
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d04e      	beq.n	800430e <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	b29b      	uxth	r3, r3
 8004276:	887a      	ldrh	r2, [r7, #2]
 8004278:	429a      	cmp	r2, r3
 800427a:	d102      	bne.n	8004282 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	3302      	adds	r3, #2
 8004280:	e049      	b.n	8004316 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	3301      	adds	r3, #1
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	461a      	mov	r2, r3
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	4413      	add	r3, r2
 800428e:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8004290:	e7e9      	b.n	8004266 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8004298:	461a      	mov	r2, r3
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	4413      	add	r3, r2
 800429e:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 80042a4:	2100      	movs	r1, #0
 80042a6:	6938      	ldr	r0, [r7, #16]
 80042a8:	f7ff fcff 	bl	8003caa <u8g2_font_get_word>
 80042ac:	4603      	mov	r3, r0
 80042ae:	461a      	mov	r2, r3
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	4413      	add	r3, r2
 80042b4:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 80042b6:	2102      	movs	r1, #2
 80042b8:	6938      	ldr	r0, [r7, #16]
 80042ba:	f7ff fcf6 	bl	8003caa <u8g2_font_get_word>
 80042be:	4603      	mov	r3, r0
 80042c0:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	3304      	adds	r3, #4
 80042c6:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 80042c8:	89fa      	ldrh	r2, [r7, #14]
 80042ca:	887b      	ldrh	r3, [r7, #2]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d3e9      	bcc.n	80042a4 <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 80042d6:	89fb      	ldrh	r3, [r7, #14]
 80042d8:	021b      	lsls	r3, r3, #8
 80042da:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	3301      	adds	r3, #1
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	b29a      	uxth	r2, r3
 80042e4:	89fb      	ldrh	r3, [r7, #14]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 80042ea:	89fb      	ldrh	r3, [r7, #14]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d010      	beq.n	8004312 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 80042f0:	89fa      	ldrh	r2, [r7, #14]
 80042f2:	887b      	ldrh	r3, [r7, #2]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d102      	bne.n	80042fe <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	3303      	adds	r3, #3
 80042fc:	e00b      	b.n	8004316 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	3302      	adds	r3, #2
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	461a      	mov	r2, r3
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	4413      	add	r3, r2
 800430a:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 800430c:	e7e0      	b.n	80042d0 <u8g2_font_get_glyph_data+0xb2>
	break;
 800430e:	bf00      	nop
 8004310:	e000      	b.n	8004314 <u8g2_font_get_glyph_data+0xf6>
	break;
 8004312:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 8004314:	2300      	movs	r3, #0
}
 8004316:	4618      	mov	r0, r3
 8004318:	3718      	adds	r7, #24
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}

0800431e <u8g2_font_2x_draw_glyph>:
  }
  return dx;
}

static u8g2_uint_t u8g2_font_2x_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 800431e:	b580      	push	{r7, lr}
 8004320:	b086      	sub	sp, #24
 8004322:	af00      	add	r7, sp, #0
 8004324:	60f8      	str	r0, [r7, #12]
 8004326:	4608      	mov	r0, r1
 8004328:	4611      	mov	r1, r2
 800432a:	461a      	mov	r2, r3
 800432c:	4603      	mov	r3, r0
 800432e:	817b      	strh	r3, [r7, #10]
 8004330:	460b      	mov	r3, r1
 8004332:	813b      	strh	r3, [r7, #8]
 8004334:	4613      	mov	r3, r2
 8004336:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t dx = 0;
 8004338:	2300      	movs	r3, #0
 800433a:	82fb      	strh	r3, [r7, #22]
  u8g2->font_decode.target_x = x;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	897a      	ldrh	r2, [r7, #10]
 8004340:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  u8g2->font_decode.target_y = y;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	893a      	ldrh	r2, [r7, #8]
 8004348:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 800434c:	88fb      	ldrh	r3, [r7, #6]
 800434e:	4619      	mov	r1, r3
 8004350:	68f8      	ldr	r0, [r7, #12]
 8004352:	f7ff ff64 	bl	800421e <u8g2_font_get_glyph_data>
 8004356:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d005      	beq.n	800436a <u8g2_font_2x_draw_glyph+0x4c>
  {
    dx = u8g2_font_2x_decode_glyph(u8g2, glyph_data);
 800435e:	6939      	ldr	r1, [r7, #16]
 8004360:	68f8      	ldr	r0, [r7, #12]
 8004362:	f7ff fea8 	bl	80040b6 <u8g2_font_2x_decode_glyph>
 8004366:	4603      	mov	r3, r0
 8004368:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 800436a:	8afb      	ldrh	r3, [r7, #22]
}
 800436c:	4618      	mov	r0, r3
 800436e:	3718      	adds	r7, #24
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <u8g2_DrawGlyphX2>:
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
}

u8g2_uint_t u8g2_DrawGlyphX2(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	4608      	mov	r0, r1
 800437e:	4611      	mov	r1, r2
 8004380:	461a      	mov	r2, r3
 8004382:	4603      	mov	r3, r0
 8004384:	817b      	strh	r3, [r7, #10]
 8004386:	460b      	mov	r3, r1
 8004388:	813b      	strh	r3, [r7, #8]
 800438a:	4613      	mov	r3, r2
 800438c:	80fb      	strh	r3, [r7, #6]
  y += 2*u8g2->font_calc_vref(u8g2);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004392:	68f8      	ldr	r0, [r7, #12]
 8004394:	4798      	blx	r3
 8004396:	4603      	mov	r3, r0
 8004398:	005b      	lsls	r3, r3, #1
 800439a:	b29a      	uxth	r2, r3
 800439c:	893b      	ldrh	r3, [r7, #8]
 800439e:	4413      	add	r3, r2
 80043a0:	813b      	strh	r3, [r7, #8]
  return u8g2_font_2x_draw_glyph(u8g2, x, y, encoding);
 80043a2:	88fb      	ldrh	r3, [r7, #6]
 80043a4:	893a      	ldrh	r2, [r7, #8]
 80043a6:	8979      	ldrh	r1, [r7, #10]
 80043a8:	68f8      	ldr	r0, [r7, #12]
 80043aa:	f7ff ffb8 	bl	800431e <u8g2_font_2x_draw_glyph>
 80043ae:	4603      	mov	r3, r0
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3710      	adds	r7, #16
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <u8g2_draw_string_2x>:
  return sum;
}

static u8g2_uint_t u8g2_draw_string_2x(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string_2x(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b086      	sub	sp, #24
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	607b      	str	r3, [r7, #4]
 80043c2:	460b      	mov	r3, r1
 80043c4:	817b      	strh	r3, [r7, #10]
 80043c6:	4613      	mov	r3, r2
 80043c8:	813b      	strh	r3, [r7, #8]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 80043ca:	68f8      	ldr	r0, [r7, #12]
 80043cc:	f000 fcdd 	bl	8004d8a <u8x8_utf8_init>
  sum = 0;
 80043d0:	2300      	movs	r3, #0
 80043d2:	82fb      	strh	r3, [r7, #22]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	7812      	ldrb	r2, [r2, #0]
 80043dc:	4611      	mov	r1, r2
 80043de:	68f8      	ldr	r0, [r7, #12]
 80043e0:	4798      	blx	r3
 80043e2:	4603      	mov	r3, r0
 80043e4:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 80043e6:	8abb      	ldrh	r3, [r7, #20]
 80043e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d018      	beq.n	8004422 <u8g2_draw_string_2x+0x6a>
      break;
    str++;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	3301      	adds	r3, #1
 80043f4:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 80043f6:	8abb      	ldrh	r3, [r7, #20]
 80043f8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d0e9      	beq.n	80043d4 <u8g2_draw_string_2x+0x1c>
    {
      delta = u8g2_DrawGlyphX2(u8g2, x, y, e);
 8004400:	8abb      	ldrh	r3, [r7, #20]
 8004402:	893a      	ldrh	r2, [r7, #8]
 8004404:	8979      	ldrh	r1, [r7, #10]
 8004406:	68f8      	ldr	r0, [r7, #12]
 8004408:	f7ff ffb4 	bl	8004374 <u8g2_DrawGlyphX2>
 800440c:	4603      	mov	r3, r0
 800440e:	827b      	strh	r3, [r7, #18]
      x += delta;
 8004410:	897a      	ldrh	r2, [r7, #10]
 8004412:	8a7b      	ldrh	r3, [r7, #18]
 8004414:	4413      	add	r3, r2
 8004416:	817b      	strh	r3, [r7, #10]
      sum += delta;    
 8004418:	8afa      	ldrh	r2, [r7, #22]
 800441a:	8a7b      	ldrh	r3, [r7, #18]
 800441c:	4413      	add	r3, r2
 800441e:	82fb      	strh	r3, [r7, #22]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8004420:	e7d8      	b.n	80043d4 <u8g2_draw_string_2x+0x1c>
      break;
 8004422:	bf00      	nop
    }
  }
  return sum;
 8004424:	8afb      	ldrh	r3, [r7, #22]
}
 8004426:	4618      	mov	r0, r3
 8004428:	3718      	adds	r7, #24
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
	...

08004430 <u8g2_DrawStrX2>:
  u8g2->u8x8.next_cb = u8x8_ascii_next;
  return u8g2_draw_string(u8g2, x, y, str);
}

u8g2_uint_t u8g2_DrawStrX2(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	607b      	str	r3, [r7, #4]
 800443a:	460b      	mov	r3, r1
 800443c:	817b      	strh	r3, [r7, #10]
 800443e:	4613      	mov	r3, r2
 8004440:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	4a06      	ldr	r2, [pc, #24]	; (8004460 <u8g2_DrawStrX2+0x30>)
 8004446:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string_2x(u8g2, x, y, str);
 8004448:	893a      	ldrh	r2, [r7, #8]
 800444a:	8979      	ldrh	r1, [r7, #10]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	68f8      	ldr	r0, [r7, #12]
 8004450:	f7ff ffb2 	bl	80043b8 <u8g2_draw_string_2x>
 8004454:	4603      	mov	r3, r0
}
 8004456:	4618      	mov	r0, r3
 8004458:	3710      	adds	r7, #16
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	08004da5 	.word	0x08004da5

08004464 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004470:	2b00      	cmp	r3, #0
 8004472:	d05d      	beq.n	8004530 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f993 2081 	ldrsb.w	r2, [r3, #129]	; 0x81
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f993 2082 	ldrsb.w	r2, [r3, #130]	; 0x82
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8004492:	2b00      	cmp	r3, #0
 8004494:	d04d      	beq.n	8004532 <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800449c:	2b01      	cmp	r3, #1
 800449e:	d11c      	bne.n	80044da <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f993 208e 	ldrsb.w	r2, [r3, #142]	; 0x8e
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f993 3083 	ldrsb.w	r3, [r3, #131]	; 0x83
 80044ac:	429a      	cmp	r2, r3
 80044ae:	da05      	bge.n	80044bc <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f993 3084 	ldrsb.w	r3, [r3, #132]	; 0x84
 80044c8:	429a      	cmp	r2, r3
 80044ca:	dd32      	ble.n	8004532 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f993 2084 	ldrsb.w	r2, [r3, #132]	; 0x84
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 80044d8:	e02b      	b.n	8004532 <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 80044e0:	461a      	mov	r2, r3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 80044e8:	4619      	mov	r1, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 80044f0:	440b      	add	r3, r1
 80044f2:	429a      	cmp	r2, r3
 80044f4:	da0d      	bge.n	8004512 <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 80044fc:	b2da      	uxtb	r2, r3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8004504:	b2db      	uxtb	r3, r3
 8004506:	4413      	add	r3, r2
 8004508:	b2db      	uxtb	r3, r3
 800450a:	b25a      	sxtb	r2, r3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 800451e:	429a      	cmp	r2, r3
 8004520:	dd07      	ble.n	8004532 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f993 2080 	ldrsb.w	r2, [r3, #128]	; 0x80
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 800452e:	e000      	b.n	8004532 <u8g2_UpdateRefHeight+0xce>
    return;
 8004530:	bf00      	nop
  }  
}
 8004532:	370c      	adds	r7, #12
 8004534:	46bd      	mov	sp, r7
 8004536:	bc80      	pop	{r7}
 8004538:	4770      	bx	lr

0800453a <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 800453a:	b480      	push	{r7}
 800453c:	b083      	sub	sp, #12
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
  return 0;
 8004542:	2300      	movs	r3, #0
}
 8004544:	4618      	mov	r0, r3
 8004546:	370c      	adds	r7, #12
 8004548:	46bd      	mov	sp, r7
 800454a:	bc80      	pop	{r7}
 800454c:	4770      	bx	lr
	...

08004550 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	4a03      	ldr	r2, [pc, #12]	; (8004568 <u8g2_SetFontPosBaseline+0x18>)
 800455c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800455e:	bf00      	nop
 8004560:	370c      	adds	r7, #12
 8004562:	46bd      	mov	sp, r7
 8004564:	bc80      	pop	{r7}
 8004566:	4770      	bx	lr
 8004568:	0800453b 	.word	0x0800453b

0800456c <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b082      	sub	sp, #8
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800457a:	683a      	ldr	r2, [r7, #0]
 800457c:	429a      	cmp	r2, r3
 800457e:	d00b      	beq.n	8004598 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	683a      	ldr	r2, [r7, #0]
 8004584:	659a      	str	r2, [r3, #88]	; 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	3374      	adds	r3, #116	; 0x74
 800458a:	6839      	ldr	r1, [r7, #0]
 800458c:	4618      	mov	r0, r3
 800458e:	f7ff fbab 	bl	8003ce8 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f7ff ff66 	bl	8004464 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8004598:	bf00      	nop
 800459a:	3708      	adds	r7, #8
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}

080045a0 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b087      	sub	sp, #28
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	4611      	mov	r1, r2
 80045ac:	461a      	mov	r2, r3
 80045ae:	460b      	mov	r3, r1
 80045b0:	80fb      	strh	r3, [r7, #6]
 80045b2:	4613      	mov	r3, r2
 80045b4:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	881b      	ldrh	r3, [r3, #0]
 80045ba:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 80045bc:	8afb      	ldrh	r3, [r7, #22]
 80045be:	82bb      	strh	r3, [r7, #20]
  b += *len;
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	881a      	ldrh	r2, [r3, #0]
 80045c4:	8abb      	ldrh	r3, [r7, #20]
 80045c6:	4413      	add	r3, r2
 80045c8:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 80045ca:	8afa      	ldrh	r2, [r7, #22]
 80045cc:	8abb      	ldrh	r3, [r7, #20]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d90b      	bls.n	80045ea <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 80045d2:	8afa      	ldrh	r2, [r7, #22]
 80045d4:	88bb      	ldrh	r3, [r7, #4]
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d205      	bcs.n	80045e6 <u8g2_clip_intersection2+0x46>
    {
      b = d;
 80045da:	88bb      	ldrh	r3, [r7, #4]
 80045dc:	82bb      	strh	r3, [r7, #20]
      b--;
 80045de:	8abb      	ldrh	r3, [r7, #20]
 80045e0:	3b01      	subs	r3, #1
 80045e2:	82bb      	strh	r3, [r7, #20]
 80045e4:	e001      	b.n	80045ea <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 80045e6:	88fb      	ldrh	r3, [r7, #6]
 80045e8:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 80045ea:	8afa      	ldrh	r2, [r7, #22]
 80045ec:	88bb      	ldrh	r3, [r7, #4]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d301      	bcc.n	80045f6 <u8g2_clip_intersection2+0x56>
    return 0;
 80045f2:	2300      	movs	r3, #0
 80045f4:	e01c      	b.n	8004630 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 80045f6:	8aba      	ldrh	r2, [r7, #20]
 80045f8:	88fb      	ldrh	r3, [r7, #6]
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d801      	bhi.n	8004602 <u8g2_clip_intersection2+0x62>
    return 0;
 80045fe:	2300      	movs	r3, #0
 8004600:	e016      	b.n	8004630 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 8004602:	8afa      	ldrh	r2, [r7, #22]
 8004604:	88fb      	ldrh	r3, [r7, #6]
 8004606:	429a      	cmp	r2, r3
 8004608:	d201      	bcs.n	800460e <u8g2_clip_intersection2+0x6e>
    a = c;
 800460a:	88fb      	ldrh	r3, [r7, #6]
 800460c:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 800460e:	8aba      	ldrh	r2, [r7, #20]
 8004610:	88bb      	ldrh	r3, [r7, #4]
 8004612:	429a      	cmp	r2, r3
 8004614:	d901      	bls.n	800461a <u8g2_clip_intersection2+0x7a>
    b = d;
 8004616:	88bb      	ldrh	r3, [r7, #4]
 8004618:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	8afa      	ldrh	r2, [r7, #22]
 800461e:	801a      	strh	r2, [r3, #0]
  b -= a;
 8004620:	8aba      	ldrh	r2, [r7, #20]
 8004622:	8afb      	ldrh	r3, [r7, #22]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	82bb      	strh	r3, [r7, #20]
  *len = b;
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	8aba      	ldrh	r2, [r7, #20]
 800462c:	801a      	strh	r2, [r3, #0]
  return 1;
 800462e:	2301      	movs	r3, #1
}
 8004630:	4618      	mov	r0, r3
 8004632:	371c      	adds	r7, #28
 8004634:	46bd      	mov	sp, r7
 8004636:	bc80      	pop	{r7}
 8004638:	4770      	bx	lr

0800463a <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800463a:	b590      	push	{r4, r7, lr}
 800463c:	b087      	sub	sp, #28
 800463e:	af02      	add	r7, sp, #8
 8004640:	60f8      	str	r0, [r7, #12]
 8004642:	4608      	mov	r0, r1
 8004644:	4611      	mov	r1, r2
 8004646:	461a      	mov	r2, r3
 8004648:	4603      	mov	r3, r0
 800464a:	817b      	strh	r3, [r7, #10]
 800464c:	460b      	mov	r3, r1
 800464e:	813b      	strh	r3, [r7, #8]
 8004650:	4613      	mov	r3, r2
 8004652:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004658:	893a      	ldrh	r2, [r7, #8]
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8004662:	88f8      	ldrh	r0, [r7, #6]
 8004664:	893a      	ldrh	r2, [r7, #8]
 8004666:	8979      	ldrh	r1, [r7, #10]
 8004668:	f897 3020 	ldrb.w	r3, [r7, #32]
 800466c:	9300      	str	r3, [sp, #0]
 800466e:	4603      	mov	r3, r0
 8004670:	68f8      	ldr	r0, [r7, #12]
 8004672:	47a0      	blx	r4
}
 8004674:	bf00      	nop
 8004676:	3714      	adds	r7, #20
 8004678:	46bd      	mov	sp, r7
 800467a:	bd90      	pop	{r4, r7, pc}

0800467c <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800467c:	b590      	push	{r4, r7, lr}
 800467e:	b087      	sub	sp, #28
 8004680:	af02      	add	r7, sp, #8
 8004682:	60f8      	str	r0, [r7, #12]
 8004684:	4608      	mov	r0, r1
 8004686:	4611      	mov	r1, r2
 8004688:	461a      	mov	r2, r3
 800468a:	4603      	mov	r3, r0
 800468c:	817b      	strh	r3, [r7, #10]
 800468e:	460b      	mov	r3, r1
 8004690:	813b      	strh	r3, [r7, #8]
 8004692:	4613      	mov	r3, r2
 8004694:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800469c:	2b00      	cmp	r3, #0
 800469e:	d075      	beq.n	800478c <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 80046a0:	88fb      	ldrh	r3, [r7, #6]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d072      	beq.n	800478c <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 80046a6:	88fb      	ldrh	r3, [r7, #6]
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d91a      	bls.n	80046e2 <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 80046ac:	f897 3020 	ldrb.w	r3, [r7, #32]
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	d109      	bne.n	80046c8 <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 80046b4:	897a      	ldrh	r2, [r7, #10]
 80046b6:	88fb      	ldrh	r3, [r7, #6]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	817b      	strh	r3, [r7, #10]
	  x++;
 80046be:	897b      	ldrh	r3, [r7, #10]
 80046c0:	3301      	adds	r3, #1
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	817b      	strh	r3, [r7, #10]
 80046c6:	e00c      	b.n	80046e2 <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 80046c8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80046cc:	2b03      	cmp	r3, #3
 80046ce:	d108      	bne.n	80046e2 <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 80046d0:	893a      	ldrh	r2, [r7, #8]
 80046d2:	88fb      	ldrh	r3, [r7, #6]
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	813b      	strh	r3, [r7, #8]
	  y++;
 80046da:	893b      	ldrh	r3, [r7, #8]
 80046dc:	3301      	adds	r3, #1
 80046de:	b29b      	uxth	r3, r3
 80046e0:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 80046e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80046e6:	f003 0301 	and.w	r3, r3, #1
 80046ea:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 80046ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d11a      	bne.n	800472c <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 80046fc:	893b      	ldrh	r3, [r7, #8]
 80046fe:	429a      	cmp	r2, r3
 8004700:	d83b      	bhi.n	800477a <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8004708:	893b      	ldrh	r3, [r7, #8]
 800470a:	429a      	cmp	r2, r3
 800470c:	d937      	bls.n	800477e <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800471a:	1db9      	adds	r1, r7, #6
 800471c:	f107 000a 	add.w	r0, r7, #10
 8004720:	f7ff ff3e 	bl	80045a0 <u8g2_clip_intersection2>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d11a      	bne.n	8004760 <u8g2_DrawHVLine+0xe4>
	  return;
 800472a:	e02f      	b.n	800478c <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8004732:	897b      	ldrh	r3, [r7, #10]
 8004734:	429a      	cmp	r2, r3
 8004736:	d824      	bhi.n	8004782 <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800473e:	897b      	ldrh	r3, [r7, #10]
 8004740:	429a      	cmp	r2, r3
 8004742:	d920      	bls.n	8004786 <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8004750:	1db9      	adds	r1, r7, #6
 8004752:	f107 0008 	add.w	r0, r7, #8
 8004756:	f7ff ff23 	bl	80045a0 <u8g2_clip_intersection2>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d014      	beq.n	800478a <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004764:	689c      	ldr	r4, [r3, #8]
 8004766:	8979      	ldrh	r1, [r7, #10]
 8004768:	893a      	ldrh	r2, [r7, #8]
 800476a:	88f8      	ldrh	r0, [r7, #6]
 800476c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004770:	9300      	str	r3, [sp, #0]
 8004772:	4603      	mov	r3, r0
 8004774:	68f8      	ldr	r0, [r7, #12]
 8004776:	47a0      	blx	r4
 8004778:	e008      	b.n	800478c <u8g2_DrawHVLine+0x110>
	  return;
 800477a:	bf00      	nop
 800477c:	e006      	b.n	800478c <u8g2_DrawHVLine+0x110>
	  return;
 800477e:	bf00      	nop
 8004780:	e004      	b.n	800478c <u8g2_DrawHVLine+0x110>
	  return;
 8004782:	bf00      	nop
 8004784:	e002      	b.n	800478c <u8g2_DrawHVLine+0x110>
	  return;
 8004786:	bf00      	nop
 8004788:	e000      	b.n	800478c <u8g2_DrawHVLine+0x110>
	  return;
 800478a:	bf00      	nop
    }
}
 800478c:	3714      	adds	r7, #20
 800478e:	46bd      	mov	sp, r7
 8004790:	bd90      	pop	{r4, r7, pc}

08004792 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8004792:	b490      	push	{r4, r7}
 8004794:	b082      	sub	sp, #8
 8004796:	af00      	add	r7, sp, #0
 8004798:	4604      	mov	r4, r0
 800479a:	4608      	mov	r0, r1
 800479c:	4611      	mov	r1, r2
 800479e:	461a      	mov	r2, r3
 80047a0:	4623      	mov	r3, r4
 80047a2:	80fb      	strh	r3, [r7, #6]
 80047a4:	4603      	mov	r3, r0
 80047a6:	80bb      	strh	r3, [r7, #4]
 80047a8:	460b      	mov	r3, r1
 80047aa:	807b      	strh	r3, [r7, #2]
 80047ac:	4613      	mov	r3, r2
 80047ae:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 80047b0:	887a      	ldrh	r2, [r7, #2]
 80047b2:	88bb      	ldrh	r3, [r7, #4]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d20d      	bcs.n	80047d4 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 80047b8:	883a      	ldrh	r2, [r7, #0]
 80047ba:	88fb      	ldrh	r3, [r7, #6]
 80047bc:	429a      	cmp	r2, r3
 80047be:	d901      	bls.n	80047c4 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e014      	b.n	80047ee <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 80047c4:	887a      	ldrh	r2, [r7, #2]
 80047c6:	883b      	ldrh	r3, [r7, #0]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d901      	bls.n	80047d0 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e00e      	b.n	80047ee <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 80047d0:	2300      	movs	r3, #0
 80047d2:	e00c      	b.n	80047ee <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 80047d4:	883a      	ldrh	r2, [r7, #0]
 80047d6:	88fb      	ldrh	r3, [r7, #6]
 80047d8:	429a      	cmp	r2, r3
 80047da:	d907      	bls.n	80047ec <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 80047dc:	887a      	ldrh	r2, [r7, #2]
 80047de:	883b      	ldrh	r3, [r7, #0]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d901      	bls.n	80047e8 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e002      	b.n	80047ee <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 80047e8:	2300      	movs	r3, #0
 80047ea:	e000      	b.n	80047ee <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 80047ec:	2300      	movs	r3, #0
    }
  }
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3708      	adds	r7, #8
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bc90      	pop	{r4, r7}
 80047f6:	4770      	bx	lr

080047f8 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	4608      	mov	r0, r1
 8004802:	4611      	mov	r1, r2
 8004804:	461a      	mov	r2, r3
 8004806:	4603      	mov	r3, r0
 8004808:	817b      	strh	r3, [r7, #10]
 800480a:	460b      	mov	r3, r1
 800480c:	813b      	strh	r3, [r7, #8]
 800480e:	4613      	mov	r3, r2
 8004810:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f8b3 104e 	ldrh.w	r1, [r3, #78]	; 0x4e
 800481e:	8b3b      	ldrh	r3, [r7, #24]
 8004820:	893a      	ldrh	r2, [r7, #8]
 8004822:	f7ff ffb6 	bl	8004792 <u8g2_is_intersection_decision_tree>
 8004826:	4603      	mov	r3, r0
 8004828:	2b00      	cmp	r3, #0
 800482a:	d101      	bne.n	8004830 <u8g2_IsIntersection+0x38>
    return 0; 
 800482c:	2300      	movs	r3, #0
 800482e:	e00a      	b.n	8004846 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
 800483c:	88fb      	ldrh	r3, [r7, #6]
 800483e:	897a      	ldrh	r2, [r7, #10]
 8004840:	f7ff ffa7 	bl	8004792 <u8g2_is_intersection_decision_tree>
 8004844:	4603      	mov	r3, r0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3710      	adds	r7, #16
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}

0800484e <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800484e:	b480      	push	{r7}
 8004850:	b089      	sub	sp, #36	; 0x24
 8004852:	af00      	add	r7, sp, #0
 8004854:	60f8      	str	r0, [r7, #12]
 8004856:	4608      	mov	r0, r1
 8004858:	4611      	mov	r1, r2
 800485a:	461a      	mov	r2, r3
 800485c:	4603      	mov	r3, r0
 800485e:	817b      	strh	r3, [r7, #10]
 8004860:	460b      	mov	r3, r1
 8004862:	813b      	strh	r3, [r7, #8]
 8004864:	4613      	mov	r3, r2
 8004866:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8004868:	893b      	ldrh	r3, [r7, #8]
 800486a:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 800486c:	7efb      	ldrb	r3, [r7, #27]
 800486e:	f003 0307 	and.w	r3, r3, #7
 8004872:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 8004874:	2301      	movs	r3, #1
 8004876:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 8004878:	7e3a      	ldrb	r2, [r7, #24]
 800487a:	7efb      	ldrb	r3, [r7, #27]
 800487c:	fa02 f303 	lsl.w	r3, r2, r3
 8004880:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 8004882:	2300      	movs	r3, #0
 8004884:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 8004886:	2300      	movs	r3, #0
 8004888:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8004890:	2b01      	cmp	r3, #1
 8004892:	d801      	bhi.n	8004898 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8004894:	7e3b      	ldrb	r3, [r7, #24]
 8004896:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d001      	beq.n	80048a6 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 80048a2:	7e3b      	ldrb	r3, [r7, #24]
 80048a4:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 80048a6:	893b      	ldrh	r3, [r7, #8]
 80048a8:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 80048aa:	8afb      	ldrh	r3, [r7, #22]
 80048ac:	f023 0307 	bic.w	r3, r3, #7
 80048b0:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	7c1b      	ldrb	r3, [r3, #16]
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	8afa      	ldrh	r2, [r7, #22]
 80048bc:	fb02 f303 	mul.w	r3, r2, r3
 80048c0:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048c6:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 80048c8:	8afb      	ldrh	r3, [r7, #22]
 80048ca:	69fa      	ldr	r2, [r7, #28]
 80048cc:	4413      	add	r3, r2
 80048ce:	61fb      	str	r3, [r7, #28]
  ptr += x;
 80048d0:	897b      	ldrh	r3, [r7, #10]
 80048d2:	69fa      	ldr	r2, [r7, #28]
 80048d4:	4413      	add	r3, r2
 80048d6:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 80048d8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d117      	bne.n	8004910 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	781a      	ldrb	r2, [r3, #0]
 80048e4:	7ebb      	ldrb	r3, [r7, #26]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	b2da      	uxtb	r2, r3
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	781a      	ldrb	r2, [r3, #0]
 80048f2:	7e7b      	ldrb	r3, [r7, #25]
 80048f4:	4053      	eors	r3, r2
 80048f6:	b2da      	uxtb	r2, r3
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	701a      	strb	r2, [r3, #0]
	ptr++;
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	3301      	adds	r3, #1
 8004900:	61fb      	str	r3, [r7, #28]
	len--;
 8004902:	88fb      	ldrh	r3, [r7, #6]
 8004904:	3b01      	subs	r3, #1
 8004906:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 8004908:	88fb      	ldrh	r3, [r7, #6]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d1e8      	bne.n	80048e0 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 800490e:	e038      	b.n	8004982 <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	781a      	ldrb	r2, [r3, #0]
 8004914:	7ebb      	ldrb	r3, [r7, #26]
 8004916:	4313      	orrs	r3, r2
 8004918:	b2da      	uxtb	r2, r3
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	781a      	ldrb	r2, [r3, #0]
 8004922:	7e7b      	ldrb	r3, [r7, #25]
 8004924:	4053      	eors	r3, r2
 8004926:	b2da      	uxtb	r2, r3
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 800492c:	7efb      	ldrb	r3, [r7, #27]
 800492e:	3301      	adds	r3, #1
 8004930:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 8004932:	7efb      	ldrb	r3, [r7, #27]
 8004934:	f003 0307 	and.w	r3, r3, #7
 8004938:	76fb      	strb	r3, [r7, #27]
      len--;
 800493a:	88fb      	ldrh	r3, [r7, #6]
 800493c:	3b01      	subs	r3, #1
 800493e:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 8004940:	7efb      	ldrb	r3, [r7, #27]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d114      	bne.n	8004970 <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800494a:	461a      	mov	r2, r3
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	4413      	add	r3, r2
 8004950:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8004958:	2b01      	cmp	r3, #1
 800495a:	d801      	bhi.n	8004960 <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 800495c:	2301      	movs	r3, #1
 800495e:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8004966:	2b01      	cmp	r3, #1
 8004968:	d008      	beq.n	800497c <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 800496a:	2301      	movs	r3, #1
 800496c:	767b      	strb	r3, [r7, #25]
 800496e:	e005      	b.n	800497c <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 8004970:	7ebb      	ldrb	r3, [r7, #26]
 8004972:	005b      	lsls	r3, r3, #1
 8004974:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 8004976:	7e7b      	ldrb	r3, [r7, #25]
 8004978:	005b      	lsls	r3, r3, #1
 800497a:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 800497c:	88fb      	ldrh	r3, [r7, #6]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d1c6      	bne.n	8004910 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8004982:	bf00      	nop
 8004984:	3724      	adds	r7, #36	; 0x24
 8004986:	46bd      	mov	sp, r7
 8004988:	bc80      	pop	{r7}
 800498a:	4770      	bx	lr

0800498c <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b082      	sub	sp, #8
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  u8g2->clip_y0 = 0;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80049aa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80049b4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  
  u8g2->cb->update_page_win(u8g2);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	4798      	blx	r3
}
 80049c2:	bf00      	nop
 80049c4:	3708      	adds	r7, #8
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}

080049ca <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 80049ca:	b580      	push	{r7, lr}
 80049cc:	b084      	sub	sp, #16
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	60f8      	str	r0, [r7, #12]
 80049d2:	60b9      	str	r1, [r7, #8]
 80049d4:	603b      	str	r3, [r7, #0]
 80049d6:	4613      	mov	r3, r2
 80049d8:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2200      	movs	r2, #0
 80049de:	659a      	str	r2, [r3, #88]	; 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	683a      	ldr	r2, [r7, #0]
 80049e4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	68ba      	ldr	r2, [r7, #8]
 80049ea:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	79fa      	ldrb	r2, [r7, #7]
 80049f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2200      	movs	r2, #0
 80049f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  u8g2->bitmap_transparency = 0;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2200      	movs	r2, #0
 8004a08:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  
  u8g2->font_height_mode = 0; /* issue 2046 */
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
  u8g2->draw_color = 1;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  u8g2->is_auto_page_clear = 1;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
  
  u8g2->cb = u8g2_cb;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	69ba      	ldr	r2, [r7, #24]
 8004a28:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	68f8      	ldr	r0, [r7, #12]
 8004a32:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8004a34:	68f8      	ldr	r0, [r7, #12]
 8004a36:	f7ff ffa9 	bl	800498c <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8004a3a:	68f8      	ldr	r0, [r7, #12]
 8004a3c:	f7ff fd88 	bl	8004550 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2200      	movs	r2, #0
 8004a44:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
#endif
}
 8004a48:	bf00      	nop
 8004a4a:	3710      	adds	r7, #16
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <u8g2_SetDisplayRotation>:
/*
  Usually the display rotation is set initially, but it could be done later also
  u8g2_cb can be U8G2_R0..U8G2_R3
*/
void u8g2_SetDisplayRotation(u8g2_t *u8g2, const u8g2_cb_t *u8g2_cb)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
  u8g2->cb = u8g2_cb;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	683a      	ldr	r2, [r7, #0]
 8004a5e:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	4798      	blx	r3
}
 8004a74:	bf00      	nop
 8004a76:	3708      	adds	r7, #8
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b085      	sub	sp, #20
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004a90:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8004a92:	89fb      	ldrh	r3, [r7, #14]
 8004a94:	00db      	lsls	r3, r3, #3
 8004a96:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	89fa      	ldrh	r2, [r7, #14]
 8004a9c:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  t = display_info->tile_width;
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	7c1b      	ldrb	r3, [r3, #16]
 8004aa2:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 8004aa4:	89fb      	ldrh	r3, [r7, #14]
 8004aa6:	00db      	lsls	r3, r3, #3
 8004aa8:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	89fa      	ldrh	r2, [r7, #14]
 8004aae:	875a      	strh	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004ab6:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8004ab8:	89fb      	ldrh	r3, [r7, #14]
 8004aba:	00db      	lsls	r3, r3, #3
 8004abc:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	89fa      	ldrh	r2, [r7, #14]
 8004ac2:	87da      	strh	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_buf_height;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004aca:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8004acc:	89fb      	ldrh	r3, [r7, #14]
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 8004ad4:	4413      	add	r3, r2
 8004ad6:	68ba      	ldr	r2, [r7, #8]
 8004ad8:	7c52      	ldrb	r2, [r2, #17]
 8004ada:	4293      	cmp	r3, r2
 8004adc:	dd08      	ble.n	8004af0 <u8g2_update_dimension_common+0x74>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	7c5b      	ldrb	r3, [r3, #17]
 8004ae2:	b29a      	uxth	r2, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8004af0:	89fb      	ldrh	r3, [r7, #14]
 8004af2:	00db      	lsls	r3, r3, #3
 8004af4:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8004b12:	89fb      	ldrh	r3, [r7, #14]
 8004b14:	4413      	add	r3, r2
 8004b16:	b29a      	uxth	r2, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	8a9a      	ldrh	r2, [r3, #20]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  u8g2->height = display_info->pixel_height;
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	8ada      	ldrh	r2, [r3, #22]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 8004b32:	bf00      	nop
 8004b34:	3714      	adds	r7, #20
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bc80      	pop	{r7}
 8004b3a:	4770      	bx	lr

08004b3c <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b084      	sub	sp, #16
 8004b40:	af02      	add	r7, sp, #8
 8004b42:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f8b3 0052 	ldrh.w	r0, [r3, #82]	; 0x52
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004b5c:	9300      	str	r3, [sp, #0]
 8004b5e:	4603      	mov	r3, r0
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f7ff fe49 	bl	80047f8 <u8g2_IsIntersection>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d104      	bne.n	8004b76 <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 8004b74:	e03b      	b.n	8004bee <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2201      	movs	r2, #1
 8004b7a:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d205      	bcs.n	8004b9a <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d905      	bls.n	8004bb6 <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d205      	bcs.n	8004bd2 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d905      	bls.n	8004bee <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 8004bee:	bf00      	nop
 8004bf0:	3708      	adds	r7, #8
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}

08004bf6 <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 8004bf6:	b580      	push	{r7, lr}
 8004bf8:	b082      	sub	sp, #8
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f7ff ff3c 	bl	8004a7c <u8g2_update_dimension_common>
}
 8004c04:	bf00      	nop
 8004c06:	3708      	adds	r7, #8
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}

08004c0c <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b082      	sub	sp, #8
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  
  u8g2->user_y0 = u8g2->buf_y0;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  u8g2->user_y1 = u8g2->buf_y1;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f7ff ff7b 	bl	8004b3c <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8004c46:	bf00      	nop
 8004c48:	3708      	adds	r7, #8
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}

08004c4e <u8g2_update_dimension_r2>:
  u8g2_apply_clip_window(u8g2);
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}

void u8g2_update_dimension_r2(u8g2_t *u8g2)
{
 8004c4e:	b580      	push	{r7, lr}
 8004c50:	b082      	sub	sp, #8
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f7ff ff10 	bl	8004a7c <u8g2_update_dimension_common>
}
 8004c5c:	bf00      	nop
 8004c5e:	3708      	adds	r7, #8
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <u8g2_update_page_win_r2>:

void u8g2_update_page_win_r2(u8g2_t *u8g2)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b082      	sub	sp, #8
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  u8g2->user_x1 = u8g2->width;	/* pixel_buf_width replaced with width */
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  
  /* there are ases where the height is not a multiple of 8. */
  /* in such a case u8g2->buf_y1 might be heigher than u8g2->height */
  u8g2->user_y0 = 0;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2200      	movs	r2, #0
 8004c84:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  if ( u8g2->height >= u8g2->buf_y1 )
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f8b3 2046 	ldrh.w	r2, [r3, #70]	; 0x46
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d30a      	bcc.n	8004cae <u8g2_update_page_win_r2+0x4a>
    u8g2->user_y0 = u8g2->height - u8g2->buf_y1;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f8b3 2046 	ldrh.w	r2, [r3, #70]	; 0x46
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	b29a      	uxth	r2, r3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  u8g2->user_y1 = u8g2->height - u8g2->buf_y0;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f8b3 2046 	ldrh.w	r2, [r3, #70]	; 0x46
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004cba:	1ad3      	subs	r3, r2, r3
 8004cbc:	b29a      	uxth	r2, r3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f7ff ff39 	bl	8004b3c <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8004cca:	bf00      	nop
 8004ccc:	3708      	adds	r7, #8
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}

08004cd2 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8004cd2:	b580      	push	{r7, lr}
 8004cd4:	b086      	sub	sp, #24
 8004cd6:	af02      	add	r7, sp, #8
 8004cd8:	60f8      	str	r0, [r7, #12]
 8004cda:	4608      	mov	r0, r1
 8004cdc:	4611      	mov	r1, r2
 8004cde:	461a      	mov	r2, r3
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	817b      	strh	r3, [r7, #10]
 8004ce4:	460b      	mov	r3, r1
 8004ce6:	813b      	strh	r3, [r7, #8]
 8004ce8:	4613      	mov	r3, r2
 8004cea:	80fb      	strh	r3, [r7, #6]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8004cec:	88f8      	ldrh	r0, [r7, #6]
 8004cee:	893a      	ldrh	r2, [r7, #8]
 8004cf0:	8979      	ldrh	r1, [r7, #10]
 8004cf2:	7e3b      	ldrb	r3, [r7, #24]
 8004cf4:	9300      	str	r3, [sp, #0]
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	68f8      	ldr	r0, [r7, #12]
 8004cfa:	f7ff fc9e 	bl	800463a <u8g2_draw_hv_line_2dir>
}
 8004cfe:	bf00      	nop
 8004d00:	3710      	adds	r7, #16
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}

08004d06 <u8g2_draw_l90_r2>:
  
  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
}

void u8g2_draw_l90_r2(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8004d06:	b580      	push	{r7, lr}
 8004d08:	b088      	sub	sp, #32
 8004d0a:	af02      	add	r7, sp, #8
 8004d0c:	60f8      	str	r0, [r7, #12]
 8004d0e:	4608      	mov	r0, r1
 8004d10:	4611      	mov	r1, r2
 8004d12:	461a      	mov	r2, r3
 8004d14:	4603      	mov	r3, r0
 8004d16:	817b      	strh	r3, [r7, #10]
 8004d18:	460b      	mov	r3, r1
 8004d1a:	813b      	strh	r3, [r7, #8]
 8004d1c:	4613      	mov	r3, r2
 8004d1e:	80fb      	strh	r3, [r7, #6]
    yy -= len;
    yy++;
  }
  */

  yy = u8g2->height;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d26:	82bb      	strh	r3, [r7, #20]
  yy -= y;
 8004d28:	8aba      	ldrh	r2, [r7, #20]
 8004d2a:	893b      	ldrh	r3, [r7, #8]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	82bb      	strh	r3, [r7, #20]
  
  xx = u8g2->width;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004d36:	82fb      	strh	r3, [r7, #22]
  xx -= x;
 8004d38:	8afa      	ldrh	r2, [r7, #22]
 8004d3a:	897b      	ldrh	r3, [r7, #10]
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	82fb      	strh	r3, [r7, #22]
  
  if ( dir == 0 )
 8004d40:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d107      	bne.n	8004d58 <u8g2_draw_l90_r2+0x52>
  {
    yy--;
 8004d48:	8abb      	ldrh	r3, [r7, #20]
 8004d4a:	3b01      	subs	r3, #1
 8004d4c:	82bb      	strh	r3, [r7, #20]
    xx -= len;
 8004d4e:	8afa      	ldrh	r2, [r7, #22]
 8004d50:	88fb      	ldrh	r3, [r7, #6]
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	82fb      	strh	r3, [r7, #22]
 8004d56:	e00a      	b.n	8004d6e <u8g2_draw_l90_r2+0x68>
  }
  else if ( dir == 1 )
 8004d58:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d106      	bne.n	8004d6e <u8g2_draw_l90_r2+0x68>
  {
    xx--;
 8004d60:	8afb      	ldrh	r3, [r7, #22]
 8004d62:	3b01      	subs	r3, #1
 8004d64:	82fb      	strh	r3, [r7, #22]
    yy -= len;
 8004d66:	8aba      	ldrh	r2, [r7, #20]
 8004d68:	88fb      	ldrh	r3, [r7, #6]
 8004d6a:	1ad3      	subs	r3, r2, r3
 8004d6c:	82bb      	strh	r3, [r7, #20]
  }

  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 8004d6e:	88f8      	ldrh	r0, [r7, #6]
 8004d70:	8aba      	ldrh	r2, [r7, #20]
 8004d72:	8af9      	ldrh	r1, [r7, #22]
 8004d74:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004d78:	9300      	str	r3, [sp, #0]
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	68f8      	ldr	r0, [r7, #12]
 8004d7e:	f7ff fc5c 	bl	800463a <u8g2_draw_hv_line_2dir>
}
 8004d82:	bf00      	nop
 8004d84:	3718      	adds	r7, #24
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}

08004d8a <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8004d8a:	b480      	push	{r7}
 8004d8c:	b083      	sub	sp, #12
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8004d9a:	bf00      	nop
 8004d9c:	370c      	adds	r7, #12
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bc80      	pop	{r7}
 8004da2:	4770      	bx	lr

08004da4 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	460b      	mov	r3, r1
 8004dae:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8004db0:	78fb      	ldrb	r3, [r7, #3]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d002      	beq.n	8004dbc <u8x8_ascii_next+0x18>
 8004db6:	78fb      	ldrb	r3, [r7, #3]
 8004db8:	2b0a      	cmp	r3, #10
 8004dba:	d102      	bne.n	8004dc2 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 8004dbc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004dc0:	e001      	b.n	8004dc6 <u8x8_ascii_next+0x22>
  return b;
 8004dc2:	78fb      	ldrb	r3, [r7, #3]
 8004dc4:	b29b      	uxth	r3, r3
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	370c      	adds	r7, #12
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bc80      	pop	{r7}
 8004dce:	4770      	bx	lr

08004dd0 <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 8004dd0:	b590      	push	{r4, r7, lr}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	460b      	mov	r3, r1
 8004dda:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	691c      	ldr	r4, [r3, #16]
 8004de0:	78fa      	ldrb	r2, [r7, #3]
 8004de2:	2300      	movs	r3, #0
 8004de4:	2120      	movs	r1, #32
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	47a0      	blx	r4
 8004dea:	4603      	mov	r3, r0
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	370c      	adds	r7, #12
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd90      	pop	{r4, r7, pc}

08004df4 <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8004df4:	b590      	push	{r4, r7, lr}
 8004df6:	b085      	sub	sp, #20
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	460b      	mov	r3, r1
 8004dfe:	607a      	str	r2, [r7, #4]
 8004e00:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	691c      	ldr	r4, [r3, #16]
 8004e06:	7afa      	ldrb	r2, [r7, #11]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2117      	movs	r1, #23
 8004e0c:	68f8      	ldr	r0, [r7, #12]
 8004e0e:	47a0      	blx	r4
 8004e10:	4603      	mov	r3, r0
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3714      	adds	r7, #20
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd90      	pop	{r4, r7, pc}

08004e1a <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8004e1a:	b580      	push	{r7, lr}
 8004e1c:	b082      	sub	sp, #8
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	6078      	str	r0, [r7, #4]
 8004e22:	460b      	mov	r3, r1
 8004e24:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8004e26:	1cfb      	adds	r3, r7, #3
 8004e28:	461a      	mov	r2, r3
 8004e2a:	2101      	movs	r1, #1
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f7ff ffe1 	bl	8004df4 <u8x8_byte_SendBytes>
 8004e32:	4603      	mov	r3, r0
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3708      	adds	r7, #8
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8004e3c:	b590      	push	{r4, r7, lr}
 8004e3e:	b083      	sub	sp, #12
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	460b      	mov	r3, r1
 8004e46:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	68dc      	ldr	r4, [r3, #12]
 8004e4c:	78fa      	ldrb	r2, [r7, #3]
 8004e4e:	2300      	movs	r3, #0
 8004e50:	2115      	movs	r1, #21
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	47a0      	blx	r4
 8004e56:	4603      	mov	r3, r0
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	370c      	adds	r7, #12
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd90      	pop	{r4, r7, pc}

08004e60 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8004e60:	b590      	push	{r4, r7, lr}
 8004e62:	b083      	sub	sp, #12
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	460b      	mov	r3, r1
 8004e6a:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	68dc      	ldr	r4, [r3, #12]
 8004e70:	78fa      	ldrb	r2, [r7, #3]
 8004e72:	2300      	movs	r3, #0
 8004e74:	2116      	movs	r1, #22
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	47a0      	blx	r4
 8004e7a:	4603      	mov	r3, r0
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd90      	pop	{r4, r7, pc}

08004e84 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8004e84:	b590      	push	{r4, r7, lr}
 8004e86:	b085      	sub	sp, #20
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	460b      	mov	r3, r1
 8004e8e:	607a      	str	r2, [r7, #4]
 8004e90:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	68dc      	ldr	r4, [r3, #12]
 8004e96:	7afa      	ldrb	r2, [r7, #11]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2117      	movs	r1, #23
 8004e9c:	68f8      	ldr	r0, [r7, #12]
 8004e9e:	47a0      	blx	r4
 8004ea0:	4603      	mov	r3, r0
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3714      	adds	r7, #20
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd90      	pop	{r4, r7, pc}

08004eaa <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8004eaa:	b590      	push	{r4, r7, lr}
 8004eac:	b083      	sub	sp, #12
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	68dc      	ldr	r4, [r3, #12]
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	2200      	movs	r2, #0
 8004eba:	2118      	movs	r1, #24
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	47a0      	blx	r4
 8004ec0:	4603      	mov	r3, r0
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	370c      	adds	r7, #12
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd90      	pop	{r4, r7, pc}

08004eca <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8004eca:	b590      	push	{r4, r7, lr}
 8004ecc:	b083      	sub	sp, #12
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	68dc      	ldr	r4, [r3, #12]
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	2200      	movs	r2, #0
 8004eda:	2119      	movs	r1, #25
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	47a0      	blx	r4
 8004ee0:	4603      	mov	r3, r0
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	370c      	adds	r7, #12
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd90      	pop	{r4, r7, pc}

08004eea <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8004eea:	b590      	push	{r4, r7, lr}
 8004eec:	b085      	sub	sp, #20
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
 8004ef2:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	73fb      	strb	r3, [r7, #15]
    data++;
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	3301      	adds	r3, #1
 8004efe:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8004f00:	7bfb      	ldrb	r3, [r7, #15]
 8004f02:	2bfe      	cmp	r3, #254	; 0xfe
 8004f04:	d031      	beq.n	8004f6a <u8x8_cad_SendSequence+0x80>
 8004f06:	2bfe      	cmp	r3, #254	; 0xfe
 8004f08:	dc3d      	bgt.n	8004f86 <u8x8_cad_SendSequence+0x9c>
 8004f0a:	2b19      	cmp	r3, #25
 8004f0c:	dc3b      	bgt.n	8004f86 <u8x8_cad_SendSequence+0x9c>
 8004f0e:	2b18      	cmp	r3, #24
 8004f10:	da23      	bge.n	8004f5a <u8x8_cad_SendSequence+0x70>
 8004f12:	2b16      	cmp	r3, #22
 8004f14:	dc02      	bgt.n	8004f1c <u8x8_cad_SendSequence+0x32>
 8004f16:	2b15      	cmp	r3, #21
 8004f18:	da03      	bge.n	8004f22 <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8004f1a:	e034      	b.n	8004f86 <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 8004f1c:	2b17      	cmp	r3, #23
 8004f1e:	d00e      	beq.n	8004f3e <u8x8_cad_SendSequence+0x54>
	return;
 8004f20:	e031      	b.n	8004f86 <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	68dc      	ldr	r4, [r3, #12]
 8004f2c:	7bba      	ldrb	r2, [r7, #14]
 8004f2e:	7bf9      	ldrb	r1, [r7, #15]
 8004f30:	2300      	movs	r3, #0
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	47a0      	blx	r4
	  data++;
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	3301      	adds	r3, #1
 8004f3a:	603b      	str	r3, [r7, #0]
	  break;
 8004f3c:	e022      	b.n	8004f84 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8004f44:	f107 030e 	add.w	r3, r7, #14
 8004f48:	461a      	mov	r2, r3
 8004f4a:	2101      	movs	r1, #1
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f7ff ff99 	bl	8004e84 <u8x8_cad_SendData>
	  data++;
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	3301      	adds	r3, #1
 8004f56:	603b      	str	r3, [r7, #0]
	  break;
 8004f58:	e014      	b.n	8004f84 <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	68dc      	ldr	r4, [r3, #12]
 8004f5e:	7bf9      	ldrb	r1, [r7, #15]
 8004f60:	2300      	movs	r3, #0
 8004f62:	2200      	movs	r2, #0
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	47a0      	blx	r4
	  break;
 8004f68:	e00c      	b.n	8004f84 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8004f70:	7bbb      	ldrb	r3, [r7, #14]
 8004f72:	461a      	mov	r2, r3
 8004f74:	2129      	movs	r1, #41	; 0x29
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f000 f9d8 	bl	800532c <u8x8_gpio_call>
	  data++;
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	3301      	adds	r3, #1
 8004f80:	603b      	str	r3, [r7, #0]
	  break;
 8004f82:	bf00      	nop
    cmd = *data;
 8004f84:	e7b6      	b.n	8004ef4 <u8x8_cad_SendSequence+0xa>
	return;
 8004f86:	bf00      	nop
    }
  }
}
 8004f88:	3714      	adds	r7, #20
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd90      	pop	{r4, r7, pc}
	...

08004f90 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8004f90:	b590      	push	{r4, r7, lr}
 8004f92:	b085      	sub	sp, #20
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	60f8      	str	r0, [r7, #12]
 8004f98:	607b      	str	r3, [r7, #4]
 8004f9a:	460b      	mov	r3, r1
 8004f9c:	72fb      	strb	r3, [r7, #11]
 8004f9e:	4613      	mov	r3, r2
 8004fa0:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 8004fa2:	7afb      	ldrb	r3, [r7, #11]
 8004fa4:	3b14      	subs	r3, #20
 8004fa6:	2b05      	cmp	r3, #5
 8004fa8:	d82f      	bhi.n	800500a <u8x8_cad_001+0x7a>
 8004faa:	a201      	add	r2, pc, #4	; (adr r2, 8004fb0 <u8x8_cad_001+0x20>)
 8004fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fb0:	08004ff9 	.word	0x08004ff9
 8004fb4:	08004fc9 	.word	0x08004fc9
 8004fb8:	08004fdd 	.word	0x08004fdd
 8004fbc:	08004ff1 	.word	0x08004ff1
 8004fc0:	08004ff9 	.word	0x08004ff9
 8004fc4:	08004ff9 	.word	0x08004ff9
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 8004fc8:	2100      	movs	r1, #0
 8004fca:	68f8      	ldr	r0, [r7, #12]
 8004fcc:	f7ff ff00 	bl	8004dd0 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8004fd0:	7abb      	ldrb	r3, [r7, #10]
 8004fd2:	4619      	mov	r1, r3
 8004fd4:	68f8      	ldr	r0, [r7, #12]
 8004fd6:	f7ff ff20 	bl	8004e1a <u8x8_byte_SendByte>
      break;
 8004fda:	e018      	b.n	800500e <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 8004fdc:	2100      	movs	r1, #0
 8004fde:	68f8      	ldr	r0, [r7, #12]
 8004fe0:	f7ff fef6 	bl	8004dd0 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8004fe4:	7abb      	ldrb	r3, [r7, #10]
 8004fe6:	4619      	mov	r1, r3
 8004fe8:	68f8      	ldr	r0, [r7, #12]
 8004fea:	f7ff ff16 	bl	8004e1a <u8x8_byte_SendByte>
      break;
 8004fee:	e00e      	b.n	800500e <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 8004ff0:	2101      	movs	r1, #1
 8004ff2:	68f8      	ldr	r0, [r7, #12]
 8004ff4:	f7ff feec 	bl	8004dd0 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	691c      	ldr	r4, [r3, #16]
 8004ffc:	7aba      	ldrb	r2, [r7, #10]
 8004ffe:	7af9      	ldrb	r1, [r7, #11]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	68f8      	ldr	r0, [r7, #12]
 8005004:	47a0      	blx	r4
 8005006:	4603      	mov	r3, r0
 8005008:	e002      	b.n	8005010 <u8x8_cad_001+0x80>
    default:
      return 0;
 800500a:	2300      	movs	r3, #0
 800500c:	e000      	b.n	8005010 <u8x8_cad_001+0x80>
  }
  return 1;
 800500e:	2301      	movs	r3, #1
}
 8005010:	4618      	mov	r0, r3
 8005012:	3714      	adds	r7, #20
 8005014:	46bd      	mov	sp, r7
 8005016:	bd90      	pop	{r4, r7, pc}

08005018 <u8x8_d_ssd1306_sh1106_generic>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b086      	sub	sp, #24
 800501c:	af00      	add	r7, sp, #0
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	607b      	str	r3, [r7, #4]
 8005022:	460b      	mov	r3, r1
 8005024:	72fb      	strb	r3, [r7, #11]
 8005026:	4613      	mov	r3, r2
 8005028:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 800502a:	7afb      	ldrb	r3, [r7, #11]
 800502c:	3b0b      	subs	r3, #11
 800502e:	2b04      	cmp	r3, #4
 8005030:	f200 808a 	bhi.w	8005148 <u8x8_d_ssd1306_sh1106_generic+0x130>
 8005034:	a201      	add	r2, pc, #4	; (adr r2, 800503c <u8x8_d_ssd1306_sh1106_generic+0x24>)
 8005036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800503a:	bf00      	nop
 800503c:	08005051 	.word	0x08005051
 8005040:	08005149 	.word	0x08005149
 8005044:	0800506b 	.word	0x0800506b
 8005048:	0800509d 	.word	0x0800509d
 800504c:	080050bd 	.word	0x080050bd
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8005050:	7abb      	ldrb	r3, [r7, #10]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d104      	bne.n	8005060 <u8x8_d_ssd1306_sh1106_generic+0x48>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
 8005056:	4940      	ldr	r1, [pc, #256]	; (8005158 <u8x8_d_ssd1306_sh1106_generic+0x140>)
 8005058:	68f8      	ldr	r0, [r7, #12]
 800505a:	f7ff ff46 	bl	8004eea <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
      break;
 800505e:	e075      	b.n	800514c <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
 8005060:	493e      	ldr	r1, [pc, #248]	; (800515c <u8x8_d_ssd1306_sh1106_generic+0x144>)
 8005062:	68f8      	ldr	r0, [r7, #12]
 8005064:	f7ff ff41 	bl	8004eea <u8x8_cad_SendSequence>
      break;
 8005068:	e070      	b.n	800514c <u8x8_d_ssd1306_sh1106_generic+0x134>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 800506a:	7abb      	ldrb	r3, [r7, #10]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d10a      	bne.n	8005086 <u8x8_d_ssd1306_sh1106_generic+0x6e>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
 8005070:	493b      	ldr	r1, [pc, #236]	; (8005160 <u8x8_d_ssd1306_sh1106_generic+0x148>)
 8005072:	68f8      	ldr	r0, [r7, #12]
 8005074:	f7ff ff39 	bl	8004eea <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	7c9a      	ldrb	r2, [r3, #18]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 8005084:	e062      	b.n	800514c <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
 8005086:	4937      	ldr	r1, [pc, #220]	; (8005164 <u8x8_d_ssd1306_sh1106_generic+0x14c>)
 8005088:	68f8      	ldr	r0, [r7, #12]
 800508a:	f7ff ff2e 	bl	8004eea <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	7cda      	ldrb	r2, [r3, #19]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 800509a:	e057      	b.n	800514c <u8x8_d_ssd1306_sh1106_generic+0x134>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 800509c:	68f8      	ldr	r0, [r7, #12]
 800509e:	f7ff ff04 	bl	8004eaa <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 80050a2:	2181      	movs	r1, #129	; 0x81
 80050a4:	68f8      	ldr	r0, [r7, #12]
 80050a6:	f7ff fec9 	bl	8004e3c <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
 80050aa:	7abb      	ldrb	r3, [r7, #10]
 80050ac:	4619      	mov	r1, r3
 80050ae:	68f8      	ldr	r0, [r7, #12]
 80050b0:	f7ff fed6 	bl	8004e60 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 80050b4:	68f8      	ldr	r0, [r7, #12]
 80050b6:	f7ff ff08 	bl	8004eca <u8x8_cad_EndTransfer>
      break;
 80050ba:	e047      	b.n	800514c <u8x8_d_ssd1306_sh1106_generic+0x134>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 80050bc:	68f8      	ldr	r0, [r7, #12]
 80050be:	f7ff fef4 	bl	8004eaa <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	795b      	ldrb	r3, [r3, #5]
 80050c6:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 80050c8:	7dfb      	ldrb	r3, [r7, #23]
 80050ca:	00db      	lsls	r3, r3, #3
 80050cc:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80050d4:	7dfb      	ldrb	r3, [r7, #23]
 80050d6:	4413      	add	r3, r2
 80050d8:	75fb      	strb	r3, [r7, #23]
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 80050da:	2140      	movs	r1, #64	; 0x40
 80050dc:	68f8      	ldr	r0, [r7, #12]
 80050de:	f7ff fead 	bl	8004e3c <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 80050e2:	7dfb      	ldrb	r3, [r7, #23]
 80050e4:	091b      	lsrs	r3, r3, #4
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	f043 0310 	orr.w	r3, r3, #16
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	4619      	mov	r1, r3
 80050f0:	68f8      	ldr	r0, [r7, #12]
 80050f2:	f7ff fea3 	bl	8004e3c <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
 80050f6:	7dfb      	ldrb	r3, [r7, #23]
 80050f8:	f003 030f 	and.w	r3, r3, #15
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	4619      	mov	r1, r3
 8005100:	68f8      	ldr	r0, [r7, #12]
 8005102:	f7ff fead 	bl	8004e60 <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	799b      	ldrb	r3, [r3, #6]
 800510a:	f063 034f 	orn	r3, r3, #79	; 0x4f
 800510e:	b2db      	uxtb	r3, r3
 8005110:	4619      	mov	r1, r3
 8005112:	68f8      	ldr	r0, [r7, #12]
 8005114:	f7ff fea4 	bl	8004e60 <u8x8_cad_SendArg>

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	791b      	ldrb	r3, [r3, #4]
 800511c:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 8005124:	7dbb      	ldrb	r3, [r7, #22]
 8005126:	00db      	lsls	r3, r3, #3
 8005128:	b2db      	uxtb	r3, r3
 800512a:	693a      	ldr	r2, [r7, #16]
 800512c:	4619      	mov	r1, r3
 800512e:	68f8      	ldr	r0, [r7, #12]
 8005130:	f7ff fea8 	bl	8004e84 <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 8005134:	7abb      	ldrb	r3, [r7, #10]
 8005136:	3b01      	subs	r3, #1
 8005138:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 800513a:	7abb      	ldrb	r3, [r7, #10]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d1eb      	bne.n	8005118 <u8x8_d_ssd1306_sh1106_generic+0x100>
      
      u8x8_cad_EndTransfer(u8x8);
 8005140:	68f8      	ldr	r0, [r7, #12]
 8005142:	f7ff fec2 	bl	8004eca <u8x8_cad_EndTransfer>
      break;
 8005146:	e001      	b.n	800514c <u8x8_d_ssd1306_sh1106_generic+0x134>
    default:
      return 0;
 8005148:	2300      	movs	r3, #0
 800514a:	e000      	b.n	800514e <u8x8_d_ssd1306_sh1106_generic+0x136>
  }
  return 1;
 800514c:	2301      	movs	r3, #1
}
 800514e:	4618      	mov	r0, r3
 8005150:	3718      	adds	r7, #24
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	08006198 	.word	0x08006198
 800515c:	080061a0 	.word	0x080061a0
 8005160:	080061a8 	.word	0x080061a8
 8005164:	080061b0 	.word	0x080061b0

08005168 <u8x8_d_ssd1306_128x64_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af00      	add	r7, sp, #0
 800516e:	60f8      	str	r0, [r7, #12]
 8005170:	607b      	str	r3, [r7, #4]
 8005172:	460b      	mov	r3, r1
 8005174:	72fb      	strb	r3, [r7, #11]
 8005176:	4613      	mov	r3, r2
 8005178:	72bb      	strb	r3, [r7, #10]
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 800517a:	7aba      	ldrb	r2, [r7, #10]
 800517c:	7af9      	ldrb	r1, [r7, #11]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	68f8      	ldr	r0, [r7, #12]
 8005182:	f7ff ff49 	bl	8005018 <u8x8_d_ssd1306_sh1106_generic>
 8005186:	4603      	mov	r3, r0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d001      	beq.n	8005190 <u8x8_d_ssd1306_128x64_noname+0x28>
    return 1;
 800518c:	2301      	movs	r3, #1
 800518e:	e014      	b.n	80051ba <u8x8_d_ssd1306_128x64_noname+0x52>
  
  switch(msg)
 8005190:	7afb      	ldrb	r3, [r7, #11]
 8005192:	2b09      	cmp	r3, #9
 8005194:	d009      	beq.n	80051aa <u8x8_d_ssd1306_128x64_noname+0x42>
 8005196:	2b0a      	cmp	r3, #10
 8005198:	d10c      	bne.n	80051b4 <u8x8_d_ssd1306_128x64_noname+0x4c>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 800519a:	68f8      	ldr	r0, [r7, #12]
 800519c:	f000 f829 	bl	80051f2 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
 80051a0:	4908      	ldr	r1, [pc, #32]	; (80051c4 <u8x8_d_ssd1306_128x64_noname+0x5c>)
 80051a2:	68f8      	ldr	r0, [r7, #12]
 80051a4:	f7ff fea1 	bl	8004eea <u8x8_cad_SendSequence>
      break;
 80051a8:	e006      	b.n	80051b8 <u8x8_d_ssd1306_128x64_noname+0x50>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
 80051aa:	4907      	ldr	r1, [pc, #28]	; (80051c8 <u8x8_d_ssd1306_128x64_noname+0x60>)
 80051ac:	68f8      	ldr	r0, [r7, #12]
 80051ae:	f000 f80d 	bl	80051cc <u8x8_d_helper_display_setup_memory>
      break;
 80051b2:	e001      	b.n	80051b8 <u8x8_d_ssd1306_128x64_noname+0x50>
    default:
      return 0;
 80051b4:	2300      	movs	r3, #0
 80051b6:	e000      	b.n	80051ba <u8x8_d_ssd1306_128x64_noname+0x52>
  }
  return 1;
 80051b8:	2301      	movs	r3, #1
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3710      	adds	r7, #16
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	08006160 	.word	0x08006160
 80051c8:	080061b8 	.word	0x080061b8

080051cc <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b083      	sub	sp, #12
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	683a      	ldr	r2, [r7, #0]
 80051da:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	7c9a      	ldrb	r2, [r3, #18]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 80051e8:	bf00      	nop
 80051ea:	370c      	adds	r7, #12
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bc80      	pop	{r7}
 80051f0:	4770      	bx	lr

080051f2 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 80051f2:	b590      	push	{r4, r7, lr}
 80051f4:	b083      	sub	sp, #12
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	695c      	ldr	r4, [r3, #20]
 80051fe:	2300      	movs	r3, #0
 8005200:	2200      	movs	r2, #0
 8005202:	2128      	movs	r1, #40	; 0x28
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	68dc      	ldr	r4, [r3, #12]
 800520c:	2300      	movs	r3, #0
 800520e:	2200      	movs	r2, #0
 8005210:	2114      	movs	r1, #20
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8005216:	2201      	movs	r2, #1
 8005218:	214b      	movs	r1, #75	; 0x4b
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 f886 	bl	800532c <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	791b      	ldrb	r3, [r3, #4]
 8005226:	461a      	mov	r2, r3
 8005228:	2129      	movs	r1, #41	; 0x29
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 f87e 	bl	800532c <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8005230:	2200      	movs	r2, #0
 8005232:	214b      	movs	r1, #75	; 0x4b
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f000 f879 	bl	800532c <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	791b      	ldrb	r3, [r3, #4]
 8005240:	461a      	mov	r2, r3
 8005242:	2129      	movs	r1, #41	; 0x29
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f000 f871 	bl	800532c <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 800524a:	2201      	movs	r2, #1
 800524c:	214b      	movs	r1, #75	; 0x4b
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 f86c 	bl	800532c <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	795b      	ldrb	r3, [r3, #5]
 800525a:	461a      	mov	r2, r3
 800525c:	2129      	movs	r1, #41	; 0x29
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 f864 	bl	800532c <u8x8_gpio_call>
}    
 8005264:	bf00      	nop
 8005266:	370c      	adds	r7, #12
 8005268:	46bd      	mov	sp, r7
 800526a:	bd90      	pop	{r4, r7, pc}

0800526c <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 800526c:	b590      	push	{r4, r7, lr}
 800526e:	b085      	sub	sp, #20
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	4608      	mov	r0, r1
 8005276:	4611      	mov	r1, r2
 8005278:	461a      	mov	r2, r3
 800527a:	4603      	mov	r3, r0
 800527c:	70fb      	strb	r3, [r7, #3]
 800527e:	460b      	mov	r3, r1
 8005280:	70bb      	strb	r3, [r7, #2]
 8005282:	4613      	mov	r3, r2
 8005284:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 8005286:	78fb      	ldrb	r3, [r7, #3]
 8005288:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 800528a:	78bb      	ldrb	r3, [r7, #2]
 800528c:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 800528e:	787b      	ldrb	r3, [r7, #1]
 8005290:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8005292:	6a3b      	ldr	r3, [r7, #32]
 8005294:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	689c      	ldr	r4, [r3, #8]
 800529a:	f107 0308 	add.w	r3, r7, #8
 800529e:	2201      	movs	r2, #1
 80052a0:	210f      	movs	r1, #15
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	47a0      	blx	r4
 80052a6:	4603      	mov	r3, r0
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3714      	adds	r7, #20
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd90      	pop	{r4, r7, pc}

080052b0 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 80052b0:	b590      	push	{r4, r7, lr}
 80052b2:	b083      	sub	sp, #12
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	689c      	ldr	r4, [r3, #8]
 80052bc:	2300      	movs	r3, #0
 80052be:	2200      	movs	r2, #0
 80052c0:	2109      	movs	r1, #9
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	47a0      	blx	r4
}
 80052c6:	bf00      	nop
 80052c8:	370c      	adds	r7, #12
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd90      	pop	{r4, r7, pc}

080052ce <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 80052ce:	b590      	push	{r4, r7, lr}
 80052d0:	b083      	sub	sp, #12
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	689c      	ldr	r4, [r3, #8]
 80052da:	2300      	movs	r3, #0
 80052dc:	2200      	movs	r2, #0
 80052de:	210a      	movs	r1, #10
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	47a0      	blx	r4
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}
 80052e4:	bf00      	nop
 80052e6:	370c      	adds	r7, #12
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd90      	pop	{r4, r7, pc}

080052ec <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 80052ec:	b590      	push	{r4, r7, lr}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	460b      	mov	r3, r1
 80052f6:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	689c      	ldr	r4, [r3, #8]
 80052fc:	78fa      	ldrb	r2, [r7, #3]
 80052fe:	2300      	movs	r3, #0
 8005300:	210b      	movs	r1, #11
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	47a0      	blx	r4
}
 8005306:	bf00      	nop
 8005308:	370c      	adds	r7, #12
 800530a:	46bd      	mov	sp, r7
 800530c:	bd90      	pop	{r4, r7, pc}

0800530e <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 800530e:	b590      	push	{r4, r7, lr}
 8005310:	b083      	sub	sp, #12
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	689c      	ldr	r4, [r3, #8]
 800531a:	2300      	movs	r3, #0
 800531c:	2200      	movs	r2, #0
 800531e:	2110      	movs	r1, #16
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	47a0      	blx	r4
}
 8005324:	bf00      	nop
 8005326:	370c      	adds	r7, #12
 8005328:	46bd      	mov	sp, r7
 800532a:	bd90      	pop	{r4, r7, pc}

0800532c <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 800532c:	b590      	push	{r4, r7, lr}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	460b      	mov	r3, r1
 8005336:	70fb      	strb	r3, [r7, #3]
 8005338:	4613      	mov	r3, r2
 800533a:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	695c      	ldr	r4, [r3, #20]
 8005340:	78ba      	ldrb	r2, [r7, #2]
 8005342:	78f9      	ldrb	r1, [r7, #3]
 8005344:	2300      	movs	r3, #0
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	47a0      	blx	r4
}
 800534a:	bf00      	nop
 800534c:	370c      	adds	r7, #12
 800534e:	46bd      	mov	sp, r7
 8005350:	bd90      	pop	{r4, r7, pc}

08005352 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8005352:	b480      	push	{r7}
 8005354:	b085      	sub	sp, #20
 8005356:	af00      	add	r7, sp, #0
 8005358:	60f8      	str	r0, [r7, #12]
 800535a:	607b      	str	r3, [r7, #4]
 800535c:	460b      	mov	r3, r1
 800535e:	72fb      	strb	r3, [r7, #11]
 8005360:	4613      	mov	r3, r2
 8005362:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 8005364:	2300      	movs	r3, #0
}
 8005366:	4618      	mov	r0, r3
 8005368:	3714      	adds	r7, #20
 800536a:	46bd      	mov	sp, r7
 800536c:	bc80      	pop	{r7}
 800536e:	4770      	bx	lr

08005370 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8005370:	b480      	push	{r7}
 8005372:	b083      	sub	sp, #12
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a11      	ldr	r2, [pc, #68]	; (80053c8 <u8x8_SetupDefaults+0x58>)
 8005382:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4a10      	ldr	r2, [pc, #64]	; (80053c8 <u8x8_SetupDefaults+0x58>)
 8005388:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a0e      	ldr	r2, [pc, #56]	; (80053c8 <u8x8_SetupDefaults+0x58>)
 800538e:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	4a0d      	ldr	r2, [pc, #52]	; (80053c8 <u8x8_SetupDefaults+0x58>)
 8005394:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2200      	movs	r2, #0
 80053a2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	22ff      	movs	r2, #255	; 0xff
 80053b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	22ff      	movs	r2, #255	; 0xff
 80053b8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 80053bc:	bf00      	nop
 80053be:	370c      	adds	r7, #12
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bc80      	pop	{r7}
 80053c4:	4770      	bx	lr
 80053c6:	bf00      	nop
 80053c8:	08005353 	.word	0x08005353

080053cc <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b084      	sub	sp, #16
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	60b9      	str	r1, [r7, #8]
 80053d6:	607a      	str	r2, [r7, #4]
 80053d8:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 80053da:	68f8      	ldr	r0, [r7, #12]
 80053dc:	f7ff ffc8 	bl	8005370 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	68ba      	ldr	r2, [r7, #8]
 80053e4:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	683a      	ldr	r2, [r7, #0]
 80053f0:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	69ba      	ldr	r2, [r7, #24]
 80053f6:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 80053f8:	68f8      	ldr	r0, [r7, #12]
 80053fa:	f7ff ff59 	bl	80052b0 <u8x8_SetupMemory>
}
 80053fe:	bf00      	nop
 8005400:	3710      	adds	r7, #16
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
	...

08005408 <__errno>:
 8005408:	4b01      	ldr	r3, [pc, #4]	; (8005410 <__errno+0x8>)
 800540a:	6818      	ldr	r0, [r3, #0]
 800540c:	4770      	bx	lr
 800540e:	bf00      	nop
 8005410:	20000024 	.word	0x20000024

08005414 <__libc_init_array>:
 8005414:	b570      	push	{r4, r5, r6, lr}
 8005416:	2600      	movs	r6, #0
 8005418:	4d0c      	ldr	r5, [pc, #48]	; (800544c <__libc_init_array+0x38>)
 800541a:	4c0d      	ldr	r4, [pc, #52]	; (8005450 <__libc_init_array+0x3c>)
 800541c:	1b64      	subs	r4, r4, r5
 800541e:	10a4      	asrs	r4, r4, #2
 8005420:	42a6      	cmp	r6, r4
 8005422:	d109      	bne.n	8005438 <__libc_init_array+0x24>
 8005424:	f000 fc9c 	bl	8005d60 <_init>
 8005428:	2600      	movs	r6, #0
 800542a:	4d0a      	ldr	r5, [pc, #40]	; (8005454 <__libc_init_array+0x40>)
 800542c:	4c0a      	ldr	r4, [pc, #40]	; (8005458 <__libc_init_array+0x44>)
 800542e:	1b64      	subs	r4, r4, r5
 8005430:	10a4      	asrs	r4, r4, #2
 8005432:	42a6      	cmp	r6, r4
 8005434:	d105      	bne.n	8005442 <__libc_init_array+0x2e>
 8005436:	bd70      	pop	{r4, r5, r6, pc}
 8005438:	f855 3b04 	ldr.w	r3, [r5], #4
 800543c:	4798      	blx	r3
 800543e:	3601      	adds	r6, #1
 8005440:	e7ee      	b.n	8005420 <__libc_init_array+0xc>
 8005442:	f855 3b04 	ldr.w	r3, [r5], #4
 8005446:	4798      	blx	r3
 8005448:	3601      	adds	r6, #1
 800544a:	e7f2      	b.n	8005432 <__libc_init_array+0x1e>
 800544c:	08006264 	.word	0x08006264
 8005450:	08006264 	.word	0x08006264
 8005454:	08006264 	.word	0x08006264
 8005458:	08006268 	.word	0x08006268

0800545c <memset>:
 800545c:	4603      	mov	r3, r0
 800545e:	4402      	add	r2, r0
 8005460:	4293      	cmp	r3, r2
 8005462:	d100      	bne.n	8005466 <memset+0xa>
 8005464:	4770      	bx	lr
 8005466:	f803 1b01 	strb.w	r1, [r3], #1
 800546a:	e7f9      	b.n	8005460 <memset+0x4>

0800546c <siprintf>:
 800546c:	b40e      	push	{r1, r2, r3}
 800546e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005472:	b500      	push	{lr}
 8005474:	b09c      	sub	sp, #112	; 0x70
 8005476:	ab1d      	add	r3, sp, #116	; 0x74
 8005478:	9002      	str	r0, [sp, #8]
 800547a:	9006      	str	r0, [sp, #24]
 800547c:	9107      	str	r1, [sp, #28]
 800547e:	9104      	str	r1, [sp, #16]
 8005480:	4808      	ldr	r0, [pc, #32]	; (80054a4 <siprintf+0x38>)
 8005482:	4909      	ldr	r1, [pc, #36]	; (80054a8 <siprintf+0x3c>)
 8005484:	f853 2b04 	ldr.w	r2, [r3], #4
 8005488:	9105      	str	r1, [sp, #20]
 800548a:	6800      	ldr	r0, [r0, #0]
 800548c:	a902      	add	r1, sp, #8
 800548e:	9301      	str	r3, [sp, #4]
 8005490:	f000 f8fe 	bl	8005690 <_svfiprintf_r>
 8005494:	2200      	movs	r2, #0
 8005496:	9b02      	ldr	r3, [sp, #8]
 8005498:	701a      	strb	r2, [r3, #0]
 800549a:	b01c      	add	sp, #112	; 0x70
 800549c:	f85d eb04 	ldr.w	lr, [sp], #4
 80054a0:	b003      	add	sp, #12
 80054a2:	4770      	bx	lr
 80054a4:	20000024 	.word	0x20000024
 80054a8:	ffff0208 	.word	0xffff0208

080054ac <__retarget_lock_acquire_recursive>:
 80054ac:	4770      	bx	lr

080054ae <__retarget_lock_release_recursive>:
 80054ae:	4770      	bx	lr

080054b0 <sbrk_aligned>:
 80054b0:	b570      	push	{r4, r5, r6, lr}
 80054b2:	4e0e      	ldr	r6, [pc, #56]	; (80054ec <sbrk_aligned+0x3c>)
 80054b4:	460c      	mov	r4, r1
 80054b6:	6831      	ldr	r1, [r6, #0]
 80054b8:	4605      	mov	r5, r0
 80054ba:	b911      	cbnz	r1, 80054c2 <sbrk_aligned+0x12>
 80054bc:	f000 fb7e 	bl	8005bbc <_sbrk_r>
 80054c0:	6030      	str	r0, [r6, #0]
 80054c2:	4621      	mov	r1, r4
 80054c4:	4628      	mov	r0, r5
 80054c6:	f000 fb79 	bl	8005bbc <_sbrk_r>
 80054ca:	1c43      	adds	r3, r0, #1
 80054cc:	d00a      	beq.n	80054e4 <sbrk_aligned+0x34>
 80054ce:	1cc4      	adds	r4, r0, #3
 80054d0:	f024 0403 	bic.w	r4, r4, #3
 80054d4:	42a0      	cmp	r0, r4
 80054d6:	d007      	beq.n	80054e8 <sbrk_aligned+0x38>
 80054d8:	1a21      	subs	r1, r4, r0
 80054da:	4628      	mov	r0, r5
 80054dc:	f000 fb6e 	bl	8005bbc <_sbrk_r>
 80054e0:	3001      	adds	r0, #1
 80054e2:	d101      	bne.n	80054e8 <sbrk_aligned+0x38>
 80054e4:	f04f 34ff 	mov.w	r4, #4294967295
 80054e8:	4620      	mov	r0, r4
 80054ea:	bd70      	pop	{r4, r5, r6, pc}
 80054ec:	2000072c 	.word	0x2000072c

080054f0 <_malloc_r>:
 80054f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054f4:	1ccd      	adds	r5, r1, #3
 80054f6:	f025 0503 	bic.w	r5, r5, #3
 80054fa:	3508      	adds	r5, #8
 80054fc:	2d0c      	cmp	r5, #12
 80054fe:	bf38      	it	cc
 8005500:	250c      	movcc	r5, #12
 8005502:	2d00      	cmp	r5, #0
 8005504:	4607      	mov	r7, r0
 8005506:	db01      	blt.n	800550c <_malloc_r+0x1c>
 8005508:	42a9      	cmp	r1, r5
 800550a:	d905      	bls.n	8005518 <_malloc_r+0x28>
 800550c:	230c      	movs	r3, #12
 800550e:	2600      	movs	r6, #0
 8005510:	603b      	str	r3, [r7, #0]
 8005512:	4630      	mov	r0, r6
 8005514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005518:	4e2e      	ldr	r6, [pc, #184]	; (80055d4 <_malloc_r+0xe4>)
 800551a:	f000 fb95 	bl	8005c48 <__malloc_lock>
 800551e:	6833      	ldr	r3, [r6, #0]
 8005520:	461c      	mov	r4, r3
 8005522:	bb34      	cbnz	r4, 8005572 <_malloc_r+0x82>
 8005524:	4629      	mov	r1, r5
 8005526:	4638      	mov	r0, r7
 8005528:	f7ff ffc2 	bl	80054b0 <sbrk_aligned>
 800552c:	1c43      	adds	r3, r0, #1
 800552e:	4604      	mov	r4, r0
 8005530:	d14d      	bne.n	80055ce <_malloc_r+0xde>
 8005532:	6834      	ldr	r4, [r6, #0]
 8005534:	4626      	mov	r6, r4
 8005536:	2e00      	cmp	r6, #0
 8005538:	d140      	bne.n	80055bc <_malloc_r+0xcc>
 800553a:	6823      	ldr	r3, [r4, #0]
 800553c:	4631      	mov	r1, r6
 800553e:	4638      	mov	r0, r7
 8005540:	eb04 0803 	add.w	r8, r4, r3
 8005544:	f000 fb3a 	bl	8005bbc <_sbrk_r>
 8005548:	4580      	cmp	r8, r0
 800554a:	d13a      	bne.n	80055c2 <_malloc_r+0xd2>
 800554c:	6821      	ldr	r1, [r4, #0]
 800554e:	3503      	adds	r5, #3
 8005550:	1a6d      	subs	r5, r5, r1
 8005552:	f025 0503 	bic.w	r5, r5, #3
 8005556:	3508      	adds	r5, #8
 8005558:	2d0c      	cmp	r5, #12
 800555a:	bf38      	it	cc
 800555c:	250c      	movcc	r5, #12
 800555e:	4638      	mov	r0, r7
 8005560:	4629      	mov	r1, r5
 8005562:	f7ff ffa5 	bl	80054b0 <sbrk_aligned>
 8005566:	3001      	adds	r0, #1
 8005568:	d02b      	beq.n	80055c2 <_malloc_r+0xd2>
 800556a:	6823      	ldr	r3, [r4, #0]
 800556c:	442b      	add	r3, r5
 800556e:	6023      	str	r3, [r4, #0]
 8005570:	e00e      	b.n	8005590 <_malloc_r+0xa0>
 8005572:	6822      	ldr	r2, [r4, #0]
 8005574:	1b52      	subs	r2, r2, r5
 8005576:	d41e      	bmi.n	80055b6 <_malloc_r+0xc6>
 8005578:	2a0b      	cmp	r2, #11
 800557a:	d916      	bls.n	80055aa <_malloc_r+0xba>
 800557c:	1961      	adds	r1, r4, r5
 800557e:	42a3      	cmp	r3, r4
 8005580:	6025      	str	r5, [r4, #0]
 8005582:	bf18      	it	ne
 8005584:	6059      	strne	r1, [r3, #4]
 8005586:	6863      	ldr	r3, [r4, #4]
 8005588:	bf08      	it	eq
 800558a:	6031      	streq	r1, [r6, #0]
 800558c:	5162      	str	r2, [r4, r5]
 800558e:	604b      	str	r3, [r1, #4]
 8005590:	4638      	mov	r0, r7
 8005592:	f104 060b 	add.w	r6, r4, #11
 8005596:	f000 fb5d 	bl	8005c54 <__malloc_unlock>
 800559a:	f026 0607 	bic.w	r6, r6, #7
 800559e:	1d23      	adds	r3, r4, #4
 80055a0:	1af2      	subs	r2, r6, r3
 80055a2:	d0b6      	beq.n	8005512 <_malloc_r+0x22>
 80055a4:	1b9b      	subs	r3, r3, r6
 80055a6:	50a3      	str	r3, [r4, r2]
 80055a8:	e7b3      	b.n	8005512 <_malloc_r+0x22>
 80055aa:	6862      	ldr	r2, [r4, #4]
 80055ac:	42a3      	cmp	r3, r4
 80055ae:	bf0c      	ite	eq
 80055b0:	6032      	streq	r2, [r6, #0]
 80055b2:	605a      	strne	r2, [r3, #4]
 80055b4:	e7ec      	b.n	8005590 <_malloc_r+0xa0>
 80055b6:	4623      	mov	r3, r4
 80055b8:	6864      	ldr	r4, [r4, #4]
 80055ba:	e7b2      	b.n	8005522 <_malloc_r+0x32>
 80055bc:	4634      	mov	r4, r6
 80055be:	6876      	ldr	r6, [r6, #4]
 80055c0:	e7b9      	b.n	8005536 <_malloc_r+0x46>
 80055c2:	230c      	movs	r3, #12
 80055c4:	4638      	mov	r0, r7
 80055c6:	603b      	str	r3, [r7, #0]
 80055c8:	f000 fb44 	bl	8005c54 <__malloc_unlock>
 80055cc:	e7a1      	b.n	8005512 <_malloc_r+0x22>
 80055ce:	6025      	str	r5, [r4, #0]
 80055d0:	e7de      	b.n	8005590 <_malloc_r+0xa0>
 80055d2:	bf00      	nop
 80055d4:	20000728 	.word	0x20000728

080055d8 <__ssputs_r>:
 80055d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055dc:	688e      	ldr	r6, [r1, #8]
 80055de:	4682      	mov	sl, r0
 80055e0:	429e      	cmp	r6, r3
 80055e2:	460c      	mov	r4, r1
 80055e4:	4690      	mov	r8, r2
 80055e6:	461f      	mov	r7, r3
 80055e8:	d838      	bhi.n	800565c <__ssputs_r+0x84>
 80055ea:	898a      	ldrh	r2, [r1, #12]
 80055ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80055f0:	d032      	beq.n	8005658 <__ssputs_r+0x80>
 80055f2:	6825      	ldr	r5, [r4, #0]
 80055f4:	6909      	ldr	r1, [r1, #16]
 80055f6:	3301      	adds	r3, #1
 80055f8:	eba5 0901 	sub.w	r9, r5, r1
 80055fc:	6965      	ldr	r5, [r4, #20]
 80055fe:	444b      	add	r3, r9
 8005600:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005604:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005608:	106d      	asrs	r5, r5, #1
 800560a:	429d      	cmp	r5, r3
 800560c:	bf38      	it	cc
 800560e:	461d      	movcc	r5, r3
 8005610:	0553      	lsls	r3, r2, #21
 8005612:	d531      	bpl.n	8005678 <__ssputs_r+0xa0>
 8005614:	4629      	mov	r1, r5
 8005616:	f7ff ff6b 	bl	80054f0 <_malloc_r>
 800561a:	4606      	mov	r6, r0
 800561c:	b950      	cbnz	r0, 8005634 <__ssputs_r+0x5c>
 800561e:	230c      	movs	r3, #12
 8005620:	f04f 30ff 	mov.w	r0, #4294967295
 8005624:	f8ca 3000 	str.w	r3, [sl]
 8005628:	89a3      	ldrh	r3, [r4, #12]
 800562a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800562e:	81a3      	strh	r3, [r4, #12]
 8005630:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005634:	464a      	mov	r2, r9
 8005636:	6921      	ldr	r1, [r4, #16]
 8005638:	f000 fade 	bl	8005bf8 <memcpy>
 800563c:	89a3      	ldrh	r3, [r4, #12]
 800563e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005642:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005646:	81a3      	strh	r3, [r4, #12]
 8005648:	6126      	str	r6, [r4, #16]
 800564a:	444e      	add	r6, r9
 800564c:	6026      	str	r6, [r4, #0]
 800564e:	463e      	mov	r6, r7
 8005650:	6165      	str	r5, [r4, #20]
 8005652:	eba5 0509 	sub.w	r5, r5, r9
 8005656:	60a5      	str	r5, [r4, #8]
 8005658:	42be      	cmp	r6, r7
 800565a:	d900      	bls.n	800565e <__ssputs_r+0x86>
 800565c:	463e      	mov	r6, r7
 800565e:	4632      	mov	r2, r6
 8005660:	4641      	mov	r1, r8
 8005662:	6820      	ldr	r0, [r4, #0]
 8005664:	f000 fad6 	bl	8005c14 <memmove>
 8005668:	68a3      	ldr	r3, [r4, #8]
 800566a:	2000      	movs	r0, #0
 800566c:	1b9b      	subs	r3, r3, r6
 800566e:	60a3      	str	r3, [r4, #8]
 8005670:	6823      	ldr	r3, [r4, #0]
 8005672:	4433      	add	r3, r6
 8005674:	6023      	str	r3, [r4, #0]
 8005676:	e7db      	b.n	8005630 <__ssputs_r+0x58>
 8005678:	462a      	mov	r2, r5
 800567a:	f000 fb39 	bl	8005cf0 <_realloc_r>
 800567e:	4606      	mov	r6, r0
 8005680:	2800      	cmp	r0, #0
 8005682:	d1e1      	bne.n	8005648 <__ssputs_r+0x70>
 8005684:	4650      	mov	r0, sl
 8005686:	6921      	ldr	r1, [r4, #16]
 8005688:	f000 faea 	bl	8005c60 <_free_r>
 800568c:	e7c7      	b.n	800561e <__ssputs_r+0x46>
	...

08005690 <_svfiprintf_r>:
 8005690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005694:	4698      	mov	r8, r3
 8005696:	898b      	ldrh	r3, [r1, #12]
 8005698:	4607      	mov	r7, r0
 800569a:	061b      	lsls	r3, r3, #24
 800569c:	460d      	mov	r5, r1
 800569e:	4614      	mov	r4, r2
 80056a0:	b09d      	sub	sp, #116	; 0x74
 80056a2:	d50e      	bpl.n	80056c2 <_svfiprintf_r+0x32>
 80056a4:	690b      	ldr	r3, [r1, #16]
 80056a6:	b963      	cbnz	r3, 80056c2 <_svfiprintf_r+0x32>
 80056a8:	2140      	movs	r1, #64	; 0x40
 80056aa:	f7ff ff21 	bl	80054f0 <_malloc_r>
 80056ae:	6028      	str	r0, [r5, #0]
 80056b0:	6128      	str	r0, [r5, #16]
 80056b2:	b920      	cbnz	r0, 80056be <_svfiprintf_r+0x2e>
 80056b4:	230c      	movs	r3, #12
 80056b6:	603b      	str	r3, [r7, #0]
 80056b8:	f04f 30ff 	mov.w	r0, #4294967295
 80056bc:	e0d1      	b.n	8005862 <_svfiprintf_r+0x1d2>
 80056be:	2340      	movs	r3, #64	; 0x40
 80056c0:	616b      	str	r3, [r5, #20]
 80056c2:	2300      	movs	r3, #0
 80056c4:	9309      	str	r3, [sp, #36]	; 0x24
 80056c6:	2320      	movs	r3, #32
 80056c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80056cc:	2330      	movs	r3, #48	; 0x30
 80056ce:	f04f 0901 	mov.w	r9, #1
 80056d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80056d6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800587c <_svfiprintf_r+0x1ec>
 80056da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80056de:	4623      	mov	r3, r4
 80056e0:	469a      	mov	sl, r3
 80056e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80056e6:	b10a      	cbz	r2, 80056ec <_svfiprintf_r+0x5c>
 80056e8:	2a25      	cmp	r2, #37	; 0x25
 80056ea:	d1f9      	bne.n	80056e0 <_svfiprintf_r+0x50>
 80056ec:	ebba 0b04 	subs.w	fp, sl, r4
 80056f0:	d00b      	beq.n	800570a <_svfiprintf_r+0x7a>
 80056f2:	465b      	mov	r3, fp
 80056f4:	4622      	mov	r2, r4
 80056f6:	4629      	mov	r1, r5
 80056f8:	4638      	mov	r0, r7
 80056fa:	f7ff ff6d 	bl	80055d8 <__ssputs_r>
 80056fe:	3001      	adds	r0, #1
 8005700:	f000 80aa 	beq.w	8005858 <_svfiprintf_r+0x1c8>
 8005704:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005706:	445a      	add	r2, fp
 8005708:	9209      	str	r2, [sp, #36]	; 0x24
 800570a:	f89a 3000 	ldrb.w	r3, [sl]
 800570e:	2b00      	cmp	r3, #0
 8005710:	f000 80a2 	beq.w	8005858 <_svfiprintf_r+0x1c8>
 8005714:	2300      	movs	r3, #0
 8005716:	f04f 32ff 	mov.w	r2, #4294967295
 800571a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800571e:	f10a 0a01 	add.w	sl, sl, #1
 8005722:	9304      	str	r3, [sp, #16]
 8005724:	9307      	str	r3, [sp, #28]
 8005726:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800572a:	931a      	str	r3, [sp, #104]	; 0x68
 800572c:	4654      	mov	r4, sl
 800572e:	2205      	movs	r2, #5
 8005730:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005734:	4851      	ldr	r0, [pc, #324]	; (800587c <_svfiprintf_r+0x1ec>)
 8005736:	f000 fa51 	bl	8005bdc <memchr>
 800573a:	9a04      	ldr	r2, [sp, #16]
 800573c:	b9d8      	cbnz	r0, 8005776 <_svfiprintf_r+0xe6>
 800573e:	06d0      	lsls	r0, r2, #27
 8005740:	bf44      	itt	mi
 8005742:	2320      	movmi	r3, #32
 8005744:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005748:	0711      	lsls	r1, r2, #28
 800574a:	bf44      	itt	mi
 800574c:	232b      	movmi	r3, #43	; 0x2b
 800574e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005752:	f89a 3000 	ldrb.w	r3, [sl]
 8005756:	2b2a      	cmp	r3, #42	; 0x2a
 8005758:	d015      	beq.n	8005786 <_svfiprintf_r+0xf6>
 800575a:	4654      	mov	r4, sl
 800575c:	2000      	movs	r0, #0
 800575e:	f04f 0c0a 	mov.w	ip, #10
 8005762:	9a07      	ldr	r2, [sp, #28]
 8005764:	4621      	mov	r1, r4
 8005766:	f811 3b01 	ldrb.w	r3, [r1], #1
 800576a:	3b30      	subs	r3, #48	; 0x30
 800576c:	2b09      	cmp	r3, #9
 800576e:	d94e      	bls.n	800580e <_svfiprintf_r+0x17e>
 8005770:	b1b0      	cbz	r0, 80057a0 <_svfiprintf_r+0x110>
 8005772:	9207      	str	r2, [sp, #28]
 8005774:	e014      	b.n	80057a0 <_svfiprintf_r+0x110>
 8005776:	eba0 0308 	sub.w	r3, r0, r8
 800577a:	fa09 f303 	lsl.w	r3, r9, r3
 800577e:	4313      	orrs	r3, r2
 8005780:	46a2      	mov	sl, r4
 8005782:	9304      	str	r3, [sp, #16]
 8005784:	e7d2      	b.n	800572c <_svfiprintf_r+0x9c>
 8005786:	9b03      	ldr	r3, [sp, #12]
 8005788:	1d19      	adds	r1, r3, #4
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	9103      	str	r1, [sp, #12]
 800578e:	2b00      	cmp	r3, #0
 8005790:	bfbb      	ittet	lt
 8005792:	425b      	neglt	r3, r3
 8005794:	f042 0202 	orrlt.w	r2, r2, #2
 8005798:	9307      	strge	r3, [sp, #28]
 800579a:	9307      	strlt	r3, [sp, #28]
 800579c:	bfb8      	it	lt
 800579e:	9204      	strlt	r2, [sp, #16]
 80057a0:	7823      	ldrb	r3, [r4, #0]
 80057a2:	2b2e      	cmp	r3, #46	; 0x2e
 80057a4:	d10c      	bne.n	80057c0 <_svfiprintf_r+0x130>
 80057a6:	7863      	ldrb	r3, [r4, #1]
 80057a8:	2b2a      	cmp	r3, #42	; 0x2a
 80057aa:	d135      	bne.n	8005818 <_svfiprintf_r+0x188>
 80057ac:	9b03      	ldr	r3, [sp, #12]
 80057ae:	3402      	adds	r4, #2
 80057b0:	1d1a      	adds	r2, r3, #4
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	9203      	str	r2, [sp, #12]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	bfb8      	it	lt
 80057ba:	f04f 33ff 	movlt.w	r3, #4294967295
 80057be:	9305      	str	r3, [sp, #20]
 80057c0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8005880 <_svfiprintf_r+0x1f0>
 80057c4:	2203      	movs	r2, #3
 80057c6:	4650      	mov	r0, sl
 80057c8:	7821      	ldrb	r1, [r4, #0]
 80057ca:	f000 fa07 	bl	8005bdc <memchr>
 80057ce:	b140      	cbz	r0, 80057e2 <_svfiprintf_r+0x152>
 80057d0:	2340      	movs	r3, #64	; 0x40
 80057d2:	eba0 000a 	sub.w	r0, r0, sl
 80057d6:	fa03 f000 	lsl.w	r0, r3, r0
 80057da:	9b04      	ldr	r3, [sp, #16]
 80057dc:	3401      	adds	r4, #1
 80057de:	4303      	orrs	r3, r0
 80057e0:	9304      	str	r3, [sp, #16]
 80057e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057e6:	2206      	movs	r2, #6
 80057e8:	4826      	ldr	r0, [pc, #152]	; (8005884 <_svfiprintf_r+0x1f4>)
 80057ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80057ee:	f000 f9f5 	bl	8005bdc <memchr>
 80057f2:	2800      	cmp	r0, #0
 80057f4:	d038      	beq.n	8005868 <_svfiprintf_r+0x1d8>
 80057f6:	4b24      	ldr	r3, [pc, #144]	; (8005888 <_svfiprintf_r+0x1f8>)
 80057f8:	bb1b      	cbnz	r3, 8005842 <_svfiprintf_r+0x1b2>
 80057fa:	9b03      	ldr	r3, [sp, #12]
 80057fc:	3307      	adds	r3, #7
 80057fe:	f023 0307 	bic.w	r3, r3, #7
 8005802:	3308      	adds	r3, #8
 8005804:	9303      	str	r3, [sp, #12]
 8005806:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005808:	4433      	add	r3, r6
 800580a:	9309      	str	r3, [sp, #36]	; 0x24
 800580c:	e767      	b.n	80056de <_svfiprintf_r+0x4e>
 800580e:	460c      	mov	r4, r1
 8005810:	2001      	movs	r0, #1
 8005812:	fb0c 3202 	mla	r2, ip, r2, r3
 8005816:	e7a5      	b.n	8005764 <_svfiprintf_r+0xd4>
 8005818:	2300      	movs	r3, #0
 800581a:	f04f 0c0a 	mov.w	ip, #10
 800581e:	4619      	mov	r1, r3
 8005820:	3401      	adds	r4, #1
 8005822:	9305      	str	r3, [sp, #20]
 8005824:	4620      	mov	r0, r4
 8005826:	f810 2b01 	ldrb.w	r2, [r0], #1
 800582a:	3a30      	subs	r2, #48	; 0x30
 800582c:	2a09      	cmp	r2, #9
 800582e:	d903      	bls.n	8005838 <_svfiprintf_r+0x1a8>
 8005830:	2b00      	cmp	r3, #0
 8005832:	d0c5      	beq.n	80057c0 <_svfiprintf_r+0x130>
 8005834:	9105      	str	r1, [sp, #20]
 8005836:	e7c3      	b.n	80057c0 <_svfiprintf_r+0x130>
 8005838:	4604      	mov	r4, r0
 800583a:	2301      	movs	r3, #1
 800583c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005840:	e7f0      	b.n	8005824 <_svfiprintf_r+0x194>
 8005842:	ab03      	add	r3, sp, #12
 8005844:	9300      	str	r3, [sp, #0]
 8005846:	462a      	mov	r2, r5
 8005848:	4638      	mov	r0, r7
 800584a:	4b10      	ldr	r3, [pc, #64]	; (800588c <_svfiprintf_r+0x1fc>)
 800584c:	a904      	add	r1, sp, #16
 800584e:	f3af 8000 	nop.w
 8005852:	1c42      	adds	r2, r0, #1
 8005854:	4606      	mov	r6, r0
 8005856:	d1d6      	bne.n	8005806 <_svfiprintf_r+0x176>
 8005858:	89ab      	ldrh	r3, [r5, #12]
 800585a:	065b      	lsls	r3, r3, #25
 800585c:	f53f af2c 	bmi.w	80056b8 <_svfiprintf_r+0x28>
 8005860:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005862:	b01d      	add	sp, #116	; 0x74
 8005864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005868:	ab03      	add	r3, sp, #12
 800586a:	9300      	str	r3, [sp, #0]
 800586c:	462a      	mov	r2, r5
 800586e:	4638      	mov	r0, r7
 8005870:	4b06      	ldr	r3, [pc, #24]	; (800588c <_svfiprintf_r+0x1fc>)
 8005872:	a904      	add	r1, sp, #16
 8005874:	f000 f87c 	bl	8005970 <_printf_i>
 8005878:	e7eb      	b.n	8005852 <_svfiprintf_r+0x1c2>
 800587a:	bf00      	nop
 800587c:	08006230 	.word	0x08006230
 8005880:	08006236 	.word	0x08006236
 8005884:	0800623a 	.word	0x0800623a
 8005888:	00000000 	.word	0x00000000
 800588c:	080055d9 	.word	0x080055d9

08005890 <_printf_common>:
 8005890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005894:	4616      	mov	r6, r2
 8005896:	4699      	mov	r9, r3
 8005898:	688a      	ldr	r2, [r1, #8]
 800589a:	690b      	ldr	r3, [r1, #16]
 800589c:	4607      	mov	r7, r0
 800589e:	4293      	cmp	r3, r2
 80058a0:	bfb8      	it	lt
 80058a2:	4613      	movlt	r3, r2
 80058a4:	6033      	str	r3, [r6, #0]
 80058a6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80058aa:	460c      	mov	r4, r1
 80058ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80058b0:	b10a      	cbz	r2, 80058b6 <_printf_common+0x26>
 80058b2:	3301      	adds	r3, #1
 80058b4:	6033      	str	r3, [r6, #0]
 80058b6:	6823      	ldr	r3, [r4, #0]
 80058b8:	0699      	lsls	r1, r3, #26
 80058ba:	bf42      	ittt	mi
 80058bc:	6833      	ldrmi	r3, [r6, #0]
 80058be:	3302      	addmi	r3, #2
 80058c0:	6033      	strmi	r3, [r6, #0]
 80058c2:	6825      	ldr	r5, [r4, #0]
 80058c4:	f015 0506 	ands.w	r5, r5, #6
 80058c8:	d106      	bne.n	80058d8 <_printf_common+0x48>
 80058ca:	f104 0a19 	add.w	sl, r4, #25
 80058ce:	68e3      	ldr	r3, [r4, #12]
 80058d0:	6832      	ldr	r2, [r6, #0]
 80058d2:	1a9b      	subs	r3, r3, r2
 80058d4:	42ab      	cmp	r3, r5
 80058d6:	dc28      	bgt.n	800592a <_printf_common+0x9a>
 80058d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80058dc:	1e13      	subs	r3, r2, #0
 80058de:	6822      	ldr	r2, [r4, #0]
 80058e0:	bf18      	it	ne
 80058e2:	2301      	movne	r3, #1
 80058e4:	0692      	lsls	r2, r2, #26
 80058e6:	d42d      	bmi.n	8005944 <_printf_common+0xb4>
 80058e8:	4649      	mov	r1, r9
 80058ea:	4638      	mov	r0, r7
 80058ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80058f0:	47c0      	blx	r8
 80058f2:	3001      	adds	r0, #1
 80058f4:	d020      	beq.n	8005938 <_printf_common+0xa8>
 80058f6:	6823      	ldr	r3, [r4, #0]
 80058f8:	68e5      	ldr	r5, [r4, #12]
 80058fa:	f003 0306 	and.w	r3, r3, #6
 80058fe:	2b04      	cmp	r3, #4
 8005900:	bf18      	it	ne
 8005902:	2500      	movne	r5, #0
 8005904:	6832      	ldr	r2, [r6, #0]
 8005906:	f04f 0600 	mov.w	r6, #0
 800590a:	68a3      	ldr	r3, [r4, #8]
 800590c:	bf08      	it	eq
 800590e:	1aad      	subeq	r5, r5, r2
 8005910:	6922      	ldr	r2, [r4, #16]
 8005912:	bf08      	it	eq
 8005914:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005918:	4293      	cmp	r3, r2
 800591a:	bfc4      	itt	gt
 800591c:	1a9b      	subgt	r3, r3, r2
 800591e:	18ed      	addgt	r5, r5, r3
 8005920:	341a      	adds	r4, #26
 8005922:	42b5      	cmp	r5, r6
 8005924:	d11a      	bne.n	800595c <_printf_common+0xcc>
 8005926:	2000      	movs	r0, #0
 8005928:	e008      	b.n	800593c <_printf_common+0xac>
 800592a:	2301      	movs	r3, #1
 800592c:	4652      	mov	r2, sl
 800592e:	4649      	mov	r1, r9
 8005930:	4638      	mov	r0, r7
 8005932:	47c0      	blx	r8
 8005934:	3001      	adds	r0, #1
 8005936:	d103      	bne.n	8005940 <_printf_common+0xb0>
 8005938:	f04f 30ff 	mov.w	r0, #4294967295
 800593c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005940:	3501      	adds	r5, #1
 8005942:	e7c4      	b.n	80058ce <_printf_common+0x3e>
 8005944:	2030      	movs	r0, #48	; 0x30
 8005946:	18e1      	adds	r1, r4, r3
 8005948:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800594c:	1c5a      	adds	r2, r3, #1
 800594e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005952:	4422      	add	r2, r4
 8005954:	3302      	adds	r3, #2
 8005956:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800595a:	e7c5      	b.n	80058e8 <_printf_common+0x58>
 800595c:	2301      	movs	r3, #1
 800595e:	4622      	mov	r2, r4
 8005960:	4649      	mov	r1, r9
 8005962:	4638      	mov	r0, r7
 8005964:	47c0      	blx	r8
 8005966:	3001      	adds	r0, #1
 8005968:	d0e6      	beq.n	8005938 <_printf_common+0xa8>
 800596a:	3601      	adds	r6, #1
 800596c:	e7d9      	b.n	8005922 <_printf_common+0x92>
	...

08005970 <_printf_i>:
 8005970:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005974:	7e0f      	ldrb	r7, [r1, #24]
 8005976:	4691      	mov	r9, r2
 8005978:	2f78      	cmp	r7, #120	; 0x78
 800597a:	4680      	mov	r8, r0
 800597c:	460c      	mov	r4, r1
 800597e:	469a      	mov	sl, r3
 8005980:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005982:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005986:	d807      	bhi.n	8005998 <_printf_i+0x28>
 8005988:	2f62      	cmp	r7, #98	; 0x62
 800598a:	d80a      	bhi.n	80059a2 <_printf_i+0x32>
 800598c:	2f00      	cmp	r7, #0
 800598e:	f000 80d9 	beq.w	8005b44 <_printf_i+0x1d4>
 8005992:	2f58      	cmp	r7, #88	; 0x58
 8005994:	f000 80a4 	beq.w	8005ae0 <_printf_i+0x170>
 8005998:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800599c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80059a0:	e03a      	b.n	8005a18 <_printf_i+0xa8>
 80059a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80059a6:	2b15      	cmp	r3, #21
 80059a8:	d8f6      	bhi.n	8005998 <_printf_i+0x28>
 80059aa:	a101      	add	r1, pc, #4	; (adr r1, 80059b0 <_printf_i+0x40>)
 80059ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80059b0:	08005a09 	.word	0x08005a09
 80059b4:	08005a1d 	.word	0x08005a1d
 80059b8:	08005999 	.word	0x08005999
 80059bc:	08005999 	.word	0x08005999
 80059c0:	08005999 	.word	0x08005999
 80059c4:	08005999 	.word	0x08005999
 80059c8:	08005a1d 	.word	0x08005a1d
 80059cc:	08005999 	.word	0x08005999
 80059d0:	08005999 	.word	0x08005999
 80059d4:	08005999 	.word	0x08005999
 80059d8:	08005999 	.word	0x08005999
 80059dc:	08005b2b 	.word	0x08005b2b
 80059e0:	08005a4d 	.word	0x08005a4d
 80059e4:	08005b0d 	.word	0x08005b0d
 80059e8:	08005999 	.word	0x08005999
 80059ec:	08005999 	.word	0x08005999
 80059f0:	08005b4d 	.word	0x08005b4d
 80059f4:	08005999 	.word	0x08005999
 80059f8:	08005a4d 	.word	0x08005a4d
 80059fc:	08005999 	.word	0x08005999
 8005a00:	08005999 	.word	0x08005999
 8005a04:	08005b15 	.word	0x08005b15
 8005a08:	682b      	ldr	r3, [r5, #0]
 8005a0a:	1d1a      	adds	r2, r3, #4
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	602a      	str	r2, [r5, #0]
 8005a10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e0a4      	b.n	8005b66 <_printf_i+0x1f6>
 8005a1c:	6820      	ldr	r0, [r4, #0]
 8005a1e:	6829      	ldr	r1, [r5, #0]
 8005a20:	0606      	lsls	r6, r0, #24
 8005a22:	f101 0304 	add.w	r3, r1, #4
 8005a26:	d50a      	bpl.n	8005a3e <_printf_i+0xce>
 8005a28:	680e      	ldr	r6, [r1, #0]
 8005a2a:	602b      	str	r3, [r5, #0]
 8005a2c:	2e00      	cmp	r6, #0
 8005a2e:	da03      	bge.n	8005a38 <_printf_i+0xc8>
 8005a30:	232d      	movs	r3, #45	; 0x2d
 8005a32:	4276      	negs	r6, r6
 8005a34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a38:	230a      	movs	r3, #10
 8005a3a:	485e      	ldr	r0, [pc, #376]	; (8005bb4 <_printf_i+0x244>)
 8005a3c:	e019      	b.n	8005a72 <_printf_i+0x102>
 8005a3e:	680e      	ldr	r6, [r1, #0]
 8005a40:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005a44:	602b      	str	r3, [r5, #0]
 8005a46:	bf18      	it	ne
 8005a48:	b236      	sxthne	r6, r6
 8005a4a:	e7ef      	b.n	8005a2c <_printf_i+0xbc>
 8005a4c:	682b      	ldr	r3, [r5, #0]
 8005a4e:	6820      	ldr	r0, [r4, #0]
 8005a50:	1d19      	adds	r1, r3, #4
 8005a52:	6029      	str	r1, [r5, #0]
 8005a54:	0601      	lsls	r1, r0, #24
 8005a56:	d501      	bpl.n	8005a5c <_printf_i+0xec>
 8005a58:	681e      	ldr	r6, [r3, #0]
 8005a5a:	e002      	b.n	8005a62 <_printf_i+0xf2>
 8005a5c:	0646      	lsls	r6, r0, #25
 8005a5e:	d5fb      	bpl.n	8005a58 <_printf_i+0xe8>
 8005a60:	881e      	ldrh	r6, [r3, #0]
 8005a62:	2f6f      	cmp	r7, #111	; 0x6f
 8005a64:	bf0c      	ite	eq
 8005a66:	2308      	moveq	r3, #8
 8005a68:	230a      	movne	r3, #10
 8005a6a:	4852      	ldr	r0, [pc, #328]	; (8005bb4 <_printf_i+0x244>)
 8005a6c:	2100      	movs	r1, #0
 8005a6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005a72:	6865      	ldr	r5, [r4, #4]
 8005a74:	2d00      	cmp	r5, #0
 8005a76:	bfa8      	it	ge
 8005a78:	6821      	ldrge	r1, [r4, #0]
 8005a7a:	60a5      	str	r5, [r4, #8]
 8005a7c:	bfa4      	itt	ge
 8005a7e:	f021 0104 	bicge.w	r1, r1, #4
 8005a82:	6021      	strge	r1, [r4, #0]
 8005a84:	b90e      	cbnz	r6, 8005a8a <_printf_i+0x11a>
 8005a86:	2d00      	cmp	r5, #0
 8005a88:	d04d      	beq.n	8005b26 <_printf_i+0x1b6>
 8005a8a:	4615      	mov	r5, r2
 8005a8c:	fbb6 f1f3 	udiv	r1, r6, r3
 8005a90:	fb03 6711 	mls	r7, r3, r1, r6
 8005a94:	5dc7      	ldrb	r7, [r0, r7]
 8005a96:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005a9a:	4637      	mov	r7, r6
 8005a9c:	42bb      	cmp	r3, r7
 8005a9e:	460e      	mov	r6, r1
 8005aa0:	d9f4      	bls.n	8005a8c <_printf_i+0x11c>
 8005aa2:	2b08      	cmp	r3, #8
 8005aa4:	d10b      	bne.n	8005abe <_printf_i+0x14e>
 8005aa6:	6823      	ldr	r3, [r4, #0]
 8005aa8:	07de      	lsls	r6, r3, #31
 8005aaa:	d508      	bpl.n	8005abe <_printf_i+0x14e>
 8005aac:	6923      	ldr	r3, [r4, #16]
 8005aae:	6861      	ldr	r1, [r4, #4]
 8005ab0:	4299      	cmp	r1, r3
 8005ab2:	bfde      	ittt	le
 8005ab4:	2330      	movle	r3, #48	; 0x30
 8005ab6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005aba:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005abe:	1b52      	subs	r2, r2, r5
 8005ac0:	6122      	str	r2, [r4, #16]
 8005ac2:	464b      	mov	r3, r9
 8005ac4:	4621      	mov	r1, r4
 8005ac6:	4640      	mov	r0, r8
 8005ac8:	f8cd a000 	str.w	sl, [sp]
 8005acc:	aa03      	add	r2, sp, #12
 8005ace:	f7ff fedf 	bl	8005890 <_printf_common>
 8005ad2:	3001      	adds	r0, #1
 8005ad4:	d14c      	bne.n	8005b70 <_printf_i+0x200>
 8005ad6:	f04f 30ff 	mov.w	r0, #4294967295
 8005ada:	b004      	add	sp, #16
 8005adc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ae0:	4834      	ldr	r0, [pc, #208]	; (8005bb4 <_printf_i+0x244>)
 8005ae2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005ae6:	6829      	ldr	r1, [r5, #0]
 8005ae8:	6823      	ldr	r3, [r4, #0]
 8005aea:	f851 6b04 	ldr.w	r6, [r1], #4
 8005aee:	6029      	str	r1, [r5, #0]
 8005af0:	061d      	lsls	r5, r3, #24
 8005af2:	d514      	bpl.n	8005b1e <_printf_i+0x1ae>
 8005af4:	07df      	lsls	r7, r3, #31
 8005af6:	bf44      	itt	mi
 8005af8:	f043 0320 	orrmi.w	r3, r3, #32
 8005afc:	6023      	strmi	r3, [r4, #0]
 8005afe:	b91e      	cbnz	r6, 8005b08 <_printf_i+0x198>
 8005b00:	6823      	ldr	r3, [r4, #0]
 8005b02:	f023 0320 	bic.w	r3, r3, #32
 8005b06:	6023      	str	r3, [r4, #0]
 8005b08:	2310      	movs	r3, #16
 8005b0a:	e7af      	b.n	8005a6c <_printf_i+0xfc>
 8005b0c:	6823      	ldr	r3, [r4, #0]
 8005b0e:	f043 0320 	orr.w	r3, r3, #32
 8005b12:	6023      	str	r3, [r4, #0]
 8005b14:	2378      	movs	r3, #120	; 0x78
 8005b16:	4828      	ldr	r0, [pc, #160]	; (8005bb8 <_printf_i+0x248>)
 8005b18:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005b1c:	e7e3      	b.n	8005ae6 <_printf_i+0x176>
 8005b1e:	0659      	lsls	r1, r3, #25
 8005b20:	bf48      	it	mi
 8005b22:	b2b6      	uxthmi	r6, r6
 8005b24:	e7e6      	b.n	8005af4 <_printf_i+0x184>
 8005b26:	4615      	mov	r5, r2
 8005b28:	e7bb      	b.n	8005aa2 <_printf_i+0x132>
 8005b2a:	682b      	ldr	r3, [r5, #0]
 8005b2c:	6826      	ldr	r6, [r4, #0]
 8005b2e:	1d18      	adds	r0, r3, #4
 8005b30:	6961      	ldr	r1, [r4, #20]
 8005b32:	6028      	str	r0, [r5, #0]
 8005b34:	0635      	lsls	r5, r6, #24
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	d501      	bpl.n	8005b3e <_printf_i+0x1ce>
 8005b3a:	6019      	str	r1, [r3, #0]
 8005b3c:	e002      	b.n	8005b44 <_printf_i+0x1d4>
 8005b3e:	0670      	lsls	r0, r6, #25
 8005b40:	d5fb      	bpl.n	8005b3a <_printf_i+0x1ca>
 8005b42:	8019      	strh	r1, [r3, #0]
 8005b44:	2300      	movs	r3, #0
 8005b46:	4615      	mov	r5, r2
 8005b48:	6123      	str	r3, [r4, #16]
 8005b4a:	e7ba      	b.n	8005ac2 <_printf_i+0x152>
 8005b4c:	682b      	ldr	r3, [r5, #0]
 8005b4e:	2100      	movs	r1, #0
 8005b50:	1d1a      	adds	r2, r3, #4
 8005b52:	602a      	str	r2, [r5, #0]
 8005b54:	681d      	ldr	r5, [r3, #0]
 8005b56:	6862      	ldr	r2, [r4, #4]
 8005b58:	4628      	mov	r0, r5
 8005b5a:	f000 f83f 	bl	8005bdc <memchr>
 8005b5e:	b108      	cbz	r0, 8005b64 <_printf_i+0x1f4>
 8005b60:	1b40      	subs	r0, r0, r5
 8005b62:	6060      	str	r0, [r4, #4]
 8005b64:	6863      	ldr	r3, [r4, #4]
 8005b66:	6123      	str	r3, [r4, #16]
 8005b68:	2300      	movs	r3, #0
 8005b6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b6e:	e7a8      	b.n	8005ac2 <_printf_i+0x152>
 8005b70:	462a      	mov	r2, r5
 8005b72:	4649      	mov	r1, r9
 8005b74:	4640      	mov	r0, r8
 8005b76:	6923      	ldr	r3, [r4, #16]
 8005b78:	47d0      	blx	sl
 8005b7a:	3001      	adds	r0, #1
 8005b7c:	d0ab      	beq.n	8005ad6 <_printf_i+0x166>
 8005b7e:	6823      	ldr	r3, [r4, #0]
 8005b80:	079b      	lsls	r3, r3, #30
 8005b82:	d413      	bmi.n	8005bac <_printf_i+0x23c>
 8005b84:	68e0      	ldr	r0, [r4, #12]
 8005b86:	9b03      	ldr	r3, [sp, #12]
 8005b88:	4298      	cmp	r0, r3
 8005b8a:	bfb8      	it	lt
 8005b8c:	4618      	movlt	r0, r3
 8005b8e:	e7a4      	b.n	8005ada <_printf_i+0x16a>
 8005b90:	2301      	movs	r3, #1
 8005b92:	4632      	mov	r2, r6
 8005b94:	4649      	mov	r1, r9
 8005b96:	4640      	mov	r0, r8
 8005b98:	47d0      	blx	sl
 8005b9a:	3001      	adds	r0, #1
 8005b9c:	d09b      	beq.n	8005ad6 <_printf_i+0x166>
 8005b9e:	3501      	adds	r5, #1
 8005ba0:	68e3      	ldr	r3, [r4, #12]
 8005ba2:	9903      	ldr	r1, [sp, #12]
 8005ba4:	1a5b      	subs	r3, r3, r1
 8005ba6:	42ab      	cmp	r3, r5
 8005ba8:	dcf2      	bgt.n	8005b90 <_printf_i+0x220>
 8005baa:	e7eb      	b.n	8005b84 <_printf_i+0x214>
 8005bac:	2500      	movs	r5, #0
 8005bae:	f104 0619 	add.w	r6, r4, #25
 8005bb2:	e7f5      	b.n	8005ba0 <_printf_i+0x230>
 8005bb4:	08006241 	.word	0x08006241
 8005bb8:	08006252 	.word	0x08006252

08005bbc <_sbrk_r>:
 8005bbc:	b538      	push	{r3, r4, r5, lr}
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	4d05      	ldr	r5, [pc, #20]	; (8005bd8 <_sbrk_r+0x1c>)
 8005bc2:	4604      	mov	r4, r0
 8005bc4:	4608      	mov	r0, r1
 8005bc6:	602b      	str	r3, [r5, #0]
 8005bc8:	f7fb f99e 	bl	8000f08 <_sbrk>
 8005bcc:	1c43      	adds	r3, r0, #1
 8005bce:	d102      	bne.n	8005bd6 <_sbrk_r+0x1a>
 8005bd0:	682b      	ldr	r3, [r5, #0]
 8005bd2:	b103      	cbz	r3, 8005bd6 <_sbrk_r+0x1a>
 8005bd4:	6023      	str	r3, [r4, #0]
 8005bd6:	bd38      	pop	{r3, r4, r5, pc}
 8005bd8:	20000730 	.word	0x20000730

08005bdc <memchr>:
 8005bdc:	4603      	mov	r3, r0
 8005bde:	b510      	push	{r4, lr}
 8005be0:	b2c9      	uxtb	r1, r1
 8005be2:	4402      	add	r2, r0
 8005be4:	4293      	cmp	r3, r2
 8005be6:	4618      	mov	r0, r3
 8005be8:	d101      	bne.n	8005bee <memchr+0x12>
 8005bea:	2000      	movs	r0, #0
 8005bec:	e003      	b.n	8005bf6 <memchr+0x1a>
 8005bee:	7804      	ldrb	r4, [r0, #0]
 8005bf0:	3301      	adds	r3, #1
 8005bf2:	428c      	cmp	r4, r1
 8005bf4:	d1f6      	bne.n	8005be4 <memchr+0x8>
 8005bf6:	bd10      	pop	{r4, pc}

08005bf8 <memcpy>:
 8005bf8:	440a      	add	r2, r1
 8005bfa:	4291      	cmp	r1, r2
 8005bfc:	f100 33ff 	add.w	r3, r0, #4294967295
 8005c00:	d100      	bne.n	8005c04 <memcpy+0xc>
 8005c02:	4770      	bx	lr
 8005c04:	b510      	push	{r4, lr}
 8005c06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c0a:	4291      	cmp	r1, r2
 8005c0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c10:	d1f9      	bne.n	8005c06 <memcpy+0xe>
 8005c12:	bd10      	pop	{r4, pc}

08005c14 <memmove>:
 8005c14:	4288      	cmp	r0, r1
 8005c16:	b510      	push	{r4, lr}
 8005c18:	eb01 0402 	add.w	r4, r1, r2
 8005c1c:	d902      	bls.n	8005c24 <memmove+0x10>
 8005c1e:	4284      	cmp	r4, r0
 8005c20:	4623      	mov	r3, r4
 8005c22:	d807      	bhi.n	8005c34 <memmove+0x20>
 8005c24:	1e43      	subs	r3, r0, #1
 8005c26:	42a1      	cmp	r1, r4
 8005c28:	d008      	beq.n	8005c3c <memmove+0x28>
 8005c2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005c32:	e7f8      	b.n	8005c26 <memmove+0x12>
 8005c34:	4601      	mov	r1, r0
 8005c36:	4402      	add	r2, r0
 8005c38:	428a      	cmp	r2, r1
 8005c3a:	d100      	bne.n	8005c3e <memmove+0x2a>
 8005c3c:	bd10      	pop	{r4, pc}
 8005c3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005c42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005c46:	e7f7      	b.n	8005c38 <memmove+0x24>

08005c48 <__malloc_lock>:
 8005c48:	4801      	ldr	r0, [pc, #4]	; (8005c50 <__malloc_lock+0x8>)
 8005c4a:	f7ff bc2f 	b.w	80054ac <__retarget_lock_acquire_recursive>
 8005c4e:	bf00      	nop
 8005c50:	20000724 	.word	0x20000724

08005c54 <__malloc_unlock>:
 8005c54:	4801      	ldr	r0, [pc, #4]	; (8005c5c <__malloc_unlock+0x8>)
 8005c56:	f7ff bc2a 	b.w	80054ae <__retarget_lock_release_recursive>
 8005c5a:	bf00      	nop
 8005c5c:	20000724 	.word	0x20000724

08005c60 <_free_r>:
 8005c60:	b538      	push	{r3, r4, r5, lr}
 8005c62:	4605      	mov	r5, r0
 8005c64:	2900      	cmp	r1, #0
 8005c66:	d040      	beq.n	8005cea <_free_r+0x8a>
 8005c68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c6c:	1f0c      	subs	r4, r1, #4
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	bfb8      	it	lt
 8005c72:	18e4      	addlt	r4, r4, r3
 8005c74:	f7ff ffe8 	bl	8005c48 <__malloc_lock>
 8005c78:	4a1c      	ldr	r2, [pc, #112]	; (8005cec <_free_r+0x8c>)
 8005c7a:	6813      	ldr	r3, [r2, #0]
 8005c7c:	b933      	cbnz	r3, 8005c8c <_free_r+0x2c>
 8005c7e:	6063      	str	r3, [r4, #4]
 8005c80:	6014      	str	r4, [r2, #0]
 8005c82:	4628      	mov	r0, r5
 8005c84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c88:	f7ff bfe4 	b.w	8005c54 <__malloc_unlock>
 8005c8c:	42a3      	cmp	r3, r4
 8005c8e:	d908      	bls.n	8005ca2 <_free_r+0x42>
 8005c90:	6820      	ldr	r0, [r4, #0]
 8005c92:	1821      	adds	r1, r4, r0
 8005c94:	428b      	cmp	r3, r1
 8005c96:	bf01      	itttt	eq
 8005c98:	6819      	ldreq	r1, [r3, #0]
 8005c9a:	685b      	ldreq	r3, [r3, #4]
 8005c9c:	1809      	addeq	r1, r1, r0
 8005c9e:	6021      	streq	r1, [r4, #0]
 8005ca0:	e7ed      	b.n	8005c7e <_free_r+0x1e>
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	b10b      	cbz	r3, 8005cac <_free_r+0x4c>
 8005ca8:	42a3      	cmp	r3, r4
 8005caa:	d9fa      	bls.n	8005ca2 <_free_r+0x42>
 8005cac:	6811      	ldr	r1, [r2, #0]
 8005cae:	1850      	adds	r0, r2, r1
 8005cb0:	42a0      	cmp	r0, r4
 8005cb2:	d10b      	bne.n	8005ccc <_free_r+0x6c>
 8005cb4:	6820      	ldr	r0, [r4, #0]
 8005cb6:	4401      	add	r1, r0
 8005cb8:	1850      	adds	r0, r2, r1
 8005cba:	4283      	cmp	r3, r0
 8005cbc:	6011      	str	r1, [r2, #0]
 8005cbe:	d1e0      	bne.n	8005c82 <_free_r+0x22>
 8005cc0:	6818      	ldr	r0, [r3, #0]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	4401      	add	r1, r0
 8005cc6:	6011      	str	r1, [r2, #0]
 8005cc8:	6053      	str	r3, [r2, #4]
 8005cca:	e7da      	b.n	8005c82 <_free_r+0x22>
 8005ccc:	d902      	bls.n	8005cd4 <_free_r+0x74>
 8005cce:	230c      	movs	r3, #12
 8005cd0:	602b      	str	r3, [r5, #0]
 8005cd2:	e7d6      	b.n	8005c82 <_free_r+0x22>
 8005cd4:	6820      	ldr	r0, [r4, #0]
 8005cd6:	1821      	adds	r1, r4, r0
 8005cd8:	428b      	cmp	r3, r1
 8005cda:	bf01      	itttt	eq
 8005cdc:	6819      	ldreq	r1, [r3, #0]
 8005cde:	685b      	ldreq	r3, [r3, #4]
 8005ce0:	1809      	addeq	r1, r1, r0
 8005ce2:	6021      	streq	r1, [r4, #0]
 8005ce4:	6063      	str	r3, [r4, #4]
 8005ce6:	6054      	str	r4, [r2, #4]
 8005ce8:	e7cb      	b.n	8005c82 <_free_r+0x22>
 8005cea:	bd38      	pop	{r3, r4, r5, pc}
 8005cec:	20000728 	.word	0x20000728

08005cf0 <_realloc_r>:
 8005cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cf4:	4680      	mov	r8, r0
 8005cf6:	4614      	mov	r4, r2
 8005cf8:	460e      	mov	r6, r1
 8005cfa:	b921      	cbnz	r1, 8005d06 <_realloc_r+0x16>
 8005cfc:	4611      	mov	r1, r2
 8005cfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d02:	f7ff bbf5 	b.w	80054f0 <_malloc_r>
 8005d06:	b92a      	cbnz	r2, 8005d14 <_realloc_r+0x24>
 8005d08:	f7ff ffaa 	bl	8005c60 <_free_r>
 8005d0c:	4625      	mov	r5, r4
 8005d0e:	4628      	mov	r0, r5
 8005d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d14:	f000 f81b 	bl	8005d4e <_malloc_usable_size_r>
 8005d18:	4284      	cmp	r4, r0
 8005d1a:	4607      	mov	r7, r0
 8005d1c:	d802      	bhi.n	8005d24 <_realloc_r+0x34>
 8005d1e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005d22:	d812      	bhi.n	8005d4a <_realloc_r+0x5a>
 8005d24:	4621      	mov	r1, r4
 8005d26:	4640      	mov	r0, r8
 8005d28:	f7ff fbe2 	bl	80054f0 <_malloc_r>
 8005d2c:	4605      	mov	r5, r0
 8005d2e:	2800      	cmp	r0, #0
 8005d30:	d0ed      	beq.n	8005d0e <_realloc_r+0x1e>
 8005d32:	42bc      	cmp	r4, r7
 8005d34:	4622      	mov	r2, r4
 8005d36:	4631      	mov	r1, r6
 8005d38:	bf28      	it	cs
 8005d3a:	463a      	movcs	r2, r7
 8005d3c:	f7ff ff5c 	bl	8005bf8 <memcpy>
 8005d40:	4631      	mov	r1, r6
 8005d42:	4640      	mov	r0, r8
 8005d44:	f7ff ff8c 	bl	8005c60 <_free_r>
 8005d48:	e7e1      	b.n	8005d0e <_realloc_r+0x1e>
 8005d4a:	4635      	mov	r5, r6
 8005d4c:	e7df      	b.n	8005d0e <_realloc_r+0x1e>

08005d4e <_malloc_usable_size_r>:
 8005d4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d52:	1f18      	subs	r0, r3, #4
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	bfbc      	itt	lt
 8005d58:	580b      	ldrlt	r3, [r1, r0]
 8005d5a:	18c0      	addlt	r0, r0, r3
 8005d5c:	4770      	bx	lr
	...

08005d60 <_init>:
 8005d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d62:	bf00      	nop
 8005d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d66:	bc08      	pop	{r3}
 8005d68:	469e      	mov	lr, r3
 8005d6a:	4770      	bx	lr

08005d6c <_fini>:
 8005d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d6e:	bf00      	nop
 8005d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d72:	bc08      	pop	{r3}
 8005d74:	469e      	mov	lr, r3
 8005d76:	4770      	bx	lr
