
STM32F103_particulate_sensor_7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054c4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ec  080055d0  080055d0  000155d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005abc  08005abc  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  08005abc  08005abc  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005abc  08005abc  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005abc  08005abc  00015abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ac0  08005ac0  00015ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08005ac4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006ac  20000088  08005b4c  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000734  08005b4c  00020734  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004e10e  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000399a  00000000  00000000  0006e1bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000035f0  00000000  00000000  00071b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003438  00000000  00000000  00075150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a38c  00000000  00000000  00078588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e42f  00000000  00000000  00092914  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a46fd  00000000  00000000  000b0d43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00155440  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000f214  00000000  00000000  00155490  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000088 	.word	0x20000088
 8000128:	00000000 	.word	0x00000000
 800012c:	080055b8 	.word	0x080055b8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000008c 	.word	0x2000008c
 8000148:	080055b8 	.word	0x080055b8

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b0a6      	sub	sp, #152	; 0x98
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char str[32];
	char str2[32];
	char str3[32];
	int state = 0;
 8000152:	2300      	movs	r3, #0
 8000154:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	int pre_tick = 0;
 8000158:	2300      	movs	r3, #0
 800015a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	int first = 0;
 800015e:	2300      	movs	r3, #0
 8000160:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000164:	f001 f8d4 	bl	8001310 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000168:	f000 fb2c 	bl	80007c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016c:	f000 fc8c 	bl	8000a88 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000170:	f000 fb88 	bl	8000884 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000174:	f000 fc0a 	bl	800098c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000178:	f000 fc32 	bl	80009e0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800017c:	f000 fbb8 	bl	80008f0 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8000180:	f000 fc58 	bl	8000a34 <MX_USART3_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000184:	f000 fb62 	bl	800084c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 8000188:	48b9      	ldr	r0, [pc, #740]	; (8000470 <main+0x324>)
 800018a:	f002 fad9 	bl	8002740 <HAL_TIM_Base_Start_IT>
	u8g2_Setup_ssd1306_128x64_noname_f(&u8g2, U8G2_R0, u8x8_byte_stm32_hw_spi,
 800018e:	4bb9      	ldr	r3, [pc, #740]	; (8000474 <main+0x328>)
 8000190:	4ab9      	ldr	r2, [pc, #740]	; (8000478 <main+0x32c>)
 8000192:	49ba      	ldr	r1, [pc, #744]	; (800047c <main+0x330>)
 8000194:	48ba      	ldr	r0, [pc, #744]	; (8000480 <main+0x334>)
 8000196:	f003 f97b 	bl	8003490 <u8g2_Setup_ssd1306_128x64_noname_f>
			u8x8_stm32_gpio_and_delay);

	u8g2_InitDisplay(&u8g2);
 800019a:	48b9      	ldr	r0, [pc, #740]	; (8000480 <main+0x334>)
 800019c:	f004 fcc3 	bl	8004b26 <u8x8_InitDisplay>
	u8g2_SetPowerSave(&u8g2, 0);
 80001a0:	2100      	movs	r1, #0
 80001a2:	48b7      	ldr	r0, [pc, #732]	; (8000480 <main+0x334>)
 80001a4:	f004 fcce 	bl	8004b44 <u8x8_SetPowerSave>

	u8g2_SetFont(&u8g2, u8g2_font_5x7_tr);
 80001a8:	49b6      	ldr	r1, [pc, #728]	; (8000484 <main+0x338>)
 80001aa:	48b5      	ldr	r0, [pc, #724]	; (8000480 <main+0x334>)
 80001ac:	f003 fe0a 	bl	8003dc4 <u8g2_SetFont>
	u8g2_SetDisplayRotation(&u8g2, U8G2_R2);
 80001b0:	49b5      	ldr	r1, [pc, #724]	; (8000488 <main+0x33c>)
 80001b2:	48b3      	ldr	r0, [pc, #716]	; (8000480 <main+0x334>)
 80001b4:	f004 f878 	bl	80042a8 <u8g2_SetDisplayRotation>

	HAL_UART_Receive_IT(&huart3, &cmd, 1);
 80001b8:	2201      	movs	r2, #1
 80001ba:	49b4      	ldr	r1, [pc, #720]	; (800048c <main+0x340>)
 80001bc:	48b4      	ldr	r0, [pc, #720]	; (8000490 <main+0x344>)
 80001be:	f002 ff48 	bl	8003052 <HAL_UART_Receive_IT>

	/* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
	__HAL_UART_ENABLE_IT(&huart2, UART_IT_ERR);
 80001c2:	4bb4      	ldr	r3, [pc, #720]	; (8000494 <main+0x348>)
 80001c4:	681b      	ldr	r3, [r3, #0]
 80001c6:	695a      	ldr	r2, [r3, #20]
 80001c8:	4bb2      	ldr	r3, [pc, #712]	; (8000494 <main+0x348>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	f042 0201 	orr.w	r2, r2, #1
 80001d0:	615a      	str	r2, [r3, #20]
	/* Enable the UART Data Register not empty Interrupt */
	__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 80001d2:	4bb0      	ldr	r3, [pc, #704]	; (8000494 <main+0x348>)
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	68da      	ldr	r2, [r3, #12]
 80001d8:	4bae      	ldr	r3, [pc, #696]	; (8000494 <main+0x348>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	f042 0220 	orr.w	r2, r2, #32
 80001e0:	60da      	str	r2, [r3, #12]
	rxBufferInit(&uart_rx);
 80001e2:	48ad      	ldr	r0, [pc, #692]	; (8000498 <main+0x34c>)
 80001e4:	f000 ffa8 	bl	8001138 <rxBufferInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		if (timerFlag == 1) {
 80001e8:	4bac      	ldr	r3, [pc, #688]	; (800049c <main+0x350>)
 80001ea:	781b      	ldrb	r3, [r3, #0]
 80001ec:	b2db      	uxtb	r3, r3
 80001ee:	2b01      	cmp	r3, #1
 80001f0:	d12a      	bne.n	8000248 <main+0xfc>

			state = 2;
 80001f2:	2302      	movs	r3, #2
 80001f4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

			if (first++ > 0) {
 80001f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80001fc:	1c5a      	adds	r2, r3, #1
 80001fe:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8000202:	2b00      	cmp	r3, #0
 8000204:	dd09      	ble.n	800021a <main+0xce>
				sprintf(str, "1 min TIMER");
 8000206:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800020a:	49a5      	ldr	r1, [pc, #660]	; (80004a0 <main+0x354>)
 800020c:	4618      	mov	r0, r3
 800020e:	f004 fd59 	bl	8004cc4 <siprintf>
				first = 1;
 8000212:	2301      	movs	r3, #1
 8000214:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000218:	e005      	b.n	8000226 <main+0xda>

			} else {
				sprintf(str, "Hello :)");
 800021a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800021e:	49a1      	ldr	r1, [pc, #644]	; (80004a4 <main+0x358>)
 8000220:	4618      	mov	r0, r3
 8000222:	f004 fd4f 	bl	8004cc4 <siprintf>
			}

			u8g2_FirstPage(&u8g2);
 8000226:	4896      	ldr	r0, [pc, #600]	; (8000480 <main+0x334>)
 8000228:	f003 f8df 	bl	80033ea <u8g2_FirstPage>
			do {
				u8g2_DrawStrX2(&u8g2, 5, 30, str);
 800022c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000230:	221e      	movs	r2, #30
 8000232:	2105      	movs	r1, #5
 8000234:	4892      	ldr	r0, [pc, #584]	; (8000480 <main+0x334>)
 8000236:	f003 fd27 	bl	8003c88 <u8g2_DrawStrX2>

			} while (u8g2_NextPage(&u8g2));
 800023a:	4891      	ldr	r0, [pc, #580]	; (8000480 <main+0x334>)
 800023c:	f003 f8e9 	bl	8003412 <u8g2_NextPage>
 8000240:	4603      	mov	r3, r0
 8000242:	2b00      	cmp	r3, #0
 8000244:	d1f2      	bne.n	800022c <main+0xe0>
 8000246:	e01d      	b.n	8000284 <main+0x138>

		}

		else if (btnFlag == 1) {
 8000248:	4b97      	ldr	r3, [pc, #604]	; (80004a8 <main+0x35c>)
 800024a:	781b      	ldrb	r3, [r3, #0]
 800024c:	b2db      	uxtb	r3, r3
 800024e:	2b01      	cmp	r3, #1
 8000250:	d118      	bne.n	8000284 <main+0x138>

			state = 4;
 8000252:	2304      	movs	r3, #4
 8000254:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
			sprintf(str, "BUTTON!");
 8000258:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800025c:	4993      	ldr	r1, [pc, #588]	; (80004ac <main+0x360>)
 800025e:	4618      	mov	r0, r3
 8000260:	f004 fd30 	bl	8004cc4 <siprintf>
			u8g2_FirstPage(&u8g2);
 8000264:	4886      	ldr	r0, [pc, #536]	; (8000480 <main+0x334>)
 8000266:	f003 f8c0 	bl	80033ea <u8g2_FirstPage>
			do {
				u8g2_DrawStrX2(&u8g2, 5, 30, str);
 800026a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800026e:	221e      	movs	r2, #30
 8000270:	2105      	movs	r1, #5
 8000272:	4883      	ldr	r0, [pc, #524]	; (8000480 <main+0x334>)
 8000274:	f003 fd08 	bl	8003c88 <u8g2_DrawStrX2>

			} while (u8g2_NextPage(&u8g2));
 8000278:	4881      	ldr	r0, [pc, #516]	; (8000480 <main+0x334>)
 800027a:	f003 f8ca 	bl	8003412 <u8g2_NextPage>
 800027e:	4603      	mov	r3, r0
 8000280:	2b00      	cmp	r3, #0
 8000282:	d1f2      	bne.n	800026a <main+0x11e>

		}

		if (state == 1) {
 8000284:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000288:	2b01      	cmp	r3, #1
 800028a:	f040 811d 	bne.w	80004c8 <main+0x37c>
			state = 3;
 800028e:	2303      	movs	r3, #3
 8000290:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
			sprintf(str, "MEASURING...");
 8000294:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000298:	4985      	ldr	r1, [pc, #532]	; (80004b0 <main+0x364>)
 800029a:	4618      	mov	r0, r3
 800029c:	f004 fd12 	bl	8004cc4 <siprintf>
			u8g2_FirstPage(&u8g2);
 80002a0:	4877      	ldr	r0, [pc, #476]	; (8000480 <main+0x334>)
 80002a2:	f003 f8a2 	bl	80033ea <u8g2_FirstPage>
			do {
				u8g2_DrawStrX2(&u8g2, 5, 30, str);
 80002a6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80002aa:	221e      	movs	r2, #30
 80002ac:	2105      	movs	r1, #5
 80002ae:	4874      	ldr	r0, [pc, #464]	; (8000480 <main+0x334>)
 80002b0:	f003 fcea 	bl	8003c88 <u8g2_DrawStrX2>

			} while (u8g2_NextPage(&u8g2));
 80002b4:	4872      	ldr	r0, [pc, #456]	; (8000480 <main+0x334>)
 80002b6:	f003 f8ac 	bl	8003412 <u8g2_NextPage>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d1f2      	bne.n	80002a6 <main+0x15a>
			/*
			 pre_tick = HAL_GetTick();
			 while ((HAL_GetTick() - pre_tick) < 5000)
			 ;
			 */
			memset(buff, 0, 55);
 80002c0:	2237      	movs	r2, #55	; 0x37
 80002c2:	2100      	movs	r1, #0
 80002c4:	487b      	ldr	r0, [pc, #492]	; (80004b4 <main+0x368>)
 80002c6:	f004 fcf5 	bl	8004cb4 <memset>
			HAL_UART_Transmit(&huart2, (uint8_t*) getDataCommand, 5, 5000);
 80002ca:	f241 3388 	movw	r3, #5000	; 0x1388
 80002ce:	2205      	movs	r2, #5
 80002d0:	4979      	ldr	r1, [pc, #484]	; (80004b8 <main+0x36c>)
 80002d2:	4870      	ldr	r0, [pc, #448]	; (8000494 <main+0x348>)
 80002d4:	f002 fe2b 	bl	8002f2e <HAL_UART_Transmit>

			pre_tick = HAL_GetTick();
 80002d8:	f001 f872 	bl	80013c0 <HAL_GetTick>
 80002dc:	4603      	mov	r3, r0
 80002de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			while ((HAL_GetTick() - pre_tick) < 1000)
 80002e2:	bf00      	nop
 80002e4:	f001 f86c 	bl	80013c0 <HAL_GetTick>
 80002e8:	4602      	mov	r2, r0
 80002ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80002ee:	1ad3      	subs	r3, r2, r3
 80002f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80002f4:	d3f6      	bcc.n	80002e4 <main+0x198>
				;

			uint8_t num = uart_available(&uart_rx);
 80002f6:	4868      	ldr	r0, [pc, #416]	; (8000498 <main+0x34c>)
 80002f8:	f000 ff96 	bl	8001228 <uart_available>
 80002fc:	4603      	mov	r3, r0
 80002fe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			uint8_t i;
			for (i = 0; i < num; i++) {
 8000302:	2300      	movs	r3, #0
 8000304:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8000308:	e013      	b.n	8000332 <main+0x1e6>
				int ch = pop(&uart_rx);
 800030a:	4863      	ldr	r0, [pc, #396]	; (8000498 <main+0x34c>)
 800030c:	f000 ff5a 	bl	80011c4 <pop>
 8000310:	4603      	mov	r3, r0
 8000312:	663b      	str	r3, [r7, #96]	; 0x60
				if (ch != -1) {
 8000314:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800031a:	d005      	beq.n	8000328 <main+0x1dc>

					buff[i] = ch;
 800031c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000320:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000322:	b2d1      	uxtb	r1, r2
 8000324:	4a63      	ldr	r2, [pc, #396]	; (80004b4 <main+0x368>)
 8000326:	54d1      	strb	r1, [r2, r3]
			for (i = 0; i < num; i++) {
 8000328:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800032c:	3301      	adds	r3, #1
 800032e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8000332:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 8000336:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800033a:	429a      	cmp	r2, r3
 800033c:	d3e5      	bcc.n	800030a <main+0x1be>
				}
			}
			HAL_UART_Transmit(&huart3, buff, num, 500);
 800033e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000342:	b29a      	uxth	r2, r3
 8000344:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000348:	495a      	ldr	r1, [pc, #360]	; (80004b4 <main+0x368>)
 800034a:	4851      	ldr	r0, [pc, #324]	; (8000490 <main+0x344>)
 800034c:	f002 fdef 	bl	8002f2e <HAL_UART_Transmit>

			if ((buff[0] == 0x16 && buff[1] == 0x35)) {
 8000350:	4b58      	ldr	r3, [pc, #352]	; (80004b4 <main+0x368>)
 8000352:	781b      	ldrb	r3, [r3, #0]
 8000354:	2b16      	cmp	r3, #22
 8000356:	f47f af47 	bne.w	80001e8 <main+0x9c>
 800035a:	4b56      	ldr	r3, [pc, #344]	; (80004b4 <main+0x368>)
 800035c:	785b      	ldrb	r3, [r3, #1]
 800035e:	2b35      	cmp	r3, #53	; 0x35
 8000360:	f47f af42 	bne.w	80001e8 <main+0x9c>
				if (buff[2] == 0x0B) {
 8000364:	4b53      	ldr	r3, [pc, #332]	; (80004b4 <main+0x368>)
 8000366:	789b      	ldrb	r3, [r3, #2]
 8000368:	2b0b      	cmp	r3, #11
 800036a:	f47f af3d 	bne.w	80001e8 <main+0x9c>
					int val = 0;
 800036e:	2300      	movs	r3, #0
 8000370:	66bb      	str	r3, [r7, #104]	; 0x68
					/*
					 val |= (buff[3] << 24) | (buff[4] << 16) | (buff[5] << 8)
					 | buff[6];
					 */
					val = (buff[3] << 24) + (buff[4] << 16) + (buff[5] << 8)
 8000372:	4b50      	ldr	r3, [pc, #320]	; (80004b4 <main+0x368>)
 8000374:	78db      	ldrb	r3, [r3, #3]
 8000376:	061a      	lsls	r2, r3, #24
 8000378:	4b4e      	ldr	r3, [pc, #312]	; (80004b4 <main+0x368>)
 800037a:	791b      	ldrb	r3, [r3, #4]
 800037c:	041b      	lsls	r3, r3, #16
 800037e:	441a      	add	r2, r3
 8000380:	4b4c      	ldr	r3, [pc, #304]	; (80004b4 <main+0x368>)
 8000382:	795b      	ldrb	r3, [r3, #5]
 8000384:	021b      	lsls	r3, r3, #8
 8000386:	4413      	add	r3, r2
							+ (buff[6]);
 8000388:	4a4a      	ldr	r2, [pc, #296]	; (80004b4 <main+0x368>)
 800038a:	7992      	ldrb	r2, [r2, #6]
					val = (buff[3] << 24) + (buff[4] << 16) + (buff[5] << 8)
 800038c:	4413      	add	r3, r2
 800038e:	66bb      	str	r3, [r7, #104]	; 0x68
					sprintf(str, "PM1.0 : %d\r\n", val);
 8000390:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000394:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000396:	4949      	ldr	r1, [pc, #292]	; (80004bc <main+0x370>)
 8000398:	4618      	mov	r0, r3
 800039a:	f004 fc93 	bl	8004cc4 <siprintf>
#ifndef OLED
	  					HAL_UART_Transmit(&huart1, (uint8_t*) str, sizeof(str),
	  							100);
	  #endif
					val = 0;
 800039e:	2300      	movs	r3, #0
 80003a0:	66bb      	str	r3, [r7, #104]	; 0x68
					val = (buff[7] << 24) + (buff[8] << 16) + (buff[9] << 8)
 80003a2:	4b44      	ldr	r3, [pc, #272]	; (80004b4 <main+0x368>)
 80003a4:	79db      	ldrb	r3, [r3, #7]
 80003a6:	061a      	lsls	r2, r3, #24
 80003a8:	4b42      	ldr	r3, [pc, #264]	; (80004b4 <main+0x368>)
 80003aa:	7a1b      	ldrb	r3, [r3, #8]
 80003ac:	041b      	lsls	r3, r3, #16
 80003ae:	441a      	add	r2, r3
 80003b0:	4b40      	ldr	r3, [pc, #256]	; (80004b4 <main+0x368>)
 80003b2:	7a5b      	ldrb	r3, [r3, #9]
 80003b4:	021b      	lsls	r3, r3, #8
 80003b6:	4413      	add	r3, r2
							+ (buff[10]);
 80003b8:	4a3e      	ldr	r2, [pc, #248]	; (80004b4 <main+0x368>)
 80003ba:	7a92      	ldrb	r2, [r2, #10]
					val = (buff[7] << 24) + (buff[8] << 16) + (buff[9] << 8)
 80003bc:	4413      	add	r3, r2
 80003be:	66bb      	str	r3, [r7, #104]	; 0x68
					/*
					 val |= (buff[7] << 24) | (buff[8] << 16) | (buff[9] << 8)
					 | buff[10];
					 */
					sprintf(str2, "PM2.5 : %d\r\n", val);
 80003c0:	f107 0320 	add.w	r3, r7, #32
 80003c4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80003c6:	493e      	ldr	r1, [pc, #248]	; (80004c0 <main+0x374>)
 80003c8:	4618      	mov	r0, r3
 80003ca:	f004 fc7b 	bl	8004cc4 <siprintf>
#ifndef OLED
	  					HAL_UART_Transmit(&huart1, (uint8_t*) str2, sizeof(str2),
	  							5000);
	  #endif
					val = 0;
 80003ce:	2300      	movs	r3, #0
 80003d0:	66bb      	str	r3, [r7, #104]	; 0x68
					val = (buff[11] << 24) + (buff[12] << 16) + (buff[13] << 8)
 80003d2:	4b38      	ldr	r3, [pc, #224]	; (80004b4 <main+0x368>)
 80003d4:	7adb      	ldrb	r3, [r3, #11]
 80003d6:	061a      	lsls	r2, r3, #24
 80003d8:	4b36      	ldr	r3, [pc, #216]	; (80004b4 <main+0x368>)
 80003da:	7b1b      	ldrb	r3, [r3, #12]
 80003dc:	041b      	lsls	r3, r3, #16
 80003de:	441a      	add	r2, r3
 80003e0:	4b34      	ldr	r3, [pc, #208]	; (80004b4 <main+0x368>)
 80003e2:	7b5b      	ldrb	r3, [r3, #13]
 80003e4:	021b      	lsls	r3, r3, #8
 80003e6:	4413      	add	r3, r2
							+ (buff[14]);
 80003e8:	4a32      	ldr	r2, [pc, #200]	; (80004b4 <main+0x368>)
 80003ea:	7b92      	ldrb	r2, [r2, #14]
					val = (buff[11] << 24) + (buff[12] << 16) + (buff[13] << 8)
 80003ec:	4413      	add	r3, r2
 80003ee:	66bb      	str	r3, [r7, #104]	; 0x68
					/*
					 val |= (buff[11] << 24) | (buff[12] << 16) | (buff[13] << 8)
					 | buff[14];
					 */
					sprintf(str3, "PM10 : %d\r\n", val);
 80003f0:	463b      	mov	r3, r7
 80003f2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80003f4:	4933      	ldr	r1, [pc, #204]	; (80004c4 <main+0x378>)
 80003f6:	4618      	mov	r0, r3
 80003f8:	f004 fc64 	bl	8004cc4 <siprintf>

#ifndef OLED
	  					HAL_UART_Transmit(&huart1, (uint8_t*) str3, sizeof(str3),
	  												5000);
	  #else
					u8g2_FirstPage(&u8g2);
 80003fc:	4820      	ldr	r0, [pc, #128]	; (8000480 <main+0x334>)
 80003fe:	f002 fff4 	bl	80033ea <u8g2_FirstPage>
					do {
						u8g2_DrawStrX2(&u8g2, 5, 15, str);
 8000402:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000406:	220f      	movs	r2, #15
 8000408:	2105      	movs	r1, #5
 800040a:	481d      	ldr	r0, [pc, #116]	; (8000480 <main+0x334>)
 800040c:	f003 fc3c 	bl	8003c88 <u8g2_DrawStrX2>
						u8g2_DrawStrX2(&u8g2, 5, 30, str2);
 8000410:	f107 0320 	add.w	r3, r7, #32
 8000414:	221e      	movs	r2, #30
 8000416:	2105      	movs	r1, #5
 8000418:	4819      	ldr	r0, [pc, #100]	; (8000480 <main+0x334>)
 800041a:	f003 fc35 	bl	8003c88 <u8g2_DrawStrX2>
						u8g2_DrawStrX2(&u8g2, 5, 45, str3);
 800041e:	463b      	mov	r3, r7
 8000420:	222d      	movs	r2, #45	; 0x2d
 8000422:	2105      	movs	r1, #5
 8000424:	4816      	ldr	r0, [pc, #88]	; (8000480 <main+0x334>)
 8000426:	f003 fc2f 	bl	8003c88 <u8g2_DrawStrX2>
					} while (u8g2_NextPage(&u8g2));
 800042a:	4815      	ldr	r0, [pc, #84]	; (8000480 <main+0x334>)
 800042c:	f002 fff1 	bl	8003412 <u8g2_NextPage>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d1e5      	bne.n	8000402 <main+0x2b6>
					int pre_tick = HAL_GetTick();
 8000436:	f000 ffc3 	bl	80013c0 <HAL_GetTick>
 800043a:	4603      	mov	r3, r0
 800043c:	667b      	str	r3, [r7, #100]	; 0x64
					while ((HAL_GetTick() - pre_tick) < 1000)
 800043e:	bf00      	nop
 8000440:	f000 ffbe 	bl	80013c0 <HAL_GetTick>
 8000444:	4602      	mov	r2, r0
 8000446:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000448:	1ad3      	subs	r3, r2, r3
 800044a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800044e:	d3f7      	bcc.n	8000440 <main+0x2f4>
						;

#endif

					memset(str, 0, sizeof(str));
 8000450:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000454:	2220      	movs	r2, #32
 8000456:	2100      	movs	r1, #0
 8000458:	4618      	mov	r0, r3
 800045a:	f004 fc2b 	bl	8004cb4 <memset>
					memset(str2, 0, sizeof(str2));
 800045e:	f107 0320 	add.w	r3, r7, #32
 8000462:	2220      	movs	r2, #32
 8000464:	2100      	movs	r1, #0
 8000466:	4618      	mov	r0, r3
 8000468:	f004 fc24 	bl	8004cb4 <memset>
 800046c:	e6bc      	b.n	80001e8 <main+0x9c>
 800046e:	bf00      	nop
 8000470:	200000fc 	.word	0x200000fc
 8000474:	08000f7d 	.word	0x08000f7d
 8000478:	08001075 	.word	0x08001075
 800047c:	080059a0 	.word	0x080059a0
 8000480:	2000024c 	.word	0x2000024c
 8000484:	0800567c 	.word	0x0800567c
 8000488:	080059ac 	.word	0x080059ac
 800048c:	20000247 	.word	0x20000247
 8000490:	200001cc 	.word	0x200001cc
 8000494:	20000188 	.word	0x20000188
 8000498:	200002e4 	.word	0x200002e4
 800049c:	20000249 	.word	0x20000249
 80004a0:	080055d0 	.word	0x080055d0
 80004a4:	080055dc 	.word	0x080055dc
 80004a8:	20000248 	.word	0x20000248
 80004ac:	080055e8 	.word	0x080055e8
 80004b0:	080055f0 	.word	0x080055f0
 80004b4:	20000210 	.word	0x20000210
 80004b8:	20000000 	.word	0x20000000
 80004bc:	08005600 	.word	0x08005600
 80004c0:	08005610 	.word	0x08005610
 80004c4:	08005620 	.word	0x08005620
				}

			}
		}

		else if (state == 2) {
 80004c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80004cc:	2b02      	cmp	r3, #2
 80004ce:	d14e      	bne.n	800056e <main+0x422>
			state = 1;
 80004d0:	2301      	movs	r3, #1
 80004d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

			memset(buff, 0, 55);
 80004d6:	2237      	movs	r2, #55	; 0x37
 80004d8:	2100      	movs	r1, #0
 80004da:	48ad      	ldr	r0, [pc, #692]	; (8000790 <main+0x644>)
 80004dc:	f004 fbea 	bl	8004cb4 <memset>
			HAL_UART_Transmit(&huart2, (uint8_t*) openCommand, 6, 5000);
 80004e0:	f241 3388 	movw	r3, #5000	; 0x1388
 80004e4:	2206      	movs	r2, #6
 80004e6:	49ab      	ldr	r1, [pc, #684]	; (8000794 <main+0x648>)
 80004e8:	48ab      	ldr	r0, [pc, #684]	; (8000798 <main+0x64c>)
 80004ea:	f002 fd20 	bl	8002f2e <HAL_UART_Transmit>
			pre_tick = HAL_GetTick();
 80004ee:	f000 ff67 	bl	80013c0 <HAL_GetTick>
 80004f2:	4603      	mov	r3, r0
 80004f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			while ((HAL_GetTick() - pre_tick) < 1000)
 80004f8:	bf00      	nop
 80004fa:	f000 ff61 	bl	80013c0 <HAL_GetTick>
 80004fe:	4602      	mov	r2, r0
 8000500:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000504:	1ad3      	subs	r3, r2, r3
 8000506:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800050a:	d3f6      	bcc.n	80004fa <main+0x3ae>
				;

			uint8_t num = uart_available(&uart_rx);
 800050c:	48a3      	ldr	r0, [pc, #652]	; (800079c <main+0x650>)
 800050e:	f000 fe8b 	bl	8001228 <uart_available>
 8000512:	4603      	mov	r3, r0
 8000514:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

			uint8_t i;

			for (i = 0; i < num; i++) {
 8000518:	2300      	movs	r3, #0
 800051a:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 800051e:	e013      	b.n	8000548 <main+0x3fc>
				int ch = pop(&uart_rx);
 8000520:	489e      	ldr	r0, [pc, #632]	; (800079c <main+0x650>)
 8000522:	f000 fe4f 	bl	80011c4 <pop>
 8000526:	4603      	mov	r3, r0
 8000528:	673b      	str	r3, [r7, #112]	; 0x70
				if (ch != -1) {
 800052a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800052c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000530:	d005      	beq.n	800053e <main+0x3f2>
					buff[i] = ch;
 8000532:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8000536:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000538:	b2d1      	uxtb	r1, r2
 800053a:	4a95      	ldr	r2, [pc, #596]	; (8000790 <main+0x644>)
 800053c:	54d1      	strb	r1, [r2, r3]
			for (i = 0; i < num; i++) {
 800053e:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8000542:	3301      	adds	r3, #1
 8000544:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 8000548:	f897 208e 	ldrb.w	r2, [r7, #142]	; 0x8e
 800054c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000550:	429a      	cmp	r2, r3
 8000552:	d3e5      	bcc.n	8000520 <main+0x3d4>
				}
			}
			timerFlag = 0;
 8000554:	4b92      	ldr	r3, [pc, #584]	; (80007a0 <main+0x654>)
 8000556:	2200      	movs	r2, #0
 8000558:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, buff, num, 500);
 800055a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800055e:	b29a      	uxth	r2, r3
 8000560:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000564:	498a      	ldr	r1, [pc, #552]	; (8000790 <main+0x644>)
 8000566:	488f      	ldr	r0, [pc, #572]	; (80007a4 <main+0x658>)
 8000568:	f002 fce1 	bl	8002f2e <HAL_UART_Transmit>
 800056c:	e63c      	b.n	80001e8 <main+0x9c>

		} else if (state == 3) {
 800056e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000572:	2b03      	cmp	r3, #3
 8000574:	d14b      	bne.n	800060e <main+0x4c2>
			state = 0;
 8000576:	2300      	movs	r3, #0
 8000578:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

			memset(buff, 0, 55);
 800057c:	2237      	movs	r2, #55	; 0x37
 800057e:	2100      	movs	r1, #0
 8000580:	4883      	ldr	r0, [pc, #524]	; (8000790 <main+0x644>)
 8000582:	f004 fb97 	bl	8004cb4 <memset>
			HAL_UART_Transmit(&huart2, (uint8_t*) closeCommand, 6, 5000);
 8000586:	f241 3388 	movw	r3, #5000	; 0x1388
 800058a:	2206      	movs	r2, #6
 800058c:	4986      	ldr	r1, [pc, #536]	; (80007a8 <main+0x65c>)
 800058e:	4882      	ldr	r0, [pc, #520]	; (8000798 <main+0x64c>)
 8000590:	f002 fccd 	bl	8002f2e <HAL_UART_Transmit>
			pre_tick = HAL_GetTick();
 8000594:	f000 ff14 	bl	80013c0 <HAL_GetTick>
 8000598:	4603      	mov	r3, r0
 800059a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			while ((HAL_GetTick() - pre_tick) < 1000)
 800059e:	bf00      	nop
 80005a0:	f000 ff0e 	bl	80013c0 <HAL_GetTick>
 80005a4:	4602      	mov	r2, r0
 80005a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80005aa:	1ad3      	subs	r3, r2, r3
 80005ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80005b0:	d3f6      	bcc.n	80005a0 <main+0x454>
				;

			uint8_t num = uart_available(&uart_rx);
 80005b2:	487a      	ldr	r0, [pc, #488]	; (800079c <main+0x650>)
 80005b4:	f000 fe38 	bl	8001228 <uart_available>
 80005b8:	4603      	mov	r3, r0
 80005ba:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			uint8_t i;

			for (i = 0; i < num; i++) {
 80005be:	2300      	movs	r3, #0
 80005c0:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
 80005c4:	e013      	b.n	80005ee <main+0x4a2>
				int ch = pop(&uart_rx);
 80005c6:	4875      	ldr	r0, [pc, #468]	; (800079c <main+0x650>)
 80005c8:	f000 fdfc 	bl	80011c4 <pop>
 80005cc:	4603      	mov	r3, r0
 80005ce:	67bb      	str	r3, [r7, #120]	; 0x78
				if (ch != -1) {
 80005d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80005d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005d6:	d005      	beq.n	80005e4 <main+0x498>
					buff[i] = ch;
 80005d8:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 80005dc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80005de:	b2d1      	uxtb	r1, r2
 80005e0:	4a6b      	ldr	r2, [pc, #428]	; (8000790 <main+0x644>)
 80005e2:	54d1      	strb	r1, [r2, r3]
			for (i = 0; i < num; i++) {
 80005e4:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 80005e8:	3301      	adds	r3, #1
 80005ea:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
 80005ee:	f897 208d 	ldrb.w	r2, [r7, #141]	; 0x8d
 80005f2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80005f6:	429a      	cmp	r2, r3
 80005f8:	d3e5      	bcc.n	80005c6 <main+0x47a>
				}
			}
			HAL_UART_Transmit(&huart3, buff, num, 500);
 80005fa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80005fe:	b29a      	uxth	r2, r3
 8000600:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000604:	4962      	ldr	r1, [pc, #392]	; (8000790 <main+0x644>)
 8000606:	4867      	ldr	r0, [pc, #412]	; (80007a4 <main+0x658>)
 8000608:	f002 fc91 	bl	8002f2e <HAL_UART_Transmit>
 800060c:	e5ec      	b.n	80001e8 <main+0x9c>
		} else if (state == 0) {
 800060e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000612:	2b00      	cmp	r3, #0
 8000614:	d164      	bne.n	80006e0 <main+0x594>

			sprintf(str, "   ^   ^");
 8000616:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800061a:	4964      	ldr	r1, [pc, #400]	; (80007ac <main+0x660>)
 800061c:	4618      	mov	r0, r3
 800061e:	f004 fb51 	bl	8004cc4 <siprintf>
			sprintf(str2, "     o");
 8000622:	f107 0320 	add.w	r3, r7, #32
 8000626:	4962      	ldr	r1, [pc, #392]	; (80007b0 <main+0x664>)
 8000628:	4618      	mov	r0, r3
 800062a:	f004 fb4b 	bl	8004cc4 <siprintf>
			u8g2_FirstPage(&u8g2);
 800062e:	4861      	ldr	r0, [pc, #388]	; (80007b4 <main+0x668>)
 8000630:	f002 fedb 	bl	80033ea <u8g2_FirstPage>
			do {
				u8g2_DrawStrX2(&u8g2, 5, 30, str);
 8000634:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000638:	221e      	movs	r2, #30
 800063a:	2105      	movs	r1, #5
 800063c:	485d      	ldr	r0, [pc, #372]	; (80007b4 <main+0x668>)
 800063e:	f003 fb23 	bl	8003c88 <u8g2_DrawStrX2>
				u8g2_DrawStrX2(&u8g2, 5, 45, str2);
 8000642:	f107 0320 	add.w	r3, r7, #32
 8000646:	222d      	movs	r2, #45	; 0x2d
 8000648:	2105      	movs	r1, #5
 800064a:	485a      	ldr	r0, [pc, #360]	; (80007b4 <main+0x668>)
 800064c:	f003 fb1c 	bl	8003c88 <u8g2_DrawStrX2>

			} while (u8g2_NextPage(&u8g2));
 8000650:	4858      	ldr	r0, [pc, #352]	; (80007b4 <main+0x668>)
 8000652:	f002 fede 	bl	8003412 <u8g2_NextPage>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d1eb      	bne.n	8000634 <main+0x4e8>

			pre_tick = HAL_GetTick();
 800065c:	f000 feb0 	bl	80013c0 <HAL_GetTick>
 8000660:	4603      	mov	r3, r0
 8000662:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			while ((HAL_GetTick() - pre_tick) < 1000)
 8000666:	bf00      	nop
 8000668:	f000 feaa 	bl	80013c0 <HAL_GetTick>
 800066c:	4602      	mov	r2, r0
 800066e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000672:	1ad3      	subs	r3, r2, r3
 8000674:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000678:	d3f6      	bcc.n	8000668 <main+0x51c>
				;

			sprintf(str, "   -   -");
 800067a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800067e:	494e      	ldr	r1, [pc, #312]	; (80007b8 <main+0x66c>)
 8000680:	4618      	mov	r0, r3
 8000682:	f004 fb1f 	bl	8004cc4 <siprintf>
			sprintf(str2, "     _");
 8000686:	f107 0320 	add.w	r3, r7, #32
 800068a:	494c      	ldr	r1, [pc, #304]	; (80007bc <main+0x670>)
 800068c:	4618      	mov	r0, r3
 800068e:	f004 fb19 	bl	8004cc4 <siprintf>
			u8g2_FirstPage(&u8g2);
 8000692:	4848      	ldr	r0, [pc, #288]	; (80007b4 <main+0x668>)
 8000694:	f002 fea9 	bl	80033ea <u8g2_FirstPage>
			do {
				u8g2_DrawStrX2(&u8g2, 5, 30, str);
 8000698:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800069c:	221e      	movs	r2, #30
 800069e:	2105      	movs	r1, #5
 80006a0:	4844      	ldr	r0, [pc, #272]	; (80007b4 <main+0x668>)
 80006a2:	f003 faf1 	bl	8003c88 <u8g2_DrawStrX2>
				u8g2_DrawStrX2(&u8g2, 5, 45, str2);
 80006a6:	f107 0320 	add.w	r3, r7, #32
 80006aa:	222d      	movs	r2, #45	; 0x2d
 80006ac:	2105      	movs	r1, #5
 80006ae:	4841      	ldr	r0, [pc, #260]	; (80007b4 <main+0x668>)
 80006b0:	f003 faea 	bl	8003c88 <u8g2_DrawStrX2>

			} while (u8g2_NextPage(&u8g2));
 80006b4:	483f      	ldr	r0, [pc, #252]	; (80007b4 <main+0x668>)
 80006b6:	f002 feac 	bl	8003412 <u8g2_NextPage>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d1eb      	bne.n	8000698 <main+0x54c>

			pre_tick = HAL_GetTick();
 80006c0:	f000 fe7e 	bl	80013c0 <HAL_GetTick>
 80006c4:	4603      	mov	r3, r0
 80006c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			while ((HAL_GetTick() - pre_tick) < 1000)
 80006ca:	bf00      	nop
 80006cc:	f000 fe78 	bl	80013c0 <HAL_GetTick>
 80006d0:	4602      	mov	r2, r0
 80006d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80006d6:	1ad3      	subs	r3, r2, r3
 80006d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80006dc:	d3f6      	bcc.n	80006cc <main+0x580>
 80006de:	e583      	b.n	80001e8 <main+0x9c>
				;
		} else if (state == 4) {
 80006e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80006e4:	2b04      	cmp	r3, #4
 80006e6:	f47f ad7f 	bne.w	80001e8 <main+0x9c>
			state = 1;
 80006ea:	2301      	movs	r3, #1
 80006ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

			memset(buff, 0, 55);
 80006f0:	2237      	movs	r2, #55	; 0x37
 80006f2:	2100      	movs	r1, #0
 80006f4:	4826      	ldr	r0, [pc, #152]	; (8000790 <main+0x644>)
 80006f6:	f004 fadd 	bl	8004cb4 <memset>
			HAL_UART_Transmit(&huart2, (uint8_t*) openCommand, 6, 5000);
 80006fa:	f241 3388 	movw	r3, #5000	; 0x1388
 80006fe:	2206      	movs	r2, #6
 8000700:	4924      	ldr	r1, [pc, #144]	; (8000794 <main+0x648>)
 8000702:	4825      	ldr	r0, [pc, #148]	; (8000798 <main+0x64c>)
 8000704:	f002 fc13 	bl	8002f2e <HAL_UART_Transmit>
			pre_tick = HAL_GetTick();
 8000708:	f000 fe5a 	bl	80013c0 <HAL_GetTick>
 800070c:	4603      	mov	r3, r0
 800070e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			while ((HAL_GetTick() - pre_tick) < 1000)
 8000712:	bf00      	nop
 8000714:	f000 fe54 	bl	80013c0 <HAL_GetTick>
 8000718:	4602      	mov	r2, r0
 800071a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800071e:	1ad3      	subs	r3, r2, r3
 8000720:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000724:	d3f6      	bcc.n	8000714 <main+0x5c8>
				;

			uint8_t num = uart_available(&uart_rx);
 8000726:	481d      	ldr	r0, [pc, #116]	; (800079c <main+0x650>)
 8000728:	f000 fd7e 	bl	8001228 <uart_available>
 800072c:	4603      	mov	r3, r0
 800072e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

			uint8_t i;

			for (i = 0; i < num; i++) {
 8000732:	2300      	movs	r3, #0
 8000734:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
 8000738:	e016      	b.n	8000768 <main+0x61c>
				int ch = pop(&uart_rx);
 800073a:	4818      	ldr	r0, [pc, #96]	; (800079c <main+0x650>)
 800073c:	f000 fd42 	bl	80011c4 <pop>
 8000740:	4603      	mov	r3, r0
 8000742:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				if (ch != -1) {
 8000746:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800074a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800074e:	d006      	beq.n	800075e <main+0x612>
					buff[i] = ch;
 8000750:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8000754:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000758:	b2d1      	uxtb	r1, r2
 800075a:	4a0d      	ldr	r2, [pc, #52]	; (8000790 <main+0x644>)
 800075c:	54d1      	strb	r1, [r2, r3]
			for (i = 0; i < num; i++) {
 800075e:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8000762:	3301      	adds	r3, #1
 8000764:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
 8000768:	f897 208c 	ldrb.w	r2, [r7, #140]	; 0x8c
 800076c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000770:	429a      	cmp	r2, r3
 8000772:	d3e2      	bcc.n	800073a <main+0x5ee>
				}
			}
			btnFlag = 0;
 8000774:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <main+0x674>)
 8000776:	2200      	movs	r2, #0
 8000778:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, buff, num, 500);
 800077a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800077e:	b29a      	uxth	r2, r3
 8000780:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000784:	4902      	ldr	r1, [pc, #8]	; (8000790 <main+0x644>)
 8000786:	4807      	ldr	r0, [pc, #28]	; (80007a4 <main+0x658>)
 8000788:	f002 fbd1 	bl	8002f2e <HAL_UART_Transmit>
		if (timerFlag == 1) {
 800078c:	e52c      	b.n	80001e8 <main+0x9c>
 800078e:	bf00      	nop
 8000790:	20000210 	.word	0x20000210
 8000794:	20000010 	.word	0x20000010
 8000798:	20000188 	.word	0x20000188
 800079c:	200002e4 	.word	0x200002e4
 80007a0:	20000249 	.word	0x20000249
 80007a4:	200001cc 	.word	0x200001cc
 80007a8:	20000008 	.word	0x20000008
 80007ac:	0800562c 	.word	0x0800562c
 80007b0:	08005638 	.word	0x08005638
 80007b4:	2000024c 	.word	0x2000024c
 80007b8:	08005640 	.word	0x08005640
 80007bc:	0800564c 	.word	0x0800564c
 80007c0:	20000248 	.word	0x20000248

080007c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b090      	sub	sp, #64	; 0x40
 80007c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ca:	f107 0318 	add.w	r3, r7, #24
 80007ce:	2228      	movs	r2, #40	; 0x28
 80007d0:	2100      	movs	r1, #0
 80007d2:	4618      	mov	r0, r3
 80007d4:	f004 fa6e 	bl	8004cb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d8:	1d3b      	adds	r3, r7, #4
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]
 80007e4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007e6:	2301      	movs	r3, #1
 80007e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80007f0:	2300      	movs	r3, #0
 80007f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007f4:	2301      	movs	r3, #1
 80007f6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f8:	2302      	movs	r3, #2
 80007fa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000800:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000802:	2300      	movs	r3, #0
 8000804:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000806:	f107 0318 	add.w	r3, r7, #24
 800080a:	4618      	mov	r0, r3
 800080c:	f001 f8c8 	bl	80019a0 <HAL_RCC_OscConfig>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <SystemClock_Config+0x56>
  {
    Error_Handler();
 8000816:	f000 f9e1 	bl	8000bdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800081a:	230f      	movs	r3, #15
 800081c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800081e:	2302      	movs	r3, #2
 8000820:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000822:	2380      	movs	r3, #128	; 0x80
 8000824:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000826:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800082a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800082c:	2300      	movs	r3, #0
 800082e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000830:	1d3b      	adds	r3, r7, #4
 8000832:	2100      	movs	r1, #0
 8000834:	4618      	mov	r0, r3
 8000836:	f001 fb35 	bl	8001ea4 <HAL_RCC_ClockConfig>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000840:	f000 f9cc 	bl	8000bdc <Error_Handler>
  }
}
 8000844:	bf00      	nop
 8000846:	3740      	adds	r7, #64	; 0x40
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}

0800084c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000850:	2200      	movs	r2, #0
 8000852:	2100      	movs	r1, #0
 8000854:	2026      	movs	r0, #38	; 0x26
 8000856:	f000 feb8 	bl	80015ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 800085a:	2026      	movs	r0, #38	; 0x26
 800085c:	f000 fed1 	bl	8001602 <HAL_NVIC_EnableIRQ>
  /* EXTI0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000860:	2200      	movs	r2, #0
 8000862:	2100      	movs	r1, #0
 8000864:	2006      	movs	r0, #6
 8000866:	f000 feb0 	bl	80015ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800086a:	2006      	movs	r0, #6
 800086c:	f000 fec9 	bl	8001602 <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000870:	2200      	movs	r2, #0
 8000872:	2100      	movs	r1, #0
 8000874:	201c      	movs	r0, #28
 8000876:	f000 fea8 	bl	80015ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800087a:	201c      	movs	r0, #28
 800087c:	f000 fec1 	bl	8001602 <HAL_NVIC_EnableIRQ>
}
 8000880:	bf00      	nop
 8000882:	bd80      	pop	{r7, pc}

08000884 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000888:	4b17      	ldr	r3, [pc, #92]	; (80008e8 <MX_SPI1_Init+0x64>)
 800088a:	4a18      	ldr	r2, [pc, #96]	; (80008ec <MX_SPI1_Init+0x68>)
 800088c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800088e:	4b16      	ldr	r3, [pc, #88]	; (80008e8 <MX_SPI1_Init+0x64>)
 8000890:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000894:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000896:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <MX_SPI1_Init+0x64>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800089c:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <MX_SPI1_Init+0x64>)
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008a2:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <MX_SPI1_Init+0x64>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008a8:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <MX_SPI1_Init+0x64>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008ae:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <MX_SPI1_Init+0x64>)
 80008b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008b4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008b6:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <MX_SPI1_Init+0x64>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008bc:	4b0a      	ldr	r3, [pc, #40]	; (80008e8 <MX_SPI1_Init+0x64>)
 80008be:	2200      	movs	r2, #0
 80008c0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008c2:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <MX_SPI1_Init+0x64>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008c8:	4b07      	ldr	r3, [pc, #28]	; (80008e8 <MX_SPI1_Init+0x64>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008ce:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <MX_SPI1_Init+0x64>)
 80008d0:	220a      	movs	r2, #10
 80008d2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008d4:	4804      	ldr	r0, [pc, #16]	; (80008e8 <MX_SPI1_Init+0x64>)
 80008d6:	f001 fc7d 	bl	80021d4 <HAL_SPI_Init>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80008e0:	f000 f97c 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008e4:	bf00      	nop
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	200000a4 	.word	0x200000a4
 80008ec:	40013000 	.word	0x40013000

080008f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b086      	sub	sp, #24
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008f6:	f107 0308 	add.w	r3, r7, #8
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]
 8000900:	609a      	str	r2, [r3, #8]
 8000902:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000904:	463b      	mov	r3, r7
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800090c:	4b1e      	ldr	r3, [pc, #120]	; (8000988 <MX_TIM2_Init+0x98>)
 800090e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000912:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47999;
 8000914:	4b1c      	ldr	r3, [pc, #112]	; (8000988 <MX_TIM2_Init+0x98>)
 8000916:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 800091a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800091c:	4b1a      	ldr	r3, [pc, #104]	; (8000988 <MX_TIM2_Init+0x98>)
 800091e:	2200      	movs	r2, #0
 8000920:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8000922:	4b19      	ldr	r3, [pc, #100]	; (8000988 <MX_TIM2_Init+0x98>)
 8000924:	f242 720f 	movw	r2, #9999	; 0x270f
 8000928:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800092a:	4b17      	ldr	r3, [pc, #92]	; (8000988 <MX_TIM2_Init+0x98>)
 800092c:	2200      	movs	r2, #0
 800092e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000930:	4b15      	ldr	r3, [pc, #84]	; (8000988 <MX_TIM2_Init+0x98>)
 8000932:	2200      	movs	r2, #0
 8000934:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000936:	4814      	ldr	r0, [pc, #80]	; (8000988 <MX_TIM2_Init+0x98>)
 8000938:	f001 feb2 	bl	80026a0 <HAL_TIM_Base_Init>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000942:	f000 f94b 	bl	8000bdc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000946:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800094a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800094c:	f107 0308 	add.w	r3, r7, #8
 8000950:	4619      	mov	r1, r3
 8000952:	480d      	ldr	r0, [pc, #52]	; (8000988 <MX_TIM2_Init+0x98>)
 8000954:	f002 f84e 	bl	80029f4 <HAL_TIM_ConfigClockSource>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800095e:	f000 f93d 	bl	8000bdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000962:	2300      	movs	r3, #0
 8000964:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000966:	2300      	movs	r3, #0
 8000968:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800096a:	463b      	mov	r3, r7
 800096c:	4619      	mov	r1, r3
 800096e:	4806      	ldr	r0, [pc, #24]	; (8000988 <MX_TIM2_Init+0x98>)
 8000970:	f002 fa20 	bl	8002db4 <HAL_TIMEx_MasterConfigSynchronization>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800097a:	f000 f92f 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800097e:	bf00      	nop
 8000980:	3718      	adds	r7, #24
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	200000fc 	.word	0x200000fc

0800098c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000990:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <MX_USART1_UART_Init+0x4c>)
 8000992:	4a12      	ldr	r2, [pc, #72]	; (80009dc <MX_USART1_UART_Init+0x50>)
 8000994:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000996:	4b10      	ldr	r3, [pc, #64]	; (80009d8 <MX_USART1_UART_Init+0x4c>)
 8000998:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800099c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800099e:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <MX_USART1_UART_Init+0x4c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009a4:	4b0c      	ldr	r3, [pc, #48]	; (80009d8 <MX_USART1_UART_Init+0x4c>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009aa:	4b0b      	ldr	r3, [pc, #44]	; (80009d8 <MX_USART1_UART_Init+0x4c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009b0:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <MX_USART1_UART_Init+0x4c>)
 80009b2:	220c      	movs	r2, #12
 80009b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009b6:	4b08      	ldr	r3, [pc, #32]	; (80009d8 <MX_USART1_UART_Init+0x4c>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009bc:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <MX_USART1_UART_Init+0x4c>)
 80009be:	2200      	movs	r2, #0
 80009c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009c2:	4805      	ldr	r0, [pc, #20]	; (80009d8 <MX_USART1_UART_Init+0x4c>)
 80009c4:	f002 fa66 	bl	8002e94 <HAL_UART_Init>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009ce:	f000 f905 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	20000144 	.word	0x20000144
 80009dc:	40013800 	.word	0x40013800

080009e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009e4:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <MX_USART2_UART_Init+0x4c>)
 80009e6:	4a12      	ldr	r2, [pc, #72]	; (8000a30 <MX_USART2_UART_Init+0x50>)
 80009e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80009ea:	4b10      	ldr	r3, [pc, #64]	; (8000a2c <MX_USART2_UART_Init+0x4c>)
 80009ec:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80009f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009f2:	4b0e      	ldr	r3, [pc, #56]	; (8000a2c <MX_USART2_UART_Init+0x4c>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009f8:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <MX_USART2_UART_Init+0x4c>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009fe:	4b0b      	ldr	r3, [pc, #44]	; (8000a2c <MX_USART2_UART_Init+0x4c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a04:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <MX_USART2_UART_Init+0x4c>)
 8000a06:	220c      	movs	r2, #12
 8000a08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a0a:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <MX_USART2_UART_Init+0x4c>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a10:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <MX_USART2_UART_Init+0x4c>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a16:	4805      	ldr	r0, [pc, #20]	; (8000a2c <MX_USART2_UART_Init+0x4c>)
 8000a18:	f002 fa3c 	bl	8002e94 <HAL_UART_Init>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a22:	f000 f8db 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	20000188 	.word	0x20000188
 8000a30:	40004400 	.word	0x40004400

08000a34 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a38:	4b11      	ldr	r3, [pc, #68]	; (8000a80 <MX_USART3_UART_Init+0x4c>)
 8000a3a:	4a12      	ldr	r2, [pc, #72]	; (8000a84 <MX_USART3_UART_Init+0x50>)
 8000a3c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000a3e:	4b10      	ldr	r3, [pc, #64]	; (8000a80 <MX_USART3_UART_Init+0x4c>)
 8000a40:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a44:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a46:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <MX_USART3_UART_Init+0x4c>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <MX_USART3_UART_Init+0x4c>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a52:	4b0b      	ldr	r3, [pc, #44]	; (8000a80 <MX_USART3_UART_Init+0x4c>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a58:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <MX_USART3_UART_Init+0x4c>)
 8000a5a:	220c      	movs	r2, #12
 8000a5c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a5e:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <MX_USART3_UART_Init+0x4c>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a64:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <MX_USART3_UART_Init+0x4c>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a6a:	4805      	ldr	r0, [pc, #20]	; (8000a80 <MX_USART3_UART_Init+0x4c>)
 8000a6c:	f002 fa12 	bl	8002e94 <HAL_UART_Init>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000a76:	f000 f8b1 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	200001cc 	.word	0x200001cc
 8000a84:	40004800 	.word	0x40004800

08000a88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b088      	sub	sp, #32
 8000a8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8e:	f107 0310 	add.w	r3, r7, #16
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	609a      	str	r2, [r3, #8]
 8000a9a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a9c:	4b37      	ldr	r3, [pc, #220]	; (8000b7c <MX_GPIO_Init+0xf4>)
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	4a36      	ldr	r2, [pc, #216]	; (8000b7c <MX_GPIO_Init+0xf4>)
 8000aa2:	f043 0320 	orr.w	r3, r3, #32
 8000aa6:	6193      	str	r3, [r2, #24]
 8000aa8:	4b34      	ldr	r3, [pc, #208]	; (8000b7c <MX_GPIO_Init+0xf4>)
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	f003 0320 	and.w	r3, r3, #32
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab4:	4b31      	ldr	r3, [pc, #196]	; (8000b7c <MX_GPIO_Init+0xf4>)
 8000ab6:	699b      	ldr	r3, [r3, #24]
 8000ab8:	4a30      	ldr	r2, [pc, #192]	; (8000b7c <MX_GPIO_Init+0xf4>)
 8000aba:	f043 0304 	orr.w	r3, r3, #4
 8000abe:	6193      	str	r3, [r2, #24]
 8000ac0:	4b2e      	ldr	r3, [pc, #184]	; (8000b7c <MX_GPIO_Init+0xf4>)
 8000ac2:	699b      	ldr	r3, [r3, #24]
 8000ac4:	f003 0304 	and.w	r3, r3, #4
 8000ac8:	60bb      	str	r3, [r7, #8]
 8000aca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000acc:	4b2b      	ldr	r3, [pc, #172]	; (8000b7c <MX_GPIO_Init+0xf4>)
 8000ace:	699b      	ldr	r3, [r3, #24]
 8000ad0:	4a2a      	ldr	r2, [pc, #168]	; (8000b7c <MX_GPIO_Init+0xf4>)
 8000ad2:	f043 0308 	orr.w	r3, r3, #8
 8000ad6:	6193      	str	r3, [r2, #24]
 8000ad8:	4b28      	ldr	r3, [pc, #160]	; (8000b7c <MX_GPIO_Init+0xf4>)
 8000ada:	699b      	ldr	r3, [r3, #24]
 8000adc:	f003 0308 	and.w	r3, r3, #8
 8000ae0:	607b      	str	r3, [r7, #4]
 8000ae2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OLED_RST_Pin|OLED_DC_Pin, GPIO_PIN_SET);
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	2150      	movs	r1, #80	; 0x50
 8000ae8:	4825      	ldr	r0, [pc, #148]	; (8000b80 <MX_GPIO_Init+0xf8>)
 8000aea:	f000 ff29 	bl	8001940 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, GPIO_PIN_SET);
 8000aee:	2201      	movs	r2, #1
 8000af0:	2101      	movs	r1, #1
 8000af2:	4824      	ldr	r0, [pc, #144]	; (8000b84 <MX_GPIO_Init+0xfc>)
 8000af4:	f000 ff24 	bl	8001940 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000af8:	2200      	movs	r2, #0
 8000afa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000afe:	4821      	ldr	r0, [pc, #132]	; (8000b84 <MX_GPIO_Init+0xfc>)
 8000b00:	f000 ff1e 	bl	8001940 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : btn0_Pin */
  GPIO_InitStruct.Pin = btn0_Pin;
 8000b04:	2301      	movs	r3, #1
 8000b06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b08:	4b1f      	ldr	r3, [pc, #124]	; (8000b88 <MX_GPIO_Init+0x100>)
 8000b0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(btn0_GPIO_Port, &GPIO_InitStruct);
 8000b10:	f107 0310 	add.w	r3, r7, #16
 8000b14:	4619      	mov	r1, r3
 8000b16:	481a      	ldr	r0, [pc, #104]	; (8000b80 <MX_GPIO_Init+0xf8>)
 8000b18:	f000 fd8e 	bl	8001638 <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_RST_Pin OLED_DC_Pin */
  GPIO_InitStruct.Pin = OLED_RST_Pin|OLED_DC_Pin;
 8000b1c:	2350      	movs	r3, #80	; 0x50
 8000b1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b20:	2301      	movs	r3, #1
 8000b22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b24:	2301      	movs	r3, #1
 8000b26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b28:	2303      	movs	r3, #3
 8000b2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2c:	f107 0310 	add.w	r3, r7, #16
 8000b30:	4619      	mov	r1, r3
 8000b32:	4813      	ldr	r0, [pc, #76]	; (8000b80 <MX_GPIO_Init+0xf8>)
 8000b34:	f000 fd80 	bl	8001638 <HAL_GPIO_Init>

  /*Configure GPIO pin : OLED_CS_Pin */
  GPIO_InitStruct.Pin = OLED_CS_Pin;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b40:	2301      	movs	r3, #1
 8000b42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b44:	2303      	movs	r3, #3
 8000b46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OLED_CS_GPIO_Port, &GPIO_InitStruct);
 8000b48:	f107 0310 	add.w	r3, r7, #16
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	480d      	ldr	r0, [pc, #52]	; (8000b84 <MX_GPIO_Init+0xfc>)
 8000b50:	f000 fd72 	bl	8001638 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000b54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b62:	2302      	movs	r3, #2
 8000b64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b66:	f107 0310 	add.w	r3, r7, #16
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4805      	ldr	r0, [pc, #20]	; (8000b84 <MX_GPIO_Init+0xfc>)
 8000b6e:	f000 fd63 	bl	8001638 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b72:	bf00      	nop
 8000b74:	3720      	adds	r7, #32
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40021000 	.word	0x40021000
 8000b80:	40010800 	.word	0x40010800
 8000b84:	40010c00 	.word	0x40010c00
 8000b88:	10210000 	.word	0x10210000

08000b8c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
//GPIO PIN OUTPUT HIGH
	if (htim->Instance == htim2.Instance) {
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	4b05      	ldr	r3, [pc, #20]	; (8000bb0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	d102      	bne.n	8000ba6 <HAL_TIM_PeriodElapsedCallback+0x1a>
		timerFlag = 1;
 8000ba0:	4b04      	ldr	r3, [pc, #16]	; (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	701a      	strb	r2, [r3, #0]

	}
}
 8000ba6:	bf00      	nop
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bc80      	pop	{r7}
 8000bae:	4770      	bx	lr
 8000bb0:	200000fc 	.word	0x200000fc
 8000bb4:	20000249 	.word	0x20000249

08000bb8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == btn0_Pin) {
 8000bc2:	88fb      	ldrh	r3, [r7, #6]
 8000bc4:	2b01      	cmp	r3, #1
 8000bc6:	d102      	bne.n	8000bce <HAL_GPIO_EXTI_Callback+0x16>

		btnFlag = 1;
 8000bc8:	4b03      	ldr	r3, [pc, #12]	; (8000bd8 <HAL_GPIO_EXTI_Callback+0x20>)
 8000bca:	2201      	movs	r2, #1
 8000bcc:	701a      	strb	r2, [r3, #0]

	}
}
 8000bce:	bf00      	nop
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bc80      	pop	{r7}
 8000bd6:	4770      	bx	lr
 8000bd8:	20000248 	.word	0x20000248

08000bdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be0:	b672      	cpsid	i
}
 8000be2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000be4:	e7fe      	b.n	8000be4 <Error_Handler+0x8>
	...

08000be8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b085      	sub	sp, #20
 8000bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bee:	4b15      	ldr	r3, [pc, #84]	; (8000c44 <HAL_MspInit+0x5c>)
 8000bf0:	699b      	ldr	r3, [r3, #24]
 8000bf2:	4a14      	ldr	r2, [pc, #80]	; (8000c44 <HAL_MspInit+0x5c>)
 8000bf4:	f043 0301 	orr.w	r3, r3, #1
 8000bf8:	6193      	str	r3, [r2, #24]
 8000bfa:	4b12      	ldr	r3, [pc, #72]	; (8000c44 <HAL_MspInit+0x5c>)
 8000bfc:	699b      	ldr	r3, [r3, #24]
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	60bb      	str	r3, [r7, #8]
 8000c04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c06:	4b0f      	ldr	r3, [pc, #60]	; (8000c44 <HAL_MspInit+0x5c>)
 8000c08:	69db      	ldr	r3, [r3, #28]
 8000c0a:	4a0e      	ldr	r2, [pc, #56]	; (8000c44 <HAL_MspInit+0x5c>)
 8000c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c10:	61d3      	str	r3, [r2, #28]
 8000c12:	4b0c      	ldr	r3, [pc, #48]	; (8000c44 <HAL_MspInit+0x5c>)
 8000c14:	69db      	ldr	r3, [r3, #28]
 8000c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c1a:	607b      	str	r3, [r7, #4]
 8000c1c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c1e:	4b0a      	ldr	r3, [pc, #40]	; (8000c48 <HAL_MspInit+0x60>)
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	4a04      	ldr	r2, [pc, #16]	; (8000c48 <HAL_MspInit+0x60>)
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	3714      	adds	r7, #20
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bc80      	pop	{r7}
 8000c42:	4770      	bx	lr
 8000c44:	40021000 	.word	0x40021000
 8000c48:	40010000 	.word	0x40010000

08000c4c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b088      	sub	sp, #32
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c54:	f107 0310 	add.w	r3, r7, #16
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a15      	ldr	r2, [pc, #84]	; (8000cbc <HAL_SPI_MspInit+0x70>)
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d123      	bne.n	8000cb4 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c6c:	4b14      	ldr	r3, [pc, #80]	; (8000cc0 <HAL_SPI_MspInit+0x74>)
 8000c6e:	699b      	ldr	r3, [r3, #24]
 8000c70:	4a13      	ldr	r2, [pc, #76]	; (8000cc0 <HAL_SPI_MspInit+0x74>)
 8000c72:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c76:	6193      	str	r3, [r2, #24]
 8000c78:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <HAL_SPI_MspInit+0x74>)
 8000c7a:	699b      	ldr	r3, [r3, #24]
 8000c7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c80:	60fb      	str	r3, [r7, #12]
 8000c82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c84:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <HAL_SPI_MspInit+0x74>)
 8000c86:	699b      	ldr	r3, [r3, #24]
 8000c88:	4a0d      	ldr	r2, [pc, #52]	; (8000cc0 <HAL_SPI_MspInit+0x74>)
 8000c8a:	f043 0304 	orr.w	r3, r3, #4
 8000c8e:	6193      	str	r3, [r2, #24]
 8000c90:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <HAL_SPI_MspInit+0x74>)
 8000c92:	699b      	ldr	r3, [r3, #24]
 8000c94:	f003 0304 	and.w	r3, r3, #4
 8000c98:	60bb      	str	r3, [r7, #8]
 8000c9a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000c9c:	23a0      	movs	r3, #160	; 0xa0
 8000c9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ca4:	2303      	movs	r3, #3
 8000ca6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca8:	f107 0310 	add.w	r3, r7, #16
 8000cac:	4619      	mov	r1, r3
 8000cae:	4805      	ldr	r0, [pc, #20]	; (8000cc4 <HAL_SPI_MspInit+0x78>)
 8000cb0:	f000 fcc2 	bl	8001638 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000cb4:	bf00      	nop
 8000cb6:	3720      	adds	r7, #32
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	40013000 	.word	0x40013000
 8000cc0:	40021000 	.word	0x40021000
 8000cc4:	40010800 	.word	0x40010800

08000cc8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b085      	sub	sp, #20
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cd8:	d10b      	bne.n	8000cf2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cda:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <HAL_TIM_Base_MspInit+0x34>)
 8000cdc:	69db      	ldr	r3, [r3, #28]
 8000cde:	4a07      	ldr	r2, [pc, #28]	; (8000cfc <HAL_TIM_Base_MspInit+0x34>)
 8000ce0:	f043 0301 	orr.w	r3, r3, #1
 8000ce4:	61d3      	str	r3, [r2, #28]
 8000ce6:	4b05      	ldr	r3, [pc, #20]	; (8000cfc <HAL_TIM_Base_MspInit+0x34>)
 8000ce8:	69db      	ldr	r3, [r3, #28]
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000cf2:	bf00      	nop
 8000cf4:	3714      	adds	r7, #20
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bc80      	pop	{r7}
 8000cfa:	4770      	bx	lr
 8000cfc:	40021000 	.word	0x40021000

08000d00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08c      	sub	sp, #48	; 0x30
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d08:	f107 0320 	add.w	r3, r7, #32
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]
 8000d14:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4a53      	ldr	r2, [pc, #332]	; (8000e68 <HAL_UART_MspInit+0x168>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d132      	bne.n	8000d86 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d20:	4b52      	ldr	r3, [pc, #328]	; (8000e6c <HAL_UART_MspInit+0x16c>)
 8000d22:	699b      	ldr	r3, [r3, #24]
 8000d24:	4a51      	ldr	r2, [pc, #324]	; (8000e6c <HAL_UART_MspInit+0x16c>)
 8000d26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d2a:	6193      	str	r3, [r2, #24]
 8000d2c:	4b4f      	ldr	r3, [pc, #316]	; (8000e6c <HAL_UART_MspInit+0x16c>)
 8000d2e:	699b      	ldr	r3, [r3, #24]
 8000d30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d34:	61fb      	str	r3, [r7, #28]
 8000d36:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d38:	4b4c      	ldr	r3, [pc, #304]	; (8000e6c <HAL_UART_MspInit+0x16c>)
 8000d3a:	699b      	ldr	r3, [r3, #24]
 8000d3c:	4a4b      	ldr	r2, [pc, #300]	; (8000e6c <HAL_UART_MspInit+0x16c>)
 8000d3e:	f043 0304 	orr.w	r3, r3, #4
 8000d42:	6193      	str	r3, [r2, #24]
 8000d44:	4b49      	ldr	r3, [pc, #292]	; (8000e6c <HAL_UART_MspInit+0x16c>)
 8000d46:	699b      	ldr	r3, [r3, #24]
 8000d48:	f003 0304 	and.w	r3, r3, #4
 8000d4c:	61bb      	str	r3, [r7, #24]
 8000d4e:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d56:	2302      	movs	r3, #2
 8000d58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d5a:	2303      	movs	r3, #3
 8000d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d5e:	f107 0320 	add.w	r3, r7, #32
 8000d62:	4619      	mov	r1, r3
 8000d64:	4842      	ldr	r0, [pc, #264]	; (8000e70 <HAL_UART_MspInit+0x170>)
 8000d66:	f000 fc67 	bl	8001638 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d70:	2300      	movs	r3, #0
 8000d72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d78:	f107 0320 	add.w	r3, r7, #32
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	483c      	ldr	r0, [pc, #240]	; (8000e70 <HAL_UART_MspInit+0x170>)
 8000d80:	f000 fc5a 	bl	8001638 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d84:	e06c      	b.n	8000e60 <HAL_UART_MspInit+0x160>
  else if(huart->Instance==USART2)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a3a      	ldr	r2, [pc, #232]	; (8000e74 <HAL_UART_MspInit+0x174>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d130      	bne.n	8000df2 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d90:	4b36      	ldr	r3, [pc, #216]	; (8000e6c <HAL_UART_MspInit+0x16c>)
 8000d92:	69db      	ldr	r3, [r3, #28]
 8000d94:	4a35      	ldr	r2, [pc, #212]	; (8000e6c <HAL_UART_MspInit+0x16c>)
 8000d96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d9a:	61d3      	str	r3, [r2, #28]
 8000d9c:	4b33      	ldr	r3, [pc, #204]	; (8000e6c <HAL_UART_MspInit+0x16c>)
 8000d9e:	69db      	ldr	r3, [r3, #28]
 8000da0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000da4:	617b      	str	r3, [r7, #20]
 8000da6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da8:	4b30      	ldr	r3, [pc, #192]	; (8000e6c <HAL_UART_MspInit+0x16c>)
 8000daa:	699b      	ldr	r3, [r3, #24]
 8000dac:	4a2f      	ldr	r2, [pc, #188]	; (8000e6c <HAL_UART_MspInit+0x16c>)
 8000dae:	f043 0304 	orr.w	r3, r3, #4
 8000db2:	6193      	str	r3, [r2, #24]
 8000db4:	4b2d      	ldr	r3, [pc, #180]	; (8000e6c <HAL_UART_MspInit+0x16c>)
 8000db6:	699b      	ldr	r3, [r3, #24]
 8000db8:	f003 0304 	and.w	r3, r3, #4
 8000dbc:	613b      	str	r3, [r7, #16]
 8000dbe:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000dc0:	2304      	movs	r3, #4
 8000dc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dc8:	2303      	movs	r3, #3
 8000dca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dcc:	f107 0320 	add.w	r3, r7, #32
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4827      	ldr	r0, [pc, #156]	; (8000e70 <HAL_UART_MspInit+0x170>)
 8000dd4:	f000 fc30 	bl	8001638 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000dd8:	2308      	movs	r3, #8
 8000dda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de4:	f107 0320 	add.w	r3, r7, #32
 8000de8:	4619      	mov	r1, r3
 8000dea:	4821      	ldr	r0, [pc, #132]	; (8000e70 <HAL_UART_MspInit+0x170>)
 8000dec:	f000 fc24 	bl	8001638 <HAL_GPIO_Init>
}
 8000df0:	e036      	b.n	8000e60 <HAL_UART_MspInit+0x160>
  else if(huart->Instance==USART3)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a20      	ldr	r2, [pc, #128]	; (8000e78 <HAL_UART_MspInit+0x178>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d131      	bne.n	8000e60 <HAL_UART_MspInit+0x160>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000dfc:	4b1b      	ldr	r3, [pc, #108]	; (8000e6c <HAL_UART_MspInit+0x16c>)
 8000dfe:	69db      	ldr	r3, [r3, #28]
 8000e00:	4a1a      	ldr	r2, [pc, #104]	; (8000e6c <HAL_UART_MspInit+0x16c>)
 8000e02:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e06:	61d3      	str	r3, [r2, #28]
 8000e08:	4b18      	ldr	r3, [pc, #96]	; (8000e6c <HAL_UART_MspInit+0x16c>)
 8000e0a:	69db      	ldr	r3, [r3, #28]
 8000e0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e10:	60fb      	str	r3, [r7, #12]
 8000e12:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e14:	4b15      	ldr	r3, [pc, #84]	; (8000e6c <HAL_UART_MspInit+0x16c>)
 8000e16:	699b      	ldr	r3, [r3, #24]
 8000e18:	4a14      	ldr	r2, [pc, #80]	; (8000e6c <HAL_UART_MspInit+0x16c>)
 8000e1a:	f043 0308 	orr.w	r3, r3, #8
 8000e1e:	6193      	str	r3, [r2, #24]
 8000e20:	4b12      	ldr	r3, [pc, #72]	; (8000e6c <HAL_UART_MspInit+0x16c>)
 8000e22:	699b      	ldr	r3, [r3, #24]
 8000e24:	f003 0308 	and.w	r3, r3, #8
 8000e28:	60bb      	str	r3, [r7, #8]
 8000e2a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e32:	2302      	movs	r3, #2
 8000e34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e36:	2303      	movs	r3, #3
 8000e38:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e3a:	f107 0320 	add.w	r3, r7, #32
 8000e3e:	4619      	mov	r1, r3
 8000e40:	480e      	ldr	r0, [pc, #56]	; (8000e7c <HAL_UART_MspInit+0x17c>)
 8000e42:	f000 fbf9 	bl	8001638 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000e46:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e54:	f107 0320 	add.w	r3, r7, #32
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4808      	ldr	r0, [pc, #32]	; (8000e7c <HAL_UART_MspInit+0x17c>)
 8000e5c:	f000 fbec 	bl	8001638 <HAL_GPIO_Init>
}
 8000e60:	bf00      	nop
 8000e62:	3730      	adds	r7, #48	; 0x30
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	40013800 	.word	0x40013800
 8000e6c:	40021000 	.word	0x40021000
 8000e70:	40010800 	.word	0x40010800
 8000e74:	40004400 	.word	0x40004400
 8000e78:	40004800 	.word	0x40004800
 8000e7c:	40010c00 	.word	0x40010c00

08000e80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e84:	e7fe      	b.n	8000e84 <NMI_Handler+0x4>

08000e86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e8a:	e7fe      	b.n	8000e8a <HardFault_Handler+0x4>

08000e8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e90:	e7fe      	b.n	8000e90 <MemManage_Handler+0x4>

08000e92 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e96:	e7fe      	b.n	8000e96 <BusFault_Handler+0x4>

08000e98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e9c:	e7fe      	b.n	8000e9c <UsageFault_Handler+0x4>

08000e9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bc80      	pop	{r7}
 8000ea8:	4770      	bx	lr

08000eaa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bc80      	pop	{r7}
 8000eb4:	4770      	bx	lr

08000eb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bc80      	pop	{r7}
 8000ec0:	4770      	bx	lr

08000ec2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ec6:	f000 fa69 	bl	800139c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(btn0_Pin);
 8000ed2:	2001      	movs	r0, #1
 8000ed4:	f000 fd4c 	bl	8001970 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000ed8:	bf00      	nop
 8000eda:	bd80      	pop	{r7, pc}

08000edc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ee0:	4802      	ldr	r0, [pc, #8]	; (8000eec <TIM2_IRQHandler+0x10>)
 8000ee2:	f001 fc7f 	bl	80027e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	200000fc 	.word	0x200000fc

08000ef0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
Uart_isr(&huart2);
 8000ef4:	4802      	ldr	r0, [pc, #8]	; (8000f00 <USART2_IRQHandler+0x10>)
 8000ef6:	f000 f9bd 	bl	8001274 <Uart_isr>
  /* USER CODE END USART2_IRQn 0 */
//  HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20000188 	.word	0x20000188

08000f04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b086      	sub	sp, #24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f0c:	4a14      	ldr	r2, [pc, #80]	; (8000f60 <_sbrk+0x5c>)
 8000f0e:	4b15      	ldr	r3, [pc, #84]	; (8000f64 <_sbrk+0x60>)
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f18:	4b13      	ldr	r3, [pc, #76]	; (8000f68 <_sbrk+0x64>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d102      	bne.n	8000f26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f20:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <_sbrk+0x64>)
 8000f22:	4a12      	ldr	r2, [pc, #72]	; (8000f6c <_sbrk+0x68>)
 8000f24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f26:	4b10      	ldr	r3, [pc, #64]	; (8000f68 <_sbrk+0x64>)
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d207      	bcs.n	8000f44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f34:	f003 fe94 	bl	8004c60 <__errno>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	220c      	movs	r2, #12
 8000f3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f42:	e009      	b.n	8000f58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f44:	4b08      	ldr	r3, [pc, #32]	; (8000f68 <_sbrk+0x64>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f4a:	4b07      	ldr	r3, [pc, #28]	; (8000f68 <_sbrk+0x64>)
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4413      	add	r3, r2
 8000f52:	4a05      	ldr	r2, [pc, #20]	; (8000f68 <_sbrk+0x64>)
 8000f54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f56:	68fb      	ldr	r3, [r7, #12]
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3718      	adds	r7, #24
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20005000 	.word	0x20005000
 8000f64:	00000400 	.word	0x00000400
 8000f68:	200002e0 	.word	0x200002e0
 8000f6c:	20000738 	.word	0x20000738

08000f70 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bc80      	pop	{r7}
 8000f7a:	4770      	bx	lr

08000f7c <u8x8_stm32_gpio_and_delay>:
#define TX_TIMEOUT		100

extern SPI_HandleTypeDef hspi1;

uint8_t u8x8_stm32_gpio_and_delay(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	607b      	str	r3, [r7, #4]
 8000f86:	460b      	mov	r3, r1
 8000f88:	72fb      	strb	r3, [r7, #11]
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	72bb      	strb	r3, [r7, #10]
	/* STM32 supports HW SPI, Remove unused cases like U8X8_MSG_DELAY_XXX & U8X8_MSG_GPIO_XXX */
	switch(msg)
 8000f8e:	7afb      	ldrb	r3, [r7, #11]
 8000f90:	3b28      	subs	r3, #40	; 0x28
 8000f92:	2b23      	cmp	r3, #35	; 0x23
 8000f94:	d864      	bhi.n	8001060 <u8x8_stm32_gpio_and_delay+0xe4>
 8000f96:	a201      	add	r2, pc, #4	; (adr r2, 8000f9c <u8x8_stm32_gpio_and_delay+0x20>)
 8000f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f9c:	08001061 	.word	0x08001061
 8000fa0:	0800102d 	.word	0x0800102d
 8000fa4:	08001061 	.word	0x08001061
 8000fa8:	08001061 	.word	0x08001061
 8000fac:	08001061 	.word	0x08001061
 8000fb0:	08001061 	.word	0x08001061
 8000fb4:	08001061 	.word	0x08001061
 8000fb8:	08001061 	.word	0x08001061
 8000fbc:	08001061 	.word	0x08001061
 8000fc0:	08001061 	.word	0x08001061
 8000fc4:	08001061 	.word	0x08001061
 8000fc8:	08001061 	.word	0x08001061
 8000fcc:	08001061 	.word	0x08001061
 8000fd0:	08001061 	.word	0x08001061
 8000fd4:	08001061 	.word	0x08001061
 8000fd8:	08001061 	.word	0x08001061
 8000fdc:	08001061 	.word	0x08001061
 8000fe0:	08001061 	.word	0x08001061
 8000fe4:	08001061 	.word	0x08001061
 8000fe8:	08001061 	.word	0x08001061
 8000fec:	08001061 	.word	0x08001061
 8000ff0:	08001061 	.word	0x08001061
 8000ff4:	08001061 	.word	0x08001061
 8000ff8:	08001061 	.word	0x08001061
 8000ffc:	08001061 	.word	0x08001061
 8001000:	08001061 	.word	0x08001061
 8001004:	08001061 	.word	0x08001061
 8001008:	08001061 	.word	0x08001061
 800100c:	08001061 	.word	0x08001061
 8001010:	08001061 	.word	0x08001061
 8001014:	08001061 	.word	0x08001061
 8001018:	08001061 	.word	0x08001061
 800101c:	08001061 	.word	0x08001061
 8001020:	08001037 	.word	0x08001037
 8001024:	08001045 	.word	0x08001045
 8001028:	08001053 	.word	0x08001053
	case U8X8_MSG_GPIO_AND_DELAY_INIT:
		/* Insert codes for initialization */
		break;
	case U8X8_MSG_DELAY_MILLI:
		/* ms Delay */
		HAL_Delay(arg_int);
 800102c:	7abb      	ldrb	r3, [r7, #10]
 800102e:	4618      	mov	r0, r3
 8001030:	f000 f9d0 	bl	80013d4 <HAL_Delay>
		break;
 8001034:	e014      	b.n	8001060 <u8x8_stm32_gpio_and_delay+0xe4>
	case U8X8_MSG_GPIO_CS:
		/* Insert codes for SS pin control */
		HAL_GPIO_WritePin(OLED_CS_GPIO_Port, OLED_CS_Pin, arg_int);
 8001036:	7abb      	ldrb	r3, [r7, #10]
 8001038:	461a      	mov	r2, r3
 800103a:	2101      	movs	r1, #1
 800103c:	480b      	ldr	r0, [pc, #44]	; (800106c <u8x8_stm32_gpio_and_delay+0xf0>)
 800103e:	f000 fc7f 	bl	8001940 <HAL_GPIO_WritePin>
		break;
 8001042:	e00d      	b.n	8001060 <u8x8_stm32_gpio_and_delay+0xe4>
	case U8X8_MSG_GPIO_DC:
		/* Insert codes for DC pin control */
		HAL_GPIO_WritePin(OLED_DC_GPIO_Port, OLED_DC_Pin, arg_int);
 8001044:	7abb      	ldrb	r3, [r7, #10]
 8001046:	461a      	mov	r2, r3
 8001048:	2140      	movs	r1, #64	; 0x40
 800104a:	4809      	ldr	r0, [pc, #36]	; (8001070 <u8x8_stm32_gpio_and_delay+0xf4>)
 800104c:	f000 fc78 	bl	8001940 <HAL_GPIO_WritePin>
		break;
 8001050:	e006      	b.n	8001060 <u8x8_stm32_gpio_and_delay+0xe4>
	case U8X8_MSG_GPIO_RESET:
		/* Insert codes for RST pin control */
		HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, arg_int);
 8001052:	7abb      	ldrb	r3, [r7, #10]
 8001054:	461a      	mov	r2, r3
 8001056:	2110      	movs	r1, #16
 8001058:	4805      	ldr	r0, [pc, #20]	; (8001070 <u8x8_stm32_gpio_and_delay+0xf4>)
 800105a:	f000 fc71 	bl	8001940 <HAL_GPIO_WritePin>
		break;
 800105e:	bf00      	nop
	}
	return 1;
 8001060:	2301      	movs	r3, #1
}
 8001062:	4618      	mov	r0, r3
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40010c00 	.word	0x40010c00
 8001070:	40010800 	.word	0x40010800

08001074 <u8x8_byte_stm32_hw_spi>:

uint8_t u8x8_byte_stm32_hw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	607b      	str	r3, [r7, #4]
 800107e:	460b      	mov	r3, r1
 8001080:	72fb      	strb	r3, [r7, #11]
 8001082:	4613      	mov	r3, r2
 8001084:	72bb      	strb	r3, [r7, #10]
	switch(msg) {
 8001086:	7afb      	ldrb	r3, [r7, #11]
 8001088:	3b14      	subs	r3, #20
 800108a:	2b0c      	cmp	r3, #12
 800108c:	d847      	bhi.n	800111e <u8x8_byte_stm32_hw_spi+0xaa>
 800108e:	a201      	add	r2, pc, #4	; (adr r2, 8001094 <u8x8_byte_stm32_hw_spi+0x20>)
 8001090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001094:	08001123 	.word	0x08001123
 8001098:	0800111f 	.word	0x0800111f
 800109c:	0800111f 	.word	0x0800111f
 80010a0:	080010c9 	.word	0x080010c9
 80010a4:	080010ef 	.word	0x080010ef
 80010a8:	08001107 	.word	0x08001107
 80010ac:	0800111f 	.word	0x0800111f
 80010b0:	0800111f 	.word	0x0800111f
 80010b4:	0800111f 	.word	0x0800111f
 80010b8:	0800111f 	.word	0x0800111f
 80010bc:	0800111f 	.word	0x0800111f
 80010c0:	0800111f 	.word	0x0800111f
 80010c4:	080010e1 	.word	0x080010e1
	case U8X8_MSG_BYTE_SEND:
		/* Insert codes to transmit data */
		if(HAL_SPI_Transmit(&hspi1, arg_ptr, arg_int, TX_TIMEOUT) != HAL_OK) return 0;
 80010c8:	7abb      	ldrb	r3, [r7, #10]
 80010ca:	b29a      	uxth	r2, r3
 80010cc:	2364      	movs	r3, #100	; 0x64
 80010ce:	6879      	ldr	r1, [r7, #4]
 80010d0:	4818      	ldr	r0, [pc, #96]	; (8001134 <u8x8_byte_stm32_hw_spi+0xc0>)
 80010d2:	f001 f903 	bl	80022dc <HAL_SPI_Transmit>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d024      	beq.n	8001126 <u8x8_byte_stm32_hw_spi+0xb2>
 80010dc:	2300      	movs	r3, #0
 80010de:	e024      	b.n	800112a <u8x8_byte_stm32_hw_spi+0xb6>
	case U8X8_MSG_BYTE_INIT:
		/* Insert codes to begin SPI transmission */
		break;
	case U8X8_MSG_BYTE_SET_DC:
		/* Control DC pin, U8X8_MSG_GPIO_DC will be called */
		u8x8_gpio_SetDC(u8x8, arg_int);
 80010e0:	7abb      	ldrb	r3, [r7, #10]
 80010e2:	461a      	mov	r2, r3
 80010e4:	214a      	movs	r1, #74	; 0x4a
 80010e6:	68f8      	ldr	r0, [r7, #12]
 80010e8:	f003 fd4c 	bl	8004b84 <u8x8_gpio_call>
		break;
 80010ec:	e01c      	b.n	8001128 <u8x8_byte_stm32_hw_spi+0xb4>
	case U8X8_MSG_BYTE_START_TRANSFER:
		/* Select slave, U8X8_MSG_GPIO_CS will be called */
		u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_enable_level);
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	461a      	mov	r2, r3
 80010f6:	2149      	movs	r1, #73	; 0x49
 80010f8:	68f8      	ldr	r0, [r7, #12]
 80010fa:	f003 fd43 	bl	8004b84 <u8x8_gpio_call>
		HAL_Delay(1);
 80010fe:	2001      	movs	r0, #1
 8001100:	f000 f968 	bl	80013d4 <HAL_Delay>
		break;
 8001104:	e010      	b.n	8001128 <u8x8_byte_stm32_hw_spi+0xb4>
	case U8X8_MSG_BYTE_END_TRANSFER:
		HAL_Delay(1);
 8001106:	2001      	movs	r0, #1
 8001108:	f000 f964 	bl	80013d4 <HAL_Delay>
		/* Insert codes to end SPI transmission */
		u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	785b      	ldrb	r3, [r3, #1]
 8001112:	461a      	mov	r2, r3
 8001114:	2149      	movs	r1, #73	; 0x49
 8001116:	68f8      	ldr	r0, [r7, #12]
 8001118:	f003 fd34 	bl	8004b84 <u8x8_gpio_call>
		break;
 800111c:	e004      	b.n	8001128 <u8x8_byte_stm32_hw_spi+0xb4>
	default:
		return 0;
 800111e:	2300      	movs	r3, #0
 8001120:	e003      	b.n	800112a <u8x8_byte_stm32_hw_spi+0xb6>
		break;
 8001122:	bf00      	nop
 8001124:	e000      	b.n	8001128 <u8x8_byte_stm32_hw_spi+0xb4>
		break;
 8001126:	bf00      	nop
	}
	return 1;
 8001128:	2301      	movs	r3, #1
}
 800112a:	4618      	mov	r0, r3
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	200000a4 	.word	0x200000a4

08001138 <rxBufferInit>:
#include "uart.h"

ring_buffer_t uart_rx={{0},0,0};
extern UART_HandleTypeDef huart2;

void rxBufferInit(ring_buffer_t *uart) {
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
	uart->head = 0;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2200      	movs	r2, #0
 8001144:	871a      	strh	r2, [r3, #56]	; 0x38
	uart->tail = 0;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2200      	movs	r2, #0
 800114a:	875a      	strh	r2, [r3, #58]	; 0x3a
	memset(uart->buffer, 0, sizeof(RX_BUFFER_SIZE));
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2204      	movs	r2, #4
 8001150:	2100      	movs	r1, #0
 8001152:	4618      	mov	r0, r3
 8001154:	f003 fdae 	bl	8004cb4 <memset>
}
 8001158:	bf00      	nop
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <push>:

void push(ring_buffer_t *uart, uint8_t ch) {
 8001160:	b480      	push	{r7}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	460b      	mov	r3, r1
 800116a:	70fb      	strb	r3, [r7, #3]
	uint16_t i = (unsigned int) (uart->head + 1) % RX_BUFFER_SIZE;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001170:	b29b      	uxth	r3, r3
 8001172:	3301      	adds	r3, #1
 8001174:	4619      	mov	r1, r3
 8001176:	4b12      	ldr	r3, [pc, #72]	; (80011c0 <push+0x60>)
 8001178:	fba3 2301 	umull	r2, r3, r3, r1
 800117c:	1aca      	subs	r2, r1, r3
 800117e:	0852      	lsrs	r2, r2, #1
 8001180:	4413      	add	r3, r2
 8001182:	095a      	lsrs	r2, r3, #5
 8001184:	4613      	mov	r3, r2
 8001186:	00db      	lsls	r3, r3, #3
 8001188:	1a9b      	subs	r3, r3, r2
 800118a:	00db      	lsls	r3, r3, #3
 800118c:	1a9b      	subs	r3, r3, r2
 800118e:	1aca      	subs	r2, r1, r3
 8001190:	4613      	mov	r3, r2
 8001192:	81fb      	strh	r3, [r7, #14]
	if (i != uart->tail) {
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8001198:	b29b      	uxth	r3, r3
 800119a:	89fa      	ldrh	r2, [r7, #14]
 800119c:	429a      	cmp	r2, r3
 800119e:	d009      	beq.n	80011b4 <push+0x54>
		uart->buffer[uart->head] = ch;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	4619      	mov	r1, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	78fa      	ldrb	r2, [r7, #3]
 80011ac:	545a      	strb	r2, [r3, r1]
		uart->head = i;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	89fa      	ldrh	r2, [r7, #14]
 80011b2:	871a      	strh	r2, [r3, #56]	; 0x38
	}
}
 80011b4:	bf00      	nop
 80011b6:	3714      	adds	r7, #20
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bc80      	pop	{r7}
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	29e4129f 	.word	0x29e4129f

080011c4 <pop>:

uint8_t pop(ring_buffer_t *uart) {
 80011c4:	b480      	push	{r7}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]

	if (uart->head == uart->tail) {
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80011d0:	b29a      	uxth	r2, r3
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	429a      	cmp	r2, r3
 80011da:	d101      	bne.n	80011e0 <pop+0x1c>
		return -1;
 80011dc:	23ff      	movs	r3, #255	; 0xff
 80011de:	e01c      	b.n	800121a <pop+0x56>
	} else {

		unsigned char cpop = uart->buffer[uart->tail];
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80011e4:	b29b      	uxth	r3, r3
 80011e6:	461a      	mov	r2, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	5c9b      	ldrb	r3, [r3, r2]
 80011ec:	73fb      	strb	r3, [r7, #15]
		uart->tail = (uint16_t) (uart->tail + 1) % RX_BUFFER_SIZE;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	3301      	adds	r3, #1
 80011f6:	b29a      	uxth	r2, r3
 80011f8:	4b0a      	ldr	r3, [pc, #40]	; (8001224 <pop+0x60>)
 80011fa:	fba3 1302 	umull	r1, r3, r3, r2
 80011fe:	1ad1      	subs	r1, r2, r3
 8001200:	0849      	lsrs	r1, r1, #1
 8001202:	440b      	add	r3, r1
 8001204:	0959      	lsrs	r1, r3, #5
 8001206:	460b      	mov	r3, r1
 8001208:	00db      	lsls	r3, r3, #3
 800120a:	1a5b      	subs	r3, r3, r1
 800120c:	00db      	lsls	r3, r3, #3
 800120e:	1a5b      	subs	r3, r3, r1
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	b29a      	uxth	r2, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	875a      	strh	r2, [r3, #58]	; 0x3a

		return cpop;
 8001218:	7bfb      	ldrb	r3, [r7, #15]

	}
}
 800121a:	4618      	mov	r0, r3
 800121c:	3714      	adds	r7, #20
 800121e:	46bd      	mov	sp, r7
 8001220:	bc80      	pop	{r7}
 8001222:	4770      	bx	lr
 8001224:	29e4129f 	.word	0x29e4129f

08001228 <uart_available>:

int8_t uart_available(ring_buffer_t *uart) {
 8001228:	b480      	push	{r7}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]

	uint8_t n = (unsigned int) (RX_BUFFER_SIZE + (uart->head) - (uart->tail))
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001234:	b29b      	uxth	r3, r3
 8001236:	3337      	adds	r3, #55	; 0x37
 8001238:	687a      	ldr	r2, [r7, #4]
 800123a:	8f52      	ldrh	r2, [r2, #58]	; 0x3a
 800123c:	b292      	uxth	r2, r2
 800123e:	1a9b      	subs	r3, r3, r2
 8001240:	4619      	mov	r1, r3
			% RX_BUFFER_SIZE;
 8001242:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <uart_available+0x48>)
 8001244:	fba3 2301 	umull	r2, r3, r3, r1
 8001248:	1aca      	subs	r2, r1, r3
 800124a:	0852      	lsrs	r2, r2, #1
 800124c:	4413      	add	r3, r2
 800124e:	095a      	lsrs	r2, r3, #5
 8001250:	4613      	mov	r3, r2
 8001252:	00db      	lsls	r3, r3, #3
 8001254:	1a9b      	subs	r3, r3, r2
 8001256:	00db      	lsls	r3, r3, #3
 8001258:	1a9b      	subs	r3, r3, r2
 800125a:	1aca      	subs	r2, r1, r3
	uint8_t n = (unsigned int) (RX_BUFFER_SIZE + (uart->head) - (uart->tail))
 800125c:	4613      	mov	r3, r2
 800125e:	73fb      	strb	r3, [r7, #15]
	return n;
 8001260:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001264:	4618      	mov	r0, r3
 8001266:	3714      	adds	r7, #20
 8001268:	46bd      	mov	sp, r7
 800126a:	bc80      	pop	{r7}
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	29e4129f 	.word	0x29e4129f

08001274 <Uart_isr>:

void Uart_isr(UART_HandleTypeDef *huart) {
 8001274:	b580      	push	{r7, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
	uint32_t isrflags = READ_REG(huart->Instance->SR);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	617b      	str	r3, [r7, #20]
	uint32_t cr1its = READ_REG(huart->Instance->CR1);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	68db      	ldr	r3, [r3, #12]
 800128a:	613b      	str	r3, [r7, #16]

	/* if DR is not empty and the Rx Int is enabled */
	if (((isrflags & USART_SR_RXNE) != RESET)
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	f003 0320 	and.w	r3, r3, #32
 8001292:	2b00      	cmp	r3, #0
 8001294:	d011      	beq.n	80012ba <Uart_isr+0x46>
			&& ((cr1its & USART_CR1_RXNEIE) != RESET)) {
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	f003 0320 	and.w	r3, r3, #32
 800129c:	2b00      	cmp	r3, #0
 800129e:	d00c      	beq.n	80012ba <Uart_isr+0x46>
		 * @note   RXNE flag can be also cleared by a read to the USART_DR register.
		 * @note   TC flag can be also cleared by software sequence: a read operation to
		 *          USART_SR register followed by a write operation to USART_DR register.
		 * @note   TXE flag is cleared only by a write to the USART_DR register.
		 *********************/
		huart->Instance->SR; /* Read status register */
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	681b      	ldr	r3, [r3, #0]
		unsigned char c = huart->Instance->DR; /* Read data register */
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	73fb      	strb	r3, [r7, #15]
		push(&uart_rx, c);  // store data in buffer
 80012ae:	7bfb      	ldrb	r3, [r7, #15]
 80012b0:	4619      	mov	r1, r3
 80012b2:	4803      	ldr	r0, [pc, #12]	; (80012c0 <Uart_isr+0x4c>)
 80012b4:	f7ff ff54 	bl	8001160 <push>
		return;
 80012b8:	bf00      	nop
	}
}
 80012ba:	3718      	adds	r7, #24
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	200002e4 	.word	0x200002e4

080012c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012c4:	480c      	ldr	r0, [pc, #48]	; (80012f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012c6:	490d      	ldr	r1, [pc, #52]	; (80012fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012c8:	4a0d      	ldr	r2, [pc, #52]	; (8001300 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012cc:	e002      	b.n	80012d4 <LoopCopyDataInit>

080012ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012d2:	3304      	adds	r3, #4

080012d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012d8:	d3f9      	bcc.n	80012ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012da:	4a0a      	ldr	r2, [pc, #40]	; (8001304 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012dc:	4c0a      	ldr	r4, [pc, #40]	; (8001308 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012e0:	e001      	b.n	80012e6 <LoopFillZerobss>

080012e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012e4:	3204      	adds	r2, #4

080012e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012e8:	d3fb      	bcc.n	80012e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012ea:	f7ff fe41 	bl	8000f70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012ee:	f003 fcbd 	bl	8004c6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012f2:	f7fe ff2b 	bl	800014c <main>
  bx lr
 80012f6:	4770      	bx	lr
  ldr r0, =_sdata
 80012f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012fc:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001300:	08005ac4 	.word	0x08005ac4
  ldr r2, =_sbss
 8001304:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001308:	20000734 	.word	0x20000734

0800130c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800130c:	e7fe      	b.n	800130c <ADC1_2_IRQHandler>
	...

08001310 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001314:	4b08      	ldr	r3, [pc, #32]	; (8001338 <HAL_Init+0x28>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a07      	ldr	r2, [pc, #28]	; (8001338 <HAL_Init+0x28>)
 800131a:	f043 0310 	orr.w	r3, r3, #16
 800131e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001320:	2003      	movs	r0, #3
 8001322:	f000 f947 	bl	80015b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001326:	200f      	movs	r0, #15
 8001328:	f000 f808 	bl	800133c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800132c:	f7ff fc5c 	bl	8000be8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001330:	2300      	movs	r3, #0
}
 8001332:	4618      	mov	r0, r3
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40022000 	.word	0x40022000

0800133c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001344:	4b12      	ldr	r3, [pc, #72]	; (8001390 <HAL_InitTick+0x54>)
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	4b12      	ldr	r3, [pc, #72]	; (8001394 <HAL_InitTick+0x58>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	4619      	mov	r1, r3
 800134e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001352:	fbb3 f3f1 	udiv	r3, r3, r1
 8001356:	fbb2 f3f3 	udiv	r3, r2, r3
 800135a:	4618      	mov	r0, r3
 800135c:	f000 f95f 	bl	800161e <HAL_SYSTICK_Config>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e00e      	b.n	8001388 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2b0f      	cmp	r3, #15
 800136e:	d80a      	bhi.n	8001386 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001370:	2200      	movs	r2, #0
 8001372:	6879      	ldr	r1, [r7, #4]
 8001374:	f04f 30ff 	mov.w	r0, #4294967295
 8001378:	f000 f927 	bl	80015ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800137c:	4a06      	ldr	r2, [pc, #24]	; (8001398 <HAL_InitTick+0x5c>)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001382:	2300      	movs	r3, #0
 8001384:	e000      	b.n	8001388 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
}
 8001388:	4618      	mov	r0, r3
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	20000018 	.word	0x20000018
 8001394:	20000020 	.word	0x20000020
 8001398:	2000001c 	.word	0x2000001c

0800139c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013a0:	4b05      	ldr	r3, [pc, #20]	; (80013b8 <HAL_IncTick+0x1c>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	461a      	mov	r2, r3
 80013a6:	4b05      	ldr	r3, [pc, #20]	; (80013bc <HAL_IncTick+0x20>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4413      	add	r3, r2
 80013ac:	4a03      	ldr	r2, [pc, #12]	; (80013bc <HAL_IncTick+0x20>)
 80013ae:	6013      	str	r3, [r2, #0]
}
 80013b0:	bf00      	nop
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bc80      	pop	{r7}
 80013b6:	4770      	bx	lr
 80013b8:	20000020 	.word	0x20000020
 80013bc:	20000320 	.word	0x20000320

080013c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  return uwTick;
 80013c4:	4b02      	ldr	r3, [pc, #8]	; (80013d0 <HAL_GetTick+0x10>)
 80013c6:	681b      	ldr	r3, [r3, #0]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bc80      	pop	{r7}
 80013ce:	4770      	bx	lr
 80013d0:	20000320 	.word	0x20000320

080013d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013dc:	f7ff fff0 	bl	80013c0 <HAL_GetTick>
 80013e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013ec:	d005      	beq.n	80013fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013ee:	4b0a      	ldr	r3, [pc, #40]	; (8001418 <HAL_Delay+0x44>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	461a      	mov	r2, r3
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	4413      	add	r3, r2
 80013f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013fa:	bf00      	nop
 80013fc:	f7ff ffe0 	bl	80013c0 <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	68fa      	ldr	r2, [r7, #12]
 8001408:	429a      	cmp	r2, r3
 800140a:	d8f7      	bhi.n	80013fc <HAL_Delay+0x28>
  {
  }
}
 800140c:	bf00      	nop
 800140e:	bf00      	nop
 8001410:	3710      	adds	r7, #16
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	20000020 	.word	0x20000020

0800141c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f003 0307 	and.w	r3, r3, #7
 800142a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800142c:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <__NVIC_SetPriorityGrouping+0x44>)
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001432:	68ba      	ldr	r2, [r7, #8]
 8001434:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001438:	4013      	ands	r3, r2
 800143a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001444:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001448:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800144c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800144e:	4a04      	ldr	r2, [pc, #16]	; (8001460 <__NVIC_SetPriorityGrouping+0x44>)
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	60d3      	str	r3, [r2, #12]
}
 8001454:	bf00      	nop
 8001456:	3714      	adds	r7, #20
 8001458:	46bd      	mov	sp, r7
 800145a:	bc80      	pop	{r7}
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	e000ed00 	.word	0xe000ed00

08001464 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001468:	4b04      	ldr	r3, [pc, #16]	; (800147c <__NVIC_GetPriorityGrouping+0x18>)
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	0a1b      	lsrs	r3, r3, #8
 800146e:	f003 0307 	and.w	r3, r3, #7
}
 8001472:	4618      	mov	r0, r3
 8001474:	46bd      	mov	sp, r7
 8001476:	bc80      	pop	{r7}
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	e000ed00 	.word	0xe000ed00

08001480 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800148a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148e:	2b00      	cmp	r3, #0
 8001490:	db0b      	blt.n	80014aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	f003 021f 	and.w	r2, r3, #31
 8001498:	4906      	ldr	r1, [pc, #24]	; (80014b4 <__NVIC_EnableIRQ+0x34>)
 800149a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149e:	095b      	lsrs	r3, r3, #5
 80014a0:	2001      	movs	r0, #1
 80014a2:	fa00 f202 	lsl.w	r2, r0, r2
 80014a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014aa:	bf00      	nop
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bc80      	pop	{r7}
 80014b2:	4770      	bx	lr
 80014b4:	e000e100 	.word	0xe000e100

080014b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	6039      	str	r1, [r7, #0]
 80014c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	db0a      	blt.n	80014e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	b2da      	uxtb	r2, r3
 80014d0:	490c      	ldr	r1, [pc, #48]	; (8001504 <__NVIC_SetPriority+0x4c>)
 80014d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d6:	0112      	lsls	r2, r2, #4
 80014d8:	b2d2      	uxtb	r2, r2
 80014da:	440b      	add	r3, r1
 80014dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014e0:	e00a      	b.n	80014f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	b2da      	uxtb	r2, r3
 80014e6:	4908      	ldr	r1, [pc, #32]	; (8001508 <__NVIC_SetPriority+0x50>)
 80014e8:	79fb      	ldrb	r3, [r7, #7]
 80014ea:	f003 030f 	and.w	r3, r3, #15
 80014ee:	3b04      	subs	r3, #4
 80014f0:	0112      	lsls	r2, r2, #4
 80014f2:	b2d2      	uxtb	r2, r2
 80014f4:	440b      	add	r3, r1
 80014f6:	761a      	strb	r2, [r3, #24]
}
 80014f8:	bf00      	nop
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bc80      	pop	{r7}
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	e000e100 	.word	0xe000e100
 8001508:	e000ed00 	.word	0xe000ed00

0800150c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800150c:	b480      	push	{r7}
 800150e:	b089      	sub	sp, #36	; 0x24
 8001510:	af00      	add	r7, sp, #0
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f003 0307 	and.w	r3, r3, #7
 800151e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	f1c3 0307 	rsb	r3, r3, #7
 8001526:	2b04      	cmp	r3, #4
 8001528:	bf28      	it	cs
 800152a:	2304      	movcs	r3, #4
 800152c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	3304      	adds	r3, #4
 8001532:	2b06      	cmp	r3, #6
 8001534:	d902      	bls.n	800153c <NVIC_EncodePriority+0x30>
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	3b03      	subs	r3, #3
 800153a:	e000      	b.n	800153e <NVIC_EncodePriority+0x32>
 800153c:	2300      	movs	r3, #0
 800153e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001540:	f04f 32ff 	mov.w	r2, #4294967295
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	43da      	mvns	r2, r3
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	401a      	ands	r2, r3
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001554:	f04f 31ff 	mov.w	r1, #4294967295
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	fa01 f303 	lsl.w	r3, r1, r3
 800155e:	43d9      	mvns	r1, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001564:	4313      	orrs	r3, r2
         );
}
 8001566:	4618      	mov	r0, r3
 8001568:	3724      	adds	r7, #36	; 0x24
 800156a:	46bd      	mov	sp, r7
 800156c:	bc80      	pop	{r7}
 800156e:	4770      	bx	lr

08001570 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	3b01      	subs	r3, #1
 800157c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001580:	d301      	bcc.n	8001586 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001582:	2301      	movs	r3, #1
 8001584:	e00f      	b.n	80015a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001586:	4a0a      	ldr	r2, [pc, #40]	; (80015b0 <SysTick_Config+0x40>)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	3b01      	subs	r3, #1
 800158c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800158e:	210f      	movs	r1, #15
 8001590:	f04f 30ff 	mov.w	r0, #4294967295
 8001594:	f7ff ff90 	bl	80014b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001598:	4b05      	ldr	r3, [pc, #20]	; (80015b0 <SysTick_Config+0x40>)
 800159a:	2200      	movs	r2, #0
 800159c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800159e:	4b04      	ldr	r3, [pc, #16]	; (80015b0 <SysTick_Config+0x40>)
 80015a0:	2207      	movs	r2, #7
 80015a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	e000e010 	.word	0xe000e010

080015b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f7ff ff2d 	bl	800141c <__NVIC_SetPriorityGrouping>
}
 80015c2:	bf00      	nop
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b086      	sub	sp, #24
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	4603      	mov	r3, r0
 80015d2:	60b9      	str	r1, [r7, #8]
 80015d4:	607a      	str	r2, [r7, #4]
 80015d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015d8:	2300      	movs	r3, #0
 80015da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015dc:	f7ff ff42 	bl	8001464 <__NVIC_GetPriorityGrouping>
 80015e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	68b9      	ldr	r1, [r7, #8]
 80015e6:	6978      	ldr	r0, [r7, #20]
 80015e8:	f7ff ff90 	bl	800150c <NVIC_EncodePriority>
 80015ec:	4602      	mov	r2, r0
 80015ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015f2:	4611      	mov	r1, r2
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff ff5f 	bl	80014b8 <__NVIC_SetPriority>
}
 80015fa:	bf00      	nop
 80015fc:	3718      	adds	r7, #24
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001602:	b580      	push	{r7, lr}
 8001604:	b082      	sub	sp, #8
 8001606:	af00      	add	r7, sp, #0
 8001608:	4603      	mov	r3, r0
 800160a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800160c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff ff35 	bl	8001480 <__NVIC_EnableIRQ>
}
 8001616:	bf00      	nop
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	b082      	sub	sp, #8
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f7ff ffa2 	bl	8001570 <SysTick_Config>
 800162c:	4603      	mov	r3, r0
}
 800162e:	4618      	mov	r0, r3
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
	...

08001638 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001638:	b480      	push	{r7}
 800163a:	b08b      	sub	sp, #44	; 0x2c
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001642:	2300      	movs	r3, #0
 8001644:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001646:	2300      	movs	r3, #0
 8001648:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800164a:	e169      	b.n	8001920 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800164c:	2201      	movs	r2, #1
 800164e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	69fa      	ldr	r2, [r7, #28]
 800165c:	4013      	ands	r3, r2
 800165e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	429a      	cmp	r2, r3
 8001666:	f040 8158 	bne.w	800191a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	4a9a      	ldr	r2, [pc, #616]	; (80018d8 <HAL_GPIO_Init+0x2a0>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d05e      	beq.n	8001732 <HAL_GPIO_Init+0xfa>
 8001674:	4a98      	ldr	r2, [pc, #608]	; (80018d8 <HAL_GPIO_Init+0x2a0>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d875      	bhi.n	8001766 <HAL_GPIO_Init+0x12e>
 800167a:	4a98      	ldr	r2, [pc, #608]	; (80018dc <HAL_GPIO_Init+0x2a4>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d058      	beq.n	8001732 <HAL_GPIO_Init+0xfa>
 8001680:	4a96      	ldr	r2, [pc, #600]	; (80018dc <HAL_GPIO_Init+0x2a4>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d86f      	bhi.n	8001766 <HAL_GPIO_Init+0x12e>
 8001686:	4a96      	ldr	r2, [pc, #600]	; (80018e0 <HAL_GPIO_Init+0x2a8>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d052      	beq.n	8001732 <HAL_GPIO_Init+0xfa>
 800168c:	4a94      	ldr	r2, [pc, #592]	; (80018e0 <HAL_GPIO_Init+0x2a8>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d869      	bhi.n	8001766 <HAL_GPIO_Init+0x12e>
 8001692:	4a94      	ldr	r2, [pc, #592]	; (80018e4 <HAL_GPIO_Init+0x2ac>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d04c      	beq.n	8001732 <HAL_GPIO_Init+0xfa>
 8001698:	4a92      	ldr	r2, [pc, #584]	; (80018e4 <HAL_GPIO_Init+0x2ac>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d863      	bhi.n	8001766 <HAL_GPIO_Init+0x12e>
 800169e:	4a92      	ldr	r2, [pc, #584]	; (80018e8 <HAL_GPIO_Init+0x2b0>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d046      	beq.n	8001732 <HAL_GPIO_Init+0xfa>
 80016a4:	4a90      	ldr	r2, [pc, #576]	; (80018e8 <HAL_GPIO_Init+0x2b0>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d85d      	bhi.n	8001766 <HAL_GPIO_Init+0x12e>
 80016aa:	2b12      	cmp	r3, #18
 80016ac:	d82a      	bhi.n	8001704 <HAL_GPIO_Init+0xcc>
 80016ae:	2b12      	cmp	r3, #18
 80016b0:	d859      	bhi.n	8001766 <HAL_GPIO_Init+0x12e>
 80016b2:	a201      	add	r2, pc, #4	; (adr r2, 80016b8 <HAL_GPIO_Init+0x80>)
 80016b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016b8:	08001733 	.word	0x08001733
 80016bc:	0800170d 	.word	0x0800170d
 80016c0:	0800171f 	.word	0x0800171f
 80016c4:	08001761 	.word	0x08001761
 80016c8:	08001767 	.word	0x08001767
 80016cc:	08001767 	.word	0x08001767
 80016d0:	08001767 	.word	0x08001767
 80016d4:	08001767 	.word	0x08001767
 80016d8:	08001767 	.word	0x08001767
 80016dc:	08001767 	.word	0x08001767
 80016e0:	08001767 	.word	0x08001767
 80016e4:	08001767 	.word	0x08001767
 80016e8:	08001767 	.word	0x08001767
 80016ec:	08001767 	.word	0x08001767
 80016f0:	08001767 	.word	0x08001767
 80016f4:	08001767 	.word	0x08001767
 80016f8:	08001767 	.word	0x08001767
 80016fc:	08001715 	.word	0x08001715
 8001700:	08001729 	.word	0x08001729
 8001704:	4a79      	ldr	r2, [pc, #484]	; (80018ec <HAL_GPIO_Init+0x2b4>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d013      	beq.n	8001732 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800170a:	e02c      	b.n	8001766 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	623b      	str	r3, [r7, #32]
          break;
 8001712:	e029      	b.n	8001768 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	3304      	adds	r3, #4
 800171a:	623b      	str	r3, [r7, #32]
          break;
 800171c:	e024      	b.n	8001768 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	68db      	ldr	r3, [r3, #12]
 8001722:	3308      	adds	r3, #8
 8001724:	623b      	str	r3, [r7, #32]
          break;
 8001726:	e01f      	b.n	8001768 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	330c      	adds	r3, #12
 800172e:	623b      	str	r3, [r7, #32]
          break;
 8001730:	e01a      	b.n	8001768 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d102      	bne.n	8001740 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800173a:	2304      	movs	r3, #4
 800173c:	623b      	str	r3, [r7, #32]
          break;
 800173e:	e013      	b.n	8001768 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d105      	bne.n	8001754 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001748:	2308      	movs	r3, #8
 800174a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	69fa      	ldr	r2, [r7, #28]
 8001750:	611a      	str	r2, [r3, #16]
          break;
 8001752:	e009      	b.n	8001768 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001754:	2308      	movs	r3, #8
 8001756:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	69fa      	ldr	r2, [r7, #28]
 800175c:	615a      	str	r2, [r3, #20]
          break;
 800175e:	e003      	b.n	8001768 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001760:	2300      	movs	r3, #0
 8001762:	623b      	str	r3, [r7, #32]
          break;
 8001764:	e000      	b.n	8001768 <HAL_GPIO_Init+0x130>
          break;
 8001766:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	2bff      	cmp	r3, #255	; 0xff
 800176c:	d801      	bhi.n	8001772 <HAL_GPIO_Init+0x13a>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	e001      	b.n	8001776 <HAL_GPIO_Init+0x13e>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	3304      	adds	r3, #4
 8001776:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	2bff      	cmp	r3, #255	; 0xff
 800177c:	d802      	bhi.n	8001784 <HAL_GPIO_Init+0x14c>
 800177e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	e002      	b.n	800178a <HAL_GPIO_Init+0x152>
 8001784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001786:	3b08      	subs	r3, #8
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	210f      	movs	r1, #15
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	fa01 f303 	lsl.w	r3, r1, r3
 8001798:	43db      	mvns	r3, r3
 800179a:	401a      	ands	r2, r3
 800179c:	6a39      	ldr	r1, [r7, #32]
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	fa01 f303 	lsl.w	r3, r1, r3
 80017a4:	431a      	orrs	r2, r3
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	f000 80b1 	beq.w	800191a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017b8:	4b4d      	ldr	r3, [pc, #308]	; (80018f0 <HAL_GPIO_Init+0x2b8>)
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	4a4c      	ldr	r2, [pc, #304]	; (80018f0 <HAL_GPIO_Init+0x2b8>)
 80017be:	f043 0301 	orr.w	r3, r3, #1
 80017c2:	6193      	str	r3, [r2, #24]
 80017c4:	4b4a      	ldr	r3, [pc, #296]	; (80018f0 <HAL_GPIO_Init+0x2b8>)
 80017c6:	699b      	ldr	r3, [r3, #24]
 80017c8:	f003 0301 	and.w	r3, r3, #1
 80017cc:	60bb      	str	r3, [r7, #8]
 80017ce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80017d0:	4a48      	ldr	r2, [pc, #288]	; (80018f4 <HAL_GPIO_Init+0x2bc>)
 80017d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d4:	089b      	lsrs	r3, r3, #2
 80017d6:	3302      	adds	r3, #2
 80017d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017dc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80017de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e0:	f003 0303 	and.w	r3, r3, #3
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	220f      	movs	r2, #15
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	43db      	mvns	r3, r3
 80017ee:	68fa      	ldr	r2, [r7, #12]
 80017f0:	4013      	ands	r3, r2
 80017f2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	4a40      	ldr	r2, [pc, #256]	; (80018f8 <HAL_GPIO_Init+0x2c0>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d013      	beq.n	8001824 <HAL_GPIO_Init+0x1ec>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	4a3f      	ldr	r2, [pc, #252]	; (80018fc <HAL_GPIO_Init+0x2c4>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d00d      	beq.n	8001820 <HAL_GPIO_Init+0x1e8>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	4a3e      	ldr	r2, [pc, #248]	; (8001900 <HAL_GPIO_Init+0x2c8>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d007      	beq.n	800181c <HAL_GPIO_Init+0x1e4>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	4a3d      	ldr	r2, [pc, #244]	; (8001904 <HAL_GPIO_Init+0x2cc>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d101      	bne.n	8001818 <HAL_GPIO_Init+0x1e0>
 8001814:	2303      	movs	r3, #3
 8001816:	e006      	b.n	8001826 <HAL_GPIO_Init+0x1ee>
 8001818:	2304      	movs	r3, #4
 800181a:	e004      	b.n	8001826 <HAL_GPIO_Init+0x1ee>
 800181c:	2302      	movs	r3, #2
 800181e:	e002      	b.n	8001826 <HAL_GPIO_Init+0x1ee>
 8001820:	2301      	movs	r3, #1
 8001822:	e000      	b.n	8001826 <HAL_GPIO_Init+0x1ee>
 8001824:	2300      	movs	r3, #0
 8001826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001828:	f002 0203 	and.w	r2, r2, #3
 800182c:	0092      	lsls	r2, r2, #2
 800182e:	4093      	lsls	r3, r2
 8001830:	68fa      	ldr	r2, [r7, #12]
 8001832:	4313      	orrs	r3, r2
 8001834:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001836:	492f      	ldr	r1, [pc, #188]	; (80018f4 <HAL_GPIO_Init+0x2bc>)
 8001838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183a:	089b      	lsrs	r3, r3, #2
 800183c:	3302      	adds	r3, #2
 800183e:	68fa      	ldr	r2, [r7, #12]
 8001840:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800184c:	2b00      	cmp	r3, #0
 800184e:	d006      	beq.n	800185e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001850:	4b2d      	ldr	r3, [pc, #180]	; (8001908 <HAL_GPIO_Init+0x2d0>)
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	492c      	ldr	r1, [pc, #176]	; (8001908 <HAL_GPIO_Init+0x2d0>)
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	4313      	orrs	r3, r2
 800185a:	600b      	str	r3, [r1, #0]
 800185c:	e006      	b.n	800186c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800185e:	4b2a      	ldr	r3, [pc, #168]	; (8001908 <HAL_GPIO_Init+0x2d0>)
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	43db      	mvns	r3, r3
 8001866:	4928      	ldr	r1, [pc, #160]	; (8001908 <HAL_GPIO_Init+0x2d0>)
 8001868:	4013      	ands	r3, r2
 800186a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d006      	beq.n	8001886 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001878:	4b23      	ldr	r3, [pc, #140]	; (8001908 <HAL_GPIO_Init+0x2d0>)
 800187a:	685a      	ldr	r2, [r3, #4]
 800187c:	4922      	ldr	r1, [pc, #136]	; (8001908 <HAL_GPIO_Init+0x2d0>)
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	4313      	orrs	r3, r2
 8001882:	604b      	str	r3, [r1, #4]
 8001884:	e006      	b.n	8001894 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001886:	4b20      	ldr	r3, [pc, #128]	; (8001908 <HAL_GPIO_Init+0x2d0>)
 8001888:	685a      	ldr	r2, [r3, #4]
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	43db      	mvns	r3, r3
 800188e:	491e      	ldr	r1, [pc, #120]	; (8001908 <HAL_GPIO_Init+0x2d0>)
 8001890:	4013      	ands	r3, r2
 8001892:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800189c:	2b00      	cmp	r3, #0
 800189e:	d006      	beq.n	80018ae <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018a0:	4b19      	ldr	r3, [pc, #100]	; (8001908 <HAL_GPIO_Init+0x2d0>)
 80018a2:	689a      	ldr	r2, [r3, #8]
 80018a4:	4918      	ldr	r1, [pc, #96]	; (8001908 <HAL_GPIO_Init+0x2d0>)
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	608b      	str	r3, [r1, #8]
 80018ac:	e006      	b.n	80018bc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018ae:	4b16      	ldr	r3, [pc, #88]	; (8001908 <HAL_GPIO_Init+0x2d0>)
 80018b0:	689a      	ldr	r2, [r3, #8]
 80018b2:	69bb      	ldr	r3, [r7, #24]
 80018b4:	43db      	mvns	r3, r3
 80018b6:	4914      	ldr	r1, [pc, #80]	; (8001908 <HAL_GPIO_Init+0x2d0>)
 80018b8:	4013      	ands	r3, r2
 80018ba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d021      	beq.n	800190c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018c8:	4b0f      	ldr	r3, [pc, #60]	; (8001908 <HAL_GPIO_Init+0x2d0>)
 80018ca:	68da      	ldr	r2, [r3, #12]
 80018cc:	490e      	ldr	r1, [pc, #56]	; (8001908 <HAL_GPIO_Init+0x2d0>)
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	60cb      	str	r3, [r1, #12]
 80018d4:	e021      	b.n	800191a <HAL_GPIO_Init+0x2e2>
 80018d6:	bf00      	nop
 80018d8:	10320000 	.word	0x10320000
 80018dc:	10310000 	.word	0x10310000
 80018e0:	10220000 	.word	0x10220000
 80018e4:	10210000 	.word	0x10210000
 80018e8:	10120000 	.word	0x10120000
 80018ec:	10110000 	.word	0x10110000
 80018f0:	40021000 	.word	0x40021000
 80018f4:	40010000 	.word	0x40010000
 80018f8:	40010800 	.word	0x40010800
 80018fc:	40010c00 	.word	0x40010c00
 8001900:	40011000 	.word	0x40011000
 8001904:	40011400 	.word	0x40011400
 8001908:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800190c:	4b0b      	ldr	r3, [pc, #44]	; (800193c <HAL_GPIO_Init+0x304>)
 800190e:	68da      	ldr	r2, [r3, #12]
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	43db      	mvns	r3, r3
 8001914:	4909      	ldr	r1, [pc, #36]	; (800193c <HAL_GPIO_Init+0x304>)
 8001916:	4013      	ands	r3, r2
 8001918:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800191a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191c:	3301      	adds	r3, #1
 800191e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001926:	fa22 f303 	lsr.w	r3, r2, r3
 800192a:	2b00      	cmp	r3, #0
 800192c:	f47f ae8e 	bne.w	800164c <HAL_GPIO_Init+0x14>
  }
}
 8001930:	bf00      	nop
 8001932:	bf00      	nop
 8001934:	372c      	adds	r7, #44	; 0x2c
 8001936:	46bd      	mov	sp, r7
 8001938:	bc80      	pop	{r7}
 800193a:	4770      	bx	lr
 800193c:	40010400 	.word	0x40010400

08001940 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	460b      	mov	r3, r1
 800194a:	807b      	strh	r3, [r7, #2]
 800194c:	4613      	mov	r3, r2
 800194e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001950:	787b      	ldrb	r3, [r7, #1]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d003      	beq.n	800195e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001956:	887a      	ldrh	r2, [r7, #2]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800195c:	e003      	b.n	8001966 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800195e:	887b      	ldrh	r3, [r7, #2]
 8001960:	041a      	lsls	r2, r3, #16
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	611a      	str	r2, [r3, #16]
}
 8001966:	bf00      	nop
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	bc80      	pop	{r7}
 800196e:	4770      	bx	lr

08001970 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	4603      	mov	r3, r0
 8001978:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800197a:	4b08      	ldr	r3, [pc, #32]	; (800199c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800197c:	695a      	ldr	r2, [r3, #20]
 800197e:	88fb      	ldrh	r3, [r7, #6]
 8001980:	4013      	ands	r3, r2
 8001982:	2b00      	cmp	r3, #0
 8001984:	d006      	beq.n	8001994 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001986:	4a05      	ldr	r2, [pc, #20]	; (800199c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001988:	88fb      	ldrh	r3, [r7, #6]
 800198a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800198c:	88fb      	ldrh	r3, [r7, #6]
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff f912 	bl	8000bb8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001994:	bf00      	nop
 8001996:	3708      	adds	r7, #8
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40010400 	.word	0x40010400

080019a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d101      	bne.n	80019b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e272      	b.n	8001e98 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	f000 8087 	beq.w	8001ace <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019c0:	4b92      	ldr	r3, [pc, #584]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f003 030c 	and.w	r3, r3, #12
 80019c8:	2b04      	cmp	r3, #4
 80019ca:	d00c      	beq.n	80019e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019cc:	4b8f      	ldr	r3, [pc, #572]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f003 030c 	and.w	r3, r3, #12
 80019d4:	2b08      	cmp	r3, #8
 80019d6:	d112      	bne.n	80019fe <HAL_RCC_OscConfig+0x5e>
 80019d8:	4b8c      	ldr	r3, [pc, #560]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019e4:	d10b      	bne.n	80019fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019e6:	4b89      	ldr	r3, [pc, #548]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d06c      	beq.n	8001acc <HAL_RCC_OscConfig+0x12c>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d168      	bne.n	8001acc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e24c      	b.n	8001e98 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a06:	d106      	bne.n	8001a16 <HAL_RCC_OscConfig+0x76>
 8001a08:	4b80      	ldr	r3, [pc, #512]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a7f      	ldr	r2, [pc, #508]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001a0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a12:	6013      	str	r3, [r2, #0]
 8001a14:	e02e      	b.n	8001a74 <HAL_RCC_OscConfig+0xd4>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d10c      	bne.n	8001a38 <HAL_RCC_OscConfig+0x98>
 8001a1e:	4b7b      	ldr	r3, [pc, #492]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a7a      	ldr	r2, [pc, #488]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001a24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a28:	6013      	str	r3, [r2, #0]
 8001a2a:	4b78      	ldr	r3, [pc, #480]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a77      	ldr	r2, [pc, #476]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001a30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a34:	6013      	str	r3, [r2, #0]
 8001a36:	e01d      	b.n	8001a74 <HAL_RCC_OscConfig+0xd4>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a40:	d10c      	bne.n	8001a5c <HAL_RCC_OscConfig+0xbc>
 8001a42:	4b72      	ldr	r3, [pc, #456]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a71      	ldr	r2, [pc, #452]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001a48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a4c:	6013      	str	r3, [r2, #0]
 8001a4e:	4b6f      	ldr	r3, [pc, #444]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a6e      	ldr	r2, [pc, #440]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001a54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a58:	6013      	str	r3, [r2, #0]
 8001a5a:	e00b      	b.n	8001a74 <HAL_RCC_OscConfig+0xd4>
 8001a5c:	4b6b      	ldr	r3, [pc, #428]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a6a      	ldr	r2, [pc, #424]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001a62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a66:	6013      	str	r3, [r2, #0]
 8001a68:	4b68      	ldr	r3, [pc, #416]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a67      	ldr	r2, [pc, #412]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001a6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a72:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d013      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a7c:	f7ff fca0 	bl	80013c0 <HAL_GetTick>
 8001a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a82:	e008      	b.n	8001a96 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a84:	f7ff fc9c 	bl	80013c0 <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	2b64      	cmp	r3, #100	; 0x64
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e200      	b.n	8001e98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a96:	4b5d      	ldr	r3, [pc, #372]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d0f0      	beq.n	8001a84 <HAL_RCC_OscConfig+0xe4>
 8001aa2:	e014      	b.n	8001ace <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa4:	f7ff fc8c 	bl	80013c0 <HAL_GetTick>
 8001aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aaa:	e008      	b.n	8001abe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aac:	f7ff fc88 	bl	80013c0 <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b64      	cmp	r3, #100	; 0x64
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e1ec      	b.n	8001e98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001abe:	4b53      	ldr	r3, [pc, #332]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d1f0      	bne.n	8001aac <HAL_RCC_OscConfig+0x10c>
 8001aca:	e000      	b.n	8001ace <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001acc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d063      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ada:	4b4c      	ldr	r3, [pc, #304]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f003 030c 	and.w	r3, r3, #12
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d00b      	beq.n	8001afe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ae6:	4b49      	ldr	r3, [pc, #292]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f003 030c 	and.w	r3, r3, #12
 8001aee:	2b08      	cmp	r3, #8
 8001af0:	d11c      	bne.n	8001b2c <HAL_RCC_OscConfig+0x18c>
 8001af2:	4b46      	ldr	r3, [pc, #280]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d116      	bne.n	8001b2c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001afe:	4b43      	ldr	r3, [pc, #268]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d005      	beq.n	8001b16 <HAL_RCC_OscConfig+0x176>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	691b      	ldr	r3, [r3, #16]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d001      	beq.n	8001b16 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e1c0      	b.n	8001e98 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b16:	4b3d      	ldr	r3, [pc, #244]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	695b      	ldr	r3, [r3, #20]
 8001b22:	00db      	lsls	r3, r3, #3
 8001b24:	4939      	ldr	r1, [pc, #228]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001b26:	4313      	orrs	r3, r2
 8001b28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b2a:	e03a      	b.n	8001ba2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	691b      	ldr	r3, [r3, #16]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d020      	beq.n	8001b76 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b34:	4b36      	ldr	r3, [pc, #216]	; (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001b36:	2201      	movs	r2, #1
 8001b38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b3a:	f7ff fc41 	bl	80013c0 <HAL_GetTick>
 8001b3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b40:	e008      	b.n	8001b54 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b42:	f7ff fc3d 	bl	80013c0 <HAL_GetTick>
 8001b46:	4602      	mov	r2, r0
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d901      	bls.n	8001b54 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e1a1      	b.n	8001e98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b54:	4b2d      	ldr	r3, [pc, #180]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0302 	and.w	r3, r3, #2
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d0f0      	beq.n	8001b42 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b60:	4b2a      	ldr	r3, [pc, #168]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	695b      	ldr	r3, [r3, #20]
 8001b6c:	00db      	lsls	r3, r3, #3
 8001b6e:	4927      	ldr	r1, [pc, #156]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001b70:	4313      	orrs	r3, r2
 8001b72:	600b      	str	r3, [r1, #0]
 8001b74:	e015      	b.n	8001ba2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b76:	4b26      	ldr	r3, [pc, #152]	; (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b7c:	f7ff fc20 	bl	80013c0 <HAL_GetTick>
 8001b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b82:	e008      	b.n	8001b96 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b84:	f7ff fc1c 	bl	80013c0 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e180      	b.n	8001e98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b96:	4b1d      	ldr	r3, [pc, #116]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d1f0      	bne.n	8001b84 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0308 	and.w	r3, r3, #8
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d03a      	beq.n	8001c24 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	699b      	ldr	r3, [r3, #24]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d019      	beq.n	8001bea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bb6:	4b17      	ldr	r3, [pc, #92]	; (8001c14 <HAL_RCC_OscConfig+0x274>)
 8001bb8:	2201      	movs	r2, #1
 8001bba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bbc:	f7ff fc00 	bl	80013c0 <HAL_GetTick>
 8001bc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bc2:	e008      	b.n	8001bd6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bc4:	f7ff fbfc 	bl	80013c0 <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e160      	b.n	8001e98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bd6:	4b0d      	ldr	r3, [pc, #52]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d0f0      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001be2:	2001      	movs	r0, #1
 8001be4:	f000 fad8 	bl	8002198 <RCC_Delay>
 8001be8:	e01c      	b.n	8001c24 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bea:	4b0a      	ldr	r3, [pc, #40]	; (8001c14 <HAL_RCC_OscConfig+0x274>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bf0:	f7ff fbe6 	bl	80013c0 <HAL_GetTick>
 8001bf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bf6:	e00f      	b.n	8001c18 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bf8:	f7ff fbe2 	bl	80013c0 <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d908      	bls.n	8001c18 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e146      	b.n	8001e98 <HAL_RCC_OscConfig+0x4f8>
 8001c0a:	bf00      	nop
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	42420000 	.word	0x42420000
 8001c14:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c18:	4b92      	ldr	r3, [pc, #584]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d1e9      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0304 	and.w	r3, r3, #4
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	f000 80a6 	beq.w	8001d7e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c32:	2300      	movs	r3, #0
 8001c34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c36:	4b8b      	ldr	r3, [pc, #556]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001c38:	69db      	ldr	r3, [r3, #28]
 8001c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d10d      	bne.n	8001c5e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c42:	4b88      	ldr	r3, [pc, #544]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001c44:	69db      	ldr	r3, [r3, #28]
 8001c46:	4a87      	ldr	r2, [pc, #540]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001c48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c4c:	61d3      	str	r3, [r2, #28]
 8001c4e:	4b85      	ldr	r3, [pc, #532]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001c50:	69db      	ldr	r3, [r3, #28]
 8001c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c56:	60bb      	str	r3, [r7, #8]
 8001c58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c5e:	4b82      	ldr	r3, [pc, #520]	; (8001e68 <HAL_RCC_OscConfig+0x4c8>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d118      	bne.n	8001c9c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c6a:	4b7f      	ldr	r3, [pc, #508]	; (8001e68 <HAL_RCC_OscConfig+0x4c8>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a7e      	ldr	r2, [pc, #504]	; (8001e68 <HAL_RCC_OscConfig+0x4c8>)
 8001c70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c76:	f7ff fba3 	bl	80013c0 <HAL_GetTick>
 8001c7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c7c:	e008      	b.n	8001c90 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c7e:	f7ff fb9f 	bl	80013c0 <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	2b64      	cmp	r3, #100	; 0x64
 8001c8a:	d901      	bls.n	8001c90 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e103      	b.n	8001e98 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c90:	4b75      	ldr	r3, [pc, #468]	; (8001e68 <HAL_RCC_OscConfig+0x4c8>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d0f0      	beq.n	8001c7e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d106      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x312>
 8001ca4:	4b6f      	ldr	r3, [pc, #444]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001ca6:	6a1b      	ldr	r3, [r3, #32]
 8001ca8:	4a6e      	ldr	r2, [pc, #440]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001caa:	f043 0301 	orr.w	r3, r3, #1
 8001cae:	6213      	str	r3, [r2, #32]
 8001cb0:	e02d      	b.n	8001d0e <HAL_RCC_OscConfig+0x36e>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d10c      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x334>
 8001cba:	4b6a      	ldr	r3, [pc, #424]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001cbc:	6a1b      	ldr	r3, [r3, #32]
 8001cbe:	4a69      	ldr	r2, [pc, #420]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001cc0:	f023 0301 	bic.w	r3, r3, #1
 8001cc4:	6213      	str	r3, [r2, #32]
 8001cc6:	4b67      	ldr	r3, [pc, #412]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001cc8:	6a1b      	ldr	r3, [r3, #32]
 8001cca:	4a66      	ldr	r2, [pc, #408]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001ccc:	f023 0304 	bic.w	r3, r3, #4
 8001cd0:	6213      	str	r3, [r2, #32]
 8001cd2:	e01c      	b.n	8001d0e <HAL_RCC_OscConfig+0x36e>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	2b05      	cmp	r3, #5
 8001cda:	d10c      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x356>
 8001cdc:	4b61      	ldr	r3, [pc, #388]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001cde:	6a1b      	ldr	r3, [r3, #32]
 8001ce0:	4a60      	ldr	r2, [pc, #384]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001ce2:	f043 0304 	orr.w	r3, r3, #4
 8001ce6:	6213      	str	r3, [r2, #32]
 8001ce8:	4b5e      	ldr	r3, [pc, #376]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001cea:	6a1b      	ldr	r3, [r3, #32]
 8001cec:	4a5d      	ldr	r2, [pc, #372]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001cee:	f043 0301 	orr.w	r3, r3, #1
 8001cf2:	6213      	str	r3, [r2, #32]
 8001cf4:	e00b      	b.n	8001d0e <HAL_RCC_OscConfig+0x36e>
 8001cf6:	4b5b      	ldr	r3, [pc, #364]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001cf8:	6a1b      	ldr	r3, [r3, #32]
 8001cfa:	4a5a      	ldr	r2, [pc, #360]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001cfc:	f023 0301 	bic.w	r3, r3, #1
 8001d00:	6213      	str	r3, [r2, #32]
 8001d02:	4b58      	ldr	r3, [pc, #352]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001d04:	6a1b      	ldr	r3, [r3, #32]
 8001d06:	4a57      	ldr	r2, [pc, #348]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001d08:	f023 0304 	bic.w	r3, r3, #4
 8001d0c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d015      	beq.n	8001d42 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d16:	f7ff fb53 	bl	80013c0 <HAL_GetTick>
 8001d1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d1c:	e00a      	b.n	8001d34 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d1e:	f7ff fb4f 	bl	80013c0 <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d901      	bls.n	8001d34 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e0b1      	b.n	8001e98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d34:	4b4b      	ldr	r3, [pc, #300]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001d36:	6a1b      	ldr	r3, [r3, #32]
 8001d38:	f003 0302 	and.w	r3, r3, #2
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d0ee      	beq.n	8001d1e <HAL_RCC_OscConfig+0x37e>
 8001d40:	e014      	b.n	8001d6c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d42:	f7ff fb3d 	bl	80013c0 <HAL_GetTick>
 8001d46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d48:	e00a      	b.n	8001d60 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d4a:	f7ff fb39 	bl	80013c0 <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d901      	bls.n	8001d60 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e09b      	b.n	8001e98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d60:	4b40      	ldr	r3, [pc, #256]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001d62:	6a1b      	ldr	r3, [r3, #32]
 8001d64:	f003 0302 	and.w	r3, r3, #2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d1ee      	bne.n	8001d4a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d6c:	7dfb      	ldrb	r3, [r7, #23]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d105      	bne.n	8001d7e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d72:	4b3c      	ldr	r3, [pc, #240]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001d74:	69db      	ldr	r3, [r3, #28]
 8001d76:	4a3b      	ldr	r2, [pc, #236]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001d78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d7c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	69db      	ldr	r3, [r3, #28]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	f000 8087 	beq.w	8001e96 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d88:	4b36      	ldr	r3, [pc, #216]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f003 030c 	and.w	r3, r3, #12
 8001d90:	2b08      	cmp	r3, #8
 8001d92:	d061      	beq.n	8001e58 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	69db      	ldr	r3, [r3, #28]
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d146      	bne.n	8001e2a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d9c:	4b33      	ldr	r3, [pc, #204]	; (8001e6c <HAL_RCC_OscConfig+0x4cc>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da2:	f7ff fb0d 	bl	80013c0 <HAL_GetTick>
 8001da6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001da8:	e008      	b.n	8001dbc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001daa:	f7ff fb09 	bl	80013c0 <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d901      	bls.n	8001dbc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e06d      	b.n	8001e98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dbc:	4b29      	ldr	r3, [pc, #164]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d1f0      	bne.n	8001daa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6a1b      	ldr	r3, [r3, #32]
 8001dcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dd0:	d108      	bne.n	8001de4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001dd2:	4b24      	ldr	r3, [pc, #144]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	4921      	ldr	r1, [pc, #132]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001de0:	4313      	orrs	r3, r2
 8001de2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001de4:	4b1f      	ldr	r3, [pc, #124]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a19      	ldr	r1, [r3, #32]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df4:	430b      	orrs	r3, r1
 8001df6:	491b      	ldr	r1, [pc, #108]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dfc:	4b1b      	ldr	r3, [pc, #108]	; (8001e6c <HAL_RCC_OscConfig+0x4cc>)
 8001dfe:	2201      	movs	r2, #1
 8001e00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e02:	f7ff fadd 	bl	80013c0 <HAL_GetTick>
 8001e06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e08:	e008      	b.n	8001e1c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e0a:	f7ff fad9 	bl	80013c0 <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d901      	bls.n	8001e1c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e03d      	b.n	8001e98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e1c:	4b11      	ldr	r3, [pc, #68]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d0f0      	beq.n	8001e0a <HAL_RCC_OscConfig+0x46a>
 8001e28:	e035      	b.n	8001e96 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e2a:	4b10      	ldr	r3, [pc, #64]	; (8001e6c <HAL_RCC_OscConfig+0x4cc>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e30:	f7ff fac6 	bl	80013c0 <HAL_GetTick>
 8001e34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e36:	e008      	b.n	8001e4a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e38:	f7ff fac2 	bl	80013c0 <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e026      	b.n	8001e98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e4a:	4b06      	ldr	r3, [pc, #24]	; (8001e64 <HAL_RCC_OscConfig+0x4c4>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d1f0      	bne.n	8001e38 <HAL_RCC_OscConfig+0x498>
 8001e56:	e01e      	b.n	8001e96 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	69db      	ldr	r3, [r3, #28]
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d107      	bne.n	8001e70 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e019      	b.n	8001e98 <HAL_RCC_OscConfig+0x4f8>
 8001e64:	40021000 	.word	0x40021000
 8001e68:	40007000 	.word	0x40007000
 8001e6c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e70:	4b0b      	ldr	r3, [pc, #44]	; (8001ea0 <HAL_RCC_OscConfig+0x500>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a1b      	ldr	r3, [r3, #32]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d106      	bne.n	8001e92 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d001      	beq.n	8001e96 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e000      	b.n	8001e98 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001e96:	2300      	movs	r3, #0
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3718      	adds	r7, #24
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	40021000 	.word	0x40021000

08001ea4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d101      	bne.n	8001eb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e0d0      	b.n	800205a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001eb8:	4b6a      	ldr	r3, [pc, #424]	; (8002064 <HAL_RCC_ClockConfig+0x1c0>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0307 	and.w	r3, r3, #7
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d910      	bls.n	8001ee8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ec6:	4b67      	ldr	r3, [pc, #412]	; (8002064 <HAL_RCC_ClockConfig+0x1c0>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f023 0207 	bic.w	r2, r3, #7
 8001ece:	4965      	ldr	r1, [pc, #404]	; (8002064 <HAL_RCC_ClockConfig+0x1c0>)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ed6:	4b63      	ldr	r3, [pc, #396]	; (8002064 <HAL_RCC_ClockConfig+0x1c0>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0307 	and.w	r3, r3, #7
 8001ede:	683a      	ldr	r2, [r7, #0]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d001      	beq.n	8001ee8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e0b8      	b.n	800205a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0302 	and.w	r3, r3, #2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d020      	beq.n	8001f36 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0304 	and.w	r3, r3, #4
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d005      	beq.n	8001f0c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f00:	4b59      	ldr	r3, [pc, #356]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	4a58      	ldr	r2, [pc, #352]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001f06:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f0a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0308 	and.w	r3, r3, #8
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d005      	beq.n	8001f24 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f18:	4b53      	ldr	r3, [pc, #332]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	4a52      	ldr	r2, [pc, #328]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001f1e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f22:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f24:	4b50      	ldr	r3, [pc, #320]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	494d      	ldr	r1, [pc, #308]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001f32:	4313      	orrs	r3, r2
 8001f34:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d040      	beq.n	8001fc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d107      	bne.n	8001f5a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f4a:	4b47      	ldr	r3, [pc, #284]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d115      	bne.n	8001f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e07f      	b.n	800205a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d107      	bne.n	8001f72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f62:	4b41      	ldr	r3, [pc, #260]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d109      	bne.n	8001f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e073      	b.n	800205a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f72:	4b3d      	ldr	r3, [pc, #244]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d101      	bne.n	8001f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e06b      	b.n	800205a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f82:	4b39      	ldr	r3, [pc, #228]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f023 0203 	bic.w	r2, r3, #3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	4936      	ldr	r1, [pc, #216]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001f90:	4313      	orrs	r3, r2
 8001f92:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f94:	f7ff fa14 	bl	80013c0 <HAL_GetTick>
 8001f98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f9a:	e00a      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f9c:	f7ff fa10 	bl	80013c0 <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e053      	b.n	800205a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fb2:	4b2d      	ldr	r3, [pc, #180]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f003 020c 	and.w	r2, r3, #12
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d1eb      	bne.n	8001f9c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fc4:	4b27      	ldr	r3, [pc, #156]	; (8002064 <HAL_RCC_ClockConfig+0x1c0>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0307 	and.w	r3, r3, #7
 8001fcc:	683a      	ldr	r2, [r7, #0]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d210      	bcs.n	8001ff4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fd2:	4b24      	ldr	r3, [pc, #144]	; (8002064 <HAL_RCC_ClockConfig+0x1c0>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f023 0207 	bic.w	r2, r3, #7
 8001fda:	4922      	ldr	r1, [pc, #136]	; (8002064 <HAL_RCC_ClockConfig+0x1c0>)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fe2:	4b20      	ldr	r3, [pc, #128]	; (8002064 <HAL_RCC_ClockConfig+0x1c0>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0307 	and.w	r3, r3, #7
 8001fea:	683a      	ldr	r2, [r7, #0]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d001      	beq.n	8001ff4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e032      	b.n	800205a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0304 	and.w	r3, r3, #4
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d008      	beq.n	8002012 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002000:	4b19      	ldr	r3, [pc, #100]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	4916      	ldr	r1, [pc, #88]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 800200e:	4313      	orrs	r3, r2
 8002010:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0308 	and.w	r3, r3, #8
 800201a:	2b00      	cmp	r3, #0
 800201c:	d009      	beq.n	8002032 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800201e:	4b12      	ldr	r3, [pc, #72]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	00db      	lsls	r3, r3, #3
 800202c:	490e      	ldr	r1, [pc, #56]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 800202e:	4313      	orrs	r3, r2
 8002030:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002032:	f000 f821 	bl	8002078 <HAL_RCC_GetSysClockFreq>
 8002036:	4602      	mov	r2, r0
 8002038:	4b0b      	ldr	r3, [pc, #44]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	091b      	lsrs	r3, r3, #4
 800203e:	f003 030f 	and.w	r3, r3, #15
 8002042:	490a      	ldr	r1, [pc, #40]	; (800206c <HAL_RCC_ClockConfig+0x1c8>)
 8002044:	5ccb      	ldrb	r3, [r1, r3]
 8002046:	fa22 f303 	lsr.w	r3, r2, r3
 800204a:	4a09      	ldr	r2, [pc, #36]	; (8002070 <HAL_RCC_ClockConfig+0x1cc>)
 800204c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800204e:	4b09      	ldr	r3, [pc, #36]	; (8002074 <HAL_RCC_ClockConfig+0x1d0>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4618      	mov	r0, r3
 8002054:	f7ff f972 	bl	800133c <HAL_InitTick>

  return HAL_OK;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3710      	adds	r7, #16
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	40022000 	.word	0x40022000
 8002068:	40021000 	.word	0x40021000
 800206c:	08005664 	.word	0x08005664
 8002070:	20000018 	.word	0x20000018
 8002074:	2000001c 	.word	0x2000001c

08002078 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002078:	b490      	push	{r4, r7}
 800207a:	b08a      	sub	sp, #40	; 0x28
 800207c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800207e:	4b29      	ldr	r3, [pc, #164]	; (8002124 <HAL_RCC_GetSysClockFreq+0xac>)
 8002080:	1d3c      	adds	r4, r7, #4
 8002082:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002084:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002088:	f240 2301 	movw	r3, #513	; 0x201
 800208c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800208e:	2300      	movs	r3, #0
 8002090:	61fb      	str	r3, [r7, #28]
 8002092:	2300      	movs	r3, #0
 8002094:	61bb      	str	r3, [r7, #24]
 8002096:	2300      	movs	r3, #0
 8002098:	627b      	str	r3, [r7, #36]	; 0x24
 800209a:	2300      	movs	r3, #0
 800209c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800209e:	2300      	movs	r3, #0
 80020a0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80020a2:	4b21      	ldr	r3, [pc, #132]	; (8002128 <HAL_RCC_GetSysClockFreq+0xb0>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	f003 030c 	and.w	r3, r3, #12
 80020ae:	2b04      	cmp	r3, #4
 80020b0:	d002      	beq.n	80020b8 <HAL_RCC_GetSysClockFreq+0x40>
 80020b2:	2b08      	cmp	r3, #8
 80020b4:	d003      	beq.n	80020be <HAL_RCC_GetSysClockFreq+0x46>
 80020b6:	e02b      	b.n	8002110 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020b8:	4b1c      	ldr	r3, [pc, #112]	; (800212c <HAL_RCC_GetSysClockFreq+0xb4>)
 80020ba:	623b      	str	r3, [r7, #32]
      break;
 80020bc:	e02b      	b.n	8002116 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	0c9b      	lsrs	r3, r3, #18
 80020c2:	f003 030f 	and.w	r3, r3, #15
 80020c6:	3328      	adds	r3, #40	; 0x28
 80020c8:	443b      	add	r3, r7
 80020ca:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80020ce:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d012      	beq.n	8002100 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020da:	4b13      	ldr	r3, [pc, #76]	; (8002128 <HAL_RCC_GetSysClockFreq+0xb0>)
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	0c5b      	lsrs	r3, r3, #17
 80020e0:	f003 0301 	and.w	r3, r3, #1
 80020e4:	3328      	adds	r3, #40	; 0x28
 80020e6:	443b      	add	r3, r7
 80020e8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80020ec:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	4a0e      	ldr	r2, [pc, #56]	; (800212c <HAL_RCC_GetSysClockFreq+0xb4>)
 80020f2:	fb03 f202 	mul.w	r2, r3, r2
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020fc:	627b      	str	r3, [r7, #36]	; 0x24
 80020fe:	e004      	b.n	800210a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	4a0b      	ldr	r2, [pc, #44]	; (8002130 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002104:	fb02 f303 	mul.w	r3, r2, r3
 8002108:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800210a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210c:	623b      	str	r3, [r7, #32]
      break;
 800210e:	e002      	b.n	8002116 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002110:	4b06      	ldr	r3, [pc, #24]	; (800212c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002112:	623b      	str	r3, [r7, #32]
      break;
 8002114:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002116:	6a3b      	ldr	r3, [r7, #32]
}
 8002118:	4618      	mov	r0, r3
 800211a:	3728      	adds	r7, #40	; 0x28
 800211c:	46bd      	mov	sp, r7
 800211e:	bc90      	pop	{r4, r7}
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	08005654 	.word	0x08005654
 8002128:	40021000 	.word	0x40021000
 800212c:	007a1200 	.word	0x007a1200
 8002130:	003d0900 	.word	0x003d0900

08002134 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002138:	4b02      	ldr	r3, [pc, #8]	; (8002144 <HAL_RCC_GetHCLKFreq+0x10>)
 800213a:	681b      	ldr	r3, [r3, #0]
}
 800213c:	4618      	mov	r0, r3
 800213e:	46bd      	mov	sp, r7
 8002140:	bc80      	pop	{r7}
 8002142:	4770      	bx	lr
 8002144:	20000018 	.word	0x20000018

08002148 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800214c:	f7ff fff2 	bl	8002134 <HAL_RCC_GetHCLKFreq>
 8002150:	4602      	mov	r2, r0
 8002152:	4b05      	ldr	r3, [pc, #20]	; (8002168 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	0a1b      	lsrs	r3, r3, #8
 8002158:	f003 0307 	and.w	r3, r3, #7
 800215c:	4903      	ldr	r1, [pc, #12]	; (800216c <HAL_RCC_GetPCLK1Freq+0x24>)
 800215e:	5ccb      	ldrb	r3, [r1, r3]
 8002160:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002164:	4618      	mov	r0, r3
 8002166:	bd80      	pop	{r7, pc}
 8002168:	40021000 	.word	0x40021000
 800216c:	08005674 	.word	0x08005674

08002170 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002174:	f7ff ffde 	bl	8002134 <HAL_RCC_GetHCLKFreq>
 8002178:	4602      	mov	r2, r0
 800217a:	4b05      	ldr	r3, [pc, #20]	; (8002190 <HAL_RCC_GetPCLK2Freq+0x20>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	0adb      	lsrs	r3, r3, #11
 8002180:	f003 0307 	and.w	r3, r3, #7
 8002184:	4903      	ldr	r1, [pc, #12]	; (8002194 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002186:	5ccb      	ldrb	r3, [r1, r3]
 8002188:	fa22 f303 	lsr.w	r3, r2, r3
}
 800218c:	4618      	mov	r0, r3
 800218e:	bd80      	pop	{r7, pc}
 8002190:	40021000 	.word	0x40021000
 8002194:	08005674 	.word	0x08005674

08002198 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002198:	b480      	push	{r7}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021a0:	4b0a      	ldr	r3, [pc, #40]	; (80021cc <RCC_Delay+0x34>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a0a      	ldr	r2, [pc, #40]	; (80021d0 <RCC_Delay+0x38>)
 80021a6:	fba2 2303 	umull	r2, r3, r2, r3
 80021aa:	0a5b      	lsrs	r3, r3, #9
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	fb02 f303 	mul.w	r3, r2, r3
 80021b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80021b4:	bf00      	nop
  }
  while (Delay --);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	1e5a      	subs	r2, r3, #1
 80021ba:	60fa      	str	r2, [r7, #12]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1f9      	bne.n	80021b4 <RCC_Delay+0x1c>
}
 80021c0:	bf00      	nop
 80021c2:	bf00      	nop
 80021c4:	3714      	adds	r7, #20
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bc80      	pop	{r7}
 80021ca:	4770      	bx	lr
 80021cc:	20000018 	.word	0x20000018
 80021d0:	10624dd3 	.word	0x10624dd3

080021d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d101      	bne.n	80021e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e076      	b.n	80022d4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d108      	bne.n	8002200 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80021f6:	d009      	beq.n	800220c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	61da      	str	r2, [r3, #28]
 80021fe:	e005      	b.n	800220c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b00      	cmp	r3, #0
 800221c:	d106      	bne.n	800222c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f7fe fd10 	bl	8000c4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2202      	movs	r2, #2
 8002230:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002242:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002254:	431a      	orrs	r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800225e:	431a      	orrs	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	691b      	ldr	r3, [r3, #16]
 8002264:	f003 0302 	and.w	r3, r3, #2
 8002268:	431a      	orrs	r2, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	695b      	ldr	r3, [r3, #20]
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	431a      	orrs	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800227c:	431a      	orrs	r2, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	69db      	ldr	r3, [r3, #28]
 8002282:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002286:	431a      	orrs	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6a1b      	ldr	r3, [r3, #32]
 800228c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002290:	ea42 0103 	orr.w	r1, r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002298:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	430a      	orrs	r2, r1
 80022a2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	0c1a      	lsrs	r2, r3, #16
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f002 0204 	and.w	r2, r2, #4
 80022b2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	69da      	ldr	r2, [r3, #28]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022c2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2201      	movs	r2, #1
 80022ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80022d2:	2300      	movs	r3, #0
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3708      	adds	r7, #8
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b088      	sub	sp, #32
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	603b      	str	r3, [r7, #0]
 80022e8:	4613      	mov	r3, r2
 80022ea:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80022ec:	2300      	movs	r3, #0
 80022ee:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d101      	bne.n	80022fe <HAL_SPI_Transmit+0x22>
 80022fa:	2302      	movs	r3, #2
 80022fc:	e126      	b.n	800254c <HAL_SPI_Transmit+0x270>
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2201      	movs	r2, #1
 8002302:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002306:	f7ff f85b 	bl	80013c0 <HAL_GetTick>
 800230a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800230c:	88fb      	ldrh	r3, [r7, #6]
 800230e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2b01      	cmp	r3, #1
 800231a:	d002      	beq.n	8002322 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800231c:	2302      	movs	r3, #2
 800231e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002320:	e10b      	b.n	800253a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d002      	beq.n	800232e <HAL_SPI_Transmit+0x52>
 8002328:	88fb      	ldrh	r3, [r7, #6]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d102      	bne.n	8002334 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002332:	e102      	b.n	800253a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2203      	movs	r2, #3
 8002338:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2200      	movs	r2, #0
 8002340:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	68ba      	ldr	r2, [r7, #8]
 8002346:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	88fa      	ldrh	r2, [r7, #6]
 800234c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	88fa      	ldrh	r2, [r7, #6]
 8002352:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2200      	movs	r2, #0
 8002358:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2200      	movs	r2, #0
 800235e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2200      	movs	r2, #0
 8002364:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2200      	movs	r2, #0
 800236a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2200      	movs	r2, #0
 8002370:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800237a:	d10f      	bne.n	800239c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800238a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800239a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023a6:	2b40      	cmp	r3, #64	; 0x40
 80023a8:	d007      	beq.n	80023ba <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023b8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023c2:	d14b      	bne.n	800245c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d002      	beq.n	80023d2 <HAL_SPI_Transmit+0xf6>
 80023cc:	8afb      	ldrh	r3, [r7, #22]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d13e      	bne.n	8002450 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d6:	881a      	ldrh	r2, [r3, #0]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e2:	1c9a      	adds	r2, r3, #2
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	3b01      	subs	r3, #1
 80023f0:	b29a      	uxth	r2, r3
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80023f6:	e02b      	b.n	8002450 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	2b02      	cmp	r3, #2
 8002404:	d112      	bne.n	800242c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240a:	881a      	ldrh	r2, [r3, #0]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002416:	1c9a      	adds	r2, r3, #2
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002420:	b29b      	uxth	r3, r3
 8002422:	3b01      	subs	r3, #1
 8002424:	b29a      	uxth	r2, r3
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	86da      	strh	r2, [r3, #54]	; 0x36
 800242a:	e011      	b.n	8002450 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800242c:	f7fe ffc8 	bl	80013c0 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	683a      	ldr	r2, [r7, #0]
 8002438:	429a      	cmp	r2, r3
 800243a:	d803      	bhi.n	8002444 <HAL_SPI_Transmit+0x168>
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002442:	d102      	bne.n	800244a <HAL_SPI_Transmit+0x16e>
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d102      	bne.n	8002450 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800244e:	e074      	b.n	800253a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002454:	b29b      	uxth	r3, r3
 8002456:	2b00      	cmp	r3, #0
 8002458:	d1ce      	bne.n	80023f8 <HAL_SPI_Transmit+0x11c>
 800245a:	e04c      	b.n	80024f6 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d002      	beq.n	800246a <HAL_SPI_Transmit+0x18e>
 8002464:	8afb      	ldrh	r3, [r7, #22]
 8002466:	2b01      	cmp	r3, #1
 8002468:	d140      	bne.n	80024ec <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	330c      	adds	r3, #12
 8002474:	7812      	ldrb	r2, [r2, #0]
 8002476:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247c:	1c5a      	adds	r2, r3, #1
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002486:	b29b      	uxth	r3, r3
 8002488:	3b01      	subs	r3, #1
 800248a:	b29a      	uxth	r2, r3
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002490:	e02c      	b.n	80024ec <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f003 0302 	and.w	r3, r3, #2
 800249c:	2b02      	cmp	r3, #2
 800249e:	d113      	bne.n	80024c8 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	330c      	adds	r3, #12
 80024aa:	7812      	ldrb	r2, [r2, #0]
 80024ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b2:	1c5a      	adds	r2, r3, #1
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024bc:	b29b      	uxth	r3, r3
 80024be:	3b01      	subs	r3, #1
 80024c0:	b29a      	uxth	r2, r3
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	86da      	strh	r2, [r3, #54]	; 0x36
 80024c6:	e011      	b.n	80024ec <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80024c8:	f7fe ff7a 	bl	80013c0 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	683a      	ldr	r2, [r7, #0]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d803      	bhi.n	80024e0 <HAL_SPI_Transmit+0x204>
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024de:	d102      	bne.n	80024e6 <HAL_SPI_Transmit+0x20a>
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d102      	bne.n	80024ec <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80024ea:	e026      	b.n	800253a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d1cd      	bne.n	8002492 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	6839      	ldr	r1, [r7, #0]
 80024fa:	68f8      	ldr	r0, [r7, #12]
 80024fc:	f000 f8b2 	bl	8002664 <SPI_EndRxTxTransaction>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d002      	beq.n	800250c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2220      	movs	r2, #32
 800250a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d10a      	bne.n	800252a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002514:	2300      	movs	r3, #0
 8002516:	613b      	str	r3, [r7, #16]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	613b      	str	r3, [r7, #16]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	613b      	str	r3, [r7, #16]
 8002528:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800252e:	2b00      	cmp	r3, #0
 8002530:	d002      	beq.n	8002538 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	77fb      	strb	r3, [r7, #31]
 8002536:	e000      	b.n	800253a <HAL_SPI_Transmit+0x25e>
  }

error:
 8002538:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2201      	movs	r2, #1
 800253e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800254a:	7ffb      	ldrb	r3, [r7, #31]
}
 800254c:	4618      	mov	r0, r3
 800254e:	3720      	adds	r7, #32
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}

08002554 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b088      	sub	sp, #32
 8002558:	af00      	add	r7, sp, #0
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	60b9      	str	r1, [r7, #8]
 800255e:	603b      	str	r3, [r7, #0]
 8002560:	4613      	mov	r3, r2
 8002562:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002564:	f7fe ff2c 	bl	80013c0 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800256c:	1a9b      	subs	r3, r3, r2
 800256e:	683a      	ldr	r2, [r7, #0]
 8002570:	4413      	add	r3, r2
 8002572:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002574:	f7fe ff24 	bl	80013c0 <HAL_GetTick>
 8002578:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800257a:	4b39      	ldr	r3, [pc, #228]	; (8002660 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	015b      	lsls	r3, r3, #5
 8002580:	0d1b      	lsrs	r3, r3, #20
 8002582:	69fa      	ldr	r2, [r7, #28]
 8002584:	fb02 f303 	mul.w	r3, r2, r3
 8002588:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800258a:	e054      	b.n	8002636 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002592:	d050      	beq.n	8002636 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002594:	f7fe ff14 	bl	80013c0 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	69bb      	ldr	r3, [r7, #24]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	69fa      	ldr	r2, [r7, #28]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d902      	bls.n	80025aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d13d      	bne.n	8002626 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	685a      	ldr	r2, [r3, #4]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80025b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025c2:	d111      	bne.n	80025e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025cc:	d004      	beq.n	80025d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025d6:	d107      	bne.n	80025e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025f0:	d10f      	bne.n	8002612 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002600:	601a      	str	r2, [r3, #0]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002610:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2201      	movs	r2, #1
 8002616:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e017      	b.n	8002656 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800262c:	2300      	movs	r3, #0
 800262e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	3b01      	subs	r3, #1
 8002634:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	689a      	ldr	r2, [r3, #8]
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	4013      	ands	r3, r2
 8002640:	68ba      	ldr	r2, [r7, #8]
 8002642:	429a      	cmp	r2, r3
 8002644:	bf0c      	ite	eq
 8002646:	2301      	moveq	r3, #1
 8002648:	2300      	movne	r3, #0
 800264a:	b2db      	uxtb	r3, r3
 800264c:	461a      	mov	r2, r3
 800264e:	79fb      	ldrb	r3, [r7, #7]
 8002650:	429a      	cmp	r2, r3
 8002652:	d19b      	bne.n	800258c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3720      	adds	r7, #32
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	20000018 	.word	0x20000018

08002664 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b086      	sub	sp, #24
 8002668:	af02      	add	r7, sp, #8
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	60b9      	str	r1, [r7, #8]
 800266e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	9300      	str	r3, [sp, #0]
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	2200      	movs	r2, #0
 8002678:	2180      	movs	r1, #128	; 0x80
 800267a:	68f8      	ldr	r0, [r7, #12]
 800267c:	f7ff ff6a 	bl	8002554 <SPI_WaitFlagStateUntilTimeout>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d007      	beq.n	8002696 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800268a:	f043 0220 	orr.w	r2, r3, #32
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e000      	b.n	8002698 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002696:	2300      	movs	r3, #0
}
 8002698:	4618      	mov	r0, r3
 800269a:	3710      	adds	r7, #16
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}

080026a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d101      	bne.n	80026b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e041      	b.n	8002736 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d106      	bne.n	80026cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f7fe fafe 	bl	8000cc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2202      	movs	r2, #2
 80026d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	3304      	adds	r3, #4
 80026dc:	4619      	mov	r1, r3
 80026de:	4610      	mov	r0, r2
 80026e0:	f000 fa70 	bl	8002bc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2201      	movs	r2, #1
 80026e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2201      	movs	r2, #1
 80026f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2201      	movs	r2, #1
 80026f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2201      	movs	r2, #1
 8002700:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2201      	movs	r2, #1
 8002710:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3708      	adds	r7, #8
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
	...

08002740 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002740:	b480      	push	{r7}
 8002742:	b085      	sub	sp, #20
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800274e:	b2db      	uxtb	r3, r3
 8002750:	2b01      	cmp	r3, #1
 8002752:	d001      	beq.n	8002758 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e03a      	b.n	80027ce <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2202      	movs	r2, #2
 800275c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	68da      	ldr	r2, [r3, #12]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f042 0201 	orr.w	r2, r2, #1
 800276e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a18      	ldr	r2, [pc, #96]	; (80027d8 <HAL_TIM_Base_Start_IT+0x98>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d00e      	beq.n	8002798 <HAL_TIM_Base_Start_IT+0x58>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002782:	d009      	beq.n	8002798 <HAL_TIM_Base_Start_IT+0x58>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a14      	ldr	r2, [pc, #80]	; (80027dc <HAL_TIM_Base_Start_IT+0x9c>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d004      	beq.n	8002798 <HAL_TIM_Base_Start_IT+0x58>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a13      	ldr	r2, [pc, #76]	; (80027e0 <HAL_TIM_Base_Start_IT+0xa0>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d111      	bne.n	80027bc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f003 0307 	and.w	r3, r3, #7
 80027a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2b06      	cmp	r3, #6
 80027a8:	d010      	beq.n	80027cc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f042 0201 	orr.w	r2, r2, #1
 80027b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027ba:	e007      	b.n	80027cc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f042 0201 	orr.w	r2, r2, #1
 80027ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3714      	adds	r7, #20
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bc80      	pop	{r7}
 80027d6:	4770      	bx	lr
 80027d8:	40012c00 	.word	0x40012c00
 80027dc:	40000400 	.word	0x40000400
 80027e0:	40000800 	.word	0x40000800

080027e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	691b      	ldr	r3, [r3, #16]
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d122      	bne.n	8002840 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	f003 0302 	and.w	r3, r3, #2
 8002804:	2b02      	cmp	r3, #2
 8002806:	d11b      	bne.n	8002840 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f06f 0202 	mvn.w	r2, #2
 8002810:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2201      	movs	r2, #1
 8002816:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	699b      	ldr	r3, [r3, #24]
 800281e:	f003 0303 	and.w	r3, r3, #3
 8002822:	2b00      	cmp	r3, #0
 8002824:	d003      	beq.n	800282e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f000 f9b1 	bl	8002b8e <HAL_TIM_IC_CaptureCallback>
 800282c:	e005      	b.n	800283a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 f9a4 	bl	8002b7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f000 f9b3 	bl	8002ba0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	f003 0304 	and.w	r3, r3, #4
 800284a:	2b04      	cmp	r3, #4
 800284c:	d122      	bne.n	8002894 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	f003 0304 	and.w	r3, r3, #4
 8002858:	2b04      	cmp	r3, #4
 800285a:	d11b      	bne.n	8002894 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f06f 0204 	mvn.w	r2, #4
 8002864:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2202      	movs	r2, #2
 800286a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002876:	2b00      	cmp	r3, #0
 8002878:	d003      	beq.n	8002882 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f000 f987 	bl	8002b8e <HAL_TIM_IC_CaptureCallback>
 8002880:	e005      	b.n	800288e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f000 f97a 	bl	8002b7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f000 f989 	bl	8002ba0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	f003 0308 	and.w	r3, r3, #8
 800289e:	2b08      	cmp	r3, #8
 80028a0:	d122      	bne.n	80028e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	f003 0308 	and.w	r3, r3, #8
 80028ac:	2b08      	cmp	r3, #8
 80028ae:	d11b      	bne.n	80028e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f06f 0208 	mvn.w	r2, #8
 80028b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2204      	movs	r2, #4
 80028be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	69db      	ldr	r3, [r3, #28]
 80028c6:	f003 0303 	and.w	r3, r3, #3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d003      	beq.n	80028d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f000 f95d 	bl	8002b8e <HAL_TIM_IC_CaptureCallback>
 80028d4:	e005      	b.n	80028e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f000 f950 	bl	8002b7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 f95f 	bl	8002ba0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	f003 0310 	and.w	r3, r3, #16
 80028f2:	2b10      	cmp	r3, #16
 80028f4:	d122      	bne.n	800293c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	f003 0310 	and.w	r3, r3, #16
 8002900:	2b10      	cmp	r3, #16
 8002902:	d11b      	bne.n	800293c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f06f 0210 	mvn.w	r2, #16
 800290c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2208      	movs	r2, #8
 8002912:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	69db      	ldr	r3, [r3, #28]
 800291a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800291e:	2b00      	cmp	r3, #0
 8002920:	d003      	beq.n	800292a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f000 f933 	bl	8002b8e <HAL_TIM_IC_CaptureCallback>
 8002928:	e005      	b.n	8002936 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 f926 	bl	8002b7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f000 f935 	bl	8002ba0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	691b      	ldr	r3, [r3, #16]
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	2b01      	cmp	r3, #1
 8002948:	d10e      	bne.n	8002968 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	f003 0301 	and.w	r3, r3, #1
 8002954:	2b01      	cmp	r3, #1
 8002956:	d107      	bne.n	8002968 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f06f 0201 	mvn.w	r2, #1
 8002960:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f7fe f912 	bl	8000b8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002972:	2b80      	cmp	r3, #128	; 0x80
 8002974:	d10e      	bne.n	8002994 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002980:	2b80      	cmp	r3, #128	; 0x80
 8002982:	d107      	bne.n	8002994 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800298c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f000 fa77 	bl	8002e82 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800299e:	2b40      	cmp	r3, #64	; 0x40
 80029a0:	d10e      	bne.n	80029c0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ac:	2b40      	cmp	r3, #64	; 0x40
 80029ae:	d107      	bne.n	80029c0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80029b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f000 f8f9 	bl	8002bb2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	f003 0320 	and.w	r3, r3, #32
 80029ca:	2b20      	cmp	r3, #32
 80029cc:	d10e      	bne.n	80029ec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	f003 0320 	and.w	r3, r3, #32
 80029d8:	2b20      	cmp	r3, #32
 80029da:	d107      	bne.n	80029ec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f06f 0220 	mvn.w	r2, #32
 80029e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 fa42 	bl	8002e70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80029ec:	bf00      	nop
 80029ee:	3708      	adds	r7, #8
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d101      	bne.n	8002a0c <HAL_TIM_ConfigClockSource+0x18>
 8002a08:	2302      	movs	r3, #2
 8002a0a:	e0b3      	b.n	8002b74 <HAL_TIM_ConfigClockSource+0x180>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2202      	movs	r2, #2
 8002a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002a2a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a32:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a44:	d03e      	beq.n	8002ac4 <HAL_TIM_ConfigClockSource+0xd0>
 8002a46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a4a:	f200 8087 	bhi.w	8002b5c <HAL_TIM_ConfigClockSource+0x168>
 8002a4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a52:	f000 8085 	beq.w	8002b60 <HAL_TIM_ConfigClockSource+0x16c>
 8002a56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a5a:	d87f      	bhi.n	8002b5c <HAL_TIM_ConfigClockSource+0x168>
 8002a5c:	2b70      	cmp	r3, #112	; 0x70
 8002a5e:	d01a      	beq.n	8002a96 <HAL_TIM_ConfigClockSource+0xa2>
 8002a60:	2b70      	cmp	r3, #112	; 0x70
 8002a62:	d87b      	bhi.n	8002b5c <HAL_TIM_ConfigClockSource+0x168>
 8002a64:	2b60      	cmp	r3, #96	; 0x60
 8002a66:	d050      	beq.n	8002b0a <HAL_TIM_ConfigClockSource+0x116>
 8002a68:	2b60      	cmp	r3, #96	; 0x60
 8002a6a:	d877      	bhi.n	8002b5c <HAL_TIM_ConfigClockSource+0x168>
 8002a6c:	2b50      	cmp	r3, #80	; 0x50
 8002a6e:	d03c      	beq.n	8002aea <HAL_TIM_ConfigClockSource+0xf6>
 8002a70:	2b50      	cmp	r3, #80	; 0x50
 8002a72:	d873      	bhi.n	8002b5c <HAL_TIM_ConfigClockSource+0x168>
 8002a74:	2b40      	cmp	r3, #64	; 0x40
 8002a76:	d058      	beq.n	8002b2a <HAL_TIM_ConfigClockSource+0x136>
 8002a78:	2b40      	cmp	r3, #64	; 0x40
 8002a7a:	d86f      	bhi.n	8002b5c <HAL_TIM_ConfigClockSource+0x168>
 8002a7c:	2b30      	cmp	r3, #48	; 0x30
 8002a7e:	d064      	beq.n	8002b4a <HAL_TIM_ConfigClockSource+0x156>
 8002a80:	2b30      	cmp	r3, #48	; 0x30
 8002a82:	d86b      	bhi.n	8002b5c <HAL_TIM_ConfigClockSource+0x168>
 8002a84:	2b20      	cmp	r3, #32
 8002a86:	d060      	beq.n	8002b4a <HAL_TIM_ConfigClockSource+0x156>
 8002a88:	2b20      	cmp	r3, #32
 8002a8a:	d867      	bhi.n	8002b5c <HAL_TIM_ConfigClockSource+0x168>
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d05c      	beq.n	8002b4a <HAL_TIM_ConfigClockSource+0x156>
 8002a90:	2b10      	cmp	r3, #16
 8002a92:	d05a      	beq.n	8002b4a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002a94:	e062      	b.n	8002b5c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6818      	ldr	r0, [r3, #0]
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	6899      	ldr	r1, [r3, #8]
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	685a      	ldr	r2, [r3, #4]
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	f000 f966 	bl	8002d76 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ab8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	68fa      	ldr	r2, [r7, #12]
 8002ac0:	609a      	str	r2, [r3, #8]
      break;
 8002ac2:	e04e      	b.n	8002b62 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6818      	ldr	r0, [r3, #0]
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	6899      	ldr	r1, [r3, #8]
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685a      	ldr	r2, [r3, #4]
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	f000 f94f 	bl	8002d76 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	689a      	ldr	r2, [r3, #8]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ae6:	609a      	str	r2, [r3, #8]
      break;
 8002ae8:	e03b      	b.n	8002b62 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6818      	ldr	r0, [r3, #0]
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	6859      	ldr	r1, [r3, #4]
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	461a      	mov	r2, r3
 8002af8:	f000 f8c6 	bl	8002c88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2150      	movs	r1, #80	; 0x50
 8002b02:	4618      	mov	r0, r3
 8002b04:	f000 f91d 	bl	8002d42 <TIM_ITRx_SetConfig>
      break;
 8002b08:	e02b      	b.n	8002b62 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6818      	ldr	r0, [r3, #0]
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	6859      	ldr	r1, [r3, #4]
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	461a      	mov	r2, r3
 8002b18:	f000 f8e4 	bl	8002ce4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2160      	movs	r1, #96	; 0x60
 8002b22:	4618      	mov	r0, r3
 8002b24:	f000 f90d 	bl	8002d42 <TIM_ITRx_SetConfig>
      break;
 8002b28:	e01b      	b.n	8002b62 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6818      	ldr	r0, [r3, #0]
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	6859      	ldr	r1, [r3, #4]
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	461a      	mov	r2, r3
 8002b38:	f000 f8a6 	bl	8002c88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2140      	movs	r1, #64	; 0x40
 8002b42:	4618      	mov	r0, r3
 8002b44:	f000 f8fd 	bl	8002d42 <TIM_ITRx_SetConfig>
      break;
 8002b48:	e00b      	b.n	8002b62 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4619      	mov	r1, r3
 8002b54:	4610      	mov	r0, r2
 8002b56:	f000 f8f4 	bl	8002d42 <TIM_ITRx_SetConfig>
        break;
 8002b5a:	e002      	b.n	8002b62 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002b5c:	bf00      	nop
 8002b5e:	e000      	b.n	8002b62 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002b60:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2201      	movs	r2, #1
 8002b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b72:	2300      	movs	r3, #0
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3710      	adds	r7, #16
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b84:	bf00      	nop
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bc80      	pop	{r7}
 8002b8c:	4770      	bx	lr

08002b8e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	b083      	sub	sp, #12
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b96:	bf00      	nop
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bc80      	pop	{r7}
 8002b9e:	4770      	bx	lr

08002ba0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ba8:	bf00      	nop
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bc80      	pop	{r7}
 8002bb0:	4770      	bx	lr

08002bb2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	b083      	sub	sp, #12
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002bba:	bf00      	nop
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bc80      	pop	{r7}
 8002bc2:	4770      	bx	lr

08002bc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b085      	sub	sp, #20
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	4a29      	ldr	r2, [pc, #164]	; (8002c7c <TIM_Base_SetConfig+0xb8>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d00b      	beq.n	8002bf4 <TIM_Base_SetConfig+0x30>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002be2:	d007      	beq.n	8002bf4 <TIM_Base_SetConfig+0x30>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	4a26      	ldr	r2, [pc, #152]	; (8002c80 <TIM_Base_SetConfig+0xbc>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d003      	beq.n	8002bf4 <TIM_Base_SetConfig+0x30>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	4a25      	ldr	r2, [pc, #148]	; (8002c84 <TIM_Base_SetConfig+0xc0>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d108      	bne.n	8002c06 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	68fa      	ldr	r2, [r7, #12]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a1c      	ldr	r2, [pc, #112]	; (8002c7c <TIM_Base_SetConfig+0xb8>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d00b      	beq.n	8002c26 <TIM_Base_SetConfig+0x62>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c14:	d007      	beq.n	8002c26 <TIM_Base_SetConfig+0x62>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a19      	ldr	r2, [pc, #100]	; (8002c80 <TIM_Base_SetConfig+0xbc>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d003      	beq.n	8002c26 <TIM_Base_SetConfig+0x62>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a18      	ldr	r2, [pc, #96]	; (8002c84 <TIM_Base_SetConfig+0xc0>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d108      	bne.n	8002c38 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	68fa      	ldr	r2, [r7, #12]
 8002c4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	689a      	ldr	r2, [r3, #8]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4a07      	ldr	r2, [pc, #28]	; (8002c7c <TIM_Base_SetConfig+0xb8>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d103      	bne.n	8002c6c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	691a      	ldr	r2, [r3, #16]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	615a      	str	r2, [r3, #20]
}
 8002c72:	bf00      	nop
 8002c74:	3714      	adds	r7, #20
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bc80      	pop	{r7}
 8002c7a:	4770      	bx	lr
 8002c7c:	40012c00 	.word	0x40012c00
 8002c80:	40000400 	.word	0x40000400
 8002c84:	40000800 	.word	0x40000800

08002c88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b087      	sub	sp, #28
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6a1b      	ldr	r3, [r3, #32]
 8002c98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6a1b      	ldr	r3, [r3, #32]
 8002c9e:	f023 0201 	bic.w	r2, r3, #1
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	699b      	ldr	r3, [r3, #24]
 8002caa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002cb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	011b      	lsls	r3, r3, #4
 8002cb8:	693a      	ldr	r2, [r7, #16]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	f023 030a 	bic.w	r3, r3, #10
 8002cc4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002cc6:	697a      	ldr	r2, [r7, #20]
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	693a      	ldr	r2, [r7, #16]
 8002cd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	697a      	ldr	r2, [r7, #20]
 8002cd8:	621a      	str	r2, [r3, #32]
}
 8002cda:	bf00      	nop
 8002cdc:	371c      	adds	r7, #28
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bc80      	pop	{r7}
 8002ce2:	4770      	bx	lr

08002ce4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b087      	sub	sp, #28
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6a1b      	ldr	r3, [r3, #32]
 8002cf4:	f023 0210 	bic.w	r2, r3, #16
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6a1b      	ldr	r3, [r3, #32]
 8002d06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d0e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	031b      	lsls	r3, r3, #12
 8002d14:	697a      	ldr	r2, [r7, #20]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d20:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	011b      	lsls	r3, r3, #4
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	697a      	ldr	r2, [r7, #20]
 8002d30:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	693a      	ldr	r2, [r7, #16]
 8002d36:	621a      	str	r2, [r3, #32]
}
 8002d38:	bf00      	nop
 8002d3a:	371c      	adds	r7, #28
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bc80      	pop	{r7}
 8002d40:	4770      	bx	lr

08002d42 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d42:	b480      	push	{r7}
 8002d44:	b085      	sub	sp, #20
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
 8002d4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d58:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d5a:	683a      	ldr	r2, [r7, #0]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	f043 0307 	orr.w	r3, r3, #7
 8002d64:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	68fa      	ldr	r2, [r7, #12]
 8002d6a:	609a      	str	r2, [r3, #8]
}
 8002d6c:	bf00      	nop
 8002d6e:	3714      	adds	r7, #20
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bc80      	pop	{r7}
 8002d74:	4770      	bx	lr

08002d76 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d76:	b480      	push	{r7}
 8002d78:	b087      	sub	sp, #28
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	60f8      	str	r0, [r7, #12]
 8002d7e:	60b9      	str	r1, [r7, #8]
 8002d80:	607a      	str	r2, [r7, #4]
 8002d82:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d90:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	021a      	lsls	r2, r3, #8
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	431a      	orrs	r2, r3
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	697a      	ldr	r2, [r7, #20]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	697a      	ldr	r2, [r7, #20]
 8002da8:	609a      	str	r2, [r3, #8]
}
 8002daa:	bf00      	nop
 8002dac:	371c      	adds	r7, #28
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bc80      	pop	{r7}
 8002db2:	4770      	bx	lr

08002db4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b085      	sub	sp, #20
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d101      	bne.n	8002dcc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002dc8:	2302      	movs	r3, #2
 8002dca:	e046      	b.n	8002e5a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2202      	movs	r2, #2
 8002dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002df2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	68fa      	ldr	r2, [r7, #12]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	68fa      	ldr	r2, [r7, #12]
 8002e04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a16      	ldr	r2, [pc, #88]	; (8002e64 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d00e      	beq.n	8002e2e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e18:	d009      	beq.n	8002e2e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a12      	ldr	r2, [pc, #72]	; (8002e68 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d004      	beq.n	8002e2e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a10      	ldr	r2, [pc, #64]	; (8002e6c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d10c      	bne.n	8002e48 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	68ba      	ldr	r2, [r7, #8]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	68ba      	ldr	r2, [r7, #8]
 8002e46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3714      	adds	r7, #20
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bc80      	pop	{r7}
 8002e62:	4770      	bx	lr
 8002e64:	40012c00 	.word	0x40012c00
 8002e68:	40000400 	.word	0x40000400
 8002e6c:	40000800 	.word	0x40000800

08002e70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e78:	bf00      	nop
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bc80      	pop	{r7}
 8002e80:	4770      	bx	lr

08002e82 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e82:	b480      	push	{r7}
 8002e84:	b083      	sub	sp, #12
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e8a:	bf00      	nop
 8002e8c:	370c      	adds	r7, #12
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bc80      	pop	{r7}
 8002e92:	4770      	bx	lr

08002e94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d101      	bne.n	8002ea6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e03f      	b.n	8002f26 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d106      	bne.n	8002ec0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f7fd ff20 	bl	8000d00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2224      	movs	r2, #36	; 0x24
 8002ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	68da      	ldr	r2, [r3, #12]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ed6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f000 f96d 	bl	80031b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	691a      	ldr	r2, [r3, #16]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002eec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	695a      	ldr	r2, [r3, #20]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002efc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68da      	ldr	r2, [r3, #12]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2220      	movs	r2, #32
 8002f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2220      	movs	r2, #32
 8002f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3708      	adds	r7, #8
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f2e:	b580      	push	{r7, lr}
 8002f30:	b08a      	sub	sp, #40	; 0x28
 8002f32:	af02      	add	r7, sp, #8
 8002f34:	60f8      	str	r0, [r7, #12]
 8002f36:	60b9      	str	r1, [r7, #8]
 8002f38:	603b      	str	r3, [r7, #0]
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b20      	cmp	r3, #32
 8002f4c:	d17c      	bne.n	8003048 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d002      	beq.n	8002f5a <HAL_UART_Transmit+0x2c>
 8002f54:	88fb      	ldrh	r3, [r7, #6]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d101      	bne.n	8002f5e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e075      	b.n	800304a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d101      	bne.n	8002f6c <HAL_UART_Transmit+0x3e>
 8002f68:	2302      	movs	r3, #2
 8002f6a:	e06e      	b.n	800304a <HAL_UART_Transmit+0x11c>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2200      	movs	r2, #0
 8002f78:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2221      	movs	r2, #33	; 0x21
 8002f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f82:	f7fe fa1d 	bl	80013c0 <HAL_GetTick>
 8002f86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	88fa      	ldrh	r2, [r7, #6]
 8002f8c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	88fa      	ldrh	r2, [r7, #6]
 8002f92:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f9c:	d108      	bne.n	8002fb0 <HAL_UART_Transmit+0x82>
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d104      	bne.n	8002fb0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	61bb      	str	r3, [r7, #24]
 8002fae:	e003      	b.n	8002fb8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002fc0:	e02a      	b.n	8003018 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	9300      	str	r3, [sp, #0]
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	2180      	movs	r1, #128	; 0x80
 8002fcc:	68f8      	ldr	r0, [r7, #12]
 8002fce:	f000 f870 	bl	80030b2 <UART_WaitOnFlagUntilTimeout>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d001      	beq.n	8002fdc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e036      	b.n	800304a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d10b      	bne.n	8002ffa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	881b      	ldrh	r3, [r3, #0]
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ff0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	3302      	adds	r3, #2
 8002ff6:	61bb      	str	r3, [r7, #24]
 8002ff8:	e007      	b.n	800300a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	781a      	ldrb	r2, [r3, #0]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	3301      	adds	r3, #1
 8003008:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800300e:	b29b      	uxth	r3, r3
 8003010:	3b01      	subs	r3, #1
 8003012:	b29a      	uxth	r2, r3
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800301c:	b29b      	uxth	r3, r3
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1cf      	bne.n	8002fc2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	9300      	str	r3, [sp, #0]
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	2200      	movs	r2, #0
 800302a:	2140      	movs	r1, #64	; 0x40
 800302c:	68f8      	ldr	r0, [r7, #12]
 800302e:	f000 f840 	bl	80030b2 <UART_WaitOnFlagUntilTimeout>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d001      	beq.n	800303c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e006      	b.n	800304a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2220      	movs	r2, #32
 8003040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003044:	2300      	movs	r3, #0
 8003046:	e000      	b.n	800304a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003048:	2302      	movs	r3, #2
  }
}
 800304a:	4618      	mov	r0, r3
 800304c:	3720      	adds	r7, #32
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}

08003052 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003052:	b580      	push	{r7, lr}
 8003054:	b084      	sub	sp, #16
 8003056:	af00      	add	r7, sp, #0
 8003058:	60f8      	str	r0, [r7, #12]
 800305a:	60b9      	str	r1, [r7, #8]
 800305c:	4613      	mov	r3, r2
 800305e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003066:	b2db      	uxtb	r3, r3
 8003068:	2b20      	cmp	r3, #32
 800306a:	d11d      	bne.n	80030a8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d002      	beq.n	8003078 <HAL_UART_Receive_IT+0x26>
 8003072:	88fb      	ldrh	r3, [r7, #6]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d101      	bne.n	800307c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e016      	b.n	80030aa <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003082:	2b01      	cmp	r3, #1
 8003084:	d101      	bne.n	800308a <HAL_UART_Receive_IT+0x38>
 8003086:	2302      	movs	r3, #2
 8003088:	e00f      	b.n	80030aa <HAL_UART_Receive_IT+0x58>
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2201      	movs	r2, #1
 800308e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2200      	movs	r2, #0
 8003096:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003098:	88fb      	ldrh	r3, [r7, #6]
 800309a:	461a      	mov	r2, r3
 800309c:	68b9      	ldr	r1, [r7, #8]
 800309e:	68f8      	ldr	r0, [r7, #12]
 80030a0:	f000 f851 	bl	8003146 <UART_Start_Receive_IT>
 80030a4:	4603      	mov	r3, r0
 80030a6:	e000      	b.n	80030aa <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80030a8:	2302      	movs	r3, #2
  }
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3710      	adds	r7, #16
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b084      	sub	sp, #16
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	60f8      	str	r0, [r7, #12]
 80030ba:	60b9      	str	r1, [r7, #8]
 80030bc:	603b      	str	r3, [r7, #0]
 80030be:	4613      	mov	r3, r2
 80030c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030c2:	e02c      	b.n	800311e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ca:	d028      	beq.n	800311e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d007      	beq.n	80030e2 <UART_WaitOnFlagUntilTimeout+0x30>
 80030d2:	f7fe f975 	bl	80013c0 <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d21d      	bcs.n	800311e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	68da      	ldr	r2, [r3, #12]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80030f0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	695a      	ldr	r2, [r3, #20]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f022 0201 	bic.w	r2, r2, #1
 8003100:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2220      	movs	r2, #32
 8003106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2220      	movs	r2, #32
 800310e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e00f      	b.n	800313e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	4013      	ands	r3, r2
 8003128:	68ba      	ldr	r2, [r7, #8]
 800312a:	429a      	cmp	r2, r3
 800312c:	bf0c      	ite	eq
 800312e:	2301      	moveq	r3, #1
 8003130:	2300      	movne	r3, #0
 8003132:	b2db      	uxtb	r3, r3
 8003134:	461a      	mov	r2, r3
 8003136:	79fb      	ldrb	r3, [r7, #7]
 8003138:	429a      	cmp	r2, r3
 800313a:	d0c3      	beq.n	80030c4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3710      	adds	r7, #16
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}

08003146 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003146:	b480      	push	{r7}
 8003148:	b085      	sub	sp, #20
 800314a:	af00      	add	r7, sp, #0
 800314c:	60f8      	str	r0, [r7, #12]
 800314e:	60b9      	str	r1, [r7, #8]
 8003150:	4613      	mov	r3, r2
 8003152:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	68ba      	ldr	r2, [r7, #8]
 8003158:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	88fa      	ldrh	r2, [r7, #6]
 800315e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	88fa      	ldrh	r2, [r7, #6]
 8003164:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2200      	movs	r2, #0
 800316a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2222      	movs	r2, #34	; 0x22
 8003170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	68da      	ldr	r2, [r3, #12]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800318a:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	695a      	ldr	r2, [r3, #20]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f042 0201 	orr.w	r2, r2, #1
 800319a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68da      	ldr	r2, [r3, #12]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f042 0220 	orr.w	r2, r2, #32
 80031aa:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3714      	adds	r7, #20
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bc80      	pop	{r7}
 80031b6:	4770      	bx	lr

080031b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	68da      	ldr	r2, [r3, #12]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	430a      	orrs	r2, r1
 80031d4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	689a      	ldr	r2, [r3, #8]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	431a      	orrs	r2, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	695b      	ldr	r3, [r3, #20]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80031f2:	f023 030c 	bic.w	r3, r3, #12
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	6812      	ldr	r2, [r2, #0]
 80031fa:	68b9      	ldr	r1, [r7, #8]
 80031fc:	430b      	orrs	r3, r1
 80031fe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	695b      	ldr	r3, [r3, #20]
 8003206:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	699a      	ldr	r2, [r3, #24]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	430a      	orrs	r2, r1
 8003214:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a2c      	ldr	r2, [pc, #176]	; (80032cc <UART_SetConfig+0x114>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d103      	bne.n	8003228 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003220:	f7fe ffa6 	bl	8002170 <HAL_RCC_GetPCLK2Freq>
 8003224:	60f8      	str	r0, [r7, #12]
 8003226:	e002      	b.n	800322e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003228:	f7fe ff8e 	bl	8002148 <HAL_RCC_GetPCLK1Freq>
 800322c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800322e:	68fa      	ldr	r2, [r7, #12]
 8003230:	4613      	mov	r3, r2
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	4413      	add	r3, r2
 8003236:	009a      	lsls	r2, r3, #2
 8003238:	441a      	add	r2, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	fbb2 f3f3 	udiv	r3, r2, r3
 8003244:	4a22      	ldr	r2, [pc, #136]	; (80032d0 <UART_SetConfig+0x118>)
 8003246:	fba2 2303 	umull	r2, r3, r2, r3
 800324a:	095b      	lsrs	r3, r3, #5
 800324c:	0119      	lsls	r1, r3, #4
 800324e:	68fa      	ldr	r2, [r7, #12]
 8003250:	4613      	mov	r3, r2
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	4413      	add	r3, r2
 8003256:	009a      	lsls	r2, r3, #2
 8003258:	441a      	add	r2, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	fbb2 f2f3 	udiv	r2, r2, r3
 8003264:	4b1a      	ldr	r3, [pc, #104]	; (80032d0 <UART_SetConfig+0x118>)
 8003266:	fba3 0302 	umull	r0, r3, r3, r2
 800326a:	095b      	lsrs	r3, r3, #5
 800326c:	2064      	movs	r0, #100	; 0x64
 800326e:	fb00 f303 	mul.w	r3, r0, r3
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	011b      	lsls	r3, r3, #4
 8003276:	3332      	adds	r3, #50	; 0x32
 8003278:	4a15      	ldr	r2, [pc, #84]	; (80032d0 <UART_SetConfig+0x118>)
 800327a:	fba2 2303 	umull	r2, r3, r2, r3
 800327e:	095b      	lsrs	r3, r3, #5
 8003280:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003284:	4419      	add	r1, r3
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	4613      	mov	r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	4413      	add	r3, r2
 800328e:	009a      	lsls	r2, r3, #2
 8003290:	441a      	add	r2, r3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	fbb2 f2f3 	udiv	r2, r2, r3
 800329c:	4b0c      	ldr	r3, [pc, #48]	; (80032d0 <UART_SetConfig+0x118>)
 800329e:	fba3 0302 	umull	r0, r3, r3, r2
 80032a2:	095b      	lsrs	r3, r3, #5
 80032a4:	2064      	movs	r0, #100	; 0x64
 80032a6:	fb00 f303 	mul.w	r3, r0, r3
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	011b      	lsls	r3, r3, #4
 80032ae:	3332      	adds	r3, #50	; 0x32
 80032b0:	4a07      	ldr	r2, [pc, #28]	; (80032d0 <UART_SetConfig+0x118>)
 80032b2:	fba2 2303 	umull	r2, r3, r2, r3
 80032b6:	095b      	lsrs	r3, r3, #5
 80032b8:	f003 020f 	and.w	r2, r3, #15
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	440a      	add	r2, r1
 80032c2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80032c4:	bf00      	nop
 80032c6:	3710      	adds	r7, #16
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	40013800 	.word	0x40013800
 80032d0:	51eb851f 	.word	0x51eb851f

080032d4 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	7c1b      	ldrb	r3, [r3, #16]
 80032e2:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80032ea:	461a      	mov	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	fb02 f303 	mul.w	r3, r2, r3
 80032f2:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	00db      	lsls	r3, r3, #3
 80032f8:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032fe:	68fa      	ldr	r2, [r7, #12]
 8003300:	2100      	movs	r1, #0
 8003302:	4618      	mov	r0, r3
 8003304:	f001 fcd6 	bl	8004cb4 <memset>
}
 8003308:	bf00      	nop
 800330a:	3710      	adds	r7, #16
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b086      	sub	sp, #24
 8003314:	af02      	add	r7, sp, #8
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	460b      	mov	r3, r1
 800331a:	70fb      	strb	r3, [r7, #3]
 800331c:	4613      	mov	r3, r2
 800331e:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	7c1b      	ldrb	r3, [r3, #16]
 8003326:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8003328:	78fb      	ldrb	r3, [r7, #3]
 800332a:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003330:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8003332:	7bfb      	ldrb	r3, [r7, #15]
 8003334:	b29b      	uxth	r3, r3
 8003336:	89ba      	ldrh	r2, [r7, #12]
 8003338:	fb02 f303 	mul.w	r3, r2, r3
 800333c:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 800333e:	89bb      	ldrh	r3, [r7, #12]
 8003340:	00db      	lsls	r3, r3, #3
 8003342:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8003344:	89bb      	ldrh	r3, [r7, #12]
 8003346:	68ba      	ldr	r2, [r7, #8]
 8003348:	4413      	add	r3, r2
 800334a:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 800334c:	7bf9      	ldrb	r1, [r7, #15]
 800334e:	78ba      	ldrb	r2, [r7, #2]
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	9300      	str	r3, [sp, #0]
 8003354:	460b      	mov	r3, r1
 8003356:	2100      	movs	r1, #0
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f001 fbb3 	bl	8004ac4 <u8x8_DrawTile>
}
 800335e:	bf00      	nop
 8003360:	3710      	adds	r7, #16
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}

08003366 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8003366:	b580      	push	{r7, lr}
 8003368:	b084      	sub	sp, #16
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 800336e:	2300      	movs	r3, #0
 8003370:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003378:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003380:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	7c5b      	ldrb	r3, [r3, #17]
 8003388:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 800338a:	7bba      	ldrb	r2, [r7, #14]
 800338c:	7bfb      	ldrb	r3, [r7, #15]
 800338e:	4619      	mov	r1, r3
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f7ff ffbd 	bl	8003310 <u8g2_send_tile_row>
    src_row++;
 8003396:	7bfb      	ldrb	r3, [r7, #15]
 8003398:	3301      	adds	r3, #1
 800339a:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 800339c:	7bbb      	ldrb	r3, [r7, #14]
 800339e:	3301      	adds	r3, #1
 80033a0:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 80033a2:	7bfa      	ldrb	r2, [r7, #15]
 80033a4:	7b7b      	ldrb	r3, [r7, #13]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d203      	bcs.n	80033b2 <u8g2_send_buffer+0x4c>
 80033aa:	7bba      	ldrb	r2, [r7, #14]
 80033ac:	7b3b      	ldrb	r3, [r7, #12]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d3eb      	bcc.n	800338a <u8g2_send_buffer+0x24>
}
 80033b2:	bf00      	nop
 80033b4:	3710      	adds	r7, #16
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <u8g2_SetBufferCurrTileRow>:
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
}

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b082      	sub	sp, #8
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
 80033c2:	460b      	mov	r3, r1
 80033c4:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	78fa      	ldrb	r2, [r7, #3]
 80033ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  u8g2->cb->update_dimension(u8g2);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	4798      	blx	r3
}
 80033e2:	bf00      	nop
 80033e4:	3708      	adds	r7, #8
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}

080033ea <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 80033ea:	b580      	push	{r7, lr}
 80033ec:	b082      	sub	sp, #8
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d002      	beq.n	8003402 <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f7ff ff69 	bl	80032d4 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 8003402:	2100      	movs	r1, #0
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f7ff ffd8 	bl	80033ba <u8g2_SetBufferCurrTileRow>
}
 800340a:	bf00      	nop
 800340c:	3708      	adds	r7, #8
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}

08003412 <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 8003412:	b580      	push	{r7, lr}
 8003414:	b084      	sub	sp, #16
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f7ff ffa3 	bl	8003366 <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003426:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 800342e:	7bfb      	ldrb	r3, [r7, #15]
 8003430:	4413      	add	r3, r2
 8003432:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	7c5b      	ldrb	r3, [r3, #17]
 800343a:	7bfa      	ldrb	r2, [r7, #15]
 800343c:	429a      	cmp	r2, r3
 800343e:	d304      	bcc.n	800344a <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f001 fb90 	bl	8004b66 <u8x8_RefreshDisplay>
    return 0;
 8003446:	2300      	movs	r3, #0
 8003448:	e00d      	b.n	8003466 <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8003450:	2b00      	cmp	r3, #0
 8003452:	d002      	beq.n	800345a <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f7ff ff3d 	bl	80032d4 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 800345a:	7bfb      	ldrb	r3, [r7, #15]
 800345c:	4619      	mov	r1, r3
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f7ff ffab 	bl	80033ba <u8g2_SetBufferCurrTileRow>
  return 1;
 8003464:	2301      	movs	r3, #1
}
 8003466:	4618      	mov	r0, r3
 8003468:	3710      	adds	r7, #16
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
	...

08003470 <u8g2_m_16_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2208      	movs	r2, #8
 800347c:	701a      	strb	r2, [r3, #0]
  return buf;
 800347e:	4b03      	ldr	r3, [pc, #12]	; (800348c <u8g2_m_16_8_f+0x1c>)
  #endif
}
 8003480:	4618      	mov	r0, r3
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	bc80      	pop	{r7}
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	20000324 	.word	0x20000324

08003490 <u8g2_Setup_ssd1306_128x64_noname_f>:
  buf = u8g2_m_16_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 f */
void u8g2_Setup_ssd1306_128x64_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b088      	sub	sp, #32
 8003494:	af02      	add	r7, sp, #8
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	60b9      	str	r1, [r7, #8]
 800349a:	607a      	str	r2, [r7, #4]
 800349c:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	9300      	str	r3, [sp, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a0b      	ldr	r2, [pc, #44]	; (80034d4 <u8g2_Setup_ssd1306_128x64_noname_f+0x44>)
 80034a6:	490c      	ldr	r1, [pc, #48]	; (80034d8 <u8g2_Setup_ssd1306_128x64_noname_f+0x48>)
 80034a8:	68f8      	ldr	r0, [r7, #12]
 80034aa:	f001 fbbb 	bl	8004c24 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 80034ae:	f107 0313 	add.w	r3, r7, #19
 80034b2:	4618      	mov	r0, r3
 80034b4:	f7ff ffdc 	bl	8003470 <u8g2_m_16_8_f>
 80034b8:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 80034ba:	7cfa      	ldrb	r2, [r7, #19]
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	9300      	str	r3, [sp, #0]
 80034c0:	4b06      	ldr	r3, [pc, #24]	; (80034dc <u8g2_Setup_ssd1306_128x64_noname_f+0x4c>)
 80034c2:	6979      	ldr	r1, [r7, #20]
 80034c4:	68f8      	ldr	r0, [r7, #12]
 80034c6:	f000 feac 	bl	8004222 <u8g2_SetupBuffer>
}
 80034ca:	bf00      	nop
 80034cc:	3718      	adds	r7, #24
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	080047e9 	.word	0x080047e9
 80034d8:	080049c1 	.word	0x080049c1
 80034dc:	080040a7 	.word	0x080040a7

080034e0 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	460b      	mov	r3, r1
 80034ea:	70fb      	strb	r3, [r7, #3]
  font += offset;
 80034ec:	78fb      	ldrb	r3, [r7, #3]
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	4413      	add	r3, r2
 80034f2:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	781b      	ldrb	r3, [r3, #0]
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bc80      	pop	{r7}
 8003500:	4770      	bx	lr

08003502 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 8003502:	b480      	push	{r7}
 8003504:	b085      	sub	sp, #20
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
 800350a:	460b      	mov	r3, r1
 800350c:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 800350e:	78fb      	ldrb	r3, [r7, #3]
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	4413      	add	r3, r2
 8003514:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	81fb      	strh	r3, [r7, #14]
    font++;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	3301      	adds	r3, #1
 8003520:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8003522:	89fb      	ldrh	r3, [r7, #14]
 8003524:	021b      	lsls	r3, r3, #8
 8003526:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	b29a      	uxth	r2, r3
 800352e:	89fb      	ldrh	r3, [r7, #14]
 8003530:	4413      	add	r3, r2
 8003532:	81fb      	strh	r3, [r7, #14]
    return pos;
 8003534:	89fb      	ldrh	r3, [r7, #14]
}
 8003536:	4618      	mov	r0, r3
 8003538:	3714      	adds	r7, #20
 800353a:	46bd      	mov	sp, r7
 800353c:	bc80      	pop	{r7}
 800353e:	4770      	bx	lr

08003540 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 800354a:	2100      	movs	r1, #0
 800354c:	6838      	ldr	r0, [r7, #0]
 800354e:	f7ff ffc7 	bl	80034e0 <u8g2_font_get_byte>
 8003552:	4603      	mov	r3, r0
 8003554:	461a      	mov	r2, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 800355a:	2101      	movs	r1, #1
 800355c:	6838      	ldr	r0, [r7, #0]
 800355e:	f7ff ffbf 	bl	80034e0 <u8g2_font_get_byte>
 8003562:	4603      	mov	r3, r0
 8003564:	461a      	mov	r2, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 800356a:	2102      	movs	r1, #2
 800356c:	6838      	ldr	r0, [r7, #0]
 800356e:	f7ff ffb7 	bl	80034e0 <u8g2_font_get_byte>
 8003572:	4603      	mov	r3, r0
 8003574:	461a      	mov	r2, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 800357a:	2103      	movs	r1, #3
 800357c:	6838      	ldr	r0, [r7, #0]
 800357e:	f7ff ffaf 	bl	80034e0 <u8g2_font_get_byte>
 8003582:	4603      	mov	r3, r0
 8003584:	461a      	mov	r2, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 800358a:	2104      	movs	r1, #4
 800358c:	6838      	ldr	r0, [r7, #0]
 800358e:	f7ff ffa7 	bl	80034e0 <u8g2_font_get_byte>
 8003592:	4603      	mov	r3, r0
 8003594:	461a      	mov	r2, r3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 800359a:	2105      	movs	r1, #5
 800359c:	6838      	ldr	r0, [r7, #0]
 800359e:	f7ff ff9f 	bl	80034e0 <u8g2_font_get_byte>
 80035a2:	4603      	mov	r3, r0
 80035a4:	461a      	mov	r2, r3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 80035aa:	2106      	movs	r1, #6
 80035ac:	6838      	ldr	r0, [r7, #0]
 80035ae:	f7ff ff97 	bl	80034e0 <u8g2_font_get_byte>
 80035b2:	4603      	mov	r3, r0
 80035b4:	461a      	mov	r2, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 80035ba:	2107      	movs	r1, #7
 80035bc:	6838      	ldr	r0, [r7, #0]
 80035be:	f7ff ff8f 	bl	80034e0 <u8g2_font_get_byte>
 80035c2:	4603      	mov	r3, r0
 80035c4:	461a      	mov	r2, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 80035ca:	2108      	movs	r1, #8
 80035cc:	6838      	ldr	r0, [r7, #0]
 80035ce:	f7ff ff87 	bl	80034e0 <u8g2_font_get_byte>
 80035d2:	4603      	mov	r3, r0
 80035d4:	461a      	mov	r2, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 80035da:	2109      	movs	r1, #9
 80035dc:	6838      	ldr	r0, [r7, #0]
 80035de:	f7ff ff7f 	bl	80034e0 <u8g2_font_get_byte>
 80035e2:	4603      	mov	r3, r0
 80035e4:	b25a      	sxtb	r2, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 80035ea:	210a      	movs	r1, #10
 80035ec:	6838      	ldr	r0, [r7, #0]
 80035ee:	f7ff ff77 	bl	80034e0 <u8g2_font_get_byte>
 80035f2:	4603      	mov	r3, r0
 80035f4:	b25a      	sxtb	r2, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 80035fa:	210b      	movs	r1, #11
 80035fc:	6838      	ldr	r0, [r7, #0]
 80035fe:	f7ff ff6f 	bl	80034e0 <u8g2_font_get_byte>
 8003602:	4603      	mov	r3, r0
 8003604:	b25a      	sxtb	r2, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 800360a:	210c      	movs	r1, #12
 800360c:	6838      	ldr	r0, [r7, #0]
 800360e:	f7ff ff67 	bl	80034e0 <u8g2_font_get_byte>
 8003612:	4603      	mov	r3, r0
 8003614:	b25a      	sxtb	r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 800361a:	210d      	movs	r1, #13
 800361c:	6838      	ldr	r0, [r7, #0]
 800361e:	f7ff ff5f 	bl	80034e0 <u8g2_font_get_byte>
 8003622:	4603      	mov	r3, r0
 8003624:	b25a      	sxtb	r2, r3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 800362a:	210e      	movs	r1, #14
 800362c:	6838      	ldr	r0, [r7, #0]
 800362e:	f7ff ff57 	bl	80034e0 <u8g2_font_get_byte>
 8003632:	4603      	mov	r3, r0
 8003634:	b25a      	sxtb	r2, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 800363a:	210f      	movs	r1, #15
 800363c:	6838      	ldr	r0, [r7, #0]
 800363e:	f7ff ff4f 	bl	80034e0 <u8g2_font_get_byte>
 8003642:	4603      	mov	r3, r0
 8003644:	b25a      	sxtb	r2, r3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 800364a:	2110      	movs	r1, #16
 800364c:	6838      	ldr	r0, [r7, #0]
 800364e:	f7ff ff47 	bl	80034e0 <u8g2_font_get_byte>
 8003652:	4603      	mov	r3, r0
 8003654:	b25a      	sxtb	r2, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 800365a:	2111      	movs	r1, #17
 800365c:	6838      	ldr	r0, [r7, #0]
 800365e:	f7ff ff50 	bl	8003502 <u8g2_font_get_word>
 8003662:	4603      	mov	r3, r0
 8003664:	461a      	mov	r2, r3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 800366a:	2113      	movs	r1, #19
 800366c:	6838      	ldr	r0, [r7, #0]
 800366e:	f7ff ff48 	bl	8003502 <u8g2_font_get_word>
 8003672:	4603      	mov	r3, r0
 8003674:	461a      	mov	r2, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 800367a:	2115      	movs	r1, #21
 800367c:	6838      	ldr	r0, [r7, #0]
 800367e:	f7ff ff40 	bl	8003502 <u8g2_font_get_word>
 8003682:	4603      	mov	r3, r0
 8003684:	461a      	mov	r2, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	82da      	strh	r2, [r3, #22]
#endif
}
 800368a:	bf00      	nop
 800368c:	3708      	adds	r7, #8
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 8003692:	b480      	push	{r7}
 8003694:	b085      	sub	sp, #20
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
 800369a:	460b      	mov	r3, r1
 800369c:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	7b1b      	ldrb	r3, [r3, #12]
 80036a2:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 80036ac:	7bfa      	ldrb	r2, [r7, #15]
 80036ae:	7b7b      	ldrb	r3, [r7, #13]
 80036b0:	fa42 f303 	asr.w	r3, r2, r3
 80036b4:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 80036b6:	7b7b      	ldrb	r3, [r7, #13]
 80036b8:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 80036ba:	7bba      	ldrb	r2, [r7, #14]
 80036bc:	78fb      	ldrb	r3, [r7, #3]
 80036be:	4413      	add	r3, r2
 80036c0:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 80036c2:	7bbb      	ldrb	r3, [r7, #14]
 80036c4:	2b07      	cmp	r3, #7
 80036c6:	d91a      	bls.n	80036fe <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 80036c8:	2308      	movs	r3, #8
 80036ca:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 80036cc:	7b3a      	ldrb	r2, [r7, #12]
 80036ce:	7b7b      	ldrb	r3, [r7, #13]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	1c5a      	adds	r2, r3, #1
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	461a      	mov	r2, r3
 80036e6:	7b3b      	ldrb	r3, [r7, #12]
 80036e8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ec:	b25a      	sxtb	r2, r3
 80036ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	b25b      	sxtb	r3, r3
 80036f6:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 80036f8:	7bbb      	ldrb	r3, [r7, #14]
 80036fa:	3b08      	subs	r3, #8
 80036fc:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 80036fe:	78fb      	ldrb	r3, [r7, #3]
 8003700:	f04f 32ff 	mov.w	r2, #4294967295
 8003704:	fa02 f303 	lsl.w	r3, r2, r3
 8003708:	b2db      	uxtb	r3, r3
 800370a:	43db      	mvns	r3, r3
 800370c:	b2da      	uxtb	r2, r3
 800370e:	7bfb      	ldrb	r3, [r7, #15]
 8003710:	4013      	ands	r3, r2
 8003712:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	7bba      	ldrb	r2, [r7, #14]
 8003718:	731a      	strb	r2, [r3, #12]
  return val;
 800371a:	7bfb      	ldrb	r3, [r7, #15]
}
 800371c:	4618      	mov	r0, r3
 800371e:	3714      	adds	r7, #20
 8003720:	46bd      	mov	sp, r7
 8003722:	bc80      	pop	{r7}
 8003724:	4770      	bx	lr

08003726 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 8003726:	b580      	push	{r7, lr}
 8003728:	b084      	sub	sp, #16
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
 800372e:	460b      	mov	r3, r1
 8003730:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8003732:	78fb      	ldrb	r3, [r7, #3]
 8003734:	4619      	mov	r1, r3
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f7ff ffab 	bl	8003692 <u8g2_font_decode_get_unsigned_bits>
 800373c:	4603      	mov	r3, r0
 800373e:	73fb      	strb	r3, [r7, #15]
  d = 1;
 8003740:	2301      	movs	r3, #1
 8003742:	73bb      	strb	r3, [r7, #14]
  cnt--;
 8003744:	78fb      	ldrb	r3, [r7, #3]
 8003746:	3b01      	subs	r3, #1
 8003748:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 800374a:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800374e:	78fb      	ldrb	r3, [r7, #3]
 8003750:	fa02 f303 	lsl.w	r3, r2, r3
 8003754:	73bb      	strb	r3, [r7, #14]
  v -= d;
 8003756:	7bfa      	ldrb	r2, [r7, #15]
 8003758:	7bbb      	ldrb	r3, [r7, #14]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	b2db      	uxtb	r3, r3
 800375e:	73fb      	strb	r3, [r7, #15]
  return v;
 8003760:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8003764:	4618      	mov	r0, r3
 8003766:	3710      	adds	r7, #16
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <u8g2_font_2x_decode_len>:
  decode->y = ly;  
}


void u8g2_font_2x_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b088      	sub	sp, #32
 8003770:	af02      	add	r7, sp, #8
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	460b      	mov	r3, r1
 8003776:	70fb      	strb	r3, [r7, #3]
 8003778:	4613      	mov	r3, r2
 800377a:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	3360      	adds	r3, #96	; 0x60
 8003780:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 8003782:	78fb      	ldrb	r3, [r7, #3]
 8003784:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800378c:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8003794:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800379c:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 800379e:	7bfa      	ldrb	r2, [r7, #15]
 80037a0:	7d7b      	ldrb	r3, [r7, #21]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 80037a6:	7bfb      	ldrb	r3, [r7, #15]
 80037a8:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 80037aa:	7dfa      	ldrb	r2, [r7, #23]
 80037ac:	7bfb      	ldrb	r3, [r7, #15]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d201      	bcs.n	80037b6 <u8g2_font_2x_decode_len+0x4a>
      current = cnt;
 80037b2:	7dfb      	ldrb	r3, [r7, #23]
 80037b4:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	889b      	ldrh	r3, [r3, #4]
 80037ba:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	88db      	ldrh	r3, [r3, #6]
 80037c0:	817b      	strh	r3, [r7, #10]

    x += lx*2;
 80037c2:	7d7b      	ldrb	r3, [r7, #21]
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	005b      	lsls	r3, r3, #1
 80037c8:	b29a      	uxth	r2, r3
 80037ca:	89bb      	ldrh	r3, [r7, #12]
 80037cc:	4413      	add	r3, r2
 80037ce:	81bb      	strh	r3, [r7, #12]
    y += ly*2;
 80037d0:	7d3b      	ldrb	r3, [r7, #20]
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	005b      	lsls	r3, r3, #1
 80037d6:	b29a      	uxth	r2, r3
 80037d8:	897b      	ldrh	r3, [r7, #10]
 80037da:	4413      	add	r3, r2
 80037dc:	817b      	strh	r3, [r7, #10]
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 80037de:	78bb      	ldrb	r3, [r7, #2]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d01d      	beq.n	8003820 <u8g2_font_2x_decode_len+0xb4>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	7b9a      	ldrb	r2, [r3, #14]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 80037ee:	7dbb      	ldrb	r3, [r7, #22]
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	005b      	lsls	r3, r3, #1
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	897a      	ldrh	r2, [r7, #10]
 80037f8:	89b9      	ldrh	r1, [r7, #12]
 80037fa:	2000      	movs	r0, #0
 80037fc:	9000      	str	r0, [sp, #0]
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 fb68 	bl	8003ed4 <u8g2_DrawHVLine>
	x, 
	y, 
	current*2, 
	0
      );
      u8g2_DrawHVLine(u8g2, 
 8003804:	897b      	ldrh	r3, [r7, #10]
 8003806:	3301      	adds	r3, #1
 8003808:	b29a      	uxth	r2, r3
 800380a:	7dbb      	ldrb	r3, [r7, #22]
 800380c:	b29b      	uxth	r3, r3
 800380e:	005b      	lsls	r3, r3, #1
 8003810:	b29b      	uxth	r3, r3
 8003812:	89b9      	ldrh	r1, [r7, #12]
 8003814:	2000      	movs	r0, #0
 8003816:	9000      	str	r0, [sp, #0]
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f000 fb5b 	bl	8003ed4 <u8g2_DrawHVLine>
 800381e:	e020      	b.n	8003862 <u8g2_font_2x_decode_len+0xf6>
	y+1, 
	current*2, 
	0
      );
    }
    else if ( decode->is_transparent == 0 )    
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	7b5b      	ldrb	r3, [r3, #13]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d11c      	bne.n	8003862 <u8g2_font_2x_decode_len+0xf6>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	7bda      	ldrb	r2, [r3, #15]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 8003832:	7dbb      	ldrb	r3, [r7, #22]
 8003834:	b29b      	uxth	r3, r3
 8003836:	005b      	lsls	r3, r3, #1
 8003838:	b29b      	uxth	r3, r3
 800383a:	897a      	ldrh	r2, [r7, #10]
 800383c:	89b9      	ldrh	r1, [r7, #12]
 800383e:	2000      	movs	r0, #0
 8003840:	9000      	str	r0, [sp, #0]
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 fb46 	bl	8003ed4 <u8g2_DrawHVLine>
	x, 
	y, 
	current*2, 
	0
      );   
      u8g2_DrawHVLine(u8g2, 
 8003848:	897b      	ldrh	r3, [r7, #10]
 800384a:	3301      	adds	r3, #1
 800384c:	b29a      	uxth	r2, r3
 800384e:	7dbb      	ldrb	r3, [r7, #22]
 8003850:	b29b      	uxth	r3, r3
 8003852:	005b      	lsls	r3, r3, #1
 8003854:	b29b      	uxth	r3, r3
 8003856:	89b9      	ldrh	r1, [r7, #12]
 8003858:	2000      	movs	r0, #0
 800385a:	9000      	str	r0, [sp, #0]
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f000 fb39 	bl	8003ed4 <u8g2_DrawHVLine>
	0
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8003862:	7dfa      	ldrb	r2, [r7, #23]
 8003864:	7bfb      	ldrb	r3, [r7, #15]
 8003866:	429a      	cmp	r2, r3
 8003868:	d309      	bcc.n	800387e <u8g2_font_2x_decode_len+0x112>
      break;
    cnt -= rem;
 800386a:	7dfa      	ldrb	r2, [r7, #23]
 800386c:	7bfb      	ldrb	r3, [r7, #15]
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8003872:	2300      	movs	r3, #0
 8003874:	757b      	strb	r3, [r7, #21]
    ly++;
 8003876:	7d3b      	ldrb	r3, [r7, #20]
 8003878:	3301      	adds	r3, #1
 800387a:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 800387c:	e78b      	b.n	8003796 <u8g2_font_2x_decode_len+0x2a>
      break;
 800387e:	bf00      	nop
  }
  lx += cnt;
 8003880:	7d7a      	ldrb	r2, [r7, #21]
 8003882:	7dfb      	ldrb	r3, [r7, #23]
 8003884:	4413      	add	r3, r2
 8003886:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 8003888:	f997 2015 	ldrsb.w	r2, [r7, #21]
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	721a      	strb	r2, [r3, #8]
  decode->y = ly;
 8003890:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	725a      	strb	r2, [r3, #9]
  
}
 8003898:	bf00      	nop
 800389a:	3718      	adds	r7, #24
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <u8g2_font_setup_decode>:


static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	3360      	adds	r3, #96	; 0x60
 80038ae:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	683a      	ldr	r2, [r7, #0]
 80038b4:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2200      	movs	r2, #0
 80038ba:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 80038c2:	4619      	mov	r1, r3
 80038c4:	68f8      	ldr	r0, [r7, #12]
 80038c6:	f7ff fee4 	bl	8003692 <u8g2_font_decode_get_unsigned_bits>
 80038ca:	4603      	mov	r3, r0
 80038cc:	b25a      	sxtb	r2, r3
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 80038d8:	4619      	mov	r1, r3
 80038da:	68f8      	ldr	r0, [r7, #12]
 80038dc:	f7ff fed9 	bl	8003692 <u8g2_font_decode_get_unsigned_bits>
 80038e0:	4603      	mov	r3, r0
 80038e2:	b25a      	sxtb	r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	7b9b      	ldrb	r3, [r3, #14]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	bf0c      	ite	eq
 80038fa:	2301      	moveq	r3, #1
 80038fc:	2300      	movne	r3, #0
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	461a      	mov	r2, r3
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	73da      	strb	r2, [r3, #15]
}
 8003906:	bf00      	nop
 8003908:	3710      	adds	r7, #16
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}

0800390e <u8g2_font_2x_decode_glyph>:
  return d;
}


int8_t u8g2_font_2x_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 800390e:	b580      	push	{r7, lr}
 8003910:	b08a      	sub	sp, #40	; 0x28
 8003912:	af02      	add	r7, sp, #8
 8003914:	6078      	str	r0, [r7, #4]
 8003916:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	3360      	adds	r3, #96	; 0x60
 800391c:	61fb      	str	r3, [r7, #28]
    
  u8g2_font_setup_decode(u8g2, glyph_data);     /* set values in u8g2->font_decode data structure */
 800391e:	6839      	ldr	r1, [r7, #0]
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f7ff ffbd 	bl	80038a0 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800392c:	76fb      	strb	r3, [r7, #27]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8003934:	4619      	mov	r1, r3
 8003936:	69f8      	ldr	r0, [r7, #28]
 8003938:	f7ff fef5 	bl	8003726 <u8g2_font_decode_get_signed_bits>
 800393c:	4603      	mov	r3, r0
 800393e:	76bb      	strb	r3, [r7, #26]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8003946:	4619      	mov	r1, r3
 8003948:	69f8      	ldr	r0, [r7, #28]
 800394a:	f7ff feec 	bl	8003726 <u8g2_font_decode_get_signed_bits>
 800394e:	4603      	mov	r3, r0
 8003950:	767b      	strb	r3, [r7, #25]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003958:	4619      	mov	r1, r3
 800395a:	69f8      	ldr	r0, [r7, #28]
 800395c:	f7ff fee3 	bl	8003726 <u8g2_font_decode_get_signed_bits>
 8003960:	4603      	mov	r3, r0
 8003962:	763b      	strb	r3, [r7, #24]
  
  if ( decode->glyph_width > 0 )
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800396a:	2b00      	cmp	r3, #0
 800396c:	dd7b      	ble.n	8003a66 <u8g2_font_2x_decode_glyph+0x158>
  {
    decode->target_x += x;
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	889a      	ldrh	r2, [r3, #4]
 8003972:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8003976:	b29b      	uxth	r3, r3
 8003978:	4413      	add	r3, r2
 800397a:	b29a      	uxth	r2, r3
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	809a      	strh	r2, [r3, #4]
    decode->target_y -= 2*h+y;
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	88da      	ldrh	r2, [r3, #6]
 8003984:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8003988:	b29b      	uxth	r3, r3
 800398a:	005b      	lsls	r3, r3, #1
 800398c:	b299      	uxth	r1, r3
 800398e:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8003992:	b29b      	uxth	r3, r3
 8003994:	440b      	add	r3, r1
 8003996:	b29b      	uxth	r3, r3
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	b29a      	uxth	r2, r3
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	80da      	strh	r2, [r3, #6]

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	889b      	ldrh	r3, [r3, #4]
 80039a4:	82fb      	strh	r3, [r7, #22]
      y0 = decode->target_y;
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	88db      	ldrh	r3, [r3, #6]
 80039aa:	82bb      	strh	r3, [r7, #20]
      x1 = x0;
 80039ac:	8afb      	ldrh	r3, [r7, #22]
 80039ae:	827b      	strh	r3, [r7, #18]
      y1 = y0;
 80039b0:	8abb      	ldrh	r3, [r7, #20]
 80039b2:	823b      	strh	r3, [r7, #16]
      
      x1 += 2*decode->glyph_width;
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	005b      	lsls	r3, r3, #1
 80039be:	b29a      	uxth	r2, r3
 80039c0:	8a7b      	ldrh	r3, [r7, #18]
 80039c2:	4413      	add	r3, r2
 80039c4:	827b      	strh	r3, [r7, #18]
      y1 += 2*h;      
 80039c6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	005b      	lsls	r3, r3, #1
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	8a3b      	ldrh	r3, [r7, #16]
 80039d2:	4413      	add	r3, r2
 80039d4:	823b      	strh	r3, [r7, #16]
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 80039d6:	8a78      	ldrh	r0, [r7, #18]
 80039d8:	8aba      	ldrh	r2, [r7, #20]
 80039da:	8af9      	ldrh	r1, [r7, #22]
 80039dc:	8a3b      	ldrh	r3, [r7, #16]
 80039de:	9300      	str	r3, [sp, #0]
 80039e0:	4603      	mov	r3, r0
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f000 fb34 	bl	8004050 <u8g2_IsIntersection>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d102      	bne.n	80039f4 <u8g2_font_2x_decode_glyph+0xe6>
	return d;
 80039ee:	f997 3018 	ldrsb.w	r3, [r7, #24]
 80039f2:	e03c      	b.n	8003a6e <u8g2_font_2x_decode_glyph+0x160>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	2200      	movs	r2, #0
 80039f8:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	2200      	movs	r2, #0
 80039fe:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8003a06:	4619      	mov	r1, r3
 8003a08:	69f8      	ldr	r0, [r7, #28]
 8003a0a:	f7ff fe42 	bl	8003692 <u8g2_font_decode_get_unsigned_bits>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8003a18:	4619      	mov	r1, r3
 8003a1a:	69f8      	ldr	r0, [r7, #28]
 8003a1c:	f7ff fe39 	bl	8003692 <u8g2_font_decode_get_unsigned_bits>
 8003a20:	4603      	mov	r3, r0
 8003a22:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_2x_decode_len(u8g2, a, 0);
 8003a24:	7bfb      	ldrb	r3, [r7, #15]
 8003a26:	2200      	movs	r2, #0
 8003a28:	4619      	mov	r1, r3
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f7ff fe9e 	bl	800376c <u8g2_font_2x_decode_len>
	u8g2_font_2x_decode_len(u8g2, b, 1);
 8003a30:	7bbb      	ldrb	r3, [r7, #14]
 8003a32:	2201      	movs	r2, #1
 8003a34:	4619      	mov	r1, r3
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f7ff fe98 	bl	800376c <u8g2_font_2x_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8003a3c:	2101      	movs	r1, #1
 8003a3e:	69f8      	ldr	r0, [r7, #28]
 8003a40:	f7ff fe27 	bl	8003692 <u8g2_font_decode_get_unsigned_bits>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d1ec      	bne.n	8003a24 <u8g2_font_2x_decode_glyph+0x116>

      if ( decode->y >= h )
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8003a50:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	dd00      	ble.n	8003a5a <u8g2_font_2x_decode_glyph+0x14c>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8003a58:	e7d2      	b.n	8003a00 <u8g2_font_2x_decode_glyph+0xf2>
	break;
 8003a5a:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	7b9a      	ldrb	r2, [r3, #14]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  }
  return d*2;
 8003a66:	7e3b      	ldrb	r3, [r7, #24]
 8003a68:	005b      	lsls	r3, r3, #1
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	b25b      	sxtb	r3, r3
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3720      	adds	r7, #32
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}

08003a76 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8003a76:	b580      	push	{r7, lr}
 8003a78:	b086      	sub	sp, #24
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
 8003a7e:	460b      	mov	r3, r1
 8003a80:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a86:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	3317      	adds	r3, #23
 8003a8c:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 8003a8e:	887b      	ldrh	r3, [r7, #2]
 8003a90:	2bff      	cmp	r3, #255	; 0xff
 8003a92:	d82a      	bhi.n	8003aea <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 8003a94:	887b      	ldrh	r3, [r7, #2]
 8003a96:	2b60      	cmp	r3, #96	; 0x60
 8003a98:	d907      	bls.n	8003aaa <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	4413      	add	r3, r2
 8003aa6:	617b      	str	r3, [r7, #20]
 8003aa8:	e009      	b.n	8003abe <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8003aaa:	887b      	ldrh	r3, [r7, #2]
 8003aac:	2b40      	cmp	r3, #64	; 0x40
 8003aae:	d906      	bls.n	8003abe <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	4413      	add	r3, r2
 8003abc:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	3301      	adds	r3, #1
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d04e      	beq.n	8003b66 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	887a      	ldrh	r2, [r7, #2]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d102      	bne.n	8003ada <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	3302      	adds	r3, #2
 8003ad8:	e049      	b.n	8003b6e <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	3301      	adds	r3, #1
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8003ae8:	e7e9      	b.n	8003abe <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8003af0:	461a      	mov	r2, r3
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	4413      	add	r3, r2
 8003af6:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8003afc:	2100      	movs	r1, #0
 8003afe:	6938      	ldr	r0, [r7, #16]
 8003b00:	f7ff fcff 	bl	8003502 <u8g2_font_get_word>
 8003b04:	4603      	mov	r3, r0
 8003b06:	461a      	mov	r2, r3
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	4413      	add	r3, r2
 8003b0c:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8003b0e:	2102      	movs	r1, #2
 8003b10:	6938      	ldr	r0, [r7, #16]
 8003b12:	f7ff fcf6 	bl	8003502 <u8g2_font_get_word>
 8003b16:	4603      	mov	r3, r0
 8003b18:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	3304      	adds	r3, #4
 8003b1e:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 8003b20:	89fa      	ldrh	r2, [r7, #14]
 8003b22:	887b      	ldrh	r3, [r7, #2]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d3e9      	bcc.n	8003afc <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 8003b2e:	89fb      	ldrh	r3, [r7, #14]
 8003b30:	021b      	lsls	r3, r3, #8
 8003b32:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	3301      	adds	r3, #1
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	b29a      	uxth	r2, r3
 8003b3c:	89fb      	ldrh	r3, [r7, #14]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 8003b42:	89fb      	ldrh	r3, [r7, #14]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d010      	beq.n	8003b6a <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 8003b48:	89fa      	ldrh	r2, [r7, #14]
 8003b4a:	887b      	ldrh	r3, [r7, #2]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d102      	bne.n	8003b56 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	3303      	adds	r3, #3
 8003b54:	e00b      	b.n	8003b6e <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	3302      	adds	r3, #2
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	4413      	add	r3, r2
 8003b62:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 8003b64:	e7e0      	b.n	8003b28 <u8g2_font_get_glyph_data+0xb2>
	break;
 8003b66:	bf00      	nop
 8003b68:	e000      	b.n	8003b6c <u8g2_font_get_glyph_data+0xf6>
	break;
 8003b6a:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3718      	adds	r7, #24
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}

08003b76 <u8g2_font_2x_draw_glyph>:
  }
  return dx;
}

static u8g2_uint_t u8g2_font_2x_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8003b76:	b580      	push	{r7, lr}
 8003b78:	b086      	sub	sp, #24
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	60f8      	str	r0, [r7, #12]
 8003b7e:	4608      	mov	r0, r1
 8003b80:	4611      	mov	r1, r2
 8003b82:	461a      	mov	r2, r3
 8003b84:	4603      	mov	r3, r0
 8003b86:	817b      	strh	r3, [r7, #10]
 8003b88:	460b      	mov	r3, r1
 8003b8a:	813b      	strh	r3, [r7, #8]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t dx = 0;
 8003b90:	2300      	movs	r3, #0
 8003b92:	82fb      	strh	r3, [r7, #22]
  u8g2->font_decode.target_x = x;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	897a      	ldrh	r2, [r7, #10]
 8003b98:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  u8g2->font_decode.target_y = y;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	893a      	ldrh	r2, [r7, #8]
 8003ba0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8003ba4:	88fb      	ldrh	r3, [r7, #6]
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	68f8      	ldr	r0, [r7, #12]
 8003baa:	f7ff ff64 	bl	8003a76 <u8g2_font_get_glyph_data>
 8003bae:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d005      	beq.n	8003bc2 <u8g2_font_2x_draw_glyph+0x4c>
  {
    dx = u8g2_font_2x_decode_glyph(u8g2, glyph_data);
 8003bb6:	6939      	ldr	r1, [r7, #16]
 8003bb8:	68f8      	ldr	r0, [r7, #12]
 8003bba:	f7ff fea8 	bl	800390e <u8g2_font_2x_decode_glyph>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 8003bc2:	8afb      	ldrh	r3, [r7, #22]
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3718      	adds	r7, #24
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <u8g2_DrawGlyphX2>:
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
}

u8g2_uint_t u8g2_DrawGlyphX2(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	4608      	mov	r0, r1
 8003bd6:	4611      	mov	r1, r2
 8003bd8:	461a      	mov	r2, r3
 8003bda:	4603      	mov	r3, r0
 8003bdc:	817b      	strh	r3, [r7, #10]
 8003bde:	460b      	mov	r3, r1
 8003be0:	813b      	strh	r3, [r7, #8]
 8003be2:	4613      	mov	r3, r2
 8003be4:	80fb      	strh	r3, [r7, #6]
  y += 2*u8g2->font_calc_vref(u8g2);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bea:	68f8      	ldr	r0, [r7, #12]
 8003bec:	4798      	blx	r3
 8003bee:	4603      	mov	r3, r0
 8003bf0:	005b      	lsls	r3, r3, #1
 8003bf2:	b29a      	uxth	r2, r3
 8003bf4:	893b      	ldrh	r3, [r7, #8]
 8003bf6:	4413      	add	r3, r2
 8003bf8:	813b      	strh	r3, [r7, #8]
  return u8g2_font_2x_draw_glyph(u8g2, x, y, encoding);
 8003bfa:	88fb      	ldrh	r3, [r7, #6]
 8003bfc:	893a      	ldrh	r2, [r7, #8]
 8003bfe:	8979      	ldrh	r1, [r7, #10]
 8003c00:	68f8      	ldr	r0, [r7, #12]
 8003c02:	f7ff ffb8 	bl	8003b76 <u8g2_font_2x_draw_glyph>
 8003c06:	4603      	mov	r3, r0
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3710      	adds	r7, #16
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <u8g2_draw_string_2x>:
  return sum;
}

static u8g2_uint_t u8g2_draw_string_2x(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string_2x(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b086      	sub	sp, #24
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	607b      	str	r3, [r7, #4]
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	817b      	strh	r3, [r7, #10]
 8003c1e:	4613      	mov	r3, r2
 8003c20:	813b      	strh	r3, [r7, #8]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8003c22:	68f8      	ldr	r0, [r7, #12]
 8003c24:	f000 fcdd 	bl	80045e2 <u8x8_utf8_init>
  sum = 0;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	82fb      	strh	r3, [r7, #22]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	7812      	ldrb	r2, [r2, #0]
 8003c34:	4611      	mov	r1, r2
 8003c36:	68f8      	ldr	r0, [r7, #12]
 8003c38:	4798      	blx	r3
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 8003c3e:	8abb      	ldrh	r3, [r7, #20]
 8003c40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d018      	beq.n	8003c7a <u8g2_draw_string_2x+0x6a>
      break;
    str++;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 8003c4e:	8abb      	ldrh	r3, [r7, #20]
 8003c50:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d0e9      	beq.n	8003c2c <u8g2_draw_string_2x+0x1c>
    {
      delta = u8g2_DrawGlyphX2(u8g2, x, y, e);
 8003c58:	8abb      	ldrh	r3, [r7, #20]
 8003c5a:	893a      	ldrh	r2, [r7, #8]
 8003c5c:	8979      	ldrh	r1, [r7, #10]
 8003c5e:	68f8      	ldr	r0, [r7, #12]
 8003c60:	f7ff ffb4 	bl	8003bcc <u8g2_DrawGlyphX2>
 8003c64:	4603      	mov	r3, r0
 8003c66:	827b      	strh	r3, [r7, #18]
      x += delta;
 8003c68:	897a      	ldrh	r2, [r7, #10]
 8003c6a:	8a7b      	ldrh	r3, [r7, #18]
 8003c6c:	4413      	add	r3, r2
 8003c6e:	817b      	strh	r3, [r7, #10]
      sum += delta;    
 8003c70:	8afa      	ldrh	r2, [r7, #22]
 8003c72:	8a7b      	ldrh	r3, [r7, #18]
 8003c74:	4413      	add	r3, r2
 8003c76:	82fb      	strh	r3, [r7, #22]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8003c78:	e7d8      	b.n	8003c2c <u8g2_draw_string_2x+0x1c>
      break;
 8003c7a:	bf00      	nop
    }
  }
  return sum;
 8003c7c:	8afb      	ldrh	r3, [r7, #22]
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3718      	adds	r7, #24
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
	...

08003c88 <u8g2_DrawStrX2>:
  u8g2->u8x8.next_cb = u8x8_ascii_next;
  return u8g2_draw_string(u8g2, x, y, str);
}

u8g2_uint_t u8g2_DrawStrX2(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	607b      	str	r3, [r7, #4]
 8003c92:	460b      	mov	r3, r1
 8003c94:	817b      	strh	r3, [r7, #10]
 8003c96:	4613      	mov	r3, r2
 8003c98:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	4a06      	ldr	r2, [pc, #24]	; (8003cb8 <u8g2_DrawStrX2+0x30>)
 8003c9e:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string_2x(u8g2, x, y, str);
 8003ca0:	893a      	ldrh	r2, [r7, #8]
 8003ca2:	8979      	ldrh	r1, [r7, #10]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	68f8      	ldr	r0, [r7, #12]
 8003ca8:	f7ff ffb2 	bl	8003c10 <u8g2_draw_string_2x>
 8003cac:	4603      	mov	r3, r0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3710      	adds	r7, #16
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	080045fd 	.word	0x080045fd

08003cbc <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d05d      	beq.n	8003d88 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f993 2081 	ldrsb.w	r2, [r3, #129]	; 0x81
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f993 2082 	ldrsb.w	r2, [r3, #130]	; 0x82
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d04d      	beq.n	8003d8a <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d11c      	bne.n	8003d32 <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f993 208e 	ldrsb.w	r2, [r3, #142]	; 0x8e
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f993 3083 	ldrsb.w	r3, [r3, #131]	; 0x83
 8003d04:	429a      	cmp	r2, r3
 8003d06:	da05      	bge.n	8003d14 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f993 3084 	ldrsb.w	r3, [r3, #132]	; 0x84
 8003d20:	429a      	cmp	r2, r3
 8003d22:	dd32      	ble.n	8003d8a <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f993 2084 	ldrsb.w	r2, [r3, #132]	; 0x84
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8003d30:	e02b      	b.n	8003d8a <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 8003d38:	461a      	mov	r2, r3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8003d40:	4619      	mov	r1, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8003d48:	440b      	add	r3, r1
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	da0d      	bge.n	8003d6a <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8003d54:	b2da      	uxtb	r2, r3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	4413      	add	r3, r2
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	b25a      	sxtb	r2, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8003d76:	429a      	cmp	r2, r3
 8003d78:	dd07      	ble.n	8003d8a <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f993 2080 	ldrsb.w	r2, [r3, #128]	; 0x80
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8003d86:	e000      	b.n	8003d8a <u8g2_UpdateRefHeight+0xce>
    return;
 8003d88:	bf00      	nop
  }  
}
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bc80      	pop	{r7}
 8003d90:	4770      	bx	lr

08003d92 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8003d92:	b480      	push	{r7}
 8003d94:	b083      	sub	sp, #12
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
  return 0;
 8003d9a:	2300      	movs	r3, #0
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bc80      	pop	{r7}
 8003da4:	4770      	bx	lr
	...

08003da8 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4a03      	ldr	r2, [pc, #12]	; (8003dc0 <u8g2_SetFontPosBaseline+0x18>)
 8003db4:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003db6:	bf00      	nop
 8003db8:	370c      	adds	r7, #12
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bc80      	pop	{r7}
 8003dbe:	4770      	bx	lr
 8003dc0:	08003d93 	.word	0x08003d93

08003dc4 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dd2:	683a      	ldr	r2, [r7, #0]
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d00b      	beq.n	8003df0 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	683a      	ldr	r2, [r7, #0]
 8003ddc:	659a      	str	r2, [r3, #88]	; 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	3374      	adds	r3, #116	; 0x74
 8003de2:	6839      	ldr	r1, [r7, #0]
 8003de4:	4618      	mov	r0, r3
 8003de6:	f7ff fbab 	bl	8003540 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f7ff ff66 	bl	8003cbc <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8003df0:	bf00      	nop
 8003df2:	3708      	adds	r7, #8
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b087      	sub	sp, #28
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	60b9      	str	r1, [r7, #8]
 8003e02:	4611      	mov	r1, r2
 8003e04:	461a      	mov	r2, r3
 8003e06:	460b      	mov	r3, r1
 8003e08:	80fb      	strh	r3, [r7, #6]
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	881b      	ldrh	r3, [r3, #0]
 8003e12:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 8003e14:	8afb      	ldrh	r3, [r7, #22]
 8003e16:	82bb      	strh	r3, [r7, #20]
  b += *len;
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	881a      	ldrh	r2, [r3, #0]
 8003e1c:	8abb      	ldrh	r3, [r7, #20]
 8003e1e:	4413      	add	r3, r2
 8003e20:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8003e22:	8afa      	ldrh	r2, [r7, #22]
 8003e24:	8abb      	ldrh	r3, [r7, #20]
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d90b      	bls.n	8003e42 <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 8003e2a:	8afa      	ldrh	r2, [r7, #22]
 8003e2c:	88bb      	ldrh	r3, [r7, #4]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d205      	bcs.n	8003e3e <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8003e32:	88bb      	ldrh	r3, [r7, #4]
 8003e34:	82bb      	strh	r3, [r7, #20]
      b--;
 8003e36:	8abb      	ldrh	r3, [r7, #20]
 8003e38:	3b01      	subs	r3, #1
 8003e3a:	82bb      	strh	r3, [r7, #20]
 8003e3c:	e001      	b.n	8003e42 <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 8003e3e:	88fb      	ldrh	r3, [r7, #6]
 8003e40:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8003e42:	8afa      	ldrh	r2, [r7, #22]
 8003e44:	88bb      	ldrh	r3, [r7, #4]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d301      	bcc.n	8003e4e <u8g2_clip_intersection2+0x56>
    return 0;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	e01c      	b.n	8003e88 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 8003e4e:	8aba      	ldrh	r2, [r7, #20]
 8003e50:	88fb      	ldrh	r3, [r7, #6]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d801      	bhi.n	8003e5a <u8g2_clip_intersection2+0x62>
    return 0;
 8003e56:	2300      	movs	r3, #0
 8003e58:	e016      	b.n	8003e88 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 8003e5a:	8afa      	ldrh	r2, [r7, #22]
 8003e5c:	88fb      	ldrh	r3, [r7, #6]
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d201      	bcs.n	8003e66 <u8g2_clip_intersection2+0x6e>
    a = c;
 8003e62:	88fb      	ldrh	r3, [r7, #6]
 8003e64:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 8003e66:	8aba      	ldrh	r2, [r7, #20]
 8003e68:	88bb      	ldrh	r3, [r7, #4]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d901      	bls.n	8003e72 <u8g2_clip_intersection2+0x7a>
    b = d;
 8003e6e:	88bb      	ldrh	r3, [r7, #4]
 8003e70:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	8afa      	ldrh	r2, [r7, #22]
 8003e76:	801a      	strh	r2, [r3, #0]
  b -= a;
 8003e78:	8aba      	ldrh	r2, [r7, #20]
 8003e7a:	8afb      	ldrh	r3, [r7, #22]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	82bb      	strh	r3, [r7, #20]
  *len = b;
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	8aba      	ldrh	r2, [r7, #20]
 8003e84:	801a      	strh	r2, [r3, #0]
  return 1;
 8003e86:	2301      	movs	r3, #1
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	371c      	adds	r7, #28
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bc80      	pop	{r7}
 8003e90:	4770      	bx	lr

08003e92 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8003e92:	b590      	push	{r4, r7, lr}
 8003e94:	b087      	sub	sp, #28
 8003e96:	af02      	add	r7, sp, #8
 8003e98:	60f8      	str	r0, [r7, #12]
 8003e9a:	4608      	mov	r0, r1
 8003e9c:	4611      	mov	r1, r2
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	817b      	strh	r3, [r7, #10]
 8003ea4:	460b      	mov	r3, r1
 8003ea6:	813b      	strh	r3, [r7, #8]
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eb0:	893a      	ldrh	r2, [r7, #8]
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8003eba:	88f8      	ldrh	r0, [r7, #6]
 8003ebc:	893a      	ldrh	r2, [r7, #8]
 8003ebe:	8979      	ldrh	r1, [r7, #10]
 8003ec0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003ec4:	9300      	str	r3, [sp, #0]
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	68f8      	ldr	r0, [r7, #12]
 8003eca:	47a0      	blx	r4
}
 8003ecc:	bf00      	nop
 8003ece:	3714      	adds	r7, #20
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd90      	pop	{r4, r7, pc}

08003ed4 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8003ed4:	b590      	push	{r4, r7, lr}
 8003ed6:	b087      	sub	sp, #28
 8003ed8:	af02      	add	r7, sp, #8
 8003eda:	60f8      	str	r0, [r7, #12]
 8003edc:	4608      	mov	r0, r1
 8003ede:	4611      	mov	r1, r2
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	817b      	strh	r3, [r7, #10]
 8003ee6:	460b      	mov	r3, r1
 8003ee8:	813b      	strh	r3, [r7, #8]
 8003eea:	4613      	mov	r3, r2
 8003eec:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d075      	beq.n	8003fe4 <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8003ef8:	88fb      	ldrh	r3, [r7, #6]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d072      	beq.n	8003fe4 <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8003efe:	88fb      	ldrh	r3, [r7, #6]
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d91a      	bls.n	8003f3a <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 8003f04:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d109      	bne.n	8003f20 <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 8003f0c:	897a      	ldrh	r2, [r7, #10]
 8003f0e:	88fb      	ldrh	r3, [r7, #6]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	817b      	strh	r3, [r7, #10]
	  x++;
 8003f16:	897b      	ldrh	r3, [r7, #10]
 8003f18:	3301      	adds	r3, #1
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	817b      	strh	r3, [r7, #10]
 8003f1e:	e00c      	b.n	8003f3a <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 8003f20:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003f24:	2b03      	cmp	r3, #3
 8003f26:	d108      	bne.n	8003f3a <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 8003f28:	893a      	ldrh	r2, [r7, #8]
 8003f2a:	88fb      	ldrh	r3, [r7, #6]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	813b      	strh	r3, [r7, #8]
	  y++;
 8003f32:	893b      	ldrh	r3, [r7, #8]
 8003f34:	3301      	adds	r3, #1
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 8003f3a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003f3e:	f003 0301 	and.w	r3, r3, #1
 8003f42:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 8003f46:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d11a      	bne.n	8003f84 <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8003f54:	893b      	ldrh	r3, [r7, #8]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d83b      	bhi.n	8003fd2 <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8003f60:	893b      	ldrh	r3, [r7, #8]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d937      	bls.n	8003fd6 <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8003f72:	1db9      	adds	r1, r7, #6
 8003f74:	f107 000a 	add.w	r0, r7, #10
 8003f78:	f7ff ff3e 	bl	8003df8 <u8g2_clip_intersection2>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d11a      	bne.n	8003fb8 <u8g2_DrawHVLine+0xe4>
	  return;
 8003f82:	e02f      	b.n	8003fe4 <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8003f8a:	897b      	ldrh	r3, [r7, #10]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d824      	bhi.n	8003fda <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8003f96:	897b      	ldrh	r3, [r7, #10]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d920      	bls.n	8003fde <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8003fa8:	1db9      	adds	r1, r7, #6
 8003faa:	f107 0008 	add.w	r0, r7, #8
 8003fae:	f7ff ff23 	bl	8003df8 <u8g2_clip_intersection2>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d014      	beq.n	8003fe2 <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fbc:	689c      	ldr	r4, [r3, #8]
 8003fbe:	8979      	ldrh	r1, [r7, #10]
 8003fc0:	893a      	ldrh	r2, [r7, #8]
 8003fc2:	88f8      	ldrh	r0, [r7, #6]
 8003fc4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003fc8:	9300      	str	r3, [sp, #0]
 8003fca:	4603      	mov	r3, r0
 8003fcc:	68f8      	ldr	r0, [r7, #12]
 8003fce:	47a0      	blx	r4
 8003fd0:	e008      	b.n	8003fe4 <u8g2_DrawHVLine+0x110>
	  return;
 8003fd2:	bf00      	nop
 8003fd4:	e006      	b.n	8003fe4 <u8g2_DrawHVLine+0x110>
	  return;
 8003fd6:	bf00      	nop
 8003fd8:	e004      	b.n	8003fe4 <u8g2_DrawHVLine+0x110>
	  return;
 8003fda:	bf00      	nop
 8003fdc:	e002      	b.n	8003fe4 <u8g2_DrawHVLine+0x110>
	  return;
 8003fde:	bf00      	nop
 8003fe0:	e000      	b.n	8003fe4 <u8g2_DrawHVLine+0x110>
	  return;
 8003fe2:	bf00      	nop
    }
}
 8003fe4:	3714      	adds	r7, #20
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd90      	pop	{r4, r7, pc}

08003fea <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8003fea:	b490      	push	{r4, r7}
 8003fec:	b082      	sub	sp, #8
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	4604      	mov	r4, r0
 8003ff2:	4608      	mov	r0, r1
 8003ff4:	4611      	mov	r1, r2
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	4623      	mov	r3, r4
 8003ffa:	80fb      	strh	r3, [r7, #6]
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	80bb      	strh	r3, [r7, #4]
 8004000:	460b      	mov	r3, r1
 8004002:	807b      	strh	r3, [r7, #2]
 8004004:	4613      	mov	r3, r2
 8004006:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 8004008:	887a      	ldrh	r2, [r7, #2]
 800400a:	88bb      	ldrh	r3, [r7, #4]
 800400c:	429a      	cmp	r2, r3
 800400e:	d20d      	bcs.n	800402c <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8004010:	883a      	ldrh	r2, [r7, #0]
 8004012:	88fb      	ldrh	r3, [r7, #6]
 8004014:	429a      	cmp	r2, r3
 8004016:	d901      	bls.n	800401c <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8004018:	2301      	movs	r3, #1
 800401a:	e014      	b.n	8004046 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 800401c:	887a      	ldrh	r2, [r7, #2]
 800401e:	883b      	ldrh	r3, [r7, #0]
 8004020:	429a      	cmp	r2, r3
 8004022:	d901      	bls.n	8004028 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8004024:	2301      	movs	r3, #1
 8004026:	e00e      	b.n	8004046 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8004028:	2300      	movs	r3, #0
 800402a:	e00c      	b.n	8004046 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 800402c:	883a      	ldrh	r2, [r7, #0]
 800402e:	88fb      	ldrh	r3, [r7, #6]
 8004030:	429a      	cmp	r2, r3
 8004032:	d907      	bls.n	8004044 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8004034:	887a      	ldrh	r2, [r7, #2]
 8004036:	883b      	ldrh	r3, [r7, #0]
 8004038:	429a      	cmp	r2, r3
 800403a:	d901      	bls.n	8004040 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 800403c:	2301      	movs	r3, #1
 800403e:	e002      	b.n	8004046 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8004040:	2300      	movs	r3, #0
 8004042:	e000      	b.n	8004046 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8004044:	2300      	movs	r3, #0
    }
  }
}
 8004046:	4618      	mov	r0, r3
 8004048:	3708      	adds	r7, #8
 800404a:	46bd      	mov	sp, r7
 800404c:	bc90      	pop	{r4, r7}
 800404e:	4770      	bx	lr

08004050 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	4608      	mov	r0, r1
 800405a:	4611      	mov	r1, r2
 800405c:	461a      	mov	r2, r3
 800405e:	4603      	mov	r3, r0
 8004060:	817b      	strh	r3, [r7, #10]
 8004062:	460b      	mov	r3, r1
 8004064:	813b      	strh	r3, [r7, #8]
 8004066:	4613      	mov	r3, r2
 8004068:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f8b3 104e 	ldrh.w	r1, [r3, #78]	; 0x4e
 8004076:	8b3b      	ldrh	r3, [r7, #24]
 8004078:	893a      	ldrh	r2, [r7, #8]
 800407a:	f7ff ffb6 	bl	8003fea <u8g2_is_intersection_decision_tree>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d101      	bne.n	8004088 <u8g2_IsIntersection+0x38>
    return 0; 
 8004084:	2300      	movs	r3, #0
 8004086:	e00a      	b.n	800409e <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
 8004094:	88fb      	ldrh	r3, [r7, #6]
 8004096:	897a      	ldrh	r2, [r7, #10]
 8004098:	f7ff ffa7 	bl	8003fea <u8g2_is_intersection_decision_tree>
 800409c:	4603      	mov	r3, r0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3710      	adds	r7, #16
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}

080040a6 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80040a6:	b480      	push	{r7}
 80040a8:	b089      	sub	sp, #36	; 0x24
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	60f8      	str	r0, [r7, #12]
 80040ae:	4608      	mov	r0, r1
 80040b0:	4611      	mov	r1, r2
 80040b2:	461a      	mov	r2, r3
 80040b4:	4603      	mov	r3, r0
 80040b6:	817b      	strh	r3, [r7, #10]
 80040b8:	460b      	mov	r3, r1
 80040ba:	813b      	strh	r3, [r7, #8]
 80040bc:	4613      	mov	r3, r2
 80040be:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 80040c0:	893b      	ldrh	r3, [r7, #8]
 80040c2:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 80040c4:	7efb      	ldrb	r3, [r7, #27]
 80040c6:	f003 0307 	and.w	r3, r3, #7
 80040ca:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 80040cc:	2301      	movs	r3, #1
 80040ce:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 80040d0:	7e3a      	ldrb	r2, [r7, #24]
 80040d2:	7efb      	ldrb	r3, [r7, #27]
 80040d4:	fa02 f303 	lsl.w	r3, r2, r3
 80040d8:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 80040da:	2300      	movs	r3, #0
 80040dc:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 80040de:	2300      	movs	r3, #0
 80040e0:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d801      	bhi.n	80040f0 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 80040ec:	7e3b      	ldrb	r3, [r7, #24]
 80040ee:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d001      	beq.n	80040fe <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 80040fa:	7e3b      	ldrb	r3, [r7, #24]
 80040fc:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 80040fe:	893b      	ldrh	r3, [r7, #8]
 8004100:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 8004102:	8afb      	ldrh	r3, [r7, #22]
 8004104:	f023 0307 	bic.w	r3, r3, #7
 8004108:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	7c1b      	ldrb	r3, [r3, #16]
 8004110:	b29b      	uxth	r3, r3
 8004112:	8afa      	ldrh	r2, [r7, #22]
 8004114:	fb02 f303 	mul.w	r3, r2, r3
 8004118:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800411e:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 8004120:	8afb      	ldrh	r3, [r7, #22]
 8004122:	69fa      	ldr	r2, [r7, #28]
 8004124:	4413      	add	r3, r2
 8004126:	61fb      	str	r3, [r7, #28]
  ptr += x;
 8004128:	897b      	ldrh	r3, [r7, #10]
 800412a:	69fa      	ldr	r2, [r7, #28]
 800412c:	4413      	add	r3, r2
 800412e:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 8004130:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004134:	2b00      	cmp	r3, #0
 8004136:	d117      	bne.n	8004168 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	781a      	ldrb	r2, [r3, #0]
 800413c:	7ebb      	ldrb	r3, [r7, #26]
 800413e:	4313      	orrs	r3, r2
 8004140:	b2da      	uxtb	r2, r3
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	781a      	ldrb	r2, [r3, #0]
 800414a:	7e7b      	ldrb	r3, [r7, #25]
 800414c:	4053      	eors	r3, r2
 800414e:	b2da      	uxtb	r2, r3
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	701a      	strb	r2, [r3, #0]
	ptr++;
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	3301      	adds	r3, #1
 8004158:	61fb      	str	r3, [r7, #28]
	len--;
 800415a:	88fb      	ldrh	r3, [r7, #6]
 800415c:	3b01      	subs	r3, #1
 800415e:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 8004160:	88fb      	ldrh	r3, [r7, #6]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d1e8      	bne.n	8004138 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8004166:	e038      	b.n	80041da <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	781a      	ldrb	r2, [r3, #0]
 800416c:	7ebb      	ldrb	r3, [r7, #26]
 800416e:	4313      	orrs	r3, r2
 8004170:	b2da      	uxtb	r2, r3
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	781a      	ldrb	r2, [r3, #0]
 800417a:	7e7b      	ldrb	r3, [r7, #25]
 800417c:	4053      	eors	r3, r2
 800417e:	b2da      	uxtb	r2, r3
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8004184:	7efb      	ldrb	r3, [r7, #27]
 8004186:	3301      	adds	r3, #1
 8004188:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 800418a:	7efb      	ldrb	r3, [r7, #27]
 800418c:	f003 0307 	and.w	r3, r3, #7
 8004190:	76fb      	strb	r3, [r7, #27]
      len--;
 8004192:	88fb      	ldrh	r3, [r7, #6]
 8004194:	3b01      	subs	r3, #1
 8004196:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 8004198:	7efb      	ldrb	r3, [r7, #27]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d114      	bne.n	80041c8 <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80041a2:	461a      	mov	r2, r3
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	4413      	add	r3, r2
 80041a8:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d801      	bhi.n	80041b8 <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 80041b4:	2301      	movs	r3, #1
 80041b6:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d008      	beq.n	80041d4 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 80041c2:	2301      	movs	r3, #1
 80041c4:	767b      	strb	r3, [r7, #25]
 80041c6:	e005      	b.n	80041d4 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 80041c8:	7ebb      	ldrb	r3, [r7, #26]
 80041ca:	005b      	lsls	r3, r3, #1
 80041cc:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 80041ce:	7e7b      	ldrb	r3, [r7, #25]
 80041d0:	005b      	lsls	r3, r3, #1
 80041d2:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 80041d4:	88fb      	ldrh	r3, [r7, #6]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d1c6      	bne.n	8004168 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 80041da:	bf00      	nop
 80041dc:	3724      	adds	r7, #36	; 0x24
 80041de:	46bd      	mov	sp, r7
 80041e0:	bc80      	pop	{r7}
 80041e2:	4770      	bx	lr

080041e4 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  u8g2->clip_y0 = 0;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004202:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800420c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  
  u8g2->cb->update_page_win(u8g2);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	4798      	blx	r3
}
 800421a:	bf00      	nop
 800421c:	3708      	adds	r7, #8
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}

08004222 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8004222:	b580      	push	{r7, lr}
 8004224:	b084      	sub	sp, #16
 8004226:	af00      	add	r7, sp, #0
 8004228:	60f8      	str	r0, [r7, #12]
 800422a:	60b9      	str	r1, [r7, #8]
 800422c:	603b      	str	r3, [r7, #0]
 800422e:	4613      	mov	r3, r2
 8004230:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2200      	movs	r2, #0
 8004236:	659a      	str	r2, [r3, #88]	; 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	683a      	ldr	r2, [r7, #0]
 800423c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	68ba      	ldr	r2, [r7, #8]
 8004242:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	79fa      	ldrb	r2, [r7, #7]
 8004248:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2200      	movs	r2, #0
 8004250:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2200      	movs	r2, #0
 8004258:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  u8g2->bitmap_transparency = 0;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2200      	movs	r2, #0
 8004260:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  
  u8g2->font_height_mode = 0; /* issue 2046 */
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2200      	movs	r2, #0
 8004268:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
  u8g2->draw_color = 1;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  u8g2->is_auto_page_clear = 1;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
  
  u8g2->cb = u8g2_cb;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	69ba      	ldr	r2, [r7, #24]
 8004280:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	68f8      	ldr	r0, [r7, #12]
 800428a:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 800428c:	68f8      	ldr	r0, [r7, #12]
 800428e:	f7ff ffa9 	bl	80041e4 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8004292:	68f8      	ldr	r0, [r7, #12]
 8004294:	f7ff fd88 	bl	8003da8 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2200      	movs	r2, #0
 800429c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
#endif
}
 80042a0:	bf00      	nop
 80042a2:	3710      	adds	r7, #16
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <u8g2_SetDisplayRotation>:
/*
  Usually the display rotation is set initially, but it could be done later also
  u8g2_cb can be U8G2_R0..U8G2_R3
*/
void u8g2_SetDisplayRotation(u8g2_t *u8g2, const u8g2_cb_t *u8g2_cb)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b082      	sub	sp, #8
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	6039      	str	r1, [r7, #0]
  u8g2->cb = u8g2_cb;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	683a      	ldr	r2, [r7, #0]
 80042b6:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	4798      	blx	r3
}
 80042cc:	bf00      	nop
 80042ce:	3708      	adds	r7, #8
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b085      	sub	sp, #20
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80042e8:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 80042ea:	89fb      	ldrh	r3, [r7, #14]
 80042ec:	00db      	lsls	r3, r3, #3
 80042ee:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	89fa      	ldrh	r2, [r7, #14]
 80042f4:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  t = display_info->tile_width;
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	7c1b      	ldrb	r3, [r3, #16]
 80042fa:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 80042fc:	89fb      	ldrh	r3, [r7, #14]
 80042fe:	00db      	lsls	r3, r3, #3
 8004300:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	89fa      	ldrh	r2, [r7, #14]
 8004306:	875a      	strh	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800430e:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8004310:	89fb      	ldrh	r3, [r7, #14]
 8004312:	00db      	lsls	r3, r3, #3
 8004314:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	89fa      	ldrh	r2, [r7, #14]
 800431a:	87da      	strh	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_buf_height;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004322:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8004324:	89fb      	ldrh	r3, [r7, #14]
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 800432c:	4413      	add	r3, r2
 800432e:	68ba      	ldr	r2, [r7, #8]
 8004330:	7c52      	ldrb	r2, [r2, #17]
 8004332:	4293      	cmp	r3, r2
 8004334:	dd08      	ble.n	8004348 <u8g2_update_dimension_common+0x74>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	7c5b      	ldrb	r3, [r3, #17]
 800433a:	b29a      	uxth	r2, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004342:	b29b      	uxth	r3, r3
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8004348:	89fb      	ldrh	r3, [r7, #14]
 800434a:	00db      	lsls	r3, r3, #3
 800434c:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 800436a:	89fb      	ldrh	r3, [r7, #14]
 800436c:	4413      	add	r3, r2
 800436e:	b29a      	uxth	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	8a9a      	ldrh	r2, [r3, #20]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  u8g2->height = display_info->pixel_height;
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	8ada      	ldrh	r2, [r3, #22]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 800438a:	bf00      	nop
 800438c:	3714      	adds	r7, #20
 800438e:	46bd      	mov	sp, r7
 8004390:	bc80      	pop	{r7}
 8004392:	4770      	bx	lr

08004394 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af02      	add	r7, sp, #8
 800439a:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f8b3 0052 	ldrh.w	r0, [r3, #82]	; 0x52
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80043b4:	9300      	str	r3, [sp, #0]
 80043b6:	4603      	mov	r3, r0
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f7ff fe49 	bl	8004050 <u8g2_IsIntersection>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d104      	bne.n	80043ce <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 80043cc:	e03b      	b.n	8004446 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2201      	movs	r2, #1
 80043d2:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d205      	bcs.n	80043f2 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80043fe:	429a      	cmp	r2, r3
 8004400:	d905      	bls.n	800440e <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800441a:	429a      	cmp	r2, r3
 800441c:	d205      	bcs.n	800442a <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004436:	429a      	cmp	r2, r3
 8004438:	d905      	bls.n	8004446 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 8004446:	bf00      	nop
 8004448:	3708      	adds	r7, #8
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}

0800444e <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 800444e:	b580      	push	{r7, lr}
 8004450:	b082      	sub	sp, #8
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f7ff ff3c 	bl	80042d4 <u8g2_update_dimension_common>
}
 800445c:	bf00      	nop
 800445e:	3708      	adds	r7, #8
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}

08004464 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  
  u8g2->user_y0 = u8g2->buf_y0;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  u8g2->user_y1 = u8g2->buf_y1;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f7ff ff7b 	bl	8004394 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 800449e:	bf00      	nop
 80044a0:	3708      	adds	r7, #8
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}

080044a6 <u8g2_update_dimension_r2>:
  u8g2_apply_clip_window(u8g2);
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}

void u8g2_update_dimension_r2(u8g2_t *u8g2)
{
 80044a6:	b580      	push	{r7, lr}
 80044a8:	b082      	sub	sp, #8
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f7ff ff10 	bl	80042d4 <u8g2_update_dimension_common>
}
 80044b4:	bf00      	nop
 80044b6:	3708      	adds	r7, #8
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}

080044bc <u8g2_update_page_win_r2>:

void u8g2_update_page_win_r2(u8g2_t *u8g2)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b082      	sub	sp, #8
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  u8g2->user_x1 = u8g2->width;	/* pixel_buf_width replaced with width */
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  
  /* there are ases where the height is not a multiple of 8. */
  /* in such a case u8g2->buf_y1 might be heigher than u8g2->height */
  u8g2->user_y0 = 0;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  if ( u8g2->height >= u8g2->buf_y1 )
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f8b3 2046 	ldrh.w	r2, [r3, #70]	; 0x46
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d30a      	bcc.n	8004506 <u8g2_update_page_win_r2+0x4a>
    u8g2->user_y0 = u8g2->height - u8g2->buf_y1;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f8b3 2046 	ldrh.w	r2, [r3, #70]	; 0x46
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	b29a      	uxth	r2, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  u8g2->user_y1 = u8g2->height - u8g2->buf_y0;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f8b3 2046 	ldrh.w	r2, [r3, #70]	; 0x46
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	b29a      	uxth	r2, r3
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f7ff ff39 	bl	8004394 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8004522:	bf00      	nop
 8004524:	3708      	adds	r7, #8
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}

0800452a <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800452a:	b580      	push	{r7, lr}
 800452c:	b086      	sub	sp, #24
 800452e:	af02      	add	r7, sp, #8
 8004530:	60f8      	str	r0, [r7, #12]
 8004532:	4608      	mov	r0, r1
 8004534:	4611      	mov	r1, r2
 8004536:	461a      	mov	r2, r3
 8004538:	4603      	mov	r3, r0
 800453a:	817b      	strh	r3, [r7, #10]
 800453c:	460b      	mov	r3, r1
 800453e:	813b      	strh	r3, [r7, #8]
 8004540:	4613      	mov	r3, r2
 8004542:	80fb      	strh	r3, [r7, #6]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8004544:	88f8      	ldrh	r0, [r7, #6]
 8004546:	893a      	ldrh	r2, [r7, #8]
 8004548:	8979      	ldrh	r1, [r7, #10]
 800454a:	7e3b      	ldrb	r3, [r7, #24]
 800454c:	9300      	str	r3, [sp, #0]
 800454e:	4603      	mov	r3, r0
 8004550:	68f8      	ldr	r0, [r7, #12]
 8004552:	f7ff fc9e 	bl	8003e92 <u8g2_draw_hv_line_2dir>
}
 8004556:	bf00      	nop
 8004558:	3710      	adds	r7, #16
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}

0800455e <u8g2_draw_l90_r2>:
  
  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
}

void u8g2_draw_l90_r2(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800455e:	b580      	push	{r7, lr}
 8004560:	b088      	sub	sp, #32
 8004562:	af02      	add	r7, sp, #8
 8004564:	60f8      	str	r0, [r7, #12]
 8004566:	4608      	mov	r0, r1
 8004568:	4611      	mov	r1, r2
 800456a:	461a      	mov	r2, r3
 800456c:	4603      	mov	r3, r0
 800456e:	817b      	strh	r3, [r7, #10]
 8004570:	460b      	mov	r3, r1
 8004572:	813b      	strh	r3, [r7, #8]
 8004574:	4613      	mov	r3, r2
 8004576:	80fb      	strh	r3, [r7, #6]
    yy -= len;
    yy++;
  }
  */

  yy = u8g2->height;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800457e:	82bb      	strh	r3, [r7, #20]
  yy -= y;
 8004580:	8aba      	ldrh	r2, [r7, #20]
 8004582:	893b      	ldrh	r3, [r7, #8]
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	82bb      	strh	r3, [r7, #20]
  
  xx = u8g2->width;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800458e:	82fb      	strh	r3, [r7, #22]
  xx -= x;
 8004590:	8afa      	ldrh	r2, [r7, #22]
 8004592:	897b      	ldrh	r3, [r7, #10]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	82fb      	strh	r3, [r7, #22]
  
  if ( dir == 0 )
 8004598:	f897 3020 	ldrb.w	r3, [r7, #32]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d107      	bne.n	80045b0 <u8g2_draw_l90_r2+0x52>
  {
    yy--;
 80045a0:	8abb      	ldrh	r3, [r7, #20]
 80045a2:	3b01      	subs	r3, #1
 80045a4:	82bb      	strh	r3, [r7, #20]
    xx -= len;
 80045a6:	8afa      	ldrh	r2, [r7, #22]
 80045a8:	88fb      	ldrh	r3, [r7, #6]
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	82fb      	strh	r3, [r7, #22]
 80045ae:	e00a      	b.n	80045c6 <u8g2_draw_l90_r2+0x68>
  }
  else if ( dir == 1 )
 80045b0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d106      	bne.n	80045c6 <u8g2_draw_l90_r2+0x68>
  {
    xx--;
 80045b8:	8afb      	ldrh	r3, [r7, #22]
 80045ba:	3b01      	subs	r3, #1
 80045bc:	82fb      	strh	r3, [r7, #22]
    yy -= len;
 80045be:	8aba      	ldrh	r2, [r7, #20]
 80045c0:	88fb      	ldrh	r3, [r7, #6]
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	82bb      	strh	r3, [r7, #20]
  }

  u8g2_draw_hv_line_2dir(u8g2, xx, yy, len, dir);
 80045c6:	88f8      	ldrh	r0, [r7, #6]
 80045c8:	8aba      	ldrh	r2, [r7, #20]
 80045ca:	8af9      	ldrh	r1, [r7, #22]
 80045cc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80045d0:	9300      	str	r3, [sp, #0]
 80045d2:	4603      	mov	r3, r0
 80045d4:	68f8      	ldr	r0, [r7, #12]
 80045d6:	f7ff fc5c 	bl	8003e92 <u8g2_draw_hv_line_2dir>
}
 80045da:	bf00      	nop
 80045dc:	3718      	adds	r7, #24
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}

080045e2 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 80045e2:	b480      	push	{r7}
 80045e4:	b083      	sub	sp, #12
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 80045f2:	bf00      	nop
 80045f4:	370c      	adds	r7, #12
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bc80      	pop	{r7}
 80045fa:	4770      	bx	lr

080045fc <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	460b      	mov	r3, r1
 8004606:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8004608:	78fb      	ldrb	r3, [r7, #3]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d002      	beq.n	8004614 <u8x8_ascii_next+0x18>
 800460e:	78fb      	ldrb	r3, [r7, #3]
 8004610:	2b0a      	cmp	r3, #10
 8004612:	d102      	bne.n	800461a <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 8004614:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004618:	e001      	b.n	800461e <u8x8_ascii_next+0x22>
  return b;
 800461a:	78fb      	ldrb	r3, [r7, #3]
 800461c:	b29b      	uxth	r3, r3
}
 800461e:	4618      	mov	r0, r3
 8004620:	370c      	adds	r7, #12
 8004622:	46bd      	mov	sp, r7
 8004624:	bc80      	pop	{r7}
 8004626:	4770      	bx	lr

08004628 <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 8004628:	b590      	push	{r4, r7, lr}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	460b      	mov	r3, r1
 8004632:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	691c      	ldr	r4, [r3, #16]
 8004638:	78fa      	ldrb	r2, [r7, #3]
 800463a:	2300      	movs	r3, #0
 800463c:	2120      	movs	r1, #32
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	47a0      	blx	r4
 8004642:	4603      	mov	r3, r0
}
 8004644:	4618      	mov	r0, r3
 8004646:	370c      	adds	r7, #12
 8004648:	46bd      	mov	sp, r7
 800464a:	bd90      	pop	{r4, r7, pc}

0800464c <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 800464c:	b590      	push	{r4, r7, lr}
 800464e:	b085      	sub	sp, #20
 8004650:	af00      	add	r7, sp, #0
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	460b      	mov	r3, r1
 8004656:	607a      	str	r2, [r7, #4]
 8004658:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	691c      	ldr	r4, [r3, #16]
 800465e:	7afa      	ldrb	r2, [r7, #11]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2117      	movs	r1, #23
 8004664:	68f8      	ldr	r0, [r7, #12]
 8004666:	47a0      	blx	r4
 8004668:	4603      	mov	r3, r0
}
 800466a:	4618      	mov	r0, r3
 800466c:	3714      	adds	r7, #20
 800466e:	46bd      	mov	sp, r7
 8004670:	bd90      	pop	{r4, r7, pc}

08004672 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8004672:	b580      	push	{r7, lr}
 8004674:	b082      	sub	sp, #8
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]
 800467a:	460b      	mov	r3, r1
 800467c:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 800467e:	1cfb      	adds	r3, r7, #3
 8004680:	461a      	mov	r2, r3
 8004682:	2101      	movs	r1, #1
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f7ff ffe1 	bl	800464c <u8x8_byte_SendBytes>
 800468a:	4603      	mov	r3, r0
}
 800468c:	4618      	mov	r0, r3
 800468e:	3708      	adds	r7, #8
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}

08004694 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8004694:	b590      	push	{r4, r7, lr}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	460b      	mov	r3, r1
 800469e:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	68dc      	ldr	r4, [r3, #12]
 80046a4:	78fa      	ldrb	r2, [r7, #3]
 80046a6:	2300      	movs	r3, #0
 80046a8:	2115      	movs	r1, #21
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	47a0      	blx	r4
 80046ae:	4603      	mov	r3, r0
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	370c      	adds	r7, #12
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd90      	pop	{r4, r7, pc}

080046b8 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 80046b8:	b590      	push	{r4, r7, lr}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	460b      	mov	r3, r1
 80046c2:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	68dc      	ldr	r4, [r3, #12]
 80046c8:	78fa      	ldrb	r2, [r7, #3]
 80046ca:	2300      	movs	r3, #0
 80046cc:	2116      	movs	r1, #22
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	47a0      	blx	r4
 80046d2:	4603      	mov	r3, r0
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	370c      	adds	r7, #12
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd90      	pop	{r4, r7, pc}

080046dc <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 80046dc:	b590      	push	{r4, r7, lr}
 80046de:	b085      	sub	sp, #20
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	460b      	mov	r3, r1
 80046e6:	607a      	str	r2, [r7, #4]
 80046e8:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	68dc      	ldr	r4, [r3, #12]
 80046ee:	7afa      	ldrb	r2, [r7, #11]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2117      	movs	r1, #23
 80046f4:	68f8      	ldr	r0, [r7, #12]
 80046f6:	47a0      	blx	r4
 80046f8:	4603      	mov	r3, r0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3714      	adds	r7, #20
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd90      	pop	{r4, r7, pc}

08004702 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8004702:	b590      	push	{r4, r7, lr}
 8004704:	b083      	sub	sp, #12
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	68dc      	ldr	r4, [r3, #12]
 800470e:	2300      	movs	r3, #0
 8004710:	2200      	movs	r2, #0
 8004712:	2118      	movs	r1, #24
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	47a0      	blx	r4
 8004718:	4603      	mov	r3, r0
}
 800471a:	4618      	mov	r0, r3
 800471c:	370c      	adds	r7, #12
 800471e:	46bd      	mov	sp, r7
 8004720:	bd90      	pop	{r4, r7, pc}

08004722 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8004722:	b590      	push	{r4, r7, lr}
 8004724:	b083      	sub	sp, #12
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	68dc      	ldr	r4, [r3, #12]
 800472e:	2300      	movs	r3, #0
 8004730:	2200      	movs	r2, #0
 8004732:	2119      	movs	r1, #25
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	47a0      	blx	r4
 8004738:	4603      	mov	r3, r0
}
 800473a:	4618      	mov	r0, r3
 800473c:	370c      	adds	r7, #12
 800473e:	46bd      	mov	sp, r7
 8004740:	bd90      	pop	{r4, r7, pc}

08004742 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8004742:	b590      	push	{r4, r7, lr}
 8004744:	b085      	sub	sp, #20
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
 800474a:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	781b      	ldrb	r3, [r3, #0]
 8004750:	73fb      	strb	r3, [r7, #15]
    data++;
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	3301      	adds	r3, #1
 8004756:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8004758:	7bfb      	ldrb	r3, [r7, #15]
 800475a:	2bfe      	cmp	r3, #254	; 0xfe
 800475c:	d031      	beq.n	80047c2 <u8x8_cad_SendSequence+0x80>
 800475e:	2bfe      	cmp	r3, #254	; 0xfe
 8004760:	dc3d      	bgt.n	80047de <u8x8_cad_SendSequence+0x9c>
 8004762:	2b19      	cmp	r3, #25
 8004764:	dc3b      	bgt.n	80047de <u8x8_cad_SendSequence+0x9c>
 8004766:	2b18      	cmp	r3, #24
 8004768:	da23      	bge.n	80047b2 <u8x8_cad_SendSequence+0x70>
 800476a:	2b16      	cmp	r3, #22
 800476c:	dc02      	bgt.n	8004774 <u8x8_cad_SendSequence+0x32>
 800476e:	2b15      	cmp	r3, #21
 8004770:	da03      	bge.n	800477a <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8004772:	e034      	b.n	80047de <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 8004774:	2b17      	cmp	r3, #23
 8004776:	d00e      	beq.n	8004796 <u8x8_cad_SendSequence+0x54>
	return;
 8004778:	e031      	b.n	80047de <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	68dc      	ldr	r4, [r3, #12]
 8004784:	7bba      	ldrb	r2, [r7, #14]
 8004786:	7bf9      	ldrb	r1, [r7, #15]
 8004788:	2300      	movs	r3, #0
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	47a0      	blx	r4
	  data++;
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	3301      	adds	r3, #1
 8004792:	603b      	str	r3, [r7, #0]
	  break;
 8004794:	e022      	b.n	80047dc <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	781b      	ldrb	r3, [r3, #0]
 800479a:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 800479c:	f107 030e 	add.w	r3, r7, #14
 80047a0:	461a      	mov	r2, r3
 80047a2:	2101      	movs	r1, #1
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f7ff ff99 	bl	80046dc <u8x8_cad_SendData>
	  data++;
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	3301      	adds	r3, #1
 80047ae:	603b      	str	r3, [r7, #0]
	  break;
 80047b0:	e014      	b.n	80047dc <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	68dc      	ldr	r4, [r3, #12]
 80047b6:	7bf9      	ldrb	r1, [r7, #15]
 80047b8:	2300      	movs	r3, #0
 80047ba:	2200      	movs	r2, #0
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	47a0      	blx	r4
	  break;
 80047c0:	e00c      	b.n	80047dc <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 80047c8:	7bbb      	ldrb	r3, [r7, #14]
 80047ca:	461a      	mov	r2, r3
 80047cc:	2129      	movs	r1, #41	; 0x29
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 f9d8 	bl	8004b84 <u8x8_gpio_call>
	  data++;
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	3301      	adds	r3, #1
 80047d8:	603b      	str	r3, [r7, #0]
	  break;
 80047da:	bf00      	nop
    cmd = *data;
 80047dc:	e7b6      	b.n	800474c <u8x8_cad_SendSequence+0xa>
	return;
 80047de:	bf00      	nop
    }
  }
}
 80047e0:	3714      	adds	r7, #20
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd90      	pop	{r4, r7, pc}
	...

080047e8 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80047e8:	b590      	push	{r4, r7, lr}
 80047ea:	b085      	sub	sp, #20
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	607b      	str	r3, [r7, #4]
 80047f2:	460b      	mov	r3, r1
 80047f4:	72fb      	strb	r3, [r7, #11]
 80047f6:	4613      	mov	r3, r2
 80047f8:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 80047fa:	7afb      	ldrb	r3, [r7, #11]
 80047fc:	3b14      	subs	r3, #20
 80047fe:	2b05      	cmp	r3, #5
 8004800:	d82f      	bhi.n	8004862 <u8x8_cad_001+0x7a>
 8004802:	a201      	add	r2, pc, #4	; (adr r2, 8004808 <u8x8_cad_001+0x20>)
 8004804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004808:	08004851 	.word	0x08004851
 800480c:	08004821 	.word	0x08004821
 8004810:	08004835 	.word	0x08004835
 8004814:	08004849 	.word	0x08004849
 8004818:	08004851 	.word	0x08004851
 800481c:	08004851 	.word	0x08004851
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 8004820:	2100      	movs	r1, #0
 8004822:	68f8      	ldr	r0, [r7, #12]
 8004824:	f7ff ff00 	bl	8004628 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8004828:	7abb      	ldrb	r3, [r7, #10]
 800482a:	4619      	mov	r1, r3
 800482c:	68f8      	ldr	r0, [r7, #12]
 800482e:	f7ff ff20 	bl	8004672 <u8x8_byte_SendByte>
      break;
 8004832:	e018      	b.n	8004866 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 8004834:	2100      	movs	r1, #0
 8004836:	68f8      	ldr	r0, [r7, #12]
 8004838:	f7ff fef6 	bl	8004628 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 800483c:	7abb      	ldrb	r3, [r7, #10]
 800483e:	4619      	mov	r1, r3
 8004840:	68f8      	ldr	r0, [r7, #12]
 8004842:	f7ff ff16 	bl	8004672 <u8x8_byte_SendByte>
      break;
 8004846:	e00e      	b.n	8004866 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 8004848:	2101      	movs	r1, #1
 800484a:	68f8      	ldr	r0, [r7, #12]
 800484c:	f7ff feec 	bl	8004628 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	691c      	ldr	r4, [r3, #16]
 8004854:	7aba      	ldrb	r2, [r7, #10]
 8004856:	7af9      	ldrb	r1, [r7, #11]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	68f8      	ldr	r0, [r7, #12]
 800485c:	47a0      	blx	r4
 800485e:	4603      	mov	r3, r0
 8004860:	e002      	b.n	8004868 <u8x8_cad_001+0x80>
    default:
      return 0;
 8004862:	2300      	movs	r3, #0
 8004864:	e000      	b.n	8004868 <u8x8_cad_001+0x80>
  }
  return 1;
 8004866:	2301      	movs	r3, #1
}
 8004868:	4618      	mov	r0, r3
 800486a:	3714      	adds	r7, #20
 800486c:	46bd      	mov	sp, r7
 800486e:	bd90      	pop	{r4, r7, pc}

08004870 <u8x8_d_ssd1306_sh1106_generic>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b086      	sub	sp, #24
 8004874:	af00      	add	r7, sp, #0
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	607b      	str	r3, [r7, #4]
 800487a:	460b      	mov	r3, r1
 800487c:	72fb      	strb	r3, [r7, #11]
 800487e:	4613      	mov	r3, r2
 8004880:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 8004882:	7afb      	ldrb	r3, [r7, #11]
 8004884:	3b0b      	subs	r3, #11
 8004886:	2b04      	cmp	r3, #4
 8004888:	f200 808a 	bhi.w	80049a0 <u8x8_d_ssd1306_sh1106_generic+0x130>
 800488c:	a201      	add	r2, pc, #4	; (adr r2, 8004894 <u8x8_d_ssd1306_sh1106_generic+0x24>)
 800488e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004892:	bf00      	nop
 8004894:	080048a9 	.word	0x080048a9
 8004898:	080049a1 	.word	0x080049a1
 800489c:	080048c3 	.word	0x080048c3
 80048a0:	080048f5 	.word	0x080048f5
 80048a4:	08004915 	.word	0x08004915
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 80048a8:	7abb      	ldrb	r3, [r7, #10]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d104      	bne.n	80048b8 <u8x8_d_ssd1306_sh1106_generic+0x48>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
 80048ae:	4940      	ldr	r1, [pc, #256]	; (80049b0 <u8x8_d_ssd1306_sh1106_generic+0x140>)
 80048b0:	68f8      	ldr	r0, [r7, #12]
 80048b2:	f7ff ff46 	bl	8004742 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
      break;
 80048b6:	e075      	b.n	80049a4 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
 80048b8:	493e      	ldr	r1, [pc, #248]	; (80049b4 <u8x8_d_ssd1306_sh1106_generic+0x144>)
 80048ba:	68f8      	ldr	r0, [r7, #12]
 80048bc:	f7ff ff41 	bl	8004742 <u8x8_cad_SendSequence>
      break;
 80048c0:	e070      	b.n	80049a4 <u8x8_d_ssd1306_sh1106_generic+0x134>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 80048c2:	7abb      	ldrb	r3, [r7, #10]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d10a      	bne.n	80048de <u8x8_d_ssd1306_sh1106_generic+0x6e>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
 80048c8:	493b      	ldr	r1, [pc, #236]	; (80049b8 <u8x8_d_ssd1306_sh1106_generic+0x148>)
 80048ca:	68f8      	ldr	r0, [r7, #12]
 80048cc:	f7ff ff39 	bl	8004742 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	7c9a      	ldrb	r2, [r3, #18]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 80048dc:	e062      	b.n	80049a4 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
 80048de:	4937      	ldr	r1, [pc, #220]	; (80049bc <u8x8_d_ssd1306_sh1106_generic+0x14c>)
 80048e0:	68f8      	ldr	r0, [r7, #12]
 80048e2:	f7ff ff2e 	bl	8004742 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	7cda      	ldrb	r2, [r3, #19]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 80048f2:	e057      	b.n	80049a4 <u8x8_d_ssd1306_sh1106_generic+0x134>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 80048f4:	68f8      	ldr	r0, [r7, #12]
 80048f6:	f7ff ff04 	bl	8004702 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 80048fa:	2181      	movs	r1, #129	; 0x81
 80048fc:	68f8      	ldr	r0, [r7, #12]
 80048fe:	f7ff fec9 	bl	8004694 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
 8004902:	7abb      	ldrb	r3, [r7, #10]
 8004904:	4619      	mov	r1, r3
 8004906:	68f8      	ldr	r0, [r7, #12]
 8004908:	f7ff fed6 	bl	80046b8 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 800490c:	68f8      	ldr	r0, [r7, #12]
 800490e:	f7ff ff08 	bl	8004722 <u8x8_cad_EndTransfer>
      break;
 8004912:	e047      	b.n	80049a4 <u8x8_d_ssd1306_sh1106_generic+0x134>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8004914:	68f8      	ldr	r0, [r7, #12]
 8004916:	f7ff fef4 	bl	8004702 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	795b      	ldrb	r3, [r3, #5]
 800491e:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 8004920:	7dfb      	ldrb	r3, [r7, #23]
 8004922:	00db      	lsls	r3, r3, #3
 8004924:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800492c:	7dfb      	ldrb	r3, [r7, #23]
 800492e:	4413      	add	r3, r2
 8004930:	75fb      	strb	r3, [r7, #23]
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 8004932:	2140      	movs	r1, #64	; 0x40
 8004934:	68f8      	ldr	r0, [r7, #12]
 8004936:	f7ff fead 	bl	8004694 <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 800493a:	7dfb      	ldrb	r3, [r7, #23]
 800493c:	091b      	lsrs	r3, r3, #4
 800493e:	b2db      	uxtb	r3, r3
 8004940:	f043 0310 	orr.w	r3, r3, #16
 8004944:	b2db      	uxtb	r3, r3
 8004946:	4619      	mov	r1, r3
 8004948:	68f8      	ldr	r0, [r7, #12]
 800494a:	f7ff fea3 	bl	8004694 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
 800494e:	7dfb      	ldrb	r3, [r7, #23]
 8004950:	f003 030f 	and.w	r3, r3, #15
 8004954:	b2db      	uxtb	r3, r3
 8004956:	4619      	mov	r1, r3
 8004958:	68f8      	ldr	r0, [r7, #12]
 800495a:	f7ff fead 	bl	80046b8 <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	799b      	ldrb	r3, [r3, #6]
 8004962:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8004966:	b2db      	uxtb	r3, r3
 8004968:	4619      	mov	r1, r3
 800496a:	68f8      	ldr	r0, [r7, #12]
 800496c:	f7ff fea4 	bl	80046b8 <u8x8_cad_SendArg>

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	791b      	ldrb	r3, [r3, #4]
 8004974:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 800497c:	7dbb      	ldrb	r3, [r7, #22]
 800497e:	00db      	lsls	r3, r3, #3
 8004980:	b2db      	uxtb	r3, r3
 8004982:	693a      	ldr	r2, [r7, #16]
 8004984:	4619      	mov	r1, r3
 8004986:	68f8      	ldr	r0, [r7, #12]
 8004988:	f7ff fea8 	bl	80046dc <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 800498c:	7abb      	ldrb	r3, [r7, #10]
 800498e:	3b01      	subs	r3, #1
 8004990:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8004992:	7abb      	ldrb	r3, [r7, #10]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d1eb      	bne.n	8004970 <u8x8_d_ssd1306_sh1106_generic+0x100>
      
      u8x8_cad_EndTransfer(u8x8);
 8004998:	68f8      	ldr	r0, [r7, #12]
 800499a:	f7ff fec2 	bl	8004722 <u8x8_cad_EndTransfer>
      break;
 800499e:	e001      	b.n	80049a4 <u8x8_d_ssd1306_sh1106_generic+0x134>
    default:
      return 0;
 80049a0:	2300      	movs	r3, #0
 80049a2:	e000      	b.n	80049a6 <u8x8_d_ssd1306_sh1106_generic+0x136>
  }
  return 1;
 80049a4:	2301      	movs	r3, #1
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3718      	adds	r7, #24
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	080059f0 	.word	0x080059f0
 80049b4:	080059f8 	.word	0x080059f8
 80049b8:	08005a00 	.word	0x08005a00
 80049bc:	08005a08 	.word	0x08005a08

080049c0 <u8x8_d_ssd1306_128x64_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	607b      	str	r3, [r7, #4]
 80049ca:	460b      	mov	r3, r1
 80049cc:	72fb      	strb	r3, [r7, #11]
 80049ce:	4613      	mov	r3, r2
 80049d0:	72bb      	strb	r3, [r7, #10]
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 80049d2:	7aba      	ldrb	r2, [r7, #10]
 80049d4:	7af9      	ldrb	r1, [r7, #11]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	68f8      	ldr	r0, [r7, #12]
 80049da:	f7ff ff49 	bl	8004870 <u8x8_d_ssd1306_sh1106_generic>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d001      	beq.n	80049e8 <u8x8_d_ssd1306_128x64_noname+0x28>
    return 1;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e014      	b.n	8004a12 <u8x8_d_ssd1306_128x64_noname+0x52>
  
  switch(msg)
 80049e8:	7afb      	ldrb	r3, [r7, #11]
 80049ea:	2b09      	cmp	r3, #9
 80049ec:	d009      	beq.n	8004a02 <u8x8_d_ssd1306_128x64_noname+0x42>
 80049ee:	2b0a      	cmp	r3, #10
 80049f0:	d10c      	bne.n	8004a0c <u8x8_d_ssd1306_128x64_noname+0x4c>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 80049f2:	68f8      	ldr	r0, [r7, #12]
 80049f4:	f000 f829 	bl	8004a4a <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
 80049f8:	4908      	ldr	r1, [pc, #32]	; (8004a1c <u8x8_d_ssd1306_128x64_noname+0x5c>)
 80049fa:	68f8      	ldr	r0, [r7, #12]
 80049fc:	f7ff fea1 	bl	8004742 <u8x8_cad_SendSequence>
      break;
 8004a00:	e006      	b.n	8004a10 <u8x8_d_ssd1306_128x64_noname+0x50>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
 8004a02:	4907      	ldr	r1, [pc, #28]	; (8004a20 <u8x8_d_ssd1306_128x64_noname+0x60>)
 8004a04:	68f8      	ldr	r0, [r7, #12]
 8004a06:	f000 f80d 	bl	8004a24 <u8x8_d_helper_display_setup_memory>
      break;
 8004a0a:	e001      	b.n	8004a10 <u8x8_d_ssd1306_128x64_noname+0x50>
    default:
      return 0;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	e000      	b.n	8004a12 <u8x8_d_ssd1306_128x64_noname+0x52>
  }
  return 1;
 8004a10:	2301      	movs	r3, #1
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3710      	adds	r7, #16
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	080059b8 	.word	0x080059b8
 8004a20:	08005a10 	.word	0x08005a10

08004a24 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	683a      	ldr	r2, [r7, #0]
 8004a32:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	7c9a      	ldrb	r2, [r3, #18]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8004a40:	bf00      	nop
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bc80      	pop	{r7}
 8004a48:	4770      	bx	lr

08004a4a <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8004a4a:	b590      	push	{r4, r7, lr}
 8004a4c:	b083      	sub	sp, #12
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	695c      	ldr	r4, [r3, #20]
 8004a56:	2300      	movs	r3, #0
 8004a58:	2200      	movs	r2, #0
 8004a5a:	2128      	movs	r1, #40	; 0x28
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	68dc      	ldr	r4, [r3, #12]
 8004a64:	2300      	movs	r3, #0
 8004a66:	2200      	movs	r2, #0
 8004a68:	2114      	movs	r1, #20
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8004a6e:	2201      	movs	r2, #1
 8004a70:	214b      	movs	r1, #75	; 0x4b
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 f886 	bl	8004b84 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	791b      	ldrb	r3, [r3, #4]
 8004a7e:	461a      	mov	r2, r3
 8004a80:	2129      	movs	r1, #41	; 0x29
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f000 f87e 	bl	8004b84 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8004a88:	2200      	movs	r2, #0
 8004a8a:	214b      	movs	r1, #75	; 0x4b
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f000 f879 	bl	8004b84 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	791b      	ldrb	r3, [r3, #4]
 8004a98:	461a      	mov	r2, r3
 8004a9a:	2129      	movs	r1, #41	; 0x29
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f000 f871 	bl	8004b84 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	214b      	movs	r1, #75	; 0x4b
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 f86c 	bl	8004b84 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	795b      	ldrb	r3, [r3, #5]
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	2129      	movs	r1, #41	; 0x29
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f000 f864 	bl	8004b84 <u8x8_gpio_call>
}    
 8004abc:	bf00      	nop
 8004abe:	370c      	adds	r7, #12
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd90      	pop	{r4, r7, pc}

08004ac4 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8004ac4:	b590      	push	{r4, r7, lr}
 8004ac6:	b085      	sub	sp, #20
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	4608      	mov	r0, r1
 8004ace:	4611      	mov	r1, r2
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	70fb      	strb	r3, [r7, #3]
 8004ad6:	460b      	mov	r3, r1
 8004ad8:	70bb      	strb	r3, [r7, #2]
 8004ada:	4613      	mov	r3, r2
 8004adc:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 8004ade:	78fb      	ldrb	r3, [r7, #3]
 8004ae0:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8004ae2:	78bb      	ldrb	r3, [r7, #2]
 8004ae4:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8004ae6:	787b      	ldrb	r3, [r7, #1]
 8004ae8:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8004aea:	6a3b      	ldr	r3, [r7, #32]
 8004aec:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	689c      	ldr	r4, [r3, #8]
 8004af2:	f107 0308 	add.w	r3, r7, #8
 8004af6:	2201      	movs	r2, #1
 8004af8:	210f      	movs	r1, #15
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	47a0      	blx	r4
 8004afe:	4603      	mov	r3, r0
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3714      	adds	r7, #20
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd90      	pop	{r4, r7, pc}

08004b08 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8004b08:	b590      	push	{r4, r7, lr}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	689c      	ldr	r4, [r3, #8]
 8004b14:	2300      	movs	r3, #0
 8004b16:	2200      	movs	r2, #0
 8004b18:	2109      	movs	r1, #9
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	47a0      	blx	r4
}
 8004b1e:	bf00      	nop
 8004b20:	370c      	adds	r7, #12
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd90      	pop	{r4, r7, pc}

08004b26 <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8004b26:	b590      	push	{r4, r7, lr}
 8004b28:	b083      	sub	sp, #12
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	689c      	ldr	r4, [r3, #8]
 8004b32:	2300      	movs	r3, #0
 8004b34:	2200      	movs	r2, #0
 8004b36:	210a      	movs	r1, #10
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	47a0      	blx	r4
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}
 8004b3c:	bf00      	nop
 8004b3e:	370c      	adds	r7, #12
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd90      	pop	{r4, r7, pc}

08004b44 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8004b44:	b590      	push	{r4, r7, lr}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	460b      	mov	r3, r1
 8004b4e:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	689c      	ldr	r4, [r3, #8]
 8004b54:	78fa      	ldrb	r2, [r7, #3]
 8004b56:	2300      	movs	r3, #0
 8004b58:	210b      	movs	r1, #11
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	47a0      	blx	r4
}
 8004b5e:	bf00      	nop
 8004b60:	370c      	adds	r7, #12
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd90      	pop	{r4, r7, pc}

08004b66 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8004b66:	b590      	push	{r4, r7, lr}
 8004b68:	b083      	sub	sp, #12
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	689c      	ldr	r4, [r3, #8]
 8004b72:	2300      	movs	r3, #0
 8004b74:	2200      	movs	r2, #0
 8004b76:	2110      	movs	r1, #16
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	47a0      	blx	r4
}
 8004b7c:	bf00      	nop
 8004b7e:	370c      	adds	r7, #12
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd90      	pop	{r4, r7, pc}

08004b84 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8004b84:	b590      	push	{r4, r7, lr}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	70fb      	strb	r3, [r7, #3]
 8004b90:	4613      	mov	r3, r2
 8004b92:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	695c      	ldr	r4, [r3, #20]
 8004b98:	78ba      	ldrb	r2, [r7, #2]
 8004b9a:	78f9      	ldrb	r1, [r7, #3]
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	47a0      	blx	r4
}
 8004ba2:	bf00      	nop
 8004ba4:	370c      	adds	r7, #12
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd90      	pop	{r4, r7, pc}

08004baa <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8004baa:	b480      	push	{r7}
 8004bac:	b085      	sub	sp, #20
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	60f8      	str	r0, [r7, #12]
 8004bb2:	607b      	str	r3, [r7, #4]
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	72fb      	strb	r3, [r7, #11]
 8004bb8:	4613      	mov	r3, r2
 8004bba:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 8004bbc:	2300      	movs	r3, #0
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3714      	adds	r7, #20
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bc80      	pop	{r7}
 8004bc6:	4770      	bx	lr

08004bc8 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a11      	ldr	r2, [pc, #68]	; (8004c20 <u8x8_SetupDefaults+0x58>)
 8004bda:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4a10      	ldr	r2, [pc, #64]	; (8004c20 <u8x8_SetupDefaults+0x58>)
 8004be0:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a0e      	ldr	r2, [pc, #56]	; (8004c20 <u8x8_SetupDefaults+0x58>)
 8004be6:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	4a0d      	ldr	r2, [pc, #52]	; (8004c20 <u8x8_SetupDefaults+0x58>)
 8004bec:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	22ff      	movs	r2, #255	; 0xff
 8004c08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	22ff      	movs	r2, #255	; 0xff
 8004c10:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8004c14:	bf00      	nop
 8004c16:	370c      	adds	r7, #12
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bc80      	pop	{r7}
 8004c1c:	4770      	bx	lr
 8004c1e:	bf00      	nop
 8004c20:	08004bab 	.word	0x08004bab

08004c24 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	607a      	str	r2, [r7, #4]
 8004c30:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8004c32:	68f8      	ldr	r0, [r7, #12]
 8004c34:	f7ff ffc8 	bl	8004bc8 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	68ba      	ldr	r2, [r7, #8]
 8004c3c:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	683a      	ldr	r2, [r7, #0]
 8004c48:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	69ba      	ldr	r2, [r7, #24]
 8004c4e:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8004c50:	68f8      	ldr	r0, [r7, #12]
 8004c52:	f7ff ff59 	bl	8004b08 <u8x8_SetupMemory>
}
 8004c56:	bf00      	nop
 8004c58:	3710      	adds	r7, #16
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
	...

08004c60 <__errno>:
 8004c60:	4b01      	ldr	r3, [pc, #4]	; (8004c68 <__errno+0x8>)
 8004c62:	6818      	ldr	r0, [r3, #0]
 8004c64:	4770      	bx	lr
 8004c66:	bf00      	nop
 8004c68:	20000024 	.word	0x20000024

08004c6c <__libc_init_array>:
 8004c6c:	b570      	push	{r4, r5, r6, lr}
 8004c6e:	2600      	movs	r6, #0
 8004c70:	4d0c      	ldr	r5, [pc, #48]	; (8004ca4 <__libc_init_array+0x38>)
 8004c72:	4c0d      	ldr	r4, [pc, #52]	; (8004ca8 <__libc_init_array+0x3c>)
 8004c74:	1b64      	subs	r4, r4, r5
 8004c76:	10a4      	asrs	r4, r4, #2
 8004c78:	42a6      	cmp	r6, r4
 8004c7a:	d109      	bne.n	8004c90 <__libc_init_array+0x24>
 8004c7c:	f000 fc9c 	bl	80055b8 <_init>
 8004c80:	2600      	movs	r6, #0
 8004c82:	4d0a      	ldr	r5, [pc, #40]	; (8004cac <__libc_init_array+0x40>)
 8004c84:	4c0a      	ldr	r4, [pc, #40]	; (8004cb0 <__libc_init_array+0x44>)
 8004c86:	1b64      	subs	r4, r4, r5
 8004c88:	10a4      	asrs	r4, r4, #2
 8004c8a:	42a6      	cmp	r6, r4
 8004c8c:	d105      	bne.n	8004c9a <__libc_init_array+0x2e>
 8004c8e:	bd70      	pop	{r4, r5, r6, pc}
 8004c90:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c94:	4798      	blx	r3
 8004c96:	3601      	adds	r6, #1
 8004c98:	e7ee      	b.n	8004c78 <__libc_init_array+0xc>
 8004c9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c9e:	4798      	blx	r3
 8004ca0:	3601      	adds	r6, #1
 8004ca2:	e7f2      	b.n	8004c8a <__libc_init_array+0x1e>
 8004ca4:	08005abc 	.word	0x08005abc
 8004ca8:	08005abc 	.word	0x08005abc
 8004cac:	08005abc 	.word	0x08005abc
 8004cb0:	08005ac0 	.word	0x08005ac0

08004cb4 <memset>:
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	4402      	add	r2, r0
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d100      	bne.n	8004cbe <memset+0xa>
 8004cbc:	4770      	bx	lr
 8004cbe:	f803 1b01 	strb.w	r1, [r3], #1
 8004cc2:	e7f9      	b.n	8004cb8 <memset+0x4>

08004cc4 <siprintf>:
 8004cc4:	b40e      	push	{r1, r2, r3}
 8004cc6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004cca:	b500      	push	{lr}
 8004ccc:	b09c      	sub	sp, #112	; 0x70
 8004cce:	ab1d      	add	r3, sp, #116	; 0x74
 8004cd0:	9002      	str	r0, [sp, #8]
 8004cd2:	9006      	str	r0, [sp, #24]
 8004cd4:	9107      	str	r1, [sp, #28]
 8004cd6:	9104      	str	r1, [sp, #16]
 8004cd8:	4808      	ldr	r0, [pc, #32]	; (8004cfc <siprintf+0x38>)
 8004cda:	4909      	ldr	r1, [pc, #36]	; (8004d00 <siprintf+0x3c>)
 8004cdc:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ce0:	9105      	str	r1, [sp, #20]
 8004ce2:	6800      	ldr	r0, [r0, #0]
 8004ce4:	a902      	add	r1, sp, #8
 8004ce6:	9301      	str	r3, [sp, #4]
 8004ce8:	f000 f8fe 	bl	8004ee8 <_svfiprintf_r>
 8004cec:	2200      	movs	r2, #0
 8004cee:	9b02      	ldr	r3, [sp, #8]
 8004cf0:	701a      	strb	r2, [r3, #0]
 8004cf2:	b01c      	add	sp, #112	; 0x70
 8004cf4:	f85d eb04 	ldr.w	lr, [sp], #4
 8004cf8:	b003      	add	sp, #12
 8004cfa:	4770      	bx	lr
 8004cfc:	20000024 	.word	0x20000024
 8004d00:	ffff0208 	.word	0xffff0208

08004d04 <__retarget_lock_acquire_recursive>:
 8004d04:	4770      	bx	lr

08004d06 <__retarget_lock_release_recursive>:
 8004d06:	4770      	bx	lr

08004d08 <sbrk_aligned>:
 8004d08:	b570      	push	{r4, r5, r6, lr}
 8004d0a:	4e0e      	ldr	r6, [pc, #56]	; (8004d44 <sbrk_aligned+0x3c>)
 8004d0c:	460c      	mov	r4, r1
 8004d0e:	6831      	ldr	r1, [r6, #0]
 8004d10:	4605      	mov	r5, r0
 8004d12:	b911      	cbnz	r1, 8004d1a <sbrk_aligned+0x12>
 8004d14:	f000 fb7e 	bl	8005414 <_sbrk_r>
 8004d18:	6030      	str	r0, [r6, #0]
 8004d1a:	4621      	mov	r1, r4
 8004d1c:	4628      	mov	r0, r5
 8004d1e:	f000 fb79 	bl	8005414 <_sbrk_r>
 8004d22:	1c43      	adds	r3, r0, #1
 8004d24:	d00a      	beq.n	8004d3c <sbrk_aligned+0x34>
 8004d26:	1cc4      	adds	r4, r0, #3
 8004d28:	f024 0403 	bic.w	r4, r4, #3
 8004d2c:	42a0      	cmp	r0, r4
 8004d2e:	d007      	beq.n	8004d40 <sbrk_aligned+0x38>
 8004d30:	1a21      	subs	r1, r4, r0
 8004d32:	4628      	mov	r0, r5
 8004d34:	f000 fb6e 	bl	8005414 <_sbrk_r>
 8004d38:	3001      	adds	r0, #1
 8004d3a:	d101      	bne.n	8004d40 <sbrk_aligned+0x38>
 8004d3c:	f04f 34ff 	mov.w	r4, #4294967295
 8004d40:	4620      	mov	r0, r4
 8004d42:	bd70      	pop	{r4, r5, r6, pc}
 8004d44:	2000072c 	.word	0x2000072c

08004d48 <_malloc_r>:
 8004d48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d4c:	1ccd      	adds	r5, r1, #3
 8004d4e:	f025 0503 	bic.w	r5, r5, #3
 8004d52:	3508      	adds	r5, #8
 8004d54:	2d0c      	cmp	r5, #12
 8004d56:	bf38      	it	cc
 8004d58:	250c      	movcc	r5, #12
 8004d5a:	2d00      	cmp	r5, #0
 8004d5c:	4607      	mov	r7, r0
 8004d5e:	db01      	blt.n	8004d64 <_malloc_r+0x1c>
 8004d60:	42a9      	cmp	r1, r5
 8004d62:	d905      	bls.n	8004d70 <_malloc_r+0x28>
 8004d64:	230c      	movs	r3, #12
 8004d66:	2600      	movs	r6, #0
 8004d68:	603b      	str	r3, [r7, #0]
 8004d6a:	4630      	mov	r0, r6
 8004d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d70:	4e2e      	ldr	r6, [pc, #184]	; (8004e2c <_malloc_r+0xe4>)
 8004d72:	f000 fb95 	bl	80054a0 <__malloc_lock>
 8004d76:	6833      	ldr	r3, [r6, #0]
 8004d78:	461c      	mov	r4, r3
 8004d7a:	bb34      	cbnz	r4, 8004dca <_malloc_r+0x82>
 8004d7c:	4629      	mov	r1, r5
 8004d7e:	4638      	mov	r0, r7
 8004d80:	f7ff ffc2 	bl	8004d08 <sbrk_aligned>
 8004d84:	1c43      	adds	r3, r0, #1
 8004d86:	4604      	mov	r4, r0
 8004d88:	d14d      	bne.n	8004e26 <_malloc_r+0xde>
 8004d8a:	6834      	ldr	r4, [r6, #0]
 8004d8c:	4626      	mov	r6, r4
 8004d8e:	2e00      	cmp	r6, #0
 8004d90:	d140      	bne.n	8004e14 <_malloc_r+0xcc>
 8004d92:	6823      	ldr	r3, [r4, #0]
 8004d94:	4631      	mov	r1, r6
 8004d96:	4638      	mov	r0, r7
 8004d98:	eb04 0803 	add.w	r8, r4, r3
 8004d9c:	f000 fb3a 	bl	8005414 <_sbrk_r>
 8004da0:	4580      	cmp	r8, r0
 8004da2:	d13a      	bne.n	8004e1a <_malloc_r+0xd2>
 8004da4:	6821      	ldr	r1, [r4, #0]
 8004da6:	3503      	adds	r5, #3
 8004da8:	1a6d      	subs	r5, r5, r1
 8004daa:	f025 0503 	bic.w	r5, r5, #3
 8004dae:	3508      	adds	r5, #8
 8004db0:	2d0c      	cmp	r5, #12
 8004db2:	bf38      	it	cc
 8004db4:	250c      	movcc	r5, #12
 8004db6:	4638      	mov	r0, r7
 8004db8:	4629      	mov	r1, r5
 8004dba:	f7ff ffa5 	bl	8004d08 <sbrk_aligned>
 8004dbe:	3001      	adds	r0, #1
 8004dc0:	d02b      	beq.n	8004e1a <_malloc_r+0xd2>
 8004dc2:	6823      	ldr	r3, [r4, #0]
 8004dc4:	442b      	add	r3, r5
 8004dc6:	6023      	str	r3, [r4, #0]
 8004dc8:	e00e      	b.n	8004de8 <_malloc_r+0xa0>
 8004dca:	6822      	ldr	r2, [r4, #0]
 8004dcc:	1b52      	subs	r2, r2, r5
 8004dce:	d41e      	bmi.n	8004e0e <_malloc_r+0xc6>
 8004dd0:	2a0b      	cmp	r2, #11
 8004dd2:	d916      	bls.n	8004e02 <_malloc_r+0xba>
 8004dd4:	1961      	adds	r1, r4, r5
 8004dd6:	42a3      	cmp	r3, r4
 8004dd8:	6025      	str	r5, [r4, #0]
 8004dda:	bf18      	it	ne
 8004ddc:	6059      	strne	r1, [r3, #4]
 8004dde:	6863      	ldr	r3, [r4, #4]
 8004de0:	bf08      	it	eq
 8004de2:	6031      	streq	r1, [r6, #0]
 8004de4:	5162      	str	r2, [r4, r5]
 8004de6:	604b      	str	r3, [r1, #4]
 8004de8:	4638      	mov	r0, r7
 8004dea:	f104 060b 	add.w	r6, r4, #11
 8004dee:	f000 fb5d 	bl	80054ac <__malloc_unlock>
 8004df2:	f026 0607 	bic.w	r6, r6, #7
 8004df6:	1d23      	adds	r3, r4, #4
 8004df8:	1af2      	subs	r2, r6, r3
 8004dfa:	d0b6      	beq.n	8004d6a <_malloc_r+0x22>
 8004dfc:	1b9b      	subs	r3, r3, r6
 8004dfe:	50a3      	str	r3, [r4, r2]
 8004e00:	e7b3      	b.n	8004d6a <_malloc_r+0x22>
 8004e02:	6862      	ldr	r2, [r4, #4]
 8004e04:	42a3      	cmp	r3, r4
 8004e06:	bf0c      	ite	eq
 8004e08:	6032      	streq	r2, [r6, #0]
 8004e0a:	605a      	strne	r2, [r3, #4]
 8004e0c:	e7ec      	b.n	8004de8 <_malloc_r+0xa0>
 8004e0e:	4623      	mov	r3, r4
 8004e10:	6864      	ldr	r4, [r4, #4]
 8004e12:	e7b2      	b.n	8004d7a <_malloc_r+0x32>
 8004e14:	4634      	mov	r4, r6
 8004e16:	6876      	ldr	r6, [r6, #4]
 8004e18:	e7b9      	b.n	8004d8e <_malloc_r+0x46>
 8004e1a:	230c      	movs	r3, #12
 8004e1c:	4638      	mov	r0, r7
 8004e1e:	603b      	str	r3, [r7, #0]
 8004e20:	f000 fb44 	bl	80054ac <__malloc_unlock>
 8004e24:	e7a1      	b.n	8004d6a <_malloc_r+0x22>
 8004e26:	6025      	str	r5, [r4, #0]
 8004e28:	e7de      	b.n	8004de8 <_malloc_r+0xa0>
 8004e2a:	bf00      	nop
 8004e2c:	20000728 	.word	0x20000728

08004e30 <__ssputs_r>:
 8004e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e34:	688e      	ldr	r6, [r1, #8]
 8004e36:	4682      	mov	sl, r0
 8004e38:	429e      	cmp	r6, r3
 8004e3a:	460c      	mov	r4, r1
 8004e3c:	4690      	mov	r8, r2
 8004e3e:	461f      	mov	r7, r3
 8004e40:	d838      	bhi.n	8004eb4 <__ssputs_r+0x84>
 8004e42:	898a      	ldrh	r2, [r1, #12]
 8004e44:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004e48:	d032      	beq.n	8004eb0 <__ssputs_r+0x80>
 8004e4a:	6825      	ldr	r5, [r4, #0]
 8004e4c:	6909      	ldr	r1, [r1, #16]
 8004e4e:	3301      	adds	r3, #1
 8004e50:	eba5 0901 	sub.w	r9, r5, r1
 8004e54:	6965      	ldr	r5, [r4, #20]
 8004e56:	444b      	add	r3, r9
 8004e58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004e5c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004e60:	106d      	asrs	r5, r5, #1
 8004e62:	429d      	cmp	r5, r3
 8004e64:	bf38      	it	cc
 8004e66:	461d      	movcc	r5, r3
 8004e68:	0553      	lsls	r3, r2, #21
 8004e6a:	d531      	bpl.n	8004ed0 <__ssputs_r+0xa0>
 8004e6c:	4629      	mov	r1, r5
 8004e6e:	f7ff ff6b 	bl	8004d48 <_malloc_r>
 8004e72:	4606      	mov	r6, r0
 8004e74:	b950      	cbnz	r0, 8004e8c <__ssputs_r+0x5c>
 8004e76:	230c      	movs	r3, #12
 8004e78:	f04f 30ff 	mov.w	r0, #4294967295
 8004e7c:	f8ca 3000 	str.w	r3, [sl]
 8004e80:	89a3      	ldrh	r3, [r4, #12]
 8004e82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e86:	81a3      	strh	r3, [r4, #12]
 8004e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e8c:	464a      	mov	r2, r9
 8004e8e:	6921      	ldr	r1, [r4, #16]
 8004e90:	f000 fade 	bl	8005450 <memcpy>
 8004e94:	89a3      	ldrh	r3, [r4, #12]
 8004e96:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004e9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e9e:	81a3      	strh	r3, [r4, #12]
 8004ea0:	6126      	str	r6, [r4, #16]
 8004ea2:	444e      	add	r6, r9
 8004ea4:	6026      	str	r6, [r4, #0]
 8004ea6:	463e      	mov	r6, r7
 8004ea8:	6165      	str	r5, [r4, #20]
 8004eaa:	eba5 0509 	sub.w	r5, r5, r9
 8004eae:	60a5      	str	r5, [r4, #8]
 8004eb0:	42be      	cmp	r6, r7
 8004eb2:	d900      	bls.n	8004eb6 <__ssputs_r+0x86>
 8004eb4:	463e      	mov	r6, r7
 8004eb6:	4632      	mov	r2, r6
 8004eb8:	4641      	mov	r1, r8
 8004eba:	6820      	ldr	r0, [r4, #0]
 8004ebc:	f000 fad6 	bl	800546c <memmove>
 8004ec0:	68a3      	ldr	r3, [r4, #8]
 8004ec2:	2000      	movs	r0, #0
 8004ec4:	1b9b      	subs	r3, r3, r6
 8004ec6:	60a3      	str	r3, [r4, #8]
 8004ec8:	6823      	ldr	r3, [r4, #0]
 8004eca:	4433      	add	r3, r6
 8004ecc:	6023      	str	r3, [r4, #0]
 8004ece:	e7db      	b.n	8004e88 <__ssputs_r+0x58>
 8004ed0:	462a      	mov	r2, r5
 8004ed2:	f000 fb39 	bl	8005548 <_realloc_r>
 8004ed6:	4606      	mov	r6, r0
 8004ed8:	2800      	cmp	r0, #0
 8004eda:	d1e1      	bne.n	8004ea0 <__ssputs_r+0x70>
 8004edc:	4650      	mov	r0, sl
 8004ede:	6921      	ldr	r1, [r4, #16]
 8004ee0:	f000 faea 	bl	80054b8 <_free_r>
 8004ee4:	e7c7      	b.n	8004e76 <__ssputs_r+0x46>
	...

08004ee8 <_svfiprintf_r>:
 8004ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eec:	4698      	mov	r8, r3
 8004eee:	898b      	ldrh	r3, [r1, #12]
 8004ef0:	4607      	mov	r7, r0
 8004ef2:	061b      	lsls	r3, r3, #24
 8004ef4:	460d      	mov	r5, r1
 8004ef6:	4614      	mov	r4, r2
 8004ef8:	b09d      	sub	sp, #116	; 0x74
 8004efa:	d50e      	bpl.n	8004f1a <_svfiprintf_r+0x32>
 8004efc:	690b      	ldr	r3, [r1, #16]
 8004efe:	b963      	cbnz	r3, 8004f1a <_svfiprintf_r+0x32>
 8004f00:	2140      	movs	r1, #64	; 0x40
 8004f02:	f7ff ff21 	bl	8004d48 <_malloc_r>
 8004f06:	6028      	str	r0, [r5, #0]
 8004f08:	6128      	str	r0, [r5, #16]
 8004f0a:	b920      	cbnz	r0, 8004f16 <_svfiprintf_r+0x2e>
 8004f0c:	230c      	movs	r3, #12
 8004f0e:	603b      	str	r3, [r7, #0]
 8004f10:	f04f 30ff 	mov.w	r0, #4294967295
 8004f14:	e0d1      	b.n	80050ba <_svfiprintf_r+0x1d2>
 8004f16:	2340      	movs	r3, #64	; 0x40
 8004f18:	616b      	str	r3, [r5, #20]
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	9309      	str	r3, [sp, #36]	; 0x24
 8004f1e:	2320      	movs	r3, #32
 8004f20:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f24:	2330      	movs	r3, #48	; 0x30
 8004f26:	f04f 0901 	mov.w	r9, #1
 8004f2a:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f2e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80050d4 <_svfiprintf_r+0x1ec>
 8004f32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f36:	4623      	mov	r3, r4
 8004f38:	469a      	mov	sl, r3
 8004f3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f3e:	b10a      	cbz	r2, 8004f44 <_svfiprintf_r+0x5c>
 8004f40:	2a25      	cmp	r2, #37	; 0x25
 8004f42:	d1f9      	bne.n	8004f38 <_svfiprintf_r+0x50>
 8004f44:	ebba 0b04 	subs.w	fp, sl, r4
 8004f48:	d00b      	beq.n	8004f62 <_svfiprintf_r+0x7a>
 8004f4a:	465b      	mov	r3, fp
 8004f4c:	4622      	mov	r2, r4
 8004f4e:	4629      	mov	r1, r5
 8004f50:	4638      	mov	r0, r7
 8004f52:	f7ff ff6d 	bl	8004e30 <__ssputs_r>
 8004f56:	3001      	adds	r0, #1
 8004f58:	f000 80aa 	beq.w	80050b0 <_svfiprintf_r+0x1c8>
 8004f5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f5e:	445a      	add	r2, fp
 8004f60:	9209      	str	r2, [sp, #36]	; 0x24
 8004f62:	f89a 3000 	ldrb.w	r3, [sl]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	f000 80a2 	beq.w	80050b0 <_svfiprintf_r+0x1c8>
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	f04f 32ff 	mov.w	r2, #4294967295
 8004f72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f76:	f10a 0a01 	add.w	sl, sl, #1
 8004f7a:	9304      	str	r3, [sp, #16]
 8004f7c:	9307      	str	r3, [sp, #28]
 8004f7e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004f82:	931a      	str	r3, [sp, #104]	; 0x68
 8004f84:	4654      	mov	r4, sl
 8004f86:	2205      	movs	r2, #5
 8004f88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f8c:	4851      	ldr	r0, [pc, #324]	; (80050d4 <_svfiprintf_r+0x1ec>)
 8004f8e:	f000 fa51 	bl	8005434 <memchr>
 8004f92:	9a04      	ldr	r2, [sp, #16]
 8004f94:	b9d8      	cbnz	r0, 8004fce <_svfiprintf_r+0xe6>
 8004f96:	06d0      	lsls	r0, r2, #27
 8004f98:	bf44      	itt	mi
 8004f9a:	2320      	movmi	r3, #32
 8004f9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004fa0:	0711      	lsls	r1, r2, #28
 8004fa2:	bf44      	itt	mi
 8004fa4:	232b      	movmi	r3, #43	; 0x2b
 8004fa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004faa:	f89a 3000 	ldrb.w	r3, [sl]
 8004fae:	2b2a      	cmp	r3, #42	; 0x2a
 8004fb0:	d015      	beq.n	8004fde <_svfiprintf_r+0xf6>
 8004fb2:	4654      	mov	r4, sl
 8004fb4:	2000      	movs	r0, #0
 8004fb6:	f04f 0c0a 	mov.w	ip, #10
 8004fba:	9a07      	ldr	r2, [sp, #28]
 8004fbc:	4621      	mov	r1, r4
 8004fbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004fc2:	3b30      	subs	r3, #48	; 0x30
 8004fc4:	2b09      	cmp	r3, #9
 8004fc6:	d94e      	bls.n	8005066 <_svfiprintf_r+0x17e>
 8004fc8:	b1b0      	cbz	r0, 8004ff8 <_svfiprintf_r+0x110>
 8004fca:	9207      	str	r2, [sp, #28]
 8004fcc:	e014      	b.n	8004ff8 <_svfiprintf_r+0x110>
 8004fce:	eba0 0308 	sub.w	r3, r0, r8
 8004fd2:	fa09 f303 	lsl.w	r3, r9, r3
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	46a2      	mov	sl, r4
 8004fda:	9304      	str	r3, [sp, #16]
 8004fdc:	e7d2      	b.n	8004f84 <_svfiprintf_r+0x9c>
 8004fde:	9b03      	ldr	r3, [sp, #12]
 8004fe0:	1d19      	adds	r1, r3, #4
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	9103      	str	r1, [sp, #12]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	bfbb      	ittet	lt
 8004fea:	425b      	neglt	r3, r3
 8004fec:	f042 0202 	orrlt.w	r2, r2, #2
 8004ff0:	9307      	strge	r3, [sp, #28]
 8004ff2:	9307      	strlt	r3, [sp, #28]
 8004ff4:	bfb8      	it	lt
 8004ff6:	9204      	strlt	r2, [sp, #16]
 8004ff8:	7823      	ldrb	r3, [r4, #0]
 8004ffa:	2b2e      	cmp	r3, #46	; 0x2e
 8004ffc:	d10c      	bne.n	8005018 <_svfiprintf_r+0x130>
 8004ffe:	7863      	ldrb	r3, [r4, #1]
 8005000:	2b2a      	cmp	r3, #42	; 0x2a
 8005002:	d135      	bne.n	8005070 <_svfiprintf_r+0x188>
 8005004:	9b03      	ldr	r3, [sp, #12]
 8005006:	3402      	adds	r4, #2
 8005008:	1d1a      	adds	r2, r3, #4
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	9203      	str	r2, [sp, #12]
 800500e:	2b00      	cmp	r3, #0
 8005010:	bfb8      	it	lt
 8005012:	f04f 33ff 	movlt.w	r3, #4294967295
 8005016:	9305      	str	r3, [sp, #20]
 8005018:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80050d8 <_svfiprintf_r+0x1f0>
 800501c:	2203      	movs	r2, #3
 800501e:	4650      	mov	r0, sl
 8005020:	7821      	ldrb	r1, [r4, #0]
 8005022:	f000 fa07 	bl	8005434 <memchr>
 8005026:	b140      	cbz	r0, 800503a <_svfiprintf_r+0x152>
 8005028:	2340      	movs	r3, #64	; 0x40
 800502a:	eba0 000a 	sub.w	r0, r0, sl
 800502e:	fa03 f000 	lsl.w	r0, r3, r0
 8005032:	9b04      	ldr	r3, [sp, #16]
 8005034:	3401      	adds	r4, #1
 8005036:	4303      	orrs	r3, r0
 8005038:	9304      	str	r3, [sp, #16]
 800503a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800503e:	2206      	movs	r2, #6
 8005040:	4826      	ldr	r0, [pc, #152]	; (80050dc <_svfiprintf_r+0x1f4>)
 8005042:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005046:	f000 f9f5 	bl	8005434 <memchr>
 800504a:	2800      	cmp	r0, #0
 800504c:	d038      	beq.n	80050c0 <_svfiprintf_r+0x1d8>
 800504e:	4b24      	ldr	r3, [pc, #144]	; (80050e0 <_svfiprintf_r+0x1f8>)
 8005050:	bb1b      	cbnz	r3, 800509a <_svfiprintf_r+0x1b2>
 8005052:	9b03      	ldr	r3, [sp, #12]
 8005054:	3307      	adds	r3, #7
 8005056:	f023 0307 	bic.w	r3, r3, #7
 800505a:	3308      	adds	r3, #8
 800505c:	9303      	str	r3, [sp, #12]
 800505e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005060:	4433      	add	r3, r6
 8005062:	9309      	str	r3, [sp, #36]	; 0x24
 8005064:	e767      	b.n	8004f36 <_svfiprintf_r+0x4e>
 8005066:	460c      	mov	r4, r1
 8005068:	2001      	movs	r0, #1
 800506a:	fb0c 3202 	mla	r2, ip, r2, r3
 800506e:	e7a5      	b.n	8004fbc <_svfiprintf_r+0xd4>
 8005070:	2300      	movs	r3, #0
 8005072:	f04f 0c0a 	mov.w	ip, #10
 8005076:	4619      	mov	r1, r3
 8005078:	3401      	adds	r4, #1
 800507a:	9305      	str	r3, [sp, #20]
 800507c:	4620      	mov	r0, r4
 800507e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005082:	3a30      	subs	r2, #48	; 0x30
 8005084:	2a09      	cmp	r2, #9
 8005086:	d903      	bls.n	8005090 <_svfiprintf_r+0x1a8>
 8005088:	2b00      	cmp	r3, #0
 800508a:	d0c5      	beq.n	8005018 <_svfiprintf_r+0x130>
 800508c:	9105      	str	r1, [sp, #20]
 800508e:	e7c3      	b.n	8005018 <_svfiprintf_r+0x130>
 8005090:	4604      	mov	r4, r0
 8005092:	2301      	movs	r3, #1
 8005094:	fb0c 2101 	mla	r1, ip, r1, r2
 8005098:	e7f0      	b.n	800507c <_svfiprintf_r+0x194>
 800509a:	ab03      	add	r3, sp, #12
 800509c:	9300      	str	r3, [sp, #0]
 800509e:	462a      	mov	r2, r5
 80050a0:	4638      	mov	r0, r7
 80050a2:	4b10      	ldr	r3, [pc, #64]	; (80050e4 <_svfiprintf_r+0x1fc>)
 80050a4:	a904      	add	r1, sp, #16
 80050a6:	f3af 8000 	nop.w
 80050aa:	1c42      	adds	r2, r0, #1
 80050ac:	4606      	mov	r6, r0
 80050ae:	d1d6      	bne.n	800505e <_svfiprintf_r+0x176>
 80050b0:	89ab      	ldrh	r3, [r5, #12]
 80050b2:	065b      	lsls	r3, r3, #25
 80050b4:	f53f af2c 	bmi.w	8004f10 <_svfiprintf_r+0x28>
 80050b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80050ba:	b01d      	add	sp, #116	; 0x74
 80050bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050c0:	ab03      	add	r3, sp, #12
 80050c2:	9300      	str	r3, [sp, #0]
 80050c4:	462a      	mov	r2, r5
 80050c6:	4638      	mov	r0, r7
 80050c8:	4b06      	ldr	r3, [pc, #24]	; (80050e4 <_svfiprintf_r+0x1fc>)
 80050ca:	a904      	add	r1, sp, #16
 80050cc:	f000 f87c 	bl	80051c8 <_printf_i>
 80050d0:	e7eb      	b.n	80050aa <_svfiprintf_r+0x1c2>
 80050d2:	bf00      	nop
 80050d4:	08005a88 	.word	0x08005a88
 80050d8:	08005a8e 	.word	0x08005a8e
 80050dc:	08005a92 	.word	0x08005a92
 80050e0:	00000000 	.word	0x00000000
 80050e4:	08004e31 	.word	0x08004e31

080050e8 <_printf_common>:
 80050e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050ec:	4616      	mov	r6, r2
 80050ee:	4699      	mov	r9, r3
 80050f0:	688a      	ldr	r2, [r1, #8]
 80050f2:	690b      	ldr	r3, [r1, #16]
 80050f4:	4607      	mov	r7, r0
 80050f6:	4293      	cmp	r3, r2
 80050f8:	bfb8      	it	lt
 80050fa:	4613      	movlt	r3, r2
 80050fc:	6033      	str	r3, [r6, #0]
 80050fe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005102:	460c      	mov	r4, r1
 8005104:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005108:	b10a      	cbz	r2, 800510e <_printf_common+0x26>
 800510a:	3301      	adds	r3, #1
 800510c:	6033      	str	r3, [r6, #0]
 800510e:	6823      	ldr	r3, [r4, #0]
 8005110:	0699      	lsls	r1, r3, #26
 8005112:	bf42      	ittt	mi
 8005114:	6833      	ldrmi	r3, [r6, #0]
 8005116:	3302      	addmi	r3, #2
 8005118:	6033      	strmi	r3, [r6, #0]
 800511a:	6825      	ldr	r5, [r4, #0]
 800511c:	f015 0506 	ands.w	r5, r5, #6
 8005120:	d106      	bne.n	8005130 <_printf_common+0x48>
 8005122:	f104 0a19 	add.w	sl, r4, #25
 8005126:	68e3      	ldr	r3, [r4, #12]
 8005128:	6832      	ldr	r2, [r6, #0]
 800512a:	1a9b      	subs	r3, r3, r2
 800512c:	42ab      	cmp	r3, r5
 800512e:	dc28      	bgt.n	8005182 <_printf_common+0x9a>
 8005130:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005134:	1e13      	subs	r3, r2, #0
 8005136:	6822      	ldr	r2, [r4, #0]
 8005138:	bf18      	it	ne
 800513a:	2301      	movne	r3, #1
 800513c:	0692      	lsls	r2, r2, #26
 800513e:	d42d      	bmi.n	800519c <_printf_common+0xb4>
 8005140:	4649      	mov	r1, r9
 8005142:	4638      	mov	r0, r7
 8005144:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005148:	47c0      	blx	r8
 800514a:	3001      	adds	r0, #1
 800514c:	d020      	beq.n	8005190 <_printf_common+0xa8>
 800514e:	6823      	ldr	r3, [r4, #0]
 8005150:	68e5      	ldr	r5, [r4, #12]
 8005152:	f003 0306 	and.w	r3, r3, #6
 8005156:	2b04      	cmp	r3, #4
 8005158:	bf18      	it	ne
 800515a:	2500      	movne	r5, #0
 800515c:	6832      	ldr	r2, [r6, #0]
 800515e:	f04f 0600 	mov.w	r6, #0
 8005162:	68a3      	ldr	r3, [r4, #8]
 8005164:	bf08      	it	eq
 8005166:	1aad      	subeq	r5, r5, r2
 8005168:	6922      	ldr	r2, [r4, #16]
 800516a:	bf08      	it	eq
 800516c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005170:	4293      	cmp	r3, r2
 8005172:	bfc4      	itt	gt
 8005174:	1a9b      	subgt	r3, r3, r2
 8005176:	18ed      	addgt	r5, r5, r3
 8005178:	341a      	adds	r4, #26
 800517a:	42b5      	cmp	r5, r6
 800517c:	d11a      	bne.n	80051b4 <_printf_common+0xcc>
 800517e:	2000      	movs	r0, #0
 8005180:	e008      	b.n	8005194 <_printf_common+0xac>
 8005182:	2301      	movs	r3, #1
 8005184:	4652      	mov	r2, sl
 8005186:	4649      	mov	r1, r9
 8005188:	4638      	mov	r0, r7
 800518a:	47c0      	blx	r8
 800518c:	3001      	adds	r0, #1
 800518e:	d103      	bne.n	8005198 <_printf_common+0xb0>
 8005190:	f04f 30ff 	mov.w	r0, #4294967295
 8005194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005198:	3501      	adds	r5, #1
 800519a:	e7c4      	b.n	8005126 <_printf_common+0x3e>
 800519c:	2030      	movs	r0, #48	; 0x30
 800519e:	18e1      	adds	r1, r4, r3
 80051a0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80051a4:	1c5a      	adds	r2, r3, #1
 80051a6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80051aa:	4422      	add	r2, r4
 80051ac:	3302      	adds	r3, #2
 80051ae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80051b2:	e7c5      	b.n	8005140 <_printf_common+0x58>
 80051b4:	2301      	movs	r3, #1
 80051b6:	4622      	mov	r2, r4
 80051b8:	4649      	mov	r1, r9
 80051ba:	4638      	mov	r0, r7
 80051bc:	47c0      	blx	r8
 80051be:	3001      	adds	r0, #1
 80051c0:	d0e6      	beq.n	8005190 <_printf_common+0xa8>
 80051c2:	3601      	adds	r6, #1
 80051c4:	e7d9      	b.n	800517a <_printf_common+0x92>
	...

080051c8 <_printf_i>:
 80051c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051cc:	7e0f      	ldrb	r7, [r1, #24]
 80051ce:	4691      	mov	r9, r2
 80051d0:	2f78      	cmp	r7, #120	; 0x78
 80051d2:	4680      	mov	r8, r0
 80051d4:	460c      	mov	r4, r1
 80051d6:	469a      	mov	sl, r3
 80051d8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80051da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80051de:	d807      	bhi.n	80051f0 <_printf_i+0x28>
 80051e0:	2f62      	cmp	r7, #98	; 0x62
 80051e2:	d80a      	bhi.n	80051fa <_printf_i+0x32>
 80051e4:	2f00      	cmp	r7, #0
 80051e6:	f000 80d9 	beq.w	800539c <_printf_i+0x1d4>
 80051ea:	2f58      	cmp	r7, #88	; 0x58
 80051ec:	f000 80a4 	beq.w	8005338 <_printf_i+0x170>
 80051f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80051f8:	e03a      	b.n	8005270 <_printf_i+0xa8>
 80051fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80051fe:	2b15      	cmp	r3, #21
 8005200:	d8f6      	bhi.n	80051f0 <_printf_i+0x28>
 8005202:	a101      	add	r1, pc, #4	; (adr r1, 8005208 <_printf_i+0x40>)
 8005204:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005208:	08005261 	.word	0x08005261
 800520c:	08005275 	.word	0x08005275
 8005210:	080051f1 	.word	0x080051f1
 8005214:	080051f1 	.word	0x080051f1
 8005218:	080051f1 	.word	0x080051f1
 800521c:	080051f1 	.word	0x080051f1
 8005220:	08005275 	.word	0x08005275
 8005224:	080051f1 	.word	0x080051f1
 8005228:	080051f1 	.word	0x080051f1
 800522c:	080051f1 	.word	0x080051f1
 8005230:	080051f1 	.word	0x080051f1
 8005234:	08005383 	.word	0x08005383
 8005238:	080052a5 	.word	0x080052a5
 800523c:	08005365 	.word	0x08005365
 8005240:	080051f1 	.word	0x080051f1
 8005244:	080051f1 	.word	0x080051f1
 8005248:	080053a5 	.word	0x080053a5
 800524c:	080051f1 	.word	0x080051f1
 8005250:	080052a5 	.word	0x080052a5
 8005254:	080051f1 	.word	0x080051f1
 8005258:	080051f1 	.word	0x080051f1
 800525c:	0800536d 	.word	0x0800536d
 8005260:	682b      	ldr	r3, [r5, #0]
 8005262:	1d1a      	adds	r2, r3, #4
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	602a      	str	r2, [r5, #0]
 8005268:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800526c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005270:	2301      	movs	r3, #1
 8005272:	e0a4      	b.n	80053be <_printf_i+0x1f6>
 8005274:	6820      	ldr	r0, [r4, #0]
 8005276:	6829      	ldr	r1, [r5, #0]
 8005278:	0606      	lsls	r6, r0, #24
 800527a:	f101 0304 	add.w	r3, r1, #4
 800527e:	d50a      	bpl.n	8005296 <_printf_i+0xce>
 8005280:	680e      	ldr	r6, [r1, #0]
 8005282:	602b      	str	r3, [r5, #0]
 8005284:	2e00      	cmp	r6, #0
 8005286:	da03      	bge.n	8005290 <_printf_i+0xc8>
 8005288:	232d      	movs	r3, #45	; 0x2d
 800528a:	4276      	negs	r6, r6
 800528c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005290:	230a      	movs	r3, #10
 8005292:	485e      	ldr	r0, [pc, #376]	; (800540c <_printf_i+0x244>)
 8005294:	e019      	b.n	80052ca <_printf_i+0x102>
 8005296:	680e      	ldr	r6, [r1, #0]
 8005298:	f010 0f40 	tst.w	r0, #64	; 0x40
 800529c:	602b      	str	r3, [r5, #0]
 800529e:	bf18      	it	ne
 80052a0:	b236      	sxthne	r6, r6
 80052a2:	e7ef      	b.n	8005284 <_printf_i+0xbc>
 80052a4:	682b      	ldr	r3, [r5, #0]
 80052a6:	6820      	ldr	r0, [r4, #0]
 80052a8:	1d19      	adds	r1, r3, #4
 80052aa:	6029      	str	r1, [r5, #0]
 80052ac:	0601      	lsls	r1, r0, #24
 80052ae:	d501      	bpl.n	80052b4 <_printf_i+0xec>
 80052b0:	681e      	ldr	r6, [r3, #0]
 80052b2:	e002      	b.n	80052ba <_printf_i+0xf2>
 80052b4:	0646      	lsls	r6, r0, #25
 80052b6:	d5fb      	bpl.n	80052b0 <_printf_i+0xe8>
 80052b8:	881e      	ldrh	r6, [r3, #0]
 80052ba:	2f6f      	cmp	r7, #111	; 0x6f
 80052bc:	bf0c      	ite	eq
 80052be:	2308      	moveq	r3, #8
 80052c0:	230a      	movne	r3, #10
 80052c2:	4852      	ldr	r0, [pc, #328]	; (800540c <_printf_i+0x244>)
 80052c4:	2100      	movs	r1, #0
 80052c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80052ca:	6865      	ldr	r5, [r4, #4]
 80052cc:	2d00      	cmp	r5, #0
 80052ce:	bfa8      	it	ge
 80052d0:	6821      	ldrge	r1, [r4, #0]
 80052d2:	60a5      	str	r5, [r4, #8]
 80052d4:	bfa4      	itt	ge
 80052d6:	f021 0104 	bicge.w	r1, r1, #4
 80052da:	6021      	strge	r1, [r4, #0]
 80052dc:	b90e      	cbnz	r6, 80052e2 <_printf_i+0x11a>
 80052de:	2d00      	cmp	r5, #0
 80052e0:	d04d      	beq.n	800537e <_printf_i+0x1b6>
 80052e2:	4615      	mov	r5, r2
 80052e4:	fbb6 f1f3 	udiv	r1, r6, r3
 80052e8:	fb03 6711 	mls	r7, r3, r1, r6
 80052ec:	5dc7      	ldrb	r7, [r0, r7]
 80052ee:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80052f2:	4637      	mov	r7, r6
 80052f4:	42bb      	cmp	r3, r7
 80052f6:	460e      	mov	r6, r1
 80052f8:	d9f4      	bls.n	80052e4 <_printf_i+0x11c>
 80052fa:	2b08      	cmp	r3, #8
 80052fc:	d10b      	bne.n	8005316 <_printf_i+0x14e>
 80052fe:	6823      	ldr	r3, [r4, #0]
 8005300:	07de      	lsls	r6, r3, #31
 8005302:	d508      	bpl.n	8005316 <_printf_i+0x14e>
 8005304:	6923      	ldr	r3, [r4, #16]
 8005306:	6861      	ldr	r1, [r4, #4]
 8005308:	4299      	cmp	r1, r3
 800530a:	bfde      	ittt	le
 800530c:	2330      	movle	r3, #48	; 0x30
 800530e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005312:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005316:	1b52      	subs	r2, r2, r5
 8005318:	6122      	str	r2, [r4, #16]
 800531a:	464b      	mov	r3, r9
 800531c:	4621      	mov	r1, r4
 800531e:	4640      	mov	r0, r8
 8005320:	f8cd a000 	str.w	sl, [sp]
 8005324:	aa03      	add	r2, sp, #12
 8005326:	f7ff fedf 	bl	80050e8 <_printf_common>
 800532a:	3001      	adds	r0, #1
 800532c:	d14c      	bne.n	80053c8 <_printf_i+0x200>
 800532e:	f04f 30ff 	mov.w	r0, #4294967295
 8005332:	b004      	add	sp, #16
 8005334:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005338:	4834      	ldr	r0, [pc, #208]	; (800540c <_printf_i+0x244>)
 800533a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800533e:	6829      	ldr	r1, [r5, #0]
 8005340:	6823      	ldr	r3, [r4, #0]
 8005342:	f851 6b04 	ldr.w	r6, [r1], #4
 8005346:	6029      	str	r1, [r5, #0]
 8005348:	061d      	lsls	r5, r3, #24
 800534a:	d514      	bpl.n	8005376 <_printf_i+0x1ae>
 800534c:	07df      	lsls	r7, r3, #31
 800534e:	bf44      	itt	mi
 8005350:	f043 0320 	orrmi.w	r3, r3, #32
 8005354:	6023      	strmi	r3, [r4, #0]
 8005356:	b91e      	cbnz	r6, 8005360 <_printf_i+0x198>
 8005358:	6823      	ldr	r3, [r4, #0]
 800535a:	f023 0320 	bic.w	r3, r3, #32
 800535e:	6023      	str	r3, [r4, #0]
 8005360:	2310      	movs	r3, #16
 8005362:	e7af      	b.n	80052c4 <_printf_i+0xfc>
 8005364:	6823      	ldr	r3, [r4, #0]
 8005366:	f043 0320 	orr.w	r3, r3, #32
 800536a:	6023      	str	r3, [r4, #0]
 800536c:	2378      	movs	r3, #120	; 0x78
 800536e:	4828      	ldr	r0, [pc, #160]	; (8005410 <_printf_i+0x248>)
 8005370:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005374:	e7e3      	b.n	800533e <_printf_i+0x176>
 8005376:	0659      	lsls	r1, r3, #25
 8005378:	bf48      	it	mi
 800537a:	b2b6      	uxthmi	r6, r6
 800537c:	e7e6      	b.n	800534c <_printf_i+0x184>
 800537e:	4615      	mov	r5, r2
 8005380:	e7bb      	b.n	80052fa <_printf_i+0x132>
 8005382:	682b      	ldr	r3, [r5, #0]
 8005384:	6826      	ldr	r6, [r4, #0]
 8005386:	1d18      	adds	r0, r3, #4
 8005388:	6961      	ldr	r1, [r4, #20]
 800538a:	6028      	str	r0, [r5, #0]
 800538c:	0635      	lsls	r5, r6, #24
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	d501      	bpl.n	8005396 <_printf_i+0x1ce>
 8005392:	6019      	str	r1, [r3, #0]
 8005394:	e002      	b.n	800539c <_printf_i+0x1d4>
 8005396:	0670      	lsls	r0, r6, #25
 8005398:	d5fb      	bpl.n	8005392 <_printf_i+0x1ca>
 800539a:	8019      	strh	r1, [r3, #0]
 800539c:	2300      	movs	r3, #0
 800539e:	4615      	mov	r5, r2
 80053a0:	6123      	str	r3, [r4, #16]
 80053a2:	e7ba      	b.n	800531a <_printf_i+0x152>
 80053a4:	682b      	ldr	r3, [r5, #0]
 80053a6:	2100      	movs	r1, #0
 80053a8:	1d1a      	adds	r2, r3, #4
 80053aa:	602a      	str	r2, [r5, #0]
 80053ac:	681d      	ldr	r5, [r3, #0]
 80053ae:	6862      	ldr	r2, [r4, #4]
 80053b0:	4628      	mov	r0, r5
 80053b2:	f000 f83f 	bl	8005434 <memchr>
 80053b6:	b108      	cbz	r0, 80053bc <_printf_i+0x1f4>
 80053b8:	1b40      	subs	r0, r0, r5
 80053ba:	6060      	str	r0, [r4, #4]
 80053bc:	6863      	ldr	r3, [r4, #4]
 80053be:	6123      	str	r3, [r4, #16]
 80053c0:	2300      	movs	r3, #0
 80053c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053c6:	e7a8      	b.n	800531a <_printf_i+0x152>
 80053c8:	462a      	mov	r2, r5
 80053ca:	4649      	mov	r1, r9
 80053cc:	4640      	mov	r0, r8
 80053ce:	6923      	ldr	r3, [r4, #16]
 80053d0:	47d0      	blx	sl
 80053d2:	3001      	adds	r0, #1
 80053d4:	d0ab      	beq.n	800532e <_printf_i+0x166>
 80053d6:	6823      	ldr	r3, [r4, #0]
 80053d8:	079b      	lsls	r3, r3, #30
 80053da:	d413      	bmi.n	8005404 <_printf_i+0x23c>
 80053dc:	68e0      	ldr	r0, [r4, #12]
 80053de:	9b03      	ldr	r3, [sp, #12]
 80053e0:	4298      	cmp	r0, r3
 80053e2:	bfb8      	it	lt
 80053e4:	4618      	movlt	r0, r3
 80053e6:	e7a4      	b.n	8005332 <_printf_i+0x16a>
 80053e8:	2301      	movs	r3, #1
 80053ea:	4632      	mov	r2, r6
 80053ec:	4649      	mov	r1, r9
 80053ee:	4640      	mov	r0, r8
 80053f0:	47d0      	blx	sl
 80053f2:	3001      	adds	r0, #1
 80053f4:	d09b      	beq.n	800532e <_printf_i+0x166>
 80053f6:	3501      	adds	r5, #1
 80053f8:	68e3      	ldr	r3, [r4, #12]
 80053fa:	9903      	ldr	r1, [sp, #12]
 80053fc:	1a5b      	subs	r3, r3, r1
 80053fe:	42ab      	cmp	r3, r5
 8005400:	dcf2      	bgt.n	80053e8 <_printf_i+0x220>
 8005402:	e7eb      	b.n	80053dc <_printf_i+0x214>
 8005404:	2500      	movs	r5, #0
 8005406:	f104 0619 	add.w	r6, r4, #25
 800540a:	e7f5      	b.n	80053f8 <_printf_i+0x230>
 800540c:	08005a99 	.word	0x08005a99
 8005410:	08005aaa 	.word	0x08005aaa

08005414 <_sbrk_r>:
 8005414:	b538      	push	{r3, r4, r5, lr}
 8005416:	2300      	movs	r3, #0
 8005418:	4d05      	ldr	r5, [pc, #20]	; (8005430 <_sbrk_r+0x1c>)
 800541a:	4604      	mov	r4, r0
 800541c:	4608      	mov	r0, r1
 800541e:	602b      	str	r3, [r5, #0]
 8005420:	f7fb fd70 	bl	8000f04 <_sbrk>
 8005424:	1c43      	adds	r3, r0, #1
 8005426:	d102      	bne.n	800542e <_sbrk_r+0x1a>
 8005428:	682b      	ldr	r3, [r5, #0]
 800542a:	b103      	cbz	r3, 800542e <_sbrk_r+0x1a>
 800542c:	6023      	str	r3, [r4, #0]
 800542e:	bd38      	pop	{r3, r4, r5, pc}
 8005430:	20000730 	.word	0x20000730

08005434 <memchr>:
 8005434:	4603      	mov	r3, r0
 8005436:	b510      	push	{r4, lr}
 8005438:	b2c9      	uxtb	r1, r1
 800543a:	4402      	add	r2, r0
 800543c:	4293      	cmp	r3, r2
 800543e:	4618      	mov	r0, r3
 8005440:	d101      	bne.n	8005446 <memchr+0x12>
 8005442:	2000      	movs	r0, #0
 8005444:	e003      	b.n	800544e <memchr+0x1a>
 8005446:	7804      	ldrb	r4, [r0, #0]
 8005448:	3301      	adds	r3, #1
 800544a:	428c      	cmp	r4, r1
 800544c:	d1f6      	bne.n	800543c <memchr+0x8>
 800544e:	bd10      	pop	{r4, pc}

08005450 <memcpy>:
 8005450:	440a      	add	r2, r1
 8005452:	4291      	cmp	r1, r2
 8005454:	f100 33ff 	add.w	r3, r0, #4294967295
 8005458:	d100      	bne.n	800545c <memcpy+0xc>
 800545a:	4770      	bx	lr
 800545c:	b510      	push	{r4, lr}
 800545e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005462:	4291      	cmp	r1, r2
 8005464:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005468:	d1f9      	bne.n	800545e <memcpy+0xe>
 800546a:	bd10      	pop	{r4, pc}

0800546c <memmove>:
 800546c:	4288      	cmp	r0, r1
 800546e:	b510      	push	{r4, lr}
 8005470:	eb01 0402 	add.w	r4, r1, r2
 8005474:	d902      	bls.n	800547c <memmove+0x10>
 8005476:	4284      	cmp	r4, r0
 8005478:	4623      	mov	r3, r4
 800547a:	d807      	bhi.n	800548c <memmove+0x20>
 800547c:	1e43      	subs	r3, r0, #1
 800547e:	42a1      	cmp	r1, r4
 8005480:	d008      	beq.n	8005494 <memmove+0x28>
 8005482:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005486:	f803 2f01 	strb.w	r2, [r3, #1]!
 800548a:	e7f8      	b.n	800547e <memmove+0x12>
 800548c:	4601      	mov	r1, r0
 800548e:	4402      	add	r2, r0
 8005490:	428a      	cmp	r2, r1
 8005492:	d100      	bne.n	8005496 <memmove+0x2a>
 8005494:	bd10      	pop	{r4, pc}
 8005496:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800549a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800549e:	e7f7      	b.n	8005490 <memmove+0x24>

080054a0 <__malloc_lock>:
 80054a0:	4801      	ldr	r0, [pc, #4]	; (80054a8 <__malloc_lock+0x8>)
 80054a2:	f7ff bc2f 	b.w	8004d04 <__retarget_lock_acquire_recursive>
 80054a6:	bf00      	nop
 80054a8:	20000724 	.word	0x20000724

080054ac <__malloc_unlock>:
 80054ac:	4801      	ldr	r0, [pc, #4]	; (80054b4 <__malloc_unlock+0x8>)
 80054ae:	f7ff bc2a 	b.w	8004d06 <__retarget_lock_release_recursive>
 80054b2:	bf00      	nop
 80054b4:	20000724 	.word	0x20000724

080054b8 <_free_r>:
 80054b8:	b538      	push	{r3, r4, r5, lr}
 80054ba:	4605      	mov	r5, r0
 80054bc:	2900      	cmp	r1, #0
 80054be:	d040      	beq.n	8005542 <_free_r+0x8a>
 80054c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054c4:	1f0c      	subs	r4, r1, #4
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	bfb8      	it	lt
 80054ca:	18e4      	addlt	r4, r4, r3
 80054cc:	f7ff ffe8 	bl	80054a0 <__malloc_lock>
 80054d0:	4a1c      	ldr	r2, [pc, #112]	; (8005544 <_free_r+0x8c>)
 80054d2:	6813      	ldr	r3, [r2, #0]
 80054d4:	b933      	cbnz	r3, 80054e4 <_free_r+0x2c>
 80054d6:	6063      	str	r3, [r4, #4]
 80054d8:	6014      	str	r4, [r2, #0]
 80054da:	4628      	mov	r0, r5
 80054dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80054e0:	f7ff bfe4 	b.w	80054ac <__malloc_unlock>
 80054e4:	42a3      	cmp	r3, r4
 80054e6:	d908      	bls.n	80054fa <_free_r+0x42>
 80054e8:	6820      	ldr	r0, [r4, #0]
 80054ea:	1821      	adds	r1, r4, r0
 80054ec:	428b      	cmp	r3, r1
 80054ee:	bf01      	itttt	eq
 80054f0:	6819      	ldreq	r1, [r3, #0]
 80054f2:	685b      	ldreq	r3, [r3, #4]
 80054f4:	1809      	addeq	r1, r1, r0
 80054f6:	6021      	streq	r1, [r4, #0]
 80054f8:	e7ed      	b.n	80054d6 <_free_r+0x1e>
 80054fa:	461a      	mov	r2, r3
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	b10b      	cbz	r3, 8005504 <_free_r+0x4c>
 8005500:	42a3      	cmp	r3, r4
 8005502:	d9fa      	bls.n	80054fa <_free_r+0x42>
 8005504:	6811      	ldr	r1, [r2, #0]
 8005506:	1850      	adds	r0, r2, r1
 8005508:	42a0      	cmp	r0, r4
 800550a:	d10b      	bne.n	8005524 <_free_r+0x6c>
 800550c:	6820      	ldr	r0, [r4, #0]
 800550e:	4401      	add	r1, r0
 8005510:	1850      	adds	r0, r2, r1
 8005512:	4283      	cmp	r3, r0
 8005514:	6011      	str	r1, [r2, #0]
 8005516:	d1e0      	bne.n	80054da <_free_r+0x22>
 8005518:	6818      	ldr	r0, [r3, #0]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	4401      	add	r1, r0
 800551e:	6011      	str	r1, [r2, #0]
 8005520:	6053      	str	r3, [r2, #4]
 8005522:	e7da      	b.n	80054da <_free_r+0x22>
 8005524:	d902      	bls.n	800552c <_free_r+0x74>
 8005526:	230c      	movs	r3, #12
 8005528:	602b      	str	r3, [r5, #0]
 800552a:	e7d6      	b.n	80054da <_free_r+0x22>
 800552c:	6820      	ldr	r0, [r4, #0]
 800552e:	1821      	adds	r1, r4, r0
 8005530:	428b      	cmp	r3, r1
 8005532:	bf01      	itttt	eq
 8005534:	6819      	ldreq	r1, [r3, #0]
 8005536:	685b      	ldreq	r3, [r3, #4]
 8005538:	1809      	addeq	r1, r1, r0
 800553a:	6021      	streq	r1, [r4, #0]
 800553c:	6063      	str	r3, [r4, #4]
 800553e:	6054      	str	r4, [r2, #4]
 8005540:	e7cb      	b.n	80054da <_free_r+0x22>
 8005542:	bd38      	pop	{r3, r4, r5, pc}
 8005544:	20000728 	.word	0x20000728

08005548 <_realloc_r>:
 8005548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800554c:	4680      	mov	r8, r0
 800554e:	4614      	mov	r4, r2
 8005550:	460e      	mov	r6, r1
 8005552:	b921      	cbnz	r1, 800555e <_realloc_r+0x16>
 8005554:	4611      	mov	r1, r2
 8005556:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800555a:	f7ff bbf5 	b.w	8004d48 <_malloc_r>
 800555e:	b92a      	cbnz	r2, 800556c <_realloc_r+0x24>
 8005560:	f7ff ffaa 	bl	80054b8 <_free_r>
 8005564:	4625      	mov	r5, r4
 8005566:	4628      	mov	r0, r5
 8005568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800556c:	f000 f81b 	bl	80055a6 <_malloc_usable_size_r>
 8005570:	4284      	cmp	r4, r0
 8005572:	4607      	mov	r7, r0
 8005574:	d802      	bhi.n	800557c <_realloc_r+0x34>
 8005576:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800557a:	d812      	bhi.n	80055a2 <_realloc_r+0x5a>
 800557c:	4621      	mov	r1, r4
 800557e:	4640      	mov	r0, r8
 8005580:	f7ff fbe2 	bl	8004d48 <_malloc_r>
 8005584:	4605      	mov	r5, r0
 8005586:	2800      	cmp	r0, #0
 8005588:	d0ed      	beq.n	8005566 <_realloc_r+0x1e>
 800558a:	42bc      	cmp	r4, r7
 800558c:	4622      	mov	r2, r4
 800558e:	4631      	mov	r1, r6
 8005590:	bf28      	it	cs
 8005592:	463a      	movcs	r2, r7
 8005594:	f7ff ff5c 	bl	8005450 <memcpy>
 8005598:	4631      	mov	r1, r6
 800559a:	4640      	mov	r0, r8
 800559c:	f7ff ff8c 	bl	80054b8 <_free_r>
 80055a0:	e7e1      	b.n	8005566 <_realloc_r+0x1e>
 80055a2:	4635      	mov	r5, r6
 80055a4:	e7df      	b.n	8005566 <_realloc_r+0x1e>

080055a6 <_malloc_usable_size_r>:
 80055a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055aa:	1f18      	subs	r0, r3, #4
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	bfbc      	itt	lt
 80055b0:	580b      	ldrlt	r3, [r1, r0]
 80055b2:	18c0      	addlt	r0, r0, r3
 80055b4:	4770      	bx	lr
	...

080055b8 <_init>:
 80055b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ba:	bf00      	nop
 80055bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055be:	bc08      	pop	{r3}
 80055c0:	469e      	mov	lr, r3
 80055c2:	4770      	bx	lr

080055c4 <_fini>:
 80055c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055c6:	bf00      	nop
 80055c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055ca:	bc08      	pop	{r3}
 80055cc:	469e      	mov	lr, r3
 80055ce:	4770      	bx	lr
